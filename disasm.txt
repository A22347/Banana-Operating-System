
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 e3 fb 00 00       	call   c000fc03 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 83 87 02 00       	call   c00287a8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 5e 93 02 c0       	mov    ebx,0xc002935e
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 6c 93 02 c0    	cmp    ebx,0xc002936c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 58 db 02 c0       	mov    eax,0xc002db58
c0000049:	3d 58 db 02 c0       	cmp    eax,0xc002db58
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 58 db 02 c0       	push   0xc002db58
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 58 db 02 c0       	mov    eax,0xc002db58
c0000075:	2d 58 db 02 c0       	sub    eax,0xc002db58
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 58 db 02 c0       	push   0xc002db58
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 88 e1 02 c0 00 	cmp    BYTE PTR ds:0xc002e188,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 74 93 02 c0       	mov    ebx,0xc0029374
c00000bb:	81 eb 70 93 02 c0    	sub    ebx,0xc0029370
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 70 93 02 c0       	mov    esi,0xc0029370
c00000ca:	a1 8c e1 02 c0       	mov    eax,ds:0xc002e18c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 8c e1 02 c0       	mov    ds:0xc002e18c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 8c e1 02 c0       	mov    eax,ds:0xc002e18c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 58 db 02 c0       	push   0xc002db58
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 88 e1 02 c0 01 	mov    BYTE PTR ds:0xc002e188,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 90 e1 02 c0       	push   0xc002e190
c000012c:	68 58 db 02 c0       	push   0xc002db58
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 43 d6 01 00       	call   c001d9e6 <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 2a 29 01 00       	call   c0012ce5 <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 21 d6 01 00       	call   c001d9e6 <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 6f da 01 00       	call   c001de53 <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 57 e0 01 00       	call   c001e444 <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 d0 e5 02 c0 	lgdtd  ds:0xc002e5d0
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	e8 0e 46 01 00       	call   c0014bef <int_handler>
c00005e1:	81 c4 04 00 00 00    	add    esp,0x4
c00005e7:	0f a9                	pop    gs
c00005e9:	0f a1                	pop    fs
c00005eb:	07                   	pop    es
c00005ec:	1f                   	pop    ds
c00005ed:	61                   	popa   
c00005ee:	81 c4 08 00 00 00    	add    esp,0x8
c00005f4:	cf                   	iret   

c00005f5 <irq16>:
c00005f5:	fa                   	cli    
c00005f6:	6a 00                	push   0x0
c00005f8:	6a 30                	push   0x30
c00005fa:	e9 c5 ff ff ff       	jmp    c00005c4 <int_common_stub>

c00005ff <irq17>:
c00005ff:	fa                   	cli    
c0000600:	6a 00                	push   0x0
c0000602:	6a 31                	push   0x31
c0000604:	e9 bb ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000609 <irq18>:
c0000609:	fa                   	cli    
c000060a:	6a 00                	push   0x0
c000060c:	6a 32                	push   0x32
c000060e:	e9 b1 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000613 <irq19>:
c0000613:	fa                   	cli    
c0000614:	6a 00                	push   0x0
c0000616:	6a 33                	push   0x33
c0000618:	e9 a7 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061d <irq20>:
c000061d:	fa                   	cli    
c000061e:	6a 00                	push   0x0
c0000620:	6a 34                	push   0x34
c0000622:	e9 9d ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000627 <irq21>:
c0000627:	fa                   	cli    
c0000628:	6a 00                	push   0x0
c000062a:	6a 35                	push   0x35
c000062c:	e9 93 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000631 <irq22>:
c0000631:	fa                   	cli    
c0000632:	6a 00                	push   0x0
c0000634:	6a 36                	push   0x36
c0000636:	e9 89 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063b <irq23>:
c000063b:	fa                   	cli    
c000063c:	6a 00                	push   0x0
c000063e:	6a 37                	push   0x37
c0000640:	e9 7f ff ff ff       	jmp    c00005c4 <int_common_stub>
c0000645:	66 90                	xchg   ax,ax
c0000647:	90                   	nop

c0000648 <memcmp>:
c0000648:	56                   	push   esi
c0000649:	53                   	push   ebx
c000064a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000064e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000652:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000656:	85 f6                	test   esi,esi
c0000658:	74 1d                	je     c0000677 <memcmp+0x2f>
c000065a:	8a 08                	mov    cl,BYTE PTR [eax]
c000065c:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000065f:	38 cb                	cmp    bl,cl
c0000661:	75 19                	jne    c000067c <memcmp+0x34>
c0000663:	01 c6                	add    esi,eax
c0000665:	eb 0a                	jmp    c0000671 <memcmp+0x29>
c0000667:	90                   	nop
c0000668:	8a 08                	mov    cl,BYTE PTR [eax]
c000066a:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000066d:	38 d9                	cmp    cl,bl
c000066f:	75 0b                	jne    c000067c <memcmp+0x34>
c0000671:	40                   	inc    eax
c0000672:	42                   	inc    edx
c0000673:	39 f0                	cmp    eax,esi
c0000675:	75 f1                	jne    c0000668 <memcmp+0x20>
c0000677:	31 c0                	xor    eax,eax
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    
c000067c:	0f b6 c1             	movzx  eax,cl
c000067f:	29 d8                	sub    eax,ebx
c0000681:	5b                   	pop    ebx
c0000682:	5e                   	pop    esi
c0000683:	c3                   	ret    

c0000684 <memmove>:
c0000684:	55                   	push   ebp
c0000685:	57                   	push   edi
c0000686:	56                   	push   esi
c0000687:	53                   	push   ebx
c0000688:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000068c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000690:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000694:	39 dd                	cmp    ebp,ebx
c0000696:	0f 83 80 00 00 00    	jae    c000071c <memmove+0x98>
c000069c:	85 d2                	test   edx,edx
c000069e:	74 74                	je     c0000714 <memmove+0x90>
c00006a0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a3:	8d 75 04             	lea    esi,[ebp+0x4]
c00006a6:	39 cd                	cmp    ebp,ecx
c00006a8:	0f 93 c1             	setae  cl
c00006ab:	39 f3                	cmp    ebx,esi
c00006ad:	0f 93 c0             	setae  al
c00006b0:	89 c6                	mov    esi,eax
c00006b2:	09 ce                	or     esi,ecx
c00006b4:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006b7:	89 f0                	mov    eax,esi
c00006b9:	83 f9 0c             	cmp    ecx,0xc
c00006bc:	0f 97 c1             	seta   cl
c00006bf:	84 c8                	test   al,cl
c00006c1:	74 75                	je     c0000738 <memmove+0xb4>
c00006c3:	89 e9                	mov    ecx,ebp
c00006c5:	09 d9                	or     ecx,ebx
c00006c7:	83 e1 03             	and    ecx,0x3
c00006ca:	75 6c                	jne    c0000738 <memmove+0xb4>
c00006cc:	89 d7                	mov    edi,edx
c00006ce:	89 d9                	mov    ecx,ebx
c00006d0:	83 e7 fc             	and    edi,0xfffffffc
c00006d3:	89 ee                	mov    esi,ebp
c00006d5:	01 df                	add    edi,ebx
c00006d7:	90                   	nop
c00006d8:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006da:	83 c6 04             	add    esi,0x4
c00006dd:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e0:	83 c1 04             	add    ecx,0x4
c00006e3:	39 f9                	cmp    ecx,edi
c00006e5:	75 f1                	jne    c00006d8 <memmove+0x54>
c00006e7:	89 d1                	mov    ecx,edx
c00006e9:	89 d7                	mov    edi,edx
c00006eb:	83 e1 fc             	and    ecx,0xfffffffc
c00006ee:	29 cf                	sub    edi,ecx
c00006f0:	01 cb                	add    ebx,ecx
c00006f2:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006f6:	39 ca                	cmp    edx,ecx
c00006f8:	74 1a                	je     c0000714 <memmove+0x90>
c00006fa:	8a 03                	mov    al,BYTE PTR [ebx]
c00006fc:	83 ff 01             	cmp    edi,0x1
c00006ff:	88 06                	mov    BYTE PTR [esi],al
c0000701:	74 11                	je     c0000714 <memmove+0x90>
c0000703:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0000706:	83 ff 02             	cmp    edi,0x2
c0000709:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c000070c:	74 06                	je     c0000714 <memmove+0x90>
c000070e:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000711:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000714:	5b                   	pop    ebx
c0000715:	89 e8                	mov    eax,ebp
c0000717:	5e                   	pop    esi
c0000718:	5f                   	pop    edi
c0000719:	5d                   	pop    ebp
c000071a:	c3                   	ret    
c000071b:	90                   	nop
c000071c:	76 f6                	jbe    c0000714 <memmove+0x90>
c000071e:	85 d2                	test   edx,edx
c0000720:	74 f2                	je     c0000714 <memmove+0x90>
c0000722:	4b                   	dec    ebx
c0000723:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000726:	66 90                	xchg   ax,ax
c0000728:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072b:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c000072e:	4a                   	dec    edx
c000072f:	75 f7                	jne    c0000728 <memmove+0xa4>
c0000731:	5b                   	pop    ebx
c0000732:	89 e8                	mov    eax,ebp
c0000734:	5e                   	pop    esi
c0000735:	5f                   	pop    edi
c0000736:	5d                   	pop    ebp
c0000737:	c3                   	ret    
c0000738:	01 ea                	add    edx,ebp
c000073a:	89 e9                	mov    ecx,ebp
c000073c:	8a 03                	mov    al,BYTE PTR [ebx]
c000073e:	41                   	inc    ecx
c000073f:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000742:	43                   	inc    ebx
c0000743:	39 d1                	cmp    ecx,edx
c0000745:	75 f5                	jne    c000073c <memmove+0xb8>
c0000747:	eb cb                	jmp    c0000714 <memmove+0x90>
c0000749:	8d 76 00             	lea    esi,[esi+0x0]

c000074c <memcpy>:
c000074c:	57                   	push   edi
c000074d:	56                   	push   esi
c000074e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0000752:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000756:	a8 03                	test   al,0x3
c0000758:	74 12                	je     c000076c <memcpy+0x20>
c000075a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000075e:	89 c1                	mov    ecx,eax
c0000760:	fc                   	cld    
c0000761:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000763:	29 c7                	sub    edi,eax
c0000765:	5e                   	pop    esi
c0000766:	89 f8                	mov    eax,edi
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax
c000076c:	89 c1                	mov    ecx,eax
c000076e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000772:	c1 e9 02             	shr    ecx,0x2
c0000775:	fc                   	cld    
c0000776:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000778:	29 c7                	sub    edi,eax
c000077a:	5e                   	pop    esi
c000077b:	89 f8                	mov    eax,edi
c000077d:	5f                   	pop    edi
c000077e:	c3                   	ret    
c000077f:	90                   	nop

c0000780 <memset>:
c0000780:	57                   	push   edi
c0000781:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000785:	85 c9                	test   ecx,ecx
c0000787:	74 0b                	je     c0000794 <memset+0x14>
c0000789:	fc                   	cld    
c000078a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000078e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000792:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000798:	5f                   	pop    edi
c0000799:	c3                   	ret    
c000079a:	66 90                	xchg   ax,ax

c000079c <strlen>:
c000079c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00007a0:	31 c0                	xor    eax,eax
c00007a2:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00007a5:	74 09                	je     c00007b0 <strlen+0x14>
c00007a7:	90                   	nop
c00007a8:	40                   	inc    eax
c00007a9:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007ad:	75 f9                	jne    c00007a8 <strlen+0xc>
c00007af:	c3                   	ret    
c00007b0:	c3                   	ret    
c00007b1:	8d 76 00             	lea    esi,[esi+0x0]

c00007b4 <strpbrk>:
c00007b4:	57                   	push   edi
c00007b5:	56                   	push   esi
c00007b6:	53                   	push   ebx
c00007b7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007bb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007bf:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007c1:	84 db                	test   bl,bl
c00007c3:	74 21                	je     c00007e6 <strpbrk+0x32>
c00007c5:	8a 07                	mov    al,BYTE PTR [edi]
c00007c7:	84 c0                	test   al,al
c00007c9:	74 14                	je     c00007df <strpbrk+0x2b>
c00007cb:	38 d8                	cmp    al,bl
c00007cd:	74 19                	je     c00007e8 <strpbrk+0x34>
c00007cf:	89 fa                	mov    edx,edi
c00007d1:	eb 05                	jmp    c00007d8 <strpbrk+0x24>
c00007d3:	90                   	nop
c00007d4:	38 d9                	cmp    cl,bl
c00007d6:	74 10                	je     c00007e8 <strpbrk+0x34>
c00007d8:	42                   	inc    edx
c00007d9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007db:	84 c9                	test   cl,cl
c00007dd:	75 f5                	jne    c00007d4 <strpbrk+0x20>
c00007df:	46                   	inc    esi
c00007e0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007e2:	84 db                	test   bl,bl
c00007e4:	75 e1                	jne    c00007c7 <strpbrk+0x13>
c00007e6:	31 f6                	xor    esi,esi
c00007e8:	89 f0                	mov    eax,esi
c00007ea:	5b                   	pop    ebx
c00007eb:	5e                   	pop    esi
c00007ec:	5f                   	pop    edi
c00007ed:	c3                   	ret    
c00007ee:	66 90                	xchg   ax,ax

c00007f0 <strtok>:
c00007f0:	56                   	push   esi
c00007f1:	53                   	push   ebx
c00007f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007fa:	85 db                	test   ebx,ebx
c00007fc:	75 07                	jne    c0000805 <strtok+0x15>
c00007fe:	eb 2c                	jmp    c000082c <strtok+0x3c>
c0000800:	43                   	inc    ebx
c0000801:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000805:	56                   	push   esi
c0000806:	53                   	push   ebx
c0000807:	e8 a8 ff ff ff       	call   c00007b4 <strpbrk>
c000080c:	5a                   	pop    edx
c000080d:	a3 a8 e1 02 c0       	mov    ds:0xc002e1a8,eax
c0000812:	59                   	pop    ecx
c0000813:	39 d8                	cmp    eax,ebx
c0000815:	74 e9                	je     c0000800 <strtok+0x10>
c0000817:	85 c0                	test   eax,eax
c0000819:	74 1b                	je     c0000836 <strtok+0x46>
c000081b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000081e:	8d 50 01             	lea    edx,[eax+0x1]
c0000821:	89 d8                	mov    eax,ebx
c0000823:	89 15 a8 e1 02 c0    	mov    DWORD PTR ds:0xc002e1a8,edx
c0000829:	5b                   	pop    ebx
c000082a:	5e                   	pop    esi
c000082b:	c3                   	ret    
c000082c:	8b 1d a8 e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e1a8
c0000832:	85 db                	test   ebx,ebx
c0000834:	75 cf                	jne    c0000805 <strtok+0x15>
c0000836:	31 c0                	xor    eax,eax
c0000838:	5b                   	pop    ebx
c0000839:	5e                   	pop    esi
c000083a:	c3                   	ret    
c000083b:	90                   	nop

c000083c <strcpy>:
c000083c:	53                   	push   ebx
c000083d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000841:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000845:	89 c3                	mov    ebx,eax
c0000847:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000849:	84 d2                	test   dl,dl
c000084b:	74 0d                	je     c000085a <strcpy+0x1e>
c000084d:	8d 76 00             	lea    esi,[esi+0x0]
c0000850:	88 13                	mov    BYTE PTR [ebx],dl
c0000852:	41                   	inc    ecx
c0000853:	43                   	inc    ebx
c0000854:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000856:	84 d2                	test   dl,dl
c0000858:	75 f6                	jne    c0000850 <strcpy+0x14>
c000085a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000085d:	5b                   	pop    ebx
c000085e:	c3                   	ret    
c000085f:	90                   	nop

c0000860 <strncpy>:
c0000860:	55                   	push   ebp
c0000861:	57                   	push   edi
c0000862:	56                   	push   esi
c0000863:	53                   	push   ebx
c0000864:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000868:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000086c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000870:	85 c0                	test   eax,eax
c0000872:	74 39                	je     c00008ad <strncpy+0x4d>
c0000874:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000876:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000879:	8d 55 01             	lea    edx,[ebp+0x1]
c000087c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000087f:	84 db                	test   bl,bl
c0000881:	74 31                	je     c00008b4 <strncpy+0x54>
c0000883:	85 c9                	test   ecx,ecx
c0000885:	74 26                	je     c00008ad <strncpy+0x4d>
c0000887:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000088a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000088d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000890:	8d 46 02             	lea    eax,[esi+0x2]
c0000893:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000896:	84 db                	test   bl,bl
c0000898:	75 0f                	jne    c00008a9 <strncpy+0x49>
c000089a:	eb 18                	jmp    c00008b4 <strncpy+0x54>
c000089c:	40                   	inc    eax
c000089d:	42                   	inc    edx
c000089e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00008a1:	49                   	dec    ecx
c00008a2:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008a5:	84 db                	test   bl,bl
c00008a7:	74 0b                	je     c00008b4 <strncpy+0x54>
c00008a9:	85 c9                	test   ecx,ecx
c00008ab:	75 ef                	jne    c000089c <strncpy+0x3c>
c00008ad:	5b                   	pop    ebx
c00008ae:	89 e8                	mov    eax,ebp
c00008b0:	5e                   	pop    esi
c00008b1:	5f                   	pop    edi
c00008b2:	5d                   	pop    ebp
c00008b3:	c3                   	ret    
c00008b4:	85 c9                	test   ecx,ecx
c00008b6:	74 f5                	je     c00008ad <strncpy+0x4d>
c00008b8:	fc                   	cld    
c00008b9:	31 c0                	xor    eax,eax
c00008bb:	89 d7                	mov    edi,edx
c00008bd:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008bf:	89 e8                	mov    eax,ebp
c00008c1:	5b                   	pop    ebx
c00008c2:	5e                   	pop    esi
c00008c3:	5f                   	pop    edi
c00008c4:	5d                   	pop    ebp
c00008c5:	c3                   	ret    
c00008c6:	66 90                	xchg   ax,ax

c00008c8 <strcmp>:
c00008c8:	56                   	push   esi
c00008c9:	53                   	push   ebx
c00008ca:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008ce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008d4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008d7:	38 d1                	cmp    cl,dl
c00008d9:	75 1d                	jne    c00008f8 <strcmp+0x30>
c00008db:	84 c9                	test   cl,cl
c00008dd:	74 21                	je     c0000900 <strcmp+0x38>
c00008df:	b8 01 00 00 00       	mov    eax,0x1
c00008e4:	eb 07                	jmp    c00008ed <strcmp+0x25>
c00008e6:	66 90                	xchg   ax,ax
c00008e8:	40                   	inc    eax
c00008e9:	84 d2                	test   dl,dl
c00008eb:	74 13                	je     c0000900 <strcmp+0x38>
c00008ed:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008f0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008f4:	38 ca                	cmp    dl,cl
c00008f6:	74 f0                	je     c00008e8 <strcmp+0x20>
c00008f8:	0f b6 c2             	movzx  eax,dl
c00008fb:	5b                   	pop    ebx
c00008fc:	29 c8                	sub    eax,ecx
c00008fe:	5e                   	pop    esi
c00008ff:	c3                   	ret    
c0000900:	31 c0                	xor    eax,eax
c0000902:	5b                   	pop    ebx
c0000903:	5e                   	pop    esi
c0000904:	c3                   	ret    
c0000905:	8d 76 00             	lea    esi,[esi+0x0]

c0000908 <strchr>:
c0000908:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000090c:	8a 10                	mov    dl,BYTE PTR [eax]
c000090e:	84 d2                	test   dl,dl
c0000910:	74 15                	je     c0000927 <strchr+0x1f>
c0000912:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0000916:	38 ca                	cmp    dl,cl
c0000918:	75 06                	jne    c0000920 <strchr+0x18>
c000091a:	eb 0e                	jmp    c000092a <strchr+0x22>
c000091c:	38 ca                	cmp    dl,cl
c000091e:	74 09                	je     c0000929 <strchr+0x21>
c0000920:	40                   	inc    eax
c0000921:	8a 10                	mov    dl,BYTE PTR [eax]
c0000923:	84 d2                	test   dl,dl
c0000925:	75 f5                	jne    c000091c <strchr+0x14>
c0000927:	31 c0                	xor    eax,eax
c0000929:	c3                   	ret    
c000092a:	c3                   	ret    
c000092b:	90                   	nop

c000092c <strncmp>:
c000092c:	57                   	push   edi
c000092d:	56                   	push   esi
c000092e:	53                   	push   ebx
c000092f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000933:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000937:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000093b:	85 ff                	test   edi,edi
c000093d:	74 28                	je     c0000967 <strncmp+0x3b>
c000093f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000941:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000944:	38 d1                	cmp    cl,dl
c0000946:	75 28                	jne    c0000970 <strncmp+0x44>
c0000948:	8d 46 01             	lea    eax,[esi+0x1]
c000094b:	84 c9                	test   cl,cl
c000094d:	74 18                	je     c0000967 <strncmp+0x3b>
c000094f:	01 fe                	add    esi,edi
c0000951:	eb 0f                	jmp    c0000962 <strncmp+0x36>
c0000953:	90                   	nop
c0000954:	8a 10                	mov    dl,BYTE PTR [eax]
c0000956:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000959:	38 ca                	cmp    dl,cl
c000095b:	75 13                	jne    c0000970 <strncmp+0x44>
c000095d:	40                   	inc    eax
c000095e:	84 d2                	test   dl,dl
c0000960:	74 05                	je     c0000967 <strncmp+0x3b>
c0000962:	43                   	inc    ebx
c0000963:	39 c6                	cmp    esi,eax
c0000965:	75 ed                	jne    c0000954 <strncmp+0x28>
c0000967:	5b                   	pop    ebx
c0000968:	31 c0                	xor    eax,eax
c000096a:	5e                   	pop    esi
c000096b:	5f                   	pop    edi
c000096c:	c3                   	ret    
c000096d:	8d 76 00             	lea    esi,[esi+0x0]
c0000970:	5b                   	pop    ebx
c0000971:	0f b6 c2             	movzx  eax,dl
c0000974:	5e                   	pop    esi
c0000975:	29 c8                	sub    eax,ecx
c0000977:	5f                   	pop    edi
c0000978:	c3                   	ret    
c0000979:	8d 76 00             	lea    esi,[esi+0x0]

c000097c <strcat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000982:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000986:	89 c3                	mov    ebx,eax
c0000988:	eb 04                	jmp    c000098e <strcat+0x12>
c000098a:	66 90                	xchg   ax,ax
c000098c:	89 d3                	mov    ebx,edx
c000098e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f5                	jne    c000098c <strcat+0x10>
c0000997:	31 d2                	xor    edx,edx
c0000999:	8d 76 00             	lea    esi,[esi+0x0]
c000099c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000099f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00009a2:	42                   	inc    edx
c00009a3:	84 c9                	test   cl,cl
c00009a5:	75 f5                	jne    c000099c <strcat+0x20>
c00009a7:	5b                   	pop    ebx
c00009a8:	5e                   	pop    esi
c00009a9:	c3                   	ret    
c00009aa:	66 90                	xchg   ax,ax

c00009ac <strncat>:
c00009ac:	56                   	push   esi
c00009ad:	53                   	push   ebx
c00009ae:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009b6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009ba:	85 f6                	test   esi,esi
c00009bc:	74 1e                	je     c00009dc <strncat+0x30>
c00009be:	89 c2                	mov    edx,eax
c00009c0:	42                   	inc    edx
c00009c1:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009c5:	75 f9                	jne    c00009c0 <strncat+0x14>
c00009c7:	01 ce                	add    esi,ecx
c00009c9:	eb 06                	jmp    c00009d1 <strncat+0x25>
c00009cb:	90                   	nop
c00009cc:	39 f1                	cmp    ecx,esi
c00009ce:	74 10                	je     c00009e0 <strncat+0x34>
c00009d0:	42                   	inc    edx
c00009d1:	41                   	inc    ecx
c00009d2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009d5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d8:	84 db                	test   bl,bl
c00009da:	75 f0                	jne    c00009cc <strncat+0x20>
c00009dc:	5b                   	pop    ebx
c00009dd:	5e                   	pop    esi
c00009de:	c3                   	ret    
c00009df:	90                   	nop
c00009e0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009e3:	5b                   	pop    ebx
c00009e4:	5e                   	pop    esi
c00009e5:	c3                   	ret    
c00009e6:	66 90                	xchg   ax,ax

c00009e8 <strstr>:
c00009e8:	57                   	push   edi
c00009e9:	56                   	push   esi
c00009ea:	53                   	push   ebx
c00009eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009ef:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009f3:	57                   	push   edi
c00009f4:	e8 a3 fd ff ff       	call   c000079c <strlen>
c00009f9:	59                   	pop    ecx
c00009fa:	85 c0                	test   eax,eax
c00009fc:	74 2a                	je     c0000a28 <strstr+0x40>
c00009fe:	89 c6                	mov    esi,eax
c0000a00:	eb 12                	jmp    c0000a14 <strstr+0x2c>
c0000a02:	66 90                	xchg   ax,ax
c0000a04:	56                   	push   esi
c0000a05:	57                   	push   edi
c0000a06:	53                   	push   ebx
c0000a07:	e8 3c fc ff ff       	call   c0000648 <memcmp>
c0000a0c:	83 c4 0c             	add    esp,0xc
c0000a0f:	85 c0                	test   eax,eax
c0000a11:	74 15                	je     c0000a28 <strstr+0x40>
c0000a13:	43                   	inc    ebx
c0000a14:	53                   	push   ebx
c0000a15:	e8 82 fd ff ff       	call   c000079c <strlen>
c0000a1a:	5a                   	pop    edx
c0000a1b:	39 f0                	cmp    eax,esi
c0000a1d:	73 e5                	jae    c0000a04 <strstr+0x1c>
c0000a1f:	5b                   	pop    ebx
c0000a20:	31 c0                	xor    eax,eax
c0000a22:	5e                   	pop    esi
c0000a23:	5f                   	pop    edi
c0000a24:	c3                   	ret    
c0000a25:	8d 76 00             	lea    esi,[esi+0x0]
c0000a28:	89 d8                	mov    eax,ebx
c0000a2a:	5b                   	pop    ebx
c0000a2b:	5e                   	pop    esi
c0000a2c:	5f                   	pop    edi
c0000a2d:	c3                   	ret    
c0000a2e:	66 90                	xchg   ax,ax

c0000a30 <toupper>:
c0000a30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a34:	0f b6 d0             	movzx  edx,al
c0000a37:	f6 82 80 93 02 c0 02 	test   BYTE PTR [edx-0x3ffd6c80],0x2
c0000a3e:	74 03                	je     c0000a43 <toupper+0x13>
c0000a40:	83 e8 20             	sub    eax,0x20
c0000a43:	c3                   	ret    

c0000a44 <tolower>:
c0000a44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a48:	0f b6 d0             	movzx  edx,al
c0000a4b:	f6 82 80 93 02 c0 01 	test   BYTE PTR [edx-0x3ffd6c80],0x1
c0000a52:	74 03                	je     c0000a57 <tolower+0x13>
c0000a54:	83 c0 20             	add    eax,0x20
c0000a57:	c3                   	ret    

c0000a58 <simple_strtoul>:
c0000a58:	55                   	push   ebp
c0000a59:	57                   	push   edi
c0000a5a:	56                   	push   esi
c0000a5b:	53                   	push   ebx
c0000a5c:	83 ec 08             	sub    esp,0x8
c0000a5f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a63:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a67:	90                   	nop
c0000a68:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a6b:	f6 82 80 93 02 c0 08 	test   BYTE PTR [edx-0x3ffd6c80],0x8
c0000a72:	75 05                	jne    c0000a79 <simple_strtoul+0x21>
c0000a74:	80 fa 09             	cmp    dl,0x9
c0000a77:	75 03                	jne    c0000a7c <simple_strtoul+0x24>
c0000a79:	41                   	inc    ecx
c0000a7a:	eb ec                	jmp    c0000a68 <simple_strtoul+0x10>
c0000a7c:	80 fa 2d             	cmp    dl,0x2d
c0000a7f:	0f 84 1b 01 00 00    	je     c0000ba0 <simple_strtoul+0x148>
c0000a85:	80 fa 2b             	cmp    dl,0x2b
c0000a88:	0f 84 c2 00 00 00    	je     c0000b50 <simple_strtoul+0xf8>
c0000a8e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a96:	85 f6                	test   esi,esi
c0000a98:	0f 85 c3 00 00 00    	jne    c0000b61 <simple_strtoul+0x109>
c0000a9e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aa0:	80 fa 30             	cmp    dl,0x30
c0000aa3:	0f 84 47 01 00 00    	je     c0000bf0 <simple_strtoul+0x198>
c0000aa9:	be 0a 00 00 00       	mov    esi,0xa
c0000aae:	84 d2                	test   dl,dl
c0000ab0:	0f 84 6f 01 00 00    	je     c0000c25 <simple_strtoul+0x1cd>
c0000ab6:	31 ed                	xor    ebp,ebp
c0000ab8:	31 ff                	xor    edi,edi
c0000aba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ac1:	eb 2b                	jmp    c0000aee <simple_strtoul+0x96>
c0000ac3:	90                   	nop
c0000ac4:	83 eb 30             	sub    ebx,0x30
c0000ac7:	39 f3                	cmp    ebx,esi
c0000ac9:	73 4d                	jae    c0000b18 <simple_strtoul+0xc0>
c0000acb:	31 d2                	xor    edx,edx
c0000acd:	89 d8                	mov    eax,ebx
c0000acf:	f7 d0                	not    eax
c0000ad1:	f7 f6                	div    esi
c0000ad3:	39 f8                	cmp    eax,edi
c0000ad5:	0f 82 b1 00 00 00    	jb     c0000b8c <simple_strtoul+0x134>
c0000adb:	0f af fe             	imul   edi,esi
c0000ade:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ae5:	01 df                	add    edi,ebx
c0000ae7:	41                   	inc    ecx
c0000ae8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aea:	84 d2                	test   dl,dl
c0000aec:	74 2a                	je     c0000b18 <simple_strtoul+0xc0>
c0000aee:	0f b6 da             	movzx  ebx,dl
c0000af1:	f6 83 80 93 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6c80],0x4
c0000af8:	75 ca                	jne    c0000ac4 <simple_strtoul+0x6c>
c0000afa:	0f be d2             	movsx  edx,dl
c0000afd:	52                   	push   edx
c0000afe:	e8 2d ff ff ff       	call   c0000a30 <toupper>
c0000b03:	5b                   	pop    ebx
c0000b04:	0f b6 d0             	movzx  edx,al
c0000b07:	f6 82 80 93 02 c0 01 	test   BYTE PTR [edx-0x3ffd6c80],0x1
c0000b0e:	74 08                	je     c0000b18 <simple_strtoul+0xc0>
c0000b10:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b13:	39 f3                	cmp    ebx,esi
c0000b15:	72 b4                	jb     c0000acb <simple_strtoul+0x73>
c0000b17:	90                   	nop
c0000b18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b1c:	85 c0                	test   eax,eax
c0000b1e:	74 14                	je     c0000b34 <simple_strtoul+0xdc>
c0000b20:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b23:	09 f8                	or     eax,edi
c0000b25:	75 71                	jne    c0000b98 <simple_strtoul+0x140>
c0000b27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b2b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b2f:	31 ff                	xor    edi,edi
c0000b31:	89 30                	mov    DWORD PTR [eax],esi
c0000b33:	90                   	nop
c0000b34:	4d                   	dec    ebp
c0000b35:	75 05                	jne    c0000b3c <simple_strtoul+0xe4>
c0000b37:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b3c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b41:	75 02                	jne    c0000b45 <simple_strtoul+0xed>
c0000b43:	f7 df                	neg    edi
c0000b45:	83 c4 08             	add    esp,0x8
c0000b48:	89 f8                	mov    eax,edi
c0000b4a:	5b                   	pop    ebx
c0000b4b:	5e                   	pop    esi
c0000b4c:	5f                   	pop    edi
c0000b4d:	5d                   	pop    ebp
c0000b4e:	c3                   	ret    
c0000b4f:	90                   	nop
c0000b50:	41                   	inc    ecx
c0000b51:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b59:	85 f6                	test   esi,esi
c0000b5b:	0f 84 3d ff ff ff    	je     c0000a9e <simple_strtoul+0x46>
c0000b61:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b64:	83 f8 22             	cmp    eax,0x22
c0000b67:	77 6a                	ja     c0000bd3 <simple_strtoul+0x17b>
c0000b69:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b6b:	83 fe 08             	cmp    esi,0x8
c0000b6e:	0f 84 a2 00 00 00    	je     c0000c16 <simple_strtoul+0x1be>
c0000b74:	83 fe 10             	cmp    esi,0x10
c0000b77:	0f 85 31 ff ff ff    	jne    c0000aae <simple_strtoul+0x56>
c0000b7d:	80 fa 30             	cmp    dl,0x30
c0000b80:	74 2c                	je     c0000bae <simple_strtoul+0x156>
c0000b82:	be 10 00 00 00       	mov    esi,0x10
c0000b87:	e9 22 ff ff ff       	jmp    c0000aae <simple_strtoul+0x56>
c0000b8c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b91:	31 ff                	xor    edi,edi
c0000b93:	e9 4f ff ff ff       	jmp    c0000ae7 <simple_strtoul+0x8f>
c0000b98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b9c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b9e:	eb 94                	jmp    c0000b34 <simple_strtoul+0xdc>
c0000ba0:	41                   	inc    ecx
c0000ba1:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba9:	e9 e8 fe ff ff       	jmp    c0000a96 <simple_strtoul+0x3e>
c0000bae:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bb2:	88 04 24             	mov    BYTE PTR [esp],al
c0000bb5:	50                   	push   eax
c0000bb6:	e8 89 fe ff ff       	call   c0000a44 <tolower>
c0000bbb:	5e                   	pop    esi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	0f 84 84 00 00 00    	je     c0000c49 <simple_strtoul+0x1f1>
c0000bc5:	41                   	inc    ecx
c0000bc6:	be 10 00 00 00       	mov    esi,0x10
c0000bcb:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bce:	e9 db fe ff ff       	jmp    c0000aae <simple_strtoul+0x56>
c0000bd3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bd7:	85 ff                	test   edi,edi
c0000bd9:	74 5c                	je     c0000c37 <simple_strtoul+0x1df>
c0000bdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bdf:	85 c9                	test   ecx,ecx
c0000be1:	75 4e                	jne    c0000c31 <simple_strtoul+0x1d9>
c0000be3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be9:	31 ff                	xor    edi,edi
c0000beb:	e9 4c ff ff ff       	jmp    c0000b3c <simple_strtoul+0xe4>
c0000bf0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bf4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bf7:	50                   	push   eax
c0000bf8:	e8 47 fe ff ff       	call   c0000a44 <tolower>
c0000bfd:	5d                   	pop    ebp
c0000bfe:	83 f8 78             	cmp    eax,0x78
c0000c01:	74 3b                	je     c0000c3e <simple_strtoul+0x1e6>
c0000c03:	41                   	inc    ecx
c0000c04:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000c07:	80 fa 30             	cmp    dl,0x30
c0000c0a:	74 13                	je     c0000c1f <simple_strtoul+0x1c7>
c0000c0c:	be 08 00 00 00       	mov    esi,0x8
c0000c11:	e9 98 fe ff ff       	jmp    c0000aae <simple_strtoul+0x56>
c0000c16:	80 fa 30             	cmp    dl,0x30
c0000c19:	0f 85 8f fe ff ff    	jne    c0000aae <simple_strtoul+0x56>
c0000c1f:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c22:	41                   	inc    ecx
c0000c23:	eb e7                	jmp    c0000c0c <simple_strtoul+0x1b4>
c0000c25:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c29:	85 d2                	test   edx,edx
c0000c2b:	74 0a                	je     c0000c37 <simple_strtoul+0x1df>
c0000c2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c31:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c35:	89 30                	mov    DWORD PTR [eax],esi
c0000c37:	31 ff                	xor    edi,edi
c0000c39:	e9 fe fe ff ff       	jmp    c0000b3c <simple_strtoul+0xe4>
c0000c3e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c41:	83 c1 02             	add    ecx,0x2
c0000c44:	e9 34 ff ff ff       	jmp    c0000b7d <simple_strtoul+0x125>
c0000c49:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c4c:	be 10 00 00 00       	mov    esi,0x10
c0000c51:	83 c1 02             	add    ecx,0x2
c0000c54:	e9 55 fe ff ff       	jmp    c0000aae <simple_strtoul+0x56>

c0000c59 <largebin_index>:
c0000c59:	89 c2                	mov    edx,eax
c0000c5b:	c1 ea 08             	shr    edx,0x8
c0000c5e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c64:	77 10                	ja     c0000c76 <largebin_index+0x1d>
c0000c66:	0f bd d2             	bsr    edx,edx
c0000c69:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c6c:	d3 e8                	shr    eax,cl
c0000c6e:	83 e0 03             	and    eax,0x3
c0000c71:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c75:	c3                   	ret    
c0000c76:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c7b:	c3                   	ret    

c0000c7c <malloc_init_state>:
c0000c7c:	53                   	push   ebx
c0000c7d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c80:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c86:	89 d1                	mov    ecx,edx
c0000c88:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c8b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c8e:	83 c2 08             	add    edx,0x8
c0000c91:	39 da                	cmp    edx,ebx
c0000c93:	75 f3                	jne    c0000c88 <malloc_init_state+0xc>
c0000c95:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c97:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000ca1:	83 e2 03             	and    edx,0x3
c0000ca4:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000cae:	83 ca 48             	or     edx,0x48
c0000cb1:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cbb:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cc5:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ccc:	89 10                	mov    DWORD PTR [eax],edx
c0000cce:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cd1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cdb:	5b                   	pop    ebx
c0000cdc:	c3                   	ret    

c0000cdd <malloc_consolidate>:
c0000cdd:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cdf:	85 d2                	test   edx,edx
c0000ce1:	0f 84 d8 00 00 00    	je     c0000dbf <malloc_consolidate+0xe2>
c0000ce7:	55                   	push   ebp
c0000ce8:	83 e2 fd             	and    edx,0xfffffffd
c0000ceb:	57                   	push   edi
c0000cec:	89 c5                	mov    ebp,eax
c0000cee:	56                   	push   esi
c0000cef:	8d 78 34             	lea    edi,[eax+0x34]
c0000cf2:	53                   	push   ebx
c0000cf3:	83 ec 10             	sub    esp,0x10
c0000cf6:	89 10                	mov    DWORD PTR [eax],edx
c0000cf8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cfc:	c1 ea 03             	shr    edx,0x3
c0000cff:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000d03:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000d07:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d0a:	85 d2                	test   edx,edx
c0000d0c:	0f 84 98 00 00 00    	je     c0000daa <malloc_consolidate+0xcd>
c0000d12:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d19:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d1c:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d1f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d23:	89 f9                	mov    ecx,edi
c0000d25:	83 e1 fe             	and    ecx,0xfffffffe
c0000d28:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d2b:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d2e:	83 e3 fc             	and    ebx,0xfffffffc
c0000d31:	83 e7 01             	and    edi,0x1
c0000d34:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d37:	75 14                	jne    c0000d4d <malloc_consolidate+0x70>
c0000d39:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d3b:	29 fa                	sub    edx,edi
c0000d3d:	01 f9                	add    ecx,edi
c0000d3f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d42:	89 fb                	mov    ebx,edi
c0000d44:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d47:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d4a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d4d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d50:	74 40                	je     c0000d92 <malloc_consolidate+0xb5>
c0000d52:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d55:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d58:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d5c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d5f:	83 e7 01             	and    edi,0x1
c0000d62:	75 0e                	jne    c0000d72 <malloc_consolidate+0x95>
c0000d64:	01 d9                	add    ecx,ebx
c0000d66:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d69:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d6c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d6f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d72:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d75:	89 ce                	mov    esi,ecx
c0000d77:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d7a:	83 ce 01             	or     esi,0x1
c0000d7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d80:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d83:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d86:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d8a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d8d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d90:	eb 0c                	jmp    c0000d9e <malloc_consolidate+0xc1>
c0000d92:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d95:	83 c9 01             	or     ecx,0x1
c0000d98:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d9b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d9e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000da2:	85 d2                	test   edx,edx
c0000da4:	0f 85 6f ff ff ff    	jne    c0000d19 <malloc_consolidate+0x3c>
c0000daa:	83 c5 04             	add    ebp,0x4
c0000dad:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000db1:	0f 85 50 ff ff ff    	jne    c0000d07 <malloc_consolidate+0x2a>
c0000db7:	83 c4 10             	add    esp,0x10
c0000dba:	5b                   	pop    ebx
c0000dbb:	5e                   	pop    esi
c0000dbc:	5f                   	pop    edi
c0000dbd:	5d                   	pop    ebp
c0000dbe:	c3                   	ret    
c0000dbf:	e9 b8 fe ff ff       	jmp    c0000c7c <malloc_init_state>

c0000dc4 <dlfree>:
c0000dc4:	57                   	push   edi
c0000dc5:	56                   	push   esi
c0000dc6:	53                   	push   ebx
c0000dc7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dcb:	85 db                	test   ebx,ebx
c0000dcd:	0f 84 e2 00 00 00    	je     c0000eb5 <dlfree+0xf1>
c0000dd3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dd6:	8b 0d c0 e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e1c0
c0000ddc:	89 f0                	mov    eax,esi
c0000dde:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000de1:	83 e0 fc             	and    eax,0xfffffffc
c0000de4:	39 c1                	cmp    ecx,eax
c0000de6:	72 24                	jb     c0000e0c <dlfree+0x48>
c0000de8:	83 c9 03             	or     ecx,0x3
c0000deb:	c1 e8 03             	shr    eax,0x3
c0000dee:	89 0d c0 e1 02 c0    	mov    DWORD PTR ds:0xc002e1c0,ecx
c0000df4:	83 e8 02             	sub    eax,0x2
c0000df7:	8b 0c 85 c4 e1 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1e3c]
c0000dfe:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000e00:	89 14 85 c4 e1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1e3c],edx
c0000e07:	e9 a9 00 00 00       	jmp    c0000eb5 <dlfree+0xf1>
c0000e0c:	83 e6 02             	and    esi,0x2
c0000e0f:	0f 85 a0 00 00 00    	jne    c0000eb5 <dlfree+0xf1>
c0000e15:	83 c9 01             	or     ecx,0x1
c0000e18:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e1b:	89 0d c0 e1 02 c0    	mov    DWORD PTR ds:0xc002e1c0,ecx
c0000e21:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e24:	83 e1 fc             	and    ecx,0xfffffffc
c0000e27:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e2b:	75 13                	jne    c0000e40 <dlfree+0x7c>
c0000e2d:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e30:	29 da                	sub    edx,ebx
c0000e32:	01 d8                	add    eax,ebx
c0000e34:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e37:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e3a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e3d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e40:	39 35 ec e1 02 c0    	cmp    DWORD PTR ds:0xc002e1ec,esi
c0000e46:	74 40                	je     c0000e88 <dlfree+0xc4>
c0000e48:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e4c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e4f:	80 e3 01             	and    bl,0x1
c0000e52:	75 0e                	jne    c0000e62 <dlfree+0x9e>
c0000e54:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e57:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e5a:	01 c8                	add    eax,ecx
c0000e5c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e5f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e62:	8b 0d fc e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e1fc
c0000e68:	c7 42 0c f4 e1 02 c0 	mov    DWORD PTR [edx+0xc],0xc002e1f4
c0000e6f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e72:	89 15 fc e1 02 c0    	mov    DWORD PTR ds:0xc002e1fc,edx
c0000e78:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e7b:	89 c1                	mov    ecx,eax
c0000e7d:	83 c9 01             	or     ecx,0x1
c0000e80:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e83:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e86:	eb 10                	jmp    c0000e98 <dlfree+0xd4>
c0000e88:	01 c8                	add    eax,ecx
c0000e8a:	89 c1                	mov    ecx,eax
c0000e8c:	83 c9 01             	or     ecx,0x1
c0000e8f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e92:	89 15 ec e1 02 c0    	mov    DWORD PTR ds:0xc002e1ec,edx
c0000e98:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e9d:	76 16                	jbe    c0000eb5 <dlfree+0xf1>
c0000e9f:	f6 05 c0 e1 02 c0 02 	test   BYTE PTR ds:0xc002e1c0,0x2
c0000ea6:	74 0d                	je     c0000eb5 <dlfree+0xf1>
c0000ea8:	5b                   	pop    ebx
c0000ea9:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	e9 28 fe ff ff       	jmp    c0000cdd <malloc_consolidate>
c0000eb5:	5b                   	pop    ebx
c0000eb6:	5e                   	pop    esi
c0000eb7:	5f                   	pop    edi
c0000eb8:	c3                   	ret    

c0000eb9 <sYSMALLOc>:
c0000eb9:	55                   	push   ebp
c0000eba:	57                   	push   edi
c0000ebb:	56                   	push   esi
c0000ebc:	53                   	push   ebx
c0000ebd:	89 d3                	mov    ebx,edx
c0000ebf:	83 ec 2c             	sub    esp,0x2c
c0000ec2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ec6:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ecc:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ecf:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ed2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ed6:	74 1f                	je     c0000ef7 <sYSMALLOc+0x3e>
c0000ed8:	89 d8                	mov    eax,ebx
c0000eda:	e8 fe fd ff ff       	call   c0000cdd <malloc_consolidate>
c0000edf:	83 ec 0c             	sub    esp,0xc
c0000ee2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ee6:	83 e8 07             	sub    eax,0x7
c0000ee9:	50                   	push   eax
c0000eea:	e8 30 02 00 00       	call   c000111f <dlmalloc>
c0000eef:	83 c4 10             	add    esp,0x10
c0000ef2:	e9 20 02 00 00       	jmp    c0001117 <sYSMALLOc+0x25e>
c0000ef7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000efa:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000f00:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000f03:	83 e0 fc             	and    eax,0xfffffffc
c0000f06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f0e:	83 c0 10             	add    eax,0x10
c0000f11:	01 c1                	add    ecx,eax
c0000f13:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f17:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f1e:	74 04                	je     c0000f24 <sYSMALLOc+0x6b>
c0000f20:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f24:	f7 da                	neg    edx
c0000f26:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f2a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f2e:	21 d1                	and    ecx,edx
c0000f30:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f34:	7f 07                	jg     c0000f3d <sYSMALLOc+0x84>
c0000f36:	31 c0                	xor    eax,eax
c0000f38:	e9 da 01 00 00       	jmp    c0001117 <sYSMALLOc+0x25e>
c0000f3d:	83 ec 0c             	sub    esp,0xc
c0000f40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f44:	e8 56 e7 00 00       	call   c000f69f <sbrk>
c0000f49:	83 c4 10             	add    esp,0x10
c0000f4c:	89 c6                	mov    esi,eax
c0000f4e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f51:	74 e3                	je     c0000f36 <sYSMALLOc+0x7d>
c0000f53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f57:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f5b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f5e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f64:	39 f1                	cmp    ecx,esi
c0000f66:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f6c:	75 13                	jne    c0000f81 <sYSMALLOc+0xc8>
c0000f6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f72:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f76:	83 c8 01             	or     eax,0x1
c0000f79:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f7c:	e9 3e 01 00 00       	jmp    c00010bf <sYSMALLOc+0x206>
c0000f81:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f87:	88 d0                	mov    al,dl
c0000f89:	83 e0 01             	and    eax,0x1
c0000f8c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f91:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f95:	0f 95 c0             	setne  al
c0000f98:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f9c:	39 f1                	cmp    ecx,esi
c0000f9e:	76 12                	jbe    c0000fb2 <sYSMALLOc+0xf9>
c0000fa0:	84 c0                	test   al,al
c0000fa2:	74 0e                	je     c0000fb2 <sYSMALLOc+0xf9>
c0000fa4:	83 e2 fe             	and    edx,0xfffffffe
c0000fa7:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fad:	e9 83 00 00 00       	jmp    c0001035 <sYSMALLOc+0x17c>
c0000fb2:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000fb7:	74 7c                	je     c0001035 <sYSMALLOc+0x17c>
c0000fb9:	84 c0                	test   al,al
c0000fbb:	74 0c                	je     c0000fc9 <sYSMALLOc+0x110>
c0000fbd:	89 f0                	mov    eax,esi
c0000fbf:	29 c8                	sub    eax,ecx
c0000fc1:	01 e8                	add    eax,ebp
c0000fc3:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc9:	89 f2                	mov    edx,esi
c0000fcb:	83 e2 07             	and    edx,0x7
c0000fce:	74 0c                	je     c0000fdc <sYSMALLOc+0x123>
c0000fd0:	b8 08 00 00 00       	mov    eax,0x8
c0000fd5:	29 d0                	sub    eax,edx
c0000fd7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fda:	eb 04                	jmp    c0000fe0 <sYSMALLOc+0x127>
c0000fdc:	89 f5                	mov    ebp,esi
c0000fde:	31 c0                	xor    eax,eax
c0000fe0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fe4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fec:	01 c1                	add    ecx,eax
c0000fee:	83 ec 0c             	sub    esp,0xc
c0000ff1:	01 f1                	add    ecx,esi
c0000ff3:	01 ca                	add    edx,ecx
c0000ff5:	29 c8                	sub    eax,ecx
c0000ff7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ffb:	01 c2                	add    edx,eax
c0000ffd:	52                   	push   edx
c0000ffe:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0001002:	e8 98 e6 00 00       	call   c000f69f <sbrk>
c0001007:	83 c4 10             	add    esp,0x10
c000100a:	83 f8 ff             	cmp    eax,0xffffffff
c000100d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001011:	75 0f                	jne    c0001022 <sYSMALLOc+0x169>
c0001013:	83 ec 0c             	sub    esp,0xc
c0001016:	6a 00                	push   0x0
c0001018:	e8 82 e6 00 00       	call   c000f69f <sbrk>
c000101d:	83 c4 10             	add    esp,0x10
c0001020:	eb 30                	jmp    c0001052 <sYSMALLOc+0x199>
c0001022:	39 c6                	cmp    esi,eax
c0001024:	76 33                	jbe    c0001059 <sYSMALLOc+0x1a0>
c0001026:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000102a:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001031:	01 f0                	add    eax,esi
c0001033:	eb 1d                	jmp    c0001052 <sYSMALLOc+0x199>
c0001035:	83 ec 0c             	sub    esp,0xc
c0001038:	89 f5                	mov    ebp,esi
c000103a:	6a 00                	push   0x0
c000103c:	e8 5e e6 00 00       	call   c000f69f <sbrk>
c0001041:	89 c2                	mov    edx,eax
c0001043:	29 f2                	sub    edx,esi
c0001045:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001049:	83 c4 10             	add    esp,0x10
c000104c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001052:	31 d2                	xor    edx,edx
c0001054:	83 f8 ff             	cmp    eax,0xffffffff
c0001057:	74 66                	je     c00010bf <sYSMALLOc+0x206>
c0001059:	29 e8                	sub    eax,ebp
c000105b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000105e:	01 d0                	add    eax,edx
c0001060:	83 c8 01             	or     eax,0x1
c0001063:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001066:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000106c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001071:	74 4c                	je     c00010bf <sYSMALLOc+0x206>
c0001073:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001077:	83 e8 0c             	sub    eax,0xc
c000107a:	83 e0 f8             	and    eax,0xfffffff8
c000107d:	89 c2                	mov    edx,eax
c000107f:	83 ca 01             	or     edx,0x1
c0001082:	83 f8 0f             	cmp    eax,0xf
c0001085:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001088:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001090:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001098:	76 25                	jbe    c00010bf <sYSMALLOc+0x206>
c000109a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00010a0:	83 ec 0c             	sub    esp,0xc
c00010a3:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010ad:	83 c7 08             	add    edi,0x8
c00010b0:	57                   	push   edi
c00010b1:	e8 0e fd ff ff       	call   c0000dc4 <dlfree>
c00010b6:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010bc:	83 c4 10             	add    esp,0x10
c00010bf:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010c5:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010cb:	73 06                	jae    c00010d3 <sYSMALLOc+0x21a>
c00010cd:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010d3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010df:	73 06                	jae    c00010e7 <sYSMALLOc+0x22e>
c00010e1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010e7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ea:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010ed:	83 e2 fc             	and    edx,0xfffffffc
c00010f0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010f4:	0f 82 3c fe ff ff    	jb     c0000f36 <sYSMALLOc+0x7d>
c00010fa:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010fe:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001101:	29 fa                	sub    edx,edi
c0001103:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001106:	83 ca 01             	or     edx,0x1
c0001109:	89 fb                	mov    ebx,edi
c000110b:	83 c0 08             	add    eax,0x8
c000110e:	83 cb 01             	or     ebx,0x1
c0001111:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001114:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001117:	83 c4 2c             	add    esp,0x2c
c000111a:	5b                   	pop    ebx
c000111b:	5e                   	pop    esi
c000111c:	5f                   	pop    edi
c000111d:	5d                   	pop    ebp
c000111e:	c3                   	ret    

c000111f <dlmalloc>:
c000111f:	55                   	push   ebp
c0001120:	57                   	push   edi
c0001121:	56                   	push   esi
c0001122:	53                   	push   ebx
c0001123:	83 ec 1c             	sub    esp,0x1c
c0001126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000112a:	83 f8 df             	cmp    eax,0xffffffdf
c000112d:	0f 87 70 03 00 00    	ja     c00014a3 <dlmalloc+0x384>
c0001133:	83 c0 0b             	add    eax,0xb
c0001136:	be 10 00 00 00       	mov    esi,0x10
c000113b:	83 f8 0f             	cmp    eax,0xf
c000113e:	76 05                	jbe    c0001145 <dlmalloc+0x26>
c0001140:	83 e0 f8             	and    eax,0xfffffff8
c0001143:	89 c6                	mov    esi,eax
c0001145:	8b 3d c0 e1 02 c0    	mov    edi,DWORD PTR ds:0xc002e1c0
c000114b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001151:	75 17                	jne    c000116a <dlmalloc+0x4b>
c0001153:	85 ff                	test   edi,edi
c0001155:	0f 85 05 03 00 00    	jne    c0001460 <dlmalloc+0x341>
c000115b:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c0001160:	e8 78 fb ff ff       	call   c0000cdd <malloc_consolidate>
c0001165:	e9 f6 02 00 00       	jmp    c0001460 <dlmalloc+0x341>
c000116a:	39 f7                	cmp    edi,esi
c000116c:	72 1f                	jb     c000118d <dlmalloc+0x6e>
c000116e:	89 f2                	mov    edx,esi
c0001170:	c1 ea 03             	shr    edx,0x3
c0001173:	83 ea 02             	sub    edx,0x2
c0001176:	8b 04 95 c4 e1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1e3c]
c000117d:	85 c0                	test   eax,eax
c000117f:	74 0c                	je     c000118d <dlmalloc+0x6e>
c0001181:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001184:	89 0c 95 c4 e1 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1e3c],ecx
c000118b:	eb 30                	jmp    c00011bd <dlmalloc+0x9e>
c000118d:	89 f0                	mov    eax,esi
c000118f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001195:	77 2e                	ja     c00011c5 <dlmalloc+0xa6>
c0001197:	c1 e8 03             	shr    eax,0x3
c000119a:	8d 14 c5 f4 e1 02 c0 	lea    edx,[eax*8-0x3ffd1e0c]
c00011a1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a5:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a8:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011ab:	39 c3                	cmp    ebx,eax
c00011ad:	74 2e                	je     c00011dd <dlmalloc+0xbe>
c00011af:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011b2:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011b7:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011ba:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011bd:	83 c0 08             	add    eax,0x8
c00011c0:	e9 e0 02 00 00       	jmp    c00014a5 <dlmalloc+0x386>
c00011c5:	e8 8f fa ff ff       	call   c0000c59 <largebin_index>
c00011ca:	83 e7 02             	and    edi,0x2
c00011cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011d1:	74 0a                	je     c00011dd <dlmalloc+0xbe>
c00011d3:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c00011d8:	e8 00 fb ff ff       	call   c0000cdd <malloc_consolidate>
c00011dd:	8d 46 10             	lea    eax,[esi+0x10]
c00011e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011e4:	8b 1d 00 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e200
c00011ea:	81 fb f4 e1 02 c0    	cmp    ebx,0xc002e1f4
c00011f0:	0f 84 13 01 00 00    	je     c0001309 <dlmalloc+0x1ea>
c00011f6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011fc:	83 e7 fc             	and    edi,0xfffffffc
c00011ff:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001205:	77 4c                	ja     c0001253 <dlmalloc+0x134>
c0001207:	3d f4 e1 02 c0       	cmp    eax,0xc002e1f4
c000120c:	75 45                	jne    c0001253 <dlmalloc+0x134>
c000120e:	39 1d f0 e1 02 c0    	cmp    DWORD PTR ds:0xc002e1f0,ebx
c0001214:	75 3d                	jne    c0001253 <dlmalloc+0x134>
c0001216:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000121a:	73 37                	jae    c0001253 <dlmalloc+0x134>
c000121c:	8d 04 33             	lea    eax,[ebx+esi*1]
c000121f:	89 fa                	mov    edx,edi
c0001221:	a3 fc e1 02 c0       	mov    ds:0xc002e1fc,eax
c0001226:	a3 00 e2 02 c0       	mov    ds:0xc002e200,eax
c000122b:	a3 f0 e1 02 c0       	mov    ds:0xc002e1f0,eax
c0001230:	29 f2                	sub    edx,esi
c0001232:	c7 40 08 f4 e1 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e1f4
c0001239:	c7 40 0c f4 e1 02 c0 	mov    DWORD PTR [eax+0xc],0xc002e1f4
c0001240:	83 ce 01             	or     esi,0x1
c0001243:	89 d1                	mov    ecx,edx
c0001245:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001248:	83 c9 01             	or     ecx,0x1
c000124b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000124e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001251:	eb 15                	jmp    c0001268 <dlmalloc+0x149>
c0001253:	a3 00 e2 02 c0       	mov    ds:0xc002e200,eax
c0001258:	39 fe                	cmp    esi,edi
c000125a:	c7 40 08 f4 e1 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e1f4
c0001261:	75 0d                	jne    c0001270 <dlmalloc+0x151>
c0001263:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001268:	8d 43 08             	lea    eax,[ebx+0x8]
c000126b:	e9 35 02 00 00       	jmp    c00014a5 <dlmalloc+0x386>
c0001270:	89 f8                	mov    eax,edi
c0001272:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001278:	77 19                	ja     c0001293 <dlmalloc+0x174>
c000127a:	c1 e8 03             	shr    eax,0x3
c000127d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001280:	83 c2 0d             	add    edx,0xd
c0001283:	8d 2c 95 b8 e1 02 c0 	lea    ebp,[edx*4-0x3ffd1e48]
c000128a:	8b 14 95 c0 e1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1e40]
c0001291:	eb 46                	jmp    c00012d9 <dlmalloc+0x1ba>
c0001293:	e8 c1 f9 ff ff       	call   c0000c59 <largebin_index>
c0001298:	8d 14 00             	lea    edx,[eax+eax*1]
c000129b:	83 c2 0d             	add    edx,0xd
c000129e:	8d 0c 95 c0 e1 02 c0 	lea    ecx,[edx*4-0x3ffd1e40]
c00012a5:	8b 14 95 c0 e1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1e40]
c00012ac:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012af:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012b3:	89 d5                	mov    ebp,edx
c00012b5:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b9:	74 1e                	je     c00012d9 <dlmalloc+0x1ba>
c00012bb:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012be:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012c1:	77 12                	ja     c00012d5 <dlmalloc+0x1b6>
c00012c3:	83 cf 01             	or     edi,0x1
c00012c6:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c9:	76 05                	jbe    c00012d0 <dlmalloc+0x1b1>
c00012cb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012ce:	eb f6                	jmp    c00012c6 <dlmalloc+0x1a7>
c00012d0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012d3:	eb 04                	jmp    c00012d9 <dlmalloc+0x1ba>
c00012d5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d9:	89 c7                	mov    edi,eax
c00012db:	88 c1                	mov    cl,al
c00012dd:	c1 ff 05             	sar    edi,0x5
c00012e0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012e4:	bf 01 00 00 00       	mov    edi,0x1
c00012e9:	d3 e7                	shl    edi,cl
c00012eb:	89 f8                	mov    eax,edi
c00012ed:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012f1:	09 04 bd f4 e4 02 c0 	or     DWORD PTR [edi*4-0x3ffd1b0c],eax
c00012f8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012fb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012fe:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001301:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001304:	e9 db fe ff ff       	jmp    c00011e4 <dlmalloc+0xc5>
c0001309:	81 fe ff 00 00 00    	cmp    esi,0xff
c000130f:	76 78                	jbe    c0001389 <dlmalloc+0x26a>
c0001311:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001315:	8d 04 c5 f4 e1 02 c0 	lea    eax,[eax*8-0x3ffd1e0c]
c000131c:	8d 48 f8             	lea    ecx,[eax-0x8]
c000131f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001322:	39 ca                	cmp    edx,ecx
c0001324:	74 63                	je     c0001389 <dlmalloc+0x26a>
c0001326:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001329:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000132c:	83 e3 fc             	and    ebx,0xfffffffc
c000132f:	39 de                	cmp    esi,ebx
c0001331:	77 52                	ja     c0001385 <dlmalloc+0x266>
c0001333:	89 df                	mov    edi,ebx
c0001335:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001338:	29 f7                	sub    edi,esi
c000133a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000133d:	01 d3                	add    ebx,edx
c000133f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001342:	83 ff 0f             	cmp    edi,0xf
c0001345:	8d 42 08             	lea    eax,[edx+0x8]
c0001348:	77 09                	ja     c0001353 <dlmalloc+0x234>
c000134a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000134e:	e9 52 01 00 00       	jmp    c00014a5 <dlmalloc+0x386>
c0001353:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001356:	83 ce 01             	or     esi,0x1
c0001359:	89 0d fc e1 02 c0    	mov    DWORD PTR ds:0xc002e1fc,ecx
c000135f:	89 0d 00 e2 02 c0    	mov    DWORD PTR ds:0xc002e200,ecx
c0001365:	c7 41 08 f4 e1 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002e1f4
c000136c:	c7 41 0c f4 e1 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002e1f4
c0001373:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001376:	89 fa                	mov    edx,edi
c0001378:	83 ca 01             	or     edx,0x1
c000137b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000137e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001380:	e9 20 01 00 00       	jmp    c00014a5 <dlmalloc+0x386>
c0001385:	89 c2                	mov    edx,eax
c0001387:	eb 99                	jmp    c0001322 <dlmalloc+0x203>
c0001389:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000138d:	b8 01 00 00 00       	mov    eax,0x1
c0001392:	41                   	inc    ecx
c0001393:	89 cb                	mov    ebx,ecx
c0001395:	8d 14 cd ec e1 02 c0 	lea    edx,[ecx*8-0x3ffd1e14]
c000139c:	c1 eb 05             	shr    ebx,0x5
c000139f:	d3 e0                	shl    eax,cl
c00013a1:	8b 3c 9d f4 e4 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1b0c]
c00013a8:	39 f8                	cmp    eax,edi
c00013aa:	77 04                	ja     c00013b0 <dlmalloc+0x291>
c00013ac:	85 c0                	test   eax,eax
c00013ae:	75 26                	jne    c00013d6 <dlmalloc+0x2b7>
c00013b0:	43                   	inc    ebx
c00013b1:	83 fb 02             	cmp    ebx,0x2
c00013b4:	0f 87 a6 00 00 00    	ja     c0001460 <dlmalloc+0x341>
c00013ba:	8b 3c 9d f4 e4 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1b0c]
c00013c1:	85 ff                	test   edi,edi
c00013c3:	74 eb                	je     c00013b0 <dlmalloc+0x291>
c00013c5:	89 d8                	mov    eax,ebx
c00013c7:	c1 e0 06             	shl    eax,0x6
c00013ca:	8d 14 85 ec e1 02 c0 	lea    edx,[eax*4-0x3ffd1e14]
c00013d1:	b8 01 00 00 00       	mov    eax,0x1
c00013d6:	85 f8                	test   eax,edi
c00013d8:	75 07                	jne    c00013e1 <dlmalloc+0x2c2>
c00013da:	83 c2 08             	add    edx,0x8
c00013dd:	01 c0                	add    eax,eax
c00013df:	eb f5                	jmp    c00013d6 <dlmalloc+0x2b7>
c00013e1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013e4:	39 ca                	cmp    edx,ecx
c00013e6:	75 14                	jne    c00013fc <dlmalloc+0x2dd>
c00013e8:	89 c1                	mov    ecx,eax
c00013ea:	83 c2 08             	add    edx,0x8
c00013ed:	f7 d1                	not    ecx
c00013ef:	01 c0                	add    eax,eax
c00013f1:	21 cf                	and    edi,ecx
c00013f3:	89 3c 9d f4 e4 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1b0c],edi
c00013fa:	eb ac                	jmp    c00013a8 <dlmalloc+0x289>
c00013fc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013ff:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001402:	83 e0 fc             	and    eax,0xfffffffc
c0001405:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001408:	89 c3                	mov    ebx,eax
c000140a:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000140d:	29 f3                	sub    ebx,esi
c000140f:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001412:	83 fb 0f             	cmp    ebx,0xf
c0001415:	8d 41 08             	lea    eax,[ecx+0x8]
c0001418:	77 09                	ja     c0001423 <dlmalloc+0x304>
c000141a:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c000141e:	e9 82 00 00 00       	jmp    c00014a5 <dlmalloc+0x386>
c0001423:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001426:	81 fe ff 00 00 00    	cmp    esi,0xff
c000142c:	89 3d fc e1 02 c0    	mov    DWORD PTR ds:0xc002e1fc,edi
c0001432:	89 3d 00 e2 02 c0    	mov    DWORD PTR ds:0xc002e200,edi
c0001438:	c7 47 08 f4 e1 02 c0 	mov    DWORD PTR [edi+0x8],0xc002e1f4
c000143f:	c7 47 0c f4 e1 02 c0 	mov    DWORD PTR [edi+0xc],0xc002e1f4
c0001446:	77 06                	ja     c000144e <dlmalloc+0x32f>
c0001448:	89 3d f0 e1 02 c0    	mov    DWORD PTR ds:0xc002e1f0,edi
c000144e:	83 ce 01             	or     esi,0x1
c0001451:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001454:	89 d9                	mov    ecx,ebx
c0001456:	83 c9 01             	or     ecx,0x1
c0001459:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000145c:	89 1a                	mov    DWORD PTR [edx],ebx
c000145e:	eb 45                	jmp    c00014a5 <dlmalloc+0x386>
c0001460:	a1 ec e1 02 c0       	mov    eax,ds:0xc002e1ec
c0001465:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001468:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000146b:	83 e2 fc             	and    edx,0xfffffffc
c000146e:	39 d1                	cmp    ecx,edx
c0001470:	77 1e                	ja     c0001490 <dlmalloc+0x371>
c0001472:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001475:	89 f3                	mov    ebx,esi
c0001477:	89 0d ec e1 02 c0    	mov    DWORD PTR ds:0xc002e1ec,ecx
c000147d:	83 cb 01             	or     ebx,0x1
c0001480:	29 f2                	sub    edx,esi
c0001482:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001485:	83 ca 01             	or     edx,0x1
c0001488:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000148b:	e9 2d fd ff ff       	jmp    c00011bd <dlmalloc+0x9e>
c0001490:	83 c4 1c             	add    esp,0x1c
c0001493:	89 f0                	mov    eax,esi
c0001495:	5b                   	pop    ebx
c0001496:	ba c0 e1 02 c0       	mov    edx,0xc002e1c0
c000149b:	5e                   	pop    esi
c000149c:	5f                   	pop    edi
c000149d:	5d                   	pop    ebp
c000149e:	e9 16 fa ff ff       	jmp    c0000eb9 <sYSMALLOc>
c00014a3:	31 c0                	xor    eax,eax
c00014a5:	83 c4 1c             	add    esp,0x1c
c00014a8:	5b                   	pop    ebx
c00014a9:	5e                   	pop    esi
c00014aa:	5f                   	pop    edi
c00014ab:	5d                   	pop    ebp
c00014ac:	c3                   	ret    

c00014ad <iALLOc>:
c00014ad:	55                   	push   ebp
c00014ae:	89 c5                	mov    ebp,eax
c00014b0:	57                   	push   edi
c00014b1:	56                   	push   esi
c00014b2:	53                   	push   ebx
c00014b3:	83 ec 2c             	sub    esp,0x2c
c00014b6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014ba:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014c2:	83 3d c0 e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e1c0,0x0
c00014c9:	75 12                	jne    c00014dd <iALLOc+0x30>
c00014cb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014cf:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c00014d4:	e8 04 f8 ff ff       	call   c0000cdd <malloc_consolidate>
c00014d9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014dd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014e2:	74 12                	je     c00014f6 <iALLOc+0x49>
c00014e4:	85 ed                	test   ebp,ebp
c00014e6:	0f 84 64 01 00 00    	je     c0001650 <iALLOc+0x1a3>
c00014ec:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014f4:	eb 33                	jmp    c0001529 <iALLOc+0x7c>
c00014f6:	85 ed                	test   ebp,ebp
c00014f8:	75 14                	jne    c000150e <iALLOc+0x61>
c00014fa:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001502:	83 c4 2c             	add    esp,0x2c
c0001505:	5b                   	pop    ebx
c0001506:	5e                   	pop    esi
c0001507:	5f                   	pop    edi
c0001508:	5d                   	pop    ebp
c0001509:	e9 11 fc ff ff       	jmp    c000111f <dlmalloc>
c000150e:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001515:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c000151d:	83 f8 0f             	cmp    eax,0xf
c0001520:	76 07                	jbe    c0001529 <iALLOc+0x7c>
c0001522:	83 e0 f8             	and    eax,0xfffffff8
c0001525:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001529:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000152e:	75 09                	jne    c0001539 <iALLOc+0x8c>
c0001530:	89 d0                	mov    eax,edx
c0001532:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001535:	31 f6                	xor    esi,esi
c0001537:	eb 3b                	jmp    c0001574 <iALLOc+0xc7>
c0001539:	8b 02                	mov    eax,DWORD PTR [edx]
c000153b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001543:	83 c0 0b             	add    eax,0xb
c0001546:	83 f8 0f             	cmp    eax,0xf
c0001549:	76 07                	jbe    c0001552 <iALLOc+0xa5>
c000154b:	83 e0 f8             	and    eax,0xfffffff8
c000154e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001552:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001556:	0f af f5             	imul   esi,ebp
c0001559:	eb 25                	jmp    c0001580 <iALLOc+0xd3>
c000155b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000155d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001560:	bb 10 00 00 00       	mov    ebx,0x10
c0001565:	83 f9 0f             	cmp    ecx,0xf
c0001568:	76 05                	jbe    c000156f <iALLOc+0xc2>
c000156a:	83 e1 f8             	and    ecx,0xfffffff8
c000156d:	89 cb                	mov    ebx,ecx
c000156f:	01 de                	add    esi,ebx
c0001571:	83 c0 04             	add    eax,0x4
c0001574:	39 c7                	cmp    edi,eax
c0001576:	75 e3                	jne    c000155b <iALLOc+0xae>
c0001578:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001580:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001584:	8b 1d 14 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e514
c000158a:	83 ec 0c             	sub    esp,0xc
c000158d:	c7 05 14 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e514,0x0
c0001597:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000159b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000159f:	50                   	push   eax
c00015a0:	e8 7a fb ff ff       	call   c000111f <dlmalloc>
c00015a5:	83 c4 10             	add    esp,0x10
c00015a8:	89 1d 14 e5 02 c0    	mov    DWORD PTR ds:0xc002e514,ebx
c00015ae:	85 c0                	test   eax,eax
c00015b0:	0f 84 92 00 00 00    	je     c0001648 <iALLOc+0x19b>
c00015b6:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b9:	8d 78 f8             	lea    edi,[eax-0x8]
c00015bc:	83 e3 fc             	and    ebx,0xfffffffc
c00015bf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015c3:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c8:	74 1e                	je     c00015e8 <iALLOc+0x13b>
c00015ca:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015ce:	89 d9                	mov    ecx,ebx
c00015d0:	52                   	push   edx
c00015d1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015d5:	83 e9 04             	sub    ecx,0x4
c00015d8:	51                   	push   ecx
c00015d9:	6a 00                	push   0x0
c00015db:	50                   	push   eax
c00015dc:	e8 9f f1 ff ff       	call   c0000780 <memset>
c00015e1:	83 c4 10             	add    esp,0x10
c00015e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015ed:	75 14                	jne    c0001603 <iALLOc+0x156>
c00015ef:	8d 04 37             	lea    eax,[edi+esi*1]
c00015f2:	29 f3                	sub    ebx,esi
c00015f4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015f7:	83 cb 01             	or     ebx,0x1
c00015fa:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015fe:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001601:	89 f3                	mov    ebx,esi
c0001603:	31 c0                	xor    eax,eax
c0001605:	4d                   	dec    ebp
c0001606:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001609:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000160d:	39 c5                	cmp    ebp,eax
c000160f:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001612:	74 2c                	je     c0001640 <iALLOc+0x193>
c0001614:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001618:	85 c9                	test   ecx,ecx
c000161a:	75 15                	jne    c0001631 <iALLOc+0x184>
c000161c:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000161f:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001622:	b9 10 00 00 00       	mov    ecx,0x10
c0001627:	83 fe 0f             	cmp    esi,0xf
c000162a:	76 05                	jbe    c0001631 <iALLOc+0x184>
c000162c:	83 e6 f8             	and    esi,0xfffffff8
c000162f:	89 f1                	mov    ecx,esi
c0001631:	89 ce                	mov    esi,ecx
c0001633:	29 cb                	sub    ebx,ecx
c0001635:	83 ce 01             	or     esi,0x1
c0001638:	40                   	inc    eax
c0001639:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000163c:	01 cf                	add    edi,ecx
c000163e:	eb c6                	jmp    c0001606 <iALLOc+0x159>
c0001640:	83 cb 01             	or     ebx,0x1
c0001643:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001646:	eb 08                	jmp    c0001650 <iALLOc+0x1a3>
c0001648:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001654:	83 c4 2c             	add    esp,0x2c
c0001657:	5b                   	pop    ebx
c0001658:	5e                   	pop    esi
c0001659:	5f                   	pop    edi
c000165a:	5d                   	pop    ebp
c000165b:	c3                   	ret    

c000165c <dlrealloc>:
c000165c:	55                   	push   ebp
c000165d:	57                   	push   edi
c000165e:	56                   	push   esi
c000165f:	53                   	push   ebx
c0001660:	83 ec 1c             	sub    esp,0x1c
c0001663:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001667:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000166b:	85 db                	test   ebx,ebx
c000166d:	75 10                	jne    c000167f <dlrealloc+0x23>
c000166f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001673:	83 c4 1c             	add    esp,0x1c
c0001676:	5b                   	pop    ebx
c0001677:	5e                   	pop    esi
c0001678:	5f                   	pop    edi
c0001679:	5d                   	pop    ebp
c000167a:	e9 a0 fa ff ff       	jmp    c000111f <dlmalloc>
c000167f:	83 f8 df             	cmp    eax,0xffffffdf
c0001682:	76 07                	jbe    c000168b <dlrealloc+0x2f>
c0001684:	31 db                	xor    ebx,ebx
c0001686:	e9 7c 01 00 00       	jmp    c0001807 <dlrealloc+0x1ab>
c000168b:	83 c0 0b             	add    eax,0xb
c000168e:	bf 10 00 00 00       	mov    edi,0x10
c0001693:	83 f8 0f             	cmp    eax,0xf
c0001696:	76 05                	jbe    c000169d <dlrealloc+0x41>
c0001698:	83 e0 f8             	and    eax,0xfffffff8
c000169b:	89 c7                	mov    edi,eax
c000169d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00016a0:	8d 6b f8             	lea    ebp,[ebx-0x8]
c00016a3:	89 c6                	mov    esi,eax
c00016a5:	83 e6 fc             	and    esi,0xfffffffc
c00016a8:	a8 02                	test   al,0x2
c00016aa:	75 d8                	jne    c0001684 <dlrealloc+0x28>
c00016ac:	39 f7                	cmp    edi,esi
c00016ae:	0f 86 15 01 00 00    	jbe    c00017c9 <dlrealloc+0x16d>
c00016b4:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b8:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016bb:	39 15 ec e1 02 c0    	cmp    DWORD PTR ds:0xc002e1ec,edx
c00016c1:	75 33                	jne    c00016f6 <dlrealloc+0x9a>
c00016c3:	83 e1 fc             	and    ecx,0xfffffffc
c00016c6:	01 f1                	add    ecx,esi
c00016c8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016cc:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016cf:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016d3:	77 49                	ja     c000171e <dlrealloc+0xc2>
c00016d5:	01 fd                	add    ebp,edi
c00016d7:	83 e0 01             	and    eax,0x1
c00016da:	09 f8                	or     eax,edi
c00016dc:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016df:	89 2d ec e1 02 c0    	mov    DWORD PTR ds:0xc002e1ec,ebp
c00016e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e9:	29 f8                	sub    eax,edi
c00016eb:	83 c8 01             	or     eax,0x1
c00016ee:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016f1:	e9 11 01 00 00       	jmp    c0001807 <dlrealloc+0x1ab>
c00016f6:	89 c8                	mov    eax,ecx
c00016f8:	83 e0 fe             	and    eax,0xfffffffe
c00016fb:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001700:	75 1c                	jne    c000171e <dlrealloc+0xc2>
c0001702:	83 e1 fc             	and    ecx,0xfffffffc
c0001705:	01 f1                	add    ecx,esi
c0001707:	39 cf                	cmp    edi,ecx
c0001709:	77 13                	ja     c000171e <dlrealloc+0xc2>
c000170b:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c000170e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001711:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001714:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001717:	89 ce                	mov    esi,ecx
c0001719:	e9 ab 00 00 00       	jmp    c00017c9 <dlrealloc+0x16d>
c000171e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001722:	8d 47 f9             	lea    eax,[edi-0x7]
c0001725:	83 ec 0c             	sub    esp,0xc
c0001728:	50                   	push   eax
c0001729:	e8 f1 f9 ff ff       	call   c000111f <dlmalloc>
c000172e:	83 c4 10             	add    esp,0x10
c0001731:	89 c1                	mov    ecx,eax
c0001733:	85 c0                	test   eax,eax
c0001735:	0f 84 49 ff ff ff    	je     c0001684 <dlrealloc+0x28>
c000173b:	8d 40 f8             	lea    eax,[eax-0x8]
c000173e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001742:	39 c2                	cmp    edx,eax
c0001744:	75 0a                	jne    c0001750 <dlrealloc+0xf4>
c0001746:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001749:	83 e0 fc             	and    eax,0xfffffffc
c000174c:	01 c6                	add    esi,eax
c000174e:	eb 79                	jmp    c00017c9 <dlrealloc+0x16d>
c0001750:	83 ee 04             	sub    esi,0x4
c0001753:	83 fe 27             	cmp    esi,0x27
c0001756:	76 16                	jbe    c000176e <dlrealloc+0x112>
c0001758:	50                   	push   eax
c0001759:	56                   	push   esi
c000175a:	53                   	push   ebx
c000175b:	51                   	push   ecx
c000175c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001760:	e8 e7 ef ff ff       	call   c000074c <memcpy>
c0001765:	83 c4 10             	add    esp,0x10
c0001768:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000176c:	eb 43                	jmp    c00017b1 <dlrealloc+0x155>
c000176e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001770:	83 fe 13             	cmp    esi,0x13
c0001773:	89 01                	mov    DWORD PTR [ecx],eax
c0001775:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001778:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c000177b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000177e:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001781:	76 2e                	jbe    c00017b1 <dlrealloc+0x155>
c0001783:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001786:	83 fe 1b             	cmp    esi,0x1b
c0001789:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000178c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000178f:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c0001792:	76 1d                	jbe    c00017b1 <dlrealloc+0x155>
c0001794:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0001797:	83 fe 23             	cmp    esi,0x23
c000179a:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000179d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00017a0:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c00017a3:	76 0c                	jbe    c00017b1 <dlrealloc+0x155>
c00017a5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a8:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017ab:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017ae:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017b1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017b5:	83 ec 0c             	sub    esp,0xc
c00017b8:	53                   	push   ebx
c00017b9:	e8 06 f6 ff ff       	call   c0000dc4 <dlfree>
c00017be:	83 c4 10             	add    esp,0x10
c00017c1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017c5:	89 cb                	mov    ebx,ecx
c00017c7:	eb 3e                	jmp    c0001807 <dlrealloc+0x1ab>
c00017c9:	89 f2                	mov    edx,esi
c00017cb:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017ce:	29 fa                	sub    edx,edi
c00017d0:	83 e1 01             	and    ecx,0x1
c00017d3:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017d7:	83 fa 0f             	cmp    edx,0xf
c00017da:	77 0b                	ja     c00017e7 <dlrealloc+0x18b>
c00017dc:	09 ce                	or     esi,ecx
c00017de:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017e1:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017e5:	eb 20                	jmp    c0001807 <dlrealloc+0x1ab>
c00017e7:	01 fd                	add    ebp,edi
c00017e9:	83 ec 0c             	sub    esp,0xc
c00017ec:	09 cf                	or     edi,ecx
c00017ee:	83 ca 01             	or     edx,0x1
c00017f1:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017f4:	83 c5 08             	add    ebp,0x8
c00017f7:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017fa:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017fe:	55                   	push   ebp
c00017ff:	e8 c0 f5 ff ff       	call   c0000dc4 <dlfree>
c0001804:	83 c4 10             	add    esp,0x10
c0001807:	83 c4 1c             	add    esp,0x1c
c000180a:	89 d8                	mov    eax,ebx
c000180c:	5b                   	pop    ebx
c000180d:	5e                   	pop    esi
c000180e:	5f                   	pop    edi
c000180f:	5d                   	pop    ebp
c0001810:	c3                   	ret    

c0001811 <dlmemalign>:
c0001811:	55                   	push   ebp
c0001812:	57                   	push   edi
c0001813:	56                   	push   esi
c0001814:	53                   	push   ebx
c0001815:	83 ec 0c             	sub    esp,0xc
c0001818:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000181c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001820:	83 fa 08             	cmp    edx,0x8
c0001823:	77 10                	ja     c0001835 <dlmemalign+0x24>
c0001825:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001829:	83 c4 0c             	add    esp,0xc
c000182c:	5b                   	pop    ebx
c000182d:	5e                   	pop    esi
c000182e:	5f                   	pop    edi
c000182f:	5d                   	pop    ebp
c0001830:	e9 ea f8 ff ff       	jmp    c000111f <dlmalloc>
c0001835:	bf 10 00 00 00       	mov    edi,0x10
c000183a:	83 fa 0f             	cmp    edx,0xf
c000183d:	76 13                	jbe    c0001852 <dlmemalign+0x41>
c000183f:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001842:	85 d1                	test   ecx,edx
c0001844:	75 04                	jne    c000184a <dlmemalign+0x39>
c0001846:	89 d7                	mov    edi,edx
c0001848:	eb 08                	jmp    c0001852 <dlmemalign+0x41>
c000184a:	39 d7                	cmp    edi,edx
c000184c:	73 04                	jae    c0001852 <dlmemalign+0x41>
c000184e:	01 ff                	add    edi,edi
c0001850:	eb f8                	jmp    c000184a <dlmemalign+0x39>
c0001852:	83 f8 df             	cmp    eax,0xffffffdf
c0001855:	76 07                	jbe    c000185e <dlmemalign+0x4d>
c0001857:	31 c0                	xor    eax,eax
c0001859:	e9 ce 00 00 00       	jmp    c000192c <dlmemalign+0x11b>
c000185e:	83 c0 0b             	add    eax,0xb
c0001861:	bd 10 00 00 00       	mov    ebp,0x10
c0001866:	83 f8 0f             	cmp    eax,0xf
c0001869:	76 05                	jbe    c0001870 <dlmemalign+0x5f>
c000186b:	83 e0 f8             	and    eax,0xfffffff8
c000186e:	89 c5                	mov    ebp,eax
c0001870:	83 ec 0c             	sub    esp,0xc
c0001873:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001877:	50                   	push   eax
c0001878:	e8 a2 f8 ff ff       	call   c000111f <dlmalloc>
c000187d:	83 c4 10             	add    esp,0x10
c0001880:	89 c1                	mov    ecx,eax
c0001882:	85 c0                	test   eax,eax
c0001884:	74 d1                	je     c0001857 <dlmemalign+0x46>
c0001886:	31 d2                	xor    edx,edx
c0001888:	8d 70 f8             	lea    esi,[eax-0x8]
c000188b:	f7 f7                	div    edi
c000188d:	85 d2                	test   edx,edx
c000188f:	74 62                	je     c00018f3 <dlmemalign+0xe2>
c0001891:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001895:	89 f8                	mov    eax,edi
c0001897:	f7 d8                	neg    eax
c0001899:	21 c3                	and    ebx,eax
c000189b:	83 eb 08             	sub    ebx,0x8
c000189e:	89 d8                	mov    eax,ebx
c00018a0:	29 f0                	sub    eax,esi
c00018a2:	83 f8 0f             	cmp    eax,0xf
c00018a5:	77 02                	ja     c00018a9 <dlmemalign+0x98>
c00018a7:	01 fb                	add    ebx,edi
c00018a9:	89 d8                	mov    eax,ebx
c00018ab:	29 f0                	sub    eax,esi
c00018ad:	89 c6                	mov    esi,eax
c00018af:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018b2:	89 c2                	mov    edx,eax
c00018b4:	83 e2 fc             	and    edx,0xfffffffc
c00018b7:	29 f2                	sub    edx,esi
c00018b9:	a8 02                	test   al,0x2
c00018bb:	74 10                	je     c00018cd <dlmemalign+0xbc>
c00018bd:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018c0:	83 ca 02             	or     edx,0x2
c00018c3:	8d 43 08             	lea    eax,[ebx+0x8]
c00018c6:	89 33                	mov    DWORD PTR [ebx],esi
c00018c8:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018cb:	eb 5f                	jmp    c000192c <dlmemalign+0x11b>
c00018cd:	83 ec 0c             	sub    esp,0xc
c00018d0:	89 d0                	mov    eax,edx
c00018d2:	83 c8 01             	or     eax,0x1
c00018d5:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d8:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018dd:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018e0:	83 e0 01             	and    eax,0x1
c00018e3:	09 f0                	or     eax,esi
c00018e5:	89 de                	mov    esi,ebx
c00018e7:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018ea:	51                   	push   ecx
c00018eb:	e8 d4 f4 ff ff       	call   c0000dc4 <dlfree>
c00018f0:	83 c4 10             	add    esp,0x10
c00018f3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018f6:	a8 02                	test   al,0x2
c00018f8:	75 2f                	jne    c0001929 <dlmemalign+0x118>
c00018fa:	83 e0 fc             	and    eax,0xfffffffc
c00018fd:	8d 55 10             	lea    edx,[ebp+0x10]
c0001900:	39 c2                	cmp    edx,eax
c0001902:	73 25                	jae    c0001929 <dlmemalign+0x118>
c0001904:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001907:	83 ec 0c             	sub    esp,0xc
c000190a:	29 e8                	sub    eax,ebp
c000190c:	83 c2 08             	add    edx,0x8
c000190f:	83 c8 01             	or     eax,0x1
c0001912:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001915:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001918:	83 e0 01             	and    eax,0x1
c000191b:	09 c5                	or     ebp,eax
c000191d:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001920:	52                   	push   edx
c0001921:	e8 9e f4 ff ff       	call   c0000dc4 <dlfree>
c0001926:	83 c4 10             	add    esp,0x10
c0001929:	8d 46 08             	lea    eax,[esi+0x8]
c000192c:	83 c4 0c             	add    esp,0xc
c000192f:	5b                   	pop    ebx
c0001930:	5e                   	pop    esi
c0001931:	5f                   	pop    edi
c0001932:	5d                   	pop    ebp
c0001933:	c3                   	ret    

c0001934 <dlcalloc>:
c0001934:	53                   	push   ebx
c0001935:	83 ec 14             	sub    esp,0x14
c0001938:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000193c:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001941:	50                   	push   eax
c0001942:	e8 d8 f7 ff ff       	call   c000111f <dlmalloc>
c0001947:	83 c4 10             	add    esp,0x10
c000194a:	89 c3                	mov    ebx,eax
c000194c:	85 c0                	test   eax,eax
c000194e:	74 77                	je     c00019c7 <dlcalloc+0x93>
c0001950:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001953:	89 d0                	mov    eax,edx
c0001955:	83 e0 fc             	and    eax,0xfffffffc
c0001958:	80 e2 02             	and    dl,0x2
c000195b:	75 5a                	jne    c00019b7 <dlcalloc+0x83>
c000195d:	83 e8 04             	sub    eax,0x4
c0001960:	83 f8 27             	cmp    eax,0x27
c0001963:	76 03                	jbe    c0001968 <dlcalloc+0x34>
c0001965:	51                   	push   ecx
c0001966:	eb 53                	jmp    c00019bb <dlcalloc+0x87>
c0001968:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000196e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001975:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000197c:	83 f8 13             	cmp    eax,0x13
c000197f:	76 46                	jbe    c00019c7 <dlcalloc+0x93>
c0001981:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001988:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000198f:	83 f8 1b             	cmp    eax,0x1b
c0001992:	76 33                	jbe    c00019c7 <dlcalloc+0x93>
c0001994:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000199b:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00019a2:	83 f8 23             	cmp    eax,0x23
c00019a5:	76 20                	jbe    c00019c7 <dlcalloc+0x93>
c00019a7:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019ae:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019b5:	eb 10                	jmp    c00019c7 <dlcalloc+0x93>
c00019b7:	83 e8 08             	sub    eax,0x8
c00019ba:	52                   	push   edx
c00019bb:	50                   	push   eax
c00019bc:	6a 00                	push   0x0
c00019be:	53                   	push   ebx
c00019bf:	e8 bc ed ff ff       	call   c0000780 <memset>
c00019c4:	83 c4 10             	add    esp,0x10
c00019c7:	89 d8                	mov    eax,ebx
c00019c9:	83 c4 08             	add    esp,0x8
c00019cc:	5b                   	pop    ebx
c00019cd:	c3                   	ret    

c00019ce <dlcfree>:
c00019ce:	e9 f1 f3 ff ff       	jmp    c0000dc4 <dlfree>

c00019d3 <dlindependent_calloc>:
c00019d3:	83 ec 28             	sub    esp,0x28
c00019d6:	b9 03 00 00 00       	mov    ecx,0x3
c00019db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019df:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ef:	e8 b9 fa ff ff       	call   c00014ad <iALLOc>
c00019f4:	83 c4 2c             	add    esp,0x2c
c00019f7:	c3                   	ret    

c00019f8 <dlindependent_comalloc>:
c00019f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a00:	31 c9                	xor    ecx,ecx
c0001a02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001a06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a0a:	e9 9e fa ff ff       	jmp    c00014ad <iALLOc>

c0001a0f <dlvalloc>:
c0001a0f:	83 ec 0c             	sub    esp,0xc
c0001a12:	83 3d c0 e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e1c0,0x0
c0001a19:	75 0a                	jne    c0001a25 <dlvalloc+0x16>
c0001a1b:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c0001a20:	e8 b8 f2 ff ff       	call   c0000cdd <malloc_consolidate>
c0001a25:	50                   	push   eax
c0001a26:	50                   	push   eax
c0001a27:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a2b:	ff 35 1c e5 02 c0    	push   DWORD PTR ds:0xc002e51c
c0001a31:	e8 db fd ff ff       	call   c0001811 <dlmemalign>
c0001a36:	83 c4 1c             	add    esp,0x1c
c0001a39:	c3                   	ret    

c0001a3a <dlpvalloc>:
c0001a3a:	83 ec 0c             	sub    esp,0xc
c0001a3d:	83 3d c0 e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e1c0,0x0
c0001a44:	75 0a                	jne    c0001a50 <dlpvalloc+0x16>
c0001a46:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c0001a4b:	e8 8d f2 ff ff       	call   c0000cdd <malloc_consolidate>
c0001a50:	a1 1c e5 02 c0       	mov    eax,ds:0xc002e51c
c0001a55:	89 c1                	mov    ecx,eax
c0001a57:	52                   	push   edx
c0001a58:	f7 d9                	neg    ecx
c0001a5a:	52                   	push   edx
c0001a5b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a5f:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a63:	21 ca                	and    edx,ecx
c0001a65:	52                   	push   edx
c0001a66:	50                   	push   eax
c0001a67:	e8 a5 fd ff ff       	call   c0001811 <dlmemalign>
c0001a6c:	83 c4 1c             	add    esp,0x1c
c0001a6f:	c3                   	ret    

c0001a70 <dlmalloc_trim>:
c0001a70:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c0001a75:	e8 63 f2 ff ff       	call   c0000cdd <malloc_consolidate>
c0001a7a:	31 c0                	xor    eax,eax
c0001a7c:	c3                   	ret    

c0001a7d <dlmalloc_usable_size>:
c0001a7d:	53                   	push   ebx
c0001a7e:	31 c0                	xor    eax,eax
c0001a80:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a84:	85 c9                	test   ecx,ecx
c0001a86:	74 24                	je     c0001aac <dlmalloc_usable_size+0x2f>
c0001a88:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a8b:	f6 c2 02             	test   dl,0x2
c0001a8e:	74 08                	je     c0001a98 <dlmalloc_usable_size+0x1b>
c0001a90:	83 e2 fc             	and    edx,0xfffffffc
c0001a93:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a96:	eb 14                	jmp    c0001aac <dlmalloc_usable_size+0x2f>
c0001a98:	89 d3                	mov    ebx,edx
c0001a9a:	31 c0                	xor    eax,eax
c0001a9c:	83 e3 fe             	and    ebx,0xfffffffe
c0001a9f:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001aa4:	74 06                	je     c0001aac <dlmalloc_usable_size+0x2f>
c0001aa6:	83 e2 fc             	and    edx,0xfffffffc
c0001aa9:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aac:	5b                   	pop    ebx
c0001aad:	c3                   	ret    

c0001aae <dlmallinfo>:
c0001aae:	55                   	push   ebp
c0001aaf:	57                   	push   edi
c0001ab0:	56                   	push   esi
c0001ab1:	53                   	push   ebx
c0001ab2:	83 ec 08             	sub    esp,0x8
c0001ab5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab9:	83 3d ec e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e1ec,0x0
c0001ac0:	75 0a                	jne    c0001acc <dlmallinfo+0x1e>
c0001ac2:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c0001ac7:	e8 11 f2 ff ff       	call   c0000cdd <malloc_consolidate>
c0001acc:	a1 ec e1 02 c0       	mov    eax,ds:0xc002e1ec
c0001ad1:	31 ed                	xor    ebp,ebp
c0001ad3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ad6:	31 c9                	xor    ecx,ecx
c0001ad8:	83 e0 fc             	and    eax,0xfffffffc
c0001adb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001adf:	31 c0                	xor    eax,eax
c0001ae1:	8b 14 85 c4 e1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1e3c]
c0001ae8:	85 d2                	test   edx,edx
c0001aea:	74 0e                	je     c0001afa <dlmallinfo+0x4c>
c0001aec:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aef:	45                   	inc    ebp
c0001af0:	83 e6 fc             	and    esi,0xfffffffc
c0001af3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001af6:	01 f1                	add    ecx,esi
c0001af8:	eb ee                	jmp    c0001ae8 <dlmallinfo+0x3a>
c0001afa:	40                   	inc    eax
c0001afb:	83 f8 0a             	cmp    eax,0xa
c0001afe:	75 e1                	jne    c0001ae1 <dlmallinfo+0x33>
c0001b00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b04:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b0b:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b0e:	b8 f4 e1 02 c0       	mov    eax,0xc002e1f4
c0001b13:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b16:	39 f0                	cmp    eax,esi
c0001b18:	74 10                	je     c0001b2a <dlmallinfo+0x7c>
c0001b1a:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b1d:	ff 04 24             	inc    DWORD PTR [esp]
c0001b20:	83 e7 fc             	and    edi,0xfffffffc
c0001b23:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b26:	01 fa                	add    edx,edi
c0001b28:	eb ec                	jmp    c0001b16 <dlmallinfo+0x68>
c0001b2a:	83 c0 08             	add    eax,0x8
c0001b2d:	3d ec e4 02 c0       	cmp    eax,0xc002e4ec
c0001b32:	75 df                	jne    c0001b13 <dlmallinfo+0x65>
c0001b34:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b37:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b3a:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b3d:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0001b42:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b45:	89 03                	mov    DWORD PTR [ebx],eax
c0001b47:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b4a:	8b 35 10 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e510
c0001b50:	29 d0                	sub    eax,edx
c0001b52:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b55:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b58:	8b 35 24 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e524
c0001b5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b62:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b65:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b68:	8b 35 34 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e534
c0001b6e:	89 d8                	mov    eax,ebx
c0001b70:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b73:	83 c4 08             	add    esp,0x8
c0001b76:	5b                   	pop    ebx
c0001b77:	5e                   	pop    esi
c0001b78:	5f                   	pop    edi
c0001b79:	5d                   	pop    ebp
c0001b7a:	c2 04 00             	ret    0x4

c0001b7d <dlmalloc_stats>:
c0001b7d:	83 ec 30             	sub    esp,0x30
c0001b80:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b84:	50                   	push   eax
c0001b85:	e8 24 ff ff ff       	call   c0001aae <dlmallinfo>
c0001b8a:	83 c4 30             	add    esp,0x30
c0001b8d:	c3                   	ret    

c0001b8e <dlmallopt>:
c0001b8e:	56                   	push   esi
c0001b8f:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c0001b94:	53                   	push   ebx
c0001b95:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b99:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b9d:	e8 3b f1 ff ff       	call   c0000cdd <malloc_consolidate>
c0001ba2:	8d 46 04             	lea    eax,[esi+0x4]
c0001ba5:	83 f8 05             	cmp    eax,0x5
c0001ba8:	77 67                	ja     c0001c11 <dlmallopt+0x83>
c0001baa:	ff 24 85 84 94 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6b7c]
c0001bb1:	83 fb 50             	cmp    ebx,0x50
c0001bb4:	77 5b                	ja     c0001c11 <dlmallopt+0x83>
c0001bb6:	ba 08 00 00 00       	mov    edx,0x8
c0001bbb:	85 db                	test   ebx,ebx
c0001bbd:	74 12                	je     c0001bd1 <dlmallopt+0x43>
c0001bbf:	83 c3 0b             	add    ebx,0xb
c0001bc2:	ba 10 00 00 00       	mov    edx,0x10
c0001bc7:	83 fb 0f             	cmp    ebx,0xf
c0001bca:	76 05                	jbe    c0001bd1 <dlmallopt+0x43>
c0001bcc:	89 da                	mov    edx,ebx
c0001bce:	83 e2 f8             	and    edx,0xfffffff8
c0001bd1:	a1 c0 e1 02 c0       	mov    eax,ds:0xc002e1c0
c0001bd6:	83 e0 03             	and    eax,0x3
c0001bd9:	09 d0                	or     eax,edx
c0001bdb:	a3 c0 e1 02 c0       	mov    ds:0xc002e1c0,eax
c0001be0:	eb 31                	jmp    c0001c13 <dlmallopt+0x85>
c0001be2:	89 1d 04 e5 02 c0    	mov    DWORD PTR ds:0xc002e504,ebx
c0001be8:	eb 06                	jmp    c0001bf0 <dlmallopt+0x62>
c0001bea:	89 1d 08 e5 02 c0    	mov    DWORD PTR ds:0xc002e508,ebx
c0001bf0:	be 01 00 00 00       	mov    esi,0x1
c0001bf5:	eb 1c                	jmp    c0001c13 <dlmallopt+0x85>
c0001bf7:	89 1d 0c e5 02 c0    	mov    DWORD PTR ds:0xc002e50c,ebx
c0001bfd:	eb f1                	jmp    c0001bf0 <dlmallopt+0x62>
c0001bff:	31 f6                	xor    esi,esi
c0001c01:	85 db                	test   ebx,ebx
c0001c03:	75 0e                	jne    c0001c13 <dlmallopt+0x85>
c0001c05:	c7 05 14 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e514,0x0
c0001c0f:	eb df                	jmp    c0001bf0 <dlmallopt+0x62>
c0001c11:	31 f6                	xor    esi,esi
c0001c13:	89 f0                	mov    eax,esi
c0001c15:	5b                   	pop    ebx
c0001c16:	5e                   	pop    esi
c0001c17:	c3                   	ret    

c0001c18 <disk_status>:
c0001c18:	31 c0                	xor    eax,eax
c0001c1a:	c3                   	ret    

c0001c1b <disk_initialize>:
c0001c1b:	31 c0                	xor    eax,eax
c0001c1d:	c3                   	ret    

c0001c1e <disk_read>:
c0001c1e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c23:	0f b6 04 85 a0 1c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce360]
c0001c2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c2f:	e9 d2 f2 01 00       	jmp    c0020f06 <fatWrapperReadDisk>

c0001c34 <disk_write>:
c0001c34:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c39:	0f b6 04 85 a0 1c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce360]
c0001c41:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c45:	e9 03 f3 01 00       	jmp    c0020f4d <fatWrapperWriteDisk>

c0001c4a <disk_ioctl>:
c0001c4a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c53:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c58:	0f b6 04 85 a0 1c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce360]
c0001c60:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c64:	e9 2b f3 01 00       	jmp    c0020f94 <fatWrapperIoctl>

c0001c69 <ld_word>:
c0001c69:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c6d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c70:	c1 e2 08             	shl    edx,0x8
c0001c73:	09 d0                	or     eax,edx
c0001c75:	c3                   	ret    

c0001c76 <ld_dword>:
c0001c76:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c7a:	89 d1                	mov    ecx,edx
c0001c7c:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c80:	c1 e1 08             	shl    ecx,0x8
c0001c83:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c86:	09 ca                	or     edx,ecx
c0001c88:	c1 e2 08             	shl    edx,0x8
c0001c8b:	09 d0                	or     eax,edx
c0001c8d:	c3                   	ret    

c0001c8e <ld_qword>:
c0001c8e:	57                   	push   edi
c0001c8f:	56                   	push   esi
c0001c90:	53                   	push   ebx
c0001c91:	31 db                	xor    ebx,ebx
c0001c93:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c96:	89 df                	mov    edi,ebx
c0001c98:	89 ce                	mov    esi,ecx
c0001c9a:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c9e:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca2:	c1 e6 08             	shl    esi,0x8
c0001ca5:	09 f2                	or     edx,esi
c0001ca7:	89 d6                	mov    esi,edx
c0001ca9:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001cad:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb1:	c1 e6 08             	shl    esi,0x8
c0001cb4:	09 f2                	or     edx,esi
c0001cb6:	89 d6                	mov    esi,edx
c0001cb8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cbc:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cc0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cc3:	c1 e6 08             	shl    esi,0x8
c0001cc6:	89 fb                	mov    ebx,edi
c0001cc8:	09 f2                	or     edx,esi
c0001cca:	89 d1                	mov    ecx,edx
c0001ccc:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cd0:	c1 e1 08             	shl    ecx,0x8
c0001cd3:	89 da                	mov    edx,ebx
c0001cd5:	09 c8                	or     eax,ecx
c0001cd7:	5b                   	pop    ebx
c0001cd8:	5e                   	pop    esi
c0001cd9:	5f                   	pop    edi
c0001cda:	c3                   	ret    

c0001cdb <st_word>:
c0001cdb:	66 89 10             	mov    WORD PTR [eax],dx
c0001cde:	c3                   	ret    

c0001cdf <st_dword>:
c0001cdf:	89 10                	mov    DWORD PTR [eax],edx
c0001ce1:	c3                   	ret    

c0001ce2 <st_qword>:
c0001ce2:	89 10                	mov    DWORD PTR [eax],edx
c0001ce4:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ce7:	c3                   	ret    

c0001ce8 <mem_cpy>:
c0001ce8:	85 c9                	test   ecx,ecx
c0001cea:	74 10                	je     c0001cfc <mem_cpy+0x14>
c0001cec:	57                   	push   edi
c0001ced:	01 c1                	add    ecx,eax
c0001cef:	56                   	push   esi
c0001cf0:	89 c7                	mov    edi,eax
c0001cf2:	89 d6                	mov    esi,edx
c0001cf4:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cf5:	39 f9                	cmp    ecx,edi
c0001cf7:	75 fb                	jne    c0001cf4 <mem_cpy+0xc>
c0001cf9:	5e                   	pop    esi
c0001cfa:	5f                   	pop    edi
c0001cfb:	c3                   	ret    
c0001cfc:	c3                   	ret    

c0001cfd <mem_set>:
c0001cfd:	01 c1                	add    ecx,eax
c0001cff:	40                   	inc    eax
c0001d00:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d03:	39 c8                	cmp    eax,ecx
c0001d05:	75 f8                	jne    c0001cff <mem_set+0x2>
c0001d07:	c3                   	ret    

c0001d08 <mem_cmp>:
c0001d08:	57                   	push   edi
c0001d09:	56                   	push   esi
c0001d0a:	89 c6                	mov    esi,eax
c0001d0c:	53                   	push   ebx
c0001d0d:	46                   	inc    esi
c0001d0e:	42                   	inc    edx
c0001d0f:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d13:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d17:	29 fb                	sub    ebx,edi
c0001d19:	89 cf                	mov    edi,ecx
c0001d1b:	29 f7                	sub    edi,esi
c0001d1d:	01 c7                	add    edi,eax
c0001d1f:	74 04                	je     c0001d25 <mem_cmp+0x1d>
c0001d21:	85 db                	test   ebx,ebx
c0001d23:	74 e8                	je     c0001d0d <mem_cmp+0x5>
c0001d25:	89 d8                	mov    eax,ebx
c0001d27:	5b                   	pop    ebx
c0001d28:	5e                   	pop    esi
c0001d29:	5f                   	pop    edi
c0001d2a:	c3                   	ret    

c0001d2b <chk_chr>:
c0001d2b:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d2e:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d31:	74 07                	je     c0001d3a <chk_chr+0xf>
c0001d33:	39 d1                	cmp    ecx,edx
c0001d35:	74 03                	je     c0001d3a <chk_chr+0xf>
c0001d37:	40                   	inc    eax
c0001d38:	eb f1                	jmp    c0001d2b <chk_chr>
c0001d3a:	89 c8                	mov    eax,ecx
c0001d3c:	c3                   	ret    

c0001d3d <dbc_1st>:
c0001d3d:	31 c0                	xor    eax,eax
c0001d3f:	c3                   	ret    

c0001d40 <dbc_2nd>:
c0001d40:	31 c0                	xor    eax,eax
c0001d42:	c3                   	ret    

c0001d43 <tchar2uni>:
c0001d43:	57                   	push   edi
c0001d44:	89 c7                	mov    edi,eax
c0001d46:	56                   	push   esi
c0001d47:	53                   	push   ebx
c0001d48:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d4a:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d4c:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d4f:	84 c9                	test   cl,cl
c0001d51:	78 0a                	js     c0001d5d <tchar2uni+0x1a>
c0001d53:	0f b6 d1             	movzx  edx,cl
c0001d56:	89 f3                	mov    ebx,esi
c0001d58:	e9 9f 00 00 00       	jmp    c0001dfc <tchar2uni+0xb9>
c0001d5d:	88 ca                	mov    dl,cl
c0001d5f:	83 e2 e0             	and    edx,0xffffffe0
c0001d62:	80 fa c0             	cmp    dl,0xc0
c0001d65:	75 0c                	jne    c0001d73 <tchar2uni+0x30>
c0001d67:	89 ca                	mov    edx,ecx
c0001d69:	b9 01 00 00 00       	mov    ecx,0x1
c0001d6e:	83 e2 1f             	and    edx,0x1f
c0001d71:	eb 2e                	jmp    c0001da1 <tchar2uni+0x5e>
c0001d73:	88 ca                	mov    dl,cl
c0001d75:	83 e2 f0             	and    edx,0xfffffff0
c0001d78:	80 fa e0             	cmp    dl,0xe0
c0001d7b:	75 0c                	jne    c0001d89 <tchar2uni+0x46>
c0001d7d:	89 ca                	mov    edx,ecx
c0001d7f:	b9 02 00 00 00       	mov    ecx,0x2
c0001d84:	83 e2 0f             	and    edx,0xf
c0001d87:	eb 18                	jmp    c0001da1 <tchar2uni+0x5e>
c0001d89:	88 ca                	mov    dl,cl
c0001d8b:	83 e2 f8             	and    edx,0xfffffff8
c0001d8e:	88 d0                	mov    al,dl
c0001d90:	83 ca ff             	or     edx,0xffffffff
c0001d93:	3c f0                	cmp    al,0xf0
c0001d95:	75 6c                	jne    c0001e03 <tchar2uni+0xc0>
c0001d97:	89 ca                	mov    edx,ecx
c0001d99:	b9 03 00 00 00       	mov    ecx,0x3
c0001d9e:	83 e2 07             	and    edx,0x7
c0001da1:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001da5:	46                   	inc    esi
c0001da6:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da9:	88 c8                	mov    al,cl
c0001dab:	83 e0 c0             	and    eax,0xffffffc0
c0001dae:	3c 80                	cmp    al,0x80
c0001db0:	75 4e                	jne    c0001e00 <tchar2uni+0xbd>
c0001db2:	c1 e2 06             	shl    edx,0x6
c0001db5:	83 e1 3f             	and    ecx,0x3f
c0001db8:	09 ca                	or     edx,ecx
c0001dba:	39 de                	cmp    esi,ebx
c0001dbc:	75 e7                	jne    c0001da5 <tchar2uni+0x62>
c0001dbe:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001dc1:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dc7:	77 37                	ja     c0001e00 <tchar2uni+0xbd>
c0001dc9:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dcf:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dd5:	76 29                	jbe    c0001e00 <tchar2uni+0xbd>
c0001dd7:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001ddd:	76 1d                	jbe    c0001dfc <tchar2uni+0xb9>
c0001ddf:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001de5:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001deb:	c1 e1 06             	shl    ecx,0x6
c0001dee:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001df4:	09 ca                	or     edx,ecx
c0001df6:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dfc:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dfe:	eb 03                	jmp    c0001e03 <tchar2uni+0xc0>
c0001e00:	83 ca ff             	or     edx,0xffffffff
c0001e03:	5b                   	pop    ebx
c0001e04:	89 d0                	mov    eax,edx
c0001e06:	5e                   	pop    esi
c0001e07:	5f                   	pop    edi
c0001e08:	c3                   	ret    

c0001e09 <put_utf>:
c0001e09:	53                   	push   ebx
c0001e0a:	83 f8 7f             	cmp    eax,0x7f
c0001e0d:	89 c3                	mov    ebx,eax
c0001e0f:	b0 00                	mov    al,0x0
c0001e11:	77 11                	ja     c0001e24 <put_utf+0x1b>
c0001e13:	85 c9                	test   ecx,ecx
c0001e15:	0f 84 e5 00 00 00    	je     c0001f00 <put_utf+0xf7>
c0001e1b:	88 1a                	mov    BYTE PTR [edx],bl
c0001e1d:	b0 01                	mov    al,0x1
c0001e1f:	e9 dc 00 00 00       	jmp    c0001f00 <put_utf+0xf7>
c0001e24:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e2a:	77 23                	ja     c0001e4f <put_utf+0x46>
c0001e2c:	83 f9 01             	cmp    ecx,0x1
c0001e2f:	0f 86 cb 00 00 00    	jbe    c0001f00 <put_utf+0xf7>
c0001e35:	89 d8                	mov    eax,ebx
c0001e37:	83 e3 3f             	and    ebx,0x3f
c0001e3a:	c1 e8 06             	shr    eax,0x6
c0001e3d:	83 cb 80             	or     ebx,0xffffff80
c0001e40:	83 c8 c0             	or     eax,0xffffffc0
c0001e43:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e46:	88 02                	mov    BYTE PTR [edx],al
c0001e48:	b0 02                	mov    al,0x2
c0001e4a:	e9 b1 00 00 00       	jmp    c0001f00 <put_utf+0xf7>
c0001e4f:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e55:	77 40                	ja     c0001e97 <put_utf+0x8e>
c0001e57:	83 f9 02             	cmp    ecx,0x2
c0001e5a:	0f 86 a0 00 00 00    	jbe    c0001f00 <put_utf+0xf7>
c0001e60:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e66:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e6c:	0f 86 8e 00 00 00    	jbe    c0001f00 <put_utf+0xf7>
c0001e72:	89 d8                	mov    eax,ebx
c0001e74:	c1 e8 0c             	shr    eax,0xc
c0001e77:	83 c8 e0             	or     eax,0xffffffe0
c0001e7a:	88 02                	mov    BYTE PTR [edx],al
c0001e7c:	89 d8                	mov    eax,ebx
c0001e7e:	83 e3 3f             	and    ebx,0x3f
c0001e81:	c1 e8 06             	shr    eax,0x6
c0001e84:	83 cb 80             	or     ebx,0xffffff80
c0001e87:	83 e0 3f             	and    eax,0x3f
c0001e8a:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e8d:	83 c8 80             	or     eax,0xffffff80
c0001e90:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e93:	b0 03                	mov    al,0x3
c0001e95:	eb 69                	jmp    c0001f00 <put_utf+0xf7>
c0001e97:	83 f9 03             	cmp    ecx,0x3
c0001e9a:	76 64                	jbe    c0001f00 <put_utf+0xf7>
c0001e9c:	89 d9                	mov    ecx,ebx
c0001e9e:	0f b7 c3             	movzx  eax,bx
c0001ea1:	66 31 c9             	xor    cx,cx
c0001ea4:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001eaa:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001eb0:	c1 e9 06             	shr    ecx,0x6
c0001eb3:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb9:	77 43                	ja     c0001efe <put_utf+0xf5>
c0001ebb:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001ec1:	77 3b                	ja     c0001efe <put_utf+0xf5>
c0001ec3:	09 cb                	or     ebx,ecx
c0001ec5:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ecb:	89 d8                	mov    eax,ebx
c0001ecd:	c1 e8 12             	shr    eax,0x12
c0001ed0:	83 c8 f0             	or     eax,0xfffffff0
c0001ed3:	88 02                	mov    BYTE PTR [edx],al
c0001ed5:	89 d8                	mov    eax,ebx
c0001ed7:	c1 e8 0c             	shr    eax,0xc
c0001eda:	83 e0 3f             	and    eax,0x3f
c0001edd:	83 c8 80             	or     eax,0xffffff80
c0001ee0:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ee3:	89 d8                	mov    eax,ebx
c0001ee5:	83 e3 3f             	and    ebx,0x3f
c0001ee8:	c1 e8 06             	shr    eax,0x6
c0001eeb:	83 cb 80             	or     ebx,0xffffff80
c0001eee:	83 e0 3f             	and    eax,0x3f
c0001ef1:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001ef4:	83 c8 80             	or     eax,0xffffff80
c0001ef7:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001efa:	b0 04                	mov    al,0x4
c0001efc:	eb 02                	jmp    c0001f00 <put_utf+0xf7>
c0001efe:	31 c0                	xor    eax,eax
c0001f00:	5b                   	pop    ebx
c0001f01:	c3                   	ret    

c0001f02 <clst2sect>:
c0001f02:	89 c1                	mov    ecx,eax
c0001f04:	83 ea 02             	sub    edx,0x2
c0001f07:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f0a:	83 e8 02             	sub    eax,0x2
c0001f0d:	39 d0                	cmp    eax,edx
c0001f0f:	76 0d                	jbe    c0001f1e <clst2sect+0x1c>
c0001f11:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f15:	f7 e2                	mul    edx
c0001f17:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f1a:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f1d:	c3                   	ret    
c0001f1e:	31 c0                	xor    eax,eax
c0001f20:	31 d2                	xor    edx,edx
c0001f22:	c3                   	ret    

c0001f23 <clmt_clust>:
c0001f23:	57                   	push   edi
c0001f24:	89 cf                	mov    edi,ecx
c0001f26:	56                   	push   esi
c0001f27:	89 d6                	mov    esi,edx
c0001f29:	53                   	push   ebx
c0001f2a:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f2e:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f31:	89 f2                	mov    edx,esi
c0001f33:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f35:	c1 ef 09             	shr    edi,0x9
c0001f38:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f3c:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f3f:	89 f9                	mov    ecx,edi
c0001f41:	31 ff                	xor    edi,edi
c0001f43:	57                   	push   edi
c0001f44:	56                   	push   esi
c0001f45:	51                   	push   ecx
c0001f46:	52                   	push   edx
c0001f47:	e8 b8 4b 02 00       	call   c0026b04 <__udivdi3>
c0001f4c:	83 c4 10             	add    esp,0x10
c0001f4f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f51:	85 d2                	test   edx,edx
c0001f53:	74 10                	je     c0001f65 <clmt_clust+0x42>
c0001f55:	39 d0                	cmp    eax,edx
c0001f57:	72 07                	jb     c0001f60 <clmt_clust+0x3d>
c0001f59:	29 d0                	sub    eax,edx
c0001f5b:	83 c3 08             	add    ebx,0x8
c0001f5e:	eb ef                	jmp    c0001f4f <clmt_clust+0x2c>
c0001f60:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f63:	89 c2                	mov    edx,eax
c0001f65:	5b                   	pop    ebx
c0001f66:	89 d0                	mov    eax,edx
c0001f68:	5e                   	pop    esi
c0001f69:	5f                   	pop    edi
c0001f6a:	c3                   	ret    

c0001f6b <pick_lfn>:
c0001f6b:	55                   	push   ebp
c0001f6c:	57                   	push   edi
c0001f6d:	56                   	push   esi
c0001f6e:	89 d6                	mov    esi,edx
c0001f70:	53                   	push   ebx
c0001f71:	89 c3                	mov    ebx,eax
c0001f73:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f76:	e8 ee fc ff ff       	call   c0001c69 <ld_word>
c0001f7b:	66 85 c0             	test   ax,ax
c0001f7e:	74 04                	je     c0001f84 <pick_lfn+0x19>
c0001f80:	31 c0                	xor    eax,eax
c0001f82:	eb 5c                	jmp    c0001fe0 <pick_lfn+0x75>
c0001f84:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f87:	bd 01 00 00 00       	mov    ebp,0x1
c0001f8c:	83 e1 bf             	and    ecx,0xffffffbf
c0001f8f:	31 ff                	xor    edi,edi
c0001f91:	49                   	dec    ecx
c0001f92:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f95:	0f b6 87 a0 95 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6a60]
c0001f9c:	01 f0                	add    eax,esi
c0001f9e:	e8 c6 fc ff ff       	call   c0001c69 <ld_word>
c0001fa3:	66 85 ed             	test   bp,bp
c0001fa6:	74 11                	je     c0001fb9 <pick_lfn+0x4e>
c0001fa8:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fae:	77 d0                	ja     c0001f80 <pick_lfn+0x15>
c0001fb0:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fb4:	89 c5                	mov    ebp,eax
c0001fb6:	41                   	inc    ecx
c0001fb7:	eb 04                	jmp    c0001fbd <pick_lfn+0x52>
c0001fb9:	66 40                	inc    ax
c0001fbb:	75 c3                	jne    c0001f80 <pick_lfn+0x15>
c0001fbd:	47                   	inc    edi
c0001fbe:	83 ff 0d             	cmp    edi,0xd
c0001fc1:	75 d2                	jne    c0001f95 <pick_lfn+0x2a>
c0001fc3:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fc6:	74 13                	je     c0001fdb <pick_lfn+0x70>
c0001fc8:	66 85 ed             	test   bp,bp
c0001fcb:	74 0e                	je     c0001fdb <pick_lfn+0x70>
c0001fcd:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fd3:	77 ab                	ja     c0001f80 <pick_lfn+0x15>
c0001fd5:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fdb:	b8 01 00 00 00       	mov    eax,0x1
c0001fe0:	5b                   	pop    ebx
c0001fe1:	5e                   	pop    esi
c0001fe2:	5f                   	pop    edi
c0001fe3:	5d                   	pop    ebp
c0001fe4:	c3                   	ret    

c0001fe5 <put_lfn>:
c0001fe5:	55                   	push   ebp
c0001fe6:	31 ed                	xor    ebp,ebp
c0001fe8:	57                   	push   edi
c0001fe9:	89 d7                	mov    edi,edx
c0001feb:	56                   	push   esi
c0001fec:	31 f6                	xor    esi,esi
c0001fee:	53                   	push   ebx
c0001fef:	83 ec 08             	sub    esp,0x8
c0001ff2:	89 04 24             	mov    DWORD PTR [esp],eax
c0001ff5:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ffd:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0002003:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002006:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002009:	31 d2                	xor    edx,edx
c000200b:	e8 cb fc ff ff       	call   c0001cdb <st_word>
c0002010:	0f b6 d9             	movzx  ebx,cl
c0002013:	4b                   	dec    ebx
c0002014:	6b db 0d             	imul   ebx,ebx,0xd
c0002017:	66 83 fe ff          	cmp    si,0xffff
c000201b:	74 08                	je     c0002025 <put_lfn+0x40>
c000201d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002020:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0002024:	43                   	inc    ebx
c0002025:	0f b6 85 a0 95 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6a60]
c000202c:	0f b7 d6             	movzx  edx,si
c000202f:	01 f8                	add    eax,edi
c0002031:	e8 a5 fc ff ff       	call   c0001cdb <st_word>
c0002036:	66 85 f6             	test   si,si
c0002039:	75 03                	jne    c000203e <put_lfn+0x59>
c000203b:	83 ce ff             	or     esi,0xffffffff
c000203e:	45                   	inc    ebp
c000203f:	83 fd 0d             	cmp    ebp,0xd
c0002042:	75 d3                	jne    c0002017 <put_lfn+0x32>
c0002044:	66 46                	inc    si
c0002046:	74 0a                	je     c0002052 <put_lfn+0x6d>
c0002048:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000204b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002050:	75 09                	jne    c000205b <put_lfn+0x76>
c0002052:	88 c8                	mov    al,cl
c0002054:	83 c8 40             	or     eax,0x40
c0002057:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000205b:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000205f:	88 07                	mov    BYTE PTR [edi],al
c0002061:	83 c4 08             	add    esp,0x8
c0002064:	5b                   	pop    ebx
c0002065:	5e                   	pop    esi
c0002066:	5f                   	pop    edi
c0002067:	5d                   	pop    ebp
c0002068:	c3                   	ret    

c0002069 <gen_numname>:
c0002069:	57                   	push   edi
c000206a:	89 cf                	mov    edi,ecx
c000206c:	56                   	push   esi
c000206d:	b9 0b 00 00 00       	mov    ecx,0xb
c0002072:	53                   	push   ebx
c0002073:	89 c6                	mov    esi,eax
c0002075:	83 ec 10             	sub    esp,0x10
c0002078:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000207c:	e8 67 fc ff ff       	call   c0001ce8 <mem_cpy>
c0002081:	83 fb 05             	cmp    ebx,0x5
c0002084:	76 2d                	jbe    c00020b3 <gen_numname+0x4a>
c0002086:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002089:	66 85 c0             	test   ax,ax
c000208c:	74 25                	je     c00020b3 <gen_numname+0x4a>
c000208e:	83 c7 02             	add    edi,0x2
c0002091:	ba 10 00 00 00       	mov    edx,0x10
c0002096:	01 db                	add    ebx,ebx
c0002098:	89 c1                	mov    ecx,eax
c000209a:	66 d1 e8             	shr    ax,1
c000209d:	83 e1 01             	and    ecx,0x1
c00020a0:	01 cb                	add    ebx,ecx
c00020a2:	0f ba e3 10          	bt     ebx,0x10
c00020a6:	73 06                	jae    c00020ae <gen_numname+0x45>
c00020a8:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020ae:	4a                   	dec    edx
c00020af:	75 e5                	jne    c0002096 <gen_numname+0x2d>
c00020b1:	eb d3                	jmp    c0002086 <gen_numname+0x1d>
c00020b3:	b8 07 00 00 00       	mov    eax,0x7
c00020b8:	88 d9                	mov    cl,bl
c00020ba:	83 e1 0f             	and    ecx,0xf
c00020bd:	8d 51 30             	lea    edx,[ecx+0x30]
c00020c0:	80 fa 39             	cmp    dl,0x39
c00020c3:	76 03                	jbe    c00020c8 <gen_numname+0x5f>
c00020c5:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c8:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020cb:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020cf:	89 da                	mov    edx,ebx
c00020d1:	c1 ea 04             	shr    edx,0x4
c00020d4:	83 fb 0f             	cmp    ebx,0xf
c00020d7:	76 06                	jbe    c00020df <gen_numname+0x76>
c00020d9:	89 c8                	mov    eax,ecx
c00020db:	89 d3                	mov    ebx,edx
c00020dd:	eb d9                	jmp    c00020b8 <gen_numname+0x4f>
c00020df:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020e4:	31 d2                	xor    edx,edx
c00020e6:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e9:	8d 04 16             	lea    eax,[esi+edx*1]
c00020ec:	39 ca                	cmp    edx,ecx
c00020ee:	73 18                	jae    c0002108 <gen_numname+0x9f>
c00020f0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020f3:	3c 20                	cmp    al,0x20
c00020f5:	74 11                	je     c0002108 <gen_numname+0x9f>
c00020f7:	e8 41 fc ff ff       	call   c0001d3d <dbc_1st>
c00020fc:	85 c0                	test   eax,eax
c00020fe:	74 05                	je     c0002105 <gen_numname+0x9c>
c0002100:	39 d3                	cmp    ebx,edx
c0002102:	74 04                	je     c0002108 <gen_numname+0x9f>
c0002104:	42                   	inc    edx
c0002105:	42                   	inc    edx
c0002106:	eb e1                	jmp    c00020e9 <gen_numname+0x80>
c0002108:	b0 20                	mov    al,0x20
c000210a:	83 f9 07             	cmp    ecx,0x7
c000210d:	77 05                	ja     c0002114 <gen_numname+0xab>
c000210f:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002113:	41                   	inc    ecx
c0002114:	42                   	inc    edx
c0002115:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002119:	83 fa 07             	cmp    edx,0x7
c000211c:	76 ea                	jbe    c0002108 <gen_numname+0x9f>
c000211e:	83 c4 10             	add    esp,0x10
c0002121:	5b                   	pop    ebx
c0002122:	5e                   	pop    esi
c0002123:	5f                   	pop    edi
c0002124:	c3                   	ret    

c0002125 <sum_sfn>:
c0002125:	31 c9                	xor    ecx,ecx
c0002127:	31 d2                	xor    edx,edx
c0002129:	d0 ca                	ror    dl,1
c000212b:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c000212e:	41                   	inc    ecx
c000212f:	83 f9 0b             	cmp    ecx,0xb
c0002132:	75 f5                	jne    c0002129 <sum_sfn+0x4>
c0002134:	88 d0                	mov    al,dl
c0002136:	c3                   	ret    

c0002137 <xdir_sum>:
c0002137:	56                   	push   esi
c0002138:	31 c9                	xor    ecx,ecx
c000213a:	53                   	push   ebx
c000213b:	31 d2                	xor    edx,edx
c000213d:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002141:	43                   	inc    ebx
c0002142:	c1 e3 05             	shl    ebx,0x5
c0002145:	83 fa 02             	cmp    edx,0x2
c0002148:	74 0b                	je     c0002155 <xdir_sum+0x1e>
c000214a:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000214e:	66 d1 c9             	ror    cx,1
c0002151:	01 f1                	add    ecx,esi
c0002153:	eb 05                	jmp    c000215a <xdir_sum+0x23>
c0002155:	ba 03 00 00 00       	mov    edx,0x3
c000215a:	42                   	inc    edx
c000215b:	39 d3                	cmp    ebx,edx
c000215d:	77 e6                	ja     c0002145 <xdir_sum+0xe>
c000215f:	89 c8                	mov    eax,ecx
c0002161:	5b                   	pop    ebx
c0002162:	5e                   	pop    esi
c0002163:	c3                   	ret    

c0002164 <xsum32>:
c0002164:	d1 ca                	ror    edx,1
c0002166:	0f b6 c0             	movzx  eax,al
c0002169:	01 d0                	add    eax,edx
c000216b:	c3                   	ret    

c000216c <get_xfileinfo>:
c000216c:	55                   	push   ebp
c000216d:	31 c9                	xor    ecx,ecx
c000216f:	57                   	push   edi
c0002170:	bd 40 00 00 00       	mov    ebp,0x40
c0002175:	56                   	push   esi
c0002176:	31 ff                	xor    edi,edi
c0002178:	53                   	push   ebx
c0002179:	89 c6                	mov    esi,eax
c000217b:	83 ec 0c             	sub    esp,0xc
c000217e:	89 d3                	mov    ebx,edx
c0002180:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002187:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c000218b:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000218e:	76 6d                	jbe    c00021fd <get_xfileinfo+0x91>
c0002190:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002196:	76 0b                	jbe    c00021a3 <get_xfileinfo+0x37>
c0002198:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000219c:	bf 01 00 00 00       	mov    edi,0x1
c00021a1:	eb 63                	jmp    c0002206 <get_xfileinfo+0x9a>
c00021a3:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a9:	75 03                	jne    c00021ae <get_xfileinfo+0x42>
c00021ab:	83 c5 02             	add    ebp,0x2
c00021ae:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021b1:	83 c5 02             	add    ebp,0x2
c00021b4:	e8 b0 fa ff ff       	call   c0001c69 <ld_word>
c00021b9:	ff 04 24             	inc    DWORD PTR [esp]
c00021bc:	66 85 c9             	test   cx,cx
c00021bf:	75 0d                	jne    c00021ce <get_xfileinfo+0x62>
c00021c1:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021c7:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021cc:	76 2b                	jbe    c00021f9 <get_xfileinfo+0x8d>
c00021ce:	c1 e1 10             	shl    ecx,0x10
c00021d1:	ba ff 00 00 00       	mov    edx,0xff
c00021d6:	0f b7 c0             	movzx  eax,ax
c00021d9:	29 fa                	sub    edx,edi
c00021db:	09 c8                	or     eax,ecx
c00021dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021e1:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021e5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e9:	e8 1b fc ff ff       	call   c0001e09 <put_utf>
c00021ee:	84 c0                	test   al,al
c00021f0:	74 a6                	je     c0002198 <get_xfileinfo+0x2c>
c00021f2:	0f b6 c0             	movzx  eax,al
c00021f5:	01 c7                	add    edi,eax
c00021f7:	31 c0                	xor    eax,eax
c00021f9:	89 c1                	mov    ecx,eax
c00021fb:	eb 8a                	jmp    c0002187 <get_xfileinfo+0x1b>
c00021fd:	85 ff                	test   edi,edi
c00021ff:	74 97                	je     c0002198 <get_xfileinfo+0x2c>
c0002201:	66 85 c9             	test   cx,cx
c0002204:	75 92                	jne    c0002198 <get_xfileinfo+0x2c>
c0002206:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c000220b:	31 c0                	xor    eax,eax
c000220d:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002211:	31 d2                	xor    edx,edx
c0002213:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002216:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002219:	80 e1 10             	and    cl,0x10
c000221c:	75 08                	jne    c0002226 <get_xfileinfo+0xba>
c000221e:	8d 46 38             	lea    eax,[esi+0x38]
c0002221:	e8 68 fa ff ff       	call   c0001c8e <ld_qword>
c0002226:	89 03                	mov    DWORD PTR [ebx],eax
c0002228:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000222b:	8d 46 0c             	lea    eax,[esi+0xc]
c000222e:	e8 36 fa ff ff       	call   c0001c69 <ld_word>
c0002233:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002237:	8d 46 0e             	lea    eax,[esi+0xe]
c000223a:	e8 2a fa ff ff       	call   c0001c69 <ld_word>
c000223f:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002243:	83 c4 0c             	add    esp,0xc
c0002246:	5b                   	pop    ebx
c0002247:	5e                   	pop    esi
c0002248:	5f                   	pop    edi
c0002249:	5d                   	pop    ebp
c000224a:	c3                   	ret    

c000224b <get_ldnumber>:
c000224b:	8b 10                	mov    edx,DWORD PTR [eax]
c000224d:	85 d2                	test   edx,edx
c000224f:	74 14                	je     c0002265 <get_ldnumber+0x1a>
c0002251:	56                   	push   esi
c0002252:	53                   	push   ebx
c0002253:	89 d3                	mov    ebx,edx
c0002255:	43                   	inc    ebx
c0002256:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002259:	80 f9 1f             	cmp    cl,0x1f
c000225c:	76 0d                	jbe    c000226b <get_ldnumber+0x20>
c000225e:	80 f9 3a             	cmp    cl,0x3a
c0002261:	75 f2                	jne    c0002255 <get_ldnumber+0xa>
c0002263:	eb 0a                	jmp    c000226f <get_ldnumber+0x24>
c0002265:	83 c9 ff             	or     ecx,0xffffffff
c0002268:	89 c8                	mov    eax,ecx
c000226a:	c3                   	ret    
c000226b:	31 c9                	xor    ecx,ecx
c000226d:	eb 24                	jmp    c0002293 <get_ldnumber+0x48>
c000226f:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002272:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002275:	80 f9 09             	cmp    cl,0x9
c0002278:	77 16                	ja     c0002290 <get_ldnumber+0x45>
c000227a:	83 c2 02             	add    edx,0x2
c000227d:	83 c9 ff             	or     ecx,0xffffffff
c0002280:	39 d3                	cmp    ebx,edx
c0002282:	75 0f                	jne    c0002293 <get_ldnumber+0x48>
c0002284:	89 f2                	mov    edx,esi
c0002286:	89 18                	mov    DWORD PTR [eax],ebx
c0002288:	0f be ca             	movsx  ecx,dl
c000228b:	83 e9 30             	sub    ecx,0x30
c000228e:	eb 03                	jmp    c0002293 <get_ldnumber+0x48>
c0002290:	83 c9 ff             	or     ecx,0xffffffff
c0002293:	89 c8                	mov    eax,ecx
c0002295:	5b                   	pop    ebx
c0002296:	5e                   	pop    esi
c0002297:	c3                   	ret    

c0002298 <crc32>:
c0002298:	56                   	push   esi
c0002299:	89 d6                	mov    esi,edx
c000229b:	53                   	push   ebx
c000229c:	b2 01                	mov    dl,0x1
c000229e:	bb 08 00 00 00       	mov    ebx,0x8
c00022a3:	89 f1                	mov    ecx,esi
c00022a5:	84 d1                	test   cl,dl
c00022a7:	0f 95 c1             	setne  cl
c00022aa:	0f b6 c9             	movzx  ecx,cl
c00022ad:	31 c1                	xor    ecx,eax
c00022af:	89 c8                	mov    eax,ecx
c00022b1:	d1 e8                	shr    eax,1
c00022b3:	80 e1 01             	and    cl,0x1
c00022b6:	74 05                	je     c00022bd <crc32+0x25>
c00022b8:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022bd:	d1 e2                	shl    edx,1
c00022bf:	4b                   	dec    ebx
c00022c0:	75 e1                	jne    c00022a3 <crc32+0xb>
c00022c2:	5b                   	pop    ebx
c00022c3:	5e                   	pop    esi
c00022c4:	c3                   	ret    

c00022c5 <test_gpt_header>:
c00022c5:	55                   	push   ebp
c00022c6:	b9 10 00 00 00       	mov    ecx,0x10
c00022cb:	57                   	push   edi
c00022cc:	ba a0 94 02 c0       	mov    edx,0xc00294a0
c00022d1:	56                   	push   esi
c00022d2:	31 ff                	xor    edi,edi
c00022d4:	53                   	push   ebx
c00022d5:	89 c3                	mov    ebx,eax
c00022d7:	e8 2c fa ff ff       	call   c0001d08 <mem_cmp>
c00022dc:	85 c0                	test   eax,eax
c00022de:	75 55                	jne    c0002335 <test_gpt_header+0x70>
c00022e0:	89 c7                	mov    edi,eax
c00022e2:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022e7:	83 ce ff             	or     esi,0xffffffff
c00022ea:	31 d2                	xor    edx,edx
c00022ec:	83 fd 03             	cmp    ebp,0x3
c00022ef:	76 05                	jbe    c00022f6 <test_gpt_header+0x31>
c00022f1:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022f6:	89 f0                	mov    eax,esi
c00022f8:	45                   	inc    ebp
c00022f9:	e8 9a ff ff ff       	call   c0002298 <crc32>
c00022fe:	83 fd 4c             	cmp    ebp,0x4c
c0002301:	89 c6                	mov    esi,eax
c0002303:	75 e5                	jne    c00022ea <test_gpt_header+0x25>
c0002305:	8d 43 10             	lea    eax,[ebx+0x10]
c0002308:	f7 d6                	not    esi
c000230a:	e8 67 f9 ff ff       	call   c0001c76 <ld_dword>
c000230f:	39 c6                	cmp    esi,eax
c0002311:	75 22                	jne    c0002335 <test_gpt_header+0x70>
c0002313:	8d 43 54             	lea    eax,[ebx+0x54]
c0002316:	e8 5b f9 ff ff       	call   c0001c76 <ld_dword>
c000231b:	83 c0 80             	add    eax,0xffffff80
c000231e:	75 15                	jne    c0002335 <test_gpt_header+0x70>
c0002320:	8d 43 50             	lea    eax,[ebx+0x50]
c0002323:	e8 4e f9 ff ff       	call   c0001c76 <ld_dword>
c0002328:	3d 80 00 00 00       	cmp    eax,0x80
c000232d:	0f 96 c0             	setbe  al
c0002330:	0f b6 c0             	movzx  eax,al
c0002333:	89 c7                	mov    edi,eax
c0002335:	5b                   	pop    ebx
c0002336:	89 f8                	mov    eax,edi
c0002338:	5e                   	pop    esi
c0002339:	5f                   	pop    edi
c000233a:	5d                   	pop    ebp
c000233b:	c3                   	ret    

c000233c <make_rand>:
c000233c:	56                   	push   esi
c000233d:	85 c0                	test   eax,eax
c000233f:	53                   	push   ebx
c0002340:	75 05                	jne    c0002347 <make_rand+0xb>
c0002342:	b8 01 00 00 00       	mov    eax,0x1
c0002347:	01 d1                	add    ecx,edx
c0002349:	bb 08 00 00 00       	mov    ebx,0x8
c000234e:	89 c6                	mov    esi,eax
c0002350:	d1 e8                	shr    eax,1
c0002352:	83 e6 01             	and    esi,0x1
c0002355:	85 f6                	test   esi,esi
c0002357:	74 05                	je     c000235e <make_rand+0x22>
c0002359:	35 00 00 00 a3       	xor    eax,0xa3000000
c000235e:	4b                   	dec    ebx
c000235f:	75 ed                	jne    c000234e <make_rand+0x12>
c0002361:	42                   	inc    edx
c0002362:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002365:	39 ca                	cmp    edx,ecx
c0002367:	75 e0                	jne    c0002349 <make_rand+0xd>
c0002369:	5b                   	pop    ebx
c000236a:	5e                   	pop    esi
c000236b:	c3                   	ret    

c000236c <validate>:
c000236c:	56                   	push   esi
c000236d:	53                   	push   ebx
c000236e:	89 d6                	mov    esi,edx
c0002370:	51                   	push   ecx
c0002371:	85 c0                	test   eax,eax
c0002373:	75 09                	jne    c000237e <validate+0x12>
c0002375:	b8 09 00 00 00       	mov    eax,0x9
c000237a:	31 c9                	xor    ecx,ecx
c000237c:	eb 2f                	jmp    c00023ad <validate+0x41>
c000237e:	89 c3                	mov    ebx,eax
c0002380:	8b 00                	mov    eax,DWORD PTR [eax]
c0002382:	85 c0                	test   eax,eax
c0002384:	74 ef                	je     c0002375 <validate+0x9>
c0002386:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002389:	74 ea                	je     c0002375 <validate+0x9>
c000238b:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000238f:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002393:	75 e0                	jne    c0002375 <validate+0x9>
c0002395:	83 ec 0c             	sub    esp,0xc
c0002398:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000239c:	50                   	push   eax
c000239d:	e8 76 f8 ff ff       	call   c0001c18 <disk_status>
c00023a2:	83 c4 10             	add    esp,0x10
c00023a5:	a8 01                	test   al,0x1
c00023a7:	75 cc                	jne    c0002375 <validate+0x9>
c00023a9:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023ab:	31 c0                	xor    eax,eax
c00023ad:	89 0e                	mov    DWORD PTR [esi],ecx
c00023af:	5a                   	pop    edx
c00023b0:	5b                   	pop    ebx
c00023b1:	5e                   	pop    esi
c00023b2:	c3                   	ret    

c00023b3 <sync_window>:
c00023b3:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023b7:	0f 84 85 00 00 00    	je     c0002442 <sync_window+0x8f>
c00023bd:	55                   	push   ebp
c00023be:	8d 68 54             	lea    ebp,[eax+0x54]
c00023c1:	57                   	push   edi
c00023c2:	56                   	push   esi
c00023c3:	53                   	push   ebx
c00023c4:	89 c3                	mov    ebx,eax
c00023c6:	83 ec 28             	sub    esp,0x28
c00023c9:	6a 01                	push   0x1
c00023cb:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023ce:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023d1:	55                   	push   ebp
c00023d2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023d6:	50                   	push   eax
c00023d7:	e8 58 f8 ff ff       	call   c0001c34 <disk_write>
c00023dc:	83 c4 20             	add    esp,0x20
c00023df:	ba 01 00 00 00       	mov    edx,0x1
c00023e4:	85 c0                	test   eax,eax
c00023e6:	75 50                	jne    c0002438 <sync_window+0x85>
c00023e8:	31 ff                	xor    edi,edi
c00023ea:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ed:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023f1:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023f5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f8:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023fb:	89 c6                	mov    esi,eax
c00023fd:	89 d7                	mov    edi,edx
c00023ff:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c0002402:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002406:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002409:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c000240d:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002411:	73 23                	jae    c0002436 <sync_window+0x83>
c0002413:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002417:	75 1d                	jne    c0002436 <sync_window+0x83>
c0002419:	83 ec 0c             	sub    esp,0xc
c000241c:	6a 01                	push   0x1
c000241e:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002422:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002426:	52                   	push   edx
c0002427:	50                   	push   eax
c0002428:	55                   	push   ebp
c0002429:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000242d:	50                   	push   eax
c000242e:	e8 01 f8 ff ff       	call   c0001c34 <disk_write>
c0002433:	83 c4 20             	add    esp,0x20
c0002436:	31 d2                	xor    edx,edx
c0002438:	83 c4 1c             	add    esp,0x1c
c000243b:	89 d0                	mov    eax,edx
c000243d:	5b                   	pop    ebx
c000243e:	5e                   	pop    esi
c000243f:	5f                   	pop    edi
c0002440:	5d                   	pop    ebp
c0002441:	c3                   	ret    
c0002442:	31 d2                	xor    edx,edx
c0002444:	89 d0                	mov    eax,edx
c0002446:	c3                   	ret    

c0002447 <move_window>:
c0002447:	56                   	push   esi
c0002448:	53                   	push   ebx
c0002449:	89 c3                	mov    ebx,eax
c000244b:	83 ec 14             	sub    esp,0x14
c000244e:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002451:	75 07                	jne    c000245a <move_window+0x13>
c0002453:	31 f6                	xor    esi,esi
c0002455:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002458:	74 59                	je     c00024b3 <move_window+0x6c>
c000245a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000245e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002462:	89 d8                	mov    eax,ebx
c0002464:	e8 4a ff ff ff       	call   c00023b3 <sync_window>
c0002469:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000246d:	89 c6                	mov    esi,eax
c000246f:	85 c0                	test   eax,eax
c0002471:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002475:	75 3c                	jne    c00024b3 <move_window+0x6c>
c0002477:	83 ec 0c             	sub    esp,0xc
c000247a:	8d 43 54             	lea    eax,[ebx+0x54]
c000247d:	6a 01                	push   0x1
c000247f:	51                   	push   ecx
c0002480:	52                   	push   edx
c0002481:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002485:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002489:	50                   	push   eax
c000248a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000248e:	50                   	push   eax
c000248f:	e8 8a f7 ff ff       	call   c0001c1e <disk_read>
c0002494:	83 c4 20             	add    esp,0x20
c0002497:	85 c0                	test   eax,eax
c0002499:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000249d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00024a1:	74 0a                	je     c00024ad <move_window+0x66>
c00024a3:	83 ca ff             	or     edx,0xffffffff
c00024a6:	be 01 00 00 00       	mov    esi,0x1
c00024ab:	89 d1                	mov    ecx,edx
c00024ad:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024b0:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024b3:	89 f0                	mov    eax,esi
c00024b5:	83 c4 14             	add    esp,0x14
c00024b8:	5b                   	pop    ebx
c00024b9:	5e                   	pop    esi
c00024ba:	c3                   	ret    

c00024bb <check_fs>:
c00024bb:	53                   	push   ebx
c00024bc:	89 c3                	mov    ebx,eax
c00024be:	83 ec 08             	sub    esp,0x8
c00024c1:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024c5:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024cc:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024d3:	e8 6f ff ff ff       	call   c0002447 <move_window>
c00024d8:	ba 04 00 00 00       	mov    edx,0x4
c00024dd:	85 c0                	test   eax,eax
c00024df:	0f 85 89 00 00 00    	jne    c000256e <check_fs+0xb3>
c00024e5:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024eb:	e8 79 f7 ff ff       	call   c0001c69 <ld_word>
c00024f0:	ba 03 00 00 00       	mov    edx,0x3
c00024f5:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f9:	75 73                	jne    c000256e <check_fs+0xb3>
c00024fb:	ba c0 95 02 c0       	mov    edx,0xc00295c0
c0002500:	8d 43 54             	lea    eax,[ebx+0x54]
c0002503:	b9 0b 00 00 00       	mov    ecx,0xb
c0002508:	e8 fb f7 ff ff       	call   c0001d08 <mem_cmp>
c000250d:	ba 01 00 00 00       	mov    edx,0x1
c0002512:	85 c0                	test   eax,eax
c0002514:	74 58                	je     c000256e <check_fs+0xb3>
c0002516:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002519:	8d 50 18             	lea    edx,[eax+0x18]
c000251c:	80 fa 01             	cmp    dl,0x1
c000251f:	76 09                	jbe    c000252a <check_fs+0x6f>
c0002521:	ba 02 00 00 00       	mov    edx,0x2
c0002526:	3c eb                	cmp    al,0xeb
c0002528:	75 44                	jne    c000256e <check_fs+0xb3>
c000252a:	ba a0 c9 02 c0       	mov    edx,0xc002c9a0
c000252f:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002535:	b9 03 00 00 00       	mov    ecx,0x3
c000253a:	e8 c9 f7 ff ff       	call   c0001d08 <mem_cmp>
c000253f:	31 d2                	xor    edx,edx
c0002541:	85 c0                	test   eax,eax
c0002543:	74 29                	je     c000256e <check_fs+0xb3>
c0002545:	ba cc 95 02 c0       	mov    edx,0xc00295cc
c000254a:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002550:	b9 05 00 00 00       	mov    ecx,0x5
c0002555:	e8 ae f7 ff ff       	call   c0001d08 <mem_cmp>
c000255a:	31 d2                	xor    edx,edx
c000255c:	85 c0                	test   eax,eax
c000255e:	74 0e                	je     c000256e <check_fs+0xb3>
c0002560:	31 d2                	xor    edx,edx
c0002562:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002569:	0f 95 c2             	setne  dl
c000256c:	01 d2                	add    edx,edx
c000256e:	89 d0                	mov    eax,edx
c0002570:	83 c4 08             	add    esp,0x8
c0002573:	5b                   	pop    ebx
c0002574:	c3                   	ret    

c0002575 <find_volume>:
c0002575:	55                   	push   ebp
c0002576:	31 c9                	xor    ecx,ecx
c0002578:	57                   	push   edi
c0002579:	56                   	push   esi
c000257a:	89 d6                	mov    esi,edx
c000257c:	53                   	push   ebx
c000257d:	31 d2                	xor    edx,edx
c000257f:	83 ec 3c             	sub    esp,0x3c
c0002582:	89 c3                	mov    ebx,eax
c0002584:	e8 32 ff ff ff       	call   c00024bb <check_fs>
c0002589:	83 f8 02             	cmp    eax,0x2
c000258c:	74 0e                	je     c000259c <find_volume+0x27>
c000258e:	0f 87 5d 01 00 00    	ja     c00026f1 <find_volume+0x17c>
c0002594:	85 f6                	test   esi,esi
c0002596:	0f 84 55 01 00 00    	je     c00026f1 <find_volume+0x17c>
c000259c:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00025a3:	0f 85 dd 00 00 00    	jne    c0002686 <find_volume+0x111>
c00025a9:	31 c9                	xor    ecx,ecx
c00025ab:	ba 01 00 00 00       	mov    edx,0x1
c00025b0:	89 d8                	mov    eax,ebx
c00025b2:	e8 90 fe ff ff       	call   c0002447 <move_window>
c00025b7:	85 c0                	test   eax,eax
c00025b9:	74 0a                	je     c00025c5 <find_volume+0x50>
c00025bb:	b8 04 00 00 00       	mov    eax,0x4
c00025c0:	e9 2c 01 00 00       	jmp    c00026f1 <find_volume+0x17c>
c00025c5:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c8:	89 e8                	mov    eax,ebp
c00025ca:	e8 f6 fc ff ff       	call   c00022c5 <test_gpt_header>
c00025cf:	85 c0                	test   eax,eax
c00025d1:	75 0a                	jne    c00025dd <find_volume+0x68>
c00025d3:	b8 03 00 00 00       	mov    eax,0x3
c00025d8:	e9 14 01 00 00       	jmp    c00026f1 <find_volume+0x17c>
c00025dd:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025e3:	e8 8e f6 ff ff       	call   c0001c76 <ld_dword>
c00025e8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025ec:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025f2:	e8 97 f6 ff ff       	call   c0001c8e <ld_qword>
c00025f7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025ff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002603:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002607:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000260f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002613:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002617:	74 ba                	je     c00025d3 <find_volume+0x5e>
c0002619:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000261d:	31 c9                	xor    ecx,ecx
c000261f:	c1 e7 07             	shl    edi,0x7
c0002622:	89 d8                	mov    eax,ebx
c0002624:	89 fa                	mov    edx,edi
c0002626:	c1 ea 09             	shr    edx,0x9
c0002629:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000262d:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002631:	e8 11 fe ff ff       	call   c0002447 <move_window>
c0002636:	85 c0                	test   eax,eax
c0002638:	75 81                	jne    c00025bb <find_volume+0x46>
c000263a:	81 e7 80 01 00 00    	and    edi,0x180
c0002640:	b9 10 00 00 00       	mov    ecx,0x10
c0002645:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002649:	ba b0 95 02 c0       	mov    edx,0xc00295b0
c000264e:	e8 b5 f6 ff ff       	call   c0001d08 <mem_cmp>
c0002653:	85 c0                	test   eax,eax
c0002655:	75 29                	jne    c0002680 <find_volume+0x10b>
c0002657:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000265b:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000265f:	e8 2a f6 ff ff       	call   c0001c8e <ld_qword>
c0002664:	89 d1                	mov    ecx,edx
c0002666:	89 c2                	mov    edx,eax
c0002668:	89 d8                	mov    eax,ebx
c000266a:	e8 4c fe ff ff       	call   c00024bb <check_fs>
c000266f:	85 f6                	test   esi,esi
c0002671:	75 07                	jne    c000267a <find_volume+0x105>
c0002673:	83 f8 01             	cmp    eax,0x1
c0002676:	77 08                	ja     c0002680 <find_volume+0x10b>
c0002678:	eb 77                	jmp    c00026f1 <find_volume+0x17c>
c000267a:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000267e:	74 71                	je     c00026f1 <find_volume+0x17c>
c0002680:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002684:	eb 89                	jmp    c000260f <find_volume+0x9a>
c0002686:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000268a:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002690:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002696:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000269a:	89 cd                	mov    ebp,ecx
c000269c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00026a0:	89 f8                	mov    eax,edi
c00026a2:	83 c7 10             	add    edi,0x10
c00026a5:	e8 cc f5 ff ff       	call   c0001c76 <ld_dword>
c00026aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026ae:	89 01                	mov    DWORD PTR [ecx],eax
c00026b0:	83 c1 04             	add    ecx,0x4
c00026b3:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026b7:	75 e3                	jne    c000269c <find_volume+0x127>
c00026b9:	31 ff                	xor    edi,edi
c00026bb:	85 f6                	test   esi,esi
c00026bd:	74 03                	je     c00026c2 <find_volume+0x14d>
c00026bf:	8d 7e ff             	lea    edi,[esi-0x1]
c00026c2:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026c6:	85 d2                	test   edx,edx
c00026c8:	74 14                	je     c00026de <find_volume+0x169>
c00026ca:	31 c9                	xor    ecx,ecx
c00026cc:	89 d8                	mov    eax,ebx
c00026ce:	e8 e8 fd ff ff       	call   c00024bb <check_fs>
c00026d3:	83 f8 01             	cmp    eax,0x1
c00026d6:	76 19                	jbe    c00026f1 <find_volume+0x17c>
c00026d8:	85 f6                	test   esi,esi
c00026da:	74 0f                	je     c00026eb <find_volume+0x176>
c00026dc:	eb 13                	jmp    c00026f1 <find_volume+0x17c>
c00026de:	85 f6                	test   esi,esi
c00026e0:	0f 85 ed fe ff ff    	jne    c00025d3 <find_volume+0x5e>
c00026e6:	b8 03 00 00 00       	mov    eax,0x3
c00026eb:	47                   	inc    edi
c00026ec:	83 ff 03             	cmp    edi,0x3
c00026ef:	76 d1                	jbe    c00026c2 <find_volume+0x14d>
c00026f1:	83 c4 3c             	add    esp,0x3c
c00026f4:	5b                   	pop    ebx
c00026f5:	5e                   	pop    esi
c00026f6:	5f                   	pop    edi
c00026f7:	5d                   	pop    ebp
c00026f8:	c3                   	ret    

c00026f9 <mount_volume>:
c00026f9:	55                   	push   ebp
c00026fa:	57                   	push   edi
c00026fb:	89 cf                	mov    edi,ecx
c00026fd:	56                   	push   esi
c00026fe:	53                   	push   ebx
c00026ff:	bb 0b 00 00 00       	mov    ebx,0xb
c0002704:	83 ec 3c             	sub    esp,0x3c
c0002707:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000270d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002711:	e8 35 fb ff ff       	call   c000224b <get_ldnumber>
c0002716:	85 c0                	test   eax,eax
c0002718:	0f 88 3a 05 00 00    	js     c0002c58 <mount_volume+0x55f>
c000271e:	8b 2c 85 60 e5 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1aa0]
c0002725:	89 c6                	mov    esi,eax
c0002727:	bb 0c 00 00 00       	mov    ebx,0xc
c000272c:	85 ed                	test   ebp,ebp
c000272e:	0f 84 24 05 00 00    	je     c0002c58 <mount_volume+0x55f>
c0002734:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002738:	83 e7 fe             	and    edi,0xfffffffe
c000273b:	89 2a                	mov    DWORD PTR [edx],ebp
c000273d:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002741:	74 32                	je     c0002775 <mount_volume+0x7c>
c0002743:	83 ec 0c             	sub    esp,0xc
c0002746:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000274a:	50                   	push   eax
c000274b:	e8 c8 f4 ff ff       	call   c0001c18 <disk_status>
c0002750:	83 c4 10             	add    esp,0x10
c0002753:	a8 01                	test   al,0x1
c0002755:	75 1e                	jne    c0002775 <mount_volume+0x7c>
c0002757:	31 db                	xor    ebx,ebx
c0002759:	89 f9                	mov    ecx,edi
c000275b:	84 c9                	test   cl,cl
c000275d:	0f 84 f5 04 00 00    	je     c0002c58 <mount_volume+0x55f>
c0002763:	a8 04                	test   al,0x4
c0002765:	0f 84 ed 04 00 00    	je     c0002c58 <mount_volume+0x55f>
c000276b:	bb 0a 00 00 00       	mov    ebx,0xa
c0002770:	e9 e3 04 00 00       	jmp    c0002c58 <mount_volume+0x55f>
c0002775:	83 ec 0c             	sub    esp,0xc
c0002778:	89 f0                	mov    eax,esi
c000277a:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000277e:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002781:	0f b6 f0             	movzx  esi,al
c0002784:	bb 03 00 00 00       	mov    ebx,0x3
c0002789:	56                   	push   esi
c000278a:	e8 8c f4 ff ff       	call   c0001c1b <disk_initialize>
c000278f:	83 c4 10             	add    esp,0x10
c0002792:	a8 01                	test   al,0x1
c0002794:	0f 85 be 04 00 00    	jne    c0002c58 <mount_volume+0x55f>
c000279a:	89 f9                	mov    ecx,edi
c000279c:	84 c9                	test   cl,cl
c000279e:	74 04                	je     c00027a4 <mount_volume+0xab>
c00027a0:	a8 04                	test   al,0x4
c00027a2:	75 c7                	jne    c000276b <mount_volume+0x72>
c00027a4:	31 d2                	xor    edx,edx
c00027a6:	89 e8                	mov    eax,ebp
c00027a8:	e8 c8 fd ff ff       	call   c0002575 <find_volume>
c00027ad:	83 f8 04             	cmp    eax,0x4
c00027b0:	75 0a                	jne    c00027bc <mount_volume+0xc3>
c00027b2:	bb 01 00 00 00       	mov    ebx,0x1
c00027b7:	e9 9c 04 00 00       	jmp    c0002c58 <mount_volume+0x55f>
c00027bc:	83 f8 01             	cmp    eax,0x1
c00027bf:	76 0a                	jbe    c00027cb <mount_volume+0xd2>
c00027c1:	bb 0d 00 00 00       	mov    ebx,0xd
c00027c6:	e9 8d 04 00 00       	jmp    c0002c58 <mount_volume+0x55f>
c00027cb:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027ce:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027d5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d9:	75 17                	jne    c00027f2 <mount_volume+0xf9>
c00027db:	b8 0b 00 00 00       	mov    eax,0xb
c00027e0:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027e5:	75 da                	jne    c00027c1 <mount_volume+0xc8>
c00027e7:	40                   	inc    eax
c00027e8:	83 f8 40             	cmp    eax,0x40
c00027eb:	75 f3                	jne    c00027e0 <mount_volume+0xe7>
c00027ed:	e9 5a 02 00 00       	jmp    c0002a4c <mount_volume+0x353>
c00027f2:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027f5:	e8 6f f4 ff ff       	call   c0001c69 <ld_word>
c00027fa:	66 3d 00 02          	cmp    ax,0x200
c00027fe:	75 c1                	jne    c00027c1 <mount_volume+0xc8>
c0002800:	8d 45 6a             	lea    eax,[ebp+0x6a]
c0002803:	e8 61 f4 ff ff       	call   c0001c69 <ld_word>
c0002808:	0f b7 c0             	movzx  eax,ax
c000280b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000280f:	85 c0                	test   eax,eax
c0002811:	75 0c                	jne    c000281f <mount_volume+0x126>
c0002813:	8d 45 78             	lea    eax,[ebp+0x78]
c0002816:	e8 5b f4 ff ff       	call   c0001c76 <ld_dword>
c000281b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000281f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002823:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002826:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002829:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000282d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002830:	48                   	dec    eax
c0002831:	3c 01                	cmp    al,0x1
c0002833:	77 8c                	ja     c00027c1 <mount_volume+0xc8>
c0002835:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002839:	89 c3                	mov    ebx,eax
c000283b:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c000283f:	66 85 c0             	test   ax,ax
c0002842:	0f 84 79 ff ff ff    	je     c00027c1 <mount_volume+0xc8>
c0002848:	8d 40 ff             	lea    eax,[eax-0x1]
c000284b:	85 d8                	test   eax,ebx
c000284d:	0f 85 6e ff ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002853:	8d 45 65             	lea    eax,[ebp+0x65]
c0002856:	e8 0e f4 ff ff       	call   c0001c69 <ld_word>
c000285b:	89 c7                	mov    edi,eax
c000285d:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002861:	a8 0f                	test   al,0xf
c0002863:	0f 85 58 ff ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002869:	8d 45 67             	lea    eax,[ebp+0x67]
c000286c:	e8 f8 f3 ff ff       	call   c0001c69 <ld_word>
c0002871:	0f b7 f0             	movzx  esi,ax
c0002874:	85 f6                	test   esi,esi
c0002876:	75 0a                	jne    c0002882 <mount_volume+0x189>
c0002878:	8d 45 74             	lea    eax,[ebp+0x74]
c000287b:	e8 f6 f3 ff ff       	call   c0001c76 <ld_dword>
c0002880:	89 c6                	mov    esi,eax
c0002882:	8d 45 62             	lea    eax,[ebp+0x62]
c0002885:	e8 df f3 ff ff       	call   c0001c69 <ld_word>
c000288a:	66 85 c0             	test   ax,ax
c000288d:	0f 84 2e ff ff ff    	je     c00027c1 <mount_volume+0xc8>
c0002893:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002898:	0f b7 c8             	movzx  ecx,ax
c000289b:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00028a0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00028a4:	89 fa                	mov    edx,edi
c00028a6:	66 c1 ea 04          	shr    dx,0x4
c00028aa:	0f b7 d2             	movzx  edx,dx
c00028ad:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028b1:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b8:	39 c6                	cmp    esi,eax
c00028ba:	0f 82 01 ff ff ff    	jb     c00027c1 <mount_volume+0xc8>
c00028c0:	29 c6                	sub    esi,eax
c00028c2:	31 d2                	xor    edx,edx
c00028c4:	89 f0                	mov    eax,esi
c00028c6:	f7 f3                	div    ebx
c00028c8:	39 de                	cmp    esi,ebx
c00028ca:	0f 82 f1 fe ff ff    	jb     c00027c1 <mount_volume+0xc8>
c00028d0:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028d5:	0f 87 e6 fe ff ff    	ja     c00027c1 <mount_volume+0xc8>
c00028db:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028e0:	0f 86 63 03 00 00    	jbe    c0002c49 <mount_volume+0x550>
c00028e6:	bb 03 00 00 00       	mov    ebx,0x3
c00028eb:	8d 70 02             	lea    esi,[eax+0x2]
c00028ee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028f6:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f9:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028fc:	31 d2                	xor    edx,edx
c00028fe:	89 c8                	mov    eax,ecx
c0002900:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002903:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002907:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000290b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000290f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002913:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002916:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002919:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000291d:	31 d2                	xor    edx,edx
c000291f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002923:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002927:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000292a:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000292d:	83 fb 03             	cmp    ebx,0x3
c0002930:	75 2b                	jne    c000295d <mount_volume+0x264>
c0002932:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002935:	e8 2f f3 ff ff       	call   c0001c69 <ld_word>
c000293a:	66 09 c7             	or     di,ax
c000293d:	0f 85 7e fe ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002943:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002949:	c1 e6 02             	shl    esi,0x2
c000294c:	e8 25 f3 ff ff       	call   c0001c76 <ld_dword>
c0002951:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002958:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000295b:	eb 30                	jmp    c000298d <mount_volume+0x294>
c000295d:	66 85 ff             	test   di,di
c0002960:	0f 84 5b fe ff ff    	je     c00027c1 <mount_volume+0xc8>
c0002966:	31 d2                	xor    edx,edx
c0002968:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000296c:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002970:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002974:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002977:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000297a:	83 fb 02             	cmp    ebx,0x2
c000297d:	75 04                	jne    c0002983 <mount_volume+0x28a>
c000297f:	01 f6                	add    esi,esi
c0002981:	eb 0a                	jmp    c000298d <mount_volume+0x294>
c0002983:	8d 04 76             	lea    eax,[esi+esi*2]
c0002986:	83 e6 01             	and    esi,0x1
c0002989:	d1 e8                	shr    eax,1
c000298b:	01 c6                	add    esi,eax
c000298d:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002993:	c1 ee 09             	shr    esi,0x9
c0002996:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000299a:	0f 87 21 fe ff ff    	ja     c00027c1 <mount_volume+0xc8>
c00029a0:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00029a7:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029ae:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029b2:	83 fb 03             	cmp    ebx,0x3
c00029b5:	75 7a                	jne    c0002a31 <mount_volume+0x338>
c00029b7:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029bd:	e8 a7 f2 ff ff       	call   c0001c69 <ld_word>
c00029c2:	66 48                	dec    ax
c00029c4:	75 6b                	jne    c0002a31 <mount_volume+0x338>
c00029c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029ca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029ce:	83 c2 01             	add    edx,0x1
c00029d1:	89 e8                	mov    eax,ebp
c00029d3:	83 d1 00             	adc    ecx,0x0
c00029d6:	e8 6c fa ff ff       	call   c0002447 <move_window>
c00029db:	85 c0                	test   eax,eax
c00029dd:	75 52                	jne    c0002a31 <mount_volume+0x338>
c00029df:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029e3:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e9:	e8 7b f2 ff ff       	call   c0001c69 <ld_word>
c00029ee:	66 3d 55 aa          	cmp    ax,0xaa55
c00029f2:	75 3d                	jne    c0002a31 <mount_volume+0x338>
c00029f4:	8d 45 54             	lea    eax,[ebp+0x54]
c00029f7:	e8 7a f2 ff ff       	call   c0001c76 <ld_dword>
c00029fc:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002a01:	75 2e                	jne    c0002a31 <mount_volume+0x338>
c0002a03:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a09:	e8 68 f2 ff ff       	call   c0001c76 <ld_dword>
c0002a0e:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a13:	75 1c                	jne    c0002a31 <mount_volume+0x338>
c0002a15:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a1b:	e8 56 f2 ff ff       	call   c0001c76 <ld_dword>
c0002a20:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a23:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a29:	e8 48 f2 ff ff       	call   c0001c76 <ld_dword>
c0002a2e:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a31:	66 a1 40 e5 02 c0    	mov    ax,ds:0xc002e540
c0002a37:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a3a:	40                   	inc    eax
c0002a3b:	31 db                	xor    ebx,ebx
c0002a3d:	66 a3 40 e5 02 c0    	mov    ds:0xc002e540,ax
c0002a43:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a47:	e9 0c 02 00 00       	jmp    c0002c58 <mount_volume+0x55f>
c0002a4c:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a52:	e8 12 f2 ff ff       	call   c0001c69 <ld_word>
c0002a57:	66 3d 00 01          	cmp    ax,0x100
c0002a5b:	0f 85 60 fd ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002a61:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a68:	0f 85 53 fd ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002a6e:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a74:	e8 15 f2 ff ff       	call   c0001c8e <ld_qword>
c0002a79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a7d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a81:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a87:	e8 ea f1 ff ff       	call   c0001c76 <ld_dword>
c0002a8c:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a8f:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a95:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a98:	fe c8                	dec    al
c0002a9a:	0f 85 21 fd ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002aa0:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002aa7:	bb 01 00 00 00       	mov    ebx,0x1
c0002aac:	d3 e3                	shl    ebx,cl
c0002aae:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002ab2:	66 85 db             	test   bx,bx
c0002ab5:	0f 84 06 fd ff ff    	je     c00027c1 <mount_volume+0xc8>
c0002abb:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ac1:	e8 b0 f1 ff ff       	call   c0001c76 <ld_dword>
c0002ac6:	89 c6                	mov    esi,eax
c0002ac8:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002acd:	0f 87 ee fc ff ff    	ja     c00027c1 <mount_volume+0xc8>
c0002ad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ad7:	8d 40 02             	lea    eax,[eax+0x2]
c0002ada:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002add:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ae0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ae4:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002ae7:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aed:	e8 84 f1 ff ff       	call   c0001c76 <ld_dword>
c0002af2:	31 d2                	xor    edx,edx
c0002af4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af8:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002afc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b00:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002b04:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002b07:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b0a:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b10:	e8 61 f1 ff ff       	call   c0001c76 <ld_dword>
c0002b15:	31 d2                	xor    edx,edx
c0002b17:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b1b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b1f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b23:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b26:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b29:	0f b7 c3             	movzx  eax,bx
c0002b2c:	31 d2                	xor    edx,edx
c0002b2e:	0f af f0             	imul   esi,eax
c0002b31:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b35:	89 f0                	mov    eax,esi
c0002b37:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b3b:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b3f:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b43:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b47:	39 c1                	cmp    ecx,eax
c0002b49:	89 df                	mov    edi,ebx
c0002b4b:	19 d7                	sbb    edi,edx
c0002b4d:	0f 82 6e fc ff ff    	jb     c00027c1 <mount_volume+0xc8>
c0002b53:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b59:	31 db                	xor    ebx,ebx
c0002b5b:	e8 16 f1 ff ff       	call   c0001c76 <ld_dword>
c0002b60:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b67:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b6a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b72:	85 db                	test   ebx,ebx
c0002b74:	75 39                	jne    c0002baf <mount_volume+0x4b6>
c0002b76:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b7a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b7e:	0f 86 3d fc ff ff    	jbe    c00027c1 <mount_volume+0xc8>
c0002b84:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b87:	31 ff                	xor    edi,edi
c0002b89:	89 e8                	mov    eax,ebp
c0002b8b:	e8 72 f3 ff ff       	call   c0001f02 <clst2sect>
c0002b90:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b94:	01 c6                	add    esi,eax
c0002b96:	89 e8                	mov    eax,ebp
c0002b98:	11 d7                	adc    edi,edx
c0002b9a:	89 f2                	mov    edx,esi
c0002b9c:	89 f9                	mov    ecx,edi
c0002b9e:	e8 a4 f8 ff ff       	call   c0002447 <move_window>
c0002ba3:	85 c0                	test   eax,eax
c0002ba5:	0f 85 07 fc ff ff    	jne    c00027b2 <mount_volume+0xb9>
c0002bab:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002baf:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bb4:	74 0b                	je     c0002bc1 <mount_volume+0x4c8>
c0002bb6:	83 c3 20             	add    ebx,0x20
c0002bb9:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bbf:	eb b1                	jmp    c0002b72 <mount_volume+0x479>
c0002bc1:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bc4:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc8:	e8 a9 f0 ff ff       	call   c0001c76 <ld_dword>
c0002bcd:	89 c3                	mov    ebx,eax
c0002bcf:	83 f8 01             	cmp    eax,0x1
c0002bd2:	0f 86 e9 fb ff ff    	jbe    c00027c1 <mount_volume+0xc8>
c0002bd8:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bdb:	0f 86 e0 fb ff ff    	jbe    c00027c1 <mount_volume+0xc8>
c0002be1:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002be4:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be8:	0f af c2             	imul   eax,edx
c0002beb:	31 d2                	xor    edx,edx
c0002bed:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bf0:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bf3:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bf6:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf9:	31 c9                	xor    ecx,ecx
c0002bfb:	89 da                	mov    edx,ebx
c0002bfd:	89 e8                	mov    eax,ebp
c0002bff:	c1 ea 07             	shr    edx,0x7
c0002c02:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002c05:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c08:	e8 3a f8 ff ff       	call   c0002447 <move_window>
c0002c0d:	85 c0                	test   eax,eax
c0002c0f:	0f 85 9d fb ff ff    	jne    c00027b2 <mount_volume+0xb9>
c0002c15:	89 d8                	mov    eax,ebx
c0002c17:	83 e0 7f             	and    eax,0x7f
c0002c1a:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c1d:	e8 54 f0 ff ff       	call   c0001c76 <ld_dword>
c0002c22:	83 f8 ff             	cmp    eax,0xffffffff
c0002c25:	74 0a                	je     c0002c31 <mount_volume+0x538>
c0002c27:	43                   	inc    ebx
c0002c28:	39 d8                	cmp    eax,ebx
c0002c2a:	74 cd                	je     c0002bf9 <mount_volume+0x500>
c0002c2c:	e9 90 fb ff ff       	jmp    c00027c1 <mount_volume+0xc8>
c0002c31:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c38:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c3f:	bb 04 00 00 00       	mov    ebx,0x4
c0002c44:	e9 e8 fd ff ff       	jmp    c0002a31 <mount_volume+0x338>
c0002c49:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c4e:	19 db                	sbb    ebx,ebx
c0002c50:	83 c3 02             	add    ebx,0x2
c0002c53:	e9 93 fc ff ff       	jmp    c00028eb <mount_volume+0x1f2>
c0002c58:	83 c4 3c             	add    esp,0x3c
c0002c5b:	89 d8                	mov    eax,ebx
c0002c5d:	5b                   	pop    ebx
c0002c5e:	5e                   	pop    esi
c0002c5f:	5f                   	pop    edi
c0002c60:	5d                   	pop    ebp
c0002c61:	c3                   	ret    

c0002c62 <find_bitmap>:
c0002c62:	55                   	push   ebp
c0002c63:	57                   	push   edi
c0002c64:	89 c7                	mov    edi,eax
c0002c66:	56                   	push   esi
c0002c67:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c6a:	53                   	push   ebx
c0002c6b:	83 ec 1c             	sub    esp,0x1c
c0002c6e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c71:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c75:	83 e8 02             	sub    eax,0x2
c0002c78:	39 f0                	cmp    eax,esi
c0002c7a:	77 02                	ja     c0002c7e <find_bitmap+0x1c>
c0002c7c:	31 f6                	xor    esi,esi
c0002c7e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c82:	89 f3                	mov    ebx,esi
c0002c84:	31 ed                	xor    ebp,ebp
c0002c86:	31 c9                	xor    ecx,ecx
c0002c88:	89 da                	mov    edx,ebx
c0002c8a:	89 f8                	mov    eax,edi
c0002c8c:	c1 ea 0c             	shr    edx,0xc
c0002c8f:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c92:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c95:	e8 ad f7 ff ff       	call   c0002447 <move_window>
c0002c9a:	85 c0                	test   eax,eax
c0002c9c:	75 68                	jne    c0002d06 <find_bitmap+0xa4>
c0002c9e:	89 da                	mov    edx,ebx
c0002ca0:	89 d9                	mov    ecx,ebx
c0002ca2:	c1 ea 03             	shr    edx,0x3
c0002ca5:	83 e1 07             	and    ecx,0x7
c0002ca8:	b8 01 00 00 00       	mov    eax,0x1
c0002cad:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cb3:	d3 e0                	shl    eax,cl
c0002cb5:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb8:	83 e9 02             	sub    ecx,0x2
c0002cbb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cbf:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cc3:	43                   	inc    ebx
c0002cc4:	21 c1                	and    ecx,eax
c0002cc6:	d1 e0                	shl    eax,1
c0002cc8:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002ccc:	77 09                	ja     c0002cd7 <find_bitmap+0x75>
c0002cce:	31 db                	xor    ebx,ebx
c0002cd0:	ba 00 02 00 00       	mov    edx,0x200
c0002cd5:	31 c0                	xor    eax,eax
c0002cd7:	84 c9                	test   cl,cl
c0002cd9:	75 10                	jne    c0002ceb <find_bitmap+0x89>
c0002cdb:	45                   	inc    ebp
c0002cdc:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002ce0:	75 0f                	jne    c0002cf1 <find_bitmap+0x8f>
c0002ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ce6:	83 c0 02             	add    eax,0x2
c0002ce9:	eb 22                	jmp    c0002d0d <find_bitmap+0xab>
c0002ceb:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cef:	31 ed                	xor    ebp,ebp
c0002cf1:	39 de                	cmp    esi,ebx
c0002cf3:	74 16                	je     c0002d0b <find_bitmap+0xa9>
c0002cf5:	84 c0                	test   al,al
c0002cf7:	75 c6                	jne    c0002cbf <find_bitmap+0x5d>
c0002cf9:	42                   	inc    edx
c0002cfa:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002d00:	77 84                	ja     c0002c86 <find_bitmap+0x24>
c0002d02:	b0 01                	mov    al,0x1
c0002d04:	eb b9                	jmp    c0002cbf <find_bitmap+0x5d>
c0002d06:	83 c8 ff             	or     eax,0xffffffff
c0002d09:	eb 02                	jmp    c0002d0d <find_bitmap+0xab>
c0002d0b:	31 c0                	xor    eax,eax
c0002d0d:	83 c4 1c             	add    esp,0x1c
c0002d10:	5b                   	pop    ebx
c0002d11:	5e                   	pop    esi
c0002d12:	5f                   	pop    edi
c0002d13:	5d                   	pop    ebp
c0002d14:	c3                   	ret    

c0002d15 <change_bitmap>:
c0002d15:	55                   	push   ebp
c0002d16:	89 cd                	mov    ebp,ecx
c0002d18:	57                   	push   edi
c0002d19:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d1c:	56                   	push   esi
c0002d1d:	89 c7                	mov    edi,eax
c0002d1f:	53                   	push   ebx
c0002d20:	89 c8                	mov    eax,ecx
c0002d22:	83 ec 1c             	sub    esp,0x1c
c0002d25:	31 d2                	xor    edx,edx
c0002d27:	89 ce                	mov    esi,ecx
c0002d29:	c1 e8 0c             	shr    eax,0xc
c0002d2c:	bb 01 00 00 00       	mov    ebx,0x1
c0002d31:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d34:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d37:	c1 ee 03             	shr    esi,0x3
c0002d3a:	83 e1 07             	and    ecx,0x7
c0002d3d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d43:	d3 e3                	shl    ebx,cl
c0002d45:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d49:	89 c1                	mov    ecx,eax
c0002d4b:	89 d3                	mov    ebx,edx
c0002d4d:	83 c1 01             	add    ecx,0x1
c0002d50:	83 d3 00             	adc    ebx,0x0
c0002d53:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d57:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d5b:	89 d1                	mov    ecx,edx
c0002d5d:	89 c2                	mov    edx,eax
c0002d5f:	89 f8                	mov    eax,edi
c0002d61:	e8 e1 f6 ff ff       	call   c0002447 <move_window>
c0002d66:	89 c1                	mov    ecx,eax
c0002d68:	85 c0                	test   eax,eax
c0002d6a:	75 48                	jne    c0002db4 <change_bitmap+0x9f>
c0002d6c:	31 d2                	xor    edx,edx
c0002d6e:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d72:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d76:	0f 95 c2             	setne  dl
c0002d79:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d7d:	74 3c                	je     c0002dbb <change_bitmap+0xa6>
c0002d7f:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d83:	4d                   	dec    ebp
c0002d84:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d88:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d8c:	74 32                	je     c0002dc0 <change_bitmap+0xab>
c0002d8e:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d92:	75 d8                	jne    c0002d6c <change_bitmap+0x57>
c0002d94:	8d 46 01             	lea    eax,[esi+0x1]
c0002d97:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d9c:	89 c3                	mov    ebx,eax
c0002d9e:	31 f6                	xor    esi,esi
c0002da0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da8:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002dae:	74 99                	je     c0002d49 <change_bitmap+0x34>
c0002db0:	89 de                	mov    esi,ebx
c0002db2:	eb b8                	jmp    c0002d6c <change_bitmap+0x57>
c0002db4:	b9 01 00 00 00       	mov    ecx,0x1
c0002db9:	eb 05                	jmp    c0002dc0 <change_bitmap+0xab>
c0002dbb:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc0:	83 c4 1c             	add    esp,0x1c
c0002dc3:	89 c8                	mov    eax,ecx
c0002dc5:	5b                   	pop    ebx
c0002dc6:	5e                   	pop    esi
c0002dc7:	5f                   	pop    edi
c0002dc8:	5d                   	pop    ebp
c0002dc9:	c3                   	ret    

c0002dca <put_fat>:
c0002dca:	83 fa 01             	cmp    edx,0x1
c0002dcd:	0f 86 7b 01 00 00    	jbe    c0002f4e <put_fat+0x184>
c0002dd3:	55                   	push   ebp
c0002dd4:	57                   	push   edi
c0002dd5:	89 cf                	mov    edi,ecx
c0002dd7:	56                   	push   esi
c0002dd8:	b9 02 00 00 00       	mov    ecx,0x2
c0002ddd:	53                   	push   ebx
c0002dde:	89 c6                	mov    esi,eax
c0002de0:	83 ec 1c             	sub    esp,0x1c
c0002de3:	89 d3                	mov    ebx,edx
c0002de5:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de8:	0f 86 68 01 00 00    	jbe    c0002f56 <put_fat+0x18c>
c0002dee:	8a 00                	mov    al,BYTE PTR [eax]
c0002df0:	3c 02                	cmp    al,0x2
c0002df2:	0f 84 c7 00 00 00    	je     c0002ebf <put_fat+0xf5>
c0002df8:	77 09                	ja     c0002e03 <put_fat+0x39>
c0002dfa:	fe c8                	dec    al
c0002dfc:	74 17                	je     c0002e15 <put_fat+0x4b>
c0002dfe:	e9 53 01 00 00       	jmp    c0002f56 <put_fat+0x18c>
c0002e03:	b9 02 00 00 00       	mov    ecx,0x2
c0002e08:	3c 04                	cmp    al,0x4
c0002e0a:	0f 86 e1 00 00 00    	jbe    c0002ef1 <put_fat+0x127>
c0002e10:	e9 41 01 00 00       	jmp    c0002f56 <put_fat+0x18c>
c0002e15:	89 d5                	mov    ebp,edx
c0002e17:	31 c9                	xor    ecx,ecx
c0002e19:	d1 ed                	shr    ebp,1
c0002e1b:	89 f0                	mov    eax,esi
c0002e1d:	01 d5                	add    ebp,edx
c0002e1f:	89 ea                	mov    edx,ebp
c0002e21:	c1 ea 09             	shr    edx,0x9
c0002e24:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e27:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e2a:	e8 18 f6 ff ff       	call   c0002447 <move_window>
c0002e2f:	89 c1                	mov    ecx,eax
c0002e31:	85 c0                	test   eax,eax
c0002e33:	0f 85 1d 01 00 00    	jne    c0002f56 <put_fat+0x18c>
c0002e39:	8d 46 54             	lea    eax,[esi+0x54]
c0002e3c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e40:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e43:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e4d:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e51:	89 f8                	mov    eax,edi
c0002e53:	83 e3 01             	and    ebx,0x1
c0002e56:	74 0d                	je     c0002e65 <put_fat+0x9b>
c0002e58:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e5b:	89 fa                	mov    edx,edi
c0002e5d:	83 e0 0f             	and    eax,0xf
c0002e60:	c1 e2 04             	shl    edx,0x4
c0002e63:	09 d0                	or     eax,edx
c0002e65:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e68:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e6c:	31 c9                	xor    ecx,ecx
c0002e6e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e72:	c1 ea 09             	shr    edx,0x9
c0002e75:	89 f0                	mov    eax,esi
c0002e77:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e7a:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e7d:	e8 c5 f5 ff ff       	call   c0002447 <move_window>
c0002e82:	89 c1                	mov    ecx,eax
c0002e84:	85 c0                	test   eax,eax
c0002e86:	0f 85 ca 00 00 00    	jne    c0002f56 <put_fat+0x18c>
c0002e8c:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e90:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e96:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e9a:	85 db                	test   ebx,ebx
c0002e9c:	74 07                	je     c0002ea5 <put_fat+0xdb>
c0002e9e:	c1 ef 04             	shr    edi,0x4
c0002ea1:	89 fa                	mov    edx,edi
c0002ea3:	eb 0e                	jmp    c0002eb3 <put_fat+0xe9>
c0002ea5:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea8:	c1 ef 08             	shr    edi,0x8
c0002eab:	83 e2 f0             	and    edx,0xfffffff0
c0002eae:	83 e7 0f             	and    edi,0xf
c0002eb1:	09 fa                	or     edx,edi
c0002eb3:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eb6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eba:	e9 97 00 00 00       	jmp    c0002f56 <put_fat+0x18c>
c0002ebf:	31 c9                	xor    ecx,ecx
c0002ec1:	c1 ea 08             	shr    edx,0x8
c0002ec4:	89 f0                	mov    eax,esi
c0002ec6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ecc:	e8 76 f5 ff ff       	call   c0002447 <move_window>
c0002ed1:	89 c1                	mov    ecx,eax
c0002ed3:	85 c0                	test   eax,eax
c0002ed5:	75 7f                	jne    c0002f56 <put_fat+0x18c>
c0002ed7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edb:	01 db                	add    ebx,ebx
c0002edd:	0f b7 d7             	movzx  edx,di
c0002ee0:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ee6:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002eea:	e8 ec ed ff ff       	call   c0001cdb <st_word>
c0002eef:	eb 53                	jmp    c0002f44 <put_fat+0x17a>
c0002ef1:	31 c9                	xor    ecx,ecx
c0002ef3:	c1 ea 07             	shr    edx,0x7
c0002ef6:	89 f0                	mov    eax,esi
c0002ef8:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002efb:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002efe:	e8 44 f5 ff ff       	call   c0002447 <move_window>
c0002f03:	89 c1                	mov    ecx,eax
c0002f05:	85 c0                	test   eax,eax
c0002f07:	75 4d                	jne    c0002f56 <put_fat+0x18c>
c0002f09:	c1 e3 02             	shl    ebx,0x2
c0002f0c:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f12:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f15:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f19:	74 1c                	je     c0002f37 <put_fat+0x16d>
c0002f1b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f1f:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f25:	89 d8                	mov    eax,ebx
c0002f27:	e8 4a ed ff ff       	call   c0001c76 <ld_dword>
c0002f2c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f30:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f35:	09 c7                	or     edi,eax
c0002f37:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f3b:	89 fa                	mov    edx,edi
c0002f3d:	89 d8                	mov    eax,ebx
c0002f3f:	e8 9b ed ff ff       	call   c0001cdf <st_dword>
c0002f44:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f48:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f4c:	eb 08                	jmp    c0002f56 <put_fat+0x18c>
c0002f4e:	b9 02 00 00 00       	mov    ecx,0x2
c0002f53:	89 c8                	mov    eax,ecx
c0002f55:	c3                   	ret    
c0002f56:	83 c4 1c             	add    esp,0x1c
c0002f59:	89 c8                	mov    eax,ecx
c0002f5b:	5b                   	pop    ebx
c0002f5c:	5e                   	pop    esi
c0002f5d:	5f                   	pop    edi
c0002f5e:	5d                   	pop    ebp
c0002f5f:	c3                   	ret    

c0002f60 <fill_last_frag>:
c0002f60:	57                   	push   edi
c0002f61:	89 cf                	mov    edi,ecx
c0002f63:	56                   	push   esi
c0002f64:	89 d6                	mov    esi,edx
c0002f66:	53                   	push   ebx
c0002f67:	89 c3                	mov    ebx,eax
c0002f69:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f6c:	85 c0                	test   eax,eax
c0002f6e:	74 21                	je     c0002f91 <fill_last_frag+0x31>
c0002f70:	89 f9                	mov    ecx,edi
c0002f72:	83 f8 01             	cmp    eax,0x1
c0002f75:	76 05                	jbe    c0002f7c <fill_last_frag+0x1c>
c0002f77:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f7a:	29 c1                	sub    ecx,eax
c0002f7c:	8d 56 01             	lea    edx,[esi+0x1]
c0002f7f:	29 c2                	sub    edx,eax
c0002f81:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f83:	e8 42 fe ff ff       	call   c0002dca <put_fat>
c0002f88:	85 c0                	test   eax,eax
c0002f8a:	75 05                	jne    c0002f91 <fill_last_frag+0x31>
c0002f8c:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f8f:	eb d8                	jmp    c0002f69 <fill_last_frag+0x9>
c0002f91:	5b                   	pop    ebx
c0002f92:	5e                   	pop    esi
c0002f93:	5f                   	pop    edi
c0002f94:	c3                   	ret    

c0002f95 <fill_first_frag>:
c0002f95:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f99:	75 2d                	jne    c0002fc8 <fill_first_frag+0x33>
c0002f9b:	57                   	push   edi
c0002f9c:	56                   	push   esi
c0002f9d:	53                   	push   ebx
c0002f9e:	89 c3                	mov    ebx,eax
c0002fa0:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002fa3:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002fa6:	01 d7                	add    edi,edx
c0002fa8:	39 fa                	cmp    edx,edi
c0002faa:	74 14                	je     c0002fc0 <fill_first_frag+0x2b>
c0002fac:	8d 72 01             	lea    esi,[edx+0x1]
c0002faf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fb1:	89 f1                	mov    ecx,esi
c0002fb3:	e8 12 fe ff ff       	call   c0002dca <put_fat>
c0002fb8:	89 f2                	mov    edx,esi
c0002fba:	85 c0                	test   eax,eax
c0002fbc:	74 ea                	je     c0002fa8 <fill_first_frag+0x13>
c0002fbe:	eb 0b                	jmp    c0002fcb <fill_first_frag+0x36>
c0002fc0:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fc4:	31 c0                	xor    eax,eax
c0002fc6:	eb 03                	jmp    c0002fcb <fill_first_frag+0x36>
c0002fc8:	31 c0                	xor    eax,eax
c0002fca:	c3                   	ret    
c0002fcb:	5b                   	pop    ebx
c0002fcc:	5e                   	pop    esi
c0002fcd:	5f                   	pop    edi
c0002fce:	c3                   	ret    

c0002fcf <get_fat>:
c0002fcf:	83 fa 01             	cmp    edx,0x1
c0002fd2:	0f 86 db 01 00 00    	jbe    c00031b3 <get_fat+0x1e4>
c0002fd8:	55                   	push   ebp
c0002fd9:	b9 01 00 00 00       	mov    ecx,0x1
c0002fde:	57                   	push   edi
c0002fdf:	56                   	push   esi
c0002fe0:	53                   	push   ebx
c0002fe1:	83 ec 1c             	sub    esp,0x1c
c0002fe4:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fe6:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe9:	0f 86 cc 01 00 00    	jbe    c00031bb <get_fat+0x1ec>
c0002fef:	89 c3                	mov    ebx,eax
c0002ff1:	89 d6                	mov    esi,edx
c0002ff3:	8a 07                	mov    al,BYTE PTR [edi]
c0002ff5:	3c 02                	cmp    al,0x2
c0002ff7:	0f 84 99 00 00 00    	je     c0003096 <get_fat+0xc7>
c0002ffd:	77 09                	ja     c0003008 <get_fat+0x39>
c0002fff:	fe c8                	dec    al
c0003001:	74 1a                	je     c000301d <get_fat+0x4e>
c0003003:	e9 b3 01 00 00       	jmp    c00031bb <get_fat+0x1ec>
c0003008:	3c 03                	cmp    al,0x3
c000300a:	0f 84 b5 00 00 00    	je     c00030c5 <get_fat+0xf6>
c0003010:	3c 04                	cmp    al,0x4
c0003012:	0f 84 e3 00 00 00    	je     c00030fb <get_fat+0x12c>
c0003018:	e9 9e 01 00 00       	jmp    c00031bb <get_fat+0x1ec>
c000301d:	89 d3                	mov    ebx,edx
c000301f:	31 c9                	xor    ecx,ecx
c0003021:	d1 eb                	shr    ebx,1
c0003023:	89 f8                	mov    eax,edi
c0003025:	01 d3                	add    ebx,edx
c0003027:	89 da                	mov    edx,ebx
c0003029:	c1 ea 09             	shr    edx,0x9
c000302c:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000302f:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003032:	e8 10 f4 ff ff       	call   c0002447 <move_window>
c0003037:	85 c0                	test   eax,eax
c0003039:	74 08                	je     c0003043 <get_fat+0x74>
c000303b:	83 c9 ff             	or     ecx,0xffffffff
c000303e:	e9 78 01 00 00       	jmp    c00031bb <get_fat+0x1ec>
c0003043:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003046:	31 c9                	xor    ecx,ecx
c0003048:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000304e:	89 ea                	mov    edx,ebp
c0003050:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003054:	c1 ea 09             	shr    edx,0x9
c0003057:	89 f8                	mov    eax,edi
c0003059:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305c:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000305f:	e8 e3 f3 ff ff       	call   c0002447 <move_window>
c0003064:	85 c0                	test   eax,eax
c0003066:	75 d3                	jne    c000303b <get_fat+0x6c>
c0003068:	0f b6 c3             	movzx  eax,bl
c000306b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003071:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003076:	c1 e3 08             	shl    ebx,0x8
c0003079:	09 c3                	or     ebx,eax
c000307b:	89 d9                	mov    ecx,ebx
c000307d:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003083:	83 e6 01             	and    esi,0x1
c0003086:	0f 84 2f 01 00 00    	je     c00031bb <get_fat+0x1ec>
c000308c:	89 d9                	mov    ecx,ebx
c000308e:	c1 e9 04             	shr    ecx,0x4
c0003091:	e9 25 01 00 00       	jmp    c00031bb <get_fat+0x1ec>
c0003096:	31 c9                	xor    ecx,ecx
c0003098:	c1 ea 08             	shr    edx,0x8
c000309b:	89 f8                	mov    eax,edi
c000309d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030a0:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030a3:	e8 9f f3 ff ff       	call   c0002447 <move_window>
c00030a8:	85 c0                	test   eax,eax
c00030aa:	75 8f                	jne    c000303b <get_fat+0x6c>
c00030ac:	01 f6                	add    esi,esi
c00030ae:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030b4:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b8:	e8 ac eb ff ff       	call   c0001c69 <ld_word>
c00030bd:	0f b7 c8             	movzx  ecx,ax
c00030c0:	e9 f6 00 00 00       	jmp    c00031bb <get_fat+0x1ec>
c00030c5:	31 c9                	xor    ecx,ecx
c00030c7:	c1 ea 07             	shr    edx,0x7
c00030ca:	89 f8                	mov    eax,edi
c00030cc:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030cf:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030d2:	e8 70 f3 ff ff       	call   c0002447 <move_window>
c00030d7:	85 c0                	test   eax,eax
c00030d9:	0f 85 5c ff ff ff    	jne    c000303b <get_fat+0x6c>
c00030df:	c1 e6 02             	shl    esi,0x2
c00030e2:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e8:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030ec:	e8 85 eb ff ff       	call   c0001c76 <ld_dword>
c00030f1:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030f6:	e9 b4 00 00 00       	jmp    c00031af <get_fat+0x1e0>
c00030fb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030fe:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003101:	89 d1                	mov    ecx,edx
c0003103:	09 c1                	or     ecx,eax
c0003105:	74 06                	je     c000310d <get_fat+0x13e>
c0003107:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000310b:	75 0f                	jne    c000311c <get_fat+0x14d>
c000310d:	b9 01 00 00 00       	mov    ecx,0x1
c0003112:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003116:	0f 85 9f 00 00 00    	jne    c00031bb <get_fat+0x1ec>
c000311c:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003120:	89 f5                	mov    ebp,esi
c0003122:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003127:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c000312a:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c000312d:	80 f9 02             	cmp    cl,0x2
c0003130:	75 35                	jne    c0003167 <get_fat+0x198>
c0003132:	83 c0 ff             	add    eax,0xffffffff
c0003135:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c000313a:	83 d2 ff             	adc    edx,0xffffffff
c000313d:	31 db                	xor    ebx,ebx
c000313f:	0f ac d0 09          	shrd   eax,edx,0x9
c0003143:	53                   	push   ebx
c0003144:	c1 ea 09             	shr    edx,0x9
c0003147:	51                   	push   ecx
c0003148:	52                   	push   edx
c0003149:	50                   	push   eax
c000314a:	e8 b5 39 02 00       	call   c0026b04 <__udivdi3>
c000314f:	83 c4 10             	add    esp,0x10
c0003152:	b9 01 00 00 00       	mov    ecx,0x1
c0003157:	39 c5                	cmp    ebp,eax
c0003159:	77 60                	ja     c00031bb <get_fat+0x1ec>
c000315b:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003160:	74 59                	je     c00031bb <get_fat+0x1ec>
c0003162:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003165:	eb 54                	jmp    c00031bb <get_fat+0x1ec>
c0003167:	80 f9 03             	cmp    cl,0x3
c000316a:	75 05                	jne    c0003171 <get_fat+0x1a2>
c000316c:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000316f:	77 f1                	ja     c0003162 <get_fat+0x193>
c0003171:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003176:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c000317a:	75 3f                	jne    c00031bb <get_fat+0x1ec>
c000317c:	31 c9                	xor    ecx,ecx
c000317e:	89 f2                	mov    edx,esi
c0003180:	89 f8                	mov    eax,edi
c0003182:	c1 ea 07             	shr    edx,0x7
c0003185:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003188:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000318b:	e8 b7 f2 ff ff       	call   c0002447 <move_window>
c0003190:	85 c0                	test   eax,eax
c0003192:	0f 85 a3 fe ff ff    	jne    c000303b <get_fat+0x6c>
c0003198:	c1 e6 02             	shl    esi,0x2
c000319b:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031a1:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00031a5:	e8 cc ea ff ff       	call   c0001c76 <ld_dword>
c00031aa:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031af:	89 c1                	mov    ecx,eax
c00031b1:	eb 08                	jmp    c00031bb <get_fat+0x1ec>
c00031b3:	b9 01 00 00 00       	mov    ecx,0x1
c00031b8:	89 c8                	mov    eax,ecx
c00031ba:	c3                   	ret    
c00031bb:	83 c4 1c             	add    esp,0x1c
c00031be:	89 c8                	mov    eax,ecx
c00031c0:	5b                   	pop    ebx
c00031c1:	5e                   	pop    esi
c00031c2:	5f                   	pop    edi
c00031c3:	5d                   	pop    ebp
c00031c4:	c3                   	ret    

c00031c5 <dir_sdi>:
c00031c5:	55                   	push   ebp
c00031c6:	57                   	push   edi
c00031c7:	56                   	push   esi
c00031c8:	53                   	push   ebx
c00031c9:	89 c3                	mov    ebx,eax
c00031cb:	83 ec 1c             	sub    esp,0x1c
c00031ce:	8b 38                	mov    edi,DWORD PTR [eax]
c00031d0:	31 c0                	xor    eax,eax
c00031d2:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031d5:	0f 94 c0             	sete   al
c00031d8:	48                   	dec    eax
c00031d9:	25 00 00 20 f0       	and    eax,0xf0200000
c00031de:	05 00 00 00 10       	add    eax,0x10000000
c00031e3:	39 d0                	cmp    eax,edx
c00031e5:	77 0a                	ja     c00031f1 <dir_sdi+0x2c>
c00031e7:	b8 02 00 00 00       	mov    eax,0x2
c00031ec:	e9 c4 00 00 00       	jmp    c00032b5 <dir_sdi+0xf0>
c00031f1:	89 d6                	mov    esi,edx
c00031f3:	f6 c2 1f             	test   dl,0x1f
c00031f6:	75 ef                	jne    c00031e7 <dir_sdi+0x22>
c00031f8:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031fb:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031fe:	85 c9                	test   ecx,ecx
c0003200:	75 2d                	jne    c000322f <dir_sdi+0x6a>
c0003202:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003205:	77 1b                	ja     c0003222 <dir_sdi+0x5d>
c0003207:	89 f2                	mov    edx,esi
c0003209:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000320d:	c1 ea 05             	shr    edx,0x5
c0003210:	39 c2                	cmp    edx,eax
c0003212:	73 d3                	jae    c00031e7 <dir_sdi+0x22>
c0003214:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003217:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000321a:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000321d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003220:	eb 4b                	jmp    c000326d <dir_sdi+0xa8>
c0003222:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003225:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003229:	85 c0                	test   eax,eax
c000322b:	74 da                	je     c0003207 <dir_sdi+0x42>
c000322d:	89 c1                	mov    ecx,eax
c000322f:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003233:	c1 e5 09             	shl    ebp,0x9
c0003236:	89 ca                	mov    edx,ecx
c0003238:	39 ee                	cmp    esi,ebp
c000323a:	72 1c                	jb     c0003258 <dir_sdi+0x93>
c000323c:	89 d8                	mov    eax,ebx
c000323e:	e8 8c fd ff ff       	call   c0002fcf <get_fat>
c0003243:	89 c1                	mov    ecx,eax
c0003245:	83 f8 ff             	cmp    eax,0xffffffff
c0003248:	74 66                	je     c00032b0 <dir_sdi+0xeb>
c000324a:	83 f8 01             	cmp    eax,0x1
c000324d:	76 98                	jbe    c00031e7 <dir_sdi+0x22>
c000324f:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003252:	76 93                	jbe    c00031e7 <dir_sdi+0x22>
c0003254:	29 ee                	sub    esi,ebp
c0003256:	eb de                	jmp    c0003236 <dir_sdi+0x71>
c0003258:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000325c:	89 f8                	mov    eax,edi
c000325e:	e8 9f ec ff ff       	call   c0001f02 <clst2sect>
c0003263:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003267:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000326a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000326d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003270:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003273:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003276:	89 d1                	mov    ecx,edx
c0003278:	09 c1                	or     ecx,eax
c000327a:	0f 84 67 ff ff ff    	je     c00031e7 <dir_sdi+0x22>
c0003280:	89 f1                	mov    ecx,esi
c0003282:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000328a:	c1 e9 09             	shr    ecx,0x9
c000328d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003291:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003295:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003299:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000329c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00032a2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00032a5:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a9:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032ac:	31 c0                	xor    eax,eax
c00032ae:	eb 05                	jmp    c00032b5 <dir_sdi+0xf0>
c00032b0:	b8 01 00 00 00       	mov    eax,0x1
c00032b5:	83 c4 1c             	add    esp,0x1c
c00032b8:	5b                   	pop    ebx
c00032b9:	5e                   	pop    esi
c00032ba:	5f                   	pop    edi
c00032bb:	5d                   	pop    ebp
c00032bc:	c3                   	ret    

c00032bd <create_chain>:
c00032bd:	55                   	push   ebp
c00032be:	89 c5                	mov    ebp,eax
c00032c0:	57                   	push   edi
c00032c1:	56                   	push   esi
c00032c2:	53                   	push   ebx
c00032c3:	83 ec 1c             	sub    esp,0x1c
c00032c6:	85 d2                	test   edx,edx
c00032c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032cc:	8b 30                	mov    esi,DWORD PTR [eax]
c00032ce:	75 0e                	jne    c00032de <create_chain+0x21>
c00032d0:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032d3:	85 ff                	test   edi,edi
c00032d5:	74 39                	je     c0003310 <create_chain+0x53>
c00032d7:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032da:	77 39                	ja     c0003315 <create_chain+0x58>
c00032dc:	eb 32                	jmp    c0003310 <create_chain+0x53>
c00032de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032e2:	e8 e8 fc ff ff       	call   c0002fcf <get_fat>
c00032e7:	89 c3                	mov    ebx,eax
c00032e9:	83 f8 01             	cmp    eax,0x1
c00032ec:	77 0a                	ja     c00032f8 <create_chain+0x3b>
c00032ee:	bb 01 00 00 00       	mov    ebx,0x1
c00032f3:	e9 ba 01 00 00       	jmp    c00034b2 <create_chain+0x1f5>
c00032f8:	83 f8 ff             	cmp    eax,0xffffffff
c00032fb:	0f 84 62 01 00 00    	je     c0003463 <create_chain+0x1a6>
c0003301:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003304:	0f 87 a8 01 00 00    	ja     c00034b2 <create_chain+0x1f5>
c000330a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000330e:	eb 05                	jmp    c0003315 <create_chain+0x58>
c0003310:	bf 01 00 00 00       	mov    edi,0x1
c0003315:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003319:	75 07                	jne    c0003322 <create_chain+0x65>
c000331b:	31 db                	xor    ebx,ebx
c000331d:	e9 90 01 00 00       	jmp    c00034b2 <create_chain+0x1f5>
c0003322:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003325:	75 74                	jne    c000339b <create_chain+0xde>
c0003327:	b9 01 00 00 00       	mov    ecx,0x1
c000332c:	89 fa                	mov    edx,edi
c000332e:	89 f0                	mov    eax,esi
c0003330:	e8 2d f9 ff ff       	call   c0002c62 <find_bitmap>
c0003335:	89 c3                	mov    ebx,eax
c0003337:	8d 40 ff             	lea    eax,[eax-0x1]
c000333a:	83 f8 fd             	cmp    eax,0xfffffffd
c000333d:	0f 87 6f 01 00 00    	ja     c00034b2 <create_chain+0x1f5>
c0003343:	83 ec 0c             	sub    esp,0xc
c0003346:	b9 01 00 00 00       	mov    ecx,0x1
c000334b:	6a 01                	push   0x1
c000334d:	89 da                	mov    edx,ebx
c000334f:	89 f0                	mov    eax,esi
c0003351:	e8 bf f9 ff ff       	call   c0002d15 <change_bitmap>
c0003356:	83 c4 10             	add    esp,0x10
c0003359:	83 f8 02             	cmp    eax,0x2
c000335c:	74 90                	je     c00032ee <create_chain+0x31>
c000335e:	83 f8 01             	cmp    eax,0x1
c0003361:	0f 84 fc 00 00 00    	je     c0003463 <create_chain+0x1a6>
c0003367:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000336c:	75 09                	jne    c0003377 <create_chain+0xba>
c000336e:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003372:	e9 0c 01 00 00       	jmp    c0003483 <create_chain+0x1c6>
c0003377:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000337b:	0f 85 e7 00 00 00    	jne    c0003468 <create_chain+0x1ab>
c0003381:	8d 57 01             	lea    edx,[edi+0x1]
c0003384:	39 da                	cmp    edx,ebx
c0003386:	0f 84 f7 00 00 00    	je     c0003483 <create_chain+0x1c6>
c000338c:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000338f:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003393:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003396:	e9 cd 00 00 00       	jmp    c0003468 <create_chain+0x1ab>
c000339b:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000339f:	75 41                	jne    c00033e2 <create_chain+0x125>
c00033a1:	8d 5f 01             	lea    ebx,[edi+0x1]
c00033a4:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a7:	77 05                	ja     c00033ae <create_chain+0xf1>
c00033a9:	bb 02 00 00 00       	mov    ebx,0x2
c00033ae:	89 da                	mov    edx,ebx
c00033b0:	89 e8                	mov    eax,ebp
c00033b2:	e8 18 fc ff ff       	call   c0002fcf <get_fat>
c00033b7:	83 f8 01             	cmp    eax,0x1
c00033ba:	0f 84 2e ff ff ff    	je     c00032ee <create_chain+0x31>
c00033c0:	83 f8 ff             	cmp    eax,0xffffffff
c00033c3:	0f 84 9a 00 00 00    	je     c0003463 <create_chain+0x1a6>
c00033c9:	85 c0                	test   eax,eax
c00033cb:	74 11                	je     c00033de <create_chain+0x121>
c00033cd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033d0:	83 f8 01             	cmp    eax,0x1
c00033d3:	76 0d                	jbe    c00033e2 <create_chain+0x125>
c00033d5:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d8:	76 08                	jbe    c00033e2 <create_chain+0x125>
c00033da:	89 c7                	mov    edi,eax
c00033dc:	eb 04                	jmp    c00033e2 <create_chain+0x125>
c00033de:	85 db                	test   ebx,ebx
c00033e0:	75 38                	jne    c000341a <create_chain+0x15d>
c00033e2:	89 fb                	mov    ebx,edi
c00033e4:	43                   	inc    ebx
c00033e5:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e8:	77 0e                	ja     c00033f8 <create_chain+0x13b>
c00033ea:	83 ff 01             	cmp    edi,0x1
c00033ed:	0f 86 28 ff ff ff    	jbe    c000331b <create_chain+0x5e>
c00033f3:	bb 02 00 00 00       	mov    ebx,0x2
c00033f8:	89 da                	mov    edx,ebx
c00033fa:	89 e8                	mov    eax,ebp
c00033fc:	e8 ce fb ff ff       	call   c0002fcf <get_fat>
c0003401:	85 c0                	test   eax,eax
c0003403:	74 15                	je     c000341a <create_chain+0x15d>
c0003405:	83 f8 01             	cmp    eax,0x1
c0003408:	0f 84 e0 fe ff ff    	je     c00032ee <create_chain+0x31>
c000340e:	40                   	inc    eax
c000340f:	74 52                	je     c0003463 <create_chain+0x1a6>
c0003411:	39 fb                	cmp    ebx,edi
c0003413:	75 cf                	jne    c00033e4 <create_chain+0x127>
c0003415:	e9 01 ff ff ff       	jmp    c000331b <create_chain+0x5e>
c000341a:	83 c9 ff             	or     ecx,0xffffffff
c000341d:	89 da                	mov    edx,ebx
c000341f:	89 f0                	mov    eax,esi
c0003421:	e8 a4 f9 ff ff       	call   c0002dca <put_fat>
c0003426:	85 c0                	test   eax,eax
c0003428:	75 32                	jne    c000345c <create_chain+0x19f>
c000342a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000342f:	74 11                	je     c0003442 <create_chain+0x185>
c0003431:	89 d9                	mov    ecx,ebx
c0003433:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003437:	89 f0                	mov    eax,esi
c0003439:	e8 8c f9 ff ff       	call   c0002dca <put_fat>
c000343e:	85 c0                	test   eax,eax
c0003440:	75 1a                	jne    c000345c <create_chain+0x19f>
c0003442:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003445:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003448:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000344b:	8d 51 fe             	lea    edx,[ecx-0x2]
c000344e:	39 d0                	cmp    eax,edx
c0003450:	77 04                	ja     c0003456 <create_chain+0x199>
c0003452:	48                   	dec    eax
c0003453:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003456:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000345a:	eb 56                	jmp    c00034b2 <create_chain+0x1f5>
c000345c:	48                   	dec    eax
c000345d:	0f 85 8b fe ff ff    	jne    c00032ee <create_chain+0x31>
c0003463:	83 cb ff             	or     ebx,0xffffffff
c0003466:	eb 4a                	jmp    c00034b2 <create_chain+0x1f5>
c0003468:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000346c:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000346f:	41                   	inc    ecx
c0003470:	39 d9                	cmp    ecx,ebx
c0003472:	75 19                	jne    c000348d <create_chain+0x1d0>
c0003474:	b9 02 00 00 00       	mov    ecx,0x2
c0003479:	85 d2                	test   edx,edx
c000347b:	74 03                	je     c0003480 <create_chain+0x1c3>
c000347d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003480:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003483:	85 c0                	test   eax,eax
c0003485:	0f 85 63 fe ff ff    	jne    c00032ee <create_chain+0x31>
c000348b:	eb b5                	jmp    c0003442 <create_chain+0x185>
c000348d:	85 d2                	test   edx,edx
c000348f:	75 07                	jne    c0003498 <create_chain+0x1db>
c0003491:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003498:	89 d9                	mov    ecx,ebx
c000349a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000349e:	89 e8                	mov    eax,ebp
c00034a0:	e8 bb fa ff ff       	call   c0002f60 <fill_last_frag>
c00034a5:	85 c0                	test   eax,eax
c00034a7:	75 b3                	jne    c000345c <create_chain+0x19f>
c00034a9:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034b0:	eb 90                	jmp    c0003442 <create_chain+0x185>
c00034b2:	83 c4 1c             	add    esp,0x1c
c00034b5:	89 d8                	mov    eax,ebx
c00034b7:	5b                   	pop    ebx
c00034b8:	5e                   	pop    esi
c00034b9:	5f                   	pop    edi
c00034ba:	5d                   	pop    ebp
c00034bb:	c3                   	ret    

c00034bc <remove_chain>:
c00034bc:	55                   	push   ebp
c00034bd:	57                   	push   edi
c00034be:	56                   	push   esi
c00034bf:	53                   	push   ebx
c00034c0:	83 ec 1c             	sub    esp,0x1c
c00034c3:	83 fa 01             	cmp    edx,0x1
c00034c6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034ca:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034cc:	77 0a                	ja     c00034d8 <remove_chain+0x1c>
c00034ce:	b8 02 00 00 00       	mov    eax,0x2
c00034d3:	e9 24 01 00 00       	jmp    c00035fc <remove_chain+0x140>
c00034d8:	89 d6                	mov    esi,edx
c00034da:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034dd:	76 ef                	jbe    c00034ce <remove_chain+0x12>
c00034df:	89 c7                	mov    edi,eax
c00034e1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034e6:	75 06                	jne    c00034ee <remove_chain+0x32>
c00034e8:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034ec:	eb 54                	jmp    c0003542 <remove_chain+0x86>
c00034ee:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034f1:	75 06                	jne    c00034f9 <remove_chain+0x3d>
c00034f3:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034f7:	74 ef                	je     c00034e8 <remove_chain+0x2c>
c00034f9:	83 c9 ff             	or     ecx,0xffffffff
c00034fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003500:	89 d8                	mov    eax,ebx
c0003502:	e8 c3 f8 ff ff       	call   c0002dca <put_fat>
c0003507:	85 c0                	test   eax,eax
c0003509:	74 dd                	je     c00034e8 <remove_chain+0x2c>
c000350b:	e9 ec 00 00 00       	jmp    c00035fc <remove_chain+0x140>
c0003510:	83 f8 01             	cmp    eax,0x1
c0003513:	74 b9                	je     c00034ce <remove_chain+0x12>
c0003515:	83 f8 ff             	cmp    eax,0xffffffff
c0003518:	74 6d                	je     c0003587 <remove_chain+0xcb>
c000351a:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000351d:	75 6f                	jne    c000358e <remove_chain+0xd2>
c000351f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003522:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003525:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003528:	39 d0                	cmp    eax,edx
c000352a:	73 08                	jae    c0003534 <remove_chain+0x78>
c000352c:	40                   	inc    eax
c000352d:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003531:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003534:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003537:	39 e9                	cmp    ecx,ebp
c0003539:	75 64                	jne    c000359f <remove_chain+0xe3>
c000353b:	89 ee                	mov    esi,ebp
c000353d:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003540:	76 0f                	jbe    c0003551 <remove_chain+0x95>
c0003542:	89 f2                	mov    edx,esi
c0003544:	89 f8                	mov    eax,edi
c0003546:	e8 84 fa ff ff       	call   c0002fcf <get_fat>
c000354b:	89 c5                	mov    ebp,eax
c000354d:	85 c0                	test   eax,eax
c000354f:	75 bf                	jne    c0003510 <remove_chain+0x54>
c0003551:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003554:	0f 85 a0 00 00 00    	jne    c00035fa <remove_chain+0x13e>
c000355a:	eb 6c                	jmp    c00035c8 <remove_chain+0x10c>
c000355c:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000355f:	84 c0                	test   al,al
c0003561:	75 7d                	jne    c00035e0 <remove_chain+0x124>
c0003563:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003566:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000356a:	0f 84 86 00 00 00    	je     c00035f6 <remove_chain+0x13a>
c0003570:	89 da                	mov    edx,ebx
c0003572:	89 f8                	mov    eax,edi
c0003574:	e8 56 fa ff ff       	call   c0002fcf <get_fat>
c0003579:	83 f8 01             	cmp    eax,0x1
c000357c:	0f 86 4c ff ff ff    	jbe    c00034ce <remove_chain+0x12>
c0003582:	83 f8 ff             	cmp    eax,0xffffffff
c0003585:	75 4e                	jne    c00035d5 <remove_chain+0x119>
c0003587:	b8 01 00 00 00       	mov    eax,0x1
c000358c:	eb 6e                	jmp    c00035fc <remove_chain+0x140>
c000358e:	31 c9                	xor    ecx,ecx
c0003590:	89 f2                	mov    edx,esi
c0003592:	89 d8                	mov    eax,ebx
c0003594:	e8 31 f8 ff ff       	call   c0002dca <put_fat>
c0003599:	85 c0                	test   eax,eax
c000359b:	74 82                	je     c000351f <remove_chain+0x63>
c000359d:	eb 5d                	jmp    c00035fc <remove_chain+0x140>
c000359f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00035a2:	75 1b                	jne    c00035bf <remove_chain+0x103>
c00035a4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a8:	89 d8                	mov    eax,ebx
c00035aa:	83 ec 0c             	sub    esp,0xc
c00035ad:	6a 00                	push   0x0
c00035af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035b3:	e8 5d f7 ff ff       	call   c0002d15 <change_bitmap>
c00035b8:	83 c4 10             	add    esp,0x10
c00035bb:	85 c0                	test   eax,eax
c00035bd:	75 3d                	jne    c00035fc <remove_chain+0x140>
c00035bf:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035c3:	e9 73 ff ff ff       	jmp    c000353b <remove_chain+0x7f>
c00035c8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035cd:	75 8d                	jne    c000355c <remove_chain+0xa0>
c00035cf:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035d3:	eb 25                	jmp    c00035fa <remove_chain+0x13e>
c00035d5:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d8:	89 c3                	mov    ebx,eax
c00035da:	39 c2                	cmp    edx,eax
c00035dc:	74 88                	je     c0003566 <remove_chain+0xaa>
c00035de:	eb 1a                	jmp    c00035fa <remove_chain+0x13e>
c00035e0:	3c 03                	cmp    al,0x3
c00035e2:	75 16                	jne    c00035fa <remove_chain+0x13e>
c00035e4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035e7:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035eb:	77 0d                	ja     c00035fa <remove_chain+0x13e>
c00035ed:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035f0:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035f4:	72 04                	jb     c00035fa <remove_chain+0x13e>
c00035f6:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035fa:	31 c0                	xor    eax,eax
c00035fc:	83 c4 1c             	add    esp,0x1c
c00035ff:	5b                   	pop    ebx
c0003600:	5e                   	pop    esi
c0003601:	5f                   	pop    edi
c0003602:	5d                   	pop    ebp
c0003603:	c3                   	ret    

c0003604 <dir_clear>:
c0003604:	55                   	push   ebp
c0003605:	57                   	push   edi
c0003606:	56                   	push   esi
c0003607:	89 c6                	mov    esi,eax
c0003609:	53                   	push   ebx
c000360a:	83 ec 1c             	sub    esp,0x1c
c000360d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003611:	e8 9d ed ff ff       	call   c00023b3 <sync_window>
c0003616:	85 c0                	test   eax,eax
c0003618:	0f 85 de 00 00 00    	jne    c00036fc <dir_clear+0xf8>
c000361e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003622:	89 f0                	mov    eax,esi
c0003624:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003627:	e8 d6 e8 ff ff       	call   c0001f02 <clst2sect>
c000362c:	b9 00 02 00 00       	mov    ecx,0x200
c0003631:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003635:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003639:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000363c:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c000363f:	89 e8                	mov    eax,ebp
c0003641:	31 d2                	xor    edx,edx
c0003643:	e8 b5 e6 ff ff       	call   c0001cfd <mem_set>
c0003648:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000364c:	c1 e3 09             	shl    ebx,0x9
c000364f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003655:	76 1f                	jbe    c0003676 <dir_clear+0x72>
c0003657:	bb 00 80 00 00       	mov    ebx,0x8000
c000365c:	eb 18                	jmp    c0003676 <dir_clear+0x72>
c000365e:	83 ec 0c             	sub    esp,0xc
c0003661:	53                   	push   ebx
c0003662:	e8 35 4e 00 00       	call   c000849c <ff_memalloc>
c0003667:	83 c4 10             	add    esp,0x10
c000366a:	89 c7                	mov    edi,eax
c000366c:	85 c0                	test   eax,eax
c000366e:	0f 85 8f 00 00 00    	jne    c0003703 <dir_clear+0xff>
c0003674:	d1 eb                	shr    ebx,1
c0003676:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000367c:	77 e0                	ja     c000365e <dir_clear+0x5a>
c000367e:	31 db                	xor    ebx,ebx
c0003680:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003684:	39 d8                	cmp    eax,ebx
c0003686:	76 66                	jbe    c00036ee <dir_clear+0xea>
c0003688:	83 ec 0c             	sub    esp,0xc
c000368b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000368f:	6a 01                	push   0x1
c0003691:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003695:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003699:	55                   	push   ebp
c000369a:	50                   	push   eax
c000369b:	e8 94 e5 ff ff       	call   c0001c34 <disk_write>
c00036a0:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00036a5:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036aa:	83 c4 20             	add    esp,0x20
c00036ad:	85 c0                	test   eax,eax
c00036af:	75 3d                	jne    c00036ee <dir_clear+0xea>
c00036b1:	43                   	inc    ebx
c00036b2:	eb cc                	jmp    c0003680 <dir_clear+0x7c>
c00036b4:	83 ec 0c             	sub    esp,0xc
c00036b7:	31 d2                	xor    edx,edx
c00036b9:	55                   	push   ebp
c00036ba:	89 d8                	mov    eax,ebx
c00036bc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036c0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036c4:	52                   	push   edx
c00036c5:	50                   	push   eax
c00036c6:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036ca:	57                   	push   edi
c00036cb:	50                   	push   eax
c00036cc:	e8 63 e5 ff ff       	call   c0001c34 <disk_write>
c00036d1:	83 c4 20             	add    esp,0x20
c00036d4:	85 c0                	test   eax,eax
c00036d6:	75 0a                	jne    c00036e2 <dir_clear+0xde>
c00036d8:	01 eb                	add    ebx,ebp
c00036da:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036de:	39 d8                	cmp    eax,ebx
c00036e0:	77 d2                	ja     c00036b4 <dir_clear+0xb0>
c00036e2:	83 ec 0c             	sub    esp,0xc
c00036e5:	57                   	push   edi
c00036e6:	e8 c7 4d 00 00       	call   c00084b2 <ff_memfree>
c00036eb:	83 c4 10             	add    esp,0x10
c00036ee:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036f2:	39 d8                	cmp    eax,ebx
c00036f4:	0f 95 c0             	setne  al
c00036f7:	0f b6 c0             	movzx  eax,al
c00036fa:	eb 19                	jmp    c0003715 <dir_clear+0x111>
c00036fc:	b8 01 00 00 00       	mov    eax,0x1
c0003701:	eb 12                	jmp    c0003715 <dir_clear+0x111>
c0003703:	89 d9                	mov    ecx,ebx
c0003705:	31 d2                	xor    edx,edx
c0003707:	c1 eb 09             	shr    ebx,0x9
c000370a:	e8 ee e5 ff ff       	call   c0001cfd <mem_set>
c000370f:	89 dd                	mov    ebp,ebx
c0003711:	31 db                	xor    ebx,ebx
c0003713:	eb c5                	jmp    c00036da <dir_clear+0xd6>
c0003715:	83 c4 1c             	add    esp,0x1c
c0003718:	5b                   	pop    ebx
c0003719:	5e                   	pop    esi
c000371a:	5f                   	pop    edi
c000371b:	5d                   	pop    ebp
c000371c:	c3                   	ret    

c000371d <dir_next>:
c000371d:	55                   	push   ebp
c000371e:	57                   	push   edi
c000371f:	56                   	push   esi
c0003720:	53                   	push   ebx
c0003721:	89 c3                	mov    ebx,eax
c0003723:	83 ec 1c             	sub    esp,0x1c
c0003726:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003728:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000372c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000372f:	8d 78 20             	lea    edi,[eax+0x20]
c0003732:	31 c0                	xor    eax,eax
c0003734:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003738:	0f 94 c0             	sete   al
c000373b:	48                   	dec    eax
c000373c:	25 00 00 20 f0       	and    eax,0xf0200000
c0003741:	05 00 00 00 10       	add    eax,0x10000000
c0003746:	39 f8                	cmp    eax,edi
c0003748:	77 0e                	ja     c0003758 <dir_next+0x3b>
c000374a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003751:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003758:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000375b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000375e:	b8 04 00 00 00       	mov    eax,0x4
c0003763:	89 ce                	mov    esi,ecx
c0003765:	09 d6                	or     esi,edx
c0003767:	0f 84 da 00 00 00    	je     c0003847 <dir_next+0x12a>
c000376d:	89 f8                	mov    eax,edi
c000376f:	25 ff 01 00 00       	and    eax,0x1ff
c0003774:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003778:	0f 85 b9 00 00 00    	jne    c0003837 <dir_next+0x11a>
c000377e:	83 c2 01             	add    edx,0x1
c0003781:	83 d1 00             	adc    ecx,0x0
c0003784:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003787:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000378a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000378d:	85 d2                	test   edx,edx
c000378f:	75 29                	jne    c00037ba <dir_next+0x9d>
c0003791:	89 fa                	mov    edx,edi
c0003793:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003797:	c1 ea 05             	shr    edx,0x5
c000379a:	39 c2                	cmp    edx,eax
c000379c:	0f 82 95 00 00 00    	jb     c0003837 <dir_next+0x11a>
c00037a2:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a9:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037b0:	b8 04 00 00 00       	mov    eax,0x4
c00037b5:	e9 8d 00 00 00       	jmp    c0003847 <dir_next+0x12a>
c00037ba:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037be:	89 f9                	mov    ecx,edi
c00037c0:	48                   	dec    eax
c00037c1:	c1 e9 09             	shr    ecx,0x9
c00037c4:	85 c8                	test   eax,ecx
c00037c6:	75 6f                	jne    c0003837 <dir_next+0x11a>
c00037c8:	89 d8                	mov    eax,ebx
c00037ca:	e8 00 f8 ff ff       	call   c0002fcf <get_fat>
c00037cf:	89 c6                	mov    esi,eax
c00037d1:	83 f8 01             	cmp    eax,0x1
c00037d4:	77 07                	ja     c00037dd <dir_next+0xc0>
c00037d6:	b8 02 00 00 00       	mov    eax,0x2
c00037db:	eb 6a                	jmp    c0003847 <dir_next+0x12a>
c00037dd:	83 f8 ff             	cmp    eax,0xffffffff
c00037e0:	75 07                	jne    c00037e9 <dir_next+0xcc>
c00037e2:	b8 01 00 00 00       	mov    eax,0x1
c00037e7:	eb 5e                	jmp    c0003847 <dir_next+0x12a>
c00037e9:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037ec:	77 37                	ja     c0003825 <dir_next+0x108>
c00037ee:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037f3:	74 ad                	je     c00037a2 <dir_next+0x85>
c00037f5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f8:	89 d8                	mov    eax,ebx
c00037fa:	e8 be fa ff ff       	call   c00032bd <create_chain>
c00037ff:	89 c6                	mov    esi,eax
c0003801:	b8 07 00 00 00       	mov    eax,0x7
c0003806:	85 f6                	test   esi,esi
c0003808:	74 3d                	je     c0003847 <dir_next+0x12a>
c000380a:	83 fe 01             	cmp    esi,0x1
c000380d:	74 c7                	je     c00037d6 <dir_next+0xb9>
c000380f:	83 fe ff             	cmp    esi,0xffffffff
c0003812:	74 ce                	je     c00037e2 <dir_next+0xc5>
c0003814:	89 f2                	mov    edx,esi
c0003816:	89 e8                	mov    eax,ebp
c0003818:	e8 e7 fd ff ff       	call   c0003604 <dir_clear>
c000381d:	85 c0                	test   eax,eax
c000381f:	75 c1                	jne    c00037e2 <dir_next+0xc5>
c0003821:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003825:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003828:	89 f2                	mov    edx,esi
c000382a:	89 e8                	mov    eax,ebp
c000382c:	e8 d1 e6 ff ff       	call   c0001f02 <clst2sect>
c0003831:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003834:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003837:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000383b:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c000383e:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003842:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003845:	31 c0                	xor    eax,eax
c0003847:	83 c4 1c             	add    esp,0x1c
c000384a:	5b                   	pop    ebx
c000384b:	5e                   	pop    esi
c000384c:	5f                   	pop    edi
c000384d:	5d                   	pop    ebp
c000384e:	c3                   	ret    

c000384f <load_xdir>:
c000384f:	55                   	push   ebp
c0003850:	57                   	push   edi
c0003851:	56                   	push   esi
c0003852:	89 c6                	mov    esi,eax
c0003854:	53                   	push   ebx
c0003855:	83 ec 1c             	sub    esp,0x1c
c0003858:	8b 00                	mov    eax,DWORD PTR [eax]
c000385a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000385d:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003860:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003863:	e8 df eb ff ff       	call   c0002447 <move_window>
c0003868:	89 c3                	mov    ebx,eax
c000386a:	85 c0                	test   eax,eax
c000386c:	0f 85 0c 01 00 00    	jne    c000397e <load_xdir+0x12f>
c0003872:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003875:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003878:	0f 85 fb 00 00 00    	jne    c0003979 <load_xdir+0x12a>
c000387e:	89 f8                	mov    eax,edi
c0003880:	b9 20 00 00 00       	mov    ecx,0x20
c0003885:	e8 5e e4 ff ff       	call   c0001ce8 <mem_cpy>
c000388a:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000388e:	40                   	inc    eax
c000388f:	c1 e0 05             	shl    eax,0x5
c0003892:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003896:	83 e8 60             	sub    eax,0x60
c0003899:	3d 00 02 00 00       	cmp    eax,0x200
c000389e:	0f 87 d5 00 00 00    	ja     c0003979 <load_xdir+0x12a>
c00038a4:	31 d2                	xor    edx,edx
c00038a6:	89 f0                	mov    eax,esi
c00038a8:	e8 70 fe ff ff       	call   c000371d <dir_next>
c00038ad:	89 c3                	mov    ebx,eax
c00038af:	83 f8 04             	cmp    eax,0x4
c00038b2:	0f 84 c1 00 00 00    	je     c0003979 <load_xdir+0x12a>
c00038b8:	85 c0                	test   eax,eax
c00038ba:	0f 85 be 00 00 00    	jne    c000397e <load_xdir+0x12f>
c00038c0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038c3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038c6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c8:	e8 7a eb ff ff       	call   c0002447 <move_window>
c00038cd:	89 c3                	mov    ebx,eax
c00038cf:	85 c0                	test   eax,eax
c00038d1:	0f 85 a7 00 00 00    	jne    c000397e <load_xdir+0x12f>
c00038d7:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038da:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038dd:	0f 85 96 00 00 00    	jne    c0003979 <load_xdir+0x12a>
c00038e3:	8d 47 20             	lea    eax,[edi+0x20]
c00038e6:	b9 20 00 00 00       	mov    ecx,0x20
c00038eb:	e8 f8 e3 ff ff       	call   c0001ce8 <mem_cpy>
c00038f0:	31 d2                	xor    edx,edx
c00038f2:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038f6:	b9 0f 00 00 00       	mov    ecx,0xf
c00038fb:	83 c0 2c             	add    eax,0x2c
c00038fe:	f7 f1                	div    ecx
c0003900:	c1 e0 05             	shl    eax,0x5
c0003903:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003907:	77 70                	ja     c0003979 <load_xdir+0x12a>
c0003909:	bd 40 00 00 00       	mov    ebp,0x40
c000390e:	31 d2                	xor    edx,edx
c0003910:	89 f0                	mov    eax,esi
c0003912:	e8 06 fe ff ff       	call   c000371d <dir_next>
c0003917:	89 c3                	mov    ebx,eax
c0003919:	83 f8 04             	cmp    eax,0x4
c000391c:	74 5b                	je     c0003979 <load_xdir+0x12a>
c000391e:	85 c0                	test   eax,eax
c0003920:	75 5c                	jne    c000397e <load_xdir+0x12f>
c0003922:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003925:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003928:	8b 06                	mov    eax,DWORD PTR [esi]
c000392a:	e8 18 eb ff ff       	call   c0002447 <move_window>
c000392f:	89 c3                	mov    ebx,eax
c0003931:	85 c0                	test   eax,eax
c0003933:	75 49                	jne    c000397e <load_xdir+0x12f>
c0003935:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003938:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000393b:	75 3c                	jne    c0003979 <load_xdir+0x12a>
c000393d:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003943:	77 0d                	ja     c0003952 <load_xdir+0x103>
c0003945:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003948:	b9 20 00 00 00       	mov    ecx,0x20
c000394d:	e8 96 e3 ff ff       	call   c0001ce8 <mem_cpy>
c0003952:	83 c5 20             	add    ebp,0x20
c0003955:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003959:	77 b3                	ja     c000390e <load_xdir+0xbf>
c000395b:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003961:	77 1b                	ja     c000397e <load_xdir+0x12f>
c0003963:	89 f8                	mov    eax,edi
c0003965:	e8 cd e7 ff ff       	call   c0002137 <xdir_sum>
c000396a:	89 c1                	mov    ecx,eax
c000396c:	8d 47 02             	lea    eax,[edi+0x2]
c000396f:	e8 f5 e2 ff ff       	call   c0001c69 <ld_word>
c0003974:	66 39 c1             	cmp    cx,ax
c0003977:	74 05                	je     c000397e <load_xdir+0x12f>
c0003979:	bb 02 00 00 00       	mov    ebx,0x2
c000397e:	83 c4 1c             	add    esp,0x1c
c0003981:	89 d8                	mov    eax,ebx
c0003983:	5b                   	pop    ebx
c0003984:	5e                   	pop    esi
c0003985:	5f                   	pop    edi
c0003986:	5d                   	pop    ebp
c0003987:	c3                   	ret    

c0003988 <load_obj_xdir>:
c0003988:	53                   	push   ebx
c0003989:	89 c3                	mov    ebx,eax
c000398b:	83 ec 08             	sub    esp,0x8
c000398e:	8b 02                	mov    eax,DWORD PTR [edx]
c0003990:	89 03                	mov    DWORD PTR [ebx],eax
c0003992:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003995:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003998:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000399b:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000399e:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00039a1:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a8:	30 c0                	xor    al,al
c00039aa:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039b1:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039b4:	89 d8                	mov    eax,ebx
c00039b6:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b9:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039bc:	e8 04 f8 ff ff       	call   c00031c5 <dir_sdi>
c00039c1:	85 c0                	test   eax,eax
c00039c3:	75 0b                	jne    c00039d0 <load_obj_xdir+0x48>
c00039c5:	89 d8                	mov    eax,ebx
c00039c7:	83 c4 08             	add    esp,0x8
c00039ca:	5b                   	pop    ebx
c00039cb:	e9 7f fe ff ff       	jmp    c000384f <load_xdir>
c00039d0:	83 c4 08             	add    esp,0x8
c00039d3:	5b                   	pop    ebx
c00039d4:	c3                   	ret    

c00039d5 <dir_read>:
c00039d5:	55                   	push   ebp
c00039d6:	bd 04 00 00 00       	mov    ebp,0x4
c00039db:	57                   	push   edi
c00039dc:	56                   	push   esi
c00039dd:	be ff ff ff ff       	mov    esi,0xffffffff
c00039e2:	53                   	push   ebx
c00039e3:	89 c3                	mov    ebx,eax
c00039e5:	83 ec 1c             	sub    esp,0x1c
c00039e8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039ec:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ee:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039f3:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039f6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f9:	89 c8                	mov    eax,ecx
c00039fb:	09 d0                	or     eax,edx
c00039fd:	0f 84 25 01 00 00    	je     c0003b28 <dir_read+0x153>
c0003a03:	89 f8                	mov    eax,edi
c0003a05:	e8 3d ea ff ff       	call   c0002447 <move_window>
c0003a0a:	89 c5                	mov    ebp,eax
c0003a0c:	85 c0                	test   eax,eax
c0003a0e:	0f 85 23 01 00 00    	jne    c0003b37 <dir_read+0x162>
c0003a14:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a17:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a19:	84 c9                	test   cl,cl
c0003a1b:	0f 84 11 01 00 00    	je     c0003b32 <dir_read+0x15d>
c0003a21:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a24:	75 48                	jne    c0003a6e <dir_read+0x99>
c0003a26:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a2b:	74 10                	je     c0003a3d <dir_read+0x68>
c0003a2d:	80 f9 83             	cmp    cl,0x83
c0003a30:	0f 85 dd 00 00 00    	jne    c0003b13 <dir_read+0x13e>
c0003a36:	31 ed                	xor    ebp,ebp
c0003a38:	e9 08 01 00 00       	jmp    c0003b45 <dir_read+0x170>
c0003a3d:	80 f9 85             	cmp    cl,0x85
c0003a40:	0f 85 cd 00 00 00    	jne    c0003b13 <dir_read+0x13e>
c0003a46:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a49:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a4c:	89 d8                	mov    eax,ebx
c0003a4e:	e8 fc fd ff ff       	call   c000384f <load_xdir>
c0003a53:	89 c5                	mov    ebp,eax
c0003a55:	85 c0                	test   eax,eax
c0003a57:	0f 85 da 00 00 00    	jne    c0003b37 <dir_read+0x162>
c0003a5d:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a60:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a63:	83 e0 3f             	and    eax,0x3f
c0003a66:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a69:	e9 d7 00 00 00       	jmp    c0003b45 <dir_read+0x170>
c0003a6e:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a71:	83 e0 3f             	and    eax,0x3f
c0003a74:	80 f9 2e             	cmp    cl,0x2e
c0003a77:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a7b:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a7e:	0f 84 8a 00 00 00    	je     c0003b0e <dir_read+0x139>
c0003a84:	80 f9 e5             	cmp    cl,0xe5
c0003a87:	0f 84 81 00 00 00    	je     c0003b0e <dir_read+0x139>
c0003a8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a91:	83 e0 1f             	and    eax,0x1f
c0003a94:	83 f8 08             	cmp    eax,0x8
c0003a97:	0f 94 c0             	sete   al
c0003a9a:	0f b6 c0             	movzx  eax,al
c0003a9d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003aa1:	75 6b                	jne    c0003b0e <dir_read+0x139>
c0003aa3:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa8:	75 44                	jne    c0003aee <dir_read+0x119>
c0003aaa:	f6 c1 40             	test   cl,0x40
c0003aad:	74 12                	je     c0003ac1 <dir_read+0xec>
c0003aaf:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003ab2:	83 e1 bf             	and    ecx,0xffffffbf
c0003ab5:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003abc:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003abf:	eb 06                	jmp    c0003ac7 <dir_read+0xf2>
c0003ac1:	89 f0                	mov    eax,esi
c0003ac3:	38 c8                	cmp    al,cl
c0003ac5:	75 47                	jne    c0003b0e <dir_read+0x139>
c0003ac7:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003acb:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad0:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003ad3:	75 3e                	jne    c0003b13 <dir_read+0x13e>
c0003ad5:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad9:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003adc:	e8 8a e4 ff ff       	call   c0001f6b <pick_lfn>
c0003ae1:	85 c0                	test   eax,eax
c0003ae3:	74 2e                	je     c0003b13 <dir_read+0x13e>
c0003ae5:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae9:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aec:	eb 25                	jmp    c0003b13 <dir_read+0x13e>
c0003aee:	89 f0                	mov    eax,esi
c0003af0:	84 c0                	test   al,al
c0003af2:	75 11                	jne    c0003b05 <dir_read+0x130>
c0003af4:	89 d0                	mov    eax,edx
c0003af6:	e8 2a e6 ff ff       	call   c0002125 <sum_sfn>
c0003afb:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003aff:	0f 84 31 ff ff ff    	je     c0003a36 <dir_read+0x61>
c0003b05:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b0c:	eb 37                	jmp    c0003b45 <dir_read+0x170>
c0003b0e:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b13:	31 d2                	xor    edx,edx
c0003b15:	89 d8                	mov    eax,ebx
c0003b17:	e8 01 fc ff ff       	call   c000371d <dir_next>
c0003b1c:	89 c5                	mov    ebp,eax
c0003b1e:	85 c0                	test   eax,eax
c0003b20:	0f 84 cd fe ff ff    	je     c00039f3 <dir_read+0x1e>
c0003b26:	eb 0f                	jmp    c0003b37 <dir_read+0x162>
c0003b28:	85 ed                	test   ebp,ebp
c0003b2a:	0f 84 06 ff ff ff    	je     c0003a36 <dir_read+0x61>
c0003b30:	eb 05                	jmp    c0003b37 <dir_read+0x162>
c0003b32:	bd 04 00 00 00       	mov    ebp,0x4
c0003b37:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b3e:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b45:	83 c4 1c             	add    esp,0x1c
c0003b48:	89 e8                	mov    eax,ebp
c0003b4a:	5b                   	pop    ebx
c0003b4b:	5e                   	pop    esi
c0003b4c:	5f                   	pop    edi
c0003b4d:	5d                   	pop    ebp
c0003b4e:	c3                   	ret    

c0003b4f <dir_alloc>:
c0003b4f:	55                   	push   ebp
c0003b50:	89 d5                	mov    ebp,edx
c0003b52:	57                   	push   edi
c0003b53:	31 d2                	xor    edx,edx
c0003b55:	56                   	push   esi
c0003b56:	53                   	push   ebx
c0003b57:	89 c3                	mov    ebx,eax
c0003b59:	83 ec 0c             	sub    esp,0xc
c0003b5c:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b5e:	e8 62 f6 ff ff       	call   c00031c5 <dir_sdi>
c0003b63:	85 c0                	test   eax,eax
c0003b65:	75 4e                	jne    c0003bb5 <dir_alloc+0x66>
c0003b67:	31 f6                	xor    esi,esi
c0003b69:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b6c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b6f:	89 f8                	mov    eax,edi
c0003b71:	e8 d1 e8 ff ff       	call   c0002447 <move_window>
c0003b76:	85 c0                	test   eax,eax
c0003b78:	75 3b                	jne    c0003bb5 <dir_alloc+0x66>
c0003b7a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b7d:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b80:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b82:	75 07                	jne    c0003b8b <dir_alloc+0x3c>
c0003b84:	f7 d2                	not    edx
c0003b86:	c0 ea 07             	shr    dl,0x7
c0003b89:	eb 0d                	jmp    c0003b98 <dir_alloc+0x49>
c0003b8b:	84 d2                	test   dl,dl
c0003b8d:	0f 94 c1             	sete   cl
c0003b90:	80 fa e5             	cmp    dl,0xe5
c0003b93:	0f 94 c2             	sete   dl
c0003b96:	09 ca                	or     edx,ecx
c0003b98:	84 d2                	test   dl,dl
c0003b9a:	74 07                	je     c0003ba3 <dir_alloc+0x54>
c0003b9c:	46                   	inc    esi
c0003b9d:	39 ee                	cmp    esi,ebp
c0003b9f:	75 04                	jne    c0003ba5 <dir_alloc+0x56>
c0003ba1:	eb 1c                	jmp    c0003bbf <dir_alloc+0x70>
c0003ba3:	31 f6                	xor    esi,esi
c0003ba5:	ba 01 00 00 00       	mov    edx,0x1
c0003baa:	89 d8                	mov    eax,ebx
c0003bac:	e8 6c fb ff ff       	call   c000371d <dir_next>
c0003bb1:	85 c0                	test   eax,eax
c0003bb3:	74 b4                	je     c0003b69 <dir_alloc+0x1a>
c0003bb5:	83 f8 04             	cmp    eax,0x4
c0003bb8:	75 05                	jne    c0003bbf <dir_alloc+0x70>
c0003bba:	b8 07 00 00 00       	mov    eax,0x7
c0003bbf:	83 c4 0c             	add    esp,0xc
c0003bc2:	5b                   	pop    ebx
c0003bc3:	5e                   	pop    esi
c0003bc4:	5f                   	pop    edi
c0003bc5:	5d                   	pop    ebp
c0003bc6:	c3                   	ret    

c0003bc7 <store_xdir>:
c0003bc7:	55                   	push   ebp
c0003bc8:	57                   	push   edi
c0003bc9:	89 c7                	mov    edi,eax
c0003bcb:	56                   	push   esi
c0003bcc:	53                   	push   ebx
c0003bcd:	83 ec 0c             	sub    esp,0xc
c0003bd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bd2:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bd5:	89 e8                	mov    eax,ebp
c0003bd7:	e8 5b e5 ff ff       	call   c0002137 <xdir_sum>
c0003bdc:	0f b7 d0             	movzx  edx,ax
c0003bdf:	8d 45 02             	lea    eax,[ebp+0x2]
c0003be2:	e8 f4 e0 ff ff       	call   c0001cdb <st_word>
c0003be7:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003beb:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bee:	89 f8                	mov    eax,edi
c0003bf0:	e8 d0 f5 ff ff       	call   c00031c5 <dir_sdi>
c0003bf5:	89 c6                	mov    esi,eax
c0003bf7:	85 f6                	test   esi,esi
c0003bf9:	75 3d                	jne    c0003c38 <store_xdir+0x71>
c0003bfb:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bfe:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003c01:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c03:	e8 3f e8 ff ff       	call   c0002447 <move_window>
c0003c08:	89 c6                	mov    esi,eax
c0003c0a:	85 c0                	test   eax,eax
c0003c0c:	75 2a                	jne    c0003c38 <store_xdir+0x71>
c0003c0e:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c11:	b9 20 00 00 00       	mov    ecx,0x20
c0003c16:	89 ea                	mov    edx,ebp
c0003c18:	e8 cb e0 ff ff       	call   c0001ce8 <mem_cpy>
c0003c1d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c1f:	85 db                	test   ebx,ebx
c0003c21:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c25:	74 11                	je     c0003c38 <store_xdir+0x71>
c0003c27:	31 d2                	xor    edx,edx
c0003c29:	89 f8                	mov    eax,edi
c0003c2b:	83 c5 20             	add    ebp,0x20
c0003c2e:	e8 ea fa ff ff       	call   c000371d <dir_next>
c0003c33:	4b                   	dec    ebx
c0003c34:	89 c6                	mov    esi,eax
c0003c36:	eb bf                	jmp    c0003bf7 <store_xdir+0x30>
c0003c38:	89 f0                	mov    eax,esi
c0003c3a:	83 fe 02             	cmp    esi,0x2
c0003c3d:	76 05                	jbe    c0003c44 <store_xdir+0x7d>
c0003c3f:	b8 02 00 00 00       	mov    eax,0x2
c0003c44:	83 c4 0c             	add    esp,0xc
c0003c47:	5b                   	pop    ebx
c0003c48:	5e                   	pop    esi
c0003c49:	5f                   	pop    edi
c0003c4a:	5d                   	pop    ebp
c0003c4b:	c3                   	ret    

c0003c4c <dir_remove>:
c0003c4c:	57                   	push   edi
c0003c4d:	56                   	push   esi
c0003c4e:	53                   	push   ebx
c0003c4f:	89 c3                	mov    ebx,eax
c0003c51:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c54:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c56:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c59:	83 fa ff             	cmp    edx,0xffffffff
c0003c5c:	74 09                	je     c0003c67 <dir_remove+0x1b>
c0003c5e:	e8 62 f5 ff ff       	call   c00031c5 <dir_sdi>
c0003c63:	85 c0                	test   eax,eax
c0003c65:	75 41                	jne    c0003ca8 <dir_remove+0x5c>
c0003c67:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c6a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c6d:	89 f0                	mov    eax,esi
c0003c6f:	e8 d3 e7 ff ff       	call   c0002447 <move_window>
c0003c74:	85 c0                	test   eax,eax
c0003c76:	75 26                	jne    c0003c9e <dir_remove+0x52>
c0003c78:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c7b:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c7e:	75 05                	jne    c0003c85 <dir_remove+0x39>
c0003c80:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c83:	eb 03                	jmp    c0003c88 <dir_remove+0x3c>
c0003c85:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c88:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c8c:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c8f:	73 17                	jae    c0003ca8 <dir_remove+0x5c>
c0003c91:	31 d2                	xor    edx,edx
c0003c93:	89 d8                	mov    eax,ebx
c0003c95:	e8 83 fa ff ff       	call   c000371d <dir_next>
c0003c9a:	85 c0                	test   eax,eax
c0003c9c:	74 c9                	je     c0003c67 <dir_remove+0x1b>
c0003c9e:	83 f8 04             	cmp    eax,0x4
c0003ca1:	75 05                	jne    c0003ca8 <dir_remove+0x5c>
c0003ca3:	b8 02 00 00 00       	mov    eax,0x2
c0003ca8:	5b                   	pop    ebx
c0003ca9:	5e                   	pop    esi
c0003caa:	5f                   	pop    edi
c0003cab:	c3                   	ret    

c0003cac <create_name>:
c0003cac:	55                   	push   ebp
c0003cad:	89 d5                	mov    ebp,edx
c0003caf:	57                   	push   edi
c0003cb0:	89 c7                	mov    edi,eax
c0003cb2:	56                   	push   esi
c0003cb3:	31 f6                	xor    esi,esi
c0003cb5:	53                   	push   ebx
c0003cb6:	83 ec 3c             	sub    esp,0x3c
c0003cb9:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cbb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cc1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cc4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc8:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003ccc:	e8 72 e0 ff ff       	call   c0001d43 <tchar2uni>
c0003cd1:	89 c3                	mov    ebx,eax
c0003cd3:	83 f8 ff             	cmp    eax,0xffffffff
c0003cd6:	75 0a                	jne    c0003ce2 <create_name+0x36>
c0003cd8:	b8 06 00 00 00       	mov    eax,0x6
c0003cdd:	e9 9e 02 00 00       	jmp    c0003f80 <create_name+0x2d4>
c0003ce2:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ce7:	76 0c                	jbe    c0003cf5 <create_name+0x49>
c0003ce9:	c1 e8 10             	shr    eax,0x10
c0003cec:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cf0:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cf4:	46                   	inc    esi
c0003cf5:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf9:	76 4f                	jbe    c0003d4a <create_name+0x9e>
c0003cfb:	66 83 fb 5c          	cmp    bx,0x5c
c0003cff:	74 35                	je     c0003d36 <create_name+0x8a>
c0003d01:	66 83 fb 2f          	cmp    bx,0x2f
c0003d05:	74 2f                	je     c0003d36 <create_name+0x8a>
c0003d07:	66 83 fb 7f          	cmp    bx,0x7f
c0003d0b:	77 11                	ja     c0003d1e <create_name+0x72>
c0003d0d:	0f b7 d3             	movzx  edx,bx
c0003d10:	b8 d2 95 02 c0       	mov    eax,0xc00295d2
c0003d15:	e8 11 e0 ff ff       	call   c0001d2b <chk_chr>
c0003d1a:	85 c0                	test   eax,eax
c0003d1c:	75 ba                	jne    c0003cd8 <create_name+0x2c>
c0003d1e:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d24:	77 b2                	ja     c0003cd8 <create_name+0x2c>
c0003d26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d2a:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d2e:	46                   	inc    esi
c0003d2f:	eb 97                	jmp    c0003cc8 <create_name+0x1c>
c0003d31:	40                   	inc    eax
c0003d32:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d36:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d3a:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d3c:	80 fa 2f             	cmp    dl,0x2f
c0003d3f:	74 f0                	je     c0003d31 <create_name+0x85>
c0003d41:	80 fa 5c             	cmp    dl,0x5c
c0003d44:	74 eb                	je     c0003d31 <create_name+0x85>
c0003d46:	31 db                	xor    ebx,ebx
c0003d48:	eb 02                	jmp    c0003d4c <create_name+0xa0>
c0003d4a:	b3 04                	mov    bl,0x4
c0003d4c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d50:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d53:	85 f6                	test   esi,esi
c0003d55:	74 18                	je     c0003d6f <create_name+0xc3>
c0003d57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d5b:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d60:	66 83 f8 20          	cmp    ax,0x20
c0003d64:	74 06                	je     c0003d6c <create_name+0xc0>
c0003d66:	66 83 f8 2e          	cmp    ax,0x2e
c0003d6a:	75 03                	jne    c0003d6f <create_name+0xc3>
c0003d6c:	4e                   	dec    esi
c0003d6d:	eb e4                	jmp    c0003d53 <create_name+0xa7>
c0003d6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d73:	31 ed                	xor    ebp,ebp
c0003d75:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d7b:	85 f6                	test   esi,esi
c0003d7d:	0f 84 55 ff ff ff    	je     c0003cd8 <create_name+0x2c>
c0003d83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d87:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d8a:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d8e:	66 83 f8 20          	cmp    ax,0x20
c0003d92:	75 04                	jne    c0003d98 <create_name+0xec>
c0003d94:	89 d5                	mov    ebp,edx
c0003d96:	eb eb                	jmp    c0003d83 <create_name+0xd7>
c0003d98:	85 ed                	test   ebp,ebp
c0003d9a:	75 06                	jne    c0003da2 <create_name+0xf6>
c0003d9c:	66 83 f8 2e          	cmp    ax,0x2e
c0003da0:	75 08                	jne    c0003daa <create_name+0xfe>
c0003da2:	83 cb 03             	or     ebx,0x3
c0003da5:	eb 03                	jmp    c0003daa <create_name+0xfe>
c0003da7:	4e                   	dec    esi
c0003da8:	74 0c                	je     c0003db6 <create_name+0x10a>
c0003daa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dae:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003db4:	75 f1                	jne    c0003da7 <create_name+0xfb>
c0003db6:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dbb:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003dbe:	ba 20 00 00 00       	mov    edx,0x20
c0003dc3:	e8 35 df ff ff       	call   c0001cfd <mem_set>
c0003dc8:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dd0:	31 c9                	xor    ecx,ecx
c0003dd2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dd7:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dda:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003de2:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003de6:	66 85 ed             	test   bp,bp
c0003de9:	0f 84 30 01 00 00    	je     c0003f1f <create_name+0x273>
c0003def:	66 83 fd 20          	cmp    bp,0x20
c0003df3:	74 10                	je     c0003e05 <create_name+0x159>
c0003df5:	66 83 fd 2e          	cmp    bp,0x2e
c0003df9:	75 13                	jne    c0003e0e <create_name+0x162>
c0003dfb:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dff:	0f 84 6b 01 00 00    	je     c0003f70 <create_name+0x2c4>
c0003e05:	83 cb 03             	or     ebx,0x3
c0003e08:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e0c:	eb c9                	jmp    c0003dd7 <create_name+0x12b>
c0003e0e:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e12:	73 0b                	jae    c0003e1f <create_name+0x173>
c0003e14:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e18:	75 47                	jne    c0003e61 <create_name+0x1b5>
c0003e1a:	e9 51 01 00 00       	jmp    c0003f70 <create_name+0x2c4>
c0003e1f:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e24:	75 10                	jne    c0003e36 <create_name+0x18a>
c0003e26:	83 cb 03             	or     ebx,0x3
c0003e29:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e31:	e9 e9 00 00 00       	jmp    c0003f1f <create_name+0x273>
c0003e36:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3a:	74 0d                	je     c0003e49 <create_name+0x19d>
c0003e3c:	83 cb 03             	or     ebx,0x3
c0003e3f:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e43:	0f 87 d6 00 00 00    	ja     c0003f1f <create_name+0x273>
c0003e49:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e4e:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e52:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e5a:	b9 08 00 00 00       	mov    ecx,0x8
c0003e5f:	eb a7                	jmp    c0003e08 <create_name+0x15c>
c0003e61:	66 83 fd 7f          	cmp    bp,0x7f
c0003e65:	76 68                	jbe    c0003ecf <create_name+0x223>
c0003e67:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e6b:	88 da                	mov    dl,bl
c0003e6d:	83 ca 02             	or     edx,0x2
c0003e70:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e74:	50                   	push   eax
c0003e75:	50                   	push   eax
c0003e76:	68 b5 01 00 00       	push   0x1b5
c0003e7b:	55                   	push   ebp
c0003e7c:	e8 48 46 00 00       	call   c00084c9 <ff_uni2oem>
c0003e81:	83 c4 10             	add    esp,0x10
c0003e84:	89 c5                	mov    ebp,eax
c0003e86:	a8 80                	test   al,0x80
c0003e88:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e90:	74 0c                	je     c0003e9e <create_name+0x1f2>
c0003e92:	83 e5 7f             	and    ebp,0x7f
c0003e95:	0f b6 ad 20 95 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6ae0]
c0003e9c:	eb 2a                	jmp    c0003ec8 <create_name+0x21c>
c0003e9e:	66 3d ff 00          	cmp    ax,0xff
c0003ea2:	76 24                	jbe    c0003ec8 <create_name+0x21c>
c0003ea4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea8:	48                   	dec    eax
c0003ea9:	39 c8                	cmp    eax,ecx
c0003eab:	77 0c                	ja     c0003eb9 <create_name+0x20d>
c0003ead:	83 cb 03             	or     ebx,0x3
c0003eb0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eb4:	e9 4f ff ff ff       	jmp    c0003e08 <create_name+0x15c>
c0003eb9:	89 e8                	mov    eax,ebp
c0003ebb:	88 d3                	mov    bl,dl
c0003ebd:	66 c1 e8 08          	shr    ax,0x8
c0003ec1:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ec5:	41                   	inc    ecx
c0003ec6:	eb 4b                	jmp    c0003f13 <create_name+0x267>
c0003ec8:	88 d3                	mov    bl,dl
c0003eca:	66 85 ed             	test   bp,bp
c0003ecd:	74 19                	je     c0003ee8 <create_name+0x23c>
c0003ecf:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ed3:	0f b7 d5             	movzx  edx,bp
c0003ed6:	b8 db 95 02 c0       	mov    eax,0xc00295db
c0003edb:	e8 4b de ff ff       	call   c0001d2b <chk_chr>
c0003ee0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ee4:	85 c0                	test   eax,eax
c0003ee6:	74 0a                	je     c0003ef2 <create_name+0x246>
c0003ee8:	83 cb 03             	or     ebx,0x3
c0003eeb:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ef0:	eb 21                	jmp    c0003f13 <create_name+0x267>
c0003ef2:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003ef5:	66 83 f8 19          	cmp    ax,0x19
c0003ef9:	77 07                	ja     c0003f02 <create_name+0x256>
c0003efb:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003f00:	eb 11                	jmp    c0003f13 <create_name+0x267>
c0003f02:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003f05:	66 83 f8 19          	cmp    ax,0x19
c0003f09:	77 08                	ja     c0003f13 <create_name+0x267>
c0003f0b:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f10:	83 ed 20             	sub    ebp,0x20
c0003f13:	89 e8                	mov    eax,ebp
c0003f15:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f19:	41                   	inc    ecx
c0003f1a:	e9 e9 fe ff ff       	jmp    c0003e08 <create_name+0x15c>
c0003f1f:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f23:	75 04                	jne    c0003f29 <create_name+0x27d>
c0003f25:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f29:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f2e:	75 05                	jne    c0003f35 <create_name+0x289>
c0003f30:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f35:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f39:	83 e0 0c             	and    eax,0xc
c0003f3c:	3c 0c                	cmp    al,0xc
c0003f3e:	74 0b                	je     c0003f4b <create_name+0x29f>
c0003f40:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f44:	83 e0 03             	and    eax,0x3
c0003f47:	3c 03                	cmp    al,0x3
c0003f49:	75 05                	jne    c0003f50 <create_name+0x2a4>
c0003f4b:	83 cb 02             	or     ebx,0x2
c0003f4e:	eb 19                	jmp    c0003f69 <create_name+0x2bd>
c0003f50:	f6 c3 02             	test   bl,0x2
c0003f53:	75 14                	jne    c0003f69 <create_name+0x2bd>
c0003f55:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f5a:	74 03                	je     c0003f5f <create_name+0x2b3>
c0003f5c:	83 cb 10             	or     ebx,0x10
c0003f5f:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f64:	74 03                	je     c0003f69 <create_name+0x2bd>
c0003f66:	83 cb 08             	or     ebx,0x8
c0003f69:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f6c:	31 c0                	xor    eax,eax
c0003f6e:	eb 10                	jmp    c0003f80 <create_name+0x2d4>
c0003f70:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f75:	0f 85 ce fe ff ff    	jne    c0003e49 <create_name+0x19d>
c0003f7b:	e9 a6 fe ff ff       	jmp    c0003e26 <create_name+0x17a>
c0003f80:	83 c4 3c             	add    esp,0x3c
c0003f83:	5b                   	pop    ebx
c0003f84:	5e                   	pop    esi
c0003f85:	5f                   	pop    edi
c0003f86:	5d                   	pop    ebp
c0003f87:	c3                   	ret    

c0003f88 <xname_sum>:
c0003f88:	56                   	push   esi
c0003f89:	53                   	push   ebx
c0003f8a:	89 c6                	mov    esi,eax
c0003f8c:	51                   	push   ecx
c0003f8d:	31 db                	xor    ebx,ebx
c0003f8f:	83 c6 02             	add    esi,0x2
c0003f92:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f96:	66 85 c0             	test   ax,ax
c0003f99:	74 1f                	je     c0003fba <xname_sum+0x32>
c0003f9b:	83 ec 0c             	sub    esp,0xc
c0003f9e:	66 d1 cb             	ror    bx,1
c0003fa1:	50                   	push   eax
c0003fa2:	e8 1e 46 00 00       	call   c00085c5 <ff_wtoupper>
c0003fa7:	83 c4 10             	add    esp,0x10
c0003faa:	0f b6 d0             	movzx  edx,al
c0003fad:	66 c1 e8 08          	shr    ax,0x8
c0003fb1:	01 d3                	add    ebx,edx
c0003fb3:	66 d1 cb             	ror    bx,1
c0003fb6:	01 c3                	add    ebx,eax
c0003fb8:	eb d5                	jmp    c0003f8f <xname_sum+0x7>
c0003fba:	89 d8                	mov    eax,ebx
c0003fbc:	5a                   	pop    edx
c0003fbd:	5b                   	pop    ebx
c0003fbe:	5e                   	pop    esi
c0003fbf:	c3                   	ret    

c0003fc0 <create_xdir>:
c0003fc0:	55                   	push   ebp
c0003fc1:	b9 40 00 00 00       	mov    ecx,0x40
c0003fc6:	57                   	push   edi
c0003fc7:	bd 01 00 00 00       	mov    ebp,0x1
c0003fcc:	56                   	push   esi
c0003fcd:	31 ff                	xor    edi,edi
c0003fcf:	53                   	push   ebx
c0003fd0:	be 40 00 00 00       	mov    esi,0x40
c0003fd5:	89 c3                	mov    ebx,eax
c0003fd7:	83 ec 1c             	sub    esp,0x1c
c0003fda:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fde:	31 d2                	xor    edx,edx
c0003fe0:	e8 18 dd ff ff       	call   c0001cfd <mem_set>
c0003fe5:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe8:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fec:	31 c9                	xor    ecx,ecx
c0003fee:	8d 46 01             	lea    eax,[esi+0x1]
c0003ff1:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003ff5:	83 c6 02             	add    esi,0x2
c0003ff8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ffc:	66 85 ed             	test   bp,bp
c0003fff:	74 12                	je     c0004013 <create_xdir+0x53>
c0004001:	0f b6 c1             	movzx  eax,cl
c0004004:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004008:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c000400c:	66 83 fd 01          	cmp    bp,0x1
c0004010:	80 d9 ff             	sbb    cl,0xff
c0004013:	8d 04 33             	lea    eax,[ebx+esi*1]
c0004016:	0f b7 d5             	movzx  edx,bp
c0004019:	83 c6 02             	add    esi,0x2
c000401c:	e8 ba dc ff ff       	call   c0001cdb <st_word>
c0004021:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0004027:	75 d3                	jne    c0003ffc <create_xdir+0x3c>
c0004029:	8d 47 01             	lea    eax,[edi+0x1]
c000402c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004030:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0004034:	0f b6 c1             	movzx  eax,cl
c0004037:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c000403c:	74 07                	je     c0004045 <create_xdir+0x85>
c000403e:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004043:	eb a9                	jmp    c0003fee <create_xdir+0x2e>
c0004045:	8d 47 02             	lea    eax,[edi+0x2]
c0004048:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c000404b:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000404e:	89 d0                	mov    eax,edx
c0004050:	e8 33 ff ff ff       	call   c0003f88 <xname_sum>
c0004055:	83 c4 1c             	add    esp,0x1c
c0004058:	0f b7 d0             	movzx  edx,ax
c000405b:	8d 43 24             	lea    eax,[ebx+0x24]
c000405e:	5b                   	pop    ebx
c000405f:	5e                   	pop    esi
c0004060:	5f                   	pop    edi
c0004061:	5d                   	pop    ebp
c0004062:	e9 74 dc ff ff       	jmp    c0001cdb <st_word>

c0004067 <cmp_lfn>:
c0004067:	55                   	push   ebp
c0004068:	57                   	push   edi
c0004069:	89 d7                	mov    edi,edx
c000406b:	56                   	push   esi
c000406c:	53                   	push   ebx
c000406d:	83 ec 1c             	sub    esp,0x1c
c0004070:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004074:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004077:	e8 ed db ff ff       	call   c0001c69 <ld_word>
c000407c:	66 85 c0             	test   ax,ax
c000407f:	74 07                	je     c0004088 <cmp_lfn+0x21>
c0004081:	31 c0                	xor    eax,eax
c0004083:	e9 9a 00 00 00       	jmp    c0004122 <cmp_lfn+0xbb>
c0004088:	8a 1f                	mov    bl,BYTE PTR [edi]
c000408a:	bd 01 00 00 00       	mov    ebp,0x1
c000408f:	83 e3 3f             	and    ebx,0x3f
c0004092:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000409a:	4b                   	dec    ebx
c000409b:	6b db 0d             	imul   ebx,ebx,0xd
c000409e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00040a2:	0f b6 80 a0 95 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6a60]
c00040a9:	01 f8                	add    eax,edi
c00040ab:	e8 b9 db ff ff       	call   c0001c69 <ld_word>
c00040b0:	66 85 ed             	test   bp,bp
c00040b3:	89 c6                	mov    esi,eax
c00040b5:	74 3c                	je     c00040f3 <cmp_lfn+0x8c>
c00040b7:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040bd:	77 c2                	ja     c0004081 <cmp_lfn+0x1a>
c00040bf:	83 ec 0c             	sub    esp,0xc
c00040c2:	0f b7 c0             	movzx  eax,ax
c00040c5:	50                   	push   eax
c00040c6:	e8 fa 44 00 00       	call   c00085c5 <ff_wtoupper>
c00040cb:	89 c5                	mov    ebp,eax
c00040cd:	8d 43 01             	lea    eax,[ebx+0x1]
c00040d0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d8:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00040df:	e8 e1 44 00 00       	call   c00085c5 <ff_wtoupper>
c00040e4:	83 c4 10             	add    esp,0x10
c00040e7:	39 c5                	cmp    ebp,eax
c00040e9:	75 96                	jne    c0004081 <cmp_lfn+0x1a>
c00040eb:	89 f5                	mov    ebp,esi
c00040ed:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040f1:	eb 04                	jmp    c00040f7 <cmp_lfn+0x90>
c00040f3:	66 46                	inc    si
c00040f5:	75 8a                	jne    c0004081 <cmp_lfn+0x1a>
c00040f7:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040fb:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0004100:	75 9c                	jne    c000409e <cmp_lfn+0x37>
c0004102:	f6 07 40             	test   BYTE PTR [edi],0x40
c0004105:	74 16                	je     c000411d <cmp_lfn+0xb6>
c0004107:	66 85 ed             	test   bp,bp
c000410a:	74 11                	je     c000411d <cmp_lfn+0xb6>
c000410c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004110:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004115:	0f 94 c0             	sete   al
c0004118:	0f b6 c0             	movzx  eax,al
c000411b:	eb 05                	jmp    c0004122 <cmp_lfn+0xbb>
c000411d:	b8 01 00 00 00       	mov    eax,0x1
c0004122:	83 c4 1c             	add    esp,0x1c
c0004125:	5b                   	pop    ebx
c0004126:	5e                   	pop    esi
c0004127:	5f                   	pop    edi
c0004128:	5d                   	pop    ebp
c0004129:	c3                   	ret    

c000412a <dir_find>:
c000412a:	55                   	push   ebp
c000412b:	31 d2                	xor    edx,edx
c000412d:	57                   	push   edi
c000412e:	56                   	push   esi
c000412f:	53                   	push   ebx
c0004130:	89 c3                	mov    ebx,eax
c0004132:	83 ec 1c             	sub    esp,0x1c
c0004135:	8b 30                	mov    esi,DWORD PTR [eax]
c0004137:	e8 89 f0 ff ff       	call   c00031c5 <dir_sdi>
c000413c:	89 04 24             	mov    DWORD PTR [esp],eax
c000413f:	85 c0                	test   eax,eax
c0004141:	0f 85 9e 01 00 00    	jne    c00042e5 <dir_find+0x1bb>
c0004147:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000414a:	0f 85 8d 00 00 00    	jne    c00041dd <dir_find+0xb3>
c0004150:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004153:	e8 30 fe ff ff       	call   c0003f88 <xname_sum>
c0004158:	89 c7                	mov    edi,eax
c000415a:	31 d2                	xor    edx,edx
c000415c:	89 d8                	mov    eax,ebx
c000415e:	e8 72 f8 ff ff       	call   c00039d5 <dir_read>
c0004163:	85 c0                	test   eax,eax
c0004165:	0f 85 5e 01 00 00    	jne    c00042c9 <dir_find+0x19f>
c000416b:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000416e:	8d 41 24             	lea    eax,[ecx+0x24]
c0004171:	e8 f3 da ff ff       	call   c0001c69 <ld_word>
c0004176:	66 39 f8             	cmp    ax,di
c0004179:	75 df                	jne    c000415a <dir_find+0x30>
c000417b:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000417e:	31 ed                	xor    ebp,ebp
c0004180:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004184:	ba 40 00 00 00       	mov    edx,0x40
c0004189:	89 e9                	mov    ecx,ebp
c000418b:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000418f:	0f 84 42 01 00 00    	je     c00042d7 <dir_find+0x1ad>
c0004195:	f6 c2 1f             	test   dl,0x1f
c0004198:	75 03                	jne    c000419d <dir_find+0x73>
c000419a:	83 c2 02             	add    edx,0x2
c000419d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00041a1:	89 d0                	mov    eax,edx
c00041a3:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c00041a6:	e8 be da ff ff       	call   c0001c69 <ld_word>
c00041ab:	83 ec 0c             	sub    esp,0xc
c00041ae:	0f b7 c0             	movzx  eax,ax
c00041b1:	50                   	push   eax
c00041b2:	e8 0e 44 00 00       	call   c00085c5 <ff_wtoupper>
c00041b7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041bb:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041be:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00041c5:	e8 fb 43 00 00       	call   c00085c5 <ff_wtoupper>
c00041ca:	83 c4 10             	add    esp,0x10
c00041cd:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041d1:	75 87                	jne    c000415a <dir_find+0x30>
c00041d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041d7:	45                   	inc    ebp
c00041d8:	83 c2 02             	add    edx,0x2
c00041db:	eb ac                	jmp    c0004189 <dir_find+0x5f>
c00041dd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041e4:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e9:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ee:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041f1:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041f4:	89 f0                	mov    eax,esi
c00041f6:	e8 4c e2 ff ff       	call   c0002447 <move_window>
c00041fb:	85 c0                	test   eax,eax
c00041fd:	0f 85 c6 00 00 00    	jne    c00042c9 <dir_find+0x19f>
c0004203:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0004206:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004209:	84 c9                	test   cl,cl
c000420b:	0f 84 bd 00 00 00    	je     c00042ce <dir_find+0x1a4>
c0004211:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004214:	88 d0                	mov    al,dl
c0004216:	83 e0 3f             	and    eax,0x3f
c0004219:	80 f9 e5             	cmp    cl,0xe5
c000421c:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000421f:	0f 84 87 00 00 00    	je     c00042ac <dir_find+0x182>
c0004225:	80 e2 08             	and    dl,0x8
c0004228:	74 06                	je     c0004230 <dir_find+0x106>
c000422a:	3c 0f                	cmp    al,0xf
c000422c:	75 7e                	jne    c00042ac <dir_find+0x182>
c000422e:	eb 04                	jmp    c0004234 <dir_find+0x10a>
c0004230:	3c 0f                	cmp    al,0xf
c0004232:	75 4c                	jne    c0004280 <dir_find+0x156>
c0004234:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004238:	75 7e                	jne    c00042b8 <dir_find+0x18e>
c000423a:	f6 c1 40             	test   cl,0x40
c000423d:	74 12                	je     c0004251 <dir_find+0x127>
c000423f:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004242:	83 e1 bf             	and    ecx,0xffffffbf
c0004245:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004249:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000424c:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000424f:	eb 06                	jmp    c0004257 <dir_find+0x12d>
c0004251:	89 f8                	mov    eax,edi
c0004253:	38 c8                	cmp    al,cl
c0004255:	75 5c                	jne    c00042b3 <dir_find+0x189>
c0004257:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000425b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004260:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004263:	75 53                	jne    c00042b8 <dir_find+0x18e>
c0004265:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004269:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000426c:	89 ea                	mov    edx,ebp
c000426e:	e8 f4 fd ff ff       	call   c0004067 <cmp_lfn>
c0004273:	85 c0                	test   eax,eax
c0004275:	74 41                	je     c00042b8 <dir_find+0x18e>
c0004277:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000427b:	8d 79 ff             	lea    edi,[ecx-0x1]
c000427e:	eb 38                	jmp    c00042b8 <dir_find+0x18e>
c0004280:	89 f8                	mov    eax,edi
c0004282:	84 c0                	test   al,al
c0004284:	75 0d                	jne    c0004293 <dir_find+0x169>
c0004286:	89 e8                	mov    eax,ebp
c0004288:	e8 98 de ff ff       	call   c0002125 <sum_sfn>
c000428d:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004291:	74 52                	je     c00042e5 <dir_find+0x1bb>
c0004293:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004297:	75 13                	jne    c00042ac <dir_find+0x182>
c0004299:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000429c:	b9 0b 00 00 00       	mov    ecx,0xb
c00042a1:	89 e8                	mov    eax,ebp
c00042a3:	e8 60 da ff ff       	call   c0001d08 <mem_cmp>
c00042a8:	85 c0                	test   eax,eax
c00042aa:	74 39                	je     c00042e5 <dir_find+0x1bb>
c00042ac:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042b3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b8:	31 d2                	xor    edx,edx
c00042ba:	89 d8                	mov    eax,ebx
c00042bc:	e8 5c f4 ff ff       	call   c000371d <dir_next>
c00042c1:	85 c0                	test   eax,eax
c00042c3:	0f 84 25 ff ff ff    	je     c00041ee <dir_find+0xc4>
c00042c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00042cc:	eb 17                	jmp    c00042e5 <dir_find+0x1bb>
c00042ce:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042d5:	eb 0e                	jmp    c00042e5 <dir_find+0x1bb>
c00042d7:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042da:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042df:	0f 85 75 fe ff ff    	jne    c000415a <dir_find+0x30>
c00042e5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e8:	83 c4 1c             	add    esp,0x1c
c00042eb:	5b                   	pop    ebx
c00042ec:	5e                   	pop    esi
c00042ed:	5f                   	pop    edi
c00042ee:	5d                   	pop    ebp
c00042ef:	c3                   	ret    

c00042f0 <dir_register>:
c00042f0:	55                   	push   ebp
c00042f1:	57                   	push   edi
c00042f2:	56                   	push   esi
c00042f3:	be 06 00 00 00       	mov    esi,0x6
c00042f8:	53                   	push   ebx
c00042f9:	83 ec 6c             	sub    esp,0x6c
c00042fc:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004300:	0f 85 62 02 00 00    	jne    c0004568 <dir_register+0x278>
c0004306:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004308:	31 ff                	xor    edi,edi
c000430a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000430d:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004312:	74 03                	je     c0004317 <dir_register+0x27>
c0004314:	47                   	inc    edi
c0004315:	eb f6                	jmp    c000430d <dir_register+0x1d>
c0004317:	89 c3                	mov    ebx,eax
c0004319:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000431d:	0f 85 e1 00 00 00    	jne    c0004404 <dir_register+0x114>
c0004323:	83 c7 0e             	add    edi,0xe
c0004326:	b9 0f 00 00 00       	mov    ecx,0xf
c000432b:	89 f8                	mov    eax,edi
c000432d:	31 d2                	xor    edx,edx
c000432f:	f7 f1                	div    ecx
c0004331:	8d 50 02             	lea    edx,[eax+0x2]
c0004334:	89 c7                	mov    edi,eax
c0004336:	89 d8                	mov    eax,ebx
c0004338:	e8 12 f8 ff ff       	call   c0003b4f <dir_alloc>
c000433d:	89 c6                	mov    esi,eax
c000433f:	85 c0                	test   eax,eax
c0004341:	0f 85 21 02 00 00    	jne    c0004568 <dir_register+0x278>
c0004347:	81 c7 01 00 00 08    	add    edi,0x8000001
c000434d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004350:	c1 e7 05             	shl    edi,0x5
c0004353:	29 f8                	sub    eax,edi
c0004355:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004358:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000435b:	a8 04                	test   al,0x4
c000435d:	0f 84 91 00 00 00    	je     c00043f4 <dir_register+0x104>
c0004363:	83 e0 fb             	and    eax,0xfffffffb
c0004366:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004369:	89 d8                	mov    eax,ebx
c000436b:	e8 25 ec ff ff       	call   c0002f95 <fill_first_frag>
c0004370:	85 c0                	test   eax,eax
c0004372:	0f 85 ee 01 00 00    	jne    c0004566 <dir_register+0x276>
c0004378:	83 c9 ff             	or     ecx,0xffffffff
c000437b:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000437e:	89 d8                	mov    eax,ebx
c0004380:	e8 db eb ff ff       	call   c0002f60 <fill_last_frag>
c0004385:	85 c0                	test   eax,eax
c0004387:	0f 85 d9 01 00 00    	jne    c0004566 <dir_register+0x276>
c000438d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004391:	74 61                	je     c00043f4 <dir_register+0x104>
c0004393:	89 da                	mov    edx,ebx
c0004395:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004399:	e8 ea f5 ff ff       	call   c0003988 <load_obj_xdir>
c000439e:	85 c0                	test   eax,eax
c00043a0:	0f 85 c0 01 00 00    	jne    c0004566 <dir_register+0x276>
c00043a6:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043aa:	31 c9                	xor    ecx,ecx
c00043ac:	c1 e2 09             	shl    edx,0x9
c00043af:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043b2:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043b5:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b8:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043bb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043be:	83 c0 38             	add    eax,0x38
c00043c1:	e8 1c d9 ff ff       	call   c0001ce2 <st_qword>
c00043c6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043cc:	83 c0 28             	add    eax,0x28
c00043cf:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043d2:	e8 0b d9 ff ff       	call   c0001ce2 <st_qword>
c00043d7:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043da:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043dd:	83 c8 01             	or     eax,0x1
c00043e0:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043e3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043e7:	e8 db f7 ff ff       	call   c0003bc7 <store_xdir>
c00043ec:	85 c0                	test   eax,eax
c00043ee:	0f 85 72 01 00 00    	jne    c0004566 <dir_register+0x276>
c00043f4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043f7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043fa:	e8 c1 fb ff ff       	call   c0003fc0 <create_xdir>
c00043ff:	e9 64 01 00 00       	jmp    c0004568 <dir_register+0x278>
c0004404:	8d 40 3c             	lea    eax,[eax+0x3c]
c0004407:	b9 0c 00 00 00       	mov    ecx,0xc
c000440c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004410:	89 c2                	mov    edx,eax
c0004412:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004416:	e8 cd d8 ff ff       	call   c0001ce8 <mem_cpy>
c000441b:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004420:	74 58                	je     c000447a <dir_register+0x18a>
c0004422:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004426:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000442e:	83 ec 0c             	sub    esp,0xc
c0004431:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004434:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004438:	8d 54 24 24          	lea    edx,[esp+0x24]
c000443c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004440:	e8 24 dc ff ff       	call   c0002069 <gen_numname>
c0004445:	89 d8                	mov    eax,ebx
c0004447:	e8 de fc ff ff       	call   c000412a <dir_find>
c000444c:	83 c4 10             	add    esp,0x10
c000444f:	89 c6                	mov    esi,eax
c0004451:	85 c0                	test   eax,eax
c0004453:	75 15                	jne    c000446a <dir_register+0x17a>
c0004455:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004459:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000445e:	75 ce                	jne    c000442e <dir_register+0x13e>
c0004460:	be 07 00 00 00       	mov    esi,0x7
c0004465:	e9 fe 00 00 00       	jmp    c0004568 <dir_register+0x278>
c000446a:	83 f8 04             	cmp    eax,0x4
c000446d:	0f 85 f5 00 00 00    	jne    c0004568 <dir_register+0x278>
c0004473:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004477:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000447a:	b9 01 00 00 00       	mov    ecx,0x1
c000447f:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004484:	74 0f                	je     c0004495 <dir_register+0x1a5>
c0004486:	b9 0d 00 00 00       	mov    ecx,0xd
c000448b:	8d 47 0c             	lea    eax,[edi+0xc]
c000448e:	31 d2                	xor    edx,edx
c0004490:	f7 f1                	div    ecx
c0004492:	8d 48 01             	lea    ecx,[eax+0x1]
c0004495:	89 ca                	mov    edx,ecx
c0004497:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000449b:	89 d8                	mov    eax,ebx
c000449d:	e8 ad f6 ff ff       	call   c0003b4f <dir_alloc>
c00044a2:	89 c6                	mov    esi,eax
c00044a4:	85 c0                	test   eax,eax
c00044a6:	0f 85 bc 00 00 00    	jne    c0004568 <dir_register+0x278>
c00044ac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044b0:	49                   	dec    ecx
c00044b1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044b5:	74 6a                	je     c0004521 <dir_register+0x231>
c00044b7:	89 c8                	mov    eax,ecx
c00044b9:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044bc:	c1 e0 05             	shl    eax,0x5
c00044bf:	29 c2                	sub    edx,eax
c00044c1:	89 d8                	mov    eax,ebx
c00044c3:	e8 fd ec ff ff       	call   c00031c5 <dir_sdi>
c00044c8:	89 c6                	mov    esi,eax
c00044ca:	85 c0                	test   eax,eax
c00044cc:	0f 85 96 00 00 00    	jne    c0004568 <dir_register+0x278>
c00044d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044d6:	e8 4a dc ff ff       	call   c0002125 <sum_sfn>
c00044db:	0f b6 f8             	movzx  edi,al
c00044de:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e1:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e4:	89 e8                	mov    eax,ebp
c00044e6:	e8 5c df ff ff       	call   c0002447 <move_window>
c00044eb:	89 c6                	mov    esi,eax
c00044ed:	85 c0                	test   eax,eax
c00044ef:	75 77                	jne    c0004568 <dir_register+0x278>
c00044f1:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044f6:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f9:	83 ec 0c             	sub    esp,0xc
c00044fc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044ff:	57                   	push   edi
c0004500:	e8 e0 da ff ff       	call   c0001fe5 <put_lfn>
c0004505:	31 d2                	xor    edx,edx
c0004507:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000450b:	89 d8                	mov    eax,ebx
c000450d:	e8 0b f2 ff ff       	call   c000371d <dir_next>
c0004512:	83 c4 10             	add    esp,0x10
c0004515:	89 c6                	mov    esi,eax
c0004517:	85 c0                	test   eax,eax
c0004519:	75 4d                	jne    c0004568 <dir_register+0x278>
c000451b:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c000451f:	75 bd                	jne    c00044de <dir_register+0x1ee>
c0004521:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004524:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004527:	89 e8                	mov    eax,ebp
c0004529:	e8 19 df ff ff       	call   c0002447 <move_window>
c000452e:	89 c6                	mov    esi,eax
c0004530:	85 c0                	test   eax,eax
c0004532:	75 34                	jne    c0004568 <dir_register+0x278>
c0004534:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004537:	b9 20 00 00 00       	mov    ecx,0x20
c000453c:	31 d2                	xor    edx,edx
c000453e:	e8 ba d7 ff ff       	call   c0001cfd <mem_set>
c0004543:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004546:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000454a:	b9 0b 00 00 00       	mov    ecx,0xb
c000454f:	e8 94 d7 ff ff       	call   c0001ce8 <mem_cpy>
c0004554:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004557:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000455a:	83 e0 18             	and    eax,0x18
c000455d:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004560:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004564:	eb 02                	jmp    c0004568 <dir_register+0x278>
c0004566:	89 c6                	mov    esi,eax
c0004568:	83 c4 6c             	add    esp,0x6c
c000456b:	89 f0                	mov    eax,esi
c000456d:	5b                   	pop    ebx
c000456e:	5e                   	pop    esi
c000456f:	5f                   	pop    edi
c0004570:	5d                   	pop    ebp
c0004571:	c3                   	ret    

c0004572 <sync_fs>:
c0004572:	56                   	push   esi
c0004573:	53                   	push   ebx
c0004574:	53                   	push   ebx
c0004575:	89 c3                	mov    ebx,eax
c0004577:	e8 37 de ff ff       	call   c00023b3 <sync_window>
c000457c:	85 c0                	test   eax,eax
c000457e:	0f 85 b1 00 00 00    	jne    c0004635 <sync_fs+0xc3>
c0004584:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004587:	0f 85 8e 00 00 00    	jne    c000461b <sync_fs+0xa9>
c000458d:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004591:	0f 85 84 00 00 00    	jne    c000461b <sync_fs+0xa9>
c0004597:	b9 00 02 00 00       	mov    ecx,0x200
c000459c:	8d 73 54             	lea    esi,[ebx+0x54]
c000459f:	31 d2                	xor    edx,edx
c00045a1:	89 f0                	mov    eax,esi
c00045a3:	e8 55 d7 ff ff       	call   c0001cfd <mem_set>
c00045a8:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045ae:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045b3:	e8 23 d7 ff ff       	call   c0001cdb <st_word>
c00045b8:	ba 52 52 61 41       	mov    edx,0x41615252
c00045bd:	89 f0                	mov    eax,esi
c00045bf:	e8 1b d7 ff ff       	call   c0001cdf <st_dword>
c00045c4:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045ca:	ba 72 72 41 61       	mov    edx,0x61417272
c00045cf:	e8 0b d7 ff ff       	call   c0001cdf <st_dword>
c00045d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045d7:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045dd:	e8 fd d6 ff ff       	call   c0001cdf <st_dword>
c00045e2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045e5:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045eb:	e8 ef d6 ff ff       	call   c0001cdf <st_dword>
c00045f0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045f3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045f6:	83 c0 01             	add    eax,0x1
c00045f9:	83 d2 00             	adc    edx,0x0
c00045fc:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045ff:	83 ec 0c             	sub    esp,0xc
c0004602:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c0004605:	6a 01                	push   0x1
c0004607:	52                   	push   edx
c0004608:	50                   	push   eax
c0004609:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000460d:	56                   	push   esi
c000460e:	50                   	push   eax
c000460f:	e8 20 d6 ff ff       	call   c0001c34 <disk_write>
c0004614:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004618:	83 c4 20             	add    esp,0x20
c000461b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000461f:	51                   	push   ecx
c0004620:	6a 00                	push   0x0
c0004622:	6a 00                	push   0x0
c0004624:	50                   	push   eax
c0004625:	e8 20 d6 ff ff       	call   c0001c4a <disk_ioctl>
c000462a:	83 c4 10             	add    esp,0x10
c000462d:	85 c0                	test   eax,eax
c000462f:	0f 95 c0             	setne  al
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	5a                   	pop    edx
c0004636:	5b                   	pop    ebx
c0004637:	5e                   	pop    esi
c0004638:	c3                   	ret    

c0004639 <create_partition>:
c0004639:	55                   	push   ebp
c000463a:	0f b6 c0             	movzx  eax,al
c000463d:	57                   	push   edi
c000463e:	56                   	push   esi
c000463f:	53                   	push   ebx
c0004640:	83 ec 60             	sub    esp,0x60
c0004643:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004647:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000464b:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000464f:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004653:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004657:	50                   	push   eax
c0004658:	6a 01                	push   0x1
c000465a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000465e:	e8 e7 d5 ff ff       	call   c0001c4a <disk_ioctl>
c0004663:	83 c4 10             	add    esp,0x10
c0004666:	85 c0                	test   eax,eax
c0004668:	74 0a                	je     c0004674 <create_partition+0x3b>
c000466a:	b8 01 00 00 00       	mov    eax,0x1
c000466f:	e9 67 05 00 00       	jmp    c0004bdb <create_partition+0x5a2>
c0004674:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004678:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000467c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004680:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004684:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004689:	0f 86 ed 03 00 00    	jbe    c0004a7c <create_partition+0x443>
c000468f:	83 c0 df             	add    eax,0xffffffdf
c0004692:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000469a:	83 d2 ff             	adc    edx,0xffffffff
c000469d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00046a1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00046a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046ad:	83 c0 bd             	add    eax,0xffffffbd
c00046b0:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046b7:	83 d2 ff             	adc    edx,0xffffffff
c00046ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046c2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046ca:	be 22 00 00 00       	mov    esi,0x22
c00046cf:	31 ff                	xor    edi,edi
c00046d1:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d9:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046e1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e9:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ed:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046f3:	75 0e                	jne    c0004703 <create_partition+0xca>
c00046f5:	b9 00 02 00 00       	mov    ecx,0x200
c00046fa:	31 d2                	xor    edx,edx
c00046fc:	89 d8                	mov    eax,ebx
c00046fe:	e8 fa d5 ff ff       	call   c0001cfd <mem_set>
c0004703:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004707:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000470b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000470f:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004712:	0f 84 23 01 00 00    	je     c000483b <create_partition+0x202>
c0004718:	89 f0                	mov    eax,esi
c000471a:	89 fa                	mov    edx,edi
c000471c:	05 ff 07 00 00       	add    eax,0x7ff
c0004721:	83 d2 00             	adc    edx,0x0
c0004724:	89 c1                	mov    ecx,eax
c0004726:	89 d7                	mov    edi,edx
c0004728:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000472e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004732:	89 ce                	mov    esi,ecx
c0004734:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004738:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000473c:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004740:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004743:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004747:	89 04 24             	mov    DWORD PTR [esp],eax
c000474a:	b8 64 00 00 00       	mov    eax,0x64
c000474f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004752:	b8 00 00 00 00       	mov    eax,0x0
c0004757:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000475b:	72 41                	jb     c000479e <create_partition+0x165>
c000475d:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004761:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004765:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004769:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000476e:	01 c1                	add    ecx,eax
c0004770:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004774:	f7 24 24             	mul    DWORD PTR [esp]
c0004777:	6a 00                	push   0x0
c0004779:	01 ca                	add    edx,ecx
c000477b:	6a 64                	push   0x64
c000477d:	52                   	push   edx
c000477e:	50                   	push   eax
c000477f:	e8 80 23 02 00       	call   c0026b04 <__udivdi3>
c0004784:	83 c4 10             	add    esp,0x10
c0004787:	05 ff 07 00 00       	add    eax,0x7ff
c000478c:	83 d2 00             	adc    edx,0x0
c000478f:	89 c1                	mov    ecx,eax
c0004791:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004795:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000479b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000479e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047a1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00047a5:	01 f0                	add    eax,esi
c00047a7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047ab:	11 fa                	adc    edx,edi
c00047ad:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047b1:	19 d1                	sbb    ecx,edx
c00047b3:	73 2e                	jae    c00047e3 <create_partition+0x1aa>
c00047b5:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b9:	89 f8                	mov    eax,edi
c00047bb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047c2:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047c6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047ce:	73 6b                	jae    c000483b <create_partition+0x202>
c00047d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047d4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d8:	29 f0                	sub    eax,esi
c00047da:	19 fa                	sbb    edx,edi
c00047dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00047df:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047e7:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047ea:	74 4f                	je     c000483b <create_partition+0x202>
c00047ec:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ef:	b9 10 00 00 00       	mov    ecx,0x10
c00047f4:	ba b0 95 02 c0       	mov    edx,0xc00295b0
c00047f9:	e8 ea d4 ff ff       	call   c0001ce8 <mem_cpy>
c00047fe:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c0004802:	b9 10 00 00 00       	mov    ecx,0x10
c0004807:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000480b:	e8 2c db ff ff       	call   c000233c <make_rand>
c0004810:	89 f2                	mov    edx,esi
c0004812:	89 f9                	mov    ecx,edi
c0004814:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004818:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000481c:	e8 c1 d4 ff ff       	call   c0001ce2 <st_qword>
c0004821:	03 34 24             	add    esi,DWORD PTR [esp]
c0004824:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004828:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000482c:	89 f2                	mov    edx,esi
c000482e:	89 f9                	mov    ecx,edi
c0004830:	83 c2 ff             	add    edx,0xffffffff
c0004833:	83 d1 ff             	adc    ecx,0xffffffff
c0004836:	e8 a7 d4 ff ff       	call   c0001ce2 <st_qword>
c000483b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000483f:	83 e8 80             	sub    eax,0xffffff80
c0004842:	89 c5                	mov    ebp,eax
c0004844:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004848:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000484e:	75 6b                	jne    c00048bb <create_partition+0x282>
c0004850:	45                   	inc    ebp
c0004851:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004855:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000485a:	e8 39 da ff ff       	call   c0002298 <crc32>
c000485f:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004865:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004869:	75 e5                	jne    c0004850 <create_partition+0x217>
c000486b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000486f:	31 d2                	xor    edx,edx
c0004871:	83 ec 0c             	sub    esp,0xc
c0004874:	c1 ed 09             	shr    ebp,0x9
c0004877:	6a 01                	push   0x1
c0004879:	8d 45 02             	lea    eax,[ebp+0x2]
c000487c:	52                   	push   edx
c000487d:	50                   	push   eax
c000487e:	53                   	push   ebx
c000487f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004883:	e8 ac d3 ff ff       	call   c0001c34 <disk_write>
c0004888:	83 c4 20             	add    esp,0x20
c000488b:	85 c0                	test   eax,eax
c000488d:	0f 85 d7 fd ff ff    	jne    c000466a <create_partition+0x31>
c0004893:	83 ec 0c             	sub    esp,0xc
c0004896:	31 d2                	xor    edx,edx
c0004898:	6a 01                	push   0x1
c000489a:	89 e8                	mov    eax,ebp
c000489c:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00048a0:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00048a4:	52                   	push   edx
c00048a5:	50                   	push   eax
c00048a6:	53                   	push   ebx
c00048a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048ab:	e8 84 d3 ff ff       	call   c0001c34 <disk_write>
c00048b0:	83 c4 20             	add    esp,0x20
c00048b3:	85 c0                	test   eax,eax
c00048b5:	0f 85 af fd ff ff    	jne    c000466a <create_partition+0x31>
c00048bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048c3:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c8:	74 0d                	je     c00048d7 <create_partition+0x29e>
c00048ca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048ce:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048d2:	e9 12 fe ff ff       	jmp    c00046e9 <create_partition+0xb0>
c00048d7:	31 d2                	xor    edx,edx
c00048d9:	b9 00 02 00 00       	mov    ecx,0x200
c00048de:	89 d8                	mov    eax,ebx
c00048e0:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048e3:	e8 15 d4 ff ff       	call   c0001cfd <mem_set>
c00048e8:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048eb:	b9 10 00 00 00       	mov    ecx,0x10
c00048f0:	ba a0 94 02 c0       	mov    edx,0xc00294a0
c00048f5:	89 d8                	mov    eax,ebx
c00048f7:	e8 ec d3 ff ff       	call   c0001ce8 <mem_cpy>
c00048fc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004900:	8d 43 58             	lea    eax,[ebx+0x58]
c0004903:	f7 d2                	not    edx
c0004905:	e8 d5 d3 ff ff       	call   c0001cdf <st_dword>
c000490a:	8d 43 18             	lea    eax,[ebx+0x18]
c000490d:	31 c9                	xor    ecx,ecx
c000490f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004912:	ba 01 00 00 00       	mov    edx,0x1
c0004917:	e8 c6 d3 ff ff       	call   c0001ce2 <st_qword>
c000491c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004920:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004924:	83 c2 ff             	add    edx,0xffffffff
c0004927:	89 e8                	mov    eax,ebp
c0004929:	83 d1 ff             	adc    ecx,0xffffffff
c000492c:	e8 b1 d3 ff ff       	call   c0001ce2 <st_qword>
c0004931:	31 c9                	xor    ecx,ecx
c0004933:	8d 43 28             	lea    eax,[ebx+0x28]
c0004936:	ba 22 00 00 00       	mov    edx,0x22
c000493b:	e8 a2 d3 ff ff       	call   c0001ce2 <st_qword>
c0004940:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004944:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004948:	83 c2 de             	add    edx,0xffffffde
c000494b:	8d 43 30             	lea    eax,[ebx+0x30]
c000494e:	83 d1 ff             	adc    ecx,0xffffffff
c0004951:	31 f6                	xor    esi,esi
c0004953:	e8 8a d3 ff ff       	call   c0001ce2 <st_qword>
c0004958:	8d 43 54             	lea    eax,[ebx+0x54]
c000495b:	ba 80 00 00 00       	mov    edx,0x80
c0004960:	e8 7a d3 ff ff       	call   c0001cdf <st_dword>
c0004965:	8d 43 50             	lea    eax,[ebx+0x50]
c0004968:	ba 80 00 00 00       	mov    edx,0x80
c000496d:	e8 6d d3 ff ff       	call   c0001cdf <st_dword>
c0004972:	ba 02 00 00 00       	mov    edx,0x2
c0004977:	89 f8                	mov    eax,edi
c0004979:	e8 61 d3 ff ff       	call   c0001cdf <st_dword>
c000497e:	8d 53 38             	lea    edx,[ebx+0x38]
c0004981:	b9 10 00 00 00       	mov    ecx,0x10
c0004986:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000498a:	e8 ad d9 ff ff       	call   c000233c <make_rand>
c000498f:	83 c8 ff             	or     eax,0xffffffff
c0004992:	46                   	inc    esi
c0004993:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004998:	e8 fb d8 ff ff       	call   c0002298 <crc32>
c000499d:	83 fe 5c             	cmp    esi,0x5c
c00049a0:	75 f0                	jne    c0004992 <create_partition+0x359>
c00049a2:	f7 d0                	not    eax
c00049a4:	8d 73 10             	lea    esi,[ebx+0x10]
c00049a7:	89 c2                	mov    edx,eax
c00049a9:	89 f0                	mov    eax,esi
c00049ab:	e8 2f d3 ff ff       	call   c0001cdf <st_dword>
c00049b0:	83 ec 0c             	sub    esp,0xc
c00049b3:	6a 01                	push   0x1
c00049b5:	6a 00                	push   0x0
c00049b7:	6a 01                	push   0x1
c00049b9:	53                   	push   ebx
c00049ba:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049be:	e8 71 d2 ff ff       	call   c0001c34 <disk_write>
c00049c3:	83 c4 20             	add    esp,0x20
c00049c6:	85 c0                	test   eax,eax
c00049c8:	0f 85 9c fc ff ff    	jne    c000466a <create_partition+0x31>
c00049ce:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049d2:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049d6:	83 c2 ff             	add    edx,0xffffffff
c00049d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049dc:	83 d1 ff             	adc    ecx,0xffffffff
c00049df:	e8 fe d2 ff ff       	call   c0001ce2 <st_qword>
c00049e4:	ba 01 00 00 00       	mov    edx,0x1
c00049e9:	31 c9                	xor    ecx,ecx
c00049eb:	89 e8                	mov    eax,ebp
c00049ed:	e8 f0 d2 ff ff       	call   c0001ce2 <st_qword>
c00049f2:	89 f8                	mov    eax,edi
c00049f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049fc:	31 ff                	xor    edi,edi
c00049fe:	e8 df d2 ff ff       	call   c0001ce2 <st_qword>
c0004a03:	89 f0                	mov    eax,esi
c0004a05:	31 d2                	xor    edx,edx
c0004a07:	e8 d3 d2 ff ff       	call   c0001cdf <st_dword>
c0004a0c:	83 c8 ff             	or     eax,0xffffffff
c0004a0f:	47                   	inc    edi
c0004a10:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a15:	e8 7e d8 ff ff       	call   c0002298 <crc32>
c0004a1a:	83 ff 5c             	cmp    edi,0x5c
c0004a1d:	75 f0                	jne    c0004a0f <create_partition+0x3d6>
c0004a1f:	f7 d0                	not    eax
c0004a21:	89 c2                	mov    edx,eax
c0004a23:	89 f0                	mov    eax,esi
c0004a25:	e8 b5 d2 ff ff       	call   c0001cdf <st_dword>
c0004a2a:	83 ec 0c             	sub    esp,0xc
c0004a2d:	6a 01                	push   0x1
c0004a2f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a33:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a37:	83 c0 ff             	add    eax,0xffffffff
c0004a3a:	83 d2 ff             	adc    edx,0xffffffff
c0004a3d:	52                   	push   edx
c0004a3e:	50                   	push   eax
c0004a3f:	53                   	push   ebx
c0004a40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a44:	e8 eb d1 ff ff       	call   c0001c34 <disk_write>
c0004a49:	83 c4 20             	add    esp,0x20
c0004a4c:	85 c0                	test   eax,eax
c0004a4e:	0f 85 16 fc ff ff    	jne    c000466a <create_partition+0x31>
c0004a54:	31 d2                	xor    edx,edx
c0004a56:	89 d8                	mov    eax,ebx
c0004a58:	b9 00 02 00 00       	mov    ecx,0x200
c0004a5d:	e8 9b d2 ff ff       	call   c0001cfd <mem_set>
c0004a62:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a68:	b9 10 00 00 00       	mov    ecx,0x10
c0004a6d:	ba b0 94 02 c0       	mov    edx,0xc00294b0
c0004a72:	e8 71 d2 ff ff       	call   c0001ce8 <mem_cpy>
c0004a77:	e9 21 01 00 00       	jmp    c0004b9d <create_partition+0x564>
c0004a7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a80:	b9 05 00 00 00       	mov    ecx,0x5
c0004a85:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a88:	bf 08 00 00 00       	mov    edi,0x8
c0004a8d:	89 f8                	mov    eax,edi
c0004a8f:	31 d2                	xor    edx,edx
c0004a91:	0f b6 f0             	movzx  esi,al
c0004a94:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a97:	f7 f6                	div    esi
c0004a99:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a9e:	76 0a                	jbe    c0004aaa <create_partition+0x471>
c0004aa0:	d1 e7                	shl    edi,1
c0004aa2:	49                   	dec    ecx
c0004aa3:	75 e8                	jne    c0004a8d <create_partition+0x454>
c0004aa5:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aaa:	b9 00 02 00 00       	mov    ecx,0x200
c0004aaf:	31 d2                	xor    edx,edx
c0004ab1:	89 d8                	mov    eax,ebx
c0004ab3:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab9:	e8 3f d2 ff ff       	call   c0001cfd <mem_set>
c0004abe:	b9 64 00 00 00       	mov    ecx,0x64
c0004ac3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004ac6:	31 d2                	xor    edx,edx
c0004ac8:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ad0:	f7 f1                	div    ecx
c0004ad2:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004ad7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004adb:	89 f8                	mov    eax,edi
c0004add:	0f b6 c0             	movzx  eax,al
c0004ae0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004ae4:	e9 80 00 00 00       	jmp    c0004b69 <create_partition+0x530>
c0004ae9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aec:	29 cf                	sub    edi,ecx
c0004aee:	89 ca                	mov    edx,ecx
c0004af0:	89 f0                	mov    eax,esi
c0004af2:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004af7:	e8 e3 d1 ff ff       	call   c0001cdf <st_dword>
c0004afc:	8d 46 04             	lea    eax,[esi+0x4]
c0004aff:	89 fa                	mov    edx,edi
c0004b01:	83 c6 10             	add    esi,0x10
c0004b04:	e8 d6 d1 ff ff       	call   c0001cdf <st_dword>
c0004b09:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b0d:	31 d2                	xor    edx,edx
c0004b0f:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b12:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b16:	89 c8                	mov    eax,ecx
c0004b18:	01 f9                	add    ecx,edi
c0004b1a:	f7 f5                	div    ebp
c0004b1c:	89 d5                	mov    ebp,edx
c0004b1e:	31 d2                	xor    edx,edx
c0004b20:	45                   	inc    ebp
c0004b21:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b25:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b28:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b2b:	89 c2                	mov    edx,eax
c0004b2d:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b30:	c1 ea 02             	shr    edx,0x2
c0004b33:	83 e2 c0             	and    edx,0xffffffc0
c0004b36:	09 ea                	or     edx,ebp
c0004b38:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b3d:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b40:	31 d2                	xor    edx,edx
c0004b42:	f7 f5                	div    ebp
c0004b44:	89 d7                	mov    edi,edx
c0004b46:	31 d2                	xor    edx,edx
c0004b48:	47                   	inc    edi
c0004b49:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b4d:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b50:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b53:	89 c5                	mov    ebp,eax
c0004b55:	c1 ed 02             	shr    ebp,0x2
c0004b58:	83 e5 c0             	and    ebp,0xffffffc0
c0004b5b:	09 ef                	or     edi,ebp
c0004b5d:	89 fa                	mov    edx,edi
c0004b5f:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b62:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b67:	74 34                	je     c0004b9d <create_partition+0x564>
c0004b69:	85 c9                	test   ecx,ecx
c0004b6b:	74 30                	je     c0004b9d <create_partition+0x564>
c0004b6d:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b70:	76 2b                	jbe    c0004b9d <create_partition+0x564>
c0004b72:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b76:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b7a:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b7d:	83 ff 64             	cmp    edi,0x64
c0004b80:	76 4b                	jbe    c0004bcd <create_partition+0x594>
c0004b82:	89 f8                	mov    eax,edi
c0004b84:	01 c8                	add    eax,ecx
c0004b86:	0f 82 5d ff ff ff    	jb     c0004ae9 <create_partition+0x4b0>
c0004b8c:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b8f:	0f 87 54 ff ff ff    	ja     c0004ae9 <create_partition+0x4b0>
c0004b95:	85 ff                	test   edi,edi
c0004b97:	0f 85 51 ff ff ff    	jne    c0004aee <create_partition+0x4b5>
c0004b9d:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004ba3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba8:	e8 2e d1 ff ff       	call   c0001cdb <st_word>
c0004bad:	83 ec 0c             	sub    esp,0xc
c0004bb0:	6a 01                	push   0x1
c0004bb2:	6a 00                	push   0x0
c0004bb4:	6a 00                	push   0x0
c0004bb6:	53                   	push   ebx
c0004bb7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bbb:	e8 74 d0 ff ff       	call   c0001c34 <disk_write>
c0004bc0:	83 c4 20             	add    esp,0x20
c0004bc3:	85 c0                	test   eax,eax
c0004bc5:	0f 95 c0             	setne  al
c0004bc8:	0f b6 c0             	movzx  eax,al
c0004bcb:	eb 0e                	jmp    c0004bdb <create_partition+0x5a2>
c0004bcd:	74 07                	je     c0004bd6 <create_partition+0x59d>
c0004bcf:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bd4:	eb ac                	jmp    c0004b82 <create_partition+0x549>
c0004bd6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd9:	eb a7                	jmp    c0004b82 <create_partition+0x549>
c0004bdb:	83 c4 5c             	add    esp,0x5c
c0004bde:	5b                   	pop    ebx
c0004bdf:	5e                   	pop    esi
c0004be0:	5f                   	pop    edi
c0004be1:	5d                   	pop    ebp
c0004be2:	c3                   	ret    

c0004be3 <get_fileinfo>:
c0004be3:	55                   	push   ebp
c0004be4:	57                   	push   edi
c0004be5:	56                   	push   esi
c0004be6:	53                   	push   ebx
c0004be7:	83 ec 1c             	sub    esp,0x1c
c0004bea:	8b 30                	mov    esi,DWORD PTR [eax]
c0004bec:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bf0:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bf4:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bf7:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bfa:	0f 84 dc 01 00 00    	je     c0004ddc <get_fileinfo+0x1f9>
c0004c00:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004c03:	75 0f                	jne    c0004c14 <get_fileinfo+0x31>
c0004c05:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c08:	83 c4 1c             	add    esp,0x1c
c0004c0b:	5b                   	pop    ebx
c0004c0c:	5e                   	pop    esi
c0004c0d:	5f                   	pop    edi
c0004c0e:	5d                   	pop    ebp
c0004c0f:	e9 58 d5 ff ff       	jmp    c000216c <get_xfileinfo>
c0004c14:	89 d3                	mov    ebx,edx
c0004c16:	89 c6                	mov    esi,eax
c0004c18:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c1c:	74 6a                	je     c0004c88 <get_fileinfo+0xa5>
c0004c1e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c26:	31 ed                	xor    ebp,ebp
c0004c28:	31 ff                	xor    edi,edi
c0004c2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c2e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c32:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c35:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c39:	66 85 d2             	test   dx,dx
c0004c3c:	74 3e                	je     c0004c7c <get_fileinfo+0x99>
c0004c3e:	66 85 ed             	test   bp,bp
c0004c41:	75 0c                	jne    c0004c4f <get_fileinfo+0x6c>
c0004c43:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c49:	66 3d ff 07          	cmp    ax,0x7ff
c0004c4d:	76 22                	jbe    c0004c71 <get_fileinfo+0x8e>
c0004c4f:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c54:	89 e8                	mov    eax,ebp
c0004c56:	29 f9                	sub    ecx,edi
c0004c58:	c1 e0 10             	shl    eax,0x10
c0004c5b:	09 d0                	or     eax,edx
c0004c5d:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c61:	e8 a3 d1 ff ff       	call   c0001e09 <put_utf>
c0004c66:	84 c0                	test   al,al
c0004c68:	74 10                	je     c0004c7a <get_fileinfo+0x97>
c0004c6a:	0f b6 c0             	movzx  eax,al
c0004c6d:	31 d2                	xor    edx,edx
c0004c6f:	01 c7                	add    edi,eax
c0004c71:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c76:	89 d5                	mov    ebp,edx
c0004c78:	eb b0                	jmp    c0004c2a <get_fileinfo+0x47>
c0004c7a:	31 ff                	xor    edi,edi
c0004c7c:	66 85 ed             	test   bp,bp
c0004c7f:	74 02                	je     c0004c83 <get_fileinfo+0xa0>
c0004c81:	31 ff                	xor    edi,edi
c0004c83:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c88:	31 ff                	xor    edi,edi
c0004c8a:	31 c9                	xor    ecx,ecx
c0004c8c:	83 f9 0a             	cmp    ecx,0xa
c0004c8f:	0f 87 ad 00 00 00    	ja     c0004d42 <get_fileinfo+0x15f>
c0004c95:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c98:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c9b:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c9f:	66 83 fa 20          	cmp    dx,0x20
c0004ca3:	0f 84 92 00 00 00    	je     c0004d3b <get_fileinfo+0x158>
c0004ca9:	66 83 fa 05          	cmp    dx,0x5
c0004cad:	75 05                	jne    c0004cb4 <get_fileinfo+0xd1>
c0004caf:	ba e5 00 00 00       	mov    edx,0xe5
c0004cb4:	83 ff 0b             	cmp    edi,0xb
c0004cb7:	77 0b                	ja     c0004cc4 <get_fileinfo+0xe1>
c0004cb9:	83 fd 09             	cmp    ebp,0x9
c0004cbc:	75 06                	jne    c0004cc4 <get_fileinfo+0xe1>
c0004cbe:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cc3:	47                   	inc    edi
c0004cc4:	0f b7 c2             	movzx  eax,dx
c0004cc7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ccb:	e8 6d d0 ff ff       	call   c0001d3d <dbc_1st>
c0004cd0:	85 c0                	test   eax,eax
c0004cd2:	74 2f                	je     c0004d03 <get_fileinfo+0x120>
c0004cd4:	83 fd 08             	cmp    ebp,0x8
c0004cd7:	74 2a                	je     c0004d03 <get_fileinfo+0x120>
c0004cd9:	83 fd 0b             	cmp    ebp,0xb
c0004cdc:	74 25                	je     c0004d03 <get_fileinfo+0x120>
c0004cde:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ce1:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ce5:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce9:	e8 52 d0 ff ff       	call   c0001d40 <dbc_2nd>
c0004cee:	85 c0                	test   eax,eax
c0004cf0:	74 11                	je     c0004d03 <get_fileinfo+0x120>
c0004cf2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cf6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cfb:	c1 e2 08             	shl    edx,0x8
c0004cfe:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004d01:	09 c2                	or     edx,eax
c0004d03:	0f b7 d2             	movzx  edx,dx
c0004d06:	50                   	push   eax
c0004d07:	50                   	push   eax
c0004d08:	68 b5 01 00 00       	push   0x1b5
c0004d0d:	52                   	push   edx
c0004d0e:	e8 46 38 00 00       	call   c0008559 <ff_oem2uni>
c0004d13:	83 c4 10             	add    esp,0x10
c0004d16:	66 85 c0             	test   ax,ax
c0004d19:	75 04                	jne    c0004d1f <get_fileinfo+0x13c>
c0004d1b:	31 ff                	xor    edi,edi
c0004d1d:	eb 23                	jmp    c0004d42 <get_fileinfo+0x15f>
c0004d1f:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d24:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d28:	29 f9                	sub    ecx,edi
c0004d2a:	0f b7 c0             	movzx  eax,ax
c0004d2d:	e8 d7 d0 ff ff       	call   c0001e09 <put_utf>
c0004d32:	84 c0                	test   al,al
c0004d34:	74 e5                	je     c0004d1b <get_fileinfo+0x138>
c0004d36:	0f b6 c0             	movzx  eax,al
c0004d39:	01 c7                	add    edi,eax
c0004d3b:	89 e9                	mov    ecx,ebp
c0004d3d:	e9 4a ff ff ff       	jmp    c0004c8c <get_fileinfo+0xa9>
c0004d42:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d47:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d4b:	75 54                	jne    c0004da1 <get_fileinfo+0x1be>
c0004d4d:	85 ff                	test   edi,edi
c0004d4f:	75 0b                	jne    c0004d5c <get_fileinfo+0x179>
c0004d51:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d55:	ba 01 00 00 00       	mov    edx,0x1
c0004d5a:	eb 33                	jmp    c0004d8f <get_fileinfo+0x1ac>
c0004d5c:	b1 08                	mov    cl,0x8
c0004d5e:	31 d2                	xor    edx,edx
c0004d60:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d66:	84 c0                	test   al,al
c0004d68:	74 25                	je     c0004d8f <get_fileinfo+0x1ac>
c0004d6a:	66 83 f8 2e          	cmp    ax,0x2e
c0004d6e:	74 16                	je     c0004d86 <get_fileinfo+0x1a3>
c0004d70:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d73:	66 83 ff 19          	cmp    di,0x19
c0004d77:	77 0f                	ja     c0004d88 <get_fileinfo+0x1a5>
c0004d79:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d7c:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d7f:	74 07                	je     c0004d88 <get_fileinfo+0x1a5>
c0004d81:	83 c0 20             	add    eax,0x20
c0004d84:	eb 02                	jmp    c0004d88 <get_fileinfo+0x1a5>
c0004d86:	b1 10                	mov    cl,0x10
c0004d88:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d8c:	42                   	inc    edx
c0004d8d:	eb d1                	jmp    c0004d60 <get_fileinfo+0x17d>
c0004d8f:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d94:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d97:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d9b:	75 04                	jne    c0004da1 <get_fileinfo+0x1be>
c0004d9d:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004da1:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da4:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004da7:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004daa:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dad:	83 c0 1c             	add    eax,0x1c
c0004db0:	e8 c1 ce ff ff       	call   c0001c76 <ld_dword>
c0004db5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004dbc:	89 03                	mov    DWORD PTR [ebx],eax
c0004dbe:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc1:	83 c0 16             	add    eax,0x16
c0004dc4:	e8 a0 ce ff ff       	call   c0001c69 <ld_word>
c0004dc9:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dcd:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dd0:	83 c0 18             	add    eax,0x18
c0004dd3:	e8 91 ce ff ff       	call   c0001c69 <ld_word>
c0004dd8:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004ddc:	83 c4 1c             	add    esp,0x1c
c0004ddf:	5b                   	pop    ebx
c0004de0:	5e                   	pop    esi
c0004de1:	5f                   	pop    edi
c0004de2:	5d                   	pop    ebp
c0004de3:	c3                   	ret    

c0004de4 <ld_clust.isra.0>:
c0004de4:	56                   	push   esi
c0004de5:	89 c6                	mov    esi,eax
c0004de7:	53                   	push   ebx
c0004de8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004deb:	89 d3                	mov    ebx,edx
c0004ded:	e8 77 ce ff ff       	call   c0001c69 <ld_word>
c0004df2:	0f b7 c8             	movzx  ecx,ax
c0004df5:	89 f0                	mov    eax,esi
c0004df7:	3c 03                	cmp    al,0x3
c0004df9:	75 0d                	jne    c0004e08 <ld_clust.isra.0+0x24>
c0004dfb:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dfe:	e8 66 ce ff ff       	call   c0001c69 <ld_word>
c0004e03:	c1 e0 10             	shl    eax,0x10
c0004e06:	09 c1                	or     ecx,eax
c0004e08:	89 c8                	mov    eax,ecx
c0004e0a:	5b                   	pop    ebx
c0004e0b:	5e                   	pop    esi
c0004e0c:	c3                   	ret    

c0004e0d <st_clust.isra.1>:
c0004e0d:	56                   	push   esi
c0004e0e:	89 c6                	mov    esi,eax
c0004e10:	53                   	push   ebx
c0004e11:	89 d3                	mov    ebx,edx
c0004e13:	0f b7 d1             	movzx  edx,cx
c0004e16:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e19:	e8 bd ce ff ff       	call   c0001cdb <st_word>
c0004e1e:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e21:	75 0f                	jne    c0004e32 <st_clust.isra.1+0x25>
c0004e23:	c1 e9 10             	shr    ecx,0x10
c0004e26:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e29:	89 ca                	mov    edx,ecx
c0004e2b:	5b                   	pop    ebx
c0004e2c:	5e                   	pop    esi
c0004e2d:	e9 a9 ce ff ff       	jmp    c0001cdb <st_word>
c0004e32:	5b                   	pop    ebx
c0004e33:	5e                   	pop    esi
c0004e34:	c3                   	ret    

c0004e35 <init_alloc_info.isra.2>:
c0004e35:	56                   	push   esi
c0004e36:	53                   	push   ebx
c0004e37:	89 c6                	mov    esi,eax
c0004e39:	89 d3                	mov    ebx,edx
c0004e3b:	51                   	push   ecx
c0004e3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e3e:	83 c0 34             	add    eax,0x34
c0004e41:	e8 30 ce ff ff       	call   c0001c76 <ld_dword>
c0004e46:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e49:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e4b:	83 c0 38             	add    eax,0x38
c0004e4e:	e8 3b ce ff ff       	call   c0001c8e <ld_qword>
c0004e53:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e56:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e59:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e5b:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e5e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e65:	83 e0 02             	and    eax,0x2
c0004e68:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e6b:	5b                   	pop    ebx
c0004e6c:	5b                   	pop    ebx
c0004e6d:	5e                   	pop    esi
c0004e6e:	c3                   	ret    

c0004e6f <follow_path>:
c0004e6f:	56                   	push   esi
c0004e70:	53                   	push   ebx
c0004e71:	89 c3                	mov    ebx,eax
c0004e73:	83 ec 14             	sub    esp,0x14
c0004e76:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e7a:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e80:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e82:	80 fa 5c             	cmp    dl,0x5c
c0004e85:	75 07                	jne    c0004e8e <follow_path+0x1f>
c0004e87:	40                   	inc    eax
c0004e88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e8c:	eb ee                	jmp    c0004e7c <follow_path+0xd>
c0004e8e:	80 fa 2f             	cmp    dl,0x2f
c0004e91:	74 f4                	je     c0004e87 <follow_path+0x18>
c0004e93:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e9a:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004ea1:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004ea4:	77 52                	ja     c0004ef8 <follow_path+0x89>
c0004ea6:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004eaa:	31 d2                	xor    edx,edx
c0004eac:	89 d8                	mov    eax,ebx
c0004eae:	e8 12 e3 ff ff       	call   c00031c5 <dir_sdi>
c0004eb3:	eb 7c                	jmp    c0004f31 <follow_path+0xc2>
c0004eb5:	89 d8                	mov    eax,ebx
c0004eb7:	e8 6e f2 ff ff       	call   c000412a <dir_find>
c0004ebc:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004ebf:	85 c0                	test   eax,eax
c0004ec1:	75 46                	jne    c0004f09 <follow_path+0x9a>
c0004ec3:	80 e2 04             	and    dl,0x4
c0004ec6:	75 69                	jne    c0004f31 <follow_path+0xc2>
c0004ec8:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ecc:	74 5e                	je     c0004f2c <follow_path+0xbd>
c0004ece:	8a 06                	mov    al,BYTE PTR [esi]
c0004ed0:	3c 04                	cmp    al,0x4
c0004ed2:	75 41                	jne    c0004f15 <follow_path+0xa6>
c0004ed4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ed7:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004edb:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ede:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ee1:	30 c0                	xor    al,al
c0004ee3:	09 d0                	or     eax,edx
c0004ee5:	89 da                	mov    edx,ebx
c0004ee7:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004eea:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eed:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ef0:	8d 46 10             	lea    eax,[esi+0x10]
c0004ef3:	e8 3d ff ff ff       	call   c0004e35 <init_alloc_info.isra.2>
c0004ef8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004efc:	89 d8                	mov    eax,ebx
c0004efe:	e8 a9 ed ff ff       	call   c0003cac <create_name>
c0004f03:	85 c0                	test   eax,eax
c0004f05:	74 ae                	je     c0004eb5 <follow_path+0x46>
c0004f07:	eb 28                	jmp    c0004f31 <follow_path+0xc2>
c0004f09:	83 f8 04             	cmp    eax,0x4
c0004f0c:	75 23                	jne    c0004f31 <follow_path+0xc2>
c0004f0e:	80 e2 04             	and    dl,0x4
c0004f11:	74 19                	je     c0004f2c <follow_path+0xbd>
c0004f13:	eb 1c                	jmp    c0004f31 <follow_path+0xc2>
c0004f15:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f18:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f1e:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f22:	e8 bd fe ff ff       	call   c0004de4 <ld_clust.isra.0>
c0004f27:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f2a:	eb cc                	jmp    c0004ef8 <follow_path+0x89>
c0004f2c:	b8 05 00 00 00       	mov    eax,0x5
c0004f31:	83 c4 14             	add    esp,0x14
c0004f34:	5b                   	pop    ebx
c0004f35:	5e                   	pop    esi
c0004f36:	c3                   	ret    

c0004f37 <f_mount>:
c0004f37:	53                   	push   ebx
c0004f38:	83 ec 18             	sub    esp,0x18
c0004f3b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f3f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f43:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f47:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f4b:	e8 fb d2 ff ff       	call   c000224b <get_ldnumber>
c0004f50:	89 c2                	mov    edx,eax
c0004f52:	b8 0b 00 00 00       	mov    eax,0xb
c0004f57:	85 d2                	test   edx,edx
c0004f59:	78 39                	js     c0004f94 <f_mount+0x5d>
c0004f5b:	8b 04 95 60 e5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1aa0]
c0004f62:	85 c0                	test   eax,eax
c0004f64:	74 03                	je     c0004f69 <f_mount+0x32>
c0004f66:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f6d:	85 c0                	test   eax,eax
c0004f6f:	74 03                	je     c0004f74 <f_mount+0x3d>
c0004f71:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f78:	89 04 95 60 e5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1aa0],eax
c0004f7f:	31 c0                	xor    eax,eax
c0004f81:	84 db                	test   bl,bl
c0004f83:	74 0f                	je     c0004f94 <f_mount+0x5d>
c0004f85:	31 c9                	xor    ecx,ecx
c0004f87:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f8b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f8f:	e8 65 d7 ff ff       	call   c00026f9 <mount_volume>
c0004f94:	83 c4 18             	add    esp,0x18
c0004f97:	5b                   	pop    ebx
c0004f98:	c3                   	ret    

c0004f99 <f_open>:
c0004f99:	55                   	push   ebp
c0004f9a:	bd 09 00 00 00       	mov    ebp,0x9
c0004f9f:	57                   	push   edi
c0004fa0:	56                   	push   esi
c0004fa1:	53                   	push   ebx
c0004fa2:	83 ec 7c             	sub    esp,0x7c
c0004fa5:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fac:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fb3:	85 db                	test   ebx,ebx
c0004fb5:	0f 84 10 04 00 00    	je     c00053cb <f_open+0x432>
c0004fbb:	89 fe                	mov    esi,edi
c0004fbd:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fc1:	83 e6 3f             	and    esi,0x3f
c0004fc4:	89 f0                	mov    eax,esi
c0004fc6:	0f b6 c8             	movzx  ecx,al
c0004fc9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fd0:	e8 24 d7 ff ff       	call   c00026f9 <mount_volume>
c0004fd5:	89 c5                	mov    ebp,eax
c0004fd7:	85 c0                	test   eax,eax
c0004fd9:	0f 85 e6 03 00 00    	jne    c00053c5 <f_open+0x42c>
c0004fdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fe3:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fec:	83 ec 0c             	sub    esp,0xc
c0004fef:	68 60 04 00 00       	push   0x460
c0004ff4:	e8 a3 34 00 00       	call   c000849c <ff_memalloc>
c0004ff9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ffd:	83 c4 10             	add    esp,0x10
c0005000:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0005005:	0f 84 c0 03 00 00    	je     c00053cb <f_open+0x432>
c000500b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000500f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005013:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005019:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c000501c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000501f:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0005026:	8d 44 24 24          	lea    eax,[esp+0x24]
c000502a:	e8 40 fe ff ff       	call   c0004e6f <follow_path>
c000502f:	89 c5                	mov    ebp,eax
c0005031:	85 c0                	test   eax,eax
c0005033:	75 0c                	jne    c0005041 <f_open+0xa8>
c0005035:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c000503a:	79 05                	jns    c0005041 <f_open+0xa8>
c000503c:	bd 06 00 00 00       	mov    ebp,0x6
c0005041:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005047:	0f 84 84 01 00 00    	je     c00051d1 <f_open+0x238>
c000504d:	85 ed                	test   ebp,ebp
c000504f:	74 20                	je     c0005071 <f_open+0xd8>
c0005051:	83 fd 04             	cmp    ebp,0x4
c0005054:	0f 85 58 03 00 00    	jne    c00053b2 <f_open+0x419>
c000505a:	8d 44 24 24          	lea    eax,[esp+0x24]
c000505e:	83 ce 08             	or     esi,0x8
c0005061:	e8 8a f2 ff ff       	call   c00042f0 <dir_register>
c0005066:	89 c5                	mov    ebp,eax
c0005068:	85 c0                	test   eax,eax
c000506a:	74 2f                	je     c000509b <f_open+0x102>
c000506c:	e9 41 03 00 00       	jmp    c00053b2 <f_open+0x419>
c0005071:	bd 07 00 00 00       	mov    ebp,0x7
c0005076:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c000507b:	0f 85 31 03 00 00    	jne    c00053b2 <f_open+0x419>
c0005081:	bd 08 00 00 00       	mov    ebp,0x8
c0005086:	f7 c7 04 00 00 00    	test   edi,0x4
c000508c:	0f 85 20 03 00 00    	jne    c00053b2 <f_open+0x419>
c0005092:	83 e7 08             	and    edi,0x8
c0005095:	0f 84 65 01 00 00    	je     c0005200 <f_open+0x267>
c000509b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000509f:	8a 02                	mov    al,BYTE PTR [edx]
c00050a1:	3c 04                	cmp    al,0x4
c00050a3:	0f 85 97 00 00 00    	jne    c0005140 <f_open+0x1a7>
c00050a9:	8d 42 10             	lea    eax,[edx+0x10]
c00050ac:	89 13                	mov    DWORD PTR [ebx],edx
c00050ae:	89 da                	mov    edx,ebx
c00050b0:	e8 80 fd ff ff       	call   c0004e35 <init_alloc_info.isra.2>
c00050b5:	31 d2                	xor    edx,edx
c00050b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050bb:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050c0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c3:	83 c0 02             	add    eax,0x2
c00050c6:	e8 32 cc ff ff       	call   c0001cfd <mem_set>
c00050cb:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050d0:	31 d2                	xor    edx,edx
c00050d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050d6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d9:	83 c0 26             	add    eax,0x26
c00050dc:	e8 1c cc ff ff       	call   c0001cfd <mem_set>
c00050e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050e5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e8:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050ec:	ba 00 00 21 50       	mov    edx,0x50210000
c00050f1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050f4:	83 c0 08             	add    eax,0x8
c00050f7:	e8 e3 cb ff ff       	call   c0001cdf <st_dword>
c00050fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005100:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005103:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0005107:	8d 44 24 24          	lea    eax,[esp+0x24]
c000510b:	e8 b7 ea ff ff       	call   c0003bc7 <store_xdir>
c0005110:	89 c5                	mov    ebp,eax
c0005112:	85 c0                	test   eax,eax
c0005114:	0f 85 98 02 00 00    	jne    c00053b2 <f_open+0x419>
c000511a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000511d:	85 d2                	test   edx,edx
c000511f:	0f 84 db 00 00 00    	je     c0005200 <f_open+0x267>
c0005125:	31 c9                	xor    ecx,ecx
c0005127:	89 d8                	mov    eax,ebx
c0005129:	e8 8e e3 ff ff       	call   c00034bc <remove_chain>
c000512e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005132:	89 c5                	mov    ebp,eax
c0005134:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005137:	48                   	dec    eax
c0005138:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000513b:	e9 b8 00 00 00       	jmp    c00051f8 <f_open+0x25f>
c0005140:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005144:	89 ea                	mov    edx,ebp
c0005146:	e8 99 fc ff ff       	call   c0004de4 <ld_clust.isra.0>
c000514b:	ba 00 00 21 50       	mov    edx,0x50210000
c0005150:	89 c7                	mov    edi,eax
c0005152:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005155:	e8 85 cb ff ff       	call   c0001cdf <st_dword>
c000515a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000515e:	31 c9                	xor    ecx,ecx
c0005160:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005164:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005168:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000516c:	e8 9c fc ff ff       	call   c0004e0d <st_clust.isra.1>
c0005171:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005175:	31 d2                	xor    edx,edx
c0005177:	83 c0 1c             	add    eax,0x1c
c000517a:	e8 60 cb ff ff       	call   c0001cdf <st_dword>
c000517f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005183:	85 ff                	test   edi,edi
c0005185:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005189:	74 75                	je     c0005200 <f_open+0x267>
c000518b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518f:	31 c9                	xor    ecx,ecx
c0005191:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005194:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005197:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000519b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000519f:	89 fa                	mov    edx,edi
c00051a1:	8d 44 24 24          	lea    eax,[esp+0x24]
c00051a5:	e8 12 e3 ff ff       	call   c00034bc <remove_chain>
c00051aa:	89 c5                	mov    ebp,eax
c00051ac:	85 c0                	test   eax,eax
c00051ae:	0f 85 fe 01 00 00    	jne    c00053b2 <f_open+0x419>
c00051b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c0:	4f                   	dec    edi
c00051c1:	e8 81 d2 ff ff       	call   c0002447 <move_window>
c00051c6:	89 c5                	mov    ebp,eax
c00051c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051cc:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051cf:	eb 27                	jmp    c00051f8 <f_open+0x25f>
c00051d1:	85 ed                	test   ebp,ebp
c00051d3:	0f 85 d9 01 00 00    	jne    c00053b2 <f_open+0x419>
c00051d9:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051dd:	bd 04 00 00 00       	mov    ebp,0x4
c00051e2:	a8 10                	test   al,0x10
c00051e4:	0f 85 c8 01 00 00    	jne    c00053b2 <f_open+0x419>
c00051ea:	83 e7 02             	and    edi,0x2
c00051ed:	74 11                	je     c0005200 <f_open+0x267>
c00051ef:	bd 07 00 00 00       	mov    ebp,0x7
c00051f4:	a8 01                	test   al,0x1
c00051f6:	eb 02                	jmp    c00051fa <f_open+0x261>
c00051f8:	85 ed                	test   ebp,ebp
c00051fa:	0f 85 b2 01 00 00    	jne    c00053b2 <f_open+0x419>
c0005200:	f7 c6 08 00 00 00    	test   esi,0x8
c0005206:	74 03                	je     c000520b <f_open+0x272>
c0005208:	83 ce 40             	or     esi,0x40
c000520b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000520f:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005212:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005215:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005218:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000521b:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000521f:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005222:	8a 02                	mov    al,BYTE PTR [edx]
c0005224:	3c 04                	cmp    al,0x4
c0005226:	75 2a                	jne    c0005252 <f_open+0x2b9>
c0005228:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000522c:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005231:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005234:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005238:	30 c0                	xor    al,al
c000523a:	09 c8                	or     eax,ecx
c000523c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000523f:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005243:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005246:	8d 42 10             	lea    eax,[edx+0x10]
c0005249:	89 da                	mov    edx,ebx
c000524b:	e8 e5 fb ff ff       	call   c0004e35 <init_alloc_info.isra.2>
c0005250:	eb 1c                	jmp    c000526e <f_open+0x2d5>
c0005252:	89 fa                	mov    edx,edi
c0005254:	e8 8b fb ff ff       	call   c0004de4 <ld_clust.isra.0>
c0005259:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000525c:	8d 47 1c             	lea    eax,[edi+0x1c]
c000525f:	e8 12 ca ff ff       	call   c0001c76 <ld_dword>
c0005264:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000526b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000526e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005272:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005279:	89 03                	mov    DWORD PTR [ebx],eax
c000527b:	31 d2                	xor    edx,edx
c000527d:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005281:	b9 00 02 00 00       	mov    ecx,0x200
c0005286:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000528a:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000528e:	89 f0                	mov    eax,esi
c0005290:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005297:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000529a:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c00052a1:	8d 43 50             	lea    eax,[ebx+0x50]
c00052a4:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052ab:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052b6:	e8 42 ca ff ff       	call   c0001cfd <mem_set>
c00052bb:	83 e6 20             	and    esi,0x20
c00052be:	75 07                	jne    c00052c7 <f_open+0x32e>
c00052c0:	31 ed                	xor    ebp,ebp
c00052c2:	e9 eb 00 00 00       	jmp    c00053b2 <f_open+0x419>
c00052c7:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052ca:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052d1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d9:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052dd:	74 e1                	je     c00052c0 <f_open+0x327>
c00052df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052e3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052e7:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052ea:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052f1:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052f4:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f8:	31 ff                	xor    edi,edi
c00052fa:	c1 e5 09             	shl    ebp,0x9
c00052fd:	89 ee                	mov    esi,ebp
c00052ff:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0005303:	89 f8                	mov    eax,edi
c0005305:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005309:	73 22                	jae    c000532d <f_open+0x394>
c000530b:	89 d8                	mov    eax,ebx
c000530d:	e8 bd dc ff ff       	call   c0002fcf <get_fat>
c0005312:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005316:	89 c2                	mov    edx,eax
c0005318:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000531c:	83 f8 01             	cmp    eax,0x1
c000531f:	76 10                	jbe    c0005331 <f_open+0x398>
c0005321:	83 f8 ff             	cmp    eax,0xffffffff
c0005324:	75 d9                	jne    c00052ff <f_open+0x366>
c0005326:	bd 01 00 00 00       	mov    ebp,0x1
c000532b:	eb 09                	jmp    c0005336 <f_open+0x39d>
c000532d:	31 ed                	xor    ebp,ebp
c000532f:	eb 05                	jmp    c0005336 <f_open+0x39d>
c0005331:	bd 02 00 00 00       	mov    ebp,0x2
c0005336:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005339:	85 ed                	test   ebp,ebp
c000533b:	75 75                	jne    c00053b2 <f_open+0x419>
c000533d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005341:	25 ff 01 00 00       	and    eax,0x1ff
c0005346:	0f 84 74 ff ff ff    	je     c00052c0 <f_open+0x327>
c000534c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005350:	bd 02 00 00 00       	mov    ebp,0x2
c0005355:	89 c8                	mov    eax,ecx
c0005357:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000535b:	e8 a2 cb ff ff       	call   c0001f02 <clst2sect>
c0005360:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005364:	89 d7                	mov    edi,edx
c0005366:	09 c7                	or     edi,eax
c0005368:	74 48                	je     c00053b2 <f_open+0x419>
c000536a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000536e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005372:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000537a:	0f ac fe 09          	shrd   esi,edi,0x9
c000537e:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005382:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005386:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005389:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000538d:	83 ec 0c             	sub    esp,0xc
c0005390:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005393:	6a 01                	push   0x1
c0005395:	52                   	push   edx
c0005396:	50                   	push   eax
c0005397:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000539b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000539f:	50                   	push   eax
c00053a0:	e8 79 c8 ff ff       	call   c0001c1e <disk_read>
c00053a5:	83 c4 20             	add    esp,0x20
c00053a8:	85 c0                	test   eax,eax
c00053aa:	0f 95 c0             	setne  al
c00053ad:	0f b6 c0             	movzx  eax,al
c00053b0:	89 c5                	mov    ebp,eax
c00053b2:	83 ec 0c             	sub    esp,0xc
c00053b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b9:	e8 f4 30 00 00       	call   c00084b2 <ff_memfree>
c00053be:	83 c4 10             	add    esp,0x10
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	74 06                	je     c00053cb <f_open+0x432>
c00053c5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053cb:	83 c4 7c             	add    esp,0x7c
c00053ce:	89 e8                	mov    eax,ebp
c00053d0:	5b                   	pop    ebx
c00053d1:	5e                   	pop    esi
c00053d2:	5f                   	pop    edi
c00053d3:	5d                   	pop    ebp
c00053d4:	c3                   	ret    

c00053d5 <f_read>:
c00053d5:	55                   	push   ebp
c00053d6:	57                   	push   edi
c00053d7:	56                   	push   esi
c00053d8:	53                   	push   ebx
c00053d9:	83 ec 2c             	sub    esp,0x2c
c00053dc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053e0:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053e4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053ea:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ee:	89 d8                	mov    eax,ebx
c00053f0:	e8 77 cf ff ff       	call   c000236c <validate>
c00053f5:	89 c5                	mov    ebp,eax
c00053f7:	85 c0                	test   eax,eax
c00053f9:	0f 85 4c 02 00 00    	jne    c000564b <f_read+0x276>
c00053ff:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005403:	85 ed                	test   ebp,ebp
c0005405:	0f 85 40 02 00 00    	jne    c000564b <f_read+0x276>
c000540b:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c000540f:	0f 84 31 02 00 00    	je     c0005646 <f_read+0x271>
c0005415:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005418:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000541b:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c000541e:	bf 00 00 00 00       	mov    edi,0x0
c0005423:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005426:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000542a:	89 d1                	mov    ecx,edx
c000542c:	19 f9                	sbb    ecx,edi
c000542e:	0f 83 cf 00 00 00    	jae    c0005503 <f_read+0x12e>
c0005434:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005438:	e9 c6 00 00 00       	jmp    c0005503 <f_read+0x12e>
c000543d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005440:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005443:	89 d0                	mov    eax,edx
c0005445:	25 ff 01 00 00       	and    eax,0x1ff
c000544a:	0f 85 c9 01 00 00    	jne    c0005619 <f_read+0x244>
c0005450:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005454:	89 d6                	mov    esi,edx
c0005456:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000545a:	89 cf                	mov    edi,ecx
c000545c:	48                   	dec    eax
c000545d:	0f ac fe 09          	shrd   esi,edi,0x9
c0005461:	21 f0                	and    eax,esi
c0005463:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005467:	0f 84 a6 00 00 00    	je     c0005513 <f_read+0x13e>
c000546d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005471:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005474:	89 c8                	mov    eax,ecx
c0005476:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005479:	e8 84 ca ff ff       	call   c0001f02 <clst2sect>
c000547e:	89 d7                	mov    edi,edx
c0005480:	09 c7                	or     edi,eax
c0005482:	0f 84 b4 00 00 00    	je     c000553c <f_read+0x167>
c0005488:	31 ff                	xor    edi,edi
c000548a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000548e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005491:	01 c6                	add    esi,eax
c0005493:	11 d7                	adc    edi,edx
c0005495:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000549d:	0f 86 fd 00 00 00    	jbe    c00055a0 <f_read+0x1cb>
c00054a3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054ab:	c1 e8 09             	shr    eax,0x9
c00054ae:	89 04 24             	mov    DWORD PTR [esp],eax
c00054b1:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054b5:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b8:	39 c2                	cmp    edx,eax
c00054ba:	76 07                	jbe    c00054c3 <f_read+0xee>
c00054bc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00054c3:	83 ec 0c             	sub    esp,0xc
c00054c6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054ca:	57                   	push   edi
c00054cb:	56                   	push   esi
c00054cc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054d0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054d4:	50                   	push   eax
c00054d5:	e8 44 c7 ff ff       	call   c0001c1e <disk_read>
c00054da:	83 c4 20             	add    esp,0x20
c00054dd:	85 c0                	test   eax,eax
c00054df:	75 6e                	jne    c000554f <f_read+0x17a>
c00054e1:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054e5:	78 7e                	js     c0005565 <f_read+0x190>
c00054e7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054ea:	c1 e6 09             	shl    esi,0x9
c00054ed:	31 ff                	xor    edi,edi
c00054ef:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054f3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054f7:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054fb:	01 30                	add    DWORD PTR [eax],esi
c00054fd:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005500:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005503:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005508:	0f 85 2f ff ff ff    	jne    c000543d <f_read+0x68>
c000550e:	e9 38 01 00 00       	jmp    c000564b <f_read+0x276>
c0005513:	89 c8                	mov    eax,ecx
c0005515:	09 d0                	or     eax,edx
c0005517:	75 05                	jne    c000551e <f_read+0x149>
c0005519:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000551c:	eb 19                	jmp    c0005537 <f_read+0x162>
c000551e:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005522:	74 09                	je     c000552d <f_read+0x158>
c0005524:	89 d8                	mov    eax,ebx
c0005526:	e8 f8 c9 ff ff       	call   c0001f23 <clmt_clust>
c000552b:	eb 0a                	jmp    c0005537 <f_read+0x162>
c000552d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005530:	89 d8                	mov    eax,ebx
c0005532:	e8 98 da ff ff       	call   c0002fcf <get_fat>
c0005537:	83 f8 01             	cmp    eax,0x1
c000553a:	77 0e                	ja     c000554a <f_read+0x175>
c000553c:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005540:	bd 02 00 00 00       	mov    ebp,0x2
c0005545:	e9 01 01 00 00       	jmp    c000564b <f_read+0x276>
c000554a:	83 f8 ff             	cmp    eax,0xffffffff
c000554d:	75 0e                	jne    c000555d <f_read+0x188>
c000554f:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005553:	bd 01 00 00 00       	mov    ebp,0x1
c0005558:	e9 ee 00 00 00       	jmp    c000564b <f_read+0x276>
c000555d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005560:	e9 08 ff ff ff       	jmp    c000546d <f_read+0x98>
c0005565:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005568:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000556b:	29 f0                	sub    eax,esi
c000556d:	19 fa                	sbb    edx,edi
c000556f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005572:	89 d7                	mov    edi,edx
c0005574:	ba 00 00 00 00       	mov    edx,0x0
c0005579:	89 f9                	mov    ecx,edi
c000557b:	19 d1                	sbb    ecx,edx
c000557d:	0f 83 64 ff ff ff    	jae    c00054e7 <f_read+0x112>
c0005583:	89 c7                	mov    edi,eax
c0005585:	8d 53 50             	lea    edx,[ebx+0x50]
c0005588:	c1 e7 09             	shl    edi,0x9
c000558b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000558f:	b9 00 02 00 00       	mov    ecx,0x200
c0005594:	01 f8                	add    eax,edi
c0005596:	e8 4d c7 ff ff       	call   c0001ce8 <mem_cpy>
c000559b:	e9 47 ff ff ff       	jmp    c00054e7 <f_read+0x112>
c00055a0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00055a3:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00055a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055ad:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055b1:	75 05                	jne    c00055b8 <f_read+0x1e3>
c00055b3:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055b6:	74 5b                	je     c0005613 <f_read+0x23e>
c00055b8:	8d 43 50             	lea    eax,[ebx+0x50]
c00055bb:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055c3:	79 2a                	jns    c00055ef <f_read+0x21a>
c00055c5:	83 ec 0c             	sub    esp,0xc
c00055c8:	6a 01                	push   0x1
c00055ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055d6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055da:	50                   	push   eax
c00055db:	e8 54 c6 ff ff       	call   c0001c34 <disk_write>
c00055e0:	83 c4 20             	add    esp,0x20
c00055e3:	85 c0                	test   eax,eax
c00055e5:	0f 85 64 ff ff ff    	jne    c000554f <f_read+0x17a>
c00055eb:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ef:	83 ec 0c             	sub    esp,0xc
c00055f2:	6a 01                	push   0x1
c00055f4:	57                   	push   edi
c00055f5:	56                   	push   esi
c00055f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055fa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055fe:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005602:	50                   	push   eax
c0005603:	e8 16 c6 ff ff       	call   c0001c1e <disk_read>
c0005608:	83 c4 20             	add    esp,0x20
c000560b:	85 c0                	test   eax,eax
c000560d:	0f 85 3c ff ff ff    	jne    c000554f <f_read+0x17a>
c0005613:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005616:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005619:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000561c:	ba 00 02 00 00       	mov    edx,0x200
c0005621:	25 ff 01 00 00       	and    eax,0x1ff
c0005626:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000562a:	29 c2                	sub    edx,eax
c000562c:	39 d6                	cmp    esi,edx
c000562e:	76 02                	jbe    c0005632 <f_read+0x25d>
c0005630:	89 d6                	mov    esi,edx
c0005632:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005636:	89 f1                	mov    ecx,esi
c0005638:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000563c:	e8 a7 c6 ff ff       	call   c0001ce8 <mem_cpy>
c0005641:	e9 a7 fe ff ff       	jmp    c00054ed <f_read+0x118>
c0005646:	bd 07 00 00 00       	mov    ebp,0x7
c000564b:	83 c4 2c             	add    esp,0x2c
c000564e:	89 e8                	mov    eax,ebp
c0005650:	5b                   	pop    ebx
c0005651:	5e                   	pop    esi
c0005652:	5f                   	pop    edi
c0005653:	5d                   	pop    ebp
c0005654:	c3                   	ret    

c0005655 <f_write>:
c0005655:	55                   	push   ebp
c0005656:	57                   	push   edi
c0005657:	56                   	push   esi
c0005658:	53                   	push   ebx
c0005659:	83 ec 2c             	sub    esp,0x2c
c000565c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005660:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005664:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000566a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000566e:	89 d8                	mov    eax,ebx
c0005670:	e8 f7 cc ff ff       	call   c000236c <validate>
c0005675:	89 c5                	mov    ebp,eax
c0005677:	85 c0                	test   eax,eax
c0005679:	0f 85 86 02 00 00    	jne    c0005905 <f_write+0x2b0>
c000567f:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005683:	85 ed                	test   ebp,ebp
c0005685:	0f 85 7a 02 00 00    	jne    c0005905 <f_write+0x2b0>
c000568b:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000568f:	0f 84 6b 02 00 00    	je     c0005900 <f_write+0x2ab>
c0005695:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005699:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000569c:	0f 84 43 01 00 00    	je     c00057e5 <f_write+0x190>
c00056a2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00056a5:	89 c1                	mov    ecx,eax
c00056a7:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056ab:	0f 83 34 01 00 00    	jae    c00057e5 <f_write+0x190>
c00056b1:	f7 d0                	not    eax
c00056b3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056b7:	e9 29 01 00 00       	jmp    c00057e5 <f_write+0x190>
c00056bc:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056bf:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056c2:	89 d0                	mov    eax,edx
c00056c4:	25 ff 01 00 00       	and    eax,0x1ff
c00056c9:	0f 85 00 02 00 00    	jne    c00058cf <f_write+0x27a>
c00056cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056d3:	89 d6                	mov    esi,edx
c00056d5:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d9:	89 cf                	mov    edi,ecx
c00056db:	48                   	dec    eax
c00056dc:	0f ac fe 09          	shrd   esi,edi,0x9
c00056e0:	21 f0                	and    eax,esi
c00056e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056e6:	0f 84 06 01 00 00    	je     c00057f2 <f_write+0x19d>
c00056ec:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056f0:	0f 88 6e 01 00 00    	js     c0005864 <f_write+0x20f>
c00056f6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056fa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056fd:	89 c8                	mov    eax,ecx
c00056ff:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0005703:	e8 fa c7 ff ff       	call   c0001f02 <clst2sect>
c0005708:	89 d1                	mov    ecx,edx
c000570a:	09 c1                	or     ecx,eax
c000570c:	0f 84 1c 01 00 00    	je     c000582e <f_write+0x1d9>
c0005712:	31 ff                	xor    edi,edi
c0005714:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005718:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000571c:	01 c6                	add    esi,eax
c000571e:	11 d7                	adc    edi,edx
c0005720:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005728:	0f 86 63 01 00 00    	jbe    c0005891 <f_write+0x23c>
c000572e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005732:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005736:	c1 e8 09             	shr    eax,0x9
c0005739:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000573d:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005741:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005745:	39 c2                	cmp    edx,eax
c0005747:	76 08                	jbe    c0005751 <f_write+0xfc>
c0005749:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000574d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005751:	83 ec 0c             	sub    esp,0xc
c0005754:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005758:	57                   	push   edi
c0005759:	56                   	push   esi
c000575a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000575e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005762:	50                   	push   eax
c0005763:	e8 cc c4 ff ff       	call   c0001c34 <disk_write>
c0005768:	83 c4 20             	add    esp,0x20
c000576b:	85 c0                	test   eax,eax
c000576d:	0f 85 ce 00 00 00    	jne    c0005841 <f_write+0x1ec>
c0005773:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005776:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005779:	29 f0                	sub    eax,esi
c000577b:	19 fa                	sbb    edx,edi
c000577d:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005781:	89 d7                	mov    edi,edx
c0005783:	ba 00 00 00 00       	mov    edx,0x0
c0005788:	89 f9                	mov    ecx,edi
c000578a:	19 d1                	sbb    ecx,edx
c000578c:	73 1c                	jae    c00057aa <f_write+0x155>
c000578e:	89 c7                	mov    edi,eax
c0005790:	b9 00 02 00 00       	mov    ecx,0x200
c0005795:	c1 e7 09             	shl    edi,0x9
c0005798:	8d 43 50             	lea    eax,[ebx+0x50]
c000579b:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000579f:	89 fa                	mov    edx,edi
c00057a1:	e8 42 c5 ff ff       	call   c0001ce8 <mem_cpy>
c00057a6:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057aa:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057ae:	c1 e6 09             	shl    esi,0x9
c00057b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057b5:	31 ff                	xor    edi,edi
c00057b7:	01 30                	add    DWORD PTR [eax],esi
c00057b9:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057bd:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057c4:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057c7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057ca:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057cd:	89 c1                	mov    ecx,eax
c00057cf:	39 f2                	cmp    edx,esi
c00057d1:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057d4:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057d7:	19 f9                	sbb    ecx,edi
c00057d9:	73 04                	jae    c00057df <f_write+0x18a>
c00057db:	89 f2                	mov    edx,esi
c00057dd:	89 f8                	mov    eax,edi
c00057df:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057e2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057e5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057ea:	0f 85 cc fe ff ff    	jne    c00056bc <f_write+0x67>
c00057f0:	eb 2e                	jmp    c0005820 <f_write+0x1cb>
c00057f2:	89 c8                	mov    eax,ecx
c00057f4:	09 d0                	or     eax,edx
c00057f6:	75 0b                	jne    c0005803 <f_write+0x1ae>
c00057f8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057fb:	31 d2                	xor    edx,edx
c00057fd:	85 c0                	test   eax,eax
c00057ff:	75 28                	jne    c0005829 <f_write+0x1d4>
c0005801:	eb 12                	jmp    c0005815 <f_write+0x1c0>
c0005803:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005807:	74 09                	je     c0005812 <f_write+0x1bd>
c0005809:	89 d8                	mov    eax,ebx
c000580b:	e8 13 c7 ff ff       	call   c0001f23 <clmt_clust>
c0005810:	eb 0a                	jmp    c000581c <f_write+0x1c7>
c0005812:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005815:	89 d8                	mov    eax,ebx
c0005817:	e8 a1 da ff ff       	call   c00032bd <create_chain>
c000581c:	85 c0                	test   eax,eax
c000581e:	75 09                	jne    c0005829 <f_write+0x1d4>
c0005820:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005824:	e9 dc 00 00 00       	jmp    c0005905 <f_write+0x2b0>
c0005829:	83 f8 01             	cmp    eax,0x1
c000582c:	75 0e                	jne    c000583c <f_write+0x1e7>
c000582e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005832:	bd 02 00 00 00       	mov    ebp,0x2
c0005837:	e9 c9 00 00 00       	jmp    c0005905 <f_write+0x2b0>
c000583c:	83 f8 ff             	cmp    eax,0xffffffff
c000583f:	75 0e                	jne    c000584f <f_write+0x1fa>
c0005841:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005845:	bd 01 00 00 00       	mov    ebp,0x1
c000584a:	e9 b6 00 00 00       	jmp    c0005905 <f_write+0x2b0>
c000584f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005852:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005856:	0f 85 90 fe ff ff    	jne    c00056ec <f_write+0x97>
c000585c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000585f:	e9 88 fe ff ff       	jmp    c00056ec <f_write+0x97>
c0005864:	83 ec 0c             	sub    esp,0xc
c0005867:	8d 43 50             	lea    eax,[ebx+0x50]
c000586a:	6a 01                	push   0x1
c000586c:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000586f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005872:	50                   	push   eax
c0005873:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005877:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000587b:	50                   	push   eax
c000587c:	e8 b3 c3 ff ff       	call   c0001c34 <disk_write>
c0005881:	83 c4 20             	add    esp,0x20
c0005884:	85 c0                	test   eax,eax
c0005886:	75 b9                	jne    c0005841 <f_write+0x1ec>
c0005888:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000588c:	e9 65 fe ff ff       	jmp    c00056f6 <f_write+0xa1>
c0005891:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005894:	75 05                	jne    c000589b <f_write+0x246>
c0005896:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005899:	74 2e                	je     c00058c9 <f_write+0x274>
c000589b:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000589e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058a1:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00058a4:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00058a7:	73 20                	jae    c00058c9 <f_write+0x274>
c00058a9:	83 ec 0c             	sub    esp,0xc
c00058ac:	8d 43 50             	lea    eax,[ebx+0x50]
c00058af:	6a 01                	push   0x1
c00058b1:	57                   	push   edi
c00058b2:	56                   	push   esi
c00058b3:	50                   	push   eax
c00058b4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b8:	50                   	push   eax
c00058b9:	e8 60 c3 ff ff       	call   c0001c1e <disk_read>
c00058be:	83 c4 20             	add    esp,0x20
c00058c1:	85 c0                	test   eax,eax
c00058c3:	0f 85 78 ff ff ff    	jne    c0005841 <f_write+0x1ec>
c00058c9:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058cc:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058cf:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058d2:	ba 00 02 00 00       	mov    edx,0x200
c00058d7:	25 ff 01 00 00       	and    eax,0x1ff
c00058dc:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058e0:	29 c2                	sub    edx,eax
c00058e2:	39 d6                	cmp    esi,edx
c00058e4:	76 02                	jbe    c00058e8 <f_write+0x293>
c00058e6:	89 d6                	mov    esi,edx
c00058e8:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058ec:	89 f1                	mov    ecx,esi
c00058ee:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058f2:	e8 f1 c3 ff ff       	call   c0001ce8 <mem_cpy>
c00058f7:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058fb:	e9 b1 fe ff ff       	jmp    c00057b1 <f_write+0x15c>
c0005900:	bd 07 00 00 00       	mov    ebp,0x7
c0005905:	83 c4 2c             	add    esp,0x2c
c0005908:	89 e8                	mov    eax,ebp
c000590a:	5b                   	pop    ebx
c000590b:	5e                   	pop    esi
c000590c:	5f                   	pop    edi
c000590d:	5d                   	pop    ebp
c000590e:	c3                   	ret    

c000590f <f_sync>:
c000590f:	56                   	push   esi
c0005910:	53                   	push   ebx
c0005911:	83 ec 64             	sub    esp,0x64
c0005914:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005918:	8d 54 24 10          	lea    edx,[esp+0x10]
c000591c:	89 d8                	mov    eax,ebx
c000591e:	e8 49 ca ff ff       	call   c000236c <validate>
c0005923:	85 c0                	test   eax,eax
c0005925:	0f 85 ba 01 00 00    	jne    c0005ae5 <f_sync+0x1d6>
c000592b:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000592e:	f6 c2 40             	test   dl,0x40
c0005931:	0f 84 ae 01 00 00    	je     c0005ae5 <f_sync+0x1d6>
c0005937:	84 d2                	test   dl,dl
c0005939:	79 33                	jns    c000596e <f_sync+0x5f>
c000593b:	83 ec 0c             	sub    esp,0xc
c000593e:	8d 43 50             	lea    eax,[ebx+0x50]
c0005941:	6a 01                	push   0x1
c0005943:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005946:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005949:	50                   	push   eax
c000594a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000594e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005952:	50                   	push   eax
c0005953:	e8 dc c2 ff ff       	call   c0001c34 <disk_write>
c0005958:	83 c4 20             	add    esp,0x20
c000595b:	89 c2                	mov    edx,eax
c000595d:	b8 01 00 00 00       	mov    eax,0x1
c0005962:	85 d2                	test   edx,edx
c0005964:	0f 85 7b 01 00 00    	jne    c0005ae5 <f_sync+0x1d6>
c000596a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000596e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005972:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005975:	0f 85 11 01 00 00    	jne    c0005a8c <f_sync+0x17d>
c000597b:	89 d8                	mov    eax,ebx
c000597d:	e8 13 d6 ff ff       	call   c0002f95 <fill_first_frag>
c0005982:	85 c0                	test   eax,eax
c0005984:	0f 85 5b 01 00 00    	jne    c0005ae5 <f_sync+0x1d6>
c000598a:	83 c9 ff             	or     ecx,0xffffffff
c000598d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005990:	89 d8                	mov    eax,ebx
c0005992:	e8 c9 d5 ff ff       	call   c0002f60 <fill_last_frag>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 46 01 00 00    	jne    c0005ae5 <f_sync+0x1d6>
c000599f:	83 ec 0c             	sub    esp,0xc
c00059a2:	68 60 04 00 00       	push   0x460
c00059a7:	e8 f0 2a 00 00       	call   c000849c <ff_memalloc>
c00059ac:	83 c4 10             	add    esp,0x10
c00059af:	89 c6                	mov    esi,eax
c00059b1:	b8 11 00 00 00       	mov    eax,0x11
c00059b6:	85 f6                	test   esi,esi
c00059b8:	0f 84 27 01 00 00    	je     c0005ae5 <f_sync+0x1d6>
c00059be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c2:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c8:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059cb:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059ce:	89 da                	mov    edx,ebx
c00059d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059d4:	e8 af df ff ff       	call   c0003988 <load_obj_xdir>
c00059d9:	85 c0                	test   eax,eax
c00059db:	0f 85 95 00 00 00    	jne    c0005a76 <f_sync+0x167>
c00059e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e8:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059ec:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ef:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059f2:	83 ca 01             	or     edx,0x1
c00059f5:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059fb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fe:	83 c0 34             	add    eax,0x34
c0005a01:	e8 d9 c2 ff ff       	call   c0001cdf <st_dword>
c0005a06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a0a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a0d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a10:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a13:	83 c0 38             	add    eax,0x38
c0005a16:	e8 c7 c2 ff ff       	call   c0001ce2 <st_qword>
c0005a1b:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a22:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a25:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a28:	83 c0 28             	add    eax,0x28
c0005a2b:	e8 b2 c2 ff ff       	call   c0001ce2 <st_qword>
c0005a30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a34:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a39:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a3c:	83 c0 0c             	add    eax,0xc
c0005a3f:	e8 9b c2 ff ff       	call   c0001cdf <st_dword>
c0005a44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a48:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a4b:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a4f:	31 d2                	xor    edx,edx
c0005a51:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a54:	83 c0 10             	add    eax,0x10
c0005a57:	e8 83 c2 ff ff       	call   c0001cdf <st_dword>
c0005a5c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a60:	e8 62 e1 ff ff       	call   c0003bc7 <store_xdir>
c0005a65:	85 c0                	test   eax,eax
c0005a67:	75 0d                	jne    c0005a76 <f_sync+0x167>
c0005a69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a6d:	e8 00 eb ff ff       	call   c0004572 <sync_fs>
c0005a72:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a76:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a7a:	83 ec 0c             	sub    esp,0xc
c0005a7d:	56                   	push   esi
c0005a7e:	e8 2f 2a 00 00       	call   c00084b2 <ff_memfree>
c0005a83:	83 c4 10             	add    esp,0x10
c0005a86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a8a:	eb 59                	jmp    c0005ae5 <f_sync+0x1d6>
c0005a8c:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a8f:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a92:	e8 b0 c9 ff ff       	call   c0002447 <move_window>
c0005a97:	85 c0                	test   eax,eax
c0005a99:	75 4a                	jne    c0005ae5 <f_sync+0x1d6>
c0005a9b:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a9e:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005aa2:	89 f2                	mov    edx,esi
c0005aa4:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005aa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa9:	e8 5f f3 ff ff       	call   c0004e0d <st_clust.isra.1>
c0005aae:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005ab1:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005ab4:	e8 26 c2 ff ff       	call   c0001cdf <st_dword>
c0005ab9:	8d 46 16             	lea    eax,[esi+0x16]
c0005abc:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ac1:	e8 19 c2 ff ff       	call   c0001cdf <st_dword>
c0005ac6:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac9:	31 d2                	xor    edx,edx
c0005acb:	e8 0b c2 ff ff       	call   c0001cdb <st_word>
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005adc:	e8 91 ea ff ff       	call   c0004572 <sync_fs>
c0005ae1:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005ae5:	83 c4 64             	add    esp,0x64
c0005ae8:	5b                   	pop    ebx
c0005ae9:	5e                   	pop    esi
c0005aea:	c3                   	ret    

c0005aeb <f_close>:
c0005aeb:	53                   	push   ebx
c0005aec:	83 ec 24             	sub    esp,0x24
c0005aef:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005af3:	53                   	push   ebx
c0005af4:	e8 16 fe ff ff       	call   c000590f <f_sync>
c0005af9:	83 c4 10             	add    esp,0x10
c0005afc:	85 c0                	test   eax,eax
c0005afe:	75 15                	jne    c0005b15 <f_close+0x2a>
c0005b00:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005b04:	89 d8                	mov    eax,ebx
c0005b06:	e8 61 c8 ff ff       	call   c000236c <validate>
c0005b0b:	85 c0                	test   eax,eax
c0005b0d:	75 06                	jne    c0005b15 <f_close+0x2a>
c0005b0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b15:	83 c4 18             	add    esp,0x18
c0005b18:	5b                   	pop    ebx
c0005b19:	c3                   	ret    

c0005b1a <f_lseek>:
c0005b1a:	55                   	push   ebp
c0005b1b:	57                   	push   edi
c0005b1c:	56                   	push   esi
c0005b1d:	53                   	push   ebx
c0005b1e:	83 ec 3c             	sub    esp,0x3c
c0005b21:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b25:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b29:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b2d:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b30:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b3a:	e8 2d c8 ff ff       	call   c000236c <validate>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	85 c0                	test   eax,eax
c0005b45:	0f 85 7a 04 00 00    	jne    c0005fc5 <f_lseek+0x4ab>
c0005b4b:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b4f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b53:	85 c0                	test   eax,eax
c0005b55:	0f 85 6a 04 00 00    	jne    c0005fc5 <f_lseek+0x4ab>
c0005b5b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b5f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b62:	74 0c                	je     c0005b70 <f_lseek+0x56>
c0005b64:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b67:	85 c0                	test   eax,eax
c0005b69:	75 1f                	jne    c0005b8a <f_lseek+0x70>
c0005b6b:	e9 b5 01 00 00       	jmp    c0005d25 <f_lseek+0x20b>
c0005b70:	83 c9 ff             	or     ecx,0xffffffff
c0005b73:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b76:	89 d8                	mov    eax,ebx
c0005b78:	e8 e3 d3 ff ff       	call   c0002f60 <fill_last_frag>
c0005b7d:	85 c0                	test   eax,eax
c0005b7f:	74 e3                	je     c0005b64 <f_lseek+0x4a>
c0005b81:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b85:	e9 3b 04 00 00       	jmp    c0005fc5 <f_lseek+0x4ab>
c0005b8a:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b8f:	0f 85 ac 00 00 00    	jne    c0005c41 <f_lseek+0x127>
c0005b95:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b99:	0f 85 a2 00 00 00    	jne    c0005c41 <f_lseek+0x127>
c0005b9f:	8d 78 04             	lea    edi,[eax+0x4]
c0005ba2:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005ba5:	8b 00                	mov    eax,DWORD PTR [eax]
c0005ba7:	be 02 00 00 00       	mov    esi,0x2
c0005bac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005bb0:	85 ed                	test   ebp,ebp
c0005bb2:	74 73                	je     c0005c27 <f_lseek+0x10d>
c0005bb4:	89 e9                	mov    ecx,ebp
c0005bb6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bbd:	ff 04 24             	inc    DWORD PTR [esp]
c0005bc0:	89 ca                	mov    edx,ecx
c0005bc2:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bc6:	89 d8                	mov    eax,ebx
c0005bc8:	e8 02 d4 ff ff       	call   c0002fcf <get_fat>
c0005bcd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bd1:	83 f8 01             	cmp    eax,0x1
c0005bd4:	77 11                	ja     c0005be7 <f_lseek+0xcd>
c0005bd6:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bda:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005be2:	e9 de 03 00 00       	jmp    c0005fc5 <f_lseek+0x4ab>
c0005be7:	83 f8 ff             	cmp    eax,0xffffffff
c0005bea:	75 11                	jne    c0005bfd <f_lseek+0xe3>
c0005bec:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bf0:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf8:	e9 c8 03 00 00       	jmp    c0005fc5 <f_lseek+0x4ab>
c0005bfd:	8d 51 01             	lea    edx,[ecx+0x1]
c0005c00:	89 c1                	mov    ecx,eax
c0005c02:	39 c2                	cmp    edx,eax
c0005c04:	74 b7                	je     c0005bbd <f_lseek+0xa3>
c0005c06:	83 c6 02             	add    esi,0x2
c0005c09:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c0d:	72 0b                	jb     c0005c1a <f_lseek+0x100>
c0005c0f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c12:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c15:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c17:	83 c7 08             	add    edi,0x8
c0005c1a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c1e:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c21:	76 04                	jbe    c0005c27 <f_lseek+0x10d>
c0005c23:	89 c5                	mov    ebp,eax
c0005c25:	eb 8d                	jmp    c0005bb4 <f_lseek+0x9a>
c0005c27:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c2a:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c2e:	89 30                	mov    DWORD PTR [eax],esi
c0005c30:	0f 87 87 03 00 00    	ja     c0005fbd <f_lseek+0x4a3>
c0005c36:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c3c:	e9 84 03 00 00       	jmp    c0005fc5 <f_lseek+0x4ab>
c0005c41:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c44:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c4b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c53:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c5a:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c5e:	73 0f                	jae    c0005c6f <f_lseek+0x155>
c0005c60:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c63:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c67:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c6b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c77:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c7a:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c81:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c85:	0f 84 3a 03 00 00    	je     c0005fc5 <f_lseek+0x4ab>
c0005c8b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c8f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c93:	83 c6 ff             	add    esi,0xffffffff
c0005c96:	89 d8                	mov    eax,ebx
c0005c98:	83 d7 ff             	adc    edi,0xffffffff
c0005c9b:	89 f2                	mov    edx,esi
c0005c9d:	89 f9                	mov    ecx,edi
c0005c9f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005ca3:	89 34 24             	mov    DWORD PTR [esp],esi
c0005ca6:	e8 78 c2 ff ff       	call   c0001f23 <clmt_clust>
c0005cab:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005caf:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005cb2:	89 c2                	mov    edx,eax
c0005cb4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb8:	89 c8                	mov    eax,ecx
c0005cba:	e8 43 c2 ff ff       	call   c0001f02 <clst2sect>
c0005cbf:	89 d7                	mov    edi,edx
c0005cc1:	09 c7                	or     edi,eax
c0005cc3:	0f 84 0d ff ff ff    	je     c0005bd6 <f_lseek+0xbc>
c0005cc9:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005ccd:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005cd3:	0f 84 ec 02 00 00    	je     c0005fc5 <f_lseek+0x4ab>
c0005cd9:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cdd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ce1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ce4:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce8:	0f ac fe 09          	shrd   esi,edi,0x9
c0005cec:	4d                   	dec    ebp
c0005ced:	31 ff                	xor    edi,edi
c0005cef:	21 ee                	and    esi,ebp
c0005cf1:	01 c6                	add    esi,eax
c0005cf3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cf6:	11 d7                	adc    edi,edx
c0005cf8:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cfb:	39 fa                	cmp    edx,edi
c0005cfd:	75 08                	jne    c0005d07 <f_lseek+0x1ed>
c0005cff:	39 f0                	cmp    eax,esi
c0005d01:	0f 84 be 02 00 00    	je     c0005fc5 <f_lseek+0x4ab>
c0005d07:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d0a:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d0e:	0f 89 80 02 00 00    	jns    c0005f94 <f_lseek+0x47a>
c0005d14:	83 ec 0c             	sub    esp,0xc
c0005d17:	6a 01                	push   0x1
c0005d19:	52                   	push   edx
c0005d1a:	50                   	push   eax
c0005d1b:	55                   	push   ebp
c0005d1c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d20:	e9 5a 02 00 00       	jmp    c0005f7f <f_lseek+0x465>
c0005d25:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d29:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d2c:	74 16                	je     c0005d44 <f_lseek+0x22a>
c0005d2e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d33:	76 0f                	jbe    c0005d44 <f_lseek+0x22a>
c0005d35:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d3c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d44:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d47:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d4a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d4d:	89 c7                	mov    edi,eax
c0005d4f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d53:	73 0d                	jae    c0005d62 <f_lseek+0x248>
c0005d55:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d59:	75 07                	jne    c0005d62 <f_lseek+0x248>
c0005d5b:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d5e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d62:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d65:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d68:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d6c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d73:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d7a:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d7d:	75 09                	jne    c0005d88 <f_lseek+0x26e>
c0005d7f:	31 f6                	xor    esi,esi
c0005d81:	31 ff                	xor    edi,edi
c0005d83:	e9 af 01 00 00       	jmp    c0005f37 <f_lseek+0x41d>
c0005d88:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d8c:	89 d7                	mov    edi,edx
c0005d8e:	c1 e1 09             	shl    ecx,0x9
c0005d91:	09 c7                	or     edi,eax
c0005d93:	89 cd                	mov    ebp,ecx
c0005d95:	74 6d                	je     c0005e04 <f_lseek+0x2ea>
c0005d97:	83 c0 ff             	add    eax,0xffffffff
c0005d9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d9e:	83 d2 ff             	adc    edx,0xffffffff
c0005da1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005da4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da8:	83 c0 ff             	add    eax,0xffffffff
c0005dab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005daf:	83 d2 ff             	adc    edx,0xffffffff
c0005db2:	31 ff                	xor    edi,edi
c0005db4:	57                   	push   edi
c0005db5:	51                   	push   ecx
c0005db6:	52                   	push   edx
c0005db7:	50                   	push   eax
c0005db8:	e8 47 0d 02 00       	call   c0026b04 <__udivdi3>
c0005dbd:	83 c4 10             	add    esp,0x10
c0005dc0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dc4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc8:	57                   	push   edi
c0005dc9:	55                   	push   ebp
c0005dca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dd2:	e8 2d 0d 02 00       	call   c0026b04 <__udivdi3>
c0005dd7:	83 c4 10             	add    esp,0x10
c0005dda:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dde:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005de2:	19 d1                	sbb    ecx,edx
c0005de4:	72 1e                	jb     c0005e04 <f_lseek+0x2ea>
c0005de6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005dea:	89 e9                	mov    ecx,ebp
c0005dec:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005def:	f7 d9                	neg    ecx
c0005df1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005df4:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df8:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005dfb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dfe:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005e02:	eb 28                	jmp    c0005e2c <f_lseek+0x312>
c0005e04:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e07:	85 c0                	test   eax,eax
c0005e09:	75 1e                	jne    c0005e29 <f_lseek+0x30f>
c0005e0b:	31 d2                	xor    edx,edx
c0005e0d:	89 d8                	mov    eax,ebx
c0005e0f:	e8 a9 d4 ff ff       	call   c00032bd <create_chain>
c0005e14:	83 f8 01             	cmp    eax,0x1
c0005e17:	0f 84 b9 fd ff ff    	je     c0005bd6 <f_lseek+0xbc>
c0005e1d:	83 f8 ff             	cmp    eax,0xffffffff
c0005e20:	0f 84 c6 fd ff ff    	je     c0005bec <f_lseek+0xd2>
c0005e26:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e29:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e2c:	85 c0                	test   eax,eax
c0005e2e:	0f 84 4b ff ff ff    	je     c0005d7f <f_lseek+0x265>
c0005e34:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e38:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e40:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e43:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e47:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e4a:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e4d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e51:	0f 83 9d 00 00 00    	jae    c0005ef4 <f_lseek+0x3da>
c0005e57:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e5b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e5f:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e62:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e66:	01 f2                	add    edx,esi
c0005e68:	11 f9                	adc    ecx,edi
c0005e6a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e6e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e72:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e75:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e78:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e7b:	f6 c1 02             	test   cl,0x2
c0005e7e:	74 35                	je     c0005eb5 <f_lseek+0x39b>
c0005e80:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e84:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e87:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e8a:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e8e:	73 16                	jae    c0005ea6 <f_lseek+0x38c>
c0005e90:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e94:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e98:	88 ca                	mov    dl,cl
c0005e9a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e9d:	83 ca 40             	or     edx,0x40
c0005ea0:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005ea3:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005ea6:	89 c2                	mov    edx,eax
c0005ea8:	89 d8                	mov    eax,ebx
c0005eaa:	e8 0e d4 ff ff       	call   c00032bd <create_chain>
c0005eaf:	85 c0                	test   eax,eax
c0005eb1:	75 0b                	jne    c0005ebe <f_lseek+0x3a4>
c0005eb3:	eb 30                	jmp    c0005ee5 <f_lseek+0x3cb>
c0005eb5:	89 c2                	mov    edx,eax
c0005eb7:	89 d8                	mov    eax,ebx
c0005eb9:	e8 11 d1 ff ff       	call   c0002fcf <get_fat>
c0005ebe:	83 f8 ff             	cmp    eax,0xffffffff
c0005ec1:	0f 84 25 fd ff ff    	je     c0005bec <f_lseek+0xd2>
c0005ec7:	83 f8 01             	cmp    eax,0x1
c0005eca:	0f 86 06 fd ff ff    	jbe    c0005bd6 <f_lseek+0xbc>
c0005ed0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ed4:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ed7:	0f 86 f9 fc ff ff    	jbe    c0005bd6 <f_lseek+0xbc>
c0005edd:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ee0:	e9 5b ff ff ff       	jmp    c0005e40 <f_lseek+0x326>
c0005ee5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eec:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005ef4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005ef7:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005efb:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005efe:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005f01:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005f04:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f0a:	0f 84 6f fe ff ff    	je     c0005d7f <f_lseek+0x265>
c0005f10:	89 c2                	mov    edx,eax
c0005f12:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f16:	e8 e7 bf ff ff       	call   c0001f02 <clst2sect>
c0005f1b:	89 d7                	mov    edi,edx
c0005f1d:	09 c7                	or     edi,eax
c0005f1f:	0f 84 b1 fc ff ff    	je     c0005bd6 <f_lseek+0xbc>
c0005f25:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f29:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f2c:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f30:	c1 ef 09             	shr    edi,0x9
c0005f33:	01 c6                	add    esi,eax
c0005f35:	11 d7                	adc    edi,edx
c0005f37:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f3a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f3d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f40:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f43:	19 d1                	sbb    ecx,edx
c0005f45:	73 0a                	jae    c0005f51 <f_lseek+0x437>
c0005f47:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f4a:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f4d:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f51:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f56:	74 6d                	je     c0005fc5 <f_lseek+0x4ab>
c0005f58:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f5b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f5e:	39 fa                	cmp    edx,edi
c0005f60:	75 04                	jne    c0005f66 <f_lseek+0x44c>
c0005f62:	39 f0                	cmp    eax,esi
c0005f64:	74 5f                	je     c0005fc5 <f_lseek+0x4ab>
c0005f66:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f69:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f6d:	79 25                	jns    c0005f94 <f_lseek+0x47a>
c0005f6f:	83 ec 0c             	sub    esp,0xc
c0005f72:	6a 01                	push   0x1
c0005f74:	52                   	push   edx
c0005f75:	50                   	push   eax
c0005f76:	55                   	push   ebp
c0005f77:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f7b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f7f:	50                   	push   eax
c0005f80:	e8 af bc ff ff       	call   c0001c34 <disk_write>
c0005f85:	83 c4 20             	add    esp,0x20
c0005f88:	85 c0                	test   eax,eax
c0005f8a:	0f 85 5c fc ff ff    	jne    c0005bec <f_lseek+0xd2>
c0005f90:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f94:	83 ec 0c             	sub    esp,0xc
c0005f97:	6a 01                	push   0x1
c0005f99:	57                   	push   edi
c0005f9a:	56                   	push   esi
c0005f9b:	55                   	push   ebp
c0005f9c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005fa0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005fa4:	50                   	push   eax
c0005fa5:	e8 74 bc ff ff       	call   c0001c1e <disk_read>
c0005faa:	83 c4 20             	add    esp,0x20
c0005fad:	85 c0                	test   eax,eax
c0005faf:	0f 85 37 fc ff ff    	jne    c0005bec <f_lseek+0xd2>
c0005fb5:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb8:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fbb:	eb 08                	jmp    c0005fc5 <f_lseek+0x4ab>
c0005fbd:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fc5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc9:	83 c4 3c             	add    esp,0x3c
c0005fcc:	5b                   	pop    ebx
c0005fcd:	5e                   	pop    esi
c0005fce:	5f                   	pop    edi
c0005fcf:	5d                   	pop    ebp
c0005fd0:	c3                   	ret    

c0005fd1 <f_opendir>:
c0005fd1:	56                   	push   esi
c0005fd2:	b8 09 00 00 00       	mov    eax,0x9
c0005fd7:	53                   	push   ebx
c0005fd8:	83 ec 24             	sub    esp,0x24
c0005fdb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fdf:	85 db                	test   ebx,ebx
c0005fe1:	0f 84 e6 00 00 00    	je     c00060cd <f_opendir+0xfc>
c0005fe7:	31 c9                	xor    ecx,ecx
c0005fe9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fed:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005ff1:	e8 03 c7 ff ff       	call   c00026f9 <mount_volume>
c0005ff6:	85 c0                	test   eax,eax
c0005ff8:	0f 85 c9 00 00 00    	jne    c00060c7 <f_opendir+0xf6>
c0005ffe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006002:	83 ec 0c             	sub    esp,0xc
c0006005:	89 03                	mov    DWORD PTR [ebx],eax
c0006007:	68 60 04 00 00       	push   0x460
c000600c:	e8 8b 24 00 00       	call   c000849c <ff_memalloc>
c0006011:	83 c4 10             	add    esp,0x10
c0006014:	89 c6                	mov    esi,eax
c0006016:	b8 11 00 00 00       	mov    eax,0x11
c000601b:	85 f6                	test   esi,esi
c000601d:	0f 84 aa 00 00 00    	je     c00060cd <f_opendir+0xfc>
c0006023:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006027:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000602d:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006030:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006033:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0006037:	89 d8                	mov    eax,ebx
c0006039:	e8 31 ee ff ff       	call   c0004e6f <follow_path>
c000603e:	85 c0                	test   eax,eax
c0006040:	75 61                	jne    c00060a3 <f_opendir+0xd2>
c0006042:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006046:	78 46                	js     c000608e <f_opendir+0xbd>
c0006048:	b8 05 00 00 00       	mov    eax,0x5
c000604d:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006051:	74 50                	je     c00060a3 <f_opendir+0xd2>
c0006053:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006057:	8a 01                	mov    al,BYTE PTR [ecx]
c0006059:	3c 04                	cmp    al,0x4
c000605b:	75 26                	jne    c0006083 <f_opendir+0xb2>
c000605d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006060:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006063:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006066:	30 d2                	xor    dl,dl
c0006068:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000606c:	09 c2                	or     edx,eax
c000606e:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006071:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006074:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006077:	89 da                	mov    edx,ebx
c0006079:	8d 41 10             	lea    eax,[ecx+0x10]
c000607c:	e8 b4 ed ff ff       	call   c0004e35 <init_alloc_info.isra.2>
c0006081:	eb 0b                	jmp    c000608e <f_opendir+0xbd>
c0006083:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006086:	e8 59 ed ff ff       	call   c0004de4 <ld_clust.isra.0>
c000608b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000608e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006092:	31 d2                	xor    edx,edx
c0006094:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006098:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000609c:	89 d8                	mov    eax,ebx
c000609e:	e8 22 d1 ff ff       	call   c00031c5 <dir_sdi>
c00060a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00060a7:	83 ec 0c             	sub    esp,0xc
c00060aa:	56                   	push   esi
c00060ab:	e8 02 24 00 00       	call   c00084b2 <ff_memfree>
c00060b0:	83 c4 10             	add    esp,0x10
c00060b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060b7:	83 f8 04             	cmp    eax,0x4
c00060ba:	74 06                	je     c00060c2 <f_opendir+0xf1>
c00060bc:	85 c0                	test   eax,eax
c00060be:	74 0d                	je     c00060cd <f_opendir+0xfc>
c00060c0:	eb 05                	jmp    c00060c7 <f_opendir+0xf6>
c00060c2:	b8 05 00 00 00       	mov    eax,0x5
c00060c7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060cd:	83 c4 24             	add    esp,0x24
c00060d0:	5b                   	pop    ebx
c00060d1:	5e                   	pop    esi
c00060d2:	c3                   	ret    

c00060d3 <f_closedir>:
c00060d3:	53                   	push   ebx
c00060d4:	83 ec 18             	sub    esp,0x18
c00060d7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060db:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060df:	89 d8                	mov    eax,ebx
c00060e1:	e8 86 c2 ff ff       	call   c000236c <validate>
c00060e6:	85 c0                	test   eax,eax
c00060e8:	75 06                	jne    c00060f0 <f_closedir+0x1d>
c00060ea:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060f0:	83 c4 18             	add    esp,0x18
c00060f3:	5b                   	pop    ebx
c00060f4:	c3                   	ret    

c00060f5 <f_readdir>:
c00060f5:	57                   	push   edi
c00060f6:	56                   	push   esi
c00060f7:	53                   	push   ebx
c00060f8:	83 ec 20             	sub    esp,0x20
c00060fb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060ff:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006103:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006107:	89 d8                	mov    eax,ebx
c0006109:	e8 5e c2 ff ff       	call   c000236c <validate>
c000610e:	85 c0                	test   eax,eax
c0006110:	75 77                	jne    c0006189 <f_readdir+0x94>
c0006112:	85 ff                	test   edi,edi
c0006114:	75 0b                	jne    c0006121 <f_readdir+0x2c>
c0006116:	31 d2                	xor    edx,edx
c0006118:	89 d8                	mov    eax,ebx
c000611a:	e8 a6 d0 ff ff       	call   c00031c5 <dir_sdi>
c000611f:	eb 68                	jmp    c0006189 <f_readdir+0x94>
c0006121:	83 ec 0c             	sub    esp,0xc
c0006124:	68 60 04 00 00       	push   0x460
c0006129:	e8 6e 23 00 00       	call   c000849c <ff_memalloc>
c000612e:	83 c4 10             	add    esp,0x10
c0006131:	89 c6                	mov    esi,eax
c0006133:	b8 11 00 00 00       	mov    eax,0x11
c0006138:	85 f6                	test   esi,esi
c000613a:	74 4d                	je     c0006189 <f_readdir+0x94>
c000613c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006140:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006146:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006149:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000614c:	31 d2                	xor    edx,edx
c000614e:	89 d8                	mov    eax,ebx
c0006150:	e8 80 d8 ff ff       	call   c00039d5 <dir_read>
c0006155:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000615a:	75 19                	jne    c0006175 <f_readdir+0x80>
c000615c:	89 fa                	mov    edx,edi
c000615e:	89 d8                	mov    eax,ebx
c0006160:	e8 7e ea ff ff       	call   c0004be3 <get_fileinfo>
c0006165:	31 d2                	xor    edx,edx
c0006167:	89 d8                	mov    eax,ebx
c0006169:	e8 af d5 ff ff       	call   c000371d <dir_next>
c000616e:	83 f8 04             	cmp    eax,0x4
c0006171:	75 02                	jne    c0006175 <f_readdir+0x80>
c0006173:	31 c0                	xor    eax,eax
c0006175:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006179:	83 ec 0c             	sub    esp,0xc
c000617c:	56                   	push   esi
c000617d:	e8 30 23 00 00       	call   c00084b2 <ff_memfree>
c0006182:	83 c4 10             	add    esp,0x10
c0006185:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006189:	83 c4 20             	add    esp,0x20
c000618c:	5b                   	pop    ebx
c000618d:	5e                   	pop    esi
c000618e:	5f                   	pop    edi
c000618f:	c3                   	ret    

c0006190 <f_stat>:
c0006190:	57                   	push   edi
c0006191:	31 c9                	xor    ecx,ecx
c0006193:	56                   	push   esi
c0006194:	53                   	push   ebx
c0006195:	83 ec 50             	sub    esp,0x50
c0006198:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000619c:	8d 54 24 04          	lea    edx,[esp+0x4]
c00061a0:	8d 44 24 60          	lea    eax,[esp+0x60]
c00061a4:	e8 50 c5 ff ff       	call   c00026f9 <mount_volume>
c00061a9:	89 c3                	mov    ebx,eax
c00061ab:	85 c0                	test   eax,eax
c00061ad:	75 67                	jne    c0006216 <f_stat+0x86>
c00061af:	83 ec 0c             	sub    esp,0xc
c00061b2:	bb 11 00 00 00       	mov    ebx,0x11
c00061b7:	68 60 04 00 00       	push   0x460
c00061bc:	e8 db 22 00 00       	call   c000849c <ff_memalloc>
c00061c1:	83 c4 10             	add    esp,0x10
c00061c4:	89 c6                	mov    esi,eax
c00061c6:	85 c0                	test   eax,eax
c00061c8:	74 4c                	je     c0006216 <f_stat+0x86>
c00061ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061ce:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061d4:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061d7:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061da:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061de:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061e2:	e8 88 ec ff ff       	call   c0004e6f <follow_path>
c00061e7:	89 c3                	mov    ebx,eax
c00061e9:	85 c0                	test   eax,eax
c00061eb:	75 1d                	jne    c000620a <f_stat+0x7a>
c00061ed:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061f2:	78 11                	js     c0006205 <f_stat+0x75>
c00061f4:	85 ff                	test   edi,edi
c00061f6:	74 12                	je     c000620a <f_stat+0x7a>
c00061f8:	89 fa                	mov    edx,edi
c00061fa:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061fe:	e8 e0 e9 ff ff       	call   c0004be3 <get_fileinfo>
c0006203:	eb 05                	jmp    c000620a <f_stat+0x7a>
c0006205:	bb 06 00 00 00       	mov    ebx,0x6
c000620a:	83 ec 0c             	sub    esp,0xc
c000620d:	56                   	push   esi
c000620e:	e8 9f 22 00 00       	call   c00084b2 <ff_memfree>
c0006213:	83 c4 10             	add    esp,0x10
c0006216:	83 c4 50             	add    esp,0x50
c0006219:	89 d8                	mov    eax,ebx
c000621b:	5b                   	pop    ebx
c000621c:	5e                   	pop    esi
c000621d:	5f                   	pop    edi
c000621e:	c3                   	ret    

c000621f <f_getfree>:
c000621f:	55                   	push   ebp
c0006220:	31 c9                	xor    ecx,ecx
c0006222:	57                   	push   edi
c0006223:	56                   	push   esi
c0006224:	53                   	push   ebx
c0006225:	83 ec 5c             	sub    esp,0x5c
c0006228:	8d 54 24 24          	lea    edx,[esp+0x24]
c000622c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006230:	e8 c4 c4 ff ff       	call   c00026f9 <mount_volume>
c0006235:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006239:	85 c0                	test   eax,eax
c000623b:	0f 85 9d 01 00 00    	jne    c00063de <f_getfree+0x1bf>
c0006241:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006245:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006249:	89 02                	mov    DWORD PTR [edx],eax
c000624b:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000624e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006251:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006254:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006258:	39 f2                	cmp    edx,esi
c000625a:	77 0b                	ja     c0006267 <f_getfree+0x48>
c000625c:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006260:	89 10                	mov    DWORD PTR [eax],edx
c0006262:	e9 77 01 00 00       	jmp    c00063de <f_getfree+0x1bf>
c0006267:	8a 10                	mov    dl,BYTE PTR [eax]
c0006269:	80 fa 01             	cmp    dl,0x1
c000626c:	75 3a                	jne    c00062a8 <f_getfree+0x89>
c000626e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006272:	be 02 00 00 00       	mov    esi,0x2
c0006277:	31 db                	xor    ebx,ebx
c0006279:	89 f2                	mov    edx,esi
c000627b:	8d 44 24 28          	lea    eax,[esp+0x28]
c000627f:	e8 4b cd ff ff       	call   c0002fcf <get_fat>
c0006284:	83 f8 ff             	cmp    eax,0xffffffff
c0006287:	0f 84 28 01 00 00    	je     c00063b5 <f_getfree+0x196>
c000628d:	83 f8 01             	cmp    eax,0x1
c0006290:	0f 84 29 01 00 00    	je     c00063bf <f_getfree+0x1a0>
c0006296:	83 d3 00             	adc    ebx,0x0
c0006299:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000629d:	46                   	inc    esi
c000629e:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c00062a1:	77 d6                	ja     c0006279 <f_getfree+0x5a>
c00062a3:	e9 25 01 00 00       	jmp    c00063cd <f_getfree+0x1ae>
c00062a8:	80 fa 04             	cmp    dl,0x4
c00062ab:	0f 85 88 00 00 00    	jne    c0006339 <f_getfree+0x11a>
c00062b1:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062b4:	31 ed                	xor    ebp,ebp
c00062b6:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c1:	31 db                	xor    ebx,ebx
c00062c3:	85 ed                	test   ebp,ebp
c00062c5:	75 3f                	jne    c0006306 <f_getfree+0xe7>
c00062c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062cf:	83 c0 01             	add    eax,0x1
c00062d2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062d6:	83 d2 00             	adc    edx,0x0
c00062d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062dd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062e1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062e5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e9:	e8 59 c1 ff ff       	call   c0002447 <move_window>
c00062ee:	85 c0                	test   eax,eax
c00062f0:	0f 85 d3 00 00 00    	jne    c00063c9 <f_getfree+0x1aa>
c00062f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062fa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006302:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006306:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000630a:	8d 4e f8             	lea    ecx,[esi-0x8]
c000630d:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006311:	89 cf                	mov    edi,ecx
c0006313:	85 f6                	test   esi,esi
c0006315:	74 12                	je     c0006329 <f_getfree+0x10a>
c0006317:	88 c1                	mov    cl,al
c0006319:	83 e1 01             	and    ecx,0x1
c000631c:	80 f9 01             	cmp    cl,0x1
c000631f:	83 d3 00             	adc    ebx,0x0
c0006322:	d0 e8                	shr    al,1
c0006324:	4e                   	dec    esi
c0006325:	39 fe                	cmp    esi,edi
c0006327:	75 ea                	jne    c0006313 <f_getfree+0xf4>
c0006329:	45                   	inc    ebp
c000632a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006330:	85 f6                	test   esi,esi
c0006332:	75 8f                	jne    c00062c3 <f_getfree+0xa4>
c0006334:	e9 94 00 00 00       	jmp    c00063cd <f_getfree+0x1ae>
c0006339:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000633c:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000633f:	31 f6                	xor    esi,esi
c0006341:	31 db                	xor    ebx,ebx
c0006343:	85 f6                	test   esi,esi
c0006345:	75 1b                	jne    c0006362 <f_getfree+0x143>
c0006347:	89 d7                	mov    edi,edx
c0006349:	89 cd                	mov    ebp,ecx
c000634b:	83 c7 01             	add    edi,0x1
c000634e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006352:	83 d5 00             	adc    ebp,0x0
c0006355:	e8 ed c0 ff ff       	call   c0002447 <move_window>
c000635a:	85 c0                	test   eax,eax
c000635c:	75 6b                	jne    c00063c9 <f_getfree+0x1aa>
c000635e:	89 fa                	mov    edx,edi
c0006360:	89 e9                	mov    ecx,ebp
c0006362:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006366:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000636a:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000636e:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006371:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006375:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006379:	75 11                	jne    c000638c <f_getfree+0x16d>
c000637b:	e8 e9 b8 ff ff       	call   c0001c69 <ld_word>
c0006380:	66 83 f8 01          	cmp    ax,0x1
c0006384:	83 d3 00             	adc    ebx,0x0
c0006387:	83 c6 02             	add    esi,0x2
c000638a:	eb 13                	jmp    c000639f <f_getfree+0x180>
c000638c:	e8 e5 b8 ff ff       	call   c0001c76 <ld_dword>
c0006391:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006396:	83 f8 01             	cmp    eax,0x1
c0006399:	83 d3 00             	adc    ebx,0x0
c000639c:	83 c6 04             	add    esi,0x4
c000639f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00063a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063ad:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063b1:	75 90                	jne    c0006343 <f_getfree+0x124>
c00063b3:	eb 18                	jmp    c00063cd <f_getfree+0x1ae>
c00063b5:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063bd:	eb 0e                	jmp    c00063cd <f_getfree+0x1ae>
c00063bf:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063c7:	eb 04                	jmp    c00063cd <f_getfree+0x1ae>
c00063c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063cd:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063d1:	89 18                	mov    DWORD PTR [eax],ebx
c00063d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063d7:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063da:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063e2:	83 c4 5c             	add    esp,0x5c
c00063e5:	5b                   	pop    ebx
c00063e6:	5e                   	pop    esi
c00063e7:	5f                   	pop    edi
c00063e8:	5d                   	pop    ebp
c00063e9:	c3                   	ret    

c00063ea <f_truncate>:
c00063ea:	56                   	push   esi
c00063eb:	53                   	push   ebx
c00063ec:	83 ec 14             	sub    esp,0x14
c00063ef:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063f3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063f7:	89 d8                	mov    eax,ebx
c00063f9:	e8 6e bf ff ff       	call   c000236c <validate>
c00063fe:	89 c6                	mov    esi,eax
c0006400:	85 c0                	test   eax,eax
c0006402:	0f 85 d2 00 00 00    	jne    c00064da <f_truncate+0xf0>
c0006408:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c000640c:	85 f6                	test   esi,esi
c000640e:	0f 85 c6 00 00 00    	jne    c00064da <f_truncate+0xf0>
c0006414:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006418:	0f 84 b7 00 00 00    	je     c00064d5 <f_truncate+0xeb>
c000641e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006421:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006424:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006427:	89 d1                	mov    ecx,edx
c0006429:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000642c:	0f 83 a8 00 00 00    	jae    c00064da <f_truncate+0xf0>
c0006432:	09 c2                	or     edx,eax
c0006434:	75 15                	jne    c000644b <f_truncate+0x61>
c0006436:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006439:	31 c9                	xor    ecx,ecx
c000643b:	89 d8                	mov    eax,ebx
c000643d:	e8 7a d0 ff ff       	call   c00034bc <remove_chain>
c0006442:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006449:	eb 35                	jmp    c0006480 <f_truncate+0x96>
c000644b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000644e:	89 d8                	mov    eax,ebx
c0006450:	e8 7a cb ff ff       	call   c0002fcf <get_fat>
c0006455:	89 c2                	mov    edx,eax
c0006457:	b8 01 00 00 00       	mov    eax,0x1
c000645c:	83 fa ff             	cmp    edx,0xffffffff
c000645f:	74 1f                	je     c0006480 <f_truncate+0x96>
c0006461:	b8 02 00 00 00       	mov    eax,0x2
c0006466:	83 fa 01             	cmp    edx,0x1
c0006469:	74 15                	je     c0006480 <f_truncate+0x96>
c000646b:	31 c0                	xor    eax,eax
c000646d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006471:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006474:	76 0a                	jbe    c0006480 <f_truncate+0x96>
c0006476:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006479:	89 d8                	mov    eax,ebx
c000647b:	e8 3c d0 ff ff       	call   c00034bc <remove_chain>
c0006480:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006483:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006486:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006489:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000648c:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000648f:	83 ca 40             	or     edx,0x40
c0006492:	85 c0                	test   eax,eax
c0006494:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006497:	75 35                	jne    c00064ce <f_truncate+0xe4>
c0006499:	84 d2                	test   dl,dl
c000649b:	79 3d                	jns    c00064da <f_truncate+0xf0>
c000649d:	83 ec 0c             	sub    esp,0xc
c00064a0:	8d 43 50             	lea    eax,[ebx+0x50]
c00064a3:	6a 01                	push   0x1
c00064a5:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a8:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064ab:	50                   	push   eax
c00064ac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064b0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064b4:	50                   	push   eax
c00064b5:	e8 7a b7 ff ff       	call   c0001c34 <disk_write>
c00064ba:	83 c4 20             	add    esp,0x20
c00064bd:	85 c0                	test   eax,eax
c00064bf:	75 08                	jne    c00064c9 <f_truncate+0xdf>
c00064c1:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064c5:	31 f6                	xor    esi,esi
c00064c7:	eb 11                	jmp    c00064da <f_truncate+0xf0>
c00064c9:	b8 01 00 00 00       	mov    eax,0x1
c00064ce:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064d1:	89 c6                	mov    esi,eax
c00064d3:	eb 05                	jmp    c00064da <f_truncate+0xf0>
c00064d5:	be 07 00 00 00       	mov    esi,0x7
c00064da:	89 f0                	mov    eax,esi
c00064dc:	83 c4 14             	add    esp,0x14
c00064df:	5b                   	pop    ebx
c00064e0:	5e                   	pop    esi
c00064e1:	c3                   	ret    

c00064e2 <f_unlink>:
c00064e2:	56                   	push   esi
c00064e3:	b9 02 00 00 00       	mov    ecx,0x2
c00064e8:	53                   	push   ebx
c00064e9:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ef:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064f3:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064fa:	e8 fa c1 ff ff       	call   c00026f9 <mount_volume>
c00064ff:	85 c0                	test   eax,eax
c0006501:	0f 85 55 01 00 00    	jne    c000665c <f_unlink+0x17a>
c0006507:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000650b:	83 ec 0c             	sub    esp,0xc
c000650e:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006512:	68 60 04 00 00       	push   0x460
c0006517:	e8 80 1f 00 00       	call   c000849c <ff_memalloc>
c000651c:	83 c4 10             	add    esp,0x10
c000651f:	89 c3                	mov    ebx,eax
c0006521:	b8 11 00 00 00       	mov    eax,0x11
c0006526:	85 db                	test   ebx,ebx
c0006528:	0f 84 2e 01 00 00    	je     c000665c <f_unlink+0x17a>
c000652e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006532:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006538:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000653b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000653e:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006545:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006549:	e8 21 e9 ff ff       	call   c0004e6f <follow_path>
c000654e:	85 c0                	test   eax,eax
c0006550:	0f 85 f2 00 00 00    	jne    c0006648 <f_unlink+0x166>
c0006556:	b8 06 00 00 00       	mov    eax,0x6
c000655b:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006563:	0f 88 df 00 00 00    	js     c0006648 <f_unlink+0x166>
c0006569:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000656e:	74 0a                	je     c000657a <f_unlink+0x98>
c0006570:	b8 07 00 00 00       	mov    eax,0x7
c0006575:	e9 ce 00 00 00       	jmp    c0006648 <f_unlink+0x166>
c000657a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000657e:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006582:	8a 02                	mov    al,BYTE PTR [edx]
c0006584:	3c 04                	cmp    al,0x4
c0006586:	75 12                	jne    c000659a <f_unlink+0xb8>
c0006588:	8d 42 10             	lea    eax,[edx+0x10]
c000658b:	8d 54 24 20          	lea    edx,[esp+0x20]
c000658f:	e8 a1 e8 ff ff       	call   c0004e35 <init_alloc_info.isra.2>
c0006594:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006598:	eb 0e                	jmp    c00065a8 <f_unlink+0xc6>
c000659a:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00065a1:	e8 3e e8 ff ff       	call   c0004de4 <ld_clust.isra.0>
c00065a6:	89 c6                	mov    esi,eax
c00065a8:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065ad:	75 12                	jne    c00065c1 <f_unlink+0xdf>
c00065af:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065b3:	e8 94 d6 ff ff       	call   c0003c4c <dir_remove>
c00065b8:	85 c0                	test   eax,eax
c00065ba:	74 6c                	je     c0006628 <f_unlink+0x146>
c00065bc:	e9 87 00 00 00       	jmp    c0006648 <f_unlink+0x166>
c00065c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065c5:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065cc:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065d3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065d6:	75 21                	jne    c00065f9 <f_unlink+0x117>
c00065d8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065dc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065e0:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065e7:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ee:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065f2:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f9:	31 d2                	xor    edx,edx
c00065fb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006602:	e8 be cb ff ff       	call   c00031c5 <dir_sdi>
c0006607:	85 c0                	test   eax,eax
c0006609:	75 3d                	jne    c0006648 <f_unlink+0x166>
c000660b:	31 d2                	xor    edx,edx
c000660d:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006614:	e8 bc d3 ff ff       	call   c00039d5 <dir_read>
c0006619:	85 c0                	test   eax,eax
c000661b:	0f 84 4f ff ff ff    	je     c0006570 <f_unlink+0x8e>
c0006621:	83 f8 04             	cmp    eax,0x4
c0006624:	75 22                	jne    c0006648 <f_unlink+0x166>
c0006626:	eb 87                	jmp    c00065af <f_unlink+0xcd>
c0006628:	85 f6                	test   esi,esi
c000662a:	75 0b                	jne    c0006637 <f_unlink+0x155>
c000662c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006630:	e8 3d df ff ff       	call   c0004572 <sync_fs>
c0006635:	eb 11                	jmp    c0006648 <f_unlink+0x166>
c0006637:	31 c9                	xor    ecx,ecx
c0006639:	89 f2                	mov    edx,esi
c000663b:	8d 44 24 20          	lea    eax,[esp+0x20]
c000663f:	e8 78 ce ff ff       	call   c00034bc <remove_chain>
c0006644:	85 c0                	test   eax,eax
c0006646:	74 e4                	je     c000662c <f_unlink+0x14a>
c0006648:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000664c:	83 ec 0c             	sub    esp,0xc
c000664f:	53                   	push   ebx
c0006650:	e8 5d 1e 00 00       	call   c00084b2 <ff_memfree>
c0006655:	83 c4 10             	add    esp,0x10
c0006658:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000665c:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006662:	5b                   	pop    ebx
c0006663:	5e                   	pop    esi
c0006664:	c3                   	ret    

c0006665 <f_mkdir>:
c0006665:	57                   	push   edi
c0006666:	b9 02 00 00 00       	mov    ecx,0x2
c000666b:	56                   	push   esi
c000666c:	53                   	push   ebx
c000666d:	83 c4 80             	add    esp,0xffffff80
c0006670:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006674:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000667b:	e8 79 c0 ff ff       	call   c00026f9 <mount_volume>
c0006680:	89 c3                	mov    ebx,eax
c0006682:	85 c0                	test   eax,eax
c0006684:	0f 85 fe 01 00 00    	jne    c0006888 <f_mkdir+0x223>
c000668a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000668e:	bb 11 00 00 00       	mov    ebx,0x11
c0006693:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006697:	83 ec 0c             	sub    esp,0xc
c000669a:	68 60 04 00 00       	push   0x460
c000669f:	e8 f8 1d 00 00       	call   c000849c <ff_memalloc>
c00066a4:	83 c4 10             	add    esp,0x10
c00066a7:	89 c7                	mov    edi,eax
c00066a9:	85 c0                	test   eax,eax
c00066ab:	0f 84 d7 01 00 00    	je     c0006888 <f_mkdir+0x223>
c00066b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066b5:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066bb:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066be:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066c1:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c8:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066cc:	e8 9e e7 ff ff       	call   c0004e6f <follow_path>
c00066d1:	89 c3                	mov    ebx,eax
c00066d3:	85 c0                	test   eax,eax
c00066d5:	74 3e                	je     c0006715 <f_mkdir+0xb0>
c00066d7:	83 f8 04             	cmp    eax,0x4
c00066da:	75 3e                	jne    c000671a <f_mkdir+0xb5>
c00066dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066e0:	31 d2                	xor    edx,edx
c00066e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066e6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066ea:	e8 ce cb ff ff       	call   c00032bd <create_chain>
c00066ef:	89 c6                	mov    esi,eax
c00066f1:	85 c0                	test   eax,eax
c00066f3:	74 0c                	je     c0006701 <f_mkdir+0x9c>
c00066f5:	bb 02 00 00 00       	mov    ebx,0x2
c00066fa:	83 f8 01             	cmp    eax,0x1
c00066fd:	74 07                	je     c0006706 <f_mkdir+0xa1>
c00066ff:	eb 2a                	jmp    c000672b <f_mkdir+0xc6>
c0006701:	bb 07 00 00 00       	mov    ebx,0x7
c0006706:	31 c9                	xor    ecx,ecx
c0006708:	89 f2                	mov    edx,esi
c000670a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000670e:	e8 a9 cd ff ff       	call   c00034bc <remove_chain>
c0006713:	eb 05                	jmp    c000671a <f_mkdir+0xb5>
c0006715:	bb 08 00 00 00       	mov    ebx,0x8
c000671a:	83 ec 0c             	sub    esp,0xc
c000671d:	57                   	push   edi
c000671e:	e8 8f 1d 00 00       	call   c00084b2 <ff_memfree>
c0006723:	83 c4 10             	add    esp,0x10
c0006726:	e9 5d 01 00 00       	jmp    c0006888 <f_mkdir+0x223>
c000672b:	bb 01 00 00 00       	mov    ebx,0x1
c0006730:	83 f8 ff             	cmp    eax,0xffffffff
c0006733:	74 d1                	je     c0006706 <f_mkdir+0xa1>
c0006735:	89 f2                	mov    edx,esi
c0006737:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673b:	e8 c4 ce ff ff       	call   c0003604 <dir_clear>
c0006740:	89 c3                	mov    ebx,eax
c0006742:	85 c0                	test   eax,eax
c0006744:	75 c0                	jne    c0006706 <f_mkdir+0xa1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000674d:	74 69                	je     c00067b8 <f_mkdir+0x153>
c000674f:	b9 0b 00 00 00       	mov    ecx,0xb
c0006754:	83 c0 54             	add    eax,0x54
c0006757:	ba 20 00 00 00       	mov    edx,0x20
c000675c:	e8 9c b5 ff ff       	call   c0001cfd <mem_set>
c0006761:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006765:	ba 00 00 21 50       	mov    edx,0x50210000
c000676a:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000676e:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006772:	83 c0 6a             	add    eax,0x6a
c0006775:	e8 65 b5 ff ff       	call   c0001cdf <st_dword>
c000677a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000677e:	89 f1                	mov    ecx,esi
c0006780:	8d 50 54             	lea    edx,[eax+0x54]
c0006783:	e8 85 e6 ff ff       	call   c0004e0d <st_clust.isra.1>
c0006788:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678c:	b9 20 00 00 00       	mov    ecx,0x20
c0006791:	8d 50 54             	lea    edx,[eax+0x54]
c0006794:	83 c0 74             	add    eax,0x74
c0006797:	e8 4c b5 ff ff       	call   c0001ce8 <mem_cpy>
c000679c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a0:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00067a4:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a8:	8d 50 74             	lea    edx,[eax+0x74]
c00067ab:	e8 5d e6 ff ff       	call   c0004e0d <st_clust.isra.1>
c00067b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b4:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b8:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067bc:	e8 2f db ff ff       	call   c00042f0 <dir_register>
c00067c1:	89 c3                	mov    ebx,eax
c00067c3:	85 c0                	test   eax,eax
c00067c5:	0f 85 3b ff ff ff    	jne    c0006706 <f_mkdir+0xa1>
c00067cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cf:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067d2:	75 74                	jne    c0006848 <f_mkdir+0x1e3>
c00067d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d7:	ba 00 00 21 50       	mov    edx,0x50210000
c00067dc:	83 c0 0c             	add    eax,0xc
c00067df:	e8 fb b4 ff ff       	call   c0001cdf <st_dword>
c00067e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e8:	89 f2                	mov    edx,esi
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	83 c0 34             	add    eax,0x34
c00067f0:	e8 ea b4 ff ff       	call   c0001cdf <st_dword>
c00067f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f9:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067fd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006800:	c1 e2 09             	shl    edx,0x9
c0006803:	83 c0 38             	add    eax,0x38
c0006806:	e8 d4 b4 ff ff       	call   c0001cdf <st_dword>
c000680b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000680f:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006813:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006816:	c1 e2 09             	shl    edx,0x9
c0006819:	83 c0 28             	add    eax,0x28
c000681c:	e8 be b4 ff ff       	call   c0001cdf <st_dword>
c0006821:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006825:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006828:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000682c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000682f:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006833:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006837:	e8 8b d3 ff ff       	call   c0003bc7 <store_xdir>
c000683c:	89 c3                	mov    ebx,eax
c000683e:	85 c0                	test   eax,eax
c0006840:	0f 85 d4 fe ff ff    	jne    c000671a <f_mkdir+0xb5>
c0006846:	eb 30                	jmp    c0006878 <f_mkdir+0x213>
c0006848:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000684c:	ba 00 00 21 50       	mov    edx,0x50210000
c0006851:	83 c0 16             	add    eax,0x16
c0006854:	e8 86 b4 ff ff       	call   c0001cdf <st_dword>
c0006859:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000685d:	89 f1                	mov    ecx,esi
c000685f:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006863:	e8 a5 e5 ff ff       	call   c0004e0d <st_clust.isra.1>
c0006868:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000686c:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006878:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000687c:	e8 f1 dc ff ff       	call   c0004572 <sync_fs>
c0006881:	89 c3                	mov    ebx,eax
c0006883:	e9 92 fe ff ff       	jmp    c000671a <f_mkdir+0xb5>
c0006888:	83 ec 80             	sub    esp,0xffffff80
c000688b:	89 d8                	mov    eax,ebx
c000688d:	5b                   	pop    ebx
c000688e:	5e                   	pop    esi
c000688f:	5f                   	pop    edi
c0006890:	c3                   	ret    

c0006891 <f_rename>:
c0006891:	55                   	push   ebp
c0006892:	57                   	push   edi
c0006893:	56                   	push   esi
c0006894:	53                   	push   ebx
c0006895:	81 ec fc 00 00 00    	sub    esp,0xfc
c000689b:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00068a2:	e8 a4 b9 ff ff       	call   c000224b <get_ldnumber>
c00068a7:	b9 02 00 00 00       	mov    ecx,0x2
c00068ac:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068b0:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068b7:	e8 3d be ff ff       	call   c00026f9 <mount_volume>
c00068bc:	85 c0                	test   eax,eax
c00068be:	0f 85 b5 02 00 00    	jne    c0006b79 <f_rename+0x2e8>
c00068c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c8:	83 ec 0c             	sub    esp,0xc
c00068cb:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068cf:	68 60 04 00 00       	push   0x460
c00068d4:	e8 c3 1b 00 00       	call   c000849c <ff_memalloc>
c00068d9:	83 c4 10             	add    esp,0x10
c00068dc:	89 c3                	mov    ebx,eax
c00068de:	b8 11 00 00 00       	mov    eax,0x11
c00068e3:	85 db                	test   ebx,ebx
c00068e5:	0f 84 8e 02 00 00    	je     c0006b79 <f_rename+0x2e8>
c00068eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ef:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068f5:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068fb:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006902:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006906:	e8 64 e5 ff ff       	call   c0004e6f <follow_path>
c000690b:	85 c0                	test   eax,eax
c000690d:	0f 85 52 02 00 00    	jne    c0006b65 <f_rename+0x2d4>
c0006913:	b8 06 00 00 00       	mov    eax,0x6
c0006918:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006920:	0f 85 3f 02 00 00    	jne    c0006b65 <f_rename+0x2d4>
c0006926:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000692a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000692d:	0f 85 05 01 00 00    	jne    c0006a38 <f_rename+0x1a7>
c0006933:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006936:	b9 40 00 00 00       	mov    ecx,0x40
c000693b:	8d 44 24 18          	lea    eax,[esp+0x18]
c000693f:	e8 a4 b3 ff ff       	call   c0001ce8 <mem_cpy>
c0006944:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006949:	8d 54 24 58          	lea    edx,[esp+0x58]
c000694d:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006954:	e8 8f b3 ff ff       	call   c0001ce8 <mem_cpy>
c0006959:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 03 e5 ff ff       	call   c0004e6f <follow_path>
c000696c:	85 c0                	test   eax,eax
c000696e:	75 29                	jne    c0006999 <f_rename+0x108>
c0006970:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006974:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000697b:	74 0a                	je     c0006987 <f_rename+0xf6>
c000697d:	b8 08 00 00 00       	mov    eax,0x8
c0006982:	e9 de 01 00 00       	jmp    c0006b65 <f_rename+0x2d4>
c0006987:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000698e:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006995:	75 e6                	jne    c000697d <f_rename+0xec>
c0006997:	eb 09                	jmp    c00069a2 <f_rename+0x111>
c0006999:	83 f8 04             	cmp    eax,0x4
c000699c:	0f 85 c3 01 00 00    	jne    c0006b65 <f_rename+0x2d4>
c00069a2:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a9:	e8 42 d9 ff ff       	call   c00042f0 <dir_register>
c00069ae:	85 c0                	test   eax,eax
c00069b0:	0f 85 af 01 00 00    	jne    c0006b65 <f_rename+0x2d4>
c00069b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ba:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069bd:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069c0:	89 c5                	mov    ebp,eax
c00069c2:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069c5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c9:	8d 46 24             	lea    eax,[esi+0x24]
c00069cc:	e8 98 b2 ff ff       	call   c0001c69 <ld_word>
c00069d1:	b9 40 00 00 00       	mov    ecx,0x40
c00069d6:	89 c7                	mov    edi,eax
c00069d8:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069dc:	89 f0                	mov    eax,esi
c00069de:	e8 05 b3 ff ff       	call   c0001ce8 <mem_cpy>
c00069e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069e7:	89 e9                	mov    ecx,ebp
c00069e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069ec:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ef:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069f7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069fa:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069fd:	0f b7 d7             	movzx  edx,di
c0006a00:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a03:	83 c0 24             	add    eax,0x24
c0006a06:	e8 d0 b2 ff ff       	call   c0001cdb <st_word>
c0006a0b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a0f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a12:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a15:	a8 10                	test   al,0x10
c0006a17:	75 06                	jne    c0006a1f <f_rename+0x18e>
c0006a19:	83 c8 20             	or     eax,0x20
c0006a1c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a1f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a26:	e8 9c d1 ff ff       	call   c0003bc7 <store_xdir>
c0006a2b:	85 c0                	test   eax,eax
c0006a2d:	0f 84 1c 01 00 00    	je     c0006b4f <f_rename+0x2be>
c0006a33:	e9 2d 01 00 00       	jmp    c0006b65 <f_rename+0x2d4>
c0006a38:	b9 20 00 00 00       	mov    ecx,0x20
c0006a3d:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a44:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a48:	e8 9b b2 ff ff       	call   c0001ce8 <mem_cpy>
c0006a4d:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a52:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a56:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a5d:	e8 86 b2 ff ff       	call   c0001ce8 <mem_cpy>
c0006a62:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a69:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a70:	e8 fa e3 ff ff       	call   c0004e6f <follow_path>
c0006a75:	85 c0                	test   eax,eax
c0006a77:	75 27                	jne    c0006aa0 <f_rename+0x20f>
c0006a79:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a7d:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a84:	0f 85 f3 fe ff ff    	jne    c000697d <f_rename+0xec>
c0006a8a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a91:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a98:	0f 85 df fe ff ff    	jne    c000697d <f_rename+0xec>
c0006a9e:	eb 09                	jmp    c0006aa9 <f_rename+0x218>
c0006aa0:	83 f8 04             	cmp    eax,0x4
c0006aa3:	0f 85 bc 00 00 00    	jne    c0006b65 <f_rename+0x2d4>
c0006aa9:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006ab0:	e8 3b d8 ff ff       	call   c00042f0 <dir_register>
c0006ab5:	85 c0                	test   eax,eax
c0006ab7:	0f 85 a8 00 00 00    	jne    c0006b65 <f_rename+0x2d4>
c0006abd:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006ac4:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac9:	8d 46 0d             	lea    eax,[esi+0xd]
c0006acc:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ad0:	e8 13 b2 ff ff       	call   c0001ce8 <mem_cpy>
c0006ad5:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad9:	a8 10                	test   al,0x10
c0006adb:	75 03                	jne    c0006ae0 <f_rename+0x24f>
c0006add:	83 c8 20             	or     eax,0x20
c0006ae0:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006ae3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006ae7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aeb:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aef:	74 5e                	je     c0006b4f <f_rename+0x2be>
c0006af1:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af8:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006afc:	74 51                	je     c0006b4f <f_rename+0x2be>
c0006afe:	89 f2                	mov    edx,esi
c0006b00:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006b04:	8a 07                	mov    al,BYTE PTR [edi]
c0006b06:	e8 d9 e2 ff ff       	call   c0004de4 <ld_clust.isra.0>
c0006b0b:	89 c2                	mov    edx,eax
c0006b0d:	89 f8                	mov    eax,edi
c0006b0f:	e8 ee b3 ff ff       	call   c0001f02 <clst2sect>
c0006b14:	89 c6                	mov    esi,eax
c0006b16:	89 d1                	mov    ecx,edx
c0006b18:	b8 02 00 00 00       	mov    eax,0x2
c0006b1d:	09 f2                	or     edx,esi
c0006b1f:	74 44                	je     c0006b65 <f_rename+0x2d4>
c0006b21:	89 f2                	mov    edx,esi
c0006b23:	89 f8                	mov    eax,edi
c0006b25:	e8 1d b9 ff ff       	call   c0002447 <move_window>
c0006b2a:	85 c0                	test   eax,eax
c0006b2c:	75 37                	jne    c0006b65 <f_rename+0x2d4>
c0006b2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b32:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b36:	75 17                	jne    c0006b4f <f_rename+0x2be>
c0006b38:	8d 50 74             	lea    edx,[eax+0x74]
c0006b3b:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b42:	e8 c6 e2 ff ff       	call   c0004e0d <st_clust.isra.1>
c0006b47:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b4b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b4f:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b53:	e8 f4 d0 ff ff       	call   c0003c4c <dir_remove>
c0006b58:	85 c0                	test   eax,eax
c0006b5a:	75 09                	jne    c0006b65 <f_rename+0x2d4>
c0006b5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b60:	e8 0d da ff ff       	call   c0004572 <sync_fs>
c0006b65:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b69:	83 ec 0c             	sub    esp,0xc
c0006b6c:	53                   	push   ebx
c0006b6d:	e8 40 19 00 00       	call   c00084b2 <ff_memfree>
c0006b72:	83 c4 10             	add    esp,0x10
c0006b75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b79:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b7f:	5b                   	pop    ebx
c0006b80:	5e                   	pop    esi
c0006b81:	5f                   	pop    edi
c0006b82:	5d                   	pop    ebp
c0006b83:	c3                   	ret    

c0006b84 <f_chmod>:
c0006b84:	57                   	push   edi
c0006b85:	b9 02 00 00 00       	mov    ecx,0x2
c0006b8a:	56                   	push   esi
c0006b8b:	53                   	push   ebx
c0006b8c:	83 ec 60             	sub    esp,0x60
c0006b8f:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b93:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b97:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b9b:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b9f:	e8 55 bb ff ff       	call   c00026f9 <mount_volume>
c0006ba4:	85 c0                	test   eax,eax
c0006ba6:	0f 85 af 00 00 00    	jne    c0006c5b <f_chmod+0xd7>
c0006bac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb0:	83 ec 0c             	sub    esp,0xc
c0006bb3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006bb7:	68 60 04 00 00       	push   0x460
c0006bbc:	e8 db 18 00 00       	call   c000849c <ff_memalloc>
c0006bc1:	83 c4 10             	add    esp,0x10
c0006bc4:	89 c6                	mov    esi,eax
c0006bc6:	b8 11 00 00 00       	mov    eax,0x11
c0006bcb:	85 f6                	test   esi,esi
c0006bcd:	0f 84 88 00 00 00    	je     c0006c5b <f_chmod+0xd7>
c0006bd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bd7:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bdd:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006be0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006be3:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006be7:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006beb:	e8 7f e2 ff ff       	call   c0004e6f <follow_path>
c0006bf0:	85 c0                	test   eax,eax
c0006bf2:	75 53                	jne    c0006c47 <f_chmod+0xc3>
c0006bf4:	b8 06 00 00 00       	mov    eax,0x6
c0006bf9:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bfe:	75 47                	jne    c0006c47 <f_chmod+0xc3>
c0006c00:	89 f9                	mov    ecx,edi
c0006c02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c06:	83 e1 27             	and    ecx,0x27
c0006c09:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c0c:	75 1d                	jne    c0006c2b <f_chmod+0xa7>
c0006c0e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c11:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c14:	21 cb                	and    ebx,ecx
c0006c16:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c19:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c1c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c20:	e8 a2 cf ff ff       	call   c0003bc7 <store_xdir>
c0006c25:	85 c0                	test   eax,eax
c0006c27:	75 1e                	jne    c0006c47 <f_chmod+0xc3>
c0006c29:	eb 13                	jmp    c0006c3e <f_chmod+0xba>
c0006c2b:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c2f:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c32:	21 cb                	and    ebx,ecx
c0006c34:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c37:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c3a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c42:	e8 2b d9 ff ff       	call   c0004572 <sync_fs>
c0006c47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c4b:	83 ec 0c             	sub    esp,0xc
c0006c4e:	56                   	push   esi
c0006c4f:	e8 5e 18 00 00       	call   c00084b2 <ff_memfree>
c0006c54:	83 c4 10             	add    esp,0x10
c0006c57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c5b:	83 c4 60             	add    esp,0x60
c0006c5e:	5b                   	pop    ebx
c0006c5f:	5e                   	pop    esi
c0006c60:	5f                   	pop    edi
c0006c61:	c3                   	ret    

c0006c62 <f_utime>:
c0006c62:	56                   	push   esi
c0006c63:	b9 02 00 00 00       	mov    ecx,0x2
c0006c68:	53                   	push   ebx
c0006c69:	83 ec 64             	sub    esp,0x64
c0006c6c:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c70:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c74:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c78:	e8 7c ba ff ff       	call   c00026f9 <mount_volume>
c0006c7d:	85 c0                	test   eax,eax
c0006c7f:	0f 85 b5 00 00 00    	jne    c0006d3a <f_utime+0xd8>
c0006c85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c89:	83 ec 0c             	sub    esp,0xc
c0006c8c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c90:	68 60 04 00 00       	push   0x460
c0006c95:	e8 02 18 00 00       	call   c000849c <ff_memalloc>
c0006c9a:	83 c4 10             	add    esp,0x10
c0006c9d:	89 c3                	mov    ebx,eax
c0006c9f:	b8 11 00 00 00       	mov    eax,0x11
c0006ca4:	85 db                	test   ebx,ebx
c0006ca6:	0f 84 8e 00 00 00    	je     c0006d3a <f_utime+0xd8>
c0006cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cb0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cb6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cbc:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cc0:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cc4:	e8 a6 e1 ff ff       	call   c0004e6f <follow_path>
c0006cc9:	85 c0                	test   eax,eax
c0006ccb:	75 59                	jne    c0006d26 <f_utime+0xc4>
c0006ccd:	b8 06 00 00 00       	mov    eax,0x6
c0006cd2:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006cd7:	75 4d                	jne    c0006d26 <f_utime+0xc4>
c0006cd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdd:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006ce1:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ce5:	c1 e2 10             	shl    edx,0x10
c0006ce8:	09 ca                	or     edx,ecx
c0006cea:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ced:	75 1a                	jne    c0006d09 <f_utime+0xa7>
c0006cef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cf2:	83 c0 0c             	add    eax,0xc
c0006cf5:	e8 e5 af ff ff       	call   c0001cdf <st_dword>
c0006cfa:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cfe:	e8 c4 ce ff ff       	call   c0003bc7 <store_xdir>
c0006d03:	85 c0                	test   eax,eax
c0006d05:	75 1f                	jne    c0006d26 <f_utime+0xc4>
c0006d07:	eb 14                	jmp    c0006d1d <f_utime+0xbb>
c0006d09:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d0d:	83 c0 16             	add    eax,0x16
c0006d10:	e8 ca af ff ff       	call   c0001cdf <st_dword>
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d21:	e8 4c d8 ff ff       	call   c0004572 <sync_fs>
c0006d26:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d2a:	83 ec 0c             	sub    esp,0xc
c0006d2d:	53                   	push   ebx
c0006d2e:	e8 7f 17 00 00       	call   c00084b2 <ff_memfree>
c0006d33:	83 c4 10             	add    esp,0x10
c0006d36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d3a:	83 c4 64             	add    esp,0x64
c0006d3d:	5b                   	pop    ebx
c0006d3e:	5e                   	pop    esi
c0006d3f:	c3                   	ret    

c0006d40 <f_getlabel>:
c0006d40:	55                   	push   ebp
c0006d41:	31 c9                	xor    ecx,ecx
c0006d43:	57                   	push   edi
c0006d44:	56                   	push   esi
c0006d45:	53                   	push   ebx
c0006d46:	83 ec 6c             	sub    esp,0x6c
c0006d49:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d4d:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d54:	e8 a0 b9 ff ff       	call   c00026f9 <mount_volume>
c0006d59:	89 c6                	mov    esi,eax
c0006d5b:	85 c0                	test   eax,eax
c0006d5d:	0f 85 c1 01 00 00    	jne    c0006f24 <f_getlabel+0x1e4>
c0006d63:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d6b:	0f 84 5f 01 00 00    	je     c0006ed0 <f_getlabel+0x190>
c0006d71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d75:	31 d2                	xor    edx,edx
c0006d77:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d7b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d83:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d87:	e8 39 c4 ff ff       	call   c00031c5 <dir_sdi>
c0006d8c:	85 c0                	test   eax,eax
c0006d8e:	0f 85 2d 01 00 00    	jne    c0006ec1 <f_getlabel+0x181>
c0006d94:	ba 01 00 00 00       	mov    edx,0x1
c0006d99:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d9d:	e8 33 cc ff ff       	call   c00039d5 <dir_read>
c0006da2:	85 c0                	test   eax,eax
c0006da4:	0f 85 17 01 00 00    	jne    c0006ec1 <f_getlabel+0x181>
c0006daa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dae:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006db1:	74 09                	je     c0006dbc <f_getlabel+0x7c>
c0006db3:	31 db                	xor    ebx,ebx
c0006db5:	31 c9                	xor    ecx,ecx
c0006db7:	e9 c8 00 00 00       	jmp    c0006e84 <f_getlabel+0x144>
c0006dbc:	31 ed                	xor    ebp,ebp
c0006dbe:	31 db                	xor    ebx,ebx
c0006dc0:	31 ff                	xor    edi,edi
c0006dc2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dc6:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dca:	39 fa                	cmp    edx,edi
c0006dcc:	76 4b                	jbe    c0006e19 <f_getlabel+0xd9>
c0006dce:	47                   	inc    edi
c0006dcf:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dd2:	01 d0                	add    eax,edx
c0006dd4:	e8 90 ae ff ff       	call   c0001c69 <ld_word>
c0006dd9:	66 85 ed             	test   bp,bp
c0006ddc:	75 0d                	jne    c0006deb <f_getlabel+0xab>
c0006dde:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006de4:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de9:	76 28                	jbe    c0006e13 <f_getlabel+0xd3>
c0006deb:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006df2:	89 e9                	mov    ecx,ebp
c0006df4:	01 da                	add    edx,ebx
c0006df6:	c1 e1 10             	shl    ecx,0x10
c0006df9:	0f b7 c0             	movzx  eax,ax
c0006dfc:	09 c8                	or     eax,ecx
c0006dfe:	b9 04 00 00 00       	mov    ecx,0x4
c0006e03:	e8 01 b0 ff ff       	call   c0001e09 <put_utf>
c0006e08:	84 c0                	test   al,al
c0006e0a:	74 0b                	je     c0006e17 <f_getlabel+0xd7>
c0006e0c:	0f b6 c0             	movzx  eax,al
c0006e0f:	01 c3                	add    ebx,eax
c0006e11:	31 c0                	xor    eax,eax
c0006e13:	89 c5                	mov    ebp,eax
c0006e15:	eb ab                	jmp    c0006dc2 <f_getlabel+0x82>
c0006e17:	31 db                	xor    ebx,ebx
c0006e19:	66 85 ed             	test   bp,bp
c0006e1c:	74 02                	je     c0006e20 <f_getlabel+0xe0>
c0006e1e:	31 db                	xor    ebx,ebx
c0006e20:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e27:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e2b:	e9 a0 00 00 00       	jmp    c0006ed0 <f_getlabel+0x190>
c0006e30:	83 ff 0b             	cmp    edi,0xb
c0006e33:	74 11                	je     c0006e46 <f_getlabel+0x106>
c0006e35:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e3e:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e41:	c1 e0 08             	shl    eax,0x8
c0006e44:	09 c2                	or     edx,eax
c0006e46:	0f b7 d2             	movzx  edx,dx
c0006e49:	50                   	push   eax
c0006e4a:	50                   	push   eax
c0006e4b:	68 b5 01 00 00       	push   0x1b5
c0006e50:	52                   	push   edx
c0006e51:	e8 03 17 00 00       	call   c0008559 <ff_oem2uni>
c0006e56:	83 c4 10             	add    esp,0x10
c0006e59:	66 85 c0             	test   ax,ax
c0006e5c:	74 46                	je     c0006ea4 <f_getlabel+0x164>
c0006e5e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e65:	0f b7 c0             	movzx  eax,ax
c0006e68:	01 da                	add    edx,ebx
c0006e6a:	b9 04 00 00 00       	mov    ecx,0x4
c0006e6f:	e8 95 af ff ff       	call   c0001e09 <put_utf>
c0006e74:	84 c0                	test   al,al
c0006e76:	74 2c                	je     c0006ea4 <f_getlabel+0x164>
c0006e78:	0f b6 c0             	movzx  eax,al
c0006e7b:	01 c3                	add    ebx,eax
c0006e7d:	83 ff 0b             	cmp    edi,0xb
c0006e80:	74 24                	je     c0006ea6 <f_getlabel+0x166>
c0006e82:	89 f9                	mov    ecx,edi
c0006e84:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e88:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e8b:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e90:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e99:	e8 9f ae ff ff       	call   c0001d3d <dbc_1st>
c0006e9e:	85 c0                	test   eax,eax
c0006ea0:	74 a4                	je     c0006e46 <f_getlabel+0x106>
c0006ea2:	eb 8c                	jmp    c0006e30 <f_getlabel+0xf0>
c0006ea4:	31 db                	xor    ebx,ebx
c0006ea6:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ead:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006eb0:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eb7:	74 17                	je     c0006ed0 <f_getlabel+0x190>
c0006eb9:	4b                   	dec    ebx
c0006eba:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006ebd:	74 ee                	je     c0006ead <f_getlabel+0x16d>
c0006ebf:	eb 0f                	jmp    c0006ed0 <f_getlabel+0x190>
c0006ec1:	83 f8 04             	cmp    eax,0x4
c0006ec4:	75 5c                	jne    c0006f22 <f_getlabel+0x1e2>
c0006ec6:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ecd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ed0:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed8:	74 4a                	je     c0006f24 <f_getlabel+0x1e4>
c0006eda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ede:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ee1:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ee4:	e8 5e b5 ff ff       	call   c0002447 <move_window>
c0006ee9:	89 c6                	mov    esi,eax
c0006eeb:	85 c0                	test   eax,eax
c0006eed:	75 35                	jne    c0006f24 <f_getlabel+0x1e4>
c0006eef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006ef3:	b8 43 00 00 00       	mov    eax,0x43
c0006ef8:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006efa:	80 f9 03             	cmp    cl,0x3
c0006efd:	74 0f                	je     c0006f0e <f_getlabel+0x1ce>
c0006eff:	31 c0                	xor    eax,eax
c0006f01:	80 f9 04             	cmp    cl,0x4
c0006f04:	0f 94 c0             	sete   al
c0006f07:	48                   	dec    eax
c0006f08:	83 e0 c3             	and    eax,0xffffffc3
c0006f0b:	83 c0 64             	add    eax,0x64
c0006f0e:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f12:	e8 5f ad ff ff       	call   c0001c76 <ld_dword>
c0006f17:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f1e:	89 07                	mov    DWORD PTR [edi],eax
c0006f20:	eb 02                	jmp    c0006f24 <f_getlabel+0x1e4>
c0006f22:	89 c6                	mov    esi,eax
c0006f24:	83 c4 6c             	add    esp,0x6c
c0006f27:	89 f0                	mov    eax,esi
c0006f29:	5b                   	pop    ebx
c0006f2a:	5e                   	pop    esi
c0006f2b:	5f                   	pop    edi
c0006f2c:	5d                   	pop    ebp
c0006f2d:	c3                   	ret    

c0006f2e <f_setlabel>:
c0006f2e:	56                   	push   esi
c0006f2f:	b9 02 00 00 00       	mov    ecx,0x2
c0006f34:	53                   	push   ebx
c0006f35:	83 ec 74             	sub    esp,0x74
c0006f38:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f3c:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f43:	e8 b1 b7 ff ff       	call   c00026f9 <mount_volume>
c0006f48:	89 c6                	mov    esi,eax
c0006f4a:	85 c0                	test   eax,eax
c0006f4c:	0f 85 41 02 00 00    	jne    c0007193 <f_setlabel+0x265>
c0006f52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f56:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f59:	0f 85 8e 00 00 00    	jne    c0006fed <f_setlabel+0xbf>
c0006f5f:	b9 16 00 00 00       	mov    ecx,0x16
c0006f64:	31 d2                	xor    edx,edx
c0006f66:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f6a:	31 db                	xor    ebx,ebx
c0006f6c:	e8 8c ad ff ff       	call   c0001cfd <mem_set>
c0006f71:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f78:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f7b:	0f 86 0a 01 00 00    	jbe    c000708b <f_setlabel+0x15d>
c0006f81:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f88:	e8 b6 ad ff ff       	call   c0001d43 <tchar2uni>
c0006f8d:	89 c6                	mov    esi,eax
c0006f8f:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f94:	76 2a                	jbe    c0006fc0 <f_setlabel+0x92>
c0006f96:	83 f8 ff             	cmp    eax,0xffffffff
c0006f99:	74 05                	je     c0006fa0 <f_setlabel+0x72>
c0006f9b:	83 fb 09             	cmp    ebx,0x9
c0006f9e:	76 0a                	jbe    c0006faa <f_setlabel+0x7c>
c0006fa0:	be 06 00 00 00       	mov    esi,0x6
c0006fa5:	e9 e9 01 00 00       	jmp    c0007193 <f_setlabel+0x265>
c0006faa:	89 c2                	mov    edx,eax
c0006fac:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fb0:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fb3:	c1 ea 10             	shr    edx,0x10
c0006fb6:	01 c8                	add    eax,ecx
c0006fb8:	43                   	inc    ebx
c0006fb9:	e8 1d ad ff ff       	call   c0001cdb <st_word>
c0006fbe:	eb 04                	jmp    c0006fc4 <f_setlabel+0x96>
c0006fc0:	85 c0                	test   eax,eax
c0006fc2:	74 dc                	je     c0006fa0 <f_setlabel+0x72>
c0006fc4:	89 f2                	mov    edx,esi
c0006fc6:	b8 f7 94 02 c0       	mov    eax,0xc00294f7
c0006fcb:	e8 5b ad ff ff       	call   c0001d2b <chk_chr>
c0006fd0:	85 c0                	test   eax,eax
c0006fd2:	75 cc                	jne    c0006fa0 <f_setlabel+0x72>
c0006fd4:	83 fb 0a             	cmp    ebx,0xa
c0006fd7:	77 c7                	ja     c0006fa0 <f_setlabel+0x72>
c0006fd9:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fdc:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fe0:	0f b7 d6             	movzx  edx,si
c0006fe3:	01 c8                	add    eax,ecx
c0006fe5:	43                   	inc    ebx
c0006fe6:	e8 f0 ac ff ff       	call   c0001cdb <st_word>
c0006feb:	eb 84                	jmp    c0006f71 <f_setlabel+0x43>
c0006fed:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ff2:	ba 20 00 00 00       	mov    edx,0x20
c0006ff7:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ffb:	31 db                	xor    ebx,ebx
c0006ffd:	e8 fb ac ff ff       	call   c0001cfd <mem_set>
c0007002:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007009:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000700c:	76 60                	jbe    c000706e <f_setlabel+0x140>
c000700e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0007015:	e8 29 ad ff ff       	call   c0001d43 <tchar2uni>
c000701a:	3d ff ff 00 00       	cmp    eax,0xffff
c000701f:	0f 87 7b ff ff ff    	ja     c0006fa0 <f_setlabel+0x72>
c0007025:	83 ec 0c             	sub    esp,0xc
c0007028:	50                   	push   eax
c0007029:	e8 97 15 00 00       	call   c00085c5 <ff_wtoupper>
c000702e:	5a                   	pop    edx
c000702f:	59                   	pop    ecx
c0007030:	68 b5 01 00 00       	push   0x1b5
c0007035:	50                   	push   eax
c0007036:	e8 8e 14 00 00       	call   c00084c9 <ff_uni2oem>
c000703b:	83 c4 10             	add    esp,0x10
c000703e:	89 c6                	mov    esi,eax
c0007040:	66 85 c0             	test   ax,ax
c0007043:	0f 84 57 ff ff ff    	je     c0006fa0 <f_setlabel+0x72>
c0007049:	0f b7 d0             	movzx  edx,ax
c000704c:	b8 f0 94 02 c0       	mov    eax,0xc00294f0
c0007051:	e8 d5 ac ff ff       	call   c0001d2b <chk_chr>
c0007056:	85 c0                	test   eax,eax
c0007058:	0f 85 42 ff ff ff    	jne    c0006fa0 <f_setlabel+0x72>
c000705e:	66 81 fe ff 00       	cmp    si,0xff
c0007063:	0f 87 14 01 00 00    	ja     c000717d <f_setlabel+0x24f>
c0007069:	e9 fa 00 00 00       	jmp    c0007168 <f_setlabel+0x23a>
c000706e:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007073:	0f 84 27 ff ff ff    	je     c0006fa0 <f_setlabel+0x72>
c0007079:	85 db                	test   ebx,ebx
c000707b:	74 0e                	je     c000708b <f_setlabel+0x15d>
c000707d:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007080:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007085:	75 04                	jne    c000708b <f_setlabel+0x15d>
c0007087:	89 c3                	mov    ebx,eax
c0007089:	eb ee                	jmp    c0007079 <f_setlabel+0x14b>
c000708b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000708f:	31 d2                	xor    edx,edx
c0007091:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007095:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000709d:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070a1:	e8 1f c1 ff ff       	call   c00031c5 <dir_sdi>
c00070a6:	89 c6                	mov    esi,eax
c00070a8:	85 c0                	test   eax,eax
c00070aa:	0f 85 e3 00 00 00    	jne    c0007193 <f_setlabel+0x265>
c00070b0:	ba 01 00 00 00       	mov    edx,0x1
c00070b5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b9:	e8 17 c9 ff ff       	call   c00039d5 <dir_read>
c00070be:	85 c0                	test   eax,eax
c00070c0:	75 21                	jne    c00070e3 <f_setlabel+0x1b5>
c00070c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070c6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ca:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070cd:	74 5d                	je     c000712c <f_setlabel+0x1fe>
c00070cf:	85 db                	test   ebx,ebx
c00070d1:	74 0b                	je     c00070de <f_setlabel+0x1b0>
c00070d3:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d8:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070dc:	eb 70                	jmp    c000714e <f_setlabel+0x220>
c00070de:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070e1:	eb 70                	jmp    c0007153 <f_setlabel+0x225>
c00070e3:	83 f8 04             	cmp    eax,0x4
c00070e6:	75 7c                	jne    c0007164 <f_setlabel+0x236>
c00070e8:	85 db                	test   ebx,ebx
c00070ea:	0f 84 a3 00 00 00    	je     c0007193 <f_setlabel+0x265>
c00070f0:	ba 01 00 00 00       	mov    edx,0x1
c00070f5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f9:	e8 51 ca ff ff       	call   c0003b4f <dir_alloc>
c00070fe:	89 c6                	mov    esi,eax
c0007100:	85 c0                	test   eax,eax
c0007102:	0f 85 8b 00 00 00    	jne    c0007193 <f_setlabel+0x265>
c0007108:	31 d2                	xor    edx,edx
c000710a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710e:	b9 20 00 00 00       	mov    ecx,0x20
c0007113:	e8 e5 ab ff ff       	call   c0001cfd <mem_set>
c0007118:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000711f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007123:	75 18                	jne    c000713d <f_setlabel+0x20f>
c0007125:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007128:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000712c:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c000712f:	b9 16 00 00 00       	mov    ecx,0x16
c0007134:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007138:	83 c0 02             	add    eax,0x2
c000713b:	eb 9b                	jmp    c00070d8 <f_setlabel+0x1aa>
c000713d:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007141:	b9 0b 00 00 00       	mov    ecx,0xb
c0007146:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000714a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000714e:	e8 95 ab ff ff       	call   c0001ce8 <mem_cpy>
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000715b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000715f:	e8 0e d4 ff ff       	call   c0004572 <sync_fs>
c0007164:	89 c6                	mov    esi,eax
c0007166:	eb 2b                	jmp    c0007193 <f_setlabel+0x265>
c0007168:	83 fb 0a             	cmp    ebx,0xa
c000716b:	0f 87 2f fe ff ff    	ja     c0006fa0 <f_setlabel+0x72>
c0007171:	89 f0                	mov    eax,esi
c0007173:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007177:	43                   	inc    ebx
c0007178:	e9 85 fe ff ff       	jmp    c0007002 <f_setlabel+0xd4>
c000717d:	83 fb 09             	cmp    ebx,0x9
c0007180:	0f 87 1a fe ff ff    	ja     c0006fa0 <f_setlabel+0x72>
c0007186:	89 f0                	mov    eax,esi
c0007188:	66 c1 e8 08          	shr    ax,0x8
c000718c:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007190:	43                   	inc    ebx
c0007191:	eb de                	jmp    c0007171 <f_setlabel+0x243>
c0007193:	89 f0                	mov    eax,esi
c0007195:	83 c4 74             	add    esp,0x74
c0007198:	5b                   	pop    ebx
c0007199:	5e                   	pop    esi
c000719a:	c3                   	ret    

c000719b <f_forward>:
c000719b:	55                   	push   ebp
c000719c:	57                   	push   edi
c000719d:	56                   	push   esi
c000719e:	53                   	push   ebx
c000719f:	83 ec 2c             	sub    esp,0x2c
c00071a2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00071a6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071aa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071b0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071b4:	89 d8                	mov    eax,ebx
c00071b6:	e8 b1 b1 ff ff       	call   c000236c <validate>
c00071bb:	89 c5                	mov    ebp,eax
c00071bd:	85 c0                	test   eax,eax
c00071bf:	0f 85 aa 01 00 00    	jne    c000736f <f_forward+0x1d4>
c00071c5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c9:	85 ed                	test   ebp,ebp
c00071cb:	0f 85 9e 01 00 00    	jne    c000736f <f_forward+0x1d4>
c00071d1:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071d5:	0f 84 8f 01 00 00    	je     c000736a <f_forward+0x1cf>
c00071db:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071de:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071e1:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071e4:	bf 00 00 00 00       	mov    edi,0x0
c00071e9:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071ec:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071f0:	89 d1                	mov    ecx,edx
c00071f2:	19 f9                	sbb    ecx,edi
c00071f4:	0f 83 cf 00 00 00    	jae    c00072c9 <f_forward+0x12e>
c00071fa:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071fe:	e9 c6 00 00 00       	jmp    c00072c9 <f_forward+0x12e>
c0007203:	50                   	push   eax
c0007204:	50                   	push   eax
c0007205:	6a 00                	push   0x0
c0007207:	6a 00                	push   0x0
c0007209:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000720d:	83 c4 10             	add    esp,0x10
c0007210:	85 c0                	test   eax,eax
c0007212:	0f 84 57 01 00 00    	je     c000736f <f_forward+0x1d4>
c0007218:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000721b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000721f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007222:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007226:	89 d7                	mov    edi,edx
c0007228:	8d 4e ff             	lea    ecx,[esi-0x1]
c000722b:	89 c6                	mov    esi,eax
c000722d:	0f ac fe 09          	shrd   esi,edi,0x9
c0007231:	21 ce                	and    esi,ecx
c0007233:	89 c1                	mov    ecx,eax
c0007235:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000723b:	0f 84 98 00 00 00    	je     c00072d9 <f_forward+0x13e>
c0007241:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007245:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007248:	89 c8                	mov    eax,ecx
c000724a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000724e:	e8 af ac ff ff       	call   c0001f02 <clst2sect>
c0007253:	89 d7                	mov    edi,edx
c0007255:	09 c7                	or     edi,eax
c0007257:	0f 84 9e 00 00 00    	je     c00072fb <f_forward+0x160>
c000725d:	31 ff                	xor    edi,edi
c000725f:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007262:	01 c6                	add    esi,eax
c0007264:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007268:	11 d7                	adc    edi,edx
c000726a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000726d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007270:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007274:	39 fa                	cmp    edx,edi
c0007276:	0f 85 a2 00 00 00    	jne    c000731e <f_forward+0x183>
c000727c:	39 f0                	cmp    eax,esi
c000727e:	0f 85 9a 00 00 00    	jne    c000731e <f_forward+0x183>
c0007284:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007287:	ba 00 02 00 00       	mov    edx,0x200
c000728c:	25 ff 01 00 00       	and    eax,0x1ff
c0007291:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007295:	29 c2                	sub    edx,eax
c0007297:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000729a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000729d:	39 d1                	cmp    ecx,edx
c000729f:	76 02                	jbe    c00072a3 <f_forward+0x108>
c00072a1:	89 d1                	mov    ecx,edx
c00072a3:	8d 73 50             	lea    esi,[ebx+0x50]
c00072a6:	52                   	push   edx
c00072a7:	01 c6                	add    esi,eax
c00072a9:	52                   	push   edx
c00072aa:	51                   	push   ecx
c00072ab:	56                   	push   esi
c00072ac:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072b0:	83 c4 10             	add    esp,0x10
c00072b3:	85 c0                	test   eax,eax
c00072b5:	74 44                	je     c00072fb <f_forward+0x160>
c00072b7:	31 ff                	xor    edi,edi
c00072b9:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072bc:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072bf:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072c3:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072c7:	01 07                	add    DWORD PTR [edi],eax
c00072c9:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072ce:	0f 85 2f ff ff ff    	jne    c0007203 <f_forward+0x68>
c00072d4:	e9 96 00 00 00       	jmp    c000736f <f_forward+0x1d4>
c00072d9:	85 f6                	test   esi,esi
c00072db:	0f 85 60 ff ff ff    	jne    c0007241 <f_forward+0xa6>
c00072e1:	89 d7                	mov    edi,edx
c00072e3:	09 c7                	or     edi,eax
c00072e5:	75 05                	jne    c00072ec <f_forward+0x151>
c00072e7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072ea:	eb 0a                	jmp    c00072f6 <f_forward+0x15b>
c00072ec:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ef:	89 d8                	mov    eax,ebx
c00072f1:	e8 d9 bc ff ff       	call   c0002fcf <get_fat>
c00072f6:	83 f8 01             	cmp    eax,0x1
c00072f9:	77 0b                	ja     c0007306 <f_forward+0x16b>
c00072fb:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072ff:	bd 02 00 00 00       	mov    ebp,0x2
c0007304:	eb 69                	jmp    c000736f <f_forward+0x1d4>
c0007306:	83 f8 ff             	cmp    eax,0xffffffff
c0007309:	75 0b                	jne    c0007316 <f_forward+0x17b>
c000730b:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000730f:	bd 01 00 00 00       	mov    ebp,0x1
c0007314:	eb 59                	jmp    c000736f <f_forward+0x1d4>
c0007316:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007319:	e9 23 ff ff ff       	jmp    c0007241 <f_forward+0xa6>
c000731e:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007322:	79 20                	jns    c0007344 <f_forward+0x1a9>
c0007324:	83 ec 0c             	sub    esp,0xc
c0007327:	6a 01                	push   0x1
c0007329:	52                   	push   edx
c000732a:	50                   	push   eax
c000732b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000732f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007333:	50                   	push   eax
c0007334:	e8 fb a8 ff ff       	call   c0001c34 <disk_write>
c0007339:	83 c4 20             	add    esp,0x20
c000733c:	85 c0                	test   eax,eax
c000733e:	75 cb                	jne    c000730b <f_forward+0x170>
c0007340:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007344:	83 ec 0c             	sub    esp,0xc
c0007347:	6a 01                	push   0x1
c0007349:	57                   	push   edi
c000734a:	56                   	push   esi
c000734b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000734f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007353:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007357:	50                   	push   eax
c0007358:	e8 c1 a8 ff ff       	call   c0001c1e <disk_read>
c000735d:	83 c4 20             	add    esp,0x20
c0007360:	85 c0                	test   eax,eax
c0007362:	0f 84 1c ff ff ff    	je     c0007284 <f_forward+0xe9>
c0007368:	eb a1                	jmp    c000730b <f_forward+0x170>
c000736a:	bd 07 00 00 00       	mov    ebp,0x7
c000736f:	83 c4 2c             	add    esp,0x2c
c0007372:	89 e8                	mov    eax,ebp
c0007374:	5b                   	pop    ebx
c0007375:	5e                   	pop    esi
c0007376:	5f                   	pop    edi
c0007377:	5d                   	pop    ebp
c0007378:	c3                   	ret    

c0007379 <f_mkfs>:
c0007379:	55                   	push   ebp
c000737a:	57                   	push   edi
c000737b:	56                   	push   esi
c000737c:	53                   	push   ebx
c000737d:	bb 0b 00 00 00       	mov    ebx,0xb
c0007382:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007388:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000738f:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007396:	e8 b0 ae ff ff       	call   c000224b <get_ldnumber>
c000739b:	85 c0                	test   eax,eax
c000739d:	0f 88 ec 10 00 00    	js     c000848f <f_mkfs+0x1116>
c00073a3:	8b 14 85 60 e5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1aa0]
c00073aa:	85 d2                	test   edx,edx
c00073ac:	74 03                	je     c00073b1 <f_mkfs+0x38>
c00073ae:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073b1:	85 f6                	test   esi,esi
c00073b3:	75 05                	jne    c00073ba <f_mkfs+0x41>
c00073b5:	be e0 94 02 c0       	mov    esi,0xc00294e0
c00073ba:	83 ec 0c             	sub    esp,0xc
c00073bd:	0f b6 c0             	movzx  eax,al
c00073c0:	bb 03 00 00 00       	mov    ebx,0x3
c00073c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073cd:	e8 49 a8 ff ff       	call   c0001c1b <disk_initialize>
c00073d2:	83 c4 10             	add    esp,0x10
c00073d5:	a8 01                	test   al,0x1
c00073d7:	0f 85 b2 10 00 00    	jne    c000848f <f_mkfs+0x1116>
c00073dd:	bb 0a 00 00 00       	mov    ebx,0xa
c00073e2:	a8 04                	test   al,0x4
c00073e4:	0f 85 a5 10 00 00    	jne    c000848f <f_mkfs+0x1116>
c00073ea:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ed:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073f1:	85 c0                	test   eax,eax
c00073f3:	75 20                	jne    c0007415 <f_mkfs+0x9c>
c00073f5:	51                   	push   ecx
c00073f6:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073fa:	50                   	push   eax
c00073fb:	6a 03                	push   0x3
c00073fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007401:	e8 44 a8 ff ff       	call   c0001c4a <disk_ioctl>
c0007406:	83 c4 10             	add    esp,0x10
c0007409:	85 c0                	test   eax,eax
c000740b:	74 08                	je     c0007415 <f_mkfs+0x9c>
c000740d:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007415:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007419:	8d 42 ff             	lea    eax,[edx-0x1]
c000741c:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007421:	77 04                	ja     c0007427 <f_mkfs+0xae>
c0007423:	85 c2                	test   edx,eax
c0007425:	74 08                	je     c000742f <f_mkfs+0xb6>
c0007427:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000742f:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007432:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007436:	48                   	dec    eax
c0007437:	3c 01                	cmp    al,0x1
c0007439:	76 05                	jbe    c0007440 <f_mkfs+0xc7>
c000743b:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007440:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007447:	48                   	dec    eax
c0007448:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000744d:	77 07                	ja     c0007456 <f_mkfs+0xdd>
c000744f:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007454:	74 08                	je     c000745e <f_mkfs+0xe5>
c0007456:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000745e:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007461:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007467:	77 07                	ja     c0007470 <f_mkfs+0xf7>
c0007469:	8d 43 ff             	lea    eax,[ebx-0x1]
c000746c:	85 d8                	test   eax,ebx
c000746e:	74 02                	je     c0007472 <f_mkfs+0xf9>
c0007470:	31 db                	xor    ebx,ebx
c0007472:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000747d:	77 0a                	ja     c0007489 <f_mkfs+0x110>
c000747f:	bb 11 00 00 00       	mov    ebx,0x11
c0007484:	e9 06 10 00 00       	jmp    c000848f <f_mkfs+0x1116>
c0007489:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007490:	8b 36                	mov    esi,DWORD PTR [esi]
c0007492:	85 ed                	test   ebp,ebp
c0007494:	75 1e                	jne    c00074b4 <f_mkfs+0x13b>
c0007496:	83 ec 0c             	sub    esp,0xc
c0007499:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00074a0:	25 00 fe ff ff       	and    eax,0xfffffe00
c00074a5:	50                   	push   eax
c00074a6:	e8 f1 0f 00 00       	call   c000849c <ff_memalloc>
c00074ab:	83 c4 10             	add    esp,0x10
c00074ae:	89 c5                	mov    ebp,eax
c00074b0:	85 c0                	test   eax,eax
c00074b2:	74 cb                	je     c000747f <f_mkfs+0x106>
c00074b4:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074bc:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074c4:	52                   	push   edx
c00074c5:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c9:	50                   	push   eax
c00074ca:	6a 01                	push   0x1
c00074cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074d0:	e8 75 a7 ff ff       	call   c0001c4a <disk_ioctl>
c00074d5:	83 c4 10             	add    esp,0x10
c00074d8:	85 c0                	test   eax,eax
c00074da:	0f 85 4a 0f 00 00    	jne    c000842a <f_mkfs+0x10b1>
c00074e0:	89 f1                	mov    ecx,esi
c00074e2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074ea:	83 e1 0f             	and    ecx,0xf
c00074ed:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074f5:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f9:	83 e6 08             	and    esi,0x8
c00074fc:	75 56                	jne    c0007554 <f_mkfs+0x1db>
c00074fe:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007502:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c0007506:	83 ff 00             	cmp    edi,0x0
c0007509:	76 20                	jbe    c000752b <f_mkfs+0x1b2>
c000750b:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007510:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007518:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c000751e:	83 d7 ff             	adc    edi,0xffffffff
c0007521:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007525:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007529:	eb 21                	jmp    c000754c <f_mkfs+0x1d3>
c000752b:	ba 3f 00 00 00       	mov    edx,0x3f
c0007530:	39 f2                	cmp    edx,esi
c0007532:	19 f8                	sbb    eax,edi
c0007534:	73 1e                	jae    c0007554 <f_mkfs+0x1db>
c0007536:	83 c6 c1             	add    esi,0xffffffc1
c0007539:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007541:	83 d7 ff             	adc    edi,0xffffffff
c0007544:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007548:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000754c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007554:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007558:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000755c:	89 04 24             	mov    DWORD PTR [esp],eax
c000755f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007563:	31 c0                	xor    eax,eax
c0007565:	ba 7f 00 00 00       	mov    edx,0x7f
c000756a:	89 c7                	mov    edi,eax
c000756c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000756f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007573:	0f 83 c5 0a 00 00    	jae    c000803e <f_mkfs+0xcc5>
c0007579:	89 df                	mov    edi,ebx
c000757b:	c1 ef 09             	shr    edi,0x9
c000757e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007582:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007589:	c1 ef 09             	shr    edi,0x9
c000758c:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007591:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007595:	74 29                	je     c00075c0 <f_mkfs+0x247>
c0007597:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000759d:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00075a2:	0f 97 c2             	seta   dl
c00075a5:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a8:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075ac:	0f 92 c0             	setb   al
c00075af:	08 c2                	or     dl,al
c00075b1:	75 5b                	jne    c000760e <f_mkfs+0x295>
c00075b3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075b7:	83 e0 07             	and    eax,0x7
c00075ba:	3c 04                	cmp    al,0x4
c00075bc:	74 50                	je     c000760e <f_mkfs+0x295>
c00075be:	eb 1b                	jmp    c00075db <f_mkfs+0x262>
c00075c0:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075c5:	0f 87 73 0a 00 00    	ja     c000803e <f_mkfs+0xcc5>
c00075cb:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075d1:	76 08                	jbe    c00075db <f_mkfs+0x262>
c00075d3:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075db:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075df:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075e3:	83 e0 01             	and    eax,0x1
c00075e6:	80 e1 02             	and    cl,0x2
c00075e9:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ed:	74 0d                	je     c00075fc <f_mkfs+0x283>
c00075ef:	84 c0                	test   al,al
c00075f1:	0f 84 53 09 00 00    	je     c0007f4a <f_mkfs+0xbd1>
c00075f7:	e9 12 08 00 00       	jmp    c0007e0e <f_mkfs+0xa95>
c00075fc:	bb 13 00 00 00       	mov    ebx,0x13
c0007601:	84 c0                	test   al,al
c0007603:	0f 85 05 08 00 00    	jne    c0007e0e <f_mkfs+0xa95>
c0007609:	e9 39 0e 00 00       	jmp    c0008447 <f_mkfs+0x10ce>
c000760e:	31 c0                	xor    eax,eax
c0007610:	ba ff 0f 00 00       	mov    edx,0xfff
c0007615:	89 c7                	mov    edi,eax
c0007617:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000761a:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000761e:	0f 83 1a 0a 00 00    	jae    c000803e <f_mkfs+0xcc5>
c0007624:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000762a:	77 39                	ja     c0007665 <f_mkfs+0x2ec>
c000762c:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007631:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007639:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000763c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007640:	73 08                	jae    c000764a <f_mkfs+0x2d1>
c0007642:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000764a:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000764f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007652:	b8 00 00 00 00       	mov    eax,0x0
c0007657:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000765b:	73 08                	jae    c0007665 <f_mkfs+0x2ec>
c000765d:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007665:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007669:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000766d:	83 c0 20             	add    eax,0x20
c0007670:	83 d2 00             	adc    edx,0x0
c0007673:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007677:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000767b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000767f:	31 d2                	xor    edx,edx
c0007681:	31 ff                	xor    edi,edi
c0007683:	52                   	push   edx
c0007684:	89 fb                	mov    ebx,edi
c0007686:	50                   	push   eax
c0007687:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000768b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000768f:	e8 70 f4 01 00       	call   c0026b04 <__udivdi3>
c0007694:	83 c4 10             	add    esp,0x10
c0007697:	c1 e0 02             	shl    eax,0x2
c000769a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000769e:	05 07 02 00 00       	add    eax,0x207
c00076a3:	89 f1                	mov    ecx,esi
c00076a5:	c1 e8 09             	shr    eax,0x9
c00076a8:	83 c1 ff             	add    ecx,0xffffffff
c00076ab:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076af:	83 d3 ff             	adc    ebx,0xffffffff
c00076b2:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076b6:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076ba:	31 d2                	xor    edx,edx
c00076bc:	01 c8                	add    eax,ecx
c00076be:	11 da                	adc    edx,ebx
c00076c0:	89 c1                	mov    ecx,eax
c00076c2:	f7 de                	neg    esi
c00076c4:	89 d0                	mov    eax,edx
c00076c6:	83 d7 00             	adc    edi,0x0
c00076c9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076cd:	f7 df                	neg    edi
c00076cf:	21 f1                	and    ecx,esi
c00076d1:	21 f8                	and    eax,edi
c00076d3:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076d7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076db:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076df:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076e3:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076e7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076ea:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ee:	0f ac d0 01          	shrd   eax,edx,0x1
c00076f2:	89 df                	mov    edi,ebx
c00076f4:	d1 ea                	shr    edx,1
c00076f6:	39 c1                	cmp    ecx,eax
c00076f8:	19 d7                	sbb    edi,edx
c00076fa:	0f 83 3e 09 00 00    	jae    c000803e <f_mkfs+0xcc5>
c0007700:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007704:	31 d2                	xor    edx,edx
c0007706:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000770a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000770e:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007712:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007715:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007719:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c000771d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007721:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007725:	83 f8 0f             	cmp    eax,0xf
c0007728:	0f 86 10 09 00 00    	jbe    c000803e <f_mkfs+0xcc5>
c000772e:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007736:	0f 87 02 09 00 00    	ja     c000803e <f_mkfs+0xcc5>
c000773c:	31 d2                	xor    edx,edx
c000773e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007742:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000774a:	83 c0 07             	add    eax,0x7
c000774d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007755:	c1 e8 03             	shr    eax,0x3
c0007758:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000775f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007763:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007767:	c1 e0 09             	shl    eax,0x9
c000776a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000776e:	48                   	dec    eax
c000776f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007773:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007777:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c000777b:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000777f:	31 d2                	xor    edx,edx
c0007781:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007785:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000778c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007790:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007795:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007799:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000779d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00077a1:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00077a5:	31 ff                	xor    edi,edi
c00077a7:	31 f6                	xor    esi,esi
c00077a9:	31 db                	xor    ebx,ebx
c00077ab:	85 ff                	test   edi,edi
c00077ad:	74 05                	je     c00077b4 <f_mkfs+0x43b>
c00077af:	4f                   	dec    edi
c00077b0:	74 44                	je     c00077f6 <f_mkfs+0x47d>
c00077b2:	eb 4f                	jmp    c0007803 <f_mkfs+0x48a>
c00077b4:	83 ec 0c             	sub    esp,0xc
c00077b7:	0f b7 c3             	movzx  eax,bx
c00077ba:	50                   	push   eax
c00077bb:	e8 05 0e 00 00       	call   c00085c5 <ff_wtoupper>
c00077c0:	83 c4 10             	add    esp,0x10
c00077c3:	89 c1                	mov    ecx,eax
c00077c5:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c8:	66 39 c3             	cmp    bx,ax
c00077cb:	75 3e                	jne    c000780b <f_mkfs+0x492>
c00077cd:	be 01 00 00 00       	mov    esi,0x1
c00077d2:	89 df                	mov    edi,ebx
c00077d4:	66 01 f7             	add    di,si
c00077d7:	75 07                	jne    c00077e0 <f_mkfs+0x467>
c00077d9:	83 fe 7f             	cmp    esi,0x7f
c00077dc:	77 31                	ja     c000780f <f_mkfs+0x496>
c00077de:	eb 16                	jmp    c00077f6 <f_mkfs+0x47d>
c00077e0:	83 ec 0c             	sub    esp,0xc
c00077e3:	0f b7 ff             	movzx  edi,di
c00077e6:	57                   	push   edi
c00077e7:	e8 d9 0d 00 00       	call   c00085c5 <ff_wtoupper>
c00077ec:	83 c4 10             	add    esp,0x10
c00077ef:	39 c7                	cmp    edi,eax
c00077f1:	75 e6                	jne    c00077d9 <f_mkfs+0x460>
c00077f3:	46                   	inc    esi
c00077f4:	eb dc                	jmp    c00077d2 <f_mkfs+0x459>
c00077f6:	31 c0                	xor    eax,eax
c00077f8:	89 d9                	mov    ecx,ebx
c00077fa:	4e                   	dec    esi
c00077fb:	0f 95 c0             	setne  al
c00077fe:	43                   	inc    ebx
c00077ff:	89 c7                	mov    edi,eax
c0007801:	eb 14                	jmp    c0007817 <f_mkfs+0x49e>
c0007803:	89 f1                	mov    ecx,esi
c0007805:	01 f3                	add    ebx,esi
c0007807:	31 ff                	xor    edi,edi
c0007809:	eb 0c                	jmp    c0007817 <f_mkfs+0x49e>
c000780b:	89 d3                	mov    ebx,edx
c000780d:	eb 08                	jmp    c0007817 <f_mkfs+0x49e>
c000780f:	bf 02 00 00 00       	mov    edi,0x2
c0007814:	83 c9 ff             	or     ecx,0xffffffff
c0007817:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000781b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000781e:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007822:	0f b6 c1             	movzx  eax,cl
c0007825:	e8 3a a9 ff ff       	call   c0002164 <xsum32>
c000782a:	66 c1 e9 08          	shr    cx,0x8
c000782e:	89 c2                	mov    edx,eax
c0007830:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007833:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007837:	0f b7 c1             	movzx  eax,cx
c000783a:	e8 25 a9 ff ff       	call   c0002164 <xsum32>
c000783f:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007844:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007848:	66 85 db             	test   bx,bx
c000784b:	74 1f                	je     c000786c <f_mkfs+0x4f3>
c000784d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007850:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007857:	83 c0 02             	add    eax,0x2
c000785a:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007860:	39 c2                	cmp    edx,eax
c0007862:	74 08                	je     c000786c <f_mkfs+0x4f3>
c0007864:	89 04 24             	mov    DWORD PTR [esp],eax
c0007867:	e9 3f ff ff ff       	jmp    c00077ab <f_mkfs+0x432>
c000786c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000786f:	83 ec 0c             	sub    esp,0xc
c0007872:	05 01 02 00 00       	add    eax,0x201
c0007877:	c1 e8 09             	shr    eax,0x9
c000787a:	50                   	push   eax
c000787b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000787f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007883:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007887:	55                   	push   ebp
c0007888:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000788c:	e8 a3 a3 ff ff       	call   c0001c34 <disk_write>
c0007891:	83 c4 20             	add    esp,0x20
c0007894:	85 c0                	test   eax,eax
c0007896:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007899:	0f 85 8b 0b 00 00    	jne    c000842a <f_mkfs+0x10b1>
c000789f:	89 d0                	mov    eax,edx
c00078a1:	31 d2                	xor    edx,edx
c00078a3:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00078a7:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078ab:	66 85 db             	test   bx,bx
c00078ae:	74 04                	je     c00078b4 <f_mkfs+0x53b>
c00078b0:	31 c0                	xor    eax,eax
c00078b2:	eb b0                	jmp    c0007864 <f_mkfs+0x4eb>
c00078b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b8:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078bc:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078c0:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078c6:	31 d2                	xor    edx,edx
c00078c8:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078d3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078d7:	c1 eb 09             	shr    ebx,0x9
c00078da:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078e1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078e5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ed:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078f1:	8d 70 01             	lea    esi,[eax+0x1]
c00078f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078fc:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007903:	31 d2                	xor    edx,edx
c0007905:	25 00 fe ff ff       	and    eax,0xfffffe00
c000790a:	89 04 24             	mov    DWORD PTR [esp],eax
c000790d:	89 c1                	mov    ecx,eax
c000790f:	89 e8                	mov    eax,ebp
c0007911:	e8 e7 a3 ff ff       	call   c0001cfd <mem_set>
c0007916:	31 c0                	xor    eax,eax
c0007918:	39 04 24             	cmp    DWORD PTR [esp],eax
c000791b:	76 10                	jbe    c000792d <f_mkfs+0x5b4>
c000791d:	83 fe 07             	cmp    esi,0x7
c0007920:	76 0b                	jbe    c000792d <f_mkfs+0x5b4>
c0007922:	40                   	inc    eax
c0007923:	83 ee 08             	sub    esi,0x8
c0007926:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c000792b:	eb eb                	jmp    c0007918 <f_mkfs+0x59f>
c000792d:	b2 01                	mov    dl,0x1
c000792f:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007933:	85 f6                	test   esi,esi
c0007935:	74 0c                	je     c0007943 <f_mkfs+0x5ca>
c0007937:	39 04 24             	cmp    DWORD PTR [esp],eax
c000793a:	76 07                	jbe    c0007943 <f_mkfs+0x5ca>
c000793c:	08 11                	or     BYTE PTR [ecx],dl
c000793e:	4e                   	dec    esi
c000793f:	d1 e2                	shl    edx,1
c0007941:	eb f0                	jmp    c0007933 <f_mkfs+0x5ba>
c0007943:	89 df                	mov    edi,ebx
c0007945:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007949:	76 04                	jbe    c000794f <f_mkfs+0x5d6>
c000794b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000794f:	83 ec 0c             	sub    esp,0xc
c0007952:	57                   	push   edi
c0007953:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007957:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000795b:	55                   	push   ebp
c000795c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007960:	e8 cf a2 ff ff       	call   c0001c34 <disk_write>
c0007965:	83 c4 20             	add    esp,0x20
c0007968:	85 c0                	test   eax,eax
c000796a:	0f 85 ba 0a 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007970:	31 d2                	xor    edx,edx
c0007972:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007976:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c000797a:	29 fb                	sub    ebx,edi
c000797c:	0f 85 7a ff ff ff    	jne    c00078fc <f_mkfs+0x583>
c0007982:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007986:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000798e:	31 f6                	xor    esi,esi
c0007990:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007994:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007997:	31 d2                	xor    edx,edx
c0007999:	89 e8                	mov    eax,ebp
c000799b:	e8 5d a3 ff ff       	call   c0001cfd <mem_set>
c00079a0:	31 c9                	xor    ecx,ecx
c00079a2:	85 db                	test   ebx,ebx
c00079a4:	75 40                	jne    c00079e6 <f_mkfs+0x66d>
c00079a6:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079ab:	89 e8                	mov    eax,ebp
c00079ad:	bb 02 00 00 00       	mov    ebx,0x2
c00079b2:	e8 28 a3 ff ff       	call   c0001cdf <st_dword>
c00079b7:	8d 45 04             	lea    eax,[ebp+0x4]
c00079ba:	83 ca ff             	or     edx,0xffffffff
c00079bd:	e8 1d a3 ff ff       	call   c0001cdf <st_dword>
c00079c2:	b9 08 00 00 00       	mov    ecx,0x8
c00079c7:	eb 1d                	jmp    c00079e6 <f_mkfs+0x66d>
c00079c9:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079cc:	76 3b                	jbe    c0007a09 <f_mkfs+0x690>
c00079ce:	43                   	inc    ebx
c00079cf:	83 fe 01             	cmp    esi,0x1
c00079d2:	89 da                	mov    edx,ebx
c00079d4:	77 03                	ja     c00079d9 <f_mkfs+0x660>
c00079d6:	83 ca ff             	or     edx,0xffffffff
c00079d9:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079dd:	4e                   	dec    esi
c00079de:	e8 fc a2 ff ff       	call   c0001cdf <st_dword>
c00079e3:	83 c1 04             	add    ecx,0x4
c00079e6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079ea:	85 f6                	test   esi,esi
c00079ec:	75 db                	jne    c00079c9 <f_mkfs+0x650>
c00079ee:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079f3:	77 14                	ja     c0007a09 <f_mkfs+0x690>
c00079f5:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f9:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007a00:	85 f6                	test   esi,esi
c0007a02:	74 05                	je     c0007a09 <f_mkfs+0x690>
c0007a04:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007a07:	77 dd                	ja     c00079e6 <f_mkfs+0x66d>
c0007a09:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a0d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a11:	39 cf                	cmp    edi,ecx
c0007a13:	76 02                	jbe    c0007a17 <f_mkfs+0x69e>
c0007a15:	89 cf                	mov    edi,ecx
c0007a17:	83 ec 0c             	sub    esp,0xc
c0007a1a:	57                   	push   edi
c0007a1b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a23:	55                   	push   ebp
c0007a24:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a28:	e8 07 a2 ff ff       	call   c0001c34 <disk_write>
c0007a2d:	83 c4 20             	add    esp,0x20
c0007a30:	85 c0                	test   eax,eax
c0007a32:	0f 85 f2 09 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007a38:	31 d2                	xor    edx,edx
c0007a3a:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a3e:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a42:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a46:	0f 85 48 ff ff ff    	jne    c0007994 <f_mkfs+0x61b>
c0007a4c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a4f:	31 d2                	xor    edx,edx
c0007a51:	89 e8                	mov    eax,ebp
c0007a53:	31 ff                	xor    edi,edi
c0007a55:	e8 a3 a2 ff ff       	call   c0001cfd <mem_set>
c0007a5a:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a5d:	ba 02 00 00 00       	mov    edx,0x2
c0007a62:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a66:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a6a:	e8 70 a2 ff ff       	call   c0001cdf <st_dword>
c0007a6f:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a72:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a76:	e8 64 a2 ff ff       	call   c0001cdf <st_dword>
c0007a7b:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a7e:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a82:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a86:	e8 54 a2 ff ff       	call   c0001cdf <st_dword>
c0007a8b:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a8e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a92:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a96:	83 c2 02             	add    edx,0x2
c0007a99:	e8 41 a2 ff ff       	call   c0001cdf <st_dword>
c0007a9e:	8d 45 58             	lea    eax,[ebp+0x58]
c0007aa1:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007aa5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa9:	e8 31 a2 ff ff       	call   c0001cdf <st_dword>
c0007aae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab2:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007ab7:	89 c6                	mov    esi,eax
c0007ab9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007abd:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ac1:	89 04 24             	mov    DWORD PTR [esp],eax
c0007ac4:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac8:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007acb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007acf:	39 cb                	cmp    ebx,ecx
c0007ad1:	76 02                	jbe    c0007ad5 <f_mkfs+0x75c>
c0007ad3:	89 cb                	mov    ebx,ecx
c0007ad5:	83 ec 0c             	sub    esp,0xc
c0007ad8:	53                   	push   ebx
c0007ad9:	57                   	push   edi
c0007ada:	56                   	push   esi
c0007adb:	55                   	push   ebp
c0007adc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ae0:	e8 4f a1 ff ff       	call   c0001c34 <disk_write>
c0007ae5:	83 c4 20             	add    esp,0x20
c0007ae8:	85 c0                	test   eax,eax
c0007aea:	0f 85 3a 09 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007af0:	31 d2                	xor    edx,edx
c0007af2:	b9 00 02 00 00       	mov    ecx,0x200
c0007af7:	89 e8                	mov    eax,ebp
c0007af9:	e8 ff a1 ff ff       	call   c0001cfd <mem_set>
c0007afe:	31 d2                	xor    edx,edx
c0007b00:	01 de                	add    esi,ebx
c0007b02:	11 d7                	adc    edi,edx
c0007b04:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007b07:	75 bf                	jne    c0007ac8 <f_mkfs+0x74f>
c0007b09:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b0d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b11:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b19:	b9 00 02 00 00       	mov    ecx,0x200
c0007b1e:	31 d2                	xor    edx,edx
c0007b20:	89 e8                	mov    eax,ebp
c0007b22:	e8 d6 a1 ff ff       	call   c0001cfd <mem_set>
c0007b27:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b2c:	ba c0 95 02 c0       	mov    edx,0xc00295c0
c0007b31:	89 e8                	mov    eax,ebp
c0007b33:	e8 b0 a1 ff ff       	call   c0001ce8 <mem_cpy>
c0007b38:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b3b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b3f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b43:	e8 9a a1 ff ff       	call   c0001ce2 <st_qword>
c0007b48:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b4c:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b4f:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b53:	e8 8a a1 ff ff       	call   c0001ce2 <st_qword>
c0007b58:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b5b:	ba 20 00 00 00       	mov    edx,0x20
c0007b60:	e8 7a a1 ff ff       	call   c0001cdf <st_dword>
c0007b65:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b69:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b6d:	e8 6d a1 ff ff       	call   c0001cdf <st_dword>
c0007b72:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b76:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b7a:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b7e:	e8 5c a1 ff ff       	call   c0001cdf <st_dword>
c0007b83:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b86:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b8a:	e8 50 a1 ff ff       	call   c0001cdf <st_dword>
c0007b8f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b93:	8d 50 02             	lea    edx,[eax+0x2]
c0007b96:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b99:	e8 41 a1 ff ff       	call   c0001cdf <st_dword>
c0007b9e:	8d 45 64             	lea    eax,[ebp+0x64]
c0007ba1:	ba 00 00 21 50       	mov    edx,0x50210000
c0007ba6:	e8 34 a1 ff ff       	call   c0001cdf <st_dword>
c0007bab:	8d 45 68             	lea    eax,[ebp+0x68]
c0007bae:	ba 00 01 00 00       	mov    edx,0x100
c0007bb3:	e8 23 a1 ff ff       	call   c0001cdb <st_word>
c0007bb8:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bbc:	b8 0a 00 00 00       	mov    eax,0xa
c0007bc1:	48                   	dec    eax
c0007bc2:	74 05                	je     c0007bc9 <f_mkfs+0x850>
c0007bc4:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bc7:	eb f8                	jmp    c0007bc1 <f_mkfs+0x848>
c0007bc9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bcd:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bd1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bd5:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd9:	74 05                	je     c0007be0 <f_mkfs+0x867>
c0007bdb:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bde:	eb f5                	jmp    c0007bd5 <f_mkfs+0x85c>
c0007be0:	8d 45 78             	lea    eax,[ebp+0x78]
c0007be3:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be8:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bee:	31 db                	xor    ebx,ebx
c0007bf0:	e8 e6 a0 ff ff       	call   c0001cdb <st_word>
c0007bf5:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bfb:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c00:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c03:	e8 d3 a0 ff ff       	call   c0001cdb <st_word>
c0007c08:	31 c9                	xor    ecx,ecx
c0007c0a:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c0d:	83 f8 01             	cmp    eax,0x1
c0007c10:	76 13                	jbe    c0007c25 <f_mkfs+0x8ac>
c0007c12:	83 f9 70             	cmp    ecx,0x70
c0007c15:	74 0e                	je     c0007c25 <f_mkfs+0x8ac>
c0007c17:	89 da                	mov    edx,ebx
c0007c19:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c1e:	e8 41 a5 ff ff       	call   c0002164 <xsum32>
c0007c23:	89 c3                	mov    ebx,eax
c0007c25:	41                   	inc    ecx
c0007c26:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c2c:	75 dc                	jne    c0007c0a <f_mkfs+0x891>
c0007c2e:	89 f0                	mov    eax,esi
c0007c30:	89 fa                	mov    edx,edi
c0007c32:	83 c0 01             	add    eax,0x1
c0007c35:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c39:	83 d2 00             	adc    edx,0x0
c0007c3c:	83 ec 0c             	sub    esp,0xc
c0007c3f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c43:	6a 01                	push   0x1
c0007c45:	57                   	push   edi
c0007c46:	56                   	push   esi
c0007c47:	55                   	push   ebp
c0007c48:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c4c:	e8 e3 9f ff ff       	call   c0001c34 <disk_write>
c0007c51:	83 c4 20             	add    esp,0x20
c0007c54:	85 c0                	test   eax,eax
c0007c56:	0f 85 ce 07 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007c5c:	31 d2                	xor    edx,edx
c0007c5e:	b9 00 02 00 00       	mov    ecx,0x200
c0007c63:	89 e8                	mov    eax,ebp
c0007c65:	e8 93 a0 ff ff       	call   c0001cfd <mem_set>
c0007c6a:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c6f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c72:	e8 64 a0 ff ff       	call   c0001cdb <st_word>
c0007c77:	89 f0                	mov    eax,esi
c0007c79:	89 fa                	mov    edx,edi
c0007c7b:	83 c0 09             	add    eax,0x9
c0007c7e:	83 d2 00             	adc    edx,0x0
c0007c81:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c88:	31 c9                	xor    ecx,ecx
c0007c8a:	41                   	inc    ecx
c0007c8b:	89 da                	mov    edx,ebx
c0007c8d:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c92:	e8 cd a4 ff ff       	call   c0002164 <xsum32>
c0007c97:	89 c3                	mov    ebx,eax
c0007c99:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c9f:	75 e9                	jne    c0007c8a <f_mkfs+0x911>
c0007ca1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007ca5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca9:	83 c0 01             	add    eax,0x1
c0007cac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007cb0:	83 d2 00             	adc    edx,0x0
c0007cb3:	83 ec 0c             	sub    esp,0xc
c0007cb6:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cba:	6a 01                	push   0x1
c0007cbc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cc0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cc4:	55                   	push   ebp
c0007cc5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc9:	e8 66 9f ff ff       	call   c0001c34 <disk_write>
c0007cce:	83 c4 20             	add    esp,0x20
c0007cd1:	85 c0                	test   eax,eax
c0007cd3:	0f 85 51 07 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007cd9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cdd:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007ce1:	75 09                	jne    c0007cec <f_mkfs+0x973>
c0007ce3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ce6:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007cea:	74 12                	je     c0007cfe <f_mkfs+0x985>
c0007cec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cf0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cf4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cfc:	eb 8a                	jmp    c0007c88 <f_mkfs+0x90f>
c0007cfe:	31 d2                	xor    edx,edx
c0007d00:	b9 00 02 00 00       	mov    ecx,0x200
c0007d05:	89 e8                	mov    eax,ebp
c0007d07:	e8 f1 9f ff ff       	call   c0001cfd <mem_set>
c0007d0c:	83 c6 0b             	add    esi,0xb
c0007d0f:	83 d7 00             	adc    edi,0x0
c0007d12:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d16:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d1a:	31 c9                	xor    ecx,ecx
c0007d1c:	41                   	inc    ecx
c0007d1d:	89 da                	mov    edx,ebx
c0007d1f:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d24:	e8 3b a4 ff ff       	call   c0002164 <xsum32>
c0007d29:	89 c3                	mov    ebx,eax
c0007d2b:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d31:	75 e9                	jne    c0007d1c <f_mkfs+0x9a3>
c0007d33:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d36:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d3a:	83 c6 01             	add    esi,0x1
c0007d3d:	83 d7 00             	adc    edi,0x0
c0007d40:	83 ec 0c             	sub    esp,0xc
c0007d43:	6a 01                	push   0x1
c0007d45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d4d:	55                   	push   ebp
c0007d4e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d52:	e8 dd 9e ff ff       	call   c0001c34 <disk_write>
c0007d57:	83 c4 20             	add    esp,0x20
c0007d5a:	85 c0                	test   eax,eax
c0007d5c:	0f 85 c8 06 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007d62:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d66:	75 06                	jne    c0007d6e <f_mkfs+0x9f5>
c0007d68:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d6c:	74 09                	je     c0007d77 <f_mkfs+0x9fe>
c0007d6e:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d71:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d75:	eb a3                	jmp    c0007d1a <f_mkfs+0x9a1>
c0007d77:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d7b:	89 da                	mov    edx,ebx
c0007d7d:	01 e8                	add    eax,ebp
c0007d7f:	e8 5b 9f ff ff       	call   c0001cdf <st_dword>
c0007d84:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d89:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d91:	75 e4                	jne    c0007d77 <f_mkfs+0x9fe>
c0007d93:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d96:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d9a:	83 c6 02             	add    esi,0x2
c0007d9d:	83 d7 00             	adc    edi,0x0
c0007da0:	83 ec 0c             	sub    esp,0xc
c0007da3:	6a 01                	push   0x1
c0007da5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007dad:	55                   	push   ebp
c0007dae:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007db2:	e8 7d 9e ff ff       	call   c0001c34 <disk_write>
c0007db7:	83 c4 20             	add    esp,0x20
c0007dba:	85 c0                	test   eax,eax
c0007dbc:	0f 85 68 06 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007dc2:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dc7:	74 0d                	je     c0007dd6 <f_mkfs+0xa5d>
c0007dc9:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dd1:	e9 43 fd ff ff       	jmp    c0007b19 <f_mkfs+0x7a0>
c0007dd6:	b1 07                	mov    cl,0x7
c0007dd8:	e9 e3 05 00 00       	jmp    c00083c0 <f_mkfs+0x1047>
c0007ddd:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007de2:	0f 85 4f 02 00 00    	jne    c0008037 <f_mkfs+0xcbe>
c0007de8:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ded:	0f 86 22 02 00 00    	jbe    c0008015 <f_mkfs+0xc9c>
c0007df3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df8:	0f 85 81 06 00 00    	jne    c000847f <f_mkfs+0x1106>
c0007dfe:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007e01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007e05:	83 f8 40             	cmp    eax,0x40
c0007e08:	0f 87 51 06 00 00    	ja     c000845f <f_mkfs+0x10e6>
c0007e0e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e12:	85 ff                	test   edi,edi
c0007e14:	75 1c                	jne    c0007e32 <f_mkfs+0xab9>
c0007e16:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e19:	ba c0 94 02 c0       	mov    edx,0xc00294c0
c0007e1e:	c1 e9 0c             	shr    ecx,0xc
c0007e21:	bf 01 00 00 00       	mov    edi,0x1
c0007e26:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e29:	66 85 c0             	test   ax,ax
c0007e2c:	0f 85 95 01 00 00    	jne    c0007fc7 <f_mkfs+0xc4e>
c0007e32:	31 d2                	xor    edx,edx
c0007e34:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e37:	f7 f7                	div    edi
c0007e39:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e3e:	0f 86 95 01 00 00    	jbe    c0007fd9 <f_mkfs+0xc60>
c0007e44:	83 c0 02             	add    eax,0x2
c0007e47:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e4c:	01 c0                	add    eax,eax
c0007e4e:	05 ff 01 00 00       	add    eax,0x1ff
c0007e53:	be 01 00 00 00       	mov    esi,0x1
c0007e58:	c1 e8 09             	shr    eax,0x9
c0007e5b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e63:	c1 e0 05             	shl    eax,0x5
c0007e66:	c1 e8 09             	shr    eax,0x9
c0007e69:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e6d:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e72:	31 d2                	xor    edx,edx
c0007e74:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e78:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e7c:	89 f0                	mov    eax,esi
c0007e7e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e82:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e86:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e8e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e92:	31 d2                	xor    edx,edx
c0007e94:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e99:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e9d:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007ea1:	31 db                	xor    ebx,ebx
c0007ea3:	01 c8                	add    eax,ecx
c0007ea5:	11 da                	adc    edx,ebx
c0007ea7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007eab:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007eaf:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eb3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eb7:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007ebb:	f7 da                	neg    edx
c0007ebd:	21 d1                	and    ecx,edx
c0007ebf:	29 d9                	sub    ecx,ebx
c0007ec1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ec6:	0f 85 20 01 00 00    	jne    c0007fec <f_mkfs+0xc73>
c0007ecc:	31 db                	xor    ebx,ebx
c0007ece:	01 ce                	add    esi,ecx
c0007ed0:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ed4:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed8:	31 d2                	xor    edx,edx
c0007eda:	89 f8                	mov    eax,edi
c0007edc:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ee0:	c1 e0 04             	shl    eax,0x4
c0007ee3:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ee7:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007eeb:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007eef:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007ef3:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007ef6:	19 d3                	sbb    ebx,edx
c0007ef8:	0f 82 40 01 00 00    	jb     c000803e <f_mkfs+0xcc5>
c0007efe:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f01:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f05:	89 c8                	mov    eax,ecx
c0007f07:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f0c:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f10:	29 f0                	sub    eax,esi
c0007f12:	29 d0                	sub    eax,edx
c0007f14:	31 d2                	xor    edx,edx
c0007f16:	f7 f7                	div    edi
c0007f18:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f1d:	89 c3                	mov    ebx,eax
c0007f1f:	0f 85 b8 fe ff ff    	jne    c0007ddd <f_mkfs+0xa64>
c0007f25:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f2a:	0f 87 1d 01 00 00    	ja     c000804d <f_mkfs+0xcd4>
c0007f30:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f35:	0f 85 03 01 00 00    	jne    c000803e <f_mkfs+0xcc5>
c0007f3b:	83 ff 01             	cmp    edi,0x1
c0007f3e:	0f 86 fa 00 00 00    	jbe    c000803e <f_mkfs+0xcc5>
c0007f44:	d1 ef                	shr    edi,1
c0007f46:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f4a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f4e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f51:	85 db                	test   ebx,ebx
c0007f53:	75 2d                	jne    c0007f82 <f_mkfs+0xc09>
c0007f55:	89 cb                	mov    ebx,ecx
c0007f57:	ba d0 94 02 c0       	mov    edx,0xc00294d0
c0007f5c:	c1 eb 11             	shr    ebx,0x11
c0007f5f:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f67:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f6a:	66 85 c0             	test   ax,ax
c0007f6d:	74 11                	je     c0007f80 <f_mkfs+0xc07>
c0007f6f:	83 c2 02             	add    edx,0x2
c0007f72:	39 d8                	cmp    eax,ebx
c0007f74:	77 0a                	ja     c0007f80 <f_mkfs+0xc07>
c0007f76:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f7a:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f7e:	eb e7                	jmp    c0007f67 <f_mkfs+0xbee>
c0007f80:	31 db                	xor    ebx,ebx
c0007f82:	31 d2                	xor    edx,edx
c0007f84:	89 c8                	mov    eax,ecx
c0007f86:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f8a:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f91:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f96:	c1 ea 09             	shr    edx,0x9
c0007f99:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f9e:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007fa2:	0f 87 96 00 00 00    	ja     c000803e <f_mkfs+0xcc5>
c0007fa8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fac:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fb4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb8:	be 20 00 00 00       	mov    esi,0x20
c0007fbd:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fc2:	e9 a6 fe ff ff       	jmp    c0007e6d <f_mkfs+0xaf4>
c0007fc7:	83 c2 02             	add    edx,0x2
c0007fca:	39 c8                	cmp    eax,ecx
c0007fcc:	0f 87 60 fe ff ff    	ja     c0007e32 <f_mkfs+0xab9>
c0007fd2:	01 ff                	add    edi,edi
c0007fd4:	e9 4d fe ff ff       	jmp    c0007e26 <f_mkfs+0xaad>
c0007fd9:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fdc:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fe1:	40                   	inc    eax
c0007fe2:	d1 e8                	shr    eax,1
c0007fe4:	83 c0 03             	add    eax,0x3
c0007fe7:	e9 62 fe ff ff       	jmp    c0007e4e <f_mkfs+0xad5>
c0007fec:	31 d2                	xor    edx,edx
c0007fee:	89 c8                	mov    eax,ecx
c0007ff0:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007ff4:	85 d2                	test   edx,edx
c0007ff6:	74 0c                	je     c0008004 <f_mkfs+0xc8b>
c0007ff8:	49                   	dec    ecx
c0007ff9:	46                   	inc    esi
c0007ffa:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fff:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0008004:	89 c8                	mov    eax,ecx
c0008006:	31 d2                	xor    edx,edx
c0008008:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000800c:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008010:	e9 c3 fe ff ff       	jmp    c0007ed8 <f_mkfs+0xb5f>
c0008015:	3d f5 0f 00 00       	cmp    eax,0xff5
c000801a:	77 31                	ja     c000804d <f_mkfs+0xcd4>
c000801c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008021:	75 1b                	jne    c000803e <f_mkfs+0xcc5>
c0008023:	8d 04 3f             	lea    eax,[edi+edi*1]
c0008026:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000802a:	3d 80 00 00 00       	cmp    eax,0x80
c000802f:	0f 86 d9 fd ff ff    	jbe    c0007e0e <f_mkfs+0xa95>
c0008035:	eb 07                	jmp    c000803e <f_mkfs+0xcc5>
c0008037:	3d f5 0f 00 00       	cmp    eax,0xff5
c000803c:	76 0a                	jbe    c0008048 <f_mkfs+0xccf>
c000803e:	bb 0e 00 00 00       	mov    ebx,0xe
c0008043:	e9 ff 03 00 00       	jmp    c0008447 <f_mkfs+0x10ce>
c0008048:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000804d:	31 d2                	xor    edx,edx
c000804f:	b9 00 02 00 00       	mov    ecx,0x200
c0008054:	89 e8                	mov    eax,ebp
c0008056:	e8 a2 9c ff ff       	call   c0001cfd <mem_set>
c000805b:	b9 0b 00 00 00       	mov    ecx,0xb
c0008060:	ba e2 95 02 c0       	mov    edx,0xc00295e2
c0008065:	89 e8                	mov    eax,ebp
c0008067:	e8 7c 9c ff ff       	call   c0001ce8 <mem_cpy>
c000806c:	8d 45 0b             	lea    eax,[ebp+0xb]
c000806f:	ba 00 02 00 00       	mov    edx,0x200
c0008074:	e8 62 9c ff ff       	call   c0001cdb <st_word>
c0008079:	89 f8                	mov    eax,edi
c000807b:	0f b7 d6             	movzx  edx,si
c000807e:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008081:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008084:	e8 52 9c ff ff       	call   c0001cdb <st_word>
c0008089:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000808d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008092:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008095:	75 08                	jne    c000809f <f_mkfs+0xd26>
c0008097:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000809f:	8d 45 11             	lea    eax,[ebp+0x11]
c00080a2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00080a6:	e8 30 9c ff ff       	call   c0001cdb <st_word>
c00080ab:	b8 ff ff 00 00       	mov    eax,0xffff
c00080b0:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080b4:	39 d0                	cmp    eax,edx
c00080b6:	b8 00 00 00 00       	mov    eax,0x0
c00080bb:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080bf:	72 0a                	jb     c00080cb <f_mkfs+0xd52>
c00080c1:	8d 45 13             	lea    eax,[ebp+0x13]
c00080c4:	e8 12 9c ff ff       	call   c0001cdb <st_word>
c00080c9:	eb 08                	jmp    c00080d3 <f_mkfs+0xd5a>
c00080cb:	8d 45 20             	lea    eax,[ebp+0x20]
c00080ce:	e8 0c 9c ff ff       	call   c0001cdf <st_dword>
c00080d3:	8d 45 18             	lea    eax,[ebp+0x18]
c00080d6:	ba 3f 00 00 00       	mov    edx,0x3f
c00080db:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080df:	e8 f7 9b ff ff       	call   c0001cdb <st_word>
c00080e4:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080e7:	ba ff 00 00 00       	mov    edx,0xff
c00080ec:	e8 ea 9b ff ff       	call   c0001cdb <st_word>
c00080f1:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f8:	e8 e2 9b ff ff       	call   c0001cdf <st_dword>
c00080fd:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008102:	75 57                	jne    c000815b <f_mkfs+0xde2>
c0008104:	8d 45 43             	lea    eax,[ebp+0x43]
c0008107:	ba 00 00 21 50       	mov    edx,0x50210000
c000810c:	e8 ce 9b ff ff       	call   c0001cdf <st_dword>
c0008111:	8d 45 24             	lea    eax,[ebp+0x24]
c0008114:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008118:	e8 c2 9b ff ff       	call   c0001cdf <st_dword>
c000811d:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008120:	ba 02 00 00 00       	mov    edx,0x2
c0008125:	e8 b5 9b ff ff       	call   c0001cdf <st_dword>
c000812a:	8d 45 30             	lea    eax,[ebp+0x30]
c000812d:	ba 01 00 00 00       	mov    edx,0x1
c0008132:	e8 a4 9b ff ff       	call   c0001cdb <st_word>
c0008137:	8d 45 32             	lea    eax,[ebp+0x32]
c000813a:	ba 06 00 00 00       	mov    edx,0x6
c000813f:	e8 97 9b ff ff       	call   c0001cdb <st_word>
c0008144:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008148:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000814c:	8d 45 47             	lea    eax,[ebp+0x47]
c000814f:	b9 13 00 00 00       	mov    ecx,0x13
c0008154:	ba ee 95 02 c0       	mov    edx,0xc00295ee
c0008159:	eb 2f                	jmp    c000818a <f_mkfs+0xe11>
c000815b:	8d 45 27             	lea    eax,[ebp+0x27]
c000815e:	ba 00 00 21 50       	mov    edx,0x50210000
c0008163:	e8 77 9b ff ff       	call   c0001cdf <st_dword>
c0008168:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000816d:	8d 45 16             	lea    eax,[ebp+0x16]
c0008170:	e8 66 9b ff ff       	call   c0001cdb <st_word>
c0008175:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008179:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000817d:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008180:	b9 13 00 00 00       	mov    ecx,0x13
c0008185:	ba 02 96 02 c0       	mov    edx,0xc0029602
c000818a:	e8 59 9b ff ff       	call   c0001ce8 <mem_cpy>
c000818f:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008195:	ba 55 aa 00 00       	mov    edx,0xaa55
c000819a:	89 f0                	mov    eax,esi
c000819c:	e8 3a 9b ff ff       	call   c0001cdb <st_word>
c00081a1:	83 ec 0c             	sub    esp,0xc
c00081a4:	6a 01                	push   0x1
c00081a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081ae:	55                   	push   ebp
c00081af:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081b3:	e8 7c 9a ff ff       	call   c0001c34 <disk_write>
c00081b8:	83 c4 20             	add    esp,0x20
c00081bb:	85 c0                	test   eax,eax
c00081bd:	0f 85 67 02 00 00    	jne    c000842a <f_mkfs+0x10b1>
c00081c3:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c8:	0f 85 b7 00 00 00    	jne    c0008285 <f_mkfs+0xf0c>
c00081ce:	83 ec 0c             	sub    esp,0xc
c00081d1:	6a 01                	push   0x1
c00081d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081d7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081db:	83 c0 06             	add    eax,0x6
c00081de:	83 d2 00             	adc    edx,0x0
c00081e1:	52                   	push   edx
c00081e2:	50                   	push   eax
c00081e3:	55                   	push   ebp
c00081e4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e8:	e8 47 9a ff ff       	call   c0001c34 <disk_write>
c00081ed:	83 c4 20             	add    esp,0x20
c00081f0:	b9 00 02 00 00       	mov    ecx,0x200
c00081f5:	31 d2                	xor    edx,edx
c00081f7:	89 e8                	mov    eax,ebp
c00081f9:	e8 ff 9a ff ff       	call   c0001cfd <mem_set>
c00081fe:	ba 52 52 61 41       	mov    edx,0x41615252
c0008203:	89 e8                	mov    eax,ebp
c0008205:	e8 d5 9a ff ff       	call   c0001cdf <st_dword>
c000820a:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008210:	ba 72 72 41 61       	mov    edx,0x61417272
c0008215:	e8 c5 9a ff ff       	call   c0001cdf <st_dword>
c000821a:	8d 53 ff             	lea    edx,[ebx-0x1]
c000821d:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008223:	e8 b7 9a ff ff       	call   c0001cdf <st_dword>
c0008228:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c000822e:	ba 02 00 00 00       	mov    edx,0x2
c0008233:	e8 a7 9a ff ff       	call   c0001cdf <st_dword>
c0008238:	ba 55 aa 00 00       	mov    edx,0xaa55
c000823d:	89 f0                	mov    eax,esi
c000823f:	e8 97 9a ff ff       	call   c0001cdb <st_word>
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	6a 01                	push   0x1
c0008249:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000824d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008251:	83 c0 07             	add    eax,0x7
c0008254:	83 d2 00             	adc    edx,0x0
c0008257:	52                   	push   edx
c0008258:	50                   	push   eax
c0008259:	55                   	push   ebp
c000825a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000825e:	e8 d1 99 ff ff       	call   c0001c34 <disk_write>
c0008263:	83 c4 14             	add    esp,0x14
c0008266:	6a 01                	push   0x1
c0008268:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000826c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008270:	83 c0 01             	add    eax,0x1
c0008273:	83 d2 00             	adc    edx,0x0
c0008276:	52                   	push   edx
c0008277:	50                   	push   eax
c0008278:	55                   	push   ebp
c0008279:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000827d:	e8 b2 99 ff ff       	call   c0001c34 <disk_write>
c0008282:	83 c4 20             	add    esp,0x20
c0008285:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000828c:	31 d2                	xor    edx,edx
c000828e:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008294:	31 db                	xor    ebx,ebx
c0008296:	89 e8                	mov    eax,ebp
c0008298:	e8 60 9a ff ff       	call   c0001cfd <mem_set>
c000829d:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00082a2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a9:	0f 94 c3             	sete   bl
c00082ac:	4b                   	dec    ebx
c00082ad:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082b3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082be:	75 21                	jne    c00082e1 <f_mkfs+0xf68>
c00082c0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082c5:	89 e8                	mov    eax,ebp
c00082c7:	e8 13 9a ff ff       	call   c0001cdf <st_dword>
c00082cc:	8d 45 04             	lea    eax,[ebp+0x4]
c00082cf:	83 ca ff             	or     edx,0xffffffff
c00082d2:	e8 08 9a ff ff       	call   c0001cdf <st_dword>
c00082d7:	8d 45 08             	lea    eax,[ebp+0x8]
c00082da:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082df:	eb 04                	jmp    c00082e5 <f_mkfs+0xf6c>
c00082e1:	89 da                	mov    edx,ebx
c00082e3:	89 e8                	mov    eax,ebp
c00082e5:	e8 f5 99 ff ff       	call   c0001cdf <st_dword>
c00082ea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082f2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082f6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082fa:	39 ce                	cmp    esi,ecx
c00082fc:	76 02                	jbe    c0008300 <f_mkfs+0xf87>
c00082fe:	89 ce                	mov    esi,ecx
c0008300:	83 ec 0c             	sub    esp,0xc
c0008303:	56                   	push   esi
c0008304:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008308:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000830c:	55                   	push   ebp
c000830d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008311:	e8 1e 99 ff ff       	call   c0001c34 <disk_write>
c0008316:	83 c4 20             	add    esp,0x20
c0008319:	85 c0                	test   eax,eax
c000831b:	0f 85 09 01 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0008321:	31 d2                	xor    edx,edx
c0008323:	b9 00 02 00 00       	mov    ecx,0x200
c0008328:	89 e8                	mov    eax,ebp
c000832a:	e8 ce 99 ff ff       	call   c0001cfd <mem_set>
c000832f:	31 d2                	xor    edx,edx
c0008331:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008335:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008339:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000833d:	75 b3                	jne    c00082f2 <f_mkfs+0xf79>
c000833f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008342:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008349:	40                   	inc    eax
c000834a:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000834e:	0f 87 65 ff ff ff    	ja     c00082b9 <f_mkfs+0xf40>
c0008354:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008359:	74 04                	je     c000835f <f_mkfs+0xfe6>
c000835b:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000835f:	89 fb                	mov    ebx,edi
c0008361:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008365:	76 04                	jbe    c000836b <f_mkfs+0xff2>
c0008367:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000836b:	83 ec 0c             	sub    esp,0xc
c000836e:	53                   	push   ebx
c000836f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008373:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008377:	55                   	push   ebp
c0008378:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000837c:	e8 b3 98 ff ff       	call   c0001c34 <disk_write>
c0008381:	83 c4 20             	add    esp,0x20
c0008384:	85 c0                	test   eax,eax
c0008386:	0f 85 9e 00 00 00    	jne    c000842a <f_mkfs+0x10b1>
c000838c:	31 d2                	xor    edx,edx
c000838e:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008392:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008396:	29 df                	sub    edi,ebx
c0008398:	75 c5                	jne    c000835f <f_mkfs+0xfe6>
c000839a:	b1 0c                	mov    cl,0xc
c000839c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083a1:	74 1d                	je     c00083c0 <f_mkfs+0x1047>
c00083a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a8:	b1 06                	mov    cl,0x6
c00083aa:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083ae:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083b2:	72 0c                	jb     c00083c0 <f_mkfs+0x1047>
c00083b4:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b9:	0f 94 c1             	sete   cl
c00083bc:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083c0:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083c5:	75 4c                	jne    c0008413 <f_mkfs+0x109a>
c00083c7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083cb:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083cf:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083d6:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083dd:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e8:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083f3:	0f b6 c9             	movzx  ecx,cl
c00083f6:	83 ec 0c             	sub    esp,0xc
c00083f9:	55                   	push   ebp
c00083fa:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008401:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008405:	e8 2f c2 ff ff       	call   c0004639 <create_partition>
c000840a:	83 c4 10             	add    esp,0x10
c000840d:	89 c3                	mov    ebx,eax
c000840f:	85 c0                	test   eax,eax
c0008411:	75 34                	jne    c0008447 <f_mkfs+0x10ce>
c0008413:	31 db                	xor    ebx,ebx
c0008415:	50                   	push   eax
c0008416:	6a 00                	push   0x0
c0008418:	6a 00                	push   0x0
c000841a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000841e:	e8 27 98 ff ff       	call   c0001c4a <disk_ioctl>
c0008423:	83 c4 10             	add    esp,0x10
c0008426:	85 c0                	test   eax,eax
c0008428:	74 1d                	je     c0008447 <f_mkfs+0x10ce>
c000842a:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008432:	75 0c                	jne    c0008440 <f_mkfs+0x10c7>
c0008434:	83 ec 0c             	sub    esp,0xc
c0008437:	55                   	push   ebp
c0008438:	e8 75 00 00 00       	call   c00084b2 <ff_memfree>
c000843d:	83 c4 10             	add    esp,0x10
c0008440:	bb 01 00 00 00       	mov    ebx,0x1
c0008445:	eb 48                	jmp    c000848f <f_mkfs+0x1116>
c0008447:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000844f:	75 3e                	jne    c000848f <f_mkfs+0x1116>
c0008451:	83 ec 0c             	sub    esp,0xc
c0008454:	55                   	push   ebp
c0008455:	e8 58 00 00 00       	call   c00084b2 <ff_memfree>
c000845a:	83 c4 10             	add    esp,0x10
c000845d:	eb 30                	jmp    c000848f <f_mkfs+0x1116>
c000845f:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008464:	0f 85 eb fa ff ff    	jne    c0007f55 <f_mkfs+0xbdc>
c000846a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000846e:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008474:	0f 86 b8 f9 ff ff    	jbe    c0007e32 <f_mkfs+0xab9>
c000847a:	e9 bf fb ff ff       	jmp    c000803e <f_mkfs+0xcc5>
c000847f:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008484:	0f 85 c0 fa ff ff    	jne    c0007f4a <f_mkfs+0xbd1>
c000848a:	e9 af fb ff ff       	jmp    c000803e <f_mkfs+0xcc5>
c000848f:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008495:	89 d8                	mov    eax,ebx
c0008497:	5b                   	pop    ebx
c0008498:	5e                   	pop    esi
c0008499:	5f                   	pop    edi
c000849a:	5d                   	pop    ebp
c000849b:	c3                   	ret    

c000849c <ff_memalloc>:
c000849c:	83 ec 0c             	sub    esp,0xc
c000849f:	83 ec 0c             	sub    esp,0xc
c00084a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084a6:	e8 a0 73 00 00       	call   c000f84b <malloc>
c00084ab:	83 c4 10             	add    esp,0x10
c00084ae:	83 c4 0c             	add    esp,0xc
c00084b1:	c3                   	ret    

c00084b2 <ff_memfree>:
c00084b2:	83 ec 0c             	sub    esp,0xc
c00084b5:	83 ec 0c             	sub    esp,0xc
c00084b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084bc:	e8 9a 73 00 00       	call   c000f85b <free>
c00084c1:	83 c4 10             	add    esp,0x10
c00084c4:	90                   	nop
c00084c5:	83 c4 0c             	add    esp,0xc
c00084c8:	c3                   	ret    

c00084c9 <ff_uni2oem>:
c00084c9:	83 ec 14             	sub    esp,0x14
c00084cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084d0:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084d4:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084db:	c7 44 24 0c 20 99 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029920
c00084e3:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e8:	77 0b                	ja     c00084f5 <ff_uni2oem+0x2c>
c00084ea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ee:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084f3:	eb 5b                	jmp    c0008550 <ff_uni2oem+0x87>
c00084f5:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084fd:	77 51                	ja     c0008550 <ff_uni2oem+0x87>
c00084ff:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008505:	75 49                	jne    c0008550 <ff_uni2oem+0x87>
c0008507:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000850e:	eb 0b                	jmp    c000851b <ff_uni2oem+0x52>
c0008510:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008515:	40                   	inc    eax
c0008516:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000851b:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008521:	77 1b                	ja     c000853e <ff_uni2oem+0x75>
c0008523:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008528:	01 c0                	add    eax,eax
c000852a:	89 c2                	mov    edx,eax
c000852c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008530:	01 d0                	add    eax,edx
c0008532:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008535:	0f b7 c0             	movzx  eax,ax
c0008538:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000853c:	75 d2                	jne    c0008510 <ff_uni2oem+0x47>
c000853e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008543:	83 e8 80             	sub    eax,0xffffff80
c0008546:	25 ff 00 00 00       	and    eax,0xff
c000854b:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008550:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008555:	83 c4 14             	add    esp,0x14
c0008558:	c3                   	ret    

c0008559 <ff_oem2uni>:
c0008559:	83 ec 18             	sub    esp,0x18
c000855c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008560:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008564:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008569:	66 89 04 24          	mov    WORD PTR [esp],ax
c000856d:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008574:	c7 44 24 10 20 99 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029920
c000857c:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008582:	77 0b                	ja     c000858f <ff_oem2uni+0x36>
c0008584:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008588:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000858d:	eb 2d                	jmp    c00085bc <ff_oem2uni+0x63>
c000858f:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008595:	75 25                	jne    c00085bc <ff_oem2uni+0x63>
c0008597:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000859e:	77 1c                	ja     c00085bc <ff_oem2uni+0x63>
c00085a0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00085a5:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085aa:	01 c0                	add    eax,eax
c00085ac:	89 c2                	mov    edx,eax
c00085ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085b2:	01 d0                	add    eax,edx
c00085b4:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085b7:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085bc:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085c1:	83 c4 18             	add    esp,0x18
c00085c4:	c3                   	ret    

c00085c5 <ff_wtoupper>:
c00085c5:	83 ec 10             	sub    esp,0x10
c00085c8:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085d0:	0f 87 3e 01 00 00    	ja     c0008714 <ff_wtoupper+0x14f>
c00085d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085da:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085df:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085e6:	77 07                	ja     c00085ef <ff_wtoupper+0x2a>
c00085e8:	b8 20 97 02 c0       	mov    eax,0xc0029720
c00085ed:	eb 05                	jmp    c00085f4 <ff_wtoupper+0x2f>
c00085ef:	b8 60 96 02 c0       	mov    eax,0xc0029660
c00085f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085fc:	8d 50 02             	lea    edx,[eax+0x2]
c00085ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008603:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008606:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000860b:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008611:	0f 84 f4 00 00 00    	je     c000870b <ff_wtoupper+0x146>
c0008617:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000861c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008621:	0f 82 e4 00 00 00    	jb     c000870b <ff_wtoupper+0x146>
c0008627:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000862b:	8d 50 02             	lea    edx,[eax+0x2]
c000862e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008632:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008635:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000863a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000863f:	66 c1 e8 08          	shr    ax,0x8
c0008643:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008648:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000864f:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008654:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008659:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000865e:	01 ca                	add    edx,ecx
c0008660:	39 d0                	cmp    eax,edx
c0008662:	0f 8d 86 00 00 00    	jge    c00086ee <ff_wtoupper+0x129>
c0008668:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000866d:	83 f8 08             	cmp    eax,0x8
c0008670:	0f 87 94 00 00 00    	ja     c000870a <ff_wtoupper+0x145>
c0008676:	8b 04 85 20 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd69e0]
c000867d:	ff e0                	jmp    eax
c000867f:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008684:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008689:	29 c2                	sub    edx,eax
c000868b:	89 d0                	mov    eax,edx
c000868d:	01 c0                	add    eax,eax
c000868f:	89 c2                	mov    edx,eax
c0008691:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008695:	01 d0                	add    eax,edx
c0008697:	66 8b 00             	mov    ax,WORD PTR [eax]
c000869a:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000869f:	eb 4b                	jmp    c00086ec <ff_wtoupper+0x127>
c00086a1:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00086a6:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086aa:	83 e0 01             	and    eax,0x1
c00086ad:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086b2:	eb 38                	jmp    c00086ec <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086ba:	eb 30                	jmp    c00086ec <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086c2:	eb 28                	jmp    c00086ec <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086ca:	eb 20                	jmp    c00086ec <ff_wtoupper+0x127>
c00086cc:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086d2:	eb 18                	jmp    c00086ec <ff_wtoupper+0x127>
c00086d4:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086da:	eb 10                	jmp    c00086ec <ff_wtoupper+0x127>
c00086dc:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086e2:	eb 08                	jmp    c00086ec <ff_wtoupper+0x127>
c00086e4:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086eb:	90                   	nop
c00086ec:	eb 1c                	jmp    c000870a <ff_wtoupper+0x145>
c00086ee:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086f4:	0f 85 fe fe ff ff    	jne    c00085f8 <ff_wtoupper+0x33>
c00086fa:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086ff:	01 c0                	add    eax,eax
c0008701:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0008705:	e9 ee fe ff ff       	jmp    c00085f8 <ff_wtoupper+0x33>
c000870a:	90                   	nop
c000870b:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008710:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008714:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008718:	83 c4 10             	add    esp,0x10
c000871b:	c3                   	ret    

c000871c <psrc_set_converter>:
c000871c:	56                   	push   esi
c000871d:	89 d6                	mov    esi,edx
c000871f:	53                   	push   ebx
c0008720:	89 c3                	mov    ebx,eax
c0008722:	83 ec 0c             	sub    esp,0xc
c0008725:	52                   	push   edx
c0008726:	50                   	push   eax
c0008727:	e8 6f 55 00 00       	call   c000dc9b <sinc_set_converter>
c000872c:	83 c4 10             	add    esp,0x10
c000872f:	85 c0                	test   eax,eax
c0008731:	74 25                	je     c0008758 <psrc_set_converter+0x3c>
c0008733:	50                   	push   eax
c0008734:	50                   	push   eax
c0008735:	56                   	push   esi
c0008736:	53                   	push   ebx
c0008737:	e8 17 5d 00 00       	call   c000e453 <zoh_set_converter>
c000873c:	83 c4 10             	add    esp,0x10
c000873f:	85 c0                	test   eax,eax
c0008741:	74 15                	je     c0008758 <psrc_set_converter+0x3c>
c0008743:	51                   	push   ecx
c0008744:	51                   	push   ecx
c0008745:	56                   	push   esi
c0008746:	53                   	push   ebx
c0008747:	e8 0f 11 00 00       	call   c000985b <linear_set_converter>
c000874c:	83 c4 10             	add    esp,0x10
c000874f:	ba 0a 00 00 00       	mov    edx,0xa
c0008754:	85 c0                	test   eax,eax
c0008756:	75 02                	jne    c000875a <psrc_set_converter+0x3e>
c0008758:	31 d2                	xor    edx,edx
c000875a:	89 d0                	mov    eax,edx
c000875c:	5a                   	pop    edx
c000875d:	5b                   	pop    ebx
c000875e:	5e                   	pop    esi
c000875f:	c3                   	ret    

c0008760 <src_delete>:
c0008760:	53                   	push   ebx
c0008761:	83 ec 08             	sub    esp,0x8
c0008764:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008768:	85 db                	test   ebx,ebx
c000876a:	74 29                	je     c0008795 <src_delete+0x35>
c000876c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000876f:	85 c0                	test   eax,eax
c0008771:	74 0c                	je     c000877f <src_delete+0x1f>
c0008773:	83 ec 0c             	sub    esp,0xc
c0008776:	50                   	push   eax
c0008777:	e8 df 70 00 00       	call   c000f85b <free>
c000877c:	83 c4 10             	add    esp,0x10
c000877f:	50                   	push   eax
c0008780:	6a 3c                	push   0x3c
c0008782:	6a 00                	push   0x0
c0008784:	53                   	push   ebx
c0008785:	e8 f6 7f ff ff       	call   c0000780 <memset>
c000878a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000878d:	e8 c9 70 00 00       	call   c000f85b <free>
c0008792:	83 c4 10             	add    esp,0x10
c0008795:	31 c0                	xor    eax,eax
c0008797:	83 c4 08             	add    esp,0x8
c000879a:	5b                   	pop    ebx
c000879b:	c3                   	ret    

c000879c <src_process>:
c000879c:	55                   	push   ebp
c000879d:	57                   	push   edi
c000879e:	56                   	push   esi
c000879f:	53                   	push   ebx
c00087a0:	83 ec 1c             	sub    esp,0x1c
c00087a3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00087a7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087ab:	85 ed                	test   ebp,ebp
c00087ad:	0f 84 6f 01 00 00    	je     c0008922 <src_process+0x186>
c00087b3:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087b7:	0f 84 6c 01 00 00    	je     c0008929 <src_process+0x18d>
c00087bd:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087c1:	0f 84 62 01 00 00    	je     c0008929 <src_process+0x18d>
c00087c7:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087ce:	0f 85 5c 01 00 00    	jne    c0008930 <src_process+0x194>
c00087d4:	85 db                	test   ebx,ebx
c00087d6:	0f 84 5b 01 00 00    	je     c0008937 <src_process+0x19b>
c00087dc:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087de:	85 f6                	test   esi,esi
c00087e0:	0f 84 58 01 00 00    	je     c000893e <src_process+0x1a2>
c00087e6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e9:	85 ff                	test   edi,edi
c00087eb:	0f 84 4d 01 00 00    	je     c000893e <src_process+0x1a2>
c00087f1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087f4:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087ff:	68 00 00 70 3f       	push   0x3f700000
c0008804:	6a 00                	push   0x0
c0008806:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000880a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000880e:	e8 c4 fd 01 00       	call   c00285d7 <__ltdf2>
c0008813:	83 c4 10             	add    esp,0x10
c0008816:	85 c0                	test   eax,eax
c0008818:	0f 88 27 01 00 00    	js     c0008945 <src_process+0x1a9>
c000881e:	68 00 00 70 40       	push   0x40700000
c0008823:	6a 00                	push   0x0
c0008825:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008829:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000882d:	e8 87 fd 01 00       	call   c00285b9 <__gtdf2>
c0008832:	83 c4 10             	add    esp,0x10
c0008835:	85 c0                	test   eax,eax
c0008837:	0f 8f 08 01 00 00    	jg     c0008945 <src_process+0x1a9>
c000883d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008841:	79 07                	jns    c000884a <src_process+0xae>
c0008843:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000884a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000884d:	85 c0                	test   eax,eax
c000884f:	79 50                	jns    c00088a1 <src_process+0x105>
c0008851:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008858:	39 fe                	cmp    esi,edi
c000885a:	72 37                	jb     c0008893 <src_process+0xf7>
c000885c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008863:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000886a:	68 00 00 70 3f       	push   0x3f700000
c000886f:	6a 00                	push   0x0
c0008871:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008874:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008877:	e8 5b fd 01 00       	call   c00285d7 <__ltdf2>
c000887c:	83 c4 10             	add    esp,0x10
c000887f:	85 c0                	test   eax,eax
c0008881:	79 37                	jns    c00088ba <src_process+0x11e>
c0008883:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008887:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000888b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000888e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008891:	eb 27                	jmp    c00088ba <src_process+0x11e>
c0008893:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008896:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c000889a:	8d 04 86             	lea    eax,[esi+eax*4]
c000889d:	39 c7                	cmp    edi,eax
c000889f:	eb 0d                	jmp    c00088ae <src_process+0x112>
c00088a1:	39 fe                	cmp    esi,edi
c00088a3:	72 ee                	jb     c0008893 <src_process+0xf7>
c00088a5:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a9:	8d 04 87             	lea    eax,[edi+eax*4]
c00088ac:	39 c6                	cmp    esi,eax
c00088ae:	73 ac                	jae    c000885c <src_process+0xc0>
c00088b0:	b8 10 00 00 00       	mov    eax,0x10
c00088b5:	e9 90 00 00 00       	jmp    c000894a <src_process+0x1ae>
c00088ba:	83 ec 10             	sub    esp,0x10
c00088bd:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088c0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088c3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088c6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c9:	e8 0e f4 01 00       	call   c0027cdc <__subdf3>
c00088ce:	83 c4 18             	add    esp,0x18
c00088d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088d5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d9:	52                   	push   edx
c00088da:	50                   	push   eax
c00088db:	e8 90 fe 01 00       	call   c0028770 <fabs>
c00088e0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088e4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e8:	83 c4 10             	add    esp,0x10
c00088eb:	68 af 03 d2 3c       	push   0x3cd203af
c00088f0:	68 16 56 e7 9e       	push   0x9ee75616
c00088f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088fd:	e8 d5 fc 01 00       	call   c00285d7 <__ltdf2>
c0008902:	83 c4 10             	add    esp,0x10
c0008905:	85 c0                	test   eax,eax
c0008907:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c000890b:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c000890f:	79 05                	jns    c0008916 <src_process+0x17a>
c0008911:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c0008914:	eb 03                	jmp    c0008919 <src_process+0x17d>
c0008916:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008919:	83 c4 1c             	add    esp,0x1c
c000891c:	5b                   	pop    ebx
c000891d:	5e                   	pop    esi
c000891e:	5f                   	pop    edi
c000891f:	5d                   	pop    ebp
c0008920:	ff e0                	jmp    eax
c0008922:	b8 02 00 00 00       	mov    eax,0x2
c0008927:	eb 21                	jmp    c000894a <src_process+0x1ae>
c0008929:	b8 07 00 00 00       	mov    eax,0x7
c000892e:	eb 1a                	jmp    c000894a <src_process+0x1ae>
c0008930:	b8 12 00 00 00       	mov    eax,0x12
c0008935:	eb 13                	jmp    c000894a <src_process+0x1ae>
c0008937:	b8 03 00 00 00       	mov    eax,0x3
c000893c:	eb 0c                	jmp    c000894a <src_process+0x1ae>
c000893e:	b8 04 00 00 00       	mov    eax,0x4
c0008943:	eb 05                	jmp    c000894a <src_process+0x1ae>
c0008945:	b8 06 00 00 00       	mov    eax,0x6
c000894a:	83 c4 1c             	add    esp,0x1c
c000894d:	5b                   	pop    ebx
c000894e:	5e                   	pop    esi
c000894f:	5f                   	pop    edi
c0008950:	5d                   	pop    ebp
c0008951:	c3                   	ret    

c0008952 <src_callback_read>:
c0008952:	55                   	push   ebp
c0008953:	57                   	push   edi
c0008954:	56                   	push   esi
c0008955:	53                   	push   ebx
c0008956:	83 ec 3c             	sub    esp,0x3c
c0008959:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000895d:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008961:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008965:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008969:	85 ed                	test   ebp,ebp
c000896b:	0f 8e 52 01 00 00    	jle    c0008ac3 <src_callback_read+0x171>
c0008971:	85 db                	test   ebx,ebx
c0008973:	0f 84 4a 01 00 00    	je     c0008ac3 <src_callback_read+0x171>
c0008979:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008980:	74 0c                	je     c000898e <src_callback_read+0x3c>
c0008982:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008989:	e9 35 01 00 00       	jmp    c0008ac3 <src_callback_read+0x171>
c000898e:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008992:	75 0c                	jne    c00089a0 <src_callback_read+0x4e>
c0008994:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c000899b:	e9 23 01 00 00       	jmp    c0008ac3 <src_callback_read+0x171>
c00089a0:	51                   	push   ecx
c00089a1:	6a 24                	push   0x24
c00089a3:	6a 00                	push   0x0
c00089a5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a9:	50                   	push   eax
c00089aa:	e8 d1 7d ff ff       	call   c0000780 <memset>
c00089af:	83 c4 10             	add    esp,0x10
c00089b2:	68 00 00 70 3f       	push   0x3f700000
c00089b7:	6a 00                	push   0x0
c00089b9:	57                   	push   edi
c00089ba:	56                   	push   esi
c00089bb:	e8 17 fc 01 00       	call   c00285d7 <__ltdf2>
c00089c0:	83 c4 10             	add    esp,0x10
c00089c3:	85 c0                	test   eax,eax
c00089c5:	78 3e                	js     c0008a05 <src_callback_read+0xb3>
c00089c7:	68 00 00 70 40       	push   0x40700000
c00089cc:	6a 00                	push   0x0
c00089ce:	57                   	push   edi
c00089cf:	56                   	push   esi
c00089d0:	e8 e4 fb 01 00       	call   c00285b9 <__gtdf2>
c00089d5:	83 c4 10             	add    esp,0x10
c00089d8:	85 c0                	test   eax,eax
c00089da:	7f 29                	jg     c0008a05 <src_callback_read+0xb3>
c00089dc:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089e0:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e8:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089ec:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ef:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089f7:	31 f6                	xor    esi,esi
c00089f9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089fc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008a00:	e9 97 00 00 00       	jmp    c0008a9c <src_callback_read+0x14a>
c0008a05:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a0c:	e9 b2 00 00 00       	jmp    c0008ac3 <src_callback_read+0x171>
c0008a11:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a19:	52                   	push   edx
c0008a1a:	52                   	push   edx
c0008a1b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a1f:	50                   	push   eax
c0008a20:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a23:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a26:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a2a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a2e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a32:	83 c4 10             	add    esp,0x10
c0008a35:	85 c0                	test   eax,eax
c0008a37:	75 08                	jne    c0008a41 <src_callback_read+0xef>
c0008a39:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a41:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a48:	50                   	push   eax
c0008a49:	50                   	push   eax
c0008a4a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a4e:	50                   	push   eax
c0008a4f:	53                   	push   ebx
c0008a50:	e8 47 fd ff ff       	call   c000879c <src_process>
c0008a55:	83 c4 10             	add    esp,0x10
c0008a58:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a5f:	85 c0                	test   eax,eax
c0008a61:	75 49                	jne    c0008aac <src_callback_read+0x15a>
c0008a63:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a67:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a6a:	89 f9                	mov    ecx,edi
c0008a6c:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a70:	0f af ca             	imul   ecx,edx
c0008a73:	c1 e1 02             	shl    ecx,0x2
c0008a76:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a7a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a7e:	0f af d1             	imul   edx,ecx
c0008a81:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a85:	c1 e2 02             	shl    edx,0x2
c0008a88:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a8c:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a8f:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a94:	74 12                	je     c0008aa8 <src_callback_read+0x156>
c0008a96:	39 d5                	cmp    ebp,edx
c0008a98:	7e 14                	jle    c0008aae <src_callback_read+0x15c>
c0008a9a:	89 d6                	mov    esi,edx
c0008a9c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008aa1:	75 9e                	jne    c0008a41 <src_callback_read+0xef>
c0008aa3:	e9 69 ff ff ff       	jmp    c0008a11 <src_callback_read+0xbf>
c0008aa8:	85 c9                	test   ecx,ecx
c0008aaa:	75 ea                	jne    c0008a96 <src_callback_read+0x144>
c0008aac:	89 f2                	mov    edx,esi
c0008aae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008ab2:	85 c0                	test   eax,eax
c0008ab4:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008ab7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008abb:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008abe:	74 05                	je     c0008ac5 <src_callback_read+0x173>
c0008ac0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008ac3:	31 d2                	xor    edx,edx
c0008ac5:	83 c4 3c             	add    esp,0x3c
c0008ac8:	89 d0                	mov    eax,edx
c0008aca:	5b                   	pop    ebx
c0008acb:	5e                   	pop    esi
c0008acc:	5f                   	pop    edi
c0008acd:	5d                   	pop    ebp
c0008ace:	c3                   	ret    

c0008acf <src_set_ratio>:
c0008acf:	57                   	push   edi
c0008ad0:	ba 02 00 00 00       	mov    edx,0x2
c0008ad5:	56                   	push   esi
c0008ad6:	53                   	push   ebx
c0008ad7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008adb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008adf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008ae3:	85 db                	test   ebx,ebx
c0008ae5:	74 4c                	je     c0008b33 <src_set_ratio+0x64>
c0008ae7:	ba 07 00 00 00       	mov    edx,0x7
c0008aec:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008af0:	74 41                	je     c0008b33 <src_set_ratio+0x64>
c0008af2:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008af6:	74 3b                	je     c0008b33 <src_set_ratio+0x64>
c0008af8:	68 00 00 70 3f       	push   0x3f700000
c0008afd:	6a 00                	push   0x0
c0008aff:	57                   	push   edi
c0008b00:	56                   	push   esi
c0008b01:	e8 d1 fa 01 00       	call   c00285d7 <__ltdf2>
c0008b06:	83 c4 10             	add    esp,0x10
c0008b09:	ba 06 00 00 00       	mov    edx,0x6
c0008b0e:	85 c0                	test   eax,eax
c0008b10:	78 21                	js     c0008b33 <src_set_ratio+0x64>
c0008b12:	68 00 00 70 40       	push   0x40700000
c0008b17:	6a 00                	push   0x0
c0008b19:	57                   	push   edi
c0008b1a:	56                   	push   esi
c0008b1b:	e8 99 fa 01 00       	call   c00285b9 <__gtdf2>
c0008b20:	83 c4 10             	add    esp,0x10
c0008b23:	ba 06 00 00 00       	mov    edx,0x6
c0008b28:	85 c0                	test   eax,eax
c0008b2a:	7f 07                	jg     c0008b33 <src_set_ratio+0x64>
c0008b2c:	89 33                	mov    DWORD PTR [ebx],esi
c0008b2e:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b31:	31 d2                	xor    edx,edx
c0008b33:	5b                   	pop    ebx
c0008b34:	89 d0                	mov    eax,edx
c0008b36:	5e                   	pop    esi
c0008b37:	5f                   	pop    edi
c0008b38:	c3                   	ret    

c0008b39 <src_get_channels>:
c0008b39:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b3d:	b8 02 00 00 00       	mov    eax,0x2
c0008b42:	85 d2                	test   edx,edx
c0008b44:	74 14                	je     c0008b5a <src_get_channels+0x21>
c0008b46:	b8 07 00 00 00       	mov    eax,0x7
c0008b4b:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b4f:	74 09                	je     c0008b5a <src_get_channels+0x21>
c0008b51:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b55:	74 03                	je     c0008b5a <src_get_channels+0x21>
c0008b57:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b5a:	c3                   	ret    

c0008b5b <src_reset>:
c0008b5b:	53                   	push   ebx
c0008b5c:	b8 02 00 00 00       	mov    eax,0x2
c0008b61:	83 ec 08             	sub    esp,0x8
c0008b64:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b68:	85 db                	test   ebx,ebx
c0008b6a:	74 36                	je     c0008ba2 <src_reset+0x47>
c0008b6c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b6f:	85 c0                	test   eax,eax
c0008b71:	74 09                	je     c0008b7c <src_reset+0x21>
c0008b73:	83 ec 0c             	sub    esp,0xc
c0008b76:	53                   	push   ebx
c0008b77:	ff d0                	call   eax
c0008b79:	83 c4 10             	add    esp,0x10
c0008b7c:	31 c0                	xor    eax,eax
c0008b7e:	31 d2                	xor    edx,edx
c0008b80:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b83:	89 03                	mov    DWORD PTR [ebx],eax
c0008b85:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b88:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b8b:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b92:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b99:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008ba0:	31 c0                	xor    eax,eax
c0008ba2:	83 c4 08             	add    esp,0x8
c0008ba5:	5b                   	pop    ebx
c0008ba6:	c3                   	ret    

c0008ba7 <src_new>:
c0008ba7:	57                   	push   edi
c0008ba8:	56                   	push   esi
c0008ba9:	53                   	push   ebx
c0008baa:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008bae:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008bb2:	85 f6                	test   esi,esi
c0008bb4:	74 73                	je     c0008c29 <src_new+0x82>
c0008bb6:	85 ff                	test   edi,edi
c0008bb8:	7f 08                	jg     c0008bc2 <src_new+0x1b>
c0008bba:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bc0:	eb 1e                	jmp    c0008be0 <src_new+0x39>
c0008bc2:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc8:	50                   	push   eax
c0008bc9:	50                   	push   eax
c0008bca:	6a 3c                	push   0x3c
c0008bcc:	6a 01                	push   0x1
c0008bce:	e8 a8 6c 00 00       	call   c000f87b <calloc>
c0008bd3:	83 c4 10             	add    esp,0x10
c0008bd6:	89 c3                	mov    ebx,eax
c0008bd8:	85 c0                	test   eax,eax
c0008bda:	75 10                	jne    c0008bec <src_new+0x45>
c0008bdc:	85 f6                	test   esi,esi
c0008bde:	75 04                	jne    c0008be4 <src_new+0x3d>
c0008be0:	31 db                	xor    ebx,ebx
c0008be2:	eb 4b                	jmp    c0008c2f <src_new+0x88>
c0008be4:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008bea:	eb 43                	jmp    c0008c2f <src_new+0x88>
c0008bec:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bef:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bf6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bfa:	e8 1d fb ff ff       	call   c000871c <psrc_set_converter>
c0008bff:	85 c0                	test   eax,eax
c0008c01:	74 18                	je     c0008c1b <src_new+0x74>
c0008c03:	85 f6                	test   esi,esi
c0008c05:	74 06                	je     c0008c0d <src_new+0x66>
c0008c07:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c0d:	83 ec 0c             	sub    esp,0xc
c0008c10:	53                   	push   ebx
c0008c11:	31 db                	xor    ebx,ebx
c0008c13:	e8 43 6c 00 00       	call   c000f85b <free>
c0008c18:	83 c4 10             	add    esp,0x10
c0008c1b:	83 ec 0c             	sub    esp,0xc
c0008c1e:	53                   	push   ebx
c0008c1f:	e8 37 ff ff ff       	call   c0008b5b <src_reset>
c0008c24:	83 c4 10             	add    esp,0x10
c0008c27:	eb 06                	jmp    c0008c2f <src_new+0x88>
c0008c29:	85 ff                	test   edi,edi
c0008c2b:	7f 9b                	jg     c0008bc8 <src_new+0x21>
c0008c2d:	eb b1                	jmp    c0008be0 <src_new+0x39>
c0008c2f:	89 d8                	mov    eax,ebx
c0008c31:	5b                   	pop    ebx
c0008c32:	5e                   	pop    esi
c0008c33:	5f                   	pop    edi
c0008c34:	c3                   	ret    

c0008c35 <src_callback_new>:
c0008c35:	56                   	push   esi
c0008c36:	53                   	push   ebx
c0008c37:	53                   	push   ebx
c0008c38:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c3c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c40:	85 f6                	test   esi,esi
c0008c42:	75 0e                	jne    c0008c52 <src_callback_new+0x1d>
c0008c44:	31 db                	xor    ebx,ebx
c0008c46:	85 c0                	test   eax,eax
c0008c48:	74 47                	je     c0008c91 <src_callback_new+0x5c>
c0008c4a:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c50:	eb 3f                	jmp    c0008c91 <src_callback_new+0x5c>
c0008c52:	85 c0                	test   eax,eax
c0008c54:	74 06                	je     c0008c5c <src_callback_new+0x27>
c0008c56:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c5c:	51                   	push   ecx
c0008c5d:	50                   	push   eax
c0008c5e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c62:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c66:	e8 3c ff ff ff       	call   c0008ba7 <src_new>
c0008c6b:	83 c4 10             	add    esp,0x10
c0008c6e:	89 c3                	mov    ebx,eax
c0008c70:	85 c0                	test   eax,eax
c0008c72:	74 1d                	je     c0008c91 <src_callback_new+0x5c>
c0008c74:	83 ec 0c             	sub    esp,0xc
c0008c77:	50                   	push   eax
c0008c78:	e8 de fe ff ff       	call   c0008b5b <src_reset>
c0008c7d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c81:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c88:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c8b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c8e:	83 c4 10             	add    esp,0x10
c0008c91:	89 d8                	mov    eax,ebx
c0008c93:	5a                   	pop    edx
c0008c94:	5b                   	pop    ebx
c0008c95:	5e                   	pop    esi
c0008c96:	c3                   	ret    

c0008c97 <src_get_name>:
c0008c97:	53                   	push   ebx
c0008c98:	83 ec 14             	sub    esp,0x14
c0008c9b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c9f:	53                   	push   ebx
c0008ca0:	e8 d0 4f 00 00       	call   c000dc75 <sinc_get_name>
c0008ca5:	83 c4 10             	add    esp,0x10
c0008ca8:	85 c0                	test   eax,eax
c0008caa:	75 1d                	jne    c0008cc9 <src_get_name+0x32>
c0008cac:	83 ec 0c             	sub    esp,0xc
c0008caf:	53                   	push   ebx
c0008cb0:	e8 80 57 00 00       	call   c000e435 <zoh_get_name>
c0008cb5:	83 c4 10             	add    esp,0x10
c0008cb8:	85 c0                	test   eax,eax
c0008cba:	75 0d                	jne    c0008cc9 <src_get_name+0x32>
c0008cbc:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cc0:	83 c4 08             	add    esp,0x8
c0008cc3:	5b                   	pop    ebx
c0008cc4:	e9 74 0b 00 00       	jmp    c000983d <linear_get_name>
c0008cc9:	83 c4 08             	add    esp,0x8
c0008ccc:	5b                   	pop    ebx
c0008ccd:	c3                   	ret    

c0008cce <src_get_description>:
c0008cce:	53                   	push   ebx
c0008ccf:	83 ec 14             	sub    esp,0x14
c0008cd2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cd6:	53                   	push   ebx
c0008cd7:	e8 ac 4f 00 00       	call   c000dc88 <sinc_get_description>
c0008cdc:	83 c4 10             	add    esp,0x10
c0008cdf:	85 c0                	test   eax,eax
c0008ce1:	75 1d                	jne    c0008d00 <src_get_description+0x32>
c0008ce3:	83 ec 0c             	sub    esp,0xc
c0008ce6:	53                   	push   ebx
c0008ce7:	e8 58 57 00 00       	call   c000e444 <zoh_get_description>
c0008cec:	83 c4 10             	add    esp,0x10
c0008cef:	85 c0                	test   eax,eax
c0008cf1:	75 0d                	jne    c0008d00 <src_get_description+0x32>
c0008cf3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cf7:	83 c4 08             	add    esp,0x8
c0008cfa:	5b                   	pop    ebx
c0008cfb:	e9 4c 0b 00 00       	jmp    c000984c <linear_get_description>
c0008d00:	83 c4 08             	add    esp,0x8
c0008d03:	5b                   	pop    ebx
c0008d04:	c3                   	ret    

c0008d05 <src_get_version>:
c0008d05:	b8 20 9a 02 c0       	mov    eax,0xc0029a20
c0008d0a:	c3                   	ret    

c0008d0b <src_is_valid_ratio>:
c0008d0b:	83 ec 1c             	sub    esp,0x1c
c0008d0e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d16:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d1a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d1e:	68 00 00 70 3f       	push   0x3f700000
c0008d23:	6a 00                	push   0x0
c0008d25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d2d:	e8 a5 f8 01 00       	call   c00285d7 <__ltdf2>
c0008d32:	83 c4 10             	add    esp,0x10
c0008d35:	31 d2                	xor    edx,edx
c0008d37:	85 c0                	test   eax,eax
c0008d39:	78 1e                	js     c0008d59 <src_is_valid_ratio+0x4e>
c0008d3b:	68 00 00 70 40       	push   0x40700000
c0008d40:	6a 00                	push   0x0
c0008d42:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d4a:	e8 6a f8 01 00       	call   c00285b9 <__gtdf2>
c0008d4f:	31 d2                	xor    edx,edx
c0008d51:	83 c4 10             	add    esp,0x10
c0008d54:	85 c0                	test   eax,eax
c0008d56:	0f 9e c2             	setle  dl
c0008d59:	89 d0                	mov    eax,edx
c0008d5b:	83 c4 1c             	add    esp,0x1c
c0008d5e:	c3                   	ret    

c0008d5f <src_error>:
c0008d5f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d63:	31 c0                	xor    eax,eax
c0008d65:	85 d2                	test   edx,edx
c0008d67:	74 03                	je     c0008d6c <src_error+0xd>
c0008d69:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d6c:	c3                   	ret    

c0008d6d <src_strerror>:
c0008d6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d71:	31 c0                	xor    eax,eax
c0008d73:	83 fa 17             	cmp    edx,0x17
c0008d76:	77 07                	ja     c0008d7f <src_strerror+0x12>
c0008d78:	8b 04 95 80 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6180]
c0008d7f:	c3                   	ret    

c0008d80 <src_simple>:
c0008d80:	56                   	push   esi
c0008d81:	53                   	push   ebx
c0008d82:	83 ec 18             	sub    esp,0x18
c0008d85:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d89:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d8d:	50                   	push   eax
c0008d8e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d92:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d96:	e8 0c fe ff ff       	call   c0008ba7 <src_new>
c0008d9b:	83 c4 10             	add    esp,0x10
c0008d9e:	85 c0                	test   eax,eax
c0008da0:	75 06                	jne    c0008da8 <src_simple+0x28>
c0008da2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008da6:	eb 25                	jmp    c0008dcd <src_simple+0x4d>
c0008da8:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008daf:	89 c3                	mov    ebx,eax
c0008db1:	50                   	push   eax
c0008db2:	50                   	push   eax
c0008db3:	56                   	push   esi
c0008db4:	53                   	push   ebx
c0008db5:	e8 e2 f9 ff ff       	call   c000879c <src_process>
c0008dba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008dbd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008dc1:	e8 9a f9 ff ff       	call   c0008760 <src_delete>
c0008dc6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dca:	83 c4 10             	add    esp,0x10
c0008dcd:	83 c4 14             	add    esp,0x14
c0008dd0:	5b                   	pop    ebx
c0008dd1:	5e                   	pop    esi
c0008dd2:	c3                   	ret    

c0008dd3 <src_short_to_float_array>:
c0008dd3:	53                   	push   ebx
c0008dd4:	83 ec 18             	sub    esp,0x18
c0008dd7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ddb:	85 db                	test   ebx,ebx
c0008ddd:	74 54                	je     c0008e33 <src_short_to_float_array+0x60>
c0008ddf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008de3:	4b                   	dec    ebx
c0008de4:	83 ec 0c             	sub    esp,0xc
c0008de7:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008deb:	50                   	push   eax
c0008dec:	e8 7a f5 01 00       	call   c002836b <__floatsidf>
c0008df1:	83 c4 10             	add    esp,0x10
c0008df4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dfc:	68 00 00 00 3f       	push   0x3f000000
c0008e01:	6a 00                	push   0x0
c0008e03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e0b:	e8 f8 ee 01 00       	call   c0027d08 <__muldf3>
c0008e10:	59                   	pop    ecx
c0008e11:	59                   	pop    ecx
c0008e12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e16:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e22:	e8 b4 f7 01 00       	call   c00285db <__truncdfsf2>
c0008e27:	83 c4 10             	add    esp,0x10
c0008e2a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e2e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e31:	eb a8                	jmp    c0008ddb <src_short_to_float_array+0x8>
c0008e33:	83 c4 18             	add    esp,0x18
c0008e36:	5b                   	pop    ebx
c0008e37:	c3                   	ret    

c0008e38 <src_float_to_short_array>:
c0008e38:	56                   	push   esi
c0008e39:	53                   	push   ebx
c0008e3a:	83 ec 14             	sub    esp,0x14
c0008e3d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e41:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e45:	85 db                	test   ebx,ebx
c0008e47:	0f 84 a4 00 00 00    	je     c0008ef1 <src_float_to_short_array+0xb9>
c0008e4d:	83 ec 0c             	sub    esp,0xc
c0008e50:	4b                   	dec    ebx
c0008e51:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e55:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e58:	e8 a2 f8 01 00       	call   c00286ff <__extendsfdf2>
c0008e5d:	83 c4 10             	add    esp,0x10
c0008e60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e68:	68 00 00 e0 41       	push   0x41e00000
c0008e6d:	6a 00                	push   0x0
c0008e6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e77:	e8 8c ee 01 00       	call   c0027d08 <__muldf3>
c0008e7c:	83 c4 10             	add    esp,0x10
c0008e7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e83:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e87:	68 ff ff df 41       	push   0x41dfffff
c0008e8c:	68 00 00 c0 ff       	push   0xffc00000
c0008e91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e99:	e8 37 f7 01 00       	call   c00285d5 <__gedf2>
c0008e9e:	83 c4 10             	add    esp,0x10
c0008ea1:	85 c0                	test   eax,eax
c0008ea3:	78 08                	js     c0008ead <src_float_to_short_array+0x75>
c0008ea5:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008eab:	eb 98                	jmp    c0008e45 <src_float_to_short_array+0xd>
c0008ead:	68 00 00 e0 c1       	push   0xc1e00000
c0008eb2:	6a 00                	push   0x0
c0008eb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ebc:	e8 18 f7 01 00       	call   c00285d9 <__ledf2>
c0008ec1:	83 c4 10             	add    esp,0x10
c0008ec4:	85 c0                	test   eax,eax
c0008ec6:	7f 0b                	jg     c0008ed3 <src_float_to_short_array+0x9b>
c0008ec8:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ece:	e9 72 ff ff ff       	jmp    c0008e45 <src_float_to_short_array+0xd>
c0008ed3:	50                   	push   eax
c0008ed4:	50                   	push   eax
c0008ed5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008edd:	e8 ae f8 01 00       	call   c0028790 <lrint>
c0008ee2:	83 c4 10             	add    esp,0x10
c0008ee5:	c1 f8 10             	sar    eax,0x10
c0008ee8:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eec:	e9 54 ff ff ff       	jmp    c0008e45 <src_float_to_short_array+0xd>
c0008ef1:	83 c4 14             	add    esp,0x14
c0008ef4:	5b                   	pop    ebx
c0008ef5:	5e                   	pop    esi
c0008ef6:	c3                   	ret    

c0008ef7 <src_int_to_float_array>:
c0008ef7:	53                   	push   ebx
c0008ef8:	83 ec 18             	sub    esp,0x18
c0008efb:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008eff:	85 db                	test   ebx,ebx
c0008f01:	74 52                	je     c0008f55 <src_int_to_float_array+0x5e>
c0008f03:	83 ec 0c             	sub    esp,0xc
c0008f06:	4b                   	dec    ebx
c0008f07:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f0b:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f0e:	e8 58 f4 01 00       	call   c002836b <__floatsidf>
c0008f13:	83 c4 10             	add    esp,0x10
c0008f16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f1e:	68 00 00 00 3e       	push   0x3e000000
c0008f23:	6a 00                	push   0x0
c0008f25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f2d:	e8 d6 ed 01 00       	call   c0027d08 <__muldf3>
c0008f32:	59                   	pop    ecx
c0008f33:	59                   	pop    ecx
c0008f34:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f38:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f44:	e8 92 f6 01 00       	call   c00285db <__truncdfsf2>
c0008f49:	83 c4 10             	add    esp,0x10
c0008f4c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f50:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f53:	eb aa                	jmp    c0008eff <src_int_to_float_array+0x8>
c0008f55:	83 c4 18             	add    esp,0x18
c0008f58:	5b                   	pop    ebx
c0008f59:	c3                   	ret    

c0008f5a <src_float_to_int_array>:
c0008f5a:	56                   	push   esi
c0008f5b:	53                   	push   ebx
c0008f5c:	83 ec 14             	sub    esp,0x14
c0008f5f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f63:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f67:	85 db                	test   ebx,ebx
c0008f69:	0f 84 a2 00 00 00    	je     c0009011 <src_float_to_int_array+0xb7>
c0008f6f:	83 ec 0c             	sub    esp,0xc
c0008f72:	4b                   	dec    ebx
c0008f73:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f77:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f7a:	e8 80 f7 01 00       	call   c00286ff <__extendsfdf2>
c0008f7f:	83 c4 10             	add    esp,0x10
c0008f82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f8a:	68 00 00 e0 41       	push   0x41e00000
c0008f8f:	6a 00                	push   0x0
c0008f91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	e8 6a ed 01 00       	call   c0027d08 <__muldf3>
c0008f9e:	83 c4 10             	add    esp,0x10
c0008fa1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008fa5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa9:	68 ff ff df 41       	push   0x41dfffff
c0008fae:	68 00 00 c0 ff       	push   0xffc00000
c0008fb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	e8 15 f6 01 00       	call   c00285d5 <__gedf2>
c0008fc0:	83 c4 10             	add    esp,0x10
c0008fc3:	85 c0                	test   eax,eax
c0008fc5:	78 09                	js     c0008fd0 <src_float_to_int_array+0x76>
c0008fc7:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fce:	eb 97                	jmp    c0008f67 <src_float_to_int_array+0xd>
c0008fd0:	68 00 00 e0 c1       	push   0xc1e00000
c0008fd5:	6a 00                	push   0x0
c0008fd7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fdb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fdf:	e8 f5 f5 01 00       	call   c00285d9 <__ledf2>
c0008fe4:	83 c4 10             	add    esp,0x10
c0008fe7:	85 c0                	test   eax,eax
c0008fe9:	7f 0c                	jg     c0008ff7 <src_float_to_int_array+0x9d>
c0008feb:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008ff2:	e9 70 ff ff ff       	jmp    c0008f67 <src_float_to_int_array+0xd>
c0008ff7:	50                   	push   eax
c0008ff8:	50                   	push   eax
c0008ff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ffd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009001:	e8 8a f7 01 00       	call   c0028790 <lrint>
c0009006:	83 c4 10             	add    esp,0x10
c0009009:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c000900c:	e9 56 ff ff ff       	jmp    c0008f67 <src_float_to_int_array+0xd>
c0009011:	83 c4 14             	add    esp,0x14
c0009014:	5b                   	pop    ebx
c0009015:	5e                   	pop    esi
c0009016:	c3                   	ret    

c0009017 <linear_vari_process>:
c0009017:	55                   	push   ebp
c0009018:	31 d2                	xor    edx,edx
c000901a:	57                   	push   edi
c000901b:	56                   	push   esi
c000901c:	53                   	push   ebx
c000901d:	83 ec 3c             	sub    esp,0x3c
c0009020:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0009024:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009028:	0f 8e d3 07 00 00    	jle    c0009801 <linear_vari_process+0x7ea>
c000902e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009032:	ba 05 00 00 00       	mov    edx,0x5
c0009037:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000903a:	85 db                	test   ebx,ebx
c000903c:	0f 84 bf 07 00 00    	je     c0009801 <linear_vari_process+0x7ea>
c0009042:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009045:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009049:	74 19                	je     c0009064 <linear_vari_process+0x4d>
c000904b:	31 d2                	xor    edx,edx
c000904d:	39 c2                	cmp    edx,eax
c000904f:	7d 0c                	jge    c000905d <linear_vari_process+0x46>
c0009051:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009053:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009056:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000905a:	42                   	inc    edx
c000905b:	eb f0                	jmp    c000904d <linear_vari_process+0x36>
c000905d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009064:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009067:	0f af d0             	imul   edx,eax
c000906a:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000906d:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009071:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009078:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000907b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009082:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009086:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009089:	8b 00                	mov    eax,DWORD PTR [eax]
c000908b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000908f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009093:	68 00 00 70 3f       	push   0x3f700000
c0009098:	6a 00                	push   0x0
c000909a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090a2:	e8 30 f5 01 00       	call   c00285d7 <__ltdf2>
c00090a7:	83 c4 10             	add    esp,0x10
c00090aa:	ba 16 00 00 00       	mov    edx,0x16
c00090af:	85 c0                	test   eax,eax
c00090b1:	0f 88 4a 07 00 00    	js     c0009801 <linear_vari_process+0x7ea>
c00090b7:	68 00 00 70 40       	push   0x40700000
c00090bc:	6a 00                	push   0x0
c00090be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c6:	e8 ee f4 01 00       	call   c00285b9 <__gtdf2>
c00090cb:	83 c4 10             	add    esp,0x10
c00090ce:	ba 16 00 00 00       	mov    edx,0x16
c00090d3:	85 c0                	test   eax,eax
c00090d5:	0f 8f 26 07 00 00    	jg     c0009801 <linear_vari_process+0x7ea>
c00090db:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090df:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090e2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ed:	68 00 00 f0 3f       	push   0x3ff00000
c00090f2:	6a 00                	push   0x0
c00090f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fc:	e8 d6 f4 01 00       	call   c00285d7 <__ltdf2>
c0009101:	83 c4 10             	add    esp,0x10
c0009104:	85 c0                	test   eax,eax
c0009106:	0f 89 89 02 00 00    	jns    c0009395 <linear_vari_process+0x37e>
c000910c:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c000910f:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0009112:	0f 8d 7d 02 00 00    	jge    c0009395 <linear_vari_process+0x37e>
c0009118:	83 ec 0c             	sub    esp,0xc
c000911b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000911e:	e8 48 f2 01 00       	call   c002836b <__floatsidf>
c0009123:	83 c4 10             	add    esp,0x10
c0009126:	89 04 24             	mov    DWORD PTR [esp],eax
c0009129:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000912d:	68 00 00 f0 3f       	push   0x3ff00000
c0009132:	6a 00                	push   0x0
c0009134:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009138:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000913c:	e8 4a e5 01 00       	call   c002768b <__adddf3>
c0009141:	83 c4 10             	add    esp,0x10
c0009144:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009148:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000914c:	52                   	push   edx
c000914d:	50                   	push   eax
c000914e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009152:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009156:	e8 ad eb 01 00       	call   c0027d08 <__muldf3>
c000915b:	5d                   	pop    ebp
c000915c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009160:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009164:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009167:	e8 ff f1 01 00       	call   c002836b <__floatsidf>
c000916c:	83 c4 10             	add    esp,0x10
c000916f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009173:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009177:	52                   	push   edx
c0009178:	50                   	push   eax
c0009179:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000917d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009181:	e8 05 e5 01 00       	call   c002768b <__adddf3>
c0009186:	59                   	pop    ecx
c0009187:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000918b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000918f:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009192:	e8 d4 f1 01 00       	call   c002836b <__floatsidf>
c0009197:	83 c4 10             	add    esp,0x10
c000919a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000919e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00091a2:	52                   	push   edx
c00091a3:	50                   	push   eax
c00091a4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091ac:	e8 24 f4 01 00       	call   c00285d5 <__gedf2>
c00091b1:	83 c4 10             	add    esp,0x10
c00091b4:	85 c0                	test   eax,eax
c00091b6:	0f 89 d9 01 00 00    	jns    c0009395 <linear_vari_process+0x37e>
c00091bc:	85 ff                	test   edi,edi
c00091be:	0f 8e f4 00 00 00    	jle    c00092b8 <linear_vari_process+0x2a1>
c00091c4:	83 ec 10             	sub    esp,0x10
c00091c7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ca:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091cd:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091d1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091d4:	ff 30                	push   DWORD PTR [eax]
c00091d6:	e8 01 eb 01 00       	call   c0027cdc <__subdf3>
c00091db:	83 c4 18             	add    esp,0x18
c00091de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091e6:	52                   	push   edx
c00091e7:	50                   	push   eax
c00091e8:	e8 83 f5 01 00       	call   c0028770 <fabs>
c00091ed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091f1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091f5:	83 c4 10             	add    esp,0x10
c00091f8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091fd:	68 23 42 92 0c       	push   0xc924223
c0009202:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009206:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000920a:	e8 aa f3 01 00       	call   c00285b9 <__gtdf2>
c000920f:	83 c4 10             	add    esp,0x10
c0009212:	85 c0                	test   eax,eax
c0009214:	0f 8e 9e 00 00 00    	jle    c00092b8 <linear_vari_process+0x2a1>
c000921a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000921e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009221:	8b 00                	mov    eax,DWORD PTR [eax]
c0009223:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009227:	89 04 24             	mov    DWORD PTR [esp],eax
c000922a:	52                   	push   edx
c000922b:	50                   	push   eax
c000922c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000922f:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009232:	e8 a5 ea 01 00       	call   c0027cdc <__subdf3>
c0009237:	59                   	pop    ecx
c0009238:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000923c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009240:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009243:	e8 23 f1 01 00       	call   c002836b <__floatsidf>
c0009248:	83 c4 10             	add    esp,0x10
c000924b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000924f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009253:	52                   	push   edx
c0009254:	50                   	push   eax
c0009255:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009259:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000925d:	e8 a6 ea 01 00       	call   c0027d08 <__muldf3>
c0009262:	5f                   	pop    edi
c0009263:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009267:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000926b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000926e:	e8 f8 f0 01 00       	call   c002836b <__floatsidf>
c0009273:	83 c4 10             	add    esp,0x10
c0009276:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000927a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000927e:	52                   	push   edx
c000927f:	50                   	push   eax
c0009280:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009284:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009288:	e8 5f ed 01 00       	call   c0027fec <__divdf3>
c000928d:	83 c4 10             	add    esp,0x10
c0009290:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009294:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009298:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000929c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00092a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a8:	e8 de e3 01 00       	call   c002768b <__adddf3>
c00092ad:	83 c4 10             	add    esp,0x10
c00092b0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b8:	31 ff                	xor    edi,edi
c00092ba:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092bd:	0f 8e 9d 00 00 00    	jle    c0009360 <linear_vari_process+0x349>
c00092c3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092c6:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092ca:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092cd:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092d1:	89 04 24             	mov    DWORD PTR [esp],eax
c00092d4:	8b 06                	mov    eax,DWORD PTR [esi]
c00092d6:	52                   	push   edx
c00092d7:	52                   	push   edx
c00092d8:	55                   	push   ebp
c00092d9:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092dc:	47                   	inc    edi
c00092dd:	e8 3e dd 01 00       	call   c0027020 <__subsf3>
c00092e2:	89 04 24             	mov    DWORD PTR [esp],eax
c00092e5:	e8 15 f4 01 00       	call   c00286ff <__extendsfdf2>
c00092ea:	83 c4 10             	add    esp,0x10
c00092ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092f1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009301:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009305:	e8 fe e9 01 00       	call   c0027d08 <__muldf3>
c000930a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000930d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009311:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009315:	e8 e5 f3 01 00       	call   c00286ff <__extendsfdf2>
c000931a:	83 c4 10             	add    esp,0x10
c000931d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009321:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009325:	52                   	push   edx
c0009326:	50                   	push   eax
c0009327:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000932b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000932f:	e8 57 e3 01 00       	call   c002768b <__adddf3>
c0009334:	59                   	pop    ecx
c0009335:	5d                   	pop    ebp
c0009336:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000933a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000933e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009342:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009346:	e8 90 f2 01 00       	call   c00285db <__truncdfsf2>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009351:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009355:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009358:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000935b:	e9 5a ff ff ff       	jmp    c00092ba <linear_vari_process+0x2a3>
c0009360:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009364:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009368:	68 00 00 f0 3f       	push   0x3ff00000
c000936d:	6a 00                	push   0x0
c000936f:	e8 78 ec 01 00       	call   c0027fec <__divdf3>
c0009374:	83 c4 10             	add    esp,0x10
c0009377:	89 04 24             	mov    DWORD PTR [esp],eax
c000937a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000937e:	52                   	push   edx
c000937f:	50                   	push   eax
c0009380:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009384:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009388:	e8 fe e2 01 00       	call   c002768b <__adddf3>
c000938d:	83 c4 10             	add    esp,0x10
c0009390:	e9 50 fd ff ff       	jmp    c00090e5 <linear_vari_process+0xce>
c0009395:	50                   	push   eax
c0009396:	50                   	push   eax
c0009397:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000939b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000939f:	e8 ec f3 01 00       	call   c0028790 <lrint>
c00093a4:	83 ec 0c             	sub    esp,0xc
c00093a7:	50                   	push   eax
c00093a8:	e8 be ef 01 00       	call   c002836b <__floatsidf>
c00093ad:	83 c4 10             	add    esp,0x10
c00093b0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b8:	52                   	push   edx
c00093b9:	50                   	push   eax
c00093ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093c2:	e8 15 e9 01 00       	call   c0027cdc <__subdf3>
c00093c7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093cb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093cf:	83 c4 20             	add    esp,0x20
c00093d2:	6a 00                	push   0x0
c00093d4:	6a 00                	push   0x0
c00093d6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093da:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093de:	e8 f4 f1 01 00       	call   c00285d7 <__ltdf2>
c00093e3:	83 c4 10             	add    esp,0x10
c00093e6:	85 c0                	test   eax,eax
c00093e8:	79 1e                	jns    c0009408 <linear_vari_process+0x3f1>
c00093ea:	68 00 00 f0 3f       	push   0x3ff00000
c00093ef:	6a 00                	push   0x0
c00093f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f9:	e8 8d e2 01 00       	call   c002768b <__adddf3>
c00093fe:	83 c4 10             	add    esp,0x10
c0009401:	89 04 24             	mov    DWORD PTR [esp],eax
c0009404:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009408:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000940b:	83 ec 10             	sub    esp,0x10
c000940e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009412:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009416:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000941a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000941e:	e8 b9 e8 01 00       	call   c0027cdc <__subdf3>
c0009423:	83 c4 18             	add    esp,0x18
c0009426:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000942a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000942e:	52                   	push   edx
c000942f:	50                   	push   eax
c0009430:	e8 5b f3 01 00       	call   c0028790 <lrint>
c0009435:	83 c4 10             	add    esp,0x10
c0009438:	0f af f8             	imul   edi,eax
c000943b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000943e:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009441:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009444:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009447:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000944a:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000944e:	0f 8d 13 03 00 00    	jge    c0009767 <linear_vari_process+0x750>
c0009454:	83 ec 0c             	sub    esp,0xc
c0009457:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000945a:	e8 0c ef 01 00       	call   c002836b <__floatsidf>
c000945f:	83 c4 10             	add    esp,0x10
c0009462:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009466:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000946a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009472:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009476:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000947a:	e8 89 e8 01 00       	call   c0027d08 <__muldf3>
c000947f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009482:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009486:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000948a:	e8 dc ee 01 00       	call   c002836b <__floatsidf>
c000948f:	83 c4 10             	add    esp,0x10
c0009492:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009496:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000949a:	52                   	push   edx
c000949b:	50                   	push   eax
c000949c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a4:	e8 e2 e1 01 00       	call   c002768b <__adddf3>
c00094a9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094b4:	e8 b2 ee 01 00       	call   c002836b <__floatsidf>
c00094b9:	83 c4 10             	add    esp,0x10
c00094bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094c0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094c4:	52                   	push   edx
c00094c5:	50                   	push   eax
c00094c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ce:	e8 04 f1 01 00       	call   c00285d7 <__ltdf2>
c00094d3:	83 c4 10             	add    esp,0x10
c00094d6:	85 c0                	test   eax,eax
c00094d8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094dc:	0f 89 85 02 00 00    	jns    c0009767 <linear_vari_process+0x750>
c00094e2:	85 c9                	test   ecx,ecx
c00094e4:	0f 8e f5 00 00 00    	jle    c00095df <linear_vari_process+0x5c8>
c00094ea:	83 ec 10             	sub    esp,0x10
c00094ed:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094f0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094f3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094f7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094fa:	ff 30                	push   DWORD PTR [eax]
c00094fc:	e8 db e7 01 00       	call   c0027cdc <__subdf3>
c0009501:	83 c4 18             	add    esp,0x18
c0009504:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009508:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000950c:	52                   	push   edx
c000950d:	50                   	push   eax
c000950e:	e8 5d f2 01 00       	call   c0028770 <fabs>
c0009513:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009517:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000951b:	83 c4 10             	add    esp,0x10
c000951e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009523:	68 23 42 92 0c       	push   0xc924223
c0009528:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000952c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009530:	e8 84 f0 01 00       	call   c00285b9 <__gtdf2>
c0009535:	83 c4 10             	add    esp,0x10
c0009538:	85 c0                	test   eax,eax
c000953a:	0f 8e 9f 00 00 00    	jle    c00095df <linear_vari_process+0x5c8>
c0009540:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009544:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009547:	8b 00                	mov    eax,DWORD PTR [eax]
c0009549:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000954d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009551:	52                   	push   edx
c0009552:	50                   	push   eax
c0009553:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009556:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009559:	e8 7e e7 01 00       	call   c0027cdc <__subdf3>
c000955e:	5f                   	pop    edi
c000955f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009563:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009567:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000956a:	e8 fc ed 01 00       	call   c002836b <__floatsidf>
c000956f:	83 c4 10             	add    esp,0x10
c0009572:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009576:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000957a:	52                   	push   edx
c000957b:	50                   	push   eax
c000957c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009580:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009584:	e8 7f e7 01 00       	call   c0027d08 <__muldf3>
c0009589:	5d                   	pop    ebp
c000958a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000958e:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009592:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009595:	e8 d1 ed 01 00       	call   c002836b <__floatsidf>
c000959a:	83 c4 10             	add    esp,0x10
c000959d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095a1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095a5:	52                   	push   edx
c00095a6:	50                   	push   eax
c00095a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095af:	e8 38 ea 01 00       	call   c0027fec <__divdf3>
c00095b4:	83 c4 10             	add    esp,0x10
c00095b7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095bb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095bf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095c3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095cf:	e8 b7 e0 01 00       	call   c002768b <__adddf3>
c00095d4:	83 c4 10             	add    esp,0x10
c00095d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095df:	31 ff                	xor    edi,edi
c00095e1:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095e4:	39 f8                	cmp    eax,edi
c00095e6:	0f 8e ac 00 00 00    	jle    c0009698 <linear_vari_process+0x681>
c00095ec:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ee:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095f1:	29 c1                	sub    ecx,eax
c00095f3:	89 c8                	mov    eax,ecx
c00095f5:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f8:	01 f8                	add    eax,edi
c00095fa:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095fe:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c0009601:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009604:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009608:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000960b:	51                   	push   ecx
c000960c:	01 f8                	add    eax,edi
c000960e:	51                   	push   ecx
c000960f:	47                   	inc    edi
c0009610:	55                   	push   ebp
c0009611:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c0009614:	e8 07 da 01 00       	call   c0027020 <__subsf3>
c0009619:	89 04 24             	mov    DWORD PTR [esp],eax
c000961c:	e8 de f0 01 00       	call   c00286ff <__extendsfdf2>
c0009621:	83 c4 10             	add    esp,0x10
c0009624:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009628:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000962c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009630:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009634:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009638:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963c:	e8 c7 e6 01 00       	call   c0027d08 <__muldf3>
c0009641:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009644:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009648:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000964c:	e8 ae f0 01 00       	call   c00286ff <__extendsfdf2>
c0009651:	83 c4 10             	add    esp,0x10
c0009654:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009658:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000965c:	52                   	push   edx
c000965d:	50                   	push   eax
c000965e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009662:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009666:	e8 20 e0 01 00       	call   c002768b <__adddf3>
c000966b:	5d                   	pop    ebp
c000966c:	59                   	pop    ecx
c000966d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009671:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009675:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009679:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000967d:	e8 59 ef 01 00       	call   c00285db <__truncdfsf2>
c0009682:	83 c4 10             	add    esp,0x10
c0009685:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009689:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000968d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009690:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009693:	e9 49 ff ff ff       	jmp    c00095e1 <linear_vari_process+0x5ca>
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096a0:	68 00 00 f0 3f       	push   0x3ff00000
c00096a5:	6a 00                	push   0x0
c00096a7:	e8 40 e9 01 00       	call   c0027fec <__divdf3>
c00096ac:	83 c4 10             	add    esp,0x10
c00096af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096b7:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096bb:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096c7:	e8 bf df 01 00       	call   c002768b <__adddf3>
c00096cc:	59                   	pop    ecx
c00096cd:	5f                   	pop    edi
c00096ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096de:	e8 ad f0 01 00       	call   c0028790 <lrint>
c00096e3:	83 ec 0c             	sub    esp,0xc
c00096e6:	50                   	push   eax
c00096e7:	e8 7f ec 01 00       	call   c002836b <__floatsidf>
c00096ec:	83 c4 10             	add    esp,0x10
c00096ef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096f3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096f7:	52                   	push   edx
c00096f8:	50                   	push   eax
c00096f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009701:	e8 d6 e5 01 00       	call   c0027cdc <__subdf3>
c0009706:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000970a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000970e:	83 c4 20             	add    esp,0x20
c0009711:	6a 00                	push   0x0
c0009713:	6a 00                	push   0x0
c0009715:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009719:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000971d:	e8 b5 ee 01 00       	call   c00285d7 <__ltdf2>
c0009722:	83 c4 10             	add    esp,0x10
c0009725:	85 c0                	test   eax,eax
c0009727:	79 1e                	jns    c0009747 <linear_vari_process+0x730>
c0009729:	68 00 00 f0 3f       	push   0x3ff00000
c000972e:	6a 00                	push   0x0
c0009730:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009734:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009738:	e8 4e df 01 00       	call   c002768b <__adddf3>
c000973d:	83 c4 10             	add    esp,0x10
c0009740:	89 04 24             	mov    DWORD PTR [esp],eax
c0009743:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009747:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000974a:	83 ec 10             	sub    esp,0x10
c000974d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009755:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009759:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000975d:	e8 7a e5 01 00       	call   c0027cdc <__subdf3>
c0009762:	e9 bc fc ff ff       	jmp    c0009423 <linear_vari_process+0x40c>
c0009767:	39 fd                	cmp    ebp,edi
c0009769:	7d 38                	jge    c00097a3 <linear_vari_process+0x78c>
c000976b:	83 ec 0c             	sub    esp,0xc
c000976e:	89 f8                	mov    eax,edi
c0009770:	29 e8                	sub    eax,ebp
c0009772:	99                   	cdq    
c0009773:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009776:	50                   	push   eax
c0009777:	e8 ef eb 01 00       	call   c002836b <__floatsidf>
c000977c:	83 c4 10             	add    esp,0x10
c000977f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009783:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009787:	52                   	push   edx
c0009788:	50                   	push   eax
c0009789:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000978d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009791:	e8 f5 de 01 00       	call   c002768b <__adddf3>
c0009796:	83 c4 10             	add    esp,0x10
c0009799:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000979c:	89 04 24             	mov    DWORD PTR [esp],eax
c000979f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00097a3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097a7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097aa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097ae:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097b1:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097b4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097b7:	85 c0                	test   eax,eax
c00097b9:	7f 29                	jg     c00097e4 <linear_vari_process+0x7cd>
c00097bb:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097c7:	89 01                	mov    DWORD PTR [ecx],eax
c00097c9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097cc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097cf:	99                   	cdq    
c00097d0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d3:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097d6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d9:	99                   	cdq    
c00097da:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097dd:	31 d2                	xor    edx,edx
c00097df:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097e2:	eb 1d                	jmp    c0009801 <linear_vari_process+0x7ea>
c00097e4:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097e7:	31 d2                	xor    edx,edx
c00097e9:	29 c8                	sub    eax,ecx
c00097eb:	c1 e0 02             	shl    eax,0x2
c00097ee:	39 d1                	cmp    ecx,edx
c00097f0:	7e c9                	jle    c00097bb <linear_vari_process+0x7a4>
c00097f2:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097f4:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097f7:	83 c0 04             	add    eax,0x4
c00097fa:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097fe:	42                   	inc    edx
c00097ff:	eb ed                	jmp    c00097ee <linear_vari_process+0x7d7>
c0009801:	83 c4 3c             	add    esp,0x3c
c0009804:	89 d0                	mov    eax,edx
c0009806:	5b                   	pop    ebx
c0009807:	5e                   	pop    esi
c0009808:	5f                   	pop    edi
c0009809:	5d                   	pop    ebp
c000980a:	c3                   	ret    

c000980b <linear_reset>:
c000980b:	83 ec 0c             	sub    esp,0xc
c000980e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009812:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0009815:	85 c0                	test   eax,eax
c0009817:	74 20                	je     c0009839 <linear_reset+0x2e>
c0009819:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000981c:	83 c0 1c             	add    eax,0x1c
c000981f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0009822:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009829:	c1 e2 02             	shl    edx,0x2
c000982c:	51                   	push   ecx
c000982d:	52                   	push   edx
c000982e:	6a 00                	push   0x0
c0009830:	50                   	push   eax
c0009831:	e8 4a 6f ff ff       	call   c0000780 <memset>
c0009836:	83 c4 10             	add    esp,0x10
c0009839:	83 c4 0c             	add    esp,0xc
c000983c:	c3                   	ret    

c000983d <linear_get_name>:
c000983d:	31 c0                	xor    eax,eax
c000983f:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009844:	75 05                	jne    c000984b <linear_get_name+0xe>
c0009846:	b8 e0 9e 02 c0       	mov    eax,0xc0029ee0
c000984b:	c3                   	ret    

c000984c <linear_get_description>:
c000984c:	31 c0                	xor    eax,eax
c000984e:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009853:	75 05                	jne    c000985a <linear_get_description+0xe>
c0009855:	b8 f4 9e 02 c0       	mov    eax,0xc0029ef4
c000985a:	c3                   	ret    

c000985b <linear_set_converter>:
c000985b:	53                   	push   ebx
c000985c:	b8 0a 00 00 00       	mov    eax,0xa
c0009861:	83 ec 08             	sub    esp,0x8
c0009864:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009868:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000986d:	75 6e                	jne    c00098dd <linear_set_converter+0x82>
c000986f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009872:	85 c0                	test   eax,eax
c0009874:	74 13                	je     c0009889 <linear_set_converter+0x2e>
c0009876:	83 ec 0c             	sub    esp,0xc
c0009879:	50                   	push   eax
c000987a:	e8 dc 5f 00 00       	call   c000f85b <free>
c000987f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009886:	83 c4 10             	add    esp,0x10
c0009889:	50                   	push   eax
c000988a:	50                   	push   eax
c000988b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000988e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009895:	50                   	push   eax
c0009896:	6a 01                	push   0x1
c0009898:	e8 de 5f 00 00       	call   c000f87b <calloc>
c000989d:	83 c4 10             	add    esp,0x10
c00098a0:	89 c2                	mov    edx,eax
c00098a2:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00098a5:	85 d2                	test   edx,edx
c00098a7:	b8 01 00 00 00       	mov    eax,0x1
c00098ac:	74 2f                	je     c00098dd <linear_set_converter+0x82>
c00098ae:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098b1:	83 ec 0c             	sub    esp,0xc
c00098b4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098b7:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098bd:	c7 43 24 17 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009017
c00098c4:	c7 43 20 17 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009017
c00098cb:	c7 43 28 0b 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000980b
c00098d2:	53                   	push   ebx
c00098d3:	e8 33 ff ff ff       	call   c000980b <linear_reset>
c00098d8:	83 c4 10             	add    esp,0x10
c00098db:	31 c0                	xor    eax,eax
c00098dd:	83 c4 08             	add    esp,0x8
c00098e0:	5b                   	pop    ebx
c00098e1:	c3                   	ret    

c00098e2 <int_to_fp>:
c00098e2:	c1 e0 0c             	shl    eax,0xc
c00098e5:	c3                   	ret    

c00098e6 <fp_to_int>:
c00098e6:	c1 f8 0c             	sar    eax,0xc
c00098e9:	c3                   	ret    

c00098ea <fp_fraction_part>:
c00098ea:	25 ff 0f 00 00       	and    eax,0xfff
c00098ef:	c3                   	ret    

c00098f0 <fp_to_double>:
c00098f0:	83 ec 1c             	sub    esp,0x1c
c00098f3:	e8 f2 ff ff ff       	call   c00098ea <fp_fraction_part>
c00098f8:	83 ec 0c             	sub    esp,0xc
c00098fb:	50                   	push   eax
c00098fc:	e8 6a ea 01 00       	call   c002836b <__floatsidf>
c0009901:	83 c4 10             	add    esp,0x10
c0009904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000990c:	68 00 00 30 3f       	push   0x3f300000
c0009911:	6a 00                	push   0x0
c0009913:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009917:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000991b:	e8 e8 e3 01 00       	call   c0027d08 <__muldf3>
c0009920:	83 c4 2c             	add    esp,0x2c
c0009923:	c3                   	ret    

c0009924 <calc_output_single>:
c0009924:	55                   	push   ebp
c0009925:	57                   	push   edi
c0009926:	56                   	push   esi
c0009927:	89 c6                	mov    esi,eax
c0009929:	53                   	push   ebx
c000992a:	89 d3                	mov    ebx,edx
c000992c:	83 ec 4c             	sub    esp,0x4c
c000992f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009933:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009936:	e8 a7 ff ff ff       	call   c00098e2 <int_to_fp>
c000993b:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c000993e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009942:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009946:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c000994a:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000994d:	99                   	cdq    
c000994e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009956:	f7 fb                	idiv   ebx
c0009958:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009960:	89 da                	mov    edx,ebx
c0009962:	0f af d0             	imul   edx,eax
c0009965:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009969:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000996d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009971:	29 c2                	sub    edx,eax
c0009973:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009976:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000997a:	83 c5 04             	add    ebp,0x4
c000997d:	e8 6e ff ff ff       	call   c00098f0 <fp_to_double>
c0009982:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009986:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000998a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000998e:	e8 53 ff ff ff       	call   c00098e6 <fp_to_int>
c0009993:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009996:	52                   	push   edx
c0009997:	52                   	push   edx
c0009998:	51                   	push   ecx
c0009999:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000999d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c00099a1:	e8 7a d6 01 00       	call   c0027020 <__subsf3>
c00099a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a9:	e8 51 ed 01 00       	call   c00286ff <__extendsfdf2>
c00099ae:	83 c4 10             	add    esp,0x10
c00099b1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099b5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c9:	e8 3a e3 01 00       	call   c0027d08 <__muldf3>
c00099ce:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099d2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099d6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099dd:	e8 1d ed 01 00       	call   c00286ff <__extendsfdf2>
c00099e2:	83 c4 10             	add    esp,0x10
c00099e5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ed:	52                   	push   edx
c00099ee:	50                   	push   eax
c00099ef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099f7:	e8 8f dc 01 00       	call   c002768b <__adddf3>
c00099fc:	59                   	pop    ecx
c00099fd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0009a01:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009a05:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a0b:	e8 ef ec 01 00       	call   c00286ff <__extendsfdf2>
c0009a10:	83 c4 10             	add    esp,0x10
c0009a13:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a1b:	52                   	push   edx
c0009a1c:	50                   	push   eax
c0009a1d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a21:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a25:	e8 de e2 01 00       	call   c0027d08 <__muldf3>
c0009a2a:	83 c4 10             	add    esp,0x10
c0009a2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a31:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a35:	52                   	push   edx
c0009a36:	50                   	push   eax
c0009a37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a3f:	e8 47 dc 01 00       	call   c002768b <__adddf3>
c0009a44:	83 c4 10             	add    esp,0x10
c0009a47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a4b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a4f:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a53:	0f 89 1d ff ff ff    	jns    c0009976 <calc_output_single+0x52>
c0009a59:	89 d9                	mov    ecx,ebx
c0009a5b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a5f:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a63:	89 dd                	mov    ebp,ebx
c0009a65:	29 c8                	sub    eax,ecx
c0009a67:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a6f:	99                   	cdq    
c0009a70:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a78:	f7 fb                	idiv   ebx
c0009a7a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a7e:	0f af e8             	imul   ebp,eax
c0009a81:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a85:	01 cd                	add    ebp,ecx
c0009a87:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a8a:	89 e8                	mov    eax,ebp
c0009a8c:	83 ee 04             	sub    esi,0x4
c0009a8f:	e8 5c fe ff ff       	call   c00098f0 <fp_to_double>
c0009a94:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a98:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a9c:	89 e8                	mov    eax,ebp
c0009a9e:	29 dd                	sub    ebp,ebx
c0009aa0:	e8 41 fe ff ff       	call   c00098e6 <fp_to_int>
c0009aa5:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa8:	52                   	push   edx
c0009aa9:	52                   	push   edx
c0009aaa:	51                   	push   ecx
c0009aab:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aaf:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009ab3:	e8 68 d5 01 00       	call   c0027020 <__subsf3>
c0009ab8:	89 04 24             	mov    DWORD PTR [esp],eax
c0009abb:	e8 3f ec 01 00       	call   c00286ff <__extendsfdf2>
c0009ac0:	83 c4 10             	add    esp,0x10
c0009ac3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ac7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009acb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ad3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009adb:	e8 28 e2 01 00       	call   c0027d08 <__muldf3>
c0009ae0:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009ae4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae8:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aeb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aef:	e8 0b ec 01 00       	call   c00286ff <__extendsfdf2>
c0009af4:	83 c4 10             	add    esp,0x10
c0009af7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009afb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aff:	52                   	push   edx
c0009b00:	50                   	push   eax
c0009b01:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b05:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b09:	e8 7d db 01 00       	call   c002768b <__adddf3>
c0009b0e:	59                   	pop    ecx
c0009b0f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b13:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b17:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b1d:	e8 dd eb 01 00       	call   c00286ff <__extendsfdf2>
c0009b22:	83 c4 10             	add    esp,0x10
c0009b25:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b29:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b2d:	52                   	push   edx
c0009b2e:	50                   	push   eax
c0009b2f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b33:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b37:	e8 cc e1 01 00       	call   c0027d08 <__muldf3>
c0009b3c:	83 c4 10             	add    esp,0x10
c0009b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b43:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b47:	52                   	push   edx
c0009b48:	50                   	push   eax
c0009b49:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b51:	e8 35 db 01 00       	call   c002768b <__adddf3>
c0009b56:	83 c4 10             	add    esp,0x10
c0009b59:	85 ed                	test   ebp,ebp
c0009b5b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b5f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b63:	0f 8f 21 ff ff ff    	jg     c0009a8a <calc_output_single+0x166>
c0009b69:	52                   	push   edx
c0009b6a:	50                   	push   eax
c0009b6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b73:	e8 13 db 01 00       	call   c002768b <__adddf3>
c0009b78:	83 c4 5c             	add    esp,0x5c
c0009b7b:	5b                   	pop    ebx
c0009b7c:	5e                   	pop    esi
c0009b7d:	5f                   	pop    edi
c0009b7e:	5d                   	pop    ebp
c0009b7f:	c3                   	ret    

c0009b80 <calc_output_stereo>:
c0009b80:	55                   	push   ebp
c0009b81:	89 cd                	mov    ebp,ecx
c0009b83:	57                   	push   edi
c0009b84:	56                   	push   esi
c0009b85:	53                   	push   ebx
c0009b86:	89 c3                	mov    ebx,eax
c0009b88:	83 ec 6c             	sub    esp,0x6c
c0009b8b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b8f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b96:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b9d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009ba1:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009ba5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba8:	e8 35 fd ff ff       	call   c00098e2 <int_to_fp>
c0009bad:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bb5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bc1:	29 c8                	sub    eax,ecx
c0009bc3:	99                   	cdq    
c0009bc4:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bcc:	0f af d0             	imul   edx,eax
c0009bcf:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bd2:	31 d2                	xor    edx,edx
c0009bd4:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bdc:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bdf:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009be3:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009be6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009bea:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bee:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009bf1:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bf6:	29 c1                	sub    ecx,eax
c0009bf8:	31 c0                	xor    eax,eax
c0009bfa:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bfd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c05:	83 c7 08             	add    edi,0x8
c0009c08:	e8 e3 fc ff ff       	call   c00098f0 <fp_to_double>
c0009c0d:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c11:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c15:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c19:	e8 c8 fc ff ff       	call   c00098e6 <fp_to_int>
c0009c1e:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c21:	52                   	push   edx
c0009c22:	52                   	push   edx
c0009c23:	51                   	push   ecx
c0009c24:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c28:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c2c:	e8 ef d3 01 00       	call   c0027020 <__subsf3>
c0009c31:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c34:	e8 c6 ea 01 00       	call   c00286ff <__extendsfdf2>
c0009c39:	83 c4 10             	add    esp,0x10
c0009c3c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c40:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c44:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c48:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c4c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c50:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c54:	e8 af e0 01 00       	call   c0027d08 <__muldf3>
c0009c59:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c5d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c61:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c64:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c68:	e8 92 ea 01 00       	call   c00286ff <__extendsfdf2>
c0009c6d:	83 c4 10             	add    esp,0x10
c0009c70:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c74:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c78:	52                   	push   edx
c0009c79:	50                   	push   eax
c0009c7a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c82:	e8 04 da 01 00       	call   c002768b <__adddf3>
c0009c87:	59                   	pop    ecx
c0009c88:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c8c:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c90:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c96:	e8 64 ea 01 00       	call   c00286ff <__extendsfdf2>
c0009c9b:	83 c4 10             	add    esp,0x10
c0009c9e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ca2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ca6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009caa:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cae:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cb2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cb6:	e8 4d e0 01 00       	call   c0027d08 <__muldf3>
c0009cbb:	83 c4 10             	add    esp,0x10
c0009cbe:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cc2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cc6:	52                   	push   edx
c0009cc7:	50                   	push   eax
c0009cc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ccc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cd0:	e8 b6 d9 01 00       	call   c002768b <__adddf3>
c0009cd5:	59                   	pop    ecx
c0009cd6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cda:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cde:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ce4:	e8 16 ea 01 00       	call   c00286ff <__extendsfdf2>
c0009ce9:	83 c4 10             	add    esp,0x10
c0009cec:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cf0:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cf4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cfc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009d00:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009d04:	e8 ff df 01 00       	call   c0027d08 <__muldf3>
c0009d09:	83 c4 10             	add    esp,0x10
c0009d0c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d10:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d14:	52                   	push   edx
c0009d15:	50                   	push   eax
c0009d16:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d1a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d1e:	e8 68 d9 01 00       	call   c002768b <__adddf3>
c0009d23:	83 c4 10             	add    esp,0x10
c0009d26:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d2a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d2e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d32:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d36:	0f 89 c5 fe ff ff    	jns    c0009c01 <calc_output_stereo+0x81>
c0009d3c:	29 e9                	sub    ecx,ebp
c0009d3e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d42:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d46:	29 c8                	sub    eax,ecx
c0009d48:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d50:	99                   	cdq    
c0009d51:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d55:	31 d2                	xor    edx,edx
c0009d57:	0f af f8             	imul   edi,eax
c0009d5a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d5e:	40                   	inc    eax
c0009d5f:	01 cf                	add    edi,ecx
c0009d61:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d66:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d6a:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d72:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d75:	31 c0                	xor    eax,eax
c0009d77:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d7b:	89 f8                	mov    eax,edi
c0009d7d:	83 eb 08             	sub    ebx,0x8
c0009d80:	e8 6b fb ff ff       	call   c00098f0 <fp_to_double>
c0009d85:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d89:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d8d:	89 f8                	mov    eax,edi
c0009d8f:	e8 52 fb ff ff       	call   c00098e6 <fp_to_int>
c0009d94:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d97:	52                   	push   edx
c0009d98:	52                   	push   edx
c0009d99:	55                   	push   ebp
c0009d9a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d9e:	e8 7d d2 01 00       	call   c0027020 <__subsf3>
c0009da3:	89 04 24             	mov    DWORD PTR [esp],eax
c0009da6:	e8 54 e9 01 00       	call   c00286ff <__extendsfdf2>
c0009dab:	83 c4 10             	add    esp,0x10
c0009dae:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009db2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009db6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dbe:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dc2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dc6:	e8 3d df 01 00       	call   c0027d08 <__muldf3>
c0009dcb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dce:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dd2:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dd6:	e8 24 e9 01 00       	call   c00286ff <__extendsfdf2>
c0009ddb:	83 c4 10             	add    esp,0x10
c0009dde:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009de2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009de6:	52                   	push   edx
c0009de7:	50                   	push   eax
c0009de8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dec:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009df0:	e8 96 d8 01 00       	call   c002768b <__adddf3>
c0009df5:	59                   	pop    ecx
c0009df6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009dfa:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dfe:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009e04:	e8 f6 e8 01 00       	call   c00286ff <__extendsfdf2>
c0009e09:	83 c4 10             	add    esp,0x10
c0009e0c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e10:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e14:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e18:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e24:	e8 df de 01 00       	call   c0027d08 <__muldf3>
c0009e29:	83 c4 10             	add    esp,0x10
c0009e2c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e30:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e34:	52                   	push   edx
c0009e35:	50                   	push   eax
c0009e36:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e3a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e3e:	e8 48 d8 01 00       	call   c002768b <__adddf3>
c0009e43:	5d                   	pop    ebp
c0009e44:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e48:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e4c:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e52:	e8 a8 e8 01 00       	call   c00286ff <__extendsfdf2>
c0009e57:	83 c4 10             	add    esp,0x10
c0009e5a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e5e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e62:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e66:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e6a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e72:	e8 91 de 01 00       	call   c0027d08 <__muldf3>
c0009e77:	83 c4 10             	add    esp,0x10
c0009e7a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e7e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e82:	52                   	push   edx
c0009e83:	50                   	push   eax
c0009e84:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e88:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e8c:	e8 fa d7 01 00       	call   c002768b <__adddf3>
c0009e91:	83 c4 10             	add    esp,0x10
c0009e94:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e98:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e9c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ea0:	85 ff                	test   edi,edi
c0009ea2:	0f 8f d3 fe ff ff    	jg     c0009d7b <calc_output_stereo+0x1fb>
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb8:	e8 ce d7 01 00       	call   c002768b <__adddf3>
c0009ebd:	83 c4 10             	add    esp,0x10
c0009ec0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ec4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ecc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ed0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed8:	e8 2b de 01 00       	call   c0027d08 <__muldf3>
c0009edd:	59                   	pop    ecx
c0009ede:	5b                   	pop    ebx
c0009edf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ee3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eeb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eef:	e8 e7 e6 01 00       	call   c00285db <__truncdfsf2>
c0009ef4:	83 c4 10             	add    esp,0x10
c0009ef7:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009efe:	89 03                	mov    DWORD PTR [ebx],eax
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f10:	e8 76 d7 01 00       	call   c002768b <__adddf3>
c0009f15:	83 c4 10             	add    esp,0x10
c0009f18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f1c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f30:	e8 d3 dd 01 00       	call   c0027d08 <__muldf3>
c0009f35:	5e                   	pop    esi
c0009f36:	5f                   	pop    edi
c0009f37:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f47:	e8 8f e6 01 00       	call   c00285db <__truncdfsf2>
c0009f4c:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f53:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f56:	83 c4 7c             	add    esp,0x7c
c0009f59:	5b                   	pop    ebx
c0009f5a:	5e                   	pop    esi
c0009f5b:	5f                   	pop    edi
c0009f5c:	5d                   	pop    ebp
c0009f5d:	c3                   	ret    

c0009f5e <calc_output_quad>:
c0009f5e:	55                   	push   ebp
c0009f5f:	57                   	push   edi
c0009f60:	56                   	push   esi
c0009f61:	89 c6                	mov    esi,eax
c0009f63:	53                   	push   ebx
c0009f64:	83 ec 7c             	sub    esp,0x7c
c0009f67:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f6b:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f6f:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f76:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f85:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f88:	e8 55 f9 ff ff       	call   c00098e2 <int_to_fp>
c0009f8d:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f90:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f93:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f97:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f9b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f9f:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009fa3:	99                   	cdq    
c0009fa4:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa8:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fac:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009faf:	31 d2                	xor    edx,edx
c0009fb1:	0f af d8             	imul   ebx,eax
c0009fb4:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fbc:	0f af c7             	imul   eax,edi
c0009fbf:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fc3:	29 c1                	sub    ecx,eax
c0009fc5:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fcd:	31 c0                	xor    eax,eax
c0009fcf:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fd2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fd6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fda:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fde:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fe2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fe6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fea:	89 d8                	mov    eax,ebx
c0009fec:	83 c7 10             	add    edi,0x10
c0009fef:	e8 fc f8 ff ff       	call   c00098f0 <fp_to_double>
c0009ff4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ffc:	89 d8                	mov    eax,ebx
c0009ffe:	e8 e3 f8 ff ff       	call   c00098e6 <fp_to_int>
c000a003:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c000a007:	52                   	push   edx
c000a008:	52                   	push   edx
c000a009:	51                   	push   ecx
c000a00a:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a00e:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a012:	e8 09 d0 01 00       	call   c0027020 <__subsf3>
c000a017:	89 04 24             	mov    DWORD PTR [esp],eax
c000a01a:	e8 e0 e6 01 00       	call   c00286ff <__extendsfdf2>
c000a01f:	83 c4 10             	add    esp,0x10
c000a022:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a026:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a02a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a032:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a036:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a03a:	e8 c9 dc 01 00       	call   c0027d08 <__muldf3>
c000a03f:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a043:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a047:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a04a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a04e:	e8 ac e6 01 00       	call   c00286ff <__extendsfdf2>
c000a053:	83 c4 10             	add    esp,0x10
c000a056:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a05a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a05e:	52                   	push   edx
c000a05f:	50                   	push   eax
c000a060:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a064:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a068:	e8 1e d6 01 00       	call   c002768b <__adddf3>
c000a06d:	59                   	pop    ecx
c000a06e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a072:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a076:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a07c:	e8 7e e6 01 00       	call   c00286ff <__extendsfdf2>
c000a081:	83 c4 10             	add    esp,0x10
c000a084:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a088:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a08c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a090:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a094:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a098:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a09c:	e8 67 dc 01 00       	call   c0027d08 <__muldf3>
c000a0a1:	83 c4 10             	add    esp,0x10
c000a0a4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0ac:	52                   	push   edx
c000a0ad:	50                   	push   eax
c000a0ae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0b6:	e8 d0 d5 01 00       	call   c002768b <__adddf3>
c000a0bb:	59                   	pop    ecx
c000a0bc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0c0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0c4:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0ca:	e8 30 e6 01 00       	call   c00286ff <__extendsfdf2>
c000a0cf:	83 c4 10             	add    esp,0x10
c000a0d2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0d6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0e2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0ea:	e8 19 dc 01 00       	call   c0027d08 <__muldf3>
c000a0ef:	83 c4 10             	add    esp,0x10
c000a0f2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0f6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0fa:	52                   	push   edx
c000a0fb:	50                   	push   eax
c000a0fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a100:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a104:	e8 82 d5 01 00       	call   c002768b <__adddf3>
c000a109:	59                   	pop    ecx
c000a10a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a10e:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a112:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a118:	e8 e2 e5 01 00       	call   c00286ff <__extendsfdf2>
c000a11d:	83 c4 10             	add    esp,0x10
c000a120:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a124:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a128:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a12c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a130:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a134:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a138:	e8 cb db 01 00       	call   c0027d08 <__muldf3>
c000a13d:	83 c4 10             	add    esp,0x10
c000a140:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a144:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a148:	52                   	push   edx
c000a149:	50                   	push   eax
c000a14a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a152:	e8 34 d5 01 00       	call   c002768b <__adddf3>
c000a157:	59                   	pop    ecx
c000a158:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a15c:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a160:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a166:	e8 94 e5 01 00       	call   c00286ff <__extendsfdf2>
c000a16b:	83 c4 10             	add    esp,0x10
c000a16e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a172:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a176:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a17a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a17e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a182:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a186:	e8 7d db 01 00       	call   c0027d08 <__muldf3>
c000a18b:	83 c4 10             	add    esp,0x10
c000a18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a196:	52                   	push   edx
c000a197:	50                   	push   eax
c000a198:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a19c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a1a0:	e8 e6 d4 01 00       	call   c002768b <__adddf3>
c000a1a5:	83 c4 10             	add    esp,0x10
c000a1a8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1ac:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1b0:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1b4:	0f 89 30 fe ff ff    	jns    c0009fea <calc_output_quad+0x8c>
c000a1ba:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1be:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1c2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1c6:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1ca:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1d2:	29 c8                	sub    eax,ecx
c000a1d4:	99                   	cdq    
c000a1d5:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d9:	31 d2                	xor    edx,edx
c000a1db:	0f af d8             	imul   ebx,eax
c000a1de:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1e2:	40                   	inc    eax
c000a1e3:	01 cb                	add    ebx,ecx
c000a1e5:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1ea:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ee:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1f2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1f6:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f9:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a201:	31 c0                	xor    eax,eax
c000a203:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a207:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a20b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a20f:	89 d8                	mov    eax,ebx
c000a211:	83 ee 10             	sub    esi,0x10
c000a214:	e8 d7 f6 ff ff       	call   c00098f0 <fp_to_double>
c000a219:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a21d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a221:	89 d8                	mov    eax,ebx
c000a223:	e8 be f6 ff ff       	call   c00098e6 <fp_to_int>
c000a228:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a22c:	52                   	push   edx
c000a22d:	52                   	push   edx
c000a22e:	57                   	push   edi
c000a22f:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a233:	e8 e8 cd 01 00       	call   c0027020 <__subsf3>
c000a238:	89 04 24             	mov    DWORD PTR [esp],eax
c000a23b:	e8 bf e4 01 00       	call   c00286ff <__extendsfdf2>
c000a240:	83 c4 10             	add    esp,0x10
c000a243:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a247:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a24b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a253:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a257:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a25b:	e8 a8 da 01 00       	call   c0027d08 <__muldf3>
c000a260:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a26b:	e8 8f e4 01 00       	call   c00286ff <__extendsfdf2>
c000a270:	83 c4 10             	add    esp,0x10
c000a273:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a277:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a27b:	52                   	push   edx
c000a27c:	50                   	push   eax
c000a27d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a281:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a285:	e8 01 d4 01 00       	call   c002768b <__adddf3>
c000a28a:	59                   	pop    ecx
c000a28b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a28f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a293:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a299:	e8 61 e4 01 00       	call   c00286ff <__extendsfdf2>
c000a29e:	83 c4 10             	add    esp,0x10
c000a2a1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2a5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b9:	e8 4a da 01 00       	call   c0027d08 <__muldf3>
c000a2be:	83 c4 10             	add    esp,0x10
c000a2c1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2c5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c9:	52                   	push   edx
c000a2ca:	50                   	push   eax
c000a2cb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2d3:	e8 b3 d3 01 00       	call   c002768b <__adddf3>
c000a2d8:	5f                   	pop    edi
c000a2d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2dd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2e1:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2e7:	e8 13 e4 01 00       	call   c00286ff <__extendsfdf2>
c000a2ec:	83 c4 10             	add    esp,0x10
c000a2ef:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2f3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2ff:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a303:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a307:	e8 fc d9 01 00       	call   c0027d08 <__muldf3>
c000a30c:	83 c4 10             	add    esp,0x10
c000a30f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a313:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a317:	52                   	push   edx
c000a318:	50                   	push   eax
c000a319:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a31d:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a321:	e8 65 d3 01 00       	call   c002768b <__adddf3>
c000a326:	59                   	pop    ecx
c000a327:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a32b:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a32f:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a335:	e8 c5 e3 01 00       	call   c00286ff <__extendsfdf2>
c000a33a:	83 c4 10             	add    esp,0x10
c000a33d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a341:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a345:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a349:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a34d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a351:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a355:	e8 ae d9 01 00       	call   c0027d08 <__muldf3>
c000a35a:	83 c4 10             	add    esp,0x10
c000a35d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a361:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a365:	52                   	push   edx
c000a366:	50                   	push   eax
c000a367:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a36b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a36f:	e8 17 d3 01 00       	call   c002768b <__adddf3>
c000a374:	5f                   	pop    edi
c000a375:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a379:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a37d:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a383:	e8 77 e3 01 00       	call   c00286ff <__extendsfdf2>
c000a388:	83 c4 10             	add    esp,0x10
c000a38b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a38f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a393:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a397:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a39b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3a3:	e8 60 d9 01 00       	call   c0027d08 <__muldf3>
c000a3a8:	83 c4 10             	add    esp,0x10
c000a3ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3b3:	52                   	push   edx
c000a3b4:	50                   	push   eax
c000a3b5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3bd:	e8 c9 d2 01 00       	call   c002768b <__adddf3>
c000a3c2:	83 c4 10             	add    esp,0x10
c000a3c5:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3cd:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3d1:	85 db                	test   ebx,ebx
c000a3d3:	0f 8f 36 fe ff ff    	jg     c000a20f <calc_output_quad+0x2b1>
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e9:	e8 9d d2 01 00       	call   c002768b <__adddf3>
c000a3ee:	83 c4 10             	add    esp,0x10
c000a3f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a405:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a409:	e8 fa d8 01 00       	call   c0027d08 <__muldf3>
c000a40e:	59                   	pop    ecx
c000a40f:	5b                   	pop    ebx
c000a410:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a414:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a418:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a420:	e8 b6 e1 01 00       	call   c00285db <__truncdfsf2>
c000a425:	83 c4 10             	add    esp,0x10
c000a428:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a42f:	89 06                	mov    DWORD PTR [esi],eax
c000a431:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a435:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a439:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a43d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a441:	e8 45 d2 01 00       	call   c002768b <__adddf3>
c000a446:	83 c4 10             	add    esp,0x10
c000a449:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a44d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a45d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a461:	e8 a2 d8 01 00       	call   c0027d08 <__muldf3>
c000a466:	5e                   	pop    esi
c000a467:	5f                   	pop    edi
c000a468:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a46c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 5e e1 01 00       	call   c00285db <__truncdfsf2>
c000a47d:	83 c4 10             	add    esp,0x10
c000a480:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a487:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a48a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a492:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a496:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a49a:	e8 ec d1 01 00       	call   c002768b <__adddf3>
c000a49f:	83 c4 10             	add    esp,0x10
c000a4a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ba:	e8 49 d8 01 00       	call   c0027d08 <__muldf3>
c000a4bf:	5d                   	pop    ebp
c000a4c0:	59                   	pop    ecx
c000a4c1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 05 e1 01 00       	call   c00285db <__truncdfsf2>
c000a4d6:	83 c4 10             	add    esp,0x10
c000a4d9:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4e0:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ef:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4f3:	e8 93 d1 01 00       	call   c002768b <__adddf3>
c000a4f8:	83 c4 10             	add    esp,0x10
c000a4fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a513:	e8 f0 d7 01 00       	call   c0027d08 <__muldf3>
c000a518:	5b                   	pop    ebx
c000a519:	5e                   	pop    esi
c000a51a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a51e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a522:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a526:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a52a:	e8 ac e0 01 00       	call   c00285db <__truncdfsf2>
c000a52f:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a536:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a539:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a53f:	5b                   	pop    ebx
c000a540:	5e                   	pop    esi
c000a541:	5f                   	pop    edi
c000a542:	5d                   	pop    ebp
c000a543:	c3                   	ret    

c000a544 <calc_output_hex>:
c000a544:	55                   	push   ebp
c000a545:	89 cd                	mov    ebp,ecx
c000a547:	57                   	push   edi
c000a548:	56                   	push   esi
c000a549:	53                   	push   ebx
c000a54a:	89 c3                	mov    ebx,eax
c000a54c:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a552:	89 14 24             	mov    DWORD PTR [esp],edx
c000a555:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a55c:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a563:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a567:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a56b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a56e:	e8 6f f3 ff ff       	call   c00098e2 <int_to_fp>
c000a573:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a576:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a57a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a57d:	29 c8                	sub    eax,ecx
c000a57f:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a583:	99                   	cdq    
c000a584:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a58c:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a58f:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a597:	0f af f8             	imul   edi,eax
c000a59a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a59d:	01 cf                	add    edi,ecx
c000a59f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a5a3:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a5a6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5aa:	0f af c2             	imul   eax,edx
c000a5ad:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5b1:	29 c1                	sub    ecx,eax
c000a5b3:	31 d2                	xor    edx,edx
c000a5b5:	31 c0                	xor    eax,eax
c000a5b7:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5ba:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5c2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5c6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5ce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5d2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5d6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5e2:	89 f8                	mov    eax,edi
c000a5e4:	e8 07 f3 ff ff       	call   c00098f0 <fp_to_double>
c000a5e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5f1:	89 f8                	mov    eax,edi
c000a5f3:	e8 ee f2 ff ff       	call   c00098e6 <fp_to_int>
c000a5f8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5fc:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5ff:	52                   	push   edx
c000a600:	52                   	push   edx
c000a601:	51                   	push   ecx
c000a602:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a606:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a60d:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a611:	e8 0a ca 01 00       	call   c0027020 <__subsf3>
c000a616:	89 04 24             	mov    DWORD PTR [esp],eax
c000a619:	e8 e1 e0 01 00       	call   c00286ff <__extendsfdf2>
c000a61e:	83 c4 10             	add    esp,0x10
c000a621:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a625:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a631:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a635:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a639:	e8 ca d6 01 00       	call   c0027d08 <__muldf3>
c000a63e:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a642:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a646:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a649:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a64d:	e8 ad e0 01 00       	call   c00286ff <__extendsfdf2>
c000a652:	83 c4 10             	add    esp,0x10
c000a655:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a659:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a65d:	52                   	push   edx
c000a65e:	50                   	push   eax
c000a65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a663:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a667:	e8 1f d0 01 00       	call   c002768b <__adddf3>
c000a66c:	59                   	pop    ecx
c000a66d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a671:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a675:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a67b:	e8 7f e0 01 00       	call   c00286ff <__extendsfdf2>
c000a680:	83 c4 10             	add    esp,0x10
c000a683:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a687:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a68b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a693:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a697:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a69b:	e8 68 d6 01 00       	call   c0027d08 <__muldf3>
c000a6a0:	83 c4 10             	add    esp,0x10
c000a6a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6a7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6ab:	52                   	push   edx
c000a6ac:	50                   	push   eax
c000a6ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6b1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6b5:	e8 d1 cf 01 00       	call   c002768b <__adddf3>
c000a6ba:	59                   	pop    ecx
c000a6bb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6bf:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6c3:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c9:	e8 31 e0 01 00       	call   c00286ff <__extendsfdf2>
c000a6ce:	83 c4 10             	add    esp,0x10
c000a6d1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6d5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e9:	e8 1a d6 01 00       	call   c0027d08 <__muldf3>
c000a6ee:	83 c4 10             	add    esp,0x10
c000a6f1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6f5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f9:	52                   	push   edx
c000a6fa:	50                   	push   eax
c000a6fb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6ff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a703:	e8 83 cf 01 00       	call   c002768b <__adddf3>
c000a708:	59                   	pop    ecx
c000a709:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a70d:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a711:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a717:	e8 e3 df 01 00       	call   c00286ff <__extendsfdf2>
c000a71c:	83 c4 10             	add    esp,0x10
c000a71f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a723:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a727:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a72b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a72f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a733:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a737:	e8 cc d5 01 00       	call   c0027d08 <__muldf3>
c000a73c:	83 c4 10             	add    esp,0x10
c000a73f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a743:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a747:	52                   	push   edx
c000a748:	50                   	push   eax
c000a749:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a74d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a751:	e8 35 cf 01 00       	call   c002768b <__adddf3>
c000a756:	59                   	pop    ecx
c000a757:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a75b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a75f:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a765:	e8 95 df 01 00       	call   c00286ff <__extendsfdf2>
c000a76a:	83 c4 10             	add    esp,0x10
c000a76d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a771:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a775:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a779:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a77d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a781:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a785:	e8 7e d5 01 00       	call   c0027d08 <__muldf3>
c000a78a:	83 c4 10             	add    esp,0x10
c000a78d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a791:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a795:	52                   	push   edx
c000a796:	50                   	push   eax
c000a797:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a79b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a79f:	e8 e7 ce 01 00       	call   c002768b <__adddf3>
c000a7a4:	59                   	pop    ecx
c000a7a5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a9:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7ad:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7b3:	e8 47 df 01 00       	call   c00286ff <__extendsfdf2>
c000a7b8:	83 c4 10             	add    esp,0x10
c000a7bb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7bf:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7cb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cf:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7d3:	e8 30 d5 01 00       	call   c0027d08 <__muldf3>
c000a7d8:	83 c4 10             	add    esp,0x10
c000a7db:	83 c6 18             	add    esi,0x18
c000a7de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7e6:	52                   	push   edx
c000a7e7:	50                   	push   eax
c000a7e8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ec:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7f0:	e8 96 ce 01 00       	call   c002768b <__adddf3>
c000a7f5:	59                   	pop    ecx
c000a7f6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7fa:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7fe:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a804:	e8 f6 de 01 00       	call   c00286ff <__extendsfdf2>
c000a809:	83 c4 10             	add    esp,0x10
c000a80c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a810:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a814:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a818:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a81c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a820:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a824:	e8 df d4 01 00       	call   c0027d08 <__muldf3>
c000a829:	83 c4 10             	add    esp,0x10
c000a82c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a830:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a834:	52                   	push   edx
c000a835:	50                   	push   eax
c000a836:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a83a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a83e:	e8 48 ce 01 00       	call   c002768b <__adddf3>
c000a843:	83 c4 10             	add    esp,0x10
c000a846:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a84a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a84e:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a851:	0f 89 8b fd ff ff    	jns    c000a5e2 <calc_output_hex+0x9e>
c000a857:	31 f6                	xor    esi,esi
c000a859:	31 ff                	xor    edi,edi
c000a85b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a85f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a862:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a866:	29 e9                	sub    ecx,ebp
c000a868:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a86c:	29 c8                	sub    eax,ecx
c000a86e:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a871:	99                   	cdq    
c000a872:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a876:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a879:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a87d:	0f af e8             	imul   ebp,eax
c000a880:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a884:	40                   	inc    eax
c000a885:	01 cd                	add    ebp,ecx
c000a887:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a88c:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a890:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a894:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a898:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a89b:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a89f:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a8a3:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a8a7:	89 e8                	mov    eax,ebp
c000a8a9:	e8 42 f0 ff ff       	call   c00098f0 <fp_to_double>
c000a8ae:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8b6:	89 e8                	mov    eax,ebp
c000a8b8:	e8 29 f0 ff ff       	call   c00098e6 <fp_to_int>
c000a8bd:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8c1:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8c4:	52                   	push   edx
c000a8c5:	52                   	push   edx
c000a8c6:	51                   	push   ecx
c000a8c7:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8ce:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8d5:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d9:	e8 42 c7 01 00       	call   c0027020 <__subsf3>
c000a8de:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8e1:	e8 19 de 01 00       	call   c00286ff <__extendsfdf2>
c000a8e6:	83 c4 10             	add    esp,0x10
c000a8e9:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ed:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8fd:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a901:	e8 02 d4 01 00       	call   c0027d08 <__muldf3>
c000a906:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a90d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a911:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a914:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a918:	e8 e2 dd 01 00       	call   c00286ff <__extendsfdf2>
c000a91d:	83 c4 10             	add    esp,0x10
c000a920:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a924:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a928:	52                   	push   edx
c000a929:	50                   	push   eax
c000a92a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a932:	e8 54 cd 01 00       	call   c002768b <__adddf3>
c000a937:	59                   	pop    ecx
c000a938:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a93c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a940:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a946:	e8 b4 dd 01 00       	call   c00286ff <__extendsfdf2>
c000a94b:	83 c4 10             	add    esp,0x10
c000a94e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a952:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a956:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a95a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a95e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a962:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a966:	e8 9d d3 01 00       	call   c0027d08 <__muldf3>
c000a96b:	83 c4 10             	add    esp,0x10
c000a96e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a972:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a976:	52                   	push   edx
c000a977:	50                   	push   eax
c000a978:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a97c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a980:	e8 06 cd 01 00       	call   c002768b <__adddf3>
c000a985:	59                   	pop    ecx
c000a986:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a98a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a98e:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a994:	e8 66 dd 01 00       	call   c00286ff <__extendsfdf2>
c000a999:	83 c4 10             	add    esp,0x10
c000a99c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9a0:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ac:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9b0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9b4:	e8 4f d3 01 00       	call   c0027d08 <__muldf3>
c000a9b9:	83 c4 10             	add    esp,0x10
c000a9bc:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9c0:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9c4:	52                   	push   edx
c000a9c5:	50                   	push   eax
c000a9c6:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9ca:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9ce:	e8 b8 cc 01 00       	call   c002768b <__adddf3>
c000a9d3:	59                   	pop    ecx
c000a9d4:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d8:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9dc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9e2:	e8 18 dd 01 00       	call   c00286ff <__extendsfdf2>
c000a9e7:	83 c4 10             	add    esp,0x10
c000a9ea:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ee:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9fa:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fe:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa02:	e8 01 d3 01 00       	call   c0027d08 <__muldf3>
c000aa07:	83 c4 10             	add    esp,0x10
c000aa0a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa0e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa12:	52                   	push   edx
c000aa13:	50                   	push   eax
c000aa14:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa18:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa1c:	e8 6a cc 01 00       	call   c002768b <__adddf3>
c000aa21:	59                   	pop    ecx
c000aa22:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa26:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa2a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa30:	e8 ca dc 01 00       	call   c00286ff <__extendsfdf2>
c000aa35:	83 c4 10             	add    esp,0x10
c000aa38:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa3c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa48:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa4c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa50:	e8 b3 d2 01 00       	call   c0027d08 <__muldf3>
c000aa55:	83 c4 10             	add    esp,0x10
c000aa58:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa5c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa60:	52                   	push   edx
c000aa61:	50                   	push   eax
c000aa62:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa66:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa6a:	e8 1c cc 01 00       	call   c002768b <__adddf3>
c000aa6f:	59                   	pop    ecx
c000aa70:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa74:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa78:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa7e:	e8 7c dc 01 00       	call   c00286ff <__extendsfdf2>
c000aa83:	83 c4 10             	add    esp,0x10
c000aa86:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa8a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa96:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa9a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa9e:	e8 65 d2 01 00       	call   c0027d08 <__muldf3>
c000aaa3:	83 c4 10             	add    esp,0x10
c000aaa6:	83 eb 18             	sub    ebx,0x18
c000aaa9:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaad:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aab1:	52                   	push   edx
c000aab2:	50                   	push   eax
c000aab3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aabb:	e8 cb cb 01 00       	call   c002768b <__adddf3>
c000aac0:	59                   	pop    ecx
c000aac1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aac5:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac9:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aacf:	e8 2b dc 01 00       	call   c00286ff <__extendsfdf2>
c000aad4:	83 c4 10             	add    esp,0x10
c000aad7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aadb:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aadf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aae3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aae7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaeb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaef:	e8 14 d2 01 00       	call   c0027d08 <__muldf3>
c000aaf4:	83 c4 10             	add    esp,0x10
c000aaf7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aafb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaff:	52                   	push   edx
c000ab00:	50                   	push   eax
c000ab01:	57                   	push   edi
c000ab02:	56                   	push   esi
c000ab03:	e8 83 cb 01 00       	call   c002768b <__adddf3>
c000ab08:	83 c4 10             	add    esp,0x10
c000ab0b:	89 c6                	mov    esi,eax
c000ab0d:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab10:	89 d7                	mov    edi,edx
c000ab12:	85 ed                	test   ebp,ebp
c000ab14:	0f 8f 8d fd ff ff    	jg     c000a8a7 <calc_output_hex+0x363>
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab2a:	e8 5c cb 01 00       	call   c002768b <__adddf3>
c000ab2f:	83 c4 10             	add    esp,0x10
c000ab32:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab35:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab45:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab49:	e8 ba d1 01 00       	call   c0027d08 <__muldf3>
c000ab4e:	59                   	pop    ecx
c000ab4f:	5b                   	pop    ebx
c000ab50:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab54:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab58:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab60:	e8 76 da 01 00       	call   c00285db <__truncdfsf2>
c000ab65:	83 c4 10             	add    esp,0x10
c000ab68:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab6f:	89 03                	mov    DWORD PTR [ebx],eax
c000ab71:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab75:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab79:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab7d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab81:	e8 05 cb 01 00       	call   c002768b <__adddf3>
c000ab86:	83 c4 10             	add    esp,0x10
c000ab89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aba0:	e8 63 d1 01 00       	call   c0027d08 <__muldf3>
c000aba5:	5d                   	pop    ebp
c000aba6:	59                   	pop    ecx
c000aba7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb7:	e8 1f da 01 00       	call   c00285db <__truncdfsf2>
c000abbc:	83 c4 10             	add    esp,0x10
c000abbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abc6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc9:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abcd:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abd1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd9:	e8 ad ca 01 00       	call   c002768b <__adddf3>
c000abde:	83 c4 10             	add    esp,0x10
c000abe1:	89 04 24             	mov    DWORD PTR [esp],eax
c000abe4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf8:	e8 0b d1 01 00       	call   c0027d08 <__muldf3>
c000abfd:	5b                   	pop    ebx
c000abfe:	5d                   	pop    ebp
c000abff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac03:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac07:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0f:	e8 c7 d9 01 00       	call   c00285db <__truncdfsf2>
c000ac14:	83 c4 10             	add    esp,0x10
c000ac17:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac21:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac25:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac29:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac2d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac31:	e8 55 ca 01 00       	call   c002768b <__adddf3>
c000ac36:	83 c4 10             	add    esp,0x10
c000ac39:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac50:	e8 b3 d0 01 00       	call   c0027d08 <__muldf3>
c000ac55:	59                   	pop    ecx
c000ac56:	5b                   	pop    ebx
c000ac57:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac5f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac63:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac67:	e8 6f d9 01 00       	call   c00285db <__truncdfsf2>
c000ac6c:	83 c4 10             	add    esp,0x10
c000ac6f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac76:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac79:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac7d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac89:	e8 fd c9 01 00       	call   c002768b <__adddf3>
c000ac8e:	83 c4 10             	add    esp,0x10
c000ac91:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac94:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca8:	e8 5b d0 01 00       	call   c0027d08 <__muldf3>
c000acad:	5d                   	pop    ebp
c000acae:	59                   	pop    ecx
c000acaf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acb7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acbb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acbf:	e8 17 d9 01 00       	call   c00285db <__truncdfsf2>
c000acc4:	83 c4 10             	add    esp,0x10
c000acc7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acce:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acd1:	57                   	push   edi
c000acd2:	56                   	push   esi
c000acd3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acdb:	e8 ab c9 01 00       	call   c002768b <__adddf3>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	89 04 24             	mov    DWORD PTR [esp],eax
c000ace6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acfa:	e8 09 d0 01 00       	call   c0027d08 <__muldf3>
c000acff:	5b                   	pop    ebx
c000ad00:	5e                   	pop    esi
c000ad01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad05:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad09:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad0d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad11:	e8 c5 d8 01 00       	call   c00285db <__truncdfsf2>
c000ad16:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad1d:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad20:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad26:	5b                   	pop    ebx
c000ad27:	5e                   	pop    esi
c000ad28:	5f                   	pop    edi
c000ad29:	5d                   	pop    ebp
c000ad2a:	c3                   	ret    

c000ad2b <sinc_reset>:
c000ad2b:	56                   	push   esi
c000ad2c:	53                   	push   ebx
c000ad2d:	51                   	push   ecx
c000ad2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad32:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad35:	85 db                	test   ebx,ebx
c000ad37:	74 59                	je     c000ad92 <sinc_reset+0x67>
c000ad39:	31 d2                	xor    edx,edx
c000ad3b:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad42:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad45:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad48:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad4f:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad56:	31 c0                	xor    eax,eax
c000ad58:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad5e:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad61:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad64:	52                   	push   edx
c000ad65:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad68:	c1 e0 02             	shl    eax,0x2
c000ad6b:	50                   	push   eax
c000ad6c:	6a 00                	push   0x0
c000ad6e:	56                   	push   esi
c000ad6f:	e8 0c 5a ff ff       	call   c0000780 <memset>
c000ad74:	83 c4 0c             	add    esp,0xc
c000ad77:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad7a:	c1 e0 02             	shl    eax,0x2
c000ad7d:	50                   	push   eax
c000ad7e:	68 aa 00 00 00       	push   0xaa
c000ad83:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad86:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad89:	50                   	push   eax
c000ad8a:	e8 f1 59 ff ff       	call   c0000780 <memset>
c000ad8f:	83 c4 10             	add    esp,0x10
c000ad92:	58                   	pop    eax
c000ad93:	5b                   	pop    ebx
c000ad94:	5e                   	pop    esi
c000ad95:	c3                   	ret    

c000ad96 <calc_output_multi>:
c000ad96:	55                   	push   ebp
c000ad97:	57                   	push   edi
c000ad98:	56                   	push   esi
c000ad99:	89 c6                	mov    esi,eax
c000ad9b:	53                   	push   ebx
c000ad9c:	83 ec 4c             	sub    esp,0x4c
c000ad9f:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ada3:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ada7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000adab:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000adaf:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adb3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adb7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adbb:	8d 46 44             	lea    eax,[esi+0x44]
c000adbe:	89 04 24             	mov    DWORD PTR [esp],eax
c000adc1:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adc7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adcb:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adce:	e8 0f eb ff ff       	call   c00098e2 <int_to_fp>
c000add3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000add6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000adda:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000adde:	99                   	cdq    
c000addf:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ade3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ade7:	0f af d0             	imul   edx,eax
c000adea:	0f af c3             	imul   eax,ebx
c000aded:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adf1:	29 c1                	sub    ecx,eax
c000adf3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adf7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adfb:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000ae02:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ae06:	57                   	push   edi
c000ae07:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae0b:	6a 00                	push   0x0
c000ae0d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae11:	e8 6a 59 ff ff       	call   c0000780 <memset>
c000ae16:	83 c4 10             	add    esp,0x10
c000ae19:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae1d:	89 df                	mov    edi,ebx
c000ae1f:	e8 cc ea ff ff       	call   c00098f0 <fp_to_double>
c000ae24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae2c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae30:	e8 b1 ea ff ff       	call   c00098e6 <fp_to_int>
c000ae35:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae38:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae3b:	51                   	push   ecx
c000ae3c:	51                   	push   ecx
c000ae3d:	55                   	push   ebp
c000ae3e:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae42:	e8 d9 c1 01 00       	call   c0027020 <__subsf3>
c000ae47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae4a:	e8 b0 d8 01 00       	call   c00286ff <__extendsfdf2>
c000ae4f:	83 c4 10             	add    esp,0x10
c000ae52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae5a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae6a:	e8 99 ce 01 00       	call   c0027d08 <__muldf3>
c000ae6f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae72:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae76:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae7a:	e8 80 d8 01 00       	call   c00286ff <__extendsfdf2>
c000ae7f:	83 c4 10             	add    esp,0x10
c000ae82:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae86:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae8a:	52                   	push   edx
c000ae8b:	50                   	push   eax
c000ae8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae94:	e8 f2 c7 01 00       	call   c002768b <__adddf3>
c000ae99:	83 c4 10             	add    esp,0x10
c000ae9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aea0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aea4:	89 f8                	mov    eax,edi
c000aea6:	b9 08 00 00 00       	mov    ecx,0x8
c000aeab:	99                   	cdq    
c000aeac:	f7 f9                	idiv   ecx
c000aeae:	4a                   	dec    edx
c000aeaf:	83 fa 06             	cmp    edx,0x6
c000aeb2:	77 07                	ja     c000aebb <calc_output_multi+0x125>
c000aeb4:	ff 24 95 24 9f 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd60dc]
c000aebb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aebe:	4f                   	dec    edi
c000aebf:	83 ec 0c             	sub    esp,0xc
c000aec2:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aec5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec9:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aed0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aed4:	e8 26 d8 01 00       	call   c00286ff <__extendsfdf2>
c000aed9:	83 c4 10             	add    esp,0x10
c000aedc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aee0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aee4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeec:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aef0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aef4:	e8 0f ce 01 00       	call   c0027d08 <__muldf3>
c000aef9:	83 c4 10             	add    esp,0x10
c000aefc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af00:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af04:	52                   	push   edx
c000af05:	50                   	push   eax
c000af06:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af09:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af0c:	e8 7a c7 01 00       	call   c002768b <__adddf3>
c000af11:	83 c4 10             	add    esp,0x10
c000af14:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af17:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af1a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af1d:	4f                   	dec    edi
c000af1e:	83 ec 0c             	sub    esp,0xc
c000af21:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af28:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af2f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af33:	e8 c7 d7 01 00       	call   c00286ff <__extendsfdf2>
c000af38:	83 c4 10             	add    esp,0x10
c000af3b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af3f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af4b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af53:	e8 b0 cd 01 00       	call   c0027d08 <__muldf3>
c000af58:	83 c4 10             	add    esp,0x10
c000af5b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af63:	52                   	push   edx
c000af64:	50                   	push   eax
c000af65:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af68:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af6b:	e8 1b c7 01 00       	call   c002768b <__adddf3>
c000af70:	83 c4 10             	add    esp,0x10
c000af73:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af76:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af7c:	4f                   	dec    edi
c000af7d:	83 ec 0c             	sub    esp,0xc
c000af80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af92:	e8 68 d7 01 00       	call   c00286ff <__extendsfdf2>
c000af97:	83 c4 10             	add    esp,0x10
c000af9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afb2:	e8 51 cd 01 00       	call   c0027d08 <__muldf3>
c000afb7:	83 c4 10             	add    esp,0x10
c000afba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afc2:	52                   	push   edx
c000afc3:	50                   	push   eax
c000afc4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afc7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afca:	e8 bc c6 01 00       	call   c002768b <__adddf3>
c000afcf:	83 c4 10             	add    esp,0x10
c000afd2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afd5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afdb:	4f                   	dec    edi
c000afdc:	83 ec 0c             	sub    esp,0xc
c000afdf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afe2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afe6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aff1:	e8 09 d7 01 00       	call   c00286ff <__extendsfdf2>
c000aff6:	83 c4 10             	add    esp,0x10
c000aff9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000affd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b001:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b005:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b009:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b00d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b011:	e8 f2 cc 01 00       	call   c0027d08 <__muldf3>
c000b016:	83 c4 10             	add    esp,0x10
c000b019:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b021:	52                   	push   edx
c000b022:	50                   	push   eax
c000b023:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b026:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b029:	e8 5d c6 01 00       	call   c002768b <__adddf3>
c000b02e:	83 c4 10             	add    esp,0x10
c000b031:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b034:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b037:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b03a:	4f                   	dec    edi
c000b03b:	83 ec 0c             	sub    esp,0xc
c000b03e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b041:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b045:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b04c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b050:	e8 aa d6 01 00       	call   c00286ff <__extendsfdf2>
c000b055:	83 c4 10             	add    esp,0x10
c000b058:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b05c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b064:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b068:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b06c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b070:	e8 93 cc 01 00       	call   c0027d08 <__muldf3>
c000b075:	83 c4 10             	add    esp,0x10
c000b078:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b07c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b080:	52                   	push   edx
c000b081:	50                   	push   eax
c000b082:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b085:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b088:	e8 fe c5 01 00       	call   c002768b <__adddf3>
c000b08d:	83 c4 10             	add    esp,0x10
c000b090:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b093:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b096:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b099:	4f                   	dec    edi
c000b09a:	83 ec 0c             	sub    esp,0xc
c000b09d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0a4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0ab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0af:	e8 4b d6 01 00       	call   c00286ff <__extendsfdf2>
c000b0b4:	83 c4 10             	add    esp,0x10
c000b0b7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0bb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0c7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0cb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0cf:	e8 34 cc 01 00       	call   c0027d08 <__muldf3>
c000b0d4:	83 c4 10             	add    esp,0x10
c000b0d7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0db:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0df:	52                   	push   edx
c000b0e0:	50                   	push   eax
c000b0e1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0e4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0e7:	e8 9f c5 01 00       	call   c002768b <__adddf3>
c000b0ec:	83 c4 10             	add    esp,0x10
c000b0ef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0f2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f8:	4f                   	dec    edi
c000b0f9:	83 ec 0c             	sub    esp,0xc
c000b0fc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b103:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b10a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b10e:	e8 ec d5 01 00       	call   c00286ff <__extendsfdf2>
c000b113:	83 c4 10             	add    esp,0x10
c000b116:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b11a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b11e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b122:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b126:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b12a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b12e:	e8 d5 cb 01 00       	call   c0027d08 <__muldf3>
c000b133:	83 c4 10             	add    esp,0x10
c000b136:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b13a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13e:	52                   	push   edx
c000b13f:	50                   	push   eax
c000b140:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b143:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b146:	e8 40 c5 01 00       	call   c002768b <__adddf3>
c000b14b:	83 c4 10             	add    esp,0x10
c000b14e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b151:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b154:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b157:	4f                   	dec    edi
c000b158:	83 ec 0c             	sub    esp,0xc
c000b15b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b15e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b162:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b169:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b16d:	e8 8d d5 01 00       	call   c00286ff <__extendsfdf2>
c000b172:	83 c4 10             	add    esp,0x10
c000b175:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b179:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b17d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b181:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b185:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b189:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b18d:	e8 76 cb 01 00       	call   c0027d08 <__muldf3>
c000b192:	83 c4 10             	add    esp,0x10
c000b195:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b199:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b19d:	52                   	push   edx
c000b19e:	50                   	push   eax
c000b19f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1a5:	e8 e1 c4 01 00       	call   c002768b <__adddf3>
c000b1aa:	83 c4 10             	add    esp,0x10
c000b1ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1b3:	85 ff                	test   edi,edi
c000b1b5:	0f 8f e9 fc ff ff    	jg     c000aea4 <calc_output_multi+0x10e>
c000b1bb:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1bf:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1c3:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1c7:	0f 89 4c fc ff ff    	jns    c000ae19 <calc_output_multi+0x83>
c000b1cd:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1d1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1d5:	29 c8                	sub    eax,ecx
c000b1d7:	99                   	cdq    
c000b1d8:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1dc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1e0:	0f af d0             	imul   edx,eax
c000b1e3:	40                   	inc    eax
c000b1e4:	01 d1                	add    ecx,edx
c000b1e6:	0f af c3             	imul   eax,ebx
c000b1e9:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ed:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1f0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1f4:	55                   	push   ebp
c000b1f5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f9:	6a 00                	push   0x0
c000b1fb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1ff:	e8 7c 55 ff ff       	call   c0000780 <memset>
c000b204:	83 c4 10             	add    esp,0x10
c000b207:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b20b:	e8 e0 e6 ff ff       	call   c00098f0 <fp_to_double>
c000b210:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b214:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b218:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b21c:	e8 c5 e6 ff ff       	call   c00098e6 <fp_to_int>
c000b221:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b224:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b227:	57                   	push   edi
c000b228:	57                   	push   edi
c000b229:	89 df                	mov    edi,ebx
c000b22b:	55                   	push   ebp
c000b22c:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b230:	e8 eb bd 01 00       	call   c0027020 <__subsf3>
c000b235:	89 04 24             	mov    DWORD PTR [esp],eax
c000b238:	e8 c2 d4 01 00       	call   c00286ff <__extendsfdf2>
c000b23d:	83 c4 10             	add    esp,0x10
c000b240:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b244:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b248:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b24c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b250:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b254:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b258:	e8 ab ca 01 00       	call   c0027d08 <__muldf3>
c000b25d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b260:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b264:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b268:	e8 92 d4 01 00       	call   c00286ff <__extendsfdf2>
c000b26d:	83 c4 10             	add    esp,0x10
c000b270:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b274:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b278:	52                   	push   edx
c000b279:	50                   	push   eax
c000b27a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b282:	e8 04 c4 01 00       	call   c002768b <__adddf3>
c000b287:	83 c4 10             	add    esp,0x10
c000b28a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b28e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b292:	89 f8                	mov    eax,edi
c000b294:	b9 08 00 00 00       	mov    ecx,0x8
c000b299:	99                   	cdq    
c000b29a:	f7 f9                	idiv   ecx
c000b29c:	4a                   	dec    edx
c000b29d:	83 fa 06             	cmp    edx,0x6
c000b2a0:	77 07                	ja     c000b2a9 <calc_output_multi+0x513>
c000b2a2:	ff 24 95 40 9f 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd60c0]
c000b2a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2ad:	4f                   	dec    edi
c000b2ae:	83 ec 0c             	sub    esp,0xc
c000b2b1:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b8:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2bf:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2c3:	e8 37 d4 01 00       	call   c00286ff <__extendsfdf2>
c000b2c8:	83 c4 10             	add    esp,0x10
c000b2cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2e3:	e8 20 ca 01 00       	call   c0027d08 <__muldf3>
c000b2e8:	83 c4 10             	add    esp,0x10
c000b2eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f3:	52                   	push   edx
c000b2f4:	50                   	push   eax
c000b2f5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2fb:	e8 8b c3 01 00       	call   c002768b <__adddf3>
c000b300:	83 c4 10             	add    esp,0x10
c000b303:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b306:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b30d:	4f                   	dec    edi
c000b30e:	83 ec 0c             	sub    esp,0xc
c000b311:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b314:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b318:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b31f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b323:	e8 d7 d3 01 00       	call   c00286ff <__extendsfdf2>
c000b328:	83 c4 10             	add    esp,0x10
c000b32b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b32f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b333:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b337:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b33b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b343:	e8 c0 c9 01 00       	call   c0027d08 <__muldf3>
c000b348:	83 c4 10             	add    esp,0x10
c000b34b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b353:	52                   	push   edx
c000b354:	50                   	push   eax
c000b355:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b358:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b35b:	e8 2b c3 01 00       	call   c002768b <__adddf3>
c000b360:	83 c4 10             	add    esp,0x10
c000b363:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b366:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b369:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b36d:	4f                   	dec    edi
c000b36e:	83 ec 0c             	sub    esp,0xc
c000b371:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b374:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b378:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b37f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b383:	e8 77 d3 01 00       	call   c00286ff <__extendsfdf2>
c000b388:	83 c4 10             	add    esp,0x10
c000b38b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b38f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b397:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b39b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3a3:	e8 60 c9 01 00       	call   c0027d08 <__muldf3>
c000b3a8:	83 c4 10             	add    esp,0x10
c000b3ab:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3af:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b3:	52                   	push   edx
c000b3b4:	50                   	push   eax
c000b3b5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3bb:	e8 cb c2 01 00       	call   c002768b <__adddf3>
c000b3c0:	83 c4 10             	add    esp,0x10
c000b3c3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3c6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3cd:	4f                   	dec    edi
c000b3ce:	83 ec 0c             	sub    esp,0xc
c000b3d1:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d8:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3df:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3e3:	e8 17 d3 01 00       	call   c00286ff <__extendsfdf2>
c000b3e8:	83 c4 10             	add    esp,0x10
c000b3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3ff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b403:	e8 00 c9 01 00       	call   c0027d08 <__muldf3>
c000b408:	83 c4 10             	add    esp,0x10
c000b40b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b413:	52                   	push   edx
c000b414:	50                   	push   eax
c000b415:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b418:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b41b:	e8 6b c2 01 00       	call   c002768b <__adddf3>
c000b420:	83 c4 10             	add    esp,0x10
c000b423:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b426:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b429:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b42d:	4f                   	dec    edi
c000b42e:	83 ec 0c             	sub    esp,0xc
c000b431:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b434:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b438:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b43f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b443:	e8 b7 d2 01 00       	call   c00286ff <__extendsfdf2>
c000b448:	83 c4 10             	add    esp,0x10
c000b44b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b44f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b453:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b457:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b45b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b463:	e8 a0 c8 01 00       	call   c0027d08 <__muldf3>
c000b468:	83 c4 10             	add    esp,0x10
c000b46b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b473:	52                   	push   edx
c000b474:	50                   	push   eax
c000b475:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b478:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b47b:	e8 0b c2 01 00       	call   c002768b <__adddf3>
c000b480:	83 c4 10             	add    esp,0x10
c000b483:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b486:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b489:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b48d:	4f                   	dec    edi
c000b48e:	83 ec 0c             	sub    esp,0xc
c000b491:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b494:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b498:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b49f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4a3:	e8 57 d2 01 00       	call   c00286ff <__extendsfdf2>
c000b4a8:	83 c4 10             	add    esp,0x10
c000b4ab:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4af:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4bb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4c3:	e8 40 c8 01 00       	call   c0027d08 <__muldf3>
c000b4c8:	83 c4 10             	add    esp,0x10
c000b4cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d3:	52                   	push   edx
c000b4d4:	50                   	push   eax
c000b4d5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4db:	e8 ab c1 01 00       	call   c002768b <__adddf3>
c000b4e0:	83 c4 10             	add    esp,0x10
c000b4e3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4e6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ed:	4f                   	dec    edi
c000b4ee:	83 ec 0c             	sub    esp,0xc
c000b4f1:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f8:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4ff:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b503:	e8 f7 d1 01 00       	call   c00286ff <__extendsfdf2>
c000b508:	83 c4 10             	add    esp,0x10
c000b50b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b50f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b513:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b517:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b51b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b523:	e8 e0 c7 01 00       	call   c0027d08 <__muldf3>
c000b528:	83 c4 10             	add    esp,0x10
c000b52b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b533:	52                   	push   edx
c000b534:	50                   	push   eax
c000b535:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b538:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b53b:	e8 4b c1 01 00       	call   c002768b <__adddf3>
c000b540:	83 c4 10             	add    esp,0x10
c000b543:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b546:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b549:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b54d:	4f                   	dec    edi
c000b54e:	83 ec 0c             	sub    esp,0xc
c000b551:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b554:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b558:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b55f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b563:	e8 97 d1 01 00       	call   c00286ff <__extendsfdf2>
c000b568:	83 c4 10             	add    esp,0x10
c000b56b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b56f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b573:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b577:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b57b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b583:	e8 80 c7 01 00       	call   c0027d08 <__muldf3>
c000b588:	83 c4 10             	add    esp,0x10
c000b58b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b58f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b593:	52                   	push   edx
c000b594:	50                   	push   eax
c000b595:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b598:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b59b:	e8 eb c0 01 00       	call   c002768b <__adddf3>
c000b5a0:	83 c4 10             	add    esp,0x10
c000b5a3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b5a6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a9:	85 ff                	test   edi,edi
c000b5ab:	0f 8f e1 fc ff ff    	jg     c000b292 <calc_output_multi+0x4fc>
c000b5b1:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5b5:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b9:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5bd:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5c2:	0f 8f 3f fc ff ff    	jg     c000b207 <calc_output_multi+0x471>
c000b5c8:	be 08 00 00 00       	mov    esi,0x8
c000b5cd:	89 d8                	mov    eax,ebx
c000b5cf:	99                   	cdq    
c000b5d0:	f7 fe                	idiv   esi
c000b5d2:	4a                   	dec    edx
c000b5d3:	83 fa 06             	cmp    edx,0x6
c000b5d6:	77 07                	ja     c000b5df <calc_output_multi+0x849>
c000b5d8:	ff 24 95 5c 9f 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd60a4]
c000b5df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5e3:	4b                   	dec    ebx
c000b5e4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ef:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5f3:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5f6:	e8 90 c0 01 00       	call   c002768b <__adddf3>
c000b5fb:	83 c4 10             	add    esp,0x10
c000b5fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b602:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b606:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b60e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b612:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b616:	e8 ed c6 01 00       	call   c0027d08 <__muldf3>
c000b61b:	5d                   	pop    ebp
c000b61c:	59                   	pop    ecx
c000b61d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b621:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	e8 a9 cf 01 00       	call   c00285db <__truncdfsf2>
c000b632:	83 c4 10             	add    esp,0x10
c000b635:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b639:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b63c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b640:	4b                   	dec    ebx
c000b641:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b645:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b64c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b650:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b653:	e8 33 c0 01 00       	call   c002768b <__adddf3>
c000b658:	83 c4 10             	add    esp,0x10
c000b65b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b65f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b663:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b667:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b66b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b673:	e8 90 c6 01 00       	call   c0027d08 <__muldf3>
c000b678:	59                   	pop    ecx
c000b679:	5f                   	pop    edi
c000b67a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b67e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b682:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	e8 4c cf 01 00       	call   c00285db <__truncdfsf2>
c000b68f:	83 c4 10             	add    esp,0x10
c000b692:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b696:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b699:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b69d:	4b                   	dec    ebx
c000b69e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a2:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6ad:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6b0:	e8 d6 bf 01 00       	call   c002768b <__adddf3>
c000b6b5:	83 c4 10             	add    esp,0x10
c000b6b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6bc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6d0:	e8 33 c6 01 00       	call   c0027d08 <__muldf3>
c000b6d5:	5f                   	pop    edi
c000b6d6:	5d                   	pop    ebp
c000b6d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	e8 ef ce 01 00       	call   c00285db <__truncdfsf2>
c000b6ec:	83 c4 10             	add    esp,0x10
c000b6ef:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6f3:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6fa:	4b                   	dec    ebx
c000b6fb:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6ff:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b702:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b706:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b70a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b70d:	e8 79 bf 01 00       	call   c002768b <__adddf3>
c000b712:	83 c4 10             	add    esp,0x10
c000b715:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b719:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b71d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b721:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b725:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b729:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b72d:	e8 d6 c5 01 00       	call   c0027d08 <__muldf3>
c000b732:	5d                   	pop    ebp
c000b733:	59                   	pop    ecx
c000b734:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b738:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b73c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	e8 92 ce 01 00       	call   c00285db <__truncdfsf2>
c000b749:	83 c4 10             	add    esp,0x10
c000b74c:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b750:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b753:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b757:	4b                   	dec    ebx
c000b758:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b75f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b763:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b767:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b76a:	e8 1c bf 01 00       	call   c002768b <__adddf3>
c000b76f:	83 c4 10             	add    esp,0x10
c000b772:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b776:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b782:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b786:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b78a:	e8 79 c5 01 00       	call   c0027d08 <__muldf3>
c000b78f:	59                   	pop    ecx
c000b790:	5f                   	pop    edi
c000b791:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b795:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	e8 35 ce 01 00       	call   c00285db <__truncdfsf2>
c000b7a6:	83 c4 10             	add    esp,0x10
c000b7a9:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7ad:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7b4:	4b                   	dec    ebx
c000b7b5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7c0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7c4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7c7:	e8 bf be 01 00       	call   c002768b <__adddf3>
c000b7cc:	83 c4 10             	add    esp,0x10
c000b7cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7e7:	e8 1c c5 01 00       	call   c0027d08 <__muldf3>
c000b7ec:	5f                   	pop    edi
c000b7ed:	5d                   	pop    ebp
c000b7ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7f2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	e8 d8 cd 01 00       	call   c00285db <__truncdfsf2>
c000b803:	83 c4 10             	add    esp,0x10
c000b806:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b80a:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b80d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b811:	4b                   	dec    ebx
c000b812:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b816:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b81d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b821:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b824:	e8 62 be 01 00       	call   c002768b <__adddf3>
c000b829:	83 c4 10             	add    esp,0x10
c000b82c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b830:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b834:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b838:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b83c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b840:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b844:	e8 bf c4 01 00       	call   c0027d08 <__muldf3>
c000b849:	5d                   	pop    ebp
c000b84a:	59                   	pop    ecx
c000b84b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b84f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b853:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	e8 7b cd 01 00       	call   c00285db <__truncdfsf2>
c000b860:	83 c4 10             	add    esp,0x10
c000b863:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b867:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b86a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b86e:	4b                   	dec    ebx
c000b86f:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b873:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b876:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b87a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b87e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b881:	e8 05 be 01 00       	call   c002768b <__adddf3>
c000b886:	83 c4 10             	add    esp,0x10
c000b889:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b88d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b891:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b895:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b899:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b89d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8a1:	e8 62 c4 01 00       	call   c0027d08 <__muldf3>
c000b8a6:	59                   	pop    ecx
c000b8a7:	5f                   	pop    edi
c000b8a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b8:	e8 1e cd 01 00       	call   c00285db <__truncdfsf2>
c000b8bd:	83 c4 10             	add    esp,0x10
c000b8c0:	85 db                	test   ebx,ebx
c000b8c2:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8c6:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c9:	0f 8f fe fc ff ff    	jg     c000b5cd <calc_output_multi+0x837>
c000b8cf:	83 c4 4c             	add    esp,0x4c
c000b8d2:	5b                   	pop    ebx
c000b8d3:	5e                   	pop    esi
c000b8d4:	5f                   	pop    edi
c000b8d5:	5d                   	pop    ebp
c000b8d6:	c3                   	ret    

c000b8d7 <double_to_fp>:
c000b8d7:	83 ec 0c             	sub    esp,0xc
c000b8da:	68 00 00 b0 40       	push   0x40b00000
c000b8df:	6a 00                	push   0x0
c000b8e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e9:	e8 1a c4 01 00       	call   c0027d08 <__muldf3>
c000b8ee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8f2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8f6:	83 c4 1c             	add    esp,0x1c
c000b8f9:	e9 92 ce 01 00       	jmp    c0028790 <lrint>

c000b8fe <prepare_data>:
c000b8fe:	55                   	push   ebp
c000b8ff:	57                   	push   edi
c000b900:	56                   	push   esi
c000b901:	53                   	push   ebx
c000b902:	83 ec 1c             	sub    esp,0x1c
c000b905:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b909:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b90d:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b911:	0f 89 57 01 00 00    	jns    c000ba6e <prepare_data+0x170>
c000b917:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b91a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91d:	85 d2                	test   edx,edx
c000b91f:	75 0d                	jne    c000b92e <prepare_data+0x30>
c000b921:	8d 14 36             	lea    edx,[esi+esi*1]
c000b924:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b927:	29 d0                	sub    eax,edx
c000b929:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b92c:	eb 44                	jmp    c000b972 <prepare_data+0x74>
c000b92e:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b931:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b934:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b937:	39 c1                	cmp    ecx,eax
c000b939:	7d 04                	jge    c000b93f <prepare_data+0x41>
c000b93b:	29 d0                	sub    eax,edx
c000b93d:	eb 2d                	jmp    c000b96c <prepare_data+0x6e>
c000b93f:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b945:	29 d7                	sub    edi,edx
c000b947:	01 f7                	add    edi,esi
c000b949:	51                   	push   ecx
c000b94a:	29 f2                	sub    edx,esi
c000b94c:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b953:	8d 14 90             	lea    edx,[eax+edx*4]
c000b956:	51                   	push   ecx
c000b957:	52                   	push   edx
c000b958:	50                   	push   eax
c000b959:	e8 26 4d ff ff       	call   c0000684 <memmove>
c000b95e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b961:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b964:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b967:	29 f0                	sub    eax,esi
c000b969:	83 c4 10             	add    esp,0x10
c000b96c:	29 f0                	sub    eax,esi
c000b96e:	79 02                	jns    c000b972 <prepare_data+0x74>
c000b970:	31 c0                	xor    eax,eax
c000b972:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b975:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b978:	29 ef                	sub    edi,ebp
c000b97a:	39 c7                	cmp    edi,eax
c000b97c:	7e 02                	jle    c000b980 <prepare_data+0x82>
c000b97e:	89 c7                	mov    edi,eax
c000b980:	89 f8                	mov    eax,edi
c000b982:	99                   	cdq    
c000b983:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b986:	b8 15 00 00 00       	mov    eax,0x15
c000b98b:	29 d7                	sub    edi,edx
c000b98d:	0f 88 dd 00 00 00    	js     c000ba70 <prepare_data+0x172>
c000b993:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b996:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b999:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b99c:	0f 8f ce 00 00 00    	jg     c000ba70 <prepare_data+0x172>
c000b9a2:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a8:	50                   	push   eax
c000b9a9:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9b0:	50                   	push   eax
c000b9b1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9b5:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9b7:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9ba:	50                   	push   eax
c000b9bb:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9be:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9c2:	50                   	push   eax
c000b9c3:	e8 84 4d ff ff       	call   c000074c <memcpy>
c000b9c8:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9cb:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9ce:	01 fd                	add    ebp,edi
c000b9d0:	01 f9                	add    ecx,edi
c000b9d2:	83 c4 10             	add    esp,0x10
c000b9d5:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d8:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9db:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9e2:	0f 85 86 00 00 00    	jne    c000ba6e <prepare_data+0x170>
c000b9e8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9eb:	89 e8                	mov    eax,ebp
c000b9ed:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9f0:	29 c8                	sub    eax,ecx
c000b9f2:	39 f8                	cmp    eax,edi
c000b9f4:	7d 78                	jge    c000ba6e <prepare_data+0x170>
c000b9f6:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9fa:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9fe:	74 6e                	je     c000ba6e <prepare_data+0x170>
c000ba00:	8d 7e 04             	lea    edi,[esi+0x4]
c000ba03:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000ba07:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba0a:	29 ef                	sub    edi,ebp
c000ba0c:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba10:	7c 29                	jl     c000ba3b <prepare_data+0x13d>
c000ba12:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba15:	29 f1                	sub    ecx,esi
c000ba17:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba1e:	55                   	push   ebp
c000ba1f:	50                   	push   eax
c000ba20:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba23:	50                   	push   eax
c000ba24:	52                   	push   edx
c000ba25:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba29:	e8 56 4c ff ff       	call   c0000684 <memmove>
c000ba2e:	83 c4 10             	add    esp,0x10
c000ba31:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba34:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba37:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba3b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba3e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba41:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba44:	83 c6 05             	add    esi,0x5
c000ba47:	78 07                	js     c000ba50 <prepare_data+0x152>
c000ba49:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba4c:	39 cf                	cmp    edi,ecx
c000ba4e:	7e 04                	jle    c000ba54 <prepare_data+0x156>
c000ba50:	89 ce                	mov    esi,ecx
c000ba52:	29 c6                	sub    esi,eax
c000ba54:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba57:	51                   	push   ecx
c000ba58:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba5f:	51                   	push   ecx
c000ba60:	6a 00                	push   0x0
c000ba62:	50                   	push   eax
c000ba63:	e8 18 4d ff ff       	call   c0000780 <memset>
c000ba68:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba6b:	83 c4 10             	add    esp,0x10
c000ba6e:	31 c0                	xor    eax,eax
c000ba70:	83 c4 1c             	add    esp,0x1c
c000ba73:	5b                   	pop    ebx
c000ba74:	5e                   	pop    esi
c000ba75:	5f                   	pop    edi
c000ba76:	5d                   	pop    ebp
c000ba77:	c3                   	ret    

c000ba78 <sinc_multichan_vari_process>:
c000ba78:	55                   	push   ebp
c000ba79:	ba 05 00 00 00       	mov    edx,0x5
c000ba7e:	57                   	push   edi
c000ba7f:	56                   	push   esi
c000ba80:	53                   	push   ebx
c000ba81:	83 ec 4c             	sub    esp,0x4c
c000ba84:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba88:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba8c:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba8f:	85 db                	test   ebx,ebx
c000ba91:	0f 84 9b 06 00 00    	je     c000c132 <sinc_multichan_vari_process+0x6ba>
c000ba97:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba9a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba9d:	0f af c5             	imul   eax,ebp
c000baa0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000baa3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000baa6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baad:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bab4:	0f af c5             	imul   eax,ebp
c000bab7:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000baba:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000babd:	8b 06                	mov    eax,DWORD PTR [esi]
c000babf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bac3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bac7:	68 00 00 70 3f       	push   0x3f700000
c000bacc:	6a 00                	push   0x0
c000bace:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bad2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bad6:	e8 fc ca 01 00       	call   c00285d7 <__ltdf2>
c000badb:	83 c4 10             	add    esp,0x10
c000bade:	ba 16 00 00 00       	mov    edx,0x16
c000bae3:	85 c0                	test   eax,eax
c000bae5:	0f 88 47 06 00 00    	js     c000c132 <sinc_multichan_vari_process+0x6ba>
c000baeb:	68 00 00 70 40       	push   0x40700000
c000baf0:	6a 00                	push   0x0
c000baf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bafa:	e8 ba ca 01 00       	call   c00285b9 <__gtdf2>
c000baff:	83 c4 10             	add    esp,0x10
c000bb02:	ba 16 00 00 00       	mov    edx,0x16
c000bb07:	85 c0                	test   eax,eax
c000bb09:	0f 8f 23 06 00 00    	jg     c000c132 <sinc_multichan_vari_process+0x6ba>
c000bb0f:	83 ec 0c             	sub    esp,0xc
c000bb12:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb15:	e8 51 c8 01 00       	call   c002836b <__floatsidf>
c000bb1a:	83 c4 10             	add    esp,0x10
c000bb1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb21:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb25:	68 00 00 00 40       	push   0x40000000
c000bb2a:	6a 00                	push   0x0
c000bb2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb30:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb34:	e8 52 bb 01 00       	call   c002768b <__adddf3>
c000bb39:	59                   	pop    ecx
c000bb3a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb3e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb42:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb45:	e8 21 c8 01 00       	call   c002836b <__floatsidf>
c000bb4a:	83 c4 10             	add    esp,0x10
c000bb4d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb51:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb55:	52                   	push   edx
c000bb56:	50                   	push   eax
c000bb57:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb5f:	e8 88 c4 01 00       	call   c0027fec <__divdf3>
c000bb64:	83 c4 10             	add    esp,0x10
c000bb67:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb6b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb6f:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb72:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb75:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb79:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8d:	e8 27 ca 01 00       	call   c00285b9 <__gtdf2>
c000bb92:	83 c4 10             	add    esp,0x10
c000bb95:	85 c0                	test   eax,eax
c000bb97:	7e 2d                	jle    c000bbc6 <sinc_multichan_vari_process+0x14e>
c000bb99:	68 00 00 f0 3f       	push   0x3ff00000
c000bb9e:	6a 00                	push   0x0
c000bba0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba8:	e8 2a ca 01 00       	call   c00285d7 <__ltdf2>
c000bbad:	83 c4 10             	add    esp,0x10
c000bbb0:	85 c0                	test   eax,eax
c000bbb2:	79 4d                	jns    c000bc01 <sinc_multichan_vari_process+0x189>
c000bbb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbc4:	eb 1b                	jmp    c000bbe1 <sinc_multichan_vari_process+0x169>
c000bbc6:	68 00 00 f0 3f       	push   0x3ff00000
c000bbcb:	6a 00                	push   0x0
c000bbcd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbd5:	e8 fd c9 01 00       	call   c00285d7 <__ltdf2>
c000bbda:	83 c4 10             	add    esp,0x10
c000bbdd:	85 c0                	test   eax,eax
c000bbdf:	79 20                	jns    c000bc01 <sinc_multichan_vari_process+0x189>
c000bbe1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbf1:	e8 f6 c3 01 00       	call   c0027fec <__divdf3>
c000bbf6:	83 c4 10             	add    esp,0x10
c000bbf9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbfd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc01:	50                   	push   eax
c000bc02:	50                   	push   eax
c000bc03:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc0b:	e8 80 cb 01 00       	call   c0028790 <lrint>
c000bc10:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc13:	40                   	inc    eax
c000bc14:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc18:	0f af c5             	imul   eax,ebp
c000bc1b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc1f:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc26:	58                   	pop    eax
c000bc27:	5a                   	pop    edx
c000bc28:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc2c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc30:	e8 5b cb 01 00       	call   c0028790 <lrint>
c000bc35:	83 ec 0c             	sub    esp,0xc
c000bc38:	50                   	push   eax
c000bc39:	e8 2d c7 01 00       	call   c002836b <__floatsidf>
c000bc3e:	83 c4 10             	add    esp,0x10
c000bc41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc45:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc49:	52                   	push   edx
c000bc4a:	50                   	push   eax
c000bc4b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc53:	e8 84 c0 01 00       	call   c0027cdc <__subdf3>
c000bc58:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc5c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc60:	83 c4 20             	add    esp,0x20
c000bc63:	6a 00                	push   0x0
c000bc65:	6a 00                	push   0x0
c000bc67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc6f:	e8 63 c9 01 00       	call   c00285d7 <__ltdf2>
c000bc74:	83 c4 10             	add    esp,0x10
c000bc77:	85 c0                	test   eax,eax
c000bc79:	79 1f                	jns    c000bc9a <sinc_multichan_vari_process+0x222>
c000bc7b:	68 00 00 f0 3f       	push   0x3ff00000
c000bc80:	6a 00                	push   0x0
c000bc82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc8a:	e8 fc b9 01 00       	call   c002768b <__adddf3>
c000bc8f:	83 c4 10             	add    esp,0x10
c000bc92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc9a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc9d:	83 ec 10             	sub    esp,0x10
c000bca0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bca4:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bca7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcb3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcb7:	e8 20 c0 01 00       	call   c0027cdc <__subdf3>
c000bcbc:	83 c4 18             	add    esp,0x18
c000bcbf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcc7:	52                   	push   edx
c000bcc8:	50                   	push   eax
c000bcc9:	e8 c2 ca 01 00       	call   c0028790 <lrint>
c000bcce:	0f af e8             	imul   ebp,eax
c000bcd1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bcd5:	01 e8                	add    eax,ebp
c000bcd7:	99                   	cdq    
c000bcd8:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcdb:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bce2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bce6:	68 00 00 f0 3f       	push   0x3ff00000
c000bceb:	6a 00                	push   0x0
c000bced:	e8 fa c2 01 00       	call   c0027fec <__divdf3>
c000bcf2:	83 c4 10             	add    esp,0x10
c000bcf5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcfd:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bd02:	68 23 42 92 0c       	push   0xc924223
c000bd07:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd0b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd0f:	e8 77 b9 01 00       	call   c002768b <__adddf3>
c000bd14:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd18:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd1c:	83 c4 20             	add    esp,0x20
c000bd1f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd27:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd2f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd32:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd35:	7d 50                	jge    c000bd87 <sinc_multichan_vari_process+0x30f>
c000bd37:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd3a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd3d:	01 c8                	add    eax,ecx
c000bd3f:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd42:	99                   	cdq    
c000bd43:	f7 f9                	idiv   ecx
c000bd45:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd49:	7d 0c                	jge    c000bd57 <sinc_multichan_vari_process+0x2df>
c000bd4b:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd4e:	85 ed                	test   ebp,ebp
c000bd50:	79 6b                	jns    c000bdbd <sinc_multichan_vari_process+0x345>
c000bd52:	e9 e6 00 00 00       	jmp    c000be3d <sinc_multichan_vari_process+0x3c5>
c000bd57:	50                   	push   eax
c000bd58:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd5c:	57                   	push   edi
c000bd5d:	53                   	push   ebx
c000bd5e:	e8 9b fb ff ff       	call   c000b8fe <prepare_data>
c000bd63:	83 c4 10             	add    esp,0x10
c000bd66:	89 c2                	mov    edx,eax
c000bd68:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd6b:	85 c0                	test   eax,eax
c000bd6d:	0f 85 bf 03 00 00    	jne    c000c132 <sinc_multichan_vari_process+0x6ba>
c000bd73:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd76:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd79:	01 c8                	add    eax,ecx
c000bd7b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd7e:	99                   	cdq    
c000bd7f:	f7 f9                	idiv   ecx
c000bd81:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd85:	7c c4                	jl     c000bd4b <sinc_multichan_vari_process+0x2d3>
c000bd87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd8f:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd92:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd99:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd9d:	89 06                	mov    DWORD PTR [esi],eax
c000bd9f:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bda2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bda5:	99                   	cdq    
c000bda6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda9:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bdac:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bdaf:	99                   	cdq    
c000bdb0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdb3:	31 d2                	xor    edx,edx
c000bdb5:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb8:	e9 75 03 00 00       	jmp    c000c132 <sinc_multichan_vari_process+0x6ba>
c000bdbd:	83 ec 0c             	sub    esp,0xc
c000bdc0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdc3:	e8 a3 c5 01 00       	call   c002836b <__floatsidf>
c000bdc8:	83 c4 10             	add    esp,0x10
c000bdcb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdcf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdd3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bddb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde3:	e8 a3 b8 01 00       	call   c002768b <__adddf3>
c000bde8:	83 c4 10             	add    esp,0x10
c000bdeb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdef:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdf3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdfb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be03:	e8 83 b8 01 00       	call   c002768b <__adddf3>
c000be08:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be13:	e8 53 c5 01 00       	call   c002836b <__floatsidf>
c000be18:	83 c4 10             	add    esp,0x10
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be2d:	e8 a3 c7 01 00       	call   c00285d5 <__gedf2>
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	85 c0                	test   eax,eax
c000be37:	0f 89 4a ff ff ff    	jns    c000bd87 <sinc_multichan_vari_process+0x30f>
c000be3d:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be41:	0f 8e ed 00 00 00    	jle    c000bf34 <sinc_multichan_vari_process+0x4bc>
c000be47:	83 ec 10             	sub    esp,0x10
c000be4a:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be4d:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be50:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be53:	ff 36                	push   DWORD PTR [esi]
c000be55:	e8 82 be 01 00       	call   c0027cdc <__subdf3>
c000be5a:	83 c4 18             	add    esp,0x18
c000be5d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be61:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be65:	52                   	push   edx
c000be66:	50                   	push   eax
c000be67:	e8 04 c9 01 00       	call   c0028770 <fabs>
c000be6c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be70:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be74:	83 c4 10             	add    esp,0x10
c000be77:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be7c:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be89:	e8 2b c7 01 00       	call   c00285b9 <__gtdf2>
c000be8e:	83 c4 10             	add    esp,0x10
c000be91:	85 c0                	test   eax,eax
c000be93:	0f 8e 9b 00 00 00    	jle    c000bf34 <sinc_multichan_vari_process+0x4bc>
c000be99:	8b 06                	mov    eax,DWORD PTR [esi]
c000be9b:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be9e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bea2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bea6:	52                   	push   edx
c000bea7:	50                   	push   eax
c000bea8:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000beab:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000beae:	e8 29 be 01 00       	call   c0027cdc <__subdf3>
c000beb3:	59                   	pop    ecx
c000beb4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bebc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bebf:	e8 a7 c4 01 00       	call   c002836b <__floatsidf>
c000bec4:	83 c4 10             	add    esp,0x10
c000bec7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000becb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000becf:	52                   	push   edx
c000bed0:	50                   	push   eax
c000bed1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed9:	e8 2a be 01 00       	call   c0027d08 <__muldf3>
c000bede:	5d                   	pop    ebp
c000bedf:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bee3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bee7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000beea:	e8 7c c4 01 00       	call   c002836b <__floatsidf>
c000beef:	83 c4 10             	add    esp,0x10
c000bef2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bef6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000befa:	52                   	push   edx
c000befb:	50                   	push   eax
c000befc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf04:	e8 e3 c0 01 00       	call   c0027fec <__divdf3>
c000bf09:	83 c4 10             	add    esp,0x10
c000bf0c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf10:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf14:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf24:	e8 62 b7 01 00       	call   c002768b <__adddf3>
c000bf29:	83 c4 10             	add    esp,0x10
c000bf2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf34:	83 ec 0c             	sub    esp,0xc
c000bf37:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf3a:	e8 2c c4 01 00       	call   c002836b <__floatsidf>
c000bf3f:	83 c4 10             	add    esp,0x10
c000bf42:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf46:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf5a:	e8 78 c6 01 00       	call   c00285d7 <__ltdf2>
c000bf5f:	83 c4 10             	add    esp,0x10
c000bf62:	85 c0                	test   eax,eax
c000bf64:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf68:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf6c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf70:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf74:	78 10                	js     c000bf86 <sinc_multichan_vari_process+0x50e>
c000bf76:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf7a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf7e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf82:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf86:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf8a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf8e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf92:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf96:	e8 6d bd 01 00       	call   c0027d08 <__muldf3>
c000bf9b:	59                   	pop    ecx
c000bf9c:	5d                   	pop    ebp
c000bf9d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bfa1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bfa5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfad:	e8 25 f9 ff ff       	call   c000b8d7 <double_to_fp>
c000bfb2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb6:	89 c5                	mov    ebp,eax
c000bfb8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfbc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfc0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfc4:	e8 3f bd 01 00       	call   c0027d08 <__muldf3>
c000bfc9:	83 c4 18             	add    esp,0x18
c000bfcc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfd0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfd4:	52                   	push   edx
c000bfd5:	50                   	push   eax
c000bfd6:	e8 fc f8 ff ff       	call   c000b8d7 <double_to_fp>
c000bfdb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfde:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfe2:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfe5:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe8:	50                   	push   eax
c000bfe9:	50                   	push   eax
c000bfea:	50                   	push   eax
c000bfeb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfee:	e8 78 c3 01 00       	call   c002836b <__floatsidf>
c000bff3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bff7:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c007:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c00b:	e8 dc bf 01 00       	call   c0027fec <__divdf3>
c000c010:	83 c4 1c             	add    esp,0x1c
c000c013:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c017:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c01b:	52                   	push   edx
c000c01c:	89 ea                	mov    edx,ebp
c000c01e:	50                   	push   eax
c000c01f:	89 d8                	mov    eax,ebx
c000c021:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c024:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c028:	e8 69 ed ff ff       	call   c000ad96 <calc_output_multi>
c000c02d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c030:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c033:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c037:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c03b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c043:	e8 a4 bf 01 00       	call   c0027fec <__divdf3>
c000c048:	83 c4 10             	add    esp,0x10
c000c04b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c04f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c053:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c057:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c05b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c063:	e8 23 b6 01 00       	call   c002768b <__adddf3>
c000c068:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c06c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c070:	83 c4 28             	add    esp,0x28
c000c073:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c077:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c07b:	e8 10 c7 01 00       	call   c0028790 <lrint>
c000c080:	83 ec 0c             	sub    esp,0xc
c000c083:	50                   	push   eax
c000c084:	e8 e2 c2 01 00       	call   c002836b <__floatsidf>
c000c089:	83 c4 10             	add    esp,0x10
c000c08c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c090:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c094:	52                   	push   edx
c000c095:	50                   	push   eax
c000c096:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c09a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c09e:	e8 39 bc 01 00       	call   c0027cdc <__subdf3>
c000c0a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0ab:	83 c4 20             	add    esp,0x20
c000c0ae:	6a 00                	push   0x0
c000c0b0:	6a 00                	push   0x0
c000c0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ba:	e8 18 c5 01 00       	call   c00285d7 <__ltdf2>
c000c0bf:	83 c4 10             	add    esp,0x10
c000c0c2:	85 c0                	test   eax,eax
c000c0c4:	79 20                	jns    c000c0e6 <sinc_multichan_vari_process+0x66e>
c000c0c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0d6:	e8 b0 b5 01 00       	call   c002768b <__adddf3>
c000c0db:	83 c4 10             	add    esp,0x10
c000c0de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0e6:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e9:	83 ec 10             	sub    esp,0x10
c000c0ec:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0f0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0fb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c103:	e8 d4 bb 01 00       	call   c0027cdc <__subdf3>
c000c108:	83 c4 18             	add    esp,0x18
c000c10b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c10f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c113:	52                   	push   edx
c000c114:	50                   	push   eax
c000c115:	e8 76 c6 01 00       	call   c0028790 <lrint>
c000c11a:	0f af e8             	imul   ebp,eax
c000c11d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c121:	83 c4 10             	add    esp,0x10
c000c124:	01 e8                	add    eax,ebp
c000c126:	99                   	cdq    
c000c127:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c12a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c12d:	e9 fd fb ff ff       	jmp    c000bd2f <sinc_multichan_vari_process+0x2b7>
c000c132:	83 c4 4c             	add    esp,0x4c
c000c135:	89 d0                	mov    eax,edx
c000c137:	5b                   	pop    ebx
c000c138:	5e                   	pop    esi
c000c139:	5f                   	pop    edi
c000c13a:	5d                   	pop    ebp
c000c13b:	c3                   	ret    

c000c13c <sinc_hex_vari_process>:
c000c13c:	55                   	push   ebp
c000c13d:	ba 05 00 00 00       	mov    edx,0x5
c000c142:	57                   	push   edi
c000c143:	56                   	push   esi
c000c144:	53                   	push   ebx
c000c145:	83 ec 4c             	sub    esp,0x4c
c000c148:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c14c:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c150:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c153:	85 db                	test   ebx,ebx
c000c155:	0f 84 9c 06 00 00    	je     c000c7f7 <sinc_hex_vari_process+0x6bb>
c000c15b:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c15e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c161:	0f af c7             	imul   eax,edi
c000c164:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c167:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c16a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c171:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c178:	0f af c7             	imul   eax,edi
c000c17b:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c17e:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c181:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c184:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c188:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c18c:	68 00 00 70 3f       	push   0x3f700000
c000c191:	6a 00                	push   0x0
c000c193:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c197:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c19b:	e8 37 c4 01 00       	call   c00285d7 <__ltdf2>
c000c1a0:	83 c4 10             	add    esp,0x10
c000c1a3:	ba 16 00 00 00       	mov    edx,0x16
c000c1a8:	85 c0                	test   eax,eax
c000c1aa:	0f 88 47 06 00 00    	js     c000c7f7 <sinc_hex_vari_process+0x6bb>
c000c1b0:	68 00 00 70 40       	push   0x40700000
c000c1b5:	6a 00                	push   0x0
c000c1b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1bf:	e8 f5 c3 01 00       	call   c00285b9 <__gtdf2>
c000c1c4:	83 c4 10             	add    esp,0x10
c000c1c7:	ba 16 00 00 00       	mov    edx,0x16
c000c1cc:	85 c0                	test   eax,eax
c000c1ce:	0f 8f 23 06 00 00    	jg     c000c7f7 <sinc_hex_vari_process+0x6bb>
c000c1d4:	83 ec 0c             	sub    esp,0xc
c000c1d7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1da:	e8 8c c1 01 00       	call   c002836b <__floatsidf>
c000c1df:	83 c4 10             	add    esp,0x10
c000c1e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1ea:	68 00 00 00 40       	push   0x40000000
c000c1ef:	6a 00                	push   0x0
c000c1f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f9:	e8 8d b4 01 00       	call   c002768b <__adddf3>
c000c1fe:	59                   	pop    ecx
c000c1ff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c203:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c207:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c20a:	e8 5c c1 01 00       	call   c002836b <__floatsidf>
c000c20f:	83 c4 10             	add    esp,0x10
c000c212:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c216:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c21a:	52                   	push   edx
c000c21b:	50                   	push   eax
c000c21c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c220:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c224:	e8 c3 bd 01 00       	call   c0027fec <__divdf3>
c000c229:	83 c4 10             	add    esp,0x10
c000c22c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c230:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c234:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c237:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c23a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c23e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c252:	e8 62 c3 01 00       	call   c00285b9 <__gtdf2>
c000c257:	83 c4 10             	add    esp,0x10
c000c25a:	85 c0                	test   eax,eax
c000c25c:	7e 2d                	jle    c000c28b <sinc_hex_vari_process+0x14f>
c000c25e:	68 00 00 f0 3f       	push   0x3ff00000
c000c263:	6a 00                	push   0x0
c000c265:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c269:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c26d:	e8 65 c3 01 00       	call   c00285d7 <__ltdf2>
c000c272:	83 c4 10             	add    esp,0x10
c000c275:	85 c0                	test   eax,eax
c000c277:	79 4d                	jns    c000c2c6 <sinc_hex_vari_process+0x18a>
c000c279:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c27d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c281:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c285:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c289:	eb 1b                	jmp    c000c2a6 <sinc_hex_vari_process+0x16a>
c000c28b:	68 00 00 f0 3f       	push   0x3ff00000
c000c290:	6a 00                	push   0x0
c000c292:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c296:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c29a:	e8 38 c3 01 00       	call   c00285d7 <__ltdf2>
c000c29f:	83 c4 10             	add    esp,0x10
c000c2a2:	85 c0                	test   eax,eax
c000c2a4:	79 20                	jns    c000c2c6 <sinc_hex_vari_process+0x18a>
c000c2a6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2aa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b6:	e8 31 bd 01 00       	call   c0027fec <__divdf3>
c000c2bb:	83 c4 10             	add    esp,0x10
c000c2be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2c6:	50                   	push   eax
c000c2c7:	50                   	push   eax
c000c2c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2d0:	e8 bb c4 01 00       	call   c0028790 <lrint>
c000c2d5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d8:	40                   	inc    eax
c000c2d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2dd:	0f af c7             	imul   eax,edi
c000c2e0:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2e7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2eb:	58                   	pop    eax
c000c2ec:	5a                   	pop    edx
c000c2ed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2f5:	e8 96 c4 01 00       	call   c0028790 <lrint>
c000c2fa:	83 ec 0c             	sub    esp,0xc
c000c2fd:	50                   	push   eax
c000c2fe:	e8 68 c0 01 00       	call   c002836b <__floatsidf>
c000c303:	83 c4 10             	add    esp,0x10
c000c306:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c30a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c30e:	52                   	push   edx
c000c30f:	50                   	push   eax
c000c310:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c314:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c318:	e8 bf b9 01 00       	call   c0027cdc <__subdf3>
c000c31d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c321:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c325:	83 c4 20             	add    esp,0x20
c000c328:	6a 00                	push   0x0
c000c32a:	6a 00                	push   0x0
c000c32c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c330:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c334:	e8 9e c2 01 00       	call   c00285d7 <__ltdf2>
c000c339:	83 c4 10             	add    esp,0x10
c000c33c:	85 c0                	test   eax,eax
c000c33e:	79 1f                	jns    c000c35f <sinc_hex_vari_process+0x223>
c000c340:	68 00 00 f0 3f       	push   0x3ff00000
c000c345:	6a 00                	push   0x0
c000c347:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c34b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c34f:	e8 37 b3 01 00       	call   c002768b <__adddf3>
c000c354:	83 c4 10             	add    esp,0x10
c000c357:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c35b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c35f:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c362:	83 ec 10             	sub    esp,0x10
c000c365:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c369:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c36c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c370:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c374:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c378:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c37c:	e8 5b b9 01 00       	call   c0027cdc <__subdf3>
c000c381:	83 c4 18             	add    esp,0x18
c000c384:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c388:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c38c:	52                   	push   edx
c000c38d:	50                   	push   eax
c000c38e:	e8 fd c3 01 00       	call   c0028790 <lrint>
c000c393:	0f af f8             	imul   edi,eax
c000c396:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c39a:	01 f8                	add    eax,edi
c000c39c:	99                   	cdq    
c000c39d:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c3a0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c3a3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3ab:	68 00 00 f0 3f       	push   0x3ff00000
c000c3b0:	6a 00                	push   0x0
c000c3b2:	e8 35 bc 01 00       	call   c0027fec <__divdf3>
c000c3b7:	83 c4 10             	add    esp,0x10
c000c3ba:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3c2:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3c7:	68 23 42 92 0c       	push   0xc924223
c000c3cc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3d0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3d4:	e8 b2 b2 01 00       	call   c002768b <__adddf3>
c000c3d9:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3dd:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3e1:	83 c4 20             	add    esp,0x20
c000c3e4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3ec:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3f4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3f7:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3fa:	7d 50                	jge    c000c44c <sinc_hex_vari_process+0x310>
c000c3fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3ff:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c402:	01 c8                	add    eax,ecx
c000c404:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c407:	99                   	cdq    
c000c408:	f7 f9                	idiv   ecx
c000c40a:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c40e:	7d 0c                	jge    c000c41c <sinc_hex_vari_process+0x2e0>
c000c410:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c413:	85 ff                	test   edi,edi
c000c415:	79 6c                	jns    c000c483 <sinc_hex_vari_process+0x347>
c000c417:	e9 e7 00 00 00       	jmp    c000c503 <sinc_hex_vari_process+0x3c7>
c000c41c:	50                   	push   eax
c000c41d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c421:	56                   	push   esi
c000c422:	53                   	push   ebx
c000c423:	e8 d6 f4 ff ff       	call   c000b8fe <prepare_data>
c000c428:	83 c4 10             	add    esp,0x10
c000c42b:	89 c2                	mov    edx,eax
c000c42d:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c430:	85 c0                	test   eax,eax
c000c432:	0f 85 bf 03 00 00    	jne    c000c7f7 <sinc_hex_vari_process+0x6bb>
c000c438:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c43b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c43e:	01 c8                	add    eax,ecx
c000c440:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c443:	99                   	cdq    
c000c444:	f7 f9                	idiv   ecx
c000c446:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c44a:	7c c4                	jl     c000c410 <sinc_hex_vari_process+0x2d4>
c000c44c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c450:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c454:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c457:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c45a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c45e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c462:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c465:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c468:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c46b:	99                   	cdq    
c000c46c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c46f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c472:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c475:	99                   	cdq    
c000c476:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c479:	31 d2                	xor    edx,edx
c000c47b:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c47e:	e9 74 03 00 00       	jmp    c000c7f7 <sinc_hex_vari_process+0x6bb>
c000c483:	83 ec 0c             	sub    esp,0xc
c000c486:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c489:	e8 dd be 01 00       	call   c002836b <__floatsidf>
c000c48e:	83 c4 10             	add    esp,0x10
c000c491:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c495:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c499:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c49d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c4a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a9:	e8 dd b1 01 00       	call   c002768b <__adddf3>
c000c4ae:	83 c4 10             	add    esp,0x10
c000c4b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4b5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c9:	e8 bd b1 01 00       	call   c002768b <__adddf3>
c000c4ce:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d9:	e8 8d be 01 00       	call   c002836b <__floatsidf>
c000c4de:	83 c4 10             	add    esp,0x10
c000c4e1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e9:	52                   	push   edx
c000c4ea:	50                   	push   eax
c000c4eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4f3:	e8 dd c0 01 00       	call   c00285d5 <__gedf2>
c000c4f8:	83 c4 10             	add    esp,0x10
c000c4fb:	85 c0                	test   eax,eax
c000c4fd:	0f 89 49 ff ff ff    	jns    c000c44c <sinc_hex_vari_process+0x310>
c000c503:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c507:	0f 8e ef 00 00 00    	jle    c000c5fc <sinc_hex_vari_process+0x4c0>
c000c50d:	83 ec 10             	sub    esp,0x10
c000c510:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c513:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c516:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c519:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c51c:	e8 bb b7 01 00       	call   c0027cdc <__subdf3>
c000c521:	83 c4 18             	add    esp,0x18
c000c524:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c528:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	e8 3d c2 01 00       	call   c0028770 <fabs>
c000c533:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c537:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c53b:	83 c4 10             	add    esp,0x10
c000c53e:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c543:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c548:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c54c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c550:	e8 64 c0 01 00       	call   c00285b9 <__gtdf2>
c000c555:	83 c4 10             	add    esp,0x10
c000c558:	85 c0                	test   eax,eax
c000c55a:	0f 8e 9c 00 00 00    	jle    c000c5fc <sinc_hex_vari_process+0x4c0>
c000c560:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c563:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c566:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c56a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c56e:	52                   	push   edx
c000c56f:	50                   	push   eax
c000c570:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c573:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c576:	e8 61 b7 01 00       	call   c0027cdc <__subdf3>
c000c57b:	59                   	pop    ecx
c000c57c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c580:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c584:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c587:	e8 df bd 01 00       	call   c002836b <__floatsidf>
c000c58c:	83 c4 10             	add    esp,0x10
c000c58f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c593:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c597:	52                   	push   edx
c000c598:	50                   	push   eax
c000c599:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c59d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a1:	e8 62 b7 01 00       	call   c0027d08 <__muldf3>
c000c5a6:	5f                   	pop    edi
c000c5a7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5ab:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5af:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5b2:	e8 b4 bd 01 00       	call   c002836b <__floatsidf>
c000c5b7:	83 c4 10             	add    esp,0x10
c000c5ba:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5c2:	52                   	push   edx
c000c5c3:	50                   	push   eax
c000c5c4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5cc:	e8 1b ba 01 00       	call   c0027fec <__divdf3>
c000c5d1:	83 c4 10             	add    esp,0x10
c000c5d4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5ec:	e8 9a b0 01 00       	call   c002768b <__adddf3>
c000c5f1:	83 c4 10             	add    esp,0x10
c000c5f4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5fc:	83 ec 0c             	sub    esp,0xc
c000c5ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c602:	e8 64 bd 01 00       	call   c002836b <__floatsidf>
c000c607:	83 c4 10             	add    esp,0x10
c000c60a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c60e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c622:	e8 b0 bf 01 00       	call   c00285d7 <__ltdf2>
c000c627:	83 c4 10             	add    esp,0x10
c000c62a:	85 c0                	test   eax,eax
c000c62c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c630:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c634:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c638:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c63c:	78 10                	js     c000c64e <sinc_hex_vari_process+0x512>
c000c63e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c642:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c646:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c64a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c64e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c652:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c656:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c65a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c65e:	e8 a5 b6 01 00       	call   c0027d08 <__muldf3>
c000c663:	59                   	pop    ecx
c000c664:	5f                   	pop    edi
c000c665:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c669:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c66d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c671:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c675:	e8 5d f2 ff ff       	call   c000b8d7 <double_to_fp>
c000c67a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67e:	89 c7                	mov    edi,eax
c000c680:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c684:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c688:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c68c:	e8 77 b6 01 00       	call   c0027d08 <__muldf3>
c000c691:	83 c4 18             	add    esp,0x18
c000c694:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c698:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c69c:	52                   	push   edx
c000c69d:	50                   	push   eax
c000c69e:	e8 34 f2 ff ff       	call   c000b8d7 <double_to_fp>
c000c6a3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c6a6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6aa:	83 c4 0c             	add    esp,0xc
c000c6ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6b0:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6b3:	50                   	push   eax
c000c6b4:	50                   	push   eax
c000c6b5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b8:	e8 ae bc 01 00       	call   c002836b <__floatsidf>
c000c6bd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6c1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6d1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6d5:	e8 12 b9 01 00       	call   c0027fec <__divdf3>
c000c6da:	83 c4 18             	add    esp,0x18
c000c6dd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6e5:	52                   	push   edx
c000c6e6:	89 fa                	mov    edx,edi
c000c6e8:	50                   	push   eax
c000c6e9:	89 d8                	mov    eax,ebx
c000c6eb:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ef:	e8 50 de ff ff       	call   c000a544 <calc_output_hex>
c000c6f4:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c700:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c704:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c708:	e8 df b8 01 00       	call   c0027fec <__divdf3>
c000c70d:	83 c4 10             	add    esp,0x10
c000c710:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c714:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c718:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c71c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c720:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c724:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c728:	e8 5e af 01 00       	call   c002768b <__adddf3>
c000c72d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c731:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c735:	83 c4 18             	add    esp,0x18
c000c738:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c73c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c740:	e8 4b c0 01 00       	call   c0028790 <lrint>
c000c745:	83 ec 0c             	sub    esp,0xc
c000c748:	50                   	push   eax
c000c749:	e8 1d bc 01 00       	call   c002836b <__floatsidf>
c000c74e:	83 c4 10             	add    esp,0x10
c000c751:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c755:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c759:	52                   	push   edx
c000c75a:	50                   	push   eax
c000c75b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c763:	e8 74 b5 01 00       	call   c0027cdc <__subdf3>
c000c768:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c76c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c770:	83 c4 20             	add    esp,0x20
c000c773:	6a 00                	push   0x0
c000c775:	6a 00                	push   0x0
c000c777:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c77b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c77f:	e8 53 be 01 00       	call   c00285d7 <__ltdf2>
c000c784:	83 c4 10             	add    esp,0x10
c000c787:	85 c0                	test   eax,eax
c000c789:	79 20                	jns    c000c7ab <sinc_hex_vari_process+0x66f>
c000c78b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c793:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c797:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c79b:	e8 eb ae 01 00       	call   c002768b <__adddf3>
c000c7a0:	83 c4 10             	add    esp,0x10
c000c7a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7ab:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7ae:	83 ec 10             	sub    esp,0x10
c000c7b1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7b5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7c0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c8:	e8 0f b5 01 00       	call   c0027cdc <__subdf3>
c000c7cd:	83 c4 18             	add    esp,0x18
c000c7d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7d4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d8:	52                   	push   edx
c000c7d9:	50                   	push   eax
c000c7da:	e8 b1 bf 01 00       	call   c0028790 <lrint>
c000c7df:	0f af f8             	imul   edi,eax
c000c7e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7e6:	83 c4 10             	add    esp,0x10
c000c7e9:	01 f8                	add    eax,edi
c000c7eb:	99                   	cdq    
c000c7ec:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ef:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7f2:	e9 fd fb ff ff       	jmp    c000c3f4 <sinc_hex_vari_process+0x2b8>
c000c7f7:	83 c4 4c             	add    esp,0x4c
c000c7fa:	89 d0                	mov    eax,edx
c000c7fc:	5b                   	pop    ebx
c000c7fd:	5e                   	pop    esi
c000c7fe:	5f                   	pop    edi
c000c7ff:	5d                   	pop    ebp
c000c800:	c3                   	ret    

c000c801 <sinc_quad_vari_process>:
c000c801:	55                   	push   ebp
c000c802:	ba 05 00 00 00       	mov    edx,0x5
c000c807:	57                   	push   edi
c000c808:	56                   	push   esi
c000c809:	53                   	push   ebx
c000c80a:	83 ec 4c             	sub    esp,0x4c
c000c80d:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c811:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c815:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c818:	85 db                	test   ebx,ebx
c000c81a:	0f 84 9c 06 00 00    	je     c000cebc <sinc_quad_vari_process+0x6bb>
c000c820:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c823:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c826:	0f af c7             	imul   eax,edi
c000c829:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c82c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c82f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c836:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c83d:	0f af c7             	imul   eax,edi
c000c840:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c843:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c846:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c849:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c84d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c851:	68 00 00 70 3f       	push   0x3f700000
c000c856:	6a 00                	push   0x0
c000c858:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c85c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c860:	e8 72 bd 01 00       	call   c00285d7 <__ltdf2>
c000c865:	83 c4 10             	add    esp,0x10
c000c868:	ba 16 00 00 00       	mov    edx,0x16
c000c86d:	85 c0                	test   eax,eax
c000c86f:	0f 88 47 06 00 00    	js     c000cebc <sinc_quad_vari_process+0x6bb>
c000c875:	68 00 00 70 40       	push   0x40700000
c000c87a:	6a 00                	push   0x0
c000c87c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c880:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c884:	e8 30 bd 01 00       	call   c00285b9 <__gtdf2>
c000c889:	83 c4 10             	add    esp,0x10
c000c88c:	ba 16 00 00 00       	mov    edx,0x16
c000c891:	85 c0                	test   eax,eax
c000c893:	0f 8f 23 06 00 00    	jg     c000cebc <sinc_quad_vari_process+0x6bb>
c000c899:	83 ec 0c             	sub    esp,0xc
c000c89c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c89f:	e8 c7 ba 01 00       	call   c002836b <__floatsidf>
c000c8a4:	83 c4 10             	add    esp,0x10
c000c8a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8af:	68 00 00 00 40       	push   0x40000000
c000c8b4:	6a 00                	push   0x0
c000c8b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8be:	e8 c8 ad 01 00       	call   c002768b <__adddf3>
c000c8c3:	59                   	pop    ecx
c000c8c4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8cc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8cf:	e8 97 ba 01 00       	call   c002836b <__floatsidf>
c000c8d4:	83 c4 10             	add    esp,0x10
c000c8d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8db:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8df:	52                   	push   edx
c000c8e0:	50                   	push   eax
c000c8e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e9:	e8 fe b6 01 00       	call   c0027fec <__divdf3>
c000c8ee:	83 c4 10             	add    esp,0x10
c000c8f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8fc:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c903:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c913:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c917:	e8 9d bc 01 00       	call   c00285b9 <__gtdf2>
c000c91c:	83 c4 10             	add    esp,0x10
c000c91f:	85 c0                	test   eax,eax
c000c921:	7e 2d                	jle    c000c950 <sinc_quad_vari_process+0x14f>
c000c923:	68 00 00 f0 3f       	push   0x3ff00000
c000c928:	6a 00                	push   0x0
c000c92a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c932:	e8 a0 bc 01 00       	call   c00285d7 <__ltdf2>
c000c937:	83 c4 10             	add    esp,0x10
c000c93a:	85 c0                	test   eax,eax
c000c93c:	79 4d                	jns    c000c98b <sinc_quad_vari_process+0x18a>
c000c93e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c942:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c946:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c94a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c94e:	eb 1b                	jmp    c000c96b <sinc_quad_vari_process+0x16a>
c000c950:	68 00 00 f0 3f       	push   0x3ff00000
c000c955:	6a 00                	push   0x0
c000c957:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c95b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c95f:	e8 73 bc 01 00       	call   c00285d7 <__ltdf2>
c000c964:	83 c4 10             	add    esp,0x10
c000c967:	85 c0                	test   eax,eax
c000c969:	79 20                	jns    c000c98b <sinc_quad_vari_process+0x18a>
c000c96b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c973:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c977:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c97b:	e8 6c b6 01 00       	call   c0027fec <__divdf3>
c000c980:	83 c4 10             	add    esp,0x10
c000c983:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c987:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c98b:	50                   	push   eax
c000c98c:	50                   	push   eax
c000c98d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c991:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c995:	e8 f6 bd 01 00       	call   c0028790 <lrint>
c000c99a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c99d:	40                   	inc    eax
c000c99e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a2:	0f af c7             	imul   eax,edi
c000c9a5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9ac:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9b0:	58                   	pop    eax
c000c9b1:	5a                   	pop    edx
c000c9b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ba:	e8 d1 bd 01 00       	call   c0028790 <lrint>
c000c9bf:	83 ec 0c             	sub    esp,0xc
c000c9c2:	50                   	push   eax
c000c9c3:	e8 a3 b9 01 00       	call   c002836b <__floatsidf>
c000c9c8:	83 c4 10             	add    esp,0x10
c000c9cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9cf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9d3:	52                   	push   edx
c000c9d4:	50                   	push   eax
c000c9d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9dd:	e8 fa b2 01 00       	call   c0027cdc <__subdf3>
c000c9e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9ea:	83 c4 20             	add    esp,0x20
c000c9ed:	6a 00                	push   0x0
c000c9ef:	6a 00                	push   0x0
c000c9f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f9:	e8 d9 bb 01 00       	call   c00285d7 <__ltdf2>
c000c9fe:	83 c4 10             	add    esp,0x10
c000ca01:	85 c0                	test   eax,eax
c000ca03:	79 1f                	jns    c000ca24 <sinc_quad_vari_process+0x223>
c000ca05:	68 00 00 f0 3f       	push   0x3ff00000
c000ca0a:	6a 00                	push   0x0
c000ca0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca14:	e8 72 ac 01 00       	call   c002768b <__adddf3>
c000ca19:	83 c4 10             	add    esp,0x10
c000ca1c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca24:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca27:	83 ec 10             	sub    esp,0x10
c000ca2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca2e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca41:	e8 96 b2 01 00       	call   c0027cdc <__subdf3>
c000ca46:	83 c4 18             	add    esp,0x18
c000ca49:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca4d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca51:	52                   	push   edx
c000ca52:	50                   	push   eax
c000ca53:	e8 38 bd 01 00       	call   c0028790 <lrint>
c000ca58:	0f af f8             	imul   edi,eax
c000ca5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca5f:	01 f8                	add    eax,edi
c000ca61:	99                   	cdq    
c000ca62:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca65:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca68:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca6c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca70:	68 00 00 f0 3f       	push   0x3ff00000
c000ca75:	6a 00                	push   0x0
c000ca77:	e8 70 b5 01 00       	call   c0027fec <__divdf3>
c000ca7c:	83 c4 10             	add    esp,0x10
c000ca7f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca83:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca87:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca8c:	68 23 42 92 0c       	push   0xc924223
c000ca91:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca95:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca99:	e8 ed ab 01 00       	call   c002768b <__adddf3>
c000ca9e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000caa2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000caa6:	83 c4 20             	add    esp,0x20
c000caa9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cab1:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cabc:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cabf:	7d 50                	jge    c000cb11 <sinc_quad_vari_process+0x310>
c000cac1:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cac4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac7:	01 c8                	add    eax,ecx
c000cac9:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cacc:	99                   	cdq    
c000cacd:	f7 f9                	idiv   ecx
c000cacf:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cad3:	7d 0c                	jge    c000cae1 <sinc_quad_vari_process+0x2e0>
c000cad5:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad8:	85 ff                	test   edi,edi
c000cada:	79 6c                	jns    c000cb48 <sinc_quad_vari_process+0x347>
c000cadc:	e9 e7 00 00 00       	jmp    c000cbc8 <sinc_quad_vari_process+0x3c7>
c000cae1:	50                   	push   eax
c000cae2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cae6:	56                   	push   esi
c000cae7:	53                   	push   ebx
c000cae8:	e8 11 ee ff ff       	call   c000b8fe <prepare_data>
c000caed:	83 c4 10             	add    esp,0x10
c000caf0:	89 c2                	mov    edx,eax
c000caf2:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caf5:	85 c0                	test   eax,eax
c000caf7:	0f 85 bf 03 00 00    	jne    c000cebc <sinc_quad_vari_process+0x6bb>
c000cafd:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cb00:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cb03:	01 c8                	add    eax,ecx
c000cb05:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb08:	99                   	cdq    
c000cb09:	f7 f9                	idiv   ecx
c000cb0b:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb0f:	7c c4                	jl     c000cad5 <sinc_quad_vari_process+0x2d4>
c000cb11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb15:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb19:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb1c:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb23:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb27:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb2a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb2d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb30:	99                   	cdq    
c000cb31:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb34:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb37:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb3a:	99                   	cdq    
c000cb3b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb3e:	31 d2                	xor    edx,edx
c000cb40:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb43:	e9 74 03 00 00       	jmp    c000cebc <sinc_quad_vari_process+0x6bb>
c000cb48:	83 ec 0c             	sub    esp,0xc
c000cb4b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb4e:	e8 18 b8 01 00       	call   c002836b <__floatsidf>
c000cb53:	83 c4 10             	add    esp,0x10
c000cb56:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb5a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb6a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb6e:	e8 18 ab 01 00       	call   c002768b <__adddf3>
c000cb73:	83 c4 10             	add    esp,0x10
c000cb76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb7e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb82:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb86:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb8a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb8e:	e8 f8 aa 01 00       	call   c002768b <__adddf3>
c000cb93:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb96:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb9a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb9e:	e8 c8 b7 01 00       	call   c002836b <__floatsidf>
c000cba3:	83 c4 10             	add    esp,0x10
c000cba6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbaa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbae:	52                   	push   edx
c000cbaf:	50                   	push   eax
c000cbb0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb8:	e8 18 ba 01 00       	call   c00285d5 <__gedf2>
c000cbbd:	83 c4 10             	add    esp,0x10
c000cbc0:	85 c0                	test   eax,eax
c000cbc2:	0f 89 49 ff ff ff    	jns    c000cb11 <sinc_quad_vari_process+0x310>
c000cbc8:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbcc:	0f 8e ef 00 00 00    	jle    c000ccc1 <sinc_quad_vari_process+0x4c0>
c000cbd2:	83 ec 10             	sub    esp,0x10
c000cbd5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbdb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbde:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbe1:	e8 f6 b0 01 00       	call   c0027cdc <__subdf3>
c000cbe6:	83 c4 18             	add    esp,0x18
c000cbe9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	e8 78 bb 01 00       	call   c0028770 <fabs>
c000cbf8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbfc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cc00:	83 c4 10             	add    esp,0x10
c000cc03:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc08:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc0d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc11:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc15:	e8 9f b9 01 00       	call   c00285b9 <__gtdf2>
c000cc1a:	83 c4 10             	add    esp,0x10
c000cc1d:	85 c0                	test   eax,eax
c000cc1f:	0f 8e 9c 00 00 00    	jle    c000ccc1 <sinc_quad_vari_process+0x4c0>
c000cc25:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc28:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc2b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc2f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc33:	52                   	push   edx
c000cc34:	50                   	push   eax
c000cc35:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc38:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc3b:	e8 9c b0 01 00       	call   c0027cdc <__subdf3>
c000cc40:	59                   	pop    ecx
c000cc41:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc45:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc49:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc4c:	e8 1a b7 01 00       	call   c002836b <__floatsidf>
c000cc51:	83 c4 10             	add    esp,0x10
c000cc54:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc58:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc5c:	52                   	push   edx
c000cc5d:	50                   	push   eax
c000cc5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc66:	e8 9d b0 01 00       	call   c0027d08 <__muldf3>
c000cc6b:	5f                   	pop    edi
c000cc6c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc70:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc74:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc77:	e8 ef b6 01 00       	call   c002836b <__floatsidf>
c000cc7c:	83 c4 10             	add    esp,0x10
c000cc7f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc83:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc87:	52                   	push   edx
c000cc88:	50                   	push   eax
c000cc89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc8d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc91:	e8 56 b3 01 00       	call   c0027fec <__divdf3>
c000cc96:	83 c4 10             	add    esp,0x10
c000cc99:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc9d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cca1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccb1:	e8 d5 a9 01 00       	call   c002768b <__adddf3>
c000ccb6:	83 c4 10             	add    esp,0x10
c000ccb9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccbd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccc1:	83 ec 0c             	sub    esp,0xc
c000ccc4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccc7:	e8 9f b6 01 00       	call   c002836b <__floatsidf>
c000cccc:	83 c4 10             	add    esp,0x10
c000cccf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccd3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cce3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cce7:	e8 eb b8 01 00       	call   c00285d7 <__ltdf2>
c000ccec:	83 c4 10             	add    esp,0x10
c000ccef:	85 c0                	test   eax,eax
c000ccf1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccf5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccfd:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000cd01:	78 10                	js     c000cd13 <sinc_quad_vari_process+0x512>
c000cd03:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cd07:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd0f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd17:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd1b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd23:	e8 e0 af 01 00       	call   c0027d08 <__muldf3>
c000cd28:	59                   	pop    ecx
c000cd29:	5f                   	pop    edi
c000cd2a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd2e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd32:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd36:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd3a:	e8 98 eb ff ff       	call   c000b8d7 <double_to_fp>
c000cd3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd43:	89 c7                	mov    edi,eax
c000cd45:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd49:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd4d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd51:	e8 b2 af 01 00       	call   c0027d08 <__muldf3>
c000cd56:	83 c4 18             	add    esp,0x18
c000cd59:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd5d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd61:	52                   	push   edx
c000cd62:	50                   	push   eax
c000cd63:	e8 6f eb ff ff       	call   c000b8d7 <double_to_fp>
c000cd68:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd6b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd6f:	83 c4 0c             	add    esp,0xc
c000cd72:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd75:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd78:	50                   	push   eax
c000cd79:	50                   	push   eax
c000cd7a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd7d:	e8 e9 b5 01 00       	call   c002836b <__floatsidf>
c000cd82:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd86:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd96:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd9a:	e8 4d b2 01 00       	call   c0027fec <__divdf3>
c000cd9f:	83 c4 18             	add    esp,0x18
c000cda2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cda6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdaa:	52                   	push   edx
c000cdab:	89 fa                	mov    edx,edi
c000cdad:	50                   	push   eax
c000cdae:	89 d8                	mov    eax,ebx
c000cdb0:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdb4:	e8 a5 d1 ff ff       	call   c0009f5e <calc_output_quad>
c000cdb9:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdbd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdcd:	e8 1a b2 01 00       	call   c0027fec <__divdf3>
c000cdd2:	83 c4 10             	add    esp,0x10
c000cdd5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cddd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cde1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cde5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cded:	e8 99 a8 01 00       	call   c002768b <__adddf3>
c000cdf2:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdf6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdfa:	83 c4 18             	add    esp,0x18
c000cdfd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce05:	e8 86 b9 01 00       	call   c0028790 <lrint>
c000ce0a:	83 ec 0c             	sub    esp,0xc
c000ce0d:	50                   	push   eax
c000ce0e:	e8 58 b5 01 00       	call   c002836b <__floatsidf>
c000ce13:	83 c4 10             	add    esp,0x10
c000ce16:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce1a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce1e:	52                   	push   edx
c000ce1f:	50                   	push   eax
c000ce20:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce24:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce28:	e8 af ae 01 00       	call   c0027cdc <__subdf3>
c000ce2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce31:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce35:	83 c4 20             	add    esp,0x20
c000ce38:	6a 00                	push   0x0
c000ce3a:	6a 00                	push   0x0
c000ce3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce44:	e8 8e b7 01 00       	call   c00285d7 <__ltdf2>
c000ce49:	83 c4 10             	add    esp,0x10
c000ce4c:	85 c0                	test   eax,eax
c000ce4e:	79 20                	jns    c000ce70 <sinc_quad_vari_process+0x66f>
c000ce50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce60:	e8 26 a8 01 00       	call   c002768b <__adddf3>
c000ce65:	83 c4 10             	add    esp,0x10
c000ce68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce6c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce70:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce73:	83 ec 10             	sub    esp,0x10
c000ce76:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce7a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce7d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce85:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce89:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce8d:	e8 4a ae 01 00       	call   c0027cdc <__subdf3>
c000ce92:	83 c4 18             	add    esp,0x18
c000ce95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce9d:	52                   	push   edx
c000ce9e:	50                   	push   eax
c000ce9f:	e8 ec b8 01 00       	call   c0028790 <lrint>
c000cea4:	0f af f8             	imul   edi,eax
c000cea7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ceab:	83 c4 10             	add    esp,0x10
c000ceae:	01 f8                	add    eax,edi
c000ceb0:	99                   	cdq    
c000ceb1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceb4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceb7:	e9 fd fb ff ff       	jmp    c000cab9 <sinc_quad_vari_process+0x2b8>
c000cebc:	83 c4 4c             	add    esp,0x4c
c000cebf:	89 d0                	mov    eax,edx
c000cec1:	5b                   	pop    ebx
c000cec2:	5e                   	pop    esi
c000cec3:	5f                   	pop    edi
c000cec4:	5d                   	pop    ebp
c000cec5:	c3                   	ret    

c000cec6 <sinc_stereo_vari_process>:
c000cec6:	55                   	push   ebp
c000cec7:	ba 05 00 00 00       	mov    edx,0x5
c000cecc:	57                   	push   edi
c000cecd:	56                   	push   esi
c000cece:	53                   	push   ebx
c000cecf:	83 ec 4c             	sub    esp,0x4c
c000ced2:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ced6:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ceda:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000cedd:	85 db                	test   ebx,ebx
c000cedf:	0f 84 9c 06 00 00    	je     c000d581 <sinc_stereo_vari_process+0x6bb>
c000cee5:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ceeb:	0f af c7             	imul   eax,edi
c000ceee:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cef1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cef4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cefb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cf02:	0f af c7             	imul   eax,edi
c000cf05:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf08:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf0b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf16:	68 00 00 70 3f       	push   0x3f700000
c000cf1b:	6a 00                	push   0x0
c000cf1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf25:	e8 ad b6 01 00       	call   c00285d7 <__ltdf2>
c000cf2a:	83 c4 10             	add    esp,0x10
c000cf2d:	ba 16 00 00 00       	mov    edx,0x16
c000cf32:	85 c0                	test   eax,eax
c000cf34:	0f 88 47 06 00 00    	js     c000d581 <sinc_stereo_vari_process+0x6bb>
c000cf3a:	68 00 00 70 40       	push   0x40700000
c000cf3f:	6a 00                	push   0x0
c000cf41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf49:	e8 6b b6 01 00       	call   c00285b9 <__gtdf2>
c000cf4e:	83 c4 10             	add    esp,0x10
c000cf51:	ba 16 00 00 00       	mov    edx,0x16
c000cf56:	85 c0                	test   eax,eax
c000cf58:	0f 8f 23 06 00 00    	jg     c000d581 <sinc_stereo_vari_process+0x6bb>
c000cf5e:	83 ec 0c             	sub    esp,0xc
c000cf61:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf64:	e8 02 b4 01 00       	call   c002836b <__floatsidf>
c000cf69:	83 c4 10             	add    esp,0x10
c000cf6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf74:	68 00 00 00 40       	push   0x40000000
c000cf79:	6a 00                	push   0x0
c000cf7b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf83:	e8 03 a7 01 00       	call   c002768b <__adddf3>
c000cf88:	59                   	pop    ecx
c000cf89:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf8d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf91:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf94:	e8 d2 b3 01 00       	call   c002836b <__floatsidf>
c000cf99:	83 c4 10             	add    esp,0x10
c000cf9c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfa0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfa4:	52                   	push   edx
c000cfa5:	50                   	push   eax
c000cfa6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfaa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfae:	e8 39 b0 01 00       	call   c0027fec <__divdf3>
c000cfb3:	83 c4 10             	add    esp,0x10
c000cfb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfbe:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfc1:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfc4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfdc:	e8 d8 b5 01 00       	call   c00285b9 <__gtdf2>
c000cfe1:	83 c4 10             	add    esp,0x10
c000cfe4:	85 c0                	test   eax,eax
c000cfe6:	7e 2d                	jle    c000d015 <sinc_stereo_vari_process+0x14f>
c000cfe8:	68 00 00 f0 3f       	push   0x3ff00000
c000cfed:	6a 00                	push   0x0
c000cfef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cff3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cff7:	e8 db b5 01 00       	call   c00285d7 <__ltdf2>
c000cffc:	83 c4 10             	add    esp,0x10
c000cfff:	85 c0                	test   eax,eax
c000d001:	79 4d                	jns    c000d050 <sinc_stereo_vari_process+0x18a>
c000d003:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d007:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d00b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d00f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d013:	eb 1b                	jmp    c000d030 <sinc_stereo_vari_process+0x16a>
c000d015:	68 00 00 f0 3f       	push   0x3ff00000
c000d01a:	6a 00                	push   0x0
c000d01c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d020:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d024:	e8 ae b5 01 00       	call   c00285d7 <__ltdf2>
c000d029:	83 c4 10             	add    esp,0x10
c000d02c:	85 c0                	test   eax,eax
c000d02e:	79 20                	jns    c000d050 <sinc_stereo_vari_process+0x18a>
c000d030:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d034:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d038:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d040:	e8 a7 af 01 00       	call   c0027fec <__divdf3>
c000d045:	83 c4 10             	add    esp,0x10
c000d048:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d04c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d050:	50                   	push   eax
c000d051:	50                   	push   eax
c000d052:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d056:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d05a:	e8 31 b7 01 00       	call   c0028790 <lrint>
c000d05f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d062:	40                   	inc    eax
c000d063:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d067:	0f af c7             	imul   eax,edi
c000d06a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d06e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d071:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d075:	58                   	pop    eax
c000d076:	5a                   	pop    edx
c000d077:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d07b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d07f:	e8 0c b7 01 00       	call   c0028790 <lrint>
c000d084:	83 ec 0c             	sub    esp,0xc
c000d087:	50                   	push   eax
c000d088:	e8 de b2 01 00       	call   c002836b <__floatsidf>
c000d08d:	83 c4 10             	add    esp,0x10
c000d090:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d094:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d098:	52                   	push   edx
c000d099:	50                   	push   eax
c000d09a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0a2:	e8 35 ac 01 00       	call   c0027cdc <__subdf3>
c000d0a7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0ab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0af:	83 c4 20             	add    esp,0x20
c000d0b2:	6a 00                	push   0x0
c000d0b4:	6a 00                	push   0x0
c000d0b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0be:	e8 14 b5 01 00       	call   c00285d7 <__ltdf2>
c000d0c3:	83 c4 10             	add    esp,0x10
c000d0c6:	85 c0                	test   eax,eax
c000d0c8:	79 1f                	jns    c000d0e9 <sinc_stereo_vari_process+0x223>
c000d0ca:	68 00 00 f0 3f       	push   0x3ff00000
c000d0cf:	6a 00                	push   0x0
c000d0d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d9:	e8 ad a5 01 00       	call   c002768b <__adddf3>
c000d0de:	83 c4 10             	add    esp,0x10
c000d0e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0e5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0ec:	83 ec 10             	sub    esp,0x10
c000d0ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0f3:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d102:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d106:	e8 d1 ab 01 00       	call   c0027cdc <__subdf3>
c000d10b:	83 c4 18             	add    esp,0x18
c000d10e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d112:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d116:	52                   	push   edx
c000d117:	50                   	push   eax
c000d118:	e8 73 b6 01 00       	call   c0028790 <lrint>
c000d11d:	0f af f8             	imul   edi,eax
c000d120:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d124:	01 f8                	add    eax,edi
c000d126:	99                   	cdq    
c000d127:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d12a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d12d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d131:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d135:	68 00 00 f0 3f       	push   0x3ff00000
c000d13a:	6a 00                	push   0x0
c000d13c:	e8 ab ae 01 00       	call   c0027fec <__divdf3>
c000d141:	83 c4 10             	add    esp,0x10
c000d144:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d148:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d14c:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d151:	68 23 42 92 0c       	push   0xc924223
c000d156:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d15a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d15e:	e8 28 a5 01 00       	call   c002768b <__adddf3>
c000d163:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d167:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d16b:	83 c4 20             	add    esp,0x20
c000d16e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d176:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d17e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d181:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d184:	7d 50                	jge    c000d1d6 <sinc_stereo_vari_process+0x310>
c000d186:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d189:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d18c:	01 c8                	add    eax,ecx
c000d18e:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d191:	99                   	cdq    
c000d192:	f7 f9                	idiv   ecx
c000d194:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d198:	7d 0c                	jge    c000d1a6 <sinc_stereo_vari_process+0x2e0>
c000d19a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d19d:	85 ff                	test   edi,edi
c000d19f:	79 6c                	jns    c000d20d <sinc_stereo_vari_process+0x347>
c000d1a1:	e9 e7 00 00 00       	jmp    c000d28d <sinc_stereo_vari_process+0x3c7>
c000d1a6:	50                   	push   eax
c000d1a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1ab:	56                   	push   esi
c000d1ac:	53                   	push   ebx
c000d1ad:	e8 4c e7 ff ff       	call   c000b8fe <prepare_data>
c000d1b2:	83 c4 10             	add    esp,0x10
c000d1b5:	89 c2                	mov    edx,eax
c000d1b7:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1ba:	85 c0                	test   eax,eax
c000d1bc:	0f 85 bf 03 00 00    	jne    c000d581 <sinc_stereo_vari_process+0x6bb>
c000d1c2:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1c5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c8:	01 c8                	add    eax,ecx
c000d1ca:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1cd:	99                   	cdq    
c000d1ce:	f7 f9                	idiv   ecx
c000d1d0:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1d4:	7c c4                	jl     c000d19a <sinc_stereo_vari_process+0x2d4>
c000d1d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1de:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1e1:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1ec:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ef:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1f2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1f5:	99                   	cdq    
c000d1f6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f9:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1fc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1ff:	99                   	cdq    
c000d200:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d203:	31 d2                	xor    edx,edx
c000d205:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d208:	e9 74 03 00 00       	jmp    c000d581 <sinc_stereo_vari_process+0x6bb>
c000d20d:	83 ec 0c             	sub    esp,0xc
c000d210:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d213:	e8 53 b1 01 00       	call   c002836b <__floatsidf>
c000d218:	83 c4 10             	add    esp,0x10
c000d21b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d21f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d223:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d227:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d22b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d233:	e8 53 a4 01 00       	call   c002768b <__adddf3>
c000d238:	83 c4 10             	add    esp,0x10
c000d23b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d23f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d243:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d247:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d24b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d253:	e8 33 a4 01 00       	call   c002768b <__adddf3>
c000d258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d25b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d25f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d263:	e8 03 b1 01 00       	call   c002836b <__floatsidf>
c000d268:	83 c4 10             	add    esp,0x10
c000d26b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d26f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d273:	52                   	push   edx
c000d274:	50                   	push   eax
c000d275:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d279:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d27d:	e8 53 b3 01 00       	call   c00285d5 <__gedf2>
c000d282:	83 c4 10             	add    esp,0x10
c000d285:	85 c0                	test   eax,eax
c000d287:	0f 89 49 ff ff ff    	jns    c000d1d6 <sinc_stereo_vari_process+0x310>
c000d28d:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d291:	0f 8e ef 00 00 00    	jle    c000d386 <sinc_stereo_vari_process+0x4c0>
c000d297:	83 ec 10             	sub    esp,0x10
c000d29a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d29d:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2a0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d2a3:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d2a6:	e8 31 aa 01 00       	call   c0027cdc <__subdf3>
c000d2ab:	83 c4 18             	add    esp,0x18
c000d2ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	e8 b3 b4 01 00       	call   c0028770 <fabs>
c000d2bd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2c1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2c5:	83 c4 10             	add    esp,0x10
c000d2c8:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2cd:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2d2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2da:	e8 da b2 01 00       	call   c00285b9 <__gtdf2>
c000d2df:	83 c4 10             	add    esp,0x10
c000d2e2:	85 c0                	test   eax,eax
c000d2e4:	0f 8e 9c 00 00 00    	jle    c000d386 <sinc_stereo_vari_process+0x4c0>
c000d2ea:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ed:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2f4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f8:	52                   	push   edx
c000d2f9:	50                   	push   eax
c000d2fa:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2fd:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d300:	e8 d7 a9 01 00       	call   c0027cdc <__subdf3>
c000d305:	59                   	pop    ecx
c000d306:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d30a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d30e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d311:	e8 55 b0 01 00       	call   c002836b <__floatsidf>
c000d316:	83 c4 10             	add    esp,0x10
c000d319:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d31d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d321:	52                   	push   edx
c000d322:	50                   	push   eax
c000d323:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d327:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d32b:	e8 d8 a9 01 00       	call   c0027d08 <__muldf3>
c000d330:	5f                   	pop    edi
c000d331:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d335:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d339:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d33c:	e8 2a b0 01 00       	call   c002836b <__floatsidf>
c000d341:	83 c4 10             	add    esp,0x10
c000d344:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d348:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d34c:	52                   	push   edx
c000d34d:	50                   	push   eax
c000d34e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d352:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d356:	e8 91 ac 01 00       	call   c0027fec <__divdf3>
c000d35b:	83 c4 10             	add    esp,0x10
c000d35e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d362:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d366:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d36a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d36e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d372:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d376:	e8 10 a3 01 00       	call   c002768b <__adddf3>
c000d37b:	83 c4 10             	add    esp,0x10
c000d37e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d382:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d386:	83 ec 0c             	sub    esp,0xc
c000d389:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d38c:	e8 da af 01 00       	call   c002836b <__floatsidf>
c000d391:	83 c4 10             	add    esp,0x10
c000d394:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d398:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3ac:	e8 26 b2 01 00       	call   c00285d7 <__ltdf2>
c000d3b1:	83 c4 10             	add    esp,0x10
c000d3b4:	85 c0                	test   eax,eax
c000d3b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3ba:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3be:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3c2:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3c6:	78 10                	js     c000d3d8 <sinc_stereo_vari_process+0x512>
c000d3c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3d4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e8:	e8 1b a9 01 00       	call   c0027d08 <__muldf3>
c000d3ed:	59                   	pop    ecx
c000d3ee:	5f                   	pop    edi
c000d3ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3ff:	e8 d3 e4 ff ff       	call   c000b8d7 <double_to_fp>
c000d404:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d408:	89 c7                	mov    edi,eax
c000d40a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d40e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d416:	e8 ed a8 01 00       	call   c0027d08 <__muldf3>
c000d41b:	83 c4 18             	add    esp,0x18
c000d41e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d422:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d426:	52                   	push   edx
c000d427:	50                   	push   eax
c000d428:	e8 aa e4 ff ff       	call   c000b8d7 <double_to_fp>
c000d42d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d430:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d434:	83 c4 0c             	add    esp,0xc
c000d437:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d43a:	8d 04 90             	lea    eax,[eax+edx*4]
c000d43d:	50                   	push   eax
c000d43e:	50                   	push   eax
c000d43f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d442:	e8 24 af 01 00       	call   c002836b <__floatsidf>
c000d447:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d44b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d45b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d45f:	e8 88 ab 01 00       	call   c0027fec <__divdf3>
c000d464:	83 c4 18             	add    esp,0x18
c000d467:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d46b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d46f:	52                   	push   edx
c000d470:	89 fa                	mov    edx,edi
c000d472:	50                   	push   eax
c000d473:	89 d8                	mov    eax,ebx
c000d475:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d479:	e8 02 c7 ff ff       	call   c0009b80 <calc_output_stereo>
c000d47e:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d482:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d486:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d48a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d492:	e8 55 ab 01 00       	call   c0027fec <__divdf3>
c000d497:	83 c4 10             	add    esp,0x10
c000d49a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d49e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d4a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4aa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4b2:	e8 d4 a1 01 00       	call   c002768b <__adddf3>
c000d4b7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4bb:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4bf:	83 c4 18             	add    esp,0x18
c000d4c2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4ca:	e8 c1 b2 01 00       	call   c0028790 <lrint>
c000d4cf:	83 ec 0c             	sub    esp,0xc
c000d4d2:	50                   	push   eax
c000d4d3:	e8 93 ae 01 00       	call   c002836b <__floatsidf>
c000d4d8:	83 c4 10             	add    esp,0x10
c000d4db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4df:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4e3:	52                   	push   edx
c000d4e4:	50                   	push   eax
c000d4e5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ed:	e8 ea a7 01 00       	call   c0027cdc <__subdf3>
c000d4f2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4f6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4fa:	83 c4 20             	add    esp,0x20
c000d4fd:	6a 00                	push   0x0
c000d4ff:	6a 00                	push   0x0
c000d501:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d505:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d509:	e8 c9 b0 01 00       	call   c00285d7 <__ltdf2>
c000d50e:	83 c4 10             	add    esp,0x10
c000d511:	85 c0                	test   eax,eax
c000d513:	79 20                	jns    c000d535 <sinc_stereo_vari_process+0x66f>
c000d515:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d519:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d51d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d521:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d525:	e8 61 a1 01 00       	call   c002768b <__adddf3>
c000d52a:	83 c4 10             	add    esp,0x10
c000d52d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d531:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d535:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d538:	83 ec 10             	sub    esp,0x10
c000d53b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d53f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d542:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d546:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d54a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d552:	e8 85 a7 01 00       	call   c0027cdc <__subdf3>
c000d557:	83 c4 18             	add    esp,0x18
c000d55a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d55e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d562:	52                   	push   edx
c000d563:	50                   	push   eax
c000d564:	e8 27 b2 01 00       	call   c0028790 <lrint>
c000d569:	0f af f8             	imul   edi,eax
c000d56c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d570:	83 c4 10             	add    esp,0x10
c000d573:	01 f8                	add    eax,edi
c000d575:	99                   	cdq    
c000d576:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d579:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d57c:	e9 fd fb ff ff       	jmp    c000d17e <sinc_stereo_vari_process+0x2b8>
c000d581:	83 c4 4c             	add    esp,0x4c
c000d584:	89 d0                	mov    eax,edx
c000d586:	5b                   	pop    ebx
c000d587:	5e                   	pop    esi
c000d588:	5f                   	pop    edi
c000d589:	5d                   	pop    ebp
c000d58a:	c3                   	ret    

c000d58b <sinc_mono_vari_process>:
c000d58b:	55                   	push   ebp
c000d58c:	ba 05 00 00 00       	mov    edx,0x5
c000d591:	57                   	push   edi
c000d592:	56                   	push   esi
c000d593:	53                   	push   ebx
c000d594:	83 ec 4c             	sub    esp,0x4c
c000d597:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d59b:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d59f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d5a2:	85 db                	test   ebx,ebx
c000d5a4:	0f 84 c1 06 00 00    	je     c000dc6b <sinc_mono_vari_process+0x6e0>
c000d5aa:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5b0:	0f af c7             	imul   eax,edi
c000d5b3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5b6:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5c0:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5c7:	0f af c7             	imul   eax,edi
c000d5ca:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5cd:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5d1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5d4:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5d6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5de:	68 00 00 70 3f       	push   0x3f700000
c000d5e3:	6a 00                	push   0x0
c000d5e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ed:	e8 e5 af 01 00       	call   c00285d7 <__ltdf2>
c000d5f2:	83 c4 10             	add    esp,0x10
c000d5f5:	ba 16 00 00 00       	mov    edx,0x16
c000d5fa:	85 c0                	test   eax,eax
c000d5fc:	0f 88 69 06 00 00    	js     c000dc6b <sinc_mono_vari_process+0x6e0>
c000d602:	68 00 00 70 40       	push   0x40700000
c000d607:	6a 00                	push   0x0
c000d609:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d60d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d611:	e8 a3 af 01 00       	call   c00285b9 <__gtdf2>
c000d616:	83 c4 10             	add    esp,0x10
c000d619:	ba 16 00 00 00       	mov    edx,0x16
c000d61e:	85 c0                	test   eax,eax
c000d620:	0f 8f 45 06 00 00    	jg     c000dc6b <sinc_mono_vari_process+0x6e0>
c000d626:	83 ec 0c             	sub    esp,0xc
c000d629:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d62c:	e8 3a ad 01 00       	call   c002836b <__floatsidf>
c000d631:	83 c4 10             	add    esp,0x10
c000d634:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d638:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d63c:	68 00 00 00 40       	push   0x40000000
c000d641:	6a 00                	push   0x0
c000d643:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d647:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d64b:	e8 3b a0 01 00       	call   c002768b <__adddf3>
c000d650:	59                   	pop    ecx
c000d651:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d655:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d659:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d65c:	e8 0a ad 01 00       	call   c002836b <__floatsidf>
c000d661:	83 c4 10             	add    esp,0x10
c000d664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d668:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d66c:	52                   	push   edx
c000d66d:	50                   	push   eax
c000d66e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d672:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d676:	e8 71 a9 01 00       	call   c0027fec <__divdf3>
c000d67b:	83 c4 10             	add    esp,0x10
c000d67e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d682:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d686:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d689:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d68c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d690:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a4:	e8 10 af 01 00       	call   c00285b9 <__gtdf2>
c000d6a9:	83 c4 10             	add    esp,0x10
c000d6ac:	85 c0                	test   eax,eax
c000d6ae:	7e 2d                	jle    c000d6dd <sinc_mono_vari_process+0x152>
c000d6b0:	68 00 00 f0 3f       	push   0x3ff00000
c000d6b5:	6a 00                	push   0x0
c000d6b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6bf:	e8 13 af 01 00       	call   c00285d7 <__ltdf2>
c000d6c4:	83 c4 10             	add    esp,0x10
c000d6c7:	85 c0                	test   eax,eax
c000d6c9:	79 4d                	jns    c000d718 <sinc_mono_vari_process+0x18d>
c000d6cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6cf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6db:	eb 1b                	jmp    c000d6f8 <sinc_mono_vari_process+0x16d>
c000d6dd:	68 00 00 f0 3f       	push   0x3ff00000
c000d6e2:	6a 00                	push   0x0
c000d6e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6ec:	e8 e6 ae 01 00       	call   c00285d7 <__ltdf2>
c000d6f1:	83 c4 10             	add    esp,0x10
c000d6f4:	85 c0                	test   eax,eax
c000d6f6:	79 20                	jns    c000d718 <sinc_mono_vari_process+0x18d>
c000d6f8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6fc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d700:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d704:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d708:	e8 df a8 01 00       	call   c0027fec <__divdf3>
c000d70d:	83 c4 10             	add    esp,0x10
c000d710:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d714:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d718:	50                   	push   eax
c000d719:	50                   	push   eax
c000d71a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d722:	e8 69 b0 01 00       	call   c0028790 <lrint>
c000d727:	40                   	inc    eax
c000d728:	0f af c7             	imul   eax,edi
c000d72b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d72f:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d733:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d736:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d739:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d73d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d741:	58                   	pop    eax
c000d742:	5a                   	pop    edx
c000d743:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d747:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d74b:	e8 40 b0 01 00       	call   c0028790 <lrint>
c000d750:	83 ec 0c             	sub    esp,0xc
c000d753:	50                   	push   eax
c000d754:	e8 12 ac 01 00       	call   c002836b <__floatsidf>
c000d759:	83 c4 10             	add    esp,0x10
c000d75c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d760:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d764:	52                   	push   edx
c000d765:	50                   	push   eax
c000d766:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d76a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d76e:	e8 69 a5 01 00       	call   c0027cdc <__subdf3>
c000d773:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d777:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d77b:	83 c4 20             	add    esp,0x20
c000d77e:	6a 00                	push   0x0
c000d780:	6a 00                	push   0x0
c000d782:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d786:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d78a:	e8 48 ae 01 00       	call   c00285d7 <__ltdf2>
c000d78f:	83 c4 10             	add    esp,0x10
c000d792:	85 c0                	test   eax,eax
c000d794:	79 1f                	jns    c000d7b5 <sinc_mono_vari_process+0x22a>
c000d796:	68 00 00 f0 3f       	push   0x3ff00000
c000d79b:	6a 00                	push   0x0
c000d79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7a5:	e8 e1 9e 01 00       	call   c002768b <__adddf3>
c000d7aa:	83 c4 10             	add    esp,0x10
c000d7ad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7b1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7b5:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7bb:	83 ec 10             	sub    esp,0x10
c000d7be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ca:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ce:	e8 09 a5 01 00       	call   c0027cdc <__subdf3>
c000d7d3:	83 c4 18             	add    esp,0x18
c000d7d6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7da:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7de:	52                   	push   edx
c000d7df:	50                   	push   eax
c000d7e0:	e8 ab af 01 00       	call   c0028790 <lrint>
c000d7e5:	0f af f8             	imul   edi,eax
c000d7e8:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7eb:	31 ff                	xor    edi,edi
c000d7ed:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7f2:	99                   	cdq    
c000d7f3:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7f6:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d801:	55                   	push   ebp
c000d802:	57                   	push   edi
c000d803:	e8 e4 a7 01 00       	call   c0027fec <__divdf3>
c000d808:	83 c4 10             	add    esp,0x10
c000d80b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d80f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d813:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d818:	68 23 42 92 0c       	push   0xc924223
c000d81d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d821:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d825:	e8 61 9e 01 00       	call   c002768b <__adddf3>
c000d82a:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d82e:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d832:	83 c4 20             	add    esp,0x20
c000d835:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d839:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d83d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d840:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d843:	7d 54                	jge    c000d899 <sinc_mono_vari_process+0x30e>
c000d845:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d848:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d84b:	01 c8                	add    eax,ecx
c000d84d:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d850:	99                   	cdq    
c000d851:	f7 f9                	idiv   ecx
c000d853:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d857:	7d 0c                	jge    c000d865 <sinc_mono_vari_process+0x2da>
c000d859:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d85c:	85 ff                	test   edi,edi
c000d85e:	79 73                	jns    c000d8d3 <sinc_mono_vari_process+0x348>
c000d860:	e9 ee 00 00 00       	jmp    c000d953 <sinc_mono_vari_process+0x3c8>
c000d865:	50                   	push   eax
c000d866:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d86a:	56                   	push   esi
c000d86b:	53                   	push   ebx
c000d86c:	e8 8d e0 ff ff       	call   c000b8fe <prepare_data>
c000d871:	89 c2                	mov    edx,eax
c000d873:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d877:	83 c4 10             	add    esp,0x10
c000d87a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d87d:	85 d2                	test   edx,edx
c000d87f:	0f 85 e6 03 00 00    	jne    c000dc6b <sinc_mono_vari_process+0x6e0>
c000d885:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d888:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d88b:	01 c8                	add    eax,ecx
c000d88d:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d890:	99                   	cdq    
c000d891:	f7 f9                	idiv   ecx
c000d893:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d897:	7c c0                	jl     c000d859 <sinc_mono_vari_process+0x2ce>
c000d899:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d89d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d8a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d8a5:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a8:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8af:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8b3:	89 01                	mov    DWORD PTR [ecx],eax
c000d8b5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8bb:	99                   	cdq    
c000d8bc:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8bf:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8c2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8c5:	99                   	cdq    
c000d8c6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c9:	31 d2                	xor    edx,edx
c000d8cb:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8ce:	e9 98 03 00 00       	jmp    c000dc6b <sinc_mono_vari_process+0x6e0>
c000d8d3:	83 ec 0c             	sub    esp,0xc
c000d8d6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d9:	e8 8d aa 01 00       	call   c002836b <__floatsidf>
c000d8de:	83 c4 10             	add    esp,0x10
c000d8e1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8e5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8f1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f9:	e8 8d 9d 01 00       	call   c002768b <__adddf3>
c000d8fe:	83 c4 10             	add    esp,0x10
c000d901:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d905:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d909:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d90d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d911:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d915:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d919:	e8 6d 9d 01 00       	call   c002768b <__adddf3>
c000d91e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d921:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d925:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d929:	e8 3d aa 01 00       	call   c002836b <__floatsidf>
c000d92e:	83 c4 10             	add    esp,0x10
c000d931:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d935:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d939:	52                   	push   edx
c000d93a:	50                   	push   eax
c000d93b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d943:	e8 71 ac 01 00       	call   c00285b9 <__gtdf2>
c000d948:	83 c4 10             	add    esp,0x10
c000d94b:	85 c0                	test   eax,eax
c000d94d:	0f 8f 46 ff ff ff    	jg     c000d899 <sinc_mono_vari_process+0x30e>
c000d953:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d957:	0f 8e f5 00 00 00    	jle    c000da52 <sinc_mono_vari_process+0x4c7>
c000d95d:	83 ec 10             	sub    esp,0x10
c000d960:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d963:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d966:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d96a:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d96d:	ff 30                	push   DWORD PTR [eax]
c000d96f:	e8 68 a3 01 00       	call   c0027cdc <__subdf3>
c000d974:	83 c4 18             	add    esp,0x18
c000d977:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d97b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d97f:	52                   	push   edx
c000d980:	50                   	push   eax
c000d981:	e8 ea ad 01 00       	call   c0028770 <fabs>
c000d986:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d98a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d98e:	83 c4 10             	add    esp,0x10
c000d991:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d996:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d99b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9a3:	e8 11 ac 01 00       	call   c00285b9 <__gtdf2>
c000d9a8:	83 c4 10             	add    esp,0x10
c000d9ab:	85 c0                	test   eax,eax
c000d9ad:	0f 8e 9f 00 00 00    	jle    c000da52 <sinc_mono_vari_process+0x4c7>
c000d9b3:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9b7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9ba:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9bc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9c0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9c4:	52                   	push   edx
c000d9c5:	50                   	push   eax
c000d9c6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c9:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9cc:	e8 0b a3 01 00       	call   c0027cdc <__subdf3>
c000d9d1:	5f                   	pop    edi
c000d9d2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9d6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9da:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9dd:	e8 89 a9 01 00       	call   c002836b <__floatsidf>
c000d9e2:	83 c4 10             	add    esp,0x10
c000d9e5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ed:	52                   	push   edx
c000d9ee:	50                   	push   eax
c000d9ef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9f7:	e8 0c a3 01 00       	call   c0027d08 <__muldf3>
c000d9fc:	5d                   	pop    ebp
c000d9fd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000da01:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000da05:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da08:	e8 5e a9 01 00       	call   c002836b <__floatsidf>
c000da0d:	83 c4 10             	add    esp,0x10
c000da10:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da14:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da18:	52                   	push   edx
c000da19:	50                   	push   eax
c000da1a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da22:	e8 c5 a5 01 00       	call   c0027fec <__divdf3>
c000da27:	83 c4 10             	add    esp,0x10
c000da2a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da2e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da32:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da3a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da42:	e8 44 9c 01 00       	call   c002768b <__adddf3>
c000da47:	83 c4 10             	add    esp,0x10
c000da4a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da4e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da52:	83 ec 0c             	sub    esp,0xc
c000da55:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da58:	e8 0e a9 01 00       	call   c002836b <__floatsidf>
c000da5d:	83 c4 10             	add    esp,0x10
c000da60:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da64:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da78:	e8 5a ab 01 00       	call   c00285d7 <__ltdf2>
c000da7d:	83 c4 10             	add    esp,0x10
c000da80:	85 c0                	test   eax,eax
c000da82:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da86:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da8a:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da8e:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da92:	78 10                	js     c000daa4 <sinc_mono_vari_process+0x519>
c000da94:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da98:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da9c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000daa0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000daa4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daac:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dab0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dab4:	e8 4f a2 01 00       	call   c0027d08 <__muldf3>
c000dab9:	59                   	pop    ecx
c000daba:	5f                   	pop    edi
c000dabb:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dabf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dac3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dacb:	e8 07 de ff ff       	call   c000b8d7 <double_to_fp>
c000dad0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad4:	89 c7                	mov    edi,eax
c000dad6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dada:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dade:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dae2:	e8 21 a2 01 00       	call   c0027d08 <__muldf3>
c000dae7:	83 c4 18             	add    esp,0x18
c000daea:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daee:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daf2:	52                   	push   edx
c000daf3:	50                   	push   eax
c000daf4:	e8 de dd ff ff       	call   c000b8d7 <double_to_fp>
c000daf9:	83 ec 0c             	sub    esp,0xc
c000dafc:	89 c5                	mov    ebp,eax
c000dafe:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000db01:	e8 65 a8 01 00       	call   c002836b <__floatsidf>
c000db06:	83 c4 10             	add    esp,0x10
c000db09:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db0d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db11:	52                   	push   edx
c000db12:	50                   	push   eax
c000db13:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db17:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1b:	e8 cc a4 01 00       	call   c0027fec <__divdf3>
c000db20:	83 c4 10             	add    esp,0x10
c000db23:	89 e9                	mov    ecx,ebp
c000db25:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db29:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db2d:	89 d8                	mov    eax,ebx
c000db2f:	89 fa                	mov    edx,edi
c000db31:	e8 ee bd ff ff       	call   c0009924 <calc_output_single>
c000db36:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db39:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db3c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db40:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db44:	52                   	push   edx
c000db45:	50                   	push   eax
c000db46:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db4a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db4e:	e8 b5 a1 01 00       	call   c0027d08 <__muldf3>
c000db53:	59                   	pop    ecx
c000db54:	59                   	pop    ecx
c000db55:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db59:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db65:	e8 71 aa 01 00       	call   c00285db <__truncdfsf2>
c000db6a:	83 c4 10             	add    esp,0x10
c000db6d:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db70:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db73:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db77:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db7b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db83:	e8 64 a4 01 00       	call   c0027fec <__divdf3>
c000db88:	83 c4 10             	add    esp,0x10
c000db8b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db8f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db9b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dba3:	e8 e3 9a 01 00       	call   c002768b <__adddf3>
c000dba8:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dbac:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dbb0:	83 c4 18             	add    esp,0x18
c000dbb3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbbb:	e8 d0 ab 01 00       	call   c0028790 <lrint>
c000dbc0:	83 ec 0c             	sub    esp,0xc
c000dbc3:	50                   	push   eax
c000dbc4:	e8 a2 a7 01 00       	call   c002836b <__floatsidf>
c000dbc9:	83 c4 10             	add    esp,0x10
c000dbcc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbd0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbd4:	52                   	push   edx
c000dbd5:	50                   	push   eax
c000dbd6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbde:	e8 f9 a0 01 00       	call   c0027cdc <__subdf3>
c000dbe3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbe7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbeb:	83 c4 20             	add    esp,0x20
c000dbee:	6a 00                	push   0x0
c000dbf0:	6a 00                	push   0x0
c000dbf2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbfa:	e8 d8 a9 01 00       	call   c00285d7 <__ltdf2>
c000dbff:	83 c4 10             	add    esp,0x10
c000dc02:	85 c0                	test   eax,eax
c000dc04:	79 20                	jns    c000dc26 <sinc_mono_vari_process+0x69b>
c000dc06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc0e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc16:	e8 70 9a 01 00       	call   c002768b <__adddf3>
c000dc1b:	83 c4 10             	add    esp,0x10
c000dc1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc26:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc29:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc2c:	83 ec 10             	sub    esp,0x10
c000dc2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc37:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc3b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc3f:	e8 98 a0 01 00       	call   c0027cdc <__subdf3>
c000dc44:	83 c4 18             	add    esp,0x18
c000dc47:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc4b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc4f:	52                   	push   edx
c000dc50:	50                   	push   eax
c000dc51:	e8 3a ab 01 00       	call   c0028790 <lrint>
c000dc56:	83 c4 10             	add    esp,0x10
c000dc59:	0f af f8             	imul   edi,eax
c000dc5c:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc5f:	99                   	cdq    
c000dc60:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc63:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc66:	e9 d2 fb ff ff       	jmp    c000d83d <sinc_mono_vari_process+0x2b2>
c000dc6b:	83 c4 4c             	add    esp,0x4c
c000dc6e:	89 d0                	mov    eax,edx
c000dc70:	5b                   	pop    ebx
c000dc71:	5e                   	pop    esi
c000dc72:	5f                   	pop    edi
c000dc73:	5d                   	pop    ebp
c000dc74:	c3                   	ret    

c000dc75 <sinc_get_name>:
c000dc75:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc79:	31 c0                	xor    eax,eax
c000dc7b:	83 fa 02             	cmp    edx,0x2
c000dc7e:	77 07                	ja     c000dc87 <sinc_get_name+0x12>
c000dc80:	8b 04 95 84 9f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd607c]
c000dc87:	c3                   	ret    

c000dc88 <sinc_get_description>:
c000dc88:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc8c:	31 c0                	xor    eax,eax
c000dc8e:	83 fa 02             	cmp    edx,0x2
c000dc91:	77 07                	ja     c000dc9a <sinc_get_description+0x12>
c000dc93:	8b 04 95 78 9f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6088]
c000dc9a:	c3                   	ret    

c000dc9b <sinc_set_converter>:
c000dc9b:	53                   	push   ebx
c000dc9c:	81 ec 58 08 00 00    	sub    esp,0x858
c000dca2:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dcac:	85 c0                	test   eax,eax
c000dcae:	74 13                	je     c000dcc3 <sinc_set_converter+0x28>
c000dcb0:	83 ec 0c             	sub    esp,0xc
c000dcb3:	50                   	push   eax
c000dcb4:	e8 a2 1b 00 00       	call   c000f85b <free>
c000dcb9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcc0:	83 c4 10             	add    esp,0x10
c000dcc3:	50                   	push   eax
c000dcc4:	68 44 08 00 00       	push   0x844
c000dcc9:	6a 00                	push   0x0
c000dccb:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dccf:	50                   	push   eax
c000dcd0:	e8 ab 2a ff ff       	call   c0000780 <memset>
c000dcd5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd8:	83 c4 10             	add    esp,0x10
c000dcdb:	b8 0b 00 00 00       	mov    eax,0xb
c000dce0:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dce6:	7f 6e                	jg     c000dd56 <sinc_set_converter+0xbb>
c000dce8:	83 fa 01             	cmp    edx,0x1
c000dceb:	75 10                	jne    c000dcfd <sinc_set_converter+0x62>
c000dced:	c7 43 24 8b d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d58b
c000dcf4:	c7 43 20 8b d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d58b
c000dcfb:	eb 4d                	jmp    c000dd4a <sinc_set_converter+0xaf>
c000dcfd:	83 fa 02             	cmp    edx,0x2
c000dd00:	75 10                	jne    c000dd12 <sinc_set_converter+0x77>
c000dd02:	c7 43 24 c6 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cec6
c000dd09:	c7 43 20 c6 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cec6
c000dd10:	eb 38                	jmp    c000dd4a <sinc_set_converter+0xaf>
c000dd12:	83 fa 04             	cmp    edx,0x4
c000dd15:	75 10                	jne    c000dd27 <sinc_set_converter+0x8c>
c000dd17:	c7 43 24 01 c8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c801
c000dd1e:	c7 43 20 01 c8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c801
c000dd25:	eb 23                	jmp    c000dd4a <sinc_set_converter+0xaf>
c000dd27:	83 fa 06             	cmp    edx,0x6
c000dd2a:	75 10                	jne    c000dd3c <sinc_set_converter+0xa1>
c000dd2c:	c7 43 24 3c c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c13c
c000dd33:	c7 43 20 3c c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c13c
c000dd3a:	eb 0e                	jmp    c000dd4a <sinc_set_converter+0xaf>
c000dd3c:	c7 43 24 78 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba78
c000dd43:	c7 43 20 78 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba78
c000dd4a:	c7 43 28 2b ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad2b
c000dd51:	b8 0a 00 00 00       	mov    eax,0xa
c000dd56:	81 c4 58 08 00 00    	add    esp,0x858
c000dd5c:	5b                   	pop    ebx
c000dd5d:	c3                   	ret    

c000dd5e <zoh_vari_process>:
c000dd5e:	55                   	push   ebp
c000dd5f:	31 d2                	xor    edx,edx
c000dd61:	57                   	push   edi
c000dd62:	56                   	push   esi
c000dd63:	53                   	push   ebx
c000dd64:	83 ec 3c             	sub    esp,0x3c
c000dd67:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd6b:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd6f:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd73:	0f 8e 80 06 00 00    	jle    c000e3f9 <zoh_vari_process+0x69b>
c000dd79:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd7c:	ba 05 00 00 00       	mov    edx,0x5
c000dd81:	85 db                	test   ebx,ebx
c000dd83:	0f 84 70 06 00 00    	je     c000e3f9 <zoh_vari_process+0x69b>
c000dd89:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd8c:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd90:	74 19                	je     c000ddab <zoh_vari_process+0x4d>
c000dd92:	31 d2                	xor    edx,edx
c000dd94:	39 c2                	cmp    edx,eax
c000dd96:	7d 0c                	jge    c000dda4 <zoh_vari_process+0x46>
c000dd98:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd9a:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd9d:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dda1:	42                   	inc    edx
c000dda2:	eb f0                	jmp    c000dd94 <zoh_vari_process+0x36>
c000dda4:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000ddab:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000ddae:	0f af d0             	imul   edx,eax
c000ddb1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddb4:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb8:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddbf:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddc2:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc9:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddcc:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddce:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddd2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddd6:	68 00 00 70 3f       	push   0x3f700000
c000dddb:	6a 00                	push   0x0
c000dddd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dde1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dde5:	e8 ed a7 01 00       	call   c00285d7 <__ltdf2>
c000ddea:	83 c4 10             	add    esp,0x10
c000dded:	ba 16 00 00 00       	mov    edx,0x16
c000ddf2:	85 c0                	test   eax,eax
c000ddf4:	0f 88 ff 05 00 00    	js     c000e3f9 <zoh_vari_process+0x69b>
c000ddfa:	68 00 00 70 40       	push   0x40700000
c000ddff:	6a 00                	push   0x0
c000de01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de09:	e8 ab a7 01 00       	call   c00285b9 <__gtdf2>
c000de0e:	83 c4 10             	add    esp,0x10
c000de11:	ba 16 00 00 00       	mov    edx,0x16
c000de16:	85 c0                	test   eax,eax
c000de18:	0f 8f db 05 00 00    	jg     c000e3f9 <zoh_vari_process+0x69b>
c000de1e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de21:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de2c:	68 00 00 f0 3f       	push   0x3ff00000
c000de31:	6a 00                	push   0x0
c000de33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de3b:	e8 97 a7 01 00       	call   c00285d7 <__ltdf2>
c000de40:	83 c4 10             	add    esp,0x10
c000de43:	85 c0                	test   eax,eax
c000de45:	0f 89 da 01 00 00    	jns    c000e025 <zoh_vari_process+0x2c7>
c000de4b:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de4e:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de51:	0f 8d ce 01 00 00    	jge    c000e025 <zoh_vari_process+0x2c7>
c000de57:	83 ec 0c             	sub    esp,0xc
c000de5a:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de5d:	e8 09 a5 01 00       	call   c002836b <__floatsidf>
c000de62:	83 c4 10             	add    esp,0x10
c000de65:	89 04 24             	mov    DWORD PTR [esp],eax
c000de68:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de70:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de74:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de78:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de7c:	e8 87 9e 01 00       	call   c0027d08 <__muldf3>
c000de81:	59                   	pop    ecx
c000de82:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de86:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de8a:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de8d:	e8 d9 a4 01 00       	call   c002836b <__floatsidf>
c000de92:	83 c4 10             	add    esp,0x10
c000de95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de99:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de9d:	52                   	push   edx
c000de9e:	50                   	push   eax
c000de9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dea3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dea7:	e8 df 97 01 00       	call   c002768b <__adddf3>
c000deac:	59                   	pop    ecx
c000dead:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000deb1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000deb5:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb8:	e8 ae a4 01 00       	call   c002836b <__floatsidf>
c000debd:	83 c4 10             	add    esp,0x10
c000dec0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dec4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec8:	52                   	push   edx
c000dec9:	50                   	push   eax
c000deca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dece:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ded2:	e8 fe a6 01 00       	call   c00285d5 <__gedf2>
c000ded7:	83 c4 10             	add    esp,0x10
c000deda:	85 c0                	test   eax,eax
c000dedc:	0f 89 43 01 00 00    	jns    c000e025 <zoh_vari_process+0x2c7>
c000dee2:	85 ed                	test   ebp,ebp
c000dee4:	0f 8e ec 00 00 00    	jle    c000dfd6 <zoh_vari_process+0x278>
c000deea:	83 ec 10             	sub    esp,0x10
c000deed:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000def0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000def3:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000def6:	ff 37                	push   DWORD PTR [edi]
c000def8:	e8 df 9d 01 00       	call   c0027cdc <__subdf3>
c000defd:	83 c4 18             	add    esp,0x18
c000df00:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df04:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df08:	52                   	push   edx
c000df09:	50                   	push   eax
c000df0a:	e8 61 a8 01 00       	call   c0028770 <fabs>
c000df0f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df13:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df17:	83 c4 10             	add    esp,0x10
c000df1a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df1f:	68 23 42 92 0c       	push   0xc924223
c000df24:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df28:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df2c:	e8 88 a6 01 00       	call   c00285b9 <__gtdf2>
c000df31:	83 c4 10             	add    esp,0x10
c000df34:	85 c0                	test   eax,eax
c000df36:	0f 8e 9a 00 00 00    	jle    c000dfd6 <zoh_vari_process+0x278>
c000df3c:	8b 07                	mov    eax,DWORD PTR [edi]
c000df3e:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df41:	89 04 24             	mov    DWORD PTR [esp],eax
c000df44:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df48:	52                   	push   edx
c000df49:	50                   	push   eax
c000df4a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df4d:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df50:	e8 87 9d 01 00       	call   c0027cdc <__subdf3>
c000df55:	59                   	pop    ecx
c000df56:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df5a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df5e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df61:	e8 05 a4 01 00       	call   c002836b <__floatsidf>
c000df66:	83 c4 10             	add    esp,0x10
c000df69:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df6d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df71:	52                   	push   edx
c000df72:	50                   	push   eax
c000df73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df7b:	e8 88 9d 01 00       	call   c0027d08 <__muldf3>
c000df80:	5d                   	pop    ebp
c000df81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df89:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df8c:	e8 da a3 01 00       	call   c002836b <__floatsidf>
c000df91:	83 c4 10             	add    esp,0x10
c000df94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df9c:	52                   	push   edx
c000df9d:	50                   	push   eax
c000df9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfa6:	e8 41 a0 01 00       	call   c0027fec <__divdf3>
c000dfab:	83 c4 10             	add    esp,0x10
c000dfae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfb2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfb6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfba:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfbe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfc6:	e8 c0 96 01 00       	call   c002768b <__adddf3>
c000dfcb:	83 c4 10             	add    esp,0x10
c000dfce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfd2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfd6:	31 c0                	xor    eax,eax
c000dfd8:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfdb:	7e 13                	jle    c000dff0 <zoh_vari_process+0x292>
c000dfdd:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfe1:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfe4:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfe7:	40                   	inc    eax
c000dfe8:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfeb:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfee:	eb e8                	jmp    c000dfd8 <zoh_vari_process+0x27a>
c000dff0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff8:	68 00 00 f0 3f       	push   0x3ff00000
c000dffd:	6a 00                	push   0x0
c000dfff:	e8 e8 9f 01 00       	call   c0027fec <__divdf3>
c000e004:	83 c4 10             	add    esp,0x10
c000e007:	89 04 24             	mov    DWORD PTR [esp],eax
c000e00a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e00e:	52                   	push   edx
c000e00f:	50                   	push   eax
c000e010:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e014:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e018:	e8 6e 96 01 00       	call   c002768b <__adddf3>
c000e01d:	83 c4 10             	add    esp,0x10
c000e020:	e9 ff fd ff ff       	jmp    c000de24 <zoh_vari_process+0xc6>
c000e025:	55                   	push   ebp
c000e026:	55                   	push   ebp
c000e027:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e02b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e02f:	e8 5c a7 01 00       	call   c0028790 <lrint>
c000e034:	83 ec 0c             	sub    esp,0xc
c000e037:	50                   	push   eax
c000e038:	e8 2e a3 01 00       	call   c002836b <__floatsidf>
c000e03d:	83 c4 10             	add    esp,0x10
c000e040:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e044:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e048:	52                   	push   edx
c000e049:	50                   	push   eax
c000e04a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e052:	e8 85 9c 01 00       	call   c0027cdc <__subdf3>
c000e057:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e05b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e05f:	83 c4 20             	add    esp,0x20
c000e062:	6a 00                	push   0x0
c000e064:	6a 00                	push   0x0
c000e066:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e06a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e06e:	e8 64 a5 01 00       	call   c00285d7 <__ltdf2>
c000e073:	83 c4 10             	add    esp,0x10
c000e076:	85 c0                	test   eax,eax
c000e078:	79 1e                	jns    c000e098 <zoh_vari_process+0x33a>
c000e07a:	68 00 00 f0 3f       	push   0x3ff00000
c000e07f:	6a 00                	push   0x0
c000e081:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e085:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e089:	e8 fd 95 01 00       	call   c002768b <__adddf3>
c000e08e:	83 c4 10             	add    esp,0x10
c000e091:	89 04 24             	mov    DWORD PTR [esp],eax
c000e094:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e098:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e09b:	83 ec 10             	sub    esp,0x10
c000e09e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0ae:	e8 29 9c 01 00       	call   c0027cdc <__subdf3>
c000e0b3:	83 c4 18             	add    esp,0x18
c000e0b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0be:	52                   	push   edx
c000e0bf:	50                   	push   eax
c000e0c0:	e8 cb a6 01 00       	call   c0028790 <lrint>
c000e0c5:	83 c4 10             	add    esp,0x10
c000e0c8:	0f af e8             	imul   ebp,eax
c000e0cb:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0ce:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0d1:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0d5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d8:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0df:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0e2:	0f 8d 7a 02 00 00    	jge    c000e362 <zoh_vari_process+0x604>
c000e0e8:	83 ec 0c             	sub    esp,0xc
c000e0eb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ee:	e8 78 a2 01 00       	call   c002836b <__floatsidf>
c000e0f3:	83 c4 10             	add    esp,0x10
c000e0f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0fa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0fe:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e102:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e106:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e10a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e10e:	e8 f5 9b 01 00       	call   c0027d08 <__muldf3>
c000e113:	59                   	pop    ecx
c000e114:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e118:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e11c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e120:	e8 46 a2 01 00       	call   c002836b <__floatsidf>
c000e125:	83 c4 10             	add    esp,0x10
c000e128:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e12c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e130:	52                   	push   edx
c000e131:	50                   	push   eax
c000e132:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e136:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e13a:	e8 4c 95 01 00       	call   c002768b <__adddf3>
c000e13f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e142:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e146:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e14a:	e8 1c a2 01 00       	call   c002836b <__floatsidf>
c000e14f:	83 c4 10             	add    esp,0x10
c000e152:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e156:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e15a:	52                   	push   edx
c000e15b:	50                   	push   eax
c000e15c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e160:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e164:	e8 70 a4 01 00       	call   c00285d9 <__ledf2>
c000e169:	83 c4 10             	add    esp,0x10
c000e16c:	85 c0                	test   eax,eax
c000e16e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e172:	0f 8f ea 01 00 00    	jg     c000e362 <zoh_vari_process+0x604>
c000e178:	85 c9                	test   ecx,ecx
c000e17a:	0f 8e ed 00 00 00    	jle    c000e26d <zoh_vari_process+0x50f>
c000e180:	83 ec 10             	sub    esp,0x10
c000e183:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e186:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e189:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e18c:	ff 37                	push   DWORD PTR [edi]
c000e18e:	e8 49 9b 01 00       	call   c0027cdc <__subdf3>
c000e193:	83 c4 18             	add    esp,0x18
c000e196:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e19a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e19e:	52                   	push   edx
c000e19f:	50                   	push   eax
c000e1a0:	e8 cb a5 01 00       	call   c0028770 <fabs>
c000e1a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1ad:	83 c4 10             	add    esp,0x10
c000e1b0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1b5:	68 23 42 92 0c       	push   0xc924223
c000e1ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1c2:	e8 f2 a3 01 00       	call   c00285b9 <__gtdf2>
c000e1c7:	83 c4 10             	add    esp,0x10
c000e1ca:	85 c0                	test   eax,eax
c000e1cc:	0f 8e 9b 00 00 00    	jle    c000e26d <zoh_vari_process+0x50f>
c000e1d2:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1d4:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1db:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1df:	52                   	push   edx
c000e1e0:	50                   	push   eax
c000e1e1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1e4:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1e7:	e8 f0 9a 01 00       	call   c0027cdc <__subdf3>
c000e1ec:	5d                   	pop    ebp
c000e1ed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1f1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1f5:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f8:	e8 6e a1 01 00       	call   c002836b <__floatsidf>
c000e1fd:	83 c4 10             	add    esp,0x10
c000e200:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e204:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e208:	52                   	push   edx
c000e209:	50                   	push   eax
c000e20a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e212:	e8 f1 9a 01 00       	call   c0027d08 <__muldf3>
c000e217:	59                   	pop    ecx
c000e218:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e21c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e220:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e223:	e8 43 a1 01 00       	call   c002836b <__floatsidf>
c000e228:	83 c4 10             	add    esp,0x10
c000e22b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e22f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e233:	52                   	push   edx
c000e234:	50                   	push   eax
c000e235:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e239:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e23d:	e8 aa 9d 01 00       	call   c0027fec <__divdf3>
c000e242:	83 c4 10             	add    esp,0x10
c000e245:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e249:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e24d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e259:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e25d:	e8 29 94 01 00       	call   c002768b <__adddf3>
c000e262:	83 c4 10             	add    esp,0x10
c000e265:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e269:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e26d:	31 d2                	xor    edx,edx
c000e26f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e272:	39 d0                	cmp    eax,edx
c000e274:	7e 1d                	jle    c000e293 <zoh_vari_process+0x535>
c000e276:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e279:	29 c1                	sub    ecx,eax
c000e27b:	89 c8                	mov    eax,ecx
c000e27d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e27f:	01 d0                	add    eax,edx
c000e281:	42                   	inc    edx
c000e282:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e285:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e288:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e28b:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e28e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e291:	eb dc                	jmp    c000e26f <zoh_vari_process+0x511>
c000e293:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e297:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e29b:	68 00 00 f0 3f       	push   0x3ff00000
c000e2a0:	6a 00                	push   0x0
c000e2a2:	e8 45 9d 01 00       	call   c0027fec <__divdf3>
c000e2a7:	83 c4 10             	add    esp,0x10
c000e2aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ae:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2c2:	e8 c4 93 01 00       	call   c002768b <__adddf3>
c000e2c7:	5d                   	pop    ebp
c000e2c8:	59                   	pop    ecx
c000e2c9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2cd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d9:	e8 b2 a4 01 00       	call   c0028790 <lrint>
c000e2de:	83 ec 0c             	sub    esp,0xc
c000e2e1:	50                   	push   eax
c000e2e2:	e8 84 a0 01 00       	call   c002836b <__floatsidf>
c000e2e7:	83 c4 10             	add    esp,0x10
c000e2ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2f2:	52                   	push   edx
c000e2f3:	50                   	push   eax
c000e2f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2fc:	e8 db 99 01 00       	call   c0027cdc <__subdf3>
c000e301:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e305:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e309:	83 c4 20             	add    esp,0x20
c000e30c:	6a 00                	push   0x0
c000e30e:	6a 00                	push   0x0
c000e310:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e314:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e318:	e8 ba a2 01 00       	call   c00285d7 <__ltdf2>
c000e31d:	83 c4 10             	add    esp,0x10
c000e320:	85 c0                	test   eax,eax
c000e322:	79 1e                	jns    c000e342 <zoh_vari_process+0x5e4>
c000e324:	68 00 00 f0 3f       	push   0x3ff00000
c000e329:	6a 00                	push   0x0
c000e32b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e333:	e8 53 93 01 00       	call   c002768b <__adddf3>
c000e338:	83 c4 10             	add    esp,0x10
c000e33b:	89 04 24             	mov    DWORD PTR [esp],eax
c000e33e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e342:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e345:	83 ec 10             	sub    esp,0x10
c000e348:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e34c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e350:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e354:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e358:	e8 7f 99 01 00       	call   c0027cdc <__subdf3>
c000e35d:	e9 51 fd ff ff       	jmp    c000e0b3 <zoh_vari_process+0x355>
c000e362:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e366:	7d 3a                	jge    c000e3a2 <zoh_vari_process+0x644>
c000e368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e36c:	83 ec 0c             	sub    esp,0xc
c000e36f:	29 e8                	sub    eax,ebp
c000e371:	99                   	cdq    
c000e372:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e375:	50                   	push   eax
c000e376:	e8 f0 9f 01 00       	call   c002836b <__floatsidf>
c000e37b:	83 c4 10             	add    esp,0x10
c000e37e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e382:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e386:	52                   	push   edx
c000e387:	50                   	push   eax
c000e388:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e38c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e390:	e8 f6 92 01 00       	call   c002768b <__adddf3>
c000e395:	83 c4 10             	add    esp,0x10
c000e398:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e39b:	89 04 24             	mov    DWORD PTR [esp],eax
c000e39e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e3a2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e3a5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a9:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3ac:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3af:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3b2:	85 c0                	test   eax,eax
c000e3b4:	7f 25                	jg     c000e3db <zoh_vari_process+0x67d>
c000e3b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3ba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3be:	89 07                	mov    DWORD PTR [edi],eax
c000e3c0:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3c3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3c6:	99                   	cdq    
c000e3c7:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3ca:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3cd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3d0:	99                   	cdq    
c000e3d1:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3d4:	31 d2                	xor    edx,edx
c000e3d6:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d9:	eb 1e                	jmp    c000e3f9 <zoh_vari_process+0x69b>
c000e3db:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3de:	31 d2                	xor    edx,edx
c000e3e0:	29 c8                	sub    eax,ecx
c000e3e2:	c1 e0 02             	shl    eax,0x2
c000e3e5:	39 d1                	cmp    ecx,edx
c000e3e7:	7e cd                	jle    c000e3b6 <zoh_vari_process+0x658>
c000e3e9:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3eb:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ef:	83 c0 04             	add    eax,0x4
c000e3f2:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3f6:	42                   	inc    edx
c000e3f7:	eb ec                	jmp    c000e3e5 <zoh_vari_process+0x687>
c000e3f9:	83 c4 3c             	add    esp,0x3c
c000e3fc:	89 d0                	mov    eax,edx
c000e3fe:	5b                   	pop    ebx
c000e3ff:	5e                   	pop    esi
c000e400:	5f                   	pop    edi
c000e401:	5d                   	pop    ebp
c000e402:	c3                   	ret    

c000e403 <zoh_reset>:
c000e403:	83 ec 0c             	sub    esp,0xc
c000e406:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e40a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e40d:	85 c0                	test   eax,eax
c000e40f:	74 20                	je     c000e431 <zoh_reset+0x2e>
c000e411:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e414:	83 c0 1c             	add    eax,0x1c
c000e417:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e41a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e421:	c1 e2 02             	shl    edx,0x2
c000e424:	51                   	push   ecx
c000e425:	52                   	push   edx
c000e426:	6a 00                	push   0x0
c000e428:	50                   	push   eax
c000e429:	e8 52 23 ff ff       	call   c0000780 <memset>
c000e42e:	83 c4 10             	add    esp,0x10
c000e431:	83 c4 0c             	add    esp,0xc
c000e434:	c3                   	ret    

c000e435 <zoh_get_name>:
c000e435:	31 c0                	xor    eax,eax
c000e437:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e43c:	75 05                	jne    c000e443 <zoh_get_name+0xe>
c000e43e:	b8 9e a0 02 c0       	mov    eax,0xc002a09e
c000e443:	c3                   	ret    

c000e444 <zoh_get_description>:
c000e444:	31 c0                	xor    eax,eax
c000e446:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e44b:	75 05                	jne    c000e452 <zoh_get_description+0xe>
c000e44d:	b8 af a0 02 c0       	mov    eax,0xc002a0af
c000e452:	c3                   	ret    

c000e453 <zoh_set_converter>:
c000e453:	53                   	push   ebx
c000e454:	b8 0a 00 00 00       	mov    eax,0xa
c000e459:	83 ec 08             	sub    esp,0x8
c000e45c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e460:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e465:	75 6e                	jne    c000e4d5 <zoh_set_converter+0x82>
c000e467:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e46a:	85 c0                	test   eax,eax
c000e46c:	74 13                	je     c000e481 <zoh_set_converter+0x2e>
c000e46e:	83 ec 0c             	sub    esp,0xc
c000e471:	50                   	push   eax
c000e472:	e8 e4 13 00 00       	call   c000f85b <free>
c000e477:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e47e:	83 c4 10             	add    esp,0x10
c000e481:	50                   	push   eax
c000e482:	50                   	push   eax
c000e483:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e486:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e48d:	50                   	push   eax
c000e48e:	6a 01                	push   0x1
c000e490:	e8 e6 13 00 00       	call   c000f87b <calloc>
c000e495:	83 c4 10             	add    esp,0x10
c000e498:	89 c2                	mov    edx,eax
c000e49a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e49d:	85 d2                	test   edx,edx
c000e49f:	b8 01 00 00 00       	mov    eax,0x1
c000e4a4:	74 2f                	je     c000e4d5 <zoh_set_converter+0x82>
c000e4a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a9:	83 ec 0c             	sub    esp,0xc
c000e4ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4af:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4b5:	c7 43 24 5e dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd5e
c000e4bc:	c7 43 20 5e dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd5e
c000e4c3:	c7 43 28 03 e4 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e403
c000e4ca:	53                   	push   ebx
c000e4cb:	e8 33 ff ff ff       	call   c000e403 <zoh_reset>
c000e4d0:	83 c4 10             	add    esp,0x10
c000e4d3:	31 c0                	xor    eax,eax
c000e4d5:	83 c4 08             	add    esp,0x8
c000e4d8:	5b                   	pop    ebx
c000e4d9:	c3                   	ret    

c000e4da <CPU::current()>:
c000e4da:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c000e4df:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4e5:	90                   	nop
c000e4e6:	c3                   	ret    

c000e4e7 <operator new(unsigned long)>:
c000e4e7:	83 ec 0c             	sub    esp,0xc
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4f1:	e8 55 13 00 00       	call   c000f84b <malloc>
c000e4f6:	83 c4 10             	add    esp,0x10
c000e4f9:	83 c4 0c             	add    esp,0xc
c000e4fc:	c3                   	ret    

c000e4fd <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4fd:	83 ec 0c             	sub    esp,0xc
c000e500:	83 ec 08             	sub    esp,0x8
c000e503:	68 e6 a0 02 c0       	push   0xc002a0e6
c000e508:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e50c:	e8 b7 23 ff ff       	call   c00008c8 <strcmp>
c000e511:	83 c4 10             	add    esp,0x10
c000e514:	85 c0                	test   eax,eax
c000e516:	0f 94 c0             	sete   al
c000e519:	84 c0                	test   al,al
c000e51b:	74 0a                	je     c000e527 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e51d:	b8 c8 e5 02 c0       	mov    eax,0xc002e5c8
c000e522:	e9 e3 00 00 00       	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e527:	83 ec 08             	sub    esp,0x8
c000e52a:	68 ef a0 02 c0       	push   0xc002a0ef
c000e52f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e533:	e8 90 23 ff ff       	call   c00008c8 <strcmp>
c000e538:	83 c4 10             	add    esp,0x10
c000e53b:	85 c0                	test   eax,eax
c000e53d:	0f 94 c0             	sete   al
c000e540:	84 c0                	test   al,al
c000e542:	74 0a                	je     c000e54e <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e544:	b8 04 6b 02 c0       	mov    eax,0xc0026b04
c000e549:	e9 bc 00 00 00       	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e54e:	83 ec 08             	sub    esp,0x8
c000e551:	68 f9 a0 02 c0       	push   0xc002a0f9
c000e556:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e55a:	e8 69 23 ff ff       	call   c00008c8 <strcmp>
c000e55f:	83 c4 10             	add    esp,0x10
c000e562:	85 c0                	test   eax,eax
c000e564:	0f 94 c0             	sete   al
c000e567:	84 c0                	test   al,al
c000e569:	74 0a                	je     c000e575 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e56b:	b8 38 68 02 c0       	mov    eax,0xc0026838
c000e570:	e9 95 00 00 00       	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e575:	83 ec 08             	sub    esp,0x8
c000e578:	68 02 a1 02 c0       	push   0xc002a102
c000e57d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e581:	e8 42 23 ff ff       	call   c00008c8 <strcmp>
c000e586:	83 c4 10             	add    esp,0x10
c000e589:	85 c0                	test   eax,eax
c000e58b:	0f 94 c0             	sete   al
c000e58e:	84 c0                	test   al,al
c000e590:	74 07                	je     c000e599 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e592:	b8 04 6c 02 c0       	mov    eax,0xc0026c04
c000e597:	eb 71                	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e599:	83 ec 08             	sub    esp,0x8
c000e59c:	68 0c a1 02 c0       	push   0xc002a10c
c000e5a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5a5:	e8 1e 23 ff ff       	call   c00008c8 <strcmp>
c000e5aa:	83 c4 10             	add    esp,0x10
c000e5ad:	85 c0                	test   eax,eax
c000e5af:	0f 94 c0             	sete   al
c000e5b2:	84 c0                	test   al,al
c000e5b4:	74 07                	je     c000e5bd <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5b6:	b8 84 69 02 c0       	mov    eax,0xc0026984
c000e5bb:	eb 4d                	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5bd:	83 ec 08             	sub    esp,0x8
c000e5c0:	68 15 a1 02 c0       	push   0xc002a115
c000e5c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c9:	e8 fa 22 ff ff       	call   c00008c8 <strcmp>
c000e5ce:	83 c4 10             	add    esp,0x10
c000e5d1:	85 c0                	test   eax,eax
c000e5d3:	0f 94 c0             	sete   al
c000e5d6:	84 c0                	test   al,al
c000e5d8:	74 07                	je     c000e5e1 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5da:	b8 cc e5 02 c0       	mov    eax,0xc002e5cc
c000e5df:	eb 29                	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5e1:	83 ec 08             	sub    esp,0x8
c000e5e4:	68 22 a1 02 c0       	push   0xc002a122
c000e5e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5ed:	e8 d6 22 ff ff       	call   c00008c8 <strcmp>
c000e5f2:	83 c4 10             	add    esp,0x10
c000e5f5:	85 c0                	test   eax,eax
c000e5f7:	0f 94 c0             	sete   al
c000e5fa:	84 c0                	test   al,al
c000e5fc:	74 07                	je     c000e605 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5fe:	b8 cd e5 02 c0       	mov    eax,0xc002e5cd
c000e603:	eb 05                	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e605:	b8 00 00 00 00       	mov    eax,0x0
c000e60a:	83 c4 0c             	add    esp,0xc
c000e60d:	c3                   	ret    

c000e60e <Computer::close(int, int, void*)>:
c000e60e:	57                   	push   edi
c000e60f:	56                   	push   esi
c000e610:	53                   	push   ebx
c000e611:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e615:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e619:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e61d:	83 ec 0c             	sub    esp,0xc
c000e620:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e626:	e8 7f 5e 00 00       	call   c00144aa <Device::closeAll()>
c000e62b:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e631:	83 c4 10             	add    esp,0x10
c000e634:	8b 10                	mov    edx,DWORD PTR [eax]
c000e636:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e63a:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e642:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e646:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e64a:	5b                   	pop    ebx
c000e64b:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e64e:	5e                   	pop    esi
c000e64f:	5f                   	pop    edi
c000e650:	ff e0                	jmp    eax

c000e652 <Krnl::firstTask()>:
c000e652:	53                   	push   ebx
c000e653:	83 ec 14             	sub    esp,0x14
c000e656:	fb                   	sti    
c000e657:	68 3f 07 00 00       	push   0x73f
c000e65c:	e8 ea 11 00 00       	call   c000f84b <malloc>
c000e661:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e668:	89 c3                	mov    ebx,eax
c000e66a:	ff 35 34 1b 03 c0    	push   DWORD PTR ds:0xc0031b34
c000e670:	68 2f a1 02 c0       	push   0xc002a12f
c000e675:	6a 01                	push   0x1
c000e677:	50                   	push   eax
c000e678:	e8 d7 f5 00 00       	call   c001dc54 <Process::Process(bool, char const*, Process*, char**)>
c000e67d:	83 c4 20             	add    esp,0x20
c000e680:	68 ff 00 00 00       	push   0xff
c000e685:	6a 00                	push   0x0
c000e687:	68 dd f1 00 c0       	push   0xc000f1dd
c000e68c:	53                   	push   ebx
c000e68d:	e8 c0 f8 00 00       	call   c001df52 <Process::createThread(void (*)(void*), void*, int)>
c000e692:	6a 7a                	push   0x7a
c000e694:	6a 00                	push   0x0
c000e696:	68 ea e7 01 c0       	push   0xc001e7ea
c000e69b:	ff 35 34 1b 03 c0    	push   DWORD PTR ds:0xc0031b34
c000e6a1:	e8 ac f8 00 00       	call   c001df52 <Process::createThread(void (*)(void*), void*, int)>
c000e6a6:	83 c4 20             	add    esp,0x20
c000e6a9:	a3 e8 1a 03 c0       	mov    ds:0xc0031ae8,eax
c000e6ae:	c6 05 cd e5 02 c0 01 	mov    BYTE PTR ds:0xc002e5cd,0x1
c000e6b5:	e8 b1 04 01 00       	call   c001eb6b <Vm::initialise8086()>
c000e6ba:	e8 d3 4b 00 00       	call   c0013292 <Fs::initVFS()>
c000e6bf:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c000e6c4:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6ca:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6cc:	6a 00                	push   0x0
c000e6ce:	6a 00                	push   0x0
c000e6d0:	6a 00                	push   0x0
c000e6d2:	50                   	push   eax
c000e6d3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6d6:	e8 09 df 00 00       	call   c001c5e4 <Sys::loadSyscalls()>
c000e6db:	e8 2c be 00 00       	call   c001a50c <Krnl::loadSystemEnv()>
c000e6e0:	83 c4 0c             	add    esp,0xc
c000e6e3:	6a 3a                	push   0x3a
c000e6e5:	68 3c a1 02 c0       	push   0xc002a13c
c000e6ea:	68 45 a1 02 c0       	push   0xc002a145
c000e6ef:	e8 3e cb 00 00       	call   c001b232 <Reg::readIntWithDefault(char*, char*, int)>
c000e6f4:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6f7:	e8 7e 56 00 00       	call   c0013d7a <User::loadClockSettings(int)>
c000e6fc:	58                   	pop    eax
c000e6fd:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c000e702:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e708:	e8 71 5d 00 00       	call   c001447e <Device::loadDriversForAll()>
c000e70d:	e8 40 b9 00 00       	call   c001a052 <Krnl::startCPUs()>
c000e712:	5a                   	pop    edx
c000e713:	8b 1d c8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5c8
c000e719:	59                   	pop    ecx
c000e71a:	6a 01                	push   0x1
c000e71c:	68 4d a1 02 c0       	push   0xc002a14d
c000e721:	e8 52 f0 00 00       	call   c001d778 <Thr::loadDLL(char const*, bool)>
c000e726:	5a                   	pop    edx
c000e727:	59                   	pop    ecx
c000e728:	53                   	push   ebx
c000e729:	50                   	push   eax
c000e72a:	e8 7d f2 00 00       	call   c001d9ac <Thr::executeDLL(unsigned long, void*)>
c000e72f:	83 c4 10             	add    esp,0x10
c000e732:	83 ec 0c             	sub    esp,0xc
c000e735:	6a 02                	push   0x2
c000e737:	e8 b4 fb 00 00       	call   c001e2f0 <blockTask(TaskState)>
c000e73c:	83 c4 10             	add    esp,0x10
c000e73f:	eb f1                	jmp    c000e732 <Krnl::firstTask()+0xe0>
c000e741:	90                   	nop

c000e742 <Computer::Computer()>:
c000e742:	83 ec 0c             	sub    esp,0xc
c000e745:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e749:	83 ec 08             	sub    esp,0x8
c000e74c:	68 69 a1 02 c0       	push   0xc002a169
c000e751:	50                   	push   eax
c000e752:	e8 cd 5d 00 00       	call   c0014524 <Device::Device(char const*)>
c000e757:	83 c4 10             	add    esp,0x10
c000e75a:	ba 08 a3 02 c0       	mov    edx,0xc002a308
c000e75f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e763:	89 10                	mov    DWORD PTR [eax],edx
c000e765:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e769:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e773:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e777:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e781:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e785:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e78b:	83 ca 04             	or     edx,0x4
c000e78e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e798:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e79e:	0f b6 d0             	movzx  edx,al
c000e7a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a5:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7b6:	0f b6 d0             	movzx  edx,al
c000e7b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7bd:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7cc:	8d 50 01             	lea    edx,[eax+0x1]
c000e7cf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7d3:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d9:	0f b6 d0             	movzx  edx,al
c000e7dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7e4:	83 e1 3f             	and    ecx,0x3f
c000e7e7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ef:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7f5:	0f b6 d0             	movzx  edx,al
c000e7f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7fc:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e803:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e807:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e80d:	0f b6 d0             	movzx  edx,al
c000e810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e814:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e819:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e81d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e823:	8d 50 01             	lea    edx,[eax+0x1]
c000e826:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e82a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e830:	0f b6 d0             	movzx  edx,al
c000e833:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e837:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e83b:	83 e1 3f             	and    ecx,0x3f
c000e83e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e846:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84c:	0f b6 d0             	movzx  edx,al
c000e84f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e853:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e85a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e864:	0f b6 d0             	movzx  edx,al
c000e867:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86b:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e874:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e87a:	8d 50 01             	lea    edx,[eax+0x1]
c000e87d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e881:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e887:	0f b6 d0             	movzx  edx,al
c000e88a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e88e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e892:	83 e1 3f             	and    ecx,0x3f
c000e895:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e899:	90                   	nop
c000e89a:	83 c4 0c             	add    esp,0xc
c000e89d:	c3                   	ret    

c000e89e <Computer::setBootMessage(char const*)>:
c000e89e:	c3                   	ret    
c000e89f:	90                   	nop

c000e8a0 <Computer::detectFeatures()>:
c000e8a0:	55                   	push   ebp
c000e8a1:	57                   	push   edi
c000e8a2:	56                   	push   esi
c000e8a3:	53                   	push   ebx
c000e8a4:	83 ec 1c             	sub    esp,0x1c
c000e8a7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8ab:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8b5:	e8 2a 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8ba:	85 c0                	test   eax,eax
c000e8bc:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8c2:	0f 95 c2             	setne  dl
c000e8c5:	83 e0 fd             	and    eax,0xfffffffd
c000e8c8:	d1 e2                	shl    edx,1
c000e8ca:	09 d0                	or     eax,edx
c000e8cc:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8d2:	a8 02                	test   al,0x2
c000e8d4:	75 46                	jne    c000e91c <Computer::detectFeatures()+0x7c>
c000e8d6:	f6 05 e1 e5 02 c0 04 	test   BYTE PTR ds:0xc002e5e1,0x4
c000e8dd:	74 07                	je     c000e8e6 <Computer::detectFeatures()+0x46>
c000e8df:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8e6:	e8 db 7e 01 00       	call   c00267c6 <x87Detect>
c000e8eb:	83 e0 01             	and    eax,0x1
c000e8ee:	c1 e0 04             	shl    eax,0x4
c000e8f1:	88 c2                	mov    dl,al
c000e8f3:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f9:	83 e0 ef             	and    eax,0xffffffef
c000e8fc:	09 d0                	or     eax,edx
c000e8fe:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e904:	a8 10                	test   al,0x10
c000e906:	0f 85 2a 01 00 00    	jne    c000ea36 <Computer::detectFeatures()+0x196>
c000e90c:	84 c0                	test   al,al
c000e90e:	0f 88 45 01 00 00    	js     c000ea59 <Computer::detectFeatures()+0x1b9>
c000e914:	83 c4 1c             	add    esp,0x1c
c000e917:	5b                   	pop    ebx
c000e918:	5e                   	pop    esi
c000e919:	5f                   	pop    edi
c000e91a:	5d                   	pop    ebp
c000e91b:	c3                   	ret    
c000e91c:	83 ec 0c             	sub    esp,0xc
c000e91f:	6a 20                	push   0x20
c000e921:	e8 3e a4 00 00       	call   c0018d64 <CPU::cpuidCheckEDX(unsigned int)>
c000e926:	83 e0 01             	and    eax,0x1
c000e929:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e930:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e936:	83 e0 f7             	and    eax,0xfffffff7
c000e939:	09 d0                	or     eax,edx
c000e93b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e941:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e948:	e8 17 a4 00 00       	call   c0018d64 <CPU::cpuidCheckEDX(unsigned int)>
c000e94d:	83 e0 01             	and    eax,0x1
c000e950:	88 c2                	mov    dl,al
c000e952:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e958:	83 e0 fe             	and    eax,0xfffffffe
c000e95b:	09 d0                	or     eax,edx
c000e95d:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e963:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e96a:	e8 f5 a3 00 00       	call   c0018d64 <CPU::cpuidCheckEDX(unsigned int)>
c000e96f:	c1 e0 07             	shl    eax,0x7
c000e972:	88 c2                	mov    dl,al
c000e974:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e97a:	83 e0 7f             	and    eax,0x7f
c000e97d:	09 d0                	or     eax,edx
c000e97f:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e985:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e98c:	e8 d3 a3 00 00       	call   c0018d64 <CPU::cpuidCheckEDX(unsigned int)>
c000e991:	83 c4 10             	add    esp,0x10
c000e994:	83 e0 01             	and    eax,0x1
c000e997:	c1 e0 05             	shl    eax,0x5
c000e99a:	88 c2                	mov    dl,al
c000e99c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9a2:	83 e0 df             	and    eax,0xffffffdf
c000e9a5:	09 d0                	or     eax,edx
c000e9a7:	f7 05 e0 e5 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e5e0,0x401
c000e9b1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9b7:	0f 84 c2 00 00 00    	je     c000ea7f <Computer::detectFeatures()+0x1df>
c000e9bd:	83 e0 fe             	and    eax,0xfffffffe
c000e9c0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9c6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9cc:	88 c2                	mov    dl,al
c000e9ce:	83 e2 09             	and    edx,0x9
c000e9d1:	fe ca                	dec    dl
c000e9d3:	75 09                	jne    c000e9de <Computer::detectFeatures()+0x13e>
c000e9d5:	83 e0 fe             	and    eax,0xfffffffe
c000e9d8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9de:	83 ec 0c             	sub    esp,0xc
c000e9e1:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9e5:	50                   	push   eax
c000e9e6:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9ea:	55                   	push   ebp
c000e9eb:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9ef:	57                   	push   edi
c000e9f0:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9f4:	56                   	push   esi
c000e9f5:	68 00 00 00 80       	push   0x80000000
c000e9fa:	e8 e1 a2 00 00       	call   c0018ce0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9ff:	83 c4 20             	add    esp,0x20
c000ea02:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea09:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea0d:	0f 86 c3 fe ff ff    	jbe    c000e8d6 <Computer::detectFeatures()+0x36>
c000ea13:	83 ec 0c             	sub    esp,0xc
c000ea16:	50                   	push   eax
c000ea17:	55                   	push   ebp
c000ea18:	57                   	push   edi
c000ea19:	56                   	push   esi
c000ea1a:	68 01 00 00 80       	push   0x80000001
c000ea1f:	e8 bc a2 00 00       	call   c0018ce0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea24:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea2e:	83 c4 20             	add    esp,0x20
c000ea31:	e9 a0 fe ff ff       	jmp    c000e8d6 <Computer::detectFeatures()+0x36>
c000ea36:	e8 45 7d 01 00       	call   c0026780 <absolutelyNoChanceInHell>
c000ea3b:	88 c2                	mov    dl,al
c000ea3d:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea43:	c1 e2 07             	shl    edx,0x7
c000ea46:	83 e0 7f             	and    eax,0x7f
c000ea49:	09 d0                	or     eax,edx
c000ea4b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea51:	84 c0                	test   al,al
c000ea53:	0f 89 bb fe ff ff    	jns    c000e914 <Computer::detectFeatures()+0x74>
c000ea59:	e8 02 7d 01 00       	call   c0026760 <avxDetect>
c000ea5e:	83 e0 01             	and    eax,0x1
c000ea61:	c1 e0 05             	shl    eax,0x5
c000ea64:	88 c2                	mov    dl,al
c000ea66:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea6c:	83 e0 df             	and    eax,0xffffffdf
c000ea6f:	09 d0                	or     eax,edx
c000ea71:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea77:	83 c4 1c             	add    esp,0x1c
c000ea7a:	5b                   	pop    ebx
c000ea7b:	5e                   	pop    esi
c000ea7c:	5f                   	pop    edi
c000ea7d:	5d                   	pop    ebp
c000ea7e:	c3                   	ret    
c000ea7f:	83 ec 0c             	sub    esp,0xc
c000ea82:	68 00 02 00 00       	push   0x200
c000ea87:	e8 d8 a2 00 00       	call   c0018d64 <CPU::cpuidCheckEDX(unsigned int)>
c000ea8c:	83 c4 10             	add    esp,0x10
c000ea8f:	83 e0 01             	and    eax,0x1
c000ea92:	88 c2                	mov    dl,al
c000ea94:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea9a:	83 e0 fe             	and    eax,0xfffffffe
c000ea9d:	09 d0                	or     eax,edx
c000ea9f:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eaa5:	e9 1c ff ff ff       	jmp    c000e9c6 <Computer::detectFeatures()+0x126>

c000eaaa <Computer::displayFeatures()>:
c000eaaa:	53                   	push   ebx
c000eaab:	83 ec 14             	sub    esp,0x14
c000eaae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eab2:	68 79 a1 02 c0       	push   0xc002a179
c000eab7:	e8 4b 44 00 00       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c000eabc:	83 c4 10             	add    esp,0x10
c000eabf:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eac6:	0f 85 73 02 00 00    	jne    c000ed3f <Computer::displayFeatures()+0x295>
c000eacc:	b8 76 a1 02 c0       	mov    eax,0xc002a176
c000ead1:	83 ec 08             	sub    esp,0x8
c000ead4:	50                   	push   eax
c000ead5:	68 8c a1 02 c0       	push   0xc002a18c
c000eada:	e8 28 44 00 00       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c000eadf:	83 c4 10             	add    esp,0x10
c000eae2:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae9:	0f 85 8c 02 00 00    	jne    c000ed7b <Computer::displayFeatures()+0x2d1>
c000eaef:	b8 76 a1 02 c0       	mov    eax,0xc002a176
c000eaf4:	83 ec 08             	sub    esp,0x8
c000eaf7:	50                   	push   eax
c000eaf8:	68 9d a1 02 c0       	push   0xc002a19d
c000eafd:	e8 05 44 00 00       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c000eb02:	83 c4 10             	add    esp,0x10
c000eb05:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb0c:	0f 85 5f 02 00 00    	jne    c000ed71 <Computer::displayFeatures()+0x2c7>
c000eb12:	b8 76 a1 02 c0       	mov    eax,0xc002a176
c000eb17:	83 ec 08             	sub    esp,0x8
c000eb1a:	50                   	push   eax
c000eb1b:	68 ae a1 02 c0       	push   0xc002a1ae
c000eb20:	e8 e2 43 00 00       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c000eb25:	83 c4 10             	add    esp,0x10
c000eb28:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb2f:	0f 85 32 02 00 00    	jne    c000ed67 <Computer::displayFeatures()+0x2bd>
c000eb35:	b8 76 a1 02 c0       	mov    eax,0xc002a176
c000eb3a:	83 ec 08             	sub    esp,0x8
c000eb3d:	50                   	push   eax
c000eb3e:	68 bf a1 02 c0       	push   0xc002a1bf
c000eb43:	e8 bf 43 00 00       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c000eb48:	83 c4 10             	add    esp,0x10
c000eb4b:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb52:	0f 85 05 02 00 00    	jne    c000ed5d <Computer::displayFeatures()+0x2b3>
c000eb58:	b8 76 a1 02 c0       	mov    eax,0xc002a176
c000eb5d:	83 ec 08             	sub    esp,0x8
c000eb60:	50                   	push   eax
c000eb61:	68 d0 a1 02 c0       	push   0xc002a1d0
c000eb66:	e8 9c 43 00 00       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c000eb6b:	83 c4 10             	add    esp,0x10
c000eb6e:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb75:	0f 85 d8 01 00 00    	jne    c000ed53 <Computer::displayFeatures()+0x2a9>
c000eb7b:	b8 76 a1 02 c0       	mov    eax,0xc002a176
c000eb80:	83 ec 08             	sub    esp,0x8
c000eb83:	50                   	push   eax
c000eb84:	68 e1 a1 02 c0       	push   0xc002a1e1
c000eb89:	e8 79 43 00 00       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c000eb8e:	83 c4 10             	add    esp,0x10
c000eb91:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb98:	0f 85 ab 01 00 00    	jne    c000ed49 <Computer::displayFeatures()+0x29f>
c000eb9e:	b8 76 a1 02 c0       	mov    eax,0xc002a176
c000eba3:	83 ec 08             	sub    esp,0x8
c000eba6:	50                   	push   eax
c000eba7:	68 f2 a1 02 c0       	push   0xc002a1f2
c000ebac:	e8 56 43 00 00       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c000ebb1:	83 c4 10             	add    esp,0x10
c000ebb4:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebbb:	0f 88 1b 02 00 00    	js     c000eddc <Computer::displayFeatures()+0x332>
c000ebc1:	b8 76 a1 02 c0       	mov    eax,0xc002a176
c000ebc6:	83 ec 08             	sub    esp,0x8
c000ebc9:	50                   	push   eax
c000ebca:	68 03 a2 02 c0       	push   0xc002a203
c000ebcf:	e8 33 43 00 00       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c000ebd4:	83 c4 10             	add    esp,0x10
c000ebd7:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebde:	0f 85 a1 01 00 00    	jne    c000ed85 <Computer::displayFeatures()+0x2db>
c000ebe4:	b8 76 a1 02 c0       	mov    eax,0xc002a176
c000ebe9:	83 ec 08             	sub    esp,0x8
c000ebec:	50                   	push   eax
c000ebed:	68 14 a2 02 c0       	push   0xc002a214
c000ebf2:	e8 10 43 00 00       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c000ebf7:	83 c4 10             	add    esp,0x10
c000ebfa:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ec01:	0f 85 cb 01 00 00    	jne    c000edd2 <Computer::displayFeatures()+0x328>
c000ec07:	b8 76 a1 02 c0       	mov    eax,0xc002a176
c000ec0c:	83 ec 08             	sub    esp,0x8
c000ec0f:	50                   	push   eax
c000ec10:	68 25 a2 02 c0       	push   0xc002a225
c000ec15:	e8 ed 42 00 00       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c000ec1a:	83 c4 10             	add    esp,0x10
c000ec1d:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec24:	0f 85 9e 01 00 00    	jne    c000edc8 <Computer::displayFeatures()+0x31e>
c000ec2a:	b8 76 a1 02 c0       	mov    eax,0xc002a176
c000ec2f:	83 ec 08             	sub    esp,0x8
c000ec32:	50                   	push   eax
c000ec33:	68 36 a2 02 c0       	push   0xc002a236
c000ec38:	e8 ca 42 00 00       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c000ec3d:	83 c4 10             	add    esp,0x10
c000ec40:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec47:	0f 85 71 01 00 00    	jne    c000edbe <Computer::displayFeatures()+0x314>
c000ec4d:	b8 76 a1 02 c0       	mov    eax,0xc002a176
c000ec52:	83 ec 08             	sub    esp,0x8
c000ec55:	50                   	push   eax
c000ec56:	68 47 a2 02 c0       	push   0xc002a247
c000ec5b:	e8 a7 42 00 00       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c000ec60:	83 c4 10             	add    esp,0x10
c000ec63:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec6a:	0f 85 44 01 00 00    	jne    c000edb4 <Computer::displayFeatures()+0x30a>
c000ec70:	b8 76 a1 02 c0       	mov    eax,0xc002a176
c000ec75:	83 ec 08             	sub    esp,0x8
c000ec78:	50                   	push   eax
c000ec79:	68 58 a2 02 c0       	push   0xc002a258
c000ec7e:	e8 84 42 00 00       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c000ec83:	83 c4 10             	add    esp,0x10
c000ec86:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec8d:	0f 85 17 01 00 00    	jne    c000edaa <Computer::displayFeatures()+0x300>
c000ec93:	b8 76 a1 02 c0       	mov    eax,0xc002a176
c000ec98:	83 ec 08             	sub    esp,0x8
c000ec9b:	50                   	push   eax
c000ec9c:	68 69 a2 02 c0       	push   0xc002a269
c000eca1:	e8 61 42 00 00       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c000eca6:	83 c4 10             	add    esp,0x10
c000eca9:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ecb0:	0f 85 ea 00 00 00    	jne    c000eda0 <Computer::displayFeatures()+0x2f6>
c000ecb6:	b8 76 a1 02 c0       	mov    eax,0xc002a176
c000ecbb:	83 ec 08             	sub    esp,0x8
c000ecbe:	50                   	push   eax
c000ecbf:	68 7a a2 02 c0       	push   0xc002a27a
c000ecc4:	e8 3e 42 00 00       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c000ecc9:	83 c4 10             	add    esp,0x10
c000eccc:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000ecd3:	0f 88 0d 01 00 00    	js     c000ede6 <Computer::displayFeatures()+0x33c>
c000ecd9:	b8 76 a1 02 c0       	mov    eax,0xc002a176
c000ecde:	83 ec 08             	sub    esp,0x8
c000ece1:	50                   	push   eax
c000ece2:	68 8b a2 02 c0       	push   0xc002a28b
c000ece7:	e8 1b 42 00 00       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c000ecec:	83 c4 10             	add    esp,0x10
c000ecef:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecf6:	0f 85 9a 00 00 00    	jne    c000ed96 <Computer::displayFeatures()+0x2ec>
c000ecfc:	b8 76 a1 02 c0       	mov    eax,0xc002a176
c000ed01:	83 ec 08             	sub    esp,0x8
c000ed04:	50                   	push   eax
c000ed05:	68 9c a2 02 c0       	push   0xc002a29c
c000ed0a:	e8 f8 41 00 00       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c000ed0f:	83 c4 10             	add    esp,0x10
c000ed12:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed19:	75 74                	jne    c000ed8f <Computer::displayFeatures()+0x2e5>
c000ed1b:	b8 76 a1 02 c0       	mov    eax,0xc002a176
c000ed20:	83 ec 08             	sub    esp,0x8
c000ed23:	50                   	push   eax
c000ed24:	68 ad a2 02 c0       	push   0xc002a2ad
c000ed29:	e8 d9 41 00 00       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c000ed2e:	c7 44 24 20 60 bc 02 c0 	mov    DWORD PTR [esp+0x20],0xc002bc60
c000ed36:	83 c4 18             	add    esp,0x18
c000ed39:	5b                   	pop    ebx
c000ed3a:	e9 c8 41 00 00       	jmp    c0012f07 <Dbg::kprintf(char const*, ...)>
c000ed3f:	b8 72 a1 02 c0       	mov    eax,0xc002a172
c000ed44:	e9 88 fd ff ff       	jmp    c000ead1 <Computer::displayFeatures()+0x27>
c000ed49:	b8 72 a1 02 c0       	mov    eax,0xc002a172
c000ed4e:	e9 50 fe ff ff       	jmp    c000eba3 <Computer::displayFeatures()+0xf9>
c000ed53:	b8 72 a1 02 c0       	mov    eax,0xc002a172
c000ed58:	e9 23 fe ff ff       	jmp    c000eb80 <Computer::displayFeatures()+0xd6>
c000ed5d:	b8 72 a1 02 c0       	mov    eax,0xc002a172
c000ed62:	e9 f6 fd ff ff       	jmp    c000eb5d <Computer::displayFeatures()+0xb3>
c000ed67:	b8 72 a1 02 c0       	mov    eax,0xc002a172
c000ed6c:	e9 c9 fd ff ff       	jmp    c000eb3a <Computer::displayFeatures()+0x90>
c000ed71:	b8 72 a1 02 c0       	mov    eax,0xc002a172
c000ed76:	e9 9c fd ff ff       	jmp    c000eb17 <Computer::displayFeatures()+0x6d>
c000ed7b:	b8 72 a1 02 c0       	mov    eax,0xc002a172
c000ed80:	e9 6f fd ff ff       	jmp    c000eaf4 <Computer::displayFeatures()+0x4a>
c000ed85:	b8 72 a1 02 c0       	mov    eax,0xc002a172
c000ed8a:	e9 5a fe ff ff       	jmp    c000ebe9 <Computer::displayFeatures()+0x13f>
c000ed8f:	b8 72 a1 02 c0       	mov    eax,0xc002a172
c000ed94:	eb 8a                	jmp    c000ed20 <Computer::displayFeatures()+0x276>
c000ed96:	b8 72 a1 02 c0       	mov    eax,0xc002a172
c000ed9b:	e9 61 ff ff ff       	jmp    c000ed01 <Computer::displayFeatures()+0x257>
c000eda0:	b8 72 a1 02 c0       	mov    eax,0xc002a172
c000eda5:	e9 11 ff ff ff       	jmp    c000ecbb <Computer::displayFeatures()+0x211>
c000edaa:	b8 72 a1 02 c0       	mov    eax,0xc002a172
c000edaf:	e9 e4 fe ff ff       	jmp    c000ec98 <Computer::displayFeatures()+0x1ee>
c000edb4:	b8 72 a1 02 c0       	mov    eax,0xc002a172
c000edb9:	e9 b7 fe ff ff       	jmp    c000ec75 <Computer::displayFeatures()+0x1cb>
c000edbe:	b8 72 a1 02 c0       	mov    eax,0xc002a172
c000edc3:	e9 8a fe ff ff       	jmp    c000ec52 <Computer::displayFeatures()+0x1a8>
c000edc8:	b8 72 a1 02 c0       	mov    eax,0xc002a172
c000edcd:	e9 5d fe ff ff       	jmp    c000ec2f <Computer::displayFeatures()+0x185>
c000edd2:	b8 72 a1 02 c0       	mov    eax,0xc002a172
c000edd7:	e9 30 fe ff ff       	jmp    c000ec0c <Computer::displayFeatures()+0x162>
c000eddc:	b8 72 a1 02 c0       	mov    eax,0xc002a172
c000ede1:	e9 e0 fd ff ff       	jmp    c000ebc6 <Computer::displayFeatures()+0x11c>
c000ede6:	b8 72 a1 02 c0       	mov    eax,0xc002a172
c000edeb:	e9 ee fe ff ff       	jmp    c000ecde <Computer::displayFeatures()+0x234>

c000edf0 <Computer::rdmsr(unsigned int)>:
c000edf0:	83 ec 0c             	sub    esp,0xc
c000edf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edf7:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edfe:	74 0a                	je     c000ee0a <Computer::rdmsr(unsigned int)+0x1a>
c000ee00:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee04:	0f 32                	rdmsr  
c000ee06:	83 c4 0c             	add    esp,0xc
c000ee09:	c3                   	ret    
c000ee0a:	83 ec 0c             	sub    esp,0xc
c000ee0d:	68 be a2 02 c0       	push   0xc002a2be
c000ee12:	e8 2e b8 00 00       	call   c001a645 <Krnl::panic(char const*)>
c000ee17:	83 c4 10             	add    esp,0x10
c000ee1a:	eb e4                	jmp    c000ee00 <Computer::rdmsr(unsigned int)+0x10>

c000ee1c <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee1c:	57                   	push   edi
c000ee1d:	56                   	push   esi
c000ee1e:	52                   	push   edx
c000ee1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee23:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee27:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee2b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee32:	74 0e                	je     c000ee42 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee34:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee38:	89 f0                	mov    eax,esi
c000ee3a:	89 fa                	mov    edx,edi
c000ee3c:	0f 30                	wrmsr  
c000ee3e:	58                   	pop    eax
c000ee3f:	5e                   	pop    esi
c000ee40:	5f                   	pop    edi
c000ee41:	c3                   	ret    
c000ee42:	83 ec 0c             	sub    esp,0xc
c000ee45:	68 c4 a2 02 c0       	push   0xc002a2c4
c000ee4a:	e8 f6 b7 00 00       	call   c001a645 <Krnl::panic(char const*)>
c000ee4f:	83 c4 10             	add    esp,0x10
c000ee52:	eb e0                	jmp    c000ee34 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee54 <Computer::nmiEnabled()>:
c000ee54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee58:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee5e:	c3                   	ret    
c000ee5f:	90                   	nop

c000ee60 <Computer::readCMOS(unsigned char)>:
c000ee60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee64:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee6b:	19 c0                	sbb    eax,eax
c000ee6d:	83 e0 80             	and    eax,0xffffff80
c000ee70:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee74:	e6 70                	out    0x70,al
c000ee76:	e4 71                	in     al,0x71
c000ee78:	c3                   	ret    
c000ee79:	90                   	nop

c000ee7a <Computer::enableNMI(bool)>:
c000ee7a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee82:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee88:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee90:	eb ce                	jmp    c000ee60 <Computer::readCMOS(unsigned char)>

c000ee92 <Computer::open(int, int, void*)>:
c000ee92:	56                   	push   esi
c000ee93:	53                   	push   ebx
c000ee94:	83 ec 10             	sub    esp,0x10
c000ee97:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee9b:	f6 05 e0 e5 02 c0 04 	test   BYTE PTR ds:0xc002e5e0,0x4
c000eea2:	68 68 12 00 00       	push   0x1268
c000eea7:	0f 94 05 04 d5 02 c0 	sete   BYTE PTR ds:0xc002d504
c000eeae:	e8 98 09 00 00       	call   c000f84b <malloc>
c000eeb3:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeb6:	89 c6                	mov    esi,eax
c000eeb8:	e8 6b 93 00 00       	call   c0018228 <ACPI::ACPI()>
c000eebd:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eec3:	58                   	pop    eax
c000eec4:	5a                   	pop    edx
c000eec5:	56                   	push   esi
c000eec6:	53                   	push   ebx
c000eec7:	e8 68 54 00 00       	call   c0014334 <Device::addChild(Device*)>
c000eecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecf:	e8 cc f9 ff ff       	call   c000e8a0 <Computer::detectFeatures()>
c000eed4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eed7:	e8 ce fb ff ff       	call   c000eaaa <Computer::displayFeatures()>
c000eedc:	59                   	pop    ecx
c000eedd:	5e                   	pop    esi
c000eede:	6a 01                	push   0x1
c000eee0:	53                   	push   ebx
c000eee1:	e8 94 ff ff ff       	call   c000ee7a <Computer::enableNMI(bool)>
c000eee6:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eeed:	e8 59 09 00 00       	call   c000f84b <malloc>
c000eef2:	89 04 24             	mov    DWORD PTR [esp],eax
c000eef5:	89 c6                	mov    esi,eax
c000eef7:	e8 20 9f 00 00       	call   c0018e1c <CPU::CPU()>
c000eefc:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ef02:	58                   	pop    eax
c000ef03:	5a                   	pop    edx
c000ef04:	56                   	push   esi
c000ef05:	53                   	push   ebx
c000ef06:	e8 29 54 00 00       	call   c0014334 <Device::addChild(Device*)>
c000ef0b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef11:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef17:	6a 00                	push   0x0
c000ef19:	6a 00                	push   0x0
c000ef1b:	50                   	push   eax
c000ef1c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef1f:	83 c4 20             	add    esp,0x20
c000ef22:	e8 93 59 00 00       	call   c00148ba <setupFPU()>
c000ef27:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef2d:	85 c0                	test   eax,eax
c000ef2f:	74 1f                	je     c000ef50 <Computer::open(int, int, void*)+0xbe>
c000ef31:	83 ec 08             	sub    esp,0x8
c000ef34:	50                   	push   eax
c000ef35:	53                   	push   ebx
c000ef36:	e8 f9 53 00 00       	call   c0014334 <Device::addChild(Device*)>
c000ef3b:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef41:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef43:	6a 00                	push   0x0
c000ef45:	6a 00                	push   0x0
c000ef47:	6a 00                	push   0x0
c000ef49:	50                   	push   eax
c000ef4a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef4d:	83 c4 20             	add    esp,0x20
c000ef50:	83 ec 0c             	sub    esp,0xc
c000ef53:	68 52 e6 00 c0       	push   0xc000e652
c000ef58:	e8 17 f1 00 00       	call   c001e074 <setupMultitasking(void (*)())>
c000ef5d:	83 c4 14             	add    esp,0x14
c000ef60:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef65:	5b                   	pop    ebx
c000ef66:	5e                   	pop    esi
c000ef67:	c3                   	ret    

c000ef68 <Computer::disableNMI()>:
c000ef68:	6a 00                	push   0x0
c000ef6a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef6e:	e8 07 ff ff ff       	call   c000ee7a <Computer::enableNMI(bool)>
c000ef73:	58                   	pop    eax
c000ef74:	5a                   	pop    edx
c000ef75:	c3                   	ret    

c000ef76 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef7a:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef81:	19 c0                	sbb    eax,eax
c000ef83:	83 e0 80             	and    eax,0xffffff80
c000ef86:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef8a:	e6 70                	out    0x70,al
c000ef8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef90:	e6 71                	out    0x71,al
c000ef92:	c3                   	ret    
c000ef93:	90                   	nop

c000ef94 <Computer::handleNMI()>:
c000ef94:	56                   	push   esi
c000ef95:	53                   	push   ebx
c000ef96:	83 ec 10             	sub    esp,0x10
c000ef99:	e4 92                	in     al,0x92
c000ef9b:	89 c6                	mov    esi,eax
c000ef9d:	e4 61                	in     al,0x61
c000ef9f:	68 ca a2 02 c0       	push   0xc002a2ca
c000efa4:	88 c3                	mov    bl,al
c000efa6:	e8 5c 3f 00 00       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c000efab:	83 c4 10             	add    esp,0x10
c000efae:	83 e6 10             	and    esi,0x10
c000efb1:	75 0d                	jne    c000efc0 <Computer::handleNMI()+0x2c>
c000efb3:	f6 c3 40             	test   bl,0x40
c000efb6:	75 1d                	jne    c000efd5 <Computer::handleNMI()+0x41>
c000efb8:	84 db                	test   bl,bl
c000efba:	78 2d                	js     c000efe9 <Computer::handleNMI()+0x55>
c000efbc:	58                   	pop    eax
c000efbd:	5b                   	pop    ebx
c000efbe:	5e                   	pop    esi
c000efbf:	c3                   	ret    
c000efc0:	83 ec 0c             	sub    esp,0xc
c000efc3:	68 db a2 02 c0       	push   0xc002a2db
c000efc8:	e8 78 b6 00 00       	call   c001a645 <Krnl::panic(char const*)>
c000efcd:	83 c4 10             	add    esp,0x10
c000efd0:	f6 c3 40             	test   bl,0x40
c000efd3:	74 e3                	je     c000efb8 <Computer::handleNMI()+0x24>
c000efd5:	83 ec 0c             	sub    esp,0xc
c000efd8:	68 e8 a2 02 c0       	push   0xc002a2e8
c000efdd:	e8 63 b6 00 00       	call   c001a645 <Krnl::panic(char const*)>
c000efe2:	83 c4 10             	add    esp,0x10
c000efe5:	84 db                	test   bl,bl
c000efe7:	79 d3                	jns    c000efbc <Computer::handleNMI()+0x28>
c000efe9:	c7 44 24 10 f2 a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a2f2
c000eff1:	5a                   	pop    edx
c000eff2:	5b                   	pop    ebx
c000eff3:	5e                   	pop    esi
c000eff4:	e9 4c b6 00 00       	jmp    c001a645 <Krnl::panic(char const*)>
c000eff9:	90                   	nop

c000effa <Computer::setDiskActivityLight(int, bool)>:
c000effa:	56                   	push   esi
c000effb:	53                   	push   ebx
c000effc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f000:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f005:	77 1b                	ja     c000f022 <Computer::setDiskActivityLight(int, bool)+0x28>
c000f007:	e4 92                	in     al,0x92
c000f009:	bb 40 00 00 00       	mov    ebx,0x40
c000f00e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f012:	89 da                	mov    edx,ebx
c000f014:	d3 e2                	shl    edx,cl
c000f016:	89 f1                	mov    ecx,esi
c000f018:	f7 d2                	not    edx
c000f01a:	d3 e3                	shl    ebx,cl
c000f01c:	21 d0                	and    eax,edx
c000f01e:	09 d8                	or     eax,ebx
c000f020:	e6 92                	out    0x92,al
c000f022:	5b                   	pop    ebx
c000f023:	5e                   	pop    esi
c000f024:	c3                   	ret    
c000f025:	90                   	nop

c000f026 <GDTEntry::setBase(unsigned int)>:
c000f026:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f02a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f02e:	89 c1                	mov    ecx,eax
c000f030:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f034:	c1 e9 10             	shr    ecx,0x10
c000f037:	c1 e8 18             	shr    eax,0x18
c000f03a:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f03d:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f040:	c3                   	ret    
c000f041:	90                   	nop

c000f042 <GDTEntry::setLimit(unsigned int)>:
c000f042:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f046:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f04a:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f04d:	66 89 01             	mov    WORD PTR [ecx],ax
c000f050:	83 e2 f0             	and    edx,0xfffffff0
c000f053:	c1 e8 10             	shr    eax,0x10
c000f056:	83 e0 0f             	and    eax,0xf
c000f059:	09 d0                	or     eax,edx
c000f05b:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f05e:	c3                   	ret    
c000f05f:	90                   	nop

c000f060 <GDT::GDT()>:
c000f060:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f064:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f06a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f06e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f074:	90                   	nop
c000f075:	c3                   	ret    

c000f076 <GDT::addEntry(GDTEntry)>:
c000f076:	53                   	push   ebx
c000f077:	83 ec 0c             	sub    esp,0xc
c000f07a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f07e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f080:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f087:	52                   	push   edx
c000f088:	50                   	push   eax
c000f089:	68 2c a3 02 c0       	push   0xc002a32c
c000f08e:	e8 74 3e 00 00       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c000f093:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f095:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f099:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f09d:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f0a1:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f0a5:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a8:	c1 e0 03             	shl    eax,0x3
c000f0ab:	89 13                	mov    DWORD PTR [ebx],edx
c000f0ad:	83 c4 18             	add    esp,0x18
c000f0b0:	5b                   	pop    ebx
c000f0b1:	c3                   	ret    

c000f0b2 <GDT::getNumberOfEntries()>:
c000f0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b8:	c3                   	ret    
c000f0b9:	90                   	nop

c000f0ba <GDT::flush()>:
c000f0ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0be:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0c0:	83 c0 04             	add    eax,0x4
c000f0c3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0ca:	a3 d2 e5 02 c0       	mov    ds:0xc002e5d2,eax
c000f0cf:	66 89 15 d0 e5 02 c0 	mov    WORD PTR ds:0xc002e5d0,dx
c000f0d6:	e9 75 13 ff ff       	jmp    c0000450 <loadGDT>
c000f0db:	90                   	nop

c000f0dc <GDT::setup()>:
c000f0dc:	55                   	push   ebp
c000f0dd:	57                   	push   edi
c000f0de:	56                   	push   esi
c000f0df:	53                   	push   ebx
c000f0e0:	83 ec 3c             	sub    esp,0x3c
c000f0e3:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0e7:	6a 00                	push   0x0
c000f0e9:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0ed:	53                   	push   ebx
c000f0ee:	e8 33 ff ff ff       	call   c000f026 <GDTEntry::setBase(unsigned int)>
c000f0f3:	6a 00                	push   0x0
c000f0f5:	53                   	push   ebx
c000f0f6:	e8 47 ff ff ff       	call   c000f042 <GDTEntry::setLimit(unsigned int)>
c000f0fb:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f103:	6a 00                	push   0x0
c000f105:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f109:	53                   	push   ebx
c000f10a:	e8 17 ff ff ff       	call   c000f026 <GDTEntry::setBase(unsigned int)>
c000f10f:	68 ff ff ff 00       	push   0xffffff
c000f114:	53                   	push   ebx
c000f115:	e8 28 ff ff ff       	call   c000f042 <GDTEntry::setLimit(unsigned int)>
c000f11a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f11e:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f123:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f128:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f12c:	83 c4 20             	add    esp,0x20
c000f12f:	6a 00                	push   0x0
c000f131:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f135:	53                   	push   ebx
c000f136:	e8 eb fe ff ff       	call   c000f026 <GDTEntry::setBase(unsigned int)>
c000f13b:	68 ff ff ff 00       	push   0xffffff
c000f140:	53                   	push   ebx
c000f141:	e8 fc fe ff ff       	call   c000f042 <GDTEntry::setLimit(unsigned int)>
c000f146:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f14a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f14e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f152:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f156:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f15a:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f15f:	0d 00 92 c0 00       	or     eax,0xc09200
c000f164:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f168:	89 d8                	mov    eax,ebx
c000f16a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f16e:	80 cc 60             	or     ah,0x60
c000f171:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f175:	83 c4 0c             	add    esp,0xc
c000f178:	89 f8                	mov    eax,edi
c000f17a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17e:	80 cc 60             	or     ah,0x60
c000f181:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f185:	89 c7                	mov    edi,eax
c000f187:	55                   	push   ebp
c000f188:	e8 e9 fe ff ff       	call   c000f076 <GDT::addEntry(GDTEntry)>
c000f18d:	83 c4 0c             	add    esp,0xc
c000f190:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f194:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f198:	55                   	push   ebp
c000f199:	e8 d8 fe ff ff       	call   c000f076 <GDT::addEntry(GDTEntry)>
c000f19e:	83 c4 0c             	add    esp,0xc
c000f1a1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a9:	55                   	push   ebp
c000f1aa:	e8 c7 fe ff ff       	call   c000f076 <GDT::addEntry(GDTEntry)>
c000f1af:	83 c4 0c             	add    esp,0xc
c000f1b2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1b6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1ba:	53                   	push   ebx
c000f1bb:	51                   	push   ecx
c000f1bc:	55                   	push   ebp
c000f1bd:	e8 b4 fe ff ff       	call   c000f076 <GDT::addEntry(GDTEntry)>
c000f1c2:	83 c4 0c             	add    esp,0xc
c000f1c5:	57                   	push   edi
c000f1c6:	56                   	push   esi
c000f1c7:	55                   	push   ebp
c000f1c8:	e8 a9 fe ff ff       	call   c000f076 <GDT::addEntry(GDTEntry)>
c000f1cd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1d0:	e8 e5 fe ff ff       	call   c000f0ba <GDT::flush()>
c000f1d5:	83 c4 4c             	add    esp,0x4c
c000f1d8:	5b                   	pop    ebx
c000f1d9:	5e                   	pop    esi
c000f1da:	5f                   	pop    edi
c000f1db:	5d                   	pop    ebp
c000f1dc:	c3                   	ret    

c000f1dd <idleFunction(void*)>:
c000f1dd:	53                   	push   ebx
c000f1de:	83 ec 08             	sub    esp,0x8
c000f1e1:	e8 3c ec 00 00       	call   c001de22 <unlockScheduler()>
c000f1e6:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c000f1eb:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1f1:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f8:	74 3c                	je     c000f236 <idleFunction(void*)+0x59>
c000f1fa:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f201:	74 33                	je     c000f236 <idleFunction(void*)+0x59>
c000f203:	31 db                	xor    ebx,ebx
c000f205:	52                   	push   edx
c000f206:	52                   	push   edx
c000f207:	68 e1 00 00 00       	push   0xe1
c000f20c:	50                   	push   eax
c000f20d:	e8 de fb ff ff       	call   c000edf0 <Computer::rdmsr(unsigned int)>
c000f212:	53                   	push   ebx
c000f213:	83 e0 02             	and    eax,0x2
c000f216:	50                   	push   eax
c000f217:	68 e1 00 00 00       	push   0xe1
c000f21c:	ff 35 c8 e5 02 c0    	push   DWORD PTR ds:0xc002e5c8
c000f222:	e8 f5 fb ff ff       	call   c000ee1c <Computer::wrmsr(unsigned int, unsigned long long)>
c000f227:	83 c4 20             	add    esp,0x20
c000f22a:	e8 50 10 ff ff       	call   c000027f <doTPAUSE>
c000f22f:	e8 dc 95 01 00       	call   c0028810 <idleCommon()>
c000f234:	eb f4                	jmp    c000f22a <idleFunction(void*)+0x4d>
c000f236:	fb                   	sti    
c000f237:	f4                   	hlt    
c000f238:	e8 d3 95 01 00       	call   c0028810 <idleCommon()>
c000f23d:	eb f7                	jmp    c000f236 <idleFunction(void*)+0x59>
c000f23f:	90                   	nop

c000f240 <IDTEntry::IDTEntry(bool)>:
c000f240:	83 ec 04             	sub    esp,0x4
c000f243:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f247:	88 04 24             	mov    BYTE PTR [esp],al
c000f24a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f24e:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f258:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f25c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f260:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f263:	83 e2 f0             	and    edx,0xfffffff0
c000f266:	83 ca 0e             	or     edx,0xe
c000f269:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f26c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f270:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f273:	83 e2 ef             	and    edx,0xffffffef
c000f276:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f279:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f27d:	74 04                	je     c000f283 <IDTEntry::IDTEntry(bool)+0x43>
c000f27f:	b2 03                	mov    dl,0x3
c000f281:	eb 02                	jmp    c000f285 <IDTEntry::IDTEntry(bool)+0x45>
c000f283:	b2 00                	mov    dl,0x0
c000f285:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f289:	83 e2 03             	and    edx,0x3
c000f28c:	88 d1                	mov    cl,dl
c000f28e:	c1 e1 05             	shl    ecx,0x5
c000f291:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f294:	83 e2 9f             	and    edx,0xffffff9f
c000f297:	09 ca                	or     edx,ecx
c000f299:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f29c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2a0:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2a3:	83 ca 80             	or     edx,0xffffff80
c000f2a6:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a9:	90                   	nop
c000f2aa:	83 c4 04             	add    esp,0x4
c000f2ad:	c3                   	ret    

c000f2ae <IDTEntry::setOffset(unsigned int)>:
c000f2ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2b6:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b9:	c1 e8 10             	shr    eax,0x10
c000f2bc:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2c0:	c3                   	ret    
c000f2c1:	90                   	nop

c000f2c2 <IDT::IDT()>:
c000f2c2:	90                   	nop
c000f2c3:	c3                   	ret    

c000f2c4 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c8:	83 c0 30             	add    eax,0x30
c000f2cb:	c3                   	ret    

c000f2cc <IDT::addEntry(IDTEntry, int)>:
c000f2cc:	53                   	push   ebx
c000f2cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2d1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2d5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2dd:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2e0:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2e4:	5b                   	pop    ebx
c000f2e5:	c3                   	ret    

c000f2e6 <IDT::addEntry(int, void (*)(), bool)>:
c000f2e6:	53                   	push   ebx
c000f2e7:	83 ec 10             	sub    esp,0x10
c000f2ea:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2ef:	50                   	push   eax
c000f2f0:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2f4:	53                   	push   ebx
c000f2f5:	e8 46 ff ff ff       	call   c000f240 <IDTEntry::IDTEntry(bool)>
c000f2fa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2fe:	53                   	push   ebx
c000f2ff:	e8 aa ff ff ff       	call   c000f2ae <IDTEntry::setOffset(unsigned int)>
c000f304:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f308:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f30c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f310:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f314:	e8 b3 ff ff ff       	call   c000f2cc <IDT::addEntry(IDTEntry, int)>
c000f319:	83 c4 30             	add    esp,0x30
c000f31c:	5b                   	pop    ebx
c000f31d:	c3                   	ret    

c000f31e <IDT::flush()>:
c000f31e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f322:	66 c7 05 d8 e5 02 c0 ff 07 	mov    WORD PTR ds:0xc002e5d8,0x7ff
c000f32b:	a3 da e5 02 c0       	mov    ds:0xc002e5da,eax
c000f330:	0f 01 1d d8 e5 02 c0 	lidtd  ds:0xc002e5d8
c000f337:	c3                   	ret    

c000f338 <IDT::setup()>:
c000f338:	57                   	push   edi
c000f339:	56                   	push   esi
c000f33a:	53                   	push   ebx
c000f33b:	83 ec 10             	sub    esp,0x10
c000f33e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f342:	6a 00                	push   0x0
c000f344:	68 70 04 00 c0       	push   0xc0000470
c000f349:	6a 00                	push   0x0
c000f34b:	53                   	push   ebx
c000f34c:	e8 95 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f351:	6a 00                	push   0x0
c000f353:	68 80 04 00 c0       	push   0xc0000480
c000f358:	6a 01                	push   0x1
c000f35a:	53                   	push   ebx
c000f35b:	e8 86 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f360:	83 c4 20             	add    esp,0x20
c000f363:	6a 00                	push   0x0
c000f365:	68 8a 04 00 c0       	push   0xc000048a
c000f36a:	6a 02                	push   0x2
c000f36c:	53                   	push   ebx
c000f36d:	e8 74 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f372:	6a 00                	push   0x0
c000f374:	68 94 04 00 c0       	push   0xc0000494
c000f379:	6a 03                	push   0x3
c000f37b:	53                   	push   ebx
c000f37c:	e8 65 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f381:	83 c4 20             	add    esp,0x20
c000f384:	6a 00                	push   0x0
c000f386:	68 9e 04 00 c0       	push   0xc000049e
c000f38b:	6a 04                	push   0x4
c000f38d:	53                   	push   ebx
c000f38e:	e8 53 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f393:	6a 00                	push   0x0
c000f395:	68 a8 04 00 c0       	push   0xc00004a8
c000f39a:	6a 05                	push   0x5
c000f39c:	53                   	push   ebx
c000f39d:	e8 44 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f3a2:	83 c4 20             	add    esp,0x20
c000f3a5:	6a 00                	push   0x0
c000f3a7:	68 b2 04 00 c0       	push   0xc00004b2
c000f3ac:	6a 06                	push   0x6
c000f3ae:	53                   	push   ebx
c000f3af:	e8 32 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f3b4:	6a 00                	push   0x0
c000f3b6:	68 bc 04 00 c0       	push   0xc00004bc
c000f3bb:	6a 07                	push   0x7
c000f3bd:	53                   	push   ebx
c000f3be:	e8 23 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f3c3:	83 c4 20             	add    esp,0x20
c000f3c6:	6a 00                	push   0x0
c000f3c8:	68 c6 04 00 c0       	push   0xc00004c6
c000f3cd:	6a 08                	push   0x8
c000f3cf:	53                   	push   ebx
c000f3d0:	e8 11 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f3d5:	6a 00                	push   0x0
c000f3d7:	68 ce 04 00 c0       	push   0xc00004ce
c000f3dc:	6a 09                	push   0x9
c000f3de:	53                   	push   ebx
c000f3df:	e8 02 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f3e4:	83 c4 20             	add    esp,0x20
c000f3e7:	6a 00                	push   0x0
c000f3e9:	68 d8 04 00 c0       	push   0xc00004d8
c000f3ee:	6a 0a                	push   0xa
c000f3f0:	53                   	push   ebx
c000f3f1:	e8 f0 fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f3f6:	6a 00                	push   0x0
c000f3f8:	68 e0 04 00 c0       	push   0xc00004e0
c000f3fd:	6a 0b                	push   0xb
c000f3ff:	53                   	push   ebx
c000f400:	e8 e1 fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f405:	83 c4 20             	add    esp,0x20
c000f408:	6a 00                	push   0x0
c000f40a:	68 e8 04 00 c0       	push   0xc00004e8
c000f40f:	6a 0c                	push   0xc
c000f411:	53                   	push   ebx
c000f412:	e8 cf fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f417:	6a 00                	push   0x0
c000f419:	68 f0 04 00 c0       	push   0xc00004f0
c000f41e:	6a 0d                	push   0xd
c000f420:	53                   	push   ebx
c000f421:	e8 c0 fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f426:	83 c4 20             	add    esp,0x20
c000f429:	6a 00                	push   0x0
c000f42b:	68 f8 04 00 c0       	push   0xc00004f8
c000f430:	6a 0e                	push   0xe
c000f432:	53                   	push   ebx
c000f433:	e8 ae fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f438:	6a 00                	push   0x0
c000f43a:	68 00 05 00 c0       	push   0xc0000500
c000f43f:	6a 0f                	push   0xf
c000f441:	53                   	push   ebx
c000f442:	e8 9f fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f447:	83 c4 20             	add    esp,0x20
c000f44a:	6a 00                	push   0x0
c000f44c:	68 0a 05 00 c0       	push   0xc000050a
c000f451:	6a 10                	push   0x10
c000f453:	53                   	push   ebx
c000f454:	e8 8d fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f459:	6a 00                	push   0x0
c000f45b:	68 14 05 00 c0       	push   0xc0000514
c000f460:	6a 11                	push   0x11
c000f462:	53                   	push   ebx
c000f463:	e8 7e fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f468:	83 c4 20             	add    esp,0x20
c000f46b:	6a 00                	push   0x0
c000f46d:	68 1e 05 00 c0       	push   0xc000051e
c000f472:	6a 12                	push   0x12
c000f474:	53                   	push   ebx
c000f475:	e8 6c fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f47a:	6a 01                	push   0x1
c000f47c:	68 b8 05 00 c0       	push   0xc00005b8
c000f481:	6a 60                	push   0x60
c000f483:	53                   	push   ebx
c000f484:	e8 5d fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f489:	83 c4 20             	add    esp,0x20
c000f48c:	6a 00                	push   0x0
c000f48e:	68 bf 05 00 c0       	push   0xc00005bf
c000f493:	6a 20                	push   0x20
c000f495:	53                   	push   ebx
c000f496:	e8 4b fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f49b:	6a 00                	push   0x0
c000f49d:	68 aa 05 00 c0       	push   0xc00005aa
c000f4a2:	6a 21                	push   0x21
c000f4a4:	53                   	push   ebx
c000f4a5:	e8 3c fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f4aa:	83 c4 20             	add    esp,0x20
c000f4ad:	6a 00                	push   0x0
c000f4af:	68 b1 05 00 c0       	push   0xc00005b1
c000f4b4:	6a 22                	push   0x22
c000f4b6:	53                   	push   ebx
c000f4b7:	e8 2a fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f4bc:	6a 00                	push   0x0
c000f4be:	68 28 05 00 c0       	push   0xc0000528
c000f4c3:	6a 23                	push   0x23
c000f4c5:	53                   	push   ebx
c000f4c6:	e8 1b fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f4cb:	83 c4 20             	add    esp,0x20
c000f4ce:	6a 00                	push   0x0
c000f4d0:	68 32 05 00 c0       	push   0xc0000532
c000f4d5:	6a 24                	push   0x24
c000f4d7:	53                   	push   ebx
c000f4d8:	e8 09 fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f4dd:	6a 00                	push   0x0
c000f4df:	68 3c 05 00 c0       	push   0xc000053c
c000f4e4:	6a 25                	push   0x25
c000f4e6:	53                   	push   ebx
c000f4e7:	e8 fa fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f4ec:	83 c4 20             	add    esp,0x20
c000f4ef:	6a 00                	push   0x0
c000f4f1:	68 46 05 00 c0       	push   0xc0000546
c000f4f6:	6a 26                	push   0x26
c000f4f8:	53                   	push   ebx
c000f4f9:	e8 e8 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f4fe:	6a 00                	push   0x0
c000f500:	68 50 05 00 c0       	push   0xc0000550
c000f505:	6a 27                	push   0x27
c000f507:	53                   	push   ebx
c000f508:	e8 d9 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f50d:	83 c4 20             	add    esp,0x20
c000f510:	6a 00                	push   0x0
c000f512:	68 5a 05 00 c0       	push   0xc000055a
c000f517:	6a 28                	push   0x28
c000f519:	53                   	push   ebx
c000f51a:	e8 c7 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f51f:	6a 00                	push   0x0
c000f521:	68 64 05 00 c0       	push   0xc0000564
c000f526:	6a 29                	push   0x29
c000f528:	53                   	push   ebx
c000f529:	e8 b8 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f52e:	83 c4 20             	add    esp,0x20
c000f531:	6a 00                	push   0x0
c000f533:	68 6e 05 00 c0       	push   0xc000056e
c000f538:	6a 2a                	push   0x2a
c000f53a:	53                   	push   ebx
c000f53b:	e8 a6 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f540:	6a 00                	push   0x0
c000f542:	68 78 05 00 c0       	push   0xc0000578
c000f547:	6a 2b                	push   0x2b
c000f549:	53                   	push   ebx
c000f54a:	e8 97 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f54f:	83 c4 20             	add    esp,0x20
c000f552:	6a 00                	push   0x0
c000f554:	68 82 05 00 c0       	push   0xc0000582
c000f559:	6a 2c                	push   0x2c
c000f55b:	53                   	push   ebx
c000f55c:	e8 85 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f561:	6a 00                	push   0x0
c000f563:	68 8c 05 00 c0       	push   0xc000058c
c000f568:	6a 2d                	push   0x2d
c000f56a:	53                   	push   ebx
c000f56b:	e8 76 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f570:	83 c4 20             	add    esp,0x20
c000f573:	6a 00                	push   0x0
c000f575:	68 96 05 00 c0       	push   0xc0000596
c000f57a:	6a 2e                	push   0x2e
c000f57c:	53                   	push   ebx
c000f57d:	e8 64 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f582:	6a 00                	push   0x0
c000f584:	68 a0 05 00 c0       	push   0xc00005a0
c000f589:	6a 2f                	push   0x2f
c000f58b:	53                   	push   ebx
c000f58c:	e8 55 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f591:	83 c4 20             	add    esp,0x20
c000f594:	6a 00                	push   0x0
c000f596:	68 f5 05 00 c0       	push   0xc00005f5
c000f59b:	6a 30                	push   0x30
c000f59d:	53                   	push   ebx
c000f59e:	e8 43 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f5a3:	6a 00                	push   0x0
c000f5a5:	68 ff 05 00 c0       	push   0xc00005ff
c000f5aa:	6a 31                	push   0x31
c000f5ac:	53                   	push   ebx
c000f5ad:	e8 34 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f5b2:	83 c4 20             	add    esp,0x20
c000f5b5:	6a 00                	push   0x0
c000f5b7:	68 09 06 00 c0       	push   0xc0000609
c000f5bc:	6a 32                	push   0x32
c000f5be:	53                   	push   ebx
c000f5bf:	e8 22 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f5c4:	6a 00                	push   0x0
c000f5c6:	68 13 06 00 c0       	push   0xc0000613
c000f5cb:	6a 33                	push   0x33
c000f5cd:	53                   	push   ebx
c000f5ce:	e8 13 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f5d3:	83 c4 20             	add    esp,0x20
c000f5d6:	6a 00                	push   0x0
c000f5d8:	68 1d 06 00 c0       	push   0xc000061d
c000f5dd:	6a 34                	push   0x34
c000f5df:	53                   	push   ebx
c000f5e0:	e8 01 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f5e5:	6a 00                	push   0x0
c000f5e7:	68 27 06 00 c0       	push   0xc0000627
c000f5ec:	6a 35                	push   0x35
c000f5ee:	53                   	push   ebx
c000f5ef:	e8 f2 fc ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f5f4:	83 c4 20             	add    esp,0x20
c000f5f7:	6a 00                	push   0x0
c000f5f9:	68 31 06 00 c0       	push   0xc0000631
c000f5fe:	6a 36                	push   0x36
c000f600:	53                   	push   ebx
c000f601:	e8 e0 fc ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f606:	6a 00                	push   0x0
c000f608:	68 3b 06 00 c0       	push   0xc000063b
c000f60d:	6a 37                	push   0x37
c000f60f:	53                   	push   ebx
c000f610:	e8 d1 fc ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f615:	83 c4 20             	add    esp,0x20
c000f618:	e8 c9 27 00 00       	call   c0011de6 <Virt::getAKernelVAS()>
c000f61d:	52                   	push   edx
c000f61e:	6a 03                	push   0x3
c000f620:	6a 02                	push   0x2
c000f622:	50                   	push   eax
c000f623:	e8 38 2e 00 00       	call   c0012460 <VAS::allocatePages(int, int)>
c000f628:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f62f:	89 c6                	mov    esi,eax
c000f631:	e8 15 02 00 00       	call   c000f84b <malloc>
c000f636:	81 c6 00 20 00 00    	add    esi,0x2000
c000f63c:	89 04 24             	mov    DWORD PTR [esp],eax
c000f63f:	89 c7                	mov    edi,eax
c000f641:	e8 36 1e 00 00       	call   c001147c <TSS::TSS()>
c000f646:	83 c4 0c             	add    esp,0xc
c000f649:	68 c6 04 00 c0       	push   0xc00004c6
c000f64e:	56                   	push   esi
c000f64f:	57                   	push   edi
c000f650:	e8 67 1e 00 00       	call   c00114bc <TSS::setup(unsigned long, unsigned long)>
c000f655:	59                   	pop    ecx
c000f656:	89 c6                	mov    esi,eax
c000f658:	5f                   	pop    edi
c000f659:	6a 00                	push   0x0
c000f65b:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f65f:	50                   	push   eax
c000f660:	e8 db fb ff ff       	call   c000f240 <IDTEntry::IDTEntry(bool)>
c000f665:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f669:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f66e:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f675:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f67b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f67f:	80 ce 05             	or     dh,0x5
c000f682:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f685:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f689:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f68d:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f690:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f693:	e8 86 fc ff ff       	call   c000f31e <IDT::flush()>
c000f698:	83 c4 20             	add    esp,0x20
c000f69b:	5b                   	pop    ebx
c000f69c:	5e                   	pop    esi
c000f69d:	5f                   	pop    edi
c000f69e:	c3                   	ret    

c000f69f <sbrk>:
c000f69f:	55                   	push   ebp
c000f6a0:	57                   	push   edi
c000f6a1:	56                   	push   esi
c000f6a2:	53                   	push   ebx
c000f6a3:	83 ec 1c             	sub    esp,0x1c
c000f6a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6aa:	85 c0                	test   eax,eax
c000f6ac:	74 3e                	je     c000f6ec <sbrk+0x4d>
c000f6ae:	78 43                	js     c000f6f3 <sbrk+0x54>
c000f6b0:	8b 15 c8 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5c8
c000f6b6:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6bc:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6c2:	83 e2 01             	and    edx,0x1
c000f6c5:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c9:	8b 0d dc d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d4dc
c000f6cf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6d3:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d8:	89 c2                	mov    edx,eax
c000f6da:	78 2f                	js     c000f70b <sbrk+0x6c>
c000f6dc:	c1 fa 0c             	sar    edx,0xc
c000f6df:	89 d7                	mov    edi,edx
c000f6e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6e5:	be 00 00 00 00       	mov    esi,0x0
c000f6ea:	eb 36                	jmp    c000f722 <sbrk+0x83>
c000f6ec:	a1 dc d4 02 c0       	mov    eax,ds:0xc002d4dc
c000f6f1:	eb 74                	jmp    c000f767 <sbrk+0xc8>
c000f6f3:	83 ec 08             	sub    esp,0x8
c000f6f6:	50                   	push   eax
c000f6f7:	68 48 a3 02 c0       	push   0xc002a348
c000f6fc:	e8 06 38 00 00       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c000f701:	83 c4 10             	add    esp,0x10
c000f704:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f709:	eb 5c                	jmp    c000f767 <sbrk+0xc8>
c000f70b:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f711:	eb c9                	jmp    c000f6dc <sbrk+0x3d>
c000f713:	81 05 dc d4 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d4dc,0x1000
c000f71d:	46                   	inc    esi
c000f71e:	39 f7                	cmp    edi,esi
c000f720:	74 34                	je     c000f756 <sbrk+0xb7>
c000f722:	e8 bf 26 00 00       	call   c0011de6 <Virt::getAKernelVAS()>
c000f727:	89 c3                	mov    ebx,eax
c000f729:	8b 2d dc d4 02 c0    	mov    ebp,DWORD PTR ds:0xc002d4dc
c000f72f:	e8 b9 07 00 00       	call   c000feed <Phys::allocatePage()>
c000f734:	68 01 0c 00 00       	push   0xc01
c000f739:	55                   	push   ebp
c000f73a:	50                   	push   eax
c000f73b:	53                   	push   ebx
c000f73c:	e8 1f 2c 00 00       	call   c0012360 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f741:	83 c4 10             	add    esp,0x10
c000f744:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f749:	74 c8                	je     c000f713 <sbrk+0x74>
c000f74b:	8b 1d dc d4 02 c0    	mov    ebx,DWORD PTR ds:0xc002d4dc
c000f751:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f754:	eb bd                	jmp    c000f713 <sbrk+0x74>
c000f756:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f75b:	75 12                	jne    c000f76f <sbrk+0xd0>
c000f75d:	0f 20 d8             	mov    eax,cr3
c000f760:	0f 22 d8             	mov    cr3,eax
c000f763:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f767:	83 c4 1c             	add    esp,0x1c
c000f76a:	5b                   	pop    ebx
c000f76b:	5e                   	pop    esi
c000f76c:	5f                   	pop    edi
c000f76d:	5d                   	pop    ebp
c000f76e:	c3                   	ret    
c000f76f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f773:	89 cb                	mov    ebx,ecx
c000f775:	c1 eb 0a             	shr    ebx,0xa
c000f778:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f77e:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f784:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f788:	c1 e0 0c             	shl    eax,0xc
c000f78b:	01 c8                	add    eax,ecx
c000f78d:	c1 e8 0a             	shr    eax,0xa
c000f790:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f795:	2d 00 00 40 00       	sub    eax,0x400000
c000f79a:	39 c3                	cmp    ebx,eax
c000f79c:	77 c5                	ja     c000f763 <sbrk+0xc4>
c000f79e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f7a1:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f7a7:	39 d8                	cmp    eax,ebx
c000f7a9:	73 f3                	jae    c000f79e <sbrk+0xff>
c000f7ab:	eb b6                	jmp    c000f763 <sbrk+0xc4>

c000f7ad <mmap>:
c000f7ad:	83 ec 18             	sub    esp,0x18
c000f7b0:	68 78 a3 02 c0       	push   0xc002a378
c000f7b5:	e8 8b ae 00 00       	call   c001a645 <Krnl::panic(char const*)>
c000f7ba:	b8 00 00 00 00       	mov    eax,0x0
c000f7bf:	83 c4 1c             	add    esp,0x1c
c000f7c2:	c3                   	ret    

c000f7c3 <munmap>:
c000f7c3:	83 ec 18             	sub    esp,0x18
c000f7c6:	68 7d a3 02 c0       	push   0xc002a37d
c000f7cb:	e8 75 ae 00 00       	call   c001a645 <Krnl::panic(char const*)>
c000f7d0:	b8 00 00 00 00       	mov    eax,0x0
c000f7d5:	83 c4 1c             	add    esp,0x1c
c000f7d8:	c3                   	ret    

c000f7d9 <liballoc_lock()>:
c000f7d9:	83 ec 0c             	sub    esp,0xc
c000f7dc:	e8 3f e6 00 00       	call   c001de20 <lockScheduler()>
c000f7e1:	b8 00 00 00 00       	mov    eax,0x0
c000f7e6:	83 c4 0c             	add    esp,0xc
c000f7e9:	c3                   	ret    

c000f7ea <liballoc_unlock()>:
c000f7ea:	83 ec 0c             	sub    esp,0xc
c000f7ed:	e8 30 e6 00 00       	call   c001de22 <unlockScheduler()>
c000f7f2:	b8 00 00 00 00       	mov    eax,0x0
c000f7f7:	83 c4 0c             	add    esp,0xc
c000f7fa:	c3                   	ret    

c000f7fb <liballoc_alloc(int)>:
c000f7fb:	83 ec 0c             	sub    esp,0xc
c000f7fe:	e8 e3 25 00 00       	call   c0011de6 <Virt::getAKernelVAS()>
c000f803:	83 ec 04             	sub    esp,0x4
c000f806:	68 01 08 00 00       	push   0x801
c000f80b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f80f:	50                   	push   eax
c000f810:	e8 4b 2c 00 00       	call   c0012460 <VAS::allocatePages(int, int)>
c000f815:	83 c4 1c             	add    esp,0x1c
c000f818:	c3                   	ret    

c000f819 <liballoc_free(void*, int)>:
c000f819:	83 ec 0c             	sub    esp,0xc
c000f81c:	e8 c5 25 00 00       	call   c0011de6 <Virt::getAKernelVAS()>
c000f821:	83 ec 08             	sub    esp,0x8
c000f824:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f828:	50                   	push   eax
c000f829:	e8 ee 28 00 00       	call   c001211c <VAS::freeAllocatedPages(unsigned long)>
c000f82e:	b8 00 00 00 00       	mov    eax,0x0
c000f833:	83 c4 1c             	add    esp,0x1c
c000f836:	c3                   	ret    

c000f837 <realloc>:
c000f837:	83 ec 14             	sub    esp,0x14
c000f83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f842:	e8 15 1e ff ff       	call   c000165c <dlrealloc>
c000f847:	83 c4 1c             	add    esp,0x1c
c000f84a:	c3                   	ret    

c000f84b <malloc>:
c000f84b:	83 ec 18             	sub    esp,0x18
c000f84e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f852:	e8 c8 18 ff ff       	call   c000111f <dlmalloc>
c000f857:	83 c4 1c             	add    esp,0x1c
c000f85a:	c3                   	ret    

c000f85b <free>:
c000f85b:	83 ec 18             	sub    esp,0x18
c000f85e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f862:	e8 5d 15 ff ff       	call   c0000dc4 <dlfree>
c000f867:	83 c4 1c             	add    esp,0x1c
c000f86a:	c3                   	ret    

c000f86b <rfree>:
c000f86b:	83 ec 18             	sub    esp,0x18
c000f86e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f872:	e8 4d 15 ff ff       	call   c0000dc4 <dlfree>
c000f877:	83 c4 1c             	add    esp,0x1c
c000f87a:	c3                   	ret    

c000f87b <calloc>:
c000f87b:	56                   	push   esi
c000f87c:	53                   	push   ebx
c000f87d:	83 ec 10             	sub    esp,0x10
c000f880:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f884:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f889:	53                   	push   ebx
c000f88a:	e8 bc ff ff ff       	call   c000f84b <malloc>
c000f88f:	89 c6                	mov    esi,eax
c000f891:	83 c4 0c             	add    esp,0xc
c000f894:	53                   	push   ebx
c000f895:	6a 00                	push   0x0
c000f897:	50                   	push   eax
c000f898:	e8 e3 0e ff ff       	call   c0000780 <memset>
c000f89d:	89 f0                	mov    eax,esi
c000f89f:	83 c4 14             	add    esp,0x14
c000f8a2:	5b                   	pop    ebx
c000f8a3:	5e                   	pop    esi
c000f8a4:	c3                   	ret    

c000f8a5 <hwTextMode_loadInData(VgaText*)>:
c000f8a5:	55                   	push   ebp
c000f8a6:	a1 00 d5 02 c0       	mov    eax,ds:0xc002d500
c000f8ab:	57                   	push   edi
c000f8ac:	56                   	push   esi
c000f8ad:	53                   	push   ebx
c000f8ae:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8b2:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f8b8:	85 d2                	test   edx,edx
c000f8ba:	7e 2f                	jle    c000f8eb <hwTextMode_loadInData(VgaText*)+0x46>
c000f8bc:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f8c2:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f8c5:	31 f6                	xor    esi,esi
c000f8c7:	29 fd                	sub    ebp,edi
c000f8c9:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8cc:	31 c0                	xor    eax,eax
c000f8ce:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8d2:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8d6:	40                   	inc    eax
c000f8d7:	83 f8 50             	cmp    eax,0x50
c000f8da:	75 f2                	jne    c000f8ce <hwTextMode_loadInData(VgaText*)+0x29>
c000f8dc:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8e2:	46                   	inc    esi
c000f8e3:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f8e9:	7f de                	jg     c000f8c9 <hwTextMode_loadInData(VgaText*)+0x24>
c000f8eb:	5b                   	pop    ebx
c000f8ec:	5e                   	pop    esi
c000f8ed:	5f                   	pop    edi
c000f8ee:	5d                   	pop    ebp
c000f8ef:	c3                   	ret    

c000f8f0 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8f0:	55                   	push   ebp
c000f8f1:	80 3d 60 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e660,0x0
c000f8f8:	57                   	push   edi
c000f8f9:	56                   	push   esi
c000f8fa:	53                   	push   ebx
c000f8fb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8ff:	75 50                	jne    c000f951 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f901:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f907:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f90d:	8b 15 00 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d500
c000f913:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f917:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f91d:	eb 0e                	jmp    c000f92d <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f91f:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f925:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f92b:	89 da                	mov    edx,ebx
c000f92d:	83 e5 0f             	and    ebp,0xf
c000f930:	c1 e0 04             	shl    eax,0x4
c000f933:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f936:	0f b6 c0             	movzx  eax,al
c000f939:	41                   	inc    ecx
c000f93a:	09 e8                	or     eax,ebp
c000f93c:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f940:	c1 e0 08             	shl    eax,0x8
c000f943:	09 e8                	or     eax,ebp
c000f945:	39 fb                	cmp    ebx,edi
c000f947:	66 89 02             	mov    WORD PTR [edx],ax
c000f94a:	75 d3                	jne    c000f91f <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f94c:	5b                   	pop    ebx
c000f94d:	5e                   	pop    esi
c000f94e:	5f                   	pop    edi
c000f94f:	5d                   	pop    ebp
c000f950:	c3                   	ret    
c000f951:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f95b:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f965:	31 c0                	xor    eax,eax
c000f967:	bd 02 00 00 00       	mov    ebp,0x2
c000f96c:	eb 9f                	jmp    c000f90d <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f96e <hwTextMode_showCursor(VgaText*, bool)>:
c000f96e:	56                   	push   esi
c000f96f:	80 3d 60 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e660,0x0
c000f976:	53                   	push   ebx
c000f977:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f97b:	75 39                	jne    c000f9b6 <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f97d:	84 c0                	test   al,al
c000f97f:	74 38                	je     c000f9b9 <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f981:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f986:	b0 0a                	mov    al,0xa
c000f988:	89 da                	mov    edx,ebx
c000f98a:	ee                   	out    dx,al
c000f98b:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f990:	89 ca                	mov    edx,ecx
c000f992:	ec                   	in     al,dx
c000f993:	b2 0f                	mov    dl,0xf
c000f995:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f999:	83 e0 c0             	and    eax,0xffffffc0
c000f99c:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f9a2:	09 d0                	or     eax,edx
c000f9a4:	89 ca                	mov    edx,ecx
c000f9a6:	ee                   	out    dx,al
c000f9a7:	b0 0b                	mov    al,0xb
c000f9a9:	89 da                	mov    edx,ebx
c000f9ab:	ee                   	out    dx,al
c000f9ac:	89 ca                	mov    edx,ecx
c000f9ae:	ec                   	in     al,dx
c000f9af:	83 e0 e0             	and    eax,0xffffffe0
c000f9b2:	83 c8 0f             	or     eax,0xf
c000f9b5:	ee                   	out    dx,al
c000f9b6:	5b                   	pop    ebx
c000f9b7:	5e                   	pop    esi
c000f9b8:	c3                   	ret    
c000f9b9:	b0 0a                	mov    al,0xa
c000f9bb:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9c0:	ee                   	out    dx,al
c000f9c1:	b0 20                	mov    al,0x20
c000f9c3:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9c8:	ee                   	out    dx,al
c000f9c9:	5b                   	pop    ebx
c000f9ca:	5e                   	pop    esi
c000f9cb:	c3                   	ret    

c000f9cc <hwTextMode_update(VgaText*)>:
c000f9cc:	c3                   	ret    

c000f9cd <hwTextMode_updateCursor(VgaText*)>:
c000f9cd:	56                   	push   esi
c000f9ce:	80 3d 60 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e660,0x0
c000f9d5:	53                   	push   ebx
c000f9d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9da:	75 3f                	jne    c000fa1b <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f9dc:	be d4 03 00 00       	mov    esi,0x3d4
c000f9e1:	b9 19 00 00 00       	mov    ecx,0x19
c000f9e6:	89 f2                	mov    edx,esi
c000f9e8:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f9ee:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f9f4:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9f7:	c1 e1 04             	shl    ecx,0x4
c000f9fa:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000fa00:	b0 0f                	mov    al,0xf
c000fa02:	ee                   	out    dx,al
c000fa03:	bb d5 03 00 00       	mov    ebx,0x3d5
c000fa08:	88 c8                	mov    al,cl
c000fa0a:	89 da                	mov    edx,ebx
c000fa0c:	ee                   	out    dx,al
c000fa0d:	b0 0e                	mov    al,0xe
c000fa0f:	89 f2                	mov    edx,esi
c000fa11:	ee                   	out    dx,al
c000fa12:	89 c8                	mov    eax,ecx
c000fa14:	89 da                	mov    edx,ebx
c000fa16:	66 c1 e8 08          	shr    ax,0x8
c000fa1a:	ee                   	out    dx,al
c000fa1b:	5b                   	pop    ebx
c000fa1c:	5e                   	pop    esi
c000fa1d:	c3                   	ret    

c000fa1e <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa22:	80 3d 60 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e660,0x0
c000fa29:	75 38                	jne    c000fa63 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa2b:	ba da 03 00 00       	mov    edx,0x3da
c000fa30:	84 c0                	test   al,al
c000fa32:	75 18                	jne    c000fa4c <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa34:	ec                   	in     al,dx
c000fa35:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa3a:	b0 30                	mov    al,0x30
c000fa3c:	89 ca                	mov    edx,ecx
c000fa3e:	ee                   	out    dx,al
c000fa3f:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa44:	ec                   	in     al,dx
c000fa45:	83 c8 08             	or     eax,0x8
c000fa48:	89 ca                	mov    edx,ecx
c000fa4a:	ee                   	out    dx,al
c000fa4b:	c3                   	ret    
c000fa4c:	ec                   	in     al,dx
c000fa4d:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa52:	b0 30                	mov    al,0x30
c000fa54:	89 ca                	mov    edx,ecx
c000fa56:	ee                   	out    dx,al
c000fa57:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa5c:	ec                   	in     al,dx
c000fa5d:	83 e0 f7             	and    eax,0xfffffff7
c000fa60:	89 ca                	mov    edx,ecx
c000fa62:	ee                   	out    dx,al
c000fa63:	c3                   	ret    

c000fa64 <hwTextMode_scrollScreen(VgaText*)>:
c000fa64:	55                   	push   ebp
c000fa65:	57                   	push   edi
c000fa66:	56                   	push   esi
c000fa67:	53                   	push   ebx
c000fa68:	83 ec 1c             	sub    esp,0x1c
c000fa6b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa6f:	80 3d 60 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e660,0x0
c000fa76:	74 14                	je     c000fa8c <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fa78:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fa82:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fa8c:	a1 00 d5 02 c0       	mov    eax,ds:0xc002d500
c000fa91:	bd 02 00 00 00       	mov    ebp,0x2
c000fa96:	05 a0 00 00 00       	add    eax,0xa0
c000fa9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa9f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000faa3:	31 c0                	xor    eax,eax
c000faa5:	eb 0b                	jmp    c000fab2 <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000faa7:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faad:	74 57                	je     c000fb06 <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000faaf:	43                   	inc    ebx
c000fab0:	89 f0                	mov    eax,esi
c000fab2:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000fab8:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fabe:	88 13                	mov    BYTE PTR [ebx],dl
c000fac0:	8d 70 01             	lea    esi,[eax+0x1]
c000fac3:	83 fd 18             	cmp    ebp,0x18
c000fac6:	75 df                	jne    c000faa7 <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fac8:	a8 01                	test   al,0x1
c000faca:	75 13                	jne    c000fadf <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000facc:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000facf:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000fad5:	75 d8                	jne    c000faaf <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000fad7:	83 c4 1c             	add    esp,0x1c
c000fada:	5b                   	pop    ebx
c000fadb:	5e                   	pop    esi
c000fadc:	5f                   	pop    edi
c000fadd:	5d                   	pop    ebp
c000fade:	c3                   	ret    
c000fadf:	83 ec 08             	sub    esp,0x8
c000fae2:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fae9:	50                   	push   eax
c000faea:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000faee:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000faf5:	50                   	push   eax
c000faf6:	e8 53 0c 00 00       	call   c001074e <VgaText::combineColours(unsigned char, unsigned char)>
c000fafb:	83 c4 10             	add    esp,0x10
c000fafe:	88 07                	mov    BYTE PTR [edi],al
c000fb00:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fb04:	eb c9                	jmp    c000facf <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000fb06:	45                   	inc    ebp
c000fb07:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb0f:	eb 8e                	jmp    c000fa9f <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fb11 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb11:	57                   	push   edi
c000fb12:	80 3d 60 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e660,0x0
c000fb19:	56                   	push   esi
c000fb1a:	53                   	push   ebx
c000fb1b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb1f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb23:	75 65                	jne    c000fb8a <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fb25:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb2a:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb2f:	83 ec 08             	sub    esp,0x8
c000fb32:	52                   	push   edx
c000fb33:	50                   	push   eax
c000fb34:	e8 15 0c 00 00       	call   c001074e <VgaText::combineColours(unsigned char, unsigned char)>
c000fb39:	5a                   	pop    edx
c000fb3a:	0f b6 c0             	movzx  eax,al
c000fb3d:	59                   	pop    ecx
c000fb3e:	50                   	push   eax
c000fb3f:	0f be c3             	movsx  eax,bl
c000fb42:	50                   	push   eax
c000fb43:	e8 ac 0c 00 00       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c000fb48:	83 c4 10             	add    esp,0x10
c000fb4b:	8b 35 00 d5 02 c0    	mov    esi,DWORD PTR ds:0xc002d500
c000fb51:	80 3d 60 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e660,0x0
c000fb58:	74 07                	je     c000fb61 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb5a:	66 0f be c3          	movsx  ax,bl
c000fb5e:	80 cc 02             	or     ah,0x2
c000fb61:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb65:	ba 19 00 00 00       	mov    edx,0x19
c000fb6a:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fb70:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb73:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb76:	c1 e1 04             	shl    ecx,0x4
c000fb79:	c1 e2 04             	shl    edx,0x4
c000fb7c:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb80:	01 ca                	add    edx,ecx
c000fb82:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb86:	5b                   	pop    ebx
c000fb87:	5e                   	pop    esi
c000fb88:	5f                   	pop    edi
c000fb89:	c3                   	ret    
c000fb8a:	b8 02 00 00 00       	mov    eax,0x2
c000fb8f:	31 d2                	xor    edx,edx
c000fb91:	eb 9c                	jmp    c000fb2f <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb93 <setupTextMode()>:
c000fb93:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb98:	83 e0 30             	and    eax,0x30
c000fb9b:	66 83 f8 30          	cmp    ax,0x30
c000fb9f:	75 11                	jne    c000fbb2 <setupTextMode()+0x1f>
c000fba1:	81 2d 00 d5 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002d500,0x8000
c000fbab:	c6 05 60 e6 02 c0 01 	mov    BYTE PTR ds:0xc002e660,0x1
c000fbb2:	c7 05 98 e6 02 c0 1e fa 00 c0 	mov    DWORD PTR ds:0xc002e698,0xc000fa1e
c000fbbc:	c7 05 84 e6 02 c0 a5 f8 00 c0 	mov    DWORD PTR ds:0xc002e684,0xc000f8a5
c000fbc6:	c7 05 80 e6 02 c0 f0 f8 00 c0 	mov    DWORD PTR ds:0xc002e680,0xc000f8f0
c000fbd0:	c7 05 8c e6 02 c0 64 fa 00 c0 	mov    DWORD PTR ds:0xc002e68c,0xc000fa64
c000fbda:	c7 05 94 e6 02 c0 6e f9 00 c0 	mov    DWORD PTR ds:0xc002e694,0xc000f96e
c000fbe4:	c7 05 88 e6 02 c0 cc f9 00 c0 	mov    DWORD PTR ds:0xc002e688,0xc000f9cc
c000fbee:	c7 05 90 e6 02 c0 cd f9 00 c0 	mov    DWORD PTR ds:0xc002e690,0xc000f9cd
c000fbf8:	c7 05 9c e6 02 c0 11 fb 00 c0 	mov    DWORD PTR ds:0xc002e69c,0xc000fb11
c000fc02:	c3                   	ret    

c000fc03 <kernel_main>:
c000fc03:	57                   	push   edi
c000fc04:	bf f9 03 00 00       	mov    edi,0x3f9
c000fc09:	56                   	push   esi
c000fc0a:	31 f6                	xor    esi,esi
c000fc0c:	53                   	push   ebx
c000fc0d:	83 ec 20             	sub    esp,0x20
c000fc10:	e8 93 09 00 00       	call   c00105a8 <installVgaTextImplementation()>
c000fc15:	e8 79 ff ff ff       	call   c000fb93 <setupTextMode()>
c000fc1a:	89 f0                	mov    eax,esi
c000fc1c:	89 fa                	mov    edx,edi
c000fc1e:	ee                   	out    dx,al
c000fc1f:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc24:	b0 80                	mov    al,0x80
c000fc26:	89 da                	mov    edx,ebx
c000fc28:	ee                   	out    dx,al
c000fc29:	b1 03                	mov    cl,0x3
c000fc2b:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc30:	88 c8                	mov    al,cl
c000fc32:	ee                   	out    dx,al
c000fc33:	89 f0                	mov    eax,esi
c000fc35:	89 fa                	mov    edx,edi
c000fc37:	ee                   	out    dx,al
c000fc38:	88 c8                	mov    al,cl
c000fc3a:	89 da                	mov    edx,ebx
c000fc3c:	ee                   	out    dx,al
c000fc3d:	b0 c7                	mov    al,0xc7
c000fc3f:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc44:	ee                   	out    dx,al
c000fc45:	b0 0b                	mov    al,0xb
c000fc47:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc4c:	ee                   	out    dx,al
c000fc4d:	83 ec 0c             	sub    esp,0xc
c000fc50:	68 84 a3 02 c0       	push   0xc002a384
c000fc55:	e8 ad 32 00 00       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c000fc5a:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc5f:	05 ff 0f 00 00       	add    eax,0xfff
c000fc64:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc69:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc6c:	e8 f3 03 00 00       	call   c0010064 <Phys::physicalMemorySetup(unsigned int)>
c000fc71:	e8 94 20 00 00       	call   c0011d0a <Virt::virtualMemorySetup()>
c000fc76:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc7c:	83 c4 10             	add    esp,0x10
c000fc7f:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc85:	75 0e                	jne    c000fc95 <kernel_main+0x92>
c000fc87:	89 d8                	mov    eax,ebx
c000fc89:	25 48 03 00 00       	and    eax,0x348
c000fc8e:	3d 00 03 00 00       	cmp    eax,0x300
c000fc93:	74 10                	je     c000fca5 <kernel_main+0xa2>
c000fc95:	83 ec 0c             	sub    esp,0xc
c000fc98:	68 61 bc 02 c0       	push   0xc002bc61
c000fc9d:	e8 a3 a9 00 00       	call   c001a645 <Krnl::panic(char const*)>
c000fca2:	83 c4 10             	add    esp,0x10
c000fca5:	83 ec 0c             	sub    esp,0xc
c000fca8:	89 1d e0 e5 02 c0    	mov    DWORD PTR ds:0xc002e5e0,ebx
c000fcae:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fcb2:	53                   	push   ebx
c000fcb3:	e8 8c 22 00 00       	call   c0011f44 <VAS::VAS()>
c000fcb8:	89 1d 50 e7 02 c0    	mov    DWORD PTR ds:0xc002e750,ebx
c000fcbe:	e8 5d 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcc3:	c7 04 24 9b a3 02 c0 	mov    DWORD PTR [esp],0xc002a39b
c000fcca:	e8 38 32 00 00       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c000fccf:	e8 b5 20 00 00       	call   c0011d89 <Virt::swappingSetup()>
c000fcd4:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fcdb:	e8 6b fb ff ff       	call   c000f84b <malloc>
c000fce0:	89 04 24             	mov    DWORD PTR [esp],eax
c000fce3:	89 c6                	mov    esi,eax
c000fce5:	e8 58 ea ff ff       	call   c000e742 <Computer::Computer()>
c000fcea:	58                   	pop    eax
c000fceb:	89 35 c8 e5 02 c0    	mov    DWORD PTR ds:0xc002e5c8,esi
c000fcf1:	5a                   	pop    edx
c000fcf2:	56                   	push   esi
c000fcf3:	68 b8 a3 02 c0       	push   0xc002a3b8
c000fcf8:	e8 0a 32 00 00       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c000fcfd:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c000fd02:	8b 10                	mov    edx,DWORD PTR [eax]
c000fd04:	6a 00                	push   0x0
c000fd06:	6a 00                	push   0x0
c000fd08:	6a 00                	push   0x0
c000fd0a:	50                   	push   eax
c000fd0b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd0e:	83 c4 14             	add    esp,0x14
c000fd11:	53                   	push   ebx
c000fd12:	e8 dd 24 00 00       	call   c00121f4 <VAS::~VAS()>
c000fd17:	c7 04 24 cb a3 02 c0 	mov    DWORD PTR [esp],0xc002a3cb
c000fd1e:	e8 22 a9 00 00       	call   c001a645 <Krnl::panic(char const*)>
c000fd23:	83 c4 30             	add    esp,0x30
c000fd26:	5b                   	pop    ebx
c000fd27:	5e                   	pop    esi
c000fd28:	5f                   	pop    edi
c000fd29:	c3                   	ret    

c000fd2a <Phys::allocateDMA(unsigned long)>:
c000fd2a:	55                   	push   ebp
c000fd2b:	31 d2                	xor    edx,edx
c000fd2d:	57                   	push   edi
c000fd2e:	31 ed                	xor    ebp,ebp
c000fd30:	56                   	push   esi
c000fd31:	31 c9                	xor    ecx,ecx
c000fd33:	53                   	push   ebx
c000fd34:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd38:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd3e:	31 c0                	xor    eax,eax
c000fd40:	c1 ee 0c             	shr    esi,0xc
c000fd43:	eb 17                	jmp    c000fd5c <Phys::allocateDMA(unsigned long)+0x32>
c000fd45:	85 c9                	test   ecx,ecx
c000fd47:	75 04                	jne    c000fd4d <Phys::allocateDMA(unsigned long)+0x23>
c000fd49:	89 d5                	mov    ebp,edx
c000fd4b:	89 d0                	mov    eax,edx
c000fd4d:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd50:	39 de                	cmp    esi,ebx
c000fd52:	74 20                	je     c000fd74 <Phys::allocateDMA(unsigned long)+0x4a>
c000fd54:	42                   	inc    edx
c000fd55:	89 d9                	mov    ecx,ebx
c000fd57:	83 fa 2f             	cmp    edx,0x2f
c000fd5a:	7f 11                	jg     c000fd6d <Phys::allocateDMA(unsigned long)+0x43>
c000fd5c:	80 ba 20 e6 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd19e0],0x0
c000fd63:	74 e0                	je     c000fd45 <Phys::allocateDMA(unsigned long)+0x1b>
c000fd65:	31 c9                	xor    ecx,ecx
c000fd67:	42                   	inc    edx
c000fd68:	83 fa 2f             	cmp    edx,0x2f
c000fd6b:	7e ef                	jle    c000fd5c <Phys::allocateDMA(unsigned long)+0x32>
c000fd6d:	5b                   	pop    ebx
c000fd6e:	31 c0                	xor    eax,eax
c000fd70:	5e                   	pop    esi
c000fd71:	5f                   	pop    edi
c000fd72:	5d                   	pop    ebp
c000fd73:	c3                   	ret    
c000fd74:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd77:	89 d7                	mov    edi,edx
c000fd79:	4f                   	dec    edi
c000fd7a:	79 03                	jns    c000fd7f <Phys::allocateDMA(unsigned long)+0x55>
c000fd7c:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd7f:	c1 ff 04             	sar    edi,0x4
c000fd82:	89 c2                	mov    edx,eax
c000fd84:	c1 fa 04             	sar    edx,0x4
c000fd87:	39 fa                	cmp    edx,edi
c000fd89:	75 2f                	jne    c000fdba <Phys::allocateDMA(unsigned long)+0x90>
c000fd8b:	85 db                	test   ebx,ebx
c000fd8d:	74 1a                	je     c000fda9 <Phys::allocateDMA(unsigned long)+0x7f>
c000fd8f:	be 20 e6 02 c0       	mov    esi,0xc002e620
c000fd94:	8d 90 20 e6 02 c0    	lea    edx,[eax-0x3ffd19e0]
c000fd9a:	f7 d6                	not    esi
c000fd9c:	29 c6                	sub    esi,eax
c000fd9e:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fda1:	42                   	inc    edx
c000fda2:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fda5:	39 d9                	cmp    ecx,ebx
c000fda7:	7f f5                	jg     c000fd9e <Phys::allocateDMA(unsigned long)+0x74>
c000fda9:	85 ff                	test   edi,edi
c000fdab:	74 13                	je     c000fdc0 <Phys::allocateDMA(unsigned long)+0x96>
c000fdad:	5b                   	pop    ebx
c000fdae:	05 50 20 0c 00       	add    eax,0xc2050
c000fdb3:	5e                   	pop    esi
c000fdb4:	c1 e0 0c             	shl    eax,0xc
c000fdb7:	5f                   	pop    edi
c000fdb8:	5d                   	pop    ebp
c000fdb9:	c3                   	ret    
c000fdba:	89 ea                	mov    edx,ebp
c000fdbc:	31 c9                	xor    ecx,ecx
c000fdbe:	eb a7                	jmp    c000fd67 <Phys::allocateDMA(unsigned long)+0x3d>
c000fdc0:	5b                   	pop    ebx
c000fdc1:	c1 e0 0c             	shl    eax,0xc
c000fdc4:	5e                   	pop    esi
c000fdc5:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdca:	5f                   	pop    edi
c000fdcb:	5d                   	pop    ebp
c000fdcc:	c3                   	ret    

c000fdcd <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdd1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdd5:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fddb:	c1 e9 0c             	shr    ecx,0xc
c000fdde:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fde3:	76 25                	jbe    c000fe0a <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fde5:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fdea:	c1 e8 0c             	shr    eax,0xc
c000fded:	8d 50 10             	lea    edx,[eax+0x10]
c000fdf0:	85 c9                	test   ecx,ecx
c000fdf2:	74 15                	je     c000fe09 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fdf4:	8d 82 20 e6 02 c0    	lea    eax,[edx-0x3ffd19e0]
c000fdfa:	8d 94 11 20 e6 02 c0 	lea    edx,[ecx+edx*1-0x3ffd19e0]
c000fe01:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fe04:	40                   	inc    eax
c000fe05:	39 d0                	cmp    eax,edx
c000fe07:	75 f8                	jne    c000fe01 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fe09:	c3                   	ret    
c000fe0a:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe10:	c1 ea 0c             	shr    edx,0xc
c000fe13:	eb db                	jmp    c000fdf0 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe15 <Phys::setPageState(unsigned long, bool)>:
c000fe15:	56                   	push   esi
c000fe16:	ba 01 00 00 00       	mov    edx,0x1
c000fe1b:	53                   	push   ebx
c000fe1c:	8b 35 e0 d4 02 c0    	mov    esi,DWORD PTR ds:0xc002d4e0
c000fe22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe2a:	89 c8                	mov    eax,ecx
c000fe2c:	83 e1 07             	and    ecx,0x7
c000fe2f:	c1 e8 03             	shr    eax,0x3
c000fe32:	d3 e3                	shl    ebx,cl
c000fe34:	01 c6                	add    esi,eax
c000fe36:	d3 e2                	shl    edx,cl
c000fe38:	f7 d2                	not    edx
c000fe3a:	20 16                	and    BYTE PTR [esi],dl
c000fe3c:	03 05 e0 d4 02 c0    	add    eax,DWORD PTR ds:0xc002d4e0
c000fe42:	08 18                	or     BYTE PTR [eax],bl
c000fe44:	5b                   	pop    ebx
c000fe45:	5e                   	pop    esi
c000fe46:	c3                   	ret    

c000fe47 <Phys::getPageState(unsigned long)>:
c000fe47:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe4b:	8b 15 e0 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d4e0
c000fe51:	89 c8                	mov    eax,ecx
c000fe53:	83 e1 07             	and    ecx,0x7
c000fe56:	c1 e8 03             	shr    eax,0x3
c000fe59:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe5d:	d3 f8                	sar    eax,cl
c000fe5f:	83 e0 01             	and    eax,0x1
c000fe62:	c3                   	ret    

c000fe63 <Phys::freePage(unsigned long)>:
c000fe63:	53                   	push   ebx
c000fe64:	83 ec 08             	sub    esp,0x8
c000fe67:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe6b:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe71:	76 57                	jbe    c000feca <Phys::freePage(unsigned long)+0x67>
c000fe73:	c1 eb 0c             	shr    ebx,0xc
c000fe76:	53                   	push   ebx
c000fe77:	e8 cb ff ff ff       	call   c000fe47 <Phys::getPageState(unsigned long)>
c000fe7c:	5a                   	pop    edx
c000fe7d:	84 c0                	test   al,al
c000fe7f:	74 5b                	je     c000fedc <Phys::freePage(unsigned long)+0x79>
c000fe81:	a1 10 e6 02 c0       	mov    eax,ds:0xc002e610
c000fe86:	48                   	dec    eax
c000fe87:	a3 10 e6 02 c0       	mov    ds:0xc002e610,eax
c000fe8c:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe8f:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe92:	c1 e0 02             	shl    eax,0x2
c000fe95:	99                   	cdq    
c000fe96:	f7 3d 14 e6 02 c0    	idiv   DWORD PTR ds:0xc002e614
c000fe9c:	39 05 0c e6 02 c0    	cmp    DWORD PTR ds:0xc002e60c,eax
c000fea2:	75 13                	jne    c000feb7 <Phys::freePage(unsigned long)+0x54>
c000fea4:	83 ec 08             	sub    esp,0x8
c000fea7:	6a 00                	push   0x0
c000fea9:	53                   	push   ebx
c000feaa:	e8 66 ff ff ff       	call   c000fe15 <Phys::setPageState(unsigned long, bool)>
c000feaf:	83 c4 10             	add    esp,0x10
c000feb2:	83 c4 08             	add    esp,0x8
c000feb5:	5b                   	pop    ebx
c000feb6:	c3                   	ret    
c000feb7:	83 ec 0c             	sub    esp,0xc
c000feba:	a3 0c e6 02 c0       	mov    ds:0xc002e60c,eax
c000febf:	50                   	push   eax
c000fec0:	e8 77 0a 00 00       	call   c001093c <VgaText::updateRAMUsageDisplay(int)>
c000fec5:	83 c4 10             	add    esp,0x10
c000fec8:	eb da                	jmp    c000fea4 <Phys::freePage(unsigned long)+0x41>
c000feca:	68 00 10 00 00       	push   0x1000
c000fecf:	53                   	push   ebx
c000fed0:	e8 f8 fe ff ff       	call   c000fdcd <Phys::freeDMA(unsigned long, unsigned long)>
c000fed5:	59                   	pop    ecx
c000fed6:	5b                   	pop    ebx
c000fed7:	83 c4 08             	add    esp,0x8
c000feda:	5b                   	pop    ebx
c000fedb:	c3                   	ret    
c000fedc:	c7 44 24 10 e6 a3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a3e6
c000fee4:	83 c4 08             	add    esp,0x8
c000fee7:	5b                   	pop    ebx
c000fee8:	e9 58 a7 00 00       	jmp    c001a645 <Krnl::panic(char const*)>

c000feed <Phys::allocatePage()>:
c000feed:	56                   	push   esi
c000feee:	53                   	push   ebx
c000feef:	51                   	push   ecx
c000fef0:	8b 35 04 e6 02 c0    	mov    esi,DWORD PTR ds:0xc002e604
c000fef6:	89 f3                	mov    ebx,esi
c000fef8:	eb 0a                	jmp    c000ff04 <Phys::allocatePage()+0x17>
c000fefa:	89 1d 04 e6 02 c0    	mov    DWORD PTR ds:0xc002e604,ebx
c000ff00:	39 de                	cmp    esi,ebx
c000ff02:	74 24                	je     c000ff28 <Phys::allocatePage()+0x3b>
c000ff04:	53                   	push   ebx
c000ff05:	e8 3d ff ff ff       	call   c000fe47 <Phys::getPageState(unsigned long)>
c000ff0a:	5a                   	pop    edx
c000ff0b:	84 c0                	test   al,al
c000ff0d:	74 77                	je     c000ff86 <Phys::allocatePage()+0x99>
c000ff0f:	43                   	inc    ebx
c000ff10:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff16:	75 e2                	jne    c000fefa <Phys::allocatePage()+0xd>
c000ff18:	31 db                	xor    ebx,ebx
c000ff1a:	c7 05 04 e6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e604,0x0
c000ff24:	39 de                	cmp    esi,ebx
c000ff26:	75 dc                	jne    c000ff04 <Phys::allocatePage()+0x17>
c000ff28:	83 ec 0c             	sub    esp,0xc
c000ff2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff30:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ff33:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000ff39:	e8 f6 2c 00 00       	call   c0012c34 <VAS::scanForEviction()>
c000ff3e:	83 c4 10             	add    esp,0x10
c000ff41:	85 c0                	test   eax,eax
c000ff43:	75 76                	jne    c000ffbb <Phys::allocatePage()+0xce>
c000ff45:	83 ec 0c             	sub    esp,0xc
c000ff48:	68 fc a3 02 c0       	push   0xc002a3fc
c000ff4d:	e8 b5 2f 00 00       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c000ff52:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff59:	e8 cc fd ff ff       	call   c000fd2a <Phys::allocateDMA(unsigned long)>
c000ff5e:	83 c4 10             	add    esp,0x10
c000ff61:	85 c0                	test   eax,eax
c000ff63:	75 56                	jne    c000ffbb <Phys::allocatePage()+0xce>
c000ff65:	83 ec 0c             	sub    esp,0xc
c000ff68:	68 0d a4 02 c0       	push   0xc002a40d
c000ff6d:	e8 d3 a6 00 00       	call   c001a645 <Krnl::panic(char const*)>
c000ff72:	83 c4 10             	add    esp,0x10
c000ff75:	8b 1d 04 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e604
c000ff7b:	53                   	push   ebx
c000ff7c:	e8 c6 fe ff ff       	call   c000fe47 <Phys::getPageState(unsigned long)>
c000ff81:	5a                   	pop    edx
c000ff82:	84 c0                	test   al,al
c000ff84:	75 89                	jne    c000ff0f <Phys::allocatePage()+0x22>
c000ff86:	6a 01                	push   0x1
c000ff88:	53                   	push   ebx
c000ff89:	e8 87 fe ff ff       	call   c000fe15 <Phys::setPageState(unsigned long, bool)>
c000ff8e:	a1 10 e6 02 c0       	mov    eax,ds:0xc002e610
c000ff93:	59                   	pop    ecx
c000ff94:	40                   	inc    eax
c000ff95:	5b                   	pop    ebx
c000ff96:	a3 10 e6 02 c0       	mov    ds:0xc002e610,eax
c000ff9b:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff9e:	8d 04 80             	lea    eax,[eax+eax*4]
c000ffa1:	c1 e0 02             	shl    eax,0x2
c000ffa4:	99                   	cdq    
c000ffa5:	f7 3d 14 e6 02 c0    	idiv   DWORD PTR ds:0xc002e614
c000ffab:	39 05 0c e6 02 c0    	cmp    DWORD PTR ds:0xc002e60c,eax
c000ffb1:	75 0c                	jne    c000ffbf <Phys::allocatePage()+0xd2>
c000ffb3:	a1 04 e6 02 c0       	mov    eax,ds:0xc002e604
c000ffb8:	c1 e0 0c             	shl    eax,0xc
c000ffbb:	5a                   	pop    edx
c000ffbc:	5b                   	pop    ebx
c000ffbd:	5e                   	pop    esi
c000ffbe:	c3                   	ret    
c000ffbf:	83 ec 0c             	sub    esp,0xc
c000ffc2:	a3 0c e6 02 c0       	mov    ds:0xc002e60c,eax
c000ffc7:	50                   	push   eax
c000ffc8:	e8 6f 09 00 00       	call   c001093c <VgaText::updateRAMUsageDisplay(int)>
c000ffcd:	83 c4 10             	add    esp,0x10
c000ffd0:	eb e1                	jmp    c000ffb3 <Phys::allocatePage()+0xc6>

c000ffd2 <Phys::allocateContiguousPages(int)>:
c000ffd2:	57                   	push   edi
c000ffd3:	56                   	push   esi
c000ffd4:	53                   	push   ebx
c000ffd5:	31 db                	xor    ebx,ebx
c000ffd7:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000ffdb:	e8 40 de 00 00       	call   c001de20 <lockScheduler()>
c000ffe0:	85 db                	test   ebx,ebx
c000ffe2:	75 11                	jne    c000fff5 <Phys::allocateContiguousPages(int)+0x23>
c000ffe4:	e8 04 ff ff ff       	call   c000feed <Phys::allocatePage()>
c000ffe9:	83 ff 01             	cmp    edi,0x1
c000ffec:	89 c6                	mov    esi,eax
c000ffee:	74 21                	je     c0010011 <Phys::allocateContiguousPages(int)+0x3f>
c000fff0:	bb 01 00 00 00       	mov    ebx,0x1
c000fff5:	e8 f3 fe ff ff       	call   c000feed <Phys::allocatePage()>
c000fffa:	89 da                	mov    edx,ebx
c000fffc:	c1 e2 0c             	shl    edx,0xc
c000ffff:	01 f2                	add    edx,esi
c0010001:	39 c2                	cmp    edx,eax
c0010003:	74 17                	je     c001001c <Phys::allocateContiguousPages(int)+0x4a>
c0010005:	bb 01 00 00 00       	mov    ebx,0x1
c001000a:	89 c6                	mov    esi,eax
c001000c:	83 ff 01             	cmp    edi,0x1
c001000f:	75 e4                	jne    c000fff5 <Phys::allocateContiguousPages(int)+0x23>
c0010011:	e8 0c de 00 00       	call   c001de22 <unlockScheduler()>
c0010016:	89 f0                	mov    eax,esi
c0010018:	5b                   	pop    ebx
c0010019:	5e                   	pop    esi
c001001a:	5f                   	pop    edi
c001001b:	c3                   	ret    
c001001c:	43                   	inc    ebx
c001001d:	39 fb                	cmp    ebx,edi
c001001f:	75 bf                	jne    c000ffe0 <Phys::allocateContiguousPages(int)+0xe>
c0010021:	e8 fc dd 00 00       	call   c001de22 <unlockScheduler()>
c0010026:	89 f0                	mov    eax,esi
c0010028:	5b                   	pop    ebx
c0010029:	5e                   	pop    esi
c001002a:	5f                   	pop    edi
c001002b:	c3                   	ret    

c001002c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c001002c:	56                   	push   esi
c001002d:	53                   	push   ebx
c001002e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010032:	39 1d 08 e6 02 c0    	cmp    DWORD PTR ds:0xc002e608,ebx
c0010038:	73 06                	jae    c0010040 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c001003a:	89 1d 08 e6 02 c0    	mov    DWORD PTR ds:0xc002e608,ebx
c0010040:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010044:	c1 eb 0c             	shr    ebx,0xc
c0010047:	c1 e8 0c             	shr    eax,0xc
c001004a:	39 d8                	cmp    eax,ebx
c001004c:	73 13                	jae    c0010061 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c001004e:	6a 00                	push   0x0
c0010050:	8d 70 01             	lea    esi,[eax+0x1]
c0010053:	50                   	push   eax
c0010054:	e8 bc fd ff ff       	call   c000fe15 <Phys::setPageState(unsigned long, bool)>
c0010059:	5a                   	pop    edx
c001005a:	89 f0                	mov    eax,esi
c001005c:	59                   	pop    ecx
c001005d:	39 f3                	cmp    ebx,esi
c001005f:	75 ed                	jne    c001004e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0010061:	5b                   	pop    ebx
c0010062:	5e                   	pop    esi
c0010063:	c3                   	ret    

c0010064 <Phys::physicalMemorySetup(unsigned int)>:
c0010064:	55                   	push   ebp
c0010065:	57                   	push   edi
c0010066:	56                   	push   esi
c0010067:	53                   	push   ebx
c0010068:	31 db                	xor    ebx,ebx
c001006a:	83 ec 40             	sub    esp,0x40
c001006d:	6a 30                	push   0x30
c001006f:	6a 00                	push   0x0
c0010071:	68 20 e6 02 c0       	push   0xc002e620
c0010076:	e8 05 07 ff ff       	call   c0000780 <memset>
c001007b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001007f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0010084:	05 00 10 00 00       	add    eax,0x1000
c0010089:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001008d:	83 c4 10             	add    esp,0x10
c0010090:	83 ec 08             	sub    esp,0x8
c0010093:	6a 01                	push   0x1
c0010095:	53                   	push   ebx
c0010096:	43                   	inc    ebx
c0010097:	e8 79 fd ff ff       	call   c000fe15 <Phys::setPageState(unsigned long, bool)>
c001009c:	83 c4 10             	add    esp,0x10
c001009f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00100a5:	75 e9                	jne    c0010090 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c00100a7:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c00100ae:	66 85 c0             	test   ax,ax
c00100b1:	0f 84 8e 01 00 00    	je     c0010245 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c00100b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00100bb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00100c3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00100c7:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00100cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00100d0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00100d8:	eb 15                	jmp    c00100ef <Phys::physicalMemorySetup(unsigned int)+0x8b>
c00100da:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00100de:	83 c3 18             	add    ebx,0x18
c00100e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100e5:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00100e9:	0f 84 66 01 00 00    	je     c0010255 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c00100ef:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00100f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00100f5:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00100f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00100fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010100:	8b 33                	mov    esi,DWORD PTR [ebx]
c0010102:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0010105:	01 f0                	add    eax,esi
c0010107:	55                   	push   ebp
c0010108:	11 fa                	adc    edx,edi
c001010a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001010e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010112:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010116:	56                   	push   esi
c0010117:	68 48 a4 02 c0       	push   0xc002a448
c001011c:	e8 e6 2d 00 00       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0010121:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010125:	83 c4 10             	add    esp,0x10
c0010128:	09 f8                	or     eax,edi
c001012a:	0f 85 25 01 00 00    	jne    c0010255 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010130:	4d                   	dec    ebp
c0010131:	75 a7                	jne    c00100da <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010133:	ba 00 00 08 00       	mov    edx,0x80000
c0010138:	89 c1                	mov    ecx,eax
c001013a:	39 f2                	cmp    edx,esi
c001013c:	19 f9                	sbb    ecx,edi
c001013e:	0f 82 a7 00 00 00    	jb     c00101eb <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010144:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010148:	89 c1                	mov    ecx,eax
c001014a:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c001014e:	0f 83 97 00 00 00    	jae    c00101eb <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010154:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010159:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001015d:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010161:	39 fa                	cmp    edx,edi
c0010163:	19 e8                	sbb    eax,ebp
c0010165:	0f 82 14 01 00 00    	jb     c001027f <Phys::physicalMemorySetup(unsigned int)+0x21b>
c001016b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001016f:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010173:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0010179:	ba ff 1f 00 00       	mov    edx,0x1fff
c001017e:	83 d5 ff             	adc    ebp,0xffffffff
c0010181:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010185:	31 c0                	xor    eax,eax
c0010187:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c001018b:	39 fa                	cmp    edx,edi
c001018d:	89 c1                	mov    ecx,eax
c001018f:	19 e9                	sbb    ecx,ebp
c0010191:	0f 83 43 ff ff ff    	jae    c00100da <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010197:	be 00 00 08 00       	mov    esi,0x80000
c001019c:	50                   	push   eax
c001019d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00101a1:	57                   	push   edi
c00101a2:	56                   	push   esi
c00101a3:	68 6c a4 02 c0       	push   0xc002a46c
c00101a8:	e8 5a 2d 00 00       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c00101ad:	5a                   	pop    edx
c00101ae:	59                   	pop    ecx
c00101af:	57                   	push   edi
c00101b0:	56                   	push   esi
c00101b1:	e8 76 fe ff ff       	call   c001002c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00101b6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00101ba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00101be:	83 c4 0c             	add    esp,0xc
c00101c1:	0f ac d0 0c          	shrd   eax,edx,0xc
c00101c5:	03 05 14 e6 02 c0    	add    eax,DWORD PTR ds:0xc002e614
c00101cb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00101d2:	a3 14 e6 02 c0       	mov    ds:0xc002e614,eax
c00101d7:	52                   	push   edx
c00101d8:	50                   	push   eax
c00101d9:	68 29 a4 02 c0       	push   0xc002a429
c00101de:	e8 24 2d 00 00       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c00101e3:	83 c4 10             	add    esp,0x10
c00101e6:	e9 ef fe ff ff       	jmp    c00100da <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101eb:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00101ef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101f3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00101f7:	39 ea                	cmp    edx,ebp
c00101f9:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00101fd:	0f 82 d7 fe ff ff    	jb     c00100da <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010203:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010208:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c001020c:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0010210:	0f 83 c4 fe ff ff    	jae    c00100da <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010216:	39 ee                	cmp    esi,ebp
c0010218:	89 f8                	mov    eax,edi
c001021a:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c001021e:	0f 83 78 ff ff ff    	jae    c001019c <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010224:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010228:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001022c:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010230:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010234:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010238:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001023c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010240:	e9 57 ff ff ff       	jmp    c001019c <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010245:	83 ec 0c             	sub    esp,0xc
c0010248:	68 1b a4 02 c0       	push   0xc002a41b
c001024d:	e8 f3 a3 00 00       	call   c001a645 <Krnl::panic(char const*)>
c0010252:	83 c4 10             	add    esp,0x10
c0010255:	bb 40 01 00 00       	mov    ebx,0x140
c001025a:	83 ec 08             	sub    esp,0x8
c001025d:	6a 00                	push   0x0
c001025f:	53                   	push   ebx
c0010260:	43                   	inc    ebx
c0010261:	e8 af fb ff ff       	call   c000fe15 <Phys::setPageState(unsigned long, bool)>
c0010266:	ff 05 14 e6 02 c0    	inc    DWORD PTR ds:0xc002e614
c001026c:	83 c4 10             	add    esp,0x10
c001026f:	81 fb 80 01 00 00    	cmp    ebx,0x180
c0010275:	75 e3                	jne    c001025a <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0010277:	83 c4 3c             	add    esp,0x3c
c001027a:	5b                   	pop    ebx
c001027b:	5e                   	pop    esi
c001027c:	5f                   	pop    edi
c001027d:	5d                   	pop    ebp
c001027e:	c3                   	ret    
c001027f:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0010287:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001028f:	e9 d7 fe ff ff       	jmp    c001016b <Phys::physicalMemorySetup(unsigned int)+0x107>

c0010294 <Pipe::isAtty()>:
c0010294:	31 c0                	xor    eax,eax
c0010296:	c3                   	ret    
c0010297:	90                   	nop

c0010298 <Pipe::~Pipe()>:
c0010298:	83 ec 0c             	sub    esp,0xc
c001029b:	ba d8 a4 02 c0       	mov    edx,0xc002a4d8
c00102a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102a4:	89 10                	mov    DWORD PTR [eax],edx
c00102a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102aa:	83 ec 0c             	sub    esp,0xc
c00102ad:	50                   	push   eax
c00102ae:	e8 37 16 00 00       	call   c00118ea <UnixFile::~UnixFile()>
c00102b3:	83 c4 10             	add    esp,0x10
c00102b6:	90                   	nop
c00102b7:	83 c4 0c             	add    esp,0xc
c00102ba:	c3                   	ret    
c00102bb:	90                   	nop

c00102bc <Pipe::~Pipe()>:
c00102bc:	83 ec 0c             	sub    esp,0xc
c00102bf:	83 ec 0c             	sub    esp,0xc
c00102c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102c6:	e8 cd ff ff ff       	call   c0010298 <Pipe::~Pipe()>
c00102cb:	83 c4 10             	add    esp,0x10
c00102ce:	83 ec 08             	sub    esp,0x8
c00102d1:	6a 20                	push   0x20
c00102d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102d7:	e8 4b 2b 00 00       	call   c0012e27 <operator delete(void*, unsigned long)>
c00102dc:	83 c4 10             	add    esp,0x10
c00102df:	83 c4 0c             	add    esp,0xc
c00102e2:	c3                   	ret    
c00102e3:	90                   	nop

c00102e4 <Pipe::read(unsigned long long, void*, int*)>:
c00102e4:	55                   	push   ebp
c00102e5:	57                   	push   edi
c00102e6:	56                   	push   esi
c00102e7:	53                   	push   ebx
c00102e8:	83 ec 1c             	sub    esp,0x1c
c00102eb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00102ef:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00102f3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00102f7:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00102fa:	89 c8                	mov    eax,ecx
c00102fc:	99                   	cdq    
c00102fd:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010301:	74 19                	je     c001031c <Pipe::read(unsigned long long, void*, int*)+0x38>
c0010303:	39 f9                	cmp    ecx,edi
c0010305:	89 d1                	mov    ecx,edx
c0010307:	19 f1                	sbb    ecx,esi
c0010309:	73 11                	jae    c001031c <Pipe::read(unsigned long long, void*, int*)+0x38>
c001030b:	e8 10 db 00 00       	call   c001de20 <lockScheduler()>
c0010310:	e8 81 de 00 00       	call   c001e196 <schedule()>
c0010315:	e8 08 db 00 00       	call   c001de22 <unlockScheduler()>
c001031a:	eb db                	jmp    c00102f7 <Pipe::read(unsigned long long, void*, int*)+0x13>
c001031c:	39 f8                	cmp    eax,edi
c001031e:	89 d1                	mov    ecx,edx
c0010320:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010324:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0010328:	19 f1                	sbb    ecx,esi
c001032a:	73 08                	jae    c0010334 <Pipe::read(unsigned long long, void*, int*)+0x50>
c001032c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010330:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010334:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010337:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001033a:	29 c6                	sub    esi,eax
c001033c:	89 f1                	mov    ecx,esi
c001033e:	c1 f9 1f             	sar    ecx,0x1f
c0010341:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0010345:	89 ca                	mov    edx,ecx
c0010347:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001034b:	19 d1                	sbb    ecx,edx
c001034d:	73 04                	jae    c0010353 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c001034f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0010353:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010357:	89 fd                	mov    ebp,edi
c0010359:	29 f5                	sub    ebp,esi
c001035b:	85 f6                	test   esi,esi
c001035d:	74 12                	je     c0010371 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c001035f:	52                   	push   edx
c0010360:	56                   	push   esi
c0010361:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c0010364:	50                   	push   eax
c0010365:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010369:	e8 de 03 ff ff       	call   c000074c <memcpy>
c001036e:	83 c4 10             	add    esp,0x10
c0010371:	85 ed                	test   ebp,ebp
c0010373:	74 12                	je     c0010387 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c0010375:	50                   	push   eax
c0010376:	55                   	push   ebp
c0010377:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001037a:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c001037e:	56                   	push   esi
c001037f:	e8 c8 03 ff ff       	call   c000074c <memcpy>
c0010384:	83 c4 10             	add    esp,0x10
c0010387:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c001038a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001038d:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010390:	99                   	cdq    
c0010391:	89 f7                	mov    edi,esi
c0010393:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0010397:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001039b:	c1 ff 1f             	sar    edi,0x1f
c001039e:	57                   	push   edi
c001039f:	56                   	push   esi
c00103a0:	52                   	push   edx
c00103a1:	50                   	push   eax
c00103a2:	e8 5d 68 01 00       	call   c0026c04 <__umoddi3>
c00103a7:	83 c4 10             	add    esp,0x10
c00103aa:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00103ad:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00103b2:	75 10                	jne    c00103c4 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c00103b4:	83 ec 0c             	sub    esp,0xc
c00103b7:	68 95 a4 02 c0       	push   0xc002a495
c00103bc:	e8 84 a2 00 00       	call   c001a645 <Krnl::panic(char const*)>
c00103c1:	83 c4 10             	add    esp,0x10
c00103c4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00103c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103cc:	89 10                	mov    DWORD PTR [eax],edx
c00103ce:	83 c4 1c             	add    esp,0x1c
c00103d1:	31 c0                	xor    eax,eax
c00103d3:	5b                   	pop    ebx
c00103d4:	5e                   	pop    esi
c00103d5:	5f                   	pop    edi
c00103d6:	5d                   	pop    ebp
c00103d7:	c3                   	ret    

c00103d8 <Pipe::write(unsigned long long, void*, int*)>:
c00103d8:	55                   	push   ebp
c00103d9:	57                   	push   edi
c00103da:	56                   	push   esi
c00103db:	53                   	push   ebx
c00103dc:	83 ec 1c             	sub    esp,0x1c
c00103df:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00103e3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00103e7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00103eb:	89 04 24             	mov    DWORD PTR [esp],eax
c00103ee:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00103f1:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c00103f4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00103f8:	89 de                	mov    esi,ebx
c00103fa:	89 df                	mov    edi,ebx
c00103fc:	c1 ff 1f             	sar    edi,0x1f
c00103ff:	01 c6                	add    esi,eax
c0010401:	89 c8                	mov    eax,ecx
c0010403:	11 d7                	adc    edi,edx
c0010405:	99                   	cdq    
c0010406:	39 f1                	cmp    ecx,esi
c0010408:	89 d0                	mov    eax,edx
c001040a:	19 f8                	sbb    eax,edi
c001040c:	b8 01 00 00 00       	mov    eax,0x1
c0010411:	0f 82 80 00 00 00    	jb     c0010497 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c0010417:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001041a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001041d:	01 d8                	add    eax,ebx
c001041f:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0010423:	99                   	cdq    
c0010424:	f7 f9                	idiv   ecx
c0010426:	29 d1                	sub    ecx,edx
c0010428:	89 d7                	mov    edi,edx
c001042a:	89 c8                	mov    eax,ecx
c001042c:	99                   	cdq    
c001042d:	39 ce                	cmp    esi,ecx
c001042f:	19 d3                	sbb    ebx,edx
c0010431:	bb 00 00 00 00       	mov    ebx,0x0
c0010436:	72 04                	jb     c001043c <Pipe::write(unsigned long long, void*, int*)+0x64>
c0010438:	89 f3                	mov    ebx,esi
c001043a:	29 cb                	sub    ebx,ecx
c001043c:	89 f1                	mov    ecx,esi
c001043e:	29 d9                	sub    ecx,ebx
c0010440:	74 1a                	je     c001045c <Pipe::write(unsigned long long, void*, int*)+0x84>
c0010442:	52                   	push   edx
c0010443:	51                   	push   ecx
c0010444:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010448:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001044c:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c001044f:	57                   	push   edi
c0010450:	e8 f7 02 ff ff       	call   c000074c <memcpy>
c0010455:	83 c4 10             	add    esp,0x10
c0010458:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001045c:	85 db                	test   ebx,ebx
c001045e:	74 12                	je     c0010472 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c0010460:	50                   	push   eax
c0010461:	53                   	push   ebx
c0010462:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c0010466:	51                   	push   ecx
c0010467:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001046a:	e8 dd 02 ff ff       	call   c000074c <memcpy>
c001046f:	83 c4 10             	add    esp,0x10
c0010472:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c0010475:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001047a:	75 10                	jne    c001048c <Pipe::write(unsigned long long, void*, int*)+0xb4>
c001047c:	83 ec 0c             	sub    esp,0xc
c001047f:	68 b1 a4 02 c0       	push   0xc002a4b1
c0010484:	e8 bc a1 00 00       	call   c001a645 <Krnl::panic(char const*)>
c0010489:	83 c4 10             	add    esp,0x10
c001048c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010490:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0010493:	89 38                	mov    DWORD PTR [eax],edi
c0010495:	31 c0                	xor    eax,eax
c0010497:	83 c4 1c             	add    esp,0x1c
c001049a:	5b                   	pop    ebx
c001049b:	5e                   	pop    esi
c001049c:	5f                   	pop    edi
c001049d:	5d                   	pop    ebp
c001049e:	c3                   	ret    
c001049f:	90                   	nop

c00104a0 <Pipe::Pipe(int)>:
c00104a0:	83 ec 0c             	sub    esp,0xc
c00104a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104a7:	83 ec 08             	sub    esp,0x8
c00104aa:	6a 00                	push   0x0
c00104ac:	50                   	push   eax
c00104ad:	e8 56 12 00 00       	call   c0011708 <UnixFile::UnixFile(int)>
c00104b2:	83 c4 10             	add    esp,0x10
c00104b5:	ba d8 a4 02 c0       	mov    edx,0xc002a4d8
c00104ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104be:	89 10                	mov    DWORD PTR [eax],edx
c00104c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104c4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00104c8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00104cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104cf:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00104d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104da:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00104e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00104e5:	83 ec 0c             	sub    esp,0xc
c00104e8:	50                   	push   eax
c00104e9:	e8 5d f3 ff ff       	call   c000f84b <malloc>
c00104ee:	83 c4 10             	add    esp,0x10
c00104f1:	89 c2                	mov    edx,eax
c00104f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104f7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00104fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104fe:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010502:	90                   	nop
c0010503:	83 c4 0c             	add    esp,0xc
c0010506:	c3                   	ret    
c0010507:	90                   	nop

c0010508 <VgaText::isAtty()>:
c0010508:	b0 01                	mov    al,0x1
c001050a:	c3                   	ret    
c001050b:	90                   	nop

c001050c <VgaText::~VgaText()>:
c001050c:	83 ec 0c             	sub    esp,0xc
c001050f:	ba 94 a5 02 c0       	mov    edx,0xc002a594
c0010514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010518:	89 10                	mov    DWORD PTR [eax],edx
c001051a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001051e:	83 ec 0c             	sub    esp,0xc
c0010521:	50                   	push   eax
c0010522:	e8 c3 13 00 00       	call   c00118ea <UnixFile::~UnixFile()>
c0010527:	83 c4 10             	add    esp,0x10
c001052a:	90                   	nop
c001052b:	83 c4 0c             	add    esp,0xc
c001052e:	c3                   	ret    
c001052f:	90                   	nop

c0010530 <VgaText::~VgaText()>:
c0010530:	83 ec 0c             	sub    esp,0xc
c0010533:	83 ec 0c             	sub    esp,0xc
c0010536:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001053a:	e8 cd ff ff ff       	call   c001050c <VgaText::~VgaText()>
c001053f:	83 c4 10             	add    esp,0x10
c0010542:	83 ec 08             	sub    esp,0x8
c0010545:	68 60 12 00 00       	push   0x1260
c001054a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001054e:	e8 d4 28 00 00       	call   c0012e27 <operator delete(void*, unsigned long)>
c0010553:	83 c4 10             	add    esp,0x10
c0010556:	83 c4 0c             	add    esp,0xc
c0010559:	c3                   	ret    

c001055a <VgaText::read(unsigned long long, void*, int*)>:
c001055a:	83 ec 10             	sub    esp,0x10
c001055d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010561:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010569:	e8 bc 5d 00 00       	call   c001632a <readKeyboard(VgaText*, char*, unsigned long)>
c001056e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010572:	89 02                	mov    DWORD PTR [edx],eax
c0010574:	31 c0                	xor    eax,eax
c0010576:	83 c4 1c             	add    esp,0x1c
c0010579:	c3                   	ret    

c001057a <setTerminalScrollLock(bool)>:
c001057a:	c3                   	ret    

c001057b <addToTerminalCycle(VgaText*)>:
c001057b:	8b 15 a0 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e6a0
c0010581:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010585:	85 d2                	test   edx,edx
c0010587:	75 0c                	jne    c0010595 <addToTerminalCycle(VgaText*)+0x1a>
c0010589:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c001058f:	a3 a0 e6 02 c0       	mov    ds:0xc002e6a0,eax
c0010594:	c3                   	ret    
c0010595:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c001059b:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c00105a1:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c00105a7:	c3                   	ret    

c00105a8 <installVgaTextImplementation()>:
c00105a8:	83 ec 10             	sub    esp,0x10
c00105ab:	6a 20                	push   0x20
c00105ad:	6a 00                	push   0x0
c00105af:	68 80 e6 02 c0       	push   0xc002e680
c00105b4:	e8 c7 01 ff ff       	call   c0000780 <memset>
c00105b9:	83 c4 1c             	add    esp,0x1c
c00105bc:	c3                   	ret    

c00105bd <scrollTerminalScrollLock(int)>:
c00105bd:	c3                   	ret    

c00105be <VgaText::load()>:
c00105be:	53                   	push   ebx
c00105bf:	31 c0                	xor    eax,eax
c00105c1:	83 ec 58             	sub    esp,0x58
c00105c4:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00105c8:	89 e2                	mov    edx,esp
c00105ca:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00105ce:	40                   	inc    eax
c00105cf:	83 f8 50             	cmp    eax,0x50
c00105d2:	75 f6                	jne    c00105ca <VgaText::load()+0xc>
c00105d4:	31 c0                	xor    eax,eax
c00105d6:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c00105dd:	84 c9                	test   cl,cl
c00105df:	74 06                	je     c00105e7 <VgaText::load()+0x29>
c00105e1:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00105e4:	40                   	inc    eax
c00105e5:	eb ef                	jmp    c00105d6 <VgaText::load()+0x18>
c00105e7:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c00105ed:	85 c0                	test   eax,eax
c00105ef:	74 09                	je     c00105fa <VgaText::load()+0x3c>
c00105f1:	51                   	push   ecx
c00105f2:	51                   	push   ecx
c00105f3:	52                   	push   edx
c00105f4:	53                   	push   ebx
c00105f5:	ff d0                	call   eax
c00105f7:	83 c4 10             	add    esp,0x10
c00105fa:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c0010600:	85 c0                	test   eax,eax
c0010602:	74 09                	je     c001060d <VgaText::load()+0x4f>
c0010604:	83 ec 0c             	sub    esp,0xc
c0010607:	53                   	push   ebx
c0010608:	ff d0                	call   eax
c001060a:	83 c4 10             	add    esp,0x10
c001060d:	83 c4 58             	add    esp,0x58
c0010610:	5b                   	pop    ebx
c0010611:	c3                   	ret    

c0010612 <VgaText::updateCursor()>:
c0010612:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010616:	39 05 a4 e6 02 c0    	cmp    DWORD PTR ds:0xc002e6a4,eax
c001061c:	75 0c                	jne    c001062a <VgaText::updateCursor()+0x18>
c001061e:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c0010624:	85 c0                	test   eax,eax
c0010626:	74 02                	je     c001062a <VgaText::updateCursor()+0x18>
c0010628:	ff e0                	jmp    eax
c001062a:	c3                   	ret    
c001062b:	90                   	nop

c001062c <VgaText::showCursor(bool)>:
c001062c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010630:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010634:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c001063a:	c3                   	ret    
c001063b:	90                   	nop

c001063c <VgaText::disableBlink(bool)>:
c001063c:	56                   	push   esi
c001063d:	53                   	push   ebx
c001063e:	51                   	push   ecx
c001063f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010643:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010647:	39 1d a4 e6 02 c0    	cmp    DWORD PTR ds:0xc002e6a4,ebx
c001064d:	75 18                	jne    c0010667 <VgaText::disableBlink(bool)+0x2b>
c001064f:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c0010655:	85 c0                	test   eax,eax
c0010657:	74 0e                	je     c0010667 <VgaText::disableBlink(bool)+0x2b>
c0010659:	89 f1                	mov    ecx,esi
c001065b:	52                   	push   edx
c001065c:	52                   	push   edx
c001065d:	0f b6 d1             	movzx  edx,cl
c0010660:	52                   	push   edx
c0010661:	53                   	push   ebx
c0010662:	ff d0                	call   eax
c0010664:	83 c4 10             	add    esp,0x10
c0010667:	89 f0                	mov    eax,esi
c0010669:	83 f0 01             	xor    eax,0x1
c001066c:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c0010672:	58                   	pop    eax
c0010673:	5b                   	pop    ebx
c0010674:	5e                   	pop    esi
c0010675:	c3                   	ret    

c0010676 <VgaText::doANSI_SGR(int)>:
c0010676:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001067a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001067e:	85 d2                	test   edx,edx
c0010680:	75 14                	jne    c0010696 <VgaText::doANSI_SGR(int)+0x20>
c0010682:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c0010688:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001068e:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c0010694:	eb 65                	jmp    c00106fb <VgaText::doANSI_SGR(int)+0x85>
c0010696:	83 fa 07             	cmp    edx,0x7
c0010699:	75 14                	jne    c00106af <VgaText::doANSI_SGR(int)+0x39>
c001069b:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c00106a1:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c00106a7:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c00106ad:	eb 4c                	jmp    c00106fb <VgaText::doANSI_SGR(int)+0x85>
c00106af:	83 fa 1b             	cmp    edx,0x1b
c00106b2:	74 ce                	je     c0010682 <VgaText::doANSI_SGR(int)+0xc>
c00106b4:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00106b7:	83 f9 07             	cmp    ecx,0x7
c00106ba:	77 09                	ja     c00106c5 <VgaText::doANSI_SGR(int)+0x4f>
c00106bc:	8b 14 8d 20 d5 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2ae0]
c00106c3:	eb 20                	jmp    c00106e5 <VgaText::doANSI_SGR(int)+0x6f>
c00106c5:	8d 4a d8             	lea    ecx,[edx-0x28]
c00106c8:	83 f9 07             	cmp    ecx,0x7
c00106cb:	77 09                	ja     c00106d6 <VgaText::doANSI_SGR(int)+0x60>
c00106cd:	8b 14 8d 20 d5 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2ae0]
c00106d4:	eb 25                	jmp    c00106fb <VgaText::doANSI_SGR(int)+0x85>
c00106d6:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00106d9:	83 f9 07             	cmp    ecx,0x7
c00106dc:	77 0e                	ja     c00106ec <VgaText::doANSI_SGR(int)+0x76>
c00106de:	8b 14 95 d8 d3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2c28]
c00106e5:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00106eb:	c3                   	ret    
c00106ec:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00106ef:	83 f9 07             	cmp    ecx,0x7
c00106f2:	77 0d                	ja     c0010701 <VgaText::doANSI_SGR(int)+0x8b>
c00106f4:	8b 14 95 b0 d3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2c50]
c00106fb:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010701:	c3                   	ret    

c0010702 <VgaText::setDefaultBgColour(VgaColour)>:
c0010702:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010706:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001070a:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c0010710:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010716:	c3                   	ret    
c0010717:	90                   	nop

c0010718 <VgaText::setDefaultFgColour(VgaColour)>:
c0010718:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001071c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010720:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c0010726:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001072c:	c3                   	ret    
c001072d:	90                   	nop

c001072e <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c001072e:	53                   	push   ebx
c001072f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010733:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010737:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001073b:	51                   	push   ecx
c001073c:	e8 c1 ff ff ff       	call   c0010702 <VgaText::setDefaultBgColour(VgaColour)>
c0010741:	58                   	pop    eax
c0010742:	5a                   	pop    edx
c0010743:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010747:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001074b:	5b                   	pop    ebx
c001074c:	eb ca                	jmp    c0010718 <VgaText::setDefaultFgColour(VgaColour)>

c001074e <VgaText::combineColours(unsigned char, unsigned char)>:
c001074e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010752:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010757:	83 e0 0f             	and    eax,0xf
c001075a:	c1 e2 04             	shl    edx,0x4
c001075d:	09 d0                	or     eax,edx
c001075f:	c3                   	ret    

c0010760 <VgaText::scrollScreen()>:
c0010760:	57                   	push   edi
c0010761:	56                   	push   esi
c0010762:	be 01 00 00 00       	mov    esi,0x1
c0010767:	53                   	push   ebx
c0010768:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001076c:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0010772:	31 ff                	xor    edi,edi
c0010774:	01 d9                	add    ecx,ebx
c0010776:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c0010779:	83 fe 17             	cmp    esi,0x17
c001077c:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c0010782:	75 28                	jne    c00107ac <VgaText::scrollScreen()+0x4c>
c0010784:	f7 c7 01 00 00 00    	test   edi,0x1
c001078a:	74 1c                	je     c00107a8 <VgaText::scrollScreen()+0x48>
c001078c:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c0010793:	50                   	push   eax
c0010794:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c001079b:	50                   	push   eax
c001079c:	e8 ad ff ff ff       	call   c001074e <VgaText::combineColours(unsigned char, unsigned char)>
c00107a1:	5a                   	pop    edx
c00107a2:	5a                   	pop    edx
c00107a3:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c00107a6:	eb 04                	jmp    c00107ac <VgaText::scrollScreen()+0x4c>
c00107a8:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c00107ac:	47                   	inc    edi
c00107ad:	41                   	inc    ecx
c00107ae:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00107b4:	75 c0                	jne    c0010776 <VgaText::scrollScreen()+0x16>
c00107b6:	46                   	inc    esi
c00107b7:	83 fe 18             	cmp    esi,0x18
c00107ba:	75 b0                	jne    c001076c <VgaText::scrollScreen()+0xc>
c00107bc:	39 1d a4 e6 02 c0    	cmp    DWORD PTR ds:0xc002e6a4,ebx
c00107c2:	75 24                	jne    c00107e8 <VgaText::scrollScreen()+0x88>
c00107c4:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00107cb:	74 08                	je     c00107d5 <VgaText::scrollScreen()+0x75>
c00107cd:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c00107d3:	eb 13                	jmp    c00107e8 <VgaText::scrollScreen()+0x88>
c00107d5:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c00107db:	85 c0                	test   eax,eax
c00107dd:	74 09                	je     c00107e8 <VgaText::scrollScreen()+0x88>
c00107df:	83 ec 0c             	sub    esp,0xc
c00107e2:	53                   	push   ebx
c00107e3:	ff d0                	call   eax
c00107e5:	83 c4 10             	add    esp,0x10
c00107e8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00107ec:	5b                   	pop    ebx
c00107ed:	5e                   	pop    esi
c00107ee:	5f                   	pop    edi
c00107ef:	e9 1e fe ff ff       	jmp    c0010612 <VgaText::updateCursor()>

c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>:
c00107f4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00107f9:	c1 e0 08             	shl    eax,0x8
c00107fc:	89 c2                	mov    edx,eax
c00107fe:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010803:	09 d0                	or     eax,edx
c0010805:	c3                   	ret    

c0010806 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010806:	53                   	push   ebx
c0010807:	83 ec 08             	sub    esp,0x8
c001080a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001080e:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010813:	50                   	push   eax
c0010814:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010819:	50                   	push   eax
c001081a:	e8 2f ff ff ff       	call   c001074e <VgaText::combineColours(unsigned char, unsigned char)>
c001081f:	5a                   	pop    edx
c0010820:	0f b6 c0             	movzx  eax,al
c0010823:	5b                   	pop    ebx
c0010824:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010829:	50                   	push   eax
c001082a:	53                   	push   ebx
c001082b:	e8 c4 ff ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010830:	5a                   	pop    edx
c0010831:	5a                   	pop    edx
c0010832:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010838:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c001083c:	0f b7 d2             	movzx  edx,dx
c001083f:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c0010844:	39 0d a4 e6 02 c0    	cmp    DWORD PTR ds:0xc002e6a4,ecx
c001084a:	75 14                	jne    c0010860 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c001084c:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c0010852:	85 c0                	test   eax,eax
c0010854:	74 0a                	je     c0010860 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010856:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001085a:	83 c4 08             	add    esp,0x8
c001085d:	5b                   	pop    ebx
c001085e:	ff e0                	jmp    eax
c0010860:	83 c4 08             	add    esp,0x8
c0010863:	5b                   	pop    ebx
c0010864:	c3                   	ret    
c0010865:	90                   	nop

c0010866 <VgaText::getCursorX()>:
c0010866:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001086a:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c0010870:	c3                   	ret    
c0010871:	90                   	nop

c0010872 <VgaText::getCursorY()>:
c0010872:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010876:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c001087c:	c3                   	ret    
c001087d:	90                   	nop

c001087e <VgaText::setCursor(int, int)>:
c001087e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010882:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010886:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c001088c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010890:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c0010896:	e9 77 fd ff ff       	jmp    c0010612 <VgaText::updateCursor()>
c001089b:	90                   	nop

c001089c <VgaText::setCursorX(int)>:
c001089c:	83 ec 10             	sub    esp,0x10
c001089f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108a3:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c00108a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108ad:	50                   	push   eax
c00108ae:	e8 cb ff ff ff       	call   c001087e <VgaText::setCursor(int, int)>
c00108b3:	83 c4 1c             	add    esp,0x1c
c00108b6:	c3                   	ret    
c00108b7:	90                   	nop

c00108b8 <VgaText::setCursorY(int)>:
c00108b8:	83 ec 10             	sub    esp,0x10
c00108bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108bf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00108c3:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c00108c9:	50                   	push   eax
c00108ca:	e8 af ff ff ff       	call   c001087e <VgaText::setCursor(int, int)>
c00108cf:	83 c4 1c             	add    esp,0x1c
c00108d2:	c3                   	ret    
c00108d3:	90                   	nop

c00108d4 <VgaText::incrementCursor(bool)>:
c00108d4:	56                   	push   esi
c00108d5:	53                   	push   ebx
c00108d6:	51                   	push   ecx
c00108d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108db:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00108df:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c00108e5:	40                   	inc    eax
c00108e6:	83 f8 50             	cmp    eax,0x50
c00108e9:	74 08                	je     c00108f3 <VgaText::incrementCursor(bool)+0x1f>
c00108eb:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c00108f1:	eb 33                	jmp    c0010926 <VgaText::incrementCursor(bool)+0x52>
c00108f3:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00108f9:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010903:	8d 50 01             	lea    edx,[eax+0x1]
c0010906:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c001090c:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010912:	75 12                	jne    c0010926 <VgaText::incrementCursor(bool)+0x52>
c0010914:	83 ec 0c             	sub    esp,0xc
c0010917:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c001091d:	53                   	push   ebx
c001091e:	e8 3d fe ff ff       	call   c0010760 <VgaText::scrollScreen()>
c0010923:	83 c4 10             	add    esp,0x10
c0010926:	89 f0                	mov    eax,esi
c0010928:	84 c0                	test   al,al
c001092a:	74 0c                	je     c0010938 <VgaText::incrementCursor(bool)+0x64>
c001092c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010930:	5a                   	pop    edx
c0010931:	5b                   	pop    ebx
c0010932:	5e                   	pop    esi
c0010933:	e9 da fc ff ff       	jmp    c0010612 <VgaText::updateCursor()>
c0010938:	58                   	pop    eax
c0010939:	5b                   	pop    ebx
c001093a:	5e                   	pop    esi
c001093b:	c3                   	ret    

c001093c <VgaText::updateRAMUsageDisplay(int)>:
c001093c:	56                   	push   esi
c001093d:	8b 35 00 d5 02 c0    	mov    esi,DWORD PTR ds:0xc002d500
c0010943:	53                   	push   ebx
c0010944:	bb 0a 00 00 00       	mov    ebx,0xa
c0010949:	6a 0f                	push   0xf
c001094b:	6a 00                	push   0x0
c001094d:	e8 fc fd ff ff       	call   c001074e <VgaText::combineColours(unsigned char, unsigned char)>
c0010952:	5a                   	pop    edx
c0010953:	59                   	pop    ecx
c0010954:	0f b6 c8             	movzx  ecx,al
c0010957:	51                   	push   ecx
c0010958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001095c:	99                   	cdq    
c001095d:	f7 fb                	idiv   ebx
c001095f:	89 d3                	mov    ebx,edx
c0010961:	83 c0 30             	add    eax,0x30
c0010964:	83 c3 30             	add    ebx,0x30
c0010967:	0f be c0             	movsx  eax,al
c001096a:	0f b6 db             	movzx  ebx,bl
c001096d:	50                   	push   eax
c001096e:	e8 81 fe ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010973:	5a                   	pop    edx
c0010974:	5a                   	pop    edx
c0010975:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c001097c:	51                   	push   ecx
c001097d:	53                   	push   ebx
c001097e:	e8 71 fe ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010983:	5b                   	pop    ebx
c0010984:	5a                   	pop    edx
c0010985:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c001098c:	51                   	push   ecx
c001098d:	6a 25                	push   0x25
c001098f:	e8 60 fe ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010994:	59                   	pop    ecx
c0010995:	5b                   	pop    ebx
c0010996:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c001099d:	5b                   	pop    ebx
c001099e:	5e                   	pop    esi
c001099f:	c3                   	ret    

c00109a0 <VgaText::updateDiskUsage()>:
c00109a0:	55                   	push   ebp
c00109a1:	bd 10 27 00 00       	mov    ebp,0x2710
c00109a6:	57                   	push   edi
c00109a7:	8b 3d 00 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d500
c00109ad:	56                   	push   esi
c00109ae:	53                   	push   ebx
c00109af:	6a 0f                	push   0xf
c00109b1:	6a 00                	push   0x0
c00109b3:	e8 96 fd ff ff       	call   c001074e <VgaText::combineColours(unsigned char, unsigned char)>
c00109b8:	5a                   	pop    edx
c00109b9:	0f b6 d8             	movzx  ebx,al
c00109bc:	59                   	pop    ecx
c00109bd:	8b 35 28 29 03 c0    	mov    esi,DWORD PTR ds:0xc0032928
c00109c3:	53                   	push   ebx
c00109c4:	b9 0a 00 00 00       	mov    ecx,0xa
c00109c9:	89 f0                	mov    eax,esi
c00109cb:	99                   	cdq    
c00109cc:	f7 fd                	idiv   ebp
c00109ce:	99                   	cdq    
c00109cf:	f7 f9                	idiv   ecx
c00109d1:	8d 42 30             	lea    eax,[edx+0x30]
c00109d4:	0f b6 c0             	movzx  eax,al
c00109d7:	50                   	push   eax
c00109d8:	e8 17 fe ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c00109dd:	5d                   	pop    ebp
c00109de:	bd e8 03 00 00       	mov    ebp,0x3e8
c00109e3:	5a                   	pop    edx
c00109e4:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c00109e8:	53                   	push   ebx
c00109e9:	89 f0                	mov    eax,esi
c00109eb:	99                   	cdq    
c00109ec:	f7 fd                	idiv   ebp
c00109ee:	99                   	cdq    
c00109ef:	f7 f9                	idiv   ecx
c00109f1:	8d 42 30             	lea    eax,[edx+0x30]
c00109f4:	0f b6 c0             	movzx  eax,al
c00109f7:	50                   	push   eax
c00109f8:	e8 f7 fd ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c00109fd:	5d                   	pop    ebp
c00109fe:	bd 64 00 00 00       	mov    ebp,0x64
c0010a03:	5a                   	pop    edx
c0010a04:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010a0b:	53                   	push   ebx
c0010a0c:	89 f0                	mov    eax,esi
c0010a0e:	99                   	cdq    
c0010a0f:	f7 fd                	idiv   ebp
c0010a11:	99                   	cdq    
c0010a12:	f7 f9                	idiv   ecx
c0010a14:	8d 42 30             	lea    eax,[edx+0x30]
c0010a17:	0f b6 c0             	movzx  eax,al
c0010a1a:	50                   	push   eax
c0010a1b:	e8 d4 fd ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a20:	5d                   	pop    ebp
c0010a21:	5a                   	pop    edx
c0010a22:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010a29:	53                   	push   ebx
c0010a2a:	89 f0                	mov    eax,esi
c0010a2c:	99                   	cdq    
c0010a2d:	f7 f9                	idiv   ecx
c0010a2f:	89 d6                	mov    esi,edx
c0010a31:	99                   	cdq    
c0010a32:	f7 f9                	idiv   ecx
c0010a34:	8d 42 30             	lea    eax,[edx+0x30]
c0010a37:	0f b6 c0             	movzx  eax,al
c0010a3a:	50                   	push   eax
c0010a3b:	e8 b4 fd ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a40:	5d                   	pop    ebp
c0010a41:	5a                   	pop    edx
c0010a42:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a49:	53                   	push   ebx
c0010a4a:	8d 46 30             	lea    eax,[esi+0x30]
c0010a4d:	0f b6 f0             	movzx  esi,al
c0010a50:	56                   	push   esi
c0010a51:	e8 9e fd ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a56:	5e                   	pop    esi
c0010a57:	8b 35 24 29 03 c0    	mov    esi,DWORD PTR ds:0xc0032924
c0010a5d:	5d                   	pop    ebp
c0010a5e:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010a65:	bd 10 27 00 00       	mov    ebp,0x2710
c0010a6a:	53                   	push   ebx
c0010a6b:	89 f0                	mov    eax,esi
c0010a6d:	99                   	cdq    
c0010a6e:	f7 fd                	idiv   ebp
c0010a70:	99                   	cdq    
c0010a71:	f7 f9                	idiv   ecx
c0010a73:	8d 42 30             	lea    eax,[edx+0x30]
c0010a76:	0f b6 c0             	movzx  eax,al
c0010a79:	50                   	push   eax
c0010a7a:	e8 75 fd ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a7f:	5a                   	pop    edx
c0010a80:	5d                   	pop    ebp
c0010a81:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010a88:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a8d:	53                   	push   ebx
c0010a8e:	89 f0                	mov    eax,esi
c0010a90:	99                   	cdq    
c0010a91:	f7 fd                	idiv   ebp
c0010a93:	99                   	cdq    
c0010a94:	f7 f9                	idiv   ecx
c0010a96:	8d 42 30             	lea    eax,[edx+0x30]
c0010a99:	0f b6 c0             	movzx  eax,al
c0010a9c:	50                   	push   eax
c0010a9d:	e8 52 fd ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010aa2:	5a                   	pop    edx
c0010aa3:	5d                   	pop    ebp
c0010aa4:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010aab:	bd 64 00 00 00       	mov    ebp,0x64
c0010ab0:	53                   	push   ebx
c0010ab1:	89 f0                	mov    eax,esi
c0010ab3:	99                   	cdq    
c0010ab4:	f7 fd                	idiv   ebp
c0010ab6:	99                   	cdq    
c0010ab7:	f7 f9                	idiv   ecx
c0010ab9:	83 c2 30             	add    edx,0x30
c0010abc:	0f b6 d2             	movzx  edx,dl
c0010abf:	52                   	push   edx
c0010ac0:	e8 2f fd ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ac5:	5a                   	pop    edx
c0010ac6:	5d                   	pop    ebp
c0010ac7:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010ace:	53                   	push   ebx
c0010acf:	89 f0                	mov    eax,esi
c0010ad1:	99                   	cdq    
c0010ad2:	f7 f9                	idiv   ecx
c0010ad4:	89 d6                	mov    esi,edx
c0010ad6:	99                   	cdq    
c0010ad7:	f7 f9                	idiv   ecx
c0010ad9:	8d 42 30             	lea    eax,[edx+0x30]
c0010adc:	0f b6 c0             	movzx  eax,al
c0010adf:	50                   	push   eax
c0010ae0:	e8 0f fd ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ae5:	5a                   	pop    edx
c0010ae6:	59                   	pop    ecx
c0010ae7:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010aee:	53                   	push   ebx
c0010aef:	8d 46 30             	lea    eax,[esi+0x30]
c0010af2:	0f b6 f0             	movzx  esi,al
c0010af5:	56                   	push   esi
c0010af6:	e8 f9 fc ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010afb:	5b                   	pop    ebx
c0010afc:	5e                   	pop    esi
c0010afd:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010b04:	5b                   	pop    ebx
c0010b05:	5e                   	pop    esi
c0010b06:	5f                   	pop    edi
c0010b07:	5d                   	pop    ebp
c0010b08:	c3                   	ret    
c0010b09:	90                   	nop

c0010b0a <VgaText::updateTitle()>:
c0010b0a:	53                   	push   ebx
c0010b0b:	31 c0                	xor    eax,eax
c0010b0d:	83 ec 58             	sub    esp,0x58
c0010b10:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010b14:	89 e1                	mov    ecx,esp
c0010b16:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010b1a:	40                   	inc    eax
c0010b1b:	83 f8 50             	cmp    eax,0x50
c0010b1e:	75 f6                	jne    c0010b16 <VgaText::updateTitle()+0xc>
c0010b20:	31 c0                	xor    eax,eax
c0010b22:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010b29:	84 db                	test   bl,bl
c0010b2b:	74 06                	je     c0010b33 <VgaText::updateTitle()+0x29>
c0010b2d:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b30:	40                   	inc    eax
c0010b31:	eb ef                	jmp    c0010b22 <VgaText::updateTitle()+0x18>
c0010b33:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010b39:	85 c0                	test   eax,eax
c0010b3b:	74 09                	je     c0010b46 <VgaText::updateTitle()+0x3c>
c0010b3d:	53                   	push   ebx
c0010b3e:	53                   	push   ebx
c0010b3f:	51                   	push   ecx
c0010b40:	52                   	push   edx
c0010b41:	ff d0                	call   eax
c0010b43:	83 c4 10             	add    esp,0x10
c0010b46:	e8 55 fe ff ff       	call   c00109a0 <VgaText::updateDiskUsage()>
c0010b4b:	83 c4 58             	add    esp,0x58
c0010b4e:	5b                   	pop    ebx
c0010b4f:	c3                   	ret    

c0010b50 <VgaText::setTitleTextColour(VgaColour)>:
c0010b50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b54:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b58:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010b5e:	eb aa                	jmp    c0010b0a <VgaText::updateTitle()>

c0010b60 <VgaText::setTitleColour(VgaColour)>:
c0010b60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b64:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b68:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010b6e:	eb 9a                	jmp    c0010b0a <VgaText::updateTitle()>

c0010b70 <VgaText::setTitle(char*)>:
c0010b70:	53                   	push   ebx
c0010b71:	83 ec 10             	sub    esp,0x10
c0010b74:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010b78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b7c:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010b82:	50                   	push   eax
c0010b83:	e8 b4 fc fe ff       	call   c000083c <strcpy>
c0010b88:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010b8c:	83 c4 18             	add    esp,0x18
c0010b8f:	5b                   	pop    ebx
c0010b90:	e9 75 ff ff ff       	jmp    c0010b0a <VgaText::updateTitle()>
c0010b95:	90                   	nop

c0010b96 <VgaText::decrementCursor(bool)>:
c0010b96:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010b9a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010b9e:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010ba4:	85 c0                	test   eax,eax
c0010ba6:	74 07                	je     c0010baf <VgaText::decrementCursor(bool)+0x19>
c0010ba8:	48                   	dec    eax
c0010ba9:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010baf:	84 c9                	test   cl,cl
c0010bb1:	74 09                	je     c0010bbc <VgaText::decrementCursor(bool)+0x26>
c0010bb3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010bb7:	e9 56 fa ff ff       	jmp    c0010612 <VgaText::updateCursor()>
c0010bbc:	c3                   	ret    
c0010bbd:	90                   	nop

c0010bbe <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010bbe:	53                   	push   ebx
c0010bbf:	83 ec 08             	sub    esp,0x8
c0010bc2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010bc6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010bca:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010bce:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010bd2:	3c 07                	cmp    al,0x7
c0010bd4:	75 2a                	jne    c0010c00 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010bd6:	a1 58 e7 02 c0       	mov    eax,ds:0xc002e758
c0010bdb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010be3:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010beb:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010bf3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010bf7:	83 c4 08             	add    esp,0x8
c0010bfa:	5b                   	pop    ebx
c0010bfb:	e9 0c 31 00 00       	jmp    c0013d0c <Buzzer::beep(int, int, bool)>
c0010c00:	3c 0d                	cmp    al,0xd
c0010c02:	75 0c                	jne    c0010c10 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010c04:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c0e:	eb 3b                	jmp    c0010c4b <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010c10:	3c 0a                	cmp    al,0xa
c0010c12:	75 40                	jne    c0010c54 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010c14:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010c1a:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c24:	8d 50 01             	lea    edx,[eax+0x1]
c0010c27:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010c2d:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010c33:	75 12                	jne    c0010c47 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010c35:	83 ec 0c             	sub    esp,0xc
c0010c38:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010c3e:	53                   	push   ebx
c0010c3f:	e8 1c fb ff ff       	call   c0010760 <VgaText::scrollScreen()>
c0010c44:	83 c4 10             	add    esp,0x10
c0010c47:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010c4b:	83 c4 08             	add    esp,0x8
c0010c4e:	5b                   	pop    ebx
c0010c4f:	e9 be f9 ff ff       	jmp    c0010612 <VgaText::updateCursor()>
c0010c54:	3c 08                	cmp    al,0x8
c0010c56:	75 31                	jne    c0010c89 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010c58:	50                   	push   eax
c0010c59:	50                   	push   eax
c0010c5a:	6a 01                	push   0x1
c0010c5c:	53                   	push   ebx
c0010c5d:	e8 34 ff ff ff       	call   c0010b96 <VgaText::decrementCursor(bool)>
c0010c62:	5a                   	pop    edx
c0010c63:	59                   	pop    ecx
c0010c64:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010c6a:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010c70:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010c76:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010c7c:	6a 20                	push   0x20
c0010c7e:	53                   	push   ebx
c0010c7f:	e8 82 fb ff ff       	call   c0010806 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c84:	83 c4 28             	add    esp,0x28
c0010c87:	5b                   	pop    ebx
c0010c88:	c3                   	ret    
c0010c89:	83 ec 08             	sub    esp,0x8
c0010c8c:	0f be c0             	movsx  eax,al
c0010c8f:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010c95:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010c9b:	51                   	push   ecx
c0010c9c:	52                   	push   edx
c0010c9d:	50                   	push   eax
c0010c9e:	53                   	push   ebx
c0010c9f:	e8 62 fb ff ff       	call   c0010806 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010ca4:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010ca8:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010cb0:	83 c4 28             	add    esp,0x28
c0010cb3:	5b                   	pop    ebx
c0010cb4:	e9 1b fc ff ff       	jmp    c00108d4 <VgaText::incrementCursor(bool)>
c0010cb9:	90                   	nop

c0010cba <VgaText::isShowingCursor()>:
c0010cba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cbe:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010cc4:	c3                   	ret    
c0010cc5:	90                   	nop

c0010cc6 <VgaText::isBlinkDisabled()>:
c0010cc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cca:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010cd0:	83 f0 01             	xor    eax,0x1
c0010cd3:	c3                   	ret    

c0010cd4 <VgaText::setCursorHeight(int)>:
c0010cd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cd8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010cdc:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010ce2:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010ce9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010ced:	e9 3a f9 ff ff       	jmp    c001062c <VgaText::showCursor(bool)>

c0010cf2 <VgaText::getCursorHeight()>:
c0010cf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cf6:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010cfc:	c3                   	ret    

c0010cfd <setActiveTerminal(VgaText*)>:
c0010cfd:	53                   	push   ebx
c0010cfe:	83 ec 08             	sub    esp,0x8
c0010d01:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d05:	85 db                	test   ebx,ebx
c0010d07:	75 11                	jne    c0010d1a <setActiveTerminal(VgaText*)+0x1d>
c0010d09:	c7 44 24 10 ec a4 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a4ec
c0010d11:	83 c4 08             	add    esp,0x8
c0010d14:	5b                   	pop    ebx
c0010d15:	e9 2b 99 00 00       	jmp    c001a645 <Krnl::panic(char const*)>
c0010d1a:	50                   	push   eax
c0010d1b:	50                   	push   eax
c0010d1c:	53                   	push   ebx
c0010d1d:	68 fa a4 02 c0       	push   0xc002a4fa
c0010d22:	e8 e0 21 00 00       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0010d27:	a1 a4 e6 02 c0       	mov    eax,ds:0xc002e6a4
c0010d2c:	83 c4 10             	add    esp,0x10
c0010d2f:	85 c0                	test   eax,eax
c0010d31:	74 0c                	je     c0010d3f <setActiveTerminal(VgaText*)+0x42>
c0010d33:	83 ec 0c             	sub    esp,0xc
c0010d36:	50                   	push   eax
c0010d37:	e8 d6 f8 ff ff       	call   c0010612 <VgaText::updateCursor()>
c0010d3c:	83 c4 10             	add    esp,0x10
c0010d3f:	89 1d a4 e6 02 c0    	mov    DWORD PTR ds:0xc002e6a4,ebx
c0010d45:	51                   	push   ecx
c0010d46:	51                   	push   ecx
c0010d47:	53                   	push   ebx
c0010d48:	68 12 a5 02 c0       	push   0xc002a512
c0010d4d:	e8 b5 21 00 00       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0010d52:	83 c4 0c             	add    esp,0xc
c0010d55:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010d5b:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010d61:	53                   	push   ebx
c0010d62:	e8 17 fb ff ff       	call   c001087e <VgaText::setCursor(int, int)>
c0010d67:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d6a:	e8 57 ff ff ff       	call   c0010cc6 <VgaText::isBlinkDisabled()>
c0010d6f:	5a                   	pop    edx
c0010d70:	0f b6 c0             	movzx  eax,al
c0010d73:	59                   	pop    ecx
c0010d74:	50                   	push   eax
c0010d75:	53                   	push   ebx
c0010d76:	e8 c1 f8 ff ff       	call   c001063c <VgaText::disableBlink(bool)>
c0010d7b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d7e:	e8 6f ff ff ff       	call   c0010cf2 <VgaText::getCursorHeight()>
c0010d83:	5a                   	pop    edx
c0010d84:	59                   	pop    ecx
c0010d85:	50                   	push   eax
c0010d86:	53                   	push   ebx
c0010d87:	e8 48 ff ff ff       	call   c0010cd4 <VgaText::setCursorHeight(int)>
c0010d8c:	83 c4 10             	add    esp,0x10
c0010d8f:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010d96:	75 0a                	jne    c0010da2 <setActiveTerminal(VgaText*)+0xa5>
c0010d98:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010da2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010da6:	83 c4 08             	add    esp,0x8
c0010da9:	5b                   	pop    ebx
c0010daa:	e9 0f f8 ff ff       	jmp    c00105be <VgaText::load()>

c0010daf <doTerminalCycle()>:
c0010daf:	83 ec 18             	sub    esp,0x18
c0010db2:	a1 a0 e6 02 c0       	mov    eax,ds:0xc002e6a0
c0010db7:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010dbd:	50                   	push   eax
c0010dbe:	a3 a0 e6 02 c0       	mov    ds:0xc002e6a0,eax
c0010dc3:	e8 35 ff ff ff       	call   c0010cfd <setActiveTerminal(VgaText*)>
c0010dc8:	83 c4 1c             	add    esp,0x1c
c0010dcb:	c3                   	ret    

c0010dcc <VgaText::doUpdate()>:
c0010dcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dd0:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010dd6:	85 c0                	test   eax,eax
c0010dd8:	74 02                	je     c0010ddc <VgaText::doUpdate()+0x10>
c0010dda:	ff e0                	jmp    eax
c0010ddc:	c3                   	ret    
c0010ddd:	90                   	nop

c0010dde <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010dde:	55                   	push   ebp
c0010ddf:	57                   	push   edi
c0010de0:	56                   	push   esi
c0010de1:	53                   	push   ebx
c0010de2:	83 ec 1c             	sub    esp,0x1c
c0010de5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010de9:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010dee:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010df5:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010df8:	50                   	push   eax
c0010df9:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010dfe:	50                   	push   eax
c0010dff:	e8 4a f9 ff ff       	call   c001074e <VgaText::combineColours(unsigned char, unsigned char)>
c0010e04:	59                   	pop    ecx
c0010e05:	0f b6 c0             	movzx  eax,al
c0010e08:	5b                   	pop    ebx
c0010e09:	31 c9                	xor    ecx,ecx
c0010e0b:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e13:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010e17:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e21:	0f b7 db             	movzx  ebx,bx
c0010e24:	01 db                	add    ebx,ebx
c0010e26:	01 fb                	add    ebx,edi
c0010e28:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010e2b:	84 c0                	test   al,al
c0010e2d:	0f 84 38 01 00 00    	je     c0010f6b <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010e33:	3c 0d                	cmp    al,0xd
c0010e35:	75 0f                	jne    c0010e46 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010e37:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e41:	e9 1f 01 00 00       	jmp    c0010f65 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e46:	3c 0a                	cmp    al,0xa
c0010e48:	75 5b                	jne    c0010ea5 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010e4a:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010e50:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e5a:	8d 48 01             	lea    ecx,[eax+0x1]
c0010e5d:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010e63:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010e69:	75 12                	jne    c0010e7d <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010e6b:	83 ec 0c             	sub    esp,0xc
c0010e6e:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010e74:	55                   	push   ebp
c0010e75:	e8 e6 f8 ff ff       	call   c0010760 <VgaText::scrollScreen()>
c0010e7a:	83 c4 10             	add    esp,0x10
c0010e7d:	83 ec 0c             	sub    esp,0xc
c0010e80:	55                   	push   ebp
c0010e81:	e8 8c f7 ff ff       	call   c0010612 <VgaText::updateCursor()>
c0010e86:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e8e:	83 c4 10             	add    esp,0x10
c0010e91:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e97:	31 c9                	xor    ecx,ecx
c0010e99:	0f b7 db             	movzx  ebx,bx
c0010e9c:	01 db                	add    ebx,ebx
c0010e9e:	01 fb                	add    ebx,edi
c0010ea0:	e9 c0 00 00 00       	jmp    c0010f65 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ea5:	3c 08                	cmp    al,0x8
c0010ea7:	75 4e                	jne    c0010ef7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010ea9:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010ead:	53                   	push   ebx
c0010eae:	53                   	push   ebx
c0010eaf:	6a 01                	push   0x1
c0010eb1:	55                   	push   ebp
c0010eb2:	e8 df fc ff ff       	call   c0010b96 <VgaText::decrementCursor(bool)>
c0010eb7:	58                   	pop    eax
c0010eb8:	5a                   	pop    edx
c0010eb9:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010ebf:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010ec5:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010ecb:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010ed1:	6a 20                	push   0x20
c0010ed3:	55                   	push   ebp
c0010ed4:	e8 2d f9 ff ff       	call   c0010806 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010ed9:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010ee1:	83 c4 20             	add    esp,0x20
c0010ee4:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010eea:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010eee:	0f b7 db             	movzx  ebx,bx
c0010ef1:	01 db                	add    ebx,ebx
c0010ef3:	01 fb                	add    ebx,edi
c0010ef5:	eb 6e                	jmp    c0010f65 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ef7:	51                   	push   ecx
c0010ef8:	51                   	push   ecx
c0010ef9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010efd:	50                   	push   eax
c0010efe:	e8 f1 f8 ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010f03:	83 c4 10             	add    esp,0x10
c0010f06:	66 89 03             	mov    WORD PTR [ebx],ax
c0010f09:	39 2d a4 e6 02 c0    	cmp    DWORD PTR ds:0xc002e6a4,ebp
c0010f0f:	75 2a                	jne    c0010f3b <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f11:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010f17:	85 c0                	test   eax,eax
c0010f19:	74 20                	je     c0010f3b <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f1b:	52                   	push   edx
c0010f1c:	52                   	push   edx
c0010f1d:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f23:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f29:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f2d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f31:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010f34:	51                   	push   ecx
c0010f35:	55                   	push   ebp
c0010f36:	ff d0                	call   eax
c0010f38:	83 c4 20             	add    esp,0x20
c0010f3b:	83 c3 02             	add    ebx,0x2
c0010f3e:	50                   	push   eax
c0010f3f:	50                   	push   eax
c0010f40:	6a 00                	push   0x0
c0010f42:	55                   	push   ebp
c0010f43:	e8 8c f9 ff ff       	call   c00108d4 <VgaText::incrementCursor(bool)>
c0010f48:	83 c4 10             	add    esp,0x10
c0010f4b:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010f52:	75 0f                	jne    c0010f63 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010f54:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f5c:	0f b7 db             	movzx  ebx,bx
c0010f5f:	01 db                	add    ebx,ebx
c0010f61:	01 fb                	add    ebx,edi
c0010f63:	b1 01                	mov    cl,0x1
c0010f65:	46                   	inc    esi
c0010f66:	e9 bd fe ff ff       	jmp    c0010e28 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010f6b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010f6f:	83 ec 0c             	sub    esp,0xc
c0010f72:	55                   	push   ebp
c0010f73:	e8 9a f6 ff ff       	call   c0010612 <VgaText::updateCursor()>
c0010f78:	83 c4 10             	add    esp,0x10
c0010f7b:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010f7f:	84 c9                	test   cl,cl
c0010f81:	74 0c                	je     c0010f8f <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010f83:	83 ec 0c             	sub    esp,0xc
c0010f86:	55                   	push   ebp
c0010f87:	e8 40 fe ff ff       	call   c0010dcc <VgaText::doUpdate()>
c0010f8c:	83 c4 10             	add    esp,0x10
c0010f8f:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010f96:	83 c4 1c             	add    esp,0x1c
c0010f99:	5b                   	pop    ebx
c0010f9a:	5e                   	pop    esi
c0010f9b:	5f                   	pop    edi
c0010f9c:	5d                   	pop    ebp
c0010f9d:	c3                   	ret    

c0010f9e <VgaText::clearScreen()>:
c0010f9e:	57                   	push   edi
c0010f9f:	56                   	push   esi
c0010fa0:	31 f6                	xor    esi,esi
c0010fa2:	53                   	push   ebx
c0010fa3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010fa7:	52                   	push   edx
c0010fa8:	6a 00                	push   0x0
c0010faa:	6a 00                	push   0x0
c0010fac:	53                   	push   ebx
c0010fad:	e8 cc f8 ff ff       	call   c001087e <VgaText::setCursor(int, int)>
c0010fb2:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010fb9:	83 c4 10             	add    esp,0x10
c0010fbc:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010fc2:	7e 26                	jle    c0010fea <VgaText::clearScreen()+0x4c>
c0010fc4:	31 ff                	xor    edi,edi
c0010fc6:	50                   	push   eax
c0010fc7:	50                   	push   eax
c0010fc8:	56                   	push   esi
c0010fc9:	57                   	push   edi
c0010fca:	47                   	inc    edi
c0010fcb:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010fd1:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010fd7:	6a 20                	push   0x20
c0010fd9:	53                   	push   ebx
c0010fda:	e8 27 f8 ff ff       	call   c0010806 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010fdf:	83 c4 20             	add    esp,0x20
c0010fe2:	83 ff 50             	cmp    edi,0x50
c0010fe5:	75 df                	jne    c0010fc6 <VgaText::clearScreen()+0x28>
c0010fe7:	46                   	inc    esi
c0010fe8:	eb d2                	jmp    c0010fbc <VgaText::clearScreen()+0x1e>
c0010fea:	83 ec 0c             	sub    esp,0xc
c0010fed:	53                   	push   ebx
c0010fee:	e8 d9 fd ff ff       	call   c0010dcc <VgaText::doUpdate()>
c0010ff3:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010ffa:	83 c4 10             	add    esp,0x10
c0010ffd:	5b                   	pop    ebx
c0010ffe:	5e                   	pop    esi
c0010fff:	5f                   	pop    edi
c0011000:	c3                   	ret    
c0011001:	90                   	nop

c0011002 <VgaText::putchar(char)>:
c0011002:	56                   	push   esi
c0011003:	53                   	push   ebx
c0011004:	83 ec 14             	sub    esp,0x14
c0011007:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001100b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001100f:	3c 5b                	cmp    al,0x5b
c0011011:	75 21                	jne    c0011034 <VgaText::putchar(char)+0x32>
c0011013:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c001101a:	74 28                	je     c0011044 <VgaText::putchar(char)+0x42>
c001101c:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0011025:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c001102f:	e9 e2 00 00 00       	jmp    c0011116 <VgaText::putchar(char)+0x114>
c0011034:	3c 1b                	cmp    al,0x1b
c0011036:	75 0c                	jne    c0011044 <VgaText::putchar(char)+0x42>
c0011038:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c001103f:	e9 d2 00 00 00       	jmp    c0011116 <VgaText::putchar(char)+0x114>
c0011044:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c001104a:	84 c9                	test   cl,cl
c001104c:	0f 84 ab 00 00 00    	je     c00110fd <VgaText::putchar(char)+0xfb>
c0011052:	8d 50 c0             	lea    edx,[eax-0x40]
c0011055:	80 fa 3e             	cmp    dl,0x3e
c0011058:	0f 87 82 00 00 00    	ja     c00110e0 <VgaText::putchar(char)+0xde>
c001105e:	3c 6d                	cmp    al,0x6d
c0011060:	75 4d                	jne    c00110af <VgaText::putchar(char)+0xad>
c0011062:	31 f6                	xor    esi,esi
c0011064:	31 d2                	xor    edx,edx
c0011066:	31 c0                	xor    eax,eax
c0011068:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c001106e:	7e 30                	jle    c00110a0 <VgaText::putchar(char)+0x9e>
c0011070:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0011078:	80 fa 3b             	cmp    dl,0x3b
c001107b:	75 17                	jne    c0011094 <VgaText::putchar(char)+0x92>
c001107d:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0011081:	50                   	push   eax
c0011082:	53                   	push   ebx
c0011083:	e8 ee f5 ff ff       	call   c0010676 <VgaText::doANSI_SGR(int)>
c0011088:	59                   	pop    ecx
c0011089:	31 d2                	xor    edx,edx
c001108b:	58                   	pop    eax
c001108c:	31 c0                	xor    eax,eax
c001108e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0011092:	eb 09                	jmp    c001109d <VgaText::putchar(char)+0x9b>
c0011094:	6b c0 0a             	imul   eax,eax,0xa
c0011097:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c001109b:	88 ca                	mov    dl,cl
c001109d:	46                   	inc    esi
c001109e:	eb c8                	jmp    c0011068 <VgaText::putchar(char)+0x66>
c00110a0:	84 d2                	test   dl,dl
c00110a2:	74 31                	je     c00110d5 <VgaText::putchar(char)+0xd3>
c00110a4:	50                   	push   eax
c00110a5:	53                   	push   ebx
c00110a6:	e8 cb f5 ff ff       	call   c0010676 <VgaText::doANSI_SGR(int)>
c00110ab:	58                   	pop    eax
c00110ac:	5a                   	pop    edx
c00110ad:	eb 26                	jmp    c00110d5 <VgaText::putchar(char)+0xd3>
c00110af:	3c 4a                	cmp    al,0x4a
c00110b1:	75 22                	jne    c00110d5 <VgaText::putchar(char)+0xd3>
c00110b3:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c00110ba:	75 19                	jne    c00110d5 <VgaText::putchar(char)+0xd3>
c00110bc:	83 ec 0c             	sub    esp,0xc
c00110bf:	53                   	push   ebx
c00110c0:	e8 d9 fe ff ff       	call   c0010f9e <VgaText::clearScreen()>
c00110c5:	83 c4 0c             	add    esp,0xc
c00110c8:	6a 00                	push   0x0
c00110ca:	6a 00                	push   0x0
c00110cc:	53                   	push   ebx
c00110cd:	e8 ac f7 ff ff       	call   c001087e <VgaText::setCursor(int, int)>
c00110d2:	83 c4 10             	add    esp,0x10
c00110d5:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c00110de:	eb 36                	jmp    c0011116 <VgaText::putchar(char)+0x114>
c00110e0:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c00110e6:	83 fa 0e             	cmp    edx,0xe
c00110e9:	7f 2b                	jg     c0011116 <VgaText::putchar(char)+0x114>
c00110eb:	8d 4a 01             	lea    ecx,[edx+0x1]
c00110ee:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c00110f4:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c00110fb:	eb 19                	jmp    c0011116 <VgaText::putchar(char)+0x114>
c00110fd:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0011103:	0f be c0             	movsx  eax,al
c0011106:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c001110c:	50                   	push   eax
c001110d:	53                   	push   ebx
c001110e:	e8 ab fa ff ff       	call   c0010bbe <VgaText::putchar(char, VgaColour, VgaColour)>
c0011113:	83 c4 10             	add    esp,0x10
c0011116:	83 c4 14             	add    esp,0x14
c0011119:	5b                   	pop    ebx
c001111a:	5e                   	pop    esi
c001111b:	c3                   	ret    

c001111c <VgaText::puts(char const*)>:
c001111c:	53                   	push   ebx
c001111d:	83 ec 08             	sub    esp,0x8
c0011120:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011124:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0011127:	84 c0                	test   al,al
c0011129:	74 12                	je     c001113d <VgaText::puts(char const*)+0x21>
c001112b:	43                   	inc    ebx
c001112c:	51                   	push   ecx
c001112d:	51                   	push   ecx
c001112e:	50                   	push   eax
c001112f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011133:	e8 ca fe ff ff       	call   c0011002 <VgaText::putchar(char)>
c0011138:	83 c4 10             	add    esp,0x10
c001113b:	eb e7                	jmp    c0011124 <VgaText::puts(char const*)+0x8>
c001113d:	83 c4 08             	add    esp,0x8
c0011140:	5b                   	pop    ebx
c0011141:	c3                   	ret    

c0011142 <VgaText::putx(unsigned int)>:
c0011142:	57                   	push   edi
c0011143:	b9 11 00 00 00       	mov    ecx,0x11
c0011148:	56                   	push   esi
c0011149:	be 2e a5 02 c0       	mov    esi,0xc002a52e
c001114e:	53                   	push   ebx
c001114f:	83 ec 20             	sub    esp,0x20
c0011152:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011156:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c001115a:	fc                   	cld    
c001115b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001115d:	be 08 00 00 00       	mov    esi,0x8
c0011162:	50                   	push   eax
c0011163:	50                   	push   eax
c0011164:	89 d8                	mov    eax,ebx
c0011166:	c1 e3 04             	shl    ebx,0x4
c0011169:	c1 e8 1c             	shr    eax,0x1c
c001116c:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0011171:	50                   	push   eax
c0011172:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011176:	e8 87 fe ff ff       	call   c0011002 <VgaText::putchar(char)>
c001117b:	83 c4 10             	add    esp,0x10
c001117e:	4e                   	dec    esi
c001117f:	75 e1                	jne    c0011162 <VgaText::putx(unsigned int)+0x20>
c0011181:	83 c4 20             	add    esp,0x20
c0011184:	5b                   	pop    ebx
c0011185:	5e                   	pop    esi
c0011186:	5f                   	pop    edi
c0011187:	c3                   	ret    

c0011188 <VgaText::VgaText(char const*)>:
c0011188:	57                   	push   edi
c0011189:	56                   	push   esi
c001118a:	53                   	push   ebx
c001118b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001118f:	83 ec 08             	sub    esp,0x8
c0011192:	6a 00                	push   0x0
c0011194:	50                   	push   eax
c0011195:	e8 6e 05 00 00       	call   c0011708 <UnixFile::UnixFile(int)>
c001119a:	83 c4 10             	add    esp,0x10
c001119d:	ba 94 a5 02 c0       	mov    edx,0xc002a594
c00111a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111a6:	89 10                	mov    DWORD PTR [eax],edx
c00111a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ac:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c00111b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ba:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c00111c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111c8:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c00111cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111d3:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c00111da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111de:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c00111e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ec:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c00111f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111fa:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0011201:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011205:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c001120c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011210:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0011216:	bb 80 e6 02 c0       	mov    ebx,0xc002e680
c001121b:	b8 08 00 00 00       	mov    eax,0x8
c0011220:	fc                   	cld    
c0011221:	89 d7                	mov    edi,edx
c0011223:	89 de                	mov    esi,ebx
c0011225:	89 c1                	mov    ecx,eax
c0011227:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011229:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001122d:	05 1e 10 00 00       	add    eax,0x101e
c0011232:	83 ec 08             	sub    esp,0x8
c0011235:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011239:	50                   	push   eax
c001123a:	e8 fd f5 fe ff       	call   c000083c <strcpy>
c001123f:	83 c4 10             	add    esp,0x10
c0011242:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011246:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0011250:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011254:	83 c0 0c             	add    eax,0xc
c0011257:	83 ec 04             	sub    esp,0x4
c001125a:	68 00 0f 00 00       	push   0xf00
c001125f:	6a 00                	push   0x0
c0011261:	50                   	push   eax
c0011262:	e8 19 f5 fe ff       	call   c0000780 <memset>
c0011267:	83 c4 10             	add    esp,0x10
c001126a:	83 ec 04             	sub    esp,0x4
c001126d:	6a 00                	push   0x0
c001126f:	6a 07                	push   0x7
c0011271:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011275:	e8 b4 f4 ff ff       	call   c001072e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001127a:	83 c4 10             	add    esp,0x10
c001127d:	83 ec 08             	sub    esp,0x8
c0011280:	6a 02                	push   0x2
c0011282:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011286:	e8 49 fa ff ff       	call   c0010cd4 <VgaText::setCursorHeight(int)>
c001128b:	83 c4 10             	add    esp,0x10
c001128e:	83 ec 04             	sub    esp,0x4
c0011291:	6a 00                	push   0x0
c0011293:	6a 00                	push   0x0
c0011295:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011299:	e8 e0 f5 ff ff       	call   c001087e <VgaText::setCursor(int, int)>
c001129e:	83 c4 10             	add    esp,0x10
c00112a1:	83 ec 08             	sub    esp,0x8
c00112a4:	6a 01                	push   0x1
c00112a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112aa:	e8 7d f3 ff ff       	call   c001062c <VgaText::showCursor(bool)>
c00112af:	83 c4 10             	add    esp,0x10
c00112b2:	83 ec 08             	sub    esp,0x8
c00112b5:	6a 01                	push   0x1
c00112b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112bb:	e8 7c f3 ff ff       	call   c001063c <VgaText::disableBlink(bool)>
c00112c0:	83 c4 10             	add    esp,0x10
c00112c3:	83 ec 0c             	sub    esp,0xc
c00112c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112ca:	e8 cf fc ff ff       	call   c0010f9e <VgaText::clearScreen()>
c00112cf:	83 c4 10             	add    esp,0x10
c00112d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112d6:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c00112dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112e1:	05 9e 10 00 00       	add    eax,0x109e
c00112e6:	83 ec 04             	sub    esp,0x4
c00112e9:	68 96 00 00 00       	push   0x96
c00112ee:	6a 00                	push   0x0
c00112f0:	50                   	push   eax
c00112f1:	e8 8a f4 fe ff       	call   c0000780 <memset>
c00112f6:	83 c4 10             	add    esp,0x10
c00112f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112fd:	05 34 11 00 00       	add    eax,0x1134
c0011302:	83 ec 04             	sub    esp,0x4
c0011305:	68 2c 01 00 00       	push   0x12c
c001130a:	6a 00                	push   0x0
c001130c:	50                   	push   eax
c001130d:	e8 6e f4 fe ff       	call   c0000780 <memset>
c0011312:	83 c4 10             	add    esp,0x10
c0011315:	90                   	nop
c0011316:	5b                   	pop    ebx
c0011317:	5e                   	pop    esi
c0011318:	5f                   	pop    edi
c0011319:	c3                   	ret    

c001131a <VgaText::receiveKey(unsigned char)>:
c001131a:	55                   	push   ebp
c001131b:	57                   	push   edi
c001131c:	56                   	push   esi
c001131d:	53                   	push   ebx
c001131e:	83 ec 1c             	sub    esp,0x1c
c0011321:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011325:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011329:	84 db                	test   bl,bl
c001132b:	0f 84 c9 00 00 00    	je     c00113fa <VgaText::receiveKey(unsigned char)+0xe0>
c0011331:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0011337:	80 fb 08             	cmp    bl,0x8
c001133a:	75 2c                	jne    c0011368 <VgaText::receiveKey(unsigned char)+0x4e>
c001133c:	83 ec 0c             	sub    esp,0xc
c001133f:	57                   	push   edi
c0011340:	e8 57 f4 fe ff       	call   c000079c <strlen>
c0011345:	83 c4 10             	add    esp,0x10
c0011348:	85 c0                	test   eax,eax
c001134a:	74 41                	je     c001138d <VgaText::receiveKey(unsigned char)+0x73>
c001134c:	50                   	push   eax
c001134d:	50                   	push   eax
c001134e:	6a 08                	push   0x8
c0011350:	56                   	push   esi
c0011351:	e8 ac fc ff ff       	call   c0011002 <VgaText::putchar(char)>
c0011356:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011359:	e8 3e f4 fe ff       	call   c000079c <strlen>
c001135e:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0011366:	eb 22                	jmp    c001138a <VgaText::receiveKey(unsigned char)+0x70>
c0011368:	0f be c3             	movsx  eax,bl
c001136b:	52                   	push   edx
c001136c:	52                   	push   edx
c001136d:	50                   	push   eax
c001136e:	56                   	push   esi
c001136f:	e8 8e fc ff ff       	call   c0011002 <VgaText::putchar(char)>
c0011374:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0011378:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001137d:	59                   	pop    ecx
c001137e:	5d                   	pop    ebp
c001137f:	8d 44 24 16          	lea    eax,[esp+0x16]
c0011383:	50                   	push   eax
c0011384:	57                   	push   edi
c0011385:	e8 f2 f5 fe ff       	call   c000097c <strcat>
c001138a:	83 c4 10             	add    esp,0x10
c001138d:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0011394:	75 05                	jne    c001139b <VgaText::receiveKey(unsigned char)+0x81>
c0011396:	80 fb 0a             	cmp    bl,0xa
c0011399:	75 53                	jne    c00113ee <VgaText::receiveKey(unsigned char)+0xd4>
c001139b:	83 ec 0c             	sub    esp,0xc
c001139e:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c00113a4:	53                   	push   ebx
c00113a5:	e8 f2 f3 fe ff       	call   c000079c <strlen>
c00113aa:	89 3c 24             	mov    DWORD PTR [esp],edi
c00113ad:	89 c5                	mov    ebp,eax
c00113af:	e8 e8 f3 fe ff       	call   c000079c <strlen>
c00113b4:	83 c4 10             	add    esp,0x10
c00113b7:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c00113bb:	3d 2c 01 00 00       	cmp    eax,0x12c
c00113c0:	76 10                	jbe    c00113d2 <VgaText::receiveKey(unsigned char)+0xb8>
c00113c2:	83 ec 0c             	sub    esp,0xc
c00113c5:	68 3f a5 02 c0       	push   0xc002a53f
c00113ca:	e8 76 92 00 00       	call   c001a645 <Krnl::panic(char const*)>
c00113cf:	83 c4 10             	add    esp,0x10
c00113d2:	50                   	push   eax
c00113d3:	50                   	push   eax
c00113d4:	57                   	push   edi
c00113d5:	53                   	push   ebx
c00113d6:	e8 a1 f5 fe ff       	call   c000097c <strcat>
c00113db:	83 c4 0c             	add    esp,0xc
c00113de:	68 96 00 00 00       	push   0x96
c00113e3:	6a 00                	push   0x0
c00113e5:	57                   	push   edi
c00113e6:	e8 95 f3 fe ff       	call   c0000780 <memset>
c00113eb:	83 c4 10             	add    esp,0x10
c00113ee:	83 ec 0c             	sub    esp,0xc
c00113f1:	56                   	push   esi
c00113f2:	e8 d5 f9 ff ff       	call   c0010dcc <VgaText::doUpdate()>
c00113f7:	83 c4 10             	add    esp,0x10
c00113fa:	83 c4 1c             	add    esp,0x1c
c00113fd:	5b                   	pop    ebx
c00113fe:	5e                   	pop    esi
c00113ff:	5f                   	pop    edi
c0011400:	5d                   	pop    ebp
c0011401:	c3                   	ret    

c0011402 <VgaText::write(unsigned long long, void*, int*)>:
c0011402:	55                   	push   ebp
c0011403:	57                   	push   edi
c0011404:	56                   	push   esi
c0011405:	53                   	push   ebx
c0011406:	83 ec 0c             	sub    esp,0xc
c0011409:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001140d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011411:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011415:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c001141c:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c001141f:	39 eb                	cmp    ebx,ebp
c0011421:	74 13                	je     c0011436 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011423:	43                   	inc    ebx
c0011424:	50                   	push   eax
c0011425:	50                   	push   eax
c0011426:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c001142a:	50                   	push   eax
c001142b:	56                   	push   esi
c001142c:	e8 d1 fb ff ff       	call   c0011002 <VgaText::putchar(char)>
c0011431:	83 c4 10             	add    esp,0x10
c0011434:	eb e9                	jmp    c001141f <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0011436:	83 ec 0c             	sub    esp,0xc
c0011439:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0011440:	56                   	push   esi
c0011441:	e8 86 f9 ff ff       	call   c0010dcc <VgaText::doUpdate()>
c0011446:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001144a:	89 38                	mov    DWORD PTR [eax],edi
c001144c:	83 c4 1c             	add    esp,0x1c
c001144f:	31 c0                	xor    eax,eax
c0011451:	5b                   	pop    ebx
c0011452:	5e                   	pop    esi
c0011453:	5f                   	pop    edi
c0011454:	5d                   	pop    ebp
c0011455:	c3                   	ret    

c0011456 <newTerminal(char*)>:
c0011456:	83 ec 28             	sub    esp,0x28
c0011459:	68 60 12 00 00       	push   0x1260
c001145e:	e8 e8 e3 ff ff       	call   c000f84b <malloc>
c0011463:	5a                   	pop    edx
c0011464:	59                   	pop    ecx
c0011465:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011469:	50                   	push   eax
c001146a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001146e:	e8 15 fd ff ff       	call   c0011188 <VgaText::VgaText(char const*)>
c0011473:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011477:	83 c4 2c             	add    esp,0x2c
c001147a:	c3                   	ret    
c001147b:	90                   	nop

c001147c <TSS::TSS()>:
c001147c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011480:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011487:	90                   	nop
c0011488:	c3                   	ret    
c0011489:	90                   	nop

c001148a <TSS::setESP(unsigned long)>:
c001148a:	55                   	push   ebp
c001148b:	89 e5                	mov    ebp,esp
c001148d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011490:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011493:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011496:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011499:	90                   	nop
c001149a:	5d                   	pop    ebp
c001149b:	c3                   	ret    

c001149c <TSS::flush()>:
c001149c:	55                   	push   ebp
c001149d:	89 e5                	mov    ebp,esp
c001149f:	83 ec 10             	sub    esp,0x10
c00114a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00114a7:	83 c8 03             	or     eax,0x3
c00114aa:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00114ae:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00114b2:	66 89 d0             	mov    ax,dx
c00114b5:	0f 00 d8             	ltr    ax
c00114b8:	90                   	nop
c00114b9:	c9                   	leave  
c00114ba:	c3                   	ret    
c00114bb:	90                   	nop

c00114bc <TSS::setup(unsigned long, unsigned long)>:
c00114bc:	55                   	push   ebp
c00114bd:	89 e5                	mov    ebp,esp
c00114bf:	83 ec 18             	sub    esp,0x18
c00114c2:	83 ec 0c             	sub    esp,0xc
c00114c5:	6a 68                	push   0x68
c00114c7:	e8 7f e3 ff ff       	call   c000f84b <malloc>
c00114cc:	83 c4 10             	add    esp,0x10
c00114cf:	89 c2                	mov    edx,eax
c00114d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114d4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114dd:	83 ec 04             	sub    esp,0x4
c00114e0:	6a 68                	push   0x68
c00114e2:	6a 00                	push   0x0
c00114e4:	50                   	push   eax
c00114e5:	e8 96 f2 fe ff       	call   c0000780 <memset>
c00114ea:	83 c4 10             	add    esp,0x10
c00114ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114f3:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00114f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114ff:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011505:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011508:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001150b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001150e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011511:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011514:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011517:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c001151d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011520:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011523:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011529:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001152c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001152f:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011535:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011538:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001153b:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011541:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011544:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011547:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c001154d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011550:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011553:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011559:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001155c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001155f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011562:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011565:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011568:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001156b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001156e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011571:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011574:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011577:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c001157e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011581:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011584:	0f 20 da             	mov    edx,cr3
c0011587:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001158a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001158d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011590:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011593:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011596:	83 ec 08             	sub    esp,0x8
c0011599:	50                   	push   eax
c001159a:	8d 45 ec             	lea    eax,[ebp-0x14]
c001159d:	50                   	push   eax
c001159e:	e8 83 da ff ff       	call   c000f026 <GDTEntry::setBase(unsigned int)>
c00115a3:	83 c4 10             	add    esp,0x10
c00115a6:	83 ec 08             	sub    esp,0x8
c00115a9:	6a 68                	push   0x68
c00115ab:	8d 45 ec             	lea    eax,[ebp-0x14]
c00115ae:	50                   	push   eax
c00115af:	e8 8e da ff ff       	call   c000f042 <GDTEntry::setLimit(unsigned int)>
c00115b4:	83 c4 10             	add    esp,0x10
c00115b7:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00115bb:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00115be:	83 e0 0f             	and    eax,0xf
c00115c1:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00115c4:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00115c7:	83 c8 40             	or     eax,0x40
c00115ca:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00115cd:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c00115d2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00115d8:	05 78 01 00 00       	add    eax,0x178
c00115dd:	83 ec 04             	sub    esp,0x4
c00115e0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00115e3:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00115e6:	50                   	push   eax
c00115e7:	e8 8a da ff ff       	call   c000f076 <GDT::addEntry(GDTEntry)>
c00115ec:	83 c4 10             	add    esp,0x10
c00115ef:	89 c2                	mov    edx,eax
c00115f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115f4:	89 10                	mov    DWORD PTR [eax],edx
c00115f6:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c00115fb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011601:	05 78 01 00 00       	add    eax,0x178
c0011606:	83 ec 0c             	sub    esp,0xc
c0011609:	50                   	push   eax
c001160a:	e8 ab da ff ff       	call   c000f0ba <GDT::flush()>
c001160f:	83 c4 10             	add    esp,0x10
c0011612:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011615:	8b 00                	mov    eax,DWORD PTR [eax]
c0011617:	83 ec 08             	sub    esp,0x8
c001161a:	50                   	push   eax
c001161b:	68 a8 a5 02 c0       	push   0xc002a5a8
c0011620:	e8 e2 18 00 00       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0011625:	83 c4 10             	add    esp,0x10
c0011628:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001162b:	8b 00                	mov    eax,DWORD PTR [eax]
c001162d:	c9                   	leave  
c001162e:	c3                   	ret    
c001162f:	90                   	nop

c0011630 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011630:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011634:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011638:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001163b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011640:	75 08                	jne    c001164a <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011642:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011648:	eb 38                	jmp    c0011682 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c001164a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001164f:	75 17                	jne    c0011668 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011651:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011656:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011659:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001165f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011661:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011665:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011668:	89 c1                	mov    ecx,eax
c001166a:	83 e1 fd             	and    ecx,0xfffffffd
c001166d:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011673:	74 cd                	je     c0011642 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011675:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001167a:	83 e0 ef             	and    eax,0xffffffef
c001167d:	83 f8 08             	cmp    eax,0x8
c0011680:	76 c0                	jbe    c0011642 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011682:	31 c0                	xor    eax,eax
c0011684:	c3                   	ret    
c0011685:	90                   	nop

c0011686 <ReservedFilename::isAtty()>:
c0011686:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001168a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001168d:	31 c0                	xor    eax,eax
c001168f:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011695:	74 09                	je     c00116a0 <ReservedFilename::isAtty()+0x1a>
c0011697:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c001169d:	0f 94 c0             	sete   al
c00116a0:	c3                   	ret    
c00116a1:	90                   	nop

c00116a2 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00116a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116a6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00116aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116ad:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00116b1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00116b6:	75 08                	jne    c00116c0 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00116b8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00116be:	eb 3d                	jmp    c00116fd <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00116c0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00116c5:	75 17                	jne    c00116de <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00116c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116cc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116cf:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00116d5:	8b 10                	mov    edx,DWORD PTR [eax]
c00116d7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116db:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00116de:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00116e3:	75 04                	jne    c00116e9 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00116e5:	89 0a                	mov    DWORD PTR [edx],ecx
c00116e7:	eb 14                	jmp    c00116fd <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00116e9:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00116ee:	74 c8                	je     c00116b8 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00116f0:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00116f5:	83 e0 ef             	and    eax,0xffffffef
c00116f8:	83 f8 08             	cmp    eax,0x8
c00116fb:	76 bb                	jbe    c00116b8 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00116fd:	31 c0                	xor    eax,eax
c00116ff:	c3                   	ret    

c0011700 <UnixFile::getFileDescriptor()>:
c0011700:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011704:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011707:	c3                   	ret    

c0011708 <UnixFile::UnixFile(int)>:
c0011708:	53                   	push   ebx
c0011709:	83 ec 28             	sub    esp,0x28
c001170c:	ba 94 a6 02 c0       	mov    edx,0xc002a694
c0011711:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011715:	89 10                	mov    DWORD PTR [eax],edx
c0011717:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c001171f:	0f 8f 8c 01 00 00    	jg     c00118b1 <UnixFile::UnixFile(int)+0x1a9>
c0011725:	a1 60 d5 02 c0       	mov    eax,ds:0xc002d560
c001172a:	8d 50 01             	lea    edx,[eax+0x1]
c001172d:	89 15 60 d5 02 c0    	mov    DWORD PTR ds:0xc002d560,edx
c0011733:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011737:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001173a:	83 ec 08             	sub    esp,0x8
c001173d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011741:	68 38 e7 02 c0       	push   0xc002e738
c0011746:	e8 35 71 01 00       	call   c0028880 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001174b:	83 c4 10             	add    esp,0x10
c001174e:	a0 34 e7 02 c0       	mov    al,ds:0xc002e734
c0011753:	83 f0 01             	xor    eax,0x1
c0011756:	84 c0                	test   al,al
c0011758:	0f 84 54 01 00 00    	je     c00118b2 <UnixFile::UnixFile(int)+0x1aa>
c001175e:	c6 05 34 e7 02 c0 01 	mov    BYTE PTR ds:0xc002e734,0x1
c0011765:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c001176d:	83 ec 0c             	sub    esp,0xc
c0011770:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011774:	e8 d2 e0 ff ff       	call   c000f84b <malloc>
c0011779:	83 c4 10             	add    esp,0x10
c001177c:	89 c3                	mov    ebx,eax
c001177e:	83 ec 08             	sub    esp,0x8
c0011781:	68 03 ff ff 0f       	push   0xfffff03
c0011786:	53                   	push   ebx
c0011787:	e8 2c 01 00 00       	call   c00118b8 <ReservedFilename::ReservedFilename(int)>
c001178c:	83 c4 10             	add    esp,0x10
c001178f:	89 1d 2c e7 02 c0    	mov    DWORD PTR ds:0xc002e72c,ebx
c0011795:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c001179d:	83 ec 0c             	sub    esp,0xc
c00117a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117a4:	e8 a2 e0 ff ff       	call   c000f84b <malloc>
c00117a9:	83 c4 10             	add    esp,0x10
c00117ac:	89 c3                	mov    ebx,eax
c00117ae:	83 ec 08             	sub    esp,0x8
c00117b1:	68 01 ff ff 0f       	push   0xfffff01
c00117b6:	53                   	push   ebx
c00117b7:	e8 fc 00 00 00       	call   c00118b8 <ReservedFilename::ReservedFilename(int)>
c00117bc:	83 c4 10             	add    esp,0x10
c00117bf:	89 1d 30 e7 02 c0    	mov    DWORD PTR ds:0xc002e730,ebx
c00117c5:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00117cd:	83 ec 0c             	sub    esp,0xc
c00117d0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00117d4:	e8 72 e0 ff ff       	call   c000f84b <malloc>
c00117d9:	83 c4 10             	add    esp,0x10
c00117dc:	89 c3                	mov    ebx,eax
c00117de:	83 ec 08             	sub    esp,0x8
c00117e1:	68 00 ff ff 0f       	push   0xfffff00
c00117e6:	53                   	push   ebx
c00117e7:	e8 cc 00 00 00       	call   c00118b8 <ReservedFilename::ReservedFilename(int)>
c00117ec:	83 c4 10             	add    esp,0x10
c00117ef:	89 1d 24 e7 02 c0    	mov    DWORD PTR ds:0xc002e724,ebx
c00117f5:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00117fd:	83 ec 0c             	sub    esp,0xc
c0011800:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011804:	e8 42 e0 ff ff       	call   c000f84b <malloc>
c0011809:	83 c4 10             	add    esp,0x10
c001180c:	89 c3                	mov    ebx,eax
c001180e:	83 ec 08             	sub    esp,0x8
c0011811:	68 02 ff ff 0f       	push   0xfffff02
c0011816:	53                   	push   ebx
c0011817:	e8 9c 00 00 00       	call   c00118b8 <ReservedFilename::ReservedFilename(int)>
c001181c:	83 c4 10             	add    esp,0x10
c001181f:	89 1d 28 e7 02 c0    	mov    DWORD PTR ds:0xc002e728,ebx
c0011825:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001182d:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011832:	7f 7e                	jg     c00118b2 <UnixFile::UnixFile(int)+0x1aa>
c0011834:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c001183c:	83 ec 0c             	sub    esp,0xc
c001183f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011843:	e8 03 e0 ff ff       	call   c000f84b <malloc>
c0011848:	83 c4 10             	add    esp,0x10
c001184b:	89 c3                	mov    ebx,eax
c001184d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011851:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011856:	83 ec 08             	sub    esp,0x8
c0011859:	50                   	push   eax
c001185a:	53                   	push   ebx
c001185b:	e8 58 00 00 00       	call   c00118b8 <ReservedFilename::ReservedFilename(int)>
c0011860:	83 c4 10             	add    esp,0x10
c0011863:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011867:	89 1c 85 00 e7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1900],ebx
c001186e:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011876:	83 ec 0c             	sub    esp,0xc
c0011879:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001187d:	e8 c9 df ff ff       	call   c000f84b <malloc>
c0011882:	83 c4 10             	add    esp,0x10
c0011885:	89 c3                	mov    ebx,eax
c0011887:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001188b:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011890:	83 ec 08             	sub    esp,0x8
c0011893:	50                   	push   eax
c0011894:	53                   	push   ebx
c0011895:	e8 1e 00 00 00       	call   c00118b8 <ReservedFilename::ReservedFilename(int)>
c001189a:	83 c4 10             	add    esp,0x10
c001189d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118a1:	89 1c 85 c0 e6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1940],ebx
c00118a8:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118ac:	e9 7c ff ff ff       	jmp    c001182d <UnixFile::UnixFile(int)+0x125>
c00118b1:	90                   	nop
c00118b2:	83 c4 28             	add    esp,0x28
c00118b5:	5b                   	pop    ebx
c00118b6:	c3                   	ret    
c00118b7:	90                   	nop

c00118b8 <ReservedFilename::ReservedFilename(int)>:
c00118b8:	83 ec 0c             	sub    esp,0xc
c00118bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118bf:	83 ec 08             	sub    esp,0x8
c00118c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118c6:	50                   	push   eax
c00118c7:	e8 3c fe ff ff       	call   c0011708 <UnixFile::UnixFile(int)>
c00118cc:	83 c4 10             	add    esp,0x10
c00118cf:	ba b0 a6 02 c0       	mov    edx,0xc002a6b0
c00118d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118d8:	89 10                	mov    DWORD PTR [eax],edx
c00118da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118de:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00118e2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00118e5:	90                   	nop
c00118e6:	83 c4 0c             	add    esp,0xc
c00118e9:	c3                   	ret    

c00118ea <UnixFile::~UnixFile()>:
c00118ea:	83 ec 1c             	sub    esp,0x1c
c00118ed:	ba 94 a6 02 c0       	mov    edx,0xc002a694
c00118f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00118f6:	89 10                	mov    DWORD PTR [eax],edx
c00118f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00118fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118ff:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011904:	7f 73                	jg     c0011979 <UnixFile::~UnixFile()+0x8f>
c0011906:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001190e:	83 ec 0c             	sub    esp,0xc
c0011911:	68 38 e7 02 c0       	push   0xc002e738
c0011916:	e8 39 70 01 00       	call   c0028954 <LinkedList<UnixFile>::getFirstElement()>
c001191b:	83 c4 10             	add    esp,0x10
c001191e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011922:	83 ec 0c             	sub    esp,0xc
c0011925:	68 38 e7 02 c0       	push   0xc002e738
c001192a:	e8 2d 70 01 00       	call   c002895c <LinkedList<UnixFile>::removeFirst()>
c001192f:	83 c4 10             	add    esp,0x10
c0011932:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011936:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001193a:	74 40                	je     c001197c <UnixFile::~UnixFile()+0x92>
c001193c:	83 ec 08             	sub    esp,0x8
c001193f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011943:	68 38 e7 02 c0       	push   0xc002e738
c0011948:	e8 33 6f 01 00       	call   c0028880 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001194d:	83 c4 10             	add    esp,0x10
c0011950:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011954:	8d 50 01             	lea    edx,[eax+0x1]
c0011957:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001195b:	3d 88 13 00 00       	cmp    eax,0x1388
c0011960:	0f 94 c0             	sete   al
c0011963:	84 c0                	test   al,al
c0011965:	74 a7                	je     c001190e <UnixFile::~UnixFile()+0x24>
c0011967:	83 ec 0c             	sub    esp,0xc
c001196a:	68 6c a6 02 c0       	push   0xc002a66c
c001196f:	e8 d1 8c 00 00       	call   c001a645 <Krnl::panic(char const*)>
c0011974:	83 c4 10             	add    esp,0x10
c0011977:	eb 95                	jmp    c001190e <UnixFile::~UnixFile()+0x24>
c0011979:	90                   	nop
c001197a:	eb 01                	jmp    c001197d <UnixFile::~UnixFile()+0x93>
c001197c:	90                   	nop
c001197d:	90                   	nop
c001197e:	83 c4 1c             	add    esp,0x1c
c0011981:	c3                   	ret    

c0011982 <UnixFile::~UnixFile()>:
c0011982:	83 ec 0c             	sub    esp,0xc
c0011985:	83 ec 0c             	sub    esp,0xc
c0011988:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001198c:	e8 59 ff ff ff       	call   c00118ea <UnixFile::~UnixFile()>
c0011991:	83 c4 10             	add    esp,0x10
c0011994:	83 ec 08             	sub    esp,0x8
c0011997:	6a 0c                	push   0xc
c0011999:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001199d:	e8 85 14 00 00       	call   c0012e27 <operator delete(void*, unsigned long)>
c00119a2:	83 c4 10             	add    esp,0x10
c00119a5:	83 c4 0c             	add    esp,0xc
c00119a8:	c3                   	ret    
c00119a9:	90                   	nop

c00119aa <ReservedFilename::~ReservedFilename()>:
c00119aa:	83 ec 0c             	sub    esp,0xc
c00119ad:	ba b0 a6 02 c0       	mov    edx,0xc002a6b0
c00119b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119b6:	89 10                	mov    DWORD PTR [eax],edx
c00119b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119bc:	83 ec 0c             	sub    esp,0xc
c00119bf:	50                   	push   eax
c00119c0:	e8 25 ff ff ff       	call   c00118ea <UnixFile::~UnixFile()>
c00119c5:	83 c4 10             	add    esp,0x10
c00119c8:	90                   	nop
c00119c9:	83 c4 0c             	add    esp,0xc
c00119cc:	c3                   	ret    
c00119cd:	90                   	nop

c00119ce <ReservedFilename::~ReservedFilename()>:
c00119ce:	83 ec 0c             	sub    esp,0xc
c00119d1:	83 ec 0c             	sub    esp,0xc
c00119d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119d8:	e8 cd ff ff ff       	call   c00119aa <ReservedFilename::~ReservedFilename()>
c00119dd:	83 c4 10             	add    esp,0x10
c00119e0:	83 ec 08             	sub    esp,0x8
c00119e3:	6a 0c                	push   0xc
c00119e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119e9:	e8 39 14 00 00       	call   c0012e27 <operator delete(void*, unsigned long)>
c00119ee:	83 c4 10             	add    esp,0x10
c00119f1:	83 c4 0c             	add    esp,0xc
c00119f4:	c3                   	ret    

c00119f5 <getFromFileDescriptor(int)>:
c00119f5:	53                   	push   ebx
c00119f6:	83 ec 08             	sub    esp,0x8
c00119f9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00119fd:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011a03:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011a09:	7f 2c                	jg     c0011a37 <getFromFileDescriptor(int)+0x42>
c0011a0b:	83 ec 0c             	sub    esp,0xc
c0011a0e:	68 38 e7 02 c0       	push   0xc002e738
c0011a13:	e8 3c 6f 01 00       	call   c0028954 <LinkedList<UnixFile>::getFirstElement()>
c0011a18:	83 c4 10             	add    esp,0x10
c0011a1b:	85 c0                	test   eax,eax
c0011a1d:	75 04                	jne    c0011a23 <getFromFileDescriptor(int)+0x2e>
c0011a1f:	31 c0                	xor    eax,eax
c0011a21:	eb 6e                	jmp    c0011a91 <getFromFileDescriptor(int)+0x9c>
c0011a23:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011a26:	74 69                	je     c0011a91 <getFromFileDescriptor(int)+0x9c>
c0011a28:	52                   	push   edx
c0011a29:	52                   	push   edx
c0011a2a:	50                   	push   eax
c0011a2b:	68 38 e7 02 c0       	push   0xc002e738
c0011a30:	e8 c9 6f 01 00       	call   c00289fe <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011a35:	eb e1                	jmp    c0011a18 <getFromFileDescriptor(int)+0x23>
c0011a37:	a1 2c e7 02 c0       	mov    eax,ds:0xc002e72c
c0011a3c:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011a42:	74 4d                	je     c0011a91 <getFromFileDescriptor(int)+0x9c>
c0011a44:	a1 30 e7 02 c0       	mov    eax,ds:0xc002e730
c0011a49:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011a4f:	74 40                	je     c0011a91 <getFromFileDescriptor(int)+0x9c>
c0011a51:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c0011a56:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011a5c:	74 33                	je     c0011a91 <getFromFileDescriptor(int)+0x9c>
c0011a5e:	a1 24 e7 02 c0       	mov    eax,ds:0xc002e724
c0011a63:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011a69:	74 26                	je     c0011a91 <getFromFileDescriptor(int)+0x9c>
c0011a6b:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011a71:	83 f8 08             	cmp    eax,0x8
c0011a74:	77 09                	ja     c0011a7f <getFromFileDescriptor(int)+0x8a>
c0011a76:	8b 04 85 00 e7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1900]
c0011a7d:	eb 12                	jmp    c0011a91 <getFromFileDescriptor(int)+0x9c>
c0011a7f:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011a85:	83 fb 08             	cmp    ebx,0x8
c0011a88:	77 95                	ja     c0011a1f <getFromFileDescriptor(int)+0x2a>
c0011a8a:	8b 04 9d c0 e6 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1940]
c0011a91:	83 c4 08             	add    esp,0x8
c0011a94:	5b                   	pop    ebx
c0011a95:	c3                   	ret    

c0011a96 <__static_initialization_and_destruction_0(int, int)>:
c0011a96:	83 ec 0c             	sub    esp,0xc
c0011a99:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011a9e:	75 34                	jne    c0011ad4 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011aa0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011aa8:	75 2a                	jne    c0011ad4 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011aaa:	83 ec 0c             	sub    esp,0xc
c0011aad:	68 38 e7 02 c0       	push   0xc002e738
c0011ab2:	e8 71 6d 01 00       	call   c0028828 <LinkedList<UnixFile>::LinkedList()>
c0011ab7:	83 c4 10             	add    esp,0x10
c0011aba:	83 ec 04             	sub    esp,0x4
c0011abd:	68 d8 d4 02 c0       	push   0xc002d4d8
c0011ac2:	68 38 e7 02 c0       	push   0xc002e738
c0011ac7:	68 26 88 02 c0       	push   0xc0028826
c0011acc:	e8 d0 12 00 00       	call   c0012da1 <__cxa_atexit>
c0011ad1:	83 c4 10             	add    esp,0x10
c0011ad4:	90                   	nop
c0011ad5:	83 c4 0c             	add    esp,0xc
c0011ad8:	c3                   	ret    

c0011ad9 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011ad9:	83 ec 0c             	sub    esp,0xc
c0011adc:	83 ec 08             	sub    esp,0x8
c0011adf:	68 ff ff 00 00       	push   0xffff
c0011ae4:	6a 01                	push   0x1
c0011ae6:	e8 ab ff ff ff       	call   c0011a96 <__static_initialization_and_destruction_0(int, int)>
c0011aeb:	83 c4 10             	add    esp,0x10
c0011aee:	83 c4 0c             	add    esp,0xc
c0011af1:	c3                   	ret    

c0011af2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011af2:	53                   	push   ebx
c0011af3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011af7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011afb:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011b01:	89 c8                	mov    eax,ecx
c0011b03:	d1 e8                	shr    eax,1
c0011b05:	03 05 68 d5 02 c0    	add    eax,DWORD PTR ds:0xc002d568
c0011b0b:	83 e1 01             	and    ecx,0x1
c0011b0e:	8a 10                	mov    dl,BYTE PTR [eax]
c0011b10:	75 09                	jne    c0011b1b <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011b12:	83 e2 f0             	and    edx,0xfffffff0
c0011b15:	09 da                	or     edx,ebx
c0011b17:	88 10                	mov    BYTE PTR [eax],dl
c0011b19:	5b                   	pop    ebx
c0011b1a:	c3                   	ret    
c0011b1b:	c1 e3 04             	shl    ebx,0x4
c0011b1e:	83 e2 0f             	and    edx,0xf
c0011b21:	09 da                	or     edx,ebx
c0011b23:	88 10                	mov    BYTE PTR [eax],dl
c0011b25:	5b                   	pop    ebx
c0011b26:	c3                   	ret    

c0011b27 <Virt::getPageState(unsigned long)>:
c0011b27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b2b:	8b 0d 68 d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d568
c0011b31:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011b37:	89 d0                	mov    eax,edx
c0011b39:	d1 e8                	shr    eax,1
c0011b3b:	83 e2 01             	and    edx,0x1
c0011b3e:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011b41:	75 04                	jne    c0011b47 <Virt::getPageState(unsigned long)+0x20>
c0011b43:	83 e0 0f             	and    eax,0xf
c0011b46:	c3                   	ret    
c0011b47:	c0 e8 04             	shr    al,0x4
c0011b4a:	c3                   	ret    

c0011b4b <Virt::allocateKernelVirtualPages(int)>:
c0011b4b:	55                   	push   ebp
c0011b4c:	31 ed                	xor    ebp,ebp
c0011b4e:	57                   	push   edi
c0011b4f:	56                   	push   esi
c0011b50:	53                   	push   ebx
c0011b51:	31 db                	xor    ebx,ebx
c0011b53:	83 ec 1c             	sub    esp,0x1c
c0011b56:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011b5a:	8b 3d 64 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d564
c0011b60:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011b65:	57                   	push   edi
c0011b66:	e8 bc ff ff ff       	call   c0011b27 <Virt::getPageState(unsigned long)>
c0011b6b:	5a                   	pop    edx
c0011b6c:	84 c0                	test   al,al
c0011b6e:	75 3a                	jne    c0011baa <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011b70:	85 db                	test   ebx,ebx
c0011b72:	75 02                	jne    c0011b76 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011b74:	89 fd                	mov    ebp,edi
c0011b76:	43                   	inc    ebx
c0011b77:	39 f3                	cmp    ebx,esi
c0011b79:	74 5a                	je     c0011bd5 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011b7b:	47                   	inc    edi
c0011b7c:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011b82:	76 31                	jbe    c0011bb5 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011b84:	c7 05 64 d5 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d564,0xc8000
c0011b8e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011b93:	75 28                	jne    c0011bbd <Virt::allocateKernelVirtualPages(int)+0x72>
c0011b95:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011b9a:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011b9f:	57                   	push   edi
c0011ba0:	e8 82 ff ff ff       	call   c0011b27 <Virt::getPageState(unsigned long)>
c0011ba5:	5a                   	pop    edx
c0011ba6:	84 c0                	test   al,al
c0011ba8:	74 c6                	je     c0011b70 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011baa:	31 db                	xor    ebx,ebx
c0011bac:	47                   	inc    edi
c0011bad:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011bb3:	77 cf                	ja     c0011b84 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011bb5:	89 3d 64 d5 02 c0    	mov    DWORD PTR ds:0xc002d564,edi
c0011bbb:	eb a8                	jmp    c0011b65 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011bbd:	83 ec 0c             	sub    esp,0xc
c0011bc0:	68 c4 a6 02 c0       	push   0xc002a6c4
c0011bc5:	e8 7b 8a 00 00       	call   c001a645 <Krnl::panic(char const*)>
c0011bca:	8b 3d 64 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d564
c0011bd0:	83 c4 10             	add    esp,0x10
c0011bd3:	eb 90                	jmp    c0011b65 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011bd5:	89 2d 64 d5 02 c0    	mov    DWORD PTR ds:0xc002d564,ebp
c0011bdb:	4b                   	dec    ebx
c0011bdc:	74 5f                	je     c0011c3d <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011bde:	85 f6                	test   esi,esi
c0011be0:	74 3d                	je     c0011c1f <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011be2:	89 e8                	mov    eax,ebp
c0011be4:	31 db                	xor    ebx,ebx
c0011be6:	8d 7e ff             	lea    edi,[esi-0x1]
c0011be9:	eb 14                	jmp    c0011bff <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011beb:	6a 01                	push   0x1
c0011bed:	43                   	inc    ebx
c0011bee:	50                   	push   eax
c0011bef:	e8 fe fe ff ff       	call   c0011af2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011bf4:	58                   	pop    eax
c0011bf5:	39 f3                	cmp    ebx,esi
c0011bf7:	5a                   	pop    edx
c0011bf8:	74 25                	je     c0011c1f <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011bfa:	a1 64 d5 02 c0       	mov    eax,ds:0xc002d564
c0011bff:	8d 50 01             	lea    edx,[eax+0x1]
c0011c02:	85 db                	test   ebx,ebx
c0011c04:	89 15 64 d5 02 c0    	mov    DWORD PTR ds:0xc002d564,edx
c0011c0a:	74 20                	je     c0011c2c <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011c0c:	39 df                	cmp    edi,ebx
c0011c0e:	75 db                	jne    c0011beb <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011c10:	6a 03                	push   0x3
c0011c12:	43                   	inc    ebx
c0011c13:	50                   	push   eax
c0011c14:	e8 d9 fe ff ff       	call   c0011af2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c19:	59                   	pop    ecx
c0011c1a:	39 f3                	cmp    ebx,esi
c0011c1c:	58                   	pop    eax
c0011c1d:	75 db                	jne    c0011bfa <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c1f:	83 c4 1c             	add    esp,0x1c
c0011c22:	89 e8                	mov    eax,ebp
c0011c24:	5b                   	pop    ebx
c0011c25:	c1 e0 0c             	shl    eax,0xc
c0011c28:	5e                   	pop    esi
c0011c29:	5f                   	pop    edi
c0011c2a:	5d                   	pop    ebp
c0011c2b:	c3                   	ret    
c0011c2c:	6a 02                	push   0x2
c0011c2e:	bb 01 00 00 00       	mov    ebx,0x1
c0011c33:	50                   	push   eax
c0011c34:	e8 b9 fe ff ff       	call   c0011af2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c39:	58                   	pop    eax
c0011c3a:	5a                   	pop    edx
c0011c3b:	eb bd                	jmp    c0011bfa <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c3d:	6a 04                	push   0x4
c0011c3f:	8d 45 01             	lea    eax,[ebp+0x1]
c0011c42:	55                   	push   ebp
c0011c43:	a3 64 d5 02 c0       	mov    ds:0xc002d564,eax
c0011c48:	e8 a5 fe ff ff       	call   c0011af2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c4d:	59                   	pop    ecx
c0011c4e:	89 e8                	mov    eax,ebp
c0011c50:	5b                   	pop    ebx
c0011c51:	c1 e0 0c             	shl    eax,0xc
c0011c54:	83 c4 1c             	add    esp,0x1c
c0011c57:	5b                   	pop    ebx
c0011c58:	5e                   	pop    esi
c0011c59:	5f                   	pop    edi
c0011c5a:	5d                   	pop    ebp
c0011c5b:	c3                   	ret    

c0011c5c <Virt::freeSwapfilePage(unsigned long)>:
c0011c5c:	53                   	push   ebx
c0011c5d:	8b 15 4c e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e74c
c0011c63:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011c67:	b8 01 00 00 00       	mov    eax,0x1
c0011c6c:	89 cb                	mov    ebx,ecx
c0011c6e:	d3 e0                	shl    eax,cl
c0011c70:	c1 eb 05             	shr    ebx,0x5
c0011c73:	f7 d0                	not    eax
c0011c75:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011c78:	5b                   	pop    ebx
c0011c79:	c3                   	ret    

c0011c7a <Virt::swapIDToSector(unsigned long)>:
c0011c7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c7e:	0f af 05 6c d5 02 c0 	imul   eax,DWORD PTR ds:0xc002d56c
c0011c85:	03 05 74 d5 02 c0    	add    eax,DWORD PTR ds:0xc002d574
c0011c8b:	c3                   	ret    

c0011c8c <Virt::allocateSwapfilePage()>:
c0011c8c:	55                   	push   ebp
c0011c8d:	31 d2                	xor    edx,edx
c0011c8f:	57                   	push   edi
c0011c90:	56                   	push   esi
c0011c91:	53                   	push   ebx
c0011c92:	83 ec 0c             	sub    esp,0xc
c0011c95:	8b 0d 6c d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d56c
c0011c9b:	a1 70 d5 02 c0       	mov    eax,ds:0xc002d570
c0011ca0:	f7 f1                	div    ecx
c0011ca2:	39 0d 70 d5 02 c0    	cmp    DWORD PTR ds:0xc002d570,ecx
c0011ca8:	72 2d                	jb     c0011cd7 <Virt::allocateSwapfilePage()+0x4b>
c0011caa:	8b 35 4c e7 02 c0    	mov    esi,DWORD PTR ds:0xc002e74c
c0011cb0:	8b 16                	mov    edx,DWORD PTR [esi]
c0011cb2:	f6 c2 01             	test   dl,0x1
c0011cb5:	74 3c                	je     c0011cf3 <Virt::allocateSwapfilePage()+0x67>
c0011cb7:	31 c9                	xor    ecx,ecx
c0011cb9:	bf 01 00 00 00       	mov    edi,0x1
c0011cbe:	eb 12                	jmp    c0011cd2 <Virt::allocateSwapfilePage()+0x46>
c0011cc0:	89 fd                	mov    ebp,edi
c0011cc2:	89 ca                	mov    edx,ecx
c0011cc4:	d3 e5                	shl    ebp,cl
c0011cc6:	c1 ea 05             	shr    edx,0x5
c0011cc9:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011ccc:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011cce:	85 ea                	test   edx,ebp
c0011cd0:	74 2a                	je     c0011cfc <Virt::allocateSwapfilePage()+0x70>
c0011cd2:	41                   	inc    ecx
c0011cd3:	39 c8                	cmp    eax,ecx
c0011cd5:	77 e9                	ja     c0011cc0 <Virt::allocateSwapfilePage()+0x34>
c0011cd7:	83 ec 0c             	sub    esp,0xc
c0011cda:	68 4b a8 02 c0       	push   0xc002a84b
c0011cdf:	e8 61 89 00 00       	call   c001a645 <Krnl::panic(char const*)>
c0011ce4:	83 c4 10             	add    esp,0x10
c0011ce7:	31 c9                	xor    ecx,ecx
c0011ce9:	83 c4 0c             	add    esp,0xc
c0011cec:	89 c8                	mov    eax,ecx
c0011cee:	5b                   	pop    ebx
c0011cef:	5e                   	pop    esi
c0011cf0:	5f                   	pop    edi
c0011cf1:	5d                   	pop    ebp
c0011cf2:	c3                   	ret    
c0011cf3:	89 f3                	mov    ebx,esi
c0011cf5:	bd 01 00 00 00       	mov    ebp,0x1
c0011cfa:	31 c9                	xor    ecx,ecx
c0011cfc:	09 ea                	or     edx,ebp
c0011cfe:	89 c8                	mov    eax,ecx
c0011d00:	89 13                	mov    DWORD PTR [ebx],edx
c0011d02:	83 c4 0c             	add    esp,0xc
c0011d05:	5b                   	pop    ebx
c0011d06:	5e                   	pop    esi
c0011d07:	5f                   	pop    edi
c0011d08:	5d                   	pop    ebp
c0011d09:	c3                   	ret    

c0011d0a <Virt::virtualMemorySetup()>:
c0011d0a:	53                   	push   ebx
c0011d0b:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d10:	83 ec 08             	sub    esp,0x8
c0011d13:	6a 0f                	push   0xf
c0011d15:	53                   	push   ebx
c0011d16:	43                   	inc    ebx
c0011d17:	e8 d6 fd ff ff       	call   c0011af2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d1c:	59                   	pop    ecx
c0011d1d:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d23:	58                   	pop    eax
c0011d24:	75 ed                	jne    c0011d13 <Virt::virtualMemorySetup()+0x9>
c0011d26:	83 ec 08             	sub    esp,0x8
c0011d29:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d2e:	68 00 00 00 c8       	push   0xc8000000
c0011d33:	68 62 a8 02 c0       	push   0xc002a862
c0011d38:	e8 ca 11 00 00       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0011d3d:	58                   	pop    eax
c0011d3e:	5a                   	pop    edx
c0011d3f:	68 00 f0 ff ef       	push   0xeffff000
c0011d44:	68 76 a8 02 c0       	push   0xc002a876
c0011d49:	e8 b9 11 00 00       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0011d4e:	83 c4 10             	add    esp,0x10
c0011d51:	83 ec 08             	sub    esp,0x8
c0011d54:	6a 00                	push   0x0
c0011d56:	53                   	push   ebx
c0011d57:	43                   	inc    ebx
c0011d58:	e8 95 fd ff ff       	call   c0011af2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d5d:	83 c4 10             	add    esp,0x10
c0011d60:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d66:	75 e9                	jne    c0011d51 <Virt::virtualMemorySetup()+0x47>
c0011d68:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011d6d:	83 ec 08             	sub    esp,0x8
c0011d70:	6a 0f                	push   0xf
c0011d72:	53                   	push   ebx
c0011d73:	43                   	inc    ebx
c0011d74:	e8 79 fd ff ff       	call   c0011af2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d79:	83 c4 10             	add    esp,0x10
c0011d7c:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011d82:	75 e9                	jne    c0011d6d <Virt::virtualMemorySetup()+0x63>
c0011d84:	83 c4 08             	add    esp,0x8
c0011d87:	5b                   	pop    ebx
c0011d88:	c3                   	ret    

c0011d89 <Virt::swappingSetup()>:
c0011d89:	83 ec 14             	sub    esp,0x14
c0011d8c:	31 d2                	xor    edx,edx
c0011d8e:	a1 70 d5 02 c0       	mov    eax,ds:0xc002d570
c0011d93:	f7 35 6c d5 02 c0    	div    DWORD PTR ds:0xc002d56c
c0011d99:	c1 e8 05             	shr    eax,0x5
c0011d9c:	50                   	push   eax
c0011d9d:	68 8a a8 02 c0       	push   0xc002a88a
c0011da2:	e8 60 11 00 00       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0011da7:	a1 70 d5 02 c0       	mov    eax,ds:0xc002d570
c0011dac:	31 d2                	xor    edx,edx
c0011dae:	f7 35 6c d5 02 c0    	div    DWORD PTR ds:0xc002d56c
c0011db4:	c1 e8 05             	shr    eax,0x5
c0011db7:	89 04 24             	mov    DWORD PTR [esp],eax
c0011dba:	e8 8c da ff ff       	call   c000f84b <malloc>
c0011dbf:	83 c4 0c             	add    esp,0xc
c0011dc2:	89 c1                	mov    ecx,eax
c0011dc4:	a3 4c e7 02 c0       	mov    ds:0xc002e74c,eax
c0011dc9:	31 d2                	xor    edx,edx
c0011dcb:	a1 70 d5 02 c0       	mov    eax,ds:0xc002d570
c0011dd0:	f7 35 6c d5 02 c0    	div    DWORD PTR ds:0xc002d56c
c0011dd6:	c1 e8 05             	shr    eax,0x5
c0011dd9:	50                   	push   eax
c0011dda:	6a 00                	push   0x0
c0011ddc:	51                   	push   ecx
c0011ddd:	e8 9e e9 fe ff       	call   c0000780 <memset>
c0011de2:	83 c4 1c             	add    esp,0x1c
c0011de5:	c3                   	ret    

c0011de6 <Virt::getAKernelVAS()>:
c0011de6:	a1 50 e7 02 c0       	mov    eax,ds:0xc002e750
c0011deb:	c3                   	ret    

c0011dec <Virt::setupPageSwapping(int)>:
c0011dec:	57                   	push   edi
c0011ded:	56                   	push   esi
c0011dee:	53                   	push   ebx
c0011def:	83 ec 1c             	sub    esp,0x1c
c0011df2:	68 a5 a8 02 c0       	push   0xc002a8a5
c0011df7:	e8 0b 11 00 00       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0011dfc:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011e03:	e8 43 da ff ff       	call   c000f84b <malloc>
c0011e08:	83 c4 0c             	add    esp,0xc
c0011e0b:	89 c6                	mov    esi,eax
c0011e0d:	ff 35 34 1b 03 c0    	push   DWORD PTR ds:0xc0031b34
c0011e13:	68 b9 a8 02 c0       	push   0xc002a8b9
c0011e18:	50                   	push   eax
c0011e19:	e8 48 16 00 00       	call   c0013466 <File::File(char const*, Process*)>
c0011e1e:	89 34 24             	mov    DWORD PTR [esp],esi
c0011e21:	e8 1c 18 00 00       	call   c0013642 <File::unlink()>
c0011e26:	58                   	pop    eax
c0011e27:	5a                   	pop    edx
c0011e28:	6a 12                	push   0x12
c0011e2a:	56                   	push   esi
c0011e2b:	e8 9a 16 00 00       	call   c00134ca <File::open(FileOpenMode)>
c0011e30:	83 c4 10             	add    esp,0x10
c0011e33:	85 c0                	test   eax,eax
c0011e35:	0f 85 e6 00 00 00    	jne    c0011f21 <Virt::setupPageSwapping(int)+0x135>
c0011e3b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e3f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011e47:	c1 e3 08             	shl    ebx,0x8
c0011e4a:	83 ec 0c             	sub    esp,0xc
c0011e4d:	68 00 00 01 00       	push   0x10000
c0011e52:	e8 f4 d9 ff ff       	call   c000f84b <malloc>
c0011e57:	83 c4 0c             	add    esp,0xc
c0011e5a:	89 c7                	mov    edi,eax
c0011e5c:	68 00 00 01 00       	push   0x10000
c0011e61:	6a 00                	push   0x0
c0011e63:	50                   	push   eax
c0011e64:	e8 17 e9 fe ff       	call   c0000780 <memset>
c0011e69:	83 c4 10             	add    esp,0x10
c0011e6c:	85 db                	test   ebx,ebx
c0011e6e:	79 03                	jns    c0011e73 <Virt::setupPageSwapping(int)+0x87>
c0011e70:	83 c3 0f             	add    ebx,0xf
c0011e73:	c1 fb 04             	sar    ebx,0x4
c0011e76:	4b                   	dec    ebx
c0011e77:	83 fb ff             	cmp    ebx,0xffffffff
c0011e7a:	74 4b                	je     c0011ec7 <Virt::setupPageSwapping(int)+0xdb>
c0011e7c:	83 ec 0c             	sub    esp,0xc
c0011e7f:	8b 06                	mov    eax,DWORD PTR [esi]
c0011e81:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011e85:	52                   	push   edx
c0011e86:	57                   	push   edi
c0011e87:	6a 00                	push   0x0
c0011e89:	68 00 00 01 00       	push   0x10000
c0011e8e:	56                   	push   esi
c0011e8f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011e92:	83 c4 20             	add    esp,0x20
c0011e95:	85 c0                	test   eax,eax
c0011e97:	75 72                	jne    c0011f0b <Virt::setupPageSwapping(int)+0x11f>
c0011e99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e9d:	3d 00 00 01 00       	cmp    eax,0x10000
c0011ea2:	74 d2                	je     c0011e76 <Virt::setupPageSwapping(int)+0x8a>
c0011ea4:	83 ec 08             	sub    esp,0x8
c0011ea7:	4b                   	dec    ebx
c0011ea8:	50                   	push   eax
c0011ea9:	68 0c a9 02 c0       	push   0xc002a90c
c0011eae:	e8 54 10 00 00       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0011eb3:	c7 04 24 15 a9 02 c0 	mov    DWORD PTR [esp],0xc002a915
c0011eba:	e8 86 87 00 00       	call   c001a645 <Krnl::panic(char const*)>
c0011ebf:	83 c4 10             	add    esp,0x10
c0011ec2:	83 fb ff             	cmp    ebx,0xffffffff
c0011ec5:	75 b5                	jne    c0011e7c <Virt::setupPageSwapping(int)+0x90>
c0011ec7:	83 ec 0c             	sub    esp,0xc
c0011eca:	56                   	push   esi
c0011ecb:	e8 58 16 00 00       	call   c0013528 <File::close()>
c0011ed0:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011ed3:	e8 93 d9 ff ff       	call   c000f86b <rfree>
c0011ed8:	83 c4 10             	add    esp,0x10
c0011edb:	85 f6                	test   esi,esi
c0011edd:	74 0c                	je     c0011eeb <Virt::setupPageSwapping(int)+0xff>
c0011edf:	83 ec 0c             	sub    esp,0xc
c0011ee2:	8b 06                	mov    eax,DWORD PTR [esi]
c0011ee4:	56                   	push   esi
c0011ee5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011ee8:	83 c4 10             	add    esp,0x10
c0011eeb:	83 ec 08             	sub    esp,0x8
c0011eee:	a1 e8 eb 02 c0       	mov    eax,ds:0xc002ebe8
c0011ef3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0011ef9:	8b 10                	mov    edx,DWORD PTR [eax]
c0011efb:	68 b9 a8 02 c0       	push   0xc002a8b9
c0011f00:	50                   	push   eax
c0011f01:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0011f04:	83 c4 20             	add    esp,0x20
c0011f07:	5b                   	pop    ebx
c0011f08:	5e                   	pop    esi
c0011f09:	5f                   	pop    edi
c0011f0a:	c3                   	ret    
c0011f0b:	83 ec 08             	sub    esp,0x8
c0011f0e:	50                   	push   eax
c0011f0f:	68 f4 a8 02 c0       	push   0xc002a8f4
c0011f14:	e8 ee 0f 00 00       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0011f19:	83 c4 10             	add    esp,0x10
c0011f1c:	e9 78 ff ff ff       	jmp    c0011e99 <Virt::setupPageSwapping(int)+0xad>
c0011f21:	83 ec 08             	sub    esp,0x8
c0011f24:	50                   	push   eax
c0011f25:	68 d0 a8 02 c0       	push   0xc002a8d0
c0011f2a:	e8 d8 0f 00 00       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0011f2f:	c7 04 24 d9 a8 02 c0 	mov    DWORD PTR [esp],0xc002a8d9
c0011f36:	e8 0a 87 00 00       	call   c001a645 <Krnl::panic(char const*)>
c0011f3b:	83 c4 10             	add    esp,0x10
c0011f3e:	e9 f8 fe ff ff       	jmp    c0011e3b <Virt::setupPageSwapping(int)+0x4f>
c0011f43:	90                   	nop

c0011f44 <VAS::VAS()>:
c0011f44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f48:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f53:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011f5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f5e:	a3 50 e7 02 c0       	mov    ds:0xc002e750,eax
c0011f63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f67:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011f6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f6f:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011f72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f76:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0011f7d:	90                   	nop
c0011f7e:	c3                   	ret    
c0011f7f:	90                   	nop

c0011f80 <VAS::VAS(VAS*)>:
c0011f80:	83 ec 0c             	sub    esp,0xc
c0011f83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f87:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f92:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011f99:	83 ec 0c             	sub    esp,0xc
c0011f9c:	68 e4 a6 02 c0       	push   0xc002a6e4
c0011fa1:	e8 9f 86 00 00       	call   c001a645 <Krnl::panic(char const*)>
c0011fa6:	83 c4 10             	add    esp,0x10
c0011fa9:	90                   	nop
c0011faa:	83 c4 0c             	add    esp,0xc
c0011fad:	c3                   	ret    

c0011fae <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011fae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fb2:	89 c2                	mov    edx,eax
c0011fb4:	c1 e8 0a             	shr    eax,0xa
c0011fb7:	c1 ea 16             	shr    edx,0x16
c0011fba:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011fbf:	19 c9                	sbb    ecx,ecx
c0011fc1:	c1 e2 0c             	shl    edx,0xc
c0011fc4:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011fca:	25 fc 0f 00 00       	and    eax,0xffc
c0011fcf:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011fd6:	01 d0                	add    eax,edx
c0011fd8:	c3                   	ret    
c0011fd9:	90                   	nop

c0011fda <VAS::getPageTableEntry(unsigned long)>:
c0011fda:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011fde:	89 ca                	mov    edx,ecx
c0011fe0:	c1 e9 0a             	shr    ecx,0xa
c0011fe3:	c1 ea 16             	shr    edx,0x16
c0011fe6:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011fec:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011ff2:	c1 e0 0c             	shl    eax,0xc
c0011ff5:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011ff8:	c3                   	ret    

c0011ff9 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011ff9:	57                   	push   edi
c0011ffa:	56                   	push   esi
c0011ffb:	be 01 00 00 00       	mov    esi,0x1
c0012000:	53                   	push   ebx
c0012001:	83 ec 10             	sub    esp,0x10
c0012004:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012008:	c1 eb 0c             	shr    ebx,0xc
c001200b:	eb 3f                	jmp    c001204c <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c001200d:	e8 d4 fd ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0012012:	83 ec 08             	sub    esp,0x8
c0012015:	57                   	push   edi
c0012016:	50                   	push   eax
c0012017:	e8 be ff ff ff       	call   c0011fda <VAS::getPageTableEntry(unsigned long)>
c001201c:	83 c4 10             	add    esp,0x10
c001201f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012021:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012025:	f6 c4 04             	test   ah,0x4
c0012028:	75 5f                	jne    c0012089 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c001202a:	80 fa 04             	cmp    dl,0x4
c001202d:	74 78                	je     c00120a7 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c001202f:	80 fa 02             	cmp    dl,0x2
c0012032:	0f 84 88 00 00 00    	je     c00120c0 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0012038:	80 fa 03             	cmp    dl,0x3
c001203b:	0f 84 ad 00 00 00    	je     c00120ee <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0012041:	fe ca                	dec    dl
c0012043:	0f 84 92 00 00 00    	je     c00120db <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0012049:	43                   	inc    ebx
c001204a:	31 f6                	xor    esi,esi
c001204c:	53                   	push   ebx
c001204d:	e8 d5 fa ff ff       	call   c0011b27 <Virt::getPageState(unsigned long)>
c0012052:	5f                   	pop    edi
c0012053:	89 df                	mov    edi,ebx
c0012055:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012059:	c1 e7 0c             	shl    edi,0xc
c001205c:	84 c0                	test   al,al
c001205e:	75 ad                	jne    c001200d <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0012060:	83 ec 0c             	sub    esp,0xc
c0012063:	68 1b a9 02 c0       	push   0xc002a91b
c0012068:	e8 d8 85 00 00       	call   c001a645 <Krnl::panic(char const*)>
c001206d:	e8 74 fd ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0012072:	5a                   	pop    edx
c0012073:	59                   	pop    ecx
c0012074:	57                   	push   edi
c0012075:	50                   	push   eax
c0012076:	e8 5f ff ff ff       	call   c0011fda <VAS::getPageTableEntry(unsigned long)>
c001207b:	83 c4 10             	add    esp,0x10
c001207e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012080:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012084:	f6 c4 04             	test   ah,0x4
c0012087:	74 c0                	je     c0012049 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0012089:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001208d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012092:	83 ec 0c             	sub    esp,0xc
c0012095:	50                   	push   eax
c0012096:	e8 c8 dd ff ff       	call   c000fe63 <Phys::freePage(unsigned long)>
c001209b:	83 c4 10             	add    esp,0x10
c001209e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00120a2:	80 fa 04             	cmp    dl,0x4
c00120a5:	75 88                	jne    c001202f <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00120a7:	89 f0                	mov    eax,esi
c00120a9:	84 c0                	test   al,al
c00120ab:	75 47                	jne    c00120f4 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c00120ad:	c7 44 24 20 08 a7 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a708
c00120b5:	83 c4 10             	add    esp,0x10
c00120b8:	5b                   	pop    ebx
c00120b9:	5e                   	pop    esi
c00120ba:	5f                   	pop    edi
c00120bb:	e9 85 85 00 00       	jmp    c001a645 <Krnl::panic(char const*)>
c00120c0:	89 f0                	mov    eax,esi
c00120c2:	84 c0                	test   al,al
c00120c4:	75 15                	jne    c00120db <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00120c6:	83 ec 0c             	sub    esp,0xc
c00120c9:	68 37 a9 02 c0       	push   0xc002a937
c00120ce:	e8 72 85 00 00       	call   c001a645 <Krnl::panic(char const*)>
c00120d3:	83 c4 10             	add    esp,0x10
c00120d6:	e9 6e ff ff ff       	jmp    c0012049 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120db:	83 ec 08             	sub    esp,0x8
c00120de:	6a 00                	push   0x0
c00120e0:	53                   	push   ebx
c00120e1:	e8 0c fa ff ff       	call   c0011af2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00120e6:	83 c4 10             	add    esp,0x10
c00120e9:	e9 5b ff ff ff       	jmp    c0012049 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120ee:	89 f0                	mov    eax,esi
c00120f0:	84 c0                	test   al,al
c00120f2:	75 15                	jne    c0012109 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c00120f4:	83 ec 08             	sub    esp,0x8
c00120f7:	6a 00                	push   0x0
c00120f9:	53                   	push   ebx
c00120fa:	e8 f3 f9 ff ff       	call   c0011af2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00120ff:	83 c4 10             	add    esp,0x10
c0012102:	83 c4 10             	add    esp,0x10
c0012105:	5b                   	pop    ebx
c0012106:	5e                   	pop    esi
c0012107:	5f                   	pop    edi
c0012108:	c3                   	ret    
c0012109:	c7 44 24 20 53 a9 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a953
c0012111:	83 c4 10             	add    esp,0x10
c0012114:	5b                   	pop    ebx
c0012115:	5e                   	pop    esi
c0012116:	5f                   	pop    edi
c0012117:	e9 29 85 00 00       	jmp    c001a645 <Krnl::panic(char const*)>

c001211c <VAS::freeAllocatedPages(unsigned long)>:
c001211c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012120:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012124:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0012128:	74 09                	je     c0012133 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001212a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001212e:	e9 c6 fe ff ff       	jmp    c0011ff9 <Virt::freeKernelVirtualPages(unsigned long)>
c0012133:	c7 44 24 04 2c a7 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a72c
c001213b:	e9 c7 0d 00 00       	jmp    c0012f07 <Dbg::kprintf(char const*, ...)>

c0012140 <VAS::virtualToPhysical(unsigned long)>:
c0012140:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012144:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012148:	e8 8d fe ff ff       	call   c0011fda <VAS::getPageTableEntry(unsigned long)>
c001214d:	5a                   	pop    edx
c001214e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012150:	59                   	pop    ecx
c0012151:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012156:	c3                   	ret    
c0012157:	90                   	nop

c0012158 <VAS::reflagRange(unsigned long, int, int, int)>:
c0012158:	55                   	push   ebp
c0012159:	57                   	push   edi
c001215a:	56                   	push   esi
c001215b:	53                   	push   ebx
c001215c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012160:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0012164:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012168:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001216c:	85 db                	test   ebx,ebx
c001216e:	7e 22                	jle    c0012192 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0012170:	c1 e3 0c             	shl    ebx,0xc
c0012173:	01 f3                	add    ebx,esi
c0012175:	56                   	push   esi
c0012176:	81 c6 00 10 00 00    	add    esi,0x1000
c001217c:	55                   	push   ebp
c001217d:	e8 58 fe ff ff       	call   c0011fda <VAS::getPageTableEntry(unsigned long)>
c0012182:	5a                   	pop    edx
c0012183:	59                   	pop    ecx
c0012184:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012186:	21 f9                	and    ecx,edi
c0012188:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c001218c:	39 f3                	cmp    ebx,esi
c001218e:	89 08                	mov    DWORD PTR [eax],ecx
c0012190:	75 e3                	jne    c0012175 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0012192:	5b                   	pop    ebx
c0012193:	5e                   	pop    esi
c0012194:	5f                   	pop    edi
c0012195:	5d                   	pop    ebp
c0012196:	c3                   	ret    
c0012197:	90                   	nop

c0012198 <VAS::setToWriteCombining(unsigned long, int)>:
c0012198:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001219d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00121a3:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00121aa:	75 01                	jne    c00121ad <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00121ac:	c3                   	ret    
c00121ad:	68 80 00 00 00       	push   0x80
c00121b2:	6a ff                	push   0xffffffff
c00121b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121c0:	e8 93 ff ff ff       	call   c0012158 <VAS::reflagRange(unsigned long, int, int, int)>
c00121c5:	83 c4 14             	add    esp,0x14
c00121c8:	c3                   	ret    
c00121c9:	90                   	nop

c00121ca <VAS::mapOtherVASIn(bool, VAS*)>:
c00121ca:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00121cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121d3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00121d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121da:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00121dd:	19 c0                	sbb    eax,eax
c00121df:	83 ca 03             	or     edx,0x3
c00121e2:	83 e0 fc             	and    eax,0xfffffffc
c00121e5:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00121ec:	0f 20 d8             	mov    eax,cr3
c00121ef:	0f 22 d8             	mov    cr3,eax
c00121f2:	c3                   	ret    
c00121f3:	90                   	nop

c00121f4 <VAS::~VAS()>:
c00121f4:	83 ec 2c             	sub    esp,0x2c
c00121f7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00121ff:	e8 1c bc 00 00       	call   c001de20 <lockScheduler()>
c0012204:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012209:	8b 00                	mov    eax,DWORD PTR [eax]
c001220b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001220e:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012214:	83 ec 04             	sub    esp,0x4
c0012217:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001221b:	6a 01                	push   0x1
c001221d:	50                   	push   eax
c001221e:	e8 a7 ff ff ff       	call   c00121ca <VAS::mapOtherVASIn(bool, VAS*)>
c0012223:	83 c4 10             	add    esp,0x10
c0012226:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001222e:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0012236:	0f 8f d7 00 00 00    	jg     c0012313 <VAS::~VAS()+0x11f>
c001223c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012240:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012243:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012247:	c1 e2 02             	shl    edx,0x2
c001224a:	01 d0                	add    eax,edx
c001224c:	8b 00                	mov    eax,DWORD PTR [eax]
c001224e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012252:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012256:	83 e0 01             	and    eax,0x1
c0012259:	0f 84 ab 00 00 00    	je     c001230a <VAS::~VAS()+0x116>
c001225f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012267:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c001226f:	7f 75                	jg     c00122e6 <VAS::~VAS()+0xf2>
c0012271:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012275:	c1 e0 0a             	shl    eax,0xa
c0012278:	89 c2                	mov    edx,eax
c001227a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001227e:	01 d0                	add    eax,edx
c0012280:	c1 e0 0c             	shl    eax,0xc
c0012283:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012287:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001228c:	8b 00                	mov    eax,DWORD PTR [eax]
c001228e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012291:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012297:	83 ec 04             	sub    esp,0x4
c001229a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001229e:	6a 01                	push   0x1
c00122a0:	50                   	push   eax
c00122a1:	e8 08 fd ff ff       	call   c0011fae <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00122a6:	83 c4 10             	add    esp,0x10
c00122a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00122ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00122b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00122b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00122b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122bb:	25 01 04 00 00       	and    eax,0x401
c00122c0:	3d 01 04 00 00       	cmp    eax,0x401
c00122c5:	75 19                	jne    c00122e0 <VAS::~VAS()+0xec>
c00122c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122cb:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122d0:	83 ec 0c             	sub    esp,0xc
c00122d3:	50                   	push   eax
c00122d4:	e8 8a db ff ff       	call   c000fe63 <Phys::freePage(unsigned long)>
c00122d9:	83 c4 10             	add    esp,0x10
c00122dc:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00122e0:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00122e4:	eb 81                	jmp    c0012267 <VAS::~VAS()+0x73>
c00122e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122ea:	25 00 04 00 00       	and    eax,0x400
c00122ef:	74 19                	je     c001230a <VAS::~VAS()+0x116>
c00122f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122f5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122fa:	83 ec 0c             	sub    esp,0xc
c00122fd:	50                   	push   eax
c00122fe:	e8 60 db ff ff       	call   c000fe63 <Phys::freePage(unsigned long)>
c0012303:	83 c4 10             	add    esp,0x10
c0012306:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001230a:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001230e:	e9 1b ff ff ff       	jmp    c001222e <VAS::~VAS()+0x3a>
c0012313:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012317:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001231a:	83 ec 0c             	sub    esp,0xc
c001231d:	50                   	push   eax
c001231e:	e8 d6 fc ff ff       	call   c0011ff9 <Virt::freeKernelVirtualPages(unsigned long)>
c0012323:	83 c4 10             	add    esp,0x10
c0012326:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001232a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001232d:	83 ec 0c             	sub    esp,0xc
c0012330:	50                   	push   eax
c0012331:	e8 2d db ff ff       	call   c000fe63 <Phys::freePage(unsigned long)>
c0012336:	83 c4 10             	add    esp,0x10
c0012339:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001233d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012341:	c1 e0 02             	shl    eax,0x2
c0012344:	83 ec 08             	sub    esp,0x8
c0012347:	50                   	push   eax
c0012348:	68 50 a7 02 c0       	push   0xc002a750
c001234d:	e8 b5 0b 00 00       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0012352:	83 c4 10             	add    esp,0x10
c0012355:	e8 c8 ba 00 00       	call   c001de22 <unlockScheduler()>
c001235a:	90                   	nop
c001235b:	83 c4 2c             	add    esp,0x2c
c001235e:	c3                   	ret    
c001235f:	90                   	nop

c0012360 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0012360:	55                   	push   ebp
c0012361:	57                   	push   edi
c0012362:	56                   	push   esi
c0012363:	53                   	push   ebx
c0012364:	83 ec 1c             	sub    esp,0x1c
c0012367:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001236b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001236f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0012375:	77 08                	ja     c001237f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0012377:	0f 20 d8             	mov    eax,cr3
c001237a:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c001237d:	75 47                	jne    c00123c6 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c001237f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012383:	09 d8                	or     eax,ebx
c0012385:	a9 ff 0f 00 00       	test   eax,0xfff
c001238a:	75 57                	jne    c00123e3 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c001238c:	89 de                	mov    esi,ebx
c001238e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012391:	c1 ee 16             	shr    esi,0x16
c0012394:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c001239b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c001239f:	74 54                	je     c00123f5 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c00123a1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00123a5:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00123ab:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00123af:	c1 e6 0c             	shl    esi,0xc
c00123b2:	c1 eb 0a             	shr    ebx,0xa
c00123b5:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00123bb:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00123be:	83 c4 1c             	add    esp,0x1c
c00123c1:	5b                   	pop    ebx
c00123c2:	5e                   	pop    esi
c00123c3:	5f                   	pop    edi
c00123c4:	5d                   	pop    ebp
c00123c5:	c3                   	ret    
c00123c6:	83 ec 0c             	sub    esp,0xc
c00123c9:	68 70 a7 02 c0       	push   0xc002a770
c00123ce:	e8 34 0b 00 00       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c00123d3:	83 c4 10             	add    esp,0x10
c00123d6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123da:	09 d8                	or     eax,ebx
c00123dc:	a9 ff 0f 00 00       	test   eax,0xfff
c00123e1:	74 a9                	je     c001238c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00123e3:	83 ec 0c             	sub    esp,0xc
c00123e6:	68 d8 a7 02 c0       	push   0xc002a7d8
c00123eb:	e8 55 82 00 00       	call   c001a645 <Krnl::panic(char const*)>
c00123f0:	83 c4 10             	add    esp,0x10
c00123f3:	eb 97                	jmp    c001238c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00123f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00123f9:	e8 ef da ff ff       	call   c000feed <Phys::allocatePage()>
c00123fe:	89 c5                	mov    ebp,eax
c0012400:	e8 e1 f9 ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0012405:	83 ec 0c             	sub    esp,0xc
c0012408:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001240c:	6a 01                	push   0x1
c001240e:	e8 38 f7 ff ff       	call   c0011b4b <Virt::allocateKernelVirtualPages(int)>
c0012413:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001241a:	6a 01                	push   0x1
c001241c:	50                   	push   eax
c001241d:	55                   	push   ebp
c001241e:	81 cd 07 04 00 00    	or     ebp,0x407
c0012424:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012428:	51                   	push   ecx
c0012429:	e8 26 02 00 00       	call   c0012654 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001242e:	83 c4 1c             	add    esp,0x1c
c0012431:	68 00 10 00 00       	push   0x1000
c0012436:	6a 00                	push   0x0
c0012438:	50                   	push   eax
c0012439:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001243d:	e8 3e e3 fe ff       	call   c0000780 <memset>
c0012442:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012446:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012449:	e8 ab fb ff ff       	call   c0011ff9 <Virt::freeKernelVirtualPages(unsigned long)>
c001244e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012452:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012455:	83 c4 10             	add    esp,0x10
c0012458:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c001245b:	e9 41 ff ff ff       	jmp    c00123a1 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0012460 <VAS::allocatePages(int, int)>:
c0012460:	55                   	push   ebp
c0012461:	57                   	push   edi
c0012462:	56                   	push   esi
c0012463:	53                   	push   ebx
c0012464:	83 ec 1c             	sub    esp,0x1c
c0012467:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001246b:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0012470:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012476:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001247c:	83 e0 01             	and    eax,0x1
c001247f:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0012483:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012487:	0f 85 cc 00 00 00    	jne    c0012559 <VAS::allocatePages(int, int)+0xf9>
c001248d:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012490:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012494:	85 c0                	test   eax,eax
c0012496:	0f 84 a1 00 00 00    	je     c001253d <VAS::allocatePages(int, int)+0xdd>
c001249c:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00124a0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00124a4:	c1 e6 0c             	shl    esi,0xc
c00124a7:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00124ab:	85 c0                	test   eax,eax
c00124ad:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00124b0:	7e 33                	jle    c00124e5 <VAS::allocatePages(int, int)+0x85>
c00124b2:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00124b6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124ba:	81 cd 00 04 00 00    	or     ebp,0x400
c00124c0:	e8 28 da ff ff       	call   c000feed <Phys::allocatePage()>
c00124c5:	55                   	push   ebp
c00124c6:	53                   	push   ebx
c00124c7:	50                   	push   eax
c00124c8:	57                   	push   edi
c00124c9:	e8 92 fe ff ff       	call   c0012360 <VAS::mapPage(unsigned long, unsigned long, int)>
c00124ce:	83 c4 10             	add    esp,0x10
c00124d1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124d6:	74 03                	je     c00124db <VAS::allocatePages(int, int)+0x7b>
c00124d8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124db:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124e1:	39 de                	cmp    esi,ebx
c00124e3:	75 db                	jne    c00124c0 <VAS::allocatePages(int, int)+0x60>
c00124e5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124ea:	75 12                	jne    c00124fe <VAS::allocatePages(int, int)+0x9e>
c00124ec:	0f 20 d8             	mov    eax,cr3
c00124ef:	0f 22 d8             	mov    cr3,eax
c00124f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124f6:	83 c4 1c             	add    esp,0x1c
c00124f9:	5b                   	pop    ebx
c00124fa:	5e                   	pop    esi
c00124fb:	5f                   	pop    edi
c00124fc:	5d                   	pop    ebp
c00124fd:	c3                   	ret    
c00124fe:	c1 ee 0a             	shr    esi,0xa
c0012501:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012505:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c001250b:	c1 eb 0a             	shr    ebx,0xa
c001250e:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0012514:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001251a:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012520:	39 c3                	cmp    ebx,eax
c0012522:	77 ce                	ja     c00124f2 <VAS::allocatePages(int, int)+0x92>
c0012524:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012527:	81 c3 00 10 00 00    	add    ebx,0x1000
c001252d:	39 d8                	cmp    eax,ebx
c001252f:	73 f3                	jae    c0012524 <VAS::allocatePages(int, int)+0xc4>
c0012531:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012535:	83 c4 1c             	add    esp,0x1c
c0012538:	5b                   	pop    ebx
c0012539:	5e                   	pop    esi
c001253a:	5f                   	pop    edi
c001253b:	5d                   	pop    ebp
c001253c:	c3                   	ret    
c001253d:	83 ec 0c             	sub    esp,0xc
c0012540:	68 fc a7 02 c0       	push   0xc002a7fc
c0012545:	e8 fb 80 00 00       	call   c001a645 <Krnl::panic(char const*)>
c001254a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001254d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012551:	83 c4 10             	add    esp,0x10
c0012554:	e9 43 ff ff ff       	jmp    c001249c <VAS::allocatePages(int, int)+0x3c>
c0012559:	83 ec 0c             	sub    esp,0xc
c001255c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012560:	e8 e6 f5 ff ff       	call   c0011b4b <Virt::allocateKernelVirtualPages(int)>
c0012565:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012569:	83 c4 10             	add    esp,0x10
c001256c:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012571:	0f 87 9b 00 00 00    	ja     c0012612 <VAS::allocatePages(int, int)+0x1b2>
c0012577:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001257b:	85 d2                	test   edx,edx
c001257d:	7e 3c                	jle    c00125bb <VAS::allocatePages(int, int)+0x15b>
c001257f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012583:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012587:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001258b:	c1 e5 0c             	shl    ebp,0xc
c001258e:	81 ce 00 04 00 00    	or     esi,0x400
c0012594:	01 dd                	add    ebp,ebx
c0012596:	e8 52 d9 ff ff       	call   c000feed <Phys::allocatePage()>
c001259b:	56                   	push   esi
c001259c:	53                   	push   ebx
c001259d:	50                   	push   eax
c001259e:	57                   	push   edi
c001259f:	e8 bc fd ff ff       	call   c0012360 <VAS::mapPage(unsigned long, unsigned long, int)>
c00125a4:	83 c4 10             	add    esp,0x10
c00125a7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125ac:	74 03                	je     c00125b1 <VAS::allocatePages(int, int)+0x151>
c00125ae:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125b1:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125b7:	39 dd                	cmp    ebp,ebx
c00125b9:	75 db                	jne    c0012596 <VAS::allocatePages(int, int)+0x136>
c00125bb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125c0:	0f 84 26 ff ff ff    	je     c00124ec <VAS::allocatePages(int, int)+0x8c>
c00125c6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00125ca:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00125ce:	89 d3                	mov    ebx,edx
c00125d0:	c1 e0 0c             	shl    eax,0xc
c00125d3:	c1 eb 0a             	shr    ebx,0xa
c00125d6:	01 d0                	add    eax,edx
c00125d8:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00125de:	c1 e8 0a             	shr    eax,0xa
c00125e1:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00125e7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00125ec:	2d 00 00 40 00       	sub    eax,0x400000
c00125f1:	39 c3                	cmp    ebx,eax
c00125f3:	0f 87 f9 fe ff ff    	ja     c00124f2 <VAS::allocatePages(int, int)+0x92>
c00125f9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125fc:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012602:	39 d8                	cmp    eax,ebx
c0012604:	73 f3                	jae    c00125f9 <VAS::allocatePages(int, int)+0x199>
c0012606:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001260a:	83 c4 1c             	add    esp,0x1c
c001260d:	5b                   	pop    ebx
c001260e:	5e                   	pop    esi
c001260f:	5f                   	pop    edi
c0012610:	5d                   	pop    ebp
c0012611:	c3                   	ret    
c0012612:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0012617:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001261d:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0012624:	0f 84 4d ff ff ff    	je     c0012577 <VAS::allocatePages(int, int)+0x117>
c001262a:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0012632:	e9 40 ff ff ff       	jmp    c0012577 <VAS::allocatePages(int, int)+0x117>
c0012637:	90                   	nop

c0012638 <VAS::setCPUSpecific(unsigned long)>:
c0012638:	83 ec 0c             	sub    esp,0xc
c001263b:	6a 05                	push   0x5
c001263d:	68 00 00 40 c2       	push   0xc2400000
c0012642:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012646:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001264a:	e8 11 fd ff ff       	call   c0012360 <VAS::mapPage(unsigned long, unsigned long, int)>
c001264f:	83 c4 1c             	add    esp,0x1c
c0012652:	c3                   	ret    
c0012653:	90                   	nop

c0012654 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012654:	55                   	push   ebp
c0012655:	57                   	push   edi
c0012656:	56                   	push   esi
c0012657:	53                   	push   ebx
c0012658:	83 ec 1c             	sub    esp,0x1c
c001265b:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0012660:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012664:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001266a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001266e:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012674:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012678:	83 e0 01             	and    eax,0x1
c001267b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001267f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012683:	85 c0                	test   eax,eax
c0012685:	7e 39                	jle    c00126c0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012687:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001268b:	89 f3                	mov    ebx,esi
c001268d:	c1 e0 0c             	shl    eax,0xc
c0012690:	01 f0                	add    eax,esi
c0012692:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012696:	55                   	push   ebp
c0012697:	53                   	push   ebx
c0012698:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001269c:	29 f0                	sub    eax,esi
c001269e:	01 d8                	add    eax,ebx
c00126a0:	50                   	push   eax
c00126a1:	57                   	push   edi
c00126a2:	e8 b9 fc ff ff       	call   c0012360 <VAS::mapPage(unsigned long, unsigned long, int)>
c00126a7:	83 c4 10             	add    esp,0x10
c00126aa:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126af:	74 03                	je     c00126b4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00126b1:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00126b4:	81 c3 00 10 00 00    	add    ebx,0x1000
c00126ba:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c00126be:	75 d6                	jne    c0012696 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00126c0:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126c5:	75 10                	jne    c00126d7 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00126c7:	0f 20 d8             	mov    eax,cr3
c00126ca:	0f 22 d8             	mov    cr3,eax
c00126cd:	83 c4 1c             	add    esp,0x1c
c00126d0:	89 f0                	mov    eax,esi
c00126d2:	5b                   	pop    ebx
c00126d3:	5e                   	pop    esi
c00126d4:	5f                   	pop    edi
c00126d5:	5d                   	pop    ebp
c00126d6:	c3                   	ret    
c00126d7:	89 f3                	mov    ebx,esi
c00126d9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126dd:	c1 eb 0a             	shr    ebx,0xa
c00126e0:	c1 e0 0c             	shl    eax,0xc
c00126e3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00126e9:	01 f0                	add    eax,esi
c00126eb:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00126f1:	c1 e8 0a             	shr    eax,0xa
c00126f4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00126f9:	2d 00 00 40 00       	sub    eax,0x400000
c00126fe:	39 c3                	cmp    ebx,eax
c0012700:	77 cb                	ja     c00126cd <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0012702:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012705:	81 c3 00 10 00 00    	add    ebx,0x1000
c001270b:	39 d8                	cmp    eax,ebx
c001270d:	73 f3                	jae    c0012702 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c001270f:	83 c4 1c             	add    esp,0x1c
c0012712:	89 f0                	mov    eax,esi
c0012714:	5b                   	pop    ebx
c0012715:	5e                   	pop    esi
c0012716:	5f                   	pop    edi
c0012717:	5d                   	pop    ebp
c0012718:	c3                   	ret    
c0012719:	90                   	nop

c001271a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c001271a:	55                   	push   ebp
c001271b:	57                   	push   edi
c001271c:	56                   	push   esi
c001271d:	53                   	push   ebx
c001271e:	83 ec 1c             	sub    esp,0x1c
c0012721:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012725:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012729:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c001272d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012731:	a9 ff 0f 00 00       	test   eax,0xfff
c0012736:	75 4a                	jne    c0012782 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012738:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001273c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001273f:	c1 eb 16             	shr    ebx,0x16
c0012742:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012749:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c001274d:	74 4d                	je     c001279c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c001274f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012753:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012757:	c1 e8 0a             	shr    eax,0xa
c001275a:	80 fa 01             	cmp    dl,0x1
c001275d:	19 d2                	sbb    edx,edx
c001275f:	c1 e3 0c             	shl    ebx,0xc
c0012762:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012766:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c001276c:	25 fc 0f 00 00       	and    eax,0xffc
c0012771:	01 d8                	add    eax,ebx
c0012773:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c001277a:	83 c4 1c             	add    esp,0x1c
c001277d:	5b                   	pop    ebx
c001277e:	5e                   	pop    esi
c001277f:	5f                   	pop    edi
c0012780:	5d                   	pop    ebp
c0012781:	c3                   	ret    
c0012782:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012786:	83 ec 0c             	sub    esp,0xc
c0012789:	68 28 a8 02 c0       	push   0xc002a828
c001278e:	e8 b2 7e 00 00       	call   c001a645 <Krnl::panic(char const*)>
c0012793:	83 c4 10             	add    esp,0x10
c0012796:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001279a:	eb 9c                	jmp    c0012738 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c001279c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00127a0:	e8 48 d7 ff ff       	call   c000feed <Phys::allocatePage()>
c00127a5:	89 c5                	mov    ebp,eax
c00127a7:	e8 3a f6 ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c00127ac:	83 ec 0c             	sub    esp,0xc
c00127af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00127b3:	6a 01                	push   0x1
c00127b5:	e8 91 f3 ff ff       	call   c0011b4b <Virt::allocateKernelVirtualPages(int)>
c00127ba:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00127c1:	6a 01                	push   0x1
c00127c3:	50                   	push   eax
c00127c4:	55                   	push   ebp
c00127c5:	81 cd 07 04 00 00    	or     ebp,0x407
c00127cb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00127cf:	51                   	push   ecx
c00127d0:	e8 7f fe ff ff       	call   c0012654 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00127d5:	83 c4 1c             	add    esp,0x1c
c00127d8:	68 00 10 00 00       	push   0x1000
c00127dd:	6a 00                	push   0x0
c00127df:	50                   	push   eax
c00127e0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00127e4:	e8 97 df fe ff       	call   c0000780 <memset>
c00127e9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00127ed:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00127f0:	e8 04 f8 ff ff       	call   c0011ff9 <Virt::freeKernelVirtualPages(unsigned long)>
c00127f5:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00127f8:	83 c4 10             	add    esp,0x10
c00127fb:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c00127fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012802:	e9 48 ff ff ff       	jmp    c001274f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0012807:	90                   	nop

c0012808 <VAS::VAS(bool)>:
c0012808:	53                   	push   ebx
c0012809:	83 ec 28             	sub    esp,0x28
c001280c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012810:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012814:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012818:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001281f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012823:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001282a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001282e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012832:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012835:	e8 b3 d6 ff ff       	call   c000feed <Phys::allocatePage()>
c001283a:	89 c2                	mov    edx,eax
c001283c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012840:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0012843:	e8 9e f5 ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0012848:	89 c3                	mov    ebx,eax
c001284a:	83 ec 0c             	sub    esp,0xc
c001284d:	6a 01                	push   0x1
c001284f:	e8 f7 f2 ff ff       	call   c0011b4b <Virt::allocateKernelVirtualPages(int)>
c0012854:	83 c4 10             	add    esp,0x10
c0012857:	89 c2                	mov    edx,eax
c0012859:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001285d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012860:	83 ec 0c             	sub    esp,0xc
c0012863:	6a 03                	push   0x3
c0012865:	6a 01                	push   0x1
c0012867:	52                   	push   edx
c0012868:	50                   	push   eax
c0012869:	53                   	push   ebx
c001286a:	e8 e5 fd ff ff       	call   c0012654 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001286f:	83 c4 20             	add    esp,0x20
c0012872:	89 c2                	mov    edx,eax
c0012874:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012878:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001287b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012883:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c001288b:	7f 1c                	jg     c00128a9 <VAS::VAS(bool)+0xa1>
c001288d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012891:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012894:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012898:	c1 e2 02             	shl    edx,0x2
c001289b:	01 d0                	add    eax,edx
c001289d:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00128a3:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00128a7:	eb da                	jmp    c0012883 <VAS::VAS(bool)+0x7b>
c00128a9:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00128b1:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00128b9:	7f 7a                	jg     c0012935 <VAS::VAS(bool)+0x12d>
c00128bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128bf:	2d 00 02 00 00       	sub    eax,0x200
c00128c4:	c1 e0 0c             	shl    eax,0xc
c00128c7:	83 c8 03             	or     eax,0x3
c00128ca:	89 c2                	mov    edx,eax
c00128cc:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c00128d1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128d7:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00128dd:	83 e0 10             	and    eax,0x10
c00128e0:	84 c0                	test   al,al
c00128e2:	74 07                	je     c00128eb <VAS::VAS(bool)+0xe3>
c00128e4:	b8 00 01 00 00       	mov    eax,0x100
c00128e9:	eb 05                	jmp    c00128f0 <VAS::VAS(bool)+0xe8>
c00128eb:	b8 00 00 00 00       	mov    eax,0x0
c00128f0:	09 d0                	or     eax,edx
c00128f2:	89 c1                	mov    ecx,eax
c00128f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128f8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00128fb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00128ff:	c1 e2 02             	shl    edx,0x2
c0012902:	01 d0                	add    eax,edx
c0012904:	89 ca                	mov    edx,ecx
c0012906:	89 10                	mov    DWORD PTR [eax],edx
c0012908:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001290c:	2d 40 03 00 00       	sub    eax,0x340
c0012911:	83 f8 7f             	cmp    eax,0x7f
c0012914:	77 16                	ja     c001292c <VAS::VAS(bool)+0x124>
c0012916:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001291a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001291d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012921:	c1 e2 02             	shl    edx,0x2
c0012924:	01 d0                	add    eax,edx
c0012926:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001292c:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012930:	e9 7c ff ff ff       	jmp    c00128b1 <VAS::VAS(bool)+0xa9>
c0012935:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001293a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012940:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012946:	83 e0 10             	and    eax,0x10
c0012949:	84 c0                	test   al,al
c001294b:	74 07                	je     c0012954 <VAS::VAS(bool)+0x14c>
c001294d:	b8 03 41 00 00       	mov    eax,0x4103
c0012952:	eb 05                	jmp    c0012959 <VAS::VAS(bool)+0x151>
c0012954:	b8 03 40 00 00       	mov    eax,0x4003
c0012959:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001295d:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0012960:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012966:	89 02                	mov    DWORD PTR [edx],eax
c0012968:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001296d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012973:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012979:	83 ec 08             	sub    esp,0x8
c001297c:	50                   	push   eax
c001297d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012981:	e8 b2 fc ff ff       	call   c0012638 <VAS::setCPUSpecific(unsigned long)>
c0012986:	83 c4 10             	add    esp,0x10
c0012989:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001298d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012990:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0012995:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001299b:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00129a1:	83 e0 10             	and    eax,0x10
c00129a4:	84 c0                	test   al,al
c00129a6:	74 07                	je     c00129af <VAS::VAS(bool)+0x1a7>
c00129a8:	b8 00 01 00 00       	mov    eax,0x100
c00129ad:	eb 05                	jmp    c00129b4 <VAS::VAS(bool)+0x1ac>
c00129af:	b8 00 00 00 00       	mov    eax,0x0
c00129b4:	09 c2                	or     edx,eax
c00129b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129ba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00129bd:	05 fc 0f 00 00       	add    eax,0xffc
c00129c2:	83 ca 03             	or     edx,0x3
c00129c5:	89 10                	mov    DWORD PTR [eax],edx
c00129c7:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c00129cc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129d2:	83 ec 0c             	sub    esp,0xc
c00129d5:	50                   	push   eax
c00129d6:	e8 45 1c 00 00       	call   c0014620 <Device::getName()>
c00129db:	83 c4 10             	add    esp,0x10
c00129de:	83 ec 08             	sub    esp,0x8
c00129e1:	68 6d a9 02 c0       	push   0xc002a96d
c00129e6:	50                   	push   eax
c00129e7:	e8 dc de fe ff       	call   c00008c8 <strcmp>
c00129ec:	83 c4 10             	add    esp,0x10
c00129ef:	85 c0                	test   eax,eax
c00129f1:	0f 94 c0             	sete   al
c00129f4:	84 c0                	test   al,al
c00129f6:	74 70                	je     c0012a68 <VAS::VAS(bool)+0x260>
c00129f8:	e8 06 b4 00 00       	call   c001de03 <disableIRQs()>
c00129fd:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0012a02:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a08:	05 7c 09 00 00       	add    eax,0x97c
c0012a0d:	83 ec 0c             	sub    esp,0xc
c0012a10:	50                   	push   eax
c0012a11:	e8 ae c8 ff ff       	call   c000f2c4 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a16:	83 c4 10             	add    esp,0x10
c0012a19:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a1e:	89 c3                	mov    ebx,eax
c0012a20:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0012a25:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a2b:	05 7c 09 00 00       	add    eax,0x97c
c0012a30:	83 ec 0c             	sub    esp,0xc
c0012a33:	50                   	push   eax
c0012a34:	e8 8b c8 ff ff       	call   c000f2c4 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a39:	83 c4 10             	add    esp,0x10
c0012a3c:	83 ec 08             	sub    esp,0x8
c0012a3f:	50                   	push   eax
c0012a40:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a44:	e8 91 f5 ff ff       	call   c0011fda <VAS::getPageTableEntry(unsigned long)>
c0012a49:	83 c4 10             	add    esp,0x10
c0012a4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a4e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a53:	6a 11                	push   0x11
c0012a55:	53                   	push   ebx
c0012a56:	50                   	push   eax
c0012a57:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a5b:	e8 00 f9 ff ff       	call   c0012360 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012a60:	83 c4 10             	add    esp,0x10
c0012a63:	e8 a9 b3 00 00       	call   c001de11 <enableIRQs()>
c0012a68:	90                   	nop
c0012a69:	83 c4 28             	add    esp,0x28
c0012a6c:	5b                   	pop    ebx
c0012a6d:	c3                   	ret    

c0012a6e <VAS::evict(unsigned long)>:
c0012a6e:	55                   	push   ebp
c0012a6f:	57                   	push   edi
c0012a70:	56                   	push   esi
c0012a71:	53                   	push   ebx
c0012a72:	83 ec 1c             	sub    esp,0x1c
c0012a75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a79:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012a7d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012a81:	e8 06 f2 ff ff       	call   c0011c8c <Virt::allocateSwapfilePage()>
c0012a86:	89 c7                	mov    edi,eax
c0012a88:	a1 6c d5 02 c0       	mov    eax,ds:0xc002d56c
c0012a8d:	85 c0                	test   eax,eax
c0012a8f:	7e 3d                	jle    c0012ace <VAS::evict(unsigned long)+0x60>
c0012a91:	89 ee                	mov    esi,ebp
c0012a93:	31 db                	xor    ebx,ebx
c0012a95:	83 ec 0c             	sub    esp,0xc
c0012a98:	57                   	push   edi
c0012a99:	e8 dc f1 ff ff       	call   c0011c7a <Virt::swapIDToSector(unsigned long)>
c0012a9e:	89 34 24             	mov    DWORD PTR [esp],esi
c0012aa1:	01 d8                	add    eax,ebx
c0012aa3:	6a 01                	push   0x1
c0012aa5:	31 d2                	xor    edx,edx
c0012aa7:	43                   	inc    ebx
c0012aa8:	52                   	push   edx
c0012aa9:	81 c6 00 02 00 00    	add    esi,0x200
c0012aaf:	50                   	push   eax
c0012ab0:	0f be 05 78 d5 02 c0 	movsx  eax,BYTE PTR ds:0xc002d578
c0012ab7:	ff 34 85 dc ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd1524]
c0012abe:	e8 41 3d 00 00       	call   c0016804 <LogicalDisk::write(unsigned long long, int, void*)>
c0012ac3:	83 c4 20             	add    esp,0x20
c0012ac6:	39 1d 6c d5 02 c0    	cmp    DWORD PTR ds:0xc002d56c,ebx
c0012acc:	7f c7                	jg     c0012a95 <VAS::evict(unsigned long)+0x27>
c0012ace:	83 ec 08             	sub    esp,0x8
c0012ad1:	c1 e7 0b             	shl    edi,0xb
c0012ad4:	55                   	push   ebp
c0012ad5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012ad9:	e8 fc f4 ff ff       	call   c0011fda <VAS::getPageTableEntry(unsigned long)>
c0012ade:	83 c4 0c             	add    esp,0xc
c0012ae1:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ae3:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012ae9:	09 d7                	or     edi,edx
c0012aeb:	89 38                	mov    DWORD PTR [eax],edi
c0012aed:	a1 48 e7 02 c0       	mov    eax,ds:0xc002e748
c0012af2:	40                   	inc    eax
c0012af3:	a3 48 e7 02 c0       	mov    ds:0xc002e748,eax
c0012af8:	0f 20 da             	mov    edx,cr3
c0012afb:	0f 22 da             	mov    cr3,edx
c0012afe:	50                   	push   eax
c0012aff:	55                   	push   ebp
c0012b00:	68 7b a9 02 c0       	push   0xc002a97b
c0012b05:	e8 fd 03 00 00       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0012b0a:	a1 44 e7 02 c0       	mov    eax,ds:0xc002e744
c0012b0f:	c7 44 24 40 90 a9 02 c0 	mov    DWORD PTR [esp+0x40],0xc002a990
c0012b17:	8d 50 01             	lea    edx,[eax+0x1]
c0012b1a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012b1e:	89 15 44 e7 02 c0    	mov    DWORD PTR ds:0xc002e744,edx
c0012b24:	83 c4 2c             	add    esp,0x2c
c0012b27:	5b                   	pop    ebx
c0012b28:	5e                   	pop    esi
c0012b29:	5f                   	pop    edi
c0012b2a:	5d                   	pop    ebp
c0012b2b:	e9 d7 03 00 00       	jmp    c0012f07 <Dbg::kprintf(char const*, ...)>

c0012b30 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012b30:	55                   	push   ebp
c0012b31:	57                   	push   edi
c0012b32:	56                   	push   esi
c0012b33:	53                   	push   ebx
c0012b34:	83 ec 0c             	sub    esp,0xc
c0012b37:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0012b3b:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012b41:	0f 84 d1 00 00 00    	je     c0012c18 <VAS::tryLoadBackOffDisk(unsigned long)+0xe8>
c0012b47:	56                   	push   esi
c0012b48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012b4c:	e8 89 f4 ff ff       	call   c0011fda <VAS::getPageTableEntry(unsigned long)>
c0012b51:	5b                   	pop    ebx
c0012b52:	85 c0                	test   eax,eax
c0012b54:	5f                   	pop    edi
c0012b55:	89 c3                	mov    ebx,eax
c0012b57:	0f 84 bb 00 00 00    	je     c0012c18 <VAS::tryLoadBackOffDisk(unsigned long)+0xe8>
c0012b5d:	8b 38                	mov    edi,DWORD PTR [eax]
c0012b5f:	31 c0                	xor    eax,eax
c0012b61:	89 fa                	mov    edx,edi
c0012b63:	81 e2 01 04 00 00    	and    edx,0x401
c0012b69:	81 fa 00 04 00 00    	cmp    edx,0x400
c0012b6f:	0f 85 a5 00 00 00    	jne    c0012c1a <VAS::tryLoadBackOffDisk(unsigned long)+0xea>
c0012b75:	e8 73 d3 ff ff       	call   c000feed <Phys::allocatePage()>
c0012b7a:	c1 ef 0b             	shr    edi,0xb
c0012b7d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012b7f:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012b85:	09 c2                	or     edx,eax
c0012b87:	81 ca 01 08 00 00    	or     edx,0x801
c0012b8d:	89 13                	mov    DWORD PTR [ebx],edx
c0012b8f:	8b 0d 6c d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d56c
c0012b95:	85 c9                	test   ecx,ecx
c0012b97:	7e 3d                	jle    c0012bd6 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c0012b99:	89 f5                	mov    ebp,esi
c0012b9b:	31 db                	xor    ebx,ebx
c0012b9d:	83 ec 0c             	sub    esp,0xc
c0012ba0:	57                   	push   edi
c0012ba1:	e8 d4 f0 ff ff       	call   c0011c7a <Virt::swapIDToSector(unsigned long)>
c0012ba6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012ba9:	01 d8                	add    eax,ebx
c0012bab:	6a 01                	push   0x1
c0012bad:	31 d2                	xor    edx,edx
c0012baf:	43                   	inc    ebx
c0012bb0:	52                   	push   edx
c0012bb1:	81 c5 00 02 00 00    	add    ebp,0x200
c0012bb7:	50                   	push   eax
c0012bb8:	0f be 05 78 d5 02 c0 	movsx  eax,BYTE PTR ds:0xc002d578
c0012bbf:	ff 34 85 dc ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd1524]
c0012bc6:	e8 cd 3b 00 00       	call   c0016798 <LogicalDisk::read(unsigned long long, int, void*)>
c0012bcb:	83 c4 20             	add    esp,0x20
c0012bce:	39 1d 6c d5 02 c0    	cmp    DWORD PTR ds:0xc002d56c,ebx
c0012bd4:	7f c7                	jg     c0012b9d <VAS::tryLoadBackOffDisk(unsigned long)+0x6d>
c0012bd6:	a1 48 e7 02 c0       	mov    eax,ds:0xc002e748
c0012bdb:	48                   	dec    eax
c0012bdc:	52                   	push   edx
c0012bdd:	a3 48 e7 02 c0       	mov    ds:0xc002e748,eax
c0012be2:	50                   	push   eax
c0012be3:	56                   	push   esi
c0012be4:	68 a1 a9 02 c0       	push   0xc002a9a1
c0012be9:	e8 19 03 00 00       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0012bee:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012bf1:	e8 66 f0 ff ff       	call   c0011c5c <Virt::freeSwapfilePage(unsigned long)>
c0012bf6:	e8 27 b2 00 00       	call   c001de22 <unlockScheduler()>
c0012bfb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012bff:	83 c4 10             	add    esp,0x10
c0012c02:	25 ff 0f 00 00       	and    eax,0xfff
c0012c07:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012c0c:	77 14                	ja     c0012c22 <VAS::tryLoadBackOffDisk(unsigned long)+0xf2>
c0012c0e:	0f 20 d8             	mov    eax,cr3
c0012c11:	0f 22 d8             	mov    cr3,eax
c0012c14:	b0 01                	mov    al,0x1
c0012c16:	eb 02                	jmp    c0012c1a <VAS::tryLoadBackOffDisk(unsigned long)+0xea>
c0012c18:	31 c0                	xor    eax,eax
c0012c1a:	83 c4 0c             	add    esp,0xc
c0012c1d:	5b                   	pop    ebx
c0012c1e:	5e                   	pop    esi
c0012c1f:	5f                   	pop    edi
c0012c20:	5d                   	pop    ebp
c0012c21:	c3                   	ret    
c0012c22:	83 ec 0c             	sub    esp,0xc
c0012c25:	68 b6 a9 02 c0       	push   0xc002a9b6
c0012c2a:	e8 d8 02 00 00       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0012c2f:	83 c4 10             	add    esp,0x10
c0012c32:	eb da                	jmp    c0012c0e <VAS::tryLoadBackOffDisk(unsigned long)+0xde>

c0012c34 <VAS::scanForEviction()>:
c0012c34:	57                   	push   edi
c0012c35:	56                   	push   esi
c0012c36:	53                   	push   ebx
c0012c37:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012c3b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012c3e:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012c44:	75 0e                	jne    c0012c54 <VAS::scanForEviction()+0x20>
c0012c46:	89 da                	mov    edx,ebx
c0012c48:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012c4b:	c1 ea 16             	shr    edx,0x16
c0012c4e:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012c52:	74 48                	je     c0012c9c <VAS::scanForEviction()+0x68>
c0012c54:	53                   	push   ebx
c0012c55:	56                   	push   esi
c0012c56:	e8 7f f3 ff ff       	call   c0011fda <VAS::getPageTableEntry(unsigned long)>
c0012c5b:	5a                   	pop    edx
c0012c5c:	8b 38                	mov    edi,DWORD PTR [eax]
c0012c5e:	59                   	pop    ecx
c0012c5f:	89 fa                	mov    edx,edi
c0012c61:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012c67:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012c6d:	74 3d                	je     c0012cac <VAS::scanForEviction()+0x78>
c0012c6f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012c75:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0012c7b:	76 2a                	jbe    c0012ca7 <VAS::scanForEviction()+0x73>
c0012c7d:	31 db                	xor    ebx,ebx
c0012c7f:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0012c86:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012c8c:	75 c6                	jne    c0012c54 <VAS::scanForEviction()+0x20>
c0012c8e:	89 da                	mov    edx,ebx
c0012c90:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012c93:	c1 ea 16             	shr    edx,0x16
c0012c96:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012c9a:	75 b8                	jne    c0012c54 <VAS::scanForEviction()+0x20>
c0012c9c:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012ca2:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012ca5:	eb 97                	jmp    c0012c3e <VAS::scanForEviction()+0xa>
c0012ca7:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012caa:	eb 92                	jmp    c0012c3e <VAS::scanForEviction()+0xa>
c0012cac:	f7 c7 01 00 00 00    	test   edi,0x1
c0012cb2:	74 bb                	je     c0012c6f <VAS::scanForEviction()+0x3b>
c0012cb4:	f7 c7 20 00 00 00    	test   edi,0x20
c0012cba:	74 0a                	je     c0012cc6 <VAS::scanForEviction()+0x92>
c0012cbc:	83 e7 df             	and    edi,0xffffffdf
c0012cbf:	89 38                	mov    DWORD PTR [eax],edi
c0012cc1:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012cc4:	eb a9                	jmp    c0012c6f <VAS::scanForEviction()+0x3b>
c0012cc6:	83 ec 08             	sub    esp,0x8
c0012cc9:	53                   	push   ebx
c0012cca:	56                   	push   esi
c0012ccb:	e8 9e fd ff ff       	call   c0012a6e <VAS::evict(unsigned long)>
c0012cd0:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c0012cd7:	83 c4 10             	add    esp,0x10
c0012cda:	89 f8                	mov    eax,edi
c0012cdc:	5b                   	pop    ebx
c0012cdd:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012ce2:	5e                   	pop    esi
c0012ce3:	5f                   	pop    edi
c0012ce4:	c3                   	ret    

c0012ce5 <mapVASFirstTime>:
c0012ce5:	55                   	push   ebp
c0012ce6:	57                   	push   edi
c0012ce7:	56                   	push   esi
c0012ce8:	53                   	push   ebx
c0012ce9:	83 ec 0c             	sub    esp,0xc
c0012cec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012cf1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012cf4:	4a                   	dec    edx
c0012cf5:	0f 84 8e 00 00 00    	je     c0012d89 <mapVASFirstTime+0xa4>
c0012cfb:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012cfe:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012d01:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012d06:	c1 e5 15             	shl    ebp,0x15
c0012d09:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012d0e:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012d14:	29 eb                	sub    ebx,ebp
c0012d16:	29 ee                	sub    esi,ebp
c0012d18:	e8 d0 d1 ff ff       	call   c000feed <Phys::allocatePage()>
c0012d1d:	83 ec 0c             	sub    esp,0xc
c0012d20:	68 03 04 00 00       	push   0x403
c0012d25:	6a 01                	push   0x1
c0012d27:	53                   	push   ebx
c0012d28:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012d2e:	50                   	push   eax
c0012d2f:	57                   	push   edi
c0012d30:	e8 1f f9 ff ff       	call   c0012654 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012d35:	83 c4 20             	add    esp,0x20
c0012d38:	39 f3                	cmp    ebx,esi
c0012d3a:	75 dc                	jne    c0012d18 <mapVASFirstTime+0x33>
c0012d3c:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012d41:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012d46:	29 ee                	sub    esi,ebp
c0012d48:	29 e8                	sub    eax,ebp
c0012d4a:	89 c5                	mov    ebp,eax
c0012d4c:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012d50:	19 db                	sbb    ebx,ebx
c0012d52:	e8 96 d1 ff ff       	call   c000feed <Phys::allocatePage()>
c0012d57:	83 e3 04             	and    ebx,0x4
c0012d5a:	83 ec 0c             	sub    esp,0xc
c0012d5d:	81 c3 03 04 00 00    	add    ebx,0x403
c0012d63:	53                   	push   ebx
c0012d64:	6a 01                	push   0x1
c0012d66:	56                   	push   esi
c0012d67:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012d6d:	50                   	push   eax
c0012d6e:	57                   	push   edi
c0012d6f:	e8 e0 f8 ff ff       	call   c0012654 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012d74:	83 c4 20             	add    esp,0x20
c0012d77:	39 f5                	cmp    ebp,esi
c0012d79:	75 d1                	jne    c0012d4c <mapVASFirstTime+0x67>
c0012d7b:	0f 20 d8             	mov    eax,cr3
c0012d7e:	0f 22 d8             	mov    cr3,eax
c0012d81:	83 c4 0c             	add    esp,0xc
c0012d84:	5b                   	pop    ebx
c0012d85:	5e                   	pop    esi
c0012d86:	5f                   	pop    edi
c0012d87:	5d                   	pop    ebp
c0012d88:	c3                   	ret    
c0012d89:	83 ec 0c             	sub    esp,0xc
c0012d8c:	68 c6 a9 02 c0       	push   0xc002a9c6
c0012d91:	e8 71 01 00 00       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0012d96:	83 c4 10             	add    esp,0x10
c0012d99:	83 c4 0c             	add    esp,0xc
c0012d9c:	5b                   	pop    ebx
c0012d9d:	5e                   	pop    esi
c0012d9e:	5f                   	pop    edi
c0012d9f:	5d                   	pop    ebp
c0012da0:	c3                   	ret    

c0012da1 <__cxa_atexit>:
c0012da1:	31 c0                	xor    eax,eax
c0012da3:	c3                   	ret    

c0012da4 <__cxa_finalize>:
c0012da4:	c3                   	ret    

c0012da5 <__stack_chk_fail>:
c0012da5:	55                   	push   ebp
c0012da6:	89 e5                	mov    ebp,esp
c0012da8:	83 ec 14             	sub    esp,0x14
c0012dab:	68 df a9 02 c0       	push   0xc002a9df
c0012db0:	e8 52 01 00 00       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0012db5:	58                   	pop    eax
c0012db6:	5a                   	pop    edx
c0012db7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012dba:	68 2f aa 02 c0       	push   0xc002aa2f
c0012dbf:	e8 43 01 00 00       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0012dc4:	59                   	pop    ecx
c0012dc5:	58                   	pop    eax
c0012dc6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012dc9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012dcc:	68 2f aa 02 c0       	push   0xc002aa2f
c0012dd1:	e8 31 01 00 00       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0012dd6:	5a                   	pop    edx
c0012dd7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012dda:	59                   	pop    ecx
c0012ddb:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ddd:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012de0:	68 2f aa 02 c0       	push   0xc002aa2f
c0012de5:	e8 1d 01 00 00       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0012dea:	5a                   	pop    edx
c0012deb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012dee:	59                   	pop    ecx
c0012def:	8b 00                	mov    eax,DWORD PTR [eax]
c0012df1:	8b 00                	mov    eax,DWORD PTR [eax]
c0012df3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012df6:	68 2f aa 02 c0       	push   0xc002aa2f
c0012dfb:	e8 07 01 00 00       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0012e00:	c7 04 24 37 aa 02 c0 	mov    DWORD PTR [esp],0xc002aa37
c0012e07:	e8 39 78 00 00       	call   c001a645 <Krnl::panic(char const*)>
c0012e0c:	83 c4 10             	add    esp,0x10
c0012e0f:	c9                   	leave  
c0012e10:	c3                   	ret    

c0012e11 <__cxa_pure_virtual>:
c0012e11:	83 ec 18             	sub    esp,0x18
c0012e14:	68 4f aa 02 c0       	push   0xc002aa4f
c0012e19:	e8 27 78 00 00       	call   c001a645 <Krnl::panic(char const*)>
c0012e1e:	83 c4 1c             	add    esp,0x1c
c0012e21:	c3                   	ret    

c0012e22 <operator new[](unsigned long)>:
c0012e22:	e9 24 ca ff ff       	jmp    c000f84b <malloc>

c0012e27 <operator delete(void*, unsigned long)>:
c0012e27:	e9 3f ca ff ff       	jmp    c000f86b <rfree>

c0012e2c <operator delete[](void*)>:
c0012e2c:	e9 3a ca ff ff       	jmp    c000f86b <rfree>

c0012e31 <operator delete[](void*, unsigned long)>:
c0012e31:	e9 35 ca ff ff       	jmp    c000f86b <rfree>

c0012e36 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012e36:	57                   	push   edi
c0012e37:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012e3c:	56                   	push   esi
c0012e3d:	be 64 aa 02 c0       	mov    esi,0xc002aa64
c0012e42:	53                   	push   ebx
c0012e43:	83 ec 40             	sub    esp,0x40
c0012e46:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012e4a:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012e4e:	fc                   	cld    
c0012e4f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012e51:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012e55:	83 f9 3e             	cmp    ecx,0x3e
c0012e58:	7e 05                	jle    c0012e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012e5a:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012e5f:	89 df                	mov    edi,ebx
c0012e61:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012e65:	eb 02                	jmp    c0012e69 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012e67:	89 c7                	mov    edi,eax
c0012e69:	31 d2                	xor    edx,edx
c0012e6b:	46                   	inc    esi
c0012e6c:	89 f8                	mov    eax,edi
c0012e6e:	f7 f1                	div    ecx
c0012e70:	39 cf                	cmp    edi,ecx
c0012e72:	73 f3                	jae    c0012e67 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012e74:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012e77:	eb 02                	jmp    c0012e7b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012e79:	89 c3                	mov    ebx,eax
c0012e7b:	31 d2                	xor    edx,edx
c0012e7d:	4e                   	dec    esi
c0012e7e:	89 d8                	mov    eax,ebx
c0012e80:	f7 f1                	div    ecx
c0012e82:	39 cb                	cmp    ebx,ecx
c0012e84:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012e88:	88 16                	mov    BYTE PTR [esi],dl
c0012e8a:	73 ed                	jae    c0012e79 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012e8c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012e90:	83 c4 40             	add    esp,0x40
c0012e93:	5b                   	pop    ebx
c0012e94:	5e                   	pop    esi
c0012e95:	5f                   	pop    edi
c0012e96:	c3                   	ret    

c0012e97 <Dbg::logc(char)>:
c0012e97:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e9b:	ba fd 03 00 00       	mov    edx,0x3fd
c0012ea0:	ec                   	in     al,dx
c0012ea1:	a8 20                	test   al,0x20
c0012ea3:	74 fb                	je     c0012ea0 <Dbg::logc(char)+0x9>
c0012ea5:	ba f8 03 00 00       	mov    edx,0x3f8
c0012eaa:	88 c8                	mov    al,cl
c0012eac:	ee                   	out    dx,al
c0012ead:	c3                   	ret    

c0012eae <Dbg::logs(char*)>:
c0012eae:	53                   	push   ebx
c0012eaf:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012eb3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012eb6:	84 c0                	test   al,al
c0012eb8:	74 0f                	je     c0012ec9 <Dbg::logs(char*)+0x1b>
c0012eba:	50                   	push   eax
c0012ebb:	43                   	inc    ebx
c0012ebc:	e8 d6 ff ff ff       	call   c0012e97 <Dbg::logc(char)>
c0012ec1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012ec4:	5a                   	pop    edx
c0012ec5:	84 c0                	test   al,al
c0012ec7:	75 f1                	jne    c0012eba <Dbg::logs(char*)+0xc>
c0012ec9:	5b                   	pop    ebx
c0012eca:	c3                   	ret    

c0012ecb <Dbg::logWriteInt(unsigned int)>:
c0012ecb:	83 ec 10             	sub    esp,0x10
c0012ece:	6a 0a                	push   0xa
c0012ed0:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012ed4:	50                   	push   eax
c0012ed5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ed9:	e8 58 ff ff ff       	call   c0012e36 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012ede:	50                   	push   eax
c0012edf:	e8 ca ff ff ff       	call   c0012eae <Dbg::logs(char*)>
c0012ee4:	83 c4 20             	add    esp,0x20
c0012ee7:	c3                   	ret    

c0012ee8 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012ee8:	83 ec 10             	sub    esp,0x10
c0012eeb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012eef:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012ef3:	50                   	push   eax
c0012ef4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ef8:	e8 39 ff ff ff       	call   c0012e36 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012efd:	50                   	push   eax
c0012efe:	e8 ab ff ff ff       	call   c0012eae <Dbg::logs(char*)>
c0012f03:	83 c4 20             	add    esp,0x20
c0012f06:	c3                   	ret    

c0012f07 <Dbg::kprintf(char const*, ...)>:
c0012f07:	55                   	push   ebp
c0012f08:	57                   	push   edi
c0012f09:	56                   	push   esi
c0012f0a:	53                   	push   ebx
c0012f0b:	83 ec 0c             	sub    esp,0xc
c0012f0e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012f12:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012f16:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012f1a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012f1d:	84 c0                	test   al,al
c0012f1f:	74 4a                	je     c0012f6b <Dbg::kprintf(char const*, ...)+0x64>
c0012f21:	31 db                	xor    ebx,ebx
c0012f23:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012f26:	3c 25                	cmp    al,0x25
c0012f28:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012f2b:	0f 85 e4 00 00 00    	jne    c0013015 <Dbg::kprintf(char const*, ...)+0x10e>
c0012f31:	83 c3 02             	add    ebx,0x2
c0012f34:	8a 07                	mov    al,BYTE PTR [edi]
c0012f36:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012f39:	83 e8 25             	sub    eax,0x25
c0012f3c:	3c 53                	cmp    al,0x53
c0012f3e:	0f 87 ba 00 00 00    	ja     c0012ffe <Dbg::kprintf(char const*, ...)+0xf7>
c0012f44:	0f b6 c0             	movzx  eax,al
c0012f47:	ff 24 85 a4 aa 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd555c]
c0012f4e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f52:	89 c8                	mov    eax,ecx
c0012f54:	83 c1 04             	add    ecx,0x4
c0012f57:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f5b:	ff 30                	push   DWORD PTR [eax]
c0012f5d:	e8 4c ff ff ff       	call   c0012eae <Dbg::logs(char*)>
c0012f62:	58                   	pop    eax
c0012f63:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012f67:	84 c0                	test   al,al
c0012f69:	75 b8                	jne    c0012f23 <Dbg::kprintf(char const*, ...)+0x1c>
c0012f6b:	83 c4 0c             	add    esp,0xc
c0012f6e:	5b                   	pop    ebx
c0012f6f:	5e                   	pop    esi
c0012f70:	5f                   	pop    edi
c0012f71:	5d                   	pop    ebp
c0012f72:	c3                   	ret    
c0012f73:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f77:	89 d0                	mov    eax,edx
c0012f79:	83 c2 04             	add    edx,0x4
c0012f7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f80:	ff 30                	push   DWORD PTR [eax]
c0012f82:	e8 44 ff ff ff       	call   c0012ecb <Dbg::logWriteInt(unsigned int)>
c0012f87:	58                   	pop    eax
c0012f88:	eb d9                	jmp    c0012f63 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f8a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f8e:	89 d0                	mov    eax,edx
c0012f90:	83 c2 04             	add    edx,0x4
c0012f93:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012f96:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f9a:	50                   	push   eax
c0012f9b:	e8 f7 fe ff ff       	call   c0012e97 <Dbg::logc(char)>
c0012fa0:	58                   	pop    eax
c0012fa1:	eb c0                	jmp    c0012f63 <Dbg::kprintf(char const*, ...)+0x5c>
c0012fa3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012fa7:	89 c8                	mov    eax,ecx
c0012fa9:	83 c1 04             	add    ecx,0x4
c0012fac:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012fb0:	ff 30                	push   DWORD PTR [eax]
c0012fb2:	e8 14 ff ff ff       	call   c0012ecb <Dbg::logWriteInt(unsigned int)>
c0012fb7:	5f                   	pop    edi
c0012fb8:	eb a9                	jmp    c0012f63 <Dbg::kprintf(char const*, ...)+0x5c>
c0012fba:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012fbe:	89 c8                	mov    eax,ecx
c0012fc0:	83 c1 04             	add    ecx,0x4
c0012fc3:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012fc7:	6a 10                	push   0x10
c0012fc9:	ff 30                	push   DWORD PTR [eax]
c0012fcb:	e8 18 ff ff ff       	call   c0012ee8 <Dbg::logWriteIntBase(unsigned int, int)>
c0012fd0:	59                   	pop    ecx
c0012fd1:	5f                   	pop    edi
c0012fd2:	eb 8f                	jmp    c0012f63 <Dbg::kprintf(char const*, ...)+0x5c>
c0012fd4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012fd8:	89 d0                	mov    eax,edx
c0012fda:	83 c2 08             	add    edx,0x8
c0012fdd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012fe1:	6a 10                	push   0x10
c0012fe3:	ff 30                	push   DWORD PTR [eax]
c0012fe5:	e8 fe fe ff ff       	call   c0012ee8 <Dbg::logWriteIntBase(unsigned int, int)>
c0012fea:	58                   	pop    eax
c0012feb:	5a                   	pop    edx
c0012fec:	e9 72 ff ff ff       	jmp    c0012f63 <Dbg::kprintf(char const*, ...)+0x5c>
c0012ff1:	6a 25                	push   0x25
c0012ff3:	e8 9f fe ff ff       	call   c0012e97 <Dbg::logc(char)>
c0012ff8:	58                   	pop    eax
c0012ff9:	e9 65 ff ff ff       	jmp    c0012f63 <Dbg::kprintf(char const*, ...)+0x5c>
c0012ffe:	6a 25                	push   0x25
c0013000:	e8 92 fe ff ff       	call   c0012e97 <Dbg::logc(char)>
c0013005:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0013008:	50                   	push   eax
c0013009:	e8 89 fe ff ff       	call   c0012e97 <Dbg::logc(char)>
c001300e:	5a                   	pop    edx
c001300f:	59                   	pop    ecx
c0013010:	e9 4e ff ff ff       	jmp    c0012f63 <Dbg::kprintf(char const*, ...)+0x5c>
c0013015:	50                   	push   eax
c0013016:	89 eb                	mov    ebx,ebp
c0013018:	e8 7a fe ff ff       	call   c0012e97 <Dbg::logc(char)>
c001301d:	89 fd                	mov    ebp,edi
c001301f:	58                   	pop    eax
c0013020:	e9 3e ff ff ff       	jmp    c0012f63 <Dbg::kprintf(char const*, ...)+0x5c>
c0013025:	90                   	nop

c0013026 <File::read(unsigned long long, void*, int*)>:
c0013026:	53                   	push   ebx
c0013027:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001302b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001302f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013036:	3c 19                	cmp    al,0x19
c0013038:	77 35                	ja     c001306f <File::read(unsigned long long, void*, int*)+0x49>
c001303a:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c0013041:	85 c0                	test   eax,eax
c0013043:	74 2a                	je     c001306f <File::read(unsigned long long, void*, int*)+0x49>
c0013045:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001304b:	85 c0                	test   eax,eax
c001304d:	74 20                	je     c001306f <File::read(unsigned long long, void*, int*)+0x49>
c001304f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013053:	74 21                	je     c0013076 <File::read(unsigned long long, void*, int*)+0x50>
c0013055:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013057:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001305b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013061:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013065:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013069:	5b                   	pop    ebx
c001306a:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c001306d:	ff e0                	jmp    eax
c001306f:	b8 0b 00 00 00       	mov    eax,0xb
c0013074:	eb 05                	jmp    c001307b <File::read(unsigned long long, void*, int*)+0x55>
c0013076:	b8 05 00 00 00       	mov    eax,0x5
c001307b:	5b                   	pop    ebx
c001307c:	c3                   	ret    
c001307d:	90                   	nop

c001307e <File::write(unsigned long long, void*, int*)>:
c001307e:	53                   	push   ebx
c001307f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013083:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013087:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001308e:	3c 19                	cmp    al,0x19
c0013090:	77 35                	ja     c00130c7 <File::write(unsigned long long, void*, int*)+0x49>
c0013092:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c0013099:	85 c0                	test   eax,eax
c001309b:	74 2a                	je     c00130c7 <File::write(unsigned long long, void*, int*)+0x49>
c001309d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00130a3:	85 c0                	test   eax,eax
c00130a5:	74 20                	je     c00130c7 <File::write(unsigned long long, void*, int*)+0x49>
c00130a7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130ab:	74 21                	je     c00130ce <File::write(unsigned long long, void*, int*)+0x50>
c00130ad:	8b 08                	mov    ecx,DWORD PTR [eax]
c00130af:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00130b3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00130b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00130bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00130c1:	5b                   	pop    ebx
c00130c2:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c00130c5:	ff e0                	jmp    eax
c00130c7:	b8 0b 00 00 00       	mov    eax,0xb
c00130cc:	eb 05                	jmp    c00130d3 <File::write(unsigned long long, void*, int*)+0x55>
c00130ce:	b8 05 00 00 00       	mov    eax,0x5
c00130d3:	5b                   	pop    ebx
c00130d4:	c3                   	ret    
c00130d5:	90                   	nop

c00130d6 <Directory::read(unsigned long long, void*, int*)>:
c00130d6:	53                   	push   ebx
c00130d7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00130db:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00130df:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00130e6:	3c 19                	cmp    al,0x19
c00130e8:	77 35                	ja     c001311f <Directory::read(unsigned long long, void*, int*)+0x49>
c00130ea:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c00130f1:	85 c0                	test   eax,eax
c00130f3:	74 2a                	je     c001311f <Directory::read(unsigned long long, void*, int*)+0x49>
c00130f5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00130fb:	85 c0                	test   eax,eax
c00130fd:	74 20                	je     c001311f <Directory::read(unsigned long long, void*, int*)+0x49>
c00130ff:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013103:	74 21                	je     c0013126 <Directory::read(unsigned long long, void*, int*)+0x50>
c0013105:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013107:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001310b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013111:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013115:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013119:	5b                   	pop    ebx
c001311a:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c001311d:	ff e0                	jmp    eax
c001311f:	b8 0b 00 00 00       	mov    eax,0xb
c0013124:	eb 05                	jmp    c001312b <Directory::read(unsigned long long, void*, int*)+0x55>
c0013126:	b8 05 00 00 00       	mov    eax,0x5
c001312b:	5b                   	pop    ebx
c001312c:	c3                   	ret    
c001312d:	90                   	nop

c001312e <Directory::write(unsigned long long, void*, int*)>:
c001312e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013132:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0013139:	b8 0b 00 00 00       	mov    eax,0xb
c001313e:	80 fa 19             	cmp    dl,0x19
c0013141:	77 18                	ja     c001315b <Directory::write(unsigned long long, void*, int*)+0x2d>
c0013143:	8b 14 95 e0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1420]
c001314a:	85 d2                	test   edx,edx
c001314c:	74 0d                	je     c001315b <Directory::write(unsigned long long, void*, int*)+0x2d>
c001314e:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0013155:	19 c0                	sbb    eax,eax
c0013157:	83 e0 0a             	and    eax,0xa
c001315a:	40                   	inc    eax
c001315b:	c3                   	ret    

c001315c <File::isAtty()>:
c001315c:	31 c0                	xor    eax,eax
c001315e:	c3                   	ret    
c001315f:	90                   	nop

c0013160 <Directory::isAtty()>:
c0013160:	31 c0                	xor    eax,eax
c0013162:	c3                   	ret    
c0013163:	90                   	nop

c0013164 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0013164:	b8 0a 00 00 00       	mov    eax,0xa
c0013169:	c3                   	ret    

c001316a <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c001316a:	b8 0a 00 00 00       	mov    eax,0xa
c001316f:	c3                   	ret    

c0013170 <Filesystem::getFileFirstSector(char const*)>:
c0013170:	31 c0                	xor    eax,eax
c0013172:	31 d2                	xor    edx,edx
c0013174:	c3                   	ret    
c0013175:	90                   	nop

c0013176 <File::~File()>:
c0013176:	83 ec 0c             	sub    esp,0xc
c0013179:	ba 64 ac 02 c0       	mov    edx,0xc002ac64
c001317e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013182:	89 10                	mov    DWORD PTR [eax],edx
c0013184:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013188:	83 ec 0c             	sub    esp,0xc
c001318b:	50                   	push   eax
c001318c:	e8 59 e7 ff ff       	call   c00118ea <UnixFile::~UnixFile()>
c0013191:	83 c4 10             	add    esp,0x10
c0013194:	90                   	nop
c0013195:	83 c4 0c             	add    esp,0xc
c0013198:	c3                   	ret    
c0013199:	90                   	nop

c001319a <File::~File()>:
c001319a:	83 ec 0c             	sub    esp,0xc
c001319d:	83 ec 0c             	sub    esp,0xc
c00131a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131a4:	e8 cd ff ff ff       	call   c0013176 <File::~File()>
c00131a9:	83 c4 10             	add    esp,0x10
c00131ac:	83 ec 08             	sub    esp,0x8
c00131af:	68 14 01 00 00       	push   0x114
c00131b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131b8:	e8 6a fc ff ff       	call   c0012e27 <operator delete(void*, unsigned long)>
c00131bd:	83 c4 10             	add    esp,0x10
c00131c0:	83 c4 0c             	add    esp,0xc
c00131c3:	c3                   	ret    

c00131c4 <Directory::~Directory()>:
c00131c4:	83 ec 0c             	sub    esp,0xc
c00131c7:	ba 80 ac 02 c0       	mov    edx,0xc002ac80
c00131cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131d0:	89 10                	mov    DWORD PTR [eax],edx
c00131d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131d6:	83 ec 0c             	sub    esp,0xc
c00131d9:	50                   	push   eax
c00131da:	e8 0b e7 ff ff       	call   c00118ea <UnixFile::~UnixFile()>
c00131df:	83 c4 10             	add    esp,0x10
c00131e2:	90                   	nop
c00131e3:	83 c4 0c             	add    esp,0xc
c00131e6:	c3                   	ret    
c00131e7:	90                   	nop

c00131e8 <Directory::~Directory()>:
c00131e8:	83 ec 0c             	sub    esp,0xc
c00131eb:	83 ec 0c             	sub    esp,0xc
c00131ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131f2:	e8 cd ff ff ff       	call   c00131c4 <Directory::~Directory()>
c00131f7:	83 c4 10             	add    esp,0x10
c00131fa:	83 ec 08             	sub    esp,0x8
c00131fd:	68 14 01 00 00       	push   0x114
c0013202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013206:	e8 1c fc ff ff       	call   c0012e27 <operator delete(void*, unsigned long)>
c001320b:	83 c4 10             	add    esp,0x10
c001320e:	83 c4 0c             	add    esp,0xc
c0013211:	c3                   	ret    

c0013212 <Filesystem::Filesystem()>:
c0013212:	ba fc ab 02 c0       	mov    edx,0xc002abfc
c0013217:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001321b:	89 10                	mov    DWORD PTR [eax],edx
c001321d:	8b 15 54 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e754
c0013223:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013227:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001322a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001322e:	a3 54 e7 02 c0       	mov    ds:0xc002e754,eax
c0013233:	90                   	nop
c0013234:	c3                   	ret    
c0013235:	90                   	nop

c0013236 <Filesystem::~Filesystem()>:
c0013236:	ba fc ab 02 c0       	mov    edx,0xc002abfc
c001323b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001323f:	89 10                	mov    DWORD PTR [eax],edx
c0013241:	90                   	nop
c0013242:	c3                   	ret    
c0013243:	90                   	nop

c0013244 <Filesystem::~Filesystem()>:
c0013244:	83 ec 0c             	sub    esp,0xc
c0013247:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001324b:	e8 e6 ff ff ff       	call   c0013236 <Filesystem::~Filesystem()>
c0013250:	83 c4 04             	add    esp,0x4
c0013253:	83 ec 08             	sub    esp,0x8
c0013256:	6a 08                	push   0x8
c0013258:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001325c:	e8 c6 fb ff ff       	call   c0012e27 <operator delete(void*, unsigned long)>
c0013261:	83 c4 10             	add    esp,0x10
c0013264:	83 c4 0c             	add    esp,0xc
c0013267:	c3                   	ret    

c0013268 <Fs::getcwd(Process*, char*, int)>:
c0013268:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001326c:	31 c0                	xor    eax,eax
c001326e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0013271:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0013275:	7d 15                	jge    c001328c <Fs::getcwd(Process*, char*, int)+0x24>
c0013277:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001327b:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0013282:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0013285:	84 c9                	test   cl,cl
c0013287:	74 06                	je     c001328f <Fs::getcwd(Process*, char*, int)+0x27>
c0013289:	40                   	inc    eax
c001328a:	eb e2                	jmp    c001326e <Fs::getcwd(Process*, char*, int)+0x6>
c001328c:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c001328f:	31 c0                	xor    eax,eax
c0013291:	c3                   	ret    

c0013292 <Fs::initVFS()>:
c0013292:	83 ec 18             	sub    esp,0x18
c0013295:	6a 08                	push   0x8
c0013297:	e8 af c5 ff ff       	call   c000f84b <malloc>
c001329c:	89 04 24             	mov    DWORD PTR [esp],eax
c001329f:	e8 f4 dd 00 00       	call   c0021098 <FAT::FAT()>
c00132a4:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00132ab:	e8 9b c5 ff ff       	call   c000f84b <malloc>
c00132b0:	89 04 24             	mov    DWORD PTR [esp],eax
c00132b3:	e8 38 f0 00 00       	call   c00222f0 <ISO9660::ISO9660()>
c00132b8:	83 c4 1c             	add    esp,0x1c
c00132bb:	c3                   	ret    

c00132bc <Fs::standardiseFiles(char*, char const*, char const*)>:
c00132bc:	55                   	push   ebp
c00132bd:	57                   	push   edi
c00132be:	56                   	push   esi
c00132bf:	53                   	push   ebx
c00132c0:	81 ec 10 04 00 00    	sub    esp,0x410
c00132c6:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c00132cd:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c00132d4:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c00132db:	68 00 04 00 00       	push   0x400
c00132e0:	6a 00                	push   0x0
c00132e2:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00132e6:	56                   	push   esi
c00132e7:	e8 94 d4 fe ff       	call   c0000780 <memset>
c00132ec:	83 c4 10             	add    esp,0x10
c00132ef:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c00132f3:	75 0b                	jne    c0013300 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c00132f5:	50                   	push   eax
c00132f6:	50                   	push   eax
c00132f7:	57                   	push   edi
c00132f8:	56                   	push   esi
c00132f9:	e8 3e d5 fe ff       	call   c000083c <strcpy>
c00132fe:	eb 41                	jmp    c0013341 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0013300:	8a 07                	mov    al,BYTE PTR [edi]
c0013302:	3c 5c                	cmp    al,0x5c
c0013304:	74 04                	je     c001330a <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0013306:	3c 2f                	cmp    al,0x2f
c0013308:	75 18                	jne    c0013322 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c001330a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c001330d:	3c 60                	cmp    al,0x60
c001330f:	7e 03                	jle    c0013314 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0013311:	83 e8 20             	sub    eax,0x20
c0013314:	88 04 24             	mov    BYTE PTR [esp],al
c0013317:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001331e:	50                   	push   eax
c001331f:	50                   	push   eax
c0013320:	eb 18                	jmp    c001333a <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0013322:	50                   	push   eax
c0013323:	50                   	push   eax
c0013324:	55                   	push   ebp
c0013325:	56                   	push   esi
c0013326:	e8 11 d5 fe ff       	call   c000083c <strcpy>
c001332b:	5a                   	pop    edx
c001332c:	59                   	pop    ecx
c001332d:	68 51 c3 02 c0       	push   0xc002c351
c0013332:	56                   	push   esi
c0013333:	e8 44 d6 fe ff       	call   c000097c <strcat>
c0013338:	5d                   	pop    ebp
c0013339:	58                   	pop    eax
c001333a:	57                   	push   edi
c001333b:	56                   	push   esi
c001333c:	e8 3b d6 fe ff       	call   c000097c <strcat>
c0013341:	83 c4 10             	add    esp,0x10
c0013344:	8a 04 24             	mov    al,BYTE PTR [esp]
c0013347:	3c 60                	cmp    al,0x60
c0013349:	7e 03                	jle    c001334e <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c001334b:	83 e8 20             	sub    eax,0x20
c001334e:	88 04 24             	mov    BYTE PTR [esp],al
c0013351:	88 03                	mov    BYTE PTR [ebx],al
c0013353:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001335a:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0013360:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0013364:	bf 03 00 00 00       	mov    edi,0x3
c0013369:	b8 03 00 00 00       	mov    eax,0x3
c001336e:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0013371:	84 d2                	test   dl,dl
c0013373:	0f 84 91 00 00 00    	je     c001340a <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0013379:	8d 4f 01             	lea    ecx,[edi+0x1]
c001337c:	80 fa 5c             	cmp    dl,0x5c
c001337f:	74 05                	je     c0013386 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0013381:	80 fa 2f             	cmp    dl,0x2f
c0013384:	75 12                	jne    c0013398 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013386:	89 c5                	mov    ebp,eax
c0013388:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c001338d:	74 09                	je     c0013398 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c001338f:	40                   	inc    eax
c0013390:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0013394:	89 cf                	mov    edi,ecx
c0013396:	eb d6                	jmp    c001336e <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0013398:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c001339d:	75 5b                	jne    c00133fa <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c001339f:	80 fa 2e             	cmp    dl,0x2e
c00133a2:	75 56                	jne    c00133fa <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00133a4:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c00133a8:	74 19                	je     c00133c3 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c00133aa:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00133af:	74 53                	je     c0013404 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00133b1:	89 f9                	mov    ecx,edi
c00133b3:	41                   	inc    ecx
c00133b4:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00133b7:	80 fa 2f             	cmp    dl,0x2f
c00133ba:	74 f7                	je     c00133b3 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00133bc:	80 fa 5c             	cmp    dl,0x5c
c00133bf:	74 f2                	je     c00133b3 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00133c1:	eb d1                	jmp    c0013394 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133c3:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00133c8:	74 3a                	je     c0013404 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00133ca:	83 f8 03             	cmp    eax,0x3
c00133cd:	74 c5                	je     c0013394 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133cf:	41                   	inc    ecx
c00133d0:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00133d3:	80 fa 2f             	cmp    dl,0x2f
c00133d6:	74 f7                	je     c00133cf <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c00133d8:	80 fa 5c             	cmp    dl,0x5c
c00133db:	74 f2                	je     c00133cf <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c00133dd:	48                   	dec    eax
c00133de:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00133e2:	75 06                	jne    c00133ea <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00133e4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00133e8:	eb f3                	jmp    c00133dd <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c00133ea:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00133ee:	74 07                	je     c00133f7 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c00133f0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00133f4:	48                   	dec    eax
c00133f5:	eb f3                	jmp    c00133ea <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00133f7:	40                   	inc    eax
c00133f8:	eb 9a                	jmp    c0013394 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133fa:	80 fa 2f             	cmp    dl,0x2f
c00133fd:	74 95                	je     c0013394 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133ff:	80 fa 5c             	cmp    dl,0x5c
c0013402:	74 90                	je     c0013394 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013404:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0013407:	40                   	inc    eax
c0013408:	eb 8a                	jmp    c0013394 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001340a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001340e:	83 ec 0c             	sub    esp,0xc
c0013411:	53                   	push   ebx
c0013412:	e8 85 d3 fe ff       	call   c000079c <strlen>
c0013417:	83 c4 10             	add    esp,0x10
c001341a:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c001341f:	75 26                	jne    c0013447 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0013421:	83 ec 0c             	sub    esp,0xc
c0013424:	53                   	push   ebx
c0013425:	e8 72 d3 fe ff       	call   c000079c <strlen>
c001342a:	83 c4 10             	add    esp,0x10
c001342d:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0013432:	74 26                	je     c001345a <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0013434:	83 ec 0c             	sub    esp,0xc
c0013437:	53                   	push   ebx
c0013438:	e8 5f d3 fe ff       	call   c000079c <strlen>
c001343d:	83 c4 10             	add    esp,0x10
c0013440:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013445:	eb c7                	jmp    c001340e <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0013447:	83 ec 0c             	sub    esp,0xc
c001344a:	53                   	push   ebx
c001344b:	e8 4c d3 fe ff       	call   c000079c <strlen>
c0013450:	83 c4 10             	add    esp,0x10
c0013453:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013458:	74 c7                	je     c0013421 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c001345a:	81 c4 0c 04 00 00    	add    esp,0x40c
c0013460:	5b                   	pop    ebx
c0013461:	5e                   	pop    esi
c0013462:	5f                   	pop    edi
c0013463:	5d                   	pop    ebp
c0013464:	c3                   	ret    
c0013465:	90                   	nop

c0013466 <File::File(char const*, Process*)>:
c0013466:	83 ec 0c             	sub    esp,0xc
c0013469:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001346d:	83 ec 08             	sub    esp,0x8
c0013470:	6a 00                	push   0x0
c0013472:	50                   	push   eax
c0013473:	e8 90 e2 ff ff       	call   c0011708 <UnixFile::UnixFile(int)>
c0013478:	83 c4 10             	add    esp,0x10
c001347b:	ba 64 ac 02 c0       	mov    edx,0xc002ac64
c0013480:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013484:	89 10                	mov    DWORD PTR [eax],edx
c0013486:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001348a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013494:	83 c0 0d             	add    eax,0xd
c0013497:	83 ec 04             	sub    esp,0x4
c001349a:	52                   	push   edx
c001349b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001349f:	50                   	push   eax
c00134a0:	e8 17 fe ff ff       	call   c00132bc <Fs::standardiseFiles(char*, char const*, char const*)>
c00134a5:	83 c4 10             	add    esp,0x10
c00134a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134ac:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00134af:	8d 50 bf             	lea    edx,[eax-0x41]
c00134b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134b6:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00134bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134c0:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00134c4:	90                   	nop
c00134c5:	83 c4 0c             	add    esp,0xc
c00134c8:	c3                   	ret    
c00134c9:	90                   	nop

c00134ca <File::open(FileOpenMode)>:
c00134ca:	53                   	push   ebx
c00134cb:	b8 0b 00 00 00       	mov    eax,0xb
c00134d0:	83 ec 08             	sub    esp,0x8
c00134d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00134d7:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00134de:	80 fa 19             	cmp    dl,0x19
c00134e1:	77 40                	ja     c0013523 <File::open(FileOpenMode)+0x59>
c00134e3:	8b 14 95 e0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1420]
c00134ea:	85 d2                	test   edx,edx
c00134ec:	74 35                	je     c0013523 <File::open(FileOpenMode)+0x59>
c00134ee:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00134f4:	85 d2                	test   edx,edx
c00134f6:	74 2b                	je     c0013523 <File::open(FileOpenMode)+0x59>
c00134f8:	b8 06 00 00 00       	mov    eax,0x6
c00134fd:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013501:	75 20                	jne    c0013523 <File::open(FileOpenMode)+0x59>
c0013503:	8b 02                	mov    eax,DWORD PTR [edx]
c0013505:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001350b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001350f:	51                   	push   ecx
c0013510:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013513:	51                   	push   ecx
c0013514:	52                   	push   edx
c0013515:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013518:	83 c4 10             	add    esp,0x10
c001351b:	85 c0                	test   eax,eax
c001351d:	75 04                	jne    c0013523 <File::open(FileOpenMode)+0x59>
c001351f:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013523:	83 c4 08             	add    esp,0x8
c0013526:	5b                   	pop    ebx
c0013527:	c3                   	ret    

c0013528 <File::close()>:
c0013528:	53                   	push   ebx
c0013529:	b8 0b 00 00 00       	mov    eax,0xb
c001352e:	83 ec 08             	sub    esp,0x8
c0013531:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013535:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001353c:	80 fa 19             	cmp    dl,0x19
c001353f:	77 41                	ja     c0013582 <File::close()+0x5a>
c0013541:	8b 1c 95 e0 eb 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1420]
c0013548:	85 db                	test   ebx,ebx
c001354a:	74 36                	je     c0013582 <File::close()+0x5a>
c001354c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013553:	74 2d                	je     c0013582 <File::close()+0x5a>
c0013555:	b8 05 00 00 00       	mov    eax,0x5
c001355a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001355e:	74 22                	je     c0013582 <File::close()+0x5a>
c0013560:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013564:	8b 04 95 e0 eb 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1420]
c001356b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013571:	53                   	push   ebx
c0013572:	53                   	push   ebx
c0013573:	8b 10                	mov    edx,DWORD PTR [eax]
c0013575:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001357b:	50                   	push   eax
c001357c:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c001357f:	83 c4 10             	add    esp,0x10
c0013582:	83 c4 08             	add    esp,0x8
c0013585:	5b                   	pop    ebx
c0013586:	c3                   	ret    
c0013587:	90                   	nop

c0013588 <File::seek(unsigned long long)>:
c0013588:	56                   	push   esi
c0013589:	53                   	push   ebx
c001358a:	b8 0b 00 00 00       	mov    eax,0xb
c001358f:	51                   	push   ecx
c0013590:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013594:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013598:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001359f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00135a3:	80 fa 19             	cmp    dl,0x19
c00135a6:	77 31                	ja     c00135d9 <File::seek(unsigned long long)+0x51>
c00135a8:	8b 14 95 e0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1420]
c00135af:	85 d2                	test   edx,edx
c00135b1:	74 26                	je     c00135d9 <File::seek(unsigned long long)+0x51>
c00135b3:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00135b9:	85 d2                	test   edx,edx
c00135bb:	74 1c                	je     c00135d9 <File::seek(unsigned long long)+0x51>
c00135bd:	b8 05 00 00 00       	mov    eax,0x5
c00135c2:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00135c6:	74 11                	je     c00135d9 <File::seek(unsigned long long)+0x51>
c00135c8:	8b 02                	mov    eax,DWORD PTR [edx]
c00135ca:	53                   	push   ebx
c00135cb:	51                   	push   ecx
c00135cc:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00135d2:	52                   	push   edx
c00135d3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00135d6:	83 c4 10             	add    esp,0x10
c00135d9:	5a                   	pop    edx
c00135da:	5b                   	pop    ebx
c00135db:	5e                   	pop    esi
c00135dc:	c3                   	ret    
c00135dd:	90                   	nop

c00135de <File::tell(unsigned long long*)>:
c00135de:	83 ec 0c             	sub    esp,0xc
c00135e1:	b8 0b 00 00 00       	mov    eax,0xb
c00135e6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00135ea:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00135f1:	80 fa 19             	cmp    dl,0x19
c00135f4:	77 34                	ja     c001362a <File::tell(unsigned long long*)+0x4c>
c00135f6:	8b 14 95 e0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1420]
c00135fd:	85 d2                	test   edx,edx
c00135ff:	74 29                	je     c001362a <File::tell(unsigned long long*)+0x4c>
c0013601:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013607:	85 d2                	test   edx,edx
c0013609:	74 1f                	je     c001362a <File::tell(unsigned long long*)+0x4c>
c001360b:	b8 05 00 00 00       	mov    eax,0x5
c0013610:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013614:	74 14                	je     c001362a <File::tell(unsigned long long*)+0x4c>
c0013616:	50                   	push   eax
c0013617:	8b 02                	mov    eax,DWORD PTR [edx]
c0013619:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001361d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013623:	52                   	push   edx
c0013624:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0013627:	83 c4 10             	add    esp,0x10
c001362a:	83 c4 0c             	add    esp,0xc
c001362d:	c3                   	ret    

c001362e <File::rewind()>:
c001362e:	83 ec 10             	sub    esp,0x10
c0013631:	6a 00                	push   0x0
c0013633:	6a 00                	push   0x0
c0013635:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013639:	e8 4a ff ff ff       	call   c0013588 <File::seek(unsigned long long)>
c001363e:	83 c4 1c             	add    esp,0x1c
c0013641:	c3                   	ret    

c0013642 <File::unlink()>:
c0013642:	83 ec 0c             	sub    esp,0xc
c0013645:	b8 0b 00 00 00       	mov    eax,0xb
c001364a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001364e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013655:	80 f9 19             	cmp    cl,0x19
c0013658:	77 2f                	ja     c0013689 <File::unlink()+0x47>
c001365a:	8b 0c 8d e0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1420]
c0013661:	85 c9                	test   ecx,ecx
c0013663:	74 24                	je     c0013689 <File::unlink()+0x47>
c0013665:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001366b:	85 c9                	test   ecx,ecx
c001366d:	74 1a                	je     c0013689 <File::unlink()+0x47>
c001366f:	b8 06 00 00 00       	mov    eax,0x6
c0013674:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013678:	75 0f                	jne    c0013689 <File::unlink()+0x47>
c001367a:	83 c2 0d             	add    edx,0xd
c001367d:	50                   	push   eax
c001367e:	50                   	push   eax
c001367f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013681:	52                   	push   edx
c0013682:	51                   	push   ecx
c0013683:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013686:	83 c4 10             	add    esp,0x10
c0013689:	83 c4 0c             	add    esp,0xc
c001368c:	c3                   	ret    
c001368d:	90                   	nop

c001368e <File::rename(char const*)>:
c001368e:	83 ec 0c             	sub    esp,0xc
c0013691:	b8 0b 00 00 00       	mov    eax,0xb
c0013696:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001369a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136a1:	80 f9 19             	cmp    cl,0x19
c00136a4:	77 32                	ja     c00136d8 <File::rename(char const*)+0x4a>
c00136a6:	8b 0c 8d e0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1420]
c00136ad:	85 c9                	test   ecx,ecx
c00136af:	74 27                	je     c00136d8 <File::rename(char const*)+0x4a>
c00136b1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136b7:	85 c9                	test   ecx,ecx
c00136b9:	74 1d                	je     c00136d8 <File::rename(char const*)+0x4a>
c00136bb:	b8 06 00 00 00       	mov    eax,0x6
c00136c0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00136c4:	75 12                	jne    c00136d8 <File::rename(char const*)+0x4a>
c00136c6:	83 c2 0d             	add    edx,0xd
c00136c9:	50                   	push   eax
c00136ca:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00136d0:	52                   	push   edx
c00136d1:	51                   	push   ecx
c00136d2:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00136d5:	83 c4 10             	add    esp,0x10
c00136d8:	83 c4 0c             	add    esp,0xc
c00136db:	c3                   	ret    

c00136dc <File::chfatattr(unsigned char, unsigned char)>:
c00136dc:	57                   	push   edi
c00136dd:	b8 0b 00 00 00       	mov    eax,0xb
c00136e2:	56                   	push   esi
c00136e3:	53                   	push   ebx
c00136e4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136e8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00136ec:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136f3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00136f7:	80 f9 19             	cmp    cl,0x19
c00136fa:	77 37                	ja     c0013733 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00136fc:	8b 0c 8d e0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1420]
c0013703:	85 c9                	test   ecx,ecx
c0013705:	74 2c                	je     c0013733 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013707:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001370d:	85 c9                	test   ecx,ecx
c001370f:	74 22                	je     c0013733 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013711:	b8 06 00 00 00       	mov    eax,0x6
c0013716:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001371a:	75 17                	jne    c0013733 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001371c:	8b 39                	mov    edi,DWORD PTR [ecx]
c001371e:	89 f0                	mov    eax,esi
c0013720:	83 c2 0d             	add    edx,0xd
c0013723:	0f b6 f0             	movzx  esi,al
c0013726:	0f b6 db             	movzx  ebx,bl
c0013729:	56                   	push   esi
c001372a:	53                   	push   ebx
c001372b:	52                   	push   edx
c001372c:	51                   	push   ecx
c001372d:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0013730:	83 c4 10             	add    esp,0x10
c0013733:	5b                   	pop    ebx
c0013734:	5e                   	pop    esi
c0013735:	5f                   	pop    edi
c0013736:	c3                   	ret    
c0013737:	90                   	nop

c0013738 <File::exists()>:
c0013738:	83 ec 0c             	sub    esp,0xc
c001373b:	31 c0                	xor    eax,eax
c001373d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013741:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013748:	80 f9 19             	cmp    cl,0x19
c001374b:	77 24                	ja     c0013771 <File::exists()+0x39>
c001374d:	8b 0c 8d e0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1420]
c0013754:	85 c9                	test   ecx,ecx
c0013756:	74 19                	je     c0013771 <File::exists()+0x39>
c0013758:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001375e:	85 c9                	test   ecx,ecx
c0013760:	74 0f                	je     c0013771 <File::exists()+0x39>
c0013762:	83 c2 0d             	add    edx,0xd
c0013765:	50                   	push   eax
c0013766:	50                   	push   eax
c0013767:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013769:	52                   	push   edx
c001376a:	51                   	push   ecx
c001376b:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001376e:	83 c4 10             	add    esp,0x10
c0013771:	83 c4 0c             	add    esp,0xc
c0013774:	c3                   	ret    
c0013775:	90                   	nop

c0013776 <File::stat(unsigned long long*, bool*)>:
c0013776:	56                   	push   esi
c0013777:	53                   	push   ebx
c0013778:	50                   	push   eax
c0013779:	b8 0b 00 00 00       	mov    eax,0xb
c001377e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013782:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013786:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001378d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013791:	80 f9 19             	cmp    cl,0x19
c0013794:	77 3d                	ja     c00137d3 <File::stat(unsigned long long*, bool*)+0x5d>
c0013796:	8b 0c 8d e0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1420]
c001379d:	85 c9                	test   ecx,ecx
c001379f:	74 32                	je     c00137d3 <File::stat(unsigned long long*, bool*)+0x5d>
c00137a1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00137a7:	85 c9                	test   ecx,ecx
c00137a9:	74 28                	je     c00137d3 <File::stat(unsigned long long*, bool*)+0x5d>
c00137ab:	8b 01                	mov    eax,DWORD PTR [ecx]
c00137ad:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00137b1:	74 13                	je     c00137c6 <File::stat(unsigned long long*, bool*)+0x50>
c00137b3:	83 ec 04             	sub    esp,0x4
c00137b6:	56                   	push   esi
c00137b7:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00137bd:	51                   	push   ecx
c00137be:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00137c1:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00137c4:	eb 0a                	jmp    c00137d0 <File::stat(unsigned long long*, bool*)+0x5a>
c00137c6:	53                   	push   ebx
c00137c7:	83 c2 0d             	add    edx,0xd
c00137ca:	56                   	push   esi
c00137cb:	52                   	push   edx
c00137cc:	51                   	push   ecx
c00137cd:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00137d0:	83 c4 10             	add    esp,0x10
c00137d3:	5a                   	pop    edx
c00137d4:	5b                   	pop    ebx
c00137d5:	5e                   	pop    esi
c00137d6:	c3                   	ret    

c00137d7 <Fs::setcwd(Process*, char*)>:
c00137d7:	55                   	push   ebp
c00137d8:	57                   	push   edi
c00137d9:	56                   	push   esi
c00137da:	53                   	push   ebx
c00137db:	81 ec 20 02 00 00    	sub    esp,0x220
c00137e1:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00137e8:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00137ee:	57                   	push   edi
c00137ef:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00137f6:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00137fa:	56                   	push   esi
c00137fb:	e8 bc fa ff ff       	call   c00132bc <Fs::standardiseFiles(char*, char const*, char const*)>
c0013800:	89 34 24             	mov    DWORD PTR [esp],esi
c0013803:	e8 94 cf fe ff       	call   c000079c <strlen>
c0013808:	83 c4 10             	add    esp,0x10
c001380b:	83 f8 02             	cmp    eax,0x2
c001380e:	77 17                	ja     c0013827 <Fs::setcwd(Process*, char*)+0x50>
c0013810:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0013815:	83 e8 41             	sub    eax,0x41
c0013818:	83 f8 19             	cmp    eax,0x19
c001381b:	76 24                	jbe    c0013841 <Fs::setcwd(Process*, char*)+0x6a>
c001381d:	b8 03 00 00 00       	mov    eax,0x3
c0013822:	e9 e0 00 00 00       	jmp    c0013907 <Fs::setcwd(Process*, char*)+0x130>
c0013827:	83 ec 0c             	sub    esp,0xc
c001382a:	56                   	push   esi
c001382b:	e8 6c cf fe ff       	call   c000079c <strlen>
c0013830:	83 c4 10             	add    esp,0x10
c0013833:	83 f8 03             	cmp    eax,0x3
c0013836:	75 34                	jne    c001386c <Fs::setcwd(Process*, char*)+0x95>
c0013838:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c001383d:	75 2d                	jne    c001386c <Fs::setcwd(Process*, char*)+0x95>
c001383f:	eb cf                	jmp    c0013810 <Fs::setcwd(Process*, char*)+0x39>
c0013841:	8b 14 85 e0 eb 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1420]
c0013848:	b8 05 00 00 00       	mov    eax,0x5
c001384d:	85 d2                	test   edx,edx
c001384f:	0f 84 b2 00 00 00    	je     c0013907 <Fs::setcwd(Process*, char*)+0x130>
c0013855:	b8 06 00 00 00       	mov    eax,0x6
c001385a:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013861:	0f 85 92 00 00 00    	jne    c00138f9 <Fs::setcwd(Process*, char*)+0x122>
c0013867:	e9 9b 00 00 00       	jmp    c0013907 <Fs::setcwd(Process*, char*)+0x130>
c001386c:	83 ec 0c             	sub    esp,0xc
c001386f:	68 14 01 00 00       	push   0x114
c0013874:	e8 d2 bf ff ff       	call   c000f84b <malloc>
c0013879:	83 c4 0c             	add    esp,0xc
c001387c:	89 c3                	mov    ebx,eax
c001387e:	55                   	push   ebp
c001387f:	56                   	push   esi
c0013880:	50                   	push   eax
c0013881:	e8 e0 fb ff ff       	call   c0013466 <File::File(char const*, Process*)>
c0013886:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001388b:	83 c4 0c             	add    esp,0xc
c001388e:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013892:	50                   	push   eax
c0013893:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013897:	50                   	push   eax
c0013898:	53                   	push   ebx
c0013899:	e8 d8 fe ff ff       	call   c0013776 <File::stat(unsigned long long*, bool*)>
c001389e:	83 c4 10             	add    esp,0x10
c00138a1:	83 f8 02             	cmp    eax,0x2
c00138a4:	74 04                	je     c00138aa <Fs::setcwd(Process*, char*)+0xd3>
c00138a6:	85 c0                	test   eax,eax
c00138a8:	74 1c                	je     c00138c6 <Fs::setcwd(Process*, char*)+0xef>
c00138aa:	b8 01 00 00 00       	mov    eax,0x1
c00138af:	85 db                	test   ebx,ebx
c00138b1:	74 54                	je     c0013907 <Fs::setcwd(Process*, char*)+0x130>
c00138b3:	83 ec 0c             	sub    esp,0xc
c00138b6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138b8:	53                   	push   ebx
c00138b9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00138bc:	83 c4 10             	add    esp,0x10
c00138bf:	b8 01 00 00 00       	mov    eax,0x1
c00138c4:	eb 41                	jmp    c0013907 <Fs::setcwd(Process*, char*)+0x130>
c00138c6:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00138cb:	75 1c                	jne    c00138e9 <Fs::setcwd(Process*, char*)+0x112>
c00138cd:	b8 02 00 00 00       	mov    eax,0x2
c00138d2:	85 db                	test   ebx,ebx
c00138d4:	74 31                	je     c0013907 <Fs::setcwd(Process*, char*)+0x130>
c00138d6:	83 ec 0c             	sub    esp,0xc
c00138d9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138db:	53                   	push   ebx
c00138dc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00138df:	83 c4 10             	add    esp,0x10
c00138e2:	b8 02 00 00 00       	mov    eax,0x2
c00138e7:	eb 1e                	jmp    c0013907 <Fs::setcwd(Process*, char*)+0x130>
c00138e9:	85 db                	test   ebx,ebx
c00138eb:	74 0c                	je     c00138f9 <Fs::setcwd(Process*, char*)+0x122>
c00138ed:	83 ec 0c             	sub    esp,0xc
c00138f0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138f2:	53                   	push   ebx
c00138f3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00138f6:	83 c4 10             	add    esp,0x10
c00138f9:	50                   	push   eax
c00138fa:	50                   	push   eax
c00138fb:	56                   	push   esi
c00138fc:	57                   	push   edi
c00138fd:	e8 3a cf fe ff       	call   c000083c <strcpy>
c0013902:	83 c4 10             	add    esp,0x10
c0013905:	31 c0                	xor    eax,eax
c0013907:	81 c4 1c 02 00 00    	add    esp,0x21c
c001390d:	5b                   	pop    ebx
c001390e:	5e                   	pop    esi
c001390f:	5f                   	pop    edi
c0013910:	5d                   	pop    ebp
c0013911:	c3                   	ret    

c0013912 <Directory::Directory(char const*, Process*)>:
c0013912:	83 ec 0c             	sub    esp,0xc
c0013915:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013919:	83 ec 08             	sub    esp,0x8
c001391c:	6a 00                	push   0x0
c001391e:	50                   	push   eax
c001391f:	e8 e4 dd ff ff       	call   c0011708 <UnixFile::UnixFile(int)>
c0013924:	83 c4 10             	add    esp,0x10
c0013927:	ba 80 ac 02 c0       	mov    edx,0xc002ac80
c001392c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013930:	89 10                	mov    DWORD PTR [eax],edx
c0013932:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013936:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001393c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013940:	83 c0 0d             	add    eax,0xd
c0013943:	83 ec 04             	sub    esp,0x4
c0013946:	52                   	push   edx
c0013947:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001394b:	50                   	push   eax
c001394c:	e8 6b f9 ff ff       	call   c00132bc <Fs::standardiseFiles(char*, char const*, char const*)>
c0013951:	83 c4 10             	add    esp,0x10
c0013954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013958:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001395b:	8d 50 bf             	lea    edx,[eax-0x41]
c001395e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013962:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013968:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001396c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013970:	90                   	nop
c0013971:	83 c4 0c             	add    esp,0xc
c0013974:	c3                   	ret    
c0013975:	90                   	nop

c0013976 <Directory::open()>:
c0013976:	53                   	push   ebx
c0013977:	b8 0b 00 00 00       	mov    eax,0xb
c001397c:	83 ec 08             	sub    esp,0x8
c001397f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013983:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001398a:	80 fa 19             	cmp    dl,0x19
c001398d:	77 3d                	ja     c00139cc <Directory::open()+0x56>
c001398f:	8b 14 95 e0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1420]
c0013996:	85 d2                	test   edx,edx
c0013998:	74 32                	je     c00139cc <Directory::open()+0x56>
c001399a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00139a0:	85 d2                	test   edx,edx
c00139a2:	74 28                	je     c00139cc <Directory::open()+0x56>
c00139a4:	b8 06 00 00 00       	mov    eax,0x6
c00139a9:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00139ad:	75 1d                	jne    c00139cc <Directory::open()+0x56>
c00139af:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00139b5:	50                   	push   eax
c00139b6:	8b 02                	mov    eax,DWORD PTR [edx]
c00139b8:	51                   	push   ecx
c00139b9:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00139bc:	51                   	push   ecx
c00139bd:	52                   	push   edx
c00139be:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c00139c1:	83 c4 10             	add    esp,0x10
c00139c4:	85 c0                	test   eax,eax
c00139c6:	75 04                	jne    c00139cc <Directory::open()+0x56>
c00139c8:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00139cc:	83 c4 08             	add    esp,0x8
c00139cf:	5b                   	pop    ebx
c00139d0:	c3                   	ret    
c00139d1:	90                   	nop

c00139d2 <Directory::close()>:
c00139d2:	53                   	push   ebx
c00139d3:	b8 0b 00 00 00       	mov    eax,0xb
c00139d8:	83 ec 08             	sub    esp,0x8
c00139db:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00139df:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00139e6:	80 fa 19             	cmp    dl,0x19
c00139e9:	77 41                	ja     c0013a2c <Directory::close()+0x5a>
c00139eb:	8b 1c 95 e0 eb 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1420]
c00139f2:	85 db                	test   ebx,ebx
c00139f4:	74 36                	je     c0013a2c <Directory::close()+0x5a>
c00139f6:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00139fd:	74 2d                	je     c0013a2c <Directory::close()+0x5a>
c00139ff:	b8 05 00 00 00       	mov    eax,0x5
c0013a04:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013a08:	74 22                	je     c0013a2c <Directory::close()+0x5a>
c0013a0a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013a0e:	8b 04 95 e0 eb 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1420]
c0013a15:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013a1b:	53                   	push   ebx
c0013a1c:	53                   	push   ebx
c0013a1d:	8b 10                	mov    edx,DWORD PTR [eax]
c0013a1f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013a25:	50                   	push   eax
c0013a26:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013a29:	83 c4 10             	add    esp,0x10
c0013a2c:	83 c4 08             	add    esp,0x8
c0013a2f:	5b                   	pop    ebx
c0013a30:	c3                   	ret    
c0013a31:	90                   	nop

c0013a32 <Directory::unlink()>:
c0013a32:	83 ec 0c             	sub    esp,0xc
c0013a35:	b8 0b 00 00 00       	mov    eax,0xb
c0013a3a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a3e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a45:	80 f9 19             	cmp    cl,0x19
c0013a48:	77 2f                	ja     c0013a79 <Directory::unlink()+0x47>
c0013a4a:	8b 0c 8d e0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1420]
c0013a51:	85 c9                	test   ecx,ecx
c0013a53:	74 24                	je     c0013a79 <Directory::unlink()+0x47>
c0013a55:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a5b:	85 c9                	test   ecx,ecx
c0013a5d:	74 1a                	je     c0013a79 <Directory::unlink()+0x47>
c0013a5f:	b8 06 00 00 00       	mov    eax,0x6
c0013a64:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013a68:	75 0f                	jne    c0013a79 <Directory::unlink()+0x47>
c0013a6a:	83 c2 0d             	add    edx,0xd
c0013a6d:	50                   	push   eax
c0013a6e:	50                   	push   eax
c0013a6f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a71:	52                   	push   edx
c0013a72:	51                   	push   ecx
c0013a73:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013a76:	83 c4 10             	add    esp,0x10
c0013a79:	83 c4 0c             	add    esp,0xc
c0013a7c:	c3                   	ret    
c0013a7d:	90                   	nop

c0013a7e <Directory::rename(char const*)>:
c0013a7e:	83 ec 0c             	sub    esp,0xc
c0013a81:	b8 0b 00 00 00       	mov    eax,0xb
c0013a86:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a8a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a91:	80 f9 19             	cmp    cl,0x19
c0013a94:	77 32                	ja     c0013ac8 <Directory::rename(char const*)+0x4a>
c0013a96:	8b 0c 8d e0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1420]
c0013a9d:	85 c9                	test   ecx,ecx
c0013a9f:	74 27                	je     c0013ac8 <Directory::rename(char const*)+0x4a>
c0013aa1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013aa7:	85 c9                	test   ecx,ecx
c0013aa9:	74 1d                	je     c0013ac8 <Directory::rename(char const*)+0x4a>
c0013aab:	b8 06 00 00 00       	mov    eax,0x6
c0013ab0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013ab4:	75 12                	jne    c0013ac8 <Directory::rename(char const*)+0x4a>
c0013ab6:	83 c2 0d             	add    edx,0xd
c0013ab9:	50                   	push   eax
c0013aba:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013abc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ac0:	52                   	push   edx
c0013ac1:	51                   	push   ecx
c0013ac2:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013ac5:	83 c4 10             	add    esp,0x10
c0013ac8:	83 c4 0c             	add    esp,0xc
c0013acb:	c3                   	ret    

c0013acc <Directory::exists()>:
c0013acc:	83 ec 0c             	sub    esp,0xc
c0013acf:	31 c0                	xor    eax,eax
c0013ad1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013ad5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013adc:	80 f9 19             	cmp    cl,0x19
c0013adf:	77 24                	ja     c0013b05 <Directory::exists()+0x39>
c0013ae1:	8b 0c 8d e0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1420]
c0013ae8:	85 c9                	test   ecx,ecx
c0013aea:	74 19                	je     c0013b05 <Directory::exists()+0x39>
c0013aec:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013af2:	85 c9                	test   ecx,ecx
c0013af4:	74 0f                	je     c0013b05 <Directory::exists()+0x39>
c0013af6:	83 c2 0d             	add    edx,0xd
c0013af9:	50                   	push   eax
c0013afa:	50                   	push   eax
c0013afb:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013afd:	52                   	push   edx
c0013afe:	51                   	push   ecx
c0013aff:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013b02:	83 c4 10             	add    esp,0x10
c0013b05:	83 c4 0c             	add    esp,0xc
c0013b08:	c3                   	ret    
c0013b09:	90                   	nop

c0013b0a <Directory::read(dirent*)>:
c0013b0a:	83 ec 1c             	sub    esp,0x1c
c0013b0d:	b8 0b 00 00 00       	mov    eax,0xb
c0013b12:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013b16:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013b1d:	80 fa 19             	cmp    dl,0x19
c0013b20:	77 30                	ja     c0013b52 <Directory::read(dirent*)+0x48>
c0013b22:	8b 14 95 e0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1420]
c0013b29:	85 d2                	test   edx,edx
c0013b2b:	74 25                	je     c0013b52 <Directory::read(dirent*)+0x48>
c0013b2d:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013b34:	74 1c                	je     c0013b52 <Directory::read(dirent*)+0x48>
c0013b36:	83 ec 0c             	sub    esp,0xc
c0013b39:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b3b:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013b3f:	52                   	push   edx
c0013b40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013b44:	6a 00                	push   0x0
c0013b46:	68 10 01 00 00       	push   0x110
c0013b4b:	51                   	push   ecx
c0013b4c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013b4f:	83 c4 20             	add    esp,0x20
c0013b52:	83 c4 1c             	add    esp,0x1c
c0013b55:	c3                   	ret    

c0013b56 <Directory::create()>:
c0013b56:	83 ec 0c             	sub    esp,0xc
c0013b59:	b8 0b 00 00 00       	mov    eax,0xb
c0013b5e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b62:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b69:	80 f9 19             	cmp    cl,0x19
c0013b6c:	77 2f                	ja     c0013b9d <Directory::create()+0x47>
c0013b6e:	8b 0c 8d e0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1420]
c0013b75:	85 c9                	test   ecx,ecx
c0013b77:	74 24                	je     c0013b9d <Directory::create()+0x47>
c0013b79:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b7f:	85 c9                	test   ecx,ecx
c0013b81:	74 1a                	je     c0013b9d <Directory::create()+0x47>
c0013b83:	b8 06 00 00 00       	mov    eax,0x6
c0013b88:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013b8c:	75 0f                	jne    c0013b9d <Directory::create()+0x47>
c0013b8e:	83 c2 0d             	add    edx,0xd
c0013b91:	50                   	push   eax
c0013b92:	50                   	push   eax
c0013b93:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b95:	52                   	push   edx
c0013b96:	51                   	push   ecx
c0013b97:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013b9a:	83 c4 10             	add    esp,0x10
c0013b9d:	83 c4 0c             	add    esp,0xc
c0013ba0:	c3                   	ret    
c0013ba1:	90                   	nop

c0013ba2 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013ba2:	b8 0a 00 00 00       	mov    eax,0xa
c0013ba7:	c3                   	ret    

c0013ba8 <Bus::Bus(char const*)>:
c0013ba8:	83 ec 0c             	sub    esp,0xc
c0013bab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013baf:	83 ec 08             	sub    esp,0x8
c0013bb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bb6:	50                   	push   eax
c0013bb7:	e8 68 09 00 00       	call   c0014524 <Device::Device(char const*)>
c0013bbc:	83 c4 10             	add    esp,0x10
c0013bbf:	ba 9c ac 02 c0       	mov    edx,0xc002ac9c
c0013bc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bc8:	89 10                	mov    DWORD PTR [eax],edx
c0013bca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bce:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013bd8:	90                   	nop
c0013bd9:	83 c4 0c             	add    esp,0xc
c0013bdc:	c3                   	ret    
c0013bdd:	90                   	nop

c0013bde <Bus::~Bus()>:
c0013bde:	83 ec 0c             	sub    esp,0xc
c0013be1:	ba 9c ac 02 c0       	mov    edx,0xc002ac9c
c0013be6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bea:	89 10                	mov    DWORD PTR [eax],edx
c0013bec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bf0:	83 ec 0c             	sub    esp,0xc
c0013bf3:	50                   	push   eax
c0013bf4:	e8 0d 06 00 00       	call   c0014206 <Device::~Device()>
c0013bf9:	83 c4 10             	add    esp,0x10
c0013bfc:	90                   	nop
c0013bfd:	83 c4 0c             	add    esp,0xc
c0013c00:	c3                   	ret    
c0013c01:	90                   	nop

c0013c02 <Bus::~Bus()>:
c0013c02:	83 ec 0c             	sub    esp,0xc
c0013c05:	83 ec 0c             	sub    esp,0xc
c0013c08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c0c:	e8 cd ff ff ff       	call   c0013bde <Bus::~Bus()>
c0013c11:	83 c4 10             	add    esp,0x10
c0013c14:	83 ec 08             	sub    esp,0x8
c0013c17:	68 58 01 00 00       	push   0x158
c0013c1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c20:	e8 02 f2 ff ff       	call   c0012e27 <operator delete(void*, unsigned long)>
c0013c25:	83 c4 10             	add    esp,0x10
c0013c28:	83 c4 0c             	add    esp,0xc
c0013c2b:	c3                   	ret    

c0013c2c <Buzzer::Buzzer(char const*)>:
c0013c2c:	83 ec 0c             	sub    esp,0xc
c0013c2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c33:	83 ec 08             	sub    esp,0x8
c0013c36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c3a:	50                   	push   eax
c0013c3b:	e8 e4 08 00 00       	call   c0014524 <Device::Device(char const*)>
c0013c40:	83 c4 10             	add    esp,0x10
c0013c43:	ba c8 ac 02 c0       	mov    edx,0xc002acc8
c0013c48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c4c:	89 10                	mov    DWORD PTR [eax],edx
c0013c4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c52:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013c5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c60:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013c6a:	90                   	nop
c0013c6b:	83 c4 0c             	add    esp,0xc
c0013c6e:	c3                   	ret    
c0013c6f:	90                   	nop

c0013c70 <Buzzer::~Buzzer()>:
c0013c70:	83 ec 0c             	sub    esp,0xc
c0013c73:	ba c8 ac 02 c0       	mov    edx,0xc002acc8
c0013c78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c7c:	89 10                	mov    DWORD PTR [eax],edx
c0013c7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c82:	83 ec 0c             	sub    esp,0xc
c0013c85:	50                   	push   eax
c0013c86:	e8 7b 05 00 00       	call   c0014206 <Device::~Device()>
c0013c8b:	83 c4 10             	add    esp,0x10
c0013c8e:	90                   	nop
c0013c8f:	83 c4 0c             	add    esp,0xc
c0013c92:	c3                   	ret    
c0013c93:	90                   	nop

c0013c94 <Buzzer::~Buzzer()>:
c0013c94:	83 ec 0c             	sub    esp,0xc
c0013c97:	83 ec 0c             	sub    esp,0xc
c0013c9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c9e:	e8 cd ff ff ff       	call   c0013c70 <Buzzer::~Buzzer()>
c0013ca3:	83 c4 10             	add    esp,0x10
c0013ca6:	83 ec 08             	sub    esp,0x8
c0013ca9:	68 5c 01 00 00       	push   0x15c
c0013cae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cb2:	e8 70 f1 ff ff       	call   c0012e27 <operator delete(void*, unsigned long)>
c0013cb7:	83 c4 10             	add    esp,0x10
c0013cba:	83 c4 0c             	add    esp,0xc
c0013cbd:	c3                   	ret    

c0013cbe <Buzzer::stop()>:
c0013cbe:	83 ec 14             	sub    esp,0x14
c0013cc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cc5:	8b 10                	mov    edx,DWORD PTR [eax]
c0013cc7:	6a 00                	push   0x0
c0013cc9:	50                   	push   eax
c0013cca:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013ccd:	83 c4 1c             	add    esp,0x1c
c0013cd0:	c3                   	ret    

c0013cd1 <beepThread(void*)>:
c0013cd1:	53                   	push   ebx
c0013cd2:	83 ec 08             	sub    esp,0x8
c0013cd5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013cd9:	e8 44 a1 00 00       	call   c001de22 <unlockScheduler()>
c0013cde:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013ce3:	52                   	push   edx
c0013ce4:	52                   	push   edx
c0013ce5:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013ceb:	52                   	push   edx
c0013cec:	50                   	push   eax
c0013ced:	e8 b8 a6 00 00       	call   c001e3aa <nanoSleep(unsigned long long)>
c0013cf2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013cf5:	e8 c4 ff ff ff       	call   c0013cbe <Buzzer::stop()>
c0013cfa:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013d02:	83 c4 18             	add    esp,0x18
c0013d05:	5b                   	pop    ebx
c0013d06:	e9 e5 a5 00 00       	jmp    c001e2f0 <blockTask(TaskState)>
c0013d0b:	90                   	nop

c0013d0c <Buzzer::beep(int, int, bool)>:
c0013d0c:	57                   	push   edi
c0013d0d:	56                   	push   esi
c0013d0e:	53                   	push   ebx
c0013d0f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d13:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013d17:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d1b:	52                   	push   edx
c0013d1c:	52                   	push   edx
c0013d1d:	8b 06                	mov    eax,DWORD PTR [esi]
c0013d1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d23:	56                   	push   esi
c0013d24:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013d27:	83 c4 10             	add    esp,0x10
c0013d2a:	89 f8                	mov    eax,edi
c0013d2c:	84 c0                	test   al,al
c0013d2e:	74 1f                	je     c0013d4f <Buzzer::beep(int, int, bool)+0x43>
c0013d30:	50                   	push   eax
c0013d31:	50                   	push   eax
c0013d32:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013d38:	99                   	cdq    
c0013d39:	52                   	push   edx
c0013d3a:	50                   	push   eax
c0013d3b:	e8 6a a6 00 00       	call   c001e3aa <nanoSleep(unsigned long long)>
c0013d40:	83 c4 10             	add    esp,0x10
c0013d43:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013d47:	5b                   	pop    ebx
c0013d48:	5e                   	pop    esi
c0013d49:	5f                   	pop    edi
c0013d4a:	e9 6f ff ff ff       	jmp    c0013cbe <Buzzer::stop()>
c0013d4f:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013d55:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0013d5a:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013d62:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013d66:	c7 44 24 14 d1 3c 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013cd1
c0013d6e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013d72:	5b                   	pop    ebx
c0013d73:	5e                   	pop    esi
c0013d74:	5f                   	pop    edi
c0013d75:	e9 d8 a1 00 00       	jmp    c001df52 <Process::createThread(void (*)(void*), void*, int)>

c0013d7a <User::loadClockSettings(int)>:
c0013d7a:	53                   	push   ebx
c0013d7b:	83 ec 14             	sub    esp,0x14
c0013d7e:	68 14 01 00 00       	push   0x114
c0013d83:	e8 c3 ba ff ff       	call   c000f84b <malloc>
c0013d88:	83 c4 0c             	add    esp,0xc
c0013d8b:	89 c3                	mov    ebx,eax
c0013d8d:	ff 35 34 1b 03 c0    	push   DWORD PTR ds:0xc0031b34
c0013d93:	68 f0 ac 02 c0       	push   0xc002acf0
c0013d98:	50                   	push   eax
c0013d99:	e8 c8 f6 ff ff       	call   c0013466 <File::File(char const*, Process*)>
c0013d9e:	58                   	pop    eax
c0013d9f:	5a                   	pop    edx
c0013da0:	6a 01                	push   0x1
c0013da2:	53                   	push   ebx
c0013da3:	e8 22 f7 ff ff       	call   c00134ca <File::open(FileOpenMode)>
c0013da8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013dab:	e8 78 f7 ff ff       	call   c0013528 <File::close()>
c0013db0:	83 c4 10             	add    esp,0x10
c0013db3:	85 db                	test   ebx,ebx
c0013db5:	74 0f                	je     c0013dc6 <User::loadClockSettings(int)+0x4c>
c0013db7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013db9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013dbd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013dc0:	83 c4 08             	add    esp,0x8
c0013dc3:	5b                   	pop    ebx
c0013dc4:	ff e0                	jmp    eax
c0013dc6:	83 c4 08             	add    esp,0x8
c0013dc9:	5b                   	pop    ebx
c0013dca:	c3                   	ret    
c0013dcb:	90                   	nop

c0013dcc <Clock::Clock(char const*)>:
c0013dcc:	83 ec 0c             	sub    esp,0xc
c0013dcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dd3:	83 ec 08             	sub    esp,0x8
c0013dd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dda:	50                   	push   eax
c0013ddb:	e8 44 07 00 00       	call   c0014524 <Device::Device(char const*)>
c0013de0:	83 c4 10             	add    esp,0x10
c0013de3:	ba 18 ad 02 c0       	mov    edx,0xc002ad18
c0013de8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dec:	89 10                	mov    DWORD PTR [eax],edx
c0013dee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013df2:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013dfc:	90                   	nop
c0013dfd:	83 c4 0c             	add    esp,0xc
c0013e00:	c3                   	ret    
c0013e01:	90                   	nop

c0013e02 <Clock::~Clock()>:
c0013e02:	83 ec 0c             	sub    esp,0xc
c0013e05:	ba 18 ad 02 c0       	mov    edx,0xc002ad18
c0013e0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e0e:	89 10                	mov    DWORD PTR [eax],edx
c0013e10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e14:	83 ec 0c             	sub    esp,0xc
c0013e17:	50                   	push   eax
c0013e18:	e8 e9 03 00 00       	call   c0014206 <Device::~Device()>
c0013e1d:	83 c4 10             	add    esp,0x10
c0013e20:	90                   	nop
c0013e21:	83 c4 0c             	add    esp,0xc
c0013e24:	c3                   	ret    
c0013e25:	90                   	nop

c0013e26 <Clock::~Clock()>:
c0013e26:	83 ec 0c             	sub    esp,0xc
c0013e29:	83 ec 0c             	sub    esp,0xc
c0013e2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e30:	e8 cd ff ff ff       	call   c0013e02 <Clock::~Clock()>
c0013e35:	83 c4 10             	add    esp,0x10
c0013e38:	83 ec 08             	sub    esp,0x8
c0013e3b:	68 58 01 00 00       	push   0x158
c0013e40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e44:	e8 de ef ff ff       	call   c0012e27 <operator delete(void*, unsigned long)>
c0013e49:	83 c4 10             	add    esp,0x10
c0013e4c:	83 c4 0c             	add    esp,0xc
c0013e4f:	c3                   	ret    

c0013e50 <Clock::timeInSecondsLocal()>:
c0013e50:	53                   	push   ebx
c0013e51:	83 ec 14             	sub    esp,0x14
c0013e54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e58:	8b 10                	mov    edx,DWORD PTR [eax]
c0013e5a:	50                   	push   eax
c0013e5b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013e5e:	0f b6 0d 5c e7 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e75c
c0013e65:	03 0d 60 e7 02 c0    	add    ecx,DWORD PTR ds:0xc002e760
c0013e6b:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013e71:	89 cb                	mov    ebx,ecx
c0013e73:	c1 fb 1f             	sar    ebx,0x1f
c0013e76:	01 c8                	add    eax,ecx
c0013e78:	11 da                	adc    edx,ebx
c0013e7a:	83 c4 10             	add    esp,0x10
c0013e7d:	31 c9                	xor    ecx,ecx
c0013e7f:	80 3d 5d e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e75d,0x0
c0013e86:	74 05                	je     c0013e8d <Clock::timeInSecondsLocal()+0x3d>
c0013e88:	b9 08 07 00 00       	mov    ecx,0x708
c0013e8d:	31 db                	xor    ebx,ebx
c0013e8f:	01 c8                	add    eax,ecx
c0013e91:	11 da                	adc    edx,ebx
c0013e93:	83 c4 08             	add    esp,0x8
c0013e96:	5b                   	pop    ebx
c0013e97:	c3                   	ret    

c0013e98 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013e98:	57                   	push   edi
c0013e99:	56                   	push   esi
c0013e9a:	53                   	push   ebx
c0013e9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013e9f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013ea3:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013ea5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013ea9:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013eac:	0f b6 05 5c e7 02 c0 	movzx  eax,BYTE PTR ds:0xc002e75c
c0013eb3:	03 05 60 e7 02 c0    	add    eax,DWORD PTR ds:0xc002e760
c0013eb9:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013ebf:	99                   	cdq    
c0013ec0:	29 c6                	sub    esi,eax
c0013ec2:	19 d7                	sbb    edi,edx
c0013ec4:	89 f0                	mov    eax,esi
c0013ec6:	89 fa                	mov    edx,edi
c0013ec8:	31 f6                	xor    esi,esi
c0013eca:	80 3d 5d e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e75d,0x0
c0013ed1:	74 05                	je     c0013ed8 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013ed3:	be 08 07 00 00       	mov    esi,0x708
c0013ed8:	31 ff                	xor    edi,edi
c0013eda:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013ede:	29 f0                	sub    eax,esi
c0013ee0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013ee4:	19 fa                	sbb    edx,edi
c0013ee6:	89 d8                	mov    eax,ebx
c0013ee8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013eec:	5b                   	pop    ebx
c0013eed:	5e                   	pop    esi
c0013eee:	5f                   	pop    edi
c0013eef:	ff e0                	jmp    eax

c0013ef1 <datetimeToSeconds(datetime_t)>:
c0013ef1:	55                   	push   ebp
c0013ef2:	57                   	push   edi
c0013ef3:	56                   	push   esi
c0013ef4:	53                   	push   ebx
c0013ef5:	83 ec 14             	sub    esp,0x14
c0013ef8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013efc:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013f00:	89 d3                	mov    ebx,edx
c0013f02:	0f b6 c6             	movzx  eax,dh
c0013f05:	c1 eb 10             	shr    ebx,0x10
c0013f08:	48                   	dec    eax
c0013f09:	66 81 eb 6c 07       	sub    bx,0x76c
c0013f0e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013f12:	0f b6 f5             	movzx  esi,ch
c0013f15:	89 cf                	mov    edi,ecx
c0013f17:	6b f6 3c             	imul   esi,esi,0x3c
c0013f1a:	c1 ef 10             	shr    edi,0x10
c0013f1d:	0f b6 c9             	movzx  ecx,cl
c0013f20:	89 f8                	mov    eax,edi
c0013f22:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013f28:	0f b6 f8             	movzx  edi,al
c0013f2b:	0f b6 d2             	movzx  edx,dl
c0013f2e:	01 fe                	add    esi,edi
c0013f30:	01 f1                	add    ecx,esi
c0013f32:	0f b7 f3             	movzx  esi,bx
c0013f35:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013f39:	c1 f9 1f             	sar    ecx,0x1f
c0013f3c:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013f41:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013f45:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013f4a:	8b 0c 8d 60 ad 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd52a0]
c0013f51:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013f55:	76 29                	jbe    c0013f80 <datetimeToSeconds(datetime_t)+0x8f>
c0013f57:	f6 c3 03             	test   bl,0x3
c0013f5a:	75 24                	jne    c0013f80 <datetimeToSeconds(datetime_t)+0x8f>
c0013f5c:	31 d2                	xor    edx,edx
c0013f5e:	bf 64 00 00 00       	mov    edi,0x64
c0013f63:	89 d8                	mov    eax,ebx
c0013f65:	66 f7 f7             	div    di
c0013f68:	66 85 d2             	test   dx,dx
c0013f6b:	75 12                	jne    c0013f7f <datetimeToSeconds(datetime_t)+0x8e>
c0013f6d:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013f73:	bf 90 01 00 00       	mov    edi,0x190
c0013f78:	99                   	cdq    
c0013f79:	f7 ff                	idiv   edi
c0013f7b:	85 d2                	test   edx,edx
c0013f7d:	75 01                	jne    c0013f80 <datetimeToSeconds(datetime_t)+0x8f>
c0013f7f:	41                   	inc    ecx
c0013f80:	66 83 fb 46          	cmp    bx,0x46
c0013f84:	76 45                	jbe    c0013fcb <datetimeToSeconds(datetime_t)+0xda>
c0013f86:	bb 46 00 00 00       	mov    ebx,0x46
c0013f8b:	bf 64 00 00 00       	mov    edi,0x64
c0013f90:	bd 90 01 00 00       	mov    ebp,0x190
c0013f95:	b8 6d 01 00 00       	mov    eax,0x16d
c0013f9a:	f6 c3 03             	test   bl,0x3
c0013f9d:	75 23                	jne    c0013fc2 <datetimeToSeconds(datetime_t)+0xd1>
c0013f9f:	89 d8                	mov    eax,ebx
c0013fa1:	99                   	cdq    
c0013fa2:	f7 ff                	idiv   edi
c0013fa4:	b8 6e 01 00 00       	mov    eax,0x16e
c0013fa9:	85 d2                	test   edx,edx
c0013fab:	75 15                	jne    c0013fc2 <datetimeToSeconds(datetime_t)+0xd1>
c0013fad:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013fb3:	99                   	cdq    
c0013fb4:	f7 fd                	idiv   ebp
c0013fb6:	83 fa 01             	cmp    edx,0x1
c0013fb9:	19 c0                	sbb    eax,eax
c0013fbb:	f7 d0                	not    eax
c0013fbd:	05 6e 01 00 00       	add    eax,0x16e
c0013fc2:	01 c1                	add    ecx,eax
c0013fc4:	43                   	inc    ebx
c0013fc5:	39 f3                	cmp    ebx,esi
c0013fc7:	7c cc                	jl     c0013f95 <datetimeToSeconds(datetime_t)+0xa4>
c0013fc9:	eb 35                	jmp    c0014000 <datetimeToSeconds(datetime_t)+0x10f>
c0013fcb:	74 33                	je     c0014000 <datetimeToSeconds(datetime_t)+0x10f>
c0013fcd:	b8 45 00 00 00       	mov    eax,0x45
c0013fd2:	89 c2                	mov    edx,eax
c0013fd4:	83 e2 03             	and    edx,0x3
c0013fd7:	39 f0                	cmp    eax,esi
c0013fd9:	7e 0f                	jle    c0013fea <datetimeToSeconds(datetime_t)+0xf9>
c0013fdb:	83 fa 01             	cmp    edx,0x1
c0013fde:	19 d2                	sbb    edx,edx
c0013fe0:	48                   	dec    eax
c0013fe1:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013fe8:	eb e8                	jmp    c0013fd2 <datetimeToSeconds(datetime_t)+0xe1>
c0013fea:	b8 6d 01 00 00       	mov    eax,0x16d
c0013fef:	85 d2                	test   edx,edx
c0013ff1:	75 0b                	jne    c0013ffe <datetimeToSeconds(datetime_t)+0x10d>
c0013ff3:	66 83 fb 01          	cmp    bx,0x1
c0013ff7:	19 c0                	sbb    eax,eax
c0013ff9:	05 6e 01 00 00       	add    eax,0x16e
c0013ffe:	29 c1                	sub    ecx,eax
c0014000:	b8 80 51 01 00       	mov    eax,0x15180
c0014005:	f7 e9                	imul   ecx
c0014007:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001400b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001400f:	83 c4 14             	add    esp,0x14
c0014012:	5b                   	pop    ebx
c0014013:	5e                   	pop    esi
c0014014:	5f                   	pop    edi
c0014015:	5d                   	pop    ebp
c0014016:	c3                   	ret    
c0014017:	90                   	nop

c0014018 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0014018:	57                   	push   edi
c0014019:	56                   	push   esi
c001401a:	53                   	push   ebx
c001401b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001401f:	8b 06                	mov    eax,DWORD PTR [esi]
c0014021:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0014024:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014028:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001402c:	e8 c0 fe ff ff       	call   c0013ef1 <datetimeToSeconds(datetime_t)>
c0014031:	59                   	pop    ecx
c0014032:	0f b6 0d 5c e7 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e75c
c0014039:	5b                   	pop    ebx
c001403a:	03 0d 60 e7 02 c0    	add    ecx,DWORD PTR ds:0xc002e760
c0014040:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0014046:	89 cb                	mov    ebx,ecx
c0014048:	c1 fb 1f             	sar    ebx,0x1f
c001404b:	29 c8                	sub    eax,ecx
c001404d:	19 da                	sbb    edx,ebx
c001404f:	31 c9                	xor    ecx,ecx
c0014051:	80 3d 5d e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e75d,0x0
c0014058:	74 05                	je     c001405f <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001405a:	b9 08 07 00 00       	mov    ecx,0x708
c001405f:	31 db                	xor    ebx,ebx
c0014061:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0014065:	29 c8                	sub    eax,ecx
c0014067:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001406b:	19 da                	sbb    edx,ebx
c001406d:	89 f8                	mov    eax,edi
c001406f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0014073:	5b                   	pop    ebx
c0014074:	5e                   	pop    esi
c0014075:	5f                   	pop    edi
c0014076:	ff e0                	jmp    eax

c0014078 <secondsToDatetime(unsigned long long)>:
c0014078:	55                   	push   ebp
c0014079:	57                   	push   edi
c001407a:	56                   	push   esi
c001407b:	53                   	push   ebx
c001407c:	83 ec 1c             	sub    esp,0x1c
c001407f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0014083:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0014087:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001408b:	6a 00                	push   0x0
c001408d:	68 80 51 01 00       	push   0x15180
c0014092:	55                   	push   ebp
c0014093:	57                   	push   edi
c0014094:	e8 6b 2a 01 00       	call   c0026b04 <__udivdi3>
c0014099:	83 c4 10             	add    esp,0x10
c001409c:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00140a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00140a6:	6a 00                	push   0x0
c00140a8:	68 80 51 01 00       	push   0x15180
c00140ad:	55                   	push   ebp
c00140ae:	57                   	push   edi
c00140af:	bf 10 0e 00 00       	mov    edi,0xe10
c00140b4:	e8 4b 2b 01 00       	call   c0026c04 <__umoddi3>
c00140b9:	83 c4 10             	add    esp,0x10
c00140bc:	99                   	cdq    
c00140bd:	f7 ff                	idiv   edi
c00140bf:	bf 3c 00 00 00       	mov    edi,0x3c
c00140c4:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00140c7:	89 d0                	mov    eax,edx
c00140c9:	99                   	cdq    
c00140ca:	f7 ff                	idiv   edi
c00140cc:	85 db                	test   ebx,ebx
c00140ce:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00140d1:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00140d4:	79 11                	jns    c00140e7 <secondsToDatetime(unsigned long long)+0x6f>
c00140d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00140da:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00140e0:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00140e5:	eb 07                	jmp    c00140ee <secondsToDatetime(unsigned long long)+0x76>
c00140e7:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00140ec:	89 d8                	mov    eax,ebx
c00140ee:	bf b4 05 00 00       	mov    edi,0x5b4
c00140f3:	99                   	cdq    
c00140f4:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00140f9:	f7 f9                	idiv   ecx
c00140fb:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0014100:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014104:	31 d2                	xor    edx,edx
c0014106:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001410e:	01 c3                	add    ebx,eax
c0014110:	89 d8                	mov    eax,ebx
c0014112:	f7 f1                	div    ecx
c0014114:	31 d2                	xor    edx,edx
c0014116:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0014119:	89 d8                	mov    eax,ebx
c001411b:	f7 f7                	div    edi
c001411d:	31 d2                	xor    edx,edx
c001411f:	29 c1                	sub    ecx,eax
c0014121:	89 d8                	mov    eax,ebx
c0014123:	f7 f5                	div    ebp
c0014125:	bd 6d 01 00 00       	mov    ebp,0x16d
c001412a:	29 c1                	sub    ecx,eax
c001412c:	31 d2                	xor    edx,edx
c001412e:	89 c8                	mov    eax,ecx
c0014130:	f7 f5                	div    ebp
c0014132:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0014137:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001413b:	31 d2                	xor    edx,edx
c001413d:	89 c8                	mov    eax,ecx
c001413f:	f7 f5                	div    ebp
c0014141:	31 d2                	xor    edx,edx
c0014143:	01 c3                	add    ebx,eax
c0014145:	89 c8                	mov    eax,ecx
c0014147:	f7 f7                	div    edi
c0014149:	bf 99 00 00 00       	mov    edi,0x99
c001414e:	29 c3                	sub    ebx,eax
c0014150:	31 d2                	xor    edx,edx
c0014152:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001415a:	29 c3                	sub    ebx,eax
c001415c:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001415f:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0014162:	bb 05 00 00 00       	mov    ebx,0x5
c0014167:	83 c1 02             	add    ecx,0x2
c001416a:	89 c8                	mov    eax,ecx
c001416c:	f7 f7                	div    edi
c001416e:	31 d2                	xor    edx,edx
c0014170:	89 c7                	mov    edi,eax
c0014172:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0014178:	83 c0 02             	add    eax,0x2
c001417b:	f7 f3                	div    ebx
c001417d:	89 eb                	mov    ebx,ebp
c001417f:	29 c3                	sub    ebx,eax
c0014181:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0014187:	88 1e                	mov    BYTE PTR [esi],bl
c0014189:	19 c0                	sbb    eax,eax
c001418b:	31 d2                	xor    edx,edx
c001418d:	83 e0 0c             	and    eax,0xc
c0014190:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0014194:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001419c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00141a0:	83 f9 01             	cmp    ecx,0x1
c00141a3:	0f 96 c2             	setbe  dl
c00141a6:	41                   	inc    ecx
c00141a7:	01 d0                	add    eax,edx
c00141a9:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00141ac:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00141b0:	83 c4 1c             	add    esp,0x1c
c00141b3:	89 f0                	mov    eax,esi
c00141b5:	5b                   	pop    ebx
c00141b6:	5e                   	pop    esi
c00141b7:	5f                   	pop    edi
c00141b8:	5d                   	pop    ebp
c00141b9:	c2 04 00             	ret    0x4

c00141bc <Clock::timeInDatetimeLocal()>:
c00141bc:	53                   	push   ebx
c00141bd:	83 ec 14             	sub    esp,0x14
c00141c0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00141c4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00141c8:	e8 83 fc ff ff       	call   c0013e50 <Clock::timeInSecondsLocal()>
c00141cd:	83 c4 0c             	add    esp,0xc
c00141d0:	52                   	push   edx
c00141d1:	50                   	push   eax
c00141d2:	53                   	push   ebx
c00141d3:	e8 a0 fe ff ff       	call   c0014078 <secondsToDatetime(unsigned long long)>
c00141d8:	89 d8                	mov    eax,ebx
c00141da:	83 c4 14             	add    esp,0x14
c00141dd:	5b                   	pop    ebx
c00141de:	c2 04 00             	ret    0x4
c00141e1:	90                   	nop

c00141e2 <Device::hibernate()>:
c00141e2:	c3                   	ret    
c00141e3:	90                   	nop

c00141e4 <Device::wake()>:
c00141e4:	c3                   	ret    
c00141e5:	90                   	nop

c00141e6 <Device::detect()>:
c00141e6:	c3                   	ret    
c00141e7:	90                   	nop

c00141e8 <Device::disableLegacy()>:
c00141e8:	c3                   	ret    
c00141e9:	90                   	nop

c00141ea <Device::powerSaving(PowerSavingLevel)>:
c00141ea:	c3                   	ret    
c00141eb:	90                   	nop

c00141ec <DriverlessDevice::close(int, int, void*)>:
c00141ec:	31 c0                	xor    eax,eax
c00141ee:	c3                   	ret    
c00141ef:	90                   	nop

c00141f0 <DriverlessDevice::detect()>:
c00141f0:	c3                   	ret    
c00141f1:	90                   	nop

c00141f2 <DriverlessDevice::open(int, int, void*)>:
c00141f2:	83 ec 18             	sub    esp,0x18
c00141f5:	68 90 ad 02 c0       	push   0xc002ad90
c00141fa:	e8 46 64 00 00       	call   c001a645 <Krnl::panic(char const*)>
c00141ff:	83 c8 ff             	or     eax,0xffffffff
c0014202:	83 c4 1c             	add    esp,0x1c
c0014205:	c3                   	ret    

c0014206 <Device::~Device()>:
c0014206:	ba b8 ad 02 c0       	mov    edx,0xc002adb8
c001420b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001420f:	89 10                	mov    DWORD PTR [eax],edx
c0014211:	90                   	nop
c0014212:	c3                   	ret    
c0014213:	90                   	nop

c0014214 <Device::~Device()>:
c0014214:	83 ec 0c             	sub    esp,0xc
c0014217:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001421b:	e8 e6 ff ff ff       	call   c0014206 <Device::~Device()>
c0014220:	83 c4 04             	add    esp,0x4
c0014223:	83 ec 08             	sub    esp,0x8
c0014226:	68 58 01 00 00       	push   0x158
c001422b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001422f:	e8 f3 eb ff ff       	call   c0012e27 <operator delete(void*, unsigned long)>
c0014234:	83 c4 10             	add    esp,0x10
c0014237:	83 c4 0c             	add    esp,0xc
c001423a:	c3                   	ret    
c001423b:	90                   	nop

c001423c <Device::findAndLoadDriver()>:
c001423c:	c3                   	ret    
c001423d:	90                   	nop

c001423e <Device::preOpenPCI(PCIDeviceInfo)>:
c001423e:	57                   	push   edi
c001423f:	b9 09 00 00 00       	mov    ecx,0x9
c0014244:	56                   	push   esi
c0014245:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014249:	8d 74 24 10          	lea    esi,[esp+0x10]
c001424d:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0014257:	81 c7 18 01 00 00    	add    edi,0x118
c001425d:	fc                   	cld    
c001425e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014260:	5e                   	pop    esi
c0014261:	5f                   	pop    edi
c0014262:	c3                   	ret    
c0014263:	90                   	nop

c0014264 <Device::preOpenACPI(void*, char*, char*)>:
c0014264:	56                   	push   esi
c0014265:	53                   	push   ebx
c0014266:	83 ec 08             	sub    esp,0x8
c0014269:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001426d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014271:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c001427b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001427f:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0014285:	6a 1e                	push   0x1e
c0014287:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c001428d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014291:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0014297:	50                   	push   eax
c0014298:	e8 af c4 fe ff       	call   c000074c <memcpy>
c001429d:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00142a1:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00142a5:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c00142ad:	83 c4 14             	add    esp,0x14
c00142b0:	5b                   	pop    ebx
c00142b1:	5e                   	pop    esi
c00142b2:	e9 95 c4 fe ff       	jmp    c000074c <memcpy>
c00142b7:	90                   	nop

c00142b8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00142b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00142bc:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00142c1:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00142c8:	75 0b                	jne    c00142d5 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c00142ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00142cc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142d0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00142d3:	eb 1e                	jmp    c00142f3 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c00142d5:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c00142da:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00142e0:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00142e6:	8b 08                	mov    ecx,DWORD PTR [eax]
c00142e8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142ec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00142f0:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00142f3:	ff e0                	jmp    eax
c00142f5:	90                   	nop

c00142f6 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00142f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00142fa:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00142ff:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014306:	75 0b                	jne    c0014313 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0014308:	8b 00                	mov    eax,DWORD PTR [eax]
c001430a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001430e:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0014311:	eb 1e                	jmp    c0014331 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0014313:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0014318:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001431e:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014324:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014326:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001432a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001432e:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0014331:	ff e0                	jmp    eax
c0014333:	90                   	nop

c0014334 <Device::addChild(Device*)>:
c0014334:	53                   	push   ebx
c0014335:	83 ec 08             	sub    esp,0x8
c0014338:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001433c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014340:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0014346:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001434c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001434e:	85 d2                	test   edx,edx
c0014350:	74 04                	je     c0014356 <Device::addChild(Device*)+0x22>
c0014352:	89 d3                	mov    ebx,edx
c0014354:	eb f6                	jmp    c001434c <Device::addChild(Device*)+0x18>
c0014356:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0014359:	83 ec 0c             	sub    esp,0xc
c001435c:	6a 08                	push   0x8
c001435e:	e8 e8 b4 ff ff       	call   c000f84b <malloc>
c0014363:	89 03                	mov    DWORD PTR [ebx],eax
c0014365:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001436b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014372:	83 c4 18             	add    esp,0x18
c0014375:	5b                   	pop    ebx
c0014376:	c3                   	ret    
c0014377:	90                   	nop

c0014378 <Device::removeAllChildren()>:
c0014378:	56                   	push   esi
c0014379:	53                   	push   ebx
c001437a:	52                   	push   edx
c001437b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001437f:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0014385:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014388:	74 17                	je     c00143a1 <Device::removeAllChildren()+0x29>
c001438a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001438d:	85 c0                	test   eax,eax
c001438f:	74 0c                	je     c001439d <Device::removeAllChildren()+0x25>
c0014391:	83 ec 0c             	sub    esp,0xc
c0014394:	8b 10                	mov    edx,DWORD PTR [eax]
c0014396:	50                   	push   eax
c0014397:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001439a:	83 c4 10             	add    esp,0x10
c001439d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001439f:	eb e4                	jmp    c0014385 <Device::removeAllChildren()+0xd>
c00143a1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00143a7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00143ad:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00143b3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00143ba:	58                   	pop    eax
c00143bb:	5b                   	pop    ebx
c00143bc:	5e                   	pop    esi
c00143bd:	c3                   	ret    

c00143be <Device::hibernateAll()>:
c00143be:	53                   	push   ebx
c00143bf:	83 ec 14             	sub    esp,0x14
c00143c2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00143c6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143c8:	53                   	push   ebx
c00143c9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00143cc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143d2:	83 c4 10             	add    esp,0x10
c00143d5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143d8:	74 0f                	je     c00143e9 <Device::hibernateAll()+0x2b>
c00143da:	83 ec 0c             	sub    esp,0xc
c00143dd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143e0:	e8 d9 ff ff ff       	call   c00143be <Device::hibernateAll()>
c00143e5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143e7:	eb e9                	jmp    c00143d2 <Device::hibernateAll()+0x14>
c00143e9:	83 c4 08             	add    esp,0x8
c00143ec:	5b                   	pop    ebx
c00143ed:	c3                   	ret    

c00143ee <Device::wakeAll()>:
c00143ee:	53                   	push   ebx
c00143ef:	83 ec 14             	sub    esp,0x14
c00143f2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00143f6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143f8:	53                   	push   ebx
c00143f9:	ff 50 14             	call   DWORD PTR [eax+0x14]
c00143fc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014402:	83 c4 10             	add    esp,0x10
c0014405:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014408:	74 0f                	je     c0014419 <Device::wakeAll()+0x2b>
c001440a:	83 ec 0c             	sub    esp,0xc
c001440d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014410:	e8 d9 ff ff ff       	call   c00143ee <Device::wakeAll()>
c0014415:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014417:	eb e9                	jmp    c0014402 <Device::wakeAll()+0x14>
c0014419:	83 c4 08             	add    esp,0x8
c001441c:	5b                   	pop    ebx
c001441d:	c3                   	ret    

c001441e <Device::detectAll()>:
c001441e:	53                   	push   ebx
c001441f:	83 ec 14             	sub    esp,0x14
c0014422:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014426:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014428:	53                   	push   ebx
c0014429:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001442c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014432:	83 c4 10             	add    esp,0x10
c0014435:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014438:	74 0f                	je     c0014449 <Device::detectAll()+0x2b>
c001443a:	83 ec 0c             	sub    esp,0xc
c001443d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014440:	e8 d9 ff ff ff       	call   c001441e <Device::detectAll()>
c0014445:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014447:	eb e9                	jmp    c0014432 <Device::detectAll()+0x14>
c0014449:	83 c4 08             	add    esp,0x8
c001444c:	5b                   	pop    ebx
c001444d:	c3                   	ret    

c001444e <Device::disableLegacyAll()>:
c001444e:	53                   	push   ebx
c001444f:	83 ec 14             	sub    esp,0x14
c0014452:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014456:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014458:	53                   	push   ebx
c0014459:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c001445c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014462:	83 c4 10             	add    esp,0x10
c0014465:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014468:	74 0f                	je     c0014479 <Device::disableLegacyAll()+0x2b>
c001446a:	83 ec 0c             	sub    esp,0xc
c001446d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014470:	e8 d9 ff ff ff       	call   c001444e <Device::disableLegacyAll()>
c0014475:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014477:	eb e9                	jmp    c0014462 <Device::disableLegacyAll()+0x14>
c0014479:	83 c4 08             	add    esp,0x8
c001447c:	5b                   	pop    ebx
c001447d:	c3                   	ret    

c001447e <Device::loadDriversForAll()>:
c001447e:	53                   	push   ebx
c001447f:	83 ec 08             	sub    esp,0x8
c0014482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014486:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001448c:	8b 18                	mov    ebx,DWORD PTR [eax]
c001448e:	85 db                	test   ebx,ebx
c0014490:	74 12                	je     c00144a4 <Device::loadDriversForAll()+0x26>
c0014492:	83 ec 0c             	sub    esp,0xc
c0014495:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014498:	e8 e1 ff ff ff       	call   c001447e <Device::loadDriversForAll()>
c001449d:	83 c4 10             	add    esp,0x10
c00144a0:	89 d8                	mov    eax,ebx
c00144a2:	eb e8                	jmp    c001448c <Device::loadDriversForAll()+0xe>
c00144a4:	83 c4 08             	add    esp,0x8
c00144a7:	5b                   	pop    ebx
c00144a8:	c3                   	ret    
c00144a9:	90                   	nop

c00144aa <Device::closeAll()>:
c00144aa:	53                   	push   ebx
c00144ab:	83 ec 08             	sub    esp,0x8
c00144ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00144b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144b4:	6a 00                	push   0x0
c00144b6:	6a 00                	push   0x0
c00144b8:	6a 00                	push   0x0
c00144ba:	53                   	push   ebx
c00144bb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00144be:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144c4:	83 c4 10             	add    esp,0x10
c00144c7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00144ca:	74 0f                	je     c00144db <Device::closeAll()+0x31>
c00144cc:	83 ec 0c             	sub    esp,0xc
c00144cf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144d2:	e8 d3 ff ff ff       	call   c00144aa <Device::closeAll()>
c00144d7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144d9:	eb e9                	jmp    c00144c4 <Device::closeAll()+0x1a>
c00144db:	83 c4 08             	add    esp,0x8
c00144de:	5b                   	pop    ebx
c00144df:	c3                   	ret    

c00144e0 <Device::powerSavingAll(PowerSavingLevel)>:
c00144e0:	56                   	push   esi
c00144e1:	53                   	push   ebx
c00144e2:	83 ec 0c             	sub    esp,0xc
c00144e5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00144e9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00144ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144ef:	56                   	push   esi
c00144f0:	53                   	push   ebx
c00144f1:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00144f4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144fa:	83 c4 10             	add    esp,0x10
c00144fd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014500:	74 0f                	je     c0014511 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0014502:	52                   	push   edx
c0014503:	52                   	push   edx
c0014504:	56                   	push   esi
c0014505:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014508:	e8 d3 ff ff ff       	call   c00144e0 <Device::powerSavingAll(PowerSavingLevel)>
c001450d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001450f:	eb e9                	jmp    c00144fa <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0014511:	58                   	pop    eax
c0014512:	5b                   	pop    ebx
c0014513:	5e                   	pop    esi
c0014514:	c3                   	ret    
c0014515:	90                   	nop

c0014516 <Device::setName(char const*)>:
c0014516:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001451e:	e9 19 c3 fe ff       	jmp    c000083c <strcpy>
c0014523:	90                   	nop

c0014524 <Device::Device(char const*)>:
c0014524:	83 ec 1c             	sub    esp,0x1c
c0014527:	ba b8 ad 02 c0       	mov    edx,0xc002adb8
c001452c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014530:	89 10                	mov    DWORD PTR [eax],edx
c0014532:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014536:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0014540:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014544:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001454e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014552:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001455c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014560:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001456a:	83 ec 08             	sub    esp,0x8
c001456d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014571:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014575:	e8 9c ff ff ff       	call   c0014516 <Device::setName(char const*)>
c001457a:	83 c4 10             	add    esp,0x10
c001457d:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0014585:	83 ec 0c             	sub    esp,0xc
c0014588:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001458c:	e8 ba b2 ff ff       	call   c000f84b <malloc>
c0014591:	83 c4 10             	add    esp,0x10
c0014594:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001459a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00145a1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00145a5:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00145ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145af:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00145b5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00145bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145bf:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00145c5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00145cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145d0:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00145d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145db:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00145e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145e6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00145f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145f4:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00145fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014602:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001460c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014610:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c001461a:	90                   	nop
c001461b:	83 c4 1c             	add    esp,0x1c
c001461e:	c3                   	ret    
c001461f:	90                   	nop

c0014620 <Device::getName()>:
c0014620:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014624:	05 d0 00 00 00       	add    eax,0xd0
c0014629:	c3                   	ret    

c001462a <DriverlessDevice::DriverlessDevice(char const*)>:
c001462a:	83 ec 0c             	sub    esp,0xc
c001462d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014631:	83 ec 08             	sub    esp,0x8
c0014634:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014638:	50                   	push   eax
c0014639:	e8 e6 fe ff ff       	call   c0014524 <Device::Device(char const*)>
c001463e:	83 c4 10             	add    esp,0x10
c0014641:	ba e4 ad 02 c0       	mov    edx,0xc002ade4
c0014646:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001464a:	89 10                	mov    DWORD PTR [eax],edx
c001464c:	90                   	nop
c001464d:	83 c4 0c             	add    esp,0xc
c0014650:	c3                   	ret    
c0014651:	90                   	nop

c0014652 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0014652:	57                   	push   edi
c0014653:	56                   	push   esi
c0014654:	53                   	push   ebx
c0014655:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014659:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001465d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014661:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0014667:	75 0c                	jne    c0014675 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0014669:	52                   	push   edx
c001466a:	52                   	push   edx
c001466b:	53                   	push   ebx
c001466c:	56                   	push   esi
c001466d:	e8 d8 43 01 00       	call   c0028a4a <LinkedList<Device>::addElement(Device*)>
c0014672:	83 c4 10             	add    esp,0x10
c0014675:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001467b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001467e:	74 12                	je     c0014692 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0014680:	50                   	push   eax
c0014681:	57                   	push   edi
c0014682:	56                   	push   esi
c0014683:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014686:	e8 c7 ff ff ff       	call   c0014652 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001468b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001468d:	83 c4 10             	add    esp,0x10
c0014690:	eb e9                	jmp    c001467b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0014692:	5b                   	pop    ebx
c0014693:	5e                   	pop    esi
c0014694:	5f                   	pop    edi
c0014695:	c3                   	ret    

c0014696 <getDevicesOfType(DeviceType)>:
c0014696:	53                   	push   ebx
c0014697:	83 ec 14             	sub    esp,0x14
c001469a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001469e:	53                   	push   ebx
c001469f:	e8 82 44 01 00       	call   c0028b26 <LinkedList<Device>::LinkedList()>
c00146a4:	83 c4 0c             	add    esp,0xc
c00146a7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00146ab:	53                   	push   ebx
c00146ac:	ff 35 c8 e5 02 c0    	push   DWORD PTR ds:0xc002e5c8
c00146b2:	e8 9b ff ff ff       	call   c0014652 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00146b7:	89 d8                	mov    eax,ebx
c00146b9:	83 c4 18             	add    esp,0x18
c00146bc:	5b                   	pop    ebx
c00146bd:	c2 04 00             	ret    0x4

c00146c0 <HardDiskController::HardDiskController(char const*)>:
c00146c0:	83 ec 0c             	sub    esp,0xc
c00146c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146c7:	83 ec 08             	sub    esp,0x8
c00146ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146ce:	50                   	push   eax
c00146cf:	e8 50 fe ff ff       	call   c0014524 <Device::Device(char const*)>
c00146d4:	83 c4 10             	add    esp,0x10
c00146d7:	ba 10 ae 02 c0       	mov    edx,0xc002ae10
c00146dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146e0:	89 10                	mov    DWORD PTR [eax],edx
c00146e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146e6:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00146f0:	90                   	nop
c00146f1:	83 c4 0c             	add    esp,0xc
c00146f4:	c3                   	ret    
c00146f5:	90                   	nop

c00146f6 <HardDiskController::~HardDiskController()>:
c00146f6:	83 ec 0c             	sub    esp,0xc
c00146f9:	ba 10 ae 02 c0       	mov    edx,0xc002ae10
c00146fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014702:	89 10                	mov    DWORD PTR [eax],edx
c0014704:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014708:	83 ec 0c             	sub    esp,0xc
c001470b:	50                   	push   eax
c001470c:	e8 f5 fa ff ff       	call   c0014206 <Device::~Device()>
c0014711:	83 c4 10             	add    esp,0x10
c0014714:	90                   	nop
c0014715:	83 c4 0c             	add    esp,0xc
c0014718:	c3                   	ret    
c0014719:	90                   	nop

c001471a <HardDiskController::~HardDiskController()>:
c001471a:	83 ec 0c             	sub    esp,0xc
c001471d:	83 ec 0c             	sub    esp,0xc
c0014720:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014724:	e8 cd ff ff ff       	call   c00146f6 <HardDiskController::~HardDiskController()>
c0014729:	83 c4 10             	add    esp,0x10
c001472c:	83 ec 08             	sub    esp,0x8
c001472f:	68 58 01 00 00       	push   0x158
c0014734:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014738:	e8 ea e6 ff ff       	call   c0012e27 <operator delete(void*, unsigned long)>
c001473d:	83 c4 10             	add    esp,0x10
c0014740:	83 c4 0c             	add    esp,0xc
c0014743:	c3                   	ret    

c0014744 <PhysicalDisk::eject()>:
c0014744:	83 ec 18             	sub    esp,0x18
c0014747:	68 34 ae 02 c0       	push   0xc002ae34
c001474c:	e8 b6 e7 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0014751:	83 c8 ff             	or     eax,0xffffffff
c0014754:	83 c4 1c             	add    esp,0x1c
c0014757:	c3                   	ret    

c0014758 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0014758:	83 ec 0c             	sub    esp,0xc
c001475b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001475f:	83 ec 08             	sub    esp,0x8
c0014762:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014766:	50                   	push   eax
c0014767:	e8 b8 fd ff ff       	call   c0014524 <Device::Device(char const*)>
c001476c:	83 c4 10             	add    esp,0x10
c001476f:	ba 64 ae 02 c0       	mov    edx,0xc002ae64
c0014774:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014778:	89 10                	mov    DWORD PTR [eax],edx
c001477a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001477e:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014785:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014789:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014794:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c001479e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147a2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00147a6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00147ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147b0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00147ba:	90                   	nop
c00147bb:	83 c4 0c             	add    esp,0xc
c00147be:	c3                   	ret    
c00147bf:	90                   	nop

c00147c0 <PhysicalDisk::startCache()>:
c00147c0:	56                   	push   esi
c00147c1:	53                   	push   ebx
c00147c2:	83 ec 10             	sub    esp,0x10
c00147c5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00147c9:	6a 44                	push   0x44
c00147cb:	e8 7b b0 ff ff       	call   c000f84b <malloc>
c00147d0:	89 c6                	mov    esi,eax
c00147d2:	58                   	pop    eax
c00147d3:	5a                   	pop    edx
c00147d4:	53                   	push   ebx
c00147d5:	56                   	push   esi
c00147d6:	e8 a3 27 00 00       	call   c0016f7e <VCache::VCache(PhysicalDisk*)>
c00147db:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00147e1:	83 c4 14             	add    esp,0x14
c00147e4:	5b                   	pop    ebx
c00147e5:	5e                   	pop    esi
c00147e6:	c3                   	ret    
c00147e7:	90                   	nop

c00147e8 <PhysicalDisk::~PhysicalDisk()>:
c00147e8:	83 ec 0c             	sub    esp,0xc
c00147eb:	ba 64 ae 02 c0       	mov    edx,0xc002ae64
c00147f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147f4:	89 10                	mov    DWORD PTR [eax],edx
c00147f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147fa:	83 ec 0c             	sub    esp,0xc
c00147fd:	50                   	push   eax
c00147fe:	e8 03 fa ff ff       	call   c0014206 <Device::~Device()>
c0014803:	83 c4 10             	add    esp,0x10
c0014806:	90                   	nop
c0014807:	83 c4 0c             	add    esp,0xc
c001480a:	c3                   	ret    
c001480b:	90                   	nop

c001480c <PhysicalDisk::~PhysicalDisk()>:
c001480c:	83 ec 0c             	sub    esp,0xc
c001480f:	83 ec 0c             	sub    esp,0xc
c0014812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014816:	e8 cd ff ff ff       	call   c00147e8 <PhysicalDisk::~PhysicalDisk()>
c001481b:	83 c4 10             	add    esp,0x10
c001481e:	83 ec 08             	sub    esp,0x8
c0014821:	68 6c 01 00 00       	push   0x16c
c0014826:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001482a:	e8 f8 e5 ff ff       	call   c0012e27 <operator delete(void*, unsigned long)>
c001482f:	83 c4 10             	add    esp,0x10
c0014832:	83 c4 0c             	add    esp,0xc
c0014835:	c3                   	ret    

c0014836 <FPU::FPU(char const*)>:
c0014836:	83 ec 0c             	sub    esp,0xc
c0014839:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001483d:	83 ec 08             	sub    esp,0x8
c0014840:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014844:	50                   	push   eax
c0014845:	e8 da fc ff ff       	call   c0014524 <Device::Device(char const*)>
c001484a:	83 c4 10             	add    esp,0x10
c001484d:	ba a8 ae 02 c0       	mov    edx,0xc002aea8
c0014852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014856:	89 10                	mov    DWORD PTR [eax],edx
c0014858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001485c:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014866:	90                   	nop
c0014867:	83 c4 0c             	add    esp,0xc
c001486a:	c3                   	ret    
c001486b:	90                   	nop

c001486c <FPU::~FPU()>:
c001486c:	83 ec 0c             	sub    esp,0xc
c001486f:	ba a8 ae 02 c0       	mov    edx,0xc002aea8
c0014874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014878:	89 10                	mov    DWORD PTR [eax],edx
c001487a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001487e:	83 ec 0c             	sub    esp,0xc
c0014881:	50                   	push   eax
c0014882:	e8 7f f9 ff ff       	call   c0014206 <Device::~Device()>
c0014887:	83 c4 10             	add    esp,0x10
c001488a:	90                   	nop
c001488b:	83 c4 0c             	add    esp,0xc
c001488e:	c3                   	ret    
c001488f:	90                   	nop

c0014890 <FPU::~FPU()>:
c0014890:	83 ec 0c             	sub    esp,0xc
c0014893:	83 ec 0c             	sub    esp,0xc
c0014896:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001489a:	e8 cd ff ff ff       	call   c001486c <FPU::~FPU()>
c001489f:	83 c4 10             	add    esp,0x10
c00148a2:	83 ec 08             	sub    esp,0x8
c00148a5:	68 58 01 00 00       	push   0x158
c00148aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148ae:	e8 74 e5 ff ff       	call   c0012e27 <operator delete(void*, unsigned long)>
c00148b3:	83 c4 10             	add    esp,0x10
c00148b6:	83 c4 0c             	add    esp,0xc
c00148b9:	c3                   	ret    

c00148ba <setupFPU()>:
c00148ba:	53                   	push   ebx
c00148bb:	83 ec 08             	sub    esp,0x8
c00148be:	8b 15 c8 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5c8
c00148c4:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00148cb:	74 19                	je     c00148e6 <setupFPU()+0x2c>
c00148cd:	83 ec 0c             	sub    esp,0xc
c00148d0:	68 58 01 00 00       	push   0x158
c00148d5:	e8 71 af ff ff       	call   c000f84b <malloc>
c00148da:	89 c3                	mov    ebx,eax
c00148dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00148df:	e8 a6 0d 01 00       	call   c002568a <AVX::AVX()>
c00148e4:	eb 5b                	jmp    c0014941 <setupFPU()+0x87>
c00148e6:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00148ec:	84 c0                	test   al,al
c00148ee:	79 19                	jns    c0014909 <setupFPU()+0x4f>
c00148f0:	83 ec 0c             	sub    esp,0xc
c00148f3:	68 58 01 00 00       	push   0x158
c00148f8:	e8 4e af ff ff       	call   c000f84b <malloc>
c00148fd:	89 c3                	mov    ebx,eax
c00148ff:	89 04 24             	mov    DWORD PTR [esp],eax
c0014902:	e8 a9 0e 01 00       	call   c00257b0 <SSE::SSE()>
c0014907:	eb 38                	jmp    c0014941 <setupFPU()+0x87>
c0014909:	a8 20                	test   al,0x20
c001490b:	74 19                	je     c0014926 <setupFPU()+0x6c>
c001490d:	83 ec 0c             	sub    esp,0xc
c0014910:	68 58 01 00 00       	push   0x158
c0014915:	e8 31 af ff ff       	call   c000f84b <malloc>
c001491a:	89 c3                	mov    ebx,eax
c001491c:	89 04 24             	mov    DWORD PTR [esp],eax
c001491f:	e8 f6 0d 01 00       	call   c002571a <MMX::MMX()>
c0014924:	eb 1b                	jmp    c0014941 <setupFPU()+0x87>
c0014926:	a8 10                	test   al,0x10
c0014928:	74 1c                	je     c0014946 <setupFPU()+0x8c>
c001492a:	83 ec 0c             	sub    esp,0xc
c001492d:	68 58 01 00 00       	push   0x158
c0014932:	e8 14 af ff ff       	call   c000f84b <malloc>
c0014937:	89 c3                	mov    ebx,eax
c0014939:	89 04 24             	mov    DWORD PTR [esp],eax
c001493c:	e8 fd 0e 01 00       	call   c002583e <x87::x87()>
c0014941:	83 c4 10             	add    esp,0x10
c0014944:	eb 24                	jmp    c001496a <setupFPU()+0xb0>
c0014946:	83 e0 ef             	and    eax,0xffffffef
c0014949:	83 ec 0c             	sub    esp,0xc
c001494c:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014952:	68 94 ae 02 c0       	push   0xc002ae94
c0014957:	e8 ab e5 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001495c:	0f 20 c0             	mov    eax,cr0
c001495f:	83 c8 04             	or     eax,0x4
c0014962:	0f 22 c0             	mov    cr0,eax
c0014965:	31 db                	xor    ebx,ebx
c0014967:	83 c4 10             	add    esp,0x10
c001496a:	89 d8                	mov    eax,ebx
c001496c:	83 c4 08             	add    esp,0x8
c001496f:	5b                   	pop    ebx
c0014970:	c3                   	ret    
c0014971:	90                   	nop

c0014972 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014972:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014976:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001497a:	c1 e0 04             	shl    eax,0x4
c001497d:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014981:	8d 50 10             	lea    edx,[eax+0x10]
c0014984:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c001498a:	74 08                	je     c0014994 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c001498c:	83 c0 04             	add    eax,0x4
c001498f:	39 d0                	cmp    eax,edx
c0014991:	75 f1                	jne    c0014984 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014993:	c3                   	ret    
c0014994:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001499e:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00149a8:	eb e2                	jmp    c001498c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00149aa <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00149aa:	57                   	push   edi
c00149ab:	31 c0                	xor    eax,eax
c00149ad:	56                   	push   esi
c00149ae:	53                   	push   ebx
c00149af:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00149b3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00149b7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00149bb:	89 da                	mov    edx,ebx
c00149bd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00149c1:	c1 e2 04             	shl    edx,0x4
c00149c4:	01 ca                	add    edx,ecx
c00149c6:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00149ce:	74 16                	je     c00149e6 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00149d0:	40                   	inc    eax
c00149d1:	83 f8 04             	cmp    eax,0x4
c00149d4:	75 f0                	jne    c00149c6 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00149d6:	c7 44 24 10 d8 ae 02 c0 	mov    DWORD PTR [esp+0x10],0xc002aed8
c00149de:	5b                   	pop    ebx
c00149df:	5e                   	pop    esi
c00149e0:	5f                   	pop    edi
c00149e1:	e9 5f 5c 00 00       	jmp    c001a645 <Krnl::panic(char const*)>
c00149e6:	8d 04 98             	lea    eax,[eax+ebx*4]
c00149e9:	8d 04 81             	lea    eax,[ecx+eax*4]
c00149ec:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00149f2:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00149f8:	5b                   	pop    ebx
c00149f9:	5e                   	pop    esi
c00149fa:	5f                   	pop    edi
c00149fb:	c3                   	ret    

c00149fc <doubleFault(regs*, void*)>:
c00149fc:	55                   	push   ebp
c00149fd:	89 e5                	mov    ebp,esp
c00149ff:	83 ec 08             	sub    esp,0x8
c0014a02:	83 ec 0c             	sub    esp,0xc
c0014a05:	68 13 af 02 c0       	push   0xc002af13
c0014a0a:	e8 36 5c 00 00       	call   c001a645 <Krnl::panic(char const*)>
c0014a0f:	83 c4 10             	add    esp,0x10
c0014a12:	90                   	nop
c0014a13:	c9                   	leave  
c0014a14:	c3                   	ret    
c0014a15:	90                   	nop

c0014a16 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014a16:	56                   	push   esi
c0014a17:	53                   	push   ebx
c0014a18:	50                   	push   eax
c0014a19:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014a1d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014a21:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014a26:	75 35                	jne    c0014a5d <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014a28:	8d 43 20             	lea    eax,[ebx+0x20]
c0014a2b:	31 d2                	xor    edx,edx
c0014a2d:	89 c1                	mov    ecx,eax
c0014a2f:	c1 e1 04             	shl    ecx,0x4
c0014a32:	01 f1                	add    ecx,esi
c0014a34:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014a3c:	74 3e                	je     c0014a7c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014a3e:	42                   	inc    edx
c0014a3f:	83 fa 04             	cmp    edx,0x4
c0014a42:	75 f0                	jne    c0014a34 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014a44:	83 ec 0c             	sub    esp,0xc
c0014a47:	68 58 af 02 c0       	push   0xc002af58
c0014a4c:	e8 f4 5b 00 00       	call   c001a645 <Krnl::panic(char const*)>
c0014a51:	83 c4 10             	add    esp,0x10
c0014a54:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014a59:	5a                   	pop    edx
c0014a5a:	5b                   	pop    ebx
c0014a5b:	5e                   	pop    esi
c0014a5c:	c3                   	ret    
c0014a5d:	83 ec 0c             	sub    esp,0xc
c0014a60:	56                   	push   esi
c0014a61:	e8 ba fb ff ff       	call   c0014620 <Device::getName()>
c0014a66:	83 c4 10             	add    esp,0x10
c0014a69:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014a6c:	75 ba                	jne    c0014a28 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a6e:	83 fb 0f             	cmp    ebx,0xf
c0014a71:	7f 29                	jg     c0014a9c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014a73:	0f b6 9b 20 d8 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd27e0]
c0014a7a:	eb ac                	jmp    c0014a28 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a7c:	8d 04 82             	lea    eax,[edx+eax*4]
c0014a7f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014a83:	8d 04 86             	lea    eax,[esi+eax*4]
c0014a86:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014a8c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014a90:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014a96:	89 d8                	mov    eax,ebx
c0014a98:	5a                   	pop    edx
c0014a99:	5b                   	pop    ebx
c0014a9a:	5e                   	pop    esi
c0014a9b:	c3                   	ret    
c0014a9c:	83 ec 0c             	sub    esp,0xc
c0014a9f:	68 20 af 02 c0       	push   0xc002af20
c0014aa4:	e8 9c 5b 00 00       	call   c001a645 <Krnl::panic(char const*)>
c0014aa9:	83 c4 10             	add    esp,0x10
c0014aac:	e9 77 ff ff ff       	jmp    c0014a28 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014ab1:	90                   	nop

c0014ab2 <InterruptController::clearAllHandlers(int, bool)>:
c0014ab2:	56                   	push   esi
c0014ab3:	53                   	push   ebx
c0014ab4:	52                   	push   edx
c0014ab5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014ab9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014abd:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014ac2:	75 61                	jne    c0014b25 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014ac4:	8d 46 20             	lea    eax,[esi+0x20]
c0014ac7:	c1 e6 04             	shl    esi,0x4
c0014aca:	c1 e0 04             	shl    eax,0x4
c0014acd:	01 de                	add    esi,ebx
c0014acf:	01 d8                	add    eax,ebx
c0014ad1:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014adb:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014ae5:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014aef:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014af9:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014b03:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014b0d:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014b17:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014b21:	58                   	pop    eax
c0014b22:	5b                   	pop    ebx
c0014b23:	5e                   	pop    esi
c0014b24:	c3                   	ret    
c0014b25:	83 ec 0c             	sub    esp,0xc
c0014b28:	53                   	push   ebx
c0014b29:	e8 f2 fa ff ff       	call   c0014620 <Device::getName()>
c0014b2e:	83 c4 10             	add    esp,0x10
c0014b31:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b34:	75 8e                	jne    c0014ac4 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b36:	83 fe 0f             	cmp    esi,0xf
c0014b39:	7f 09                	jg     c0014b44 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014b3b:	0f b6 b6 20 d8 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd27e0]
c0014b42:	eb 80                	jmp    c0014ac4 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b44:	83 ec 0c             	sub    esp,0xc
c0014b47:	68 94 af 02 c0       	push   0xc002af94
c0014b4c:	e8 f4 5a 00 00       	call   c001a645 <Krnl::panic(char const*)>
c0014b51:	83 c4 10             	add    esp,0x10
c0014b54:	e9 6b ff ff ff       	jmp    c0014ac4 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b59:	90                   	nop

c0014b5a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014b5a:	56                   	push   esi
c0014b5b:	53                   	push   ebx
c0014b5c:	52                   	push   edx
c0014b5d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014b61:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014b65:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014b6a:	75 3a                	jne    c0014ba6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014b6c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b70:	8d 50 20             	lea    edx,[eax+0x20]
c0014b73:	c1 e2 04             	shl    edx,0x4
c0014b76:	8d 04 16             	lea    eax,[esi+edx*1]
c0014b79:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014b7d:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014b83:	74 0b                	je     c0014b90 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014b85:	83 c0 04             	add    eax,0x4
c0014b88:	39 d0                	cmp    eax,edx
c0014b8a:	75 f1                	jne    c0014b7d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014b8c:	58                   	pop    eax
c0014b8d:	5b                   	pop    ebx
c0014b8e:	5e                   	pop    esi
c0014b8f:	c3                   	ret    
c0014b90:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014b9a:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014ba4:	eb df                	jmp    c0014b85 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014ba6:	83 ec 0c             	sub    esp,0xc
c0014ba9:	56                   	push   esi
c0014baa:	e8 71 fa ff ff       	call   c0014620 <Device::getName()>
c0014baf:	83 c4 10             	add    esp,0x10
c0014bb2:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014bb5:	75 b5                	jne    c0014b6c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014bb7:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014bbc:	7f 11                	jg     c0014bcf <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014bbe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014bc2:	0f b6 80 20 d8 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd27e0]
c0014bc9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014bcd:	eb 9d                	jmp    c0014b6c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014bcf:	83 ec 0c             	sub    esp,0xc
c0014bd2:	68 94 af 02 c0       	push   0xc002af94
c0014bd7:	e8 69 5a 00 00       	call   c001a645 <Krnl::panic(char const*)>
c0014bdc:	83 c4 10             	add    esp,0x10
c0014bdf:	eb 8b                	jmp    c0014b6c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014be1 <nmiHandler(regs*, void*)>:
c0014be1:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0014be6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014bea:	e9 a5 a3 ff ff       	jmp    c000ef94 <Computer::handleNMI()>

c0014bef <int_handler>:
c0014bef:	55                   	push   ebp
c0014bf0:	57                   	push   edi
c0014bf1:	56                   	push   esi
c0014bf2:	53                   	push   ebx
c0014bf3:	83 ec 0c             	sub    esp,0xc
c0014bf6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014bfa:	80 3d 24 11 03 c0 00 	cmp    BYTE PTR ds:0xc0031124,0x0
c0014c01:	74 0b                	je     c0014c0e <int_handler+0x1f>
c0014c03:	fa                   	cli    
c0014c04:	f4                   	hlt    
c0014c05:	80 3d 24 11 03 c0 00 	cmp    BYTE PTR ds:0xc0031124,0x0
c0014c0c:	75 f5                	jne    c0014c03 <int_handler+0x14>
c0014c0e:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0014c13:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014c16:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014c1c:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014c22:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014c25:	83 f8 17             	cmp    eax,0x17
c0014c28:	77 13                	ja     c0014c3d <int_handler+0x4e>
c0014c2a:	83 ec 08             	sub    esp,0x8
c0014c2d:	8b 17                	mov    edx,DWORD PTR [edi]
c0014c2f:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014c32:	0f b6 c0             	movzx  eax,al
c0014c35:	50                   	push   eax
c0014c36:	57                   	push   edi
c0014c37:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014c3a:	83 c4 10             	add    esp,0x10
c0014c3d:	83 c3 15             	add    ebx,0x15
c0014c40:	c1 e3 04             	shl    ebx,0x4
c0014c43:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014c47:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014c4e:	31 db                	xor    ebx,ebx
c0014c50:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014c54:	85 c0                	test   eax,eax
c0014c56:	74 13                	je     c0014c6b <int_handler+0x7c>
c0014c58:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014c5b:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014c5f:	74 1c                	je     c0014c7d <int_handler+0x8e>
c0014c61:	83 ec 08             	sub    esp,0x8
c0014c64:	52                   	push   edx
c0014c65:	56                   	push   esi
c0014c66:	ff d0                	call   eax
c0014c68:	83 c4 10             	add    esp,0x10
c0014c6b:	43                   	inc    ebx
c0014c6c:	83 fb 04             	cmp    ebx,0x4
c0014c6f:	75 df                	jne    c0014c50 <int_handler+0x61>
c0014c71:	83 c4 0c             	add    esp,0xc
c0014c74:	31 c0                	xor    eax,eax
c0014c76:	5b                   	pop    ebx
c0014c77:	31 d2                	xor    edx,edx
c0014c79:	5e                   	pop    esi
c0014c7a:	5f                   	pop    edi
c0014c7b:	5d                   	pop    ebp
c0014c7c:	c3                   	ret    
c0014c7d:	83 ec 08             	sub    esp,0x8
c0014c80:	52                   	push   edx
c0014c81:	56                   	push   esi
c0014c82:	ff d0                	call   eax
c0014c84:	83 c4 10             	add    esp,0x10
c0014c87:	83 c4 0c             	add    esp,0xc
c0014c8a:	5b                   	pop    ebx
c0014c8b:	5e                   	pop    esi
c0014c8c:	5f                   	pop    edi
c0014c8d:	5d                   	pop    ebp
c0014c8e:	c3                   	ret    
c0014c8f:	90                   	nop

c0014c90 <InterruptController::InterruptController(char const*)>:
c0014c90:	83 ec 1c             	sub    esp,0x1c
c0014c93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c97:	83 ec 08             	sub    esp,0x8
c0014c9a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014c9e:	50                   	push   eax
c0014c9f:	e8 80 f8 ff ff       	call   c0014524 <Device::Device(char const*)>
c0014ca4:	83 c4 10             	add    esp,0x10
c0014ca7:	ba 54 b2 02 c0       	mov    edx,0xc002b254
c0014cac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cb0:	89 10                	mov    DWORD PTR [eax],edx
c0014cb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cb6:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014cc0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014cc8:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014cd0:	7f 5e                	jg     c0014d30 <InterruptController::InterruptController(char const*)+0xa0>
c0014cd2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014cda:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014cdf:	7f 49                	jg     c0014d2a <InterruptController::InterruptController(char const*)+0x9a>
c0014ce1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ce5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014ce9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014cf0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014cf4:	01 ca                	add    edx,ecx
c0014cf6:	83 c2 54             	add    edx,0x54
c0014cf9:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014d01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d05:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014d09:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014d10:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d14:	01 ca                	add    edx,ecx
c0014d16:	81 c2 54 04 00 00    	add    edx,0x454
c0014d1c:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014d24:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014d28:	eb b0                	jmp    c0014cda <InterruptController::InterruptController(char const*)+0x4a>
c0014d2a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014d2e:	eb 98                	jmp    c0014cc8 <InterruptController::InterruptController(char const*)+0x38>
c0014d30:	90                   	nop
c0014d31:	83 c4 1c             	add    esp,0x1c
c0014d34:	c3                   	ret    
c0014d35:	90                   	nop

c0014d36 <InterruptController::~InterruptController()>:
c0014d36:	83 ec 0c             	sub    esp,0xc
c0014d39:	ba 54 b2 02 c0       	mov    edx,0xc002b254
c0014d3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d42:	89 10                	mov    DWORD PTR [eax],edx
c0014d44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d48:	83 ec 0c             	sub    esp,0xc
c0014d4b:	50                   	push   eax
c0014d4c:	e8 b5 f4 ff ff       	call   c0014206 <Device::~Device()>
c0014d51:	83 c4 10             	add    esp,0x10
c0014d54:	90                   	nop
c0014d55:	83 c4 0c             	add    esp,0xc
c0014d58:	c3                   	ret    
c0014d59:	90                   	nop

c0014d5a <InterruptController::~InterruptController()>:
c0014d5a:	83 ec 0c             	sub    esp,0xc
c0014d5d:	83 ec 0c             	sub    esp,0xc
c0014d60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d64:	e8 cd ff ff ff       	call   c0014d36 <InterruptController::~InterruptController()>
c0014d69:	83 c4 10             	add    esp,0x10
c0014d6c:	83 ec 08             	sub    esp,0x8
c0014d6f:	68 58 21 00 00       	push   0x2158
c0014d74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d78:	e8 aa e0 ff ff       	call   c0012e27 <operator delete(void*, unsigned long)>
c0014d7d:	83 c4 10             	add    esp,0x10
c0014d80:	83 c4 0c             	add    esp,0xc
c0014d83:	c3                   	ret    

c0014d84 <displayDebugInfo(regs*)>:
c0014d84:	55                   	push   ebp
c0014d85:	57                   	push   edi
c0014d86:	56                   	push   esi
c0014d87:	53                   	push   ebx
c0014d88:	83 ec 24             	sub    esp,0x24
c0014d8b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014d8f:	0f 20 c2             	mov    edx,cr0
c0014d92:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014d96:	0f 20 d7             	mov    edi,cr2
c0014d99:	0f 20 de             	mov    esi,cr3
c0014d9c:	0f 20 e5             	mov    ebp,cr4
c0014d9f:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014da2:	68 ce af 02 c0       	push   0xc002afce
c0014da7:	e8 5b e1 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0014dac:	59                   	pop    ecx
c0014dad:	58                   	pop    eax
c0014dae:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014db1:	68 d9 af 02 c0       	push   0xc002afd9
c0014db6:	e8 4c e1 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0014dbb:	58                   	pop    eax
c0014dbc:	5a                   	pop    edx
c0014dbd:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014dc0:	68 e4 af 02 c0       	push   0xc002afe4
c0014dc5:	e8 3d e1 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0014dca:	59                   	pop    ecx
c0014dcb:	58                   	pop    eax
c0014dcc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014dcf:	68 ef af 02 c0       	push   0xc002afef
c0014dd4:	e8 2e e1 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0014dd9:	58                   	pop    eax
c0014dda:	5a                   	pop    edx
c0014ddb:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014dde:	68 fa af 02 c0       	push   0xc002affa
c0014de3:	e8 1f e1 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0014de8:	59                   	pop    ecx
c0014de9:	58                   	pop    eax
c0014dea:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014ded:	68 05 b0 02 c0       	push   0xc002b005
c0014df2:	e8 10 e1 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0014df7:	58                   	pop    eax
c0014df8:	5a                   	pop    edx
c0014df9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014dfc:	68 10 b0 02 c0       	push   0xc002b010
c0014e01:	e8 01 e1 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0014e06:	59                   	pop    ecx
c0014e07:	58                   	pop    eax
c0014e08:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014e0b:	68 1b b0 02 c0       	push   0xc002b01b
c0014e10:	e8 f2 e0 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0014e15:	58                   	pop    eax
c0014e16:	5a                   	pop    edx
c0014e17:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014e1a:	68 26 b0 02 c0       	push   0xc002b026
c0014e1f:	e8 e3 e0 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0014e24:	59                   	pop    ecx
c0014e25:	58                   	pop    eax
c0014e26:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014e29:	68 35 b0 02 c0       	push   0xc002b035
c0014e2e:	e8 d4 e0 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0014e33:	58                   	pop    eax
c0014e34:	5a                   	pop    edx
c0014e35:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014e38:	68 40 b0 02 c0       	push   0xc002b040
c0014e3d:	e8 c5 e0 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0014e42:	59                   	pop    ecx
c0014e43:	58                   	pop    eax
c0014e44:	57                   	push   edi
c0014e45:	68 4b b0 02 c0       	push   0xc002b04b
c0014e4a:	e8 b8 e0 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0014e4f:	58                   	pop    eax
c0014e50:	5a                   	pop    edx
c0014e51:	56                   	push   esi
c0014e52:	68 56 b0 02 c0       	push   0xc002b056
c0014e57:	e8 ab e0 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0014e5c:	59                   	pop    ecx
c0014e5d:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014e62:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e68:	e8 90 be ff ff       	call   c0010cfd <setActiveTerminal(VgaText*)>
c0014e6d:	58                   	pop    eax
c0014e6e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014e71:	5a                   	pop    edx
c0014e72:	c1 e0 05             	shl    eax,0x5
c0014e75:	05 80 d5 02 c0       	add    eax,0xc002d580
c0014e7a:	50                   	push   eax
c0014e7b:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014e80:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e86:	e8 91 c2 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0014e8b:	59                   	pop    ecx
c0014e8c:	58                   	pop    eax
c0014e8d:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014e92:	68 61 b0 02 c0       	push   0xc002b061
c0014e97:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e9d:	e8 7a c2 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0014ea2:	58                   	pop    eax
c0014ea3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ea8:	5a                   	pop    edx
c0014ea9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014eac:	83 c0 0c             	add    eax,0xc
c0014eaf:	50                   	push   eax
c0014eb0:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014eb5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ebb:	e8 5c c2 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0014ec0:	59                   	pop    ecx
c0014ec1:	58                   	pop    eax
c0014ec2:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014ec7:	68 6a b0 02 c0       	push   0xc002b06a
c0014ecc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ed2:	e8 45 c2 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0014ed7:	58                   	pop    eax
c0014ed8:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014edd:	5a                   	pop    edx
c0014ede:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014ee1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ee7:	e8 56 c2 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c0014eec:	59                   	pop    ecx
c0014eed:	58                   	pop    eax
c0014eee:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014ef3:	68 72 b0 02 c0       	push   0xc002b072
c0014ef8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014efe:	e8 19 c2 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0014f03:	58                   	pop    eax
c0014f04:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014f09:	5a                   	pop    edx
c0014f0a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014f0d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f13:	e8 2a c2 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c0014f18:	59                   	pop    ecx
c0014f19:	58                   	pop    eax
c0014f1a:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014f1f:	68 7a b0 02 c0       	push   0xc002b07a
c0014f24:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f2a:	e8 ed c1 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0014f2f:	58                   	pop    eax
c0014f30:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014f35:	5a                   	pop    edx
c0014f36:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014f39:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f3f:	e8 fe c1 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c0014f44:	59                   	pop    ecx
c0014f45:	58                   	pop    eax
c0014f46:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014f4b:	68 82 b0 02 c0       	push   0xc002b082
c0014f50:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f56:	e8 c1 c1 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0014f5b:	58                   	pop    eax
c0014f5c:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014f61:	5a                   	pop    edx
c0014f62:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014f65:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f6b:	e8 d2 c1 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c0014f70:	59                   	pop    ecx
c0014f71:	58                   	pop    eax
c0014f72:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014f77:	68 8a b0 02 c0       	push   0xc002b08a
c0014f7c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f82:	e8 95 c1 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0014f87:	58                   	pop    eax
c0014f88:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014f8d:	5a                   	pop    edx
c0014f8e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014f91:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f97:	e8 a6 c1 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c0014f9c:	59                   	pop    ecx
c0014f9d:	58                   	pop    eax
c0014f9e:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014fa3:	68 92 b0 02 c0       	push   0xc002b092
c0014fa8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fae:	e8 69 c1 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0014fb3:	58                   	pop    eax
c0014fb4:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014fb9:	5a                   	pop    edx
c0014fba:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014fbd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fc3:	e8 7a c1 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c0014fc8:	59                   	pop    ecx
c0014fc9:	58                   	pop    eax
c0014fca:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014fcf:	68 9a b0 02 c0       	push   0xc002b09a
c0014fd4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fda:	e8 3d c1 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0014fdf:	58                   	pop    eax
c0014fe0:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014fe5:	5a                   	pop    edx
c0014fe6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014fea:	52                   	push   edx
c0014feb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ff1:	e8 4c c1 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c0014ff6:	59                   	pop    ecx
c0014ff7:	58                   	pop    eax
c0014ff8:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014ffd:	68 a3 b0 02 c0       	push   0xc002b0a3
c0015002:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015008:	e8 0f c1 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001500d:	58                   	pop    eax
c001500e:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0015013:	5a                   	pop    edx
c0015014:	57                   	push   edi
c0015015:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001501b:	e8 22 c1 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c0015020:	59                   	pop    ecx
c0015021:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0015026:	5f                   	pop    edi
c0015027:	68 ab b0 02 c0       	push   0xc002b0ab
c001502c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015032:	e8 e5 c0 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0015037:	58                   	pop    eax
c0015038:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001503d:	5a                   	pop    edx
c001503e:	56                   	push   esi
c001503f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015045:	e8 f8 c0 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c001504a:	59                   	pop    ecx
c001504b:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0015050:	5e                   	pop    esi
c0015051:	68 b3 b0 02 c0       	push   0xc002b0b3
c0015056:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001505c:	e8 bb c0 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0015061:	5f                   	pop    edi
c0015062:	58                   	pop    eax
c0015063:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0015068:	55                   	push   ebp
c0015069:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001506f:	e8 ce c0 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c0015074:	58                   	pop    eax
c0015075:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001507a:	5a                   	pop    edx
c001507b:	68 bb b0 02 c0       	push   0xc002b0bb
c0015080:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015086:	e8 91 c0 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001508b:	0f 21 c0             	mov    eax,db0
c001508e:	59                   	pop    ecx
c001508f:	5e                   	pop    esi
c0015090:	50                   	push   eax
c0015091:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0015096:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001509c:	e8 a1 c0 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c00150a1:	5f                   	pop    edi
c00150a2:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c00150a7:	5d                   	pop    ebp
c00150a8:	68 c4 b0 02 c0       	push   0xc002b0c4
c00150ad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150b3:	e8 64 c0 ff ff       	call   c001111c <VgaText::puts(char const*)>
c00150b8:	0f 21 c8             	mov    eax,db1
c00150bb:	5a                   	pop    edx
c00150bc:	59                   	pop    ecx
c00150bd:	50                   	push   eax
c00150be:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c00150c3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150c9:	e8 74 c0 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c00150ce:	5e                   	pop    esi
c00150cf:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c00150d4:	5f                   	pop    edi
c00150d5:	68 cc b0 02 c0       	push   0xc002b0cc
c00150da:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150e0:	e8 37 c0 ff ff       	call   c001111c <VgaText::puts(char const*)>
c00150e5:	0f 21 d0             	mov    eax,db2
c00150e8:	5d                   	pop    ebp
c00150e9:	5a                   	pop    edx
c00150ea:	50                   	push   eax
c00150eb:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c00150f0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150f6:	e8 47 c0 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c00150fb:	59                   	pop    ecx
c00150fc:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0015101:	5e                   	pop    esi
c0015102:	68 d4 b0 02 c0       	push   0xc002b0d4
c0015107:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001510d:	e8 0a c0 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0015112:	0f 21 d8             	mov    eax,db3
c0015115:	5f                   	pop    edi
c0015116:	5d                   	pop    ebp
c0015117:	50                   	push   eax
c0015118:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001511d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015123:	e8 1a c0 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c0015128:	58                   	pop    eax
c0015129:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001512e:	5a                   	pop    edx
c001512f:	68 dc b0 02 c0       	push   0xc002b0dc
c0015134:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001513a:	e8 dd bf ff ff       	call   c001111c <VgaText::puts(char const*)>
c001513f:	0f 21 f0             	mov    eax,db6
c0015142:	59                   	pop    ecx
c0015143:	5e                   	pop    esi
c0015144:	50                   	push   eax
c0015145:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001514a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015150:	e8 ed bf ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c0015155:	5f                   	pop    edi
c0015156:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001515b:	5d                   	pop    ebp
c001515c:	68 e4 b0 02 c0       	push   0xc002b0e4
c0015161:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015167:	e8 b0 bf ff ff       	call   c001111c <VgaText::puts(char const*)>
c001516c:	0f 21 f8             	mov    eax,db7
c001516f:	5a                   	pop    edx
c0015170:	59                   	pop    ecx
c0015171:	50                   	push   eax
c0015172:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0015177:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001517d:	e8 c0 bf ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c0015182:	5e                   	pop    esi
c0015183:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015186:	e8 9c 85 00 00       	call   c001d727 <Thr::getDriverNameFromAddress(unsigned long)>
c001518b:	83 c4 10             	add    esp,0x10
c001518e:	85 c0                	test   eax,eax
c0015190:	74 7d                	je     c001520f <displayDebugInfo(regs*)+0x48b>
c0015192:	89 c6                	mov    esi,eax
c0015194:	50                   	push   eax
c0015195:	50                   	push   eax
c0015196:	56                   	push   esi
c0015197:	68 ec b0 02 c0       	push   0xc002b0ec
c001519c:	e8 66 dd ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c00151a1:	5a                   	pop    edx
c00151a2:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c00151a7:	59                   	pop    ecx
c00151a8:	68 fa b0 02 c0       	push   0xc002b0fa
c00151ad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151b3:	e8 64 bf ff ff       	call   c001111c <VgaText::puts(char const*)>
c00151b8:	5f                   	pop    edi
c00151b9:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c00151be:	5d                   	pop    ebp
c00151bf:	56                   	push   esi
c00151c0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151c6:	e8 51 bf ff ff       	call   c001111c <VgaText::puts(char const*)>
c00151cb:	58                   	pop    eax
c00151cc:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c00151d1:	5a                   	pop    edx
c00151d2:	68 06 b1 02 c0       	push   0xc002b106
c00151d7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151dd:	e8 3a bf ff ff       	call   c001111c <VgaText::puts(char const*)>
c00151e2:	59                   	pop    ecx
c00151e3:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c00151e8:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c00151ee:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00151f1:	e8 68 85 00 00       	call   c001d75e <Thr::getDriverOffsetFromAddress(unsigned long)>
c00151f6:	5b                   	pop    ebx
c00151f7:	5d                   	pop    ebp
c00151f8:	50                   	push   eax
c00151f9:	57                   	push   edi
c00151fa:	e8 43 bf ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c00151ff:	58                   	pop    eax
c0015200:	5a                   	pop    edx
c0015201:	56                   	push   esi
c0015202:	68 12 b1 02 c0       	push   0xc002b112
c0015207:	e8 fb dc ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001520c:	83 c4 10             	add    esp,0x10
c001520f:	fa                   	cli    
c0015210:	f4                   	hlt    
c0015211:	eb fe                	jmp    c0015211 <displayDebugInfo(regs*)+0x48d>

c0015213 <x87EmulHandler(regs*, void*)>:
c0015213:	83 ec 0c             	sub    esp,0xc
c0015216:	0f 20 c2             	mov    edx,cr0
c0015219:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001521e:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0015222:	75 4b                	jne    c001526f <x87EmulHandler(regs*, void*)+0x5c>
c0015224:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0015229:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c001522f:	85 c0                	test   eax,eax
c0015231:	74 05                	je     c0015238 <x87EmulHandler(regs*, void*)+0x25>
c0015233:	83 e2 08             	and    edx,0x8
c0015236:	75 17                	jne    c001524f <x87EmulHandler(regs*, void*)+0x3c>
c0015238:	83 ec 0c             	sub    esp,0xc
c001523b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001523f:	e8 aa a8 00 00       	call   c001faee <Vm::x87Handler(regs*)>
c0015244:	83 c4 10             	add    esp,0x10
c0015247:	84 c0                	test   al,al
c0015249:	74 24                	je     c001526f <x87EmulHandler(regs*, void*)+0x5c>
c001524b:	83 c4 0c             	add    esp,0xc
c001524e:	c3                   	ret    
c001524f:	83 ec 0c             	sub    esp,0xc
c0015252:	68 38 b1 02 c0       	push   0xc002b138
c0015257:	e8 ab dc ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001525c:	0f 06                	clts   
c001525e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015263:	83 c4 10             	add    esp,0x10
c0015266:	a3 68 e7 02 c0       	mov    ds:0xc002e768,eax
c001526b:	83 c4 0c             	add    esp,0xc
c001526e:	c3                   	ret    
c001526f:	83 ec 0c             	sub    esp,0xc
c0015272:	68 22 b1 02 c0       	push   0xc002b122
c0015277:	e8 8b dc ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001527c:	5a                   	pop    edx
c001527d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015281:	e8 fe fa ff ff       	call   c0014d84 <displayDebugInfo(regs*)>

c0015286 <gpFault(regs*, void*)>:
c0015286:	53                   	push   ebx
c0015287:	83 ec 14             	sub    esp,0x14
c001528a:	c7 05 64 e7 02 c0 6b ee 01 c0 	mov    DWORD PTR ds:0xc002e764,0xc001ee6b
c0015294:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015298:	53                   	push   ebx
c0015299:	e8 cd 9b 00 00       	call   c001ee6b <Vm::faultHandler(regs*)>
c001529e:	83 c4 10             	add    esp,0x10
c00152a1:	84 c0                	test   al,al
c00152a3:	74 05                	je     c00152aa <gpFault(regs*, void*)+0x24>
c00152a5:	83 c4 08             	add    esp,0x8
c00152a8:	5b                   	pop    ebx
c00152a9:	c3                   	ret    
c00152aa:	83 ec 0c             	sub    esp,0xc
c00152ad:	68 45 b1 02 c0       	push   0xc002b145
c00152b2:	e8 50 dc ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c00152b7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00152ba:	e8 c5 fa ff ff       	call   c0014d84 <displayDebugInfo(regs*)>

c00152bf <pgFault(regs*, void*)>:
c00152bf:	83 ec 14             	sub    esp,0x14
c00152c2:	0f 20 d0             	mov    eax,cr2
c00152c5:	50                   	push   eax
c00152c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152cb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00152ce:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00152d4:	e8 57 d8 ff ff       	call   c0012b30 <VAS::tryLoadBackOffDisk(unsigned long)>
c00152d9:	83 c4 10             	add    esp,0x10
c00152dc:	84 c0                	test   al,al
c00152de:	74 04                	je     c00152e4 <pgFault(regs*, void*)+0x25>
c00152e0:	83 c4 0c             	add    esp,0xc
c00152e3:	c3                   	ret    
c00152e4:	83 ec 0c             	sub    esp,0xc
c00152e7:	68 60 b1 02 c0       	push   0xc002b160
c00152ec:	e8 16 dc ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c00152f1:	58                   	pop    eax
c00152f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00152f6:	e8 89 fa ff ff       	call   c0014d84 <displayDebugInfo(regs*)>

c00152fb <otherISRHandler(regs*, void*)>:
c00152fb:	53                   	push   ebx
c00152fc:	83 ec 0c             	sub    esp,0xc
c00152ff:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015303:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0015306:	50                   	push   eax
c0015307:	50                   	push   eax
c0015308:	68 6d b1 02 c0       	push   0xc002b16d
c001530d:	e8 f5 db ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0015312:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015315:	e8 6a fa ff ff       	call   c0014d84 <displayDebugInfo(regs*)>

c001531a <opcodeFault(regs*, void*)>:
c001531a:	55                   	push   ebp
c001531b:	89 e5                	mov    ebp,esp
c001531d:	56                   	push   esi
c001531e:	53                   	push   ebx
c001531f:	83 ec 40             	sub    esp,0x40
c0015322:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0015327:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001532d:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0015333:	84 c0                	test   al,al
c0015335:	74 24                	je     c001535b <opcodeFault(regs*, void*)+0x41>
c0015337:	83 ec 0c             	sub    esp,0xc
c001533a:	68 8c b1 02 c0       	push   0xc002b18c
c001533f:	e8 c3 db ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0015344:	83 c4 10             	add    esp,0x10
c0015347:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001534a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001534d:	8d 50 19             	lea    edx,[eax+0x19]
c0015350:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015353:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015356:	e9 be 05 00 00       	jmp    c0015919 <opcodeFault(regs*, void*)+0x5ff>
c001535b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001535e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015361:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015364:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0015368:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c001536c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001536f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015372:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0015375:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015378:	8a 00                	mov    al,BYTE PTR [eax]
c001537a:	3c f0                	cmp    al,0xf0
c001537c:	75 17                	jne    c0015395 <opcodeFault(regs*, void*)+0x7b>
c001537e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015381:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015384:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015387:	8d 50 01             	lea    edx,[eax+0x1]
c001538a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001538d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015390:	e9 da 00 00 00       	jmp    c001546f <opcodeFault(regs*, void*)+0x155>
c0015395:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015398:	8a 00                	mov    al,BYTE PTR [eax]
c001539a:	3c f2                	cmp    al,0xf2
c001539c:	74 09                	je     c00153a7 <opcodeFault(regs*, void*)+0x8d>
c001539e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153a1:	8a 00                	mov    al,BYTE PTR [eax]
c00153a3:	3c f3                	cmp    al,0xf3
c00153a5:	75 1b                	jne    c00153c2 <opcodeFault(regs*, void*)+0xa8>
c00153a7:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153ab:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153b1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153b4:	8d 50 01             	lea    edx,[eax+0x1]
c00153b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ba:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153bd:	e9 ad 00 00 00       	jmp    c001546f <opcodeFault(regs*, void*)+0x155>
c00153c2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153c5:	8a 00                	mov    al,BYTE PTR [eax]
c00153c7:	3c 66                	cmp    al,0x66
c00153c9:	75 1f                	jne    c00153ea <opcodeFault(regs*, void*)+0xd0>
c00153cb:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153cf:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c00153d3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153d9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153dc:	8d 50 01             	lea    edx,[eax+0x1]
c00153df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153e2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153e5:	e9 85 00 00 00       	jmp    c001546f <opcodeFault(regs*, void*)+0x155>
c00153ea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153ed:	8a 00                	mov    al,BYTE PTR [eax]
c00153ef:	3c 67                	cmp    al,0x67
c00153f1:	75 18                	jne    c001540b <opcodeFault(regs*, void*)+0xf1>
c00153f3:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153f7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153fd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015400:	8d 50 01             	lea    edx,[eax+0x1]
c0015403:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015406:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015409:	eb 64                	jmp    c001546f <opcodeFault(regs*, void*)+0x155>
c001540b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001540e:	8a 00                	mov    al,BYTE PTR [eax]
c0015410:	3c 2e                	cmp    al,0x2e
c0015412:	74 09                	je     c001541d <opcodeFault(regs*, void*)+0x103>
c0015414:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015417:	8a 00                	mov    al,BYTE PTR [eax]
c0015419:	3c 3e                	cmp    al,0x3e
c001541b:	75 18                	jne    c0015435 <opcodeFault(regs*, void*)+0x11b>
c001541d:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015421:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015424:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015427:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001542a:	8d 50 01             	lea    edx,[eax+0x1]
c001542d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015430:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015433:	eb 3a                	jmp    c001546f <opcodeFault(regs*, void*)+0x155>
c0015435:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015438:	8a 00                	mov    al,BYTE PTR [eax]
c001543a:	3c 36                	cmp    al,0x36
c001543c:	74 1b                	je     c0015459 <opcodeFault(regs*, void*)+0x13f>
c001543e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015441:	8a 00                	mov    al,BYTE PTR [eax]
c0015443:	3c 26                	cmp    al,0x26
c0015445:	74 12                	je     c0015459 <opcodeFault(regs*, void*)+0x13f>
c0015447:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001544a:	8a 00                	mov    al,BYTE PTR [eax]
c001544c:	3c 64                	cmp    al,0x64
c001544e:	74 09                	je     c0015459 <opcodeFault(regs*, void*)+0x13f>
c0015450:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015453:	8a 00                	mov    al,BYTE PTR [eax]
c0015455:	3c 65                	cmp    al,0x65
c0015457:	75 16                	jne    c001546f <opcodeFault(regs*, void*)+0x155>
c0015459:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001545d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015460:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015463:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015466:	8d 50 01             	lea    edx,[eax+0x1]
c0015469:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001546c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001546f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015472:	8a 00                	mov    al,BYTE PTR [eax]
c0015474:	3c 0f                	cmp    al,0xf
c0015476:	0f 85 ad 00 00 00    	jne    c0015529 <opcodeFault(regs*, void*)+0x20f>
c001547c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001547f:	40                   	inc    eax
c0015480:	8a 00                	mov    al,BYTE PTR [eax]
c0015482:	3c c2                	cmp    al,0xc2
c0015484:	74 0e                	je     c0015494 <opcodeFault(regs*, void*)+0x17a>
c0015486:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015489:	40                   	inc    eax
c001548a:	8a 00                	mov    al,BYTE PTR [eax]
c001548c:	3c c3                	cmp    al,0xc3
c001548e:	0f 85 95 00 00 00    	jne    c0015529 <opcodeFault(regs*, void*)+0x20f>
c0015494:	83 ec 0c             	sub    esp,0xc
c0015497:	68 af b1 02 c0       	push   0xc002b1af
c001549c:	e8 66 da ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c00154a1:	83 c4 10             	add    esp,0x10
c00154a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154a7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154aa:	8d 50 01             	lea    edx,[eax+0x1]
c00154ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154b0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154b3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00154b6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154b9:	8a 00                	mov    al,BYTE PTR [eax]
c00154bb:	8d 50 fe             	lea    edx,[eax-0x2]
c00154be:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154c1:	88 10                	mov    BYTE PTR [eax],dl
c00154c3:	8d 45 c2             	lea    eax,[ebp-0x3e]
c00154c6:	50                   	push   eax
c00154c7:	8d 45 c3             	lea    eax,[ebp-0x3d]
c00154ca:	50                   	push   eax
c00154cb:	8d 45 c4             	lea    eax,[ebp-0x3c]
c00154ce:	50                   	push   eax
c00154cf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00154d2:	e8 35 48 00 00       	call   c0019d0c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00154d7:	83 c4 10             	add    esp,0x10
c00154da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154dd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154e0:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00154e3:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c00154e6:	01 d0                	add    eax,edx
c00154e8:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00154eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154ee:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154f1:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00154f4:	48                   	dec    eax
c00154f5:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00154f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154fb:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00154fe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015501:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015504:	83 ec 04             	sub    esp,0x4
c0015507:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001550a:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001550d:	50                   	push   eax
c001550e:	e8 a1 ac fe ff       	call   c00001b4 <voodooXADD>
c0015513:	83 c4 10             	add    esp,0x10
c0015516:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0015519:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001551c:	01 c2                	add    edx,eax
c001551e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015521:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015524:	e9 f0 03 00 00       	jmp    c0015919 <opcodeFault(regs*, void*)+0x5ff>
c0015529:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001552c:	8a 00                	mov    al,BYTE PTR [eax]
c001552e:	3c 0f                	cmp    al,0xf
c0015530:	0f 85 8b 01 00 00    	jne    c00156c1 <opcodeFault(regs*, void*)+0x3a7>
c0015536:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015539:	40                   	inc    eax
c001553a:	8a 00                	mov    al,BYTE PTR [eax]
c001553c:	3c c7                	cmp    al,0xc7
c001553e:	0f 86 7d 01 00 00    	jbe    c00156c1 <opcodeFault(regs*, void*)+0x3a7>
c0015544:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015547:	40                   	inc    eax
c0015548:	8a 00                	mov    al,BYTE PTR [eax]
c001554a:	3c cf                	cmp    al,0xcf
c001554c:	0f 87 6f 01 00 00    	ja     c00156c1 <opcodeFault(regs*, void*)+0x3a7>
c0015552:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015555:	40                   	inc    eax
c0015556:	8a 00                	mov    al,BYTE PTR [eax]
c0015558:	83 c0 38             	add    eax,0x38
c001555b:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001555e:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015562:	75 0b                	jne    c001556f <opcodeFault(regs*, void*)+0x255>
c0015564:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015567:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001556a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001556d:	eb 75                	jmp    c00155e4 <opcodeFault(regs*, void*)+0x2ca>
c001556f:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015573:	75 0b                	jne    c0015580 <opcodeFault(regs*, void*)+0x266>
c0015575:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015578:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001557b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001557e:	eb 64                	jmp    c00155e4 <opcodeFault(regs*, void*)+0x2ca>
c0015580:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015584:	75 0b                	jne    c0015591 <opcodeFault(regs*, void*)+0x277>
c0015586:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015589:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001558c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001558f:	eb 53                	jmp    c00155e4 <opcodeFault(regs*, void*)+0x2ca>
c0015591:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015595:	75 0b                	jne    c00155a2 <opcodeFault(regs*, void*)+0x288>
c0015597:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001559a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001559d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155a0:	eb 42                	jmp    c00155e4 <opcodeFault(regs*, void*)+0x2ca>
c00155a2:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00155a6:	75 0b                	jne    c00155b3 <opcodeFault(regs*, void*)+0x299>
c00155a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155ab:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00155ae:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155b1:	eb 31                	jmp    c00155e4 <opcodeFault(regs*, void*)+0x2ca>
c00155b3:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00155b7:	75 0b                	jne    c00155c4 <opcodeFault(regs*, void*)+0x2aa>
c00155b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155bc:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00155bf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155c2:	eb 20                	jmp    c00155e4 <opcodeFault(regs*, void*)+0x2ca>
c00155c4:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00155c8:	75 0b                	jne    c00155d5 <opcodeFault(regs*, void*)+0x2bb>
c00155ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155cd:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00155d0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155d3:	eb 0f                	jmp    c00155e4 <opcodeFault(regs*, void*)+0x2ca>
c00155d5:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00155d9:	75 09                	jne    c00155e4 <opcodeFault(regs*, void*)+0x2ca>
c00155db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155de:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00155e1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155e4:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c00155e8:	74 10                	je     c00155fa <opcodeFault(regs*, void*)+0x2e0>
c00155ea:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c00155f1:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c00155f8:	eb 2d                	jmp    c0015627 <opcodeFault(regs*, void*)+0x30d>
c00155fa:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00155fd:	c1 e0 18             	shl    eax,0x18
c0015600:	89 c2                	mov    edx,eax
c0015602:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015605:	c1 e0 08             	shl    eax,0x8
c0015608:	25 00 00 ff 00       	and    eax,0xff0000
c001560d:	09 c2                	or     edx,eax
c001560f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015612:	c1 e8 08             	shr    eax,0x8
c0015615:	25 00 ff 00 00       	and    eax,0xff00
c001561a:	09 c2                	or     edx,eax
c001561c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001561f:	c1 e8 18             	shr    eax,0x18
c0015622:	09 d0                	or     eax,edx
c0015624:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015627:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001562b:	75 0b                	jne    c0015638 <opcodeFault(regs*, void*)+0x31e>
c001562d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015630:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015633:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015636:	eb 75                	jmp    c00156ad <opcodeFault(regs*, void*)+0x393>
c0015638:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001563c:	75 0b                	jne    c0015649 <opcodeFault(regs*, void*)+0x32f>
c001563e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015641:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015644:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015647:	eb 64                	jmp    c00156ad <opcodeFault(regs*, void*)+0x393>
c0015649:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001564d:	75 0b                	jne    c001565a <opcodeFault(regs*, void*)+0x340>
c001564f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015652:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015655:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015658:	eb 53                	jmp    c00156ad <opcodeFault(regs*, void*)+0x393>
c001565a:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001565e:	75 0b                	jne    c001566b <opcodeFault(regs*, void*)+0x351>
c0015660:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015663:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015666:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0015669:	eb 42                	jmp    c00156ad <opcodeFault(regs*, void*)+0x393>
c001566b:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001566f:	75 0b                	jne    c001567c <opcodeFault(regs*, void*)+0x362>
c0015671:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015674:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015677:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c001567a:	eb 31                	jmp    c00156ad <opcodeFault(regs*, void*)+0x393>
c001567c:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015680:	75 0b                	jne    c001568d <opcodeFault(regs*, void*)+0x373>
c0015682:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015685:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015688:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001568b:	eb 20                	jmp    c00156ad <opcodeFault(regs*, void*)+0x393>
c001568d:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015691:	75 0b                	jne    c001569e <opcodeFault(regs*, void*)+0x384>
c0015693:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015696:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015699:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001569c:	eb 0f                	jmp    c00156ad <opcodeFault(regs*, void*)+0x393>
c001569e:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00156a2:	75 09                	jne    c00156ad <opcodeFault(regs*, void*)+0x393>
c00156a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156a7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156aa:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00156ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156b0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00156b3:	8d 50 02             	lea    edx,[eax+0x2]
c00156b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156b9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00156bc:	e9 58 02 00 00       	jmp    c0015919 <opcodeFault(regs*, void*)+0x5ff>
c00156c1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156c4:	8a 00                	mov    al,BYTE PTR [eax]
c00156c6:	3c 0f                	cmp    al,0xf
c00156c8:	0f 85 76 01 00 00    	jne    c0015844 <opcodeFault(regs*, void*)+0x52a>
c00156ce:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156d1:	40                   	inc    eax
c00156d2:	8a 00                	mov    al,BYTE PTR [eax]
c00156d4:	3c c7                	cmp    al,0xc7
c00156d6:	0f 85 68 01 00 00    	jne    c0015844 <opcodeFault(regs*, void*)+0x52a>
c00156dc:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00156df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156e2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00156e5:	8d 50 01             	lea    edx,[eax+0x1]
c00156e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156eb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00156ee:	8d 45 ba             	lea    eax,[ebp-0x46]
c00156f1:	50                   	push   eax
c00156f2:	8d 45 bb             	lea    eax,[ebp-0x45]
c00156f5:	50                   	push   eax
c00156f6:	8d 45 bc             	lea    eax,[ebp-0x44]
c00156f9:	50                   	push   eax
c00156fa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00156fd:	e8 0a 46 00 00       	call   c0019d0c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015702:	83 c4 10             	add    esp,0x10
c0015705:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0015708:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c001570b:	83 f0 01             	xor    eax,0x1
c001570e:	84 c0                	test   al,al
c0015710:	0f 84 2e 01 00 00    	je     c0015844 <opcodeFault(regs*, void*)+0x52a>
c0015716:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0015719:	3c 01                	cmp    al,0x1
c001571b:	0f 85 23 01 00 00    	jne    c0015844 <opcodeFault(regs*, void*)+0x52a>
c0015721:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0015724:	83 f0 01             	xor    eax,0x1
c0015727:	84 c0                	test   al,al
c0015729:	0f 84 15 01 00 00    	je     c0015844 <opcodeFault(regs*, void*)+0x52a>
c001572f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015732:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015735:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015738:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c001573f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015742:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015745:	89 c2                	mov    edx,eax
c0015747:	b8 00 00 00 00       	mov    eax,0x0
c001574c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001574f:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015752:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015755:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015758:	ba 00 00 00 00       	mov    edx,0x0
c001575d:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0015760:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0015763:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015766:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015769:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001576c:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0015773:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015776:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015779:	89 c2                	mov    edx,eax
c001577b:	b8 00 00 00 00       	mov    eax,0x0
c0015780:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015783:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015786:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015789:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001578c:	ba 00 00 00 00       	mov    edx,0x0
c0015791:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0015794:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015797:	e8 84 86 00 00       	call   c001de20 <lockScheduler()>
c001579c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001579f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00157a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00157a4:	89 c1                	mov    ecx,eax
c00157a6:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00157a9:	89 cb                	mov    ebx,ecx
c00157ab:	89 d0                	mov    eax,edx
c00157ad:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00157b0:	89 c6                	mov    esi,eax
c00157b2:	89 f0                	mov    eax,esi
c00157b4:	09 d8                	or     eax,ebx
c00157b6:	85 c0                	test   eax,eax
c00157b8:	75 21                	jne    c00157db <opcodeFault(regs*, void*)+0x4c1>
c00157ba:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00157bd:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00157c0:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00157c3:	89 01                	mov    DWORD PTR [ecx],eax
c00157c5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00157c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157cb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00157ce:	83 c8 40             	or     eax,0x40
c00157d1:	89 c2                	mov    edx,eax
c00157d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d6:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00157d9:	eb 3e                	jmp    c0015819 <opcodeFault(regs*, void*)+0x4ff>
c00157db:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00157de:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00157e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00157e3:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00157e6:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00157e9:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00157ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ef:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00157f2:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00157f5:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00157f8:	89 d0                	mov    eax,edx
c00157fa:	31 d2                	xor    edx,edx
c00157fc:	89 c3                	mov    ebx,eax
c00157fe:	89 d6                	mov    esi,edx
c0015800:	89 da                	mov    edx,ebx
c0015802:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015805:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015808:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001580b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001580e:	83 e0 bf             	and    eax,0xffffffbf
c0015811:	89 c2                	mov    edx,eax
c0015813:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015816:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015819:	e8 04 86 00 00       	call   c001de22 <unlockScheduler()>
c001581e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015821:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015824:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0015827:	01 c2                	add    edx,eax
c0015829:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001582c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001582f:	83 ec 0c             	sub    esp,0xc
c0015832:	68 be b1 02 c0       	push   0xc002b1be
c0015837:	e8 cb d6 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001583c:	83 c4 10             	add    esp,0x10
c001583f:	e9 d5 00 00 00       	jmp    c0015919 <opcodeFault(regs*, void*)+0x5ff>
c0015844:	83 ec 0c             	sub    esp,0xc
c0015847:	68 d1 b1 02 c0       	push   0xc002b1d1
c001584c:	e8 b6 d6 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0015851:	83 c4 10             	add    esp,0x10
c0015854:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015857:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001585a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001585d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015860:	c1 e0 04             	shl    eax,0x4
c0015863:	01 d0                	add    eax,edx
c0015865:	83 c0 03             	add    eax,0x3
c0015868:	8a 00                	mov    al,BYTE PTR [eax]
c001586a:	0f b6 d8             	movzx  ebx,al
c001586d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015870:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015873:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015876:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015879:	c1 e0 04             	shl    eax,0x4
c001587c:	01 d0                	add    eax,edx
c001587e:	83 c0 02             	add    eax,0x2
c0015881:	8a 00                	mov    al,BYTE PTR [eax]
c0015883:	0f b6 c8             	movzx  ecx,al
c0015886:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015889:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001588c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001588f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015892:	c1 e0 04             	shl    eax,0x4
c0015895:	01 d0                	add    eax,edx
c0015897:	40                   	inc    eax
c0015898:	8a 00                	mov    al,BYTE PTR [eax]
c001589a:	0f b6 d0             	movzx  edx,al
c001589d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158a0:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00158a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158a6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158a9:	c1 e0 04             	shl    eax,0x4
c00158ac:	01 f0                	add    eax,esi
c00158ae:	8a 00                	mov    al,BYTE PTR [eax]
c00158b0:	0f b6 c0             	movzx  eax,al
c00158b3:	83 ec 0c             	sub    esp,0xc
c00158b6:	53                   	push   ebx
c00158b7:	51                   	push   ecx
c00158b8:	52                   	push   edx
c00158b9:	50                   	push   eax
c00158ba:	68 e4 b1 02 c0       	push   0xc002b1e4
c00158bf:	e8 43 d6 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c00158c4:	83 c4 20             	add    esp,0x20
c00158c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ca:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158cd:	83 c0 03             	add    eax,0x3
c00158d0:	8a 00                	mov    al,BYTE PTR [eax]
c00158d2:	0f b6 d8             	movzx  ebx,al
c00158d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158d8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158db:	83 c0 02             	add    eax,0x2
c00158de:	8a 00                	mov    al,BYTE PTR [eax]
c00158e0:	0f b6 c8             	movzx  ecx,al
c00158e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158e6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158e9:	40                   	inc    eax
c00158ea:	8a 00                	mov    al,BYTE PTR [eax]
c00158ec:	0f b6 d0             	movzx  edx,al
c00158ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158f2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158f5:	8a 00                	mov    al,BYTE PTR [eax]
c00158f7:	0f b6 c0             	movzx  eax,al
c00158fa:	83 ec 0c             	sub    esp,0xc
c00158fd:	53                   	push   ebx
c00158fe:	51                   	push   ecx
c00158ff:	52                   	push   edx
c0015900:	50                   	push   eax
c0015901:	68 0c b2 02 c0       	push   0xc002b20c
c0015906:	e8 fc d5 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001590b:	83 c4 20             	add    esp,0x20
c001590e:	83 ec 0c             	sub    esp,0xc
c0015911:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015914:	e8 6b f4 ff ff       	call   c0014d84 <displayDebugInfo(regs*)>
c0015919:	8d 65 f8             	lea    esp,[ebp-0x8]
c001591c:	5b                   	pop    ebx
c001591d:	5e                   	pop    esi
c001591e:	5d                   	pop    ebp
c001591f:	c3                   	ret    

c0015920 <displayProgramFault(char const*)>:
c0015920:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015925:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015928:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001592e:	85 c0                	test   eax,eax
c0015930:	74 15                	je     c0015947 <displayProgramFault(char const*)+0x27>
c0015932:	83 ec 0c             	sub    esp,0xc
c0015935:	6a 04                	push   0x4
c0015937:	6a 0f                	push   0xf
c0015939:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001593d:	50                   	push   eax
c001593e:	e8 9b b4 ff ff       	call   c0010dde <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015943:	83 c4 1c             	add    esp,0x1c
c0015946:	c3                   	ret    
c0015947:	c3                   	ret    

c0015948 <setupInterruptController()>:
c0015948:	55                   	push   ebp
c0015949:	89 e5                	mov    ebp,esp
c001594b:	53                   	push   ebx
c001594c:	83 ec 24             	sub    esp,0x24
c001594f:	b8 00 00 00 00       	mov    eax,0x0
c0015954:	85 c0                	test   eax,eax
c0015956:	0f 95 c0             	setne  al
c0015959:	84 c0                	test   al,al
c001595b:	74 5b                	je     c00159b8 <setupInterruptController()+0x70>
c001595d:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015964:	83 ec 0c             	sub    esp,0xc
c0015967:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c001596a:	e8 dc 9e ff ff       	call   c000f84b <malloc>
c001596f:	83 c4 10             	add    esp,0x10
c0015972:	89 c3                	mov    ebx,eax
c0015974:	83 ec 0c             	sub    esp,0xc
c0015977:	53                   	push   ebx
c0015978:	e8 ff 00 01 00       	call   c0025a7c <APIC::APIC()>
c001597d:	83 c4 10             	add    esp,0x10
c0015980:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015983:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015986:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015989:	8b 00                	mov    eax,DWORD PTR [eax]
c001598b:	83 c0 08             	add    eax,0x8
c001598e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015990:	6a 00                	push   0x0
c0015992:	6a 00                	push   0x0
c0015994:	6a 00                	push   0x0
c0015996:	52                   	push   edx
c0015997:	ff d0                	call   eax
c0015999:	83 c4 10             	add    esp,0x10
c001599c:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c00159a1:	83 ec 08             	sub    esp,0x8
c00159a4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00159a7:	50                   	push   eax
c00159a8:	e8 87 e9 ff ff       	call   c0014334 <Device::addChild(Device*)>
c00159ad:	83 c4 10             	add    esp,0x10
c00159b0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00159b3:	e9 89 03 00 00       	jmp    c0015d41 <setupInterruptController()+0x3f9>
c00159b8:	a0 60 0f 03 c0       	mov    al,ds:0xc0030f60
c00159bd:	84 c0                	test   al,al
c00159bf:	75 24                	jne    c00159e5 <setupInterruptController()+0x9d>
c00159c1:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c00159c6:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00159cc:	83 e2 fe             	and    edx,0xfffffffe
c00159cf:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00159d5:	83 ec 0c             	sub    esp,0xc
c00159d8:	68 31 b2 02 c0       	push   0xc002b231
c00159dd:	e8 25 d5 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c00159e2:	83 c4 10             	add    esp,0x10
c00159e5:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c00159ea:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00159f0:	83 e0 01             	and    eax,0x1
c00159f3:	84 c0                	test   al,al
c00159f5:	0f 95 c0             	setne  al
c00159f8:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00159fb:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015a02:	83 ec 0c             	sub    esp,0xc
c0015a05:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015a08:	e8 3e 9e ff ff       	call   c000f84b <malloc>
c0015a0d:	83 c4 10             	add    esp,0x10
c0015a10:	89 c3                	mov    ebx,eax
c0015a12:	83 ec 0c             	sub    esp,0xc
c0015a15:	53                   	push   ebx
c0015a16:	e8 b9 05 01 00       	call   c0025fd4 <PIC::PIC()>
c0015a1b:	83 c4 10             	add    esp,0x10
c0015a1e:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015a21:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a24:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a27:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a29:	83 c0 08             	add    eax,0x8
c0015a2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a2e:	6a 00                	push   0x0
c0015a30:	6a 00                	push   0x0
c0015a32:	6a 00                	push   0x0
c0015a34:	52                   	push   edx
c0015a35:	ff d0                	call   eax
c0015a37:	83 c4 10             	add    esp,0x10
c0015a3a:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015a3e:	74 73                	je     c0015ab3 <setupInterruptController()+0x16b>
c0015a40:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a43:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a46:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a48:	83 c0 0c             	add    eax,0xc
c0015a4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a4d:	6a 00                	push   0x0
c0015a4f:	6a 00                	push   0x0
c0015a51:	6a 00                	push   0x0
c0015a53:	52                   	push   edx
c0015a54:	ff d0                	call   eax
c0015a56:	83 c4 10             	add    esp,0x10
c0015a59:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015a5d:	74 15                	je     c0015a74 <setupInterruptController()+0x12c>
c0015a5f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a62:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a64:	83 c0 04             	add    eax,0x4
c0015a67:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a69:	83 ec 0c             	sub    esp,0xc
c0015a6c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a6f:	ff d0                	call   eax
c0015a71:	83 c4 10             	add    esp,0x10
c0015a74:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015a7b:	83 ec 0c             	sub    esp,0xc
c0015a7e:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015a81:	e8 c5 9d ff ff       	call   c000f84b <malloc>
c0015a86:	83 c4 10             	add    esp,0x10
c0015a89:	89 c3                	mov    ebx,eax
c0015a8b:	83 ec 0c             	sub    esp,0xc
c0015a8e:	53                   	push   ebx
c0015a8f:	e8 e8 ff 00 00       	call   c0025a7c <APIC::APIC()>
c0015a94:	83 c4 10             	add    esp,0x10
c0015a97:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015a9a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a9d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aa0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aa2:	83 c0 08             	add    eax,0x8
c0015aa5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aa7:	6a 00                	push   0x0
c0015aa9:	6a 00                	push   0x0
c0015aab:	6a 00                	push   0x0
c0015aad:	52                   	push   edx
c0015aae:	ff d0                	call   eax
c0015ab0:	83 c4 10             	add    esp,0x10
c0015ab3:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0015ab8:	83 ec 08             	sub    esp,0x8
c0015abb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015abe:	50                   	push   eax
c0015abf:	e8 70 e8 ff ff       	call   c0014334 <Device::addChild(Device*)>
c0015ac4:	83 c4 10             	add    esp,0x10
c0015ac7:	c7 05 68 e7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e768,0x0
c0015ad1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ad4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ad6:	83 c0 24             	add    eax,0x24
c0015ad9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015adb:	6a 00                	push   0x0
c0015add:	68 fb 52 01 c0       	push   0xc00152fb
c0015ae2:	6a 00                	push   0x0
c0015ae4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ae7:	ff d0                	call   eax
c0015ae9:	83 c4 10             	add    esp,0x10
c0015aec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aef:	8b 00                	mov    eax,DWORD PTR [eax]
c0015af1:	83 c0 24             	add    eax,0x24
c0015af4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015af6:	6a 00                	push   0x0
c0015af8:	68 fb 52 01 c0       	push   0xc00152fb
c0015afd:	6a 01                	push   0x1
c0015aff:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b02:	ff d0                	call   eax
c0015b04:	83 c4 10             	add    esp,0x10
c0015b07:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b0c:	83 c0 24             	add    eax,0x24
c0015b0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b11:	6a 00                	push   0x0
c0015b13:	68 e1 4b 01 c0       	push   0xc0014be1
c0015b18:	6a 02                	push   0x2
c0015b1a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b1d:	ff d0                	call   eax
c0015b1f:	83 c4 10             	add    esp,0x10
c0015b22:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b25:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b27:	83 c0 24             	add    eax,0x24
c0015b2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b2c:	6a 00                	push   0x0
c0015b2e:	68 fb 52 01 c0       	push   0xc00152fb
c0015b33:	6a 03                	push   0x3
c0015b35:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b38:	ff d0                	call   eax
c0015b3a:	83 c4 10             	add    esp,0x10
c0015b3d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b40:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b42:	83 c0 24             	add    eax,0x24
c0015b45:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b47:	6a 00                	push   0x0
c0015b49:	68 fb 52 01 c0       	push   0xc00152fb
c0015b4e:	6a 04                	push   0x4
c0015b50:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b53:	ff d0                	call   eax
c0015b55:	83 c4 10             	add    esp,0x10
c0015b58:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b5d:	83 c0 24             	add    eax,0x24
c0015b60:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b62:	6a 00                	push   0x0
c0015b64:	68 fb 52 01 c0       	push   0xc00152fb
c0015b69:	6a 05                	push   0x5
c0015b6b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b6e:	ff d0                	call   eax
c0015b70:	83 c4 10             	add    esp,0x10
c0015b73:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b76:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b78:	83 c0 24             	add    eax,0x24
c0015b7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b7d:	6a 00                	push   0x0
c0015b7f:	68 1a 53 01 c0       	push   0xc001531a
c0015b84:	6a 06                	push   0x6
c0015b86:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b89:	ff d0                	call   eax
c0015b8b:	83 c4 10             	add    esp,0x10
c0015b8e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b91:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b93:	83 c0 24             	add    eax,0x24
c0015b96:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b98:	6a 00                	push   0x0
c0015b9a:	68 13 52 01 c0       	push   0xc0015213
c0015b9f:	6a 07                	push   0x7
c0015ba1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ba4:	ff d0                	call   eax
c0015ba6:	83 c4 10             	add    esp,0x10
c0015ba9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bac:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bae:	83 c0 24             	add    eax,0x24
c0015bb1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bb3:	6a 00                	push   0x0
c0015bb5:	68 fc 49 01 c0       	push   0xc00149fc
c0015bba:	6a 08                	push   0x8
c0015bbc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bbf:	ff d0                	call   eax
c0015bc1:	83 c4 10             	add    esp,0x10
c0015bc4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bc7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bc9:	83 c0 24             	add    eax,0x24
c0015bcc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bce:	6a 00                	push   0x0
c0015bd0:	68 fb 52 01 c0       	push   0xc00152fb
c0015bd5:	6a 09                	push   0x9
c0015bd7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bda:	ff d0                	call   eax
c0015bdc:	83 c4 10             	add    esp,0x10
c0015bdf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015be2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015be4:	83 c0 24             	add    eax,0x24
c0015be7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015be9:	6a 00                	push   0x0
c0015beb:	68 fb 52 01 c0       	push   0xc00152fb
c0015bf0:	6a 0a                	push   0xa
c0015bf2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bf5:	ff d0                	call   eax
c0015bf7:	83 c4 10             	add    esp,0x10
c0015bfa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bfd:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bff:	83 c0 24             	add    eax,0x24
c0015c02:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c04:	6a 00                	push   0x0
c0015c06:	68 fb 52 01 c0       	push   0xc00152fb
c0015c0b:	6a 0b                	push   0xb
c0015c0d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c10:	ff d0                	call   eax
c0015c12:	83 c4 10             	add    esp,0x10
c0015c15:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c18:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c1a:	83 c0 24             	add    eax,0x24
c0015c1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c1f:	6a 00                	push   0x0
c0015c21:	68 fb 52 01 c0       	push   0xc00152fb
c0015c26:	6a 0c                	push   0xc
c0015c28:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c2b:	ff d0                	call   eax
c0015c2d:	83 c4 10             	add    esp,0x10
c0015c30:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c33:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c35:	83 c0 24             	add    eax,0x24
c0015c38:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c3a:	6a 00                	push   0x0
c0015c3c:	68 86 52 01 c0       	push   0xc0015286
c0015c41:	6a 0d                	push   0xd
c0015c43:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c46:	ff d0                	call   eax
c0015c48:	83 c4 10             	add    esp,0x10
c0015c4b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c4e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c50:	83 c0 24             	add    eax,0x24
c0015c53:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c55:	6a 00                	push   0x0
c0015c57:	68 bf 52 01 c0       	push   0xc00152bf
c0015c5c:	6a 0e                	push   0xe
c0015c5e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c61:	ff d0                	call   eax
c0015c63:	83 c4 10             	add    esp,0x10
c0015c66:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c69:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c6b:	83 c0 24             	add    eax,0x24
c0015c6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c70:	6a 00                	push   0x0
c0015c72:	68 fb 52 01 c0       	push   0xc00152fb
c0015c77:	6a 0f                	push   0xf
c0015c79:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c7c:	ff d0                	call   eax
c0015c7e:	83 c4 10             	add    esp,0x10
c0015c81:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c84:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c86:	83 c0 24             	add    eax,0x24
c0015c89:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c8b:	6a 00                	push   0x0
c0015c8d:	68 fb 52 01 c0       	push   0xc00152fb
c0015c92:	6a 10                	push   0x10
c0015c94:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c97:	ff d0                	call   eax
c0015c99:	83 c4 10             	add    esp,0x10
c0015c9c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c9f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ca1:	83 c0 24             	add    eax,0x24
c0015ca4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ca6:	6a 00                	push   0x0
c0015ca8:	68 fb 52 01 c0       	push   0xc00152fb
c0015cad:	6a 11                	push   0x11
c0015caf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cb2:	ff d0                	call   eax
c0015cb4:	83 c4 10             	add    esp,0x10
c0015cb7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cba:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cbc:	83 c0 24             	add    eax,0x24
c0015cbf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cc1:	6a 00                	push   0x0
c0015cc3:	68 fb 52 01 c0       	push   0xc00152fb
c0015cc8:	6a 12                	push   0x12
c0015cca:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ccd:	ff d0                	call   eax
c0015ccf:	83 c4 10             	add    esp,0x10
c0015cd2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cd5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cd7:	83 c0 24             	add    eax,0x24
c0015cda:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cdc:	6a 00                	push   0x0
c0015cde:	68 fb 52 01 c0       	push   0xc00152fb
c0015ce3:	6a 13                	push   0x13
c0015ce5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ce8:	ff d0                	call   eax
c0015cea:	83 c4 10             	add    esp,0x10
c0015ced:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cf0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cf2:	83 c0 24             	add    eax,0x24
c0015cf5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cf7:	6a 00                	push   0x0
c0015cf9:	68 fb 52 01 c0       	push   0xc00152fb
c0015cfe:	6a 14                	push   0x14
c0015d00:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d03:	ff d0                	call   eax
c0015d05:	83 c4 10             	add    esp,0x10
c0015d08:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d0d:	83 c0 24             	add    eax,0x24
c0015d10:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d12:	6a 00                	push   0x0
c0015d14:	68 fb 52 01 c0       	push   0xc00152fb
c0015d19:	6a 1e                	push   0x1e
c0015d1b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d1e:	ff d0                	call   eax
c0015d20:	83 c4 10             	add    esp,0x10
c0015d23:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d26:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d28:	83 c0 24             	add    eax,0x24
c0015d2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d2d:	6a 00                	push   0x0
c0015d2f:	68 cf c7 01 c0       	push   0xc001c7cf
c0015d34:	6a 60                	push   0x60
c0015d36:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d39:	ff d0                	call   eax
c0015d3b:	83 c4 10             	add    esp,0x10
c0015d3e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d41:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d44:	c9                   	leave  
c0015d45:	c3                   	ret    

c0015d46 <InterruptController::convertLegacyIRQNumber(int)>:
c0015d46:	55                   	push   ebp
c0015d47:	89 e5                	mov    ebp,esp
c0015d49:	83 ec 08             	sub    esp,0x8
c0015d4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d4f:	83 ec 0c             	sub    esp,0xc
c0015d52:	50                   	push   eax
c0015d53:	e8 c8 e8 ff ff       	call   c0014620 <Device::getName()>
c0015d58:	83 c4 10             	add    esp,0x10
c0015d5b:	8a 00                	mov    al,BYTE PTR [eax]
c0015d5d:	3c 41                	cmp    al,0x41
c0015d5f:	0f 94 c0             	sete   al
c0015d62:	84 c0                	test   al,al
c0015d64:	74 28                	je     c0015d8e <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d66:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015d6a:	7f 12                	jg     c0015d7e <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015d6c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d6f:	05 20 d8 02 c0       	add    eax,0xc002d820
c0015d74:	8a 00                	mov    al,BYTE PTR [eax]
c0015d76:	0f b6 c0             	movzx  eax,al
c0015d79:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015d7c:	eb 10                	jmp    c0015d8e <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d7e:	83 ec 0c             	sub    esp,0xc
c0015d81:	68 20 af 02 c0       	push   0xc002af20
c0015d86:	e8 ba 48 00 00       	call   c001a645 <Krnl::panic(char const*)>
c0015d8b:	83 c4 10             	add    esp,0x10
c0015d8e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d91:	c9                   	leave  
c0015d92:	c3                   	ret    
c0015d93:	90                   	nop

c0015d94 <startGUI(void*)>:
c0015d94:	55                   	push   ebp
c0015d95:	89 e5                	mov    ebp,esp
c0015d97:	53                   	push   ebx
c0015d98:	83 ec 04             	sub    esp,0x4
c0015d9b:	e8 82 80 00 00       	call   c001de22 <unlockScheduler()>
c0015da0:	8b 1d c8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5c8
c0015da6:	83 ec 08             	sub    esp,0x8
c0015da9:	6a 01                	push   0x1
c0015dab:	68 94 b2 02 c0       	push   0xc002b294
c0015db0:	e8 c3 79 00 00       	call   c001d778 <Thr::loadDLL(char const*, bool)>
c0015db5:	83 c4 10             	add    esp,0x10
c0015db8:	83 ec 08             	sub    esp,0x8
c0015dbb:	53                   	push   ebx
c0015dbc:	50                   	push   eax
c0015dbd:	e8 ea 7b 00 00       	call   c001d9ac <Thr::executeDLL(unsigned long, void*)>
c0015dc2:	83 c4 10             	add    esp,0x10
c0015dc5:	8b 1d c8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5c8
c0015dcb:	83 ec 08             	sub    esp,0x8
c0015dce:	6a 01                	push   0x1
c0015dd0:	68 ae b2 02 c0       	push   0xc002b2ae
c0015dd5:	e8 9e 79 00 00       	call   c001d778 <Thr::loadDLL(char const*, bool)>
c0015dda:	83 c4 10             	add    esp,0x10
c0015ddd:	83 ec 08             	sub    esp,0x8
c0015de0:	53                   	push   ebx
c0015de1:	50                   	push   eax
c0015de2:	e8 c5 7b 00 00       	call   c001d9ac <Thr::executeDLL(unsigned long, void*)>
c0015de7:	83 c4 10             	add    esp,0x10
c0015dea:	90                   	nop
c0015deb:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015dee:	c9                   	leave  
c0015def:	c3                   	ret    

c0015df0 <startGUIVESA(void*)>:
c0015df0:	55                   	push   ebp
c0015df1:	89 e5                	mov    ebp,esp
c0015df3:	53                   	push   ebx
c0015df4:	83 ec 04             	sub    esp,0x4
c0015df7:	e8 26 80 00 00       	call   c001de22 <unlockScheduler()>
c0015dfc:	8b 1d c8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5c8
c0015e02:	83 ec 08             	sub    esp,0x8
c0015e05:	6a 01                	push   0x1
c0015e07:	68 c8 b2 02 c0       	push   0xc002b2c8
c0015e0c:	e8 67 79 00 00       	call   c001d778 <Thr::loadDLL(char const*, bool)>
c0015e11:	83 c4 10             	add    esp,0x10
c0015e14:	83 ec 08             	sub    esp,0x8
c0015e17:	53                   	push   ebx
c0015e18:	50                   	push   eax
c0015e19:	e8 8e 7b 00 00       	call   c001d9ac <Thr::executeDLL(unsigned long, void*)>
c0015e1e:	83 c4 10             	add    esp,0x10
c0015e21:	8b 1d c8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5c8
c0015e27:	83 ec 08             	sub    esp,0x8
c0015e2a:	6a 01                	push   0x1
c0015e2c:	68 ae b2 02 c0       	push   0xc002b2ae
c0015e31:	e8 42 79 00 00       	call   c001d778 <Thr::loadDLL(char const*, bool)>
c0015e36:	83 c4 10             	add    esp,0x10
c0015e39:	83 ec 08             	sub    esp,0x8
c0015e3c:	53                   	push   ebx
c0015e3d:	50                   	push   eax
c0015e3e:	e8 69 7b 00 00       	call   c001d9ac <Thr::executeDLL(unsigned long, void*)>
c0015e43:	83 c4 10             	add    esp,0x10
c0015e46:	90                   	nop
c0015e47:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015e4a:	c9                   	leave  
c0015e4b:	c3                   	ret    

c0015e4c <sendKeyToTerminal(unsigned char)>:
c0015e4c:	55                   	push   ebp
c0015e4d:	89 e5                	mov    ebp,esp
c0015e4f:	83 ec 28             	sub    esp,0x28
c0015e52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e55:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015e58:	a1 a4 e6 02 c0       	mov    eax,ds:0xc002e6a4
c0015e5d:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015e61:	83 ec 08             	sub    esp,0x8
c0015e64:	52                   	push   edx
c0015e65:	50                   	push   eax
c0015e66:	e8 af b4 ff ff       	call   c001131a <VgaText::receiveKey(unsigned char)>
c0015e6b:	83 c4 10             	add    esp,0x10
c0015e6e:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015e72:	75 41                	jne    c0015eb5 <sendKeyToTerminal(unsigned char)+0x69>
c0015e74:	e8 ce 7f 00 00       	call   c001de47 <lockStuff()>
c0015e79:	a1 80 e7 02 c0       	mov    eax,ds:0xc002e780
c0015e7e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e81:	c7 05 80 e7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e780,0x0
c0015e8b:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015e8f:	74 1f                	je     c0015eb0 <sendKeyToTerminal(unsigned char)+0x64>
c0015e91:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e94:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015e97:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015e9a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015e9d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015ea0:	83 ec 0c             	sub    esp,0xc
c0015ea3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015ea6:	e8 c7 85 00 00       	call   c001e472 <unblockTask(ThreadControlBlock*)>
c0015eab:	83 c4 10             	add    esp,0x10
c0015eae:	eb db                	jmp    c0015e8b <sendKeyToTerminal(unsigned char)+0x3f>
c0015eb0:	e8 66 83 00 00       	call   c001e21b <unlockStuff()>
c0015eb5:	90                   	nop
c0015eb6:	c9                   	leave  
c0015eb7:	c3                   	ret    

c0015eb8 <sendKeyboardToken(KeyboardToken)>:
c0015eb8:	55                   	push   ebp
c0015eb9:	89 e5                	mov    ebp,esp
c0015ebb:	83 ec 18             	sub    esp,0x18
c0015ebe:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015ec1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ec4:	0f b7 c0             	movzx  eax,ax
c0015ec7:	83 f2 01             	xor    edx,0x1
c0015eca:	88 90 a0 e7 02 c0    	mov    BYTE PTR [eax-0x3ffd1860],dl
c0015ed0:	a1 88 e7 02 c0       	mov    eax,ds:0xc002e788
c0015ed5:	85 c0                	test   eax,eax
c0015ed7:	74 24                	je     c0015efd <sendKeyboardToken(KeyboardToken)+0x45>
c0015ed9:	8b 0d 88 e7 02 c0    	mov    ecx,DWORD PTR ds:0xc002e788
c0015edf:	83 ec 04             	sub    esp,0x4
c0015ee2:	68 a0 e7 02 c0       	push   0xc002e7a0
c0015ee7:	83 ec 08             	sub    esp,0x8
c0015eea:	89 e2                	mov    edx,esp
c0015eec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015eef:	89 02                	mov    DWORD PTR [edx],eax
c0015ef1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015ef4:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015ef8:	ff d1                	call   ecx
c0015efa:	83 c4 10             	add    esp,0x10
c0015efd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f00:	66 3d 03 02          	cmp    ax,0x203
c0015f04:	75 07                	jne    c0015f0d <sendKeyboardToken(KeyboardToken)+0x55>
c0015f06:	a0 a0 e8 02 c0       	mov    al,ds:0xc002e8a0
c0015f0b:	84 c0                	test   al,al
c0015f0d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015f11:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015f14:	a0 a8 eb 02 c0       	mov    al,ds:0xc002eba8
c0015f19:	38 c2                	cmp    dl,al
c0015f1b:	74 1c                	je     c0015f39 <sendKeyboardToken(KeyboardToken)+0x81>
c0015f1d:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015f20:	a2 a8 eb 02 c0       	mov    ds:0xc002eba8,al
c0015f25:	a0 a8 eb 02 c0       	mov    al,ds:0xc002eba8
c0015f2a:	0f b6 c0             	movzx  eax,al
c0015f2d:	83 ec 0c             	sub    esp,0xc
c0015f30:	50                   	push   eax
c0015f31:	e8 44 a6 ff ff       	call   c001057a <setTerminalScrollLock(bool)>
c0015f36:	83 c4 10             	add    esp,0x10
c0015f39:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015f3c:	84 c0                	test   al,al
c0015f3e:	0f 84 ae 00 00 00    	je     c0015ff2 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015f44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f47:	66 3d 10 03          	cmp    ax,0x310
c0015f4b:	75 06                	jne    c0015f53 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015f4d:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015f53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f56:	66 3d 11 03          	cmp    ax,0x311
c0015f5a:	75 06                	jne    c0015f62 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015f5c:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015f62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f65:	66 3d 12 03          	cmp    ax,0x312
c0015f69:	75 06                	jne    c0015f71 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015f6b:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015f71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f74:	66 3d 13 03          	cmp    ax,0x313
c0015f78:	75 06                	jne    c0015f80 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015f7a:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015f80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f83:	66 3d 14 03          	cmp    ax,0x314
c0015f87:	75 06                	jne    c0015f8f <sendKeyboardToken(KeyboardToken)+0xd7>
c0015f89:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015f8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f92:	66 3d 15 03          	cmp    ax,0x315
c0015f96:	75 06                	jne    c0015f9e <sendKeyboardToken(KeyboardToken)+0xe6>
c0015f98:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015f9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fa1:	66 3d 16 03          	cmp    ax,0x316
c0015fa5:	75 06                	jne    c0015fad <sendKeyboardToken(KeyboardToken)+0xf5>
c0015fa7:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015fad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fb0:	66 3d 17 03          	cmp    ax,0x317
c0015fb4:	75 06                	jne    c0015fbc <sendKeyboardToken(KeyboardToken)+0x104>
c0015fb6:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015fbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fbf:	66 3d 18 03          	cmp    ax,0x318
c0015fc3:	75 06                	jne    c0015fcb <sendKeyboardToken(KeyboardToken)+0x113>
c0015fc5:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015fcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fce:	66 3d 19 03          	cmp    ax,0x319
c0015fd2:	75 06                	jne    c0015fda <sendKeyboardToken(KeyboardToken)+0x122>
c0015fd4:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015fda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fdd:	66 3d 1a 03          	cmp    ax,0x31a
c0015fe1:	0f 85 c9 00 00 00    	jne    c00160b0 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015fe7:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015fed:	e9 be 00 00 00       	jmp    c00160b0 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015ff2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ff5:	66 3d 10 03          	cmp    ax,0x310
c0015ff9:	75 0a                	jne    c0016005 <sendKeyboardToken(KeyboardToken)+0x14d>
c0015ffb:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0016001:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016005:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016008:	66 3d 11 03          	cmp    ax,0x311
c001600c:	75 0a                	jne    c0016018 <sendKeyboardToken(KeyboardToken)+0x160>
c001600e:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0016014:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016018:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001601b:	66 3d 12 03          	cmp    ax,0x312
c001601f:	75 0a                	jne    c001602b <sendKeyboardToken(KeyboardToken)+0x173>
c0016021:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0016027:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001602b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001602e:	66 3d 13 03          	cmp    ax,0x313
c0016032:	75 0a                	jne    c001603e <sendKeyboardToken(KeyboardToken)+0x186>
c0016034:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001603a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001603e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016041:	66 3d 14 03          	cmp    ax,0x314
c0016045:	75 0a                	jne    c0016051 <sendKeyboardToken(KeyboardToken)+0x199>
c0016047:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001604d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016051:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016054:	66 3d 15 03          	cmp    ax,0x315
c0016058:	75 0a                	jne    c0016064 <sendKeyboardToken(KeyboardToken)+0x1ac>
c001605a:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0016060:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016064:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016067:	66 3d 16 03          	cmp    ax,0x316
c001606b:	75 0a                	jne    c0016077 <sendKeyboardToken(KeyboardToken)+0x1bf>
c001606d:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0016073:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016077:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001607a:	66 3d 17 03          	cmp    ax,0x317
c001607e:	75 0a                	jne    c001608a <sendKeyboardToken(KeyboardToken)+0x1d2>
c0016080:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0016086:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001608a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001608d:	66 3d 18 03          	cmp    ax,0x318
c0016091:	75 0a                	jne    c001609d <sendKeyboardToken(KeyboardToken)+0x1e5>
c0016093:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0016099:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001609d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160a0:	66 3d 19 03          	cmp    ax,0x319
c00160a4:	75 0a                	jne    c00160b0 <sendKeyboardToken(KeyboardToken)+0x1f8>
c00160a6:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00160ac:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160b3:	66 3d 00 02          	cmp    ax,0x200
c00160b7:	75 2c                	jne    c00160e5 <sendKeyboardToken(KeyboardToken)+0x22d>
c00160b9:	a0 a0 eb 02 c0       	mov    al,ds:0xc002eba0
c00160be:	83 f0 01             	xor    eax,0x1
c00160c1:	84 c0                	test   al,al
c00160c3:	74 20                	je     c00160e5 <sendKeyboardToken(KeyboardToken)+0x22d>
c00160c5:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c00160ca:	6a 01                	push   0x1
c00160cc:	6a 00                	push   0x0
c00160ce:	68 94 5d 01 c0       	push   0xc0015d94
c00160d3:	50                   	push   eax
c00160d4:	e8 79 7e 00 00       	call   c001df52 <Process::createThread(void (*)(void*), void*, int)>
c00160d9:	83 c4 10             	add    esp,0x10
c00160dc:	c6 05 a0 eb 02 c0 01 	mov    BYTE PTR ds:0xc002eba0,0x1
c00160e3:	eb 33                	jmp    c0016118 <sendKeyboardToken(KeyboardToken)+0x260>
c00160e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160e8:	66 3d 01 02          	cmp    ax,0x201
c00160ec:	75 2a                	jne    c0016118 <sendKeyboardToken(KeyboardToken)+0x260>
c00160ee:	a0 a0 eb 02 c0       	mov    al,ds:0xc002eba0
c00160f3:	83 f0 01             	xor    eax,0x1
c00160f6:	84 c0                	test   al,al
c00160f8:	74 1e                	je     c0016118 <sendKeyboardToken(KeyboardToken)+0x260>
c00160fa:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c00160ff:	6a 01                	push   0x1
c0016101:	6a 00                	push   0x0
c0016103:	68 f0 5d 01 c0       	push   0xc0015df0
c0016108:	50                   	push   eax
c0016109:	e8 44 7e 00 00       	call   c001df52 <Process::createThread(void (*)(void*), void*, int)>
c001610e:	83 c4 10             	add    esp,0x10
c0016111:	c6 05 a0 eb 02 c0 01 	mov    BYTE PTR ds:0xc002eba0,0x1
c0016118:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001611b:	66 3d 1d 03          	cmp    ax,0x31d
c001611f:	75 06                	jne    c0016127 <sendKeyboardToken(KeyboardToken)+0x26f>
c0016121:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0016127:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001612a:	66 3d 1c 03          	cmp    ax,0x31c
c001612e:	75 06                	jne    c0016136 <sendKeyboardToken(KeyboardToken)+0x27e>
c0016130:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0016136:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016139:	66 3d 1b 03          	cmp    ax,0x31b
c001613d:	75 06                	jne    c0016145 <sendKeyboardToken(KeyboardToken)+0x28d>
c001613f:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0016145:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016148:	66 3d 1e 03          	cmp    ax,0x31e
c001614c:	75 06                	jne    c0016154 <sendKeyboardToken(KeyboardToken)+0x29c>
c001614e:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0016154:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016157:	66 3d 1f 03          	cmp    ax,0x31f
c001615b:	75 06                	jne    c0016163 <sendKeyboardToken(KeyboardToken)+0x2ab>
c001615d:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0016163:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016166:	66 3d 1a 03          	cmp    ax,0x31a
c001616a:	75 06                	jne    c0016172 <sendKeyboardToken(KeyboardToken)+0x2ba>
c001616c:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0016172:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0016176:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016179:	83 f0 01             	xor    eax,0x1
c001617c:	84 c0                	test   al,al
c001617e:	74 77                	je     c00161f7 <sendKeyboardToken(KeyboardToken)+0x33f>
c0016180:	a0 a1 e8 02 c0       	mov    al,ds:0xc002e8a1
c0016185:	84 c0                	test   al,al
c0016187:	74 41                	je     c00161ca <sendKeyboardToken(KeyboardToken)+0x312>
c0016189:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001618d:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0016191:	74 2b                	je     c00161be <sendKeyboardToken(KeyboardToken)+0x306>
c0016193:	8b 15 a4 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eba4
c0016199:	89 d0                	mov    eax,edx
c001619b:	c1 e0 02             	shl    eax,0x2
c001619e:	01 d0                	add    eax,edx
c00161a0:	01 c0                	add    eax,eax
c00161a2:	a3 a4 eb 02 c0       	mov    ds:0xc002eba4,eax
c00161a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161aa:	0f b7 c0             	movzx  eax,ax
c00161ad:	8d 50 d0             	lea    edx,[eax-0x30]
c00161b0:	a1 a4 eb 02 c0       	mov    eax,ds:0xc002eba4
c00161b5:	01 d0                	add    eax,edx
c00161b7:	a3 a4 eb 02 c0       	mov    ds:0xc002eba4,eax
c00161bc:	eb 6d                	jmp    c001622b <sendKeyboardToken(KeyboardToken)+0x373>
c00161be:	c7 05 a4 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eba4,0x0
c00161c8:	eb 61                	jmp    c001622b <sendKeyboardToken(KeyboardToken)+0x373>
c00161ca:	a1 a4 eb 02 c0       	mov    eax,ds:0xc002eba4
c00161cf:	85 c0                	test   eax,eax
c00161d1:	74 18                	je     c00161eb <sendKeyboardToken(KeyboardToken)+0x333>
c00161d3:	a1 a4 eb 02 c0       	mov    eax,ds:0xc002eba4
c00161d8:	0f b6 c0             	movzx  eax,al
c00161db:	83 ec 0c             	sub    esp,0xc
c00161de:	50                   	push   eax
c00161df:	e8 68 fc ff ff       	call   c0015e4c <sendKeyToTerminal(unsigned char)>
c00161e4:	83 c4 10             	add    esp,0x10
c00161e7:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161eb:	c7 05 a4 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eba4,0x0
c00161f5:	eb 34                	jmp    c001622b <sendKeyboardToken(KeyboardToken)+0x373>
c00161f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161fa:	66 3d 01 01          	cmp    ax,0x101
c00161fe:	75 2b                	jne    c001622b <sendKeyboardToken(KeyboardToken)+0x373>
c0016200:	a1 a4 eb 02 c0       	mov    eax,ds:0xc002eba4
c0016205:	85 c0                	test   eax,eax
c0016207:	74 18                	je     c0016221 <sendKeyboardToken(KeyboardToken)+0x369>
c0016209:	a1 a4 eb 02 c0       	mov    eax,ds:0xc002eba4
c001620e:	0f b6 c0             	movzx  eax,al
c0016211:	83 ec 0c             	sub    esp,0xc
c0016214:	50                   	push   eax
c0016215:	e8 32 fc ff ff       	call   c0015e4c <sendKeyToTerminal(unsigned char)>
c001621a:	83 c4 10             	add    esp,0x10
c001621d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016221:	c7 05 a4 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eba4,0x0
c001622b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001622e:	83 f0 01             	xor    eax,0x1
c0016231:	84 c0                	test   al,al
c0016233:	74 4c                	je     c0016281 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016235:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016238:	83 f0 01             	xor    eax,0x1
c001623b:	84 c0                	test   al,al
c001623d:	74 42                	je     c0016281 <sendKeyboardToken(KeyboardToken)+0x3c9>
c001623f:	a0 a0 e8 02 c0       	mov    al,ds:0xc002e8a0
c0016244:	83 f0 01             	xor    eax,0x1
c0016247:	84 c0                	test   al,al
c0016249:	74 36                	je     c0016281 <sendKeyboardToken(KeyboardToken)+0x3c9>
c001624b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001624e:	66 83 f8 1f          	cmp    ax,0x1f
c0016252:	76 09                	jbe    c001625d <sendKeyboardToken(KeyboardToken)+0x3a5>
c0016254:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016257:	66 83 f8 7e          	cmp    ax,0x7e
c001625b:	76 12                	jbe    c001626f <sendKeyboardToken(KeyboardToken)+0x3b7>
c001625d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016260:	66 83 f8 0a          	cmp    ax,0xa
c0016264:	74 09                	je     c001626f <sendKeyboardToken(KeyboardToken)+0x3b7>
c0016266:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016269:	66 83 f8 08          	cmp    ax,0x8
c001626d:	75 12                	jne    c0016281 <sendKeyboardToken(KeyboardToken)+0x3c9>
c001626f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016272:	0f b6 c0             	movzx  eax,al
c0016275:	83 ec 0c             	sub    esp,0xc
c0016278:	50                   	push   eax
c0016279:	e8 ce fb ff ff       	call   c0015e4c <sendKeyToTerminal(unsigned char)>
c001627e:	83 c4 10             	add    esp,0x10
c0016281:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0016284:	83 f0 01             	xor    eax,0x1
c0016287:	84 c0                	test   al,al
c0016289:	74 4f                	je     c00162da <sendKeyboardToken(KeyboardToken)+0x422>
c001628b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001628e:	83 f0 01             	xor    eax,0x1
c0016291:	84 c0                	test   al,al
c0016293:	74 45                	je     c00162da <sendKeyboardToken(KeyboardToken)+0x422>
c0016295:	a0 a0 e8 02 c0       	mov    al,ds:0xc002e8a0
c001629a:	84 c0                	test   al,al
c001629c:	74 3c                	je     c00162da <sendKeyboardToken(KeyboardToken)+0x422>
c001629e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162a1:	66 83 f8 3f          	cmp    ax,0x3f
c00162a5:	76 33                	jbe    c00162da <sendKeyboardToken(KeyboardToken)+0x422>
c00162a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162aa:	66 83 f8 7f          	cmp    ax,0x7f
c00162ae:	77 2a                	ja     c00162da <sendKeyboardToken(KeyboardToken)+0x422>
c00162b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162b3:	88 c2                	mov    dl,al
c00162b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162b8:	66 83 f8 5f          	cmp    ax,0x5f
c00162bc:	76 04                	jbe    c00162c2 <sendKeyboardToken(KeyboardToken)+0x40a>
c00162be:	b0 20                	mov    al,0x20
c00162c0:	eb 02                	jmp    c00162c4 <sendKeyboardToken(KeyboardToken)+0x40c>
c00162c2:	b0 00                	mov    al,0x0
c00162c4:	29 c2                	sub    edx,eax
c00162c6:	88 d0                	mov    al,dl
c00162c8:	83 e8 40             	sub    eax,0x40
c00162cb:	0f b6 c0             	movzx  eax,al
c00162ce:	83 ec 0c             	sub    esp,0xc
c00162d1:	50                   	push   eax
c00162d2:	e8 75 fb ff ff       	call   c0015e4c <sendKeyToTerminal(unsigned char)>
c00162d7:	83 c4 10             	add    esp,0x10
c00162da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162dd:	66 3d 00 03          	cmp    ax,0x300
c00162e1:	75 0f                	jne    c00162f2 <sendKeyboardToken(KeyboardToken)+0x43a>
c00162e3:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00162e6:	83 f0 01             	xor    eax,0x1
c00162e9:	84 c0                	test   al,al
c00162eb:	74 05                	je     c00162f2 <sendKeyboardToken(KeyboardToken)+0x43a>
c00162ed:	e8 bd aa ff ff       	call   c0010daf <doTerminalCycle()>
c00162f2:	90                   	nop
c00162f3:	c9                   	leave  
c00162f4:	c3                   	ret    

c00162f5 <clearInternalKeybuffer(VgaText*)>:
c00162f5:	55                   	push   ebp
c00162f6:	89 e5                	mov    ebp,esp
c00162f8:	83 ec 08             	sub    esp,0x8
c00162fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162fe:	05 34 11 00 00       	add    eax,0x1134
c0016303:	83 ec 0c             	sub    esp,0xc
c0016306:	50                   	push   eax
c0016307:	e8 90 a4 fe ff       	call   c000079c <strlen>
c001630c:	83 c4 10             	add    esp,0x10
c001630f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016312:	81 c2 34 11 00 00    	add    edx,0x1134
c0016318:	83 ec 04             	sub    esp,0x4
c001631b:	50                   	push   eax
c001631c:	6a 00                	push   0x0
c001631e:	52                   	push   edx
c001631f:	e8 5c a4 fe ff       	call   c0000780 <memset>
c0016324:	83 c4 10             	add    esp,0x10
c0016327:	90                   	nop
c0016328:	c9                   	leave  
c0016329:	c3                   	ret    

c001632a <readKeyboard(VgaText*, char*, unsigned long)>:
c001632a:	55                   	push   ebp
c001632b:	89 e5                	mov    ebp,esp
c001632d:	83 ec 18             	sub    esp,0x18
c0016330:	fb                   	sti    
c0016331:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0016338:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001633c:	0f 84 8a 00 00 00    	je     c00163cc <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0016342:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016345:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c001634b:	84 c0                	test   al,al
c001634d:	75 11                	jne    c0016360 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c001634f:	e8 cc 7a 00 00       	call   c001de20 <lockScheduler()>
c0016354:	e8 3d 7e 00 00       	call   c001e196 <schedule()>
c0016359:	e8 c4 7a 00 00       	call   c001de22 <unlockScheduler()>
c001635e:	eb e2                	jmp    c0016342 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c0016360:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0016363:	8d 50 01             	lea    edx,[eax+0x1]
c0016366:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0016369:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001636c:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0016372:	88 10                	mov    BYTE PTR [eax],dl
c0016374:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016377:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c001637d:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0016380:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016383:	05 34 11 00 00       	add    eax,0x1134
c0016388:	83 ec 0c             	sub    esp,0xc
c001638b:	50                   	push   eax
c001638c:	e8 0b a4 fe ff       	call   c000079c <strlen>
c0016391:	83 c4 10             	add    esp,0x10
c0016394:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016397:	81 c2 34 11 00 00    	add    edx,0x1134
c001639d:	8d 4a 01             	lea    ecx,[edx+0x1]
c00163a0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163a3:	81 c2 34 11 00 00    	add    edx,0x1134
c00163a9:	83 ec 04             	sub    esp,0x4
c00163ac:	50                   	push   eax
c00163ad:	51                   	push   ecx
c00163ae:	52                   	push   edx
c00163af:	e8 d0 a2 fe ff       	call   c0000684 <memmove>
c00163b4:	83 c4 10             	add    esp,0x10
c00163b7:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00163ba:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00163bd:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00163c1:	0f 85 71 ff ff ff    	jne    c0016338 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c00163c7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00163ca:	eb 03                	jmp    c00163cf <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c00163cc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00163cf:	c9                   	leave  
c00163d0:	c3                   	ret    
c00163d1:	90                   	nop

c00163d2 <Keyboard::Keyboard(char const*)>:
c00163d2:	83 ec 0c             	sub    esp,0xc
c00163d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163d9:	83 ec 08             	sub    esp,0x8
c00163dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163e0:	50                   	push   eax
c00163e1:	e8 3e e1 ff ff       	call   c0014524 <Device::Device(char const*)>
c00163e6:	83 c4 10             	add    esp,0x10
c00163e9:	ba ec b2 02 c0       	mov    edx,0xc002b2ec
c00163ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163f2:	89 10                	mov    DWORD PTR [eax],edx
c00163f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163f8:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0016402:	c6 05 84 e7 02 c0 01 	mov    BYTE PTR ds:0xc002e784,0x1
c0016409:	90                   	nop
c001640a:	83 c4 0c             	add    esp,0xc
c001640d:	c3                   	ret    

c001640e <Keyboard::~Keyboard()>:
c001640e:	83 ec 0c             	sub    esp,0xc
c0016411:	ba ec b2 02 c0       	mov    edx,0xc002b2ec
c0016416:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001641a:	89 10                	mov    DWORD PTR [eax],edx
c001641c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016420:	83 ec 0c             	sub    esp,0xc
c0016423:	50                   	push   eax
c0016424:	e8 dd dd ff ff       	call   c0014206 <Device::~Device()>
c0016429:	83 c4 10             	add    esp,0x10
c001642c:	90                   	nop
c001642d:	83 c4 0c             	add    esp,0xc
c0016430:	c3                   	ret    
c0016431:	90                   	nop

c0016432 <Keyboard::~Keyboard()>:
c0016432:	83 ec 0c             	sub    esp,0xc
c0016435:	83 ec 0c             	sub    esp,0xc
c0016438:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001643c:	e8 cd ff ff ff       	call   c001640e <Keyboard::~Keyboard()>
c0016441:	83 c4 10             	add    esp,0x10
c0016444:	83 ec 08             	sub    esp,0x8
c0016447:	68 5c 01 00 00       	push   0x15c
c001644c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016450:	e8 d2 c9 ff ff       	call   c0012e27 <operator delete(void*, unsigned long)>
c0016455:	83 c4 10             	add    esp,0x10
c0016458:	83 c4 0c             	add    esp,0xc
c001645b:	c3                   	ret    

c001645c <LogicalDisk::close(int, int, void*)>:
c001645c:	83 c8 ff             	or     eax,0xffffffff
c001645f:	c3                   	ret    

c0016460 <LogicalDisk::~LogicalDisk()>:
c0016460:	83 ec 0c             	sub    esp,0xc
c0016463:	ba 9c b3 02 c0       	mov    edx,0xc002b39c
c0016468:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001646c:	89 10                	mov    DWORD PTR [eax],edx
c001646e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016472:	83 ec 0c             	sub    esp,0xc
c0016475:	50                   	push   eax
c0016476:	e8 8b dd ff ff       	call   c0014206 <Device::~Device()>
c001647b:	83 c4 10             	add    esp,0x10
c001647e:	90                   	nop
c001647f:	83 c4 0c             	add    esp,0xc
c0016482:	c3                   	ret    
c0016483:	90                   	nop

c0016484 <LogicalDisk::~LogicalDisk()>:
c0016484:	83 ec 0c             	sub    esp,0xc
c0016487:	83 ec 0c             	sub    esp,0xc
c001648a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001648e:	e8 cd ff ff ff       	call   c0016460 <LogicalDisk::~LogicalDisk()>
c0016493:	83 c4 10             	add    esp,0x10
c0016496:	83 ec 08             	sub    esp,0x8
c0016499:	68 74 01 00 00       	push   0x174
c001649e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164a2:	e8 80 c9 ff ff       	call   c0012e27 <operator delete(void*, unsigned long)>
c00164a7:	83 c4 10             	add    esp,0x10
c00164aa:	83 c4 0c             	add    esp,0xc
c00164ad:	c3                   	ret    

c00164ae <LogicalDisk::open(int, int, void*)>:
c00164ae:	83 ec 18             	sub    esp,0x18
c00164b1:	68 18 b3 02 c0       	push   0xc002b318
c00164b6:	e8 8a 41 00 00       	call   c001a645 <Krnl::panic(char const*)>
c00164bb:	83 c8 ff             	or     eax,0xffffffff
c00164be:	83 c4 1c             	add    esp,0x1c
c00164c1:	c3                   	ret    

c00164c2 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00164c2:	53                   	push   ebx
c00164c3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00164c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00164cb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00164cf:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00164d5:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00164db:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00164e1:	77 10                	ja     c00164f3 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00164e3:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00164e9:	89 d3                	mov    ebx,edx
c00164eb:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00164f1:	72 05                	jb     c00164f8 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00164f3:	83 c8 ff             	or     eax,0xffffffff
c00164f6:	89 c2                	mov    edx,eax
c00164f8:	5b                   	pop    ebx
c00164f9:	c3                   	ret    

c00164fa <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00164fa:	56                   	push   esi
c00164fb:	83 c8 ff             	or     eax,0xffffffff
c00164fe:	53                   	push   ebx
c00164ff:	89 c2                	mov    edx,eax
c0016501:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016505:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0016509:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001650d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016513:	77 27                	ja     c001653c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016515:	89 d8                	mov    eax,ebx
c0016517:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001651d:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0016523:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016528:	89 c2                	mov    edx,eax
c001652a:	73 10                	jae    c001653c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001652c:	89 c8                	mov    eax,ecx
c001652e:	89 da                	mov    edx,ebx
c0016530:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0016536:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001653c:	5b                   	pop    ebx
c001653d:	5e                   	pop    esi
c001653e:	c3                   	ret    
c001653f:	90                   	nop

c0016540 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016540:	83 ec 1c             	sub    esp,0x1c
c0016543:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016547:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001654b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001654f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016553:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016557:	89 04 24             	mov    DWORD PTR [esp],eax
c001655a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001655e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016562:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016566:	83 ec 08             	sub    esp,0x8
c0016569:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001656d:	50                   	push   eax
c001656e:	e8 b1 df ff ff       	call   c0014524 <Device::Device(char const*)>
c0016573:	83 c4 10             	add    esp,0x10
c0016576:	ba 9c b3 02 c0       	mov    edx,0xc002b39c
c001657b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001657f:	89 10                	mov    DWORD PTR [eax],edx
c0016581:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016585:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001658c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016590:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016597:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001659b:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00165a5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00165a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165ad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00165b1:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00165b7:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00165bd:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00165c1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00165c4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00165c8:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00165ce:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00165d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165d8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00165dc:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00165e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165e6:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00165f0:	90                   	nop
c00165f1:	83 c4 1c             	add    esp,0x1c
c00165f4:	c3                   	ret    
c00165f5:	90                   	nop

c00165f6 <LogicalDisk::assignDriveLetter()>:
c00165f6:	55                   	push   ebp
c00165f7:	57                   	push   edi
c00165f8:	56                   	push   esi
c00165f9:	53                   	push   ebx
c00165fa:	83 ec 14             	sub    esp,0x14
c00165fd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016601:	8b 3d c0 eb 02 c0    	mov    edi,DWORD PTR ds:0xc002ebc0
c0016607:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001660d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0016611:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0016617:	8b 3d c4 eb 02 c0    	mov    edi,DWORD PTR ds:0xc002ebc4
c001661d:	3c 01                	cmp    al,0x1
c001661f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0016623:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016627:	19 c0                	sbb    eax,eax
c0016629:	83 e0 02             	and    eax,0x2
c001662c:	83 c0 41             	add    eax,0x41
c001662f:	0f be e8             	movsx  ebp,al
c0016632:	3c 43                	cmp    al,0x43
c0016634:	75 10                	jne    c0016646 <LogicalDisk::assignDriveLetter()+0x50>
c0016636:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001663d:	75 5d                	jne    c001669c <LogicalDisk::assignDriveLetter()+0xa6>
c001663f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016644:	75 56                	jne    c001669c <LogicalDisk::assignDriveLetter()+0xa6>
c0016646:	8d 75 bf             	lea    esi,[ebp-0x41]
c0016649:	ba 01 00 00 00       	mov    edx,0x1
c001664e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016652:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0016656:	d3 e2                	shl    edx,cl
c0016658:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001665c:	89 d7                	mov    edi,edx
c001665e:	89 d6                	mov    esi,edx
c0016660:	c1 ff 1f             	sar    edi,0x1f
c0016663:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0016667:	21 f9                	and    ecx,edi
c0016669:	09 d1                	or     ecx,edx
c001666b:	75 2f                	jne    c001669c <LogicalDisk::assignDriveLetter()+0xa6>
c001666d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0016671:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016675:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001667b:	09 f2                	or     edx,esi
c001667d:	89 15 c0 eb 02 c0    	mov    DWORD PTR ds:0xc002ebc0,edx
c0016683:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016687:	09 fa                	or     edx,edi
c0016689:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001668d:	89 15 c4 eb 02 c0    	mov    DWORD PTR ds:0xc002ebc4,edx
c0016693:	89 1c bd e0 eb 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1420],ebx
c001669a:	eb 08                	jmp    c00166a4 <LogicalDisk::assignDriveLetter()+0xae>
c001669c:	45                   	inc    ebp
c001669d:	40                   	inc    eax
c001669e:	3c 5b                	cmp    al,0x5b
c00166a0:	75 90                	jne    c0016632 <LogicalDisk::assignDriveLetter()+0x3c>
c00166a2:	31 c0                	xor    eax,eax
c00166a4:	83 c4 14             	add    esp,0x14
c00166a7:	5b                   	pop    ebx
c00166a8:	5e                   	pop    esi
c00166a9:	5f                   	pop    edi
c00166aa:	5d                   	pop    ebp
c00166ab:	c3                   	ret    

c00166ac <LogicalDisk::mount()>:
c00166ac:	56                   	push   esi
c00166ad:	53                   	push   ebx
c00166ae:	51                   	push   ecx
c00166af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00166b3:	8b 1d 54 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e754
c00166b9:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00166c3:	85 db                	test   ebx,ebx
c00166c5:	74 50                	je     c0016717 <LogicalDisk::mount()+0x6b>
c00166c7:	e8 3f 77 00 00       	call   c001de0b <getIRQNestingLevel()>
c00166cc:	52                   	push   edx
c00166cd:	52                   	push   edx
c00166ce:	50                   	push   eax
c00166cf:	68 3c b3 02 c0       	push   0xc002b33c
c00166d4:	e8 2e c8 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c00166d9:	83 c4 0c             	add    esp,0xc
c00166dc:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00166e3:	8b 13                	mov    edx,DWORD PTR [ebx]
c00166e5:	83 e8 41             	sub    eax,0x41
c00166e8:	50                   	push   eax
c00166e9:	56                   	push   esi
c00166ea:	53                   	push   ebx
c00166eb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00166ee:	83 c4 10             	add    esp,0x10
c00166f1:	84 c0                	test   al,al
c00166f3:	74 08                	je     c00166fd <LogicalDisk::mount()+0x51>
c00166f5:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00166fb:	eb 1c                	jmp    c0016719 <LogicalDisk::mount()+0x6d>
c00166fd:	e8 09 77 00 00       	call   c001de0b <getIRQNestingLevel()>
c0016702:	51                   	push   ecx
c0016703:	51                   	push   ecx
c0016704:	50                   	push   eax
c0016705:	68 57 b3 02 c0       	push   0xc002b357
c001670a:	e8 f8 c7 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001670f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016712:	83 c4 10             	add    esp,0x10
c0016715:	eb ac                	jmp    c00166c3 <LogicalDisk::mount()+0x17>
c0016717:	31 c0                	xor    eax,eax
c0016719:	5a                   	pop    edx
c001671a:	5b                   	pop    ebx
c001671b:	5e                   	pop    esi
c001671c:	c3                   	ret    
c001671d:	90                   	nop

c001671e <LogicalDisk::unmount()>:
c001671e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016722:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001672c:	c3                   	ret    
c001672d:	90                   	nop

c001672e <LogicalDisk::eject()>:
c001672e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016732:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016738:	8b 10                	mov    edx,DWORD PTR [eax]
c001673a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001673e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0016741:	90                   	nop

c0016742 <LogicalDisk::unassignDriveLetter()>:
c0016742:	57                   	push   edi
c0016743:	56                   	push   esi
c0016744:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016748:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001674f:	84 c9                	test   cl,cl
c0016751:	75 0f                	jne    c0016762 <LogicalDisk::unassignDriveLetter()+0x20>
c0016753:	c7 44 24 0c 72 b3 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b372
c001675b:	5e                   	pop    esi
c001675c:	5f                   	pop    edi
c001675d:	e9 e3 3e 00 00       	jmp    c001a645 <Krnl::panic(char const*)>
c0016762:	83 e9 41             	sub    ecx,0x41
c0016765:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001676c:	b8 01 00 00 00       	mov    eax,0x1
c0016771:	c7 04 8d e0 eb 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1420],0x0
c001677c:	d3 e0                	shl    eax,cl
c001677e:	89 c7                	mov    edi,eax
c0016780:	f7 d0                	not    eax
c0016782:	c1 ff 1f             	sar    edi,0x1f
c0016785:	21 05 c0 eb 02 c0    	and    DWORD PTR ds:0xc002ebc0,eax
c001678b:	89 fe                	mov    esi,edi
c001678d:	f7 d6                	not    esi
c001678f:	21 35 c4 eb 02 c0    	and    DWORD PTR ds:0xc002ebc4,esi
c0016795:	5e                   	pop    esi
c0016796:	5f                   	pop    edi
c0016797:	c3                   	ret    

c0016798 <LogicalDisk::read(unsigned long long, int, void*)>:
c0016798:	57                   	push   edi
c0016799:	56                   	push   esi
c001679a:	53                   	push   ebx
c001679b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001679f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00167a3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00167a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00167ab:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00167b1:	77 41                	ja     c00167f4 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00167b3:	99                   	cdq    
c00167b4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00167ba:	01 c8                	add    eax,ecx
c00167bc:	11 da                	adc    edx,ebx
c00167be:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00167c4:	19 d7                	sbb    edi,edx
c00167c6:	72 33                	jb     c00167fb <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00167c8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00167ce:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00167d4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00167d8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00167dc:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00167e2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00167e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00167ec:	5b                   	pop    ebx
c00167ed:	5e                   	pop    esi
c00167ee:	5f                   	pop    edi
c00167ef:	e9 b0 0a 00 00       	jmp    c00172a4 <VCache::read(unsigned long long, int, void*)>
c00167f4:	b8 05 00 00 00       	mov    eax,0x5
c00167f9:	eb 05                	jmp    c0016800 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00167fb:	b8 07 00 00 00       	mov    eax,0x7
c0016800:	5b                   	pop    ebx
c0016801:	5e                   	pop    esi
c0016802:	5f                   	pop    edi
c0016803:	c3                   	ret    

c0016804 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016804:	57                   	push   edi
c0016805:	56                   	push   esi
c0016806:	53                   	push   ebx
c0016807:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001680b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001680f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016813:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016817:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001681d:	77 41                	ja     c0016860 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001681f:	99                   	cdq    
c0016820:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016826:	01 c8                	add    eax,ecx
c0016828:	11 da                	adc    edx,ebx
c001682a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016830:	19 d7                	sbb    edi,edx
c0016832:	72 33                	jb     c0016867 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016834:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001683a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016840:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016844:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016848:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001684e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016854:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016858:	5b                   	pop    ebx
c0016859:	5e                   	pop    esi
c001685a:	5f                   	pop    edi
c001685b:	e9 4e 09 00 00       	jmp    c00171ae <VCache::write(unsigned long long, int, void*)>
c0016860:	b8 05 00 00 00       	mov    eax,0x5
c0016865:	eb 05                	jmp    c001686c <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0016867:	b8 07 00 00 00       	mov    eax,0x7
c001686c:	5b                   	pop    ebx
c001686d:	5e                   	pop    esi
c001686e:	5f                   	pop    edi
c001686f:	c3                   	ret    

c0016870 <Mouse::Mouse(char const*)>:
c0016870:	83 ec 0c             	sub    esp,0xc
c0016873:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016877:	83 ec 08             	sub    esp,0x8
c001687a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001687e:	50                   	push   eax
c001687f:	e8 a0 dc ff ff       	call   c0014524 <Device::Device(char const*)>
c0016884:	83 c4 10             	add    esp,0x10
c0016887:	ba c8 b3 02 c0       	mov    edx,0xc002b3c8
c001688c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016890:	89 10                	mov    DWORD PTR [eax],edx
c0016892:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016896:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00168a0:	90                   	nop
c00168a1:	83 c4 0c             	add    esp,0xc
c00168a4:	c3                   	ret    
c00168a5:	90                   	nop

c00168a6 <Mouse::~Mouse()>:
c00168a6:	83 ec 0c             	sub    esp,0xc
c00168a9:	ba c8 b3 02 c0       	mov    edx,0xc002b3c8
c00168ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168b2:	89 10                	mov    DWORD PTR [eax],edx
c00168b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168b8:	83 ec 0c             	sub    esp,0xc
c00168bb:	50                   	push   eax
c00168bc:	e8 45 d9 ff ff       	call   c0014206 <Device::~Device()>
c00168c1:	83 c4 10             	add    esp,0x10
c00168c4:	90                   	nop
c00168c5:	83 c4 0c             	add    esp,0xc
c00168c8:	c3                   	ret    
c00168c9:	90                   	nop

c00168ca <Mouse::~Mouse()>:
c00168ca:	83 ec 0c             	sub    esp,0xc
c00168cd:	83 ec 0c             	sub    esp,0xc
c00168d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168d4:	e8 cd ff ff ff       	call   c00168a6 <Mouse::~Mouse()>
c00168d9:	83 c4 10             	add    esp,0x10
c00168dc:	83 ec 08             	sub    esp,0x8
c00168df:	68 58 01 00 00       	push   0x158
c00168e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168e8:	e8 3a c5 ff ff       	call   c0012e27 <operator delete(void*, unsigned long)>
c00168ed:	83 c4 10             	add    esp,0x10
c00168f0:	83 c4 0c             	add    esp,0xc
c00168f3:	c3                   	ret    

c00168f4 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00168f4:	55                   	push   ebp
c00168f5:	57                   	push   edi
c00168f6:	56                   	push   esi
c00168f7:	53                   	push   ebx
c00168f8:	81 ec 28 01 00 00    	sub    esp,0x128
c00168fe:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016905:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001690c:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016913:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001691a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001691e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016922:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016929:	e8 f2 dc ff ff       	call   c0014620 <Device::getName()>
c001692e:	5a                   	pop    edx
c001692f:	59                   	pop    ecx
c0016930:	50                   	push   eax
c0016931:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0016935:	55                   	push   ebp
c0016936:	e8 01 9f fe ff       	call   c000083c <strcpy>
c001693b:	5b                   	pop    ebx
c001693c:	58                   	pop    eax
c001693d:	68 ec b3 02 c0       	push   0xc002b3ec
c0016942:	55                   	push   ebp
c0016943:	e8 34 a0 fe ff       	call   c000097c <strcat>
c0016948:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c001694f:	e8 f7 8e ff ff       	call   c000f84b <malloc>
c0016954:	83 c4 0c             	add    esp,0xc
c0016957:	89 c3                	mov    ebx,eax
c0016959:	57                   	push   edi
c001695a:	56                   	push   esi
c001695b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001695f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016963:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001696a:	55                   	push   ebp
c001696b:	50                   	push   eax
c001696c:	e8 cf fb ff ff       	call   c0016540 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016971:	83 c4 14             	add    esp,0x14
c0016974:	53                   	push   ebx
c0016975:	e8 7c fc ff ff       	call   c00165f6 <LogicalDisk::assignDriveLetter()>
c001697a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001697d:	89 c6                	mov    esi,eax
c001697f:	e8 28 fd ff ff       	call   c00166ac <LogicalDisk::mount()>
c0016984:	58                   	pop    eax
c0016985:	5a                   	pop    edx
c0016986:	53                   	push   ebx
c0016987:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001698e:	e8 a1 d9 ff ff       	call   c0014334 <Device::addChild(Device*)>
c0016993:	59                   	pop    ecx
c0016994:	89 f0                	mov    eax,esi
c0016996:	5b                   	pop    ebx
c0016997:	0f be f0             	movsx  esi,al
c001699a:	56                   	push   esi
c001699b:	68 f7 b3 02 c0       	push   0xc002b3f7
c00169a0:	e8 62 c5 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c00169a5:	81 c4 2c 01 00 00    	add    esp,0x12c
c00169ab:	5b                   	pop    ebx
c00169ac:	5e                   	pop    esi
c00169ad:	5f                   	pop    edi
c00169ae:	5d                   	pop    ebp
c00169af:	c3                   	ret    

c00169b0 <createPartitionsForDisk(PhysicalDisk*)>:
c00169b0:	55                   	push   ebp
c00169b1:	57                   	push   edi
c00169b2:	56                   	push   esi
c00169b3:	53                   	push   ebx
c00169b4:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00169ba:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00169c1:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00169c7:	3d 00 02 00 00       	cmp    eax,0x200
c00169cc:	74 27                	je     c00169f5 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00169ce:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00169d4:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00169da:	83 ec 10             	sub    esp,0x10
c00169dd:	0f a4 f7 0a          	shld   edi,esi,0xa
c00169e1:	99                   	cdq    
c00169e2:	c1 e6 0a             	shl    esi,0xa
c00169e5:	52                   	push   edx
c00169e6:	89 fd                	mov    ebp,edi
c00169e8:	50                   	push   eax
c00169e9:	55                   	push   ebp
c00169ea:	56                   	push   esi
c00169eb:	e8 14 01 01 00       	call   c0026b04 <__udivdi3>
c00169f0:	e9 b1 00 00 00       	jmp    c0016aa6 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00169f5:	83 ec 0c             	sub    esp,0xc
c00169f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00169fa:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00169fe:	56                   	push   esi
c00169ff:	6a 01                	push   0x1
c0016a01:	6a 00                	push   0x0
c0016a03:	6a 00                	push   0x0
c0016a05:	53                   	push   ebx
c0016a06:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016a09:	83 c4 20             	add    esp,0x20
c0016a0c:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016a14:	75 0a                	jne    c0016a20 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016a16:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016a1e:	74 2c                	je     c0016a4c <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016a20:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016a26:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016a2c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a32:	83 ec 10             	sub    esp,0x10
c0016a35:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016a39:	89 f7                	mov    edi,esi
c0016a3b:	c1 e0 0a             	shl    eax,0xa
c0016a3e:	c1 ff 1f             	sar    edi,0x1f
c0016a41:	57                   	push   edi
c0016a42:	56                   	push   esi
c0016a43:	52                   	push   edx
c0016a44:	50                   	push   eax
c0016a45:	e8 ba 00 01 00       	call   c0026b04 <__udivdi3>
c0016a4a:	eb 5a                	jmp    c0016aa6 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a4c:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016a53:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016a5a:	83 e1 7f             	and    ecx,0x7f
c0016a5d:	83 e0 7f             	and    eax,0x7f
c0016a60:	01 c1                	add    ecx,eax
c0016a62:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016a69:	83 e0 7f             	and    eax,0x7f
c0016a6c:	01 c1                	add    ecx,eax
c0016a6e:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016a75:	83 e0 7f             	and    eax,0x7f
c0016a78:	00 c1                	add    cl,al
c0016a7a:	74 41                	je     c0016abd <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016a7c:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016a82:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016a88:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a8e:	83 ec 10             	sub    esp,0x10
c0016a91:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016a95:	89 f7                	mov    edi,esi
c0016a97:	c1 e0 0a             	shl    eax,0xa
c0016a9a:	c1 ff 1f             	sar    edi,0x1f
c0016a9d:	57                   	push   edi
c0016a9e:	56                   	push   esi
c0016a9f:	52                   	push   edx
c0016aa0:	50                   	push   eax
c0016aa1:	e8 5e 00 01 00       	call   c0026b04 <__udivdi3>
c0016aa6:	83 c4 14             	add    esp,0x14
c0016aa9:	52                   	push   edx
c0016aaa:	50                   	push   eax
c0016aab:	6a 00                	push   0x0
c0016aad:	6a 00                	push   0x0
c0016aaf:	53                   	push   ebx
c0016ab0:	e8 3f fe ff ff       	call   c00168f4 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016ab5:	83 c4 20             	add    esp,0x20
c0016ab8:	e9 79 01 00 00       	jmp    c0016c36 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016abd:	89 f0                	mov    eax,esi
c0016abf:	31 f6                	xor    esi,esi
c0016ac1:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016ac8:	75 02                	jne    c0016acc <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016aca:	89 f1                	mov    ecx,esi
c0016acc:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016ad3:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016ada:	c1 e2 08             	shl    edx,0x8
c0016add:	c1 e7 10             	shl    edi,0x10
c0016ae0:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016ae8:	09 fa                	or     edx,edi
c0016aea:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016af2:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016af9:	83 c0 10             	add    eax,0x10
c0016afc:	09 fa                	or     edx,edi
c0016afe:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016b05:	c1 e7 18             	shl    edi,0x18
c0016b08:	09 fa                	or     edx,edi
c0016b0a:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016b11:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016b15:	c1 e7 10             	shl    edi,0x10
c0016b18:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016b1f:	c1 e2 08             	shl    edx,0x8
c0016b22:	09 fa                	or     edx,edi
c0016b24:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016b2b:	09 fa                	or     edx,edi
c0016b2d:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016b34:	c1 e7 18             	shl    edi,0x18
c0016b37:	09 fa                	or     edx,edi
c0016b39:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016b3d:	46                   	inc    esi
c0016b3e:	83 fe 04             	cmp    esi,0x4
c0016b41:	0f 85 7a ff ff ff    	jne    c0016ac1 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016b47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b4b:	83 f0 01             	xor    eax,0x1
c0016b4e:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016b52:	75 57                	jne    c0016bab <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b54:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b58:	83 f0 01             	xor    eax,0x1
c0016b5b:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016b5f:	75 4a                	jne    c0016bab <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b61:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016b65:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016b6d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016b75:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016b7b:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016b81:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016b87:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016b8b:	89 f7                	mov    edi,esi
c0016b8d:	c1 e0 0a             	shl    eax,0xa
c0016b90:	c1 ff 1f             	sar    edi,0x1f
c0016b93:	57                   	push   edi
c0016b94:	56                   	push   esi
c0016b95:	52                   	push   edx
c0016b96:	50                   	push   eax
c0016b97:	e8 68 ff 00 00       	call   c0026b04 <__udivdi3>
c0016b9c:	83 c4 10             	add    esp,0x10
c0016b9f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016ba3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016ba7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016bab:	84 c9                	test   cl,cl
c0016bad:	74 53                	je     c0016c02 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016baf:	0f b6 c9             	movzx  ecx,cl
c0016bb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bb6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016bba:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016bbe:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016bc2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016bc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016bca:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016bce:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016bd2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016bd6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016bda:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016bde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016be2:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016be6:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016bea:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016bee:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016bf2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016bf6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016bfa:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016bfe:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016c02:	31 ed                	xor    ebp,ebp
c0016c04:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016c08:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016c0c:	89 f8                	mov    eax,edi
c0016c0e:	09 f0                	or     eax,esi
c0016c10:	74 1e                	je     c0016c30 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c12:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016c16:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016c1a:	89 d1                	mov    ecx,edx
c0016c1c:	09 c1                	or     ecx,eax
c0016c1e:	74 10                	je     c0016c30 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c20:	83 ec 0c             	sub    esp,0xc
c0016c23:	57                   	push   edi
c0016c24:	56                   	push   esi
c0016c25:	52                   	push   edx
c0016c26:	50                   	push   eax
c0016c27:	53                   	push   ebx
c0016c28:	e8 c7 fc ff ff       	call   c00168f4 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016c2d:	83 c4 20             	add    esp,0x20
c0016c30:	45                   	inc    ebp
c0016c31:	83 fd 04             	cmp    ebp,0x4
c0016c34:	75 ce                	jne    c0016c04 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016c36:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016c3c:	5b                   	pop    ebx
c0016c3d:	5e                   	pop    esi
c0016c3e:	5f                   	pop    edi
c0016c3f:	5d                   	pop    ebp
c0016c40:	c3                   	ret    
c0016c41:	90                   	nop

c0016c42 <Serial::Serial(char const*)>:
c0016c42:	83 ec 0c             	sub    esp,0xc
c0016c45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c49:	83 ec 08             	sub    esp,0x8
c0016c4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c50:	50                   	push   eax
c0016c51:	e8 ce d8 ff ff       	call   c0014524 <Device::Device(char const*)>
c0016c56:	83 c4 10             	add    esp,0x10
c0016c59:	ba 24 b4 02 c0       	mov    edx,0xc002b424
c0016c5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c62:	89 10                	mov    DWORD PTR [eax],edx
c0016c64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c68:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016c72:	90                   	nop
c0016c73:	83 c4 0c             	add    esp,0xc
c0016c76:	c3                   	ret    
c0016c77:	90                   	nop

c0016c78 <Serial::~Serial()>:
c0016c78:	83 ec 0c             	sub    esp,0xc
c0016c7b:	ba 24 b4 02 c0       	mov    edx,0xc002b424
c0016c80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c84:	89 10                	mov    DWORD PTR [eax],edx
c0016c86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c8a:	83 ec 0c             	sub    esp,0xc
c0016c8d:	50                   	push   eax
c0016c8e:	e8 73 d5 ff ff       	call   c0014206 <Device::~Device()>
c0016c93:	83 c4 10             	add    esp,0x10
c0016c96:	90                   	nop
c0016c97:	83 c4 0c             	add    esp,0xc
c0016c9a:	c3                   	ret    
c0016c9b:	90                   	nop

c0016c9c <Serial::~Serial()>:
c0016c9c:	83 ec 0c             	sub    esp,0xc
c0016c9f:	83 ec 0c             	sub    esp,0xc
c0016ca2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ca6:	e8 cd ff ff ff       	call   c0016c78 <Serial::~Serial()>
c0016cab:	83 c4 10             	add    esp,0x10
c0016cae:	83 ec 08             	sub    esp,0x8
c0016cb1:	68 58 01 00 00       	push   0x158
c0016cb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cba:	e8 68 c1 ff ff       	call   c0012e27 <operator delete(void*, unsigned long)>
c0016cbf:	83 c4 10             	add    esp,0x10
c0016cc2:	83 c4 0c             	add    esp,0xc
c0016cc5:	c3                   	ret    

c0016cc6 <Timer::Timer(char const*)>:
c0016cc6:	83 ec 0c             	sub    esp,0xc
c0016cc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ccd:	83 ec 08             	sub    esp,0x8
c0016cd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cd4:	50                   	push   eax
c0016cd5:	e8 4a d8 ff ff       	call   c0014524 <Device::Device(char const*)>
c0016cda:	83 c4 10             	add    esp,0x10
c0016cdd:	ba 68 b4 02 c0       	mov    edx,0xc002b468
c0016ce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ce6:	89 10                	mov    DWORD PTR [eax],edx
c0016ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cec:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016cf6:	90                   	nop
c0016cf7:	83 c4 0c             	add    esp,0xc
c0016cfa:	c3                   	ret    
c0016cfb:	90                   	nop

c0016cfc <Timer::~Timer()>:
c0016cfc:	83 ec 0c             	sub    esp,0xc
c0016cff:	ba 68 b4 02 c0       	mov    edx,0xc002b468
c0016d04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d08:	89 10                	mov    DWORD PTR [eax],edx
c0016d0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d0e:	83 ec 0c             	sub    esp,0xc
c0016d11:	50                   	push   eax
c0016d12:	e8 ef d4 ff ff       	call   c0014206 <Device::~Device()>
c0016d17:	83 c4 10             	add    esp,0x10
c0016d1a:	90                   	nop
c0016d1b:	83 c4 0c             	add    esp,0xc
c0016d1e:	c3                   	ret    
c0016d1f:	90                   	nop

c0016d20 <Timer::~Timer()>:
c0016d20:	83 ec 0c             	sub    esp,0xc
c0016d23:	83 ec 0c             	sub    esp,0xc
c0016d26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d2a:	e8 cd ff ff ff       	call   c0016cfc <Timer::~Timer()>
c0016d2f:	83 c4 10             	add    esp,0x10
c0016d32:	83 ec 08             	sub    esp,0x8
c0016d35:	68 5c 01 00 00       	push   0x15c
c0016d3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d3e:	e8 e4 c0 ff ff       	call   c0012e27 <operator delete(void*, unsigned long)>
c0016d43:	83 c4 10             	add    esp,0x10
c0016d46:	83 c4 0c             	add    esp,0xc
c0016d49:	c3                   	ret    

c0016d4a <Timer::read()>:
c0016d4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d4e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016d54:	c3                   	ret    

c0016d55 <timerHandler(unsigned long long)>:
c0016d55:	55                   	push   ebp
c0016d56:	57                   	push   edi
c0016d57:	56                   	push   esi
c0016d58:	53                   	push   ebx
c0016d59:	83 ec 0c             	sub    esp,0xc
c0016d5c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016d60:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016d64:	01 35 50 ec 02 c0    	add    DWORD PTR ds:0xc002ec50,esi
c0016d6a:	11 3d 54 ec 02 c0    	adc    DWORD PTR ds:0xc002ec54,edi
c0016d70:	80 3d cd e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e5cd,0x0
c0016d77:	0f 84 07 01 00 00    	je     c0016e84 <timerHandler(unsigned long long)+0x12f>
c0016d7d:	e8 c5 70 00 00       	call   c001de47 <lockStuff()>
c0016d82:	83 ec 0c             	sub    esp,0xc
c0016d85:	68 1c 1b 03 c0       	push   0xc0031b1c
c0016d8a:	e8 ef 1d 01 00       	call   c0028b7e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d8f:	c7 04 24 1c 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b1c
c0016d96:	89 c3                	mov    ebx,eax
c0016d98:	e8 e9 1d 01 00       	call   c0028b86 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016d9d:	83 c4 10             	add    esp,0x10
c0016da0:	84 c0                	test   al,al
c0016da2:	74 60                	je     c0016e04 <timerHandler(unsigned long long)+0xaf>
c0016da4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016daa:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016dad:	85 c0                	test   eax,eax
c0016daf:	0f 85 91 00 00 00    	jne    c0016e46 <timerHandler(unsigned long long)+0xf1>
c0016db5:	e9 be 00 00 00       	jmp    c0016e78 <timerHandler(unsigned long long)+0x123>
c0016dba:	83 ec 0c             	sub    esp,0xc
c0016dbd:	55                   	push   ebp
c0016dbe:	e8 af 76 00 00       	call   c001e472 <unblockTask(ThreadControlBlock*)>
c0016dc3:	83 c4 10             	add    esp,0x10
c0016dc6:	39 eb                	cmp    ebx,ebp
c0016dc8:	75 12                	jne    c0016ddc <timerHandler(unsigned long long)+0x87>
c0016dca:	83 ec 0c             	sub    esp,0xc
c0016dcd:	68 1c 1b 03 c0       	push   0xc0031b1c
c0016dd2:	e8 a7 1d 01 00       	call   c0028b7e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016dd7:	89 c3                	mov    ebx,eax
c0016dd9:	83 c4 10             	add    esp,0x10
c0016ddc:	83 ec 0c             	sub    esp,0xc
c0016ddf:	68 1c 1b 03 c0       	push   0xc0031b1c
c0016de4:	e8 9d 1d 01 00       	call   c0028b86 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016de9:	83 c4 10             	add    esp,0x10
c0016dec:	84 c0                	test   al,al
c0016dee:	75 b4                	jne    c0016da4 <timerHandler(unsigned long long)+0x4f>
c0016df0:	83 ec 0c             	sub    esp,0xc
c0016df3:	68 1c 1b 03 c0       	push   0xc0031b1c
c0016df8:	e8 81 1d 01 00       	call   c0028b7e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016dfd:	83 c4 10             	add    esp,0x10
c0016e00:	39 d8                	cmp    eax,ebx
c0016e02:	74 a0                	je     c0016da4 <timerHandler(unsigned long long)+0x4f>
c0016e04:	83 ec 0c             	sub    esp,0xc
c0016e07:	68 1c 1b 03 c0       	push   0xc0031b1c
c0016e0c:	e8 6d 1d 01 00       	call   c0028b7e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e11:	c7 04 24 1c 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b1c
c0016e18:	89 c5                	mov    ebp,eax
c0016e1a:	e8 83 1d 01 00       	call   c0028ba2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016e1f:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016e22:	83 c4 10             	add    esp,0x10
c0016e25:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016e28:	39 15 50 ec 02 c0    	cmp    DWORD PTR ds:0xc002ec50,edx
c0016e2e:	a1 54 ec 02 c0       	mov    eax,ds:0xc002ec54
c0016e33:	19 c8                	sbb    eax,ecx
c0016e35:	73 83                	jae    c0016dba <timerHandler(unsigned long long)+0x65>
c0016e37:	50                   	push   eax
c0016e38:	50                   	push   eax
c0016e39:	55                   	push   ebp
c0016e3a:	68 1c 1b 03 c0       	push   0xc0031b1c
c0016e3f:	e8 0c 1e 01 00       	call   c0028c50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016e44:	eb 93                	jmp    c0016dd9 <timerHandler(unsigned long long)+0x84>
c0016e46:	80 3d cc e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e5cc,0x0
c0016e4d:	74 29                	je     c0016e78 <timerHandler(unsigned long long)+0x123>
c0016e4f:	39 c6                	cmp    esi,eax
c0016e51:	bb 00 00 00 00       	mov    ebx,0x0
c0016e56:	19 df                	sbb    edi,ebx
c0016e58:	72 19                	jb     c0016e73 <timerHandler(unsigned long long)+0x11e>
c0016e5a:	e8 c1 6f 00 00       	call   c001de20 <lockScheduler()>
c0016e5f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e64:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016e67:	e8 2a 73 00 00       	call   c001e196 <schedule()>
c0016e6c:	e8 b1 6f 00 00       	call   c001de22 <unlockScheduler()>
c0016e71:	eb 05                	jmp    c0016e78 <timerHandler(unsigned long long)+0x123>
c0016e73:	29 f0                	sub    eax,esi
c0016e75:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016e78:	83 c4 0c             	add    esp,0xc
c0016e7b:	5b                   	pop    ebx
c0016e7c:	5e                   	pop    esi
c0016e7d:	5f                   	pop    edi
c0016e7e:	5d                   	pop    ebp
c0016e7f:	e9 97 73 00 00       	jmp    c001e21b <unlockStuff()>
c0016e84:	83 c4 0c             	add    esp,0xc
c0016e87:	5b                   	pop    ebx
c0016e88:	5e                   	pop    esi
c0016e89:	5f                   	pop    edi
c0016e8a:	5d                   	pop    ebp
c0016e8b:	c3                   	ret    

c0016e8c <setupTimer(int)>:
c0016e8c:	57                   	push   edi
c0016e8d:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0016e92:	56                   	push   esi
c0016e93:	53                   	push   ebx
c0016e94:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016e98:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016e9e:	83 ec 0c             	sub    esp,0xc
c0016ea1:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016ea7:	e8 74 d7 ff ff       	call   c0014620 <Device::getName()>
c0016eac:	83 c4 10             	add    esp,0x10
c0016eaf:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016eb2:	0f 85 8d 00 00 00    	jne    c0016f45 <setupTimer(int)+0xb9>
c0016eb8:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0016ebd:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016ec4:	74 7f                	je     c0016f45 <setupTimer(int)+0xb9>
c0016ec6:	83 ec 0c             	sub    esp,0xc
c0016ec9:	68 5c 01 00 00       	push   0x15c
c0016ece:	e8 78 89 ff ff       	call   c000f84b <malloc>
c0016ed3:	89 04 24             	mov    DWORD PTR [esp],eax
c0016ed6:	89 c3                	mov    ebx,eax
c0016ed8:	e8 01 f8 00 00       	call   c00266de <PIT::PIT()>
c0016edd:	59                   	pop    ecx
c0016ede:	5f                   	pop    edi
c0016edf:	53                   	push   ebx
c0016ee0:	ff 35 c8 e5 02 c0    	push   DWORD PTR ds:0xc002e5c8
c0016ee6:	e8 49 d4 ff ff       	call   c0014334 <Device::addChild(Device*)>
c0016eeb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016eed:	6a 00                	push   0x0
c0016eef:	6a 00                	push   0x0
c0016ef1:	56                   	push   esi
c0016ef2:	53                   	push   ebx
c0016ef3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016ef6:	83 c4 14             	add    esp,0x14
c0016ef9:	68 60 01 00 00       	push   0x160
c0016efe:	e8 48 89 ff ff       	call   c000f84b <malloc>
c0016f03:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f06:	89 c7                	mov    edi,eax
c0016f08:	e8 81 f6 00 00       	call   c002658e <APICTimer::APICTimer()>
c0016f0d:	6a 00                	push   0x0
c0016f0f:	6a 00                	push   0x0
c0016f11:	56                   	push   esi
c0016f12:	57                   	push   edi
c0016f13:	e8 78 f5 00 00       	call   c0026490 <APICTimer::open(int, int, void*)>
c0016f18:	83 c4 20             	add    esp,0x20
c0016f1b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f1d:	6a 00                	push   0x0
c0016f1f:	6a 00                	push   0x0
c0016f21:	6a 00                	push   0x0
c0016f23:	53                   	push   ebx
c0016f24:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016f27:	58                   	pop    eax
c0016f28:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0016f2d:	5a                   	pop    edx
c0016f2e:	57                   	push   edi
c0016f2f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016f35:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016f3b:	e8 f4 d3 ff ff       	call   c0014334 <Device::addChild(Device*)>
c0016f40:	83 c4 10             	add    esp,0x10
c0016f43:	eb 33                	jmp    c0016f78 <setupTimer(int)+0xec>
c0016f45:	83 ec 0c             	sub    esp,0xc
c0016f48:	68 5c 01 00 00       	push   0x15c
c0016f4d:	e8 f9 88 ff ff       	call   c000f84b <malloc>
c0016f52:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f55:	89 c3                	mov    ebx,eax
c0016f57:	e8 82 f7 00 00       	call   c00266de <PIT::PIT()>
c0016f5c:	58                   	pop    eax
c0016f5d:	5a                   	pop    edx
c0016f5e:	53                   	push   ebx
c0016f5f:	ff 35 c8 e5 02 c0    	push   DWORD PTR ds:0xc002e5c8
c0016f65:	e8 ca d3 ff ff       	call   c0014334 <Device::addChild(Device*)>
c0016f6a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f6c:	6a 00                	push   0x0
c0016f6e:	6a 00                	push   0x0
c0016f70:	56                   	push   esi
c0016f71:	53                   	push   ebx
c0016f72:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016f75:	83 c4 20             	add    esp,0x20
c0016f78:	89 d8                	mov    eax,ebx
c0016f7a:	5b                   	pop    ebx
c0016f7b:	5e                   	pop    esi
c0016f7c:	5f                   	pop    edi
c0016f7d:	c3                   	ret    

c0016f7e <VCache::VCache(PhysicalDisk*)>:
c0016f7e:	53                   	push   ebx
c0016f7f:	83 ec 18             	sub    esp,0x18
c0016f82:	ba 98 b4 02 c0       	mov    edx,0xc002b498
c0016f87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f8b:	89 10                	mov    DWORD PTR [eax],edx
c0016f8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f91:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016f98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f9c:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016fa3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fa7:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016fae:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016fb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fb9:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016fc0:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016fc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fcb:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016fd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fd6:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016fda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fde:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016fe5:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016fec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ff0:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016ff4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ff8:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016ffc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017000:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0017004:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017008:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001700f:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0017017:	83 ec 0c             	sub    esp,0xc
c001701a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001701e:	e8 28 88 ff ff       	call   c000f84b <malloc>
c0017023:	83 c4 10             	add    esp,0x10
c0017026:	89 c3                	mov    ebx,eax
c0017028:	83 ec 0c             	sub    esp,0xc
c001702b:	53                   	push   ebx
c001702c:	e8 0f 6f 00 00       	call   c001df40 <Mutex::Mutex()>
c0017031:	83 c4 10             	add    esp,0x10
c0017034:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017038:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001703b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001703f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017043:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0017046:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001704a:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0017051:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017055:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001705b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001705f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017062:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017066:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001706c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017072:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0017076:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0017079:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001707c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017080:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0017084:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017088:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001708e:	05 00 01 00 00       	add    eax,0x100
c0017093:	c1 e0 04             	shl    eax,0x4
c0017096:	83 ec 0c             	sub    esp,0xc
c0017099:	50                   	push   eax
c001709a:	e8 ac 87 ff ff       	call   c000f84b <malloc>
c001709f:	83 c4 10             	add    esp,0x10
c00170a2:	89 c2                	mov    edx,eax
c00170a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170a8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00170ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170af:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00170b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170ba:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00170be:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170c2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00170c8:	c1 e0 07             	shl    eax,0x7
c00170cb:	83 ec 0c             	sub    esp,0xc
c00170ce:	50                   	push   eax
c00170cf:	e8 77 87 ff ff       	call   c000f84b <malloc>
c00170d4:	83 c4 10             	add    esp,0x10
c00170d7:	89 c2                	mov    edx,eax
c00170d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170dd:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00170e0:	90                   	nop
c00170e1:	83 c4 18             	add    esp,0x18
c00170e4:	5b                   	pop    ebx
c00170e5:	c3                   	ret    

c00170e6 <VCache::invalidateReadBuffer()>:
c00170e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170ea:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c00170f0:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00170f4:	c3                   	ret    
c00170f5:	90                   	nop

c00170f6 <VCache::writeWriteBuffer()>:
c00170f6:	53                   	push   ebx
c00170f7:	83 ec 14             	sub    esp,0x14
c00170fa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00170fe:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017101:	8b 10                	mov    edx,DWORD PTR [eax]
c0017103:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0017106:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017109:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001710c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001710f:	50                   	push   eax
c0017110:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0017113:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001711a:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0017121:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0017125:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001712c:	83 c4 28             	add    esp,0x28
c001712f:	5b                   	pop    ebx
c0017130:	c3                   	ret    
c0017131:	90                   	nop

c0017132 <VCache::~VCache()>:
c0017132:	83 ec 0c             	sub    esp,0xc
c0017135:	ba 98 b4 02 c0       	mov    edx,0xc002b498
c001713a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001713e:	89 10                	mov    DWORD PTR [eax],edx
c0017140:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017144:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0017147:	84 c0                	test   al,al
c0017149:	74 0f                	je     c001715a <VCache::~VCache()+0x28>
c001714b:	83 ec 0c             	sub    esp,0xc
c001714e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017152:	e8 9f ff ff ff       	call   c00170f6 <VCache::writeWriteBuffer()>
c0017157:	83 c4 10             	add    esp,0x10
c001715a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001715e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0017161:	83 ec 0c             	sub    esp,0xc
c0017164:	50                   	push   eax
c0017165:	e8 f1 86 ff ff       	call   c000f85b <free>
c001716a:	83 c4 10             	add    esp,0x10
c001716d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017171:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017174:	83 ec 0c             	sub    esp,0xc
c0017177:	50                   	push   eax
c0017178:	e8 de 86 ff ff       	call   c000f85b <free>
c001717d:	83 c4 10             	add    esp,0x10
c0017180:	90                   	nop
c0017181:	83 c4 0c             	add    esp,0xc
c0017184:	c3                   	ret    
c0017185:	90                   	nop

c0017186 <VCache::~VCache()>:
c0017186:	83 ec 0c             	sub    esp,0xc
c0017189:	83 ec 0c             	sub    esp,0xc
c001718c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017190:	e8 9d ff ff ff       	call   c0017132 <VCache::~VCache()>
c0017195:	83 c4 10             	add    esp,0x10
c0017198:	83 ec 08             	sub    esp,0x8
c001719b:	6a 44                	push   0x44
c001719d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171a1:	e8 81 bc ff ff       	call   c0012e27 <operator delete(void*, unsigned long)>
c00171a6:	83 c4 10             	add    esp,0x10
c00171a9:	83 c4 0c             	add    esp,0xc
c00171ac:	c3                   	ret    
c00171ad:	90                   	nop

c00171ae <VCache::write(unsigned long long, int, void*)>:
c00171ae:	55                   	push   ebp
c00171af:	57                   	push   edi
c00171b0:	56                   	push   esi
c00171b1:	53                   	push   ebx
c00171b2:	83 ec 28             	sub    esp,0x28
c00171b5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00171b9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00171bd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00171c1:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00171c5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00171c8:	e8 0f 72 00 00       	call   c001e3dc <Semaphore::acquire()>
c00171cd:	83 c4 10             	add    esp,0x10
c00171d0:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00171d4:	74 0c                	je     c00171e2 <VCache::write(unsigned long long, int, void*)+0x34>
c00171d6:	83 ec 0c             	sub    esp,0xc
c00171d9:	53                   	push   ebx
c00171da:	e8 07 ff ff ff       	call   c00170e6 <VCache::invalidateReadBuffer()>
c00171df:	83 c4 10             	add    esp,0x10
c00171e2:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00171e6:	74 66                	je     c001724e <VCache::write(unsigned long long, int, void*)+0xa0>
c00171e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00171eb:	99                   	cdq    
c00171ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00171f0:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00171f3:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00171f6:	89 c1                	mov    ecx,eax
c00171f8:	89 d0                	mov    eax,edx
c00171fa:	31 f1                	xor    ecx,esi
c00171fc:	31 f8                	xor    eax,edi
c00171fe:	89 ca                	mov    edx,ecx
c0017200:	09 c2                	or     edx,eax
c0017202:	75 3e                	jne    c0017242 <VCache::write(unsigned long long, int, void*)+0x94>
c0017204:	83 fd 01             	cmp    ebp,0x1
c0017207:	75 39                	jne    c0017242 <VCache::write(unsigned long long, int, void*)+0x94>
c0017209:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001720c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017212:	51                   	push   ecx
c0017213:	50                   	push   eax
c0017214:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017218:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001721c:	0f af c8             	imul   ecx,eax
c001721f:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0017222:	51                   	push   ecx
c0017223:	e8 24 95 fe ff       	call   c000074c <memcpy>
c0017228:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001722b:	83 c4 10             	add    esp,0x10
c001722e:	40                   	inc    eax
c001722f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0017232:	83 c0 80             	add    eax,0xffffff80
c0017235:	75 57                	jne    c001728e <VCache::write(unsigned long long, int, void*)+0xe0>
c0017237:	83 ec 0c             	sub    esp,0xc
c001723a:	53                   	push   ebx
c001723b:	e8 b6 fe ff ff       	call   c00170f6 <VCache::writeWriteBuffer()>
c0017240:	eb 34                	jmp    c0017276 <VCache::write(unsigned long long, int, void*)+0xc8>
c0017242:	83 ec 0c             	sub    esp,0xc
c0017245:	53                   	push   ebx
c0017246:	e8 ab fe ff ff       	call   c00170f6 <VCache::writeWriteBuffer()>
c001724b:	83 c4 10             	add    esp,0x10
c001724e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017251:	83 fd 7f             	cmp    ebp,0x7f
c0017254:	7f 25                	jg     c001727b <VCache::write(unsigned long long, int, void*)+0xcd>
c0017256:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0017259:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001725c:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c001725f:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0017263:	52                   	push   edx
c0017264:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001726a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001726e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0017271:	e8 d6 94 fe ff       	call   c000074c <memcpy>
c0017276:	83 c4 10             	add    esp,0x10
c0017279:	eb 13                	jmp    c001728e <VCache::write(unsigned long long, int, void*)+0xe0>
c001727b:	83 ec 0c             	sub    esp,0xc
c001727e:	8b 10                	mov    edx,DWORD PTR [eax]
c0017280:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017284:	55                   	push   ebp
c0017285:	57                   	push   edi
c0017286:	56                   	push   esi
c0017287:	50                   	push   eax
c0017288:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001728b:	83 c4 20             	add    esp,0x20
c001728e:	83 ec 0c             	sub    esp,0xc
c0017291:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017294:	e8 f1 76 00 00       	call   c001e98a <Semaphore::release()>
c0017299:	83 c4 2c             	add    esp,0x2c
c001729c:	31 c0                	xor    eax,eax
c001729e:	5b                   	pop    ebx
c001729f:	5e                   	pop    esi
c00172a0:	5f                   	pop    edi
c00172a1:	5d                   	pop    ebp
c00172a2:	c3                   	ret    
c00172a3:	90                   	nop

c00172a4 <VCache::read(unsigned long long, int, void*)>:
c00172a4:	55                   	push   ebp
c00172a5:	57                   	push   edi
c00172a6:	56                   	push   esi
c00172a7:	53                   	push   ebx
c00172a8:	83 ec 28             	sub    esp,0x28
c00172ab:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00172af:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00172b3:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00172b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00172bb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00172bf:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00172c3:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c00172c7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00172ca:	e8 0d 71 00 00       	call   c001e3dc <Semaphore::acquire()>
c00172cf:	83 c4 10             	add    esp,0x10
c00172d2:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00172d6:	74 0c                	je     c00172e4 <VCache::read(unsigned long long, int, void*)+0x40>
c00172d8:	83 ec 0c             	sub    esp,0xc
c00172db:	53                   	push   ebx
c00172dc:	e8 15 fe ff ff       	call   c00170f6 <VCache::writeWriteBuffer()>
c00172e1:	83 c4 10             	add    esp,0x10
c00172e4:	83 fe 01             	cmp    esi,0x1
c00172e7:	0f 85 80 00 00 00    	jne    c001736d <VCache::read(unsigned long long, int, void*)+0xc9>
c00172ed:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00172f0:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c00172f7:	75 74                	jne    c001736d <VCache::read(unsigned long long, int, void*)+0xc9>
c00172f9:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00172fc:	89 d1                	mov    ecx,edx
c00172fe:	f7 d9                	neg    ecx
c0017300:	89 cf                	mov    edi,ecx
c0017302:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0017306:	c1 ff 1f             	sar    edi,0x1f
c0017309:	23 0c 24             	and    ecx,DWORD PTR [esp]
c001730c:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0017310:	89 ce                	mov    esi,ecx
c0017312:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017316:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c001731a:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001731e:	89 cf                	mov    edi,ecx
c0017320:	74 0a                	je     c001732c <VCache::read(unsigned long long, int, void*)+0x88>
c0017322:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0017325:	75 05                	jne    c001732c <VCache::read(unsigned long long, int, void*)+0x88>
c0017327:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c001732a:	74 1c                	je     c0017348 <VCache::read(unsigned long long, int, void*)+0xa4>
c001732c:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0017330:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0017333:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0017336:	83 ec 0c             	sub    esp,0xc
c0017339:	8b 08                	mov    ecx,DWORD PTR [eax]
c001733b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001733e:	52                   	push   edx
c001733f:	57                   	push   edi
c0017340:	56                   	push   esi
c0017341:	50                   	push   eax
c0017342:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0017345:	83 c4 20             	add    esp,0x20
c0017348:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001734b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017351:	50                   	push   eax
c0017352:	52                   	push   edx
c0017353:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017356:	48                   	dec    eax
c0017357:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c001735b:	0f af c2             	imul   eax,edx
c001735e:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0017361:	50                   	push   eax
c0017362:	55                   	push   ebp
c0017363:	e8 e4 93 fe ff       	call   c000074c <memcpy>
c0017368:	83 c4 10             	add    esp,0x10
c001736b:	eb 21                	jmp    c001738e <VCache::read(unsigned long long, int, void*)+0xea>
c001736d:	83 ec 0c             	sub    esp,0xc
c0017370:	53                   	push   ebx
c0017371:	e8 70 fd ff ff       	call   c00170e6 <VCache::invalidateReadBuffer()>
c0017376:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017379:	8b 10                	mov    edx,DWORD PTR [eax]
c001737b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001737e:	56                   	push   esi
c001737f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017383:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017387:	50                   	push   eax
c0017388:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001738b:	83 c4 20             	add    esp,0x20
c001738e:	83 ec 0c             	sub    esp,0xc
c0017391:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017394:	e8 f1 75 00 00       	call   c001e98a <Semaphore::release()>
c0017399:	83 c4 2c             	add    esp,0x2c
c001739c:	31 c0                	xor    eax,eax
c001739e:	5b                   	pop    ebx
c001739f:	5e                   	pop    esi
c00173a0:	5f                   	pop    edi
c00173a1:	5d                   	pop    ebp
c00173a2:	c3                   	ret    
c00173a3:	90                   	nop

c00173a4 <Video::putrect(int, int, int, int, unsigned int)>:
c00173a4:	55                   	push   ebp
c00173a5:	57                   	push   edi
c00173a6:	56                   	push   esi
c00173a7:	53                   	push   ebx
c00173a8:	83 ec 1c             	sub    esp,0x1c
c00173ab:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00173af:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00173b3:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00173b7:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00173bb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00173bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00173c3:	01 df                	add    edi,ebx
c00173c5:	39 fb                	cmp    ebx,edi
c00173c7:	7d 1f                	jge    c00173e8 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c00173c9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00173cd:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00173d1:	7d 12                	jge    c00173e5 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c00173d3:	8b 16                	mov    edx,DWORD PTR [esi]
c00173d5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00173d9:	53                   	push   ebx
c00173da:	55                   	push   ebp
c00173db:	45                   	inc    ebp
c00173dc:	56                   	push   esi
c00173dd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00173e0:	83 c4 10             	add    esp,0x10
c00173e3:	eb e8                	jmp    c00173cd <Video::putrect(int, int, int, int, unsigned int)+0x29>
c00173e5:	43                   	inc    ebx
c00173e6:	eb dd                	jmp    c00173c5 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c00173e8:	83 c4 1c             	add    esp,0x1c
c00173eb:	5b                   	pop    ebx
c00173ec:	5e                   	pop    esi
c00173ed:	5f                   	pop    edi
c00173ee:	5d                   	pop    ebp
c00173ef:	c3                   	ret    

c00173f0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c00173f0:	55                   	push   ebp
c00173f1:	57                   	push   edi
c00173f2:	31 ff                	xor    edi,edi
c00173f4:	56                   	push   esi
c00173f5:	53                   	push   ebx
c00173f6:	83 ec 1c             	sub    esp,0x1c
c00173f9:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00173fd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0017401:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0017408:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001740d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017411:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0017415:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017419:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001741c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017420:	01 f9                	add    ecx,edi
c0017422:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0017426:	7d 2f                	jge    c0017457 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0017428:	31 f6                	xor    esi,esi
c001742a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001742e:	01 f2                	add    edx,esi
c0017430:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0017434:	7d 1a                	jge    c0017450 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0017436:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017439:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001743c:	46                   	inc    esi
c001743d:	51                   	push   ecx
c001743e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0017442:	52                   	push   edx
c0017443:	55                   	push   ebp
c0017444:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017447:	83 c4 10             	add    esp,0x10
c001744a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001744e:	eb da                	jmp    c001742a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0017450:	47                   	inc    edi
c0017451:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0017455:	eb c5                	jmp    c001741c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0017457:	83 c4 1c             	add    esp,0x1c
c001745a:	5b                   	pop    ebx
c001745b:	5e                   	pop    esi
c001745c:	5f                   	pop    edi
c001745d:	5d                   	pop    ebp
c001745e:	c3                   	ret    
c001745f:	90                   	nop

c0017460 <Video::blit(unsigned int*, int, int, int, int)>:
c0017460:	55                   	push   ebp
c0017461:	57                   	push   edi
c0017462:	56                   	push   esi
c0017463:	53                   	push   ebx
c0017464:	83 ec 1c             	sub    esp,0x1c
c0017467:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001746b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001746f:	85 c0                	test   eax,eax
c0017471:	79 02                	jns    c0017475 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0017473:	31 c0                	xor    eax,eax
c0017475:	c1 e0 02             	shl    eax,0x2
c0017478:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001747c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017480:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017484:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0017488:	39 d8                	cmp    eax,ebx
c001748a:	7e 49                	jle    c00174d5 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001748c:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017492:	7c 41                	jl     c00174d5 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017494:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0017498:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001749c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00174a0:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00174a4:	39 f9                	cmp    ecx,edi
c00174a6:	7e 22                	jle    c00174ca <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00174a8:	83 c5 04             	add    ebp,0x4
c00174ab:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00174b1:	7c 14                	jl     c00174c7 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00174b3:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00174b5:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00174b8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00174bc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00174c0:	56                   	push   esi
c00174c1:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00174c4:	83 c4 10             	add    esp,0x10
c00174c7:	47                   	inc    edi
c00174c8:	eb d2                	jmp    c001749c <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00174ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00174ce:	43                   	inc    ebx
c00174cf:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00174d3:	eb ab                	jmp    c0017480 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00174d5:	83 c4 1c             	add    esp,0x1c
c00174d8:	5b                   	pop    ebx
c00174d9:	5e                   	pop    esi
c00174da:	5f                   	pop    edi
c00174db:	5d                   	pop    ebp
c00174dc:	c3                   	ret    
c00174dd:	90                   	nop

c00174de <Video::clearScreen(unsigned int)>:
c00174de:	57                   	push   edi
c00174df:	56                   	push   esi
c00174e0:	53                   	push   ebx
c00174e1:	31 db                	xor    ebx,ebx
c00174e3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00174e7:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00174ed:	7e 1f                	jle    c001750e <Video::clearScreen(unsigned int)+0x30>
c00174ef:	31 ff                	xor    edi,edi
c00174f1:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00174f7:	7e 12                	jle    c001750b <Video::clearScreen(unsigned int)+0x2d>
c00174f9:	8b 06                	mov    eax,DWORD PTR [esi]
c00174fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00174ff:	53                   	push   ebx
c0017500:	57                   	push   edi
c0017501:	47                   	inc    edi
c0017502:	56                   	push   esi
c0017503:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017506:	83 c4 10             	add    esp,0x10
c0017509:	eb e6                	jmp    c00174f1 <Video::clearScreen(unsigned int)+0x13>
c001750b:	43                   	inc    ebx
c001750c:	eb d9                	jmp    c00174e7 <Video::clearScreen(unsigned int)+0x9>
c001750e:	5b                   	pop    ebx
c001750f:	5e                   	pop    esi
c0017510:	5f                   	pop    edi
c0017511:	c3                   	ret    

c0017512 <Video::putpixel(int, int, unsigned int)>:
c0017512:	c7 44 24 04 a0 b4 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b4a0
c001751a:	e9 26 31 00 00       	jmp    c001a645 <Krnl::panic(char const*)>
c001751f:	90                   	nop

c0017520 <Video::Video(char const*)>:
c0017520:	83 ec 0c             	sub    esp,0xc
c0017523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017527:	83 ec 08             	sub    esp,0x8
c001752a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001752e:	50                   	push   eax
c001752f:	e8 f0 cf ff ff       	call   c0014524 <Device::Device(char const*)>
c0017534:	83 c4 10             	add    esp,0x10
c0017537:	ba 24 b5 02 c0       	mov    edx,0xc002b524
c001753c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017540:	89 10                	mov    DWORD PTR [eax],edx
c0017542:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017546:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0017550:	90                   	nop
c0017551:	83 c4 0c             	add    esp,0xc
c0017554:	c3                   	ret    
c0017555:	90                   	nop

c0017556 <Video::~Video()>:
c0017556:	83 ec 0c             	sub    esp,0xc
c0017559:	ba 24 b5 02 c0       	mov    edx,0xc002b524
c001755e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017562:	89 10                	mov    DWORD PTR [eax],edx
c0017564:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017568:	83 ec 0c             	sub    esp,0xc
c001756b:	50                   	push   eax
c001756c:	e8 95 cc ff ff       	call   c0014206 <Device::~Device()>
c0017571:	83 c4 10             	add    esp,0x10
c0017574:	90                   	nop
c0017575:	83 c4 0c             	add    esp,0xc
c0017578:	c3                   	ret    
c0017579:	90                   	nop

c001757a <Video::~Video()>:
c001757a:	83 ec 0c             	sub    esp,0xc
c001757d:	83 ec 0c             	sub    esp,0xc
c0017580:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017584:	e8 cd ff ff ff       	call   c0017556 <Video::~Video()>
c0017589:	83 c4 10             	add    esp,0x10
c001758c:	83 ec 08             	sub    esp,0x8
c001758f:	68 64 01 00 00       	push   0x164
c0017594:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017598:	e8 8a b8 ff ff       	call   c0012e27 <operator delete(void*, unsigned long)>
c001759d:	83 c4 10             	add    esp,0x10
c00175a0:	83 c4 0c             	add    esp,0xc
c00175a3:	c3                   	ret    

c00175a4 <Video::isMonochrome()>:
c00175a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00175a8:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00175ae:	c3                   	ret    
c00175af:	90                   	nop

c00175b0 <Video::getWidth()>:
c00175b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00175b4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00175ba:	c3                   	ret    
c00175bb:	90                   	nop

c00175bc <Video::getHeight()>:
c00175bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00175c0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00175c6:	c3                   	ret    
c00175c7:	90                   	nop

c00175c8 <Video::drawCursor(int, int, unsigned char*, int)>:
c00175c8:	55                   	push   ebp
c00175c9:	57                   	push   edi
c00175ca:	56                   	push   esi
c00175cb:	53                   	push   ebx
c00175cc:	83 ec 2c             	sub    esp,0x2c
c00175cf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00175d3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00175d7:	83 f8 01             	cmp    eax,0x1
c00175da:	19 c9                	sbb    ecx,ecx
c00175dc:	31 db                	xor    ebx,ebx
c00175de:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00175e2:	89 cd                	mov    ebp,ecx
c00175e4:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00175ec:	f7 d5                	not    ebp
c00175ee:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00175f4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00175f8:	01 d8                	add    eax,ebx
c00175fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00175fe:	56                   	push   esi
c00175ff:	e8 b8 ff ff ff       	call   c00175bc <Video::getHeight()>
c0017604:	59                   	pop    ecx
c0017605:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017609:	7e 70                	jle    c001767b <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c001760b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001760f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017613:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0017616:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001761a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001761e:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0017625:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017629:	89 f8                	mov    eax,edi
c001762b:	83 c0 20             	add    eax,0x20
c001762e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017632:	56                   	push   esi
c0017633:	e8 78 ff ff ff       	call   c00175b0 <Video::getWidth()>
c0017638:	5a                   	pop    edx
c0017639:	39 c7                	cmp    edi,eax
c001763b:	7d 34                	jge    c0017671 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c001763d:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0017642:	74 05                	je     c0017649 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0017644:	8b 06                	mov    eax,DWORD PTR [esi]
c0017646:	55                   	push   ebp
c0017647:	eb 0d                	jmp    c0017656 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0017649:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001764e:	74 12                	je     c0017662 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0017650:	8b 06                	mov    eax,DWORD PTR [esi]
c0017652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017656:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001765a:	57                   	push   edi
c001765b:	56                   	push   esi
c001765c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001765f:	83 c4 10             	add    esp,0x10
c0017662:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0017666:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001766a:	47                   	inc    edi
c001766b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001766f:	75 c1                	jne    c0017632 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0017671:	43                   	inc    ebx
c0017672:	83 fb 20             	cmp    ebx,0x20
c0017675:	0f 85 79 ff ff ff    	jne    c00175f4 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c001767b:	83 c4 2c             	add    esp,0x2c
c001767e:	5b                   	pop    ebx
c001767f:	5e                   	pop    esi
c0017680:	5f                   	pop    edi
c0017681:	5d                   	pop    ebp
c0017682:	c3                   	ret    
c0017683:	90                   	nop

c0017684 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0017684:	55                   	push   ebp
c0017685:	57                   	push   edi
c0017686:	56                   	push   esi
c0017687:	53                   	push   ebx
c0017688:	83 ec 28             	sub    esp,0x28
c001768b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001768f:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0017693:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0017697:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001769b:	c1 e7 08             	shl    edi,0x8
c001769e:	01 c7                	add    edi,eax
c00176a0:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00176a4:	c1 e0 08             	shl    eax,0x8
c00176a7:	01 d0                	add    eax,edx
c00176a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00176ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00176b1:	0f af c7             	imul   eax,edi
c00176b4:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00176bb:	50                   	push   eax
c00176bc:	e8 8a 81 ff ff       	call   c000f84b <malloc>
c00176c1:	83 c4 10             	add    esp,0x10
c00176c4:	89 c5                	mov    ebp,eax
c00176c6:	85 c0                	test   eax,eax
c00176c8:	75 15                	jne    c00176df <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c00176ca:	83 ec 0c             	sub    esp,0xc
c00176cd:	68 c1 b4 02 c0       	push   0xc002b4c1
c00176d2:	e8 30 b8 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c00176d7:	83 c4 10             	add    esp,0x10
c00176da:	e9 1c 01 00 00       	jmp    c00177fb <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00176df:	be 12 00 00 00       	mov    esi,0x12
c00176e4:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00176e8:	74 11                	je     c00176fb <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c00176ea:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c00176ee:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c00176f2:	c1 fe 03             	sar    esi,0x3
c00176f5:	0f af f0             	imul   esi,eax
c00176f8:	83 c6 12             	add    esi,0x12
c00176fb:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00176ff:	74 04                	je     c0017705 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0017701:	85 ff                	test   edi,edi
c0017703:	75 12                	jne    c0017717 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0017705:	83 ec 0c             	sub    esp,0xc
c0017708:	68 d8 b4 02 c0       	push   0xc002b4d8
c001770d:	e8 f5 b7 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0017712:	e9 ce 00 00 00       	jmp    c00177e5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0017717:	52                   	push   edx
c0017718:	52                   	push   edx
c0017719:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c001771d:	50                   	push   eax
c001771e:	68 ed b4 02 c0       	push   0xc002b4ed
c0017723:	e8 df b7 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0017728:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c001772c:	83 c4 10             	add    esp,0x10
c001772f:	80 fa 02             	cmp    dl,0x2
c0017732:	0f 85 98 00 00 00    	jne    c00177d0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0017738:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001773d:	75 10                	jne    c001774f <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001773f:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017743:	75 0a                	jne    c001774f <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017745:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017748:	83 e8 18             	sub    eax,0x18
c001774b:	a8 f7                	test   al,0xf7
c001774d:	74 0a                	je     c0017759 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c001774f:	83 ec 0c             	sub    esp,0xc
c0017752:	68 fa b4 02 c0       	push   0xc002b4fa
c0017757:	eb 7f                	jmp    c00177d8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0017759:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017761:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017769:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001776d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017775:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0017779:	75 0c                	jne    c0017787 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c001777b:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0017780:	c1 e0 18             	shl    eax,0x18
c0017783:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017787:	41                   	inc    ecx
c0017788:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c001778d:	c1 e2 10             	shl    edx,0x10
c0017790:	89 d0                	mov    eax,edx
c0017792:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0017797:	c1 e2 08             	shl    edx,0x8
c001779a:	09 c2                	or     edx,eax
c001779c:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c00177a0:	09 c2                	or     edx,eax
c00177a2:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c00177a6:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c00177aa:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00177ae:	c1 f8 03             	sar    eax,0x3
c00177b1:	01 c6                	add    esi,eax
c00177b3:	89 c8                	mov    eax,ecx
c00177b5:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00177b9:	39 c7                	cmp    edi,eax
c00177bb:	7f b0                	jg     c001776d <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c00177bd:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00177c1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00177c5:	39 14 24             	cmp    DWORD PTR [esp],edx
c00177c8:	7e 22                	jle    c00177ec <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c00177ca:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00177ce:	eb 99                	jmp    c0017769 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c00177d0:	50                   	push   eax
c00177d1:	50                   	push   eax
c00177d2:	52                   	push   edx
c00177d3:	68 08 b5 02 c0       	push   0xc002b508
c00177d8:	e8 2a b7 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c00177dd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00177e0:	e8 76 80 ff ff       	call   c000f85b <free>
c00177e5:	83 c4 10             	add    esp,0x10
c00177e8:	31 ed                	xor    ebp,ebp
c00177ea:	eb 0f                	jmp    c00177fb <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00177ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00177f0:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00177f3:	89 38                	mov    DWORD PTR [eax],edi
c00177f5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00177f9:	89 08                	mov    DWORD PTR [eax],ecx
c00177fb:	83 c4 1c             	add    esp,0x1c
c00177fe:	89 e8                	mov    eax,ebp
c0017800:	5b                   	pop    ebx
c0017801:	5e                   	pop    esi
c0017802:	5f                   	pop    edi
c0017803:	5d                   	pop    ebp
c0017804:	c3                   	ret    
c0017805:	90                   	nop

c0017806 <Video::putTGA(int, int, unsigned char*, int)>:
c0017806:	55                   	push   ebp
c0017807:	57                   	push   edi
c0017808:	56                   	push   esi
c0017809:	53                   	push   ebx
c001780a:	83 ec 28             	sub    esp,0x28
c001780d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0017811:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017815:	50                   	push   eax
c0017816:	8d 44 24 18          	lea    eax,[esp+0x18]
c001781a:	50                   	push   eax
c001781b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001781f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017823:	56                   	push   esi
c0017824:	e8 5b fe ff ff       	call   c0017684 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017829:	83 c4 20             	add    esp,0x20
c001782c:	85 c0                	test   eax,eax
c001782e:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017832:	74 35                	je     c0017869 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017834:	89 c7                	mov    edi,eax
c0017836:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001783a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001783e:	39 d8                	cmp    eax,ebx
c0017840:	7e 27                	jle    c0017869 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017842:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017846:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001784a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001784e:	39 e8                	cmp    eax,ebp
c0017850:	7e 14                	jle    c0017866 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0017852:	8b 06                	mov    eax,DWORD PTR [esi]
c0017854:	83 c7 04             	add    edi,0x4
c0017857:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c001785a:	53                   	push   ebx
c001785b:	55                   	push   ebp
c001785c:	45                   	inc    ebp
c001785d:	56                   	push   esi
c001785e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017861:	83 c4 10             	add    esp,0x10
c0017864:	eb e0                	jmp    c0017846 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0017866:	43                   	inc    ebx
c0017867:	eb cd                	jmp    c0017836 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0017869:	83 c4 1c             	add    esp,0x1c
c001786c:	5b                   	pop    ebx
c001786d:	5e                   	pop    esi
c001786e:	5f                   	pop    edi
c001786f:	5d                   	pop    ebp
c0017870:	c3                   	ret    
c0017871:	90                   	nop

c0017872 <ACPI::close(int, int, void*)>:
c0017872:	83 ec 1c             	sub    esp,0x1c
c0017875:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001787d:	74 0a                	je     c0017889 <ACPI::close(int, int, void*)+0x17>
c001787f:	b8 00 00 00 00       	mov    eax,0x0
c0017884:	e9 9a 00 00 00       	jmp    c0017923 <ACPI::close(int, int, void*)+0xb1>
c0017889:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001788e:	75 37                	jne    c00178c7 <ACPI::close(int, int, void*)+0x55>
c0017890:	83 ec 0c             	sub    esp,0xc
c0017893:	68 64 b5 02 c0       	push   0xc002b564
c0017898:	e8 6a b6 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001789d:	83 c4 10             	add    esp,0x10
c00178a0:	a1 88 0c 03 c0       	mov    eax,ds:0xc0030c88
c00178a5:	85 c0                	test   eax,eax
c00178a7:	74 07                	je     c00178b0 <ACPI::close(int, int, void*)+0x3e>
c00178a9:	a1 88 0c 03 c0       	mov    eax,ds:0xc0030c88
c00178ae:	ff d0                	call   eax
c00178b0:	83 ec 0c             	sub    esp,0xc
c00178b3:	68 94 b6 02 c0       	push   0xc002b694
c00178b8:	e8 88 2d 00 00       	call   c001a645 <Krnl::panic(char const*)>
c00178bd:	83 c4 10             	add    esp,0x10
c00178c0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00178c5:	eb 5c                	jmp    c0017923 <ACPI::close(int, int, void*)+0xb1>
c00178c7:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00178cc:	75 50                	jne    c001791e <ACPI::close(int, int, void*)+0xac>
c00178ce:	a1 84 0c 03 c0       	mov    eax,ds:0xc0030c84
c00178d3:	85 c0                	test   eax,eax
c00178d5:	74 07                	je     c00178de <ACPI::close(int, int, void*)+0x6c>
c00178d7:	a1 84 0c 03 c0       	mov    eax,ds:0xc0030c84
c00178dc:	ff d0                	call   eax
c00178de:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00178e3:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00178e8:	83 e0 02             	and    eax,0x2
c00178eb:	74 1c                	je     c0017909 <ACPI::close(int, int, void*)+0x97>
c00178ed:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00178f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178f8:	89 c2                	mov    edx,eax
c00178fa:	ec                   	in     al,dx
c00178fb:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00178ff:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017903:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017907:	eb da                	jmp    c00178e3 <ACPI::close(int, int, void*)+0x71>
c0017909:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0017910:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0017915:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017919:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001791d:	ee                   	out    dx,al
c001791e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017923:	83 c4 1c             	add    esp,0x1c
c0017926:	c3                   	ret    

c0017927 <findRSDP()>:
c0017927:	83 ec 1c             	sub    esp,0x1c
c001792a:	83 ec 0c             	sub    esp,0xc
c001792d:	68 71 b5 02 c0       	push   0xc002b571
c0017932:	e8 d0 b5 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0017937:	83 c4 10             	add    esp,0x10
c001793a:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001793f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017945:	83 e0 04             	and    eax,0x4
c0017948:	84 c0                	test   al,al
c001794a:	75 07                	jne    c0017953 <findRSDP()+0x2c>
c001794c:	b8 00 00 00 00       	mov    eax,0x0
c0017951:	eb 6a                	jmp    c00179bd <findRSDP()+0x96>
c0017953:	a1 14 e6 02 c0       	mov    eax,ds:0xc002e614
c0017958:	3d ff 07 00 00       	cmp    eax,0x7ff
c001795d:	7f 1b                	jg     c001797a <findRSDP()+0x53>
c001795f:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0017964:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001796a:	83 e2 fb             	and    edx,0xfffffffb
c001796d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017973:	b8 00 00 00 00       	mov    eax,0x0
c0017978:	eb 43                	jmp    c00179bd <findRSDP()+0x96>
c001797a:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017982:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001798a:	77 2c                	ja     c00179b8 <findRSDP()+0x91>
c001798c:	83 ec 04             	sub    esp,0x4
c001798f:	6a 08                	push   0x8
c0017991:	68 7f b5 02 c0       	push   0xc002b57f
c0017996:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001799a:	e8 a9 8c fe ff       	call   c0000648 <memcmp>
c001799f:	83 c4 10             	add    esp,0x10
c00179a2:	85 c0                	test   eax,eax
c00179a4:	0f 94 c0             	sete   al
c00179a7:	84 c0                	test   al,al
c00179a9:	74 06                	je     c00179b1 <findRSDP()+0x8a>
c00179ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00179af:	eb 0c                	jmp    c00179bd <findRSDP()+0x96>
c00179b1:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00179b6:	eb ca                	jmp    c0017982 <findRSDP()+0x5b>
c00179b8:	b8 00 00 00 00       	mov    eax,0x0
c00179bd:	83 c4 1c             	add    esp,0x1c
c00179c0:	c3                   	ret    

c00179c1 <loadACPITables(unsigned char*)>:
c00179c1:	56                   	push   esi
c00179c2:	53                   	push   ebx
c00179c3:	83 ec 44             	sub    esp,0x44
c00179c6:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c00179cb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00179d1:	83 e0 04             	and    eax,0x4
c00179d4:	84 c0                	test   al,al
c00179d6:	0f 84 05 02 00 00    	je     c0017be1 <loadACPITables(unsigned char*)+0x220>
c00179dc:	a0 a0 0e 03 c0       	mov    al,ds:0xc0030ea0
c00179e1:	84 c0                	test   al,al
c00179e3:	74 75                	je     c0017a5a <loadACPITables(unsigned char*)+0x99>
c00179e5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00179e9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00179ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00179f1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179f4:	83 e8 24             	sub    eax,0x24
c00179f7:	c1 e8 03             	shr    eax,0x3
c00179fa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00179fe:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017a06:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017a0a:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0017a0e:	0f 8d b2 00 00 00    	jge    c0017ac6 <loadACPITables(unsigned char*)+0x105>
c0017a14:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a18:	83 c0 24             	add    eax,0x24
c0017a1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017a1f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a23:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017a27:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017a2b:	c1 e0 03             	shl    eax,0x3
c0017a2e:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0017a32:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017a36:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017a39:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a3b:	89 c1                	mov    ecx,eax
c0017a3d:	a1 8c 0c 03 c0       	mov    eax,ds:0xc0030c8c
c0017a42:	8d 50 01             	lea    edx,[eax+0x1]
c0017a45:	89 15 8c 0c 03 c0    	mov    DWORD PTR ds:0xc0030c8c,edx
c0017a4b:	89 ca                	mov    edx,ecx
c0017a4d:	89 14 c5 a4 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf35c],edx
c0017a54:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0017a58:	eb ac                	jmp    c0017a06 <loadACPITables(unsigned char*)+0x45>
c0017a5a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a5e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017a62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a66:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a69:	83 e8 24             	sub    eax,0x24
c0017a6c:	c1 e8 02             	shr    eax,0x2
c0017a6f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017a73:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0017a7b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017a7f:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0017a83:	7d 41                	jge    c0017ac6 <loadACPITables(unsigned char*)+0x105>
c0017a85:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a89:	83 c0 24             	add    eax,0x24
c0017a8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017a90:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017a94:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a98:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017a9c:	c1 e0 02             	shl    eax,0x2
c0017a9f:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0017aa3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017aa7:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017aa9:	a1 8c 0c 03 c0       	mov    eax,ds:0xc0030c8c
c0017aae:	8d 50 01             	lea    edx,[eax+0x1]
c0017ab1:	89 15 8c 0c 03 c0    	mov    DWORD PTR ds:0xc0030c8c,edx
c0017ab7:	89 ca                	mov    edx,ecx
c0017ab9:	89 14 c5 a4 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf35c],edx
c0017ac0:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017ac4:	eb b5                	jmp    c0017a7b <loadACPITables(unsigned char*)+0xba>
c0017ac6:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017ace:	a1 8c 0c 03 c0       	mov    eax,ds:0xc0030c8c
c0017ad3:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017ad7:	0f 8d 05 01 00 00    	jge    c0017be2 <loadACPITables(unsigned char*)+0x221>
c0017add:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ae1:	8b 04 c5 a4 0c 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf35c]
c0017ae8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017aec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017af0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017af8:	25 ff 0f 00 00       	and    eax,0xfff
c0017afd:	89 c6                	mov    esi,eax
c0017aff:	e8 e2 a2 ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0017b04:	89 c3                	mov    ebx,eax
c0017b06:	83 ec 0c             	sub    esp,0xc
c0017b09:	6a 01                	push   0x1
c0017b0b:	e8 3b a0 ff ff       	call   c0011b4b <Virt::allocateKernelVirtualPages(int)>
c0017b10:	83 c4 10             	add    esp,0x10
c0017b13:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017b17:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b1d:	83 ec 0c             	sub    esp,0xc
c0017b20:	6a 01                	push   0x1
c0017b22:	6a 01                	push   0x1
c0017b24:	50                   	push   eax
c0017b25:	52                   	push   edx
c0017b26:	53                   	push   ebx
c0017b27:	e8 28 ab ff ff       	call   c0012654 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017b2c:	83 c4 20             	add    esp,0x20
c0017b2f:	09 f0                	or     eax,esi
c0017b31:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b35:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b39:	c1 e0 03             	shl    eax,0x3
c0017b3c:	05 a0 0c 03 c0       	add    eax,0xc0030ca0
c0017b41:	83 ec 04             	sub    esp,0x4
c0017b44:	6a 04                	push   0x4
c0017b46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017b4a:	50                   	push   eax
c0017b4b:	e8 fc 8b fe ff       	call   c000074c <memcpy>
c0017b50:	83 c4 10             	add    esp,0x10
c0017b53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b57:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b5a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017b5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017b62:	05 00 10 00 00       	add    eax,0x1000
c0017b67:	c1 e8 0c             	shr    eax,0xc
c0017b6a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017b6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b72:	89 04 24             	mov    DWORD PTR [esp],eax
c0017b75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b79:	25 ff 0f 00 00       	and    eax,0xfff
c0017b7e:	89 c6                	mov    esi,eax
c0017b80:	e8 61 a2 ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0017b85:	89 c3                	mov    ebx,eax
c0017b87:	83 ec 0c             	sub    esp,0xc
c0017b8a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017b8e:	e8 b8 9f ff ff       	call   c0011b4b <Virt::allocateKernelVirtualPages(int)>
c0017b93:	83 c4 10             	add    esp,0x10
c0017b96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017b9a:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017ba0:	83 ec 0c             	sub    esp,0xc
c0017ba3:	6a 01                	push   0x1
c0017ba5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017ba9:	50                   	push   eax
c0017baa:	52                   	push   edx
c0017bab:	53                   	push   ebx
c0017bac:	e8 a3 aa ff ff       	call   c0012654 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017bb1:	83 c4 20             	add    esp,0x20
c0017bb4:	09 f0                	or     eax,esi
c0017bb6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017bba:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017bbd:	83 ec 0c             	sub    esp,0xc
c0017bc0:	50                   	push   eax
c0017bc1:	e8 33 a4 ff ff       	call   c0011ff9 <Virt::freeKernelVirtualPages(unsigned long)>
c0017bc6:	83 c4 10             	add    esp,0x10
c0017bc9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017bcd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017bd1:	89 14 c5 a4 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf35c],edx
c0017bd8:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017bdc:	e9 ed fe ff ff       	jmp    c0017ace <loadACPITables(unsigned char*)+0x10d>
c0017be1:	90                   	nop
c0017be2:	83 c4 44             	add    esp,0x44
c0017be5:	5b                   	pop    ebx
c0017be6:	5e                   	pop    esi
c0017be7:	c3                   	ret    

c0017be8 <findRSDT(unsigned char*)>:
c0017be8:	56                   	push   esi
c0017be9:	53                   	push   ebx
c0017bea:	83 ec 44             	sub    esp,0x44
c0017bed:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0017bf2:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017bf8:	83 e0 04             	and    eax,0x4
c0017bfb:	84 c0                	test   al,al
c0017bfd:	75 0a                	jne    c0017c09 <findRSDT(unsigned char*)+0x21>
c0017bff:	b8 00 00 00 00       	mov    eax,0x0
c0017c04:	e9 f7 00 00 00       	jmp    c0017d00 <findRSDT(unsigned char*)+0x118>
c0017c09:	83 ec 04             	sub    esp,0x4
c0017c0c:	6a 24                	push   0x24
c0017c0e:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017c12:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017c16:	50                   	push   eax
c0017c17:	e8 30 8b fe ff       	call   c000074c <memcpy>
c0017c1c:	83 c4 10             	add    esp,0x10
c0017c1f:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017c23:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017c27:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017c2f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017c33:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c37:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017c3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017c3f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017c43:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c47:	25 ff 0f 00 00       	and    eax,0xfff
c0017c4c:	89 c6                	mov    esi,eax
c0017c4e:	e8 93 a1 ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0017c53:	89 c3                	mov    ebx,eax
c0017c55:	83 ec 0c             	sub    esp,0xc
c0017c58:	6a 02                	push   0x2
c0017c5a:	e8 ec 9e ff ff       	call   c0011b4b <Virt::allocateKernelVirtualPages(int)>
c0017c5f:	83 c4 10             	add    esp,0x10
c0017c62:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017c66:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c6c:	83 ec 0c             	sub    esp,0xc
c0017c6f:	6a 01                	push   0x1
c0017c71:	6a 02                	push   0x2
c0017c73:	50                   	push   eax
c0017c74:	52                   	push   edx
c0017c75:	53                   	push   ebx
c0017c76:	e8 d9 a9 ff ff       	call   c0012654 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c7b:	83 c4 20             	add    esp,0x20
c0017c7e:	09 f0                	or     eax,esi
c0017c80:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017c84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c88:	25 ff 0f 00 00       	and    eax,0xfff
c0017c8d:	89 c6                	mov    esi,eax
c0017c8f:	e8 52 a1 ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0017c94:	89 c3                	mov    ebx,eax
c0017c96:	83 ec 0c             	sub    esp,0xc
c0017c99:	6a 02                	push   0x2
c0017c9b:	e8 ab 9e ff ff       	call   c0011b4b <Virt::allocateKernelVirtualPages(int)>
c0017ca0:	83 c4 10             	add    esp,0x10
c0017ca3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017ca7:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017cad:	83 ec 0c             	sub    esp,0xc
c0017cb0:	6a 01                	push   0x1
c0017cb2:	6a 02                	push   0x2
c0017cb4:	50                   	push   eax
c0017cb5:	52                   	push   edx
c0017cb6:	53                   	push   ebx
c0017cb7:	e8 98 a9 ff ff       	call   c0012654 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017cbc:	83 c4 20             	add    esp,0x20
c0017cbf:	09 f0                	or     eax,esi
c0017cc1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017cc5:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017cca:	75 11                	jne    c0017cdd <findRSDT(unsigned char*)+0xf5>
c0017ccc:	c6 05 a0 0e 03 c0 00 	mov    BYTE PTR ds:0xc0030ea0,0x0
c0017cd3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017cd7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017cdb:	eb 1f                	jmp    c0017cfc <findRSDT(unsigned char*)+0x114>
c0017cdd:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017ce2:	75 11                	jne    c0017cf5 <findRSDT(unsigned char*)+0x10d>
c0017ce4:	c6 05 a0 0e 03 c0 01 	mov    BYTE PTR ds:0xc0030ea0,0x1
c0017ceb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017cef:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017cf3:	eb 07                	jmp    c0017cfc <findRSDT(unsigned char*)+0x114>
c0017cf5:	b8 00 00 00 00       	mov    eax,0x0
c0017cfa:	eb 04                	jmp    c0017d00 <findRSDT(unsigned char*)+0x118>
c0017cfc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017d00:	83 c4 44             	add    esp,0x44
c0017d03:	5b                   	pop    ebx
c0017d04:	5e                   	pop    esi
c0017d05:	c3                   	ret    

c0017d06 <findDataTable(unsigned char*, char*)>:
c0017d06:	83 ec 1c             	sub    esp,0x1c
c0017d09:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0017d0e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017d14:	83 e0 04             	and    eax,0x4
c0017d17:	84 c0                	test   al,al
c0017d19:	75 07                	jne    c0017d22 <findDataTable(unsigned char*, char*)+0x1c>
c0017d1b:	b8 00 00 00 00       	mov    eax,0x0
c0017d20:	eb 7c                	jmp    c0017d9e <findDataTable(unsigned char*, char*)+0x98>
c0017d22:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017d2a:	a1 8c 0c 03 c0       	mov    eax,ds:0xc0030c8c
c0017d2f:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017d33:	7d 3a                	jge    c0017d6f <findDataTable(unsigned char*, char*)+0x69>
c0017d35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d39:	c1 e0 03             	shl    eax,0x3
c0017d3c:	05 a0 0c 03 c0       	add    eax,0xc0030ca0
c0017d41:	83 ec 04             	sub    esp,0x4
c0017d44:	6a 04                	push   0x4
c0017d46:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d4a:	50                   	push   eax
c0017d4b:	e8 f8 88 fe ff       	call   c0000648 <memcmp>
c0017d50:	83 c4 10             	add    esp,0x10
c0017d53:	85 c0                	test   eax,eax
c0017d55:	0f 94 c0             	sete   al
c0017d58:	84 c0                	test   al,al
c0017d5a:	74 0d                	je     c0017d69 <findDataTable(unsigned char*, char*)+0x63>
c0017d5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d60:	8b 04 c5 a4 0c 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf35c]
c0017d67:	eb 35                	jmp    c0017d9e <findDataTable(unsigned char*, char*)+0x98>
c0017d69:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017d6d:	eb bb                	jmp    c0017d2a <findDataTable(unsigned char*, char*)+0x24>
c0017d6f:	a0 a0 0e 03 c0       	mov    al,ds:0xc0030ea0
c0017d74:	84 c0                	test   al,al
c0017d76:	74 07                	je     c0017d7f <findDataTable(unsigned char*, char*)+0x79>
c0017d78:	b8 58 00 00 00       	mov    eax,0x58
c0017d7d:	eb 05                	jmp    c0017d84 <findDataTable(unsigned char*, char*)+0x7e>
c0017d7f:	b8 52 00 00 00       	mov    eax,0x52
c0017d84:	83 ec 04             	sub    esp,0x4
c0017d87:	50                   	push   eax
c0017d88:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d8c:	68 b8 b6 02 c0       	push   0xc002b6b8
c0017d91:	e8 71 b1 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0017d96:	83 c4 10             	add    esp,0x10
c0017d99:	b8 00 00 00 00       	mov    eax,0x0
c0017d9e:	83 c4 1c             	add    esp,0x1c
c0017da1:	c3                   	ret    

c0017da2 <scanMADT()>:
c0017da2:	53                   	push   ebx
c0017da3:	83 ec 38             	sub    esp,0x38
c0017da6:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0017dab:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017db1:	83 e0 04             	and    eax,0x4
c0017db4:	84 c0                	test   al,al
c0017db6:	0f 84 63 04 00 00    	je     c001821f <scanMADT()+0x47d>
c0017dbc:	e8 66 fb ff ff       	call   c0017927 <findRSDP()>
c0017dc1:	a3 ac 0e 03 c0       	mov    ds:0xc0030eac,eax
c0017dc6:	a1 ac 0e 03 c0       	mov    eax,ds:0xc0030eac
c0017dcb:	85 c0                	test   eax,eax
c0017dcd:	75 19                	jne    c0017de8 <scanMADT()+0x46>
c0017dcf:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0017dd4:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017dda:	83 e2 fb             	and    edx,0xfffffffb
c0017ddd:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017de3:	e9 3b 04 00 00       	jmp    c0018223 <scanMADT()+0x481>
c0017de8:	a1 ac 0e 03 c0       	mov    eax,ds:0xc0030eac
c0017ded:	83 ec 0c             	sub    esp,0xc
c0017df0:	50                   	push   eax
c0017df1:	e8 f2 fd ff ff       	call   c0017be8 <findRSDT(unsigned char*)>
c0017df6:	83 c4 10             	add    esp,0x10
c0017df9:	a3 a8 0e 03 c0       	mov    ds:0xc0030ea8,eax
c0017dfe:	a1 a8 0e 03 c0       	mov    eax,ds:0xc0030ea8
c0017e03:	85 c0                	test   eax,eax
c0017e05:	75 19                	jne    c0017e20 <scanMADT()+0x7e>
c0017e07:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0017e0c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e12:	83 e2 fb             	and    edx,0xfffffffb
c0017e15:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e1b:	e9 03 04 00 00       	jmp    c0018223 <scanMADT()+0x481>
c0017e20:	a1 a8 0e 03 c0       	mov    eax,ds:0xc0030ea8
c0017e25:	83 ec 0c             	sub    esp,0xc
c0017e28:	50                   	push   eax
c0017e29:	e8 93 fb ff ff       	call   c00179c1 <loadACPITables(unsigned char*)>
c0017e2e:	83 c4 10             	add    esp,0x10
c0017e31:	a1 a8 0e 03 c0       	mov    eax,ds:0xc0030ea8
c0017e36:	83 ec 08             	sub    esp,0x8
c0017e39:	68 88 b5 02 c0       	push   0xc002b588
c0017e3e:	50                   	push   eax
c0017e3f:	e8 c2 fe ff ff       	call   c0017d06 <findDataTable(unsigned char*, char*)>
c0017e44:	83 c4 10             	add    esp,0x10
c0017e47:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017e4b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017e50:	75 19                	jne    c0017e6b <scanMADT()+0xc9>
c0017e52:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0017e57:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e5d:	83 e2 fe             	and    edx,0xfffffffe
c0017e60:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e66:	e9 b8 03 00 00       	jmp    c0018223 <scanMADT()+0x481>
c0017e6b:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017e73:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e77:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017e7a:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017e7e:	0f 87 9f 03 00 00    	ja     c0018223 <scanMADT()+0x481>
c0017e84:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017e8c:	0f 87 91 03 00 00    	ja     c0018223 <scanMADT()+0x481>
c0017e92:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e96:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017e9a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e9e:	8d 50 01             	lea    edx,[eax+0x1]
c0017ea1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ea5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ea9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017ead:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017eb1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017eb5:	8d 50 01             	lea    edx,[eax+0x1]
c0017eb8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ebc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ec0:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017ec4:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017ec8:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017ecd:	0f 86 4f 03 00 00    	jbe    c0018222 <scanMADT()+0x480>
c0017ed3:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017ed8:	75 57                	jne    c0017f31 <scanMADT()+0x18f>
c0017eda:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ede:	8d 50 01             	lea    edx,[eax+0x1]
c0017ee1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ee5:	8a 15 a0 10 03 c0    	mov    dl,BYTE PTR ds:0xc00310a0
c0017eeb:	0f b6 d2             	movzx  edx,dl
c0017eee:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017ef2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017ef6:	88 82 e0 10 03 c0    	mov    BYTE PTR [edx-0x3ffcef20],al
c0017efc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f00:	8d 50 01             	lea    edx,[eax+0x1]
c0017f03:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f07:	8a 15 a0 10 03 c0    	mov    dl,BYTE PTR ds:0xc00310a0
c0017f0d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017f10:	88 0d a0 10 03 c0    	mov    BYTE PTR ds:0xc00310a0,cl
c0017f16:	0f b6 d2             	movzx  edx,dl
c0017f19:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f1d:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017f21:	88 82 c0 10 03 c0    	mov    BYTE PTR [edx-0x3ffcef40],al
c0017f27:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017f2c:	e9 da 02 00 00       	jmp    c001820b <scanMADT()+0x469>
c0017f31:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017f36:	0f 85 14 01 00 00    	jne    c0018050 <scanMADT()+0x2ae>
c0017f3c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f40:	8d 50 01             	lea    edx,[eax+0x1]
c0017f43:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f47:	8a 15 60 0f 03 c0    	mov    dl,BYTE PTR ds:0xc0030f60
c0017f4d:	0f b6 d2             	movzx  edx,dl
c0017f50:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f54:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017f58:	88 82 80 0f 03 c0    	mov    BYTE PTR [edx-0x3ffcf080],al
c0017f5e:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017f62:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f6a:	01 d0                	add    eax,edx
c0017f6c:	83 c0 2c             	add    eax,0x2c
c0017f6f:	8a 00                	mov    al,BYTE PTR [eax]
c0017f71:	0f b6 d0             	movzx  edx,al
c0017f74:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f78:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f7b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f7f:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017f83:	0f b6 c0             	movzx  eax,al
c0017f86:	c1 e0 08             	shl    eax,0x8
c0017f89:	89 d1                	mov    ecx,edx
c0017f8b:	09 c1                	or     ecx,eax
c0017f8d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f91:	8d 50 02             	lea    edx,[eax+0x2]
c0017f94:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f98:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f9c:	0f b6 c0             	movzx  eax,al
c0017f9f:	c1 e0 10             	shl    eax,0x10
c0017fa2:	09 c1                	or     ecx,eax
c0017fa4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fa8:	8d 50 03             	lea    edx,[eax+0x3]
c0017fab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017faf:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017fb3:	0f b6 c0             	movzx  eax,al
c0017fb6:	c1 e0 18             	shl    eax,0x18
c0017fb9:	09 c1                	or     ecx,eax
c0017fbb:	89 ca                	mov    edx,ecx
c0017fbd:	a0 60 0f 03 c0       	mov    al,ds:0xc0030f60
c0017fc2:	0f b6 c0             	movzx  eax,al
c0017fc5:	89 14 85 a0 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf060],edx
c0017fcc:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017fd1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fd5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fd9:	01 d0                	add    eax,edx
c0017fdb:	83 c0 2c             	add    eax,0x2c
c0017fde:	8a 00                	mov    al,BYTE PTR [eax]
c0017fe0:	0f b6 d0             	movzx  edx,al
c0017fe3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fe7:	8d 48 01             	lea    ecx,[eax+0x1]
c0017fea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fee:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017ff2:	0f b6 c0             	movzx  eax,al
c0017ff5:	c1 e0 08             	shl    eax,0x8
c0017ff8:	89 d1                	mov    ecx,edx
c0017ffa:	09 c1                	or     ecx,eax
c0017ffc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018000:	8d 50 02             	lea    edx,[eax+0x2]
c0018003:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018007:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001800b:	0f b6 c0             	movzx  eax,al
c001800e:	c1 e0 10             	shl    eax,0x10
c0018011:	09 c1                	or     ecx,eax
c0018013:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018017:	8d 50 03             	lea    edx,[eax+0x3]
c001801a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001801e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018022:	0f b6 c0             	movzx  eax,al
c0018025:	c1 e0 18             	shl    eax,0x18
c0018028:	09 c1                	or     ecx,eax
c001802a:	89 ca                	mov    edx,ecx
c001802c:	a0 60 0f 03 c0       	mov    al,ds:0xc0030f60
c0018031:	0f b6 c0             	movzx  eax,al
c0018034:	89 14 85 20 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcefe0],edx
c001803b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018040:	a0 60 0f 03 c0       	mov    al,ds:0xc0030f60
c0018045:	40                   	inc    eax
c0018046:	a2 60 0f 03 c0       	mov    ds:0xc0030f60,al
c001804b:	e9 bb 01 00 00       	jmp    c001820b <scanMADT()+0x469>
c0018050:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0018055:	0f 85 e9 00 00 00    	jne    c0018144 <scanMADT()+0x3a2>
c001805b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001805f:	8d 50 01             	lea    edx,[eax+0x1]
c0018062:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018066:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001806a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001806e:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0018072:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018076:	8d 50 01             	lea    edx,[eax+0x1]
c0018079:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001807d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018081:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018085:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018089:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001808d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018091:	01 d0                	add    eax,edx
c0018093:	83 c0 2c             	add    eax,0x2c
c0018096:	8a 00                	mov    al,BYTE PTR [eax]
c0018098:	0f b6 d0             	movzx  edx,al
c001809b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001809f:	8d 48 01             	lea    ecx,[eax+0x1]
c00180a2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180a6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00180aa:	0f b6 c0             	movzx  eax,al
c00180ad:	c1 e0 08             	shl    eax,0x8
c00180b0:	89 d1                	mov    ecx,edx
c00180b2:	09 c1                	or     ecx,eax
c00180b4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180b8:	8d 50 02             	lea    edx,[eax+0x2]
c00180bb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180bf:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180c3:	0f b6 c0             	movzx  eax,al
c00180c6:	c1 e0 10             	shl    eax,0x10
c00180c9:	09 c1                	or     ecx,eax
c00180cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180cf:	8d 50 03             	lea    edx,[eax+0x3]
c00180d2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180d6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180da:	0f b6 c0             	movzx  eax,al
c00180dd:	c1 e0 18             	shl    eax,0x18
c00180e0:	09 c8                	or     eax,ecx
c00180e2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00180e6:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00180eb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180f3:	01 d0                	add    eax,edx
c00180f5:	83 c0 2c             	add    eax,0x2c
c00180f8:	8a 00                	mov    al,BYTE PTR [eax]
c00180fa:	0f b6 c0             	movzx  eax,al
c00180fd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018101:	8d 4a 01             	lea    ecx,[edx+0x1]
c0018104:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018108:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c001810c:	0f b6 d2             	movzx  edx,dl
c001810f:	c1 e2 08             	shl    edx,0x8
c0018112:	09 d0                	or     eax,edx
c0018114:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0018119:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001811e:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0018123:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018127:	88 90 20 d8 02 c0    	mov    BYTE PTR [eax-0x3ffd27e0],dl
c001812d:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0018132:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0018137:	66 89 84 12 40 0f 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcf0c0],ax
c001813f:	e9 c7 00 00 00       	jmp    c001820b <scanMADT()+0x469>
c0018144:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0018149:	0f 85 b0 00 00 00    	jne    c00181ff <scanMADT()+0x45d>
c001814f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018153:	8d 50 01             	lea    edx,[eax+0x1]
c0018156:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001815a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001815e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018162:	0f b6 c0             	movzx  eax,al
c0018165:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018169:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001816d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018171:	01 d0                	add    eax,edx
c0018173:	83 c0 2c             	add    eax,0x2c
c0018176:	8a 00                	mov    al,BYTE PTR [eax]
c0018178:	0f b6 d0             	movzx  edx,al
c001817b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001817f:	8d 48 01             	lea    ecx,[eax+0x1]
c0018182:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018186:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001818a:	0f b6 c0             	movzx  eax,al
c001818d:	c1 e0 08             	shl    eax,0x8
c0018190:	09 d0                	or     eax,edx
c0018192:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018196:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001819b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001819f:	8d 50 01             	lea    edx,[eax+0x1]
c00181a2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00181a6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181aa:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00181ae:	0f b6 c0             	movzx  eax,al
c00181b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00181b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181b9:	c1 e0 08             	shl    eax,0x8
c00181bc:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00181c0:	89 c1                	mov    ecx,eax
c00181c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00181c6:	c1 e0 18             	shl    eax,0x18
c00181c9:	89 c3                	mov    ebx,eax
c00181cb:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c00181d0:	8d 50 01             	lea    edx,[eax+0x1]
c00181d3:	89 15 b0 0e 03 c0    	mov    DWORD PTR ds:0xc0030eb0,edx
c00181d9:	09 d9                	or     ecx,ebx
c00181db:	89 ca                	mov    edx,ecx
c00181dd:	89 14 85 c0 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf140],edx
c00181e4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00181e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00181ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00181f0:	68 e8 b6 02 c0       	push   0xc002b6e8
c00181f5:	e8 0d ad ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c00181fa:	83 c4 10             	add    esp,0x10
c00181fd:	eb 0c                	jmp    c001820b <scanMADT()+0x469>
c00181ff:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0018204:	75 05                	jne    c001820b <scanMADT()+0x469>
c0018206:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001820b:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0018210:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018214:	01 d0                	add    eax,edx
c0018216:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001821a:	e9 54 fc ff ff       	jmp    c0017e73 <scanMADT()+0xd1>
c001821f:	90                   	nop
c0018220:	eb 01                	jmp    c0018223 <scanMADT()+0x481>
c0018222:	90                   	nop
c0018223:	83 c4 38             	add    esp,0x38
c0018226:	5b                   	pop    ebx
c0018227:	c3                   	ret    

c0018228 <ACPI::ACPI()>:
c0018228:	83 ec 0c             	sub    esp,0xc
c001822b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001822f:	83 ec 08             	sub    esp,0x8
c0018232:	68 8d b5 02 c0       	push   0xc002b58d
c0018237:	50                   	push   eax
c0018238:	e8 e7 c2 ff ff       	call   c0014524 <Device::Device(char const*)>
c001823d:	83 c4 10             	add    esp,0x10
c0018240:	ba 5c b7 02 c0       	mov    edx,0xc002b75c
c0018245:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018249:	89 10                	mov    DWORD PTR [eax],edx
c001824b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001824f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018256:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001825a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0018264:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018268:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0018272:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018276:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c001827d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018281:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018288:	e8 15 fb ff ff       	call   c0017da2 <scanMADT()>
c001828d:	90                   	nop
c001828e:	83 c4 0c             	add    esp,0xc
c0018291:	c3                   	ret    

c0018292 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0018292:	83 ec 2c             	sub    esp,0x2c
c0018295:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0018299:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001829d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00182a1:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00182a5:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00182aa:	88 d0                	mov    al,dl
c00182ac:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00182b0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00182b5:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00182bd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182c1:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00182c7:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00182cb:	0f 8d 97 00 00 00    	jge    c0018368 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c00182d1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182d9:	83 c2 2a             	add    edx,0x2a
c00182dc:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00182e0:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00182e5:	75 78                	jne    c001835f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00182e7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182eb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182ef:	83 c2 2a             	add    edx,0x2a
c00182f2:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00182f6:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00182fa:	75 63                	jne    c001835f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00182fc:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018301:	74 3a                	je     c001833d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0018303:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018307:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001830b:	83 c2 2a             	add    edx,0x2a
c001830e:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0018312:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018316:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0018319:	39 c2                	cmp    edx,eax
c001831b:	74 10                	je     c001832d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c001831d:	83 ec 0c             	sub    esp,0xc
c0018320:	68 24 b7 02 c0       	push   0xc002b724
c0018325:	e8 1b 23 00 00       	call   c001a645 <Krnl::panic(char const*)>
c001832a:	83 c4 10             	add    esp,0x10
c001832d:	83 ec 0c             	sub    esp,0xc
c0018330:	68 92 b5 02 c0       	push   0xc002b592
c0018335:	e8 0b 23 00 00       	call   c001a645 <Krnl::panic(char const*)>
c001833a:	83 c4 10             	add    esp,0x10
c001833d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018341:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018345:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018349:	83 c2 2a             	add    edx,0x2a
c001834c:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0018350:	8b 02                	mov    eax,DWORD PTR [edx]
c0018352:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0018355:	89 01                	mov    DWORD PTR [ecx],eax
c0018357:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001835a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001835f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0018363:	e9 55 ff ff ff       	jmp    c00182bd <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0018368:	90                   	nop
c0018369:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001836d:	83 c4 2c             	add    esp,0x2c
c0018370:	c2 04 00             	ret    0x4
c0018373:	90                   	nop

c0018374 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0018374:	83 ec 1c             	sub    esp,0x1c
c0018377:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001837b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001837f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018383:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018388:	88 c8                	mov    al,cl
c001838a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001838e:	88 d0                	mov    al,dl
c0018390:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018394:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018398:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001839e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183a2:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00183a5:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00183a9:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00183ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183b1:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00183b7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00183bb:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00183be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00183c2:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00183c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183cb:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00183d1:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00183d5:	8d 48 01             	lea    ecx,[eax+0x1]
c00183d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183dc:	83 c2 2a             	add    edx,0x2a
c00183df:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00183e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183e7:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00183ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183f1:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00183f4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00183f8:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00183fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018400:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018406:	8d 50 01             	lea    edx,[eax+0x1]
c0018409:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001840d:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0018413:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018417:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001841d:	3d 00 02 00 00       	cmp    eax,0x200
c0018422:	75 10                	jne    c0018434 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0018424:	83 ec 0c             	sub    esp,0xc
c0018427:	68 a1 b5 02 c0       	push   0xc002b5a1
c001842c:	e8 14 22 00 00       	call   c001a645 <Krnl::panic(char const*)>
c0018431:	83 c4 10             	add    esp,0x10
c0018434:	90                   	nop
c0018435:	83 c4 1c             	add    esp,0x1c
c0018438:	c3                   	ret    
c0018439:	90                   	nop

c001843a <ACPI::setScreenBrightnessLevel(void*, int)>:
c001843a:	b8 00 00 00 00       	mov    eax,0x0
c001843f:	c3                   	ret    

c0018440 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0018440:	83 ec 1c             	sub    esp,0x1c
c0018443:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018447:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001844a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001844e:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0018453:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018458:	83 ec 08             	sub    esp,0x8
c001845b:	52                   	push   edx
c001845c:	50                   	push   eax
c001845d:	e8 fe 69 ff ff       	call   c000ee60 <Computer::readCMOS(unsigned char)>
c0018462:	83 c4 10             	add    esp,0x10
c0018465:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018469:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001846e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018473:	83 ec 04             	sub    esp,0x4
c0018476:	6a 01                	push   0x1
c0018478:	52                   	push   edx
c0018479:	50                   	push   eax
c001847a:	e8 f7 6a ff ff       	call   c000ef76 <Computer::writeCMOS(unsigned char, unsigned char)>
c001847f:	83 c4 10             	add    esp,0x10
c0018482:	90                   	nop
c0018483:	83 c4 1c             	add    esp,0x1c
c0018486:	c3                   	ret    
c0018487:	90                   	nop

c0018488 <ACPI::open(int, int, void*)>:
c0018488:	53                   	push   ebx
c0018489:	83 ec 28             	sub    esp,0x28
c001848c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018490:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018497:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001849b:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00184a2:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c00184a7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00184ad:	83 e0 04             	and    eax,0x4
c00184b0:	84 c0                	test   al,al
c00184b2:	74 47                	je     c00184fb <ACPI::open(int, int, void*)+0x73>
c00184b4:	a1 a8 0e 03 c0       	mov    eax,ds:0xc0030ea8
c00184b9:	83 ec 08             	sub    esp,0x8
c00184bc:	68 be b5 02 c0       	push   0xc002b5be
c00184c1:	50                   	push   eax
c00184c2:	e8 3f f8 ff ff       	call   c0017d06 <findDataTable(unsigned char*, char*)>
c00184c7:	83 c4 10             	add    esp,0x10
c00184ca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00184ce:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00184d3:	74 26                	je     c00184fb <ACPI::open(int, int, void*)+0x73>
c00184d5:	83 ec 0c             	sub    esp,0xc
c00184d8:	68 c3 b5 02 c0       	push   0xc002b5c3
c00184dd:	e8 25 aa ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c00184e2:	83 c4 10             	add    esp,0x10
c00184e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184e9:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00184f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184f4:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00184fb:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c0018503:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018507:	8a 00                	mov    al,BYTE PTR [eax]
c0018509:	3c 01                	cmp    al,0x1
c001850b:	75 28                	jne    c0018535 <ACPI::open(int, int, void*)+0xad>
c001850d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018511:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018518:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001851c:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018523:	83 ec 0c             	sub    esp,0xc
c0018526:	68 d4 b5 02 c0       	push   0xc002b5d4
c001852b:	e8 d7 a9 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0018530:	83 c4 10             	add    esp,0x10
c0018533:	eb 25                	jmp    c001855a <ACPI::open(int, int, void*)+0xd2>
c0018535:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018539:	8a 00                	mov    al,BYTE PTR [eax]
c001853b:	3c 02                	cmp    al,0x2
c001853d:	75 1b                	jne    c001855a <ACPI::open(int, int, void*)+0xd2>
c001853f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018543:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001854a:	83 ec 0c             	sub    esp,0xc
c001854d:	68 dc b5 02 c0       	push   0xc002b5dc
c0018552:	e8 b0 a9 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0018557:	83 c4 10             	add    esp,0x10
c001855a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001855e:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018564:	83 f0 01             	xor    eax,0x1
c0018567:	84 c0                	test   al,al
c0018569:	74 6a                	je     c00185d5 <ACPI::open(int, int, void*)+0x14d>
c001856b:	83 ec 0c             	sub    esp,0xc
c001856e:	68 e4 b5 02 c0       	push   0xc002b5e4
c0018573:	e8 8f a9 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0018578:	83 c4 10             	add    esp,0x10
c001857b:	e8 d0 7b fe ff       	call   c0000150 <manualPCIProbe>
c0018580:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018584:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0018589:	75 28                	jne    c00185b3 <ACPI::open(int, int, void*)+0x12b>
c001858b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001858f:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018596:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001859a:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00185a1:	83 ec 0c             	sub    esp,0xc
c00185a4:	68 f2 b5 02 c0       	push   0xc002b5f2
c00185a9:	e8 59 a9 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c00185ae:	83 c4 10             	add    esp,0x10
c00185b1:	eb 22                	jmp    c00185d5 <ACPI::open(int, int, void*)+0x14d>
c00185b3:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c00185b8:	75 1b                	jne    c00185d5 <ACPI::open(int, int, void*)+0x14d>
c00185ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185be:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00185c5:	83 ec 0c             	sub    esp,0xc
c00185c8:	68 fc b5 02 c0       	push   0xc002b5fc
c00185cd:	e8 35 a9 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c00185d2:	83 c4 10             	add    esp,0x10
c00185d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185d9:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00185df:	84 c0                	test   al,al
c00185e1:	74 13                	je     c00185f6 <ACPI::open(int, int, void*)+0x16e>
c00185e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185e7:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c00185ed:	83 f0 01             	xor    eax,0x1
c00185f0:	0f b6 c0             	movzx  eax,al
c00185f3:	40                   	inc    eax
c00185f4:	eb 05                	jmp    c00185fb <ACPI::open(int, int, void*)+0x173>
c00185f6:	b8 00 00 00 00       	mov    eax,0x0
c00185fb:	83 ec 08             	sub    esp,0x8
c00185fe:	50                   	push   eax
c00185ff:	68 06 b6 02 c0       	push   0xc002b606
c0018604:	e8 fe a8 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0018609:	83 c4 10             	add    esp,0x10
c001860c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018610:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018616:	84 c0                	test   al,al
c0018618:	74 67                	je     c0018681 <ACPI::open(int, int, void*)+0x1f9>
c001861a:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c0018622:	83 ec 0c             	sub    esp,0xc
c0018625:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018629:	e8 1d 72 ff ff       	call   c000f84b <malloc>
c001862e:	83 c4 10             	add    esp,0x10
c0018631:	89 c3                	mov    ebx,eax
c0018633:	83 ec 0c             	sub    esp,0xc
c0018636:	53                   	push   ebx
c0018637:	e8 ec a3 00 00       	call   c0022a28 <PCI::PCI()>
c001863c:	83 c4 10             	add    esp,0x10
c001863f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018643:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018647:	83 ec 08             	sub    esp,0x8
c001864a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001864e:	50                   	push   eax
c001864f:	e8 e0 bc ff ff       	call   c0014334 <Device::addChild(Device*)>
c0018654:	83 c4 10             	add    esp,0x10
c0018657:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001865b:	8b 00                	mov    eax,DWORD PTR [eax]
c001865d:	83 c0 08             	add    eax,0x8
c0018660:	8b 00                	mov    eax,DWORD PTR [eax]
c0018662:	6a 00                	push   0x0
c0018664:	6a 00                	push   0x0
c0018666:	6a 00                	push   0x0
c0018668:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001866c:	ff d0                	call   eax
c001866e:	83 c4 10             	add    esp,0x10
c0018671:	83 ec 0c             	sub    esp,0xc
c0018674:	68 0f b6 02 c0       	push   0xc002b60f
c0018679:	e8 89 a8 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001867e:	83 c4 10             	add    esp,0x10
c0018681:	83 ec 0c             	sub    esp,0xc
c0018684:	68 1a b6 02 c0       	push   0xc002b61a
c0018689:	e8 8d 46 00 00       	call   c001cd1b <Thr::loadKernelSymbolTable(char const*)>
c001868e:	83 c4 10             	add    esp,0x10
c0018691:	83 ec 0c             	sub    esp,0xc
c0018694:	6a 0c                	push   0xc
c0018696:	e8 51 97 ff ff       	call   c0011dec <Virt::setupPageSwapping(int)>
c001869b:	83 c4 10             	add    esp,0x10
c001869e:	8b 1d c8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5c8
c00186a4:	83 ec 08             	sub    esp,0x8
c00186a7:	6a 01                	push   0x1
c00186a9:	68 38 b6 02 c0       	push   0xc002b638
c00186ae:	e8 c5 50 00 00       	call   c001d778 <Thr::loadDLL(char const*, bool)>
c00186b3:	83 c4 10             	add    esp,0x10
c00186b6:	83 ec 08             	sub    esp,0x8
c00186b9:	53                   	push   ebx
c00186ba:	50                   	push   eax
c00186bb:	e8 ec 52 00 00       	call   c001d9ac <Thr::executeDLL(unsigned long, void*)>
c00186c0:	83 c4 10             	add    esp,0x10
c00186c3:	8b 1d c8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5c8
c00186c9:	83 ec 08             	sub    esp,0x8
c00186cc:	6a 01                	push   0x1
c00186ce:	68 55 b6 02 c0       	push   0xc002b655
c00186d3:	e8 a0 50 00 00       	call   c001d778 <Thr::loadDLL(char const*, bool)>
c00186d8:	83 c4 10             	add    esp,0x10
c00186db:	83 ec 08             	sub    esp,0x8
c00186de:	53                   	push   ebx
c00186df:	50                   	push   eax
c00186e0:	e8 c7 52 00 00       	call   c001d9ac <Thr::executeDLL(unsigned long, void*)>
c00186e5:	83 c4 10             	add    esp,0x10
c00186e8:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c00186ed:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00186f3:	83 e0 04             	and    eax,0x4
c00186f6:	84 c0                	test   al,al
c00186f8:	0f 84 d2 00 00 00    	je     c00187d0 <ACPI::open(int, int, void*)+0x348>
c00186fe:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018705:	83 ec 0c             	sub    esp,0xc
c0018708:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001870c:	e8 3a 71 ff ff       	call   c000f84b <malloc>
c0018711:	83 c4 10             	add    esp,0x10
c0018714:	89 c3                	mov    ebx,eax
c0018716:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001871b:	83 ec 04             	sub    esp,0x4
c001871e:	50                   	push   eax
c001871f:	68 72 b6 02 c0       	push   0xc002b672
c0018724:	53                   	push   ebx
c0018725:	e8 3c ad ff ff       	call   c0013466 <File::File(char const*, Process*)>
c001872a:	83 c4 10             	add    esp,0x10
c001872d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0018731:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018736:	74 17                	je     c001874f <ACPI::open(int, int, void*)+0x2c7>
c0018738:	83 ec 0c             	sub    esp,0xc
c001873b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001873f:	e8 f4 af ff ff       	call   c0013738 <File::exists()>
c0018744:	83 c4 10             	add    esp,0x10
c0018747:	84 c0                	test   al,al
c0018749:	74 04                	je     c001874f <ACPI::open(int, int, void*)+0x2c7>
c001874b:	b0 01                	mov    al,0x1
c001874d:	eb 02                	jmp    c0018751 <ACPI::open(int, int, void*)+0x2c9>
c001874f:	b0 00                	mov    al,0x0
c0018751:	84 c0                	test   al,al
c0018753:	74 22                	je     c0018777 <ACPI::open(int, int, void*)+0x2ef>
c0018755:	83 ec 08             	sub    esp,0x8
c0018758:	6a 01                	push   0x1
c001875a:	68 72 b6 02 c0       	push   0xc002b672
c001875f:	e8 14 50 00 00       	call   c001d778 <Thr::loadDLL(char const*, bool)>
c0018764:	83 c4 10             	add    esp,0x10
c0018767:	83 ec 08             	sub    esp,0x8
c001876a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001876e:	50                   	push   eax
c001876f:	e8 38 52 00 00       	call   c001d9ac <Thr::executeDLL(unsigned long, void*)>
c0018774:	83 c4 10             	add    esp,0x10
c0018777:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001877c:	74 1e                	je     c001879c <ACPI::open(int, int, void*)+0x314>
c001877e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018783:	74 17                	je     c001879c <ACPI::open(int, int, void*)+0x314>
c0018785:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018789:	8b 00                	mov    eax,DWORD PTR [eax]
c001878b:	83 c0 08             	add    eax,0x8
c001878e:	8b 00                	mov    eax,DWORD PTR [eax]
c0018790:	83 ec 0c             	sub    esp,0xc
c0018793:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018797:	ff d0                	call   eax
c0018799:	83 c4 10             	add    esp,0x10
c001879c:	a1 a8 0e 03 c0       	mov    eax,ds:0xc0030ea8
c00187a1:	83 ec 08             	sub    esp,0x8
c00187a4:	68 8f b6 02 c0       	push   0xc002b68f
c00187a9:	50                   	push   eax
c00187aa:	e8 57 f5 ff ff       	call   c0017d06 <findDataTable(unsigned char*, char*)>
c00187af:	83 c4 10             	add    esp,0x10
c00187b2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00187b6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00187bb:	74 13                	je     c00187d0 <ACPI::open(int, int, void*)+0x348>
c00187bd:	83 ec 08             	sub    esp,0x8
c00187c0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00187c4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00187c8:	e8 73 fc ff ff       	call   c0018440 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00187cd:	83 c4 10             	add    esp,0x10
c00187d0:	b8 00 00 00 00       	mov    eax,0x0
c00187d5:	83 c4 28             	add    esp,0x28
c00187d8:	5b                   	pop    ebx
c00187d9:	c3                   	ret    

c00187da <ACPI::sleep()>:
c00187da:	83 ec 0c             	sub    esp,0xc
c00187dd:	a1 80 0c 03 c0       	mov    eax,ds:0xc0030c80
c00187e2:	85 c0                	test   eax,eax
c00187e4:	74 07                	je     c00187ed <ACPI::sleep()+0x13>
c00187e6:	a1 80 0c 03 c0       	mov    eax,ds:0xc0030c80
c00187eb:	ff d0                	call   eax
c00187ed:	90                   	nop
c00187ee:	83 c4 0c             	add    esp,0xc
c00187f1:	c3                   	ret    

c00187f2 <CPU::close(int, int, void*)>:
c00187f2:	31 c0                	xor    eax,eax
c00187f4:	c3                   	ret    
c00187f5:	90                   	nop

c00187f6 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00187f6:	55                   	push   ebp
c00187f7:	57                   	push   edi
c00187f8:	56                   	push   esi
c00187f9:	53                   	push   ebx
c00187fa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00187fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018802:	89 ce                	mov    esi,ecx
c0018804:	89 d5                	mov    ebp,edx
c0018806:	80 f9 04             	cmp    cl,0x4
c0018809:	75 28                	jne    c0018833 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c001880b:	8d 42 f9             	lea    eax,[edx-0x7]
c001880e:	3c 03                	cmp    al,0x3
c0018810:	0f 86 63 01 00 00    	jbe    c0018979 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018816:	80 fa 03             	cmp    dl,0x3
c0018819:	0f 84 5a 01 00 00    	je     c0018979 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001881f:	8d 7a f2             	lea    edi,[edx-0xe]
c0018822:	b8 f0 d9 02 c0       	mov    eax,0xc002d9f0
c0018827:	89 fb                	mov    ebx,edi
c0018829:	80 fb 01             	cmp    bl,0x1
c001882c:	77 4e                	ja     c001887c <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c001882e:	e9 52 01 00 00       	jmp    c0018985 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018833:	80 f9 05             	cmp    cl,0x5
c0018836:	75 4d                	jne    c0018885 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018838:	b8 00 da 02 c0       	mov    eax,0xc002da00
c001883d:	80 fa 03             	cmp    dl,0x3
c0018840:	0f 86 3f 01 00 00    	jbe    c0018985 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018846:	8d 7a fa             	lea    edi,[edx-0x6]
c0018849:	b8 10 da 02 c0       	mov    eax,0xc002da10
c001884e:	89 fb                	mov    ebx,edi
c0018850:	80 fb 01             	cmp    bl,0x1
c0018853:	0f 86 2c 01 00 00    	jbe    c0018985 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018859:	b8 20 da 02 c0       	mov    eax,0xc002da20
c001885e:	80 fa 08             	cmp    dl,0x8
c0018861:	0f 84 1e 01 00 00    	je     c0018985 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018867:	89 d7                	mov    edi,edx
c0018869:	b8 30 da 02 c0       	mov    eax,0xc002da30
c001886e:	83 e7 fb             	and    edi,0xfffffffb
c0018871:	89 fb                	mov    ebx,edi
c0018873:	80 fb 09             	cmp    bl,0x9
c0018876:	0f 84 09 01 00 00    	je     c0018985 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001887c:	31 c0                	xor    eax,eax
c001887e:	89 eb                	mov    ebx,ebp
c0018880:	0f b6 fb             	movzx  edi,bl
c0018883:	eb 30                	jmp    c00188b5 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018885:	31 c0                	xor    eax,eax
c0018887:	80 f9 06             	cmp    cl,0x6
c001888a:	75 f2                	jne    c001887e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001888c:	80 fa 0a             	cmp    dl,0xa
c001888f:	77 ed                	ja     c001887e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018891:	bf de 05 00 00       	mov    edi,0x5de
c0018896:	0f a3 d7             	bt     edi,edx
c0018899:	73 e3                	jae    c001887e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001889b:	b8 40 da 02 c0       	mov    eax,0xc002da40
c00188a0:	e9 e0 00 00 00       	jmp    c0018985 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188a5:	39 c7                	cmp    edi,eax
c00188a7:	0f 84 d3 00 00 00    	je     c0018980 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00188ad:	40                   	inc    eax
c00188ae:	3d d0 00 00 00       	cmp    eax,0xd0
c00188b3:	74 09                	je     c00188be <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00188b5:	89 f3                	mov    ebx,esi
c00188b7:	80 fb 0f             	cmp    bl,0xf
c00188ba:	75 f1                	jne    c00188ad <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00188bc:	eb e7                	jmp    c00188a5 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00188be:	80 f9 10             	cmp    cl,0x10
c00188c1:	75 14                	jne    c00188d7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00188c3:	8d 42 fc             	lea    eax,[edx-0x4]
c00188c6:	83 e0 fb             	and    eax,0xfffffffb
c00188c9:	3c 02                	cmp    al,0x2
c00188cb:	76 34                	jbe    c0018901 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00188cd:	b8 72 ba 02 c0       	mov    eax,0xc002ba72
c00188d2:	80 fa 02             	cmp    dl,0x2
c00188d5:	eb 24                	jmp    c00188fb <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c00188d7:	80 f9 11             	cmp    cl,0x11
c00188da:	75 13                	jne    c00188ef <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00188dc:	b8 72 ba 02 c0       	mov    eax,0xc002ba72
c00188e1:	80 fa 03             	cmp    dl,0x3
c00188e4:	0f 85 9b 00 00 00    	jne    c0018985 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188ea:	e9 91 00 00 00       	jmp    c0018980 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00188ef:	80 f9 12             	cmp    cl,0x12
c00188f2:	75 14                	jne    c0018908 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00188f4:	b8 72 ba 02 c0       	mov    eax,0xc002ba72
c00188f9:	fe ca                	dec    dl
c00188fb:	0f 85 84 00 00 00    	jne    c0018985 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018901:	b8 60 da 02 c0       	mov    eax,0xc002da60
c0018906:	eb 7d                	jmp    c0018985 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018908:	80 f9 14             	cmp    cl,0x14
c001890b:	75 12                	jne    c001891f <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c001890d:	4a                   	dec    edx
c001890e:	b8 72 ba 02 c0       	mov    eax,0xc002ba72
c0018913:	80 fa 01             	cmp    dl,0x1
c0018916:	77 6d                	ja     c0018985 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018918:	b8 70 da 02 c0       	mov    eax,0xc002da70
c001891d:	eb 66                	jmp    c0018985 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001891f:	80 f9 15             	cmp    cl,0x15
c0018922:	75 31                	jne    c0018955 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018924:	b8 80 da 02 c0       	mov    eax,0xc002da80
c0018929:	80 fa 01             	cmp    dl,0x1
c001892c:	74 57                	je     c0018985 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001892e:	b8 72 ba 02 c0       	mov    eax,0xc002ba72
c0018933:	80 fa 13             	cmp    dl,0x13
c0018936:	76 0c                	jbe    c0018944 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018938:	80 fa 30             	cmp    dl,0x30
c001893b:	75 48                	jne    c0018985 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001893d:	b8 a0 da 02 c0       	mov    eax,0xc002daa0
c0018942:	eb 41                	jmp    c0018985 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018944:	b9 04 00 09 00       	mov    ecx,0x90004
c0018949:	0f a3 d1             	bt     ecx,edx
c001894c:	73 37                	jae    c0018985 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001894e:	b8 90 da 02 c0       	mov    eax,0xc002da90
c0018953:	eb 30                	jmp    c0018985 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018955:	b8 72 ba 02 c0       	mov    eax,0xc002ba72
c001895a:	80 f9 16             	cmp    cl,0x16
c001895d:	75 26                	jne    c0018985 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001895f:	b8 b0 da 02 c0       	mov    eax,0xc002dab0
c0018964:	84 d2                	test   dl,dl
c0018966:	74 1d                	je     c0018985 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018968:	b8 72 ba 02 c0       	mov    eax,0xc002ba72
c001896d:	80 fa 30             	cmp    dl,0x30
c0018970:	75 13                	jne    c0018985 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018972:	b8 c0 da 02 c0       	mov    eax,0xc002dac0
c0018977:	eb 0c                	jmp    c0018985 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018979:	b8 e0 d9 02 c0       	mov    eax,0xc002d9e0
c001897e:	eb 05                	jmp    c0018985 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018980:	b8 50 da 02 c0       	mov    eax,0xc002da50
c0018985:	5b                   	pop    ebx
c0018986:	5e                   	pop    esi
c0018987:	5f                   	pop    edi
c0018988:	5d                   	pop    ebp
c0018989:	c3                   	ret    

c001898a <CPU::lookupIntelName(unsigned char, unsigned char)>:
c001898a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001898e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018992:	80 f9 04             	cmp    cl,0x4
c0018995:	75 6b                	jne    c0018a02 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018997:	b8 40 d8 02 c0       	mov    eax,0xc002d840
c001899c:	80 fa 01             	cmp    dl,0x1
c001899f:	0f 86 92 02 00 00    	jbe    c0018c37 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189a5:	b8 50 d8 02 c0       	mov    eax,0xc002d850
c00189aa:	80 fa 02             	cmp    dl,0x2
c00189ad:	0f 84 84 02 00 00    	je     c0018c37 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189b3:	b8 60 d8 02 c0       	mov    eax,0xc002d860
c00189b8:	80 fa 03             	cmp    dl,0x3
c00189bb:	0f 84 76 02 00 00    	je     c0018c37 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189c1:	b8 70 d8 02 c0       	mov    eax,0xc002d870
c00189c6:	80 fa 04             	cmp    dl,0x4
c00189c9:	0f 84 68 02 00 00    	je     c0018c37 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189cf:	b8 80 d8 02 c0       	mov    eax,0xc002d880
c00189d4:	80 fa 05             	cmp    dl,0x5
c00189d7:	0f 84 5a 02 00 00    	je     c0018c37 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189dd:	b8 60 d8 02 c0       	mov    eax,0xc002d860
c00189e2:	80 fa 07             	cmp    dl,0x7
c00189e5:	0f 84 4c 02 00 00    	je     c0018c37 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189eb:	83 ea 08             	sub    edx,0x8
c00189ee:	b8 72 ba 02 c0       	mov    eax,0xc002ba72
c00189f3:	80 fa 01             	cmp    dl,0x1
c00189f6:	0f 87 3b 02 00 00    	ja     c0018c37 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189fc:	b8 90 d8 02 c0       	mov    eax,0xc002d890
c0018a01:	c3                   	ret    
c0018a02:	80 f9 05             	cmp    cl,0x5
c0018a05:	75 45                	jne    c0018a4c <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018a07:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018a0a:	b8 a0 d8 02 c0       	mov    eax,0xc002d8a0
c0018a0f:	80 f9 02             	cmp    cl,0x2
c0018a12:	0f 86 1f 02 00 00    	jbe    c0018c37 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a18:	80 fa 04             	cmp    dl,0x4
c0018a1b:	0f 84 f3 01 00 00    	je     c0018c14 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018a21:	80 fa 07             	cmp    dl,0x7
c0018a24:	0f 84 0d 02 00 00    	je     c0018c37 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a2a:	b8 b0 d8 02 c0       	mov    eax,0xc002d8b0
c0018a2f:	80 fa 08             	cmp    dl,0x8
c0018a32:	0f 84 ff 01 00 00    	je     c0018c37 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a38:	b8 72 ba 02 c0       	mov    eax,0xc002ba72
c0018a3d:	80 fa 09             	cmp    dl,0x9
c0018a40:	0f 85 f1 01 00 00    	jne    c0018c37 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a46:	b8 c0 d8 02 c0       	mov    eax,0xc002d8c0
c0018a4b:	c3                   	ret    
c0018a4c:	80 f9 06             	cmp    cl,0x6
c0018a4f:	0f 85 85 01 00 00    	jne    c0018bda <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018a55:	b8 d0 d8 02 c0       	mov    eax,0xc002d8d0
c0018a5a:	80 fa 01             	cmp    dl,0x1
c0018a5d:	0f 84 d4 01 00 00    	je     c0018c37 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a63:	8d 42 fb             	lea    eax,[edx-0x5]
c0018a66:	3c 01                	cmp    al,0x1
c0018a68:	0f 86 ac 01 00 00    	jbe    c0018c1a <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018a6e:	80 fa 03             	cmp    dl,0x3
c0018a71:	0f 84 a3 01 00 00    	je     c0018c1a <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018a77:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018a7a:	b8 f0 d8 02 c0       	mov    eax,0xc002d8f0
c0018a7f:	80 f9 01             	cmp    cl,0x1
c0018a82:	0f 86 af 01 00 00    	jbe    c0018c37 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a88:	80 fa 09             	cmp    dl,0x9
c0018a8b:	0f 84 8f 01 00 00    	je     c0018c20 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018a91:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018a94:	80 f9 01             	cmp    cl,0x1
c0018a97:	0f 86 9a 01 00 00    	jbe    c0018c37 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a9d:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c0018aa2:	80 fa 0d             	cmp    dl,0xd
c0018aa5:	0f 84 8c 01 00 00    	je     c0018c37 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aab:	b8 10 d9 02 c0       	mov    eax,0xc002d910
c0018ab0:	80 fa 0e             	cmp    dl,0xe
c0018ab3:	0f 84 7e 01 00 00    	je     c0018c37 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ab9:	b8 20 d9 02 c0       	mov    eax,0xc002d920
c0018abe:	80 fa 0f             	cmp    dl,0xf
c0018ac1:	0f 84 70 01 00 00    	je     c0018c37 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ac7:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c0018acc:	80 fa 15             	cmp    dl,0x15
c0018acf:	0f 84 62 01 00 00    	je     c0018c37 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ad5:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018ad8:	b8 20 d9 02 c0       	mov    eax,0xc002d920
c0018add:	80 f9 01             	cmp    cl,0x1
c0018ae0:	0f 86 51 01 00 00    	jbe    c0018c37 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ae6:	80 fa 1a             	cmp    dl,0x1a
c0018ae9:	0f 84 37 01 00 00    	je     c0018c26 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018aef:	80 fa 1c             	cmp    dl,0x1c
c0018af2:	0f 84 34 01 00 00    	je     c0018c2c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018af8:	80 fa 1d             	cmp    dl,0x1d
c0018afb:	0f 84 36 01 00 00    	je     c0018c37 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b01:	b8 50 d9 02 c0       	mov    eax,0xc002d950
c0018b06:	80 fa 25             	cmp    dl,0x25
c0018b09:	0f 84 28 01 00 00    	je     c0018c37 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b0f:	8d 4a da             	lea    ecx,[edx-0x26]
c0018b12:	b8 40 d9 02 c0       	mov    eax,0xc002d940
c0018b17:	80 f9 01             	cmp    cl,0x1
c0018b1a:	0f 86 17 01 00 00    	jbe    c0018c37 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b20:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c0018b25:	80 fa 2a             	cmp    dl,0x2a
c0018b28:	0f 84 09 01 00 00    	je     c0018c37 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b2e:	b8 50 d9 02 c0       	mov    eax,0xc002d950
c0018b33:	80 fa 2c             	cmp    dl,0x2c
c0018b36:	0f 84 fb 00 00 00    	je     c0018c37 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b3c:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c0018b41:	80 fa 2d             	cmp    dl,0x2d
c0018b44:	0f 84 ed 00 00 00    	je     c0018c37 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b4a:	b8 30 d9 02 c0       	mov    eax,0xc002d930
c0018b4f:	80 fa 2e             	cmp    dl,0x2e
c0018b52:	0f 84 df 00 00 00    	je     c0018c37 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b58:	b8 50 d9 02 c0       	mov    eax,0xc002d950
c0018b5d:	80 fa 2f             	cmp    dl,0x2f
c0018b60:	0f 84 d1 00 00 00    	je     c0018c37 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b66:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018b69:	b8 40 d9 02 c0       	mov    eax,0xc002d940
c0018b6e:	80 f9 01             	cmp    cl,0x1
c0018b71:	0f 86 c0 00 00 00    	jbe    c0018c37 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b77:	b8 70 d9 02 c0       	mov    eax,0xc002d970
c0018b7c:	80 fa 37             	cmp    dl,0x37
c0018b7f:	0f 84 b2 00 00 00    	je     c0018c37 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b85:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c0018b8a:	80 fa 3a             	cmp    dl,0x3a
c0018b8d:	0f 84 a4 00 00 00    	je     c0018c37 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b93:	b8 90 d9 02 c0       	mov    eax,0xc002d990
c0018b98:	80 fa 3c             	cmp    dl,0x3c
c0018b9b:	0f 84 96 00 00 00    	je     c0018c37 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ba1:	b8 a0 d9 02 c0       	mov    eax,0xc002d9a0
c0018ba6:	80 fa 3d             	cmp    dl,0x3d
c0018ba9:	0f 84 88 00 00 00    	je     c0018c37 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018baf:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c0018bb4:	80 fa 3e             	cmp    dl,0x3e
c0018bb7:	74 7e                	je     c0018c37 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bb9:	8d 42 bb             	lea    eax,[edx-0x45]
c0018bbc:	3c 01                	cmp    al,0x1
c0018bbe:	76 72                	jbe    c0018c32 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018bc0:	80 fa 3f             	cmp    dl,0x3f
c0018bc3:	74 6d                	je     c0018c32 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018bc5:	80 fa 4a             	cmp    dl,0x4a
c0018bc8:	74 0a                	je     c0018bd4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018bca:	b8 72 ba 02 c0       	mov    eax,0xc002ba72
c0018bcf:	80 fa 4d             	cmp    dl,0x4d
c0018bd2:	75 63                	jne    c0018c37 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bd4:	b8 70 d9 02 c0       	mov    eax,0xc002d970
c0018bd9:	c3                   	ret    
c0018bda:	b8 72 ba 02 c0       	mov    eax,0xc002ba72
c0018bdf:	80 f9 0b             	cmp    cl,0xb
c0018be2:	75 0a                	jne    c0018bee <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018be4:	fe ca                	dec    dl
c0018be6:	75 4f                	jne    c0018c37 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018be8:	b8 b0 d9 02 c0       	mov    eax,0xc002d9b0
c0018bed:	c3                   	ret    
c0018bee:	80 f9 0f             	cmp    cl,0xf
c0018bf1:	75 44                	jne    c0018c37 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bf3:	b8 c0 d9 02 c0       	mov    eax,0xc002d9c0
c0018bf8:	80 fa 02             	cmp    dl,0x2
c0018bfb:	76 3a                	jbe    c0018c37 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bfd:	8d 42 fd             	lea    eax,[edx-0x3]
c0018c00:	3c 01                	cmp    al,0x1
c0018c02:	76 0a                	jbe    c0018c0e <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018c04:	b8 72 ba 02 c0       	mov    eax,0xc002ba72
c0018c09:	80 fa 06             	cmp    dl,0x6
c0018c0c:	75 29                	jne    c0018c37 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c0e:	b8 d0 d9 02 c0       	mov    eax,0xc002d9d0
c0018c13:	c3                   	ret    
c0018c14:	b8 b0 d8 02 c0       	mov    eax,0xc002d8b0
c0018c19:	c3                   	ret    
c0018c1a:	b8 e0 d8 02 c0       	mov    eax,0xc002d8e0
c0018c1f:	c3                   	ret    
c0018c20:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c0018c25:	c3                   	ret    
c0018c26:	b8 30 d9 02 c0       	mov    eax,0xc002d930
c0018c2b:	c3                   	ret    
c0018c2c:	b8 40 d9 02 c0       	mov    eax,0xc002d940
c0018c31:	c3                   	ret    
c0018c32:	b8 90 d9 02 c0       	mov    eax,0xc002d990
c0018c37:	c3                   	ret    

c0018c38 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018c38:	60                   	pusha  
c0018c39:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018c3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018c41:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018c45:	9c                   	pushf  
c0018c46:	fa                   	cli    
c0018c47:	0f 09                	wbinvd 
c0018c49:	0f 30                	wrmsr  
c0018c4b:	9d                   	popf   
c0018c4c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018c50:	89 02                	mov    DWORD PTR [edx],eax
c0018c52:	61                   	popa   
c0018c53:	c3                   	ret    

c0018c54 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018c54:	60                   	pusha  
c0018c55:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018c59:	9c                   	pushf  
c0018c5a:	fa                   	cli    
c0018c5b:	0f 09                	wbinvd 
c0018c5d:	31 c0                	xor    eax,eax
c0018c5f:	31 d2                	xor    edx,edx
c0018c61:	0f 32                	rdmsr  
c0018c63:	9d                   	popf   
c0018c64:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018c68:	89 02                	mov    DWORD PTR [edx],eax
c0018c6a:	61                   	popa   
c0018c6b:	c3                   	ret    

c0018c6c <CPU::AMD_K6_writeback(int, int, int)>:
c0018c6c:	56                   	push   esi
c0018c6d:	53                   	push   ebx
c0018c6e:	83 ec 10             	sub    esp,0x10
c0018c71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c75:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018c7a:	75 5d                	jne    c0018cd9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c7c:	83 f8 08             	cmp    eax,0x8
c0018c7f:	75 09                	jne    c0018c8a <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018c81:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018c86:	7e 13                	jle    c0018c9b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018c88:	eb 30                	jmp    c0018cba <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018c8a:	83 f8 06             	cmp    eax,0x6
c0018c8d:	7c 4a                	jl     c0018cd9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c8f:	83 f8 07             	cmp    eax,0x7
c0018c92:	7e 07                	jle    c0018c9b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018c94:	83 f8 09             	cmp    eax,0x9
c0018c97:	74 21                	je     c0018cba <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018c99:	eb 3e                	jmp    c0018cd9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c9b:	89 e6                	mov    esi,esp
c0018c9d:	8b 1d 08 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e608
c0018ca3:	56                   	push   esi
c0018ca4:	c1 eb 15             	shr    ebx,0x15
c0018ca7:	68 82 00 00 c0       	push   0xc0000082
c0018cac:	83 e3 7e             	and    ebx,0x7e
c0018caf:	e8 a0 ff ff ff       	call   c0018c54 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018cb4:	56                   	push   esi
c0018cb5:	6a 00                	push   0x0
c0018cb7:	53                   	push   ebx
c0018cb8:	eb 12                	jmp    c0018ccc <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018cba:	89 e3                	mov    ebx,esp
c0018cbc:	53                   	push   ebx
c0018cbd:	68 82 00 00 c0       	push   0xc0000082
c0018cc2:	e8 8d ff ff ff       	call   c0018c54 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018cc7:	53                   	push   ebx
c0018cc8:	6a 00                	push   0x0
c0018cca:	6a 00                	push   0x0
c0018ccc:	68 82 00 00 c0       	push   0xc0000082
c0018cd1:	e8 62 ff ff ff       	call   c0018c38 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018cd6:	83 c4 18             	add    esp,0x18
c0018cd9:	83 c4 10             	add    esp,0x10
c0018cdc:	5b                   	pop    ebx
c0018cdd:	5e                   	pop    esi
c0018cde:	c3                   	ret    
c0018cdf:	90                   	nop

c0018ce0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018ce0:	55                   	push   ebp
c0018ce1:	57                   	push   edi
c0018ce2:	56                   	push   esi
c0018ce3:	53                   	push   ebx
c0018ce4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018ce8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018cec:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018cf0:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018cf4:	39 05 e0 da 02 c0    	cmp    DWORD PTR ds:0xc002dae0,eax
c0018cfa:	75 23                	jne    c0018d1f <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018cfc:	a1 0c 11 03 c0       	mov    eax,ds:0xc003110c
c0018d01:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018d05:	89 06                	mov    DWORD PTR [esi],eax
c0018d07:	a1 08 11 03 c0       	mov    eax,ds:0xc0031108
c0018d0c:	89 07                	mov    DWORD PTR [edi],eax
c0018d0e:	a1 04 11 03 c0       	mov    eax,ds:0xc0031104
c0018d13:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018d16:	a1 00 11 03 c0       	mov    eax,ds:0xc0031100
c0018d1b:	89 02                	mov    DWORD PTR [edx],eax
c0018d1d:	eb 3f                	jmp    c0018d5e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018d1f:	31 c9                	xor    ecx,ecx
c0018d21:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d25:	0f a2                	cpuid  
c0018d27:	89 06                	mov    DWORD PTR [esi],eax
c0018d29:	89 1f                	mov    DWORD PTR [edi],ebx
c0018d2b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018d2f:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018d32:	89 10                	mov    DWORD PTR [eax],edx
c0018d34:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d38:	a3 e0 da 02 c0       	mov    ds:0xc002dae0,eax
c0018d3d:	8b 06                	mov    eax,DWORD PTR [esi]
c0018d3f:	a3 0c 11 03 c0       	mov    ds:0xc003110c,eax
c0018d44:	8b 07                	mov    eax,DWORD PTR [edi]
c0018d46:	a3 08 11 03 c0       	mov    ds:0xc0031108,eax
c0018d4b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018d4e:	a3 04 11 03 c0       	mov    ds:0xc0031104,eax
c0018d53:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018d57:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d59:	a3 00 11 03 c0       	mov    ds:0xc0031100,eax
c0018d5e:	5b                   	pop    ebx
c0018d5f:	5e                   	pop    esi
c0018d60:	5f                   	pop    edi
c0018d61:	5d                   	pop    ebp
c0018d62:	c3                   	ret    
c0018d63:	90                   	nop

c0018d64 <CPU::cpuidCheckEDX(unsigned int)>:
c0018d64:	83 ec 10             	sub    esp,0x10
c0018d67:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d6b:	50                   	push   eax
c0018d6c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d70:	50                   	push   eax
c0018d71:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d75:	50                   	push   eax
c0018d76:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d7a:	50                   	push   eax
c0018d7b:	6a 01                	push   0x1
c0018d7d:	e8 5e ff ff ff       	call   c0018ce0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d82:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d86:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018d8a:	0f 95 c0             	setne  al
c0018d8d:	83 c4 24             	add    esp,0x24
c0018d90:	c3                   	ret    
c0018d91:	90                   	nop

c0018d92 <CPU::cpuidCheckECX(unsigned int)>:
c0018d92:	83 ec 10             	sub    esp,0x10
c0018d95:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d99:	50                   	push   eax
c0018d9a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d9e:	50                   	push   eax
c0018d9f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018da3:	50                   	push   eax
c0018da4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018da8:	50                   	push   eax
c0018da9:	6a 01                	push   0x1
c0018dab:	e8 30 ff ff ff       	call   c0018ce0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018db0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018db4:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018db8:	0f 95 c0             	setne  al
c0018dbb:	83 c4 24             	add    esp,0x24
c0018dbe:	c3                   	ret    
c0018dbf:	90                   	nop

c0018dc0 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018dc0:	83 ec 10             	sub    esp,0x10
c0018dc3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dc7:	50                   	push   eax
c0018dc8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dcc:	50                   	push   eax
c0018dcd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dd1:	50                   	push   eax
c0018dd2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dd6:	50                   	push   eax
c0018dd7:	6a 07                	push   0x7
c0018dd9:	e8 02 ff ff ff       	call   c0018ce0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018dde:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018de2:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018de6:	0f 95 c0             	setne  al
c0018de9:	83 c4 24             	add    esp,0x24
c0018dec:	c3                   	ret    
c0018ded:	90                   	nop

c0018dee <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018dee:	83 ec 10             	sub    esp,0x10
c0018df1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018df5:	50                   	push   eax
c0018df6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dfa:	50                   	push   eax
c0018dfb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dff:	50                   	push   eax
c0018e00:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e04:	50                   	push   eax
c0018e05:	6a 07                	push   0x7
c0018e07:	e8 d4 fe ff ff       	call   c0018ce0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e0c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e10:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018e14:	0f 95 c0             	setne  al
c0018e17:	83 c4 24             	add    esp,0x24
c0018e1a:	c3                   	ret    
c0018e1b:	90                   	nop

c0018e1c <CPU::CPU()>:
c0018e1c:	83 ec 0c             	sub    esp,0xc
c0018e1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e23:	83 ec 08             	sub    esp,0x8
c0018e26:	68 72 ba 02 c0       	push   0xc002ba72
c0018e2b:	50                   	push   eax
c0018e2c:	e8 f3 b6 ff ff       	call   c0014524 <Device::Device(char const*)>
c0018e31:	83 c4 10             	add    esp,0x10
c0018e34:	ba 4c bb 02 c0       	mov    edx,0xc002bb4c
c0018e39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e3d:	89 10                	mov    DWORD PTR [eax],edx
c0018e3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e43:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018e4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e51:	05 78 01 00 00       	add    eax,0x178
c0018e56:	83 ec 0c             	sub    esp,0xc
c0018e59:	50                   	push   eax
c0018e5a:	e8 01 62 ff ff       	call   c000f060 <GDT::GDT()>
c0018e5f:	83 c4 10             	add    esp,0x10
c0018e62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e66:	05 7c 09 00 00       	add    eax,0x97c
c0018e6b:	83 ec 0c             	sub    esp,0xc
c0018e6e:	50                   	push   eax
c0018e6f:	e8 4e 64 ff ff       	call   c000f2c2 <IDT::IDT()>
c0018e74:	83 c4 10             	add    esp,0x10
c0018e77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e7b:	05 7c 11 00 00       	add    eax,0x117c
c0018e80:	83 ec 0c             	sub    esp,0xc
c0018e83:	50                   	push   eax
c0018e84:	e8 f3 85 ff ff       	call   c001147c <TSS::TSS()>
c0018e89:	83 c4 10             	add    esp,0x10
c0018e8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e90:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018e97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e9b:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018ea5:	90                   	nop
c0018ea6:	83 c4 0c             	add    esp,0xc
c0018ea9:	c3                   	ret    

c0018eaa <CPU::displayFeatures()>:
c0018eaa:	53                   	push   ebx
c0018eab:	83 ec 10             	sub    esp,0x10
c0018eae:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018eb2:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018eb8:	68 80 b7 02 c0       	push   0xc002b780
c0018ebd:	e8 45 a0 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0018ec2:	59                   	pop    ecx
c0018ec3:	58                   	pop    eax
c0018ec4:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018eca:	50                   	push   eax
c0018ecb:	68 91 b7 02 c0       	push   0xc002b791
c0018ed0:	e8 32 a0 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0018ed5:	58                   	pop    eax
c0018ed6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018edc:	5a                   	pop    edx
c0018edd:	c1 e8 0e             	shr    eax,0xe
c0018ee0:	0f b6 c0             	movzx  eax,al
c0018ee3:	50                   	push   eax
c0018ee4:	68 a2 b7 02 c0       	push   0xc002b7a2
c0018ee9:	e8 19 a0 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0018eee:	59                   	pop    ecx
c0018eef:	58                   	pop    eax
c0018ef0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018ef6:	66 c1 e8 06          	shr    ax,0x6
c0018efa:	0f b6 c0             	movzx  eax,al
c0018efd:	50                   	push   eax
c0018efe:	68 b3 b7 02 c0       	push   0xc002b7b3
c0018f03:	e8 ff 9f ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0018f08:	c7 04 24 60 bc 02 c0 	mov    DWORD PTR [esp],0xc002bc60
c0018f0f:	e8 f3 9f ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0018f14:	83 c4 10             	add    esp,0x10
c0018f17:	b8 76 a1 02 c0       	mov    eax,0xc002a176
c0018f1c:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018f23:	74 05                	je     c0018f2a <CPU::displayFeatures()+0x80>
c0018f25:	b8 72 a1 02 c0       	mov    eax,0xc002a172
c0018f2a:	52                   	push   edx
c0018f2b:	52                   	push   edx
c0018f2c:	50                   	push   eax
c0018f2d:	68 c4 b7 02 c0       	push   0xc002b7c4
c0018f32:	e8 d0 9f ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0018f37:	83 c4 10             	add    esp,0x10
c0018f3a:	b8 72 a1 02 c0       	mov    eax,0xc002a172
c0018f3f:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018f46:	78 05                	js     c0018f4d <CPU::displayFeatures()+0xa3>
c0018f48:	b8 76 a1 02 c0       	mov    eax,0xc002a176
c0018f4d:	51                   	push   ecx
c0018f4e:	51                   	push   ecx
c0018f4f:	50                   	push   eax
c0018f50:	68 db b7 02 c0       	push   0xc002b7db
c0018f55:	e8 ad 9f ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0018f5a:	83 c4 10             	add    esp,0x10
c0018f5d:	b8 72 a1 02 c0       	mov    eax,0xc002a172
c0018f62:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018f69:	75 05                	jne    c0018f70 <CPU::displayFeatures()+0xc6>
c0018f6b:	b8 76 a1 02 c0       	mov    eax,0xc002a176
c0018f70:	52                   	push   edx
c0018f71:	52                   	push   edx
c0018f72:	50                   	push   eax
c0018f73:	68 f2 b7 02 c0       	push   0xc002b7f2
c0018f78:	e8 8a 9f ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0018f7d:	83 c4 10             	add    esp,0x10
c0018f80:	b8 72 a1 02 c0       	mov    eax,0xc002a172
c0018f85:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018f8c:	75 05                	jne    c0018f93 <CPU::displayFeatures()+0xe9>
c0018f8e:	b8 76 a1 02 c0       	mov    eax,0xc002a176
c0018f93:	51                   	push   ecx
c0018f94:	51                   	push   ecx
c0018f95:	50                   	push   eax
c0018f96:	68 09 b8 02 c0       	push   0xc002b809
c0018f9b:	e8 67 9f ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0018fa0:	83 c4 10             	add    esp,0x10
c0018fa3:	b8 72 a1 02 c0       	mov    eax,0xc002a172
c0018fa8:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018faf:	75 05                	jne    c0018fb6 <CPU::displayFeatures()+0x10c>
c0018fb1:	b8 76 a1 02 c0       	mov    eax,0xc002a176
c0018fb6:	52                   	push   edx
c0018fb7:	52                   	push   edx
c0018fb8:	50                   	push   eax
c0018fb9:	68 20 b8 02 c0       	push   0xc002b820
c0018fbe:	e8 44 9f ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0018fc3:	83 c4 10             	add    esp,0x10
c0018fc6:	b8 72 a1 02 c0       	mov    eax,0xc002a172
c0018fcb:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018fd2:	75 05                	jne    c0018fd9 <CPU::displayFeatures()+0x12f>
c0018fd4:	b8 76 a1 02 c0       	mov    eax,0xc002a176
c0018fd9:	51                   	push   ecx
c0018fda:	51                   	push   ecx
c0018fdb:	50                   	push   eax
c0018fdc:	68 37 b8 02 c0       	push   0xc002b837
c0018fe1:	e8 21 9f ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0018fe6:	83 c4 10             	add    esp,0x10
c0018fe9:	b8 72 a1 02 c0       	mov    eax,0xc002a172
c0018fee:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018ff5:	75 05                	jne    c0018ffc <CPU::displayFeatures()+0x152>
c0018ff7:	b8 76 a1 02 c0       	mov    eax,0xc002a176
c0018ffc:	52                   	push   edx
c0018ffd:	52                   	push   edx
c0018ffe:	50                   	push   eax
c0018fff:	68 4e b8 02 c0       	push   0xc002b84e
c0019004:	e8 fe 9e ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0019009:	83 c4 10             	add    esp,0x10
c001900c:	b8 72 a1 02 c0       	mov    eax,0xc002a172
c0019011:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0019018:	75 05                	jne    c001901f <CPU::displayFeatures()+0x175>
c001901a:	b8 76 a1 02 c0       	mov    eax,0xc002a176
c001901f:	51                   	push   ecx
c0019020:	51                   	push   ecx
c0019021:	50                   	push   eax
c0019022:	68 65 b8 02 c0       	push   0xc002b865
c0019027:	e8 db 9e ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001902c:	83 c4 10             	add    esp,0x10
c001902f:	b8 72 a1 02 c0       	mov    eax,0xc002a172
c0019034:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c001903b:	75 05                	jne    c0019042 <CPU::displayFeatures()+0x198>
c001903d:	b8 76 a1 02 c0       	mov    eax,0xc002a176
c0019042:	52                   	push   edx
c0019043:	52                   	push   edx
c0019044:	50                   	push   eax
c0019045:	68 7c b8 02 c0       	push   0xc002b87c
c001904a:	e8 b8 9e ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001904f:	83 c4 10             	add    esp,0x10
c0019052:	b8 72 a1 02 c0       	mov    eax,0xc002a172
c0019057:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c001905e:	75 05                	jne    c0019065 <CPU::displayFeatures()+0x1bb>
c0019060:	b8 76 a1 02 c0       	mov    eax,0xc002a176
c0019065:	51                   	push   ecx
c0019066:	51                   	push   ecx
c0019067:	50                   	push   eax
c0019068:	68 93 b8 02 c0       	push   0xc002b893
c001906d:	e8 95 9e ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0019072:	83 c4 10             	add    esp,0x10
c0019075:	b8 72 a1 02 c0       	mov    eax,0xc002a172
c001907a:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0019081:	75 05                	jne    c0019088 <CPU::displayFeatures()+0x1de>
c0019083:	b8 76 a1 02 c0       	mov    eax,0xc002a176
c0019088:	52                   	push   edx
c0019089:	52                   	push   edx
c001908a:	50                   	push   eax
c001908b:	68 aa b8 02 c0       	push   0xc002b8aa
c0019090:	e8 72 9e ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0019095:	83 c4 10             	add    esp,0x10
c0019098:	b8 72 a1 02 c0       	mov    eax,0xc002a172
c001909d:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c00190a4:	75 05                	jne    c00190ab <CPU::displayFeatures()+0x201>
c00190a6:	b8 76 a1 02 c0       	mov    eax,0xc002a176
c00190ab:	51                   	push   ecx
c00190ac:	51                   	push   ecx
c00190ad:	50                   	push   eax
c00190ae:	68 c1 b8 02 c0       	push   0xc002b8c1
c00190b3:	e8 4f 9e ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c00190b8:	83 c4 10             	add    esp,0x10
c00190bb:	b8 72 a1 02 c0       	mov    eax,0xc002a172
c00190c0:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c00190c7:	75 05                	jne    c00190ce <CPU::displayFeatures()+0x224>
c00190c9:	b8 76 a1 02 c0       	mov    eax,0xc002a176
c00190ce:	52                   	push   edx
c00190cf:	52                   	push   edx
c00190d0:	50                   	push   eax
c00190d1:	68 d8 b8 02 c0       	push   0xc002b8d8
c00190d6:	e8 2c 9e ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c00190db:	83 c4 10             	add    esp,0x10
c00190de:	b8 72 a1 02 c0       	mov    eax,0xc002a172
c00190e3:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c00190ea:	78 05                	js     c00190f1 <CPU::displayFeatures()+0x247>
c00190ec:	b8 76 a1 02 c0       	mov    eax,0xc002a176
c00190f1:	51                   	push   ecx
c00190f2:	51                   	push   ecx
c00190f3:	50                   	push   eax
c00190f4:	68 ef b8 02 c0       	push   0xc002b8ef
c00190f9:	e8 09 9e ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c00190fe:	83 c4 10             	add    esp,0x10
c0019101:	b8 72 a1 02 c0       	mov    eax,0xc002a172
c0019106:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c001910d:	75 05                	jne    c0019114 <CPU::displayFeatures()+0x26a>
c001910f:	b8 76 a1 02 c0       	mov    eax,0xc002a176
c0019114:	52                   	push   edx
c0019115:	52                   	push   edx
c0019116:	50                   	push   eax
c0019117:	68 06 b9 02 c0       	push   0xc002b906
c001911c:	e8 e6 9d ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0019121:	83 c4 18             	add    esp,0x18
c0019124:	5b                   	pop    ebx
c0019125:	c3                   	ret    

c0019126 <CPU::detectFeatures()>:
c0019126:	55                   	push   ebp
c0019127:	57                   	push   edi
c0019128:	56                   	push   esi
c0019129:	53                   	push   ebx
c001912a:	83 ec 50             	sub    esp,0x50
c001912d:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0019131:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c001913b:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0019142:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0019148:	6a 0d                	push   0xd
c001914a:	6a 00                	push   0x0
c001914c:	57                   	push   edi
c001914d:	e8 2e 76 fe ff       	call   c0000780 <memset>
c0019152:	83 c4 10             	add    esp,0x10
c0019155:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001915a:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0019161:	0f 84 20 09 00 00    	je     c0019a87 <CPU::detectFeatures()+0x961>
c0019167:	83 ec 0c             	sub    esp,0xc
c001916a:	6a 10                	push   0x10
c001916c:	e8 f3 fb ff ff       	call   c0018d64 <CPU::cpuidCheckEDX(unsigned int)>
c0019171:	83 e0 01             	and    eax,0x1
c0019174:	8d 14 00             	lea    edx,[eax+eax*1]
c0019177:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001917d:	83 e0 fd             	and    eax,0xfffffffd
c0019180:	09 d0                	or     eax,edx
c0019182:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019188:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001918f:	e8 d0 fb ff ff       	call   c0018d64 <CPU::cpuidCheckEDX(unsigned int)>
c0019194:	83 e0 01             	and    eax,0x1
c0019197:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001919e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191a4:	83 e0 fb             	and    eax,0xfffffffb
c00191a7:	09 d0                	or     eax,edx
c00191a9:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191af:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00191b6:	e8 a9 fb ff ff       	call   c0018d64 <CPU::cpuidCheckEDX(unsigned int)>
c00191bb:	83 e0 01             	and    eax,0x1
c00191be:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00191c5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191cb:	83 e0 f7             	and    eax,0xfffffff7
c00191ce:	09 d0                	or     eax,edx
c00191d0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191d6:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00191dd:	e8 82 fb ff ff       	call   c0018d64 <CPU::cpuidCheckEDX(unsigned int)>
c00191e2:	83 e0 01             	and    eax,0x1
c00191e5:	c1 e0 04             	shl    eax,0x4
c00191e8:	88 c2                	mov    dl,al
c00191ea:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191f0:	83 e0 ef             	and    eax,0xffffffef
c00191f3:	09 d0                	or     eax,edx
c00191f5:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191fb:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0019202:	e8 5d fb ff ff       	call   c0018d64 <CPU::cpuidCheckEDX(unsigned int)>
c0019207:	83 e0 01             	and    eax,0x1
c001920a:	c1 e0 05             	shl    eax,0x5
c001920d:	88 c2                	mov    dl,al
c001920f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019215:	83 e0 df             	and    eax,0xffffffdf
c0019218:	09 d0                	or     eax,edx
c001921a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019220:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0019227:	e8 38 fb ff ff       	call   c0018d64 <CPU::cpuidCheckEDX(unsigned int)>
c001922c:	83 e0 01             	and    eax,0x1
c001922f:	8d 14 00             	lea    edx,[eax+eax*1]
c0019232:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019238:	83 e0 fd             	and    eax,0xfffffffd
c001923b:	09 d0                	or     eax,edx
c001923d:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019243:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001924a:	e8 15 fb ff ff       	call   c0018d64 <CPU::cpuidCheckEDX(unsigned int)>
c001924f:	83 e0 01             	and    eax,0x1
c0019252:	c1 e0 06             	shl    eax,0x6
c0019255:	88 c2                	mov    dl,al
c0019257:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001925d:	83 e0 bf             	and    eax,0xffffffbf
c0019260:	09 d0                	or     eax,edx
c0019262:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019268:	58                   	pop    eax
c0019269:	8d 74 24 28          	lea    esi,[esp+0x28]
c001926d:	56                   	push   esi
c001926e:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019272:	55                   	push   ebp
c0019273:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019277:	50                   	push   eax
c0019278:	8d 54 24 28          	lea    edx,[esp+0x28]
c001927c:	52                   	push   edx
c001927d:	6a 00                	push   0x0
c001927f:	e8 5c fa ff ff       	call   c0018ce0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019284:	83 c4 1c             	add    esp,0x1c
c0019287:	6a 04                	push   0x4
c0019289:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001928d:	50                   	push   eax
c001928e:	57                   	push   edi
c001928f:	e8 b8 74 fe ff       	call   c000074c <memcpy>
c0019294:	83 c4 0c             	add    esp,0xc
c0019297:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c001929d:	6a 04                	push   0x4
c001929f:	56                   	push   esi
c00192a0:	50                   	push   eax
c00192a1:	e8 a6 74 fe ff       	call   c000074c <memcpy>
c00192a6:	83 c4 0c             	add    esp,0xc
c00192a9:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c00192af:	6a 04                	push   0x4
c00192b1:	55                   	push   ebp
c00192b2:	50                   	push   eax
c00192b3:	e8 94 74 fe ff       	call   c000074c <memcpy>
c00192b8:	58                   	pop    eax
c00192b9:	5a                   	pop    edx
c00192ba:	68 1d b9 02 c0       	push   0xc002b91d
c00192bf:	57                   	push   edi
c00192c0:	e8 03 76 fe ff       	call   c00008c8 <strcmp>
c00192c5:	83 c4 10             	add    esp,0x10
c00192c8:	85 c0                	test   eax,eax
c00192ca:	75 0f                	jne    c00192db <CPU::detectFeatures()+0x1b5>
c00192cc:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00192d6:	e9 22 02 00 00       	jmp    c00194fd <CPU::detectFeatures()+0x3d7>
c00192db:	50                   	push   eax
c00192dc:	50                   	push   eax
c00192dd:	68 2a b9 02 c0       	push   0xc002b92a
c00192e2:	57                   	push   edi
c00192e3:	e8 e0 75 fe ff       	call   c00008c8 <strcmp>
c00192e8:	83 c4 10             	add    esp,0x10
c00192eb:	85 c0                	test   eax,eax
c00192ed:	74 dd                	je     c00192cc <CPU::detectFeatures()+0x1a6>
c00192ef:	51                   	push   ecx
c00192f0:	51                   	push   ecx
c00192f1:	68 37 b9 02 c0       	push   0xc002b937
c00192f6:	57                   	push   edi
c00192f7:	e8 cc 75 fe ff       	call   c00008c8 <strcmp>
c00192fc:	83 c4 10             	add    esp,0x10
c00192ff:	85 c0                	test   eax,eax
c0019301:	74 2a                	je     c001932d <CPU::detectFeatures()+0x207>
c0019303:	52                   	push   edx
c0019304:	52                   	push   edx
c0019305:	68 44 b9 02 c0       	push   0xc002b944
c001930a:	57                   	push   edi
c001930b:	e8 b8 75 fe ff       	call   c00008c8 <strcmp>
c0019310:	83 c4 10             	add    esp,0x10
c0019313:	85 c0                	test   eax,eax
c0019315:	74 16                	je     c001932d <CPU::detectFeatures()+0x207>
c0019317:	50                   	push   eax
c0019318:	50                   	push   eax
c0019319:	68 51 b9 02 c0       	push   0xc002b951
c001931e:	57                   	push   edi
c001931f:	e8 a4 75 fe ff       	call   c00008c8 <strcmp>
c0019324:	83 c4 10             	add    esp,0x10
c0019327:	85 c0                	test   eax,eax
c0019329:	74 48                	je     c0019373 <CPU::detectFeatures()+0x24d>
c001932b:	eb 0f                	jmp    c001933c <CPU::detectFeatures()+0x216>
c001932d:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0019337:	e9 c1 01 00 00       	jmp    c00194fd <CPU::detectFeatures()+0x3d7>
c001933c:	50                   	push   eax
c001933d:	50                   	push   eax
c001933e:	68 5e b9 02 c0       	push   0xc002b95e
c0019343:	57                   	push   edi
c0019344:	e8 7f 75 fe ff       	call   c00008c8 <strcmp>
c0019349:	83 c4 10             	add    esp,0x10
c001934c:	85 c0                	test   eax,eax
c001934e:	74 23                	je     c0019373 <CPU::detectFeatures()+0x24d>
c0019350:	50                   	push   eax
c0019351:	50                   	push   eax
c0019352:	68 6b b9 02 c0       	push   0xc002b96b
c0019357:	57                   	push   edi
c0019358:	e8 6b 75 fe ff       	call   c00008c8 <strcmp>
c001935d:	83 c4 10             	add    esp,0x10
c0019360:	85 c0                	test   eax,eax
c0019362:	75 1e                	jne    c0019382 <CPU::detectFeatures()+0x25c>
c0019364:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001936e:	e9 8a 01 00 00       	jmp    c00194fd <CPU::detectFeatures()+0x3d7>
c0019373:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001937d:	e9 7b 01 00 00       	jmp    c00194fd <CPU::detectFeatures()+0x3d7>
c0019382:	50                   	push   eax
c0019383:	50                   	push   eax
c0019384:	68 78 b9 02 c0       	push   0xc002b978
c0019389:	57                   	push   edi
c001938a:	e8 39 75 fe ff       	call   c00008c8 <strcmp>
c001938f:	83 c4 10             	add    esp,0x10
c0019392:	85 c0                	test   eax,eax
c0019394:	75 0f                	jne    c00193a5 <CPU::detectFeatures()+0x27f>
c0019396:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00193a0:	e9 58 01 00 00       	jmp    c00194fd <CPU::detectFeatures()+0x3d7>
c00193a5:	50                   	push   eax
c00193a6:	50                   	push   eax
c00193a7:	68 37 b9 02 c0       	push   0xc002b937
c00193ac:	57                   	push   edi
c00193ad:	e8 16 75 fe ff       	call   c00008c8 <strcmp>
c00193b2:	83 c4 10             	add    esp,0x10
c00193b5:	85 c0                	test   eax,eax
c00193b7:	75 0f                	jne    c00193c8 <CPU::detectFeatures()+0x2a2>
c00193b9:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00193c3:	e9 35 01 00 00       	jmp    c00194fd <CPU::detectFeatures()+0x3d7>
c00193c8:	50                   	push   eax
c00193c9:	50                   	push   eax
c00193ca:	68 85 b9 02 c0       	push   0xc002b985
c00193cf:	57                   	push   edi
c00193d0:	e8 f3 74 fe ff       	call   c00008c8 <strcmp>
c00193d5:	83 c4 10             	add    esp,0x10
c00193d8:	85 c0                	test   eax,eax
c00193da:	75 0f                	jne    c00193eb <CPU::detectFeatures()+0x2c5>
c00193dc:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00193e6:	e9 12 01 00 00       	jmp    c00194fd <CPU::detectFeatures()+0x3d7>
c00193eb:	51                   	push   ecx
c00193ec:	51                   	push   ecx
c00193ed:	68 92 b9 02 c0       	push   0xc002b992
c00193f2:	57                   	push   edi
c00193f3:	e8 d0 74 fe ff       	call   c00008c8 <strcmp>
c00193f8:	83 c4 10             	add    esp,0x10
c00193fb:	85 c0                	test   eax,eax
c00193fd:	75 0f                	jne    c001940e <CPU::detectFeatures()+0x2e8>
c00193ff:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0019409:	e9 ef 00 00 00       	jmp    c00194fd <CPU::detectFeatures()+0x3d7>
c001940e:	52                   	push   edx
c001940f:	52                   	push   edx
c0019410:	68 9f b9 02 c0       	push   0xc002b99f
c0019415:	57                   	push   edi
c0019416:	e8 ad 74 fe ff       	call   c00008c8 <strcmp>
c001941b:	83 c4 10             	add    esp,0x10
c001941e:	85 c0                	test   eax,eax
c0019420:	75 0f                	jne    c0019431 <CPU::detectFeatures()+0x30b>
c0019422:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001942c:	e9 cc 00 00 00       	jmp    c00194fd <CPU::detectFeatures()+0x3d7>
c0019431:	50                   	push   eax
c0019432:	50                   	push   eax
c0019433:	68 ac b9 02 c0       	push   0xc002b9ac
c0019438:	57                   	push   edi
c0019439:	e8 8a 74 fe ff       	call   c00008c8 <strcmp>
c001943e:	83 c4 10             	add    esp,0x10
c0019441:	85 c0                	test   eax,eax
c0019443:	75 0f                	jne    c0019454 <CPU::detectFeatures()+0x32e>
c0019445:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001944f:	e9 a9 00 00 00       	jmp    c00194fd <CPU::detectFeatures()+0x3d7>
c0019454:	50                   	push   eax
c0019455:	50                   	push   eax
c0019456:	68 b9 b9 02 c0       	push   0xc002b9b9
c001945b:	57                   	push   edi
c001945c:	e8 67 74 fe ff       	call   c00008c8 <strcmp>
c0019461:	83 c4 10             	add    esp,0x10
c0019464:	85 c0                	test   eax,eax
c0019466:	75 0f                	jne    c0019477 <CPU::detectFeatures()+0x351>
c0019468:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0019472:	e9 86 00 00 00       	jmp    c00194fd <CPU::detectFeatures()+0x3d7>
c0019477:	50                   	push   eax
c0019478:	50                   	push   eax
c0019479:	68 c6 b9 02 c0       	push   0xc002b9c6
c001947e:	57                   	push   edi
c001947f:	e8 44 74 fe ff       	call   c00008c8 <strcmp>
c0019484:	83 c4 10             	add    esp,0x10
c0019487:	85 c0                	test   eax,eax
c0019489:	75 0c                	jne    c0019497 <CPU::detectFeatures()+0x371>
c001948b:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0019495:	eb 66                	jmp    c00194fd <CPU::detectFeatures()+0x3d7>
c0019497:	50                   	push   eax
c0019498:	50                   	push   eax
c0019499:	68 d3 b9 02 c0       	push   0xc002b9d3
c001949e:	57                   	push   edi
c001949f:	e8 24 74 fe ff       	call   c00008c8 <strcmp>
c00194a4:	83 c4 10             	add    esp,0x10
c00194a7:	85 c0                	test   eax,eax
c00194a9:	75 0c                	jne    c00194b7 <CPU::detectFeatures()+0x391>
c00194ab:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00194b5:	eb 46                	jmp    c00194fd <CPU::detectFeatures()+0x3d7>
c00194b7:	50                   	push   eax
c00194b8:	50                   	push   eax
c00194b9:	68 e0 b9 02 c0       	push   0xc002b9e0
c00194be:	57                   	push   edi
c00194bf:	e8 04 74 fe ff       	call   c00008c8 <strcmp>
c00194c4:	83 c4 10             	add    esp,0x10
c00194c7:	85 c0                	test   eax,eax
c00194c9:	74 e0                	je     c00194ab <CPU::detectFeatures()+0x385>
c00194cb:	50                   	push   eax
c00194cc:	50                   	push   eax
c00194cd:	68 ed b9 02 c0       	push   0xc002b9ed
c00194d2:	57                   	push   edi
c00194d3:	e8 f0 73 fe ff       	call   c00008c8 <strcmp>
c00194d8:	83 c4 10             	add    esp,0x10
c00194db:	85 c0                	test   eax,eax
c00194dd:	74 cc                	je     c00194ab <CPU::detectFeatures()+0x385>
c00194df:	51                   	push   ecx
c00194e0:	51                   	push   ecx
c00194e1:	68 fa b9 02 c0       	push   0xc002b9fa
c00194e6:	57                   	push   edi
c00194e7:	e8 dc 73 fe ff       	call   c00008c8 <strcmp>
c00194ec:	83 c4 10             	add    esp,0x10
c00194ef:	85 c0                	test   eax,eax
c00194f1:	74 b8                	je     c00194ab <CPU::detectFeatures()+0x385>
c00194f3:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00194fd:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0019502:	0f 86 be 00 00 00    	jbe    c00195c6 <CPU::detectFeatures()+0x4a0>
c0019508:	83 ec 0c             	sub    esp,0xc
c001950b:	68 80 00 00 00       	push   0x80
c0019510:	e8 ab f8 ff ff       	call   c0018dc0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019515:	83 e0 01             	and    eax,0x1
c0019518:	c1 e0 06             	shl    eax,0x6
c001951b:	88 c2                	mov    dl,al
c001951d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019523:	83 e0 bf             	and    eax,0xffffffbf
c0019526:	09 d0                	or     eax,edx
c0019528:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001952e:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0019535:	e8 86 f8 ff ff       	call   c0018dc0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001953a:	83 e0 01             	and    eax,0x1
c001953d:	c1 e0 04             	shl    eax,0x4
c0019540:	88 c2                	mov    dl,al
c0019542:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019548:	83 e0 ef             	and    eax,0xffffffef
c001954b:	09 d0                	or     eax,edx
c001954d:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019553:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001955a:	e8 61 f8 ff ff       	call   c0018dc0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001955f:	c1 e0 07             	shl    eax,0x7
c0019562:	88 c2                	mov    dl,al
c0019564:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001956a:	83 e0 7f             	and    eax,0x7f
c001956d:	09 d0                	or     eax,edx
c001956f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019575:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001957c:	e8 6d f8 ff ff       	call   c0018dee <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019581:	83 e0 01             	and    eax,0x1
c0019584:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001958b:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019591:	83 e0 f7             	and    eax,0xfffffff7
c0019594:	09 d0                	or     eax,edx
c0019596:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001959c:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00195a3:	e8 46 f8 ff ff       	call   c0018dee <CPU::cpuidCheckExtendedECX(unsigned int)>
c00195a8:	83 c4 10             	add    esp,0x10
c00195ab:	83 e0 01             	and    eax,0x1
c00195ae:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00195b5:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00195bb:	83 e0 fb             	and    eax,0xfffffffb
c00195be:	09 d0                	or     eax,edx
c00195c0:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00195c6:	83 ec 0c             	sub    esp,0xc
c00195c9:	56                   	push   esi
c00195ca:	55                   	push   ebp
c00195cb:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00195cf:	57                   	push   edi
c00195d0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00195d4:	50                   	push   eax
c00195d5:	6a 01                	push   0x1
c00195d7:	e8 04 f7 ff ff       	call   c0018ce0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00195dc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00195e0:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00195e6:	88 ca                	mov    dl,cl
c00195e8:	83 e0 f0             	and    eax,0xfffffff0
c00195eb:	83 e2 0f             	and    edx,0xf
c00195ee:	09 d0                	or     eax,edx
c00195f0:	88 ca                	mov    dl,cl
c00195f2:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00195f8:	c0 ea 04             	shr    dl,0x4
c00195fb:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00195ff:	0f b6 c2             	movzx  eax,dl
c0019602:	83 c4 20             	add    esp,0x20
c0019605:	c1 e0 06             	shl    eax,0x6
c0019608:	89 c5                	mov    ebp,eax
c001960a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019610:	66 25 3f c0          	and    ax,0xc03f
c0019614:	09 e8                	or     eax,ebp
c0019616:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001961d:	89 c8                	mov    eax,ecx
c001961f:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0019625:	c1 e8 08             	shr    eax,0x8
c0019628:	83 e2 3f             	and    edx,0x3f
c001962b:	83 e0 0f             	and    eax,0xf
c001962e:	89 c5                	mov    ebp,eax
c0019630:	c1 e5 06             	shl    ebp,0x6
c0019633:	09 d5                	or     ebp,edx
c0019635:	89 ea                	mov    edx,ebp
c0019637:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001963d:	88 c2                	mov    dl,al
c001963f:	c0 ea 02             	shr    dl,0x2
c0019642:	89 d5                	mov    ebp,edx
c0019644:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001964a:	83 e2 c0             	and    edx,0xffffffc0
c001964d:	09 d5                	or     ebp,edx
c001964f:	89 ea                	mov    edx,ebp
c0019651:	89 cd                	mov    ebp,ecx
c0019653:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0019659:	c1 ed 0c             	shr    ebp,0xc
c001965c:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0019662:	83 e5 03             	and    ebp,0x3
c0019665:	83 e2 cf             	and    edx,0xffffffcf
c0019668:	c1 e5 04             	shl    ebp,0x4
c001966b:	09 d5                	or     ebp,edx
c001966d:	3c 06                	cmp    al,0x6
c001966f:	89 ea                	mov    edx,ebp
c0019671:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0019677:	74 04                	je     c001967d <CPU::detectFeatures()+0x557>
c0019679:	3c 0f                	cmp    al,0xf
c001967b:	75 5c                	jne    c00196d9 <CPU::detectFeatures()+0x5b3>
c001967d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019681:	89 cd                	mov    ebp,ecx
c0019683:	c1 ed 10             	shr    ebp,0x10
c0019686:	c1 e5 04             	shl    ebp,0x4
c0019689:	09 ea                	or     edx,ebp
c001968b:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0019691:	0f b6 d2             	movzx  edx,dl
c0019694:	66 81 e5 3f c0       	and    bp,0xc03f
c0019699:	c1 e2 06             	shl    edx,0x6
c001969c:	09 ea                	or     edx,ebp
c001969e:	3c 0f                	cmp    al,0xf
c00196a0:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00196a7:	75 30                	jne    c00196d9 <CPU::detectFeatures()+0x5b3>
c00196a9:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00196af:	c1 e9 14             	shr    ecx,0x14
c00196b2:	83 e0 3f             	and    eax,0x3f
c00196b5:	83 c1 0f             	add    ecx,0xf
c00196b8:	88 ca                	mov    dl,cl
c00196ba:	c0 e9 02             	shr    cl,0x2
c00196bd:	c1 e2 06             	shl    edx,0x6
c00196c0:	09 d0                	or     eax,edx
c00196c2:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00196c8:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00196ce:	83 e0 c0             	and    eax,0xffffffc0
c00196d1:	09 c1                	or     ecx,eax
c00196d3:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00196d9:	83 ec 0c             	sub    esp,0xc
c00196dc:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00196e3:	56                   	push   esi
c00196e4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00196e8:	50                   	push   eax
c00196e9:	57                   	push   edi
c00196ea:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00196ee:	55                   	push   ebp
c00196ef:	68 00 00 00 80       	push   0x80000000
c00196f4:	e8 e7 f5 ff ff       	call   c0018ce0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00196f9:	83 c4 20             	add    esp,0x20
c00196fc:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0019704:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019708:	76 1e                	jbe    c0019728 <CPU::detectFeatures()+0x602>
c001970a:	83 ec 0c             	sub    esp,0xc
c001970d:	56                   	push   esi
c001970e:	50                   	push   eax
c001970f:	57                   	push   edi
c0019710:	55                   	push   ebp
c0019711:	68 01 00 00 80       	push   0x80000001
c0019716:	e8 c5 f5 ff ff       	call   c0018ce0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001971b:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0019725:	83 c4 20             	add    esp,0x20
c0019728:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001972e:	83 f8 01             	cmp    eax,0x1
c0019731:	75 6f                	jne    c00197a2 <CPU::detectFeatures()+0x67c>
c0019733:	51                   	push   ecx
c0019734:	51                   	push   ecx
c0019735:	68 06 ba 02 c0       	push   0xc002ba06
c001973a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001973e:	56                   	push   esi
c001973f:	e8 f8 70 fe ff       	call   c000083c <strcpy>
c0019744:	5f                   	pop    edi
c0019745:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001974b:	5d                   	pop    ebp
c001974c:	66 c1 e8 06          	shr    ax,0x6
c0019750:	0f b6 c0             	movzx  eax,al
c0019753:	50                   	push   eax
c0019754:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001975a:	c1 e8 0e             	shr    eax,0xe
c001975d:	0f b6 c0             	movzx  eax,al
c0019760:	50                   	push   eax
c0019761:	e8 24 f2 ff ff       	call   c001898a <CPU::lookupIntelName(unsigned char, unsigned char)>
c0019766:	5a                   	pop    edx
c0019767:	59                   	pop    ecx
c0019768:	50                   	push   eax
c0019769:	56                   	push   esi
c001976a:	e8 0d 72 fe ff       	call   c000097c <strcat>
c001976f:	5f                   	pop    edi
c0019770:	5d                   	pop    ebp
c0019771:	56                   	push   esi
c0019772:	53                   	push   ebx
c0019773:	e8 9e ad ff ff       	call   c0014516 <Device::setName(char const*)>
c0019778:	58                   	pop    eax
c0019779:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001977f:	5a                   	pop    edx
c0019780:	68 0d ba 02 c0       	push   0xc002ba0d
c0019785:	50                   	push   eax
c0019786:	e8 3d 71 fe ff       	call   c00008c8 <strcmp>
c001978b:	83 c4 10             	add    esp,0x10
c001978e:	85 c0                	test   eax,eax
c0019790:	0f 85 71 03 00 00    	jne    c0019b07 <CPU::detectFeatures()+0x9e1>
c0019796:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c001979d:	e9 65 03 00 00       	jmp    c0019b07 <CPU::detectFeatures()+0x9e1>
c00197a2:	83 f8 02             	cmp    eax,0x2
c00197a5:	0f 85 b5 00 00 00    	jne    c0019860 <CPU::detectFeatures()+0x73a>
c00197ab:	57                   	push   edi
c00197ac:	57                   	push   edi
c00197ad:	68 1f ba 02 c0       	push   0xc002ba1f
c00197b2:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00197b6:	56                   	push   esi
c00197b7:	e8 80 70 fe ff       	call   c000083c <strcpy>
c00197bc:	5d                   	pop    ebp
c00197bd:	58                   	pop    eax
c00197be:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197c4:	66 c1 e8 06          	shr    ax,0x6
c00197c8:	0f b6 c0             	movzx  eax,al
c00197cb:	50                   	push   eax
c00197cc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197d2:	c1 e8 0e             	shr    eax,0xe
c00197d5:	0f b6 c0             	movzx  eax,al
c00197d8:	50                   	push   eax
c00197d9:	e8 18 f0 ff ff       	call   c00187f6 <CPU::lookupAMDName(unsigned char, unsigned char)>
c00197de:	5a                   	pop    edx
c00197df:	59                   	pop    ecx
c00197e0:	50                   	push   eax
c00197e1:	56                   	push   esi
c00197e2:	e8 95 71 fe ff       	call   c000097c <strcat>
c00197e7:	5f                   	pop    edi
c00197e8:	5d                   	pop    ebp
c00197e9:	56                   	push   esi
c00197ea:	53                   	push   ebx
c00197eb:	e8 26 ad ff ff       	call   c0014516 <Device::setName(char const*)>
c00197f0:	58                   	pop    eax
c00197f1:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00197f7:	5a                   	pop    edx
c00197f8:	68 24 ba 02 c0       	push   0xc002ba24
c00197fd:	50                   	push   eax
c00197fe:	e8 c5 70 fe ff       	call   c00008c8 <strcmp>
c0019803:	83 c4 10             	add    esp,0x10
c0019806:	85 c0                	test   eax,eax
c0019808:	75 20                	jne    c001982a <CPU::detectFeatures()+0x704>
c001980a:	8b 15 c8 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5c8
c0019810:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019816:	a8 01                	test   al,0x1
c0019818:	74 10                	je     c001982a <CPU::detectFeatures()+0x704>
c001981a:	83 e0 fe             	and    eax,0xfffffffe
c001981d:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019823:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c001982a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019830:	c1 e8 0e             	shr    eax,0xe
c0019833:	3c 05                	cmp    al,0x5
c0019835:	0f 85 cc 02 00 00    	jne    c0019b07 <CPU::detectFeatures()+0x9e1>
c001983b:	56                   	push   esi
c001983c:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019842:	83 e0 0f             	and    eax,0xf
c0019845:	50                   	push   eax
c0019846:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001984c:	66 c1 e8 06          	shr    ax,0x6
c0019850:	0f b6 c0             	movzx  eax,al
c0019853:	50                   	push   eax
c0019854:	6a 05                	push   0x5
c0019856:	e8 11 f4 ff ff       	call   c0018c6c <CPU::AMD_K6_writeback(int, int, int)>
c001985b:	e9 1f 02 00 00       	jmp    c0019a7f <CPU::detectFeatures()+0x959>
c0019860:	8d 50 fd             	lea    edx,[eax-0x3]
c0019863:	83 fa 01             	cmp    edx,0x1
c0019866:	76 09                	jbe    c0019871 <CPU::detectFeatures()+0x74b>
c0019868:	83 f8 06             	cmp    eax,0x6
c001986b:	0f 85 91 01 00 00    	jne    c0019a02 <CPU::detectFeatures()+0x8dc>
c0019871:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019877:	c1 ea 0e             	shr    edx,0xe
c001987a:	80 fa 05             	cmp    dl,0x5
c001987d:	75 7b                	jne    c00198fa <CPU::detectFeatures()+0x7d4>
c001987f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019885:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001988a:	66 81 fa 00 01       	cmp    dx,0x100
c001988f:	75 0c                	jne    c001989d <CPU::detectFeatures()+0x777>
c0019891:	51                   	push   ecx
c0019892:	51                   	push   ecx
c0019893:	68 2b ba 02 c0       	push   0xc002ba2b
c0019898:	e9 dc 01 00 00       	jmp    c0019a79 <CPU::detectFeatures()+0x953>
c001989d:	66 81 fa 00 02       	cmp    dx,0x200
c00198a2:	75 0c                	jne    c00198b0 <CPU::detectFeatures()+0x78a>
c00198a4:	52                   	push   edx
c00198a5:	52                   	push   edx
c00198a6:	68 3e ba 02 c0       	push   0xc002ba3e
c00198ab:	e9 c9 01 00 00       	jmp    c0019a79 <CPU::detectFeatures()+0x953>
c00198b0:	66 81 fa 40 02       	cmp    dx,0x240
c00198b5:	75 0c                	jne    c00198c3 <CPU::detectFeatures()+0x79d>
c00198b7:	50                   	push   eax
c00198b8:	50                   	push   eax
c00198b9:	68 50 ba 02 c0       	push   0xc002ba50
c00198be:	e9 b6 01 00 00       	jmp    c0019a79 <CPU::detectFeatures()+0x953>
c00198c3:	83 f8 06             	cmp    eax,0x6
c00198c6:	75 0c                	jne    c00198d4 <CPU::detectFeatures()+0x7ae>
c00198c8:	50                   	push   eax
c00198c9:	50                   	push   eax
c00198ca:	68 62 ba 02 c0       	push   0xc002ba62
c00198cf:	e9 a5 01 00 00       	jmp    c0019a79 <CPU::detectFeatures()+0x953>
c00198d4:	83 f8 04             	cmp    eax,0x4
c00198d7:	75 0c                	jne    c00198e5 <CPU::detectFeatures()+0x7bf>
c00198d9:	50                   	push   eax
c00198da:	50                   	push   eax
c00198db:	68 6e ba 02 c0       	push   0xc002ba6e
c00198e0:	e9 94 01 00 00       	jmp    c0019a79 <CPU::detectFeatures()+0x953>
c00198e5:	83 f8 03             	cmp    eax,0x3
c00198e8:	0f 85 19 02 00 00    	jne    c0019b07 <CPU::detectFeatures()+0x9e1>
c00198ee:	50                   	push   eax
c00198ef:	50                   	push   eax
c00198f0:	68 76 ba 02 c0       	push   0xc002ba76
c00198f5:	e9 7f 01 00 00       	jmp    c0019a79 <CPU::detectFeatures()+0x953>
c00198fa:	80 fa 06             	cmp    dl,0x6
c00198fd:	0f 85 db 00 00 00    	jne    c00199de <CPU::detectFeatures()+0x8b8>
c0019903:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019909:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001990e:	66 81 fa 80 01       	cmp    dx,0x180
c0019913:	75 0c                	jne    c0019921 <CPU::detectFeatures()+0x7fb>
c0019915:	50                   	push   eax
c0019916:	50                   	push   eax
c0019917:	68 81 ba 02 c0       	push   0xc002ba81
c001991c:	e9 58 01 00 00       	jmp    c0019a79 <CPU::detectFeatures()+0x953>
c0019921:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019927:	66 f7 c1 80 ff       	test   cx,0xff80
c001992c:	75 0c                	jne    c001993a <CPU::detectFeatures()+0x814>
c001992e:	50                   	push   eax
c001992f:	50                   	push   eax
c0019930:	68 91 ba 02 c0       	push   0xc002ba91
c0019935:	e9 3f 01 00 00       	jmp    c0019a79 <CPU::detectFeatures()+0x953>
c001993a:	66 81 fa 40 02       	cmp    dx,0x240
c001993f:	75 0c                	jne    c001994d <CPU::detectFeatures()+0x827>
c0019941:	55                   	push   ebp
c0019942:	55                   	push   ebp
c0019943:	68 98 ba 02 c0       	push   0xc002ba98
c0019948:	e9 2c 01 00 00       	jmp    c0019a79 <CPU::detectFeatures()+0x953>
c001994d:	66 81 fa 80 02       	cmp    dx,0x280
c0019952:	75 0c                	jne    c0019960 <CPU::detectFeatures()+0x83a>
c0019954:	57                   	push   edi
c0019955:	57                   	push   edi
c0019956:	68 a1 ba 02 c0       	push   0xc002baa1
c001995b:	e9 19 01 00 00       	jmp    c0019a79 <CPU::detectFeatures()+0x953>
c0019960:	66 81 fa 40 03       	cmp    dx,0x340
c0019965:	74 ed                	je     c0019954 <CPU::detectFeatures()+0x82e>
c0019967:	66 81 fa c0 03       	cmp    dx,0x3c0
c001996c:	75 0c                	jne    c001997a <CPU::detectFeatures()+0x854>
c001996e:	56                   	push   esi
c001996f:	56                   	push   esi
c0019970:	68 a8 ba 02 c0       	push   0xc002baa8
c0019975:	e9 ff 00 00 00       	jmp    c0019a79 <CPU::detectFeatures()+0x953>
c001997a:	83 f8 06             	cmp    eax,0x6
c001997d:	0f 84 45 ff ff ff    	je     c00198c8 <CPU::detectFeatures()+0x7a2>
c0019983:	83 f8 04             	cmp    eax,0x4
c0019986:	0f 84 4d ff ff ff    	je     c00198d9 <CPU::detectFeatures()+0x7b3>
c001998c:	83 f8 03             	cmp    eax,0x3
c001998f:	0f 85 72 01 00 00    	jne    c0019b07 <CPU::detectFeatures()+0x9e1>
c0019995:	51                   	push   ecx
c0019996:	51                   	push   ecx
c0019997:	68 b1 ba 02 c0       	push   0xc002bab1
c001999c:	53                   	push   ebx
c001999d:	e8 74 ab ff ff       	call   c0014516 <Device::setName(char const*)>
c00199a2:	b1 c1                	mov    cl,0xc1
c00199a4:	88 c8                	mov    al,cl
c00199a6:	e6 22                	out    0x22,al
c00199a8:	e4 23                	in     al,0x23
c00199aa:	88 c2                	mov    dl,al
c00199ac:	88 c8                	mov    al,cl
c00199ae:	e6 22                	out    0x22,al
c00199b0:	88 d0                	mov    al,dl
c00199b2:	83 c8 10             	or     eax,0x10
c00199b5:	e6 23                	out    0x23,al
c00199b7:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00199be:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00199c1:	89 d0                	mov    eax,edx
c00199c3:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00199c9:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00199cd:	40                   	inc    eax
c00199ce:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00199d4:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00199d9:	e9 a1 00 00 00       	jmp    c0019a7f <CPU::detectFeatures()+0x959>
c00199de:	83 f8 06             	cmp    eax,0x6
c00199e1:	0f 84 e1 fe ff ff    	je     c00198c8 <CPU::detectFeatures()+0x7a2>
c00199e7:	83 f8 04             	cmp    eax,0x4
c00199ea:	0f 84 e9 fe ff ff    	je     c00198d9 <CPU::detectFeatures()+0x7b3>
c00199f0:	83 f8 03             	cmp    eax,0x3
c00199f3:	0f 85 0e 01 00 00    	jne    c0019b07 <CPU::detectFeatures()+0x9e1>
c00199f9:	52                   	push   edx
c00199fa:	52                   	push   edx
c00199fb:	68 bc ba 02 c0       	push   0xc002babc
c0019a00:	eb 77                	jmp    c0019a79 <CPU::detectFeatures()+0x953>
c0019a02:	83 f8 07             	cmp    eax,0x7
c0019a05:	75 09                	jne    c0019a10 <CPU::detectFeatures()+0x8ea>
c0019a07:	50                   	push   eax
c0019a08:	50                   	push   eax
c0019a09:	68 c6 ba 02 c0       	push   0xc002bac6
c0019a0e:	eb 69                	jmp    c0019a79 <CPU::detectFeatures()+0x953>
c0019a10:	83 f8 0a             	cmp    eax,0xa
c0019a13:	75 09                	jne    c0019a1e <CPU::detectFeatures()+0x8f8>
c0019a15:	50                   	push   eax
c0019a16:	50                   	push   eax
c0019a17:	68 d1 ba 02 c0       	push   0xc002bad1
c0019a1c:	eb 5b                	jmp    c0019a79 <CPU::detectFeatures()+0x953>
c0019a1e:	83 f8 0b             	cmp    eax,0xb
c0019a21:	75 09                	jne    c0019a2c <CPU::detectFeatures()+0x906>
c0019a23:	50                   	push   eax
c0019a24:	50                   	push   eax
c0019a25:	68 d9 ba 02 c0       	push   0xc002bad9
c0019a2a:	eb 4d                	jmp    c0019a79 <CPU::detectFeatures()+0x953>
c0019a2c:	83 f8 08             	cmp    eax,0x8
c0019a2f:	75 09                	jne    c0019a3a <CPU::detectFeatures()+0x914>
c0019a31:	50                   	push   eax
c0019a32:	50                   	push   eax
c0019a33:	68 e2 ba 02 c0       	push   0xc002bae2
c0019a38:	eb 3f                	jmp    c0019a79 <CPU::detectFeatures()+0x953>
c0019a3a:	83 f8 09             	cmp    eax,0x9
c0019a3d:	75 09                	jne    c0019a48 <CPU::detectFeatures()+0x922>
c0019a3f:	50                   	push   eax
c0019a40:	50                   	push   eax
c0019a41:	68 ea ba 02 c0       	push   0xc002baea
c0019a46:	eb 31                	jmp    c0019a79 <CPU::detectFeatures()+0x953>
c0019a48:	83 f8 05             	cmp    eax,0x5
c0019a4b:	75 09                	jne    c0019a56 <CPU::detectFeatures()+0x930>
c0019a4d:	50                   	push   eax
c0019a4e:	50                   	push   eax
c0019a4f:	68 f2 ba 02 c0       	push   0xc002baf2
c0019a54:	eb 23                	jmp    c0019a79 <CPU::detectFeatures()+0x953>
c0019a56:	83 f8 0c             	cmp    eax,0xc
c0019a59:	75 09                	jne    c0019a64 <CPU::detectFeatures()+0x93e>
c0019a5b:	55                   	push   ebp
c0019a5c:	55                   	push   ebp
c0019a5d:	68 00 bb 02 c0       	push   0xc002bb00
c0019a62:	eb 15                	jmp    c0019a79 <CPU::detectFeatures()+0x953>
c0019a64:	83 f8 0d             	cmp    eax,0xd
c0019a67:	75 09                	jne    c0019a72 <CPU::detectFeatures()+0x94c>
c0019a69:	57                   	push   edi
c0019a6a:	57                   	push   edi
c0019a6b:	68 0b bb 02 c0       	push   0xc002bb0b
c0019a70:	eb 07                	jmp    c0019a79 <CPU::detectFeatures()+0x953>
c0019a72:	56                   	push   esi
c0019a73:	56                   	push   esi
c0019a74:	68 1f bb 02 c0       	push   0xc002bb1f
c0019a79:	53                   	push   ebx
c0019a7a:	e8 97 aa ff ff       	call   c0014516 <Device::setName(char const*)>
c0019a7f:	83 c4 10             	add    esp,0x10
c0019a82:	e9 80 00 00 00       	jmp    c0019b07 <CPU::detectFeatures()+0x9e1>
c0019a87:	51                   	push   ecx
c0019a88:	51                   	push   ecx
c0019a89:	68 6b b9 02 c0       	push   0xc002b96b
c0019a8e:	57                   	push   edi
c0019a8f:	e8 a8 6d fe ff       	call   c000083c <strcpy>
c0019a94:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019a9e:	e8 0b 68 fe ff       	call   c00002ae <is486>
c0019aa3:	83 c4 10             	add    esp,0x10
c0019aa6:	85 c0                	test   eax,eax
c0019aa8:	74 2b                	je     c0019ad5 <CPU::detectFeatures()+0x9af>
c0019aaa:	52                   	push   edx
c0019aab:	52                   	push   edx
c0019aac:	68 2b bb 02 c0       	push   0xc002bb2b
c0019ab1:	53                   	push   ebx
c0019ab2:	e8 5f aa ff ff       	call   c0014516 <Device::setName(char const*)>
c0019ab7:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019abe:	0f 20 c0             	mov    eax,cr0
c0019ac1:	83 e0 14             	and    eax,0x14
c0019ac4:	83 c4 10             	add    esp,0x10
c0019ac7:	83 f8 04             	cmp    eax,0x4
c0019aca:	75 1f                	jne    c0019aeb <CPU::detectFeatures()+0x9c5>
c0019acc:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019ad3:	eb 32                	jmp    c0019b07 <CPU::detectFeatures()+0x9e1>
c0019ad5:	50                   	push   eax
c0019ad6:	50                   	push   eax
c0019ad7:	68 36 bb 02 c0       	push   0xc002bb36
c0019adc:	53                   	push   ebx
c0019add:	e8 34 aa ff ff       	call   c0014516 <Device::setName(char const*)>
c0019ae2:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019ae9:	eb d3                	jmp    c0019abe <CPU::detectFeatures()+0x998>
c0019aeb:	e8 99 67 fe ff       	call   c0000289 <hasLegacyFPU>
c0019af0:	83 e0 01             	and    eax,0x1
c0019af3:	8d 14 00             	lea    edx,[eax+eax*1]
c0019af6:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019afc:	83 e0 fd             	and    eax,0xfffffffd
c0019aff:	09 d0                	or     eax,edx
c0019b01:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019b07:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019b0e:	83 c4 4c             	add    esp,0x4c
c0019b11:	5b                   	pop    ebx
c0019b12:	5e                   	pop    esi
c0019b13:	5f                   	pop    edi
c0019b14:	5d                   	pop    ebp
c0019b15:	c3                   	ret    

c0019b16 <CPU::setupSMEP()>:
c0019b16:	0f 20 e0             	mov    eax,cr4
c0019b19:	0d 00 00 10 00       	or     eax,0x100000
c0019b1e:	0f 22 e0             	mov    cr4,eax
c0019b21:	c3                   	ret    

c0019b22 <CPU::setupUMIP()>:
c0019b22:	0f 20 e0             	mov    eax,cr4
c0019b25:	80 cc 08             	or     ah,0x8
c0019b28:	0f 22 e0             	mov    cr4,eax
c0019b2b:	c3                   	ret    

c0019b2c <CPU::setupTSC()>:
c0019b2c:	0f 20 e0             	mov    eax,cr4
c0019b2f:	83 c8 04             	or     eax,0x4
c0019b32:	0f 22 e0             	mov    cr4,eax
c0019b35:	c3                   	ret    

c0019b36 <CPU::setupLargePages()>:
c0019b36:	0f 20 e0             	mov    eax,cr4
c0019b39:	83 c8 10             	or     eax,0x10
c0019b3c:	0f 22 e0             	mov    cr4,eax
c0019b3f:	c3                   	ret    

c0019b40 <CPU::setupPAT()>:
c0019b40:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0019b45:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019b4c:	74 2c                	je     c0019b7a <CPU::setupPAT()+0x3a>
c0019b4e:	53                   	push   ebx
c0019b4f:	83 ec 10             	sub    esp,0x10
c0019b52:	68 77 02 00 00       	push   0x277
c0019b57:	50                   	push   eax
c0019b58:	e8 93 52 ff ff       	call   c000edf0 <Computer::rdmsr(unsigned int)>
c0019b5d:	83 e2 f8             	and    edx,0xfffffff8
c0019b60:	83 ca 01             	or     edx,0x1
c0019b63:	52                   	push   edx
c0019b64:	50                   	push   eax
c0019b65:	68 77 02 00 00       	push   0x277
c0019b6a:	ff 35 c8 e5 02 c0    	push   DWORD PTR ds:0xc002e5c8
c0019b70:	e8 a7 52 ff ff       	call   c000ee1c <Computer::wrmsr(unsigned int, unsigned long long)>
c0019b75:	83 c4 28             	add    esp,0x28
c0019b78:	5b                   	pop    ebx
c0019b79:	c3                   	ret    
c0019b7a:	c3                   	ret    
c0019b7b:	90                   	nop

c0019b7c <CPU::setupMTRR()>:
c0019b7c:	c3                   	ret    
c0019b7d:	90                   	nop

c0019b7e <CPU::setupGlobalPages()>:
c0019b7e:	0f 20 e0             	mov    eax,cr4
c0019b81:	0c 80                	or     al,0x80
c0019b83:	0f 22 e0             	mov    cr4,eax
c0019b86:	c3                   	ret    
c0019b87:	90                   	nop

c0019b88 <CPU::allowUsermodeDataAccess()>:
c0019b88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b8c:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019b93:	74 03                	je     c0019b98 <CPU::allowUsermodeDataAccess()+0x10>
c0019b95:	0f 01 cb             	stac   
c0019b98:	c3                   	ret    
c0019b99:	90                   	nop

c0019b9a <CPU::prohibitUsermodeDataAccess()>:
c0019b9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b9e:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019ba5:	74 03                	je     c0019baa <CPU::prohibitUsermodeDataAccess()+0x10>
c0019ba7:	0f 01 ca             	clac   
c0019baa:	c3                   	ret    
c0019bab:	90                   	nop

c0019bac <CPU::setupSMAP()>:
c0019bac:	0f 20 e0             	mov    eax,cr4
c0019baf:	0d 00 00 20 00       	or     eax,0x200000
c0019bb4:	0f 22 e0             	mov    cr4,eax
c0019bb7:	eb e1                	jmp    c0019b9a <CPU::prohibitUsermodeDataAccess()>
c0019bb9:	90                   	nop

c0019bba <CPU::setupFeatures()>:
c0019bba:	83 ec 0c             	sub    esp,0xc
c0019bbd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019bc1:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019bc8:	74 07                	je     c0019bd1 <CPU::setupFeatures()+0x17>
c0019bca:	52                   	push   edx
c0019bcb:	e8 46 ff ff ff       	call   c0019b16 <CPU::setupSMEP()>
c0019bd0:	58                   	pop    eax
c0019bd1:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019bd8:	74 07                	je     c0019be1 <CPU::setupFeatures()+0x27>
c0019bda:	52                   	push   edx
c0019bdb:	e8 cc ff ff ff       	call   c0019bac <CPU::setupSMAP()>
c0019be0:	58                   	pop    eax
c0019be1:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019be8:	74 07                	je     c0019bf1 <CPU::setupFeatures()+0x37>
c0019bea:	52                   	push   edx
c0019beb:	e8 32 ff ff ff       	call   c0019b22 <CPU::setupUMIP()>
c0019bf0:	58                   	pop    eax
c0019bf1:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019bf8:	74 07                	je     c0019c01 <CPU::setupFeatures()+0x47>
c0019bfa:	52                   	push   edx
c0019bfb:	e8 2c ff ff ff       	call   c0019b2c <CPU::setupTSC()>
c0019c00:	58                   	pop    eax
c0019c01:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019c08:	74 07                	je     c0019c11 <CPU::setupFeatures()+0x57>
c0019c0a:	52                   	push   edx
c0019c0b:	e8 26 ff ff ff       	call   c0019b36 <CPU::setupLargePages()>
c0019c10:	59                   	pop    ecx
c0019c11:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019c18:	74 07                	je     c0019c21 <CPU::setupFeatures()+0x67>
c0019c1a:	52                   	push   edx
c0019c1b:	e8 5e ff ff ff       	call   c0019b7e <CPU::setupGlobalPages()>
c0019c20:	58                   	pop    eax
c0019c21:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019c28:	74 0c                	je     c0019c36 <CPU::setupFeatures()+0x7c>
c0019c2a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019c2e:	83 c4 0c             	add    esp,0xc
c0019c31:	e9 0a ff ff ff       	jmp    c0019b40 <CPU::setupPAT()>
c0019c36:	83 c4 0c             	add    esp,0xc
c0019c39:	c3                   	ret    

c0019c3a <CPU::open(int, int, void*)>:
c0019c3a:	57                   	push   edi
c0019c3b:	56                   	push   esi
c0019c3c:	53                   	push   ebx
c0019c3d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019c41:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019c45:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019c4b:	83 ec 0c             	sub    esp,0xc
c0019c4e:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019c54:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019c5a:	50                   	push   eax
c0019c5b:	e8 7c 54 ff ff       	call   c000f0dc <GDT::setup()>
c0019c60:	83 c4 0c             	add    esp,0xc
c0019c63:	6a 00                	push   0x0
c0019c65:	68 ef be ad de       	push   0xdeadbeef
c0019c6a:	57                   	push   edi
c0019c6b:	e8 4c 78 ff ff       	call   c00114bc <TSS::setup(unsigned long, unsigned long)>
c0019c70:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019c73:	e8 24 78 ff ff       	call   c001149c <TSS::flush()>
c0019c78:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019c7e:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c81:	e8 b2 56 ff ff       	call   c000f338 <IDT::setup()>
c0019c86:	b8 00 04 00 00       	mov    eax,0x400
c0019c8b:	0f 23 f8             	mov    db7,eax
c0019c8e:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019c98:	e8 50 62 ff ff       	call   c000feed <Phys::allocatePage()>
c0019c9d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019ca3:	89 30                	mov    DWORD PTR [eax],esi
c0019ca5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019cab:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019cae:	58                   	pop    eax
c0019caf:	5a                   	pop    edx
c0019cb0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019cb6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019cba:	e8 79 89 ff ff       	call   c0012638 <VAS::setCPUSpecific(unsigned long)>
c0019cbf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019cc2:	e8 5f f4 ff ff       	call   c0019126 <CPU::detectFeatures()>
c0019cc7:	e8 7c bc ff ff       	call   c0015948 <setupInterruptController()>
c0019ccc:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019cd2:	a1 e0 e5 02 c0       	mov    eax,ds:0xc002e5e0
c0019cd7:	83 e0 10             	and    eax,0x10
c0019cda:	83 f8 01             	cmp    eax,0x1
c0019cdd:	19 c0                	sbb    eax,eax
c0019cdf:	83 e0 46             	and    eax,0x46
c0019ce2:	83 c0 1e             	add    eax,0x1e
c0019ce5:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ce8:	e8 9f d1 ff ff       	call   c0016e8c <setupTimer(int)>
c0019ced:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019cf3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019cf6:	e8 bf fe ff ff       	call   c0019bba <CPU::setupFeatures()>
c0019cfb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019cfe:	e8 a7 f1 ff ff       	call   c0018eaa <CPU::displayFeatures()>
c0019d03:	83 c4 10             	add    esp,0x10
c0019d06:	31 c0                	xor    eax,eax
c0019d08:	5b                   	pop    ebx
c0019d09:	5e                   	pop    esi
c0019d0a:	5f                   	pop    edi
c0019d0b:	c3                   	ret    

c0019d0c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019d0c:	57                   	push   edi
c0019d0d:	56                   	push   esi
c0019d0e:	53                   	push   ebx
c0019d0f:	51                   	push   ecx
c0019d10:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019d14:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019d17:	0f 02 c0             	lar    eax,ax
c0019d1a:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019d1d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019d21:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019d24:	88 ca                	mov    dl,cl
c0019d26:	c0 ea 06             	shr    dl,0x6
c0019d29:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019d2d:	89 ca                	mov    edx,ecx
c0019d2f:	66 c1 ea 03          	shr    dx,0x3
c0019d33:	83 e2 07             	and    edx,0x7
c0019d36:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019d3b:	88 17                	mov    BYTE PTR [edi],dl
c0019d3d:	0f 84 a6 01 00 00    	je     c0019ee9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019d43:	83 e1 07             	and    ecx,0x7
c0019d46:	80 f9 04             	cmp    cl,0x4
c0019d49:	0f 84 98 00 00 00    	je     c0019de7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019d4f:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019d54:	0f 95 c0             	setne  al
c0019d57:	80 f9 05             	cmp    cl,0x5
c0019d5a:	0f 95 c2             	setne  dl
c0019d5d:	08 c2                	or     dl,al
c0019d5f:	74 79                	je     c0019dda <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019d61:	84 c9                	test   cl,cl
c0019d63:	75 05                	jne    c0019d6a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019d65:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019d68:	eb 3c                	jmp    c0019da6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d6a:	80 f9 01             	cmp    cl,0x1
c0019d6d:	75 05                	jne    c0019d74 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019d6f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019d72:	eb 32                	jmp    c0019da6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d74:	80 f9 02             	cmp    cl,0x2
c0019d77:	75 05                	jne    c0019d7e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019d79:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019d7c:	eb 28                	jmp    c0019da6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d7e:	31 c0                	xor    eax,eax
c0019d80:	80 f9 03             	cmp    cl,0x3
c0019d83:	75 05                	jne    c0019d8a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019d85:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019d88:	eb 1c                	jmp    c0019da6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d8a:	80 f9 05             	cmp    cl,0x5
c0019d8d:	75 05                	jne    c0019d94 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019d8f:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019d92:	eb 12                	jmp    c0019da6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d94:	80 f9 06             	cmp    cl,0x6
c0019d97:	75 05                	jne    c0019d9e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019d99:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019d9c:	eb 08                	jmp    c0019da6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d9e:	80 f9 07             	cmp    cl,0x7
c0019da1:	75 03                	jne    c0019da6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019da3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019da6:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019dab:	75 10                	jne    c0019dbd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019dad:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019db1:	b9 03 00 00 00       	mov    ecx,0x3
c0019db6:	01 d0                	add    eax,edx
c0019db8:	e9 37 01 00 00       	jmp    c0019ef4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019dbd:	b9 02 00 00 00       	mov    ecx,0x2
c0019dc2:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019dc7:	0f 85 27 01 00 00    	jne    c0019ef4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019dcd:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019dd0:	b9 06 00 00 00       	mov    ecx,0x6
c0019dd5:	e9 1a 01 00 00       	jmp    c0019ef4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019dda:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019ddd:	b9 06 00 00 00       	mov    ecx,0x6
c0019de2:	e9 0f 01 00 00       	jmp    c0019ef6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019de7:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019dea:	88 ca                	mov    dl,cl
c0019dec:	c0 ea 06             	shr    dl,0x6
c0019def:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019df3:	89 ca                	mov    edx,ecx
c0019df5:	66 c1 ea 03          	shr    dx,0x3
c0019df9:	83 e2 07             	and    edx,0x7
c0019dfc:	80 e1 07             	and    cl,0x7
c0019dff:	75 05                	jne    c0019e06 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019e01:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019e04:	eb 4c                	jmp    c0019e52 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e06:	80 f9 01             	cmp    cl,0x1
c0019e09:	75 05                	jne    c0019e10 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019e0b:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019e0e:	eb 42                	jmp    c0019e52 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e10:	80 f9 02             	cmp    cl,0x2
c0019e13:	75 05                	jne    c0019e1a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019e15:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019e18:	eb 38                	jmp    c0019e52 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e1a:	80 f9 03             	cmp    cl,0x3
c0019e1d:	75 05                	jne    c0019e24 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019e1f:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019e22:	eb 2e                	jmp    c0019e52 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e24:	80 f9 04             	cmp    cl,0x4
c0019e27:	75 12                	jne    c0019e3b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019e29:	f6 c4 60             	test   ah,0x60
c0019e2c:	75 08                	jne    c0019e36 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019e2e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019e31:	8d 78 14             	lea    edi,[eax+0x14]
c0019e34:	eb 1c                	jmp    c0019e52 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e36:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019e39:	eb 17                	jmp    c0019e52 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e3b:	80 f9 05             	cmp    cl,0x5
c0019e3e:	75 05                	jne    c0019e45 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019e40:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019e43:	eb 0d                	jmp    c0019e52 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e45:	80 f9 06             	cmp    cl,0x6
c0019e48:	75 05                	jne    c0019e4f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019e4a:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019e4d:	eb 03                	jmp    c0019e52 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e4f:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019e52:	84 d2                	test   dl,dl
c0019e54:	75 05                	jne    c0019e5b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019e56:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019e59:	eb 3c                	jmp    c0019e97 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e5b:	80 fa 01             	cmp    dl,0x1
c0019e5e:	75 05                	jne    c0019e65 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019e60:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019e63:	eb 32                	jmp    c0019e97 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e65:	80 fa 02             	cmp    dl,0x2
c0019e68:	75 05                	jne    c0019e6f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019e6a:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019e6d:	eb 28                	jmp    c0019e97 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e6f:	80 fa 03             	cmp    dl,0x3
c0019e72:	75 05                	jne    c0019e79 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019e74:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019e77:	eb 1e                	jmp    c0019e97 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e79:	31 c0                	xor    eax,eax
c0019e7b:	80 fa 04             	cmp    dl,0x4
c0019e7e:	74 17                	je     c0019e97 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e80:	80 fa 05             	cmp    dl,0x5
c0019e83:	75 05                	jne    c0019e8a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019e85:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019e88:	eb 0d                	jmp    c0019e97 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e8a:	80 fa 06             	cmp    dl,0x6
c0019e8d:	75 05                	jne    c0019e94 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019e8f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019e92:	eb 03                	jmp    c0019e97 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e94:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019e97:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019e9c:	0f 94 c2             	sete   dl
c0019e9f:	80 f9 05             	cmp    cl,0x5
c0019ea2:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019ea6:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019eab:	d3 e0                	shl    eax,cl
c0019ead:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019eb1:	74 0a                	je     c0019ebd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019eb3:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019eb6:	b9 07 00 00 00       	mov    ecx,0x7
c0019ebb:	eb 37                	jmp    c0019ef4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019ebd:	01 f8                	add    eax,edi
c0019ebf:	b9 03 00 00 00       	mov    ecx,0x3
c0019ec4:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019ec9:	74 2b                	je     c0019ef6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019ecb:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019ed0:	75 0d                	jne    c0019edf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019ed2:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019ed6:	01 c8                	add    eax,ecx
c0019ed8:	b9 04 00 00 00       	mov    ecx,0x4
c0019edd:	eb 17                	jmp    c0019ef6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019edf:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019ee2:	b9 07 00 00 00       	mov    ecx,0x7
c0019ee7:	eb 0d                	jmp    c0019ef6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019ee9:	b9 02 00 00 00       	mov    ecx,0x2
c0019eee:	b2 01                	mov    dl,0x1
c0019ef0:	31 c0                	xor    eax,eax
c0019ef2:	eb 02                	jmp    c0019ef6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019ef4:	31 d2                	xor    edx,edx
c0019ef6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019efa:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019efc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019f00:	88 11                	mov    BYTE PTR [ecx],dl
c0019f02:	5a                   	pop    edx
c0019f03:	5b                   	pop    ebx
c0019f04:	5e                   	pop    esi
c0019f05:	5f                   	pop    edi
c0019f06:	c3                   	ret    

c0019f07 <Krnl::smpEntry()>:
c0019f07:	eb fe                	jmp    c0019f07 <Krnl::smpEntry()>

c0019f09 <Krnl::startCPU(int)>:
c0019f09:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0019f0e:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019f15:	0f 84 36 01 00 00    	je     c001a051 <Krnl::startCPU(int)+0x148>
c0019f1b:	53                   	push   ebx
c0019f1c:	83 ec 08             	sub    esp,0x8
c0019f1f:	e8 fc 3e 00 00       	call   c001de20 <lockScheduler()>
c0019f24:	52                   	push   edx
c0019f25:	52                   	push   edx
c0019f26:	6a 1b                	push   0x1b
c0019f28:	ff 35 c8 e5 02 c0    	push   DWORD PTR ds:0xc002e5c8
c0019f2e:	e8 bd 4e ff ff       	call   c000edf0 <Computer::rdmsr(unsigned int)>
c0019f33:	59                   	pop    ecx
c0019f34:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019f39:	89 c3                	mov    ebx,eax
c0019f3b:	58                   	pop    eax
c0019f3c:	53                   	push   ebx
c0019f3d:	68 70 bb 02 c0       	push   0xc002bb70
c0019f42:	e8 c0 8f ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0019f47:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019f55:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f5f:	c1 e0 18             	shl    eax,0x18
c0019f62:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019f68:	83 c4 10             	add    esp,0x10
c0019f6b:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019f71:	09 c2                	or     edx,eax
c0019f73:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019f79:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019f7f:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019f85:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019f8b:	80 cd c5             	or     ch,0xc5
c0019f8e:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019f94:	f3 90                	pause  
c0019f96:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019f98:	0f ba e1 0c          	bt     ecx,0xc
c0019f9c:	72 f6                	jb     c0019f94 <Krnl::startCPU(int)+0x8b>
c0019f9e:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019fa4:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019faa:	09 c1                	or     ecx,eax
c0019fac:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019fb2:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019fb8:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019fbe:	80 cd 85             	or     ch,0x85
c0019fc1:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019fc7:	f3 90                	pause  
c0019fc9:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019fcb:	0f ba e1 0c          	bt     ecx,0xc
c0019fcf:	72 f6                	jb     c0019fc7 <Krnl::startCPU(int)+0xbe>
c0019fd1:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019fdb:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019fe1:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019fe7:	09 c1                	or     ecx,eax
c0019fe9:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019fef:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019ff5:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019ffb:	81 c9 02 06 00 00    	or     ecx,0x602
c001a001:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a007:	f3 90                	pause  
c001a009:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a00b:	0f ba e1 0c          	bt     ecx,0xc
c001a00f:	72 f6                	jb     c001a007 <Krnl::startCPU(int)+0xfe>
c001a011:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a01b:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a021:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a027:	09 c8                	or     eax,ecx
c001a029:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001a02f:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c001a035:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001a03a:	0d 02 06 00 00       	or     eax,0x602
c001a03f:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c001a045:	f3 90                	pause  
c001a047:	8b 02                	mov    eax,DWORD PTR [edx]
c001a049:	0f ba e0 0c          	bt     eax,0xc
c001a04d:	72 f6                	jb     c001a045 <Krnl::startCPU(int)+0x13c>
c001a04f:	eb fe                	jmp    c001a04f <Krnl::startCPU(int)+0x146>
c001a051:	c3                   	ret    

c001a052 <Krnl::startCPUs()>:
c001a052:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001a057:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001a05d:	88 c2                	mov    dl,al
c001a05f:	83 e2 0a             	and    edx,0xa
c001a062:	80 fa 0a             	cmp    dl,0xa
c001a065:	75 09                	jne    c001a070 <Krnl::startCPUs()+0x1e>
c001a067:	a8 01                	test   al,0x1
c001a069:	74 05                	je     c001a070 <Krnl::startCPUs()+0x1e>
c001a06b:	e9 2b 61 fe ff       	jmp    c000019b <prepareTramp>
c001a070:	c3                   	ret    
c001a071:	90                   	nop

c001a072 <EnvVarContainer::getEnv(char const*)>:
c001a072:	57                   	push   edi
c001a073:	56                   	push   esi
c001a074:	53                   	push   ebx
c001a075:	31 db                	xor    ebx,ebx
c001a077:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a07b:	39 1e                	cmp    DWORD PTR [esi],ebx
c001a07d:	7e 2b                	jle    c001a0aa <EnvVarContainer::getEnv(char const*)+0x38>
c001a07f:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001a086:	50                   	push   eax
c001a087:	50                   	push   eax
c001a088:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a08b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a08e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a092:	e8 31 68 fe ff       	call   c00008c8 <strcmp>
c001a097:	83 c4 10             	add    esp,0x10
c001a09a:	85 c0                	test   eax,eax
c001a09c:	75 09                	jne    c001a0a7 <EnvVarContainer::getEnv(char const*)+0x35>
c001a09e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a0a1:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a0a5:	eb 05                	jmp    c001a0ac <EnvVarContainer::getEnv(char const*)+0x3a>
c001a0a7:	43                   	inc    ebx
c001a0a8:	eb d1                	jmp    c001a07b <EnvVarContainer::getEnv(char const*)+0x9>
c001a0aa:	31 c0                	xor    eax,eax
c001a0ac:	5b                   	pop    ebx
c001a0ad:	5e                   	pop    esi
c001a0ae:	5f                   	pop    edi
c001a0af:	c3                   	ret    

c001a0b0 <EnvVarContainer::setEnv(char const*, char const*)>:
c001a0b0:	57                   	push   edi
c001a0b1:	56                   	push   esi
c001a0b2:	53                   	push   ebx
c001a0b3:	83 ec 1c             	sub    esp,0x1c
c001a0b6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a0ba:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a0be:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a0c2:	57                   	push   edi
c001a0c3:	e8 d4 66 fe ff       	call   c000079c <strlen>
c001a0c8:	40                   	inc    eax
c001a0c9:	89 04 24             	mov    DWORD PTR [esp],eax
c001a0cc:	e8 7a 57 ff ff       	call   c000f84b <malloc>
c001a0d1:	89 34 24             	mov    DWORD PTR [esp],esi
c001a0d4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a0d8:	e8 bf 66 fe ff       	call   c000079c <strlen>
c001a0dd:	40                   	inc    eax
c001a0de:	89 04 24             	mov    DWORD PTR [esp],eax
c001a0e1:	e8 65 57 ff ff       	call   c000f84b <malloc>
c001a0e6:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a0e9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a0ed:	e8 aa 66 fe ff       	call   c000079c <strlen>
c001a0f2:	83 c4 0c             	add    esp,0xc
c001a0f5:	40                   	inc    eax
c001a0f6:	50                   	push   eax
c001a0f7:	6a 00                	push   0x0
c001a0f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a0fd:	e8 7e 66 fe ff       	call   c0000780 <memset>
c001a102:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a105:	e8 92 66 fe ff       	call   c000079c <strlen>
c001a10a:	83 c4 0c             	add    esp,0xc
c001a10d:	40                   	inc    eax
c001a10e:	50                   	push   eax
c001a10f:	57                   	push   edi
c001a110:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a114:	e8 33 66 fe ff       	call   c000074c <memcpy>
c001a119:	89 34 24             	mov    DWORD PTR [esp],esi
c001a11c:	e8 7b 66 fe ff       	call   c000079c <strlen>
c001a121:	83 c4 0c             	add    esp,0xc
c001a124:	40                   	inc    eax
c001a125:	50                   	push   eax
c001a126:	6a 00                	push   0x0
c001a128:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a12c:	e8 4f 66 fe ff       	call   c0000780 <memset>
c001a131:	89 34 24             	mov    DWORD PTR [esp],esi
c001a134:	e8 63 66 fe ff       	call   c000079c <strlen>
c001a139:	83 c4 0c             	add    esp,0xc
c001a13c:	40                   	inc    eax
c001a13d:	50                   	push   eax
c001a13e:	56                   	push   esi
c001a13f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a143:	e8 04 66 fe ff       	call   c000074c <memcpy>
c001a148:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a14a:	40                   	inc    eax
c001a14b:	89 03                	mov    DWORD PTR [ebx],eax
c001a14d:	c1 e0 03             	shl    eax,0x3
c001a150:	5a                   	pop    edx
c001a151:	59                   	pop    ecx
c001a152:	50                   	push   eax
c001a153:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a156:	e8 dc 56 ff ff       	call   c000f837 <realloc>
c001a15b:	83 c4 0c             	add    esp,0xc
c001a15e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a161:	6a 08                	push   0x8
c001a163:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a167:	52                   	push   edx
c001a168:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a16a:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a16e:	50                   	push   eax
c001a16f:	e8 d8 65 fe ff       	call   c000074c <memcpy>
c001a174:	83 c4 20             	add    esp,0x20
c001a177:	5b                   	pop    ebx
c001a178:	5e                   	pop    esi
c001a179:	5f                   	pop    edi
c001a17a:	c3                   	ret    
c001a17b:	90                   	nop

c001a17c <EnvVarContainer::deleteEnv(char const*)>:
c001a17c:	c3                   	ret    
c001a17d:	90                   	nop

c001a17e <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a17e:	55                   	push   ebp
c001a17f:	57                   	push   edi
c001a180:	56                   	push   esi
c001a181:	53                   	push   ebx
c001a182:	81 ec 38 01 00 00    	sub    esp,0x138
c001a188:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001a18f:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001a196:	68 14 01 00 00       	push   0x114
c001a19b:	e8 ab 56 ff ff       	call   c000f84b <malloc>
c001a1a0:	83 c4 0c             	add    esp,0xc
c001a1a3:	89 c7                	mov    edi,eax
c001a1a5:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001a1a8:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a1af:	50                   	push   eax
c001a1b0:	e8 b1 92 ff ff       	call   c0013466 <File::File(char const*, Process*)>
c001a1b5:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a1b8:	e8 7b 95 ff ff       	call   c0013738 <File::exists()>
c001a1bd:	83 c4 10             	add    esp,0x10
c001a1c0:	84 c0                	test   al,al
c001a1c2:	75 31                	jne    c001a1f5 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001a1c4:	51                   	push   ecx
c001a1c5:	51                   	push   ecx
c001a1c6:	6a 12                	push   0x12
c001a1c8:	57                   	push   edi
c001a1c9:	e8 fc 92 ff ff       	call   c00134ca <File::open(FileOpenMode)>
c001a1ce:	8b 07                	mov    eax,DWORD PTR [edi]
c001a1d0:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a1d3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a1d6:	e8 c1 65 fe ff       	call   c000079c <strlen>
c001a1db:	5a                   	pop    edx
c001a1dc:	31 d2                	xor    edx,edx
c001a1de:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a1e2:	51                   	push   ecx
c001a1e3:	55                   	push   ebp
c001a1e4:	52                   	push   edx
c001a1e5:	50                   	push   eax
c001a1e6:	57                   	push   edi
c001a1e7:	ff d3                	call   ebx
c001a1e9:	83 c4 14             	add    esp,0x14
c001a1ec:	57                   	push   edi
c001a1ed:	e8 36 93 ff ff       	call   c0013528 <File::close()>
c001a1f2:	83 c4 10             	add    esp,0x10
c001a1f5:	31 db                	xor    ebx,ebx
c001a1f7:	50                   	push   eax
c001a1f8:	31 ed                	xor    ebp,ebp
c001a1fa:	68 00 01 00 00       	push   0x100
c001a1ff:	6a 00                	push   0x0
c001a201:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a205:	50                   	push   eax
c001a206:	e8 75 65 fe ff       	call   c0000780 <memset>
c001a20b:	58                   	pop    eax
c001a20c:	5a                   	pop    edx
c001a20d:	6a 01                	push   0x1
c001a20f:	57                   	push   edi
c001a210:	e8 b5 92 ff ff       	call   c00134ca <File::open(FileOpenMode)>
c001a215:	83 c4 10             	add    esp,0x10
c001a218:	83 ec 0c             	sub    esp,0xc
c001a21b:	8b 07                	mov    eax,DWORD PTR [edi]
c001a21d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a221:	51                   	push   ecx
c001a222:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a226:	52                   	push   edx
c001a227:	6a 00                	push   0x0
c001a229:	6a 01                	push   0x1
c001a22b:	57                   	push   edi
c001a22c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a22f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a233:	83 c4 20             	add    esp,0x20
c001a236:	3c 0d                	cmp    al,0xd
c001a238:	0f 84 12 01 00 00    	je     c001a350 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a23e:	85 db                	test   ebx,ebx
c001a240:	0f 84 fd 00 00 00    	je     c001a343 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a246:	3c 0a                	cmp    al,0xa
c001a248:	74 13                	je     c001a25d <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a24a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a24f:	74 0c                	je     c001a25d <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a251:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a257:	0f 8e e6 00 00 00    	jle    c001a343 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a25d:	83 ec 0c             	sub    esp,0xc
c001a260:	8d 53 01             	lea    edx,[ebx+0x1]
c001a263:	29 dd                	sub    ebp,ebx
c001a265:	52                   	push   edx
c001a266:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a26a:	e8 dc 55 ff ff       	call   c000f84b <malloc>
c001a26f:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a272:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a276:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a279:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a27d:	e8 c9 55 ff ff       	call   c000f84b <malloc>
c001a282:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a286:	83 c4 0c             	add    esp,0xc
c001a289:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a28d:	52                   	push   edx
c001a28e:	6a 00                	push   0x0
c001a290:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a294:	e8 e7 64 fe ff       	call   c0000780 <memset>
c001a299:	83 c4 0c             	add    esp,0xc
c001a29c:	53                   	push   ebx
c001a29d:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a2a1:	55                   	push   ebp
c001a2a2:	01 eb                	add    ebx,ebp
c001a2a4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a2a8:	e8 9f 64 fe ff       	call   c000074c <memcpy>
c001a2ad:	83 c4 0c             	add    esp,0xc
c001a2b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a2b4:	51                   	push   ecx
c001a2b5:	6a 00                	push   0x0
c001a2b7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a2bb:	e8 c0 64 fe ff       	call   c0000780 <memset>
c001a2c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a2c3:	e8 d4 64 fe ff       	call   c000079c <strlen>
c001a2c8:	83 c4 0c             	add    esp,0xc
c001a2cb:	50                   	push   eax
c001a2cc:	53                   	push   ebx
c001a2cd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a2d1:	e8 76 64 fe ff       	call   c000074c <memcpy>
c001a2d6:	5b                   	pop    ebx
c001a2d7:	58                   	pop    eax
c001a2d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a2dc:	68 81 bb 02 c0       	push   0xc002bb81
c001a2e1:	e8 21 8c ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001a2e6:	8b 06                	mov    eax,DWORD PTR [esi]
c001a2e8:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a2eb:	40                   	inc    eax
c001a2ec:	83 c4 10             	add    esp,0x10
c001a2ef:	89 06                	mov    DWORD PTR [esi],eax
c001a2f1:	85 d2                	test   edx,edx
c001a2f3:	75 0c                	jne    c001a301 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a2f5:	83 ec 0c             	sub    esp,0xc
c001a2f8:	6a 08                	push   0x8
c001a2fa:	e8 4c 55 ff ff       	call   c000f84b <malloc>
c001a2ff:	eb 0c                	jmp    c001a30d <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a301:	c1 e0 03             	shl    eax,0x3
c001a304:	51                   	push   ecx
c001a305:	51                   	push   ecx
c001a306:	50                   	push   eax
c001a307:	52                   	push   edx
c001a308:	e8 2a 55 ff ff       	call   c000f837 <realloc>
c001a30d:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a310:	83 c4 10             	add    esp,0x10
c001a313:	31 db                	xor    ebx,ebx
c001a315:	52                   	push   edx
c001a316:	6a 08                	push   0x8
c001a318:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a31c:	50                   	push   eax
c001a31d:	8b 16                	mov    edx,DWORD PTR [esi]
c001a31f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a322:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a326:	50                   	push   eax
c001a327:	e8 20 64 fe ff       	call   c000074c <memcpy>
c001a32c:	83 c4 0c             	add    esp,0xc
c001a32f:	68 00 01 00 00       	push   0x100
c001a334:	6a 00                	push   0x0
c001a336:	55                   	push   ebp
c001a337:	31 ed                	xor    ebp,ebp
c001a339:	e8 42 64 fe ff       	call   c0000780 <memset>
c001a33e:	83 c4 10             	add    esp,0x10
c001a341:	eb 0d                	jmp    c001a350 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a343:	3c 3d                	cmp    al,0x3d
c001a345:	74 07                	je     c001a34e <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a347:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a34b:	45                   	inc    ebp
c001a34c:	eb 02                	jmp    c001a350 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a34e:	89 eb                	mov    ebx,ebp
c001a350:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a355:	0f 85 bd fe ff ff    	jne    c001a218 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a35b:	50                   	push   eax
c001a35c:	50                   	push   eax
c001a35d:	ff 36                	push   DWORD PTR [esi]
c001a35f:	68 8f bb 02 c0       	push   0xc002bb8f
c001a364:	e8 9e 8b ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001a369:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a36f:	5b                   	pop    ebx
c001a370:	5e                   	pop    esi
c001a371:	5f                   	pop    edi
c001a372:	5d                   	pop    ebp
c001a373:	c3                   	ret    

c001a374 <EnvVarContainer::__loadSystem()>:
c001a374:	83 ec 10             	sub    esp,0x10
c001a377:	68 00 db 02 c0       	push   0xc002db00
c001a37c:	68 ba bb 02 c0       	push   0xc002bbba
c001a381:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a385:	e8 f4 fd ff ff       	call   c001a17e <EnvVarContainer::loadFrom(char const*, char const*)>
c001a38a:	83 c4 1c             	add    esp,0x1c
c001a38d:	c3                   	ret    

c001a38e <EnvVarContainer::__loadUser()>:
c001a38e:	c3                   	ret    
c001a38f:	90                   	nop

c001a390 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a390:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a394:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a39a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a39e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a3a2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a3a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3a9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a3b0:	90                   	nop
c001a3b1:	c3                   	ret    

c001a3b2 <EnvVarContainer::~EnvVarContainer()>:
c001a3b2:	83 ec 0c             	sub    esp,0xc
c001a3b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3b9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a3bc:	85 c0                	test   eax,eax
c001a3be:	74 1d                	je     c001a3dd <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a3c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3c4:	8b 00                	mov    eax,DWORD PTR [eax]
c001a3c6:	85 c0                	test   eax,eax
c001a3c8:	74 13                	je     c001a3dd <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a3ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a3d1:	83 ec 0c             	sub    esp,0xc
c001a3d4:	50                   	push   eax
c001a3d5:	e8 81 54 ff ff       	call   c000f85b <free>
c001a3da:	83 c4 10             	add    esp,0x10
c001a3dd:	90                   	nop
c001a3de:	83 c4 0c             	add    esp,0xc
c001a3e1:	c3                   	ret    

c001a3e2 <Krnl::getEnv(Process*, char const*)>:
c001a3e2:	53                   	push   ebx
c001a3e3:	83 ec 08             	sub    esp,0x8
c001a3e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3ea:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a3ee:	39 05 34 1b 03 c0    	cmp    DWORD PTR ds:0xc0031b34,eax
c001a3f4:	74 04                	je     c001a3fa <Krnl::getEnv(Process*, char const*)+0x18>
c001a3f6:	85 c0                	test   eax,eax
c001a3f8:	75 0b                	jne    c001a405 <Krnl::getEnv(Process*, char const*)+0x23>
c001a3fa:	a1 14 11 03 c0       	mov    eax,ds:0xc0031114
c001a3ff:	85 c0                	test   eax,eax
c001a401:	75 19                	jne    c001a41c <Krnl::getEnv(Process*, char const*)+0x3a>
c001a403:	eb 27                	jmp    c001a42c <Krnl::getEnv(Process*, char const*)+0x4a>
c001a405:	52                   	push   edx
c001a406:	52                   	push   edx
c001a407:	53                   	push   ebx
c001a408:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a40e:	e8 5f fc ff ff       	call   c001a072 <EnvVarContainer::getEnv(char const*)>
c001a413:	83 c4 10             	add    esp,0x10
c001a416:	85 c0                	test   eax,eax
c001a418:	75 28                	jne    c001a442 <Krnl::getEnv(Process*, char const*)+0x60>
c001a41a:	eb de                	jmp    c001a3fa <Krnl::getEnv(Process*, char const*)+0x18>
c001a41c:	52                   	push   edx
c001a41d:	52                   	push   edx
c001a41e:	53                   	push   ebx
c001a41f:	50                   	push   eax
c001a420:	e8 4d fc ff ff       	call   c001a072 <EnvVarContainer::getEnv(char const*)>
c001a425:	83 c4 10             	add    esp,0x10
c001a428:	85 c0                	test   eax,eax
c001a42a:	75 16                	jne    c001a442 <Krnl::getEnv(Process*, char const*)+0x60>
c001a42c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a430:	a1 18 11 03 c0       	mov    eax,ds:0xc0031118
c001a435:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a439:	83 c4 08             	add    esp,0x8
c001a43c:	5b                   	pop    ebx
c001a43d:	e9 30 fc ff ff       	jmp    c001a072 <EnvVarContainer::getEnv(char const*)>
c001a442:	83 c4 08             	add    esp,0x8
c001a445:	5b                   	pop    ebx
c001a446:	c3                   	ret    

c001a447 <Krnl::setEnvSystem(char const*, char const*)>:
c001a447:	83 ec 10             	sub    esp,0x10
c001a44a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a44e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a452:	ff 35 18 11 03 c0    	push   DWORD PTR ds:0xc0031118
c001a458:	e8 53 fc ff ff       	call   c001a0b0 <EnvVarContainer::setEnv(char const*, char const*)>
c001a45d:	83 c4 1c             	add    esp,0x1c
c001a460:	c3                   	ret    

c001a461 <Krnl::setEnvUser(char const*, char const*)>:
c001a461:	a1 14 11 03 c0       	mov    eax,ds:0xc0031114
c001a466:	85 c0                	test   eax,eax
c001a468:	74 15                	je     c001a47f <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a46a:	83 ec 10             	sub    esp,0x10
c001a46d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a471:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a475:	50                   	push   eax
c001a476:	e8 35 fc ff ff       	call   c001a0b0 <EnvVarContainer::setEnv(char const*, char const*)>
c001a47b:	83 c4 1c             	add    esp,0x1c
c001a47e:	c3                   	ret    
c001a47f:	c3                   	ret    

c001a480 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a480:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a484:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a48a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a48e:	e9 1d fc ff ff       	jmp    c001a0b0 <EnvVarContainer::setEnv(char const*, char const*)>

c001a493 <Krnl::deleteEnvSystem(char const*)>:
c001a493:	c3                   	ret    

c001a494 <Krnl::deleteEnvUser(char const*)>:
c001a494:	c3                   	ret    

c001a495 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a495:	c3                   	ret    

c001a496 <Krnl::newProcessEnv(Process*)>:
c001a496:	83 ec 28             	sub    esp,0x28
c001a499:	6a 0c                	push   0xc
c001a49b:	e8 ab 53 ff ff       	call   c000f84b <malloc>
c001a4a0:	5a                   	pop    edx
c001a4a1:	59                   	pop    ecx
c001a4a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a4a6:	50                   	push   eax
c001a4a7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a4ab:	e8 e0 fe ff ff       	call   c001a390 <EnvVarContainer::EnvVarContainer(Process*)>
c001a4b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a4b4:	83 c4 2c             	add    esp,0x2c
c001a4b7:	c3                   	ret    

c001a4b8 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a4b8:	56                   	push   esi
c001a4b9:	53                   	push   ebx
c001a4ba:	83 ec 10             	sub    esp,0x10
c001a4bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a4c1:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a4c7:	6a 0c                	push   0xc
c001a4c9:	e8 7d 53 ff ff       	call   c000f84b <malloc>
c001a4ce:	89 c3                	mov    ebx,eax
c001a4d0:	58                   	pop    eax
c001a4d1:	5a                   	pop    edx
c001a4d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a4d6:	53                   	push   ebx
c001a4d7:	e8 b4 fe ff ff       	call   c001a390 <EnvVarContainer::EnvVarContainer(Process*)>
c001a4dc:	8b 06                	mov    eax,DWORD PTR [esi]
c001a4de:	89 03                	mov    DWORD PTR [ebx],eax
c001a4e0:	c1 e0 03             	shl    eax,0x3
c001a4e3:	89 04 24             	mov    DWORD PTR [esp],eax
c001a4e6:	e8 60 53 ff ff       	call   c000f84b <malloc>
c001a4eb:	83 c4 0c             	add    esp,0xc
c001a4ee:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a4f1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a4f3:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a4fa:	52                   	push   edx
c001a4fb:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a4fe:	50                   	push   eax
c001a4ff:	e8 48 62 fe ff       	call   c000074c <memcpy>
c001a504:	89 d8                	mov    eax,ebx
c001a506:	83 c4 14             	add    esp,0x14
c001a509:	5b                   	pop    ebx
c001a50a:	5e                   	pop    esi
c001a50b:	c3                   	ret    

c001a50c <Krnl::loadSystemEnv()>:
c001a50c:	53                   	push   ebx
c001a50d:	83 ec 14             	sub    esp,0x14
c001a510:	6a 0c                	push   0xc
c001a512:	e8 34 53 ff ff       	call   c000f84b <malloc>
c001a517:	89 c3                	mov    ebx,eax
c001a519:	58                   	pop    eax
c001a51a:	5a                   	pop    edx
c001a51b:	ff 35 34 1b 03 c0    	push   DWORD PTR ds:0xc0031b34
c001a521:	53                   	push   ebx
c001a522:	e8 69 fe ff ff       	call   c001a390 <EnvVarContainer::EnvVarContainer(Process*)>
c001a527:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a52a:	89 1d 18 11 03 c0    	mov    DWORD PTR ds:0xc0031118,ebx
c001a530:	e8 3f fe ff ff       	call   c001a374 <EnvVarContainer::__loadSystem()>
c001a535:	83 c4 18             	add    esp,0x18
c001a538:	5b                   	pop    ebx
c001a539:	c3                   	ret    

c001a53a <Krnl::loadUserEnv()>:
c001a53a:	53                   	push   ebx
c001a53b:	83 ec 14             	sub    esp,0x14
c001a53e:	6a 0c                	push   0xc
c001a540:	e8 06 53 ff ff       	call   c000f84b <malloc>
c001a545:	89 c3                	mov    ebx,eax
c001a547:	58                   	pop    eax
c001a548:	5a                   	pop    edx
c001a549:	ff 35 34 1b 03 c0    	push   DWORD PTR ds:0xc0031b34
c001a54f:	53                   	push   ebx
c001a550:	e8 3b fe ff ff       	call   c001a390 <EnvVarContainer::EnvVarContainer(Process*)>
c001a555:	89 1d 14 11 03 c0    	mov    DWORD PTR ds:0xc0031114,ebx
c001a55b:	83 c4 18             	add    esp,0x18
c001a55e:	5b                   	pop    ebx
c001a55f:	c3                   	ret    

c001a560 <Krnl::flushEnv()>:
c001a560:	c3                   	ret    

c001a561 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a561:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a565:	8b 15 14 11 03 c0    	mov    edx,DWORD PTR ds:0xc0031114
c001a56b:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a571:	a1 18 11 03 c0       	mov    eax,ds:0xc0031118
c001a576:	8b 00                	mov    eax,DWORD PTR [eax]
c001a578:	03 01                	add    eax,DWORD PTR [ecx]
c001a57a:	85 d2                	test   edx,edx
c001a57c:	74 02                	je     c001a580 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a57e:	03 02                	add    eax,DWORD PTR [edx]
c001a580:	c3                   	ret    

c001a581 <Krnl::getProcessEnvPair(Process*, int)>:
c001a581:	57                   	push   edi
c001a582:	8b 0d 14 11 03 c0    	mov    ecx,DWORD PTR ds:0xc0031114
c001a588:	56                   	push   esi
c001a589:	85 c9                	test   ecx,ecx
c001a58b:	53                   	push   ebx
c001a58c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a590:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a594:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a59a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a59e:	8b 02                	mov    eax,DWORD PTR [edx]
c001a5a0:	75 47                	jne    c001a5e9 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a5a2:	39 c3                	cmp    ebx,eax
c001a5a4:	7c 47                	jl     c001a5ed <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a5a6:	8b 15 18 11 03 c0    	mov    edx,DWORD PTR ds:0xc0031118
c001a5ac:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a5ae:	01 c1                	add    ecx,eax
c001a5b0:	39 d9                	cmp    ecx,ebx
c001a5b2:	7e 6c                	jle    c001a620 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a5b4:	51                   	push   ecx
c001a5b5:	89 d9                	mov    ecx,ebx
c001a5b7:	29 c1                	sub    ecx,eax
c001a5b9:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a5bc:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a5c0:	53                   	push   ebx
c001a5c1:	68 dc bb 02 c0       	push   0xc002bbdc
c001a5c6:	e8 3c 89 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001a5cb:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a5d1:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a5d3:	a1 18 11 03 c0       	mov    eax,ds:0xc0031118
c001a5d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a5db:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a5df:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a5e2:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a5e5:	89 06                	mov    DWORD PTR [esi],eax
c001a5e7:	eb 51                	jmp    c001a63a <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a5e9:	39 c3                	cmp    ebx,eax
c001a5eb:	7d 05                	jge    c001a5f2 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a5ed:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a5f0:	eb 20                	jmp    c001a612 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a5f2:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a5f4:	8d 14 07             	lea    edx,[edi+eax*1]
c001a5f7:	39 da                	cmp    edx,ebx
c001a5f9:	7e 04                	jle    c001a5ff <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a5fb:	29 c3                	sub    ebx,eax
c001a5fd:	eb 10                	jmp    c001a60f <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a5ff:	8b 0d 18 11 03 c0    	mov    ecx,DWORD PTR ds:0xc0031118
c001a605:	03 11                	add    edx,DWORD PTR [ecx]
c001a607:	39 da                	cmp    edx,ebx
c001a609:	7e 15                	jle    c001a620 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a60b:	29 c3                	sub    ebx,eax
c001a60d:	29 fb                	sub    ebx,edi
c001a60f:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a612:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a616:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a619:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a61c:	89 06                	mov    DWORD PTR [esi],eax
c001a61e:	eb 1d                	jmp    c001a63d <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a620:	83 ec 0c             	sub    esp,0xc
c001a623:	68 f0 bb 02 c0       	push   0xc002bbf0
c001a628:	e8 18 00 00 00       	call   c001a645 <Krnl::panic(char const*)>
c001a62d:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a633:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a63a:	83 c4 10             	add    esp,0x10
c001a63d:	89 f0                	mov    eax,esi
c001a63f:	5b                   	pop    ebx
c001a640:	5e                   	pop    esi
c001a641:	5f                   	pop    edi
c001a642:	c2 04 00             	ret    0x4

c001a645 <Krnl::panic(char const*)>:
c001a645:	55                   	push   ebp
c001a646:	89 e5                	mov    ebp,esp
c001a648:	53                   	push   ebx
c001a649:	83 ec 0c             	sub    esp,0xc
c001a64c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a64f:	fa                   	cli    
c001a650:	c6 05 24 11 03 c0 01 	mov    BYTE PTR ds:0xc0031124,0x1
c001a657:	53                   	push   ebx
c001a658:	c6 05 04 d5 02 c0 00 	mov    BYTE PTR ds:0xc002d504,0x0
c001a65f:	68 0a bc 02 c0       	push   0xc002bc0a
c001a664:	e8 9e 88 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001a669:	58                   	pop    eax
c001a66a:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a66f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a675:	e8 83 66 ff ff       	call   c0010cfd <setActiveTerminal(VgaText*)>
c001a67a:	83 c4 0c             	add    esp,0xc
c001a67d:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a682:	6a 01                	push   0x1
c001a684:	6a 0f                	push   0xf
c001a686:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a68c:	e8 9d 60 ff ff       	call   c001072e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a691:	58                   	pop    eax
c001a692:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a697:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a69d:	e8 fc 68 ff ff       	call   c0010f9e <VgaText::clearScreen()>
c001a6a2:	58                   	pop    eax
c001a6a3:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a6a8:	5a                   	pop    edx
c001a6a9:	68 23 bc 02 c0       	push   0xc002bc23
c001a6ae:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6b4:	e8 63 6a ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a6b9:	59                   	pop    ecx
c001a6ba:	58                   	pop    eax
c001a6bb:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a6c0:	68 c8 bc 02 c0       	push   0xc002bcc8
c001a6c5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6cb:	e8 4c 6a ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a6d0:	58                   	pop    eax
c001a6d1:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a6d6:	5a                   	pop    edx
c001a6d7:	68 3f bc 02 c0       	push   0xc002bc3f
c001a6dc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6e2:	e8 35 6a ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a6e7:	59                   	pop    ecx
c001a6e8:	58                   	pop    eax
c001a6e9:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a6ee:	53                   	push   ebx
c001a6ef:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6f5:	e8 22 6a ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a6fa:	58                   	pop    eax
c001a6fb:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a700:	5a                   	pop    edx
c001a701:	68 5f bc 02 c0       	push   0xc002bc5f
c001a706:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a70c:	e8 0b 6a ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a711:	a1 20 11 03 c0       	mov    eax,ds:0xc0031120
c001a716:	83 c4 10             	add    esp,0x10
c001a719:	85 c0                	test   eax,eax
c001a71b:	74 02                	je     c001a71f <Krnl::panic(char const*)+0xda>
c001a71d:	ff d0                	call   eax
c001a71f:	83 ec 0c             	sub    esp,0xc
c001a722:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a725:	e8 fd 2f 00 00       	call   c001d727 <Thr::getDriverNameFromAddress(unsigned long)>
c001a72a:	83 c4 10             	add    esp,0x10
c001a72d:	89 c3                	mov    ebx,eax
c001a72f:	85 c0                	test   eax,eax
c001a731:	0f 84 50 02 00 00    	je     c001a987 <Krnl::panic(char const*)+0x342>
c001a737:	83 ec 08             	sub    esp,0x8
c001a73a:	8b 15 34 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b34
c001a740:	68 04 bd 02 c0       	push   0xc002bd04
c001a745:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a74b:	e8 cc 69 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a750:	58                   	pop    eax
c001a751:	5a                   	pop    edx
c001a752:	8b 15 34 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b34
c001a758:	68 3f bc 02 c0       	push   0xc002bc3f
c001a75d:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a763:	e8 b4 69 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a768:	59                   	pop    ecx
c001a769:	58                   	pop    eax
c001a76a:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a76f:	53                   	push   ebx
c001a770:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a776:	e8 a1 69 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a77b:	83 c4 10             	add    esp,0x10
c001a77e:	83 ec 08             	sub    esp,0x8
c001a781:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a786:	68 5e bc 02 c0       	push   0xc002bc5e
c001a78b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a791:	e8 86 69 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a796:	58                   	pop    eax
c001a797:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a79c:	5a                   	pop    edx
c001a79d:	68 5c bd 02 c0       	push   0xc002bd5c
c001a7a2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7a8:	e8 6f 69 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a7ad:	59                   	pop    ecx
c001a7ae:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a7b3:	5b                   	pop    ebx
c001a7b4:	68 9c bd 02 c0       	push   0xc002bd9c
c001a7b9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7bf:	e8 58 69 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a7c4:	58                   	pop    eax
c001a7c5:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a7ca:	5a                   	pop    edx
c001a7cb:	68 4a bc 02 c0       	push   0xc002bc4a
c001a7d0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7d6:	e8 41 69 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a7db:	59                   	pop    ecx
c001a7dc:	5b                   	pop    ebx
c001a7dd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a7e0:	68 62 bc 02 c0       	push   0xc002bc62
c001a7e5:	e8 1d 87 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001a7ea:	58                   	pop    eax
c001a7eb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a7ee:	5a                   	pop    edx
c001a7ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a7f2:	68 6b bc 02 c0       	push   0xc002bc6b
c001a7f7:	e8 0b 87 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001a7fc:	59                   	pop    ecx
c001a7fd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a800:	5b                   	pop    ebx
c001a801:	8b 00                	mov    eax,DWORD PTR [eax]
c001a803:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a806:	68 74 bc 02 c0       	push   0xc002bc74
c001a80b:	e8 f7 86 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001a810:	58                   	pop    eax
c001a811:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a816:	5a                   	pop    edx
c001a817:	68 e0 bd 02 c0       	push   0xc002bde0
c001a81c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a822:	e8 f5 68 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a827:	59                   	pop    ecx
c001a828:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a82d:	5b                   	pop    ebx
c001a82e:	68 7d bc 02 c0       	push   0xc002bc7d
c001a833:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a839:	e8 de 68 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a83e:	0f 20 c0             	mov    eax,cr0
c001a841:	5a                   	pop    edx
c001a842:	59                   	pop    ecx
c001a843:	50                   	push   eax
c001a844:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a849:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a84f:	e8 ee 68 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c001a854:	5b                   	pop    ebx
c001a855:	58                   	pop    eax
c001a856:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a85b:	68 87 bc 02 c0       	push   0xc002bc87
c001a860:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a866:	e8 b1 68 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a86b:	0f 20 d0             	mov    eax,cr2
c001a86e:	5a                   	pop    edx
c001a86f:	59                   	pop    ecx
c001a870:	50                   	push   eax
c001a871:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a876:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a87c:	e8 c1 68 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c001a881:	5b                   	pop    ebx
c001a882:	58                   	pop    eax
c001a883:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a888:	68 91 bc 02 c0       	push   0xc002bc91
c001a88d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a893:	e8 84 68 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a898:	0f 20 d8             	mov    eax,cr3
c001a89b:	5a                   	pop    edx
c001a89c:	59                   	pop    ecx
c001a89d:	50                   	push   eax
c001a89e:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a8a3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8a9:	e8 94 68 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c001a8ae:	5b                   	pop    ebx
c001a8af:	58                   	pop    eax
c001a8b0:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a8b5:	68 a4 bc 02 c0       	push   0xc002bca4
c001a8ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8c0:	e8 57 68 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a8c5:	0f 20 e0             	mov    eax,cr4
c001a8c8:	5a                   	pop    edx
c001a8c9:	59                   	pop    ecx
c001a8ca:	50                   	push   eax
c001a8cb:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a8d0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8d6:	e8 67 68 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c001a8db:	5b                   	pop    ebx
c001a8dc:	58                   	pop    eax
c001a8dd:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a8e2:	68 ae bc 02 c0       	push   0xc002bcae
c001a8e7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8ed:	e8 2a 68 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a8f2:	5a                   	pop    edx
c001a8f3:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a8f8:	59                   	pop    ecx
c001a8f9:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a8ff:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a902:	50                   	push   eax
c001a903:	e8 3a 68 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c001a908:	5b                   	pop    ebx
c001a909:	58                   	pop    eax
c001a90a:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a90f:	68 c5 bc 02 c0       	push   0xc002bcc5
c001a914:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a91a:	e8 fd 67 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a91f:	5a                   	pop    edx
c001a920:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a925:	59                   	pop    ecx
c001a926:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a92c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a92f:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a932:	50                   	push   eax
c001a933:	e8 0a 68 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c001a938:	5b                   	pop    ebx
c001a939:	58                   	pop    eax
c001a93a:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a93f:	68 c5 bc 02 c0       	push   0xc002bcc5
c001a944:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a94a:	e8 cd 67 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a94f:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a954:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a957:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a95d:	8b 12                	mov    edx,DWORD PTR [edx]
c001a95f:	59                   	pop    ecx
c001a960:	5b                   	pop    ebx
c001a961:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a964:	50                   	push   eax
c001a965:	e8 d8 67 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c001a96a:	83 c4 10             	add    esp,0x10
c001a96d:	b2 fe                	mov    dl,0xfe
c001a96f:	e4 60                	in     al,0x60
c001a971:	3c 1c                	cmp    al,0x1c
c001a973:	74 04                	je     c001a979 <Krnl::panic(char const*)+0x334>
c001a975:	3c 5a                	cmp    al,0x5a
c001a977:	75 f6                	jne    c001a96f <Krnl::panic(char const*)+0x32a>
c001a979:	e4 64                	in     al,0x64
c001a97b:	a8 02                	test   al,0x2
c001a97d:	75 fa                	jne    c001a979 <Krnl::panic(char const*)+0x334>
c001a97f:	88 d0                	mov    al,dl
c001a981:	e6 64                	out    0x64,al
c001a983:	fa                   	cli    
c001a984:	f4                   	hlt    
c001a985:	eb e8                	jmp    c001a96f <Krnl::panic(char const*)+0x32a>
c001a987:	50                   	push   eax
c001a988:	50                   	push   eax
c001a989:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a98e:	68 30 bd 02 c0       	push   0xc002bd30
c001a993:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a999:	e8 7e 67 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a99e:	58                   	pop    eax
c001a99f:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a9a4:	5a                   	pop    edx
c001a9a5:	68 3f bc 02 c0       	push   0xc002bc3f
c001a9aa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9b0:	e8 67 67 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a9b5:	59                   	pop    ecx
c001a9b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a9bb:	5b                   	pop    ebx
c001a9bc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a9bf:	83 c0 0c             	add    eax,0xc
c001a9c2:	50                   	push   eax
c001a9c3:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a9c8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9ce:	e8 49 67 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a9d3:	83 c4 10             	add    esp,0x10
c001a9d6:	e9 a3 fd ff ff       	jmp    c001a77e <Krnl::panic(char const*)+0x139>

c001a9db <Net::switchEndian16(unsigned short)>:
c001a9db:	83 ec 04             	sub    esp,0x4
c001a9de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9e2:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a9e6:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a9ea:	c1 f8 08             	sar    eax,0x8
c001a9ed:	89 c2                	mov    edx,eax
c001a9ef:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a9f3:	c1 e0 08             	shl    eax,0x8
c001a9f6:	09 d0                	or     eax,edx
c001a9f8:	83 c4 04             	add    esp,0x4
c001a9fb:	c3                   	ret    

c001a9fc <Net::switchEndian32(unsigned int)>:
c001a9fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa00:	c1 e8 18             	shr    eax,0x18
c001aa03:	89 c2                	mov    edx,eax
c001aa05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa09:	c1 e0 08             	shl    eax,0x8
c001aa0c:	25 00 00 ff 00       	and    eax,0xff0000
c001aa11:	09 c2                	or     edx,eax
c001aa13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa17:	c1 e8 08             	shr    eax,0x8
c001aa1a:	25 00 ff 00 00       	and    eax,0xff00
c001aa1f:	09 c2                	or     edx,eax
c001aa21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa25:	c1 e0 18             	shl    eax,0x18
c001aa28:	09 d0                	or     eax,edx
c001aa2a:	c3                   	ret    

c001aa2b <Net::crc32Calc(unsigned char*, int)>:
c001aa2b:	83 ec 10             	sub    esp,0x10
c001aa2e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001aa33:	75 07                	jne    c001aa3c <Net::crc32Calc(unsigned char*, int)+0x11>
c001aa35:	b8 00 00 00 00       	mov    eax,0x0
c001aa3a:	eb 7c                	jmp    c001aab8 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001aa3c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001aa41:	7f 07                	jg     c001aa4a <Net::crc32Calc(unsigned char*, int)+0x1f>
c001aa43:	b8 00 00 00 00       	mov    eax,0x0
c001aa48:	eb 6e                	jmp    c001aab8 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001aa4a:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001aa52:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001aa5a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa5e:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001aa62:	7d 4e                	jge    c001aab2 <Net::crc32Calc(unsigned char*, int)+0x87>
c001aa64:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aa68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aa6c:	01 d0                	add    eax,edx
c001aa6e:	8a 00                	mov    al,BYTE PTR [eax]
c001aa70:	0f b6 c0             	movzx  eax,al
c001aa73:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001aa77:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aa7f:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001aa84:	7f 26                	jg     c001aaac <Net::crc32Calc(unsigned char*, int)+0x81>
c001aa86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa8a:	83 e0 01             	and    eax,0x1
c001aa8d:	74 0d                	je     c001aa9c <Net::crc32Calc(unsigned char*, int)+0x71>
c001aa8f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa93:	d1 e8                	shr    eax,1
c001aa95:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001aa9a:	eb 06                	jmp    c001aaa2 <Net::crc32Calc(unsigned char*, int)+0x77>
c001aa9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aaa0:	d1 e8                	shr    eax,1
c001aaa2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aaa6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aaaa:	eb d3                	jmp    c001aa7f <Net::crc32Calc(unsigned char*, int)+0x54>
c001aaac:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001aab0:	eb a8                	jmp    c001aa5a <Net::crc32Calc(unsigned char*, int)+0x2f>
c001aab2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aab6:	f7 d0                	not    eax
c001aab8:	83 c4 10             	add    esp,0x10
c001aabb:	c3                   	ret    

c001aabc <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001aabc:	83 ec 1c             	sub    esp,0x1c
c001aabf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aac3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aac7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aacf:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001aad4:	7f 14                	jg     c001aaea <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001aad6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aada:	8d 50 01             	lea    edx,[eax+0x1]
c001aadd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aae1:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001aae4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aae8:	eb e5                	jmp    c001aacf <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001aaea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aaee:	8d 50 01             	lea    edx,[eax+0x1]
c001aaf1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aaf5:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001aaf8:	83 ec 04             	sub    esp,0x4
c001aafb:	6a 06                	push   0x6
c001aafd:	8d 44 24 36          	lea    eax,[esp+0x36]
c001ab01:	50                   	push   eax
c001ab02:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ab06:	e8 41 5c fe ff       	call   c000074c <memcpy>
c001ab0b:	83 c4 10             	add    esp,0x10
c001ab0e:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001ab13:	83 ec 04             	sub    esp,0x4
c001ab16:	6a 06                	push   0x6
c001ab18:	8d 44 24 30          	lea    eax,[esp+0x30]
c001ab1c:	50                   	push   eax
c001ab1d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ab21:	e8 26 5c fe ff       	call   c000074c <memcpy>
c001ab26:	83 c4 10             	add    esp,0x10
c001ab29:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001ab2e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab32:	0f b7 c0             	movzx  eax,ax
c001ab35:	c1 f8 08             	sar    eax,0x8
c001ab38:	89 c1                	mov    ecx,eax
c001ab3a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab3e:	8d 50 01             	lea    edx,[eax+0x1]
c001ab41:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab45:	88 ca                	mov    dl,cl
c001ab47:	88 10                	mov    BYTE PTR [eax],dl
c001ab49:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ab4d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab51:	8d 48 01             	lea    ecx,[eax+0x1]
c001ab54:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001ab58:	88 10                	mov    BYTE PTR [eax],dl
c001ab5a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ab5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab62:	83 ec 04             	sub    esp,0x4
c001ab65:	52                   	push   edx
c001ab66:	50                   	push   eax
c001ab67:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ab6b:	e8 dc 5b fe ff       	call   c000074c <memcpy>
c001ab70:	83 c4 10             	add    esp,0x10
c001ab73:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ab77:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001ab7b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab7f:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001ab83:	83 ec 08             	sub    esp,0x8
c001ab86:	50                   	push   eax
c001ab87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ab8b:	e8 9b fe ff ff       	call   c001aa2b <Net::crc32Calc(unsigned char*, int)>
c001ab90:	83 c4 10             	add    esp,0x10
c001ab93:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ab97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab9b:	c1 e8 18             	shr    eax,0x18
c001ab9e:	89 c1                	mov    ecx,eax
c001aba0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aba4:	8d 50 01             	lea    edx,[eax+0x1]
c001aba7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001abab:	88 ca                	mov    dl,cl
c001abad:	88 10                	mov    BYTE PTR [eax],dl
c001abaf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abb3:	c1 e8 10             	shr    eax,0x10
c001abb6:	89 c1                	mov    ecx,eax
c001abb8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abbc:	8d 50 01             	lea    edx,[eax+0x1]
c001abbf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001abc3:	88 ca                	mov    dl,cl
c001abc5:	88 10                	mov    BYTE PTR [eax],dl
c001abc7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abcb:	c1 e8 08             	shr    eax,0x8
c001abce:	89 c1                	mov    ecx,eax
c001abd0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abd4:	8d 50 01             	lea    edx,[eax+0x1]
c001abd7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001abdb:	88 ca                	mov    dl,cl
c001abdd:	88 10                	mov    BYTE PTR [eax],dl
c001abdf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abe3:	8d 50 01             	lea    edx,[eax+0x1]
c001abe6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001abea:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001abee:	88 10                	mov    BYTE PTR [eax],dl
c001abf0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001abf4:	83 c4 1c             	add    esp,0x1c
c001abf7:	c3                   	ret    

c001abf8 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001abf8:	83 ec 2c             	sub    esp,0x2c
c001abfb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001abff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ac03:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001ac08:	83 ec 04             	sub    esp,0x4
c001ac0b:	6a 06                	push   0x6
c001ac0d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ac11:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ac15:	83 c0 0e             	add    eax,0xe
c001ac18:	50                   	push   eax
c001ac19:	e8 2e 5b fe ff       	call   c000074c <memcpy>
c001ac1e:	83 c4 10             	add    esp,0x10
c001ac21:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ac26:	83 ec 04             	sub    esp,0x4
c001ac29:	6a 06                	push   0x6
c001ac2b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ac2f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ac33:	83 c0 08             	add    eax,0x8
c001ac36:	50                   	push   eax
c001ac37:	e8 10 5b fe ff       	call   c000074c <memcpy>
c001ac3c:	83 c4 10             	add    esp,0x10
c001ac3f:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ac44:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac48:	8d 50 01             	lea    edx,[eax+0x1]
c001ac4b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac4f:	8a 00                	mov    al,BYTE PTR [eax]
c001ac51:	0f b6 c0             	movzx  eax,al
c001ac54:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001ac59:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac5d:	8d 50 01             	lea    edx,[eax+0x1]
c001ac60:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac64:	8a 00                	mov    al,BYTE PTR [eax]
c001ac66:	0f b6 c0             	movzx  eax,al
c001ac69:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001ac6e:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001ac73:	c1 e0 08             	shl    eax,0x8
c001ac76:	89 c2                	mov    edx,eax
c001ac78:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ac7c:	09 d0                	or     eax,edx
c001ac7e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ac82:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001ac86:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001ac8b:	75 3a                	jne    c001acc7 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ac8d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac91:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ac94:	66 3d dc 05          	cmp    ax,0x5dc
c001ac98:	77 10                	ja     c001acaa <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001ac9a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac9e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aca1:	0f b7 c0             	movzx  eax,ax
c001aca4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001aca8:	eb 1d                	jmp    c001acc7 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001acaa:	83 ec 0c             	sub    esp,0xc
c001acad:	68 08 be 02 c0       	push   0xc002be08
c001acb2:	e8 50 82 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001acb7:	83 c4 10             	add    esp,0x10
c001acba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001acbe:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001acc2:	e9 c0 00 00 00       	jmp    c001ad87 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001acc7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001accb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001accf:	8b 00                	mov    eax,DWORD PTR [eax]
c001acd1:	83 ec 04             	sub    esp,0x4
c001acd4:	52                   	push   edx
c001acd5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001acd9:	50                   	push   eax
c001acda:	e8 6d 5a fe ff       	call   c000074c <memcpy>
c001acdf:	83 c4 10             	add    esp,0x10
c001ace2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ace6:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001acea:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001acee:	8d 50 01             	lea    edx,[eax+0x1]
c001acf1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001acf5:	8a 00                	mov    al,BYTE PTR [eax]
c001acf7:	0f b6 c0             	movzx  eax,al
c001acfa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001acfe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad02:	8d 50 01             	lea    edx,[eax+0x1]
c001ad05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad09:	8a 00                	mov    al,BYTE PTR [eax]
c001ad0b:	0f b6 c0             	movzx  eax,al
c001ad0e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ad12:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad16:	8d 50 01             	lea    edx,[eax+0x1]
c001ad19:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad1d:	8a 00                	mov    al,BYTE PTR [eax]
c001ad1f:	0f b6 c0             	movzx  eax,al
c001ad22:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ad26:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad2a:	8d 50 01             	lea    edx,[eax+0x1]
c001ad2d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad31:	8a 00                	mov    al,BYTE PTR [eax]
c001ad33:	0f b6 c0             	movzx  eax,al
c001ad36:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ad3a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad3e:	c1 e0 18             	shl    eax,0x18
c001ad41:	89 c2                	mov    edx,eax
c001ad43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad47:	c1 e0 10             	shl    eax,0x10
c001ad4a:	09 c2                	or     edx,eax
c001ad4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad50:	c1 e0 08             	shl    eax,0x8
c001ad53:	09 d0                	or     eax,edx
c001ad55:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001ad59:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ad5d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad61:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001ad65:	83 e8 04             	sub    eax,0x4
c001ad68:	83 ec 08             	sub    esp,0x8
c001ad6b:	50                   	push   eax
c001ad6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ad70:	e8 b6 fc ff ff       	call   c001aa2b <Net::crc32Calc(unsigned char*, int)>
c001ad75:	83 c4 10             	add    esp,0x10
c001ad78:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001ad7c:	0f 94 c2             	sete   dl
c001ad7f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad83:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001ad86:	90                   	nop
c001ad87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad8b:	83 c4 2c             	add    esp,0x2c
c001ad8e:	c2 04 00             	ret    0x4

c001ad91 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001ad91:	55                   	push   ebp
c001ad92:	57                   	push   edi
c001ad93:	56                   	push   esi
c001ad94:	53                   	push   ebx
c001ad95:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ad9b:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001ada2:	8a 1e                	mov    bl,BYTE PTR [esi]
c001ada4:	8d 6e 01             	lea    ebp,[esi+0x1]
c001ada7:	80 fb 40             	cmp    bl,0x40
c001adaa:	75 1b                	jne    c001adc7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001adac:	8a 16                	mov    dl,BYTE PTR [esi]
c001adae:	84 d2                	test   dl,dl
c001adb0:	0f 84 f1 00 00 00    	je     c001aea7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001adb6:	8d 46 01             	lea    eax,[esi+0x1]
c001adb9:	80 fa 3a             	cmp    dl,0x3a
c001adbc:	74 04                	je     c001adc2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001adbe:	89 c6                	mov    esi,eax
c001adc0:	eb ea                	jmp    c001adac <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001adc2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001adc5:	89 c6                	mov    esi,eax
c001adc7:	50                   	push   eax
c001adc8:	6a 40                	push   0x40
c001adca:	6a 00                	push   0x0
c001adcc:	8d 44 24 24          	lea    eax,[esp+0x24]
c001add0:	50                   	push   eax
c001add1:	e8 aa 59 fe ff       	call   c0000780 <memset>
c001add6:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001addd:	31 c0                	xor    eax,eax
c001addf:	83 c4 10             	add    esp,0x10
c001ade2:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ade4:	84 c9                	test   cl,cl
c001ade6:	0f 84 bb 00 00 00    	je     c001aea7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001adec:	3d c7 00 00 00       	cmp    eax,0xc7
c001adf1:	0f 8f b0 00 00 00    	jg     c001aea7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001adf7:	80 f9 0a             	cmp    cl,0xa
c001adfa:	0f 85 98 00 00 00    	jne    c001ae98 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001ae00:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001ae05:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001ae09:	a8 df                	test   al,0xdf
c001ae0b:	0f 94 c1             	sete   cl
c001ae0e:	3c 23                	cmp    al,0x23
c001ae10:	0f 94 c2             	sete   dl
c001ae13:	08 d1                	or     cl,dl
c001ae15:	75 4a                	jne    c001ae61 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae17:	8d 50 f7             	lea    edx,[eax-0x9]
c001ae1a:	80 fa 01             	cmp    dl,0x1
c001ae1d:	76 42                	jbe    c001ae61 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae1f:	3c 5b                	cmp    al,0x5b
c001ae21:	75 42                	jne    c001ae65 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001ae23:	80 fb 40             	cmp    bl,0x40
c001ae26:	75 39                	jne    c001ae61 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae28:	83 ec 0c             	sub    esp,0xc
c001ae2b:	8d 54 24 65          	lea    edx,[esp+0x65]
c001ae2f:	52                   	push   edx
c001ae30:	e8 67 59 fe ff       	call   c000079c <strlen>
c001ae35:	83 c4 10             	add    esp,0x10
c001ae38:	83 f8 3f             	cmp    eax,0x3f
c001ae3b:	77 6a                	ja     c001aea7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae3d:	50                   	push   eax
c001ae3e:	50                   	push   eax
c001ae3f:	8d 54 24 61          	lea    edx,[esp+0x61]
c001ae43:	52                   	push   edx
c001ae44:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ae48:	52                   	push   edx
c001ae49:	e8 ee 59 fe ff       	call   c000083c <strcpy>
c001ae4e:	58                   	pop    eax
c001ae4f:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ae53:	52                   	push   edx
c001ae54:	e8 43 59 fe ff       	call   c000079c <strlen>
c001ae59:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001ae5e:	83 c4 10             	add    esp,0x10
c001ae61:	31 d2                	xor    edx,edx
c001ae63:	eb 3a                	jmp    c001ae9f <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001ae65:	80 fb 40             	cmp    bl,0x40
c001ae68:	74 06                	je     c001ae70 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001ae6a:	8d 44 24 58          	lea    eax,[esp+0x58]
c001ae6e:	eb 20                	jmp    c001ae90 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001ae70:	50                   	push   eax
c001ae71:	50                   	push   eax
c001ae72:	55                   	push   ebp
c001ae73:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ae77:	50                   	push   eax
c001ae78:	e8 4b 5a fe ff       	call   c00008c8 <strcmp>
c001ae7d:	83 c4 10             	add    esp,0x10
c001ae80:	85 c0                	test   eax,eax
c001ae82:	75 dd                	jne    c001ae61 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae84:	eb e4                	jmp    c001ae6a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001ae86:	8d 50 01             	lea    edx,[eax+0x1]
c001ae89:	80 f9 3d             	cmp    cl,0x3d
c001ae8c:	74 1d                	je     c001aeab <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001ae8e:	89 d0                	mov    eax,edx
c001ae90:	8a 08                	mov    cl,BYTE PTR [eax]
c001ae92:	84 c9                	test   cl,cl
c001ae94:	75 f0                	jne    c001ae86 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001ae96:	eb 0f                	jmp    c001aea7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae98:	8d 50 01             	lea    edx,[eax+0x1]
c001ae9b:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001ae9f:	47                   	inc    edi
c001aea0:	89 d0                	mov    eax,edx
c001aea2:	e9 3b ff ff ff       	jmp    c001ade2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001aea7:	31 c0                	xor    eax,eax
c001aea9:	eb 33                	jmp    c001aede <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001aeab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001aeaf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001aeb2:	50                   	push   eax
c001aeb3:	50                   	push   eax
c001aeb4:	8d 44 24 60          	lea    eax,[esp+0x60]
c001aeb8:	50                   	push   eax
c001aeb9:	56                   	push   esi
c001aeba:	e8 09 5a fe ff       	call   c00008c8 <strcmp>
c001aebf:	83 c4 10             	add    esp,0x10
c001aec2:	85 c0                	test   eax,eax
c001aec4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001aec8:	75 97                	jne    c001ae61 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aeca:	51                   	push   ecx
c001aecb:	51                   	push   ecx
c001aecc:	52                   	push   edx
c001aecd:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001aed4:	e8 63 59 fe ff       	call   c000083c <strcpy>
c001aed9:	83 c4 10             	add    esp,0x10
c001aedc:	b0 01                	mov    al,0x1
c001aede:	81 c4 2c 01 00 00    	add    esp,0x12c
c001aee4:	5b                   	pop    ebx
c001aee5:	5e                   	pop    esi
c001aee6:	5f                   	pop    edi
c001aee7:	5d                   	pop    ebp
c001aee8:	c3                   	ret    

c001aee9 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001aee9:	57                   	push   edi
c001aeea:	56                   	push   esi
c001aeeb:	53                   	push   ebx
c001aeec:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001aef2:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001aef9:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001af00:	53                   	push   ebx
c001af01:	e8 96 58 fe ff       	call   c000079c <strlen>
c001af06:	89 34 24             	mov    DWORD PTR [esp],esi
c001af09:	89 c7                	mov    edi,eax
c001af0b:	e8 8c 58 fe ff       	call   c000079c <strlen>
c001af10:	83 c4 10             	add    esp,0x10
c001af13:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001af17:	3d ff 00 00 00       	cmp    eax,0xff
c001af1c:	0f 87 d3 00 00 00    	ja     c001aff5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001af22:	57                   	push   edi
c001af23:	57                   	push   edi
c001af24:	56                   	push   esi
c001af25:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001af29:	56                   	push   esi
c001af2a:	e8 0d 59 fe ff       	call   c000083c <strcpy>
c001af2f:	58                   	pop    eax
c001af30:	5a                   	pop    edx
c001af31:	68 51 c3 02 c0       	push   0xc002c351
c001af36:	56                   	push   esi
c001af37:	e8 40 5a fe ff       	call   c000097c <strcat>
c001af3c:	59                   	pop    ecx
c001af3d:	5f                   	pop    edi
c001af3e:	53                   	push   ebx
c001af3f:	56                   	push   esi
c001af40:	e8 37 5a fe ff       	call   c000097c <strcat>
c001af45:	58                   	pop    eax
c001af46:	5a                   	pop    edx
c001af47:	68 54 be 02 c0       	push   0xc002be54
c001af4c:	56                   	push   esi
c001af4d:	e8 2a 5a fe ff       	call   c000097c <strcat>
c001af52:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001af59:	e8 ed 48 ff ff       	call   c000f84b <malloc>
c001af5e:	83 c4 0c             	add    esp,0xc
c001af61:	89 c3                	mov    ebx,eax
c001af63:	ff 35 34 1b 03 c0    	push   DWORD PTR ds:0xc0031b34
c001af69:	56                   	push   esi
c001af6a:	50                   	push   eax
c001af6b:	e8 f6 84 ff ff       	call   c0013466 <File::File(char const*, Process*)>
c001af70:	83 c4 10             	add    esp,0x10
c001af73:	85 db                	test   ebx,ebx
c001af75:	74 7e                	je     c001aff5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001af77:	51                   	push   ecx
c001af78:	51                   	push   ecx
c001af79:	6a 01                	push   0x1
c001af7b:	53                   	push   ebx
c001af7c:	e8 49 85 ff ff       	call   c00134ca <File::open(FileOpenMode)>
c001af81:	83 c4 10             	add    esp,0x10
c001af84:	85 c0                	test   eax,eax
c001af86:	74 08                	je     c001af90 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001af88:	83 ec 0c             	sub    esp,0xc
c001af8b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af8d:	53                   	push   ebx
c001af8e:	eb 5f                	jmp    c001afef <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001af90:	52                   	push   edx
c001af91:	8d 44 24 17          	lea    eax,[esp+0x17]
c001af95:	50                   	push   eax
c001af96:	8d 44 24 20          	lea    eax,[esp+0x20]
c001af9a:	50                   	push   eax
c001af9b:	53                   	push   ebx
c001af9c:	e8 d5 87 ff ff       	call   c0013776 <File::stat(unsigned long long*, bool*)>
c001afa1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001afa5:	83 c4 10             	add    esp,0x10
c001afa8:	89 c1                	mov    ecx,eax
c001afaa:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001afae:	74 31                	je     c001afe1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001afb0:	83 ec 0c             	sub    esp,0xc
c001afb3:	50                   	push   eax
c001afb4:	e8 92 48 ff ff       	call   c000f84b <malloc>
c001afb9:	89 c6                	mov    esi,eax
c001afbb:	58                   	pop    eax
c001afbc:	8b 03                	mov    eax,DWORD PTR [ebx]
c001afbe:	8d 54 24 20          	lea    edx,[esp+0x20]
c001afc2:	52                   	push   edx
c001afc3:	56                   	push   esi
c001afc4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001afc8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001afcc:	53                   	push   ebx
c001afcd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001afd0:	83 c4 20             	add    esp,0x20
c001afd3:	85 c0                	test   eax,eax
c001afd5:	75 0a                	jne    c001afe1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001afd7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001afdb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001afdf:	74 18                	je     c001aff9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001afe1:	83 ec 0c             	sub    esp,0xc
c001afe4:	53                   	push   ebx
c001afe5:	e8 3e 85 ff ff       	call   c0013528 <File::close()>
c001afea:	8b 03                	mov    eax,DWORD PTR [ebx]
c001afec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001afef:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001aff2:	83 c4 10             	add    esp,0x10
c001aff5:	31 c0                	xor    eax,eax
c001aff7:	eb 3b                	jmp    c001b034 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001aff9:	83 ec 0c             	sub    esp,0xc
c001affc:	53                   	push   ebx
c001affd:	e8 26 85 ff ff       	call   c0013528 <File::close()>
c001b002:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b004:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b007:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b00a:	83 c4 0c             	add    esp,0xc
c001b00d:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b014:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b01b:	56                   	push   esi
c001b01c:	e8 70 fd ff ff       	call   c001ad91 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001b021:	89 34 24             	mov    DWORD PTR [esp],esi
c001b024:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b028:	e8 2e 48 ff ff       	call   c000f85b <free>
c001b02d:	83 c4 10             	add    esp,0x10
c001b030:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b034:	81 c4 20 01 00 00    	add    esp,0x120
c001b03a:	5b                   	pop    ebx
c001b03b:	5e                   	pop    esi
c001b03c:	5f                   	pop    edi
c001b03d:	c3                   	ret    

c001b03e <Reg::getLine(char*, char*, char*)>:
c001b03e:	57                   	push   edi
c001b03f:	56                   	push   esi
c001b040:	53                   	push   ebx
c001b041:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b045:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b049:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b04d:	57                   	push   edi
c001b04e:	56                   	push   esi
c001b04f:	53                   	push   ebx
c001b050:	68 59 be 02 c0       	push   0xc002be59
c001b055:	e8 8f fe ff ff       	call   c001aee9 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b05a:	83 c4 10             	add    esp,0x10
c001b05d:	84 c0                	test   al,al
c001b05f:	75 10                	jne    c001b071 <Reg::getLine(char*, char*, char*)+0x33>
c001b061:	57                   	push   edi
c001b062:	56                   	push   esi
c001b063:	53                   	push   ebx
c001b064:	68 7e be 02 c0       	push   0xc002be7e
c001b069:	e8 7b fe ff ff       	call   c001aee9 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b06e:	83 c4 10             	add    esp,0x10
c001b071:	5b                   	pop    ebx
c001b072:	5e                   	pop    esi
c001b073:	5f                   	pop    edi
c001b074:	c3                   	ret    

c001b075 <Reg::readInt(char*, char*, int*)>:
c001b075:	55                   	push   ebp
c001b076:	57                   	push   edi
c001b077:	56                   	push   esi
c001b078:	53                   	push   ebx
c001b079:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b07f:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b083:	57                   	push   edi
c001b084:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b08b:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b092:	e8 a7 ff ff ff       	call   c001b03e <Reg::getLine(char*, char*, char*)>
c001b097:	83 c4 10             	add    esp,0x10
c001b09a:	84 c0                	test   al,al
c001b09c:	0f 84 b3 00 00 00    	je     c001b155 <Reg::readInt(char*, char*, int*)+0xe0>
c001b0a2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b0a6:	80 fa 2b             	cmp    dl,0x2b
c001b0a9:	74 0c                	je     c001b0b7 <Reg::readInt(char*, char*, int*)+0x42>
c001b0ab:	80 fa 2d             	cmp    dl,0x2d
c001b0ae:	75 0e                	jne    c001b0be <Reg::readInt(char*, char*, int*)+0x49>
c001b0b0:	ba 01 00 00 00       	mov    edx,0x1
c001b0b5:	eb 0b                	jmp    c001b0c2 <Reg::readInt(char*, char*, int*)+0x4d>
c001b0b7:	ba 01 00 00 00       	mov    edx,0x1
c001b0bc:	eb 02                	jmp    c001b0c0 <Reg::readInt(char*, char*, int*)+0x4b>
c001b0be:	31 d2                	xor    edx,edx
c001b0c0:	31 c0                	xor    eax,eax
c001b0c2:	be 0a 00 00 00       	mov    esi,0xa
c001b0c7:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b0cc:	75 20                	jne    c001b0ee <Reg::readInt(char*, char*, int*)+0x79>
c001b0ce:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b0d2:	80 f9 78             	cmp    cl,0x78
c001b0d5:	75 0a                	jne    c001b0e1 <Reg::readInt(char*, char*, int*)+0x6c>
c001b0d7:	83 c2 02             	add    edx,0x2
c001b0da:	be 10 00 00 00       	mov    esi,0x10
c001b0df:	eb 0d                	jmp    c001b0ee <Reg::readInt(char*, char*, int*)+0x79>
c001b0e1:	80 f9 62             	cmp    cl,0x62
c001b0e4:	75 08                	jne    c001b0ee <Reg::readInt(char*, char*, int*)+0x79>
c001b0e6:	83 c2 02             	add    edx,0x2
c001b0e9:	be 02 00 00 00       	mov    esi,0x2
c001b0ee:	01 d7                	add    edi,edx
c001b0f0:	31 d2                	xor    edx,edx
c001b0f2:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b0f4:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b0f8:	80 fb 0d             	cmp    bl,0xd
c001b0fb:	0f 94 c3             	sete   bl
c001b0fe:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b103:	0f 94 c1             	sete   cl
c001b106:	08 cb                	or     bl,cl
c001b108:	75 3a                	jne    c001b144 <Reg::readInt(char*, char*, int*)+0xcf>
c001b10a:	0f af d6             	imul   edx,esi
c001b10d:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b112:	83 fe 10             	cmp    esi,0x10
c001b115:	75 26                	jne    c001b13d <Reg::readInt(char*, char*, int*)+0xc8>
c001b117:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b11b:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b11e:	89 e9                	mov    ecx,ebp
c001b120:	80 f9 05             	cmp    cl,0x5
c001b123:	77 06                	ja     c001b12b <Reg::readInt(char*, char*, int*)+0xb6>
c001b125:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b129:	eb 16                	jmp    c001b141 <Reg::readInt(char*, char*, int*)+0xcc>
c001b12b:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b12f:	83 e9 61             	sub    ecx,0x61
c001b132:	80 f9 05             	cmp    cl,0x5
c001b135:	77 06                	ja     c001b13d <Reg::readInt(char*, char*, int*)+0xc8>
c001b137:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b13b:	eb 04                	jmp    c001b141 <Reg::readInt(char*, char*, int*)+0xcc>
c001b13d:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b141:	47                   	inc    edi
c001b142:	eb ae                	jmp    c001b0f2 <Reg::readInt(char*, char*, int*)+0x7d>
c001b144:	84 c0                	test   al,al
c001b146:	74 02                	je     c001b14a <Reg::readInt(char*, char*, int*)+0xd5>
c001b148:	f7 da                	neg    edx
c001b14a:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b151:	89 10                	mov    DWORD PTR [eax],edx
c001b153:	88 d8                	mov    al,bl
c001b155:	81 c4 ec 00 00 00    	add    esp,0xec
c001b15b:	5b                   	pop    ebx
c001b15c:	5e                   	pop    esi
c001b15d:	5f                   	pop    edi
c001b15e:	5d                   	pop    ebp
c001b15f:	c3                   	ret    

c001b160 <Reg::readString(char*, char*, char*, int)>:
c001b160:	57                   	push   edi
c001b161:	56                   	push   esi
c001b162:	53                   	push   ebx
c001b163:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b169:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b170:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b174:	57                   	push   edi
c001b175:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b17c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b183:	e8 b6 fe ff ff       	call   c001b03e <Reg::getLine(char*, char*, char*)>
c001b188:	83 c4 10             	add    esp,0x10
c001b18b:	89 c6                	mov    esi,eax
c001b18d:	84 c0                	test   al,al
c001b18f:	74 44                	je     c001b1d5 <Reg::readString(char*, char*, char*, int)+0x75>
c001b191:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b198:	31 c0                	xor    eax,eax
c001b19a:	4a                   	dec    edx
c001b19b:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b19e:	84 c9                	test   cl,cl
c001b1a0:	74 0f                	je     c001b1b1 <Reg::readString(char*, char*, char*, int)+0x51>
c001b1a2:	39 c2                	cmp    edx,eax
c001b1a4:	7e 0b                	jle    c001b1b1 <Reg::readString(char*, char*, char*, int)+0x51>
c001b1a6:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b1a9:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b1ae:	40                   	inc    eax
c001b1af:	eb ea                	jmp    c001b19b <Reg::readString(char*, char*, char*, int)+0x3b>
c001b1b1:	83 ec 0c             	sub    esp,0xc
c001b1b4:	53                   	push   ebx
c001b1b5:	e8 e2 55 fe ff       	call   c000079c <strlen>
c001b1ba:	83 c4 10             	add    esp,0x10
c001b1bd:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b1c2:	75 11                	jne    c001b1d5 <Reg::readString(char*, char*, char*, int)+0x75>
c001b1c4:	83 ec 0c             	sub    esp,0xc
c001b1c7:	53                   	push   ebx
c001b1c8:	e8 cf 55 fe ff       	call   c000079c <strlen>
c001b1cd:	83 c4 10             	add    esp,0x10
c001b1d0:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b1d5:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b1db:	89 f0                	mov    eax,esi
c001b1dd:	5b                   	pop    ebx
c001b1de:	5e                   	pop    esi
c001b1df:	5f                   	pop    edi
c001b1e0:	c3                   	ret    

c001b1e1 <Reg::readBool(char*, char*, bool*)>:
c001b1e1:	83 ec 20             	sub    esp,0x20
c001b1e4:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b1e8:	50                   	push   eax
c001b1e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1f1:	e8 7f fe ff ff       	call   c001b075 <Reg::readInt(char*, char*, int*)>
c001b1f6:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b1fb:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b1ff:	0f 95 02             	setne  BYTE PTR [edx]
c001b202:	83 c4 2c             	add    esp,0x2c
c001b205:	c3                   	ret    

c001b206 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b206:	53                   	push   ebx
c001b207:	83 ec 1c             	sub    esp,0x1c
c001b20a:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b20e:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b212:	50                   	push   eax
c001b213:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b217:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b21b:	e8 c1 ff ff ff       	call   c001b1e1 <Reg::readBool(char*, char*, bool*)>
c001b220:	83 c4 10             	add    esp,0x10
c001b223:	84 c0                	test   al,al
c001b225:	74 04                	je     c001b22b <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b227:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b22b:	88 d8                	mov    al,bl
c001b22d:	83 c4 18             	add    esp,0x18
c001b230:	5b                   	pop    ebx
c001b231:	c3                   	ret    

c001b232 <Reg::readIntWithDefault(char*, char*, int)>:
c001b232:	53                   	push   ebx
c001b233:	83 ec 1c             	sub    esp,0x1c
c001b236:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b23a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b23e:	50                   	push   eax
c001b23f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b247:	e8 29 fe ff ff       	call   c001b075 <Reg::readInt(char*, char*, int*)>
c001b24c:	83 c4 10             	add    esp,0x10
c001b24f:	84 c0                	test   al,al
c001b251:	74 04                	je     c001b257 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b253:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b257:	89 d8                	mov    eax,ebx
c001b259:	83 c4 18             	add    esp,0x18
c001b25c:	5b                   	pop    ebx
c001b25d:	c3                   	ret    

c001b25e <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b25e:	57                   	push   edi
c001b25f:	56                   	push   esi
c001b260:	53                   	push   ebx
c001b261:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b265:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b269:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b26d:	56                   	push   esi
c001b26e:	53                   	push   ebx
c001b26f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b273:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b277:	e8 e4 fe ff ff       	call   c001b160 <Reg::readString(char*, char*, char*, int)>
c001b27c:	83 c4 10             	add    esp,0x10
c001b27f:	84 c0                	test   al,al
c001b281:	75 1b                	jne    c001b29e <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b283:	50                   	push   eax
c001b284:	56                   	push   esi
c001b285:	4e                   	dec    esi
c001b286:	6a 00                	push   0x0
c001b288:	53                   	push   ebx
c001b289:	e8 f2 54 fe ff       	call   c0000780 <memset>
c001b28e:	83 c4 0c             	add    esp,0xc
c001b291:	56                   	push   esi
c001b292:	57                   	push   edi
c001b293:	53                   	push   ebx
c001b294:	89 fb                	mov    ebx,edi
c001b296:	e8 b1 54 fe ff       	call   c000074c <memcpy>
c001b29b:	83 c4 10             	add    esp,0x10
c001b29e:	89 d8                	mov    eax,ebx
c001b2a0:	5b                   	pop    ebx
c001b2a1:	5e                   	pop    esi
c001b2a2:	5f                   	pop    edi
c001b2a3:	c3                   	ret    

c001b2a4 <Sys::eject(regs*)>:
c001b2a4:	83 ec 0c             	sub    esp,0xc
c001b2a7:	83 ca ff             	or     edx,0xffffffff
c001b2aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2ae:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b2b1:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b2b6:	83 e9 41             	sub    ecx,0x41
c001b2b9:	83 f9 19             	cmp    ecx,0x19
c001b2bc:	77 18                	ja     c001b2d6 <Sys::eject(regs*)+0x32>
c001b2be:	8b 0c 8d e0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1420]
c001b2c5:	85 c9                	test   ecx,ecx
c001b2c7:	74 0d                	je     c001b2d6 <Sys::eject(regs*)+0x32>
c001b2c9:	83 ec 0c             	sub    esp,0xc
c001b2cc:	51                   	push   ecx
c001b2cd:	e8 5c b4 ff ff       	call   c001672e <LogicalDisk::eject()>
c001b2d2:	83 c4 10             	add    esp,0x10
c001b2d5:	99                   	cdq    
c001b2d6:	83 c4 0c             	add    esp,0xc
c001b2d9:	c3                   	ret    

c001b2da <Sys::exit(regs*)>:
c001b2da:	83 ec 18             	sub    esp,0x18
c001b2dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b2e1:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b2e4:	e8 b4 35 00 00       	call   c001e89d <terminateTask(int)>
c001b2e9:	83 c8 ff             	or     eax,0xffffffff
c001b2ec:	83 c4 1c             	add    esp,0x1c
c001b2ef:	89 c2                	mov    edx,eax
c001b2f1:	c3                   	ret    

c001b2f2 <Sys::getCwd(regs*)>:
c001b2f2:	83 ec 10             	sub    esp,0x10
c001b2f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b2f9:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b2fc:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b2ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b304:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b307:	e8 5c 7f ff ff       	call   c0013268 <Fs::getcwd(Process*, char*, int)>
c001b30c:	83 c4 1c             	add    esp,0x1c
c001b30f:	99                   	cdq    
c001b310:	c3                   	ret    

c001b311 <Sys::getPID(regs*)>:
c001b311:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b316:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b319:	8b 00                	mov    eax,DWORD PTR [eax]
c001b31b:	99                   	cdq    
c001b31c:	c3                   	ret    

c001b31d <Sys::getRAMData(regs*)>:
c001b31d:	8b 0d 14 e6 02 c0    	mov    ecx,DWORD PTR ds:0xc002e614
c001b323:	6b 05 10 e6 02 c0 64 	imul   eax,DWORD PTR ds:0xc002e610,0x64
c001b32a:	99                   	cdq    
c001b32b:	f7 f9                	idiv   ecx
c001b32d:	c1 e0 18             	shl    eax,0x18
c001b330:	09 c8                	or     eax,ecx
c001b332:	99                   	cdq    
c001b333:	c3                   	ret    

c001b334 <Sys::loadDLL(regs*)>:
c001b334:	56                   	push   esi
c001b335:	53                   	push   ebx
c001b336:	31 d2                	xor    edx,edx
c001b338:	51                   	push   ecx
c001b339:	b8 01 00 00 00       	mov    eax,0x1
c001b33e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b342:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b346:	0f 84 8c 00 00 00    	je     c001b3d8 <Sys::loadDLL(regs*)+0xa4>
c001b34c:	83 ec 0c             	sub    esp,0xc
c001b34f:	68 14 01 00 00       	push   0x114
c001b354:	e8 f2 44 ff ff       	call   c000f84b <malloc>
c001b359:	83 c4 0c             	add    esp,0xc
c001b35c:	89 c3                	mov    ebx,eax
c001b35e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b363:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b366:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b369:	53                   	push   ebx
c001b36a:	e8 f7 80 ff ff       	call   c0013466 <File::File(char const*, Process*)>
c001b36f:	83 c4 10             	add    esp,0x10
c001b372:	31 d2                	xor    edx,edx
c001b374:	b8 02 00 00 00       	mov    eax,0x2
c001b379:	85 db                	test   ebx,ebx
c001b37b:	74 5b                	je     c001b3d8 <Sys::loadDLL(regs*)+0xa4>
c001b37d:	83 ec 0c             	sub    esp,0xc
c001b380:	53                   	push   ebx
c001b381:	e8 b2 83 ff ff       	call   c0013738 <File::exists()>
c001b386:	83 c4 10             	add    esp,0x10
c001b389:	84 c0                	test   al,al
c001b38b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b38d:	75 11                	jne    c001b3a0 <Sys::loadDLL(regs*)+0x6c>
c001b38f:	83 ec 0c             	sub    esp,0xc
c001b392:	53                   	push   ebx
c001b393:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b396:	83 c4 10             	add    esp,0x10
c001b399:	b8 03 00 00 00       	mov    eax,0x3
c001b39e:	eb 36                	jmp    c001b3d6 <Sys::loadDLL(regs*)+0xa2>
c001b3a0:	83 ec 0c             	sub    esp,0xc
c001b3a3:	53                   	push   ebx
c001b3a4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b3a7:	58                   	pop    eax
c001b3a8:	5a                   	pop    edx
c001b3a9:	6a 00                	push   0x0
c001b3ab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b3ae:	e8 c5 23 00 00       	call   c001d778 <Thr::loadDLL(char const*, bool)>
c001b3b3:	83 c4 10             	add    esp,0x10
c001b3b6:	89 c1                	mov    ecx,eax
c001b3b8:	31 d2                	xor    edx,edx
c001b3ba:	b8 04 00 00 00       	mov    eax,0x4
c001b3bf:	85 c9                	test   ecx,ecx
c001b3c1:	74 15                	je     c001b3d8 <Sys::loadDLL(regs*)+0xa4>
c001b3c3:	53                   	push   ebx
c001b3c4:	53                   	push   ebx
c001b3c5:	ff 35 c8 e5 02 c0    	push   DWORD PTR ds:0xc002e5c8
c001b3cb:	51                   	push   ecx
c001b3cc:	e8 db 25 00 00       	call   c001d9ac <Thr::executeDLL(unsigned long, void*)>
c001b3d1:	83 c4 10             	add    esp,0x10
c001b3d4:	31 c0                	xor    eax,eax
c001b3d6:	31 d2                	xor    edx,edx
c001b3d8:	59                   	pop    ecx
c001b3d9:	5b                   	pop    ebx
c001b3da:	5e                   	pop    esi
c001b3db:	c3                   	ret    

c001b3dc <Sys::read(regs*)>:
c001b3dc:	57                   	push   edi
c001b3dd:	56                   	push   esi
c001b3de:	53                   	push   ebx
c001b3df:	83 ec 10             	sub    esp,0x10
c001b3e2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b3e6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b3e9:	83 f8 02             	cmp    eax,0x2
c001b3ec:	77 10                	ja     c001b3fe <Sys::read(regs*)+0x22>
c001b3ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3f3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b3f6:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b3fc:	eb 0e                	jmp    c001b40c <Sys::read(regs*)+0x30>
c001b3fe:	83 ec 0c             	sub    esp,0xc
c001b401:	50                   	push   eax
c001b402:	e8 ee 65 ff ff       	call   c00119f5 <getFromFileDescriptor(int)>
c001b407:	83 c4 10             	add    esp,0x10
c001b40a:	89 c1                	mov    ecx,eax
c001b40c:	83 c8 ff             	or     eax,0xffffffff
c001b40f:	85 c9                	test   ecx,ecx
c001b411:	89 c2                	mov    edx,eax
c001b413:	74 28                	je     c001b43d <Sys::read(regs*)+0x61>
c001b415:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b41d:	31 ff                	xor    edi,edi
c001b41f:	83 ec 0c             	sub    esp,0xc
c001b422:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b424:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b428:	52                   	push   edx
c001b429:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b42c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b42f:	57                   	push   edi
c001b430:	56                   	push   esi
c001b431:	51                   	push   ecx
c001b432:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b435:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b439:	83 c4 20             	add    esp,0x20
c001b43c:	99                   	cdq    
c001b43d:	83 c4 10             	add    esp,0x10
c001b440:	5b                   	pop    ebx
c001b441:	5e                   	pop    esi
c001b442:	5f                   	pop    edi
c001b443:	c3                   	ret    

c001b444 <Sys::sbrk(regs*)>:
c001b444:	56                   	push   esi
c001b445:	53                   	push   ebx
c001b446:	50                   	push   eax
c001b447:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b44c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b450:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b453:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b456:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b45c:	85 db                	test   ebx,ebx
c001b45e:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b461:	74 02                	je     c001b465 <Sys::sbrk(regs*)+0x21>
c001b463:	79 06                	jns    c001b46b <Sys::sbrk(regs*)+0x27>
c001b465:	89 f0                	mov    eax,esi
c001b467:	31 d2                	xor    edx,edx
c001b469:	eb 2a                	jmp    c001b495 <Sys::sbrk(regs*)+0x51>
c001b46b:	83 c8 ff             	or     eax,0xffffffff
c001b46e:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b474:	89 c2                	mov    edx,eax
c001b476:	77 1d                	ja     c001b495 <Sys::sbrk(regs*)+0x51>
c001b478:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b47e:	50                   	push   eax
c001b47f:	c1 ea 0c             	shr    edx,0xc
c001b482:	68 07 0c 00 00       	push   0xc07
c001b487:	52                   	push   edx
c001b488:	51                   	push   ecx
c001b489:	e8 d2 6f ff ff       	call   c0012460 <VAS::allocatePages(int, int)>
c001b48e:	89 f0                	mov    eax,esi
c001b490:	31 d2                	xor    edx,edx
c001b492:	83 c4 10             	add    esp,0x10
c001b495:	59                   	pop    ecx
c001b496:	5b                   	pop    ebx
c001b497:	5e                   	pop    esi
c001b498:	c3                   	ret    

c001b499 <Sys::setCwd(regs*)>:
c001b499:	83 ec 14             	sub    esp,0x14
c001b49c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b4a0:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b4a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4a8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b4ab:	e8 27 83 ff ff       	call   c00137d7 <Fs::setcwd(Process*, char*)>
c001b4b0:	83 c4 1c             	add    esp,0x1c
c001b4b3:	99                   	cdq    
c001b4b4:	c3                   	ret    

c001b4b5 <Sys::setTime(regs*)>:
c001b4b5:	55                   	push   ebp
c001b4b6:	31 d2                	xor    edx,edx
c001b4b8:	57                   	push   edi
c001b4b9:	bf 18 00 00 00       	mov    edi,0x18
c001b4be:	56                   	push   esi
c001b4bf:	53                   	push   ebx
c001b4c0:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b4c5:	83 ec 30             	sub    esp,0x30
c001b4c8:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b4cc:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b4cf:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b4d2:	f7 f3                	div    ebx
c001b4d4:	89 d6                	mov    esi,edx
c001b4d6:	31 d2                	xor    edx,edx
c001b4d8:	f7 f3                	div    ebx
c001b4da:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b4dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b4e1:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b4e6:	31 d2                	xor    edx,edx
c001b4e8:	f7 f3                	div    ebx
c001b4ea:	31 d2                	xor    edx,edx
c001b4ec:	bb 0c 00 00 00       	mov    ebx,0xc
c001b4f1:	f7 f7                	div    edi
c001b4f3:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b4f6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b4fa:	0f b7 cd             	movzx  ecx,bp
c001b4fd:	56                   	push   esi
c001b4fe:	89 c7                	mov    edi,eax
c001b500:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b504:	c1 e6 10             	shl    esi,0x10
c001b507:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b50b:	83 e7 1f             	and    edi,0x1f
c001b50e:	51                   	push   ecx
c001b50f:	47                   	inc    edi
c001b510:	c1 e8 05             	shr    eax,0x5
c001b513:	31 d2                	xor    edx,edx
c001b515:	f7 f3                	div    ebx
c001b517:	31 db                	xor    ebx,ebx
c001b519:	52                   	push   edx
c001b51a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b51e:	57                   	push   edi
c001b51f:	68 99 be 02 c0       	push   0xc002be99
c001b524:	e8 de 79 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001b529:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b52d:	89 f8                	mov    eax,edi
c001b52f:	31 c9                	xor    ecx,ecx
c001b531:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b535:	88 c1                	mov    cl,al
c001b537:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b53d:	88 d5                	mov    ch,dl
c001b53f:	c1 e0 10             	shl    eax,0x10
c001b542:	0f b7 d1             	movzx  edx,cx
c001b545:	09 c2                	or     edx,eax
c001b547:	89 d8                	mov    eax,ebx
c001b549:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b54e:	09 f0                	or     eax,esi
c001b550:	89 c3                	mov    ebx,eax
c001b552:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b556:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b55a:	83 c4 18             	add    esp,0x18
c001b55d:	53                   	push   ebx
c001b55e:	52                   	push   edx
c001b55f:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b563:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b567:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b56b:	e8 81 89 ff ff       	call   c0013ef1 <datetimeToSeconds(datetime_t)>
c001b570:	83 c4 0c             	add    esp,0xc
c001b573:	52                   	push   edx
c001b574:	50                   	push   eax
c001b575:	56                   	push   esi
c001b576:	e8 fd 8a ff ff       	call   c0014078 <secondsToDatetime(unsigned long long)>
c001b57b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b57f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b583:	51                   	push   ecx
c001b584:	89 d6                	mov    esi,edx
c001b586:	51                   	push   ecx
c001b587:	c1 ee 10             	shr    esi,0x10
c001b58a:	89 f3                	mov    ebx,esi
c001b58c:	0f b6 f3             	movzx  esi,bl
c001b58f:	56                   	push   esi
c001b590:	0f b6 f6             	movzx  esi,dh
c001b593:	0f b6 d2             	movzx  edx,dl
c001b596:	56                   	push   esi
c001b597:	52                   	push   edx
c001b598:	89 c2                	mov    edx,eax
c001b59a:	c1 ea 10             	shr    edx,0x10
c001b59d:	52                   	push   edx
c001b59e:	0f b6 d4             	movzx  edx,ah
c001b5a1:	0f b6 c0             	movzx  eax,al
c001b5a4:	52                   	push   edx
c001b5a5:	50                   	push   eax
c001b5a6:	68 b5 be 02 c0       	push   0xc002beb5
c001b5ab:	e8 57 79 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001b5b0:	83 c4 2c             	add    esp,0x2c
c001b5b3:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001b5b8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b5bc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b5c0:	53                   	push   ebx
c001b5c1:	51                   	push   ecx
c001b5c2:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b5c8:	e8 4b 8a ff ff       	call   c0014018 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b5cd:	83 f0 01             	xor    eax,0x1
c001b5d0:	31 d2                	xor    edx,edx
c001b5d2:	0f b6 c0             	movzx  eax,al
c001b5d5:	83 c4 3c             	add    esp,0x3c
c001b5d8:	5b                   	pop    ebx
c001b5d9:	5e                   	pop    esi
c001b5da:	5f                   	pop    edi
c001b5db:	5d                   	pop    ebp
c001b5dc:	c3                   	ret    

c001b5dd <Sys::timezone(regs*)>:
c001b5dd:	53                   	push   ebx
c001b5de:	83 ec 08             	sub    esp,0x8
c001b5e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b5e5:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b5e9:	75 17                	jne    c001b602 <Sys::timezone(regs*)+0x25>
c001b5eb:	83 ec 0c             	sub    esp,0xc
c001b5ee:	68 d1 be 02 c0       	push   0xc002bed1
c001b5f3:	e8 0f 79 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001b5f8:	83 c8 ff             	or     eax,0xffffffff
c001b5fb:	83 c4 10             	add    esp,0x10
c001b5fe:	89 c2                	mov    edx,eax
c001b600:	eb 20                	jmp    c001b622 <Sys::timezone(regs*)+0x45>
c001b602:	83 ec 0c             	sub    esp,0xc
c001b605:	68 09 bf 02 c0       	push   0xc002bf09
c001b60a:	e8 f8 78 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001b60f:	58                   	pop    eax
c001b610:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b613:	e8 62 87 ff ff       	call   c0013d7a <User::loadClockSettings(int)>
c001b618:	83 c4 10             	add    esp,0x10
c001b61b:	b8 01 00 00 00       	mov    eax,0x1
c001b620:	31 d2                	xor    edx,edx
c001b622:	83 c4 08             	add    esp,0x8
c001b625:	5b                   	pop    ebx
c001b626:	c3                   	ret    

c001b627 <Sys::write(regs*)>:
c001b627:	57                   	push   edi
c001b628:	56                   	push   esi
c001b629:	53                   	push   ebx
c001b62a:	83 ec 10             	sub    esp,0x10
c001b62d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b631:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b634:	83 f8 02             	cmp    eax,0x2
c001b637:	77 10                	ja     c001b649 <Sys::write(regs*)+0x22>
c001b639:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b63e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b641:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b647:	eb 0e                	jmp    c001b657 <Sys::write(regs*)+0x30>
c001b649:	83 ec 0c             	sub    esp,0xc
c001b64c:	50                   	push   eax
c001b64d:	e8 a3 63 ff ff       	call   c00119f5 <getFromFileDescriptor(int)>
c001b652:	83 c4 10             	add    esp,0x10
c001b655:	89 c1                	mov    ecx,eax
c001b657:	83 c8 ff             	or     eax,0xffffffff
c001b65a:	85 c9                	test   ecx,ecx
c001b65c:	89 c2                	mov    edx,eax
c001b65e:	74 28                	je     c001b688 <Sys::write(regs*)+0x61>
c001b660:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b668:	31 ff                	xor    edi,edi
c001b66a:	83 ec 0c             	sub    esp,0xc
c001b66d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b66f:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b673:	52                   	push   edx
c001b674:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b677:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b67a:	57                   	push   edi
c001b67b:	56                   	push   esi
c001b67c:	51                   	push   ecx
c001b67d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b680:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b684:	83 c4 20             	add    esp,0x20
c001b687:	99                   	cdq    
c001b688:	83 c4 10             	add    esp,0x10
c001b68b:	5b                   	pop    ebx
c001b68c:	5e                   	pop    esi
c001b68d:	5f                   	pop    edi
c001b68e:	c3                   	ret    

c001b68f <Sys::wsbe(regs*)>:
c001b68f:	57                   	push   edi
c001b690:	b9 0b 00 00 00       	mov    ecx,0xb
c001b695:	56                   	push   esi
c001b696:	be 48 bf 02 c0       	mov    esi,0xc002bf48
c001b69b:	53                   	push   ebx
c001b69c:	83 ec 30             	sub    esp,0x30
c001b69f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b6a3:	fc                   	cld    
c001b6a4:	83 ec 0c             	sub    esp,0xc
c001b6a7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b6a9:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b6ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6b2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b6b5:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b6bb:	8b 06                	mov    eax,DWORD PTR [esi]
c001b6bd:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b6c0:	57                   	push   edi
c001b6c1:	e8 d6 50 fe ff       	call   c000079c <strlen>
c001b6c6:	5a                   	pop    edx
c001b6c7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b6cb:	52                   	push   edx
c001b6cc:	31 d2                	xor    edx,edx
c001b6ce:	57                   	push   edi
c001b6cf:	52                   	push   edx
c001b6d0:	50                   	push   eax
c001b6d1:	56                   	push   esi
c001b6d2:	ff d3                	call   ebx
c001b6d4:	83 c4 14             	add    esp,0x14
c001b6d7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b6db:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b6de:	e8 ba 31 00 00       	call   c001e89d <terminateTask(int)>
c001b6e3:	83 c4 40             	add    esp,0x40
c001b6e6:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b6eb:	5b                   	pop    ebx
c001b6ec:	31 d2                	xor    edx,edx
c001b6ee:	5e                   	pop    esi
c001b6ef:	5f                   	pop    edi
c001b6f0:	c3                   	ret    

c001b6f1 <Sys::yield(regs*)>:
c001b6f1:	57                   	push   edi
c001b6f2:	56                   	push   esi
c001b6f3:	53                   	push   ebx
c001b6f4:	e8 27 27 00 00       	call   c001de20 <lockScheduler()>
c001b6f9:	e8 98 2a 00 00       	call   c001e196 <schedule()>
c001b6fe:	e8 1f 27 00 00       	call   c001de22 <unlockScheduler()>
c001b703:	8b 35 50 ec 02 c0    	mov    esi,DWORD PTR ds:0xc002ec50
c001b709:	8b 3d 54 ec 02 c0    	mov    edi,DWORD PTR ds:0xc002ec54
c001b70f:	89 f0                	mov    eax,esi
c001b711:	89 fb                	mov    ebx,edi
c001b713:	89 f1                	mov    ecx,esi
c001b715:	c1 e0 07             	shl    eax,0x7
c001b718:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b71c:	25 80 30 0f 00       	and    eax,0xf3080
c001b721:	c1 eb 17             	shr    ebx,0x17
c001b724:	31 c8                	xor    eax,ecx
c001b726:	89 da                	mov    edx,ebx
c001b728:	5b                   	pop    ebx
c001b729:	5e                   	pop    esi
c001b72a:	5f                   	pop    edi
c001b72b:	c3                   	ret    

c001b72c <sysCallSeekDir(regs*)>:
c001b72c:	31 c0                	xor    eax,eax
c001b72e:	31 d2                	xor    edx,edx
c001b730:	c3                   	ret    

c001b731 <sysCallTellDir(regs*)>:
c001b731:	31 c0                	xor    eax,eax
c001b733:	31 d2                	xor    edx,edx
c001b735:	c3                   	ret    

c001b736 <sysCallVerify(regs*)>:
c001b736:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b73a:	31 d2                	xor    edx,edx
c001b73c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b73f:	c3                   	ret    

c001b740 <sysFormatDisk(regs*)>:
c001b740:	56                   	push   esi
c001b741:	53                   	push   ebx
c001b742:	53                   	push   ebx
c001b743:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b747:	8b 1d 54 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e754
c001b74d:	eb 25                	jmp    c001b774 <sysFormatDisk(regs*)+0x34>
c001b74f:	83 ec 0c             	sub    esp,0xc
c001b752:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b755:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b757:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b75a:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b75d:	50                   	push   eax
c001b75e:	ff 34 85 e0 eb 02 c0 	push   DWORD PTR [eax*4-0x3ffd1420]
c001b765:	53                   	push   ebx
c001b766:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b769:	83 c4 20             	add    esp,0x20
c001b76c:	83 f8 08             	cmp    eax,0x8
c001b76f:	75 12                	jne    c001b783 <sysFormatDisk(regs*)+0x43>
c001b771:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b774:	85 db                	test   ebx,ebx
c001b776:	75 d7                	jne    c001b74f <sysFormatDisk(regs*)+0xf>
c001b778:	59                   	pop    ecx
c001b779:	b8 03 00 00 00       	mov    eax,0x3
c001b77e:	31 d2                	xor    edx,edx
c001b780:	5b                   	pop    ebx
c001b781:	5e                   	pop    esi
c001b782:	c3                   	ret    
c001b783:	85 c0                	test   eax,eax
c001b785:	74 1b                	je     c001b7a2 <sysFormatDisk(regs*)+0x62>
c001b787:	83 f8 09             	cmp    eax,0x9
c001b78a:	74 0b                	je     c001b797 <sysFormatDisk(regs*)+0x57>
c001b78c:	59                   	pop    ecx
c001b78d:	b8 02 00 00 00       	mov    eax,0x2
c001b792:	31 d2                	xor    edx,edx
c001b794:	5b                   	pop    ebx
c001b795:	5e                   	pop    esi
c001b796:	c3                   	ret    
c001b797:	59                   	pop    ecx
c001b798:	b8 01 00 00 00       	mov    eax,0x1
c001b79d:	31 d2                	xor    edx,edx
c001b79f:	5b                   	pop    ebx
c001b7a0:	5e                   	pop    esi
c001b7a1:	c3                   	ret    
c001b7a2:	59                   	pop    ecx
c001b7a3:	31 c0                	xor    eax,eax
c001b7a5:	31 d2                	xor    edx,edx
c001b7a7:	5b                   	pop    ebx
c001b7a8:	5e                   	pop    esi
c001b7a9:	c3                   	ret    

c001b7aa <sysSetDiskVolumeLabel(regs*)>:
c001b7aa:	56                   	push   esi
c001b7ab:	53                   	push   ebx
c001b7ac:	53                   	push   ebx
c001b7ad:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b7b1:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b7b4:	83 f8 19             	cmp    eax,0x19
c001b7b7:	77 29                	ja     c001b7e2 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b7b9:	8b 0c 85 e0 eb 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1420]
c001b7c0:	85 c9                	test   ecx,ecx
c001b7c2:	74 1e                	je     c001b7e2 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b7c4:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b7c7:	85 d2                	test   edx,edx
c001b7c9:	74 17                	je     c001b7e2 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b7cb:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b7d1:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b7d3:	52                   	push   edx
c001b7d4:	50                   	push   eax
c001b7d5:	51                   	push   ecx
c001b7d6:	53                   	push   ebx
c001b7d7:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b7da:	83 c4 10             	add    esp,0x10
c001b7dd:	99                   	cdq    
c001b7de:	59                   	pop    ecx
c001b7df:	5b                   	pop    ebx
c001b7e0:	5e                   	pop    esi
c001b7e1:	c3                   	ret    
c001b7e2:	59                   	pop    ecx
c001b7e3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b7e8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b7ed:	5b                   	pop    ebx
c001b7ee:	5e                   	pop    esi
c001b7ef:	c3                   	ret    

c001b7f0 <sysGetDiskVolumeLabel(regs*)>:
c001b7f0:	57                   	push   edi
c001b7f1:	56                   	push   esi
c001b7f2:	53                   	push   ebx
c001b7f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7f7:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b7fa:	83 fa 19             	cmp    edx,0x19
c001b7fd:	77 34                	ja     c001b833 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7ff:	8b 0c 95 e0 eb 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1420]
c001b806:	85 c9                	test   ecx,ecx
c001b808:	74 29                	je     c001b833 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b80a:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b80d:	85 db                	test   ebx,ebx
c001b80f:	74 22                	je     c001b833 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b811:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b814:	85 c0                	test   eax,eax
c001b816:	74 1b                	je     c001b833 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b818:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b81e:	83 ec 0c             	sub    esp,0xc
c001b821:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b823:	50                   	push   eax
c001b824:	53                   	push   ebx
c001b825:	52                   	push   edx
c001b826:	51                   	push   ecx
c001b827:	56                   	push   esi
c001b828:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b82b:	83 c4 20             	add    esp,0x20
c001b82e:	99                   	cdq    
c001b82f:	5b                   	pop    ebx
c001b830:	5e                   	pop    esi
c001b831:	5f                   	pop    edi
c001b832:	c3                   	ret    
c001b833:	5b                   	pop    ebx
c001b834:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b839:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b83e:	5e                   	pop    esi
c001b83f:	5f                   	pop    edi
c001b840:	c3                   	ret    

c001b841 <sysShutdown(regs*)>:
c001b841:	83 ec 0c             	sub    esp,0xc
c001b844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b848:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b84b:	85 c0                	test   eax,eax
c001b84d:	74 18                	je     c001b867 <sysShutdown(regs*)+0x26>
c001b84f:	83 f8 01             	cmp    eax,0x1
c001b852:	74 38                	je     c001b88c <sysShutdown(regs*)+0x4b>
c001b854:	83 f8 02             	cmp    eax,0x2
c001b857:	74 24                	je     c001b87d <sysShutdown(regs*)+0x3c>
c001b859:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b85e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b863:	83 c4 0c             	add    esp,0xc
c001b866:	c3                   	ret    
c001b867:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001b86c:	8b 10                	mov    edx,DWORD PTR [eax]
c001b86e:	6a 00                	push   0x0
c001b870:	6a 00                	push   0x0
c001b872:	6a 00                	push   0x0
c001b874:	50                   	push   eax
c001b875:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b878:	83 c4 10             	add    esp,0x10
c001b87b:	eb dc                	jmp    c001b859 <sysShutdown(regs*)+0x18>
c001b87d:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001b882:	8b 10                	mov    edx,DWORD PTR [eax]
c001b884:	6a 00                	push   0x0
c001b886:	6a 00                	push   0x0
c001b888:	6a 01                	push   0x1
c001b88a:	eb e8                	jmp    c001b874 <sysShutdown(regs*)+0x33>
c001b88c:	a1 80 0c 03 c0       	mov    eax,ds:0xc0030c80
c001b891:	85 c0                	test   eax,eax
c001b893:	74 02                	je     c001b897 <sysShutdown(regs*)+0x56>
c001b895:	ff d0                	call   eax
c001b897:	31 c0                	xor    eax,eax
c001b899:	31 d2                	xor    edx,edx
c001b89b:	83 c4 0c             	add    esp,0xc
c001b89e:	c3                   	ret    

c001b89f <sysCallRealpath(regs*)>:
c001b89f:	83 ec 0c             	sub    esp,0xc
c001b8a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8a6:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b8a9:	85 d2                	test   edx,edx
c001b8ab:	74 07                	je     c001b8b4 <sysCallRealpath(regs*)+0x15>
c001b8ad:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b8b0:	85 c0                	test   eax,eax
c001b8b2:	75 0b                	jne    c001b8bf <sysCallRealpath(regs*)+0x20>
c001b8b4:	b8 01 00 00 00       	mov    eax,0x1
c001b8b9:	31 d2                	xor    edx,edx
c001b8bb:	83 c4 0c             	add    esp,0xc
c001b8be:	c3                   	ret    
c001b8bf:	51                   	push   ecx
c001b8c0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b8c6:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b8c9:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b8cf:	51                   	push   ecx
c001b8d0:	52                   	push   edx
c001b8d1:	50                   	push   eax
c001b8d2:	e8 e5 79 ff ff       	call   c00132bc <Fs::standardiseFiles(char*, char const*, char const*)>
c001b8d7:	83 c4 10             	add    esp,0x10
c001b8da:	31 c0                	xor    eax,eax
c001b8dc:	31 d2                	xor    edx,edx
c001b8de:	83 c4 0c             	add    esp,0xc
c001b8e1:	c3                   	ret    

c001b8e2 <sysCallGetArgc(regs*)>:
c001b8e2:	83 ec 14             	sub    esp,0x14
c001b8e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8ea:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8ed:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b8f3:	68 74 bf 02 c0       	push   0xc002bf74
c001b8f8:	e8 0a 76 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001b8fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b902:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b905:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b90b:	83 c4 1c             	add    esp,0x1c
c001b90e:	99                   	cdq    
c001b90f:	c3                   	ret    

c001b910 <sysCallReadDir(regs*)>:
c001b910:	53                   	push   ebx
c001b911:	83 ec 18             	sub    esp,0x18
c001b914:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b918:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b91b:	83 f8 02             	cmp    eax,0x2
c001b91e:	76 53                	jbe    c001b973 <sysCallReadDir(regs*)+0x63>
c001b920:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b923:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b929:	77 4f                	ja     c001b97a <sysCallReadDir(regs*)+0x6a>
c001b92b:	83 ec 0c             	sub    esp,0xc
c001b92e:	50                   	push   eax
c001b92f:	e8 c1 60 ff ff       	call   c00119f5 <getFromFileDescriptor(int)>
c001b934:	83 c4 10             	add    esp,0x10
c001b937:	85 c0                	test   eax,eax
c001b939:	74 50                	je     c001b98b <sysCallReadDir(regs*)+0x7b>
c001b93b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b943:	83 ec 0c             	sub    esp,0xc
c001b946:	8b 10                	mov    edx,DWORD PTR [eax]
c001b948:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b94c:	51                   	push   ecx
c001b94d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b950:	6a 00                	push   0x0
c001b952:	68 10 01 00 00       	push   0x110
c001b957:	50                   	push   eax
c001b958:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b95b:	83 c4 20             	add    esp,0x20
c001b95e:	85 c0                	test   eax,eax
c001b960:	74 38                	je     c001b99a <sysCallReadDir(regs*)+0x8a>
c001b962:	83 f8 07             	cmp    eax,0x7
c001b965:	74 0c                	je     c001b973 <sysCallReadDir(regs*)+0x63>
c001b967:	b8 02 00 00 00       	mov    eax,0x2
c001b96c:	31 d2                	xor    edx,edx
c001b96e:	83 c4 18             	add    esp,0x18
c001b971:	5b                   	pop    ebx
c001b972:	c3                   	ret    
c001b973:	b8 01 00 00 00       	mov    eax,0x1
c001b978:	eb f2                	jmp    c001b96c <sysCallReadDir(regs*)+0x5c>
c001b97a:	83 ec 08             	sub    esp,0x8
c001b97d:	52                   	push   edx
c001b97e:	68 8c c0 02 c0       	push   0xc002c08c
c001b983:	e8 7f 75 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001b988:	83 c4 10             	add    esp,0x10
c001b98b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b990:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b995:	83 c4 18             	add    esp,0x18
c001b998:	5b                   	pop    ebx
c001b999:	c3                   	ret    
c001b99a:	31 c0                	xor    eax,eax
c001b99c:	eb ce                	jmp    c001b96c <sysCallReadDir(regs*)+0x5c>

c001b99e <sysCallIsATTY(regs*)>:
c001b99e:	83 ec 0c             	sub    esp,0xc
c001b9a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9a5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b9a8:	83 f8 02             	cmp    eax,0x2
c001b9ab:	76 07                	jbe    c001b9b4 <sysCallIsATTY(regs*)+0x16>
c001b9ad:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b9b2:	75 26                	jne    c001b9da <sysCallIsATTY(regs*)+0x3c>
c001b9b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9b9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b9bc:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b9c2:	85 c0                	test   eax,eax
c001b9c4:	74 24                	je     c001b9ea <sysCallIsATTY(regs*)+0x4c>
c001b9c6:	83 ec 0c             	sub    esp,0xc
c001b9c9:	8b 10                	mov    edx,DWORD PTR [eax]
c001b9cb:	50                   	push   eax
c001b9cc:	ff 12                	call   DWORD PTR [edx]
c001b9ce:	31 d2                	xor    edx,edx
c001b9d0:	0f b6 c0             	movzx  eax,al
c001b9d3:	83 c4 10             	add    esp,0x10
c001b9d6:	83 c4 0c             	add    esp,0xc
c001b9d9:	c3                   	ret    
c001b9da:	83 ec 0c             	sub    esp,0xc
c001b9dd:	50                   	push   eax
c001b9de:	e8 12 60 ff ff       	call   c00119f5 <getFromFileDescriptor(int)>
c001b9e3:	83 c4 10             	add    esp,0x10
c001b9e6:	85 c0                	test   eax,eax
c001b9e8:	75 dc                	jne    c001b9c6 <sysCallIsATTY(regs*)+0x28>
c001b9ea:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b9ef:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b9f4:	83 c4 0c             	add    esp,0xc
c001b9f7:	c3                   	ret    

c001b9f8 <sysCallSeek(regs*)>:
c001b9f8:	53                   	push   ebx
c001b9f9:	83 ec 08             	sub    esp,0x8
c001b9fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba00:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba03:	83 f8 02             	cmp    eax,0x2
c001ba06:	76 4a                	jbe    c001ba52 <sysCallSeek(regs*)+0x5a>
c001ba08:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba0d:	77 32                	ja     c001ba41 <sysCallSeek(regs*)+0x49>
c001ba0f:	83 ec 0c             	sub    esp,0xc
c001ba12:	50                   	push   eax
c001ba13:	e8 dd 5f ff ff       	call   c00119f5 <getFromFileDescriptor(int)>
c001ba18:	83 c4 0c             	add    esp,0xc
c001ba1b:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001ba1e:	31 db                	xor    ebx,ebx
c001ba20:	53                   	push   ebx
c001ba21:	51                   	push   ecx
c001ba22:	50                   	push   eax
c001ba23:	e8 60 7b ff ff       	call   c0013588 <File::seek(unsigned long long)>
c001ba28:	83 c4 10             	add    esp,0x10
c001ba2b:	85 c0                	test   eax,eax
c001ba2d:	0f 95 c0             	setne  al
c001ba30:	31 d2                	xor    edx,edx
c001ba32:	0f b6 c0             	movzx  eax,al
c001ba35:	f7 d8                	neg    eax
c001ba37:	83 d2 00             	adc    edx,0x0
c001ba3a:	83 c4 08             	add    esp,0x8
c001ba3d:	f7 da                	neg    edx
c001ba3f:	5b                   	pop    ebx
c001ba40:	c3                   	ret    
c001ba41:	83 ec 08             	sub    esp,0x8
c001ba44:	50                   	push   eax
c001ba45:	68 7f bf 02 c0       	push   0xc002bf7f
c001ba4a:	e8 b8 74 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001ba4f:	83 c4 10             	add    esp,0x10
c001ba52:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba57:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba5c:	83 c4 08             	add    esp,0x8
c001ba5f:	5b                   	pop    ebx
c001ba60:	c3                   	ret    

c001ba61 <sysCallTell(regs*)>:
c001ba61:	53                   	push   ebx
c001ba62:	83 ec 08             	sub    esp,0x8
c001ba65:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba69:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba6c:	83 f8 02             	cmp    eax,0x2
c001ba6f:	76 5e                	jbe    c001bacf <sysCallTell(regs*)+0x6e>
c001ba71:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba76:	77 2d                	ja     c001baa5 <sysCallTell(regs*)+0x44>
c001ba78:	83 ec 0c             	sub    esp,0xc
c001ba7b:	50                   	push   eax
c001ba7c:	e8 74 5f ff ff       	call   c00119f5 <getFromFileDescriptor(int)>
c001ba81:	5a                   	pop    edx
c001ba82:	59                   	pop    ecx
c001ba83:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001ba86:	50                   	push   eax
c001ba87:	e8 52 7b ff ff       	call   c00135de <File::tell(unsigned long long*)>
c001ba8c:	83 c4 10             	add    esp,0x10
c001ba8f:	85 c0                	test   eax,eax
c001ba91:	0f 95 c0             	setne  al
c001ba94:	31 d2                	xor    edx,edx
c001ba96:	0f b6 c0             	movzx  eax,al
c001ba99:	f7 d8                	neg    eax
c001ba9b:	83 d2 00             	adc    edx,0x0
c001ba9e:	83 c4 08             	add    esp,0x8
c001baa1:	f7 da                	neg    edx
c001baa3:	5b                   	pop    ebx
c001baa4:	c3                   	ret    
c001baa5:	83 ec 08             	sub    esp,0x8
c001baa8:	50                   	push   eax
c001baa9:	68 99 bf 02 c0       	push   0xc002bf99
c001baae:	e8 54 74 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001bab3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bab6:	83 c4 10             	add    esp,0x10
c001bab9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001babf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bac6:	31 d2                	xor    edx,edx
c001bac8:	31 c0                	xor    eax,eax
c001baca:	83 c4 08             	add    esp,0x8
c001bacd:	5b                   	pop    ebx
c001bace:	c3                   	ret    
c001bacf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bad4:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bad9:	83 c4 08             	add    esp,0x8
c001badc:	5b                   	pop    ebx
c001badd:	c3                   	ret    

c001bade <sysCallSize(regs*)>:
c001bade:	53                   	push   ebx
c001badf:	83 ec 18             	sub    esp,0x18
c001bae2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bae6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bae9:	83 f8 02             	cmp    eax,0x2
c001baec:	76 64                	jbe    c001bb52 <sysCallSize(regs*)+0x74>
c001baee:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001baf3:	77 33                	ja     c001bb28 <sysCallSize(regs*)+0x4a>
c001baf5:	83 ec 0c             	sub    esp,0xc
c001baf8:	50                   	push   eax
c001baf9:	e8 f7 5e ff ff       	call   c00119f5 <getFromFileDescriptor(int)>
c001bafe:	83 c4 0c             	add    esp,0xc
c001bb01:	8d 54 24 13          	lea    edx,[esp+0x13]
c001bb05:	52                   	push   edx
c001bb06:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bb09:	50                   	push   eax
c001bb0a:	e8 67 7c ff ff       	call   c0013776 <File::stat(unsigned long long*, bool*)>
c001bb0f:	83 c4 10             	add    esp,0x10
c001bb12:	85 c0                	test   eax,eax
c001bb14:	0f 95 c0             	setne  al
c001bb17:	31 d2                	xor    edx,edx
c001bb19:	0f b6 c0             	movzx  eax,al
c001bb1c:	f7 d8                	neg    eax
c001bb1e:	83 d2 00             	adc    edx,0x0
c001bb21:	83 c4 18             	add    esp,0x18
c001bb24:	f7 da                	neg    edx
c001bb26:	5b                   	pop    ebx
c001bb27:	c3                   	ret    
c001bb28:	83 ec 08             	sub    esp,0x8
c001bb2b:	50                   	push   eax
c001bb2c:	68 b3 bf 02 c0       	push   0xc002bfb3
c001bb31:	e8 d1 73 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001bb36:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bb39:	83 c4 10             	add    esp,0x10
c001bb3c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb42:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb49:	31 d2                	xor    edx,edx
c001bb4b:	31 c0                	xor    eax,eax
c001bb4d:	83 c4 18             	add    esp,0x18
c001bb50:	5b                   	pop    ebx
c001bb51:	c3                   	ret    
c001bb52:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb57:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb5c:	83 c4 18             	add    esp,0x18
c001bb5f:	5b                   	pop    ebx
c001bb60:	c3                   	ret    

c001bb61 <sysCallSizeFromFilename(regs*)>:
c001bb61:	57                   	push   edi
c001bb62:	56                   	push   esi
c001bb63:	53                   	push   ebx
c001bb64:	83 ec 20             	sub    esp,0x20
c001bb67:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bb6b:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001bb6e:	83 fb 02             	cmp    ebx,0x2
c001bb71:	0f 86 99 00 00 00    	jbe    c001bc10 <sysCallSizeFromFilename(regs*)+0xaf>
c001bb77:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001bb7d:	77 65                	ja     c001bbe4 <sysCallSizeFromFilename(regs*)+0x83>
c001bb7f:	83 ec 0c             	sub    esp,0xc
c001bb82:	68 14 01 00 00       	push   0x114
c001bb87:	e8 bf 3c ff ff       	call   c000f84b <malloc>
c001bb8c:	83 c4 0c             	add    esp,0xc
c001bb8f:	89 c6                	mov    esi,eax
c001bb91:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb96:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb99:	53                   	push   ebx
c001bb9a:	56                   	push   esi
c001bb9b:	e8 c6 78 ff ff       	call   c0013466 <File::File(char const*, Process*)>
c001bba0:	83 c4 0c             	add    esp,0xc
c001bba3:	8d 44 24 23          	lea    eax,[esp+0x23]
c001bba7:	50                   	push   eax
c001bba8:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bbab:	56                   	push   esi
c001bbac:	e8 c5 7b ff ff       	call   c0013776 <File::stat(unsigned long long*, bool*)>
c001bbb1:	83 c4 10             	add    esp,0x10
c001bbb4:	85 f6                	test   esi,esi
c001bbb6:	74 14                	je     c001bbcc <sysCallSizeFromFilename(regs*)+0x6b>
c001bbb8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bbbc:	8b 16                	mov    edx,DWORD PTR [esi]
c001bbbe:	83 ec 0c             	sub    esp,0xc
c001bbc1:	56                   	push   esi
c001bbc2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bbc5:	83 c4 10             	add    esp,0x10
c001bbc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bbcc:	85 c0                	test   eax,eax
c001bbce:	0f 95 c0             	setne  al
c001bbd1:	31 d2                	xor    edx,edx
c001bbd3:	0f b6 c0             	movzx  eax,al
c001bbd6:	f7 d8                	neg    eax
c001bbd8:	83 d2 00             	adc    edx,0x0
c001bbdb:	83 c4 20             	add    esp,0x20
c001bbde:	f7 da                	neg    edx
c001bbe0:	5b                   	pop    ebx
c001bbe1:	5e                   	pop    esi
c001bbe2:	5f                   	pop    edi
c001bbe3:	c3                   	ret    
c001bbe4:	83 ec 08             	sub    esp,0x8
c001bbe7:	53                   	push   ebx
c001bbe8:	68 b3 bf 02 c0       	push   0xc002bfb3
c001bbed:	e8 15 73 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001bbf2:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bbf5:	83 c4 10             	add    esp,0x10
c001bbf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bbfe:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bc05:	31 d2                	xor    edx,edx
c001bc07:	83 c4 20             	add    esp,0x20
c001bc0a:	31 c0                	xor    eax,eax
c001bc0c:	5b                   	pop    ebx
c001bc0d:	5e                   	pop    esi
c001bc0e:	5f                   	pop    edi
c001bc0f:	c3                   	ret    
c001bc10:	83 c4 20             	add    esp,0x20
c001bc13:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc18:	5b                   	pop    ebx
c001bc19:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc1e:	5e                   	pop    esi
c001bc1f:	5f                   	pop    edi
c001bc20:	c3                   	ret    

c001bc21 <sysCallClose(regs*)>:
c001bc21:	53                   	push   ebx
c001bc22:	83 ec 08             	sub    esp,0x8
c001bc25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc29:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bc2c:	83 f8 02             	cmp    eax,0x2
c001bc2f:	76 50                	jbe    c001bc81 <sysCallClose(regs*)+0x60>
c001bc31:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bc36:	74 58                	je     c001bc90 <sysCallClose(regs*)+0x6f>
c001bc38:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bc3d:	74 60                	je     c001bc9f <sysCallClose(regs*)+0x7e>
c001bc3f:	77 2f                	ja     c001bc70 <sysCallClose(regs*)+0x4f>
c001bc41:	83 ec 0c             	sub    esp,0xc
c001bc44:	50                   	push   eax
c001bc45:	e8 ab 5d ff ff       	call   c00119f5 <getFromFileDescriptor(int)>
c001bc4a:	89 c3                	mov    ebx,eax
c001bc4c:	89 04 24             	mov    DWORD PTR [esp],eax
c001bc4f:	e8 d4 78 ff ff       	call   c0013528 <File::close()>
c001bc54:	83 c4 10             	add    esp,0x10
c001bc57:	85 db                	test   ebx,ebx
c001bc59:	74 0c                	je     c001bc67 <sysCallClose(regs*)+0x46>
c001bc5b:	83 ec 0c             	sub    esp,0xc
c001bc5e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc60:	53                   	push   ebx
c001bc61:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bc64:	83 c4 10             	add    esp,0x10
c001bc67:	31 c0                	xor    eax,eax
c001bc69:	31 d2                	xor    edx,edx
c001bc6b:	83 c4 08             	add    esp,0x8
c001bc6e:	5b                   	pop    ebx
c001bc6f:	c3                   	ret    
c001bc70:	83 ec 08             	sub    esp,0x8
c001bc73:	50                   	push   eax
c001bc74:	68 b0 c0 02 c0       	push   0xc002c0b0
c001bc79:	e8 89 72 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001bc7e:	83 c4 10             	add    esp,0x10
c001bc81:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc86:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc8b:	83 c4 08             	add    esp,0x8
c001bc8e:	5b                   	pop    ebx
c001bc8f:	c3                   	ret    
c001bc90:	83 ec 0c             	sub    esp,0xc
c001bc93:	68 ce bf 02 c0       	push   0xc002bfce
c001bc98:	e8 6a 72 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001bc9d:	eb c5                	jmp    c001bc64 <sysCallClose(regs*)+0x43>
c001bc9f:	83 ec 0c             	sub    esp,0xc
c001bca2:	68 dc bf 02 c0       	push   0xc002bfdc
c001bca7:	eb ef                	jmp    c001bc98 <sysCallClose(regs*)+0x77>

c001bca9 <sysCallOpenDir(regs*)>:
c001bca9:	56                   	push   esi
c001bcaa:	53                   	push   ebx
c001bcab:	53                   	push   ebx
c001bcac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bcb0:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bcb3:	85 f6                	test   esi,esi
c001bcb5:	74 59                	je     c001bd10 <sysCallOpenDir(regs*)+0x67>
c001bcb7:	83 ec 0c             	sub    esp,0xc
c001bcba:	68 14 01 00 00       	push   0x114
c001bcbf:	e8 87 3b ff ff       	call   c000f84b <malloc>
c001bcc4:	83 c4 0c             	add    esp,0xc
c001bcc7:	89 c6                	mov    esi,eax
c001bcc9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bcce:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bcd1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bcd4:	56                   	push   esi
c001bcd5:	e8 38 7c ff ff       	call   c0013912 <Directory::Directory(char const*, Process*)>
c001bcda:	83 c4 10             	add    esp,0x10
c001bcdd:	85 f6                	test   esi,esi
c001bcdf:	74 2f                	je     c001bd10 <sysCallOpenDir(regs*)+0x67>
c001bce1:	83 ec 0c             	sub    esp,0xc
c001bce4:	56                   	push   esi
c001bce5:	e8 8c 7c ff ff       	call   c0013976 <Directory::open()>
c001bcea:	83 c4 10             	add    esp,0x10
c001bced:	85 c0                	test   eax,eax
c001bcef:	75 1f                	jne    c001bd10 <sysCallOpenDir(regs*)+0x67>
c001bcf1:	83 ec 0c             	sub    esp,0xc
c001bcf4:	56                   	push   esi
c001bcf5:	e8 06 5a ff ff       	call   c0011700 <UnixFile::getFileDescriptor()>
c001bcfa:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bcfd:	83 c4 10             	add    esp,0x10
c001bd00:	89 02                	mov    DWORD PTR [edx],eax
c001bd02:	c1 f8 1f             	sar    eax,0x1f
c001bd05:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bd08:	31 c0                	xor    eax,eax
c001bd0a:	59                   	pop    ecx
c001bd0b:	31 d2                	xor    edx,edx
c001bd0d:	5b                   	pop    ebx
c001bd0e:	5e                   	pop    esi
c001bd0f:	c3                   	ret    
c001bd10:	59                   	pop    ecx
c001bd11:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd16:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd1b:	5b                   	pop    ebx
c001bd1c:	5e                   	pop    esi
c001bd1d:	c3                   	ret    

c001bd1e <sysCallCloseDir(regs*)>:
c001bd1e:	53                   	push   ebx
c001bd1f:	83 ec 08             	sub    esp,0x8
c001bd22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd26:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bd29:	83 f8 02             	cmp    eax,0x2
c001bd2c:	76 47                	jbe    c001bd75 <sysCallCloseDir(regs*)+0x57>
c001bd2e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bd33:	77 2f                	ja     c001bd64 <sysCallCloseDir(regs*)+0x46>
c001bd35:	83 ec 0c             	sub    esp,0xc
c001bd38:	50                   	push   eax
c001bd39:	e8 b7 5c ff ff       	call   c00119f5 <getFromFileDescriptor(int)>
c001bd3e:	89 c3                	mov    ebx,eax
c001bd40:	89 04 24             	mov    DWORD PTR [esp],eax
c001bd43:	e8 8a 7c ff ff       	call   c00139d2 <Directory::close()>
c001bd48:	83 c4 10             	add    esp,0x10
c001bd4b:	85 db                	test   ebx,ebx
c001bd4d:	74 0c                	je     c001bd5b <sysCallCloseDir(regs*)+0x3d>
c001bd4f:	83 ec 0c             	sub    esp,0xc
c001bd52:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd54:	53                   	push   ebx
c001bd55:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bd58:	83 c4 10             	add    esp,0x10
c001bd5b:	31 c0                	xor    eax,eax
c001bd5d:	31 d2                	xor    edx,edx
c001bd5f:	83 c4 08             	add    esp,0x8
c001bd62:	5b                   	pop    ebx
c001bd63:	c3                   	ret    
c001bd64:	83 ec 08             	sub    esp,0x8
c001bd67:	50                   	push   eax
c001bd68:	68 d8 c0 02 c0       	push   0xc002c0d8
c001bd6d:	e8 95 71 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001bd72:	83 c4 10             	add    esp,0x10
c001bd75:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd7a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd7f:	83 c4 08             	add    esp,0x8
c001bd82:	5b                   	pop    ebx
c001bd83:	c3                   	ret    

c001bd84 <sysCallMakeDir(regs*)>:
c001bd84:	56                   	push   esi
c001bd85:	53                   	push   ebx
c001bd86:	83 ec 10             	sub    esp,0x10
c001bd89:	68 14 01 00 00       	push   0x114
c001bd8e:	e8 b8 3a ff ff       	call   c000f84b <malloc>
c001bd93:	83 c4 0c             	add    esp,0xc
c001bd96:	89 c3                	mov    ebx,eax
c001bd98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd9d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bda0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bda4:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bda7:	53                   	push   ebx
c001bda8:	e8 65 7b ff ff       	call   c0013912 <Directory::Directory(char const*, Process*)>
c001bdad:	83 c4 10             	add    esp,0x10
c001bdb0:	85 db                	test   ebx,ebx
c001bdb2:	74 32                	je     c001bde6 <sysCallMakeDir(regs*)+0x62>
c001bdb4:	83 ec 0c             	sub    esp,0xc
c001bdb7:	53                   	push   ebx
c001bdb8:	e8 99 7d ff ff       	call   c0013b56 <Directory::create()>
c001bdbd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bdc0:	89 c6                	mov    esi,eax
c001bdc2:	e8 0b 7c ff ff       	call   c00139d2 <Directory::close()>
c001bdc7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bdc9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bdcc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bdcf:	83 c4 10             	add    esp,0x10
c001bdd2:	31 c0                	xor    eax,eax
c001bdd4:	59                   	pop    ecx
c001bdd5:	85 f6                	test   esi,esi
c001bdd7:	5b                   	pop    ebx
c001bdd8:	0f 95 c0             	setne  al
c001bddb:	5e                   	pop    esi
c001bddc:	31 d2                	xor    edx,edx
c001bdde:	f7 d8                	neg    eax
c001bde0:	83 d2 00             	adc    edx,0x0
c001bde3:	f7 da                	neg    edx
c001bde5:	c3                   	ret    
c001bde6:	59                   	pop    ecx
c001bde7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bdec:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bdf1:	5b                   	pop    ebx
c001bdf2:	5e                   	pop    esi
c001bdf3:	c3                   	ret    

c001bdf4 <sysCallWait(regs*)>:
c001bdf4:	83 ec 10             	sub    esp,0x10
c001bdf7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bdfb:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001bdfe:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001be01:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001be04:	e8 08 25 00 00       	call   c001e311 <waitTask(int, int*, int)>
c001be09:	83 c4 1c             	add    esp,0x1c
c001be0c:	99                   	cdq    
c001be0d:	c3                   	ret    

c001be0e <sysCallNotImpl(regs*)>:
c001be0e:	83 ec 18             	sub    esp,0x18
c001be11:	68 ea bf 02 c0       	push   0xc002bfea
c001be16:	e8 2a e8 ff ff       	call   c001a645 <Krnl::panic(char const*)>
c001be1b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be20:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be25:	83 c4 1c             	add    esp,0x1c
c001be28:	c3                   	ret    

c001be29 <sysPanic(regs*)>:
c001be29:	83 ec 18             	sub    esp,0x18
c001be2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001be30:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001be33:	e8 0d e8 ff ff       	call   c001a645 <Krnl::panic(char const*)>
c001be38:	c7 04 24 04 c0 02 c0 	mov    DWORD PTR [esp],0xc002c004
c001be3f:	e8 01 e8 ff ff       	call   c001a645 <Krnl::panic(char const*)>
c001be44:	b8 01 00 00 00       	mov    eax,0x1
c001be49:	31 d2                	xor    edx,edx
c001be4b:	83 c4 1c             	add    esp,0x1c
c001be4e:	c3                   	ret    

c001be4f <sysCallRmdir(regs*)>:
c001be4f:	56                   	push   esi
c001be50:	53                   	push   ebx
c001be51:	83 ec 20             	sub    esp,0x20
c001be54:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001be58:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001be5b:	68 14 01 00 00       	push   0x114
c001be60:	e8 e6 39 ff ff       	call   c000f84b <malloc>
c001be65:	83 c4 0c             	add    esp,0xc
c001be68:	89 c3                	mov    ebx,eax
c001be6a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be6f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be72:	56                   	push   esi
c001be73:	53                   	push   ebx
c001be74:	e8 ed 75 ff ff       	call   c0013466 <File::File(char const*, Process*)>
c001be79:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be7c:	e8 c1 77 ff ff       	call   c0013642 <File::unlink()>
c001be81:	83 c4 10             	add    esp,0x10
c001be84:	85 db                	test   ebx,ebx
c001be86:	74 14                	je     c001be9c <sysCallRmdir(regs*)+0x4d>
c001be88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be8c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001be8e:	83 ec 0c             	sub    esp,0xc
c001be91:	53                   	push   ebx
c001be92:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001be95:	83 c4 10             	add    esp,0x10
c001be98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be9c:	85 c0                	test   eax,eax
c001be9e:	0f 95 c0             	setne  al
c001bea1:	31 d2                	xor    edx,edx
c001bea3:	0f b6 c0             	movzx  eax,al
c001bea6:	f7 d8                	neg    eax
c001bea8:	83 d2 00             	adc    edx,0x0
c001beab:	83 c4 14             	add    esp,0x14
c001beae:	f7 da                	neg    edx
c001beb0:	5b                   	pop    ebx
c001beb1:	5e                   	pop    esi
c001beb2:	c3                   	ret    

c001beb3 <sysCallUnlink(regs*)>:
c001beb3:	56                   	push   esi
c001beb4:	53                   	push   ebx
c001beb5:	83 ec 20             	sub    esp,0x20
c001beb8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bebc:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bebf:	68 14 01 00 00       	push   0x114
c001bec4:	e8 82 39 ff ff       	call   c000f84b <malloc>
c001bec9:	83 c4 0c             	add    esp,0xc
c001becc:	89 c3                	mov    ebx,eax
c001bece:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bed3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bed6:	56                   	push   esi
c001bed7:	53                   	push   ebx
c001bed8:	e8 89 75 ff ff       	call   c0013466 <File::File(char const*, Process*)>
c001bedd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bee0:	e8 5d 77 ff ff       	call   c0013642 <File::unlink()>
c001bee5:	83 c4 10             	add    esp,0x10
c001bee8:	85 db                	test   ebx,ebx
c001beea:	74 14                	je     c001bf00 <sysCallUnlink(regs*)+0x4d>
c001beec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bef0:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bef2:	83 ec 0c             	sub    esp,0xc
c001bef5:	53                   	push   ebx
c001bef6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bef9:	83 c4 10             	add    esp,0x10
c001befc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bf00:	85 c0                	test   eax,eax
c001bf02:	0f 95 c0             	setne  al
c001bf05:	31 d2                	xor    edx,edx
c001bf07:	0f b6 c0             	movzx  eax,al
c001bf0a:	f7 d8                	neg    eax
c001bf0c:	83 d2 00             	adc    edx,0x0
c001bf0f:	83 c4 14             	add    esp,0x14
c001bf12:	f7 da                	neg    edx
c001bf14:	5b                   	pop    ebx
c001bf15:	5e                   	pop    esi
c001bf16:	c3                   	ret    

c001bf17 <sysCallGetArgv(regs*)>:
c001bf17:	83 ec 0c             	sub    esp,0xc
c001bf1a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bf1e:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bf21:	85 c0                	test   eax,eax
c001bf23:	78 2b                	js     c001bf50 <sysCallGetArgv(regs*)+0x39>
c001bf25:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bf2b:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bf2e:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001bf34:	7d 1a                	jge    c001bf50 <sysCallGetArgv(regs*)+0x39>
c001bf36:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001bf3d:	85 c0                	test   eax,eax
c001bf3f:	74 17                	je     c001bf58 <sysCallGetArgv(regs*)+0x41>
c001bf41:	83 ec 08             	sub    esp,0x8
c001bf44:	50                   	push   eax
c001bf45:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bf48:	e8 ef 48 fe ff       	call   c000083c <strcpy>
c001bf4d:	83 c4 10             	add    esp,0x10
c001bf50:	31 c0                	xor    eax,eax
c001bf52:	31 d2                	xor    edx,edx
c001bf54:	83 c4 0c             	add    esp,0xc
c001bf57:	c3                   	ret    
c001bf58:	b8 01 00 00 00       	mov    eax,0x1
c001bf5d:	31 d2                	xor    edx,edx
c001bf5f:	83 c4 0c             	add    esp,0xc
c001bf62:	c3                   	ret    

c001bf63 <sysCallTTYName(regs*)>:
c001bf63:	56                   	push   esi
c001bf64:	53                   	push   ebx
c001bf65:	53                   	push   ebx
c001bf66:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bf6a:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bf6d:	85 c0                	test   eax,eax
c001bf6f:	74 5f                	je     c001bfd0 <sysCallTTYName(regs*)+0x6d>
c001bf71:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bf74:	83 f8 02             	cmp    eax,0x2
c001bf77:	77 3e                	ja     c001bfb7 <sysCallTTYName(regs*)+0x54>
c001bf79:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf7e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bf81:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001bf87:	85 db                	test   ebx,ebx
c001bf89:	74 45                	je     c001bfd0 <sysCallTTYName(regs*)+0x6d>
c001bf8b:	83 ec 0c             	sub    esp,0xc
c001bf8e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bf90:	53                   	push   ebx
c001bf91:	ff 10                	call   DWORD PTR [eax]
c001bf93:	83 c4 10             	add    esp,0x10
c001bf96:	84 c0                	test   al,al
c001bf98:	74 41                	je     c001bfdb <sysCallTTYName(regs*)+0x78>
c001bf9a:	83 ec 08             	sub    esp,0x8
c001bf9d:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001bfa3:	53                   	push   ebx
c001bfa4:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bfa7:	e8 90 48 fe ff       	call   c000083c <strcpy>
c001bfac:	83 c4 10             	add    esp,0x10
c001bfaf:	31 c0                	xor    eax,eax
c001bfb1:	59                   	pop    ecx
c001bfb2:	31 d2                	xor    edx,edx
c001bfb4:	5b                   	pop    ebx
c001bfb5:	5e                   	pop    esi
c001bfb6:	c3                   	ret    
c001bfb7:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bfbc:	74 bb                	je     c001bf79 <sysCallTTYName(regs*)+0x16>
c001bfbe:	83 ec 0c             	sub    esp,0xc
c001bfc1:	50                   	push   eax
c001bfc2:	e8 2e 5a ff ff       	call   c00119f5 <getFromFileDescriptor(int)>
c001bfc7:	83 c4 10             	add    esp,0x10
c001bfca:	89 c3                	mov    ebx,eax
c001bfcc:	85 db                	test   ebx,ebx
c001bfce:	75 bb                	jne    c001bf8b <sysCallTTYName(regs*)+0x28>
c001bfd0:	59                   	pop    ecx
c001bfd1:	b8 01 00 00 00       	mov    eax,0x1
c001bfd6:	31 d2                	xor    edx,edx
c001bfd8:	5b                   	pop    ebx
c001bfd9:	5e                   	pop    esi
c001bfda:	c3                   	ret    
c001bfdb:	59                   	pop    ecx
c001bfdc:	b8 02 00 00 00       	mov    eax,0x2
c001bfe1:	31 d2                	xor    edx,edx
c001bfe3:	5b                   	pop    ebx
c001bfe4:	5e                   	pop    esi
c001bfe5:	c3                   	ret    

c001bfe6 <sysCallUSleep(regs*)>:
c001bfe6:	83 ec 14             	sub    esp,0x14
c001bfe9:	b8 e8 03 00 00       	mov    eax,0x3e8
c001bfee:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bff2:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001bff9:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001bffc:	01 ca                	add    edx,ecx
c001bffe:	52                   	push   edx
c001bfff:	50                   	push   eax
c001c000:	e8 a5 23 00 00       	call   c001e3aa <nanoSleep(unsigned long long)>
c001c005:	31 c0                	xor    eax,eax
c001c007:	31 d2                	xor    edx,edx
c001c009:	83 c4 1c             	add    esp,0x1c
c001c00c:	c3                   	ret    

c001c00d <sysCallSpawn(regs*)>:
c001c00d:	56                   	push   esi
c001c00e:	53                   	push   ebx
c001c00f:	53                   	push   ebx
c001c010:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c014:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001c017:	85 f6                	test   esi,esi
c001c019:	75 08                	jne    c001c023 <sysCallSpawn(regs*)+0x16>
c001c01b:	59                   	pop    ecx
c001c01c:	31 c0                	xor    eax,eax
c001c01e:	31 d2                	xor    edx,edx
c001c020:	5b                   	pop    ebx
c001c021:	5e                   	pop    esi
c001c022:	c3                   	ret    
c001c023:	83 ec 0c             	sub    esp,0xc
c001c026:	68 3f 07 00 00       	push   0x73f
c001c02b:	e8 1b 38 ff ff       	call   c000f84b <malloc>
c001c030:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001c033:	89 c6                	mov    esi,eax
c001c035:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c03a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c03d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c040:	56                   	push   esi
c001c041:	e8 2a 1a 00 00       	call   c001da70 <Process::Process(char const*, Process*, char**)>
c001c046:	83 c4 20             	add    esp,0x20
c001c049:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c050:	75 c9                	jne    c001c01b <sysCallSpawn(regs*)+0xe>
c001c052:	83 ec 0c             	sub    esp,0xc
c001c055:	56                   	push   esi
c001c056:	e8 fd 1f 00 00       	call   c001e058 <Process::createUserThread()>
c001c05b:	8b 06                	mov    eax,DWORD PTR [esi]
c001c05d:	83 c4 10             	add    esp,0x10
c001c060:	99                   	cdq    
c001c061:	59                   	pop    ecx
c001c062:	5b                   	pop    ebx
c001c063:	5e                   	pop    esi
c001c064:	c3                   	ret    

c001c065 <sysCallGetEnv(regs*)>:
c001c065:	55                   	push   ebp
c001c066:	57                   	push   edi
c001c067:	56                   	push   esi
c001c068:	53                   	push   ebx
c001c069:	83 ec 28             	sub    esp,0x28
c001c06c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c070:	68 13 c0 02 c0       	push   0xc002c013
c001c075:	e8 8d 6e ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001c07a:	5f                   	pop    edi
c001c07b:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c07e:	5d                   	pop    ebp
c001c07f:	53                   	push   ebx
c001c080:	68 42 c3 02 c0       	push   0xc002c342
c001c085:	e8 7d 6e ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001c08a:	58                   	pop    eax
c001c08b:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c08e:	5a                   	pop    edx
c001c08f:	57                   	push   edi
c001c090:	68 1c c0 02 c0       	push   0xc002c01c
c001c095:	e8 6d 6e ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001c09a:	59                   	pop    ecx
c001c09b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0a0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c0a3:	e8 b9 e4 ff ff       	call   c001a561 <Krnl::getProcessTotalEnvCount(Process*)>
c001c0a8:	5a                   	pop    edx
c001c0a9:	89 c5                	mov    ebp,eax
c001c0ab:	59                   	pop    ecx
c001c0ac:	50                   	push   eax
c001c0ad:	68 26 c0 02 c0       	push   0xc002c026
c001c0b2:	e8 50 6e ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001c0b7:	83 c4 10             	add    esp,0x10
c001c0ba:	39 ef                	cmp    edi,ebp
c001c0bc:	7c 15                	jl     c001c0d3 <sysCallGetEnv(regs*)+0x6e>
c001c0be:	85 db                	test   ebx,ebx
c001c0c0:	75 0c                	jne    c001c0ce <sysCallGetEnv(regs*)+0x69>
c001c0c2:	83 c4 1c             	add    esp,0x1c
c001c0c5:	31 c0                	xor    eax,eax
c001c0c7:	5b                   	pop    ebx
c001c0c8:	31 d2                	xor    edx,edx
c001c0ca:	5e                   	pop    esi
c001c0cb:	5f                   	pop    edi
c001c0cc:	5d                   	pop    ebp
c001c0cd:	c3                   	ret    
c001c0ce:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c0d1:	eb ef                	jmp    c001c0c2 <sysCallGetEnv(regs*)+0x5d>
c001c0d3:	83 ec 0c             	sub    esp,0xc
c001c0d6:	68 32 c0 02 c0       	push   0xc002c032
c001c0db:	e8 27 6e ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001c0e0:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c0e4:	83 c4 0c             	add    esp,0xc
c001c0e7:	57                   	push   edi
c001c0e8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c0ee:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c0f1:	50                   	push   eax
c001c0f2:	e8 8a e4 ff ff       	call   c001a581 <Krnl::getProcessEnvPair(Process*, int)>
c001c0f7:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c0fb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c0ff:	68 c1 c3 02 c0       	push   0xc002c3c1
c001c104:	e8 fe 6d ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001c109:	83 c4 10             	add    esp,0x10
c001c10c:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c10f:	85 f6                	test   esi,esi
c001c111:	75 47                	jne    c001c15a <sysCallGetEnv(regs*)+0xf5>
c001c113:	83 ec 0c             	sub    esp,0xc
c001c116:	55                   	push   ebp
c001c117:	e8 80 46 fe ff       	call   c000079c <strlen>
c001c11c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c11f:	89 c3                	mov    ebx,eax
c001c121:	e8 76 46 fe ff       	call   c000079c <strlen>
c001c126:	5a                   	pop    edx
c001c127:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c12b:	59                   	pop    ecx
c001c12c:	50                   	push   eax
c001c12d:	68 35 c0 02 c0       	push   0xc002c035
c001c132:	e8 d0 6d ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001c137:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c13a:	e8 5d 46 fe ff       	call   c000079c <strlen>
c001c13f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c142:	89 c3                	mov    ebx,eax
c001c144:	e8 53 46 fe ff       	call   c000079c <strlen>
c001c149:	83 c4 10             	add    esp,0x10
c001c14c:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c150:	83 c4 1c             	add    esp,0x1c
c001c153:	31 d2                	xor    edx,edx
c001c155:	5b                   	pop    ebx
c001c156:	5e                   	pop    esi
c001c157:	5f                   	pop    edi
c001c158:	5d                   	pop    ebp
c001c159:	c3                   	ret    
c001c15a:	83 ec 0c             	sub    esp,0xc
c001c15d:	68 db c3 02 c0       	push   0xc002c3db
c001c162:	e8 a0 6d ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001c167:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c16a:	58                   	pop    eax
c001c16b:	5a                   	pop    edx
c001c16c:	55                   	push   ebp
c001c16d:	53                   	push   ebx
c001c16e:	e8 c9 46 fe ff       	call   c000083c <strcpy>
c001c173:	59                   	pop    ecx
c001c174:	5e                   	pop    esi
c001c175:	68 3f c0 02 c0       	push   0xc002c03f
c001c17a:	53                   	push   ebx
c001c17b:	e8 fc 47 fe ff       	call   c000097c <strcat>
c001c180:	5d                   	pop    ebp
c001c181:	58                   	pop    eax
c001c182:	57                   	push   edi
c001c183:	53                   	push   ebx
c001c184:	e8 f3 47 fe ff       	call   c000097c <strcat>
c001c189:	c7 04 24 f5 c3 02 c0 	mov    DWORD PTR [esp],0xc002c3f5
c001c190:	e8 72 6d ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001c195:	83 c4 10             	add    esp,0x10
c001c198:	e9 25 ff ff ff       	jmp    c001c0c2 <sysCallGetEnv(regs*)+0x5d>

c001c19d <sysAppSettings(regs*)>:
c001c19d:	53                   	push   ebx
c001c19e:	83 ec 08             	sub    esp,0x8
c001c1a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1a5:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c1a8:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001c1ae:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c1b3:	66 3d c0 09          	cmp    ax,0x9c0
c001c1b7:	75 2f                	jne    c001c1e8 <sysAppSettings(regs*)+0x4b>
c001c1b9:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001c1bf:	83 e0 1f             	and    eax,0x1f
c001c1c2:	3c 01                	cmp    al,0x1
c001c1c4:	74 2e                	je     c001c1f4 <sysAppSettings(regs*)+0x57>
c001c1c6:	3c 07                	cmp    al,0x7
c001c1c8:	0f 84 bd 00 00 00    	je     c001c28b <sysAppSettings(regs*)+0xee>
c001c1ce:	84 c0                	test   al,al
c001c1d0:	0f 84 dc 00 00 00    	je     c001c2b2 <sysAppSettings(regs*)+0x115>
c001c1d6:	3c 08                	cmp    al,0x8
c001c1d8:	74 6d                	je     c001c247 <sysAppSettings(regs*)+0xaa>
c001c1da:	0f b6 c0             	movzx  eax,al
c001c1dd:	83 c4 08             	add    esp,0x8
c001c1e0:	05 e8 03 00 00       	add    eax,0x3e8
c001c1e5:	5b                   	pop    ebx
c001c1e6:	99                   	cdq    
c001c1e7:	c3                   	ret    
c001c1e8:	b8 01 00 00 00       	mov    eax,0x1
c001c1ed:	31 d2                	xor    edx,edx
c001c1ef:	83 c4 08             	add    esp,0x8
c001c1f2:	5b                   	pop    ebx
c001c1f3:	c3                   	ret    
c001c1f4:	51                   	push   ecx
c001c1f5:	68 00 01 00 00       	push   0x100
c001c1fa:	6a 00                	push   0x0
c001c1fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c201:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c204:	83 c0 0c             	add    eax,0xc
c001c207:	50                   	push   eax
c001c208:	e8 73 45 fe ff       	call   c0000780 <memset>
c001c20d:	83 c4 0c             	add    esp,0xc
c001c210:	68 ff 00 00 00       	push   0xff
c001c215:	53                   	push   ebx
c001c216:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c21b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c21e:	83 c0 0c             	add    eax,0xc
c001c221:	50                   	push   eax
c001c222:	e8 25 45 fe ff       	call   c000074c <memcpy>
c001c227:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c22c:	5b                   	pop    ebx
c001c22d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c230:	5a                   	pop    edx
c001c231:	8d 50 0c             	lea    edx,[eax+0xc]
c001c234:	52                   	push   edx
c001c235:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c23b:	e8 30 49 ff ff       	call   c0010b70 <VgaText::setTitle(char*)>
c001c240:	83 c4 10             	add    esp,0x10
c001c243:	31 c0                	xor    eax,eax
c001c245:	eb a6                	jmp    c001c1ed <sysAppSettings(regs*)+0x50>
c001c247:	83 ec 08             	sub    esp,0x8
c001c24a:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c250:	83 e0 0f             	and    eax,0xf
c001c253:	50                   	push   eax
c001c254:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c259:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c25c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c262:	e8 f9 48 ff ff       	call   c0010b60 <VgaText::setTitleColour(VgaColour)>
c001c267:	58                   	pop    eax
c001c268:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c26e:	5a                   	pop    edx
c001c26f:	c1 e8 04             	shr    eax,0x4
c001c272:	83 e0 0f             	and    eax,0xf
c001c275:	50                   	push   eax
c001c276:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c27b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c27e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c284:	e8 c7 48 ff ff       	call   c0010b50 <VgaText::setTitleTextColour(VgaColour)>
c001c289:	eb b5                	jmp    c001c240 <sysAppSettings(regs*)+0xa3>
c001c28b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c290:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c293:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c299:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c29f:	c0 e8 06             	shr    al,0x6
c001c2a2:	83 e0 01             	and    eax,0x1
c001c2a5:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001c2ab:	31 c0                	xor    eax,eax
c001c2ad:	e9 3b ff ff ff       	jmp    c001c1ed <sysAppSettings(regs*)+0x50>
c001c2b2:	b8 02 00 00 00       	mov    eax,0x2
c001c2b7:	e9 31 ff ff ff       	jmp    c001c1ed <sysAppSettings(regs*)+0x50>

c001c2bc <sysSetFatAttrib(regs*)>:
c001c2bc:	57                   	push   edi
c001c2bd:	56                   	push   esi
c001c2be:	53                   	push   ebx
c001c2bf:	83 ec 1c             	sub    esp,0x1c
c001c2c2:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c2c6:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c2c9:	68 14 01 00 00       	push   0x114
c001c2ce:	e8 78 35 ff ff       	call   c000f84b <malloc>
c001c2d3:	83 c4 0c             	add    esp,0xc
c001c2d6:	89 c3                	mov    ebx,eax
c001c2d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2dd:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c2e0:	57                   	push   edi
c001c2e1:	53                   	push   ebx
c001c2e2:	e8 7f 71 ff ff       	call   c0013466 <File::File(char const*, Process*)>
c001c2e7:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c2ea:	83 c4 0c             	add    esp,0xc
c001c2ed:	0f b6 d4             	movzx  edx,ah
c001c2f0:	0f b6 c0             	movzx  eax,al
c001c2f3:	52                   	push   edx
c001c2f4:	50                   	push   eax
c001c2f5:	53                   	push   ebx
c001c2f6:	e8 e1 73 ff ff       	call   c00136dc <File::chfatattr(unsigned char, unsigned char)>
c001c2fb:	83 c4 10             	add    esp,0x10
c001c2fe:	85 db                	test   ebx,ebx
c001c300:	74 14                	je     c001c316 <sysSetFatAttrib(regs*)+0x5a>
c001c302:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c306:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c308:	83 ec 0c             	sub    esp,0xc
c001c30b:	53                   	push   ebx
c001c30c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c30f:	83 c4 10             	add    esp,0x10
c001c312:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c316:	85 c0                	test   eax,eax
c001c318:	0f 95 c0             	setne  al
c001c31b:	31 d2                	xor    edx,edx
c001c31d:	0f b6 c0             	movzx  eax,al
c001c320:	f7 d8                	neg    eax
c001c322:	83 d2 00             	adc    edx,0x0
c001c325:	83 c4 10             	add    esp,0x10
c001c328:	f7 da                	neg    edx
c001c32a:	5b                   	pop    ebx
c001c32b:	5e                   	pop    esi
c001c32c:	5f                   	pop    edi
c001c32d:	c3                   	ret    

c001c32e <sysPipe(regs*)>:
c001c32e:	57                   	push   edi
c001c32f:	56                   	push   esi
c001c330:	53                   	push   ebx
c001c331:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c335:	83 ec 0c             	sub    esp,0xc
c001c338:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c33b:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c33e:	6a 20                	push   0x20
c001c340:	e8 06 35 ff ff       	call   c000f84b <malloc>
c001c345:	89 c3                	mov    ebx,eax
c001c347:	58                   	pop    eax
c001c348:	5a                   	pop    edx
c001c349:	68 00 50 00 00       	push   0x5000
c001c34e:	53                   	push   ebx
c001c34f:	e8 4c 41 ff ff       	call   c00104a0 <Pipe::Pipe(int)>
c001c354:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c357:	e8 a4 53 ff ff       	call   c0011700 <UnixFile::getFileDescriptor()>
c001c35c:	89 07                	mov    DWORD PTR [edi],eax
c001c35e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c361:	e8 9a 53 ff ff       	call   c0011700 <UnixFile::getFileDescriptor()>
c001c366:	83 c4 10             	add    esp,0x10
c001c369:	89 06                	mov    DWORD PTR [esi],eax
c001c36b:	31 d2                	xor    edx,edx
c001c36d:	5b                   	pop    ebx
c001c36e:	31 c0                	xor    eax,eax
c001c370:	5e                   	pop    esi
c001c371:	5f                   	pop    edi
c001c372:	c3                   	ret    

c001c373 <sysGetUnixTime(regs*)>:
c001c373:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001c378:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c37e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c382:	e9 c9 7a ff ff       	jmp    c0013e50 <Clock::timeInSecondsLocal()>

c001c387 <string_ends_with(char const*, char const*)>:
c001c387:	57                   	push   edi
c001c388:	56                   	push   esi
c001c389:	53                   	push   ebx
c001c38a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c38e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c392:	83 ec 0c             	sub    esp,0xc
c001c395:	53                   	push   ebx
c001c396:	e8 01 44 fe ff       	call   c000079c <strlen>
c001c39b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c39e:	89 c6                	mov    esi,eax
c001c3a0:	e8 f7 43 fe ff       	call   c000079c <strlen>
c001c3a5:	83 c4 10             	add    esp,0x10
c001c3a8:	39 c6                	cmp    esi,eax
c001c3aa:	7d 06                	jge    c001c3b2 <string_ends_with(char const*, char const*)+0x2b>
c001c3ac:	5b                   	pop    ebx
c001c3ad:	31 c0                	xor    eax,eax
c001c3af:	5e                   	pop    esi
c001c3b0:	5f                   	pop    edi
c001c3b1:	c3                   	ret    
c001c3b2:	83 ec 08             	sub    esp,0x8
c001c3b5:	29 c6                	sub    esi,eax
c001c3b7:	57                   	push   edi
c001c3b8:	01 f3                	add    ebx,esi
c001c3ba:	53                   	push   ebx
c001c3bb:	e8 08 45 fe ff       	call   c00008c8 <strcmp>
c001c3c0:	83 c4 10             	add    esp,0x10
c001c3c3:	85 c0                	test   eax,eax
c001c3c5:	5b                   	pop    ebx
c001c3c6:	0f 94 c0             	sete   al
c001c3c9:	5e                   	pop    esi
c001c3ca:	0f b6 c0             	movzx  eax,al
c001c3cd:	5f                   	pop    edi
c001c3ce:	c3                   	ret    

c001c3cf <sysCallOpen(regs*)>:
c001c3cf:	56                   	push   esi
c001c3d0:	53                   	push   ebx
c001c3d1:	81 ec 04 01 00 00    	sub    esp,0x104
c001c3d7:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c3de:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c3e1:	85 c9                	test   ecx,ecx
c001c3e3:	0f 84 b3 00 00 00    	je     c001c49c <sysCallOpen(regs*)+0xcd>
c001c3e9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c3ec:	85 c0                	test   eax,eax
c001c3ee:	0f 84 a8 00 00 00    	je     c001c49c <sysCallOpen(regs*)+0xcd>
c001c3f4:	52                   	push   edx
c001c3f5:	68 41 c0 02 c0       	push   0xc002c041
c001c3fa:	50                   	push   eax
c001c3fb:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c3ff:	56                   	push   esi
c001c400:	e8 b7 6e ff ff       	call   c00132bc <Fs::standardiseFiles(char*, char const*, char const*)>
c001c405:	89 34 24             	mov    DWORD PTR [esp],esi
c001c408:	e8 8f 43 fe ff       	call   c000079c <strlen>
c001c40d:	83 c4 10             	add    esp,0x10
c001c410:	48                   	dec    eax
c001c411:	74 1d                	je     c001c430 <sysCallOpen(regs*)+0x61>
c001c413:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c416:	eb 0f                	jmp    c001c427 <sysCallOpen(regs*)+0x58>
c001c418:	80 fa 3a             	cmp    dl,0x3a
c001c41b:	74 0f                	je     c001c42c <sysCallOpen(regs*)+0x5d>
c001c41d:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c421:	48                   	dec    eax
c001c422:	74 0c                	je     c001c430 <sysCallOpen(regs*)+0x61>
c001c424:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c427:	80 fa 2e             	cmp    dl,0x2e
c001c42a:	75 ec                	jne    c001c418 <sysCallOpen(regs*)+0x49>
c001c42c:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c430:	83 ec 08             	sub    esp,0x8
c001c433:	68 45 c0 02 c0       	push   0xc002c045
c001c438:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c43b:	e8 47 ff ff ff       	call   c001c387 <string_ends_with(char const*, char const*)>
c001c440:	83 c4 10             	add    esp,0x10
c001c443:	85 c0                	test   eax,eax
c001c445:	75 17                	jne    c001c45e <sysCallOpen(regs*)+0x8f>
c001c447:	83 ec 08             	sub    esp,0x8
c001c44a:	68 66 c0 02 c0       	push   0xc002c066
c001c44f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c452:	e8 30 ff ff ff       	call   c001c387 <string_ends_with(char const*, char const*)>
c001c457:	83 c4 10             	add    esp,0x10
c001c45a:	85 c0                	test   eax,eax
c001c45c:	74 51                	je     c001c4af <sysCallOpen(regs*)+0xe0>
c001c45e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c461:	83 ec 08             	sub    esp,0x8
c001c464:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c46a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c471:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c474:	ff 30                	push   DWORD PTR [eax]
c001c476:	68 4a c0 02 c0       	push   0xc002c04a
c001c47b:	e8 87 6a ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001c480:	c7 04 24 59 c0 02 c0 	mov    DWORD PTR [esp],0xc002c059
c001c487:	e8 7b 6a ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001c48c:	83 c4 10             	add    esp,0x10
c001c48f:	81 c4 04 01 00 00    	add    esp,0x104
c001c495:	31 c0                	xor    eax,eax
c001c497:	31 d2                	xor    edx,edx
c001c499:	5b                   	pop    ebx
c001c49a:	5e                   	pop    esi
c001c49b:	c3                   	ret    
c001c49c:	81 c4 04 01 00 00    	add    esp,0x104
c001c4a2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c4a7:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c4ac:	5b                   	pop    ebx
c001c4ad:	5e                   	pop    esi
c001c4ae:	c3                   	ret    
c001c4af:	83 ec 08             	sub    esp,0x8
c001c4b2:	68 46 c0 02 c0       	push   0xc002c046
c001c4b7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4ba:	e8 09 44 fe ff       	call   c00008c8 <strcmp>
c001c4bf:	83 c4 10             	add    esp,0x10
c001c4c2:	85 c0                	test   eax,eax
c001c4c4:	74 98                	je     c001c45e <sysCallOpen(regs*)+0x8f>
c001c4c6:	83 ec 08             	sub    esp,0x8
c001c4c9:	68 45 c0 02 c0       	push   0xc002c045
c001c4ce:	56                   	push   esi
c001c4cf:	e8 b3 fe ff ff       	call   c001c387 <string_ends_with(char const*, char const*)>
c001c4d4:	83 c4 10             	add    esp,0x10
c001c4d7:	85 c0                	test   eax,eax
c001c4d9:	75 83                	jne    c001c45e <sysCallOpen(regs*)+0x8f>
c001c4db:	83 ec 08             	sub    esp,0x8
c001c4de:	68 6b c0 02 c0       	push   0xc002c06b
c001c4e3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4e6:	e8 9c fe ff ff       	call   c001c387 <string_ends_with(char const*, char const*)>
c001c4eb:	83 c4 10             	add    esp,0x10
c001c4ee:	85 c0                	test   eax,eax
c001c4f0:	0f 85 d9 00 00 00    	jne    c001c5cf <sysCallOpen(regs*)+0x200>
c001c4f6:	83 ec 08             	sub    esp,0x8
c001c4f9:	68 70 c0 02 c0       	push   0xc002c070
c001c4fe:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c501:	e8 81 fe ff ff       	call   c001c387 <string_ends_with(char const*, char const*)>
c001c506:	83 c4 10             	add    esp,0x10
c001c509:	85 c0                	test   eax,eax
c001c50b:	0f 85 be 00 00 00    	jne    c001c5cf <sysCallOpen(regs*)+0x200>
c001c511:	83 ec 08             	sub    esp,0x8
c001c514:	68 6c c0 02 c0       	push   0xc002c06c
c001c519:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c51c:	e8 a7 43 fe ff       	call   c00008c8 <strcmp>
c001c521:	83 c4 10             	add    esp,0x10
c001c524:	85 c0                	test   eax,eax
c001c526:	0f 84 a3 00 00 00    	je     c001c5cf <sysCallOpen(regs*)+0x200>
c001c52c:	83 ec 08             	sub    esp,0x8
c001c52f:	68 6b c0 02 c0       	push   0xc002c06b
c001c534:	56                   	push   esi
c001c535:	e8 4d fe ff ff       	call   c001c387 <string_ends_with(char const*, char const*)>
c001c53a:	83 c4 10             	add    esp,0x10
c001c53d:	85 c0                	test   eax,eax
c001c53f:	0f 85 8a 00 00 00    	jne    c001c5cf <sysCallOpen(regs*)+0x200>
c001c545:	83 ec 0c             	sub    esp,0xc
c001c548:	68 14 01 00 00       	push   0x114
c001c54d:	e8 f9 32 ff ff       	call   c000f84b <malloc>
c001c552:	83 c4 0c             	add    esp,0xc
c001c555:	89 c6                	mov    esi,eax
c001c557:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c55c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c55f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c562:	56                   	push   esi
c001c563:	e8 fe 6e ff ff       	call   c0013466 <File::File(char const*, Process*)>
c001c568:	83 c4 10             	add    esp,0x10
c001c56b:	85 f6                	test   esi,esi
c001c56d:	0f 84 29 ff ff ff    	je     c001c49c <sysCallOpen(regs*)+0xcd>
c001c573:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c576:	0f b6 c2             	movzx  eax,dl
c001c579:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c57c:	89 d0                	mov    eax,edx
c001c57e:	83 e0 01             	and    eax,0x1
c001c581:	f6 c2 02             	test   dl,0x2
c001c584:	74 03                	je     c001c589 <sysCallOpen(regs*)+0x1ba>
c001c586:	83 c8 02             	or     eax,0x2
c001c589:	f6 c2 04             	test   dl,0x4
c001c58c:	74 03                	je     c001c591 <sysCallOpen(regs*)+0x1c2>
c001c58e:	83 c8 04             	or     eax,0x4
c001c591:	f6 c2 08             	test   dl,0x8
c001c594:	74 03                	je     c001c599 <sysCallOpen(regs*)+0x1ca>
c001c596:	83 c8 0a             	or     eax,0xa
c001c599:	83 e2 10             	and    edx,0x10
c001c59c:	74 03                	je     c001c5a1 <sysCallOpen(regs*)+0x1d2>
c001c59e:	83 c8 12             	or     eax,0x12
c001c5a1:	83 ec 08             	sub    esp,0x8
c001c5a4:	50                   	push   eax
c001c5a5:	56                   	push   esi
c001c5a6:	e8 1f 6f ff ff       	call   c00134ca <File::open(FileOpenMode)>
c001c5ab:	83 c4 10             	add    esp,0x10
c001c5ae:	85 c0                	test   eax,eax
c001c5b0:	0f 85 e6 fe ff ff    	jne    c001c49c <sysCallOpen(regs*)+0xcd>
c001c5b6:	83 ec 0c             	sub    esp,0xc
c001c5b9:	56                   	push   esi
c001c5ba:	e8 41 51 ff ff       	call   c0011700 <UnixFile::getFileDescriptor()>
c001c5bf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c5c2:	89 02                	mov    DWORD PTR [edx],eax
c001c5c4:	c1 f8 1f             	sar    eax,0x1f
c001c5c7:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c5ca:	e9 bd fe ff ff       	jmp    c001c48c <sysCallOpen(regs*)+0xbd>
c001c5cf:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c5d2:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c5d8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c5df:	e9 ab fe ff ff       	jmp    c001c48f <sysCallOpen(regs*)+0xc0>

c001c5e4 <Sys::loadSyscalls()>:
c001c5e4:	c7 05 40 11 03 c0 f1 b6 01 c0 	mov    DWORD PTR ds:0xc0031140,0xc001b6f1
c001c5ee:	c7 05 44 11 03 c0 da b2 01 c0 	mov    DWORD PTR ds:0xc0031144,0xc001b2da
c001c5f8:	c7 05 48 11 03 c0 44 b4 01 c0 	mov    DWORD PTR ds:0xc0031148,0xc001b444
c001c602:	c7 05 4c 11 03 c0 27 b6 01 c0 	mov    DWORD PTR ds:0xc003114c,0xc001b627
c001c60c:	c7 05 50 11 03 c0 dc b3 01 c0 	mov    DWORD PTR ds:0xc0031150,0xc001b3dc
c001c616:	c7 05 54 11 03 c0 11 b3 01 c0 	mov    DWORD PTR ds:0xc0031154,0xc001b311
c001c620:	c7 05 58 11 03 c0 f2 b2 01 c0 	mov    DWORD PTR ds:0xc0031158,0xc001b2f2
c001c62a:	c7 05 5c 11 03 c0 99 b4 01 c0 	mov    DWORD PTR ds:0xc003115c,0xc001b499
c001c634:	c7 05 64 11 03 c0 21 bc 01 c0 	mov    DWORD PTR ds:0xc0031164,0xc001bc21
c001c63e:	c7 05 60 11 03 c0 cf c3 01 c0 	mov    DWORD PTR ds:0xc0031160,0xc001c3cf
c001c648:	c7 05 68 11 03 c0 a9 bc 01 c0 	mov    DWORD PTR ds:0xc0031168,0xc001bca9
c001c652:	c7 05 6c 11 03 c0 10 b9 01 c0 	mov    DWORD PTR ds:0xc003116c,0xc001b910
c001c65c:	c7 05 70 11 03 c0 2c b7 01 c0 	mov    DWORD PTR ds:0xc0031170,0xc001b72c
c001c666:	c7 05 74 11 03 c0 31 b7 01 c0 	mov    DWORD PTR ds:0xc0031174,0xc001b731
c001c670:	c7 05 78 11 03 c0 84 bd 01 c0 	mov    DWORD PTR ds:0xc0031178,0xc001bd84
c001c67a:	c7 05 7c 11 03 c0 1e bd 01 c0 	mov    DWORD PTR ds:0xc003117c,0xc001bd1e
c001c684:	c7 05 80 11 03 c0 f8 b9 01 c0 	mov    DWORD PTR ds:0xc0031180,0xc001b9f8
c001c68e:	c7 05 84 11 03 c0 61 ba 01 c0 	mov    DWORD PTR ds:0xc0031184,0xc001ba61
c001c698:	c7 05 88 11 03 c0 de ba 01 c0 	mov    DWORD PTR ds:0xc0031188,0xc001bade
c001c6a2:	c7 05 8c 11 03 c0 36 b7 01 c0 	mov    DWORD PTR ds:0xc003118c,0xc001b736
c001c6ac:	c7 05 90 11 03 c0 f4 bd 01 c0 	mov    DWORD PTR ds:0xc0031190,0xc001bdf4
c001c6b6:	c7 05 94 11 03 c0 0e be 01 c0 	mov    DWORD PTR ds:0xc0031194,0xc001be0e
c001c6c0:	c7 05 98 11 03 c0 0e be 01 c0 	mov    DWORD PTR ds:0xc0031198,0xc001be0e
c001c6ca:	c7 05 9c 11 03 c0 4f be 01 c0 	mov    DWORD PTR ds:0xc003119c,0xc001be4f
c001c6d4:	c7 05 a0 11 03 c0 b3 be 01 c0 	mov    DWORD PTR ds:0xc00311a0,0xc001beb3
c001c6de:	c7 05 a4 11 03 c0 e2 b8 01 c0 	mov    DWORD PTR ds:0xc00311a4,0xc001b8e2
c001c6e8:	c7 05 a8 11 03 c0 17 bf 01 c0 	mov    DWORD PTR ds:0xc00311a8,0xc001bf17
c001c6f2:	c7 05 ac 11 03 c0 9f b8 01 c0 	mov    DWORD PTR ds:0xc00311ac,0xc001b89f
c001c6fc:	c7 05 b0 11 03 c0 63 bf 01 c0 	mov    DWORD PTR ds:0xc00311b0,0xc001bf63
c001c706:	c7 05 b4 11 03 c0 9e b9 01 c0 	mov    DWORD PTR ds:0xc00311b4,0xc001b99e
c001c710:	c7 05 b8 11 03 c0 e6 bf 01 c0 	mov    DWORD PTR ds:0xc00311b8,0xc001bfe6
c001c71a:	c7 05 bc 11 03 c0 61 bb 01 c0 	mov    DWORD PTR ds:0xc00311bc,0xc001bb61
c001c724:	c7 05 c0 11 03 c0 0d c0 01 c0 	mov    DWORD PTR ds:0xc00311c0,0xc001c00d
c001c72e:	c7 05 c4 11 03 c0 65 c0 01 c0 	mov    DWORD PTR ds:0xc00311c4,0xc001c065
c001c738:	c7 05 c8 11 03 c0 9d c1 01 c0 	mov    DWORD PTR ds:0xc00311c8,0xc001c19d
c001c742:	c7 05 cc 11 03 c0 40 b7 01 c0 	mov    DWORD PTR ds:0xc00311cc,0xc001b740
c001c74c:	c7 05 d0 11 03 c0 aa b7 01 c0 	mov    DWORD PTR ds:0xc00311d0,0xc001b7aa
c001c756:	c7 05 d4 11 03 c0 f0 b7 01 c0 	mov    DWORD PTR ds:0xc00311d4,0xc001b7f0
c001c760:	c7 05 d8 11 03 c0 bc c2 01 c0 	mov    DWORD PTR ds:0xc00311d8,0xc001c2bc
c001c76a:	c7 05 dc 11 03 c0 29 be 01 c0 	mov    DWORD PTR ds:0xc00311dc,0xc001be29
c001c774:	c7 05 e0 11 03 c0 41 b8 01 c0 	mov    DWORD PTR ds:0xc00311e0,0xc001b841
c001c77e:	c7 05 e4 11 03 c0 2e c3 01 c0 	mov    DWORD PTR ds:0xc00311e4,0xc001c32e
c001c788:	c7 05 e8 11 03 c0 73 c3 01 c0 	mov    DWORD PTR ds:0xc00311e8,0xc001c373
c001c792:	c7 05 ec 11 03 c0 34 b3 01 c0 	mov    DWORD PTR ds:0xc00311ec,0xc001b334
c001c79c:	c7 05 f0 11 03 c0 b5 b4 01 c0 	mov    DWORD PTR ds:0xc00311f0,0xc001b4b5
c001c7a6:	c7 05 f4 11 03 c0 dd b5 01 c0 	mov    DWORD PTR ds:0xc00311f4,0xc001b5dd
c001c7b0:	c7 05 f8 11 03 c0 a4 b2 01 c0 	mov    DWORD PTR ds:0xc00311f8,0xc001b2a4
c001c7ba:	c7 05 fc 11 03 c0 8f b6 01 c0 	mov    DWORD PTR ds:0xc00311fc,0xc001b68f
c001c7c4:	c7 05 00 12 03 c0 1d b3 01 c0 	mov    DWORD PTR ds:0xc0031200,0xc001b31d
c001c7ce:	c3                   	ret    

c001c7cf <Sys::systemCall(regs*, void*)>:
c001c7cf:	53                   	push   ebx
c001c7d0:	83 ec 08             	sub    esp,0x8
c001c7d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c7d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c7da:	83 f8 7f             	cmp    eax,0x7f
c001c7dd:	77 16                	ja     c001c7f5 <Sys::systemCall(regs*, void*)+0x26>
c001c7df:	8b 14 85 40 11 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffceec0]
c001c7e6:	85 d2                	test   edx,edx
c001c7e8:	74 0b                	je     c001c7f5 <Sys::systemCall(regs*, void*)+0x26>
c001c7ea:	83 ec 0c             	sub    esp,0xc
c001c7ed:	53                   	push   ebx
c001c7ee:	ff d2                	call   edx
c001c7f0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c7f3:	eb 0d                	jmp    c001c802 <Sys::systemCall(regs*, void*)+0x33>
c001c7f5:	52                   	push   edx
c001c7f6:	52                   	push   edx
c001c7f7:	50                   	push   eax
c001c7f8:	68 75 c0 02 c0       	push   0xc002c075
c001c7fd:	e8 05 67 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001c802:	83 c4 10             	add    esp,0x10
c001c805:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c80a:	31 d2                	xor    edx,edx
c001c80c:	83 c4 08             	add    esp,0x8
c001c80f:	5b                   	pop    ebx
c001c810:	c3                   	ret    

c001c811 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c811:	55                   	push   ebp
c001c812:	57                   	push   edi
c001c813:	56                   	push   esi
c001c814:	53                   	push   ebx
c001c815:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c81b:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c822:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c829:	85 c0                	test   eax,eax
c001c82b:	0f 95 c1             	setne  cl
c001c82e:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c836:	0f 94 c2             	sete   dl
c001c839:	84 d1                	test   cl,dl
c001c83b:	74 23                	je     c001c860 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c83d:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c843:	74 1b                	je     c001c860 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c845:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c84b:	89 da                	mov    edx,ebx
c001c84d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c853:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c859:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c860:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001c867:	05 ff 0f 00 00       	add    eax,0xfff
c001c86c:	83 ec 0c             	sub    esp,0xc
c001c86f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c873:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001c879:	c1 e8 0c             	shr    eax,0xc
c001c87c:	89 ef                	mov    edi,ebp
c001c87e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c882:	c1 ef 0c             	shr    edi,0xc
c001c885:	6a 01                	push   0x1
c001c887:	e8 bf 52 ff ff       	call   c0011b4b <Virt::allocateKernelVirtualPages(int)>
c001c88c:	89 c6                	mov    esi,eax
c001c88e:	58                   	pop    eax
c001c88f:	5a                   	pop    edx
c001c890:	57                   	push   edi
c001c891:	68 fb c0 02 c0       	push   0xc002c0fb
c001c896:	e8 6c 66 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001c89b:	59                   	pop    ecx
c001c89c:	58                   	pop    eax
c001c89d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c8a1:	68 0d c1 02 c0       	push   0xc002c10d
c001c8a6:	e8 5c 66 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001c8ab:	83 c4 10             	add    esp,0x10
c001c8ae:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001c8b4:	0f 86 24 01 00 00    	jbe    c001c9de <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001c8ba:	c1 e7 0c             	shl    edi,0xc
c001c8bd:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001c8c0:	89 df                	mov    edi,ebx
c001c8c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8c6:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001c8cd:	01 dd                	add    ebp,ebx
c001c8cf:	29 fd                	sub    ebp,edi
c001c8d1:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001c8d5:	0f 84 01 01 00 00    	je     c001c9dc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c8db:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001c8e1:	76 05                	jbe    c001c8e8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001c8e3:	bd 00 10 00 00       	mov    ebp,0x1000
c001c8e8:	83 ec 0c             	sub    esp,0xc
c001c8eb:	31 d2                	xor    edx,edx
c001c8ed:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c8f4:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c8f6:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c8fa:	50                   	push   eax
c001c8fb:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c8ff:	50                   	push   eax
c001c900:	52                   	push   edx
c001c901:	55                   	push   ebp
c001c902:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c909:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c90c:	83 c4 20             	add    esp,0x20
c001c90f:	85 c0                	test   eax,eax
c001c911:	74 0a                	je     c001c91d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001c913:	53                   	push   ebx
c001c914:	53                   	push   ebx
c001c915:	50                   	push   eax
c001c916:	68 1f c1 02 c0       	push   0xc002c11f
c001c91b:	eb 0f                	jmp    c001c92c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001c91d:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001c921:	74 20                	je     c001c943 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001c923:	51                   	push   ecx
c001c924:	51                   	push   ecx
c001c925:	6a 00                	push   0x0
c001c927:	68 4a c1 02 c0       	push   0xc002c14a
c001c92c:	e8 d6 65 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001c931:	89 34 24             	mov    DWORD PTR [esp],esi
c001c934:	e8 c0 56 ff ff       	call   c0011ff9 <Virt::freeKernelVirtualPages(unsigned long)>
c001c939:	83 c4 10             	add    esp,0x10
c001c93c:	31 c0                	xor    eax,eax
c001c93e:	e9 55 01 00 00       	jmp    c001ca98 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001c943:	e8 d8 14 00 00       	call   c001de20 <lockScheduler()>
c001c948:	e8 a0 35 ff ff       	call   c000feed <Phys::allocatePage()>
c001c94d:	6a 07                	push   0x7
c001c94f:	89 c5                	mov    ebp,eax
c001c951:	56                   	push   esi
c001c952:	50                   	push   eax
c001c953:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c958:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c95b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c961:	e8 fa 59 ff ff       	call   c0012360 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c966:	83 c4 0c             	add    esp,0xc
c001c969:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c970:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c976:	6a 00                	push   0x0
c001c978:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c97d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c980:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c986:	e8 3f 58 ff ff       	call   c00121ca <VAS::mapOtherVASIn(bool, VAS*)>
c001c98b:	58                   	pop    eax
c001c98c:	5a                   	pop    edx
c001c98d:	68 07 0c 00 00       	push   0xc07
c001c992:	57                   	push   edi
c001c993:	81 c7 00 10 00 00    	add    edi,0x1000
c001c999:	55                   	push   ebp
c001c99a:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c9a1:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9a7:	6a 00                	push   0x0
c001c9a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9ae:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9b1:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9b7:	e8 5e 5d ff ff       	call   c001271a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c9bc:	83 c4 1c             	add    esp,0x1c
c001c9bf:	68 00 10 00 00       	push   0x1000
c001c9c4:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c9c8:	50                   	push   eax
c001c9c9:	56                   	push   esi
c001c9ca:	e8 7d 3d fe ff       	call   c000074c <memcpy>
c001c9cf:	e8 4e 14 00 00       	call   c001de22 <unlockScheduler()>
c001c9d4:	83 c4 10             	add    esp,0x10
c001c9d7:	e9 ea fe ff ff       	jmp    c001c8c6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001c9dc:	89 fb                	mov    ebx,edi
c001c9de:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c9e6:	0f 86 9e 00 00 00    	jbe    c001ca8a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001c9ec:	e8 2f 14 00 00       	call   c001de20 <lockScheduler()>
c001c9f1:	51                   	push   ecx
c001c9f2:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c9f9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9ff:	6a 00                	push   0x0
c001ca01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca06:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca09:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca0f:	e8 b6 57 ff ff       	call   c00121ca <VAS::mapOtherVASIn(bool, VAS*)>
c001ca14:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ca18:	c1 e7 0c             	shl    edi,0xc
c001ca1b:	01 df                	add    edi,ebx
c001ca1d:	83 c4 10             	add    esp,0x10
c001ca20:	39 fb                	cmp    ebx,edi
c001ca22:	74 61                	je     c001ca85 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x274>
c001ca24:	e8 c4 34 ff ff       	call   c000feed <Phys::allocatePage()>
c001ca29:	6a 07                	push   0x7
c001ca2b:	89 c5                	mov    ebp,eax
c001ca2d:	56                   	push   esi
c001ca2e:	50                   	push   eax
c001ca2f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca34:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca37:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca3d:	e8 1e 59 ff ff       	call   c0012360 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ca42:	58                   	pop    eax
c001ca43:	5a                   	pop    edx
c001ca44:	68 07 0c 00 00       	push   0xc07
c001ca49:	53                   	push   ebx
c001ca4a:	81 c3 00 10 00 00    	add    ebx,0x1000
c001ca50:	55                   	push   ebp
c001ca51:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001ca58:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca5e:	6a 00                	push   0x0
c001ca60:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca65:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca68:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca6e:	e8 a7 5c ff ff       	call   c001271a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ca73:	83 c4 1c             	add    esp,0x1c
c001ca76:	68 00 10 00 00       	push   0x1000
c001ca7b:	6a 00                	push   0x0
c001ca7d:	56                   	push   esi
c001ca7e:	e8 fd 3c fe ff       	call   c0000780 <memset>
c001ca83:	eb 98                	jmp    c001ca1d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x20c>
c001ca85:	e8 98 13 00 00       	call   c001de22 <unlockScheduler()>
c001ca8a:	83 ec 0c             	sub    esp,0xc
c001ca8d:	56                   	push   esi
c001ca8e:	e8 66 55 ff ff       	call   c0011ff9 <Virt::freeKernelVirtualPages(unsigned long)>
c001ca93:	83 c4 10             	add    esp,0x10
c001ca96:	b0 01                	mov    al,0x1
c001ca98:	81 c4 2c 10 00 00    	add    esp,0x102c
c001ca9e:	5b                   	pop    ebx
c001ca9f:	5e                   	pop    esi
c001caa0:	5f                   	pop    edi
c001caa1:	5d                   	pop    ebp
c001caa2:	c3                   	ret    

c001caa3 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001caa3:	55                   	push   ebp
c001caa4:	57                   	push   edi
c001caa5:	56                   	push   esi
c001caa6:	53                   	push   ebx
c001caa7:	83 ec 48             	sub    esp,0x48
c001caaa:	68 14 01 00 00       	push   0x114
c001caaf:	e8 97 2d ff ff       	call   c000f84b <malloc>
c001cab4:	83 c4 0c             	add    esp,0xc
c001cab7:	89 c6                	mov    esi,eax
c001cab9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001cabd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001cac1:	50                   	push   eax
c001cac2:	e8 9f 69 ff ff       	call   c0013466 <File::File(char const*, Process*)>
c001cac7:	58                   	pop    eax
c001cac8:	5a                   	pop    edx
c001cac9:	6a 01                	push   0x1
c001cacb:	56                   	push   esi
c001cacc:	e8 f9 69 ff ff       	call   c00134ca <File::open(FileOpenMode)>
c001cad1:	83 c4 10             	add    esp,0x10
c001cad4:	85 c0                	test   eax,eax
c001cad6:	0f 85 47 01 00 00    	jne    c001cc23 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cadc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001cae4:	83 ec 0c             	sub    esp,0xc
c001cae7:	6a 34                	push   0x34
c001cae9:	e8 5d 2d ff ff       	call   c000f84b <malloc>
c001caee:	89 c3                	mov    ebx,eax
c001caf0:	58                   	pop    eax
c001caf1:	8b 06                	mov    eax,DWORD PTR [esi]
c001caf3:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001caf7:	57                   	push   edi
c001caf8:	53                   	push   ebx
c001caf9:	6a 00                	push   0x0
c001cafb:	6a 34                	push   0x34
c001cafd:	56                   	push   esi
c001cafe:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cb01:	83 c4 20             	add    esp,0x20
c001cb04:	85 c0                	test   eax,eax
c001cb06:	0f 85 17 01 00 00    	jne    c001cc23 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb0c:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001cb12:	0f 85 0b 01 00 00    	jne    c001cc23 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb18:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001cb1b:	85 c0                	test   eax,eax
c001cb1d:	0f 84 00 01 00 00    	je     c001cc23 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb23:	31 d2                	xor    edx,edx
c001cb25:	55                   	push   ebp
c001cb26:	52                   	push   edx
c001cb27:	50                   	push   eax
c001cb28:	56                   	push   esi
c001cb29:	e8 5a 6a ff ff       	call   c0013588 <File::seek(unsigned long long)>
c001cb2e:	83 c4 10             	add    esp,0x10
c001cb31:	85 c0                	test   eax,eax
c001cb33:	0f 85 ea 00 00 00    	jne    c001cc23 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb39:	83 ec 0c             	sub    esp,0xc
c001cb3c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001cb3f:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cb43:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cb47:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cb4b:	0f af c2             	imul   eax,edx
c001cb4e:	50                   	push   eax
c001cb4f:	e8 f7 2c ff ff       	call   c000f84b <malloc>
c001cb54:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cb56:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cb5a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cb5d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cb61:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cb65:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cb69:	0f af c2             	imul   eax,edx
c001cb6c:	99                   	cdq    
c001cb6d:	52                   	push   edx
c001cb6e:	50                   	push   eax
c001cb6f:	56                   	push   esi
c001cb70:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb73:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001cb76:	83 c4 20             	add    esp,0x20
c001cb79:	85 c0                	test   eax,eax
c001cb7b:	0f 84 a2 00 00 00    	je     c001cc23 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb81:	31 d2                	xor    edx,edx
c001cb83:	51                   	push   ecx
c001cb84:	52                   	push   edx
c001cb85:	50                   	push   eax
c001cb86:	56                   	push   esi
c001cb87:	e8 fc 69 ff ff       	call   c0013588 <File::seek(unsigned long long)>
c001cb8c:	83 c4 10             	add    esp,0x10
c001cb8f:	85 c0                	test   eax,eax
c001cb91:	0f 85 8c 00 00 00    	jne    c001cc23 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb97:	83 ec 0c             	sub    esp,0xc
c001cb9a:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cb9e:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cba2:	31 ed                	xor    ebp,ebp
c001cba4:	0f af c2             	imul   eax,edx
c001cba7:	50                   	push   eax
c001cba8:	e8 9e 2c ff ff       	call   c000f84b <malloc>
c001cbad:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cbaf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cbb3:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cbb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbba:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cbbe:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cbc2:	0f af c2             	imul   eax,edx
c001cbc5:	99                   	cdq    
c001cbc6:	52                   	push   edx
c001cbc7:	50                   	push   eax
c001cbc8:	56                   	push   esi
c001cbc9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cbcc:	83 c4 20             	add    esp,0x20
c001cbcf:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cbd7:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cbdb:	0f 86 80 00 00 00    	jbe    c001cc61 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cbe1:	0f b7 fd             	movzx  edi,bp
c001cbe4:	c1 e7 05             	shl    edi,0x5
c001cbe7:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cbeb:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cbee:	75 6b                	jne    c001cc5b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cbf0:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cbf3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cbf7:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cbfa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cbfe:	52                   	push   edx
c001cbff:	31 d2                	xor    edx,edx
c001cc01:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cc04:	52                   	push   edx
c001cc05:	50                   	push   eax
c001cc06:	56                   	push   esi
c001cc07:	e8 7c 69 ff ff       	call   c0013588 <File::seek(unsigned long long)>
c001cc0c:	83 c4 10             	add    esp,0x10
c001cc0f:	85 c0                	test   eax,eax
c001cc11:	74 17                	je     c001cc2a <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cc13:	83 ec 0c             	sub    esp,0xc
c001cc16:	68 76 c1 02 c0       	push   0xc002c176
c001cc1b:	e8 e7 62 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001cc20:	83 c4 10             	add    esp,0x10
c001cc23:	31 c0                	xor    eax,eax
c001cc25:	e9 87 00 00 00       	jmp    c001ccb1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cc2a:	83 ec 0c             	sub    esp,0xc
c001cc2d:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cc30:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cc33:	50                   	push   eax
c001cc34:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cc38:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cc3c:	56                   	push   esi
c001cc3d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cc41:	e8 cb fb ff ff       	call   c001c811 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cc46:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cc4a:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cc4e:	83 c4 20             	add    esp,0x20
c001cc51:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cc55:	73 04                	jae    c001cc5b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cc57:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cc5b:	45                   	inc    ebp
c001cc5c:	e9 76 ff ff ff       	jmp    c001cbd7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cc61:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cc65:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cc69:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cc6d:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cc73:	83 ec 0c             	sub    esp,0xc
c001cc76:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cc7c:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cc81:	05 00 10 00 00       	add    eax,0x1000
c001cc86:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cc89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc8d:	e8 c9 2b ff ff       	call   c000f85b <free>
c001cc92:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cc95:	e8 c1 2b ff ff       	call   c000f85b <free>
c001cc9a:	58                   	pop    eax
c001cc9b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc9f:	e8 b7 2b ff ff       	call   c000f85b <free>
c001cca4:	89 34 24             	mov    DWORD PTR [esp],esi
c001cca7:	e8 7c 68 ff ff       	call   c0013528 <File::close()>
c001ccac:	83 c4 10             	add    esp,0x10
c001ccaf:	b0 01                	mov    al,0x1
c001ccb1:	83 c4 3c             	add    esp,0x3c
c001ccb4:	5b                   	pop    ebx
c001ccb5:	5e                   	pop    esi
c001ccb6:	5f                   	pop    edi
c001ccb7:	5d                   	pop    ebp
c001ccb8:	c3                   	ret    

c001ccb9 <Thr::runtimeReferenceHelper()>:
c001ccb9:	83 ec 18             	sub    esp,0x18
c001ccbc:	68 7e c1 02 c0       	push   0xc002c17e
c001ccc1:	e8 41 62 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001ccc6:	fa                   	cli    
c001ccc7:	83 c4 10             	add    esp,0x10
c001ccca:	eb fe                	jmp    c001ccca <Thr::runtimeReferenceHelper()+0x11>

c001cccc <Thr::getAddressOfKernelSymbol(char const*)>:
c001cccc:	57                   	push   edi
c001cccd:	56                   	push   esi
c001ccce:	53                   	push   ebx
c001cccf:	31 db                	xor    ebx,ebx
c001ccd1:	39 1d e0 1a 03 c0    	cmp    DWORD PTR ds:0xc0031ae0,ebx
c001ccd7:	7e 3c                	jle    c001cd15 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001ccd9:	8b 34 9d 60 1a 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffce5a0]
c001cce0:	31 ff                	xor    edi,edi
c001cce2:	39 3c 9d 60 19 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffce6a0],edi
c001cce9:	7e 27                	jle    c001cd12 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cceb:	50                   	push   eax
c001ccec:	50                   	push   eax
c001cced:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ccf1:	8b 06                	mov    eax,DWORD PTR [esi]
c001ccf3:	03 04 9d e0 19 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffce620]
c001ccfa:	50                   	push   eax
c001ccfb:	e8 c8 3b fe ff       	call   c00008c8 <strcmp>
c001cd00:	83 c4 10             	add    esp,0x10
c001cd03:	85 c0                	test   eax,eax
c001cd05:	75 05                	jne    c001cd0c <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001cd07:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cd0a:	eb 0b                	jmp    c001cd17 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001cd0c:	83 c6 10             	add    esi,0x10
c001cd0f:	47                   	inc    edi
c001cd10:	eb d0                	jmp    c001cce2 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001cd12:	43                   	inc    ebx
c001cd13:	eb bc                	jmp    c001ccd1 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cd15:	31 c0                	xor    eax,eax
c001cd17:	5b                   	pop    ebx
c001cd18:	5e                   	pop    esi
c001cd19:	5f                   	pop    edi
c001cd1a:	c3                   	ret    

c001cd1b <Thr::loadKernelSymbolTable(char const*)>:
c001cd1b:	55                   	push   ebp
c001cd1c:	57                   	push   edi
c001cd1d:	56                   	push   esi
c001cd1e:	53                   	push   ebx
c001cd1f:	83 ec 68             	sub    esp,0x68
c001cd22:	8b 35 34 1b 03 c0    	mov    esi,DWORD PTR ds:0xc0031b34
c001cd28:	68 14 01 00 00       	push   0x114
c001cd2d:	e8 19 2b ff ff       	call   c000f84b <malloc>
c001cd32:	83 c4 0c             	add    esp,0xc
c001cd35:	89 c3                	mov    ebx,eax
c001cd37:	56                   	push   esi
c001cd38:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cd3c:	50                   	push   eax
c001cd3d:	e8 24 67 ff ff       	call   c0013466 <File::File(char const*, Process*)>
c001cd42:	5e                   	pop    esi
c001cd43:	5f                   	pop    edi
c001cd44:	6a 01                	push   0x1
c001cd46:	53                   	push   ebx
c001cd47:	e8 7e 67 ff ff       	call   c00134ca <File::open(FileOpenMode)>
c001cd4c:	83 c4 10             	add    esp,0x10
c001cd4f:	85 c0                	test   eax,eax
c001cd51:	74 0a                	je     c001cd5d <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cd53:	83 ec 0c             	sub    esp,0xc
c001cd56:	68 a0 c1 02 c0       	push   0xc002c1a0
c001cd5b:	eb 34                	jmp    c001cd91 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cd5d:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cd65:	83 ec 0c             	sub    esp,0xc
c001cd68:	6a 34                	push   0x34
c001cd6a:	e8 dc 2a ff ff       	call   c000f84b <malloc>
c001cd6f:	59                   	pop    ecx
c001cd70:	89 c7                	mov    edi,eax
c001cd72:	8d 74 24 34          	lea    esi,[esp+0x34]
c001cd76:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd78:	56                   	push   esi
c001cd79:	57                   	push   edi
c001cd7a:	6a 00                	push   0x0
c001cd7c:	6a 34                	push   0x34
c001cd7e:	53                   	push   ebx
c001cd7f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cd82:	83 c4 20             	add    esp,0x20
c001cd85:	85 c0                	test   eax,eax
c001cd87:	74 17                	je     c001cda0 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001cd89:	83 ec 0c             	sub    esp,0xc
c001cd8c:	68 b7 c1 02 c0       	push   0xc002c1b7
c001cd91:	e8 af d8 ff ff       	call   c001a645 <Krnl::panic(char const*)>
c001cd96:	83 c4 10             	add    esp,0x10
c001cd99:	31 c0                	xor    eax,eax
c001cd9b:	e9 31 02 00 00       	jmp    c001cfd1 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001cda0:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cda6:	75 e1                	jne    c001cd89 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cda8:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cdab:	85 c0                	test   eax,eax
c001cdad:	74 da                	je     c001cd89 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cdaf:	52                   	push   edx
c001cdb0:	31 d2                	xor    edx,edx
c001cdb2:	52                   	push   edx
c001cdb3:	50                   	push   eax
c001cdb4:	53                   	push   ebx
c001cdb5:	e8 ce 67 ff ff       	call   c0013588 <File::seek(unsigned long long)>
c001cdba:	83 c4 10             	add    esp,0x10
c001cdbd:	85 c0                	test   eax,eax
c001cdbf:	75 c8                	jne    c001cd89 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cdc1:	83 ec 0c             	sub    esp,0xc
c001cdc4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cdc8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cdcc:	31 ed                	xor    ebp,ebp
c001cdce:	0f af c2             	imul   eax,edx
c001cdd1:	50                   	push   eax
c001cdd2:	e8 74 2a ff ff       	call   c000f84b <malloc>
c001cdd7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cdd9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cddd:	89 34 24             	mov    DWORD PTR [esp],esi
c001cde0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cde4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cde8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cdec:	0f af c2             	imul   eax,edx
c001cdef:	99                   	cdq    
c001cdf0:	52                   	push   edx
c001cdf1:	50                   	push   eax
c001cdf2:	53                   	push   ebx
c001cdf3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cdf6:	83 c4 20             	add    esp,0x20
c001cdf9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ce01:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ce09:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ce11:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ce19:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001ce1d:	0f 86 aa 00 00 00    	jbe    c001cecd <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001ce23:	0f b7 f5             	movzx  esi,bp
c001ce26:	6b f6 28             	imul   esi,esi,0x28
c001ce29:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ce2d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ce30:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ce34:	50                   	push   eax
c001ce35:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ce39:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001ce3d:	8b 16                	mov    edx,DWORD PTR [esi]
c001ce3f:	6b c0 28             	imul   eax,eax,0x28
c001ce42:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001ce46:	89 d0                	mov    eax,edx
c001ce48:	31 d2                	xor    edx,edx
c001ce4a:	52                   	push   edx
c001ce4b:	50                   	push   eax
c001ce4c:	53                   	push   ebx
c001ce4d:	e8 36 67 ff ff       	call   c0013588 <File::seek(unsigned long long)>
c001ce52:	83 c4 0c             	add    esp,0xc
c001ce55:	6a 20                	push   0x20
c001ce57:	6a 00                	push   0x0
c001ce59:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ce5d:	52                   	push   edx
c001ce5e:	e8 1d 39 fe ff       	call   c0000780 <memset>
c001ce63:	58                   	pop    eax
c001ce64:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce66:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001ce6a:	51                   	push   ecx
c001ce6b:	8d 54 24 40          	lea    edx,[esp+0x40]
c001ce6f:	52                   	push   edx
c001ce70:	6a 00                	push   0x0
c001ce72:	6a 1f                	push   0x1f
c001ce74:	53                   	push   ebx
c001ce75:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce78:	83 c4 18             	add    esp,0x18
c001ce7b:	68 ce c1 02 c0       	push   0xc002c1ce
c001ce80:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ce84:	52                   	push   edx
c001ce85:	e8 3e 3a fe ff       	call   c00008c8 <strcmp>
c001ce8a:	83 c4 10             	add    esp,0x10
c001ce8d:	85 c0                	test   eax,eax
c001ce8f:	75 0f                	jne    c001cea0 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001ce91:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ce94:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ce98:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce9c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cea0:	50                   	push   eax
c001cea1:	50                   	push   eax
c001cea2:	68 d6 c1 02 c0       	push   0xc002c1d6
c001cea7:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001ceab:	50                   	push   eax
c001ceac:	e8 17 3a fe ff       	call   c00008c8 <strcmp>
c001ceb1:	83 c4 10             	add    esp,0x10
c001ceb4:	85 c0                	test   eax,eax
c001ceb6:	75 0f                	jne    c001cec7 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001ceb8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cebb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cebf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cec3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cec7:	45                   	inc    ebp
c001cec8:	e9 4c ff ff ff       	jmp    c001ce19 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001cecd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ced2:	75 10                	jne    c001cee4 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001ced4:	83 ec 0c             	sub    esp,0xc
c001ced7:	68 de c1 02 c0       	push   0xc002c1de
c001cedc:	e8 64 d7 ff ff       	call   c001a645 <Krnl::panic(char const*)>
c001cee1:	83 c4 10             	add    esp,0x10
c001cee4:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001cee9:	75 10                	jne    c001cefb <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001ceeb:	83 ec 0c             	sub    esp,0xc
c001ceee:	68 de c1 02 c0       	push   0xc002c1de
c001cef3:	e8 4d d7 ff ff       	call   c001a645 <Krnl::panic(char const*)>
c001cef8:	83 c4 10             	add    esp,0x10
c001cefb:	31 d2                	xor    edx,edx
c001cefd:	50                   	push   eax
c001cefe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf02:	52                   	push   edx
c001cf03:	50                   	push   eax
c001cf04:	53                   	push   ebx
c001cf05:	e8 7e 66 ff ff       	call   c0013588 <File::seek(unsigned long long)>
c001cf0a:	5a                   	pop    edx
c001cf0b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cf0f:	e8 37 29 ff ff       	call   c000f84b <malloc>
c001cf14:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cf18:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cf1c:	31 c9                	xor    ecx,ecx
c001cf1e:	5e                   	pop    esi
c001cf1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf21:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001cf25:	55                   	push   ebp
c001cf26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf2a:	51                   	push   ecx
c001cf2b:	52                   	push   edx
c001cf2c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cf30:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cf34:	53                   	push   ebx
c001cf35:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf38:	83 c4 14             	add    esp,0x14
c001cf3b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cf3f:	e8 07 29 ff ff       	call   c000f84b <malloc>
c001cf44:	89 c6                	mov    esi,eax
c001cf46:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf48:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf4b:	56                   	push   esi
c001cf4c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cf50:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cf54:	51                   	push   ecx
c001cf55:	52                   	push   edx
c001cf56:	53                   	push   ebx
c001cf57:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf5a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf5e:	8b 15 e0 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031ae0
c001cf64:	83 c4 1c             	add    esp,0x1c
c001cf67:	c1 e8 04             	shr    eax,0x4
c001cf6a:	89 04 95 60 19 03 c0 	mov    DWORD PTR [edx*4-0x3ffce6a0],eax
c001cf71:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cf75:	31 d2                	xor    edx,edx
c001cf77:	52                   	push   edx
c001cf78:	50                   	push   eax
c001cf79:	53                   	push   ebx
c001cf7a:	e8 09 66 ff ff       	call   c0013588 <File::seek(unsigned long long)>
c001cf7f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cf81:	31 d2                	xor    edx,edx
c001cf83:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf86:	56                   	push   esi
c001cf87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cf8b:	52                   	push   edx
c001cf8c:	50                   	push   eax
c001cf8d:	53                   	push   ebx
c001cf8e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cf91:	83 c4 14             	add    esp,0x14
c001cf94:	53                   	push   ebx
c001cf95:	e8 8e 65 ff ff       	call   c0013528 <File::close()>
c001cf9a:	5d                   	pop    ebp
c001cf9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf9f:	e8 b7 28 ff ff       	call   c000f85b <free>
c001cfa4:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cfa7:	e8 af 28 ff ff       	call   c000f85b <free>
c001cfac:	a1 e0 1a 03 c0       	mov    eax,ds:0xc0031ae0
c001cfb1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cfb5:	8d 50 01             	lea    edx,[eax+0x1]
c001cfb8:	89 0c 85 60 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5a0],ecx
c001cfbf:	89 34 85 e0 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce620],esi
c001cfc6:	89 15 e0 1a 03 c0    	mov    DWORD PTR ds:0xc0031ae0,edx
c001cfcc:	83 c4 10             	add    esp,0x10
c001cfcf:	b0 01                	mov    al,0x1
c001cfd1:	83 c4 5c             	add    esp,0x5c
c001cfd4:	5b                   	pop    ebx
c001cfd5:	5e                   	pop    esi
c001cfd6:	5f                   	pop    edi
c001cfd7:	5d                   	pop    ebp
c001cfd8:	c3                   	ret    

c001cfd9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001cfd9:	55                   	push   ebp
c001cfda:	57                   	push   edi
c001cfdb:	56                   	push   esi
c001cfdc:	53                   	push   ebx
c001cfdd:	81 ec 68 03 00 00    	sub    esp,0x368
c001cfe3:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001cfea:	8b 1d 34 1b 03 c0    	mov    ebx,DWORD PTR ds:0xc0031b34
c001cff0:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001cff4:	68 14 01 00 00       	push   0x114
c001cff9:	e8 4d 28 ff ff       	call   c000f84b <malloc>
c001cffe:	83 c4 0c             	add    esp,0xc
c001d001:	89 c5                	mov    ebp,eax
c001d003:	53                   	push   ebx
c001d004:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001d00b:	50                   	push   eax
c001d00c:	e8 55 64 ff ff       	call   c0013466 <File::File(char const*, Process*)>
c001d011:	5e                   	pop    esi
c001d012:	5f                   	pop    edi
c001d013:	6a 01                	push   0x1
c001d015:	55                   	push   ebp
c001d016:	e8 af 64 ff ff       	call   c00134ca <File::open(FileOpenMode)>
c001d01b:	83 c4 10             	add    esp,0x10
c001d01e:	85 c0                	test   eax,eax
c001d020:	0f 85 8d 06 00 00    	jne    c001d6b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d026:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d02e:	83 ec 0c             	sub    esp,0xc
c001d031:	6a 34                	push   0x34
c001d033:	e8 13 28 ff ff       	call   c000f84b <malloc>
c001d038:	5b                   	pop    ebx
c001d039:	89 c7                	mov    edi,eax
c001d03b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d03f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d042:	53                   	push   ebx
c001d043:	57                   	push   edi
c001d044:	6a 00                	push   0x0
c001d046:	6a 34                	push   0x34
c001d048:	55                   	push   ebp
c001d049:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d04c:	83 c4 20             	add    esp,0x20
c001d04f:	85 c0                	test   eax,eax
c001d051:	0f 85 5c 06 00 00    	jne    c001d6b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d057:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d05d:	0f 85 50 06 00 00    	jne    c001d6b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d063:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d066:	85 c0                	test   eax,eax
c001d068:	0f 84 45 06 00 00    	je     c001d6b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d06e:	31 d2                	xor    edx,edx
c001d070:	51                   	push   ecx
c001d071:	52                   	push   edx
c001d072:	50                   	push   eax
c001d073:	55                   	push   ebp
c001d074:	e8 0f 65 ff ff       	call   c0013588 <File::seek(unsigned long long)>
c001d079:	83 c4 10             	add    esp,0x10
c001d07c:	85 c0                	test   eax,eax
c001d07e:	0f 85 2f 06 00 00    	jne    c001d6b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d084:	83 ec 0c             	sub    esp,0xc
c001d087:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d08a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d08e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d092:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d096:	0f af c2             	imul   eax,edx
c001d099:	50                   	push   eax
c001d09a:	e8 ac 27 ff ff       	call   c000f84b <malloc>
c001d09f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d0a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d0a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d0a9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d0ad:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d0b1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d0b5:	0f af c2             	imul   eax,edx
c001d0b8:	99                   	cdq    
c001d0b9:	52                   	push   edx
c001d0ba:	50                   	push   eax
c001d0bb:	55                   	push   ebp
c001d0bc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d0bf:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d0c2:	83 c4 20             	add    esp,0x20
c001d0c5:	85 c0                	test   eax,eax
c001d0c7:	0f 84 e6 05 00 00    	je     c001d6b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0cd:	52                   	push   edx
c001d0ce:	31 d2                	xor    edx,edx
c001d0d0:	52                   	push   edx
c001d0d1:	50                   	push   eax
c001d0d2:	55                   	push   ebp
c001d0d3:	e8 b0 64 ff ff       	call   c0013588 <File::seek(unsigned long long)>
c001d0d8:	83 c4 10             	add    esp,0x10
c001d0db:	85 c0                	test   eax,eax
c001d0dd:	0f 85 d0 05 00 00    	jne    c001d6b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0e3:	83 ec 0c             	sub    esp,0xc
c001d0e6:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d0ea:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d0ee:	31 f6                	xor    esi,esi
c001d0f0:	0f af c2             	imul   eax,edx
c001d0f3:	50                   	push   eax
c001d0f4:	e8 52 27 ff ff       	call   c000f84b <malloc>
c001d0f9:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d0fc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d100:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d103:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d107:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d10b:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d10f:	0f af c2             	imul   eax,edx
c001d112:	99                   	cdq    
c001d113:	52                   	push   edx
c001d114:	50                   	push   eax
c001d115:	55                   	push   ebp
c001d116:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d119:	83 c4 20             	add    esp,0x20
c001d11c:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d120:	0f 86 8a 00 00 00    	jbe    c001d1b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d126:	0f b7 de             	movzx  ebx,si
c001d129:	c1 e3 05             	shl    ebx,0x5
c001d12c:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d130:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d133:	75 75                	jne    c001d1aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d135:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d138:	31 d2                	xor    edx,edx
c001d13a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d13e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d141:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d145:	50                   	push   eax
c001d146:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d149:	52                   	push   edx
c001d14a:	50                   	push   eax
c001d14b:	55                   	push   ebp
c001d14c:	e8 37 64 ff ff       	call   c0013588 <File::seek(unsigned long long)>
c001d151:	83 c4 10             	add    esp,0x10
c001d154:	85 c0                	test   eax,eax
c001d156:	0f 85 57 05 00 00    	jne    c001d6b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d15c:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d163:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d166:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d16a:	31 d2                	xor    edx,edx
c001d16c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d170:	83 ec 0c             	sub    esp,0xc
c001d173:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d177:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d17e:	50                   	push   eax
c001d17f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d187:	52                   	push   edx
c001d188:	50                   	push   eax
c001d189:	55                   	push   ebp
c001d18a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d18d:	83 c4 1c             	add    esp,0x1c
c001d190:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d193:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d196:	50                   	push   eax
c001d197:	6a 00                	push   0x0
c001d199:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d19d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d1a1:	50                   	push   eax
c001d1a2:	e8 d9 35 fe ff       	call   c0000780 <memset>
c001d1a7:	83 c4 10             	add    esp,0x10
c001d1aa:	46                   	inc    esi
c001d1ab:	e9 6c ff ff ff       	jmp    c001d11c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d1b0:	53                   	push   ebx
c001d1b1:	31 db                	xor    ebx,ebx
c001d1b3:	68 00 01 00 00       	push   0x100
c001d1b8:	6a 00                	push   0x0
c001d1ba:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d1be:	50                   	push   eax
c001d1bf:	e8 bc 35 fe ff       	call   c0000780 <memset>
c001d1c4:	83 c4 0c             	add    esp,0xc
c001d1c7:	68 00 01 00 00       	push   0x100
c001d1cc:	6a 00                	push   0x0
c001d1ce:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d1d5:	50                   	push   eax
c001d1d6:	e8 a5 35 fe ff       	call   c0000780 <memset>
c001d1db:	83 c4 10             	add    esp,0x10
c001d1de:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d1e6:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d1ee:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d1f6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d1fe:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d206:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d20a:	0f 86 30 01 00 00    	jbe    c001d340 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d210:	0f b7 f3             	movzx  esi,bx
c001d213:	6b f6 28             	imul   esi,esi,0x28
c001d216:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d21a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d21d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d221:	52                   	push   edx
c001d222:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d226:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d22a:	8b 06                	mov    eax,DWORD PTR [esi]
c001d22c:	6b d2 28             	imul   edx,edx,0x28
c001d22f:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d233:	31 d2                	xor    edx,edx
c001d235:	52                   	push   edx
c001d236:	50                   	push   eax
c001d237:	55                   	push   ebp
c001d238:	e8 4b 63 ff ff       	call   c0013588 <File::seek(unsigned long long)>
c001d23d:	83 c4 0c             	add    esp,0xc
c001d240:	6a 20                	push   0x20
c001d242:	6a 00                	push   0x0
c001d244:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d24b:	51                   	push   ecx
c001d24c:	e8 2f 35 fe ff       	call   c0000780 <memset>
c001d251:	59                   	pop    ecx
c001d252:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d255:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d259:	52                   	push   edx
c001d25a:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d261:	51                   	push   ecx
c001d262:	6a 00                	push   0x0
c001d264:	6a 1f                	push   0x1f
c001d266:	55                   	push   ebp
c001d267:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d26a:	83 c4 1c             	add    esp,0x1c
c001d26d:	6a 09                	push   0x9
c001d26f:	68 f8 c1 02 c0       	push   0xc002c1f8
c001d274:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d27b:	51                   	push   ecx
c001d27c:	e8 c7 33 fe ff       	call   c0000648 <memcmp>
c001d281:	83 c4 10             	add    esp,0x10
c001d284:	85 c0                	test   eax,eax
c001d286:	75 21                	jne    c001d2a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d288:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d28c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d290:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d294:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d298:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d29b:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d2a2:	89 d0                	mov    eax,edx
c001d2a4:	40                   	inc    eax
c001d2a5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d2a9:	50                   	push   eax
c001d2aa:	6a 09                	push   0x9
c001d2ac:	68 02 c2 02 c0       	push   0xc002c202
c001d2b1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2b8:	50                   	push   eax
c001d2b9:	e8 8a 33 fe ff       	call   c0000648 <memcmp>
c001d2be:	83 c4 10             	add    esp,0x10
c001d2c1:	85 c0                	test   eax,eax
c001d2c3:	75 21                	jne    c001d2e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d2c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d2c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d2cd:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d2d1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d2d5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d2d8:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d2df:	89 d0                	mov    eax,edx
c001d2e1:	40                   	inc    eax
c001d2e2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d2e6:	50                   	push   eax
c001d2e7:	50                   	push   eax
c001d2e8:	68 ce c1 02 c0       	push   0xc002c1ce
c001d2ed:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2f4:	50                   	push   eax
c001d2f5:	e8 ce 35 fe ff       	call   c00008c8 <strcmp>
c001d2fa:	83 c4 10             	add    esp,0x10
c001d2fd:	85 c0                	test   eax,eax
c001d2ff:	75 0f                	jne    c001d310 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d301:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d304:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d308:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d30c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d310:	50                   	push   eax
c001d311:	50                   	push   eax
c001d312:	68 d6 c1 02 c0       	push   0xc002c1d6
c001d317:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d31e:	50                   	push   eax
c001d31f:	e8 a4 35 fe ff       	call   c00008c8 <strcmp>
c001d324:	83 c4 10             	add    esp,0x10
c001d327:	85 c0                	test   eax,eax
c001d329:	75 0f                	jne    c001d33a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d32b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d32e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d332:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d336:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d33a:	43                   	inc    ebx
c001d33b:	e9 c6 fe ff ff       	jmp    c001d206 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d340:	31 d2                	xor    edx,edx
c001d342:	50                   	push   eax
c001d343:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d347:	52                   	push   edx
c001d348:	50                   	push   eax
c001d349:	55                   	push   ebp
c001d34a:	e8 39 62 ff ff       	call   c0013588 <File::seek(unsigned long long)>
c001d34f:	58                   	pop    eax
c001d350:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d354:	e8 f2 24 ff ff       	call   c000f84b <malloc>
c001d359:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d35c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d360:	31 d2                	xor    edx,edx
c001d362:	58                   	pop    eax
c001d363:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d367:	53                   	push   ebx
c001d368:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d36c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d370:	52                   	push   edx
c001d371:	50                   	push   eax
c001d372:	55                   	push   ebp
c001d373:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d376:	83 c4 14             	add    esp,0x14
c001d379:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d37d:	e8 c9 24 ff ff       	call   c000f84b <malloc>
c001d382:	31 d2                	xor    edx,edx
c001d384:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d388:	83 c4 0c             	add    esp,0xc
c001d38b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d38f:	52                   	push   edx
c001d390:	50                   	push   eax
c001d391:	55                   	push   ebp
c001d392:	e8 f1 61 ff ff       	call   c0013588 <File::seek(unsigned long long)>
c001d397:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d39a:	31 d2                	xor    edx,edx
c001d39c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d39f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d3a3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d3a7:	52                   	push   edx
c001d3a8:	50                   	push   eax
c001d3a9:	55                   	push   ebp
c001d3aa:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d3ad:	83 c4 20             	add    esp,0x20
c001d3b0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d3b8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d3bc:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d3c0:	0f 84 f1 02 00 00    	je     c001d6b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001d3c6:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d3cd:	31 d2                	xor    edx,edx
c001d3cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d3d3:	c1 e8 03             	shr    eax,0x3
c001d3d6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d3da:	51                   	push   ecx
c001d3db:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d3df:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d3e3:	52                   	push   edx
c001d3e4:	50                   	push   eax
c001d3e5:	55                   	push   ebp
c001d3e6:	e8 9d 61 ff ff       	call   c0013588 <File::seek(unsigned long long)>
c001d3eb:	5b                   	pop    ebx
c001d3ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3f0:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d3f7:	e8 4f 24 ff ff       	call   c000f84b <malloc>
c001d3fc:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d3ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d403:	31 d2                	xor    edx,edx
c001d405:	5e                   	pop    esi
c001d406:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d40a:	50                   	push   eax
c001d40b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d40f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d413:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d41a:	52                   	push   edx
c001d41b:	50                   	push   eax
c001d41c:	55                   	push   ebp
c001d41d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d420:	83 c4 20             	add    esp,0x20
c001d423:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d42b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d42f:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d433:	0f 8d 62 02 00 00    	jge    c001d69b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001d439:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d43d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d441:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d446:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d449:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d44d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d451:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d455:	89 d8                	mov    eax,ebx
c001d457:	c1 e8 08             	shr    eax,0x8
c001d45a:	89 c6                	mov    esi,eax
c001d45c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d460:	c1 e6 04             	shl    esi,0x4
c001d463:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d467:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d46a:	85 d2                	test   edx,edx
c001d46c:	0f 85 bf 00 00 00    	jne    c001d531 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d472:	83 ec 0c             	sub    esp,0xc
c001d475:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d479:	03 06                	add    eax,DWORD PTR [esi]
c001d47b:	50                   	push   eax
c001d47c:	e8 4b f8 ff ff       	call   c001cccc <Thr::getAddressOfKernelSymbol(char const*)>
c001d481:	83 c4 10             	add    esp,0x10
c001d484:	89 c2                	mov    edx,eax
c001d486:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d48b:	85 c0                	test   eax,eax
c001d48d:	0f 85 9e 00 00 00    	jne    c001d531 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d493:	83 ec 0c             	sub    esp,0xc
c001d496:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d49a:	03 06                	add    eax,DWORD PTR [esi]
c001d49c:	50                   	push   eax
c001d49d:	e8 5b 10 ff ff       	call   c000e4fd <Krnl::resolveCompatibilitySymbol(char*)>
c001d4a2:	83 c4 10             	add    esp,0x10
c001d4a5:	89 c2                	mov    edx,eax
c001d4a7:	85 c0                	test   eax,eax
c001d4a9:	0f 85 82 00 00 00    	jne    c001d531 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d4af:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d4b3:	50                   	push   eax
c001d4b4:	50                   	push   eax
c001d4b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4b9:	03 06                	add    eax,DWORD PTR [esi]
c001d4bb:	50                   	push   eax
c001d4bc:	68 0c c2 02 c0       	push   0xc002c20c
c001d4c1:	e8 41 5a ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001d4c6:	58                   	pop    eax
c001d4c7:	5a                   	pop    edx
c001d4c8:	68 26 c2 02 c0       	push   0xc002c226
c001d4cd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4d4:	50                   	push   eax
c001d4d5:	e8 62 33 fe ff       	call   c000083c <strcpy>
c001d4da:	59                   	pop    ecx
c001d4db:	58                   	pop    eax
c001d4dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4e0:	03 06                	add    eax,DWORD PTR [esi]
c001d4e2:	50                   	push   eax
c001d4e3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4ea:	50                   	push   eax
c001d4eb:	e8 8c 34 fe ff       	call   c000097c <strcat>
c001d4f0:	58                   	pop    eax
c001d4f1:	5a                   	pop    edx
c001d4f2:	68 bc c2 02 c0       	push   0xc002c2bc
c001d4f7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4fe:	50                   	push   eax
c001d4ff:	e8 78 34 fe ff       	call   c000097c <strcat>
c001d504:	83 c4 10             	add    esp,0x10
c001d507:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d50c:	0f 84 43 01 00 00    	je     c001d655 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d512:	83 ec 0c             	sub    esp,0xc
c001d515:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d51c:	50                   	push   eax
c001d51d:	e8 23 d1 ff ff       	call   c001a645 <Krnl::panic(char const*)>
c001d522:	83 c4 10             	add    esp,0x10
c001d525:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d529:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d52d:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d531:	80 fb 01             	cmp    bl,0x1
c001d534:	75 7d                	jne    c001d5b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001d536:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d53d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d541:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d545:	01 ce                	add    esi,ecx
c001d547:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d54d:	0f 94 c0             	sete   al
c001d550:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d556:	0f 94 c3             	sete   bl
c001d559:	09 c3                	or     ebx,eax
c001d55b:	8b 06                	mov    eax,DWORD PTR [esi]
c001d55d:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d562:	74 36                	je     c001d59a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001d564:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d567:	84 db                	test   bl,bl
c001d569:	75 0a                	jne    c001d575 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001d56b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d56f:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d573:	76 37                	jbe    c001d5ac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d575:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d579:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d57e:	0f 84 d1 00 00 00    	je     c001d655 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d584:	83 ec 0c             	sub    esp,0xc
c001d587:	68 3d c2 02 c0       	push   0xc002c23d
c001d58c:	e8 b4 d0 ff ff       	call   c001a645 <Krnl::panic(char const*)>
c001d591:	83 c4 10             	add    esp,0x10
c001d594:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d598:	eb 12                	jmp    c001d5ac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d59a:	01 c1                	add    ecx,eax
c001d59c:	84 db                	test   bl,bl
c001d59e:	75 0c                	jne    c001d5ac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d5a0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d5a4:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d5a8:	77 02                	ja     c001d5ac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d5aa:	01 d1                	add    ecx,edx
c001d5ac:	89 0e                	mov    DWORD PTR [esi],ecx
c001d5ae:	e9 df 00 00 00       	jmp    c001d692 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d5b3:	80 fb 02             	cmp    bl,0x2
c001d5b6:	75 71                	jne    c001d629 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001d5b8:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d5bf:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d5c3:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d5c7:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d5cd:	74 15                	je     c001d5e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d5cf:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d5d5:	74 0d                	je     c001d5e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d5d7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d5db:	83 e8 04             	sub    eax,0x4
c001d5de:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d5e2:	76 1f                	jbe    c001d603 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001d5e4:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d5e8:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d5ed:	74 66                	je     c001d655 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d5ef:	83 ec 0c             	sub    esp,0xc
c001d5f2:	68 59 c2 02 c0       	push   0xc002c259
c001d5f7:	e8 49 d0 ff ff       	call   c001a645 <Krnl::panic(char const*)>
c001d5fc:	83 c4 10             	add    esp,0x10
c001d5ff:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d603:	8b 06                	mov    eax,DWORD PTR [esi]
c001d605:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d60a:	74 13                	je     c001d61f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d60c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d610:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d617:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d61b:	01 c8                	add    eax,ecx
c001d61d:	eb 04                	jmp    c001d623 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d61f:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d623:	01 c2                	add    edx,eax
c001d625:	89 16                	mov    DWORD PTR [esi],edx
c001d627:	eb 69                	jmp    c001d692 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d629:	0f b6 db             	movzx  ebx,bl
c001d62c:	50                   	push   eax
c001d62d:	50                   	push   eax
c001d62e:	53                   	push   ebx
c001d62f:	68 75 c2 02 c0       	push   0xc002c275
c001d634:	e8 ce 58 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001d639:	83 c4 10             	add    esp,0x10
c001d63c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d641:	74 12                	je     c001d655 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d643:	83 ec 0c             	sub    esp,0xc
c001d646:	68 80 c2 02 c0       	push   0xc002c280
c001d64b:	e8 f5 cf ff ff       	call   c001a645 <Krnl::panic(char const*)>
c001d650:	83 c4 10             	add    esp,0x10
c001d653:	eb 3d                	jmp    c001d692 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d655:	83 ec 0c             	sub    esp,0xc
c001d658:	55                   	push   ebp
c001d659:	e8 ca 5e ff ff       	call   c0013528 <File::close()>
c001d65e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d661:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d664:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d667:	59                   	pop    ecx
c001d668:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d66c:	e8 ea 21 ff ff       	call   c000f85b <free>
c001d671:	5b                   	pop    ebx
c001d672:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d676:	e8 e0 21 ff ff       	call   c000f85b <free>
c001d67b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d67e:	e8 d8 21 ff ff       	call   c000f85b <free>
c001d683:	5e                   	pop    esi
c001d684:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d688:	e8 ce 21 ff ff       	call   c000f85b <free>
c001d68d:	83 c4 10             	add    esp,0x10
c001d690:	eb 21                	jmp    c001d6b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d692:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d696:	e9 90 fd ff ff       	jmp    c001d42b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d69b:	83 ec 0c             	sub    esp,0xc
c001d69e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d6a2:	e8 b4 21 ff ff       	call   c000f85b <free>
c001d6a7:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d6ab:	83 c4 10             	add    esp,0x10
c001d6ae:	e9 05 fd ff ff       	jmp    c001d3b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d6b3:	31 c0                	xor    eax,eax
c001d6b5:	eb 33                	jmp    c001d6ea <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d6b7:	83 ec 0c             	sub    esp,0xc
c001d6ba:	55                   	push   ebp
c001d6bb:	e8 68 5e ff ff       	call   c0013528 <File::close()>
c001d6c0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d6c3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d6c6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d6c9:	58                   	pop    eax
c001d6ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d6ce:	e8 88 21 ff ff       	call   c000f85b <free>
c001d6d3:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d6d6:	e8 80 21 ff ff       	call   c000f85b <free>
c001d6db:	5a                   	pop    edx
c001d6dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d6e0:	e8 76 21 ff ff       	call   c000f85b <free>
c001d6e5:	83 c4 10             	add    esp,0x10
c001d6e8:	b0 01                	mov    al,0x1
c001d6ea:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d6f0:	5b                   	pop    ebx
c001d6f1:	5e                   	pop    esi
c001d6f2:	5f                   	pop    edi
c001d6f3:	5d                   	pop    ebp
c001d6f4:	c3                   	ret    

c001d6f5 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d6f5:	56                   	push   esi
c001d6f6:	31 d2                	xor    edx,edx
c001d6f8:	53                   	push   ebx
c001d6f9:	8b 1d 40 13 03 c0    	mov    ebx,DWORD PTR ds:0xc0031340
c001d6ff:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d703:	39 d3                	cmp    ebx,edx
c001d705:	7e 1b                	jle    c001d722 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d707:	8b 04 95 60 15 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffceaa0]
c001d70e:	39 c8                	cmp    eax,ecx
c001d710:	77 0d                	ja     c001d71f <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d712:	8b 34 95 60 13 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffceca0]
c001d719:	01 c6                	add    esi,eax
c001d71b:	39 ce                	cmp    esi,ecx
c001d71d:	77 05                	ja     c001d724 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d71f:	42                   	inc    edx
c001d720:	eb e1                	jmp    c001d703 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d722:	31 c0                	xor    eax,eax
c001d724:	5b                   	pop    ebx
c001d725:	5e                   	pop    esi
c001d726:	c3                   	ret    

c001d727 <Thr::getDriverNameFromAddress(unsigned long)>:
c001d727:	53                   	push   ebx
c001d728:	31 c0                	xor    eax,eax
c001d72a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d72e:	8b 1d 40 13 03 c0    	mov    ebx,DWORD PTR ds:0xc0031340
c001d734:	39 c3                	cmp    ebx,eax
c001d736:	7e 22                	jle    c001d75a <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d738:	8b 14 85 60 15 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffceaa0]
c001d73f:	39 ca                	cmp    edx,ecx
c001d741:	77 14                	ja     c001d757 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d743:	03 14 85 60 13 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffceca0]
c001d74a:	39 ca                	cmp    edx,ecx
c001d74c:	76 09                	jbe    c001d757 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d74e:	8b 04 85 60 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce8a0]
c001d755:	eb 05                	jmp    c001d75c <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d757:	40                   	inc    eax
c001d758:	eb da                	jmp    c001d734 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d75a:	31 c0                	xor    eax,eax
c001d75c:	5b                   	pop    ebx
c001d75d:	c3                   	ret    

c001d75e <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d75e:	53                   	push   ebx
c001d75f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d763:	53                   	push   ebx
c001d764:	e8 8c ff ff ff       	call   c001d6f5 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d769:	5a                   	pop    edx
c001d76a:	31 d2                	xor    edx,edx
c001d76c:	85 c0                	test   eax,eax
c001d76e:	74 04                	je     c001d774 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d770:	89 da                	mov    edx,ebx
c001d772:	29 c2                	sub    edx,eax
c001d774:	89 d0                	mov    eax,edx
c001d776:	5b                   	pop    ebx
c001d777:	c3                   	ret    

c001d778 <Thr::loadDLL(char const*, bool)>:
c001d778:	55                   	push   ebp
c001d779:	57                   	push   edi
c001d77a:	56                   	push   esi
c001d77b:	53                   	push   ebx
c001d77c:	81 ec 34 01 00 00    	sub    esp,0x134
c001d782:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d789:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d790:	56                   	push   esi
c001d791:	68 98 c2 02 c0       	push   0xc002c298
c001d796:	e8 6c 57 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001d79b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d7a2:	e8 a4 20 ff ff       	call   c000f84b <malloc>
c001d7a7:	83 c4 0c             	add    esp,0xc
c001d7aa:	89 c3                	mov    ebx,eax
c001d7ac:	ff 35 34 1b 03 c0    	push   DWORD PTR ds:0xc0031b34
c001d7b2:	56                   	push   esi
c001d7b3:	50                   	push   eax
c001d7b4:	e8 ad 5c ff ff       	call   c0013466 <File::File(char const*, Process*)>
c001d7b9:	83 c4 10             	add    esp,0x10
c001d7bc:	85 db                	test   ebx,ebx
c001d7be:	75 3c                	jne    c001d7fc <Thr::loadDLL(char const*, bool)+0x84>
c001d7c0:	89 e8                	mov    eax,ebp
c001d7c2:	84 c0                	test   al,al
c001d7c4:	0f 84 d5 01 00 00    	je     c001d99f <Thr::loadDLL(char const*, bool)+0x227>
c001d7ca:	57                   	push   edi
c001d7cb:	57                   	push   edi
c001d7cc:	68 a9 c2 02 c0       	push   0xc002c2a9
c001d7d1:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d7d5:	57                   	push   edi
c001d7d6:	e8 61 30 fe ff       	call   c000083c <strcpy>
c001d7db:	58                   	pop    eax
c001d7dc:	5a                   	pop    edx
c001d7dd:	56                   	push   esi
c001d7de:	57                   	push   edi
c001d7df:	e8 98 31 fe ff       	call   c000097c <strcat>
c001d7e4:	59                   	pop    ecx
c001d7e5:	58                   	pop    eax
c001d7e6:	68 bc c2 02 c0       	push   0xc002c2bc
c001d7eb:	57                   	push   edi
c001d7ec:	e8 8b 31 fe ff       	call   c000097c <strcat>
c001d7f1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d7f4:	e8 4c ce ff ff       	call   c001a645 <Krnl::panic(char const*)>
c001d7f9:	83 c4 10             	add    esp,0x10
c001d7fc:	51                   	push   ecx
c001d7fd:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d801:	50                   	push   eax
c001d802:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d806:	50                   	push   eax
c001d807:	53                   	push   ebx
c001d808:	e8 69 5f ff ff       	call   c0013776 <File::stat(unsigned long long*, bool*)>
c001d80d:	83 c4 10             	add    esp,0x10
c001d810:	85 db                	test   ebx,ebx
c001d812:	74 0c                	je     c001d820 <Thr::loadDLL(char const*, bool)+0xa8>
c001d814:	83 ec 0c             	sub    esp,0xc
c001d817:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d819:	53                   	push   ebx
c001d81a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d81d:	83 c4 10             	add    esp,0x10
c001d820:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d825:	75 0a                	jne    c001d831 <Thr::loadDLL(char const*, bool)+0xb9>
c001d827:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d82b:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d82f:	75 3c                	jne    c001d86d <Thr::loadDLL(char const*, bool)+0xf5>
c001d831:	89 e8                	mov    eax,ebp
c001d833:	84 c0                	test   al,al
c001d835:	0f 84 4c 01 00 00    	je     c001d987 <Thr::loadDLL(char const*, bool)+0x20f>
c001d83b:	51                   	push   ecx
c001d83c:	51                   	push   ecx
c001d83d:	68 a9 c2 02 c0       	push   0xc002c2a9
c001d842:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d846:	53                   	push   ebx
c001d847:	e8 f0 2f fe ff       	call   c000083c <strcpy>
c001d84c:	5f                   	pop    edi
c001d84d:	58                   	pop    eax
c001d84e:	56                   	push   esi
c001d84f:	53                   	push   ebx
c001d850:	e8 27 31 fe ff       	call   c000097c <strcat>
c001d855:	58                   	pop    eax
c001d856:	5a                   	pop    edx
c001d857:	68 bc c2 02 c0       	push   0xc002c2bc
c001d85c:	53                   	push   ebx
c001d85d:	e8 1a 31 fe ff       	call   c000097c <strcat>
c001d862:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d865:	e8 db cd ff ff       	call   c001a645 <Krnl::panic(char const*)>
c001d86a:	83 c4 10             	add    esp,0x10
c001d86d:	e8 74 45 ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c001d872:	51                   	push   ecx
c001d873:	6a 03                	push   0x3
c001d875:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d879:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d87d:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d883:	83 d3 00             	adc    ebx,0x0
c001d886:	89 ca                	mov    edx,ecx
c001d888:	89 d1                	mov    ecx,edx
c001d88a:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d88e:	51                   	push   ecx
c001d88f:	50                   	push   eax
c001d890:	e8 cb 4b ff ff       	call   c0012460 <VAS::allocatePages(int, int)>
c001d895:	5f                   	pop    edi
c001d896:	89 c3                	mov    ebx,eax
c001d898:	58                   	pop    eax
c001d899:	53                   	push   ebx
c001d89a:	68 be c2 02 c0       	push   0xc002c2be
c001d89f:	e8 63 56 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001d8a4:	89 34 24             	mov    DWORD PTR [esp],esi
c001d8a7:	e8 f0 2e fe ff       	call   c000079c <strlen>
c001d8ac:	8b 3d 40 13 03 c0    	mov    edi,DWORD PTR ds:0xc0031340
c001d8b2:	40                   	inc    eax
c001d8b3:	89 04 24             	mov    DWORD PTR [esp],eax
c001d8b6:	e8 90 1f ff ff       	call   c000f84b <malloc>
c001d8bb:	89 04 bd 60 17 03 c0 	mov    DWORD PTR [edi*4-0x3ffce8a0],eax
c001d8c2:	58                   	pop    eax
c001d8c3:	a1 40 13 03 c0       	mov    eax,ds:0xc0031340
c001d8c8:	5a                   	pop    edx
c001d8c9:	56                   	push   esi
c001d8ca:	ff 34 85 60 17 03 c0 	push   DWORD PTR [eax*4-0x3ffce8a0]
c001d8d1:	e8 66 2f fe ff       	call   c000083c <strcpy>
c001d8d6:	a1 40 13 03 c0       	mov    eax,ds:0xc0031340
c001d8db:	8d 50 01             	lea    edx,[eax+0x1]
c001d8de:	89 1c 85 60 15 03 c0 	mov    DWORD PTR [eax*4-0x3ffceaa0],ebx
c001d8e5:	89 15 40 13 03 c0    	mov    DWORD PTR ds:0xc0031340,edx
c001d8eb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d8ef:	83 c4 0c             	add    esp,0xc
c001d8f2:	89 14 85 60 13 03 c0 	mov    DWORD PTR [eax*4-0x3ffceca0],edx
c001d8f9:	6a 01                	push   0x1
c001d8fb:	53                   	push   ebx
c001d8fc:	56                   	push   esi
c001d8fd:	e8 d7 f6 ff ff       	call   c001cfd9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d902:	83 c4 10             	add    esp,0x10
c001d905:	89 c7                	mov    edi,eax
c001d907:	84 c0                	test   al,al
c001d909:	0f 85 8c 00 00 00    	jne    c001d99b <Thr::loadDLL(char const*, bool)+0x223>
c001d90f:	89 e8                	mov    eax,ebp
c001d911:	84 c0                	test   al,al
c001d913:	74 76                	je     c001d98b <Thr::loadDLL(char const*, bool)+0x213>
c001d915:	83 ec 0c             	sub    esp,0xc
c001d918:	68 cb c2 02 c0       	push   0xc002c2cb
c001d91d:	e8 23 cd ff ff       	call   c001a645 <Krnl::panic(char const*)>
c001d922:	83 c4 10             	add    esp,0x10
c001d925:	eb 64                	jmp    c001d98b <Thr::loadDLL(char const*, bool)+0x213>
c001d927:	e8 ba 44 ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c001d92c:	89 f5                	mov    ebp,esi
c001d92e:	c1 e5 0c             	shl    ebp,0xc
c001d931:	52                   	push   edx
c001d932:	01 dd                	add    ebp,ebx
c001d934:	52                   	push   edx
c001d935:	55                   	push   ebp
c001d936:	50                   	push   eax
c001d937:	e8 9e 46 ff ff       	call   c0011fda <VAS::getPageTableEntry(unsigned long)>
c001d93c:	83 c4 10             	add    esp,0x10
c001d93f:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d942:	75 0c                	jne    c001d950 <Thr::loadDLL(char const*, bool)+0x1d8>
c001d944:	83 ec 0c             	sub    esp,0xc
c001d947:	55                   	push   ebp
c001d948:	e8 16 25 ff ff       	call   c000fe63 <Phys::freePage(unsigned long)>
c001d94d:	83 c4 10             	add    esp,0x10
c001d950:	46                   	inc    esi
c001d951:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d955:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d959:	05 ff 0f 00 00       	add    eax,0xfff
c001d95e:	83 d2 00             	adc    edx,0x0
c001d961:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d965:	c1 ea 0c             	shr    edx,0xc
c001d968:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d96c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d970:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d974:	ba 00 00 00 00       	mov    edx,0x0
c001d979:	89 d0                	mov    eax,edx
c001d97b:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d97f:	72 a6                	jb     c001d927 <Thr::loadDLL(char const*, bool)+0x1af>
c001d981:	89 f8                	mov    eax,edi
c001d983:	84 c0                	test   al,al
c001d985:	75 18                	jne    c001d99f <Thr::loadDLL(char const*, bool)+0x227>
c001d987:	31 db                	xor    ebx,ebx
c001d989:	eb 14                	jmp    c001d99f <Thr::loadDLL(char const*, bool)+0x227>
c001d98b:	83 ec 0c             	sub    esp,0xc
c001d98e:	68 ea c2 02 c0       	push   0xc002c2ea
c001d993:	e8 ad cc ff ff       	call   c001a645 <Krnl::panic(char const*)>
c001d998:	83 c4 10             	add    esp,0x10
c001d99b:	31 f6                	xor    esi,esi
c001d99d:	eb b2                	jmp    c001d951 <Thr::loadDLL(char const*, bool)+0x1d9>
c001d99f:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d9a5:	89 d8                	mov    eax,ebx
c001d9a7:	5b                   	pop    ebx
c001d9a8:	5e                   	pop    esi
c001d9a9:	5f                   	pop    edi
c001d9aa:	5d                   	pop    ebp
c001d9ab:	c3                   	ret    

c001d9ac <Thr::executeDLL(unsigned long, void*)>:
c001d9ac:	56                   	push   esi
c001d9ad:	53                   	push   ebx
c001d9ae:	52                   	push   edx
c001d9af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d9b3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d9b7:	85 db                	test   ebx,ebx
c001d9b9:	75 10                	jne    c001d9cb <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d9bb:	83 ec 0c             	sub    esp,0xc
c001d9be:	68 06 c3 02 c0       	push   0xc002c306
c001d9c3:	e8 7d cc ff ff       	call   c001a645 <Krnl::panic(char const*)>
c001d9c8:	83 c4 10             	add    esp,0x10
c001d9cb:	50                   	push   eax
c001d9cc:	50                   	push   eax
c001d9cd:	53                   	push   ebx
c001d9ce:	68 30 c3 02 c0       	push   0xc002c330
c001d9d3:	e8 2f 55 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001d9d8:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d9dc:	89 d8                	mov    eax,ebx
c001d9de:	83 c4 14             	add    esp,0x14
c001d9e1:	5b                   	pop    ebx
c001d9e2:	5e                   	pop    esi
c001d9e3:	ff e0                	jmp    eax
c001d9e5:	90                   	nop

c001d9e6 <changeTSS>:
c001d9e6:	83 ec 14             	sub    esp,0x14
c001d9e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d9ee:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d9f1:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d9f6:	c1 e2 15             	shl    edx,0x15
c001d9f9:	29 d0                	sub    eax,edx
c001d9fb:	50                   	push   eax
c001d9fc:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001da01:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001da07:	05 7c 11 00 00       	add    eax,0x117c
c001da0c:	50                   	push   eax
c001da0d:	e8 78 3a ff ff       	call   c001148a <TSS::setESP(unsigned long)>
c001da12:	83 c4 1c             	add    esp,0x1c
c001da15:	c3                   	ret    

c001da16 <Process::addArgs(char**)>:
c001da16:	57                   	push   edi
c001da17:	56                   	push   esi
c001da18:	53                   	push   ebx
c001da19:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001da1d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001da21:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001da2b:	85 ff                	test   edi,edi
c001da2d:	74 3d                	je     c001da6c <Process::addArgs(char**)+0x56>
c001da2f:	8b 07                	mov    eax,DWORD PTR [edi]
c001da31:	85 c0                	test   eax,eax
c001da33:	74 37                	je     c001da6c <Process::addArgs(char**)+0x56>
c001da35:	31 db                	xor    ebx,ebx
c001da37:	83 ec 0c             	sub    esp,0xc
c001da3a:	50                   	push   eax
c001da3b:	e8 5c 2d fe ff       	call   c000079c <strlen>
c001da40:	40                   	inc    eax
c001da41:	89 04 24             	mov    DWORD PTR [esp],eax
c001da44:	e8 02 1e ff ff       	call   c000f84b <malloc>
c001da49:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001da50:	5a                   	pop    edx
c001da51:	59                   	pop    ecx
c001da52:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001da55:	43                   	inc    ebx
c001da56:	50                   	push   eax
c001da57:	e8 e0 2d fe ff       	call   c000083c <strcpy>
c001da5c:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001da62:	83 c4 10             	add    esp,0x10
c001da65:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001da68:	85 c0                	test   eax,eax
c001da6a:	75 cb                	jne    c001da37 <Process::addArgs(char**)+0x21>
c001da6c:	5b                   	pop    ebx
c001da6d:	5e                   	pop    esi
c001da6e:	5f                   	pop    edi
c001da6f:	c3                   	ret    

c001da70 <Process::Process(char const*, Process*, char**)>:
c001da70:	56                   	push   esi
c001da71:	53                   	push   ebx
c001da72:	83 ec 14             	sub    esp,0x14
c001da75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da79:	05 0c 02 00 00       	add    eax,0x20c
c001da7e:	bb 07 00 00 00       	mov    ebx,0x7
c001da83:	89 c6                	mov    esi,eax
c001da85:	85 db                	test   ebx,ebx
c001da87:	78 12                	js     c001da9b <Process::Process(char const*, Process*, char**)+0x2b>
c001da89:	83 ec 0c             	sub    esp,0xc
c001da8c:	56                   	push   esi
c001da8d:	e8 30 b3 00 00       	call   c0028dc2 <ThreadControlBlock::ThreadControlBlock()>
c001da92:	83 c4 10             	add    esp,0x10
c001da95:	83 c6 63             	add    esi,0x63
c001da98:	4b                   	dec    ebx
c001da99:	eb ea                	jmp    c001da85 <Process::Process(char const*, Process*, char**)+0x15>
c001da9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da9f:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001daa6:	83 ec 0c             	sub    esp,0xc
c001daa9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001daad:	e8 e4 c9 ff ff       	call   c001a496 <Krnl::newProcessEnv(Process*)>
c001dab2:	83 c4 10             	add    esp,0x10
c001dab5:	89 c2                	mov    edx,eax
c001dab7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dabb:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dac1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dac5:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dace:	a1 50 db 02 c0       	mov    eax,ds:0xc002db50
c001dad3:	8d 50 01             	lea    edx,[eax+0x1]
c001dad6:	89 15 50 db 02 c0    	mov    DWORD PTR ds:0xc002db50,edx
c001dadc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dae0:	89 02                	mov    DWORD PTR [edx],eax
c001dae2:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001daea:	83 ec 0c             	sub    esp,0xc
c001daed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001daf1:	e8 55 1d ff ff       	call   c000f84b <malloc>
c001daf6:	83 c4 10             	add    esp,0x10
c001daf9:	89 c3                	mov    ebx,eax
c001dafb:	83 ec 08             	sub    esp,0x8
c001dafe:	6a 00                	push   0x0
c001db00:	53                   	push   ebx
c001db01:	e8 02 4d ff ff       	call   c0012808 <VAS::VAS(bool)>
c001db06:	83 c4 10             	add    esp,0x10
c001db09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db0d:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001db13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db17:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001db21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db25:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001db29:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001db2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db33:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db39:	85 c0                	test   eax,eax
c001db3b:	74 42                	je     c001db7f <Process::Process(char const*, Process*, char**)+0x10f>
c001db3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db41:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db47:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001db4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db51:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001db57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db5b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db61:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001db67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db6b:	05 0c 01 00 00       	add    eax,0x10c
c001db70:	83 ec 08             	sub    esp,0x8
c001db73:	52                   	push   edx
c001db74:	50                   	push   eax
c001db75:	e8 c2 2c fe ff       	call   c000083c <strcpy>
c001db7a:	83 c4 10             	add    esp,0x10
c001db7d:	eb 63                	jmp    c001dbe2 <Process::Process(char const*, Process*, char**)+0x172>
c001db7f:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001db87:	83 ec 0c             	sub    esp,0xc
c001db8a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001db8e:	e8 b8 1c ff ff       	call   c000f84b <malloc>
c001db93:	83 c4 10             	add    esp,0x10
c001db96:	89 c3                	mov    ebx,eax
c001db98:	83 ec 08             	sub    esp,0x8
c001db9b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db9f:	53                   	push   ebx
c001dba0:	e8 e3 35 ff ff       	call   c0011188 <VgaText::VgaText(char const*)>
c001dba5:	83 c4 10             	add    esp,0x10
c001dba8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbac:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dbb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbb6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dbbc:	83 ec 0c             	sub    esp,0xc
c001dbbf:	50                   	push   eax
c001dbc0:	e8 b6 29 ff ff       	call   c001057b <addToTerminalCycle(VgaText*)>
c001dbc5:	83 c4 10             	add    esp,0x10
c001dbc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbcc:	05 0c 01 00 00       	add    eax,0x10c
c001dbd1:	83 ec 08             	sub    esp,0x8
c001dbd4:	68 4f c3 02 c0       	push   0xc002c34f
c001dbd9:	50                   	push   eax
c001dbda:	e8 5d 2c fe ff       	call   c000083c <strcpy>
c001dbdf:	83 c4 10             	add    esp,0x10
c001dbe2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbe6:	83 c0 0c             	add    eax,0xc
c001dbe9:	83 ec 08             	sub    esp,0x8
c001dbec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbf0:	50                   	push   eax
c001dbf1:	e8 46 2c fe ff       	call   c000083c <strcpy>
c001dbf6:	83 c4 10             	add    esp,0x10
c001dbf9:	83 ec 08             	sub    esp,0x8
c001dbfc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dc00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc04:	e8 0d fe ff ff       	call   c001da16 <Process::addArgs(char**)>
c001dc09:	83 c4 10             	add    esp,0x10
c001dc0c:	83 ec 08             	sub    esp,0x8
c001dc0f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc17:	e8 87 ee ff ff       	call   c001caa3 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001dc1c:	83 c4 10             	add    esp,0x10
c001dc1f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dc23:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dc27:	83 f0 01             	xor    eax,0x1
c001dc2a:	88 c2                	mov    dl,al
c001dc2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc30:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001dc36:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dc3b:	83 ec 08             	sub    esp,0x8
c001dc3e:	50                   	push   eax
c001dc3f:	68 4c c4 02 c0       	push   0xc002c44c
c001dc44:	e8 be 52 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001dc49:	83 c4 10             	add    esp,0x10
c001dc4c:	90                   	nop
c001dc4d:	83 c4 14             	add    esp,0x14
c001dc50:	5b                   	pop    ebx
c001dc51:	5e                   	pop    esi
c001dc52:	c3                   	ret    
c001dc53:	90                   	nop

c001dc54 <Process::Process(bool, char const*, Process*, char**)>:
c001dc54:	56                   	push   esi
c001dc55:	53                   	push   ebx
c001dc56:	83 ec 24             	sub    esp,0x24
c001dc59:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dc5d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dc61:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc65:	05 0c 02 00 00       	add    eax,0x20c
c001dc6a:	bb 07 00 00 00       	mov    ebx,0x7
c001dc6f:	89 c6                	mov    esi,eax
c001dc71:	85 db                	test   ebx,ebx
c001dc73:	78 12                	js     c001dc87 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001dc75:	83 ec 0c             	sub    esp,0xc
c001dc78:	56                   	push   esi
c001dc79:	e8 44 b1 00 00       	call   c0028dc2 <ThreadControlBlock::ThreadControlBlock()>
c001dc7e:	83 c4 10             	add    esp,0x10
c001dc81:	83 c6 63             	add    esi,0x63
c001dc84:	4b                   	dec    ebx
c001dc85:	eb ea                	jmp    c001dc71 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dc87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc8b:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dc92:	83 ec 0c             	sub    esp,0xc
c001dc95:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dc99:	e8 f8 c7 ff ff       	call   c001a496 <Krnl::newProcessEnv(Process*)>
c001dc9e:	83 c4 10             	add    esp,0x10
c001dca1:	89 c2                	mov    edx,eax
c001dca3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dca7:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dcad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcb1:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dcba:	a1 50 db 02 c0       	mov    eax,ds:0xc002db50
c001dcbf:	8d 50 01             	lea    edx,[eax+0x1]
c001dcc2:	89 15 50 db 02 c0    	mov    DWORD PTR ds:0xc002db50,edx
c001dcc8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dccc:	89 02                	mov    DWORD PTR [edx],eax
c001dcce:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001dcd6:	83 ec 0c             	sub    esp,0xc
c001dcd9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001dcdd:	e8 69 1b ff ff       	call   c000f84b <malloc>
c001dce2:	83 c4 10             	add    esp,0x10
c001dce5:	89 c3                	mov    ebx,eax
c001dce7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dcec:	83 ec 08             	sub    esp,0x8
c001dcef:	50                   	push   eax
c001dcf0:	53                   	push   ebx
c001dcf1:	e8 12 4b ff ff       	call   c0012808 <VAS::VAS(bool)>
c001dcf6:	83 c4 10             	add    esp,0x10
c001dcf9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcfd:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dd03:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd07:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dd11:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd15:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dd19:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dd1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd23:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd29:	85 c0                	test   eax,eax
c001dd2b:	74 42                	je     c001dd6f <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001dd2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd31:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd37:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dd3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd41:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dd47:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd4b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd51:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dd57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd5b:	05 0c 01 00 00       	add    eax,0x10c
c001dd60:	83 ec 08             	sub    esp,0x8
c001dd63:	52                   	push   edx
c001dd64:	50                   	push   eax
c001dd65:	e8 d2 2a fe ff       	call   c000083c <strcpy>
c001dd6a:	83 c4 10             	add    esp,0x10
c001dd6d:	eb 63                	jmp    c001ddd2 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001dd6f:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001dd77:	83 ec 0c             	sub    esp,0xc
c001dd7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001dd7e:	e8 c8 1a ff ff       	call   c000f84b <malloc>
c001dd83:	83 c4 10             	add    esp,0x10
c001dd86:	89 c3                	mov    ebx,eax
c001dd88:	83 ec 08             	sub    esp,0x8
c001dd8b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dd8f:	53                   	push   ebx
c001dd90:	e8 f3 33 ff ff       	call   c0011188 <VgaText::VgaText(char const*)>
c001dd95:	83 c4 10             	add    esp,0x10
c001dd98:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd9c:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dda2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dda6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ddac:	83 ec 0c             	sub    esp,0xc
c001ddaf:	50                   	push   eax
c001ddb0:	e8 c6 27 ff ff       	call   c001057b <addToTerminalCycle(VgaText*)>
c001ddb5:	83 c4 10             	add    esp,0x10
c001ddb8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddbc:	05 0c 01 00 00       	add    eax,0x10c
c001ddc1:	83 ec 08             	sub    esp,0x8
c001ddc4:	68 4f c3 02 c0       	push   0xc002c34f
c001ddc9:	50                   	push   eax
c001ddca:	e8 6d 2a fe ff       	call   c000083c <strcpy>
c001ddcf:	83 c4 10             	add    esp,0x10
c001ddd2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddd6:	83 c0 0c             	add    eax,0xc
c001ddd9:	83 ec 08             	sub    esp,0x8
c001dddc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dde0:	50                   	push   eax
c001dde1:	e8 56 2a fe ff       	call   c000083c <strcpy>
c001dde6:	83 c4 10             	add    esp,0x10
c001dde9:	83 ec 08             	sub    esp,0x8
c001ddec:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ddf0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ddf4:	e8 1d fc ff ff       	call   c001da16 <Process::addArgs(char**)>
c001ddf9:	83 c4 10             	add    esp,0x10
c001ddfc:	90                   	nop
c001ddfd:	83 c4 24             	add    esp,0x24
c001de00:	5b                   	pop    ebx
c001de01:	5e                   	pop    esi
c001de02:	c3                   	ret    

c001de03 <disableIRQs()>:
c001de03:	fa                   	cli    
c001de04:	ff 05 0c 1b 03 c0    	inc    DWORD PTR ds:0xc0031b0c
c001de0a:	c3                   	ret    

c001de0b <getIRQNestingLevel()>:
c001de0b:	a1 0c 1b 03 c0       	mov    eax,ds:0xc0031b0c
c001de10:	c3                   	ret    

c001de11 <enableIRQs()>:
c001de11:	a1 0c 1b 03 c0       	mov    eax,ds:0xc0031b0c
c001de16:	48                   	dec    eax
c001de17:	a3 0c 1b 03 c0       	mov    ds:0xc0031b0c,eax
c001de1c:	75 01                	jne    c001de1f <enableIRQs()+0xe>
c001de1e:	fb                   	sti    
c001de1f:	c3                   	ret    

c001de20 <lockScheduler()>:
c001de20:	eb e1                	jmp    c001de03 <disableIRQs()>

c001de22 <unlockScheduler()>:
c001de22:	eb ed                	jmp    c001de11 <enableIRQs()>

c001de24 <userModeEntryPoint(void*)>:
c001de24:	83 ec 0c             	sub    esp,0xc
c001de27:	e8 f6 ff ff ff       	call   c001de22 <unlockScheduler()>
c001de2c:	fb                   	sti    
c001de2d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de32:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001de35:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001de3b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001de3f:	83 c4 0c             	add    esp,0xc
c001de42:	e9 e3 24 fe ff       	jmp    c000032a <goToUsermode>

c001de47 <lockStuff()>:
c001de47:	e8 b7 ff ff ff       	call   c001de03 <disableIRQs()>
c001de4c:	ff 05 08 1b 03 c0    	inc    DWORD PTR ds:0xc0031b08
c001de52:	c3                   	ret    

c001de53 <taskStartupFunction>:
c001de53:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de58:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001de5b:	c3                   	ret    

c001de5c <updateTimeUsed()>:
c001de5c:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001de61:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001de67:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001de6e:	74 50                	je     c001dec0 <updateTimeUsed()+0x64>
c001de70:	57                   	push   edi
c001de71:	56                   	push   esi
c001de72:	53                   	push   ebx
c001de73:	0f 31                	rdtsc  
c001de75:	89 c1                	mov    ecx,eax
c001de77:	a3 48 1b 03 c0       	mov    ds:0xc0031b48,eax
c001de7c:	2b 0d 38 1b 03 c0    	sub    ecx,DWORD PTR ds:0xc0031b38
c001de82:	89 d3                	mov    ebx,edx
c001de84:	89 0d 40 1b 03 c0    	mov    DWORD PTR ds:0xc0031b40,ecx
c001de8a:	1b 1d 3c 1b 03 c0    	sbb    ebx,DWORD PTR ds:0xc0031b3c
c001de90:	a3 38 1b 03 c0       	mov    ds:0xc0031b38,eax
c001de95:	89 1d 44 1b 03 c0    	mov    DWORD PTR ds:0xc0031b44,ebx
c001de9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dea0:	89 15 4c 1b 03 c0    	mov    DWORD PTR ds:0xc0031b4c,edx
c001dea6:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001dea9:	89 15 3c 1b 03 c0    	mov    DWORD PTR ds:0xc0031b3c,edx
c001deaf:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001deb2:	01 f1                	add    ecx,esi
c001deb4:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001deb7:	11 fb                	adc    ebx,edi
c001deb9:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001debc:	5b                   	pop    ebx
c001debd:	5e                   	pop    esi
c001debe:	5f                   	pop    edi
c001debf:	c3                   	ret    
c001dec0:	c3                   	ret    

c001dec1 <switchToThread(ThreadControlBlock*)>:
c001dec1:	53                   	push   ebx
c001dec2:	83 ec 08             	sub    esp,0x8
c001dec5:	a1 08 1b 03 c0       	mov    eax,ds:0xc0031b08
c001deca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dece:	85 c0                	test   eax,eax
c001ded0:	75 30                	jne    c001df02 <switchToThread(ThreadControlBlock*)+0x41>
c001ded2:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001ded5:	3c ff                	cmp    al,0xff
c001ded7:	74 25                	je     c001defe <switchToThread(ThreadControlBlock*)+0x3d>
c001ded9:	0f b6 d0             	movzx  edx,al
c001dedc:	b8 84 03 00 00       	mov    eax,0x384
c001dee1:	29 d0                	sub    eax,edx
c001dee3:	c1 e0 10             	shl    eax,0x10
c001dee6:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001dee9:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001deec:	e8 6b ff ff ff       	call   c001de5c <updateTimeUsed()>
c001def1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001def5:	83 c4 08             	add    esp,0x8
c001def8:	5b                   	pop    ebx
c001def9:	e9 64 24 fe ff       	jmp    c0000362 <switchToThreadASM>
c001defe:	31 c0                	xor    eax,eax
c001df00:	eb e7                	jmp    c001dee9 <switchToThread(ThreadControlBlock*)+0x28>
c001df02:	c7 05 04 1b 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031b04,0x1
c001df0c:	83 c4 08             	add    esp,0x8
c001df0f:	5b                   	pop    ebx
c001df10:	c3                   	ret    
c001df11:	90                   	nop

c001df12 <Semaphore::Semaphore(int)>:
c001df12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df16:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001df1a:	89 10                	mov    DWORD PTR [eax],edx
c001df1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df20:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001df27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df2b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001df32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df36:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001df3d:	90                   	nop
c001df3e:	c3                   	ret    
c001df3f:	90                   	nop

c001df40 <Mutex::Mutex()>:
c001df40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df44:	6a 01                	push   0x1
c001df46:	50                   	push   eax
c001df47:	e8 c6 ff ff ff       	call   c001df12 <Semaphore::Semaphore(int)>
c001df4c:	83 c4 08             	add    esp,0x8
c001df4f:	90                   	nop
c001df50:	c3                   	ret    
c001df51:	90                   	nop

c001df52 <Process::createThread(void (*)(void*), void*, int)>:
c001df52:	55                   	push   ebp
c001df53:	31 c9                	xor    ecx,ecx
c001df55:	57                   	push   edi
c001df56:	56                   	push   esi
c001df57:	53                   	push   ebx
c001df58:	83 ec 1c             	sub    esp,0x1c
c001df5b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001df5f:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001df66:	89 f2                	mov    edx,esi
c001df68:	0f b7 c2             	movzx  eax,dx
c001df6b:	83 e2 01             	and    edx,0x1
c001df6e:	74 16                	je     c001df86 <Process::createThread(void (*)(void*), void*, int)+0x34>
c001df70:	d1 f8                	sar    eax,1
c001df72:	41                   	inc    ecx
c001df73:	89 c2                	mov    edx,eax
c001df75:	83 f9 10             	cmp    ecx,0x10
c001df78:	75 ee                	jne    c001df68 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001df7a:	83 c4 1c             	add    esp,0x1c
c001df7d:	31 db                	xor    ebx,ebx
c001df7f:	89 d8                	mov    eax,ebx
c001df81:	5b                   	pop    ebx
c001df82:	5e                   	pop    esi
c001df83:	5f                   	pop    edi
c001df84:	5d                   	pop    ebp
c001df85:	c3                   	ret    
c001df86:	b8 01 00 00 00       	mov    eax,0x1
c001df8b:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001df8e:	d3 e0                	shl    eax,cl
c001df90:	09 c6                	or     esi,eax
c001df92:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001df95:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001df9c:	89 c6                	mov    esi,eax
c001df9e:	c1 e6 05             	shl    esi,0x5
c001dfa1:	01 f0                	add    eax,esi
c001dfa3:	01 d8                	add    eax,ebx
c001dfa5:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001dfac:	75 0a                	jne    c001dfb8 <Process::createThread(void (*)(void*), void*, int)+0x66>
c001dfae:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001dfb8:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001dfbe:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001dfc2:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001dfc5:	01 ca                	add    edx,ecx
c001dfc7:	83 ec 08             	sub    esp,0x8
c001dfca:	89 d0                	mov    eax,edx
c001dfcc:	c1 e0 05             	shl    eax,0x5
c001dfcf:	01 d0                	add    eax,edx
c001dfd1:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001dfd5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001dfd9:	01 d8                	add    eax,ebx
c001dfdb:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001dfe1:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001dfe7:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001dfed:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001dff3:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001dff9:	89 cd                	mov    ebp,ecx
c001dffb:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001dfff:	f7 dd                	neg    ebp
c001e001:	c1 e5 15             	shl    ebp,0x15
c001e004:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001e00a:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001e010:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001e01a:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001e020:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001e02a:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001e034:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e038:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001e03f:	53                   	push   ebx
c001e040:	68 28 1b 03 c0       	push   0xc0031b28
c001e045:	e8 06 ac 00 00       	call   c0028c50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e04a:	89 d8                	mov    eax,ebx
c001e04c:	83 c4 10             	add    esp,0x10
c001e04f:	83 c4 1c             	add    esp,0x1c
c001e052:	5b                   	pop    ebx
c001e053:	5e                   	pop    esi
c001e054:	5f                   	pop    edi
c001e055:	5d                   	pop    ebp
c001e056:	c3                   	ret    
c001e057:	90                   	nop

c001e058 <Process::createUserThread()>:
c001e058:	83 ec 0c             	sub    esp,0xc
c001e05b:	68 80 00 00 00       	push   0x80
c001e060:	6a 00                	push   0x0
c001e062:	68 24 de 01 c0       	push   0xc001de24
c001e067:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e06b:	e8 e2 fe ff ff       	call   c001df52 <Process::createThread(void (*)(void*), void*, int)>
c001e070:	83 c4 1c             	add    esp,0x1c
c001e073:	c3                   	ret    

c001e074 <setupMultitasking(void (*)())>:
c001e074:	56                   	push   esi
c001e075:	53                   	push   ebx
c001e076:	51                   	push   ecx
c001e077:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e07b:	eb 10                	jmp    c001e08d <setupMultitasking(void (*)())+0x19>
c001e07d:	83 ec 0c             	sub    esp,0xc
c001e080:	68 28 1b 03 c0       	push   0xc0031b28
c001e085:	e8 18 ab 00 00       	call   c0028ba2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e08a:	83 c4 10             	add    esp,0x10
c001e08d:	83 ec 0c             	sub    esp,0xc
c001e090:	68 28 1b 03 c0       	push   0xc0031b28
c001e095:	e8 ec aa 00 00       	call   c0028b86 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e09a:	83 c4 10             	add    esp,0x10
c001e09d:	84 c0                	test   al,al
c001e09f:	74 dc                	je     c001e07d <setupMultitasking(void (*)())+0x9>
c001e0a1:	83 ec 0c             	sub    esp,0xc
c001e0a4:	68 3f 07 00 00       	push   0x73f
c001e0a9:	e8 9d 17 ff ff       	call   c000f84b <malloc>
c001e0ae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e0b5:	89 c3                	mov    ebx,eax
c001e0b7:	6a 00                	push   0x0
c001e0b9:	68 53 c3 02 c0       	push   0xc002c353
c001e0be:	6a 01                	push   0x1
c001e0c0:	50                   	push   eax
c001e0c1:	e8 8e fb ff ff       	call   c001dc54 <Process::Process(bool, char const*, Process*, char**)>
c001e0c6:	83 c4 18             	add    esp,0x18
c001e0c9:	89 1d 34 1b 03 c0    	mov    DWORD PTR ds:0xc0031b34,ebx
c001e0cf:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e0d5:	68 74 c4 02 c0       	push   0xc002c474
c001e0da:	e8 28 4e ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001e0df:	58                   	pop    eax
c001e0e0:	5a                   	pop    edx
c001e0e1:	6a 63                	push   0x63
c001e0e3:	68 a8 c4 02 c0       	push   0xc002c4a8
c001e0e8:	e8 1a 4e ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001e0ed:	59                   	pop    ecx
c001e0ee:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e0f4:	e8 04 2c ff ff       	call   c0010cfd <setActiveTerminal(VgaText*)>
c001e0f9:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e101:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001e10b:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e111:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001e114:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e11e:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e124:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e12a:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e134:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e13e:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e148:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e14e:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e158:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e15e:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e168:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e16e:	58                   	pop    eax
c001e16f:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e175:	5a                   	pop    edx
c001e176:	68 4f c3 02 c0       	push   0xc002c34f
c001e17b:	50                   	push   eax
c001e17c:	e8 bb 26 fe ff       	call   c000083c <strcpy>
c001e181:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e188:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e18c:	83 c4 14             	add    esp,0x14
c001e18f:	5b                   	pop    ebx
c001e190:	5e                   	pop    esi
c001e191:	e9 be 21 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e196 <schedule()>:
c001e196:	a1 08 1b 03 c0       	mov    eax,ds:0xc0031b08
c001e19b:	85 c0                	test   eax,eax
c001e19d:	74 0b                	je     c001e1aa <schedule()+0x14>
c001e19f:	c7 05 04 1b 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031b04,0x1
c001e1a9:	c3                   	ret    
c001e1aa:	53                   	push   ebx
c001e1ab:	83 ec 14             	sub    esp,0x14
c001e1ae:	68 28 1b 03 c0       	push   0xc0031b28
c001e1b3:	e8 ce a9 00 00       	call   c0028b86 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e1b8:	83 c4 10             	add    esp,0x10
c001e1bb:	84 c0                	test   al,al
c001e1bd:	75 38                	jne    c001e1f7 <schedule()+0x61>
c001e1bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e1c4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e1c7:	4a                   	dec    edx
c001e1c8:	74 32                	je     c001e1fc <schedule()+0x66>
c001e1ca:	83 ec 0c             	sub    esp,0xc
c001e1cd:	68 28 1b 03 c0       	push   0xc0031b28
c001e1d2:	e8 a7 a9 00 00       	call   c0028b7e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e1d7:	c7 04 24 28 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b28
c001e1de:	89 c3                	mov    ebx,eax
c001e1e0:	e8 bd a9 00 00       	call   c0028ba2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e1e5:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e1ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e1ef:	e8 cd fc ff ff       	call   c001dec1 <switchToThread(ThreadControlBlock*)>
c001e1f4:	83 c4 10             	add    esp,0x10
c001e1f7:	83 c4 08             	add    esp,0x8
c001e1fa:	5b                   	pop    ebx
c001e1fb:	c3                   	ret    
c001e1fc:	83 ec 08             	sub    esp,0x8
c001e1ff:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e206:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e20c:	68 28 1b 03 c0       	push   0xc0031b28
c001e211:	e8 3a aa 00 00       	call   c0028c50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e216:	83 c4 10             	add    esp,0x10
c001e219:	eb af                	jmp    c001e1ca <schedule()+0x34>

c001e21b <unlockStuff()>:
c001e21b:	a1 08 1b 03 c0       	mov    eax,ds:0xc0031b08
c001e220:	48                   	dec    eax
c001e221:	a3 08 1b 03 c0       	mov    ds:0xc0031b08,eax
c001e226:	75 09                	jne    c001e231 <unlockStuff()+0x16>
c001e228:	a1 04 1b 03 c0       	mov    eax,ds:0xc0031b04
c001e22d:	85 c0                	test   eax,eax
c001e22f:	75 05                	jne    c001e236 <unlockStuff()+0x1b>
c001e231:	e9 db fb ff ff       	jmp    c001de11 <enableIRQs()>
c001e236:	83 ec 0c             	sub    esp,0xc
c001e239:	c7 05 04 1b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031b04,0x0
c001e243:	e8 4e ff ff ff       	call   c001e196 <schedule()>
c001e248:	83 c4 0c             	add    esp,0xc
c001e24b:	e9 c1 fb ff ff       	jmp    c001de11 <enableIRQs()>

c001e250 <Semaphore::tryAcquire()>:
c001e250:	83 ec 0c             	sub    esp,0xc
c001e253:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e257:	e8 eb fb ff ff       	call   c001de47 <lockStuff()>
c001e25c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e25f:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e261:	7c 0b                	jl     c001e26e <Semaphore::tryAcquire()+0x1e>
c001e263:	e8 b3 ff ff ff       	call   c001e21b <unlockStuff()>
c001e268:	31 c0                	xor    eax,eax
c001e26a:	83 c4 0c             	add    esp,0xc
c001e26d:	c3                   	ret    
c001e26e:	42                   	inc    edx
c001e26f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e272:	e8 a4 ff ff ff       	call   c001e21b <unlockStuff()>
c001e277:	b0 01                	mov    al,0x1
c001e279:	83 c4 0c             	add    esp,0xc
c001e27c:	c3                   	ret    
c001e27d:	90                   	nop

c001e27e <Semaphore::assertLocked(char const*)>:
c001e27e:	83 ec 0c             	sub    esp,0xc
c001e281:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e285:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e289:	e8 b9 fb ff ff       	call   c001de47 <lockStuff()>
c001e28e:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e290:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001e293:	7c 05                	jl     c001e29a <Semaphore::assertLocked(char const*)+0x1c>
c001e295:	83 c4 0c             	add    esp,0xc
c001e298:	eb 81                	jmp    c001e21b <unlockStuff()>
c001e29a:	83 ec 0c             	sub    esp,0xc
c001e29d:	52                   	push   edx
c001e29e:	e8 a2 c3 ff ff       	call   c001a645 <Krnl::panic(char const*)>
c001e2a3:	83 c4 10             	add    esp,0x10
c001e2a6:	83 c4 0c             	add    esp,0xc
c001e2a9:	e9 6d ff ff ff       	jmp    c001e21b <unlockStuff()>

c001e2ae <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e2ae:	83 ec 0c             	sub    esp,0xc
c001e2b1:	e8 55 fb ff ff       	call   c001de0b <getIRQNestingLevel()>
c001e2b6:	83 ec 08             	sub    esp,0x8
c001e2b9:	50                   	push   eax
c001e2ba:	68 cc c4 02 c0       	push   0xc002c4cc
c001e2bf:	e8 43 4c ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001e2c4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e2c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2cd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e2d0:	e8 c1 fe ff ff       	call   c001e196 <schedule()>
c001e2d5:	e8 48 fb ff ff       	call   c001de22 <unlockScheduler()>
c001e2da:	e8 2c fb ff ff       	call   c001de0b <getIRQNestingLevel()>
c001e2df:	5a                   	pop    edx
c001e2e0:	59                   	pop    ecx
c001e2e1:	50                   	push   eax
c001e2e2:	68 00 c5 02 c0       	push   0xc002c500
c001e2e7:	e8 1b 4c ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001e2ec:	83 c4 1c             	add    esp,0x1c
c001e2ef:	c3                   	ret    

c001e2f0 <blockTask(TaskState)>:
c001e2f0:	83 ec 0c             	sub    esp,0xc
c001e2f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e2f7:	e8 24 fb ff ff       	call   c001de20 <lockScheduler()>
c001e2fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e301:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e304:	e8 8d fe ff ff       	call   c001e196 <schedule()>
c001e309:	83 c4 0c             	add    esp,0xc
c001e30c:	e9 11 fb ff ff       	jmp    c001de22 <unlockScheduler()>

c001e311 <waitTask(int, int*, int)>:
c001e311:	83 ec 18             	sub    esp,0x18
c001e314:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e319:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e31d:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e320:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e324:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e329:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e32c:	6a 07                	push   0x7
c001e32e:	e8 bd ff ff ff       	call   c001e2f0 <blockTask(TaskState)>
c001e333:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e338:	83 c4 10             	add    esp,0x10
c001e33b:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e33e:	85 d2                	test   edx,edx
c001e340:	74 0a                	je     c001e34c <waitTask(int, int*, int)+0x3b>
c001e342:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e345:	89 02                	mov    DWORD PTR [edx],eax
c001e347:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e34c:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e34f:	83 c4 0c             	add    esp,0xc
c001e352:	c3                   	ret    

c001e353 <nanoSleepUntil(unsigned long long)>:
c001e353:	83 ec 0c             	sub    esp,0xc
c001e356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e35a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e35e:	3b 05 50 ec 02 c0    	cmp    eax,DWORD PTR ds:0xc002ec50
c001e364:	89 d1                	mov    ecx,edx
c001e366:	1b 0d 54 ec 02 c0    	sbb    ecx,DWORD PTR ds:0xc002ec54
c001e36c:	73 04                	jae    c001e372 <nanoSleepUntil(unsigned long long)+0x1f>
c001e36e:	83 c4 0c             	add    esp,0xc
c001e371:	c3                   	ret    
c001e372:	e8 d0 fa ff ff       	call   c001de47 <lockStuff()>
c001e377:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e37d:	83 ec 08             	sub    esp,0x8
c001e380:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e383:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e386:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e38c:	68 1c 1b 03 c0       	push   0xc0031b1c
c001e391:	e8 ba a8 00 00       	call   c0028c50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e396:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e39d:	e8 4e ff ff ff       	call   c001e2f0 <blockTask(TaskState)>
c001e3a2:	83 c4 1c             	add    esp,0x1c
c001e3a5:	e9 71 fe ff ff       	jmp    c001e21b <unlockStuff()>

c001e3aa <nanoSleep(unsigned long long)>:
c001e3aa:	a1 50 ec 02 c0       	mov    eax,ds:0xc002ec50
c001e3af:	8b 15 54 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ec54
c001e3b5:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e3b9:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e3bd:	eb 94                	jmp    c001e353 <nanoSleepUntil(unsigned long long)>

c001e3bf <sleep(unsigned long long)>:
c001e3bf:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e3c7:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e3cc:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e3d0:	01 ca                	add    edx,ecx
c001e3d2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e3d6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e3da:	eb ce                	jmp    c001e3aa <nanoSleep(unsigned long long)>

c001e3dc <Semaphore::acquire()>:
c001e3dc:	83 ec 0c             	sub    esp,0xc
c001e3df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3e3:	e8 5f fa ff ff       	call   c001de47 <lockStuff()>
c001e3e8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e3eb:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e3ed:	7d 0c                	jge    c001e3fb <Semaphore::acquire()+0x1f>
c001e3ef:	42                   	inc    edx
c001e3f0:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e3f3:	83 c4 0c             	add    esp,0xc
c001e3f6:	e9 20 fe ff ff       	jmp    c001e21b <unlockStuff()>
c001e3fb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e401:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001e408:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e40b:	85 d2                	test   edx,edx
c001e40d:	74 2a                	je     c001e439 <Semaphore::acquire()+0x5d>
c001e40f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e412:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e418:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001e41b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e421:	83 ec 0c             	sub    esp,0xc
c001e424:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e427:	6a 05                	push   0x5
c001e429:	e8 c2 fe ff ff       	call   c001e2f0 <blockTask(TaskState)>
c001e42e:	83 c4 10             	add    esp,0x10
c001e431:	83 c4 0c             	add    esp,0xc
c001e434:	e9 e2 fd ff ff       	jmp    c001e21b <unlockStuff()>
c001e439:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e43f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e442:	eb d7                	jmp    c001e41b <Semaphore::acquire()+0x3f>

c001e444 <taskReturned>:
c001e444:	83 ec 18             	sub    esp,0x18
c001e447:	68 34 c5 02 c0       	push   0xc002c534
c001e44c:	e8 f4 c1 ff ff       	call   c001a645 <Krnl::panic(char const*)>
c001e451:	83 c4 10             	add    esp,0x10
c001e454:	83 ec 0c             	sub    esp,0xc
c001e457:	6a 02                	push   0x2
c001e459:	e8 92 fe ff ff       	call   c001e2f0 <blockTask(TaskState)>
c001e45e:	e8 bd f9 ff ff       	call   c001de20 <lockScheduler()>
c001e463:	e8 2e fd ff ff       	call   c001e196 <schedule()>
c001e468:	e8 b5 f9 ff ff       	call   c001de22 <unlockScheduler()>
c001e46d:	83 c4 10             	add    esp,0x10
c001e470:	eb e2                	jmp    c001e454 <taskReturned+0x10>

c001e472 <unblockTask(ThreadControlBlock*)>:
c001e472:	53                   	push   ebx
c001e473:	83 ec 08             	sub    esp,0x8
c001e476:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e47a:	e8 a1 f9 ff ff       	call   c001de20 <lockScheduler()>
c001e47f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e482:	85 c0                	test   eax,eax
c001e484:	74 5c                	je     c001e4e2 <unblockTask(ThreadControlBlock*)+0x70>
c001e486:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e489:	48                   	dec    eax
c001e48a:	74 31                	je     c001e4bd <unblockTask(ThreadControlBlock*)+0x4b>
c001e48c:	83 ec 0c             	sub    esp,0xc
c001e48f:	68 28 1b 03 c0       	push   0xc0031b28
c001e494:	e8 e5 a6 00 00       	call   c0028b7e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e499:	83 c4 10             	add    esp,0x10
c001e49c:	85 c0                	test   eax,eax
c001e49e:	75 17                	jne    c001e4b7 <unblockTask(ThreadControlBlock*)+0x45>
c001e4a0:	eb 65                	jmp    c001e507 <unblockTask(ThreadControlBlock*)+0x95>
c001e4a2:	83 ec 08             	sub    esp,0x8
c001e4a5:	50                   	push   eax
c001e4a6:	68 28 1b 03 c0       	push   0xc0031b28
c001e4ab:	e8 b4 a9 00 00       	call   c0028e64 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e4b0:	83 c4 10             	add    esp,0x10
c001e4b3:	85 c0                	test   eax,eax
c001e4b5:	74 50                	je     c001e507 <unblockTask(ThreadControlBlock*)+0x95>
c001e4b7:	39 c3                	cmp    ebx,eax
c001e4b9:	75 e7                	jne    c001e4a2 <unblockTask(ThreadControlBlock*)+0x30>
c001e4bb:	eb 1c                	jmp    c001e4d9 <unblockTask(ThreadControlBlock*)+0x67>
c001e4bd:	83 ec 0c             	sub    esp,0xc
c001e4c0:	68 24 c6 02 c0       	push   0xc002c624
c001e4c5:	e8 3d 4a ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001e4ca:	c7 04 24 b0 c5 02 c0 	mov    DWORD PTR [esp],0xc002c5b0
c001e4d1:	e8 31 4a ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001e4d6:	83 c4 10             	add    esp,0x10
c001e4d9:	83 c4 08             	add    esp,0x8
c001e4dc:	5b                   	pop    ebx
c001e4dd:	e9 40 f9 ff ff       	jmp    c001de22 <unlockScheduler()>
c001e4e2:	83 ec 0c             	sub    esp,0xc
c001e4e5:	68 68 c5 02 c0       	push   0xc002c568
c001e4ea:	e8 18 4a ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001e4ef:	c7 04 24 b0 c5 02 c0 	mov    DWORD PTR [esp],0xc002c5b0
c001e4f6:	e8 0c 4a ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001e4fb:	83 c4 10             	add    esp,0x10
c001e4fe:	83 c4 08             	add    esp,0x8
c001e501:	5b                   	pop    ebx
c001e502:	e9 1b f9 ff ff       	jmp    c001de22 <unlockScheduler()>
c001e507:	83 ec 08             	sub    esp,0x8
c001e50a:	53                   	push   ebx
c001e50b:	68 28 1b 03 c0       	push   0xc0031b28
c001e510:	e8 3b a7 00 00       	call   c0028c50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e515:	83 c4 10             	add    esp,0x10
c001e518:	83 c4 08             	add    esp,0x8
c001e51b:	5b                   	pop    ebx
c001e51c:	e9 01 f9 ff ff       	jmp    c001de22 <unlockScheduler()>

c001e521 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e521:	55                   	push   ebp
c001e522:	57                   	push   edi
c001e523:	56                   	push   esi
c001e524:	53                   	push   ebx
c001e525:	83 ec 1c             	sub    esp,0x1c
c001e528:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e52c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e52f:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e535:	85 ff                	test   edi,edi
c001e537:	7e 20                	jle    c001e559 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e539:	31 f6                	xor    esi,esi
c001e53b:	83 ec 0c             	sub    esp,0xc
c001e53e:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e545:	46                   	inc    esi
c001e546:	e8 10 13 ff ff       	call   c000f85b <free>
c001e54b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e54e:	83 c4 10             	add    esp,0x10
c001e551:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e557:	7f e2                	jg     c001e53b <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e559:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e563:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e568:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e56b:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e56e:	d3 c0                	rol    eax,cl
c001e570:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e577:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e57a:	89 f7                	mov    edi,esi
c001e57c:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e584:	0f 85 74 01 00 00    	jne    c001e6fe <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e58a:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e590:	85 ed                	test   ebp,ebp
c001e592:	74 1b                	je     c001e5af <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e594:	83 ec 0c             	sub    esp,0xc
c001e597:	55                   	push   ebp
c001e598:	e8 15 be ff ff       	call   c001a3b2 <EnvVarContainer::~EnvVarContainer()>
c001e59d:	59                   	pop    ecx
c001e59e:	5e                   	pop    esi
c001e59f:	6a 0c                	push   0xc
c001e5a1:	55                   	push   ebp
c001e5a2:	e8 80 48 ff ff       	call   c0012e27 <operator delete(void*, unsigned long)>
c001e5a7:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e5aa:	83 c4 10             	add    esp,0x10
c001e5ad:	89 f7                	mov    edi,esi
c001e5af:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e5b5:	85 c0                	test   eax,eax
c001e5b7:	0f 84 aa 00 00 00    	je     c001e667 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e5bd:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e5c0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e5c4:	31 c9                	xor    ecx,ecx
c001e5c6:	eb 10                	jmp    c001e5d8 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e5c8:	41                   	inc    ecx
c001e5c9:	83 f9 10             	cmp    ecx,0x10
c001e5cc:	0f 84 95 00 00 00    	je     c001e667 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e5d2:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e5d8:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e5df:	d3 fa                	sar    edx,cl
c001e5e1:	83 e2 01             	and    edx,0x1
c001e5e4:	74 e2                	je     c001e5c8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e5e6:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e5e9:	01 ca                	add    edx,ecx
c001e5eb:	89 d5                	mov    ebp,edx
c001e5ed:	c1 e5 05             	shl    ebp,0x5
c001e5f0:	01 ea                	add    edx,ebp
c001e5f2:	01 d0                	add    eax,edx
c001e5f4:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e5fa:	83 fd 07             	cmp    ebp,0x7
c001e5fd:	75 c9                	jne    c001e5c8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e5ff:	05 40 02 00 00       	add    eax,0x240
c001e604:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e607:	83 fd ff             	cmp    ebp,0xffffffff
c001e60a:	0f 8c 08 01 00 00    	jl     c001e718 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e610:	0f 84 b9 01 00 00    	je     c001e7cf <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e616:	85 ed                	test   ebp,ebp
c001e618:	0f 84 a0 01 00 00    	je     c001e7be <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e61e:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e620:	75 a6                	jne    c001e5c8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e622:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e628:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e62c:	01 d0                	add    eax,edx
c001e62e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e632:	83 ec 0c             	sub    esp,0xc
c001e635:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e63b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e63e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e644:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e64b:	50                   	push   eax
c001e64c:	e8 21 fe ff ff       	call   c001e472 <unblockTask(ThreadControlBlock*)>
c001e651:	83 c4 10             	add    esp,0x10
c001e654:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e657:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e65b:	89 f7                	mov    edi,esi
c001e65d:	41                   	inc    ecx
c001e65e:	83 f9 10             	cmp    ecx,0x10
c001e661:	0f 85 6b ff ff ff    	jne    c001e5d2 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e667:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e66d:	85 c0                	test   eax,eax
c001e66f:	74 5d                	je     c001e6ce <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e671:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e677:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e67d:	74 4f                	je     c001e6ce <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e67f:	83 ec 0c             	sub    esp,0xc
c001e682:	68 28 1b 03 c0       	push   0xc0031b28
c001e687:	e8 f2 a4 00 00       	call   c0028b7e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e68c:	c7 04 24 28 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b28
c001e693:	89 c7                	mov    edi,eax
c001e695:	e8 ec a4 00 00       	call   c0028b86 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e69a:	83 c4 10             	add    esp,0x10
c001e69d:	84 c0                	test   al,al
c001e69f:	0f 84 e4 00 00 00    	je     c001e789 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e6a5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e6a8:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e6ae:	85 d2                	test   edx,edx
c001e6b0:	74 0f                	je     c001e6c1 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e6b2:	83 ec 0c             	sub    esp,0xc
c001e6b5:	8b 02                	mov    eax,DWORD PTR [edx]
c001e6b7:	52                   	push   edx
c001e6b8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e6bb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e6be:	83 c4 10             	add    esp,0x10
c001e6c1:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e6cb:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e6ce:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e6d4:	85 db                	test   ebx,ebx
c001e6d6:	74 16                	je     c001e6ee <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e6d8:	83 ec 0c             	sub    esp,0xc
c001e6db:	53                   	push   ebx
c001e6dc:	e8 13 3b ff ff       	call   c00121f4 <VAS::~VAS()>
c001e6e1:	58                   	pop    eax
c001e6e2:	5a                   	pop    edx
c001e6e3:	6a 14                	push   0x14
c001e6e5:	53                   	push   ebx
c001e6e6:	e8 3c 47 ff ff       	call   c0012e27 <operator delete(void*, unsigned long)>
c001e6eb:	83 c4 10             	add    esp,0x10
c001e6ee:	83 ec 0c             	sub    esp,0xc
c001e6f1:	68 5a c3 02 c0       	push   0xc002c35a
c001e6f6:	e8 0c 48 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001e6fb:	83 c4 10             	add    esp,0x10
c001e6fe:	83 ec 08             	sub    esp,0x8
c001e701:	68 3f 07 00 00       	push   0x73f
c001e706:	68 68 c3 02 c0       	push   0xc002c368
c001e70b:	e8 f7 47 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001e710:	83 c4 2c             	add    esp,0x2c
c001e713:	5b                   	pop    ebx
c001e714:	5e                   	pop    esi
c001e715:	5f                   	pop    edi
c001e716:	5d                   	pop    ebp
c001e717:	c3                   	ret    
c001e718:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e71c:	83 ec 0c             	sub    esp,0xc
c001e71f:	68 68 c6 02 c0       	push   0xc002c668
c001e724:	e8 1c bf ff ff       	call   c001a645 <Krnl::panic(char const*)>
c001e729:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e72c:	83 c4 10             	add    esp,0x10
c001e72f:	89 f7                	mov    edi,esi
c001e731:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e735:	e9 8e fe ff ff       	jmp    c001e5c8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e73a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e740:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e746:	75 1c                	jne    c001e764 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e748:	83 ec 0c             	sub    esp,0xc
c001e74b:	68 d0 c6 02 c0       	push   0xc002c6d0
c001e750:	e8 b2 47 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001e755:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e75c:	e8 8f fb ff ff       	call   c001e2f0 <blockTask(TaskState)>
c001e761:	83 c4 10             	add    esp,0x10
c001e764:	83 ec 08             	sub    esp,0x8
c001e767:	56                   	push   esi
c001e768:	68 28 1b 03 c0       	push   0xc0031b28
c001e76d:	e8 de a4 00 00       	call   c0028c50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e772:	c7 04 24 28 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b28
c001e779:	e8 00 a4 00 00       	call   c0028b7e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e77e:	83 c4 10             	add    esp,0x10
c001e781:	39 f8                	cmp    eax,edi
c001e783:	0f 84 1c ff ff ff    	je     c001e6a5 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e789:	83 ec 0c             	sub    esp,0xc
c001e78c:	68 28 1b 03 c0       	push   0xc0031b28
c001e791:	e8 e8 a3 00 00       	call   c0028b7e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e796:	c7 04 24 28 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b28
c001e79d:	89 c6                	mov    esi,eax
c001e79f:	e8 fe a3 00 00       	call   c0028ba2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e7a4:	83 c4 10             	add    esp,0x10
c001e7a7:	39 f3                	cmp    ebx,esi
c001e7a9:	74 b9                	je     c001e764 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e7ab:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e7ae:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e7b1:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e7b7:	75 ab                	jne    c001e764 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e7b9:	e9 7c ff ff ff       	jmp    c001e73a <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e7be:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e7c2:	83 ec 0c             	sub    esp,0xc
c001e7c5:	68 9c c6 02 c0       	push   0xc002c69c
c001e7ca:	e9 55 ff ff ff       	jmp    c001e724 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e7cf:	8b 36                	mov    esi,DWORD PTR [esi]
c001e7d1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e7d5:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e7d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e7db:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e7e1:	01 d7                	add    edi,edx
c001e7e3:	89 f8                	mov    eax,edi
c001e7e5:	e9 44 fe ff ff       	jmp    c001e62e <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e7ea <cleanerTaskFunction(void*)>:
c001e7ea:	53                   	push   ebx
c001e7eb:	83 ec 08             	sub    esp,0x8
c001e7ee:	e8 2f f6 ff ff       	call   c001de22 <unlockScheduler()>
c001e7f3:	e8 28 f6 ff ff       	call   c001de20 <lockScheduler()>
c001e7f8:	80 3d ec 1a 03 c0 00 	cmp    BYTE PTR ds:0xc0031aec,0x0
c001e7ff:	0f 85 8e 00 00 00    	jne    c001e893 <cleanerTaskFunction(void*)+0xa9>
c001e805:	83 ec 0c             	sub    esp,0xc
c001e808:	6a 02                	push   0x2
c001e80a:	e8 9f fa ff ff       	call   c001e2ae <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e80f:	83 c4 10             	add    esp,0x10
c001e812:	c6 05 ec 1a 03 c0 00 	mov    BYTE PTR ds:0xc0031aec,0x0
c001e819:	e8 29 f6 ff ff       	call   c001de47 <lockStuff()>
c001e81e:	e8 fd f5 ff ff       	call   c001de20 <lockScheduler()>
c001e823:	83 ec 0c             	sub    esp,0xc
c001e826:	68 10 1b 03 c0       	push   0xc0031b10
c001e82b:	e8 56 a3 00 00       	call   c0028b86 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e830:	83 c4 10             	add    esp,0x10
c001e833:	84 c0                	test   al,al
c001e835:	75 40                	jne    c001e877 <cleanerTaskFunction(void*)+0x8d>
c001e837:	83 ec 0c             	sub    esp,0xc
c001e83a:	68 10 1b 03 c0       	push   0xc0031b10
c001e83f:	e8 3a a3 00 00       	call   c0028b7e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e844:	c7 04 24 10 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b10
c001e84b:	89 c3                	mov    ebx,eax
c001e84d:	e8 50 a3 00 00       	call   c0028ba2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e852:	c7 04 24 7e c3 02 c0 	mov    DWORD PTR [esp],0xc002c37e
c001e859:	e8 a9 46 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001e85e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e861:	e8 bb fc ff ff       	call   c001e521 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e866:	c7 04 24 97 c3 02 c0 	mov    DWORD PTR [esp],0xc002c397
c001e86d:	e8 95 46 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001e872:	83 c4 10             	add    esp,0x10
c001e875:	eb ac                	jmp    c001e823 <cleanerTaskFunction(void*)+0x39>
c001e877:	e8 a6 f5 ff ff       	call   c001de22 <unlockScheduler()>
c001e87c:	e8 9a f9 ff ff       	call   c001e21b <unlockStuff()>
c001e881:	e8 9a f5 ff ff       	call   c001de20 <lockScheduler()>
c001e886:	80 3d ec 1a 03 c0 00 	cmp    BYTE PTR ds:0xc0031aec,0x0
c001e88d:	0f 84 72 ff ff ff    	je     c001e805 <cleanerTaskFunction(void*)+0x1b>
c001e893:	e8 8a f5 ff ff       	call   c001de22 <unlockScheduler()>
c001e898:	e9 75 ff ff ff       	jmp    c001e812 <cleanerTaskFunction(void*)+0x28>

c001e89d <terminateTask(int)>:
c001e89d:	83 ec 14             	sub    esp,0x14
c001e8a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8a5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e8a8:	83 c0 0c             	add    eax,0xc
c001e8ab:	50                   	push   eax
c001e8ac:	68 f8 c6 02 c0       	push   0xc002c6f8
c001e8b1:	e8 51 46 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001e8b6:	e8 8c f5 ff ff       	call   c001de47 <lockStuff()>
c001e8bb:	e8 60 f5 ff ff       	call   c001de20 <lockScheduler()>
c001e8c0:	c7 04 24 aa c3 02 c0 	mov    DWORD PTR [esp],0xc002c3aa
c001e8c7:	e8 3b 46 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001e8cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e8d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8d5:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e8d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8dd:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e8e0:	5a                   	pop    edx
c001e8e1:	59                   	pop    ecx
c001e8e2:	50                   	push   eax
c001e8e3:	68 10 1b 03 c0       	push   0xc0031b10
c001e8e8:	e8 63 a3 00 00       	call   c0028c50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e8ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8f2:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e8f9:	c7 04 24 c4 c3 02 c0 	mov    DWORD PTR [esp],0xc002c3c4
c001e900:	e8 02 46 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001e905:	83 c4 10             	add    esp,0x10
c001e908:	a1 e8 1a 03 c0       	mov    eax,ds:0xc0031ae8
c001e90d:	85 c0                	test   eax,eax
c001e90f:	74 5a                	je     c001e96b <terminateTask(int)+0xce>
c001e911:	83 ec 0c             	sub    esp,0xc
c001e914:	68 de c3 02 c0       	push   0xc002c3de
c001e919:	e8 e9 45 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001e91e:	58                   	pop    eax
c001e91f:	c6 05 ec 1a 03 c0 01 	mov    BYTE PTR ds:0xc0031aec,0x1
c001e926:	ff 35 e8 1a 03 c0    	push   DWORD PTR ds:0xc0031ae8
c001e92c:	e8 41 fb ff ff       	call   c001e472 <unblockTask(ThreadControlBlock*)>
c001e931:	c7 04 24 f8 c3 02 c0 	mov    DWORD PTR [esp],0xc002c3f8
c001e938:	e8 ca 45 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001e93d:	83 c4 10             	add    esp,0x10
c001e940:	e8 dd f4 ff ff       	call   c001de22 <unlockScheduler()>
c001e945:	e8 d1 f8 ff ff       	call   c001e21b <unlockStuff()>
c001e94a:	83 ec 0c             	sub    esp,0xc
c001e94d:	68 30 c4 02 c0       	push   0xc002c430
c001e952:	e8 b0 45 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001e957:	83 c4 10             	add    esp,0x10
c001e95a:	e8 c1 f4 ff ff       	call   c001de20 <lockScheduler()>
c001e95f:	e8 32 f8 ff ff       	call   c001e196 <schedule()>
c001e964:	e8 b9 f4 ff ff       	call   c001de22 <unlockScheduler()>
c001e969:	eb ef                	jmp    c001e95a <terminateTask(int)+0xbd>
c001e96b:	83 ec 0c             	sub    esp,0xc
c001e96e:	68 12 c4 02 c0       	push   0xc002c412
c001e973:	e8 8f 45 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001e978:	83 c4 10             	add    esp,0x10
c001e97b:	eb c3                	jmp    c001e940 <terminateTask(int)+0xa3>

c001e97d <Thr::terminateFromIRQ(int)>:
c001e97d:	83 ec 18             	sub    esp,0x18
c001e980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e984:	e8 14 ff ff ff       	call   c001e89d <terminateTask(int)>
c001e989:	90                   	nop

c001e98a <Semaphore::release()>:
c001e98a:	83 ec 0c             	sub    esp,0xc
c001e98d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e991:	e8 b1 f4 ff ff       	call   c001de47 <lockStuff()>
c001e996:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e999:	85 d2                	test   edx,edx
c001e99b:	74 1a                	je     c001e9b7 <Semaphore::release()+0x2d>
c001e99d:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e9a0:	83 ec 0c             	sub    esp,0xc
c001e9a3:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e9a6:	52                   	push   edx
c001e9a7:	e8 c6 fa ff ff       	call   c001e472 <unblockTask(ThreadControlBlock*)>
c001e9ac:	83 c4 10             	add    esp,0x10
c001e9af:	83 c4 0c             	add    esp,0xc
c001e9b2:	e9 64 f8 ff ff       	jmp    c001e21b <unlockStuff()>
c001e9b7:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e9ba:	83 c4 0c             	add    esp,0xc
c001e9bd:	e9 59 f8 ff ff       	jmp    c001e21b <unlockStuff()>

c001e9c2 <__static_initialization_and_destruction_0(int, int)>:
c001e9c2:	83 ec 0c             	sub    esp,0xc
c001e9c5:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e9ca:	0f 85 88 00 00 00    	jne    c001ea58 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e9d0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e9d8:	75 7e                	jne    c001ea58 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e9da:	83 ec 0c             	sub    esp,0xc
c001e9dd:	68 28 1b 03 c0       	push   0xc0031b28
c001e9e2:	e8 25 a4 00 00       	call   c0028e0c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e9e7:	83 c4 10             	add    esp,0x10
c001e9ea:	83 ec 04             	sub    esp,0x4
c001e9ed:	68 d8 d4 02 c0       	push   0xc002d4d8
c001e9f2:	68 28 1b 03 c0       	push   0xc0031b28
c001e9f7:	68 c0 8d 02 c0       	push   0xc0028dc0
c001e9fc:	e8 a0 43 ff ff       	call   c0012da1 <__cxa_atexit>
c001ea01:	83 c4 10             	add    esp,0x10
c001ea04:	83 ec 0c             	sub    esp,0xc
c001ea07:	68 1c 1b 03 c0       	push   0xc0031b1c
c001ea0c:	e8 fb a3 00 00       	call   c0028e0c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ea11:	83 c4 10             	add    esp,0x10
c001ea14:	83 ec 04             	sub    esp,0x4
c001ea17:	68 d8 d4 02 c0       	push   0xc002d4d8
c001ea1c:	68 1c 1b 03 c0       	push   0xc0031b1c
c001ea21:	68 c0 8d 02 c0       	push   0xc0028dc0
c001ea26:	e8 76 43 ff ff       	call   c0012da1 <__cxa_atexit>
c001ea2b:	83 c4 10             	add    esp,0x10
c001ea2e:	83 ec 0c             	sub    esp,0xc
c001ea31:	68 10 1b 03 c0       	push   0xc0031b10
c001ea36:	e8 d1 a3 00 00       	call   c0028e0c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ea3b:	83 c4 10             	add    esp,0x10
c001ea3e:	83 ec 04             	sub    esp,0x4
c001ea41:	68 d8 d4 02 c0       	push   0xc002d4d8
c001ea46:	68 10 1b 03 c0       	push   0xc0031b10
c001ea4b:	68 c0 8d 02 c0       	push   0xc0028dc0
c001ea50:	e8 4c 43 ff ff       	call   c0012da1 <__cxa_atexit>
c001ea55:	83 c4 10             	add    esp,0x10
c001ea58:	90                   	nop
c001ea59:	83 c4 0c             	add    esp,0xc
c001ea5c:	c3                   	ret    

c001ea5d <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001ea5d:	83 ec 0c             	sub    esp,0xc
c001ea60:	83 ec 08             	sub    esp,0x8
c001ea63:	68 ff ff 00 00       	push   0xffff
c001ea68:	6a 01                	push   0x1
c001ea6a:	e8 53 ff ff ff       	call   c001e9c2 <__static_initialization_and_destruction_0(int, int)>
c001ea6f:	83 c4 10             	add    esp,0x10
c001ea72:	83 c4 0c             	add    esp,0xc
c001ea75:	c3                   	ret    

c001ea76 <Vm::inbv(unsigned short)>:
c001ea76:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ea7a:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ea7f:	75 06                	jne    c001ea87 <Vm::inbv(unsigned short)+0x11>
c001ea81:	a0 6c 1b 03 c0       	mov    al,ds:0xc0031b6c
c001ea86:	c3                   	ret    
c001ea87:	ec                   	in     al,dx
c001ea88:	c3                   	ret    

c001ea89 <Vm::outbv(unsigned short, unsigned char)>:
c001ea89:	53                   	push   ebx
c001ea8a:	83 ec 08             	sub    esp,0x8
c001ea8d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ea91:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ea95:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ea9a:	75 38                	jne    c001ead4 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001ea9c:	0f b6 c3             	movzx  eax,bl
c001ea9f:	51                   	push   ecx
c001eaa0:	51                   	push   ecx
c001eaa1:	50                   	push   eax
c001eaa2:	68 17 c7 02 c0       	push   0xc002c717
c001eaa7:	e8 5b 44 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001eaac:	8b 15 6c 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b6c
c001eab2:	83 c4 10             	add    esp,0x10
c001eab5:	8d 42 01             	lea    eax,[edx+0x1]
c001eab8:	88 9a 80 1b 03 c0    	mov    BYTE PTR [edx-0x3ffce480],bl
c001eabe:	a3 6c 1b 03 c0       	mov    ds:0xc0031b6c,eax
c001eac3:	83 f8 20             	cmp    eax,0x20
c001eac6:	75 0f                	jne    c001ead7 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001eac8:	c7 05 6c 1b 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0031b6c,0x1f
c001ead2:	eb 03                	jmp    c001ead7 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001ead4:	88 d8                	mov    al,bl
c001ead6:	ee                   	out    dx,al
c001ead7:	83 c4 08             	add    esp,0x8
c001eada:	5b                   	pop    ebx
c001eadb:	c3                   	ret    

c001eadc <Vm::realToLinear(unsigned short, unsigned short)>:
c001eadc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eae1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eae6:	c1 e0 04             	shl    eax,0x4
c001eae9:	01 d0                	add    eax,edx
c001eaeb:	c3                   	ret    

c001eaec <Vm::getSegment(unsigned int)>:
c001eaec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eaf0:	c1 e8 10             	shr    eax,0x10
c001eaf3:	c3                   	ret    

c001eaf4 <Vm::getOffset(unsigned int)>:
c001eaf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eaf8:	c3                   	ret    

c001eaf9 <Vm::mainloop2()>:
c001eaf9:	83 ec 0c             	sub    esp,0xc
c001eafc:	e8 1f f3 ff ff       	call   c001de20 <lockScheduler()>
c001eb01:	83 ec 0c             	sub    esp,0xc
c001eb04:	c6 05 65 1b 03 c0 01 	mov    BYTE PTR ds:0xc0031b65,0x1
c001eb0b:	6a 02                	push   0x2
c001eb0d:	e8 9c f7 ff ff       	call   c001e2ae <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eb12:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eb17:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001eb1b:	52                   	push   edx
c001eb1c:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001eb20:	52                   	push   edx
c001eb21:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001eb25:	52                   	push   edx
c001eb26:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001eb2a:	50                   	push   eax
c001eb2b:	e8 ca 17 fe ff       	call   c00002fa <goToVM86>
c001eb30:	83 c4 2c             	add    esp,0x2c
c001eb33:	c3                   	ret    

c001eb34 <Vm::mainVm8086Loop(void*)>:
c001eb34:	83 ec 0c             	sub    esp,0xc
c001eb37:	e8 e6 f2 ff ff       	call   c001de22 <unlockScheduler()>
c001eb3c:	83 c4 0c             	add    esp,0xc
c001eb3f:	eb b8                	jmp    c001eaf9 <Vm::mainloop2()>

c001eb41 <Vm::mainloop3(unsigned long)>:
c001eb41:	53                   	push   ebx
c001eb42:	83 ec 08             	sub    esp,0x8
c001eb45:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eb49:	e8 d2 f2 ff ff       	call   c001de20 <lockScheduler()>
c001eb4e:	83 ec 0c             	sub    esp,0xc
c001eb51:	89 1d 60 1b 03 c0    	mov    DWORD PTR ds:0xc0031b60,ebx
c001eb57:	6a 02                	push   0x2
c001eb59:	c6 05 64 1b 03 c0 01 	mov    BYTE PTR ds:0xc0031b64,0x1
c001eb60:	e8 49 f7 ff ff       	call   c001e2ae <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eb65:	83 c4 18             	add    esp,0x18
c001eb68:	5b                   	pop    ebx
c001eb69:	eb 8e                	jmp    c001eaf9 <Vm::mainloop2()>

c001eb6b <Vm::initialise8086()>:
c001eb6b:	83 ec 0c             	sub    esp,0xc
c001eb6e:	68 80 00 00 00       	push   0x80
c001eb73:	6a 00                	push   0x0
c001eb75:	68 34 eb 01 c0       	push   0xc001eb34
c001eb7a:	ff 35 34 1b 03 c0    	push   DWORD PTR ds:0xc0031b34
c001eb80:	e8 cd f3 ff ff       	call   c001df52 <Process::createThread(void (*)(void*), void*, int)>
c001eb85:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001eb8c:	a3 68 1b 03 c0       	mov    ds:0xc0031b68,eax
c001eb91:	68 00 01 00 00       	push   0x100
c001eb96:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001eb9b:	6a 00                	push   0x0
c001eb9d:	6a 00                	push   0x0
c001eb9f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001eba5:	e8 aa 3a ff ff       	call   c0012654 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ebaa:	83 c4 2c             	add    esp,0x2c
c001ebad:	c3                   	ret    

c001ebae <Vm::finish8086()>:
c001ebae:	53                   	push   ebx
c001ebaf:	83 ec 08             	sub    esp,0x8
c001ebb2:	e8 69 f2 ff ff       	call   c001de20 <lockScheduler()>
c001ebb7:	80 3d 64 1b 03 c0 00 	cmp    BYTE PTR ds:0xc0031b64,0x0
c001ebbe:	75 0c                	jne    c001ebcc <Vm::finish8086()+0x1e>
c001ebc0:	e8 d1 f5 ff ff       	call   c001e196 <schedule()>
c001ebc5:	e8 58 f2 ff ff       	call   c001de22 <unlockScheduler()>
c001ebca:	eb e6                	jmp    c001ebb2 <Vm::finish8086()+0x4>
c001ebcc:	83 ec 0c             	sub    esp,0xc
c001ebcf:	8b 1d 60 1b 03 c0    	mov    ebx,DWORD PTR ds:0xc0031b60
c001ebd5:	ff 35 68 1b 03 c0    	push   DWORD PTR ds:0xc0031b68
c001ebdb:	c6 05 64 1b 03 c0 00 	mov    BYTE PTR ds:0xc0031b64,0x0
c001ebe2:	e8 8b f8 ff ff       	call   c001e472 <unblockTask(ThreadControlBlock*)>
c001ebe7:	e8 36 f2 ff ff       	call   c001de22 <unlockScheduler()>
c001ebec:	89 d8                	mov    eax,ebx
c001ebee:	83 c4 18             	add    esp,0x18
c001ebf1:	5b                   	pop    ebx
c001ebf2:	c3                   	ret    

c001ebf3 <Vm::getOutput8086(unsigned char*)>:
c001ebf3:	83 ec 10             	sub    esp,0x10
c001ebf6:	ff 35 6c 1b 03 c0    	push   DWORD PTR ds:0xc0031b6c
c001ebfc:	68 80 1b 03 c0       	push   0xc0031b80
c001ec01:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec05:	e8 42 1b fe ff       	call   c000074c <memcpy>
c001ec0a:	a1 6c 1b 03 c0       	mov    eax,ds:0xc0031b6c
c001ec0f:	c7 05 6c 1b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031b6c,0x0
c001ec19:	83 c4 1c             	add    esp,0x1c
c001ec1c:	c3                   	ret    

c001ec1d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001ec1d:	55                   	push   ebp
c001ec1e:	57                   	push   edi
c001ec1f:	56                   	push   esi
c001ec20:	53                   	push   ebx
c001ec21:	83 ec 2c             	sub    esp,0x2c
c001ec24:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ec28:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001ec2c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001ec30:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ec34:	e8 e7 f1 ff ff       	call   c001de20 <lockScheduler()>
c001ec39:	a0 65 1b 03 c0       	mov    al,ds:0xc0031b65
c001ec3e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ec42:	84 c0                	test   al,al
c001ec44:	75 0c                	jne    c001ec52 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001ec46:	e8 4b f5 ff ff       	call   c001e196 <schedule()>
c001ec4b:	e8 d2 f1 ff ff       	call   c001de22 <unlockScheduler()>
c001ec50:	eb e2                	jmp    c001ec34 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ec52:	a1 68 1b 03 c0       	mov    eax,ds:0xc0031b68
c001ec57:	c7 05 6c 1b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031b6c,0x0
c001ec61:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001ec65:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001ec69:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001ec6d:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001ec71:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ec75:	50                   	push   eax
c001ec76:	6a 20                	push   0x20
c001ec78:	6a 00                	push   0x0
c001ec7a:	68 80 1b 03 c0       	push   0xc0031b80
c001ec7f:	e8 fc 1a fe ff       	call   c0000780 <memset>
c001ec84:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ec8b:	e8 bb 0b ff ff       	call   c000f84b <malloc>
c001ec90:	83 c4 0c             	add    esp,0xc
c001ec93:	89 c7                	mov    edi,eax
c001ec95:	ff 35 34 1b 03 c0    	push   DWORD PTR ds:0xc0031b34
c001ec9b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ec9f:	50                   	push   eax
c001eca0:	e8 c1 47 ff ff       	call   c0013466 <File::File(char const*, Process*)>
c001eca5:	83 c4 10             	add    esp,0x10
c001eca8:	85 ff                	test   edi,edi
c001ecaa:	75 0a                	jne    c001ecb6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001ecac:	83 ec 0c             	sub    esp,0xc
c001ecaf:	68 33 c7 02 c0       	push   0xc002c733
c001ecb4:	eb 27                	jmp    c001ecdd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001ecb6:	50                   	push   eax
c001ecb7:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ecbb:	50                   	push   eax
c001ecbc:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ecc0:	50                   	push   eax
c001ecc1:	57                   	push   edi
c001ecc2:	e8 af 4a ff ff       	call   c0013776 <File::stat(unsigned long long*, bool*)>
c001ecc7:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001eccc:	83 c4 10             	add    esp,0x10
c001eccf:	89 e8                	mov    eax,ebp
c001ecd1:	84 c0                	test   al,al
c001ecd3:	74 19                	je     c001ecee <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001ecd5:	83 ec 0c             	sub    esp,0xc
c001ecd8:	68 47 c7 02 c0       	push   0xc002c747
c001ecdd:	e8 63 b9 ff ff       	call   c001a645 <Krnl::panic(char const*)>
c001ece2:	31 ed                	xor    ebp,ebp
c001ece4:	e8 39 f1 ff ff       	call   c001de22 <unlockScheduler()>
c001ece9:	83 c4 10             	add    esp,0x10
c001ecec:	eb 75                	jmp    c001ed63 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ecee:	50                   	push   eax
c001ecef:	50                   	push   eax
c001ecf0:	6a 01                	push   0x1
c001ecf2:	57                   	push   edi
c001ecf3:	e8 d2 47 ff ff       	call   c00134ca <File::open(FileOpenMode)>
c001ecf8:	83 c4 10             	add    esp,0x10
c001ecfb:	85 c0                	test   eax,eax
c001ecfd:	74 17                	je     c001ed16 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001ecff:	83 ec 0c             	sub    esp,0xc
c001ed02:	68 60 c7 02 c0       	push   0xc002c760
c001ed07:	e8 39 b9 ff ff       	call   c001a645 <Krnl::panic(char const*)>
c001ed0c:	e8 11 f1 ff ff       	call   c001de22 <unlockScheduler()>
c001ed11:	83 c4 10             	add    esp,0x10
c001ed14:	eb 4d                	jmp    c001ed63 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ed16:	0f b7 f6             	movzx  esi,si
c001ed19:	50                   	push   eax
c001ed1a:	0f b7 db             	movzx  ebx,bx
c001ed1d:	50                   	push   eax
c001ed1e:	56                   	push   esi
c001ed1f:	53                   	push   ebx
c001ed20:	e8 b7 fd ff ff       	call   c001eadc <Vm::realToLinear(unsigned short, unsigned short)>
c001ed25:	5a                   	pop    edx
c001ed26:	8b 17                	mov    edx,DWORD PTR [edi]
c001ed28:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ed2c:	51                   	push   ecx
c001ed2d:	50                   	push   eax
c001ed2e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ed32:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ed36:	57                   	push   edi
c001ed37:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ed3a:	83 c4 14             	add    esp,0x14
c001ed3d:	57                   	push   edi
c001ed3e:	e8 e5 47 ff ff       	call   c0013528 <File::close()>
c001ed43:	c6 05 65 1b 03 c0 00 	mov    BYTE PTR ds:0xc0031b65,0x0
c001ed4a:	e8 d3 f0 ff ff       	call   c001de22 <unlockScheduler()>
c001ed4f:	59                   	pop    ecx
c001ed50:	ff 35 68 1b 03 c0    	push   DWORD PTR ds:0xc0031b68
c001ed56:	e8 17 f7 ff ff       	call   c001e472 <unblockTask(ThreadControlBlock*)>
c001ed5b:	83 c4 10             	add    esp,0x10
c001ed5e:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001ed63:	83 c4 2c             	add    esp,0x2c
c001ed66:	89 e8                	mov    eax,ebp
c001ed68:	5b                   	pop    ebx
c001ed69:	5e                   	pop    esi
c001ed6a:	5f                   	pop    edi
c001ed6b:	5d                   	pop    ebp
c001ed6c:	c3                   	ret    

c001ed6d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001ed6d:	57                   	push   edi
c001ed6e:	56                   	push   esi
c001ed6f:	53                   	push   ebx
c001ed70:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ed74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed78:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ed7c:	83 e8 06             	sub    eax,0x6
c001ed7f:	0f b7 c0             	movzx  eax,ax
c001ed82:	50                   	push   eax
c001ed83:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001ed88:	50                   	push   eax
c001ed89:	e8 4e fd ff ff       	call   c001eadc <Vm::realToLinear(unsigned short, unsigned short)>
c001ed8e:	5a                   	pop    edx
c001ed8f:	5e                   	pop    esi
c001ed90:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001ed93:	8d 56 fa             	lea    edx,[esi-0x6]
c001ed96:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ed9c:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001ed9f:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001eda2:	83 c2 02             	add    edx,0x2
c001eda5:	66 89 10             	mov    WORD PTR [eax],dx
c001eda8:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001edab:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001edaf:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001edb2:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001edb6:	89 d6                	mov    esi,edx
c001edb8:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001edbe:	66 81 e6 ff fd       	and    si,0xfdff
c001edc3:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001edc7:	74 07                	je     c001edd0 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001edc9:	89 d6                	mov    esi,edx
c001edcb:	66 81 ce 00 02       	or     si,0x200
c001edd0:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001edd4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001edd9:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001eddd:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001ede5:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001ede8:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001edf0:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001edf3:	5b                   	pop    ebx
c001edf4:	5e                   	pop    esi
c001edf5:	5f                   	pop    edi
c001edf6:	c3                   	ret    

c001edf7 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001edf7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edfc:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee01:	c1 e0 04             	shl    eax,0x4
c001ee04:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001ee07:	c3                   	ret    

c001ee08 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001ee08:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee0d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee12:	c1 e0 04             	shl    eax,0x4
c001ee15:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001ee19:	c3                   	ret    

c001ee1a <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001ee1a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee1f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee24:	c1 e0 04             	shl    eax,0x4
c001ee27:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001ee2a:	c3                   	ret    

c001ee2b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001ee2b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee30:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee35:	c1 e0 04             	shl    eax,0x4
c001ee38:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee3c:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001ee3f:	c3                   	ret    

c001ee40 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001ee40:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee45:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee4a:	c1 e0 04             	shl    eax,0x4
c001ee4d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee51:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001ee55:	c3                   	ret    

c001ee56 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001ee56:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee5b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee60:	c1 e0 04             	shl    eax,0x4
c001ee63:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee67:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001ee6a:	c3                   	ret    

c001ee6b <Vm::faultHandler(regs*)>:
c001ee6b:	55                   	push   ebp
c001ee6c:	57                   	push   edi
c001ee6d:	56                   	push   esi
c001ee6e:	53                   	push   ebx
c001ee6f:	83 ec 1c             	sub    esp,0x1c
c001ee72:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ee76:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001ee79:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001ee7c:	0f b7 c1             	movzx  eax,cx
c001ee7f:	50                   	push   eax
c001ee80:	0f b7 c3             	movzx  eax,bx
c001ee83:	c1 e3 04             	shl    ebx,0x4
c001ee86:	50                   	push   eax
c001ee87:	e8 50 fc ff ff       	call   c001eadc <Vm::realToLinear(unsigned short, unsigned short)>
c001ee8c:	5a                   	pop    edx
c001ee8d:	89 c5                	mov    ebp,eax
c001ee8f:	5e                   	pop    esi
c001ee90:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001ee94:	50                   	push   eax
c001ee95:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ee99:	50                   	push   eax
c001ee9a:	e8 3d fc ff ff       	call   c001eadc <Vm::realToLinear(unsigned short, unsigned short)>
c001ee9f:	01 cb                	add    ebx,ecx
c001eea1:	89 c6                	mov    esi,eax
c001eea3:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001eea7:	50                   	push   eax
c001eea8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eeac:	50                   	push   eax
c001eead:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001eeb1:	50                   	push   eax
c001eeb2:	55                   	push   ebp
c001eeb3:	53                   	push   ebx
c001eeb4:	b3 06                	mov    bl,0x6
c001eeb6:	68 79 c7 02 c0       	push   0xc002c779
c001eebb:	e8 47 40 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001eec0:	83 c4 20             	add    esp,0x20
c001eec3:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001eec8:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001eecd:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001eed1:	3c 9d                	cmp    al,0x9d
c001eed3:	0f 84 d7 02 00 00    	je     c001f1b0 <Vm::faultHandler(regs*)+0x345>
c001eed9:	0f 87 a3 00 00 00    	ja     c001ef82 <Vm::faultHandler(regs*)+0x117>
c001eedf:	3c 66                	cmp    al,0x66
c001eee1:	0f 84 15 02 00 00    	je     c001f0fc <Vm::faultHandler(regs*)+0x291>
c001eee7:	77 5f                	ja     c001ef48 <Vm::faultHandler(regs*)+0xdd>
c001eee9:	3c 36                	cmp    al,0x36
c001eeeb:	0f 84 f1 01 00 00    	je     c001f0e2 <Vm::faultHandler(regs*)+0x277>
c001eef1:	77 28                	ja     c001ef1b <Vm::faultHandler(regs*)+0xb0>
c001eef3:	3c 26                	cmp    al,0x26
c001eef5:	0f 84 99 01 00 00    	je     c001f094 <Vm::faultHandler(regs*)+0x229>
c001eefb:	3c 2e                	cmp    al,0x2e
c001eefd:	0f 85 3b 07 00 00    	jne    c001f63e <Vm::faultHandler(regs*)+0x7d3>
c001ef03:	83 ec 0c             	sub    esp,0xc
c001ef06:	31 db                	xor    ebx,ebx
c001ef08:	68 8e c7 02 c0       	push   0xc002c78e
c001ef0d:	e8 f5 3f ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001ef12:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef15:	83 c4 10             	add    esp,0x10
c001ef18:	45                   	inc    ebp
c001ef19:	eb b2                	jmp    c001eecd <Vm::faultHandler(regs*)+0x62>
c001ef1b:	3c 64                	cmp    al,0x64
c001ef1d:	0f 84 8b 01 00 00    	je     c001f0ae <Vm::faultHandler(regs*)+0x243>
c001ef23:	0f 87 9f 01 00 00    	ja     c001f0c8 <Vm::faultHandler(regs*)+0x25d>
c001ef29:	3c 3e                	cmp    al,0x3e
c001ef2b:	0f 85 0d 07 00 00    	jne    c001f63e <Vm::faultHandler(regs*)+0x7d3>
c001ef31:	83 ec 0c             	sub    esp,0xc
c001ef34:	b3 01                	mov    bl,0x1
c001ef36:	68 92 c7 02 c0       	push   0xc002c792
c001ef3b:	e8 c7 3f ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001ef40:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef43:	83 c4 10             	add    esp,0x10
c001ef46:	eb d0                	jmp    c001ef18 <Vm::faultHandler(regs*)+0xad>
c001ef48:	3c 6d                	cmp    al,0x6d
c001ef4a:	0f 84 af 03 00 00    	je     c001f2ff <Vm::faultHandler(regs*)+0x494>
c001ef50:	77 15                	ja     c001ef67 <Vm::faultHandler(regs*)+0xfc>
c001ef52:	3c 67                	cmp    al,0x67
c001ef54:	0f 84 bf 01 00 00    	je     c001f119 <Vm::faultHandler(regs*)+0x2ae>
c001ef5a:	3c 6c                	cmp    al,0x6c
c001ef5c:	0f 84 3f 03 00 00    	je     c001f2a1 <Vm::faultHandler(regs*)+0x436>
c001ef62:	e9 d7 06 00 00       	jmp    c001f63e <Vm::faultHandler(regs*)+0x7d3>
c001ef67:	3c 6f                	cmp    al,0x6f
c001ef69:	0f 84 a4 04 00 00    	je     c001f413 <Vm::faultHandler(regs*)+0x5a8>
c001ef6f:	0f 82 11 04 00 00    	jb     c001f386 <Vm::faultHandler(regs*)+0x51b>
c001ef75:	3c 9c                	cmp    al,0x9c
c001ef77:	0f 84 ba 01 00 00    	je     c001f137 <Vm::faultHandler(regs*)+0x2cc>
c001ef7d:	e9 bc 06 00 00       	jmp    c001f63e <Vm::faultHandler(regs*)+0x7d3>
c001ef82:	3c ec                	cmp    al,0xec
c001ef84:	0f 84 24 06 00 00    	je     c001f5ae <Vm::faultHandler(regs*)+0x743>
c001ef8a:	0f 87 93 00 00 00    	ja     c001f023 <Vm::faultHandler(regs*)+0x1b8>
c001ef90:	3c e4                	cmp    al,0xe4
c001ef92:	0f 84 5c 05 00 00    	je     c001f4f4 <Vm::faultHandler(regs*)+0x689>
c001ef98:	77 6a                	ja     c001f004 <Vm::faultHandler(regs*)+0x199>
c001ef9a:	3c cd                	cmp    al,0xcd
c001ef9c:	0f 84 7e 02 00 00    	je     c001f220 <Vm::faultHandler(regs*)+0x3b5>
c001efa2:	3c cf                	cmp    al,0xcf
c001efa4:	0f 85 94 06 00 00    	jne    c001f63e <Vm::faultHandler(regs*)+0x7d3>
c001efaa:	83 ec 0c             	sub    esp,0xc
c001efad:	68 d6 c7 02 c0       	push   0xc002c7d6
c001efb2:	e8 50 3f ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001efb7:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001efba:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001efbd:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001efc1:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001efc4:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001efc8:	0d 00 02 02 00       	or     eax,0x20200
c001efcd:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001efd0:	56                   	push   esi
c001efd1:	53                   	push   ebx
c001efd2:	52                   	push   edx
c001efd3:	68 dc c7 02 c0       	push   0xc002c7dc
c001efd8:	e8 2a 3f ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001efdd:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001efe1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001efe7:	66 c1 e8 09          	shr    ax,0x9
c001efeb:	83 e0 01             	and    eax,0x1
c001efee:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001eff1:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001eff4:	83 c0 06             	add    eax,0x6
c001eff7:	25 ff ff 00 00       	and    eax,0xffff
c001effc:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001efff:	e9 95 02 00 00       	jmp    c001f299 <Vm::faultHandler(regs*)+0x42e>
c001f004:	3c e6                	cmp    al,0xe6
c001f006:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001f00a:	0f 84 4e 05 00 00    	je     c001f55e <Vm::faultHandler(regs*)+0x6f3>
c001f010:	0f 82 0a 05 00 00    	jb     c001f520 <Vm::faultHandler(regs*)+0x6b5>
c001f016:	3c e7                	cmp    al,0xe7
c001f018:	0f 84 69 05 00 00    	je     c001f587 <Vm::faultHandler(regs*)+0x71c>
c001f01e:	e9 1b 06 00 00       	jmp    c001f63e <Vm::faultHandler(regs*)+0x7d3>
c001f023:	3c ef                	cmp    al,0xef
c001f025:	0f 84 e6 05 00 00    	je     c001f611 <Vm::faultHandler(regs*)+0x7a6>
c001f02b:	77 37                	ja     c001f064 <Vm::faultHandler(regs*)+0x1f9>
c001f02d:	3c ed                	cmp    al,0xed
c001f02f:	0f 84 a3 05 00 00    	je     c001f5d8 <Vm::faultHandler(regs*)+0x76d>
c001f035:	3c ee                	cmp    al,0xee
c001f037:	0f 85 01 06 00 00    	jne    c001f63e <Vm::faultHandler(regs*)+0x7d3>
c001f03d:	52                   	push   edx
c001f03e:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f041:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f044:	68 77 c8 02 c0       	push   0xc002c877
c001f049:	e8 b9 3e ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001f04e:	59                   	pop    ecx
c001f04f:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f053:	5b                   	pop    ebx
c001f054:	50                   	push   eax
c001f055:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f059:	50                   	push   eax
c001f05a:	e8 2a fa ff ff       	call   c001ea89 <Vm::outbv(unsigned short, unsigned char)>
c001f05f:	e9 a5 05 00 00       	jmp    c001f609 <Vm::faultHandler(regs*)+0x79e>
c001f064:	3c fa                	cmp    al,0xfa
c001f066:	0f 84 f7 01 00 00    	je     c001f263 <Vm::faultHandler(regs*)+0x3f8>
c001f06c:	3c fb                	cmp    al,0xfb
c001f06e:	0f 84 0a 02 00 00    	je     c001f27e <Vm::faultHandler(regs*)+0x413>
c001f074:	3c f3                	cmp    al,0xf3
c001f076:	0f 85 c2 05 00 00    	jne    c001f63e <Vm::faultHandler(regs*)+0x7d3>
c001f07c:	83 ec 0c             	sub    esp,0xc
c001f07f:	68 af c7 02 c0       	push   0xc002c7af
c001f084:	e8 7e 3e ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001f089:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f08c:	83 c4 10             	add    esp,0x10
c001f08f:	e9 84 fe ff ff       	jmp    c001ef18 <Vm::faultHandler(regs*)+0xad>
c001f094:	83 ec 0c             	sub    esp,0xc
c001f097:	b3 02                	mov    bl,0x2
c001f099:	68 8a c7 02 c0       	push   0xc002c78a
c001f09e:	e8 64 3e ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001f0a3:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0a6:	83 c4 10             	add    esp,0x10
c001f0a9:	e9 6a fe ff ff       	jmp    c001ef18 <Vm::faultHandler(regs*)+0xad>
c001f0ae:	83 ec 0c             	sub    esp,0xc
c001f0b1:	b3 03                	mov    bl,0x3
c001f0b3:	68 96 c7 02 c0       	push   0xc002c796
c001f0b8:	e8 4a 3e ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001f0bd:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0c0:	83 c4 10             	add    esp,0x10
c001f0c3:	e9 50 fe ff ff       	jmp    c001ef18 <Vm::faultHandler(regs*)+0xad>
c001f0c8:	83 ec 0c             	sub    esp,0xc
c001f0cb:	b3 04                	mov    bl,0x4
c001f0cd:	68 9a c7 02 c0       	push   0xc002c79a
c001f0d2:	e8 30 3e ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001f0d7:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0da:	83 c4 10             	add    esp,0x10
c001f0dd:	e9 36 fe ff ff       	jmp    c001ef18 <Vm::faultHandler(regs*)+0xad>
c001f0e2:	83 ec 0c             	sub    esp,0xc
c001f0e5:	b3 05                	mov    bl,0x5
c001f0e7:	68 9e c7 02 c0       	push   0xc002c79e
c001f0ec:	e8 16 3e ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001f0f1:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0f4:	83 c4 10             	add    esp,0x10
c001f0f7:	e9 1c fe ff ff       	jmp    c001ef18 <Vm::faultHandler(regs*)+0xad>
c001f0fc:	83 ec 0c             	sub    esp,0xc
c001f0ff:	68 a2 c7 02 c0       	push   0xc002c7a2
c001f104:	e8 fe 3d ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001f109:	83 c4 10             	add    esp,0x10
c001f10c:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f10f:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f114:	e9 ff fd ff ff       	jmp    c001ef18 <Vm::faultHandler(regs*)+0xad>
c001f119:	50                   	push   eax
c001f11a:	50                   	push   eax
c001f11b:	6a 01                	push   0x1
c001f11d:	68 a7 c7 02 c0       	push   0xc002c7a7
c001f122:	e8 e0 3d ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001f127:	83 c4 10             	add    esp,0x10
c001f12a:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f12d:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f132:	e9 e1 fd ff ff       	jmp    c001ef18 <Vm::faultHandler(regs*)+0xad>
c001f137:	83 ec 0c             	sub    esp,0xc
c001f13a:	68 b5 c7 02 c0       	push   0xc002c7b5
c001f13f:	e8 c3 3d ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001f144:	83 c4 10             	add    esp,0x10
c001f147:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f14a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f14f:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f152:	74 2f                	je     c001f183 <Vm::faultHandler(regs*)+0x318>
c001f154:	83 ea 04             	sub    edx,0x4
c001f157:	25 ff 0d 00 00       	and    eax,0xdff
c001f15c:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f162:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f165:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f168:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f16e:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f172:	0f 84 bf 04 00 00    	je     c001f637 <Vm::faultHandler(regs*)+0x7cc>
c001f178:	80 cc 02             	or     ah,0x2
c001f17b:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f17e:	e9 b4 04 00 00       	jmp    c001f637 <Vm::faultHandler(regs*)+0x7cc>
c001f183:	83 ea 02             	sub    edx,0x2
c001f186:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f18c:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f18f:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f193:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f199:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f19d:	74 05                	je     c001f1a4 <Vm::faultHandler(regs*)+0x339>
c001f19f:	80 cc 02             	or     ah,0x2
c001f1a2:	eb 03                	jmp    c001f1a7 <Vm::faultHandler(regs*)+0x33c>
c001f1a4:	80 e4 fd             	and    ah,0xfd
c001f1a7:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f1ab:	e9 87 04 00 00       	jmp    c001f637 <Vm::faultHandler(regs*)+0x7cc>
c001f1b0:	83 ec 0c             	sub    esp,0xc
c001f1b3:	68 bc c7 02 c0       	push   0xc002c7bc
c001f1b8:	e8 4a 3d ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001f1bd:	83 c4 10             	add    esp,0x10
c001f1c0:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f1c5:	74 28                	je     c001f1ef <Vm::faultHandler(regs*)+0x384>
c001f1c7:	8b 06                	mov    eax,DWORD PTR [esi]
c001f1c9:	25 ff 0d 00 00       	and    eax,0xdff
c001f1ce:	0d 00 02 02 00       	or     eax,0x20200
c001f1d3:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f1d6:	8b 06                	mov    eax,DWORD PTR [esi]
c001f1d8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f1de:	c1 e8 09             	shr    eax,0x9
c001f1e1:	83 e0 01             	and    eax,0x1
c001f1e4:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f1e7:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f1ea:	83 c0 04             	add    eax,0x4
c001f1ed:	eb 24                	jmp    c001f213 <Vm::faultHandler(regs*)+0x3a8>
c001f1ef:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f1f2:	0d 00 02 02 00       	or     eax,0x20200
c001f1f7:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f1fa:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f1fd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f203:	66 c1 e8 09          	shr    ax,0x9
c001f207:	83 e0 01             	and    eax,0x1
c001f20a:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f20d:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f210:	83 c0 02             	add    eax,0x2
c001f213:	25 ff ff 00 00       	and    eax,0xffff
c001f218:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f21b:	e9 17 04 00 00       	jmp    c001f637 <Vm::faultHandler(regs*)+0x7cc>
c001f220:	53                   	push   ebx
c001f221:	53                   	push   ebx
c001f222:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f226:	50                   	push   eax
c001f227:	68 c2 c7 02 c0       	push   0xc002c7c2
c001f22c:	e8 d6 3c ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001f231:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f235:	83 c4 10             	add    esp,0x10
c001f238:	3c ee                	cmp    al,0xee
c001f23a:	75 10                	jne    c001f24c <Vm::faultHandler(regs*)+0x3e1>
c001f23c:	83 ec 0c             	sub    esp,0xc
c001f23f:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f242:	e8 fa f8 ff ff       	call   c001eb41 <Vm::mainloop3(unsigned long)>
c001f247:	e9 c0 03 00 00       	jmp    c001f60c <Vm::faultHandler(regs*)+0x7a1>
c001f24c:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f250:	83 ec 0c             	sub    esp,0xc
c001f253:	53                   	push   ebx
c001f254:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f258:	53                   	push   ebx
c001f259:	55                   	push   ebp
c001f25a:	50                   	push   eax
c001f25b:	57                   	push   edi
c001f25c:	e8 0c fb ff ff       	call   c001ed6d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f261:	eb 36                	jmp    c001f299 <Vm::faultHandler(regs*)+0x42e>
c001f263:	83 ec 0c             	sub    esp,0xc
c001f266:	68 cc c7 02 c0       	push   0xc002c7cc
c001f26b:	e8 97 3c ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001f270:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f275:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f279:	e9 8b 03 00 00       	jmp    c001f609 <Vm::faultHandler(regs*)+0x79e>
c001f27e:	83 ec 0c             	sub    esp,0xc
c001f281:	68 d1 c7 02 c0       	push   0xc002c7d1
c001f286:	e8 7c 3c ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001f28b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f290:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f294:	e9 70 03 00 00       	jmp    c001f609 <Vm::faultHandler(regs*)+0x79e>
c001f299:	83 c4 20             	add    esp,0x20
c001f29c:	e9 99 03 00 00       	jmp    c001f63a <Vm::faultHandler(regs*)+0x7cf>
c001f2a1:	83 ec 0c             	sub    esp,0xc
c001f2a4:	68 0f c8 02 c0       	push   0xc002c80f
c001f2a9:	e8 59 3c ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001f2ae:	83 c4 10             	add    esp,0x10
c001f2b1:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f2b4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f2b9:	74 0d                	je     c001f2c8 <Vm::faultHandler(regs*)+0x45d>
c001f2bb:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f2c2:	0f 87 9e 01 00 00    	ja     c001f466 <Vm::faultHandler(regs*)+0x5fb>
c001f2c8:	83 ec 0c             	sub    esp,0xc
c001f2cb:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f2cf:	0f b7 db             	movzx  ebx,bx
c001f2d2:	50                   	push   eax
c001f2d3:	e8 9e f7 ff ff       	call   c001ea76 <Vm::inbv(unsigned short)>
c001f2d8:	83 c4 0c             	add    esp,0xc
c001f2db:	0f b6 c0             	movzx  eax,al
c001f2de:	50                   	push   eax
c001f2df:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f2e3:	50                   	push   eax
c001f2e4:	53                   	push   ebx
c001f2e5:	e8 41 fb ff ff       	call   c001ee2b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f2ea:	83 c4 10             	add    esp,0x10
c001f2ed:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f2f0:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f2f4:	74 03                	je     c001f2f9 <Vm::faultHandler(regs*)+0x48e>
c001f2f6:	48                   	dec    eax
c001f2f7:	eb 01                	jmp    c001f2fa <Vm::faultHandler(regs*)+0x48f>
c001f2f9:	40                   	inc    eax
c001f2fa:	0f b7 c0             	movzx  eax,ax
c001f2fd:	eb 7f                	jmp    c001f37e <Vm::faultHandler(regs*)+0x513>
c001f2ff:	83 ec 0c             	sub    esp,0xc
c001f302:	68 41 c8 02 c0       	push   0xc002c841
c001f307:	e8 fb 3b ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001f30c:	83 c4 10             	add    esp,0x10
c001f30f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f312:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f317:	74 0d                	je     c001f326 <Vm::faultHandler(regs*)+0x4bb>
c001f319:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f320:	0f 87 40 01 00 00    	ja     c001f466 <Vm::faultHandler(regs*)+0x5fb>
c001f326:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f329:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f32d:	0f b7 db             	movzx  ebx,bx
c001f330:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f335:	74 20                	je     c001f357 <Vm::faultHandler(regs*)+0x4ec>
c001f337:	ed                   	in     eax,dx
c001f338:	51                   	push   ecx
c001f339:	50                   	push   eax
c001f33a:	56                   	push   esi
c001f33b:	53                   	push   ebx
c001f33c:	e8 15 fb ff ff       	call   c001ee56 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f341:	83 c4 10             	add    esp,0x10
c001f344:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f347:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f34b:	74 05                	je     c001f352 <Vm::faultHandler(regs*)+0x4e7>
c001f34d:	83 e8 04             	sub    eax,0x4
c001f350:	eb 27                	jmp    c001f379 <Vm::faultHandler(regs*)+0x50e>
c001f352:	83 c0 04             	add    eax,0x4
c001f355:	eb 22                	jmp    c001f379 <Vm::faultHandler(regs*)+0x50e>
c001f357:	66 ed                	in     ax,dx
c001f359:	0f b7 c0             	movzx  eax,ax
c001f35c:	52                   	push   edx
c001f35d:	50                   	push   eax
c001f35e:	56                   	push   esi
c001f35f:	53                   	push   ebx
c001f360:	e8 db fa ff ff       	call   c001ee40 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f365:	83 c4 10             	add    esp,0x10
c001f368:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f36b:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f36f:	74 05                	je     c001f376 <Vm::faultHandler(regs*)+0x50b>
c001f371:	83 e8 02             	sub    eax,0x2
c001f374:	eb 03                	jmp    c001f379 <Vm::faultHandler(regs*)+0x50e>
c001f376:	83 c0 02             	add    eax,0x2
c001f379:	25 ff ff 00 00       	and    eax,0xffff
c001f37e:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f381:	e9 b1 02 00 00       	jmp    c001f637 <Vm::faultHandler(regs*)+0x7cc>
c001f386:	83 ec 0c             	sub    esp,0xc
c001f389:	4b                   	dec    ebx
c001f38a:	68 47 c8 02 c0       	push   0xc002c847
c001f38f:	e8 73 3b ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001f394:	83 c4 10             	add    esp,0x10
c001f397:	80 fb 05             	cmp    bl,0x5
c001f39a:	77 0a                	ja     c001f3a6 <Vm::faultHandler(regs*)+0x53b>
c001f39c:	0f b6 db             	movzx  ebx,bl
c001f39f:	ff 24 9d b8 c8 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3748]
c001f3a6:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f3aa:	eb 1b                	jmp    c001f3c7 <Vm::faultHandler(regs*)+0x55c>
c001f3ac:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f3b0:	eb 15                	jmp    c001f3c7 <Vm::faultHandler(regs*)+0x55c>
c001f3b2:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f3b6:	eb 0f                	jmp    c001f3c7 <Vm::faultHandler(regs*)+0x55c>
c001f3b8:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f3bc:	eb 09                	jmp    c001f3c7 <Vm::faultHandler(regs*)+0x55c>
c001f3be:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f3c1:	eb 04                	jmp    c001f3c7 <Vm::faultHandler(regs*)+0x55c>
c001f3c3:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f3c7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f3cc:	74 0d                	je     c001f3db <Vm::faultHandler(regs*)+0x570>
c001f3ce:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f3d5:	0f 87 8b 00 00 00    	ja     c001f466 <Vm::faultHandler(regs*)+0x5fb>
c001f3db:	53                   	push   ebx
c001f3dc:	53                   	push   ebx
c001f3dd:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f3e1:	52                   	push   edx
c001f3e2:	50                   	push   eax
c001f3e3:	e8 0f fa ff ff       	call   c001edf7 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f3e8:	5e                   	pop    esi
c001f3e9:	0f b6 c0             	movzx  eax,al
c001f3ec:	5d                   	pop    ebp
c001f3ed:	50                   	push   eax
c001f3ee:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f3f2:	50                   	push   eax
c001f3f3:	e8 91 f6 ff ff       	call   c001ea89 <Vm::outbv(unsigned short, unsigned char)>
c001f3f8:	83 c4 10             	add    esp,0x10
c001f3fb:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f3fe:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f402:	74 03                	je     c001f407 <Vm::faultHandler(regs*)+0x59c>
c001f404:	48                   	dec    eax
c001f405:	eb 01                	jmp    c001f408 <Vm::faultHandler(regs*)+0x59d>
c001f407:	40                   	inc    eax
c001f408:	0f b7 c0             	movzx  eax,ax
c001f40b:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f40e:	e9 24 02 00 00       	jmp    c001f637 <Vm::faultHandler(regs*)+0x7cc>
c001f413:	83 ec 0c             	sub    esp,0xc
c001f416:	4b                   	dec    ebx
c001f417:	68 47 c8 02 c0       	push   0xc002c847
c001f41c:	e8 e6 3a ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001f421:	83 c4 10             	add    esp,0x10
c001f424:	80 fb 05             	cmp    bl,0x5
c001f427:	77 0a                	ja     c001f433 <Vm::faultHandler(regs*)+0x5c8>
c001f429:	0f b6 db             	movzx  ebx,bl
c001f42c:	ff 24 9d d0 c8 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3730]
c001f433:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f437:	eb 1b                	jmp    c001f454 <Vm::faultHandler(regs*)+0x5e9>
c001f439:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f43d:	eb 15                	jmp    c001f454 <Vm::faultHandler(regs*)+0x5e9>
c001f43f:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f443:	eb 0f                	jmp    c001f454 <Vm::faultHandler(regs*)+0x5e9>
c001f445:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f449:	eb 09                	jmp    c001f454 <Vm::faultHandler(regs*)+0x5e9>
c001f44b:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f44e:	eb 04                	jmp    c001f454 <Vm::faultHandler(regs*)+0x5e9>
c001f450:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f454:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f457:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f45c:	74 39                	je     c001f497 <Vm::faultHandler(regs*)+0x62c>
c001f45e:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f464:	76 31                	jbe    c001f497 <Vm::faultHandler(regs*)+0x62c>
c001f466:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f46a:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f46e:	51                   	push   ecx
c001f46f:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f473:	51                   	push   ecx
c001f474:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f478:	51                   	push   ecx
c001f479:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f47d:	51                   	push   ecx
c001f47e:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f482:	52                   	push   edx
c001f483:	50                   	push   eax
c001f484:	50                   	push   eax
c001f485:	68 14 c8 02 c0       	push   0xc002c814
c001f48a:	e8 78 3a ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001f48f:	83 c4 20             	add    esp,0x20
c001f492:	e9 fb 01 00 00       	jmp    c001f692 <Vm::faultHandler(regs*)+0x827>
c001f497:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f49a:	0f b7 d3             	movzx  edx,bx
c001f49d:	81 e6 00 04 00 00    	and    esi,0x400
c001f4a3:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f4a6:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f4ab:	74 1d                	je     c001f4ca <Vm::faultHandler(regs*)+0x65f>
c001f4ad:	51                   	push   ecx
c001f4ae:	51                   	push   ecx
c001f4af:	52                   	push   edx
c001f4b0:	50                   	push   eax
c001f4b1:	e8 64 f9 ff ff       	call   c001ee1a <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f4b6:	83 c4 10             	add    esp,0x10
c001f4b9:	89 ea                	mov    edx,ebp
c001f4bb:	ef                   	out    dx,eax
c001f4bc:	85 f6                	test   esi,esi
c001f4be:	74 05                	je     c001f4c5 <Vm::faultHandler(regs*)+0x65a>
c001f4c0:	83 eb 04             	sub    ebx,0x4
c001f4c3:	eb 21                	jmp    c001f4e6 <Vm::faultHandler(regs*)+0x67b>
c001f4c5:	83 c3 04             	add    ebx,0x4
c001f4c8:	eb 1c                	jmp    c001f4e6 <Vm::faultHandler(regs*)+0x67b>
c001f4ca:	51                   	push   ecx
c001f4cb:	51                   	push   ecx
c001f4cc:	52                   	push   edx
c001f4cd:	50                   	push   eax
c001f4ce:	e8 35 f9 ff ff       	call   c001ee08 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f4d3:	83 c4 10             	add    esp,0x10
c001f4d6:	89 ea                	mov    edx,ebp
c001f4d8:	66 ef                	out    dx,ax
c001f4da:	85 f6                	test   esi,esi
c001f4dc:	74 05                	je     c001f4e3 <Vm::faultHandler(regs*)+0x678>
c001f4de:	83 eb 02             	sub    ebx,0x2
c001f4e1:	eb 03                	jmp    c001f4e6 <Vm::faultHandler(regs*)+0x67b>
c001f4e3:	83 c3 02             	add    ebx,0x2
c001f4e6:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f4ec:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f4ef:	e9 43 01 00 00       	jmp    c001f637 <Vm::faultHandler(regs*)+0x7cc>
c001f4f4:	53                   	push   ebx
c001f4f5:	53                   	push   ebx
c001f4f6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4fa:	50                   	push   eax
c001f4fb:	68 4d c8 02 c0       	push   0xc002c84d
c001f500:	e8 02 3a ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001f505:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f50c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f510:	89 04 24             	mov    DWORD PTR [esp],eax
c001f513:	e8 5e f5 ff ff       	call   c001ea76 <Vm::inbv(unsigned short)>
c001f518:	0f b6 c0             	movzx  eax,al
c001f51b:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f51e:	eb 5e                	jmp    c001f57e <Vm::faultHandler(regs*)+0x713>
c001f520:	51                   	push   ecx
c001f521:	51                   	push   ecx
c001f522:	53                   	push   ebx
c001f523:	68 53 c8 02 c0       	push   0xc002c853
c001f528:	e8 da 39 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001f52d:	83 c4 10             	add    esp,0x10
c001f530:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f535:	74 07                	je     c001f53e <Vm::faultHandler(regs*)+0x6d3>
c001f537:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f53b:	ed                   	in     eax,dx
c001f53c:	eb 14                	jmp    c001f552 <Vm::faultHandler(regs*)+0x6e7>
c001f53e:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f541:	66 31 db             	xor    bx,bx
c001f544:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f547:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f54b:	66 ed                	in     ax,dx
c001f54d:	0f b7 c0             	movzx  eax,ax
c001f550:	09 d8                	or     eax,ebx
c001f552:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f555:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f559:	e9 dc 00 00 00       	jmp    c001f63a <Vm::faultHandler(regs*)+0x7cf>
c001f55e:	50                   	push   eax
c001f55f:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f562:	53                   	push   ebx
c001f563:	68 59 c8 02 c0       	push   0xc002c859
c001f568:	e8 9a 39 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001f56d:	58                   	pop    eax
c001f56e:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f572:	5a                   	pop    edx
c001f573:	50                   	push   eax
c001f574:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f578:	50                   	push   eax
c001f579:	e8 0b f5 ff ff       	call   c001ea89 <Vm::outbv(unsigned short, unsigned char)>
c001f57e:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f582:	e9 85 00 00 00       	jmp    c001f60c <Vm::faultHandler(regs*)+0x7a1>
c001f587:	50                   	push   eax
c001f588:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f58b:	53                   	push   ebx
c001f58c:	68 62 c8 02 c0       	push   0xc002c862
c001f591:	e8 71 39 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001f596:	83 c4 10             	add    esp,0x10
c001f599:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f59d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f5a2:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f5a5:	74 03                	je     c001f5aa <Vm::faultHandler(regs*)+0x73f>
c001f5a7:	ef                   	out    dx,eax
c001f5a8:	eb ab                	jmp    c001f555 <Vm::faultHandler(regs*)+0x6ea>
c001f5aa:	66 ef                	out    dx,ax
c001f5ac:	eb a7                	jmp    c001f555 <Vm::faultHandler(regs*)+0x6ea>
c001f5ae:	55                   	push   ebp
c001f5af:	55                   	push   ebp
c001f5b0:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f5b3:	68 6b c8 02 c0       	push   0xc002c86b
c001f5b8:	e8 4a 39 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001f5bd:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f5c4:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f5c8:	89 04 24             	mov    DWORD PTR [esp],eax
c001f5cb:	e8 a6 f4 ff ff       	call   c001ea76 <Vm::inbv(unsigned short)>
c001f5d0:	0f b6 c0             	movzx  eax,al
c001f5d3:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f5d6:	eb 31                	jmp    c001f609 <Vm::faultHandler(regs*)+0x79e>
c001f5d8:	56                   	push   esi
c001f5d9:	56                   	push   esi
c001f5da:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f5dd:	68 71 c8 02 c0       	push   0xc002c871
c001f5e2:	e8 20 39 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001f5e7:	83 c4 10             	add    esp,0x10
c001f5ea:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f5ed:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f5f2:	74 03                	je     c001f5f7 <Vm::faultHandler(regs*)+0x78c>
c001f5f4:	ed                   	in     eax,dx
c001f5f5:	eb 0d                	jmp    c001f604 <Vm::faultHandler(regs*)+0x799>
c001f5f7:	66 ed                	in     ax,dx
c001f5f9:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f5fc:	0f b7 c0             	movzx  eax,ax
c001f5ff:	66 31 d2             	xor    dx,dx
c001f602:	09 d0                	or     eax,edx
c001f604:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f607:	eb 2e                	jmp    c001f637 <Vm::faultHandler(regs*)+0x7cc>
c001f609:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f60c:	83 c4 10             	add    esp,0x10
c001f60f:	eb 29                	jmp    c001f63a <Vm::faultHandler(regs*)+0x7cf>
c001f611:	50                   	push   eax
c001f612:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f615:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f618:	68 80 c8 02 c0       	push   0xc002c880
c001f61d:	e8 e5 38 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001f622:	83 c4 10             	add    esp,0x10
c001f625:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f628:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f62d:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f630:	74 03                	je     c001f635 <Vm::faultHandler(regs*)+0x7ca>
c001f632:	ef                   	out    dx,eax
c001f633:	eb 02                	jmp    c001f637 <Vm::faultHandler(regs*)+0x7cc>
c001f635:	66 ef                	out    dx,ax
c001f637:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f63a:	b0 01                	mov    al,0x1
c001f63c:	eb 56                	jmp    c001f694 <Vm::faultHandler(regs*)+0x829>
c001f63e:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f642:	51                   	push   ecx
c001f643:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f647:	51                   	push   ecx
c001f648:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f64c:	51                   	push   ecx
c001f64d:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f651:	51                   	push   ecx
c001f652:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f656:	52                   	push   edx
c001f657:	50                   	push   eax
c001f658:	50                   	push   eax
c001f659:	68 89 c8 02 c0       	push   0xc002c889
c001f65e:	e8 a4 38 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c001f663:	83 c4 20             	add    esp,0x20
c001f666:	83 ec 0c             	sub    esp,0xc
c001f669:	6a 60                	push   0x60
c001f66b:	e8 06 f4 ff ff       	call   c001ea76 <Vm::inbv(unsigned short)>
c001f670:	83 c4 10             	add    esp,0x10
c001f673:	3c 1c                	cmp    al,0x1c
c001f675:	74 04                	je     c001f67b <Vm::faultHandler(regs*)+0x810>
c001f677:	3c 5a                	cmp    al,0x5a
c001f679:	75 eb                	jne    c001f666 <Vm::faultHandler(regs*)+0x7fb>
c001f67b:	3c 1c                	cmp    al,0x1c
c001f67d:	74 04                	je     c001f683 <Vm::faultHandler(regs*)+0x818>
c001f67f:	3c 5a                	cmp    al,0x5a
c001f681:	75 0f                	jne    c001f692 <Vm::faultHandler(regs*)+0x827>
c001f683:	83 ec 0c             	sub    esp,0xc
c001f686:	6a 60                	push   0x60
c001f688:	e8 e9 f3 ff ff       	call   c001ea76 <Vm::inbv(unsigned short)>
c001f68d:	83 c4 10             	add    esp,0x10
c001f690:	eb e9                	jmp    c001f67b <Vm::faultHandler(regs*)+0x810>
c001f692:	31 c0                	xor    eax,eax
c001f694:	83 c4 1c             	add    esp,0x1c
c001f697:	5b                   	pop    ebx
c001f698:	5e                   	pop    esi
c001f699:	5f                   	pop    edi
c001f69a:	5d                   	pop    ebp
c001f69b:	c3                   	ret    

c001f69c <Vm::fpuInternalTo32(unsigned long long)>:
c001f69c:	57                   	push   edi
c001f69d:	56                   	push   esi
c001f69e:	53                   	push   ebx
c001f69f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f6a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6a7:	89 d6                	mov    esi,edx
c001f6a9:	89 d7                	mov    edi,edx
c001f6ab:	89 c1                	mov    ecx,eax
c001f6ad:	c1 ef 14             	shr    edi,0x14
c001f6b0:	89 d3                	mov    ebx,edx
c001f6b2:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f6b8:	31 d2                	xor    edx,edx
c001f6ba:	89 f8                	mov    eax,edi
c001f6bc:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f6c2:	bf ff 00 00 00       	mov    edi,0xff
c001f6c7:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f6cc:	83 d2 ff             	adc    edx,0xffffffff
c001f6cf:	39 c7                	cmp    edi,eax
c001f6d1:	bf 00 00 00 00       	mov    edi,0x0
c001f6d6:	19 d7                	sbb    edi,edx
c001f6d8:	72 15                	jb     c001f6ef <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f6da:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f6de:	c1 e0 17             	shl    eax,0x17
c001f6e1:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f6e7:	09 f1                	or     ecx,esi
c001f6e9:	09 c1                	or     ecx,eax
c001f6eb:	89 cf                	mov    edi,ecx
c001f6ed:	eb 02                	jmp    c001f6f1 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f6ef:	31 ff                	xor    edi,edi
c001f6f1:	89 f8                	mov    eax,edi
c001f6f3:	5b                   	pop    ebx
c001f6f4:	5e                   	pop    esi
c001f6f5:	5f                   	pop    edi
c001f6f6:	c3                   	ret    

c001f6f7 <Vm::fpuInternalTo64(unsigned long long)>:
c001f6f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6fb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f6ff:	c3                   	ret    

c001f700 <Vm::fpu32ToInternal(unsigned int)>:
c001f700:	57                   	push   edi
c001f701:	31 ff                	xor    edi,edi
c001f703:	56                   	push   esi
c001f704:	53                   	push   ebx
c001f705:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f709:	89 cb                	mov    ebx,ecx
c001f70b:	89 ce                	mov    esi,ecx
c001f70d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f713:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f719:	c1 e9 17             	shr    ecx,0x17
c001f71c:	89 f0                	mov    eax,esi
c001f71e:	0f b6 d1             	movzx  edx,cl
c001f721:	81 c2 80 03 00 00    	add    edx,0x380
c001f727:	89 d1                	mov    ecx,edx
c001f729:	89 fa                	mov    edx,edi
c001f72b:	c1 e1 14             	shl    ecx,0x14
c001f72e:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f732:	c1 e0 1d             	shl    eax,0x1d
c001f735:	89 d7                	mov    edi,edx
c001f737:	89 c6                	mov    esi,eax
c001f739:	89 ca                	mov    edx,ecx
c001f73b:	89 f0                	mov    eax,esi
c001f73d:	09 fa                	or     edx,edi
c001f73f:	09 da                	or     edx,ebx
c001f741:	5b                   	pop    ebx
c001f742:	5e                   	pop    esi
c001f743:	5f                   	pop    edi
c001f744:	c3                   	ret    

c001f745 <Vm::fpu64ToInternal(unsigned long long)>:
c001f745:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f749:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f74d:	c3                   	ret    

c001f74e <Vm::fpuFloatToLong(unsigned long long)>:
c001f74e:	57                   	push   edi
c001f74f:	31 c0                	xor    eax,eax
c001f751:	56                   	push   esi
c001f752:	31 d2                	xor    edx,edx
c001f754:	53                   	push   ebx
c001f755:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f759:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f75d:	89 d9                	mov    ecx,ebx
c001f75f:	c1 e9 14             	shr    ecx,0x14
c001f762:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f768:	89 cf                	mov    edi,ecx
c001f76a:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f770:	78 33                	js     c001f7a5 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f772:	89 d9                	mov    ecx,ebx
c001f774:	89 f0                	mov    eax,esi
c001f776:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f77c:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f782:	89 ca                	mov    edx,ecx
c001f784:	b9 34 00 00 00       	mov    ecx,0x34
c001f789:	29 f9                	sub    ecx,edi
c001f78b:	0f ad d0             	shrd   eax,edx,cl
c001f78e:	d3 fa                	sar    edx,cl
c001f790:	f6 c1 20             	test   cl,0x20
c001f793:	74 05                	je     c001f79a <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f795:	89 d0                	mov    eax,edx
c001f797:	c1 fa 1f             	sar    edx,0x1f
c001f79a:	85 db                	test   ebx,ebx
c001f79c:	79 07                	jns    c001f7a5 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f79e:	f7 d8                	neg    eax
c001f7a0:	83 d2 00             	adc    edx,0x0
c001f7a3:	f7 da                	neg    edx
c001f7a5:	5b                   	pop    ebx
c001f7a6:	5e                   	pop    esi
c001f7a7:	5f                   	pop    edi
c001f7a8:	c3                   	ret    

c001f7a9 <Vm::fpuULongToFloat(unsigned long long)>:
c001f7a9:	57                   	push   edi
c001f7aa:	31 c9                	xor    ecx,ecx
c001f7ac:	56                   	push   esi
c001f7ad:	53                   	push   ebx
c001f7ae:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f7b2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f7b6:	0f ba e7 14          	bt     edi,0x14
c001f7ba:	72 07                	jb     c001f7c3 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f7bc:	01 f6                	add    esi,esi
c001f7be:	11 ff                	adc    edi,edi
c001f7c0:	41                   	inc    ecx
c001f7c1:	eb f3                	jmp    c001f7b6 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f7c3:	89 fa                	mov    edx,edi
c001f7c5:	89 f0                	mov    eax,esi
c001f7c7:	bb 33 04 00 00       	mov    ebx,0x433
c001f7cc:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f7d2:	29 cb                	sub    ebx,ecx
c001f7d4:	89 d9                	mov    ecx,ebx
c001f7d6:	5b                   	pop    ebx
c001f7d7:	c1 e1 14             	shl    ecx,0x14
c001f7da:	5e                   	pop    esi
c001f7db:	09 ca                	or     edx,ecx
c001f7dd:	5f                   	pop    edi
c001f7de:	c3                   	ret    

c001f7df <Vm::fpuLongToFloat(long long)>:
c001f7df:	56                   	push   esi
c001f7e0:	31 c0                	xor    eax,eax
c001f7e2:	53                   	push   ebx
c001f7e3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f7e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f7eb:	39 c8                	cmp    eax,ecx
c001f7ed:	19 d8                	sbb    eax,ebx
c001f7ef:	7d 04                	jge    c001f7f5 <Vm::fpuLongToFloat(long long)+0x16>
c001f7f1:	31 f6                	xor    esi,esi
c001f7f3:	eb 0c                	jmp    c001f801 <Vm::fpuLongToFloat(long long)+0x22>
c001f7f5:	f7 d9                	neg    ecx
c001f7f7:	be 01 00 00 00       	mov    esi,0x1
c001f7fc:	83 d3 00             	adc    ebx,0x0
c001f7ff:	f7 db                	neg    ebx
c001f801:	31 c0                	xor    eax,eax
c001f803:	0f ba e3 14          	bt     ebx,0x14
c001f807:	72 07                	jb     c001f810 <Vm::fpuLongToFloat(long long)+0x31>
c001f809:	01 c9                	add    ecx,ecx
c001f80b:	11 db                	adc    ebx,ebx
c001f80d:	40                   	inc    eax
c001f80e:	eb f3                	jmp    c001f803 <Vm::fpuLongToFloat(long long)+0x24>
c001f810:	ba 33 04 00 00       	mov    edx,0x433
c001f815:	29 c2                	sub    edx,eax
c001f817:	89 c8                	mov    eax,ecx
c001f819:	c1 e2 14             	shl    edx,0x14
c001f81c:	89 d9                	mov    ecx,ebx
c001f81e:	89 f3                	mov    ebx,esi
c001f820:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f826:	09 ca                	or     edx,ecx
c001f828:	84 db                	test   bl,bl
c001f82a:	74 06                	je     c001f832 <Vm::fpuLongToFloat(long long)+0x53>
c001f82c:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f832:	5b                   	pop    ebx
c001f833:	5e                   	pop    esi
c001f834:	c3                   	ret    

c001f835 <Vm::fpuGet0()>:
c001f835:	31 c0                	xor    eax,eax
c001f837:	31 d2                	xor    edx,edx
c001f839:	c3                   	ret    

c001f83a <Vm::fpuGet1()>:
c001f83a:	b8 01 00 00 00       	mov    eax,0x1
c001f83f:	31 d2                	xor    edx,edx
c001f841:	c3                   	ret    

c001f842 <Vm::fpuGetPi()>:
c001f842:	b8 03 00 00 00       	mov    eax,0x3
c001f847:	31 d2                	xor    edx,edx
c001f849:	c3                   	ret    

c001f84a <Vm::fpuGetLog2E()>:
c001f84a:	83 ec 18             	sub    esp,0x18
c001f84d:	68 e8 c8 02 c0       	push   0xc002c8e8
c001f852:	e8 ee ad ff ff       	call   c001a645 <Krnl::panic(char const*)>
c001f857:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f85c:	31 d2                	xor    edx,edx
c001f85e:	83 c4 1c             	add    esp,0x1c
c001f861:	c3                   	ret    

c001f862 <Vm::fpuGetLogE2()>:
c001f862:	83 ec 18             	sub    esp,0x18
c001f865:	68 f4 c8 02 c0       	push   0xc002c8f4
c001f86a:	e8 d6 ad ff ff       	call   c001a645 <Krnl::panic(char const*)>
c001f86f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f874:	31 d2                	xor    edx,edx
c001f876:	83 c4 1c             	add    esp,0x1c
c001f879:	c3                   	ret    

c001f87a <Vm::fpuGetLog210()>:
c001f87a:	83 ec 18             	sub    esp,0x18
c001f87d:	68 00 c9 02 c0       	push   0xc002c900
c001f882:	e8 be ad ff ff       	call   c001a645 <Krnl::panic(char const*)>
c001f887:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f88c:	31 d2                	xor    edx,edx
c001f88e:	83 c4 1c             	add    esp,0x1c
c001f891:	c3                   	ret    

c001f892 <Vm::fpuGetLog102()>:
c001f892:	83 ec 18             	sub    esp,0x18
c001f895:	68 0d c9 02 c0       	push   0xc002c90d
c001f89a:	e8 a6 ad ff ff       	call   c001a645 <Krnl::panic(char const*)>
c001f89f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f8a4:	31 d2                	xor    edx,edx
c001f8a6:	83 c4 1c             	add    esp,0x1c
c001f8a9:	c3                   	ret    

c001f8aa <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f8aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f8ae:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f8b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f8b6:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f8ba:	0f 92 c0             	setb   al
c001f8bd:	c3                   	ret    

c001f8be <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f8be:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f8c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8c6:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f8ca:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f8ce:	09 c2                	or     edx,eax
c001f8d0:	0f 94 c0             	sete   al
c001f8d3:	c3                   	ret    

c001f8d4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f8d4:	57                   	push   edi
c001f8d5:	56                   	push   esi
c001f8d6:	53                   	push   ebx
c001f8d7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f8db:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f8df:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f8e3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f8e7:	57                   	push   edi
c001f8e8:	56                   	push   esi
c001f8e9:	53                   	push   ebx
c001f8ea:	51                   	push   ecx
c001f8eb:	e8 ce ff ff ff       	call   c001f8be <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f8f0:	83 c4 10             	add    esp,0x10
c001f8f3:	88 c2                	mov    dl,al
c001f8f5:	31 c0                	xor    eax,eax
c001f8f7:	84 d2                	test   dl,dl
c001f8f9:	75 0c                	jne    c001f907 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f8fb:	57                   	push   edi
c001f8fc:	56                   	push   esi
c001f8fd:	53                   	push   ebx
c001f8fe:	51                   	push   ecx
c001f8ff:	e8 a6 ff ff ff       	call   c001f8aa <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f904:	83 c4 10             	add    esp,0x10
c001f907:	83 e0 01             	and    eax,0x1
c001f90a:	5b                   	pop    ebx
c001f90b:	88 c1                	mov    cl,al
c001f90d:	83 e2 01             	and    edx,0x1
c001f910:	a0 a1 1b 03 c0       	mov    al,ds:0xc0031ba1
c001f915:	c1 e2 06             	shl    edx,0x6
c001f918:	83 e0 ba             	and    eax,0xffffffba
c001f91b:	5e                   	pop    esi
c001f91c:	09 c8                	or     eax,ecx
c001f91e:	5f                   	pop    edi
c001f91f:	09 d0                	or     eax,edx
c001f921:	a2 a1 1b 03 c0       	mov    ds:0xc0031ba1,al
c001f926:	c3                   	ret    

c001f927 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f927:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f92b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f92f:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f933:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f937:	c3                   	ret    

c001f938 <Vm::fpuAbs(unsigned long long)>:
c001f938:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f93c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f940:	c3                   	ret    

c001f941 <Vm::fpuChs(unsigned long long)>:
c001f941:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f945:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f949:	f7 d8                	neg    eax
c001f94b:	83 d2 00             	adc    edx,0x0
c001f94e:	f7 da                	neg    edx
c001f950:	c3                   	ret    

c001f951 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f951:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f955:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f95a:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f95e:	eb c7                	jmp    c001f927 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f960 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f960:	53                   	push   ebx
c001f961:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f965:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f969:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f96d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f971:	0f af ca             	imul   ecx,edx
c001f974:	0f af d8             	imul   ebx,eax
c001f977:	f7 e2                	mul    edx
c001f979:	01 d9                	add    ecx,ebx
c001f97b:	5b                   	pop    ebx
c001f97c:	01 ca                	add    edx,ecx
c001f97e:	c3                   	ret    

c001f97f <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f97f:	83 ec 0c             	sub    esp,0xc
c001f982:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f986:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f98a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f98e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f992:	e8 6d 71 00 00       	call   c0026b04 <__udivdi3>
c001f997:	83 c4 1c             	add    esp,0x1c
c001f99a:	c3                   	ret    

c001f99b <Vm::fpuSquare(unsigned long long)>:
c001f99b:	50                   	push   eax
c001f99c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f9a0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f9a4:	52                   	push   edx
c001f9a5:	50                   	push   eax
c001f9a6:	52                   	push   edx
c001f9a7:	50                   	push   eax
c001f9a8:	e8 b3 ff ff ff       	call   c001f960 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f9ad:	83 c4 14             	add    esp,0x14
c001f9b0:	c3                   	ret    

c001f9b1 <Vm::fpuGetReg(int)>:
c001f9b1:	83 ec 0c             	sub    esp,0xc
c001f9b4:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f9b9:	76 10                	jbe    c001f9cb <Vm::fpuGetReg(int)+0x1a>
c001f9bb:	83 ec 0c             	sub    esp,0xc
c001f9be:	68 1a c9 02 c0       	push   0xc002c91a
c001f9c3:	e8 7d ac ff ff       	call   c001a645 <Krnl::panic(char const*)>
c001f9c8:	83 c4 10             	add    esp,0x10
c001f9cb:	a0 a1 1b 03 c0       	mov    al,ds:0xc0031ba1
c001f9d0:	b9 08 00 00 00       	mov    ecx,0x8
c001f9d5:	c0 e8 03             	shr    al,0x3
c001f9d8:	83 e0 07             	and    eax,0x7
c001f9db:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f9df:	99                   	cdq    
c001f9e0:	f7 f9                	idiv   ecx
c001f9e2:	8b 04 d5 a4 1b 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffce45c]
c001f9e9:	8b 14 d5 a8 1b 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffce458]
c001f9f0:	83 c4 0c             	add    esp,0xc
c001f9f3:	c3                   	ret    

c001f9f4 <Vm::fpuSetReg(int, unsigned long long)>:
c001f9f4:	57                   	push   edi
c001f9f5:	56                   	push   esi
c001f9f6:	52                   	push   edx
c001f9f7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f9fb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f9ff:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001fa04:	76 10                	jbe    c001fa16 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001fa06:	83 ec 0c             	sub    esp,0xc
c001fa09:	68 2d c9 02 c0       	push   0xc002c92d
c001fa0e:	e8 32 ac ff ff       	call   c001a645 <Krnl::panic(char const*)>
c001fa13:	83 c4 10             	add    esp,0x10
c001fa16:	a0 a1 1b 03 c0       	mov    al,ds:0xc0031ba1
c001fa1b:	b9 08 00 00 00       	mov    ecx,0x8
c001fa20:	c0 e8 03             	shr    al,0x3
c001fa23:	83 e0 07             	and    eax,0x7
c001fa26:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fa2a:	99                   	cdq    
c001fa2b:	f7 f9                	idiv   ecx
c001fa2d:	89 34 d5 a4 1b 03 c0 	mov    DWORD PTR [edx*8-0x3ffce45c],esi
c001fa34:	89 3c d5 a8 1b 03 c0 	mov    DWORD PTR [edx*8-0x3ffce458],edi
c001fa3b:	58                   	pop    eax
c001fa3c:	5e                   	pop    esi
c001fa3d:	5f                   	pop    edi
c001fa3e:	c3                   	ret    

c001fa3f <Vm::fpuPush(unsigned long long)>:
c001fa3f:	a0 a1 1b 03 c0       	mov    al,ds:0xc0031ba1
c001fa44:	c0 e8 03             	shr    al,0x3
c001fa47:	83 e0 07             	and    eax,0x7
c001fa4a:	83 c0 07             	add    eax,0x7
c001fa4d:	88 c2                	mov    dl,al
c001fa4f:	83 e0 07             	and    eax,0x7
c001fa52:	83 e2 07             	and    edx,0x7
c001fa55:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001fa5c:	8a 15 a1 1b 03 c0    	mov    dl,BYTE PTR ds:0xc0031ba1
c001fa62:	83 e2 c7             	and    edx,0xffffffc7
c001fa65:	09 ca                	or     edx,ecx
c001fa67:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fa6b:	88 15 a1 1b 03 c0    	mov    BYTE PTR ds:0xc0031ba1,dl
c001fa71:	89 0c c5 a8 1b 03 c0 	mov    DWORD PTR [eax*8-0x3ffce458],ecx
c001fa78:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fa7c:	89 14 c5 a4 1b 03 c0 	mov    DWORD PTR [eax*8-0x3ffce45c],edx
c001fa83:	a1 e4 1b 03 c0       	mov    eax,ds:0xc0031be4
c001fa88:	83 f8 08             	cmp    eax,0x8
c001fa8b:	75 08                	jne    c001fa95 <Vm::fpuPush(unsigned long long)+0x56>
c001fa8d:	80 0d a0 1b 03 c0 40 	or     BYTE PTR ds:0xc0031ba0,0x40
c001fa94:	c3                   	ret    
c001fa95:	40                   	inc    eax
c001fa96:	a3 e4 1b 03 c0       	mov    ds:0xc0031be4,eax
c001fa9b:	c3                   	ret    

c001fa9c <Vm::fpuPop()>:
c001fa9c:	8a 0d a1 1b 03 c0    	mov    cl,BYTE PTR ds:0xc0031ba1
c001faa2:	53                   	push   ebx
c001faa3:	c0 e9 03             	shr    cl,0x3
c001faa6:	8a 1d a1 1b 03 c0    	mov    bl,BYTE PTR ds:0xc0031ba1
c001faac:	83 e1 07             	and    ecx,0x7
c001faaf:	83 e3 c7             	and    ebx,0xffffffc7
c001fab2:	8b 04 cd a4 1b 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffce45c]
c001fab9:	8b 14 cd a8 1b 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffce458]
c001fac0:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001fac7:	83 e1 38             	and    ecx,0x38
c001faca:	09 d9                	or     ecx,ebx
c001facc:	88 0d a1 1b 03 c0    	mov    BYTE PTR ds:0xc0031ba1,cl
c001fad2:	8b 0d e4 1b 03 c0    	mov    ecx,DWORD PTR ds:0xc0031be4
c001fad8:	85 c9                	test   ecx,ecx
c001fada:	74 09                	je     c001fae5 <Vm::fpuPop()+0x49>
c001fadc:	49                   	dec    ecx
c001fadd:	89 0d e4 1b 03 c0    	mov    DWORD PTR ds:0xc0031be4,ecx
c001fae3:	eb 07                	jmp    c001faec <Vm::fpuPop()+0x50>
c001fae5:	80 0d a0 1b 03 c0 40 	or     BYTE PTR ds:0xc0031ba0,0x40
c001faec:	5b                   	pop    ebx
c001faed:	c3                   	ret    

c001faee <Vm::x87Handler(regs*)>:
c001faee:	55                   	push   ebp
c001faef:	57                   	push   edi
c001faf0:	56                   	push   esi
c001faf1:	53                   	push   ebx
c001faf2:	83 ec 1c             	sub    esp,0x1c
c001faf5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001faf9:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001fafe:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001fb01:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001fb09:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001fb0d:	50                   	push   eax
c001fb0e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001fb12:	50                   	push   eax
c001fb13:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fb17:	50                   	push   eax
c001fb18:	53                   	push   ebx
c001fb19:	e8 ee a1 ff ff       	call   c0019d0c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001fb1e:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001fb21:	83 c4 10             	add    esp,0x10
c001fb24:	89 c6                	mov    esi,eax
c001fb26:	80 fa d9             	cmp    dl,0xd9
c001fb29:	0f 85 52 01 00 00    	jne    c001fc81 <Vm::x87Handler(regs*)+0x193>
c001fb2f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb33:	8d 50 20             	lea    edx,[eax+0x20]
c001fb36:	80 fa 0e             	cmp    dl,0xe
c001fb39:	0f 87 86 00 00 00    	ja     c001fbc5 <Vm::x87Handler(regs*)+0xd7>
c001fb3f:	0f b6 d2             	movzx  edx,dl
c001fb42:	ff 24 95 40 c9 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd36c0]
c001fb49:	e8 e7 fc ff ff       	call   c001f835 <Vm::fpuGet0()>
c001fb4e:	eb 05                	jmp    c001fb55 <Vm::x87Handler(regs*)+0x67>
c001fb50:	e8 e5 fc ff ff       	call   c001f83a <Vm::fpuGet1()>
c001fb55:	57                   	push   edi
c001fb56:	57                   	push   edi
c001fb57:	52                   	push   edx
c001fb58:	50                   	push   eax
c001fb59:	e8 e1 fe ff ff       	call   c001fa3f <Vm::fpuPush(unsigned long long)>
c001fb5e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fb62:	83 c4 10             	add    esp,0x10
c001fb65:	b0 01                	mov    al,0x1
c001fb67:	e9 e3 09 00 00       	jmp    c002054f <Vm::x87Handler(regs*)+0xa61>
c001fb6c:	83 ec 0c             	sub    esp,0xc
c001fb6f:	6a 00                	push   0x0
c001fb71:	e8 3b fe ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c001fb76:	59                   	pop    ecx
c001fb77:	5e                   	pop    esi
c001fb78:	52                   	push   edx
c001fb79:	50                   	push   eax
c001fb7a:	e8 c2 fd ff ff       	call   c001f941 <Vm::fpuChs(unsigned long long)>
c001fb7f:	eb 13                	jmp    c001fb94 <Vm::x87Handler(regs*)+0xa6>
c001fb81:	83 ec 0c             	sub    esp,0xc
c001fb84:	6a 00                	push   0x0
c001fb86:	e8 26 fe ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c001fb8b:	5f                   	pop    edi
c001fb8c:	5d                   	pop    ebp
c001fb8d:	52                   	push   edx
c001fb8e:	50                   	push   eax
c001fb8f:	e8 a4 fd ff ff       	call   c001f938 <Vm::fpuAbs(unsigned long long)>
c001fb94:	83 c4 0c             	add    esp,0xc
c001fb97:	52                   	push   edx
c001fb98:	50                   	push   eax
c001fb99:	6a 00                	push   0x0
c001fb9b:	e8 54 fe ff ff       	call   c001f9f4 <Vm::fpuSetReg(int, unsigned long long)>
c001fba0:	eb bc                	jmp    c001fb5e <Vm::x87Handler(regs*)+0x70>
c001fba2:	e8 d3 fc ff ff       	call   c001f87a <Vm::fpuGetLog210()>
c001fba7:	eb ac                	jmp    c001fb55 <Vm::x87Handler(regs*)+0x67>
c001fba9:	e8 9c fc ff ff       	call   c001f84a <Vm::fpuGetLog2E()>
c001fbae:	eb a5                	jmp    c001fb55 <Vm::x87Handler(regs*)+0x67>
c001fbb0:	e8 8d fc ff ff       	call   c001f842 <Vm::fpuGetPi()>
c001fbb5:	eb 9e                	jmp    c001fb55 <Vm::x87Handler(regs*)+0x67>
c001fbb7:	e8 d6 fc ff ff       	call   c001f892 <Vm::fpuGetLog102()>
c001fbbc:	eb 97                	jmp    c001fb55 <Vm::x87Handler(regs*)+0x67>
c001fbbe:	e8 9f fc ff ff       	call   c001f862 <Vm::fpuGetLogE2()>
c001fbc3:	eb 90                	jmp    c001fb55 <Vm::x87Handler(regs*)+0x67>
c001fbc5:	8d 50 40             	lea    edx,[eax+0x40]
c001fbc8:	80 fa 07             	cmp    dl,0x7
c001fbcb:	77 15                	ja     c001fbe2 <Vm::x87Handler(regs*)+0xf4>
c001fbcd:	83 ec 0c             	sub    esp,0xc
c001fbd0:	2d c0 00 00 00       	sub    eax,0xc0
c001fbd5:	50                   	push   eax
c001fbd6:	e8 d6 fd ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c001fbdb:	59                   	pop    ecx
c001fbdc:	5e                   	pop    esi
c001fbdd:	e9 75 ff ff ff       	jmp    c001fb57 <Vm::x87Handler(regs*)+0x69>
c001fbe2:	8d 50 38             	lea    edx,[eax+0x38]
c001fbe5:	80 fa 07             	cmp    dl,0x7
c001fbe8:	77 3c                	ja     c001fc26 <Vm::x87Handler(regs*)+0x138>
c001fbea:	83 ec 0c             	sub    esp,0xc
c001fbed:	2d c8 00 00 00       	sub    eax,0xc8
c001fbf2:	50                   	push   eax
c001fbf3:	e8 b9 fd ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c001fbf8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbff:	89 c6                	mov    esi,eax
c001fc01:	89 d7                	mov    edi,edx
c001fc03:	e8 a9 fd ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c001fc08:	83 c4 0c             	add    esp,0xc
c001fc0b:	52                   	push   edx
c001fc0c:	50                   	push   eax
c001fc0d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc11:	2d c8 00 00 00       	sub    eax,0xc8
c001fc16:	50                   	push   eax
c001fc17:	e8 d8 fd ff ff       	call   c001f9f4 <Vm::fpuSetReg(int, unsigned long long)>
c001fc1c:	83 c4 0c             	add    esp,0xc
c001fc1f:	57                   	push   edi
c001fc20:	56                   	push   esi
c001fc21:	e9 73 ff ff ff       	jmp    c001fb99 <Vm::x87Handler(regs*)+0xab>
c001fc26:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc2a:	84 d2                	test   dl,dl
c001fc2c:	75 0f                	jne    c001fc3d <Vm::x87Handler(regs*)+0x14f>
c001fc2e:	83 ec 0c             	sub    esp,0xc
c001fc31:	ff 36                	push   DWORD PTR [esi]
c001fc33:	e8 c8 fa ff ff       	call   c001f700 <Vm::fpu32ToInternal(unsigned int)>
c001fc38:	e9 bf 00 00 00       	jmp    c001fcfc <Vm::x87Handler(regs*)+0x20e>
c001fc3d:	80 fa 03             	cmp    dl,0x3
c001fc40:	75 13                	jne    c001fc55 <Vm::x87Handler(regs*)+0x167>
c001fc42:	e8 55 fe ff ff       	call   c001fa9c <Vm::fpuPop()>
c001fc47:	55                   	push   ebp
c001fc48:	55                   	push   ebp
c001fc49:	52                   	push   edx
c001fc4a:	50                   	push   eax
c001fc4b:	e8 4c fa ff ff       	call   c001f69c <Vm::fpuInternalTo32(unsigned long long)>
c001fc50:	e9 88 00 00 00       	jmp    c001fcdd <Vm::x87Handler(regs*)+0x1ef>
c001fc55:	80 fa 05             	cmp    dl,0x5
c001fc58:	75 0e                	jne    c001fc68 <Vm::x87Handler(regs*)+0x17a>
c001fc5a:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fc5d:	66 a3 a2 1b 03 c0    	mov    ds:0xc0031ba2,ax
c001fc63:	e9 df 00 00 00       	jmp    c001fd47 <Vm::x87Handler(regs*)+0x259>
c001fc68:	31 c0                	xor    eax,eax
c001fc6a:	80 fa 07             	cmp    dl,0x7
c001fc6d:	0f 85 dc 08 00 00    	jne    c002054f <Vm::x87Handler(regs*)+0xa61>
c001fc73:	66 a1 a2 1b 03 c0    	mov    ax,ds:0xc0031ba2
c001fc79:	66 89 06             	mov    WORD PTR [esi],ax
c001fc7c:	e9 c6 00 00 00       	jmp    c001fd47 <Vm::x87Handler(regs*)+0x259>
c001fc81:	80 fa d8             	cmp    dl,0xd8
c001fc84:	0f 84 c9 00 00 00    	je     c001fd53 <Vm::x87Handler(regs*)+0x265>
c001fc8a:	80 fa dc             	cmp    dl,0xdc
c001fc8d:	0f 84 0d 02 00 00    	je     c001fea0 <Vm::x87Handler(regs*)+0x3b2>
c001fc93:	80 fa de             	cmp    dl,0xde
c001fc96:	0f 84 cd 02 00 00    	je     c001ff69 <Vm::x87Handler(regs*)+0x47b>
c001fc9c:	80 fa dd             	cmp    dl,0xdd
c001fc9f:	0f 84 5f 04 00 00    	je     c0020104 <Vm::x87Handler(regs*)+0x616>
c001fca5:	80 fa da             	cmp    dl,0xda
c001fca8:	0f 84 24 05 00 00    	je     c00201d2 <Vm::x87Handler(regs*)+0x6e4>
c001fcae:	80 fa df             	cmp    dl,0xdf
c001fcb1:	0f 84 68 05 00 00    	je     c002021f <Vm::x87Handler(regs*)+0x731>
c001fcb7:	31 c0                	xor    eax,eax
c001fcb9:	80 fa db             	cmp    dl,0xdb
c001fcbc:	0f 85 8d 08 00 00    	jne    c002054f <Vm::x87Handler(regs*)+0xa61>
c001fcc2:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fcc6:	80 fa 03             	cmp    dl,0x3
c001fcc9:	0f 85 70 06 00 00    	jne    c002033f <Vm::x87Handler(regs*)+0x851>
c001fccf:	e8 c8 fd ff ff       	call   c001fa9c <Vm::fpuPop()>
c001fcd4:	55                   	push   ebp
c001fcd5:	55                   	push   ebp
c001fcd6:	52                   	push   edx
c001fcd7:	50                   	push   eax
c001fcd8:	e8 71 fa ff ff       	call   c001f74e <Vm::fpuFloatToLong(unsigned long long)>
c001fcdd:	83 c4 10             	add    esp,0x10
c001fce0:	89 06                	mov    DWORD PTR [esi],eax
c001fce2:	eb 63                	jmp    c001fd47 <Vm::x87Handler(regs*)+0x259>
c001fce4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fce8:	84 d2                	test   dl,dl
c001fcea:	0f 85 e6 05 00 00    	jne    c00202d6 <Vm::x87Handler(regs*)+0x7e8>
c001fcf0:	57                   	push   edi
c001fcf1:	57                   	push   edi
c001fcf2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fcf5:	ff 36                	push   DWORD PTR [esi]
c001fcf7:	e8 49 fa ff ff       	call   c001f745 <Vm::fpu64ToInternal(unsigned long long)>
c001fcfc:	5e                   	pop    esi
c001fcfd:	5f                   	pop    edi
c001fcfe:	52                   	push   edx
c001fcff:	50                   	push   eax
c001fd00:	e8 3a fd ff ff       	call   c001fa3f <Vm::fpuPush(unsigned long long)>
c001fd05:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fd09:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fd0c:	e9 51 fe ff ff       	jmp    c001fb62 <Vm::x87Handler(regs*)+0x74>
c001fd11:	80 fa 03             	cmp    dl,0x3
c001fd14:	0f 85 d7 06 00 00    	jne    c00203f1 <Vm::x87Handler(regs*)+0x903>
c001fd1a:	57                   	push   edi
c001fd1b:	57                   	push   edi
c001fd1c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd1f:	ff 36                	push   DWORD PTR [esi]
c001fd21:	e8 1f fa ff ff       	call   c001f745 <Vm::fpu64ToInternal(unsigned long long)>
c001fd26:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd2d:	89 c6                	mov    esi,eax
c001fd2f:	89 d7                	mov    edi,edx
c001fd31:	e8 7b fc ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c001fd36:	57                   	push   edi
c001fd37:	56                   	push   esi
c001fd38:	52                   	push   edx
c001fd39:	50                   	push   eax
c001fd3a:	e8 95 fb ff ff       	call   c001f8d4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fd3f:	83 c4 20             	add    esp,0x20
c001fd42:	e8 55 fd ff ff       	call   c001fa9c <Vm::fpuPop()>
c001fd47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fd4b:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fd4e:	e9 12 fe ff ff       	jmp    c001fb65 <Vm::x87Handler(regs*)+0x77>
c001fd53:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd57:	8d 50 40             	lea    edx,[eax+0x40]
c001fd5a:	80 fa 07             	cmp    dl,0x7
c001fd5d:	77 29                	ja     c001fd88 <Vm::x87Handler(regs*)+0x29a>
c001fd5f:	83 ec 0c             	sub    esp,0xc
c001fd62:	2d c0 00 00 00       	sub    eax,0xc0
c001fd67:	50                   	push   eax
c001fd68:	e8 44 fc ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c001fd6d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd74:	89 c6                	mov    esi,eax
c001fd76:	89 d7                	mov    edi,edx
c001fd78:	e8 34 fc ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c001fd7d:	57                   	push   edi
c001fd7e:	56                   	push   esi
c001fd7f:	52                   	push   edx
c001fd80:	50                   	push   eax
c001fd81:	e8 a1 fb ff ff       	call   c001f927 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fd86:	eb 2f                	jmp    c001fdb7 <Vm::x87Handler(regs*)+0x2c9>
c001fd88:	8d 50 38             	lea    edx,[eax+0x38]
c001fd8b:	80 fa 07             	cmp    dl,0x7
c001fd8e:	77 2f                	ja     c001fdbf <Vm::x87Handler(regs*)+0x2d1>
c001fd90:	83 ec 0c             	sub    esp,0xc
c001fd93:	2d c8 00 00 00       	sub    eax,0xc8
c001fd98:	50                   	push   eax
c001fd99:	e8 13 fc ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c001fd9e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fda5:	89 c6                	mov    esi,eax
c001fda7:	89 d7                	mov    edi,edx
c001fda9:	e8 03 fc ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c001fdae:	57                   	push   edi
c001fdaf:	56                   	push   esi
c001fdb0:	52                   	push   edx
c001fdb1:	50                   	push   eax
c001fdb2:	e8 a9 fb ff ff       	call   c001f960 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fdb7:	83 c4 1c             	add    esp,0x1c
c001fdba:	e9 d8 fd ff ff       	jmp    c001fb97 <Vm::x87Handler(regs*)+0xa9>
c001fdbf:	8d 50 30             	lea    edx,[eax+0x30]
c001fdc2:	80 fa 07             	cmp    dl,0x7
c001fdc5:	77 0d                	ja     c001fdd4 <Vm::x87Handler(regs*)+0x2e6>
c001fdc7:	83 ec 0c             	sub    esp,0xc
c001fdca:	2d d0 00 00 00       	sub    eax,0xd0
c001fdcf:	e9 99 03 00 00       	jmp    c002016d <Vm::x87Handler(regs*)+0x67f>
c001fdd4:	8d 50 28             	lea    edx,[eax+0x28]
c001fdd7:	80 fa 07             	cmp    dl,0x7
c001fdda:	77 0d                	ja     c001fde9 <Vm::x87Handler(regs*)+0x2fb>
c001fddc:	83 ec 0c             	sub    esp,0xc
c001fddf:	2d d8 00 00 00       	sub    eax,0xd8
c001fde4:	e9 c0 03 00 00       	jmp    c00201a9 <Vm::x87Handler(regs*)+0x6bb>
c001fde9:	8d 50 20             	lea    edx,[eax+0x20]
c001fdec:	80 fa 07             	cmp    dl,0x7
c001fdef:	77 1b                	ja     c001fe0c <Vm::x87Handler(regs*)+0x31e>
c001fdf1:	83 ec 0c             	sub    esp,0xc
c001fdf4:	2d e0 00 00 00       	sub    eax,0xe0
c001fdf9:	50                   	push   eax
c001fdfa:	e8 b2 fb ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c001fdff:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe06:	89 c6                	mov    esi,eax
c001fe08:	89 d7                	mov    edi,edx
c001fe0a:	eb 22                	jmp    c001fe2e <Vm::x87Handler(regs*)+0x340>
c001fe0c:	8d 50 18             	lea    edx,[eax+0x18]
c001fe0f:	80 fa 07             	cmp    dl,0x7
c001fe12:	77 2d                	ja     c001fe41 <Vm::x87Handler(regs*)+0x353>
c001fe14:	83 ec 0c             	sub    esp,0xc
c001fe17:	6a 00                	push   0x0
c001fe19:	e8 93 fb ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c001fe1e:	89 c6                	mov    esi,eax
c001fe20:	89 d7                	mov    edi,edx
c001fe22:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe26:	2d e8 00 00 00       	sub    eax,0xe8
c001fe2b:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe2e:	e8 7e fb ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c001fe33:	57                   	push   edi
c001fe34:	56                   	push   esi
c001fe35:	52                   	push   edx
c001fe36:	50                   	push   eax
c001fe37:	e8 15 fb ff ff       	call   c001f951 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fe3c:	e9 76 ff ff ff       	jmp    c001fdb7 <Vm::x87Handler(regs*)+0x2c9>
c001fe41:	8d 50 10             	lea    edx,[eax+0x10]
c001fe44:	80 fa 07             	cmp    dl,0x7
c001fe47:	77 1b                	ja     c001fe64 <Vm::x87Handler(regs*)+0x376>
c001fe49:	83 ec 0c             	sub    esp,0xc
c001fe4c:	2d f0 00 00 00       	sub    eax,0xf0
c001fe51:	50                   	push   eax
c001fe52:	e8 5a fb ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c001fe57:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe5e:	89 c6                	mov    esi,eax
c001fe60:	89 d7                	mov    edi,edx
c001fe62:	eb 22                	jmp    c001fe86 <Vm::x87Handler(regs*)+0x398>
c001fe64:	3c f7                	cmp    al,0xf7
c001fe66:	0f 86 d1 03 00 00    	jbe    c002023d <Vm::x87Handler(regs*)+0x74f>
c001fe6c:	83 ec 0c             	sub    esp,0xc
c001fe6f:	6a 00                	push   0x0
c001fe71:	e8 3b fb ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c001fe76:	89 c6                	mov    esi,eax
c001fe78:	89 d7                	mov    edi,edx
c001fe7a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe7e:	2d f8 00 00 00       	sub    eax,0xf8
c001fe83:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe86:	e8 26 fb ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c001fe8b:	57                   	push   edi
c001fe8c:	56                   	push   esi
c001fe8d:	52                   	push   edx
c001fe8e:	50                   	push   eax
c001fe8f:	e8 eb fa ff ff       	call   c001f97f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fe94:	83 c4 1c             	add    esp,0x1c
c001fe97:	52                   	push   edx
c001fe98:	50                   	push   eax
c001fe99:	6a 00                	push   0x0
c001fe9b:	e9 51 02 00 00       	jmp    c00200f1 <Vm::x87Handler(regs*)+0x603>
c001fea0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fea4:	8d 50 40             	lea    edx,[eax+0x40]
c001fea7:	80 fa 07             	cmp    dl,0x7
c001feaa:	77 37                	ja     c001fee3 <Vm::x87Handler(regs*)+0x3f5>
c001feac:	83 ec 0c             	sub    esp,0xc
c001feaf:	2d c0 00 00 00       	sub    eax,0xc0
c001feb4:	50                   	push   eax
c001feb5:	e8 f7 fa ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c001feba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fec1:	89 c6                	mov    esi,eax
c001fec3:	89 d7                	mov    edi,edx
c001fec5:	e8 e7 fa ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c001feca:	57                   	push   edi
c001fecb:	56                   	push   esi
c001fecc:	52                   	push   edx
c001fecd:	50                   	push   eax
c001fece:	e8 54 fa ff ff       	call   c001f927 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fed3:	83 c4 1c             	add    esp,0x1c
c001fed6:	52                   	push   edx
c001fed7:	50                   	push   eax
c001fed8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fedc:	2d c0 00 00 00       	sub    eax,0xc0
c001fee1:	eb 3d                	jmp    c001ff20 <Vm::x87Handler(regs*)+0x432>
c001fee3:	8d 50 38             	lea    edx,[eax+0x38]
c001fee6:	80 fa 07             	cmp    dl,0x7
c001fee9:	77 3b                	ja     c001ff26 <Vm::x87Handler(regs*)+0x438>
c001feeb:	83 ec 0c             	sub    esp,0xc
c001feee:	2d c8 00 00 00       	sub    eax,0xc8
c001fef3:	50                   	push   eax
c001fef4:	e8 b8 fa ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c001fef9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff00:	89 c6                	mov    esi,eax
c001ff02:	89 d7                	mov    edi,edx
c001ff04:	e8 a8 fa ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c001ff09:	57                   	push   edi
c001ff0a:	56                   	push   esi
c001ff0b:	52                   	push   edx
c001ff0c:	50                   	push   eax
c001ff0d:	e8 4e fa ff ff       	call   c001f960 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ff12:	83 c4 1c             	add    esp,0x1c
c001ff15:	52                   	push   edx
c001ff16:	50                   	push   eax
c001ff17:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff1b:	2d c8 00 00 00       	sub    eax,0xc8
c001ff20:	50                   	push   eax
c001ff21:	e9 75 fc ff ff       	jmp    c001fb9b <Vm::x87Handler(regs*)+0xad>
c001ff26:	83 c0 18             	add    eax,0x18
c001ff29:	3c 07                	cmp    al,0x7
c001ff2b:	0f 87 3b 04 00 00    	ja     c002036c <Vm::x87Handler(regs*)+0x87e>
c001ff31:	83 ec 0c             	sub    esp,0xc
c001ff34:	6a 00                	push   0x0
c001ff36:	e8 76 fa ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c001ff3b:	89 c6                	mov    esi,eax
c001ff3d:	89 d7                	mov    edi,edx
c001ff3f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff43:	2d e8 00 00 00       	sub    eax,0xe8
c001ff48:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff4b:	e8 61 fa ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c001ff50:	57                   	push   edi
c001ff51:	56                   	push   esi
c001ff52:	52                   	push   edx
c001ff53:	50                   	push   eax
c001ff54:	e8 f8 f9 ff ff       	call   c001f951 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ff59:	83 c4 1c             	add    esp,0x1c
c001ff5c:	52                   	push   edx
c001ff5d:	50                   	push   eax
c001ff5e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff62:	2d e8 00 00 00       	sub    eax,0xe8
c001ff67:	eb b7                	jmp    c001ff20 <Vm::x87Handler(regs*)+0x432>
c001ff69:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff6d:	8d 50 40             	lea    edx,[eax+0x40]
c001ff70:	80 fa 07             	cmp    dl,0x7
c001ff73:	77 3a                	ja     c001ffaf <Vm::x87Handler(regs*)+0x4c1>
c001ff75:	83 ec 0c             	sub    esp,0xc
c001ff78:	2d c0 00 00 00       	sub    eax,0xc0
c001ff7d:	50                   	push   eax
c001ff7e:	e8 2e fa ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c001ff83:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff8a:	89 c6                	mov    esi,eax
c001ff8c:	89 d7                	mov    edi,edx
c001ff8e:	e8 1e fa ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c001ff93:	57                   	push   edi
c001ff94:	56                   	push   esi
c001ff95:	52                   	push   edx
c001ff96:	50                   	push   eax
c001ff97:	e8 8b f9 ff ff       	call   c001f927 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ff9c:	83 c4 1c             	add    esp,0x1c
c001ff9f:	52                   	push   edx
c001ffa0:	50                   	push   eax
c001ffa1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffa5:	2d c0 00 00 00       	sub    eax,0xc0
c001ffaa:	e9 9e 01 00 00       	jmp    c002014d <Vm::x87Handler(regs*)+0x65f>
c001ffaf:	8d 50 20             	lea    edx,[eax+0x20]
c001ffb2:	80 fa 07             	cmp    dl,0x7
c001ffb5:	77 3a                	ja     c001fff1 <Vm::x87Handler(regs*)+0x503>
c001ffb7:	83 ec 0c             	sub    esp,0xc
c001ffba:	2d e0 00 00 00       	sub    eax,0xe0
c001ffbf:	50                   	push   eax
c001ffc0:	e8 ec f9 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c001ffc5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ffcc:	89 c6                	mov    esi,eax
c001ffce:	89 d7                	mov    edi,edx
c001ffd0:	e8 dc f9 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c001ffd5:	57                   	push   edi
c001ffd6:	56                   	push   esi
c001ffd7:	52                   	push   edx
c001ffd8:	50                   	push   eax
c001ffd9:	e8 73 f9 ff ff       	call   c001f951 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ffde:	83 c4 1c             	add    esp,0x1c
c001ffe1:	52                   	push   edx
c001ffe2:	50                   	push   eax
c001ffe3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffe7:	2d e0 00 00 00       	sub    eax,0xe0
c001ffec:	e9 5c 01 00 00       	jmp    c002014d <Vm::x87Handler(regs*)+0x65f>
c001fff1:	8d 50 18             	lea    edx,[eax+0x18]
c001fff4:	80 fa 07             	cmp    dl,0x7
c001fff7:	77 3b                	ja     c0020034 <Vm::x87Handler(regs*)+0x546>
c001fff9:	83 ec 0c             	sub    esp,0xc
c001fffc:	6a 00                	push   0x0
c001fffe:	e8 ae f9 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c0020003:	89 c6                	mov    esi,eax
c0020005:	89 d7                	mov    edi,edx
c0020007:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002000b:	2d e8 00 00 00       	sub    eax,0xe8
c0020010:	89 04 24             	mov    DWORD PTR [esp],eax
c0020013:	e8 99 f9 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c0020018:	57                   	push   edi
c0020019:	56                   	push   esi
c002001a:	52                   	push   edx
c002001b:	50                   	push   eax
c002001c:	e8 30 f9 ff ff       	call   c001f951 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020021:	83 c4 1c             	add    esp,0x1c
c0020024:	52                   	push   edx
c0020025:	50                   	push   eax
c0020026:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002002a:	2d e8 00 00 00       	sub    eax,0xe8
c002002f:	e9 19 01 00 00       	jmp    c002014d <Vm::x87Handler(regs*)+0x65f>
c0020034:	8d 50 38             	lea    edx,[eax+0x38]
c0020037:	80 fa 07             	cmp    dl,0x7
c002003a:	77 37                	ja     c0020073 <Vm::x87Handler(regs*)+0x585>
c002003c:	83 ec 0c             	sub    esp,0xc
c002003f:	2d c8 00 00 00       	sub    eax,0xc8
c0020044:	50                   	push   eax
c0020045:	e8 67 f9 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c002004a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020051:	89 c6                	mov    esi,eax
c0020053:	89 d7                	mov    edi,edx
c0020055:	e8 57 f9 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c002005a:	57                   	push   edi
c002005b:	56                   	push   esi
c002005c:	52                   	push   edx
c002005d:	50                   	push   eax
c002005e:	e8 fd f8 ff ff       	call   c001f960 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020063:	83 c4 1c             	add    esp,0x1c
c0020066:	52                   	push   edx
c0020067:	50                   	push   eax
c0020068:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002006c:	2d c8 00 00 00       	sub    eax,0xc8
c0020071:	eb 7d                	jmp    c00200f0 <Vm::x87Handler(regs*)+0x602>
c0020073:	3c f7                	cmp    al,0xf7
c0020075:	76 38                	jbe    c00200af <Vm::x87Handler(regs*)+0x5c1>
c0020077:	83 ec 0c             	sub    esp,0xc
c002007a:	6a 00                	push   0x0
c002007c:	e8 30 f9 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c0020081:	89 c6                	mov    esi,eax
c0020083:	89 d7                	mov    edi,edx
c0020085:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020089:	2d f8 00 00 00       	sub    eax,0xf8
c002008e:	89 04 24             	mov    DWORD PTR [esp],eax
c0020091:	e8 1b f9 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c0020096:	57                   	push   edi
c0020097:	56                   	push   esi
c0020098:	52                   	push   edx
c0020099:	50                   	push   eax
c002009a:	e8 e0 f8 ff ff       	call   c001f97f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002009f:	83 c4 1c             	add    esp,0x1c
c00200a2:	52                   	push   edx
c00200a3:	50                   	push   eax
c00200a4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200a8:	2d f8 00 00 00       	sub    eax,0xf8
c00200ad:	eb 41                	jmp    c00200f0 <Vm::x87Handler(regs*)+0x602>
c00200af:	8d 50 10             	lea    edx,[eax+0x10]
c00200b2:	80 fa 07             	cmp    dl,0x7
c00200b5:	0f 87 5a 01 00 00    	ja     c0020215 <Vm::x87Handler(regs*)+0x727>
c00200bb:	83 ec 0c             	sub    esp,0xc
c00200be:	2d f0 00 00 00       	sub    eax,0xf0
c00200c3:	50                   	push   eax
c00200c4:	e8 e8 f8 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c00200c9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00200d0:	89 c6                	mov    esi,eax
c00200d2:	89 d7                	mov    edi,edx
c00200d4:	e8 d8 f8 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c00200d9:	57                   	push   edi
c00200da:	56                   	push   esi
c00200db:	52                   	push   edx
c00200dc:	50                   	push   eax
c00200dd:	e8 9d f8 ff ff       	call   c001f97f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00200e2:	83 c4 1c             	add    esp,0x1c
c00200e5:	52                   	push   edx
c00200e6:	50                   	push   eax
c00200e7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200eb:	2d f0 00 00 00       	sub    eax,0xf0
c00200f0:	50                   	push   eax
c00200f1:	e8 fe f8 ff ff       	call   c001f9f4 <Vm::fpuSetReg(int, unsigned long long)>
c00200f6:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00200fa:	e8 9d f9 ff ff       	call   c001fa9c <Vm::fpuPop()>
c00200ff:	e9 5e fa ff ff       	jmp    c001fb62 <Vm::x87Handler(regs*)+0x74>
c0020104:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020108:	8d 50 30             	lea    edx,[eax+0x30]
c002010b:	80 fa 07             	cmp    dl,0x7
c002010e:	77 1d                	ja     c002012d <Vm::x87Handler(regs*)+0x63f>
c0020110:	83 ec 0c             	sub    esp,0xc
c0020113:	6a 00                	push   0x0
c0020115:	e8 97 f8 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c002011a:	83 c4 0c             	add    esp,0xc
c002011d:	52                   	push   edx
c002011e:	50                   	push   eax
c002011f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020123:	2d d0 00 00 00       	sub    eax,0xd0
c0020128:	e9 f3 fd ff ff       	jmp    c001ff20 <Vm::x87Handler(regs*)+0x432>
c002012d:	8d 50 28             	lea    edx,[eax+0x28]
c0020130:	80 fa 07             	cmp    dl,0x7
c0020133:	77 28                	ja     c002015d <Vm::x87Handler(regs*)+0x66f>
c0020135:	83 ec 0c             	sub    esp,0xc
c0020138:	6a 00                	push   0x0
c002013a:	e8 72 f8 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c002013f:	83 c4 0c             	add    esp,0xc
c0020142:	52                   	push   edx
c0020143:	50                   	push   eax
c0020144:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020148:	2d d8 00 00 00       	sub    eax,0xd8
c002014d:	50                   	push   eax
c002014e:	e8 a1 f8 ff ff       	call   c001f9f4 <Vm::fpuSetReg(int, unsigned long long)>
c0020153:	e8 44 f9 ff ff       	call   c001fa9c <Vm::fpuPop()>
c0020158:	e9 01 fa ff ff       	jmp    c001fb5e <Vm::x87Handler(regs*)+0x70>
c002015d:	8d 50 20             	lea    edx,[eax+0x20]
c0020160:	80 fa 07             	cmp    dl,0x7
c0020163:	77 30                	ja     c0020195 <Vm::x87Handler(regs*)+0x6a7>
c0020165:	83 ec 0c             	sub    esp,0xc
c0020168:	2d e0 00 00 00       	sub    eax,0xe0
c002016d:	50                   	push   eax
c002016e:	e8 3e f8 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c0020173:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002017a:	89 c6                	mov    esi,eax
c002017c:	89 d7                	mov    edi,edx
c002017e:	e8 2e f8 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c0020183:	57                   	push   edi
c0020184:	56                   	push   esi
c0020185:	52                   	push   edx
c0020186:	50                   	push   eax
c0020187:	e8 48 f7 ff ff       	call   c001f8d4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002018c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020190:	e9 54 02 00 00       	jmp    c00203e9 <Vm::x87Handler(regs*)+0x8fb>
c0020195:	8d 50 18             	lea    edx,[eax+0x18]
c0020198:	80 fa 07             	cmp    dl,0x7
c002019b:	0f 87 43 fb ff ff    	ja     c001fce4 <Vm::x87Handler(regs*)+0x1f6>
c00201a1:	83 ec 0c             	sub    esp,0xc
c00201a4:	2d e8 00 00 00       	sub    eax,0xe8
c00201a9:	50                   	push   eax
c00201aa:	e8 02 f8 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c00201af:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201b6:	89 c6                	mov    esi,eax
c00201b8:	89 d7                	mov    edi,edx
c00201ba:	e8 f2 f7 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c00201bf:	57                   	push   edi
c00201c0:	56                   	push   esi
c00201c1:	52                   	push   edx
c00201c2:	50                   	push   eax
c00201c3:	e8 0c f7 ff ff       	call   c001f8d4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00201c8:	83 c4 20             	add    esp,0x20
c00201cb:	e8 cc f8 ff ff       	call   c001fa9c <Vm::fpuPop()>
c00201d0:	eb 62                	jmp    c0020234 <Vm::x87Handler(regs*)+0x746>
c00201d2:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c00201d6:	0f 85 0f 01 00 00    	jne    c00202eb <Vm::x87Handler(regs*)+0x7fd>
c00201dc:	83 ec 0c             	sub    esp,0xc
c00201df:	6a 01                	push   0x1
c00201e1:	e8 cb f7 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c00201e6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201ed:	89 c6                	mov    esi,eax
c00201ef:	89 d7                	mov    edi,edx
c00201f1:	e8 bb f7 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c00201f6:	57                   	push   edi
c00201f7:	56                   	push   esi
c00201f8:	52                   	push   edx
c00201f9:	50                   	push   eax
c00201fa:	e8 d5 f6 ff ff       	call   c001f8d4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00201ff:	83 c4 20             	add    esp,0x20
c0020202:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020206:	e8 91 f8 ff ff       	call   c001fa9c <Vm::fpuPop()>
c002020b:	e8 8c f8 ff ff       	call   c001fa9c <Vm::fpuPop()>
c0020210:	e9 50 f9 ff ff       	jmp    c001fb65 <Vm::x87Handler(regs*)+0x77>
c0020215:	3c d9                	cmp    al,0xd9
c0020217:	0f 85 b5 02 00 00    	jne    c00204d2 <Vm::x87Handler(regs*)+0x9e4>
c002021d:	eb bd                	jmp    c00201dc <Vm::x87Handler(regs*)+0x6ee>
c002021f:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c0020223:	0f 85 ea 02 00 00    	jne    c0020513 <Vm::x87Handler(regs*)+0xa25>
c0020229:	0f b7 05 a0 1b 03 c0 	movzx  eax,WORD PTR ds:0xc0031ba0
c0020230:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c0020234:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020238:	e9 28 f9 ff ff       	jmp    c001fb65 <Vm::x87Handler(regs*)+0x77>
c002023d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020241:	84 d2                	test   dl,dl
c0020243:	75 0f                	jne    c0020254 <Vm::x87Handler(regs*)+0x766>
c0020245:	83 ec 0c             	sub    esp,0xc
c0020248:	ff 36                	push   DWORD PTR [esi]
c002024a:	e8 b1 f4 ff ff       	call   c001f700 <Vm::fpu32ToInternal(unsigned int)>
c002024f:	e9 2c 01 00 00       	jmp    c0020380 <Vm::x87Handler(regs*)+0x892>
c0020254:	80 fa 01             	cmp    dl,0x1
c0020257:	75 0f                	jne    c0020268 <Vm::x87Handler(regs*)+0x77a>
c0020259:	83 ec 0c             	sub    esp,0xc
c002025c:	ff 36                	push   DWORD PTR [esi]
c002025e:	e8 9d f4 ff ff       	call   c001f700 <Vm::fpu32ToInternal(unsigned int)>
c0020263:	e9 81 02 00 00       	jmp    c00204e9 <Vm::x87Handler(regs*)+0x9fb>
c0020268:	80 fa 04             	cmp    dl,0x4
c002026b:	75 0f                	jne    c002027c <Vm::x87Handler(regs*)+0x78e>
c002026d:	83 ec 0c             	sub    esp,0xc
c0020270:	ff 36                	push   DWORD PTR [esi]
c0020272:	e8 89 f4 ff ff       	call   c001f700 <Vm::fpu32ToInternal(unsigned int)>
c0020277:	e9 86 01 00 00       	jmp    c0020402 <Vm::x87Handler(regs*)+0x914>
c002027c:	80 fa 05             	cmp    dl,0x5
c002027f:	75 1b                	jne    c002029c <Vm::x87Handler(regs*)+0x7ae>
c0020281:	83 ec 0c             	sub    esp,0xc
c0020284:	6a 00                	push   0x0
c0020286:	e8 26 f7 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c002028b:	89 c7                	mov    edi,eax
c002028d:	89 d5                	mov    ebp,edx
c002028f:	58                   	pop    eax
c0020290:	ff 36                	push   DWORD PTR [esi]
c0020292:	e8 69 f4 ff ff       	call   c001f700 <Vm::fpu32ToInternal(unsigned int)>
c0020297:	e9 a3 01 00 00       	jmp    c002043f <Vm::x87Handler(regs*)+0x951>
c002029c:	80 fa 06             	cmp    dl,0x6
c002029f:	75 0f                	jne    c00202b0 <Vm::x87Handler(regs*)+0x7c2>
c00202a1:	83 ec 0c             	sub    esp,0xc
c00202a4:	ff 36                	push   DWORD PTR [esi]
c00202a6:	e8 55 f4 ff ff       	call   c001f700 <Vm::fpu32ToInternal(unsigned int)>
c00202ab:	e9 ae 01 00 00       	jmp    c002045e <Vm::x87Handler(regs*)+0x970>
c00202b0:	31 c0                	xor    eax,eax
c00202b2:	80 fa 07             	cmp    dl,0x7
c00202b5:	0f 85 94 02 00 00    	jne    c002054f <Vm::x87Handler(regs*)+0xa61>
c00202bb:	83 ec 0c             	sub    esp,0xc
c00202be:	6a 00                	push   0x0
c00202c0:	e8 ec f6 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c00202c5:	89 c7                	mov    edi,eax
c00202c7:	89 d5                	mov    ebp,edx
c00202c9:	58                   	pop    eax
c00202ca:	ff 36                	push   DWORD PTR [esi]
c00202cc:	e8 2f f4 ff ff       	call   c001f700 <Vm::fpu32ToInternal(unsigned int)>
c00202d1:	e9 cb 01 00 00       	jmp    c00204a1 <Vm::x87Handler(regs*)+0x9b3>
c00202d6:	80 fa 03             	cmp    dl,0x3
c00202d9:	0f 85 d3 01 00 00    	jne    c00204b2 <Vm::x87Handler(regs*)+0x9c4>
c00202df:	e8 b8 f7 ff ff       	call   c001fa9c <Vm::fpuPop()>
c00202e4:	51                   	push   ecx
c00202e5:	51                   	push   ecx
c00202e6:	e9 de 01 00 00       	jmp    c00204c9 <Vm::x87Handler(regs*)+0x9db>
c00202eb:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00202ef:	80 fa 01             	cmp    dl,0x1
c00202f2:	75 09                	jne    c00202fd <Vm::x87Handler(regs*)+0x80f>
c00202f4:	57                   	push   edi
c00202f5:	57                   	push   edi
c00202f6:	8b 06                	mov    eax,DWORD PTR [esi]
c00202f8:	e9 e3 01 00 00       	jmp    c00204e0 <Vm::x87Handler(regs*)+0x9f2>
c00202fd:	80 fa 04             	cmp    dl,0x4
c0020300:	75 12                	jne    c0020314 <Vm::x87Handler(regs*)+0x826>
c0020302:	31 d2                	xor    edx,edx
c0020304:	51                   	push   ecx
c0020305:	51                   	push   ecx
c0020306:	8b 06                	mov    eax,DWORD PTR [esi]
c0020308:	52                   	push   edx
c0020309:	50                   	push   eax
c002030a:	e8 d0 f4 ff ff       	call   c001f7df <Vm::fpuLongToFloat(long long)>
c002030f:	e9 ee 00 00 00       	jmp    c0020402 <Vm::x87Handler(regs*)+0x914>
c0020314:	31 c0                	xor    eax,eax
c0020316:	80 fa 07             	cmp    dl,0x7
c0020319:	0f 85 30 02 00 00    	jne    c002054f <Vm::x87Handler(regs*)+0xa61>
c002031f:	83 ec 0c             	sub    esp,0xc
c0020322:	6a 00                	push   0x0
c0020324:	e8 88 f6 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c0020329:	89 c7                	mov    edi,eax
c002032b:	89 d5                	mov    ebp,edx
c002032d:	58                   	pop    eax
c002032e:	8b 06                	mov    eax,DWORD PTR [esi]
c0020330:	5a                   	pop    edx
c0020331:	31 d2                	xor    edx,edx
c0020333:	52                   	push   edx
c0020334:	50                   	push   eax
c0020335:	e8 a5 f4 ff ff       	call   c001f7df <Vm::fpuLongToFloat(long long)>
c002033a:	e9 62 01 00 00       	jmp    c00204a1 <Vm::x87Handler(regs*)+0x9b3>
c002033f:	84 d2                	test   dl,dl
c0020341:	75 0d                	jne    c0020350 <Vm::x87Handler(regs*)+0x862>
c0020343:	31 d2                	xor    edx,edx
c0020345:	55                   	push   ebp
c0020346:	55                   	push   ebp
c0020347:	8b 06                	mov    eax,DWORD PTR [esi]
c0020349:	52                   	push   edx
c002034a:	50                   	push   eax
c002034b:	e9 d3 01 00 00       	jmp    c0020523 <Vm::x87Handler(regs*)+0xa35>
c0020350:	31 c0                	xor    eax,eax
c0020352:	80 fa 02             	cmp    dl,0x2
c0020355:	0f 85 f4 01 00 00    	jne    c002054f <Vm::x87Handler(regs*)+0xa61>
c002035b:	83 ec 0c             	sub    esp,0xc
c002035e:	6a 00                	push   0x0
c0020360:	e8 4c f6 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c0020365:	59                   	pop    ecx
c0020366:	5f                   	pop    edi
c0020367:	e9 6a f9 ff ff       	jmp    c001fcd6 <Vm::x87Handler(regs*)+0x1e8>
c002036c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020370:	84 d2                	test   dl,dl
c0020372:	75 2a                	jne    c002039e <Vm::x87Handler(regs*)+0x8b0>
c0020374:	50                   	push   eax
c0020375:	50                   	push   eax
c0020376:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020379:	ff 36                	push   DWORD PTR [esi]
c002037b:	e8 c5 f3 ff ff       	call   c001f745 <Vm::fpu64ToInternal(unsigned long long)>
c0020380:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020387:	89 c6                	mov    esi,eax
c0020389:	89 d7                	mov    edi,edx
c002038b:	e8 21 f6 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c0020390:	57                   	push   edi
c0020391:	56                   	push   esi
c0020392:	52                   	push   edx
c0020393:	50                   	push   eax
c0020394:	e8 8e f5 ff ff       	call   c001f927 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020399:	e9 64 01 00 00       	jmp    c0020502 <Vm::x87Handler(regs*)+0xa14>
c002039e:	80 fa 01             	cmp    dl,0x1
c00203a1:	75 11                	jne    c00203b4 <Vm::x87Handler(regs*)+0x8c6>
c00203a3:	50                   	push   eax
c00203a4:	50                   	push   eax
c00203a5:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203a8:	ff 36                	push   DWORD PTR [esi]
c00203aa:	e8 96 f3 ff ff       	call   c001f745 <Vm::fpu64ToInternal(unsigned long long)>
c00203af:	e9 35 01 00 00       	jmp    c00204e9 <Vm::x87Handler(regs*)+0x9fb>
c00203b4:	80 fa 02             	cmp    dl,0x2
c00203b7:	0f 85 54 f9 ff ff    	jne    c001fd11 <Vm::x87Handler(regs*)+0x223>
c00203bd:	55                   	push   ebp
c00203be:	55                   	push   ebp
c00203bf:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203c2:	ff 36                	push   DWORD PTR [esi]
c00203c4:	e8 7c f3 ff ff       	call   c001f745 <Vm::fpu64ToInternal(unsigned long long)>
c00203c9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203d0:	89 c6                	mov    esi,eax
c00203d2:	89 d7                	mov    edi,edx
c00203d4:	e8 d8 f5 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c00203d9:	57                   	push   edi
c00203da:	56                   	push   esi
c00203db:	52                   	push   edx
c00203dc:	50                   	push   eax
c00203dd:	e8 f2 f4 ff ff       	call   c001f8d4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00203e2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00203e6:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00203e9:	83 c4 20             	add    esp,0x20
c00203ec:	e9 74 f7 ff ff       	jmp    c001fb65 <Vm::x87Handler(regs*)+0x77>
c00203f1:	80 fa 04             	cmp    dl,0x4
c00203f4:	75 2a                	jne    c0020420 <Vm::x87Handler(regs*)+0x932>
c00203f6:	51                   	push   ecx
c00203f7:	51                   	push   ecx
c00203f8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203fb:	ff 36                	push   DWORD PTR [esi]
c00203fd:	e8 43 f3 ff ff       	call   c001f745 <Vm::fpu64ToInternal(unsigned long long)>
c0020402:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020409:	89 c6                	mov    esi,eax
c002040b:	89 d7                	mov    edi,edx
c002040d:	e8 9f f5 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c0020412:	57                   	push   edi
c0020413:	56                   	push   esi
c0020414:	52                   	push   edx
c0020415:	50                   	push   eax
c0020416:	e8 36 f5 ff ff       	call   c001f951 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002041b:	e9 e2 00 00 00       	jmp    c0020502 <Vm::x87Handler(regs*)+0xa14>
c0020420:	80 fa 05             	cmp    dl,0x5
c0020423:	75 28                	jne    c002044d <Vm::x87Handler(regs*)+0x95f>
c0020425:	83 ec 0c             	sub    esp,0xc
c0020428:	6a 00                	push   0x0
c002042a:	e8 82 f5 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c002042f:	89 c7                	mov    edi,eax
c0020431:	89 d5                	mov    ebp,edx
c0020433:	58                   	pop    eax
c0020434:	5a                   	pop    edx
c0020435:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020438:	ff 36                	push   DWORD PTR [esi]
c002043a:	e8 06 f3 ff ff       	call   c001f745 <Vm::fpu64ToInternal(unsigned long long)>
c002043f:	83 c4 10             	add    esp,0x10
c0020442:	55                   	push   ebp
c0020443:	57                   	push   edi
c0020444:	52                   	push   edx
c0020445:	50                   	push   eax
c0020446:	e8 06 f5 ff ff       	call   c001f951 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002044b:	eb 60                	jmp    c00204ad <Vm::x87Handler(regs*)+0x9bf>
c002044d:	80 fa 06             	cmp    dl,0x6
c0020450:	75 2a                	jne    c002047c <Vm::x87Handler(regs*)+0x98e>
c0020452:	51                   	push   ecx
c0020453:	51                   	push   ecx
c0020454:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020457:	ff 36                	push   DWORD PTR [esi]
c0020459:	e8 e7 f2 ff ff       	call   c001f745 <Vm::fpu64ToInternal(unsigned long long)>
c002045e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020465:	89 c6                	mov    esi,eax
c0020467:	89 d7                	mov    edi,edx
c0020469:	e8 43 f5 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c002046e:	57                   	push   edi
c002046f:	56                   	push   esi
c0020470:	52                   	push   edx
c0020471:	50                   	push   eax
c0020472:	e8 08 f5 ff ff       	call   c001f97f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020477:	e9 86 00 00 00       	jmp    c0020502 <Vm::x87Handler(regs*)+0xa14>
c002047c:	31 c0                	xor    eax,eax
c002047e:	80 fa 07             	cmp    dl,0x7
c0020481:	0f 85 c8 00 00 00    	jne    c002054f <Vm::x87Handler(regs*)+0xa61>
c0020487:	83 ec 0c             	sub    esp,0xc
c002048a:	6a 00                	push   0x0
c002048c:	e8 20 f5 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c0020491:	89 c7                	mov    edi,eax
c0020493:	89 d5                	mov    ebp,edx
c0020495:	58                   	pop    eax
c0020496:	5a                   	pop    edx
c0020497:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002049a:	ff 36                	push   DWORD PTR [esi]
c002049c:	e8 a4 f2 ff ff       	call   c001f745 <Vm::fpu64ToInternal(unsigned long long)>
c00204a1:	83 c4 10             	add    esp,0x10
c00204a4:	55                   	push   ebp
c00204a5:	57                   	push   edi
c00204a6:	52                   	push   edx
c00204a7:	50                   	push   eax
c00204a8:	e8 d2 f4 ff ff       	call   c001f97f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00204ad:	83 c4 0c             	add    esp,0xc
c00204b0:	eb 53                	jmp    c0020505 <Vm::x87Handler(regs*)+0xa17>
c00204b2:	31 c0                	xor    eax,eax
c00204b4:	80 fa 02             	cmp    dl,0x2
c00204b7:	0f 85 92 00 00 00    	jne    c002054f <Vm::x87Handler(regs*)+0xa61>
c00204bd:	83 ec 0c             	sub    esp,0xc
c00204c0:	6a 00                	push   0x0
c00204c2:	e8 ea f4 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c00204c7:	59                   	pop    ecx
c00204c8:	5f                   	pop    edi
c00204c9:	52                   	push   edx
c00204ca:	50                   	push   eax
c00204cb:	e8 27 f2 ff ff       	call   c001f6f7 <Vm::fpuInternalTo64(unsigned long long)>
c00204d0:	eb 70                	jmp    c0020542 <Vm::x87Handler(regs*)+0xa54>
c00204d2:	31 c0                	xor    eax,eax
c00204d4:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c00204d9:	75 74                	jne    c002054f <Vm::x87Handler(regs*)+0xa61>
c00204db:	50                   	push   eax
c00204dc:	50                   	push   eax
c00204dd:	0f b7 06             	movzx  eax,WORD PTR [esi]
c00204e0:	31 d2                	xor    edx,edx
c00204e2:	52                   	push   edx
c00204e3:	50                   	push   eax
c00204e4:	e8 f6 f2 ff ff       	call   c001f7df <Vm::fpuLongToFloat(long long)>
c00204e9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00204f0:	89 c6                	mov    esi,eax
c00204f2:	89 d7                	mov    edi,edx
c00204f4:	e8 b8 f4 ff ff       	call   c001f9b1 <Vm::fpuGetReg(int)>
c00204f9:	57                   	push   edi
c00204fa:	56                   	push   esi
c00204fb:	52                   	push   edx
c00204fc:	50                   	push   eax
c00204fd:	e8 5e f4 ff ff       	call   c001f960 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020502:	83 c4 1c             	add    esp,0x1c
c0020505:	52                   	push   edx
c0020506:	50                   	push   eax
c0020507:	6a 00                	push   0x0
c0020509:	e8 e6 f4 ff ff       	call   c001f9f4 <Vm::fpuSetReg(int, unsigned long long)>
c002050e:	e9 f2 f7 ff ff       	jmp    c001fd05 <Vm::x87Handler(regs*)+0x217>
c0020513:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020517:	80 fa 05             	cmp    dl,0x5
c002051a:	75 11                	jne    c002052d <Vm::x87Handler(regs*)+0xa3f>
c002051c:	55                   	push   ebp
c002051d:	55                   	push   ebp
c002051e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020521:	ff 36                	push   DWORD PTR [esi]
c0020523:	e8 81 f2 ff ff       	call   c001f7a9 <Vm::fpuULongToFloat(unsigned long long)>
c0020528:	e9 cf f7 ff ff       	jmp    c001fcfc <Vm::x87Handler(regs*)+0x20e>
c002052d:	31 c0                	xor    eax,eax
c002052f:	80 fa 07             	cmp    dl,0x7
c0020532:	75 1b                	jne    c002054f <Vm::x87Handler(regs*)+0xa61>
c0020534:	e8 63 f5 ff ff       	call   c001fa9c <Vm::fpuPop()>
c0020539:	51                   	push   ecx
c002053a:	51                   	push   ecx
c002053b:	52                   	push   edx
c002053c:	50                   	push   eax
c002053d:	e8 0c f2 ff ff       	call   c001f74e <Vm::fpuFloatToLong(unsigned long long)>
c0020542:	83 c4 10             	add    esp,0x10
c0020545:	89 06                	mov    DWORD PTR [esi],eax
c0020547:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c002054a:	e9 f8 f7 ff ff       	jmp    c001fd47 <Vm::x87Handler(regs*)+0x259>
c002054f:	83 c4 1c             	add    esp,0x1c
c0020552:	5b                   	pop    ebx
c0020553:	5e                   	pop    esi
c0020554:	5f                   	pop    edi
c0020555:	5d                   	pop    ebp
c0020556:	c3                   	ret    

c0020557 <__static_initialization_and_destruction_0(int, int)>:
c0020557:	83 ec 0c             	sub    esp,0xc
c002055a:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c002055f:	75 1a                	jne    c002057b <__static_initialization_and_destruction_0(int, int)+0x24>
c0020561:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0020569:	75 10                	jne    c002057b <__static_initialization_and_destruction_0(int, int)+0x24>
c002056b:	83 ec 0c             	sub    esp,0xc
c002056e:	68 a0 1b 03 c0       	push   0xc0031ba0
c0020573:	e8 f4 88 00 00       	call   c0028e6c <Vm::_FPUState::_FPUState()>
c0020578:	83 c4 10             	add    esp,0x10
c002057b:	90                   	nop
c002057c:	83 c4 0c             	add    esp,0xc
c002057f:	c3                   	ret    

c0020580 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0020580:	83 ec 0c             	sub    esp,0xc
c0020583:	83 ec 08             	sub    esp,0x8
c0020586:	68 ff ff 00 00       	push   0xffff
c002058b:	6a 01                	push   0x1
c002058d:	e8 c5 ff ff ff       	call   c0020557 <__static_initialization_and_destruction_0(int, int)>
c0020592:	83 c4 10             	add    esp,0x10
c0020595:	83 c4 0c             	add    esp,0xc
c0020598:	c3                   	ret    
c0020599:	90                   	nop

c002059a <FAT::getName()>:
c002059a:	b8 7c c9 02 c0       	mov    eax,0xc002c97c
c002059f:	c3                   	ret    

c00205a0 <FAT::tell(void*, unsigned long long*)>:
c00205a0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00205a5:	75 06                	jne    c00205ad <FAT::tell(void*, unsigned long long*)+0xd>
c00205a7:	b8 04 00 00 00       	mov    eax,0x4
c00205ac:	c3                   	ret    
c00205ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00205b2:	75 06                	jne    c00205ba <FAT::tell(void*, unsigned long long*)+0x1a>
c00205b4:	b8 04 00 00 00       	mov    eax,0x4
c00205b9:	c3                   	ret    
c00205ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00205be:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c00205c1:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00205c4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00205c8:	89 01                	mov    DWORD PTR [ecx],eax
c00205ca:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00205cd:	b8 00 00 00 00       	mov    eax,0x0
c00205d2:	c3                   	ret    
c00205d3:	90                   	nop

c00205d4 <FAT::stat(void*, unsigned long long*)>:
c00205d4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00205d9:	75 06                	jne    c00205e1 <FAT::stat(void*, unsigned long long*)+0xd>
c00205db:	b8 04 00 00 00       	mov    eax,0x4
c00205e0:	c3                   	ret    
c00205e1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00205e6:	75 06                	jne    c00205ee <FAT::stat(void*, unsigned long long*)+0x1a>
c00205e8:	b8 04 00 00 00       	mov    eax,0x4
c00205ed:	c3                   	ret    
c00205ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00205f2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00205f5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00205f8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00205fc:	89 01                	mov    DWORD PTR [ecx],eax
c00205fe:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020601:	b8 00 00 00 00       	mov    eax,0x0
c0020606:	c3                   	ret    
c0020607:	90                   	nop

c0020608 <FAT::~FAT()>:
c0020608:	83 ec 0c             	sub    esp,0xc
c002060b:	ba 20 ca 02 c0       	mov    edx,0xc002ca20
c0020610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020614:	89 10                	mov    DWORD PTR [eax],edx
c0020616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002061a:	83 ec 0c             	sub    esp,0xc
c002061d:	50                   	push   eax
c002061e:	e8 13 2c ff ff       	call   c0013236 <Filesystem::~Filesystem()>
c0020623:	83 c4 10             	add    esp,0x10
c0020626:	90                   	nop
c0020627:	83 c4 0c             	add    esp,0xc
c002062a:	c3                   	ret    
c002062b:	90                   	nop

c002062c <FAT::~FAT()>:
c002062c:	83 ec 0c             	sub    esp,0xc
c002062f:	83 ec 0c             	sub    esp,0xc
c0020632:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020636:	e8 cd ff ff ff       	call   c0020608 <FAT::~FAT()>
c002063b:	83 c4 10             	add    esp,0x10
c002063e:	83 ec 08             	sub    esp,0x8
c0020641:	6a 08                	push   0x8
c0020643:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020647:	e8 db 27 ff ff       	call   c0012e27 <operator delete(void*, unsigned long)>
c002064c:	83 c4 10             	add    esp,0x10
c002064f:	83 c4 0c             	add    esp,0xc
c0020652:	c3                   	ret    
c0020653:	90                   	nop

c0020654 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0020654:	83 ec 1c             	sub    esp,0x1c
c0020657:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c002065e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0020663:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020667:	8b 04 85 20 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3e0]
c002066e:	83 f8 ff             	cmp    eax,0xffffffff
c0020671:	75 34                	jne    c00206a7 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0020673:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020677:	88 c2                	mov    dl,al
c0020679:	a1 00 1c 03 c0       	mov    eax,ds:0xc0031c00
c002067e:	01 d0                	add    eax,edx
c0020680:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020684:	8b 15 00 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c00
c002068a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002068e:	89 14 85 20 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce3e0],edx
c0020695:	a1 00 1c 03 c0       	mov    eax,ds:0xc0031c00
c002069a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002069e:	89 14 85 a0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce360],edx
c00206a5:	eb 17                	jmp    c00206be <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c00206a7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00206ab:	88 c2                	mov    dl,al
c00206ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00206b1:	8b 04 85 20 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3e0]
c00206b8:	01 d0                	add    eax,edx
c00206ba:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00206be:	83 ec 04             	sub    esp,0x4
c00206c1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00206c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00206c9:	8d 44 24 15          	lea    eax,[esp+0x15]
c00206cd:	50                   	push   eax
c00206ce:	e8 6d 66 fe ff       	call   c0006d40 <f_getlabel>
c00206d3:	83 c4 10             	add    esp,0x10
c00206d6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00206da:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00206df:	75 07                	jne    c00206e8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c00206e1:	b8 00 00 00 00       	mov    eax,0x0
c00206e6:	eb 05                	jmp    c00206ed <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c00206e8:	b8 01 00 00 00       	mov    eax,0x1
c00206ed:	83 c4 1c             	add    esp,0x1c
c00206f0:	c3                   	ret    
c00206f1:	90                   	nop

c00206f2 <FAT::setlabel(LogicalDisk*, int, char*)>:
c00206f2:	57                   	push   edi
c00206f3:	83 ec 58             	sub    esp,0x58
c00206f6:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00206fe:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020702:	b9 0f 00 00 00       	mov    ecx,0xf
c0020707:	b8 00 00 00 00       	mov    eax,0x0
c002070c:	fc                   	cld    
c002070d:	89 d7                	mov    edi,edx
c002070f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020711:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020715:	8b 04 85 20 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3e0]
c002071c:	83 f8 ff             	cmp    eax,0xffffffff
c002071f:	75 34                	jne    c0020755 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0020721:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020725:	88 c2                	mov    dl,al
c0020727:	a1 00 1c 03 c0       	mov    eax,ds:0xc0031c00
c002072c:	01 d0                	add    eax,edx
c002072e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020732:	8b 15 00 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c00
c0020738:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002073c:	89 14 85 20 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce3e0],edx
c0020743:	a1 00 1c 03 c0       	mov    eax,ds:0xc0031c00
c0020748:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c002074c:	89 14 85 a0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce360],edx
c0020753:	eb 17                	jmp    c002076c <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020755:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020759:	88 c2                	mov    dl,al
c002075b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002075f:	8b 04 85 20 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3e0]
c0020766:	01 d0                	add    eax,edx
c0020768:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002076c:	83 ec 08             	sub    esp,0x8
c002076f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0020773:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020777:	50                   	push   eax
c0020778:	e8 ff 01 fe ff       	call   c000097c <strcat>
c002077d:	83 c4 10             	add    esp,0x10
c0020780:	83 ec 0c             	sub    esp,0xc
c0020783:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020787:	50                   	push   eax
c0020788:	e8 a1 67 fe ff       	call   c0006f2e <f_setlabel>
c002078d:	83 c4 10             	add    esp,0x10
c0020790:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020794:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020799:	75 07                	jne    c00207a2 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c002079b:	b8 00 00 00 00       	mov    eax,0x0
c00207a0:	eb 05                	jmp    c00207a7 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c00207a2:	b8 01 00 00 00       	mov    eax,0x1
c00207a7:	83 c4 58             	add    esp,0x58
c00207aa:	5f                   	pop    edi
c00207ab:	c3                   	ret    

c00207ac <FAT::format(LogicalDisk*, int, char const*, int)>:
c00207ac:	83 ec 2c             	sub    esp,0x2c
c00207af:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00207b7:	83 ec 08             	sub    esp,0x8
c00207ba:	68 a0 c9 02 c0       	push   0xc002c9a0
c00207bf:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00207c3:	e8 00 01 fe ff       	call   c00008c8 <strcmp>
c00207c8:	83 c4 10             	add    esp,0x10
c00207cb:	85 c0                	test   eax,eax
c00207cd:	0f 94 c0             	sete   al
c00207d0:	84 c0                	test   al,al
c00207d2:	74 0d                	je     c00207e1 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c00207d4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00207dc:	e9 a6 00 00 00       	jmp    c0020887 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207e1:	83 ec 08             	sub    esp,0x8
c00207e4:	68 92 c9 02 c0       	push   0xc002c992
c00207e9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00207ed:	e8 d6 00 fe ff       	call   c00008c8 <strcmp>
c00207f2:	83 c4 10             	add    esp,0x10
c00207f5:	85 c0                	test   eax,eax
c00207f7:	0f 94 c0             	sete   al
c00207fa:	84 c0                	test   al,al
c00207fc:	74 0a                	je     c0020808 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c00207fe:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020806:	eb 7f                	jmp    c0020887 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020808:	83 ec 08             	sub    esp,0x8
c002080b:	68 98 c9 02 c0       	push   0xc002c998
c0020810:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020814:	e8 af 00 fe ff       	call   c00008c8 <strcmp>
c0020819:	83 c4 10             	add    esp,0x10
c002081c:	85 c0                	test   eax,eax
c002081e:	0f 94 c0             	sete   al
c0020821:	84 c0                	test   al,al
c0020823:	74 0a                	je     c002082f <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020825:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002082d:	eb 58                	jmp    c0020887 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002082f:	83 ec 08             	sub    esp,0x8
c0020832:	68 cc 95 02 c0       	push   0xc00295cc
c0020837:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002083b:	e8 88 00 fe ff       	call   c00008c8 <strcmp>
c0020840:	83 c4 10             	add    esp,0x10
c0020843:	85 c0                	test   eax,eax
c0020845:	0f 94 c0             	sete   al
c0020848:	84 c0                	test   al,al
c002084a:	74 0a                	je     c0020856 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c002084c:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0020854:	eb 31                	jmp    c0020887 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020856:	83 ec 08             	sub    esp,0x8
c0020859:	68 9e c9 02 c0       	push   0xc002c99e
c002085e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020862:	e8 61 00 fe ff       	call   c00008c8 <strcmp>
c0020867:	83 c4 10             	add    esp,0x10
c002086a:	85 c0                	test   eax,eax
c002086c:	0f 94 c0             	sete   al
c002086f:	84 c0                	test   al,al
c0020871:	74 0a                	je     c002087d <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0020873:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c002087b:	eb 0a                	jmp    c0020887 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002087d:	b8 08 00 00 00       	mov    eax,0x8
c0020882:	e9 04 01 00 00       	jmp    c002098b <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020887:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c002088e:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0020893:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020897:	8b 04 85 20 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3e0]
c002089e:	83 f8 ff             	cmp    eax,0xffffffff
c00208a1:	75 34                	jne    c00208d7 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c00208a3:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00208a7:	88 c2                	mov    dl,al
c00208a9:	a1 00 1c 03 c0       	mov    eax,ds:0xc0031c00
c00208ae:	01 d0                	add    eax,edx
c00208b0:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00208b4:	8b 15 00 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c00
c00208ba:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00208be:	89 14 85 20 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce3e0],edx
c00208c5:	a1 00 1c 03 c0       	mov    eax,ds:0xc0031c00
c00208ca:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00208ce:	89 14 85 a0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce360],edx
c00208d5:	eb 17                	jmp    c00208ee <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c00208d7:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00208db:	88 c2                	mov    dl,al
c00208dd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00208e1:	8b 04 85 20 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3e0]
c00208e8:	01 d0                	add    eax,edx
c00208ea:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00208ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00208f2:	88 04 24             	mov    BYTE PTR [esp],al
c00208f5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00208f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00208fd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020905:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c002090a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020912:	83 ec 0c             	sub    esp,0xc
c0020915:	68 00 20 00 00       	push   0x2000
c002091a:	e8 2c ef fe ff       	call   c000f84b <malloc>
c002091f:	83 c4 10             	add    esp,0x10
c0020922:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020926:	68 00 20 00 00       	push   0x2000
c002092b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002092f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020933:	50                   	push   eax
c0020934:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020938:	50                   	push   eax
c0020939:	e8 3b 6a fe ff       	call   c0007379 <f_mkfs>
c002093e:	83 c4 10             	add    esp,0x10
c0020941:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020945:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002094a:	75 07                	jne    c0020953 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c002094c:	b8 00 00 00 00       	mov    eax,0x0
c0020951:	eb 38                	jmp    c002098b <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020953:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020958:	75 17                	jne    c0020971 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c002095a:	83 ec 0c             	sub    esp,0xc
c002095d:	68 f0 c9 02 c0       	push   0xc002c9f0
c0020962:	e8 a0 25 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0020967:	83 c4 10             	add    esp,0x10
c002096a:	b8 09 00 00 00       	mov    eax,0x9
c002096f:	eb 1a                	jmp    c002098b <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020971:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020975:	83 ec 08             	sub    esp,0x8
c0020978:	50                   	push   eax
c0020979:	68 a4 c9 02 c0       	push   0xc002c9a4
c002097e:	e8 84 25 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0020983:	83 c4 10             	add    esp,0x10
c0020986:	b8 01 00 00 00       	mov    eax,0x1
c002098b:	83 c4 2c             	add    esp,0x2c
c002098e:	c3                   	ret    
c002098f:	90                   	nop

c0020990 <FAT::tryMount(LogicalDisk*, int)>:
c0020990:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020996:	a1 00 1c 03 c0       	mov    eax,ds:0xc0031c00
c002099b:	83 f8 14             	cmp    eax,0x14
c002099e:	75 17                	jne    c00209b7 <FAT::tryMount(LogicalDisk*, int)+0x27>
c00209a0:	83 ec 0c             	sub    esp,0xc
c00209a3:	68 b6 c9 02 c0       	push   0xc002c9b6
c00209a8:	e8 98 9c ff ff       	call   c001a645 <Krnl::panic(char const*)>
c00209ad:	83 c4 10             	add    esp,0x10
c00209b0:	b0 00                	mov    al,0x0
c00209b2:	e9 d7 01 00 00       	jmp    c0020b8e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00209b7:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00209be:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00209c4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00209ca:	3d 00 02 00 00       	cmp    eax,0x200
c00209cf:	74 07                	je     c00209d8 <FAT::tryMount(LogicalDisk*, int)+0x48>
c00209d1:	b0 00                	mov    al,0x0
c00209d3:	e9 b6 01 00 00       	jmp    c0020b8e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00209d8:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c00209e0:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00209e7:	8b 04 85 20 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3e0]
c00209ee:	83 f8 ff             	cmp    eax,0xffffffff
c00209f1:	74 07                	je     c00209fa <FAT::tryMount(LogicalDisk*, int)+0x6a>
c00209f3:	b0 01                	mov    al,0x1
c00209f5:	e9 94 01 00 00       	jmp    c0020b8e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00209fa:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020a04:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020a0c:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020a13:	88 c2                	mov    dl,al
c0020a15:	a1 00 1c 03 c0       	mov    eax,ds:0xc0031c00
c0020a1a:	01 d0                	add    eax,edx
c0020a1c:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020a23:	8b 15 00 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c00
c0020a29:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020a30:	89 14 85 20 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce3e0],edx
c0020a37:	a1 00 1c 03 c0       	mov    eax,ds:0xc0031c00
c0020a3c:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020a43:	89 14 85 a0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce360],edx
c0020a4a:	83 ec 0c             	sub    esp,0xc
c0020a4d:	68 54 02 00 00       	push   0x254
c0020a52:	e8 f4 ed fe ff       	call   c000f84b <malloc>
c0020a57:	83 c4 10             	add    esp,0x10
c0020a5a:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020a61:	83 ec 04             	sub    esp,0x4
c0020a64:	6a 00                	push   0x0
c0020a66:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020a6d:	50                   	push   eax
c0020a6e:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020a75:	e8 bd 44 fe ff       	call   c0004f37 <f_mount>
c0020a7a:	83 c4 10             	add    esp,0x10
c0020a7d:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020a84:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020a8c:	74 19                	je     c0020aa7 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020a8e:	83 ec 0c             	sub    esp,0xc
c0020a91:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020a98:	e8 ce ed fe ff       	call   c000f86b <rfree>
c0020a9d:	83 c4 10             	add    esp,0x10
c0020aa0:	b0 00                	mov    al,0x0
c0020aa2:	e9 e7 00 00 00       	jmp    c0020b8e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020aa7:	83 ec 04             	sub    esp,0x4
c0020aaa:	68 00 01 00 00       	push   0x100
c0020aaf:	6a 00                	push   0x0
c0020ab1:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020ab8:	50                   	push   eax
c0020ab9:	e8 c2 fc fd ff       	call   c0000780 <memset>
c0020abe:	83 c4 10             	add    esp,0x10
c0020ac1:	83 ec 08             	sub    esp,0x8
c0020ac4:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020acb:	50                   	push   eax
c0020acc:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020ad3:	50                   	push   eax
c0020ad4:	e8 a3 fe fd ff       	call   c000097c <strcat>
c0020ad9:	83 c4 10             	add    esp,0x10
c0020adc:	83 ec 08             	sub    esp,0x8
c0020adf:	68 c4 c9 02 c0       	push   0xc002c9c4
c0020ae4:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020aeb:	50                   	push   eax
c0020aec:	e8 8b fe fd ff       	call   c000097c <strcat>
c0020af1:	83 c4 10             	add    esp,0x10
c0020af4:	83 ec 04             	sub    esp,0x4
c0020af7:	6a 01                	push   0x1
c0020af9:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020b00:	50                   	push   eax
c0020b01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020b05:	50                   	push   eax
c0020b06:	e8 8e 44 fe ff       	call   c0004f99 <f_open>
c0020b0b:	83 c4 10             	add    esp,0x10
c0020b0e:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020b15:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020b1c:	85 c0                	test   eax,eax
c0020b1e:	74 0a                	je     c0020b2a <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020b20:	78 2d                	js     c0020b4f <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020b22:	83 e8 04             	sub    eax,0x4
c0020b25:	83 f8 01             	cmp    eax,0x1
c0020b28:	77 25                	ja     c0020b4f <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020b2a:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020b32:	83 ec 0c             	sub    esp,0xc
c0020b35:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020b39:	50                   	push   eax
c0020b3a:	e8 ac 4f fe ff       	call   c0005aeb <f_close>
c0020b3f:	83 c4 10             	add    esp,0x10
c0020b42:	90                   	nop
c0020b43:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020b4b:	74 3a                	je     c0020b87 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020b4d:	eb 2d                	jmp    c0020b7c <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020b4f:	83 ec 0c             	sub    esp,0xc
c0020b52:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020b59:	e8 0d ed fe ff       	call   c000f86b <rfree>
c0020b5e:	83 c4 10             	add    esp,0x10
c0020b61:	83 ec 04             	sub    esp,0x4
c0020b64:	6a 00                	push   0x0
c0020b66:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020b6d:	50                   	push   eax
c0020b6e:	6a 00                	push   0x0
c0020b70:	e8 c2 43 fe ff       	call   c0004f37 <f_mount>
c0020b75:	83 c4 10             	add    esp,0x10
c0020b78:	b0 00                	mov    al,0x0
c0020b7a:	eb 12                	jmp    c0020b8e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020b7c:	a1 00 1c 03 c0       	mov    eax,ds:0xc0031c00
c0020b81:	40                   	inc    eax
c0020b82:	a3 00 1c 03 c0       	mov    ds:0xc0031c00,eax
c0020b87:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020b8e:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020b94:	c3                   	ret    
c0020b95:	90                   	nop

c0020b96 <FAT::getFileFirstSector(char const*)>:
c0020b96:	53                   	push   ebx
c0020b97:	83 ec 18             	sub    esp,0x18
c0020b9a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0020ba1:	83 ec 0c             	sub    esp,0xc
c0020ba4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0020ba8:	e8 9e ec fe ff       	call   c000f84b <malloc>
c0020bad:	83 c4 10             	add    esp,0x10
c0020bb0:	89 c3                	mov    ebx,eax
c0020bb2:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0020bb7:	83 ec 04             	sub    esp,0x4
c0020bba:	50                   	push   eax
c0020bbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020bbf:	53                   	push   ebx
c0020bc0:	e8 a1 28 ff ff       	call   c0013466 <File::File(char const*, Process*)>
c0020bc5:	83 c4 10             	add    esp,0x10
c0020bc8:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0020bcc:	83 ec 08             	sub    esp,0x8
c0020bcf:	6a 01                	push   0x1
c0020bd1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020bd5:	e8 f0 28 ff ff       	call   c00134ca <File::open(FileOpenMode)>
c0020bda:	83 c4 10             	add    esp,0x10
c0020bdd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020be1:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020be7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020beb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020bef:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0020bf2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020bf5:	83 ec 04             	sub    esp,0x4
c0020bf8:	52                   	push   edx
c0020bf9:	50                   	push   eax
c0020bfa:	68 e1 c9 02 c0       	push   0xc002c9e1
c0020bff:	e8 03 23 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0020c04:	83 c4 10             	add    esp,0x10
c0020c07:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c0b:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0020c0e:	83 ec 08             	sub    esp,0x8
c0020c11:	50                   	push   eax
c0020c12:	68 cf c9 02 c0       	push   0xc002c9cf
c0020c17:	e8 eb 22 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0020c1c:	83 c4 10             	add    esp,0x10
c0020c1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c23:	8b 50 44             	mov    edx,DWORD PTR [eax+0x44]
c0020c26:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0020c29:	83 ec 04             	sub    esp,0x4
c0020c2c:	52                   	push   edx
c0020c2d:	50                   	push   eax
c0020c2e:	68 dd c9 02 c0       	push   0xc002c9dd
c0020c33:	e8 cf 22 ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0020c38:	83 c4 10             	add    esp,0x10
c0020c3b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020c43:	83 ec 0c             	sub    esp,0xc
c0020c46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020c4a:	e8 d9 28 ff ff       	call   c0013528 <File::close()>
c0020c4f:	83 c4 10             	add    esp,0x10
c0020c52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020c56:	ba 00 00 00 00       	mov    edx,0x0
c0020c5b:	83 c4 18             	add    esp,0x18
c0020c5e:	5b                   	pop    ebx
c0020c5f:	c3                   	ret    

c0020c60 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020c60:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0020c66:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0020c6e:	74 0a                	je     c0020c7a <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0020c70:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0020c78:	75 0a                	jne    c0020c84 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0020c7a:	b8 04 00 00 00       	mov    eax,0x4
c0020c7f:	e9 db 00 00 00       	jmp    c0020d5f <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020c84:	83 ec 08             	sub    esp,0x8
c0020c87:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020c8e:	50                   	push   eax
c0020c8f:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020c96:	e8 5a 54 fe ff       	call   c00060f5 <f_readdir>
c0020c9b:	83 c4 10             	add    esp,0x10
c0020c9e:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020ca5:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020cab:	83 ec 0c             	sub    esp,0xc
c0020cae:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020cb5:	83 c0 1a             	add    eax,0x1a
c0020cb8:	50                   	push   eax
c0020cb9:	e8 de fa fd ff       	call   c000079c <strlen>
c0020cbe:	83 c4 10             	add    esp,0x10
c0020cc1:	ba 00 00 00 00       	mov    edx,0x0
c0020cc6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020cca:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020cce:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020cd5:	0f b6 c0             	movzx  eax,al
c0020cd8:	83 e0 10             	and    eax,0x10
c0020cdb:	74 07                	je     c0020ce4 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020cdd:	b8 02 00 00 00       	mov    eax,0x2
c0020ce2:	eb 05                	jmp    c0020ce9 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020ce4:	b8 01 00 00 00       	mov    eax,0x1
c0020ce9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020ced:	83 ec 08             	sub    esp,0x8
c0020cf0:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020cf7:	83 c0 1a             	add    eax,0x1a
c0020cfa:	50                   	push   eax
c0020cfb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020cff:	83 c0 10             	add    eax,0x10
c0020d02:	50                   	push   eax
c0020d03:	e8 34 fb fd ff       	call   c000083c <strcpy>
c0020d08:	83 c4 10             	add    esp,0x10
c0020d0b:	83 ec 04             	sub    esp,0x4
c0020d0e:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020d15:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020d19:	50                   	push   eax
c0020d1a:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020d21:	e8 26 fa fd ff       	call   c000074c <memcpy>
c0020d26:	83 c4 10             	add    esp,0x10
c0020d29:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020d30:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020d36:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020d3d:	84 c0                	test   al,al
c0020d3f:	75 07                	jne    c0020d48 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020d41:	b8 07 00 00 00       	mov    eax,0x7
c0020d46:	eb 17                	jmp    c0020d5f <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020d48:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020d4f:	85 c0                	test   eax,eax
c0020d51:	75 07                	jne    c0020d5a <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020d53:	b8 00 00 00 00       	mov    eax,0x0
c0020d58:	eb 05                	jmp    c0020d5f <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020d5a:	b8 01 00 00 00       	mov    eax,0x1
c0020d5f:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020d65:	c3                   	ret    

c0020d66 <FAT::read(void*, unsigned long, void*, int*)>:
c0020d66:	83 ec 1c             	sub    esp,0x1c
c0020d69:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d6e:	74 07                	je     c0020d77 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020d70:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020d75:	75 07                	jne    c0020d7e <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020d77:	b8 04 00 00 00       	mov    eax,0x4
c0020d7c:	eb 3d                	jmp    c0020dbb <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020d7e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020d82:	50                   	push   eax
c0020d83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020d87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020d8b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d8f:	e8 41 46 fe ff       	call   c00053d5 <f_read>
c0020d94:	83 c4 10             	add    esp,0x10
c0020d97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d9b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020d9f:	89 c2                	mov    edx,eax
c0020da1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020da5:	89 10                	mov    DWORD PTR [eax],edx
c0020da7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020dab:	85 c0                	test   eax,eax
c0020dad:	75 07                	jne    c0020db6 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020daf:	b8 00 00 00 00       	mov    eax,0x0
c0020db4:	eb 05                	jmp    c0020dbb <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020db6:	b8 01 00 00 00       	mov    eax,0x1
c0020dbb:	83 c4 1c             	add    esp,0x1c
c0020dbe:	c3                   	ret    
c0020dbf:	90                   	nop

c0020dc0 <FAT::write(void*, unsigned long, void*, int*)>:
c0020dc0:	83 ec 1c             	sub    esp,0x1c
c0020dc3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020dc8:	74 07                	je     c0020dd1 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020dca:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020dcf:	75 07                	jne    c0020dd8 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020dd1:	b8 04 00 00 00       	mov    eax,0x4
c0020dd6:	eb 3d                	jmp    c0020e15 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020dd8:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020ddc:	50                   	push   eax
c0020ddd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020de1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020de5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020de9:	e8 67 48 fe ff       	call   c0005655 <f_write>
c0020dee:	83 c4 10             	add    esp,0x10
c0020df1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020df5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020df9:	89 c2                	mov    edx,eax
c0020dfb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020dff:	89 10                	mov    DWORD PTR [eax],edx
c0020e01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020e05:	85 c0                	test   eax,eax
c0020e07:	75 07                	jne    c0020e10 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020e09:	b8 00 00 00 00       	mov    eax,0x0
c0020e0e:	eb 05                	jmp    c0020e15 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020e10:	b8 01 00 00 00       	mov    eax,0x1
c0020e15:	83 c4 1c             	add    esp,0x1c
c0020e18:	c3                   	ret    
c0020e19:	90                   	nop

c0020e1a <FAT::close(void*)>:
c0020e1a:	83 ec 1c             	sub    esp,0x1c
c0020e1d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020e22:	75 07                	jne    c0020e2b <FAT::close(void*)+0x11>
c0020e24:	b8 04 00 00 00       	mov    eax,0x4
c0020e29:	eb 36                	jmp    c0020e61 <FAT::close(void*)+0x47>
c0020e2b:	83 ec 0c             	sub    esp,0xc
c0020e2e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e32:	e8 b4 4c fe ff       	call   c0005aeb <f_close>
c0020e37:	83 c4 10             	add    esp,0x10
c0020e3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020e3e:	83 ec 0c             	sub    esp,0xc
c0020e41:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e45:	e8 11 ea fe ff       	call   c000f85b <free>
c0020e4a:	83 c4 10             	add    esp,0x10
c0020e4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020e51:	85 c0                	test   eax,eax
c0020e53:	75 07                	jne    c0020e5c <FAT::close(void*)+0x42>
c0020e55:	b8 00 00 00 00       	mov    eax,0x0
c0020e5a:	eb 05                	jmp    c0020e61 <FAT::close(void*)+0x47>
c0020e5c:	b8 01 00 00 00       	mov    eax,0x1
c0020e61:	83 c4 1c             	add    esp,0x1c
c0020e64:	c3                   	ret    
c0020e65:	90                   	nop

c0020e66 <FAT::closeDir(void*)>:
c0020e66:	83 ec 1c             	sub    esp,0x1c
c0020e69:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020e6e:	75 07                	jne    c0020e77 <FAT::closeDir(void*)+0x11>
c0020e70:	b8 04 00 00 00       	mov    eax,0x4
c0020e75:	eb 36                	jmp    c0020ead <FAT::closeDir(void*)+0x47>
c0020e77:	83 ec 0c             	sub    esp,0xc
c0020e7a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e7e:	e8 50 52 fe ff       	call   c00060d3 <f_closedir>
c0020e83:	83 c4 10             	add    esp,0x10
c0020e86:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020e8a:	83 ec 0c             	sub    esp,0xc
c0020e8d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e91:	e8 c5 e9 fe ff       	call   c000f85b <free>
c0020e96:	83 c4 10             	add    esp,0x10
c0020e99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020e9d:	85 c0                	test   eax,eax
c0020e9f:	75 07                	jne    c0020ea8 <FAT::closeDir(void*)+0x42>
c0020ea1:	b8 00 00 00 00       	mov    eax,0x0
c0020ea6:	eb 05                	jmp    c0020ead <FAT::closeDir(void*)+0x47>
c0020ea8:	b8 01 00 00 00       	mov    eax,0x1
c0020ead:	83 c4 1c             	add    esp,0x1c
c0020eb0:	c3                   	ret    
c0020eb1:	90                   	nop

c0020eb2 <FAT::seek(void*, unsigned long long)>:
c0020eb2:	83 ec 2c             	sub    esp,0x2c
c0020eb5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020eb9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020ebd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020ec1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020ec5:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020eca:	75 07                	jne    c0020ed3 <FAT::seek(void*, unsigned long long)+0x21>
c0020ecc:	b8 04 00 00 00       	mov    eax,0x4
c0020ed1:	eb 2f                	jmp    c0020f02 <FAT::seek(void*, unsigned long long)+0x50>
c0020ed3:	83 ec 04             	sub    esp,0x4
c0020ed6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020eda:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020ede:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020ee2:	e8 33 4c fe ff       	call   c0005b1a <f_lseek>
c0020ee7:	83 c4 10             	add    esp,0x10
c0020eea:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020eee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020ef2:	85 c0                	test   eax,eax
c0020ef4:	75 07                	jne    c0020efd <FAT::seek(void*, unsigned long long)+0x4b>
c0020ef6:	b8 00 00 00 00       	mov    eax,0x0
c0020efb:	eb 05                	jmp    c0020f02 <FAT::seek(void*, unsigned long long)+0x50>
c0020efd:	b8 01 00 00 00       	mov    eax,0x1
c0020f02:	83 c4 2c             	add    esp,0x2c
c0020f05:	c3                   	ret    

c0020f06 <fatWrapperReadDisk>:
c0020f06:	83 ec 1c             	sub    esp,0x1c
c0020f09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f0d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020f11:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020f15:	89 04 24             	mov    DWORD PTR [esp],eax
c0020f18:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020f1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020f20:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020f25:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c0020f2c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020f30:	83 ec 0c             	sub    esp,0xc
c0020f33:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020f37:	52                   	push   edx
c0020f38:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020f3c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020f40:	50                   	push   eax
c0020f41:	e8 52 58 ff ff       	call   c0016798 <LogicalDisk::read(unsigned long long, int, void*)>
c0020f46:	83 c4 20             	add    esp,0x20
c0020f49:	83 c4 1c             	add    esp,0x1c
c0020f4c:	c3                   	ret    

c0020f4d <fatWrapperWriteDisk>:
c0020f4d:	83 ec 1c             	sub    esp,0x1c
c0020f50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f54:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020f58:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020f5c:	89 04 24             	mov    DWORD PTR [esp],eax
c0020f5f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020f63:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020f67:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020f6c:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c0020f73:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020f77:	83 ec 0c             	sub    esp,0xc
c0020f7a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020f7e:	52                   	push   edx
c0020f7f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020f83:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020f87:	50                   	push   eax
c0020f88:	e8 77 58 ff ff       	call   c0016804 <LogicalDisk::write(unsigned long long, int, void*)>
c0020f8d:	83 c4 20             	add    esp,0x20
c0020f90:	83 c4 1c             	add    esp,0x1c
c0020f93:	c3                   	ret    

c0020f94 <fatWrapperIoctl>:
c0020f94:	53                   	push   ebx
c0020f95:	83 ec 28             	sub    esp,0x28
c0020f98:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020f9c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020fa0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020fa4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020fa8:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020fad:	75 31                	jne    c0020fe0 <fatWrapperIoctl+0x4c>
c0020faf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020fb3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020fb7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020fbc:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c0020fc3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020fc9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020fcf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020fd3:	66 89 02             	mov    WORD PTR [edx],ax
c0020fd6:	b8 00 00 00 00       	mov    eax,0x0
c0020fdb:	e9 b2 00 00 00       	jmp    c0021092 <fatWrapperIoctl+0xfe>
c0020fe0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020fe5:	75 6a                	jne    c0021051 <fatWrapperIoctl+0xbd>
c0020fe7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020feb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020fef:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ff4:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c0020ffb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0021001:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0021007:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c002100d:	89 c8                	mov    eax,ecx
c002100f:	89 da                	mov    edx,ebx
c0021011:	0f a4 c2 0a          	shld   edx,eax,0xa
c0021015:	c1 e0 0a             	shl    eax,0xa
c0021018:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c002101d:	8b 0c 8d e0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1420]
c0021024:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c002102a:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0021030:	89 cb                	mov    ebx,ecx
c0021032:	c1 fb 1f             	sar    ebx,0x1f
c0021035:	53                   	push   ebx
c0021036:	51                   	push   ecx
c0021037:	52                   	push   edx
c0021038:	50                   	push   eax
c0021039:	e8 c6 5a 00 00       	call   c0026b04 <__udivdi3>
c002103e:	83 c4 10             	add    esp,0x10
c0021041:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021045:	89 01                	mov    DWORD PTR [ecx],eax
c0021047:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002104a:	b8 00 00 00 00       	mov    eax,0x0
c002104f:	eb 41                	jmp    c0021092 <fatWrapperIoctl+0xfe>
c0021051:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0021056:	75 07                	jne    c002105f <fatWrapperIoctl+0xcb>
c0021058:	b8 00 00 00 00       	mov    eax,0x0
c002105d:	eb 33                	jmp    c0021092 <fatWrapperIoctl+0xfe>
c002105f:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0021064:	75 19                	jne    c002107f <fatWrapperIoctl+0xeb>
c0021066:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002106a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002106e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021072:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0021078:	b8 00 00 00 00       	mov    eax,0x0
c002107d:	eb 13                	jmp    c0021092 <fatWrapperIoctl+0xfe>
c002107f:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0021084:	75 07                	jne    c002108d <fatWrapperIoctl+0xf9>
c0021086:	b8 00 00 00 00       	mov    eax,0x0
c002108b:	eb 05                	jmp    c0021092 <fatWrapperIoctl+0xfe>
c002108d:	b8 04 00 00 00       	mov    eax,0x4
c0021092:	83 c4 28             	add    esp,0x28
c0021095:	5b                   	pop    ebx
c0021096:	c3                   	ret    
c0021097:	90                   	nop

c0021098 <FAT::FAT()>:
c0021098:	83 ec 1c             	sub    esp,0x1c
c002109b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002109f:	83 ec 0c             	sub    esp,0xc
c00210a2:	50                   	push   eax
c00210a3:	e8 6a 21 ff ff       	call   c0013212 <Filesystem::Filesystem()>
c00210a8:	83 c4 10             	add    esp,0x10
c00210ab:	ba 20 ca 02 c0       	mov    edx,0xc002ca20
c00210b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00210b4:	89 10                	mov    DWORD PTR [eax],edx
c00210b6:	c7 05 00 1c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031c00,0x0
c00210c0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00210c8:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00210cd:	7f 15                	jg     c00210e4 <FAT::FAT()+0x4c>
c00210cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00210d3:	c7 04 85 20 1c 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffce3e0],0xffffffff
c00210de:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00210e2:	eb e4                	jmp    c00210c8 <FAT::FAT()+0x30>
c00210e4:	90                   	nop
c00210e5:	83 c4 1c             	add    esp,0x1c
c00210e8:	c3                   	ret    
c00210e9:	90                   	nop

c00210ea <FAT::fixFilepath(char*)>:
c00210ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00210ee:	8a 00                	mov    al,BYTE PTR [eax]
c00210f0:	3c 40                	cmp    al,0x40
c00210f2:	7e 2c                	jle    c0021120 <FAT::fixFilepath(char*)+0x36>
c00210f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00210f8:	8a 00                	mov    al,BYTE PTR [eax]
c00210fa:	83 e8 41             	sub    eax,0x41
c00210fd:	88 c2                	mov    dl,al
c00210ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021103:	88 10                	mov    BYTE PTR [eax],dl
c0021105:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021109:	8a 00                	mov    al,BYTE PTR [eax]
c002110b:	0f be c0             	movsx  eax,al
c002110e:	8b 04 85 20 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3e0]
c0021115:	83 c0 30             	add    eax,0x30
c0021118:	88 c2                	mov    dl,al
c002111a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002111e:	88 10                	mov    BYTE PTR [eax],dl
c0021120:	90                   	nop
c0021121:	c3                   	ret    

c0021122 <FAT::open(char const*, void**, FileOpenMode)>:
c0021122:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021128:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021130:	74 0a                	je     c002113c <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0021132:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c002113a:	75 0a                	jne    c0021146 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c002113c:	b8 04 00 00 00       	mov    eax,0x4
c0021141:	e9 fd 00 00 00       	jmp    c0021243 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0021146:	83 ec 08             	sub    esp,0x8
c0021149:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021150:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021154:	50                   	push   eax
c0021155:	e8 e2 f6 fd ff       	call   c000083c <strcpy>
c002115a:	83 c4 10             	add    esp,0x10
c002115d:	83 ec 08             	sub    esp,0x8
c0021160:	8d 44 24 10          	lea    eax,[esp+0x10]
c0021164:	50                   	push   eax
c0021165:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002116c:	e8 79 ff ff ff       	call   c00210ea <FAT::fixFilepath(char*)>
c0021171:	83 c4 10             	add    esp,0x10
c0021174:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c002117c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021183:	83 e0 01             	and    eax,0x1
c0021186:	74 08                	je     c0021190 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0021188:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0021190:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021197:	83 e0 04             	and    eax,0x4
c002119a:	74 10                	je     c00211ac <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c002119c:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c00211a4:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00211ac:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00211b3:	83 e0 02             	and    eax,0x2
c00211b6:	74 08                	je     c00211c0 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c00211b8:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00211c0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00211c7:	83 e0 08             	and    eax,0x8
c00211ca:	74 08                	je     c00211d4 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c00211cc:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00211d4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00211db:	83 e0 10             	and    eax,0x10
c00211de:	74 08                	je     c00211e8 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c00211e0:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00211e8:	83 ec 0c             	sub    esp,0xc
c00211eb:	68 50 02 00 00       	push   0x250
c00211f0:	e8 56 e6 fe ff       	call   c000f84b <malloc>
c00211f5:	83 c4 10             	add    esp,0x10
c00211f8:	89 c2                	mov    edx,eax
c00211fa:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021201:	89 10                	mov    DWORD PTR [eax],edx
c0021203:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c002120b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021212:	8b 00                	mov    eax,DWORD PTR [eax]
c0021214:	83 ec 04             	sub    esp,0x4
c0021217:	52                   	push   edx
c0021218:	8d 54 24 10          	lea    edx,[esp+0x10]
c002121c:	52                   	push   edx
c002121d:	50                   	push   eax
c002121e:	e8 76 3d fe ff       	call   c0004f99 <f_open>
c0021223:	83 c4 10             	add    esp,0x10
c0021226:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c002122d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0021235:	74 07                	je     c002123e <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0021237:	b8 01 00 00 00       	mov    eax,0x1
c002123c:	eb 05                	jmp    c0021243 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c002123e:	b8 00 00 00 00       	mov    eax,0x0
c0021243:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021249:	c3                   	ret    

c002124a <FAT::openDir(char const*, void**)>:
c002124a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021250:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021258:	74 0a                	je     c0021264 <FAT::openDir(char const*, void**)+0x1a>
c002125a:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021262:	75 07                	jne    c002126b <FAT::openDir(char const*, void**)+0x21>
c0021264:	b8 04 00 00 00       	mov    eax,0x4
c0021269:	eb 7d                	jmp    c00212e8 <FAT::openDir(char const*, void**)+0x9e>
c002126b:	83 ec 08             	sub    esp,0x8
c002126e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021275:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021279:	50                   	push   eax
c002127a:	e8 bd f5 fd ff       	call   c000083c <strcpy>
c002127f:	83 c4 10             	add    esp,0x10
c0021282:	83 ec 08             	sub    esp,0x8
c0021285:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021289:	50                   	push   eax
c002128a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021291:	e8 54 fe ff ff       	call   c00210ea <FAT::fixFilepath(char*)>
c0021296:	83 c4 10             	add    esp,0x10
c0021299:	83 ec 0c             	sub    esp,0xc
c002129c:	6a 4c                	push   0x4c
c002129e:	e8 a8 e5 fe ff       	call   c000f84b <malloc>
c00212a3:	83 c4 10             	add    esp,0x10
c00212a6:	89 c2                	mov    edx,eax
c00212a8:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00212af:	89 10                	mov    DWORD PTR [eax],edx
c00212b1:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00212b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00212ba:	83 ec 08             	sub    esp,0x8
c00212bd:	8d 54 24 14          	lea    edx,[esp+0x14]
c00212c1:	52                   	push   edx
c00212c2:	50                   	push   eax
c00212c3:	e8 09 4d fe ff       	call   c0005fd1 <f_opendir>
c00212c8:	83 c4 10             	add    esp,0x10
c00212cb:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00212d2:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00212da:	74 07                	je     c00212e3 <FAT::openDir(char const*, void**)+0x99>
c00212dc:	b8 01 00 00 00       	mov    eax,0x1
c00212e1:	eb 05                	jmp    c00212e8 <FAT::openDir(char const*, void**)+0x9e>
c00212e3:	b8 00 00 00 00       	mov    eax,0x0
c00212e8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00212ee:	c3                   	ret    
c00212ef:	90                   	nop

c00212f0 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00212f0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00212f6:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00212fe:	75 0a                	jne    c002130a <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0021300:	b8 04 00 00 00       	mov    eax,0x4
c0021305:	e9 c9 00 00 00       	jmp    c00213d3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002130a:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0021312:	75 0a                	jne    c002131e <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0021314:	b8 04 00 00 00       	mov    eax,0x4
c0021319:	e9 b5 00 00 00       	jmp    c00213d3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002131e:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0021326:	75 0a                	jne    c0021332 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0021328:	b8 04 00 00 00       	mov    eax,0x4
c002132d:	e9 a1 00 00 00       	jmp    c00213d3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021332:	83 ec 08             	sub    esp,0x8
c0021335:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002133c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021343:	50                   	push   eax
c0021344:	e8 f3 f4 fd ff       	call   c000083c <strcpy>
c0021349:	83 c4 10             	add    esp,0x10
c002134c:	83 ec 08             	sub    esp,0x8
c002134f:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0021356:	50                   	push   eax
c0021357:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002135e:	e8 87 fd ff ff       	call   c00210ea <FAT::fixFilepath(char*)>
c0021363:	83 c4 10             	add    esp,0x10
c0021366:	83 ec 08             	sub    esp,0x8
c0021369:	8d 44 24 08          	lea    eax,[esp+0x8]
c002136d:	50                   	push   eax
c002136e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021375:	50                   	push   eax
c0021376:	e8 15 4e fe ff       	call   c0006190 <f_stat>
c002137b:	83 c4 10             	add    esp,0x10
c002137e:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021385:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002138c:	85 c0                	test   eax,eax
c002138e:	74 07                	je     c0021397 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0021390:	83 f8 04             	cmp    eax,0x4
c0021393:	74 32                	je     c00213c7 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0021395:	eb 37                	jmp    c00213ce <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0021397:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002139b:	0f b6 c0             	movzx  eax,al
c002139e:	83 e0 10             	and    eax,0x10
c00213a1:	0f 95 c2             	setne  dl
c00213a4:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00213ab:	88 10                	mov    BYTE PTR [eax],dl
c00213ad:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00213b0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00213b4:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00213bb:	89 01                	mov    DWORD PTR [ecx],eax
c00213bd:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00213c0:	b8 00 00 00 00       	mov    eax,0x0
c00213c5:	eb 0c                	jmp    c00213d3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00213c7:	b8 02 00 00 00       	mov    eax,0x2
c00213cc:	eb 05                	jmp    c00213d3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00213ce:	b8 01 00 00 00       	mov    eax,0x1
c00213d3:	81 c4 2c 02 00 00    	add    esp,0x22c
c00213d9:	c3                   	ret    

c00213da <FAT::unlink(char const*)>:
c00213da:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00213e0:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00213e8:	75 07                	jne    c00213f1 <FAT::unlink(char const*)+0x17>
c00213ea:	b8 04 00 00 00       	mov    eax,0x4
c00213ef:	eb 5c                	jmp    c002144d <FAT::unlink(char const*)+0x73>
c00213f1:	83 ec 08             	sub    esp,0x8
c00213f4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00213fb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00213ff:	50                   	push   eax
c0021400:	e8 37 f4 fd ff       	call   c000083c <strcpy>
c0021405:	83 c4 10             	add    esp,0x10
c0021408:	83 ec 08             	sub    esp,0x8
c002140b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002140f:	50                   	push   eax
c0021410:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021417:	e8 ce fc ff ff       	call   c00210ea <FAT::fixFilepath(char*)>
c002141c:	83 c4 10             	add    esp,0x10
c002141f:	83 ec 0c             	sub    esp,0xc
c0021422:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021426:	50                   	push   eax
c0021427:	e8 b6 50 fe ff       	call   c00064e2 <f_unlink>
c002142c:	83 c4 10             	add    esp,0x10
c002142f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021436:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c002143d:	85 c0                	test   eax,eax
c002143f:	75 07                	jne    c0021448 <FAT::unlink(char const*)+0x6e>
c0021441:	b8 00 00 00 00       	mov    eax,0x0
c0021446:	eb 05                	jmp    c002144d <FAT::unlink(char const*)+0x73>
c0021448:	b8 01 00 00 00       	mov    eax,0x1
c002144d:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021453:	c3                   	ret    

c0021454 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0021454:	81 ec 2c 01 00 00    	sub    esp,0x12c
c002145a:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0021461:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0021468:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c002146c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021470:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0021478:	75 0a                	jne    c0021484 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c002147a:	b8 04 00 00 00       	mov    eax,0x4
c002147f:	e9 1c 01 00 00       	jmp    c00215a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021484:	83 ec 08             	sub    esp,0x8
c0021487:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002148e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021492:	50                   	push   eax
c0021493:	e8 a4 f3 fd ff       	call   c000083c <strcpy>
c0021498:	83 c4 10             	add    esp,0x10
c002149b:	83 ec 08             	sub    esp,0x8
c002149e:	8d 44 24 20          	lea    eax,[esp+0x20]
c00214a2:	50                   	push   eax
c00214a3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00214aa:	e8 3b fc ff ff       	call   c00210ea <FAT::fixFilepath(char*)>
c00214af:	83 c4 10             	add    esp,0x10
c00214b2:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00214ba:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00214c2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00214c7:	83 e0 01             	and    eax,0x1
c00214ca:	74 08                	je     c00214d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c00214cc:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00214d4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00214d9:	83 e0 02             	and    eax,0x2
c00214dc:	74 08                	je     c00214e6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c00214de:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00214e6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00214eb:	83 e0 04             	and    eax,0x4
c00214ee:	74 08                	je     c00214f8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c00214f0:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00214f8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00214fd:	83 e0 08             	and    eax,0x8
c0021500:	74 08                	je     c002150a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0021502:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c002150a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002150f:	83 e0 01             	and    eax,0x1
c0021512:	74 08                	je     c002151c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0021514:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c002151c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021521:	83 e0 02             	and    eax,0x2
c0021524:	74 08                	je     c002152e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0021526:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c002152e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021533:	83 e0 04             	and    eax,0x4
c0021536:	74 08                	je     c0021540 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0021538:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0021540:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021545:	83 e0 08             	and    eax,0x8
c0021548:	74 08                	je     c0021552 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c002154a:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0021552:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0021559:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0021560:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0021568:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0021570:	83 ec 04             	sub    esp,0x4
c0021573:	52                   	push   edx
c0021574:	50                   	push   eax
c0021575:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021579:	50                   	push   eax
c002157a:	e8 05 56 fe ff       	call   c0006b84 <f_chmod>
c002157f:	83 c4 10             	add    esp,0x10
c0021582:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0021589:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021590:	85 c0                	test   eax,eax
c0021592:	75 07                	jne    c002159b <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021594:	b8 00 00 00 00       	mov    eax,0x0
c0021599:	eb 05                	jmp    c00215a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c002159b:	b8 01 00 00 00       	mov    eax,0x1
c00215a0:	81 c4 2c 01 00 00    	add    esp,0x12c
c00215a6:	c3                   	ret    
c00215a7:	90                   	nop

c00215a8 <FAT::rename(char const*, char const*)>:
c00215a8:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00215ae:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00215b6:	74 0a                	je     c00215c2 <FAT::rename(char const*, char const*)+0x1a>
c00215b8:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00215c0:	75 0a                	jne    c00215cc <FAT::rename(char const*, char const*)+0x24>
c00215c2:	b8 04 00 00 00       	mov    eax,0x4
c00215c7:	e9 98 00 00 00       	jmp    c0021664 <FAT::rename(char const*, char const*)+0xbc>
c00215cc:	83 ec 08             	sub    esp,0x8
c00215cf:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00215d6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00215dd:	50                   	push   eax
c00215de:	e8 59 f2 fd ff       	call   c000083c <strcpy>
c00215e3:	83 c4 10             	add    esp,0x10
c00215e6:	83 ec 08             	sub    esp,0x8
c00215e9:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00215f0:	50                   	push   eax
c00215f1:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00215f8:	e8 ed fa ff ff       	call   c00210ea <FAT::fixFilepath(char*)>
c00215fd:	83 c4 10             	add    esp,0x10
c0021600:	83 ec 08             	sub    esp,0x8
c0021603:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c002160a:	8d 44 24 18          	lea    eax,[esp+0x18]
c002160e:	50                   	push   eax
c002160f:	e8 28 f2 fd ff       	call   c000083c <strcpy>
c0021614:	83 c4 10             	add    esp,0x10
c0021617:	83 ec 08             	sub    esp,0x8
c002161a:	8d 44 24 14          	lea    eax,[esp+0x14]
c002161e:	50                   	push   eax
c002161f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021626:	e8 bf fa ff ff       	call   c00210ea <FAT::fixFilepath(char*)>
c002162b:	83 c4 10             	add    esp,0x10
c002162e:	83 ec 08             	sub    esp,0x8
c0021631:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021635:	50                   	push   eax
c0021636:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002163d:	50                   	push   eax
c002163e:	e8 4e 52 fe ff       	call   c0006891 <f_rename>
c0021643:	83 c4 10             	add    esp,0x10
c0021646:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c002164d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0021654:	85 c0                	test   eax,eax
c0021656:	75 07                	jne    c002165f <FAT::rename(char const*, char const*)+0xb7>
c0021658:	b8 00 00 00 00       	mov    eax,0x0
c002165d:	eb 05                	jmp    c0021664 <FAT::rename(char const*, char const*)+0xbc>
c002165f:	b8 01 00 00 00       	mov    eax,0x1
c0021664:	81 c4 1c 02 00 00    	add    esp,0x21c
c002166a:	c3                   	ret    
c002166b:	90                   	nop

c002166c <FAT::mkdir(char const*)>:
c002166c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021672:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002167a:	75 07                	jne    c0021683 <FAT::mkdir(char const*)+0x17>
c002167c:	b8 04 00 00 00       	mov    eax,0x4
c0021681:	eb 5c                	jmp    c00216df <FAT::mkdir(char const*)+0x73>
c0021683:	83 ec 08             	sub    esp,0x8
c0021686:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002168d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021691:	50                   	push   eax
c0021692:	e8 a5 f1 fd ff       	call   c000083c <strcpy>
c0021697:	83 c4 10             	add    esp,0x10
c002169a:	83 ec 08             	sub    esp,0x8
c002169d:	8d 44 24 14          	lea    eax,[esp+0x14]
c00216a1:	50                   	push   eax
c00216a2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00216a9:	e8 3c fa ff ff       	call   c00210ea <FAT::fixFilepath(char*)>
c00216ae:	83 c4 10             	add    esp,0x10
c00216b1:	83 ec 0c             	sub    esp,0xc
c00216b4:	8d 44 24 18          	lea    eax,[esp+0x18]
c00216b8:	50                   	push   eax
c00216b9:	e8 a7 4f fe ff       	call   c0006665 <f_mkdir>
c00216be:	83 c4 10             	add    esp,0x10
c00216c1:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00216c8:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00216cf:	85 c0                	test   eax,eax
c00216d1:	75 07                	jne    c00216da <FAT::mkdir(char const*)+0x6e>
c00216d3:	b8 00 00 00 00       	mov    eax,0x0
c00216d8:	eb 05                	jmp    c00216df <FAT::mkdir(char const*)+0x73>
c00216da:	b8 01 00 00 00       	mov    eax,0x1
c00216df:	81 c4 1c 01 00 00    	add    esp,0x11c
c00216e5:	c3                   	ret    

c00216e6 <FAT::exists(char const*)>:
c00216e6:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00216ec:	83 ec 08             	sub    esp,0x8
c00216ef:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00216f6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00216fa:	50                   	push   eax
c00216fb:	e8 3c f1 fd ff       	call   c000083c <strcpy>
c0021700:	83 c4 10             	add    esp,0x10
c0021703:	83 ec 08             	sub    esp,0x8
c0021706:	8d 44 24 08          	lea    eax,[esp+0x8]
c002170a:	50                   	push   eax
c002170b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021712:	e8 d3 f9 ff ff       	call   c00210ea <FAT::fixFilepath(char*)>
c0021717:	83 c4 10             	add    esp,0x10
c002171a:	83 ec 08             	sub    esp,0x8
c002171d:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021724:	50                   	push   eax
c0021725:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021729:	50                   	push   eax
c002172a:	e8 61 4a fe ff       	call   c0006190 <f_stat>
c002172f:	83 c4 10             	add    esp,0x10
c0021732:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021739:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021740:	85 c0                	test   eax,eax
c0021742:	75 04                	jne    c0021748 <FAT::exists(char const*)+0x62>
c0021744:	b0 01                	mov    al,0x1
c0021746:	eb 02                	jmp    c002174a <FAT::exists(char const*)+0x64>
c0021748:	b0 00                	mov    al,0x0
c002174a:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021750:	c3                   	ret    
c0021751:	90                   	nop

c0021752 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0021752:	b8 08 00 00 00       	mov    eax,0x8
c0021757:	c3                   	ret    

c0021758 <ISO9660::seek(void*, unsigned long long)>:
c0021758:	53                   	push   ebx
c0021759:	b8 04 00 00 00       	mov    eax,0x4
c002175e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021762:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021766:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002176a:	85 d2                	test   edx,edx
c002176c:	74 17                	je     c0021785 <ISO9660::seek(void*, unsigned long long)+0x2d>
c002176e:	89 c8                	mov    eax,ecx
c0021770:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021773:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021776:	b8 01 00 00 00       	mov    eax,0x1
c002177b:	73 08                	jae    c0021785 <ISO9660::seek(void*, unsigned long long)+0x2d>
c002177d:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021780:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021783:	31 c0                	xor    eax,eax
c0021785:	5b                   	pop    ebx
c0021786:	c3                   	ret    
c0021787:	90                   	nop

c0021788 <ISO9660::tell(void*, unsigned long long*)>:
c0021788:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002178c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021790:	85 d2                	test   edx,edx
c0021792:	74 12                	je     c00217a6 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021794:	85 c0                	test   eax,eax
c0021796:	74 0e                	je     c00217a6 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021798:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002179b:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c002179e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00217a1:	89 10                	mov    DWORD PTR [eax],edx
c00217a3:	31 c0                	xor    eax,eax
c00217a5:	c3                   	ret    
c00217a6:	b8 04 00 00 00       	mov    eax,0x4
c00217ab:	c3                   	ret    

c00217ac <ISO9660::getName()>:
c00217ac:	b8 80 ca 02 c0       	mov    eax,0xc002ca80
c00217b1:	c3                   	ret    

c00217b2 <ISO9660::stat(void*, unsigned long long*)>:
c00217b2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00217b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00217ba:	85 d2                	test   edx,edx
c00217bc:	74 12                	je     c00217d0 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00217be:	85 c0                	test   eax,eax
c00217c0:	74 0e                	je     c00217d0 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00217c2:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00217c5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00217c8:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00217cb:	89 10                	mov    DWORD PTR [eax],edx
c00217cd:	31 c0                	xor    eax,eax
c00217cf:	c3                   	ret    
c00217d0:	b8 04 00 00 00       	mov    eax,0x4
c00217d5:	c3                   	ret    

c00217d6 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00217d6:	b8 01 00 00 00       	mov    eax,0x1
c00217db:	c3                   	ret    

c00217dc <ISO9660::unlink(char const*)>:
c00217dc:	b8 01 00 00 00       	mov    eax,0x1
c00217e1:	c3                   	ret    

c00217e2 <ISO9660::write(void*, unsigned long, void*, int*)>:
c00217e2:	b8 01 00 00 00       	mov    eax,0x1
c00217e7:	c3                   	ret    

c00217e8 <ISO9660::rename(char const*, char const*)>:
c00217e8:	b8 01 00 00 00       	mov    eax,0x1
c00217ed:	c3                   	ret    

c00217ee <ISO9660::mkdir(char const*)>:
c00217ee:	b8 01 00 00 00       	mov    eax,0x1
c00217f3:	c3                   	ret    

c00217f4 <ISO9660::close(void*)>:
c00217f4:	83 ec 0c             	sub    esp,0xc
c00217f7:	b8 04 00 00 00       	mov    eax,0x4
c00217fc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021800:	85 d2                	test   edx,edx
c0021802:	74 0e                	je     c0021812 <ISO9660::close(void*)+0x1e>
c0021804:	83 ec 0c             	sub    esp,0xc
c0021807:	52                   	push   edx
c0021808:	e8 4e e0 fe ff       	call   c000f85b <free>
c002180d:	83 c4 10             	add    esp,0x10
c0021810:	31 c0                	xor    eax,eax
c0021812:	83 c4 0c             	add    esp,0xc
c0021815:	c3                   	ret    

c0021816 <ISO9660::closeDir(void*)>:
c0021816:	83 ec 0c             	sub    esp,0xc
c0021819:	b8 04 00 00 00       	mov    eax,0x4
c002181e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021822:	85 d2                	test   edx,edx
c0021824:	74 0e                	je     c0021834 <ISO9660::closeDir(void*)+0x1e>
c0021826:	83 ec 0c             	sub    esp,0xc
c0021829:	52                   	push   edx
c002182a:	e8 2c e0 fe ff       	call   c000f85b <free>
c002182f:	83 c4 10             	add    esp,0x10
c0021832:	31 c0                	xor    eax,eax
c0021834:	83 c4 0c             	add    esp,0xc
c0021837:	c3                   	ret    

c0021838 <ISO9660::~ISO9660()>:
c0021838:	83 ec 0c             	sub    esp,0xc
c002183b:	ba e4 ca 02 c0       	mov    edx,0xc002cae4
c0021840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021844:	89 10                	mov    DWORD PTR [eax],edx
c0021846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002184a:	83 ec 0c             	sub    esp,0xc
c002184d:	50                   	push   eax
c002184e:	e8 e3 19 ff ff       	call   c0013236 <Filesystem::~Filesystem()>
c0021853:	83 c4 10             	add    esp,0x10
c0021856:	90                   	nop
c0021857:	83 c4 0c             	add    esp,0xc
c002185a:	c3                   	ret    
c002185b:	90                   	nop

c002185c <ISO9660::~ISO9660()>:
c002185c:	83 ec 0c             	sub    esp,0xc
c002185f:	83 ec 0c             	sub    esp,0xc
c0021862:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021866:	e8 cd ff ff ff       	call   c0021838 <ISO9660::~ISO9660()>
c002186b:	83 c4 10             	add    esp,0x10
c002186e:	83 ec 08             	sub    esp,0x8
c0021871:	6a 08                	push   0x8
c0021873:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021877:	e8 ab 15 ff ff       	call   c0012e27 <operator delete(void*, unsigned long)>
c002187c:	83 c4 10             	add    esp,0x10
c002187f:	83 c4 0c             	add    esp,0xc
c0021882:	c3                   	ret    

c0021883 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021883:	55                   	push   ebp
c0021884:	31 c9                	xor    ecx,ecx
c0021886:	57                   	push   edi
c0021887:	56                   	push   esi
c0021888:	53                   	push   ebx
c0021889:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c002188d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021891:	89 eb                	mov    ebx,ebp
c0021893:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021897:	39 ce                	cmp    esi,ecx
c0021899:	7e 17                	jle    c00218b2 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c002189b:	31 d2                	xor    edx,edx
c002189d:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c00218a1:	7d 13                	jge    c00218b6 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c00218a3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00218a7:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00218aa:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c00218ad:	75 0d                	jne    c00218bc <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c00218af:	42                   	inc    edx
c00218b0:	eb eb                	jmp    c002189d <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c00218b2:	31 c0                	xor    eax,eax
c00218b4:	eb 0a                	jmp    c00218c0 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00218b6:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00218ba:	eb 04                	jmp    c00218c0 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00218bc:	41                   	inc    ecx
c00218bd:	43                   	inc    ebx
c00218be:	eb d7                	jmp    c0021897 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c00218c0:	5b                   	pop    ebx
c00218c1:	5e                   	pop    esi
c00218c2:	5f                   	pop    edi
c00218c3:	5d                   	pop    ebp
c00218c4:	c3                   	ret    

c00218c5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00218c5:	56                   	push   esi
c00218c6:	53                   	push   ebx
c00218c7:	52                   	push   edx
c00218c8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00218cc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00218d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00218d4:	39 0d 00 1d 03 c0    	cmp    DWORD PTR ds:0xc0031d00,ecx
c00218da:	75 08                	jne    c00218e4 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c00218dc:	38 05 54 db 02 c0    	cmp    BYTE PTR ds:0xc002db54,al
c00218e2:	74 2b                	je     c002190f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c00218e4:	83 ec 0c             	sub    esp,0xc
c00218e7:	a2 54 db 02 c0       	mov    ds:0xc002db54,al
c00218ec:	68 20 1d 03 c0       	push   0xc0031d20
c00218f1:	0f be c0             	movsx  eax,al
c00218f4:	6a 01                	push   0x1
c00218f6:	89 0d 00 1d 03 c0    	mov    DWORD PTR ds:0xc0031d00,ecx
c00218fc:	31 db                	xor    ebx,ebx
c00218fe:	53                   	push   ebx
c00218ff:	51                   	push   ecx
c0021900:	ff 34 85 dc ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd1524]
c0021907:	e8 8c 4e ff ff       	call   c0016798 <LogicalDisk::read(unsigned long long, int, void*)>
c002190c:	83 c4 20             	add    esp,0x20
c002190f:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0021917:	c7 44 24 14 20 1d 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031d20
c002191f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021923:	58                   	pop    eax
c0021924:	5b                   	pop    ebx
c0021925:	5e                   	pop    esi
c0021926:	e9 21 ee fd ff       	jmp    c000074c <memcpy>
c002192b:	90                   	nop

c002192c <ISO9660::tryMount(LogicalDisk*, int)>:
c002192c:	81 ec 10 08 00 00    	sub    esp,0x810
c0021932:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021939:	83 c0 41             	add    eax,0x41
c002193c:	0f be c0             	movsx  eax,al
c002193f:	50                   	push   eax
c0021940:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021944:	50                   	push   eax
c0021945:	6a 10                	push   0x10
c0021947:	e8 79 ff ff ff       	call   c00218c5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002194c:	83 c4 10             	add    esp,0x10
c002194f:	31 c0                	xor    eax,eax
c0021951:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021956:	75 1d                	jne    c0021975 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021958:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c002195d:	75 16                	jne    c0021975 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002195f:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021964:	75 0f                	jne    c0021975 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021966:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c002196b:	75 08                	jne    c0021975 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002196d:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021972:	0f 94 c0             	sete   al
c0021975:	81 c4 0c 08 00 00    	add    esp,0x80c
c002197b:	c3                   	ret    

c002197c <ISO9660::read(void*, unsigned long, void*, int*)>:
c002197c:	55                   	push   ebp
c002197d:	57                   	push   edi
c002197e:	56                   	push   esi
c002197f:	53                   	push   ebx
c0021980:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021986:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c002198d:	85 ed                	test   ebp,ebp
c002198f:	0f 84 d6 01 00 00    	je     c0021b6b <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021995:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c002199d:	0f 84 c8 01 00 00    	je     c0021b6b <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c00219a3:	b8 01 00 00 00       	mov    eax,0x1
c00219a8:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c00219ac:	0f 85 be 01 00 00    	jne    c0021b70 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c00219b2:	31 d2                	xor    edx,edx
c00219b4:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c00219bb:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00219be:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c00219c1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00219c5:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c00219c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00219cb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00219cf:	01 f0                	add    eax,esi
c00219d1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00219d4:	11 fa                	adc    edx,edi
c00219d6:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00219da:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00219de:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00219e2:	19 d1                	sbb    ecx,edx
c00219e4:	72 0a                	jb     c00219f0 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c00219e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00219ea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00219ee:	eb 13                	jmp    c0021a03 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c00219f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00219f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00219f8:	29 f0                	sub    eax,esi
c00219fa:	19 fa                	sbb    edx,edi
c00219fc:	89 04 24             	mov    DWORD PTR [esp],eax
c00219ff:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021a03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021a06:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021a09:	0f a4 c2 0b          	shld   edx,eax,0xb
c0021a0d:	51                   	push   ecx
c0021a0e:	c1 e0 0b             	shl    eax,0xb
c0021a11:	01 c6                	add    esi,eax
c0021a13:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021a17:	11 d7                	adc    edi,edx
c0021a19:	50                   	push   eax
c0021a1a:	89 fa                	mov    edx,edi
c0021a1c:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0021a20:	89 f0                	mov    eax,esi
c0021a22:	53                   	push   ebx
c0021a23:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021a27:	50                   	push   eax
c0021a28:	e8 98 fe ff ff       	call   c00218c5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a2d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021a31:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021a34:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0021a38:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0021a3e:	83 c4 10             	add    esp,0x10
c0021a41:	b8 00 08 00 00       	mov    eax,0x800
c0021a46:	29 d0                	sub    eax,edx
c0021a48:	39 c1                	cmp    ecx,eax
c0021a4a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0021a4e:	83 d9 00             	sbb    ecx,0x0
c0021a51:	7d 1c                	jge    c0021a6f <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c0021a53:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0021a58:	75 12                	jne    c0021a6c <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c0021a5a:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021a61:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021a67:	e9 fb 00 00 00       	jmp    c0021b67 <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c0021a6c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021a6f:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c0021a72:	31 d2                	xor    edx,edx
c0021a74:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021a78:	39 c2                	cmp    edx,eax
c0021a7a:	7d 14                	jge    c0021a90 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c0021a7c:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021a83:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021a87:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021a8a:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021a8d:	42                   	inc    edx
c0021a8e:	eb e8                	jmp    c0021a78 <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c0021a90:	89 c3                	mov    ebx,eax
c0021a92:	85 c0                	test   eax,eax
c0021a94:	79 02                	jns    c0021a98 <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c0021a96:	31 db                	xor    ebx,ebx
c0021a98:	99                   	cdq    
c0021a99:	01 c3                	add    ebx,eax
c0021a9b:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0021aa2:	01 c6                	add    esi,eax
c0021aa4:	11 d7                	adc    edi,edx
c0021aa6:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021aaa:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021aae:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021ab1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021ab5:	29 c6                	sub    esi,eax
c0021ab7:	19 d7                	sbb    edi,edx
c0021ab9:	89 34 24             	mov    DWORD PTR [esp],esi
c0021abc:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021ac0:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021ac5:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021ac8:	b8 00 00 00 00       	mov    eax,0x0
c0021acd:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021ad1:	7d 3e                	jge    c0021b11 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c0021ad3:	52                   	push   edx
c0021ad4:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021ad8:	50                   	push   eax
c0021ad9:	53                   	push   ebx
c0021ada:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021ade:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021ae2:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021ae6:	50                   	push   eax
c0021ae7:	e8 d9 fd ff ff       	call   c00218c5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021aec:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021af4:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021af9:	81 c3 00 08 00 00    	add    ebx,0x800
c0021aff:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021b07:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021b0c:	83 c4 10             	add    esp,0x10
c0021b0f:	eb af                	jmp    c0021ac0 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c0021b11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b15:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021b18:	74 32                	je     c0021b4c <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0021b1a:	50                   	push   eax
c0021b1b:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021b1f:	50                   	push   eax
c0021b20:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021b24:	50                   	push   eax
c0021b25:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0021b29:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0021b2d:	0f ac fe 0b          	shrd   esi,edi,0xb
c0021b31:	56                   	push   esi
c0021b32:	e8 8e fd ff ff       	call   c00218c5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b37:	83 c4 0c             	add    esp,0xc
c0021b3a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0021b3e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021b42:	50                   	push   eax
c0021b43:	53                   	push   ebx
c0021b44:	e8 03 ec fd ff       	call   c000074c <memcpy>
c0021b49:	83 c4 10             	add    esp,0x10
c0021b4c:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021b53:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021b57:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021b5b:	89 38                	mov    DWORD PTR [eax],edi
c0021b5d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021b61:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021b64:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021b67:	31 c0                	xor    eax,eax
c0021b69:	eb 05                	jmp    c0021b70 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021b6b:	b8 04 00 00 00       	mov    eax,0x4
c0021b70:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021b76:	5b                   	pop    ebx
c0021b77:	5e                   	pop    esi
c0021b78:	5f                   	pop    edi
c0021b79:	5d                   	pop    ebp
c0021b7a:	c3                   	ret    
c0021b7b:	90                   	nop

c0021b7c <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021b7c:	55                   	push   ebp
c0021b7d:	57                   	push   edi
c0021b7e:	56                   	push   esi
c0021b7f:	53                   	push   ebx
c0021b80:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021b86:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0021b8d:	85 f6                	test   esi,esi
c0021b8f:	0f 84 64 02 00 00    	je     c0021df9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021b95:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021b9d:	0f 84 56 02 00 00    	je     c0021df9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021ba3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0021ba6:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0021ba9:	75 0a                	jne    c0021bb5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021bab:	b8 07 00 00 00       	mov    eax,0x7
c0021bb0:	e9 49 02 00 00       	jmp    c0021dfe <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021bb5:	50                   	push   eax
c0021bb6:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021bba:	50                   	push   eax
c0021bbb:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021bc2:	53                   	push   ebx
c0021bc3:	8b 06                	mov    eax,DWORD PTR [esi]
c0021bc5:	c1 e0 0b             	shl    eax,0xb
c0021bc8:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0021bcb:	c1 e8 0b             	shr    eax,0xb
c0021bce:	50                   	push   eax
c0021bcf:	e8 f1 fc ff ff       	call   c00218c5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021bd4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021bd7:	83 c4 10             	add    esp,0x10
c0021bda:	89 c1                	mov    ecx,eax
c0021bdc:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021bdf:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021be5:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021be8:	84 db                	test   bl,bl
c0021bea:	0f 85 90 00 00 00    	jne    c0021c80 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0021bf0:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0021bf6:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021bfc:	29 c7                	sub    edi,eax
c0021bfe:	89 fb                	mov    ebx,edi
c0021c00:	c1 fb 1f             	sar    ebx,0x1f
c0021c03:	01 f8                	add    eax,edi
c0021c05:	11 da                	adc    edx,ebx
c0021c07:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021c0b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021c0f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0021c12:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0021c15:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021c18:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021c1b:	89 04 24             	mov    DWORD PTR [esp],eax
c0021c1e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021c22:	89 d8                	mov    eax,ebx
c0021c24:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021c27:	ba 00 00 00 00       	mov    edx,0x0
c0021c2c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021c30:	b8 00 00 00 00       	mov    eax,0x0
c0021c35:	73 0b                	jae    c0021c42 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0021c37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021c3a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021c3e:	29 f8                	sub    eax,edi
c0021c40:	19 da                	sbb    edx,ebx
c0021c42:	89 d3                	mov    ebx,edx
c0021c44:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021c47:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021c4a:	09 c3                	or     ebx,eax
c0021c4c:	0f 84 59 ff ff ff    	je     c0021bab <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021c52:	55                   	push   ebp
c0021c53:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021c57:	50                   	push   eax
c0021c58:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021c5f:	53                   	push   ebx
c0021c60:	8b 06                	mov    eax,DWORD PTR [esi]
c0021c62:	c1 e0 0b             	shl    eax,0xb
c0021c65:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0021c69:	c1 e8 0b             	shr    eax,0xb
c0021c6c:	50                   	push   eax
c0021c6d:	e8 53 fc ff ff       	call   c00218c5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021c72:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021c75:	83 c4 10             	add    esp,0x10
c0021c78:	25 ff 07 00 00       	and    eax,0x7ff
c0021c7d:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021c80:	57                   	push   edi
c0021c81:	6a 28                	push   0x28
c0021c83:	6a 00                	push   0x0
c0021c85:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021c89:	50                   	push   eax
c0021c8a:	e8 f1 ea fd ff       	call   c0000780 <memset>
c0021c8f:	31 d2                	xor    edx,edx
c0021c91:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0021c94:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021c9a:	89 f8                	mov    eax,edi
c0021c9c:	83 c0 21             	add    eax,0x21
c0021c9f:	83 d2 00             	adc    edx,0x0
c0021ca2:	89 c7                	mov    edi,eax
c0021ca4:	89 d5                	mov    ebp,edx
c0021ca6:	83 c4 10             	add    esp,0x10
c0021ca9:	31 c9                	xor    ecx,ecx
c0021cab:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0021cb2:	83 f9 28             	cmp    ecx,0x28
c0021cb5:	88 04 24             	mov    BYTE PTR [esp],al
c0021cb8:	0f 94 c2             	sete   dl
c0021cbb:	88 d0                	mov    al,dl
c0021cbd:	ba ff 07 00 00       	mov    edx,0x7ff
c0021cc2:	39 fa                	cmp    edx,edi
c0021cc4:	ba 00 00 00 00       	mov    edx,0x0
c0021cc9:	19 ea                	sbb    edx,ebp
c0021ccb:	0f 92 c2             	setb   dl
c0021cce:	09 c2                	or     edx,eax
c0021cd0:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021cd4:	0f 94 c0             	sete   al
c0021cd7:	08 d0                	or     al,dl
c0021cd9:	75 16                	jne    c0021cf1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021cdb:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021cdf:	74 10                	je     c0021cf1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021ce1:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021ce4:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021ce8:	41                   	inc    ecx
c0021ce9:	83 c7 01             	add    edi,0x1
c0021cec:	83 d5 00             	adc    ebp,0x0
c0021cef:	eb ba                	jmp    c0021cab <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021cf1:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021cf8:	83 ec 0c             	sub    esp,0xc
c0021cfb:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021cff:	57                   	push   edi
c0021d00:	e8 97 ea fd ff       	call   c000079c <strlen>
c0021d05:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021d0d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021d11:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021d18:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021d1b:	5a                   	pop    edx
c0021d1c:	25 ff 07 00 00       	and    eax,0x7ff
c0021d21:	01 c8                	add    eax,ecx
c0021d23:	59                   	pop    ecx
c0021d24:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021d2a:	83 e0 02             	and    eax,0x2
c0021d2d:	3c 01                	cmp    al,0x1
c0021d2f:	19 c0                	sbb    eax,eax
c0021d31:	83 c0 02             	add    eax,0x2
c0021d34:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021d38:	57                   	push   edi
c0021d39:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021d3d:	50                   	push   eax
c0021d3e:	e8 f9 ea fd ff       	call   c000083c <strcpy>
c0021d43:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021d47:	83 c4 10             	add    esp,0x10
c0021d4a:	84 c0                	test   al,al
c0021d4c:	75 21                	jne    c0021d6f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021d4e:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021d56:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021d5e:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021d66:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021d6d:	eb 28                	jmp    c0021d97 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021d6f:	fe c8                	dec    al
c0021d71:	75 24                	jne    c0021d97 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021d73:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021d7b:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021d83:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021d8b:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021d92:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021d97:	0f b6 fb             	movzx  edi,bl
c0021d9a:	31 db                	xor    ebx,ebx
c0021d9c:	50                   	push   eax
c0021d9d:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021da4:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021da8:	50                   	push   eax
c0021da9:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021db0:	e8 97 e9 fd ff       	call   c000074c <memcpy>
c0021db5:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021dbc:	89 f9                	mov    ecx,edi
c0021dbe:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021dc4:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021dc7:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021dca:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021dcd:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021dd0:	83 c4 10             	add    esp,0x10
c0021dd3:	39 c7                	cmp    edi,eax
c0021dd5:	89 df                	mov    edi,ebx
c0021dd7:	19 d7                	sbb    edi,edx
c0021dd9:	72 10                	jb     c0021deb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021ddb:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021de2:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021de9:	eb 0a                	jmp    c0021df5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021deb:	29 c8                	sub    eax,ecx
c0021ded:	19 da                	sbb    edx,ebx
c0021def:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021df2:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021df5:	31 c0                	xor    eax,eax
c0021df7:	eb 05                	jmp    c0021dfe <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021df9:	b8 04 00 00 00       	mov    eax,0x4
c0021dfe:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021e04:	5b                   	pop    ebx
c0021e05:	5e                   	pop    esi
c0021e06:	5f                   	pop    edi
c0021e07:	5d                   	pop    ebp
c0021e08:	c3                   	ret    

c0021e09 <readRoot(unsigned int*, unsigned int*, char)>:
c0021e09:	81 ec 40 08 00 00    	sub    esp,0x840
c0021e0f:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021e17:	50                   	push   eax
c0021e18:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021e1c:	50                   	push   eax
c0021e1d:	6a 10                	push   0x10
c0021e1f:	e8 a1 fa ff ff       	call   c00218c5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021e24:	83 c4 0c             	add    esp,0xc
c0021e27:	6a 22                	push   0x22
c0021e29:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021e30:	50                   	push   eax
c0021e31:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021e35:	50                   	push   eax
c0021e36:	e8 11 e9 fd ff       	call   c000074c <memcpy>
c0021e3b:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021e42:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021e46:	89 10                	mov    DWORD PTR [eax],edx
c0021e48:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021e4f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021e53:	89 10                	mov    DWORD PTR [eax],edx
c0021e55:	b0 01                	mov    al,0x1
c0021e57:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021e5d:	c3                   	ret    

c0021e5e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021e5e:	55                   	push   ebp
c0021e5f:	57                   	push   edi
c0021e60:	56                   	push   esi
c0021e61:	53                   	push   ebx
c0021e62:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021e68:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021e6f:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021e76:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021e7a:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021e7e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021e82:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021e86:	75 03                	jne    c0021e8b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021e88:	83 c3 02             	add    ebx,0x2
c0021e8b:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021e8e:	75 03                	jne    c0021e93 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021e90:	43                   	inc    ebx
c0021e91:	eb f8                	jmp    c0021e8b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021e93:	51                   	push   ecx
c0021e94:	68 00 01 00 00       	push   0x100
c0021e99:	6a 00                	push   0x0
c0021e9b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021e9f:	50                   	push   eax
c0021ea0:	e8 db e8 fd ff       	call   c0000780 <memset>
c0021ea5:	83 c4 10             	add    esp,0x10
c0021ea8:	31 d2                	xor    edx,edx
c0021eaa:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021ead:	84 c0                	test   al,al
c0021eaf:	74 21                	je     c0021ed2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021eb1:	3c 2f                	cmp    al,0x2f
c0021eb3:	75 0b                	jne    c0021ec0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021eb5:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021eb9:	bd 01 00 00 00       	mov    ebp,0x1
c0021ebe:	eb 14                	jmp    c0021ed4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021ec0:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021ec3:	80 f9 19             	cmp    cl,0x19
c0021ec6:	77 03                	ja     c0021ecb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021ec8:	83 e8 20             	sub    eax,0x20
c0021ecb:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021ecf:	42                   	inc    edx
c0021ed0:	eb d8                	jmp    c0021eaa <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021ed2:	31 ed                	xor    ebp,ebp
c0021ed4:	83 ec 0c             	sub    esp,0xc
c0021ed7:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021ede:	e8 68 d9 fe ff       	call   c000f84b <malloc>
c0021ee3:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021eea:	89 c6                	mov    esi,eax
c0021eec:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021ef2:	c1 ef 0b             	shr    edi,0xb
c0021ef5:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021efc:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021f00:	83 c4 10             	add    esp,0x10
c0021f03:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021f08:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021f0c:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021f13:	74 28                	je     c0021f3d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021f15:	52                   	push   edx
c0021f16:	57                   	push   edi
c0021f17:	50                   	push   eax
c0021f18:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021f1c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021f23:	e8 9d f9 ff ff       	call   c00218c5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021f28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021f2c:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021f33:	05 00 08 00 00       	add    eax,0x800
c0021f38:	83 c4 10             	add    esp,0x10
c0021f3b:	eb cb                	jmp    c0021f08 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021f3d:	83 ec 0c             	sub    esp,0xc
c0021f40:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021f44:	57                   	push   edi
c0021f45:	e8 52 e8 fd ff       	call   c000079c <strlen>
c0021f4a:	50                   	push   eax
c0021f4b:	57                   	push   edi
c0021f4c:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021f53:	56                   	push   esi
c0021f54:	e8 2a f9 ff ff       	call   c0021883 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021f59:	83 c4 20             	add    esp,0x20
c0021f5c:	85 c0                	test   eax,eax
c0021f5e:	75 13                	jne    c0021f73 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021f60:	83 ec 0c             	sub    esp,0xc
c0021f63:	56                   	push   esi
c0021f64:	e8 f2 d8 fe ff       	call   c000f85b <free>
c0021f69:	83 c4 10             	add    esp,0x10
c0021f6c:	31 c0                	xor    eax,eax
c0021f6e:	e9 b3 00 00 00       	jmp    c0022026 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021f73:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021f77:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021f7b:	c1 e7 08             	shl    edi,0x8
c0021f7e:	c1 e2 10             	shl    edx,0x10
c0021f81:	09 d7                	or     edi,edx
c0021f83:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021f87:	09 d7                	or     edi,edx
c0021f89:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021f8d:	c1 e2 18             	shl    edx,0x18
c0021f90:	09 d7                	or     edi,edx
c0021f92:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021f96:	89 d1                	mov    ecx,edx
c0021f98:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021f9c:	c1 e1 08             	shl    ecx,0x8
c0021f9f:	c1 e2 10             	shl    edx,0x10
c0021fa2:	09 ca                	or     edx,ecx
c0021fa4:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021fa8:	09 ca                	or     edx,ecx
c0021faa:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021fae:	c1 e1 18             	shl    ecx,0x18
c0021fb1:	09 ca                	or     edx,ecx
c0021fb3:	89 e9                	mov    ecx,ebp
c0021fb5:	84 c9                	test   cl,cl
c0021fb7:	74 3c                	je     c0021ff5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021fb9:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021fbd:	83 ec 0c             	sub    esp,0xc
c0021fc0:	56                   	push   esi
c0021fc1:	e8 95 d8 fe ff       	call   c000f85b <free>
c0021fc6:	83 c4 0c             	add    esp,0xc
c0021fc9:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021fd0:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021fd5:	50                   	push   eax
c0021fd6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021fdd:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021fe4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021fe8:	52                   	push   edx
c0021fe9:	57                   	push   edi
c0021fea:	53                   	push   ebx
c0021feb:	e8 6e fe ff ff       	call   c0021e5e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021ff0:	83 c4 20             	add    esp,0x20
c0021ff3:	eb 31                	jmp    c0022026 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021ff5:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021ff8:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021fff:	d0 e8                	shr    al,1
c0022001:	89 3b                	mov    DWORD PTR [ebx],edi
c0022003:	83 e0 01             	and    eax,0x1
c0022006:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c002200d:	83 ec 0c             	sub    esp,0xc
c0022010:	89 13                	mov    DWORD PTR [ebx],edx
c0022012:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0022019:	89 03                	mov    DWORD PTR [ebx],eax
c002201b:	56                   	push   esi
c002201c:	e8 3a d8 fe ff       	call   c000f85b <free>
c0022021:	83 c4 10             	add    esp,0x10
c0022024:	b0 01                	mov    al,0x1
c0022026:	81 c4 1c 01 00 00    	add    esp,0x11c
c002202c:	5b                   	pop    ebx
c002202d:	5e                   	pop    esi
c002202e:	5f                   	pop    edi
c002202f:	5d                   	pop    ebp
c0022030:	c3                   	ret    

c0022031 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0022031:	55                   	push   ebp
c0022032:	57                   	push   edi
c0022033:	56                   	push   esi
c0022034:	53                   	push   ebx
c0022035:	83 ec 20             	sub    esp,0x20
c0022038:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002203c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0022040:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0022044:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002204c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0022054:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0022059:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c002205f:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0022065:	57                   	push   edi
c0022066:	8d 44 24 14          	lea    eax,[esp+0x14]
c002206a:	50                   	push   eax
c002206b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002206f:	50                   	push   eax
c0022070:	e8 94 fd ff ff       	call   c0021e09 <readRoot(unsigned int*, unsigned int*, char)>
c0022075:	5a                   	pop    edx
c0022076:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002207a:	e8 1d e7 fd ff       	call   c000079c <strlen>
c002207f:	83 c4 10             	add    esp,0x10
c0022082:	83 f8 03             	cmp    eax,0x3
c0022085:	77 17                	ja     c002209e <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0022087:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002208b:	89 03                	mov    DWORD PTR [ebx],eax
c002208d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022091:	89 06                	mov    DWORD PTR [esi],eax
c0022093:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c002209a:	b0 01                	mov    al,0x1
c002209c:	eb 19                	jmp    c00220b7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c002209e:	50                   	push   eax
c002209f:	55                   	push   ebp
c00220a0:	57                   	push   edi
c00220a1:	56                   	push   esi
c00220a2:	53                   	push   ebx
c00220a3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00220a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00220ab:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00220af:	e8 aa fd ff ff       	call   c0021e5e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00220b4:	83 c4 20             	add    esp,0x20
c00220b7:	83 c4 1c             	add    esp,0x1c
c00220ba:	5b                   	pop    ebx
c00220bb:	5e                   	pop    esi
c00220bc:	5f                   	pop    edi
c00220bd:	5d                   	pop    ebp
c00220be:	c3                   	ret    
c00220bf:	90                   	nop

c00220c0 <ISO9660::open(char const*, void**, FileOpenMode)>:
c00220c0:	57                   	push   edi
c00220c1:	56                   	push   esi
c00220c2:	53                   	push   ebx
c00220c3:	83 ec 10             	sub    esp,0x10
c00220c6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00220ca:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00220ce:	85 ff                	test   edi,edi
c00220d0:	0f 84 9d 00 00 00    	je     c0022173 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c00220d6:	85 f6                	test   esi,esi
c00220d8:	0f 84 95 00 00 00    	je     c0022173 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c00220de:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c00220e3:	74 17                	je     c00220fc <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c00220e5:	83 ec 0c             	sub    esp,0xc
c00220e8:	68 9b ca 02 c0       	push   0xc002ca9b
c00220ed:	e8 15 0e ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c00220f2:	83 c4 10             	add    esp,0x10
c00220f5:	b8 03 00 00 00       	mov    eax,0x3
c00220fa:	eb 7c                	jmp    c0022178 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00220fc:	83 ec 0c             	sub    esp,0xc
c00220ff:	6a 1c                	push   0x1c
c0022101:	e8 45 d7 fe ff       	call   c000f84b <malloc>
c0022106:	89 07                	mov    DWORD PTR [edi],eax
c0022108:	89 c3                	mov    ebx,eax
c002210a:	58                   	pop    eax
c002210b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002210f:	50                   	push   eax
c0022110:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022113:	50                   	push   eax
c0022114:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022118:	50                   	push   eax
c0022119:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002211d:	50                   	push   eax
c002211e:	56                   	push   esi
c002211f:	e8 0d ff ff ff       	call   c0022031 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022124:	83 c4 20             	add    esp,0x20
c0022127:	84 c0                	test   al,al
c0022129:	74 07                	je     c0022132 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c002212b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022130:	74 0b                	je     c002213d <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0022132:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022136:	b8 01 00 00 00       	mov    eax,0x1
c002213b:	eb 3b                	jmp    c0022178 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002213d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022141:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022145:	89 03                	mov    DWORD PTR [ebx],eax
c0022147:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002214e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022152:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022159:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022160:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022163:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002216a:	8a 06                	mov    al,BYTE PTR [esi]
c002216c:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002216f:	31 c0                	xor    eax,eax
c0022171:	eb 05                	jmp    c0022178 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022173:	b8 04 00 00 00       	mov    eax,0x4
c0022178:	83 c4 10             	add    esp,0x10
c002217b:	5b                   	pop    ebx
c002217c:	5e                   	pop    esi
c002217d:	5f                   	pop    edi
c002217e:	c3                   	ret    
c002217f:	90                   	nop

c0022180 <ISO9660::exists(char const*)>:
c0022180:	83 ec 28             	sub    esp,0x28
c0022183:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022187:	8d 54 24 18          	lea    edx,[esp+0x18]
c002218b:	52                   	push   edx
c002218c:	0f be 10             	movsx  edx,BYTE PTR [eax]
c002218f:	52                   	push   edx
c0022190:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022194:	52                   	push   edx
c0022195:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022199:	52                   	push   edx
c002219a:	50                   	push   eax
c002219b:	e8 91 fe ff ff       	call   c0022031 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00221a0:	83 c4 3c             	add    esp,0x3c
c00221a3:	c3                   	ret    

c00221a4 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00221a4:	56                   	push   esi
c00221a5:	53                   	push   ebx
c00221a6:	83 ec 14             	sub    esp,0x14
c00221a9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00221ad:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00221b1:	85 db                	test   ebx,ebx
c00221b3:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00221b7:	0f 94 c2             	sete   dl
c00221ba:	85 f6                	test   esi,esi
c00221bc:	0f 94 c0             	sete   al
c00221bf:	08 c2                	or     dl,al
c00221c1:	75 68                	jne    c002222b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00221c3:	85 c9                	test   ecx,ecx
c00221c5:	74 64                	je     c002222b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00221c7:	83 ec 0c             	sub    esp,0xc
c00221ca:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00221cd:	8d 44 24 18          	lea    eax,[esp+0x18]
c00221d1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00221d7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00221de:	50                   	push   eax
c00221df:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c00221e2:	50                   	push   eax
c00221e3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00221e7:	50                   	push   eax
c00221e8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00221ec:	50                   	push   eax
c00221ed:	51                   	push   ecx
c00221ee:	e8 3e fe ff ff       	call   c0022031 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00221f3:	83 c4 20             	add    esp,0x20
c00221f6:	ba 01 00 00 00       	mov    edx,0x1
c00221fb:	84 c0                	test   al,al
c00221fd:	74 31                	je     c0022230 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00221ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022203:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002220a:	89 03                	mov    DWORD PTR [ebx],eax
c002220c:	ba 00 00 00 00       	mov    edx,0x0
c0022211:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022215:	85 c0                	test   eax,eax
c0022217:	0f 95 06             	setne  BYTE PTR [esi]
c002221a:	74 14                	je     c0022230 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002221c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022222:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022229:	eb 05                	jmp    c0022230 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002222b:	ba 04 00 00 00       	mov    edx,0x4
c0022230:	83 c4 14             	add    esp,0x14
c0022233:	89 d0                	mov    eax,edx
c0022235:	5b                   	pop    ebx
c0022236:	5e                   	pop    esi
c0022237:	c3                   	ret    

c0022238 <ISO9660::openDir(char const*, void**)>:
c0022238:	57                   	push   edi
c0022239:	56                   	push   esi
c002223a:	53                   	push   ebx
c002223b:	83 ec 10             	sub    esp,0x10
c002223e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022242:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022246:	85 ff                	test   edi,edi
c0022248:	0f 84 95 00 00 00    	je     c00222e3 <ISO9660::openDir(char const*, void**)+0xab>
c002224e:	85 f6                	test   esi,esi
c0022250:	0f 84 8d 00 00 00    	je     c00222e3 <ISO9660::openDir(char const*, void**)+0xab>
c0022256:	83 ec 0c             	sub    esp,0xc
c0022259:	6a 1c                	push   0x1c
c002225b:	e8 eb d5 fe ff       	call   c000f84b <malloc>
c0022260:	89 07                	mov    DWORD PTR [edi],eax
c0022262:	89 c3                	mov    ebx,eax
c0022264:	59                   	pop    ecx
c0022265:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022269:	50                   	push   eax
c002226a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c002226d:	50                   	push   eax
c002226e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022272:	50                   	push   eax
c0022273:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022277:	50                   	push   eax
c0022278:	56                   	push   esi
c0022279:	e8 b3 fd ff ff       	call   c0022031 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002227e:	83 c4 20             	add    esp,0x20
c0022281:	84 c0                	test   al,al
c0022283:	74 07                	je     c002228c <ISO9660::openDir(char const*, void**)+0x54>
c0022285:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002228a:	75 21                	jne    c00222ad <ISO9660::openDir(char const*, void**)+0x75>
c002228c:	0f b6 c0             	movzx  eax,al
c002228f:	52                   	push   edx
c0022290:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022294:	50                   	push   eax
c0022295:	68 c1 ca 02 c0       	push   0xc002cac1
c002229a:	e8 68 0c ff ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c002229f:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00222a3:	83 c4 10             	add    esp,0x10
c00222a6:	b8 01 00 00 00       	mov    eax,0x1
c00222ab:	eb 3b                	jmp    c00222e8 <ISO9660::openDir(char const*, void**)+0xb0>
c00222ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222b1:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00222b5:	89 03                	mov    DWORD PTR [ebx],eax
c00222b7:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00222be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00222c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00222c9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00222d0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00222d3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00222da:	8a 06                	mov    al,BYTE PTR [esi]
c00222dc:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00222df:	31 c0                	xor    eax,eax
c00222e1:	eb 05                	jmp    c00222e8 <ISO9660::openDir(char const*, void**)+0xb0>
c00222e3:	b8 04 00 00 00       	mov    eax,0x4
c00222e8:	83 c4 10             	add    esp,0x10
c00222eb:	5b                   	pop    ebx
c00222ec:	5e                   	pop    esi
c00222ed:	5f                   	pop    edi
c00222ee:	c3                   	ret    
c00222ef:	90                   	nop

c00222f0 <ISO9660::ISO9660()>:
c00222f0:	83 ec 0c             	sub    esp,0xc
c00222f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222f7:	83 ec 0c             	sub    esp,0xc
c00222fa:	50                   	push   eax
c00222fb:	e8 12 0f ff ff       	call   c0013212 <Filesystem::Filesystem()>
c0022300:	83 c4 10             	add    esp,0x10
c0022303:	ba e4 ca 02 c0       	mov    edx,0xc002cae4
c0022308:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002230c:	89 10                	mov    DWORD PTR [eax],edx
c002230e:	90                   	nop
c002230f:	83 c4 0c             	add    esp,0xc
c0022312:	c3                   	ret    
c0022313:	90                   	nop

c0022314 <SoundChannel::~SoundChannel()>:
c0022314:	83 ec 0c             	sub    esp,0xc
c0022317:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002231b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002231e:	83 ec 0c             	sub    esp,0xc
c0022321:	50                   	push   eax
c0022322:	e8 34 d5 fe ff       	call   c000f85b <free>
c0022327:	83 c4 10             	add    esp,0x10
c002232a:	90                   	nop
c002232b:	83 c4 0c             	add    esp,0xc
c002232e:	c3                   	ret    
c002232f:	90                   	nop

c0022330 <SoundChannel::setSpeed(float)>:
c0022330:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022334:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022338:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002233b:	c3                   	ret    

c002233c <SoundChannel::getSpeed()>:
c002233c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022340:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0022343:	c3                   	ret    

c0022344 <SoundChannel::setVolume(int)>:
c0022344:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022348:	83 f8 64             	cmp    eax,0x64
c002234b:	7e 05                	jle    c0022352 <SoundChannel::setVolume(int)+0xe>
c002234d:	b8 64 00 00 00       	mov    eax,0x64
c0022352:	85 c0                	test   eax,eax
c0022354:	79 02                	jns    c0022358 <SoundChannel::setVolume(int)+0x14>
c0022356:	31 c0                	xor    eax,eax
c0022358:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002235c:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c002235f:	c3                   	ret    

c0022360 <SoundChannel::getVolume()>:
c0022360:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022364:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0022367:	c3                   	ret    

c0022368 <SoundChannel::pause()>:
c0022368:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002236c:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0022370:	c3                   	ret    
c0022371:	90                   	nop

c0022372 <SoundChannel::SoundChannel(int, int, int, int)>:
c0022372:	83 ec 1c             	sub    esp,0x1c
c0022375:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022379:	e8 ea ff ff ff       	call   c0022368 <SoundChannel::pause()>
c002237e:	83 c4 04             	add    esp,0x4
c0022381:	6a 50                	push   0x50
c0022383:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022387:	e8 b8 ff ff ff       	call   c0022344 <SoundChannel::setVolume(int)>
c002238c:	83 c4 08             	add    esp,0x8
c002238f:	a1 60 cb 02 c0       	mov    eax,ds:0xc002cb60
c0022394:	50                   	push   eax
c0022395:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022399:	e8 92 ff ff ff       	call   c0022330 <SoundChannel::setSpeed(float)>
c002239e:	83 c4 08             	add    esp,0x8
c00223a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223a5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00223a9:	89 10                	mov    DWORD PTR [eax],edx
c00223ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223af:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00223b3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00223b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223ba:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00223be:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00223c1:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c00223c6:	75 23                	jne    c00223eb <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c00223c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223cc:	8b 10                	mov    edx,DWORD PTR [eax]
c00223ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00223d5:	0f af c2             	imul   eax,edx
c00223d8:	85 c0                	test   eax,eax
c00223da:	79 03                	jns    c00223df <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c00223dc:	83 c0 03             	add    eax,0x3
c00223df:	c1 f8 02             	sar    eax,0x2
c00223e2:	05 a0 0f 00 00       	add    eax,0xfa0
c00223e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00223eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223ef:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00223f3:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00223f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223fa:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0022401:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022405:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c002240c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022410:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022413:	c1 e0 02             	shl    eax,0x2
c0022416:	83 ec 0c             	sub    esp,0xc
c0022419:	50                   	push   eax
c002241a:	e8 2c d4 fe ff       	call   c000f84b <malloc>
c002241f:	83 c4 10             	add    esp,0x10
c0022422:	89 c2                	mov    edx,eax
c0022424:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022428:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c002242b:	83 ec 04             	sub    esp,0x4
c002242e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022432:	50                   	push   eax
c0022433:	6a 01                	push   0x1
c0022435:	6a 04                	push   0x4
c0022437:	e8 6b 67 fe ff       	call   c0008ba7 <src_new>
c002243c:	83 c4 10             	add    esp,0x10
c002243f:	89 c2                	mov    edx,eax
c0022441:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022445:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0022448:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002244c:	85 c0                	test   eax,eax
c002244e:	74 10                	je     c0022460 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0022450:	83 ec 0c             	sub    esp,0xc
c0022453:	68 44 cb 02 c0       	push   0xc002cb44
c0022458:	e8 e8 81 ff ff       	call   c001a645 <Krnl::panic(char const*)>
c002245d:	83 c4 10             	add    esp,0x10
c0022460:	a0 20 29 03 c0       	mov    al,ds:0xc0032920
c0022465:	83 f0 01             	xor    eax,0x1
c0022468:	84 c0                	test   al,al
c002246a:	74 57                	je     c00224c3 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c002246c:	a1 64 cb 02 c0       	mov    eax,ds:0xc002cb64
c0022471:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022475:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002247d:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0022485:	7f 35                	jg     c00224bc <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0022487:	83 ec 0c             	sub    esp,0xc
c002248a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002248e:	e8 9c 4f 00 00       	call   c002742f <__floatsisf>
c0022493:	83 c4 10             	add    esp,0x10
c0022496:	8b 15 64 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb64
c002249c:	83 ec 08             	sub    esp,0x8
c002249f:	52                   	push   edx
c00224a0:	50                   	push   eax
c00224a1:	e8 9b 4b 00 00       	call   c0027041 <__mulsf3>
c00224a6:	83 c4 10             	add    esp,0x10
c00224a9:	89 c2                	mov    edx,eax
c00224ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00224af:	89 14 85 20 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdae0],edx
c00224b6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00224ba:	eb c1                	jmp    c002247d <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c00224bc:	c6 05 20 29 03 c0 01 	mov    BYTE PTR ds:0xc0032920,0x1
c00224c3:	90                   	nop
c00224c4:	83 c4 1c             	add    esp,0x1c
c00224c7:	c3                   	ret    

c00224c8 <SoundChannel::play()>:
c00224c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00224cc:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c00224d0:	c3                   	ret    
c00224d1:	90                   	nop

c00224d2 <SoundChannel::paused()>:
c00224d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00224d6:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c00224d9:	c3                   	ret    

c00224da <SoundChannel::getSampleRate()>:
c00224da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00224de:	8b 00                	mov    eax,DWORD PTR [eax]
c00224e0:	c3                   	ret    
c00224e1:	90                   	nop

c00224e2 <SoundChannel::getBits()>:
c00224e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00224e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00224e9:	c3                   	ret    

c00224ea <SoundChannel::getBufferUsed()>:
c00224ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00224ee:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00224f1:	c3                   	ret    

c00224f2 <SoundChannel::getBufferSize()>:
c00224f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00224f6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00224f9:	c3                   	ret    

c00224fa <SoundChannel::unbuffer(float*, int, int)>:
c00224fa:	56                   	push   esi
c00224fb:	53                   	push   ebx
c00224fc:	83 ec 40             	sub    esp,0x40
c00224ff:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022503:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0022506:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002250a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c002250d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022511:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022515:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022519:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002251d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022521:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022525:	e8 05 4f 00 00       	call   c002742f <__floatsisf>
c002252a:	5a                   	pop    edx
c002252b:	89 c6                	mov    esi,eax
c002252d:	ff 33                	push   DWORD PTR [ebx]
c002252f:	e8 fb 4e 00 00       	call   c002742f <__floatsisf>
c0022534:	59                   	pop    ecx
c0022535:	5a                   	pop    edx
c0022536:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0022539:	50                   	push   eax
c002253a:	e8 02 4b 00 00       	call   c0027041 <__mulsf3>
c002253f:	59                   	pop    ecx
c0022540:	5a                   	pop    edx
c0022541:	50                   	push   eax
c0022542:	56                   	push   esi
c0022543:	e8 bc 4c 00 00       	call   c0027204 <__divsf3>
c0022548:	89 04 24             	mov    DWORD PTR [esp],eax
c002254b:	e8 af 61 00 00       	call   c00286ff <__extendsfdf2>
c0022550:	59                   	pop    ecx
c0022551:	5e                   	pop    esi
c0022552:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022556:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c002255a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0022562:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022566:	50                   	push   eax
c0022567:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c002256a:	e8 2d 62 fe ff       	call   c000879c <src_process>
c002256f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022573:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0022576:	83 c4 0c             	add    esp,0xc
c0022579:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c002257c:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c002257f:	29 d0                	sub    eax,edx
c0022581:	c1 e0 02             	shl    eax,0x2
c0022584:	50                   	push   eax
c0022585:	8d 04 91             	lea    eax,[ecx+edx*4]
c0022588:	50                   	push   eax
c0022589:	51                   	push   ecx
c002258a:	e8 f5 e0 fd ff       	call   c0000684 <memmove>
c002258f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022593:	83 c4 44             	add    esp,0x44
c0022596:	5b                   	pop    ebx
c0022597:	5e                   	pop    esi
c0022598:	c3                   	ret    
c0022599:	90                   	nop

c002259a <SoundChannel::buffer8(unsigned char*, int)>:
c002259a:	55                   	push   ebp
c002259b:	57                   	push   edi
c002259c:	56                   	push   esi
c002259d:	53                   	push   ebx
c002259e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00225a2:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00225a6:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00225a9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00225ad:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00225b0:	74 7a                	je     c002262c <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00225b2:	85 ff                	test   edi,edi
c00225b4:	7e 76                	jle    c002262c <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00225b6:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c00225ba:	8d 70 01             	lea    esi,[eax+0x1]
c00225bd:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00225c0:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00225c3:	8b 1c 9d 20 25 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdae0]
c00225ca:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00225cd:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00225d0:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00225d3:	74 5e                	je     c0022633 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c00225d5:	83 ff 01             	cmp    edi,0x1
c00225d8:	74 4b                	je     c0022625 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c00225da:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00225de:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00225e1:	8d 70 01             	lea    esi,[eax+0x1]
c00225e4:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00225e7:	8b 1c 9d 20 25 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdae0]
c00225ee:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00225f1:	b8 02 00 00 00       	mov    eax,0x2
c00225f6:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00225f9:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00225fc:	75 23                	jne    c0022621 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c00225fe:	eb 27                	jmp    c0022627 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022600:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022605:	8d 71 01             	lea    esi,[ecx+0x1]
c0022608:	40                   	inc    eax
c0022609:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002260c:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c002260f:	8b 1c 9d 20 25 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdae0]
c0022616:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022619:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002261c:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002261f:	74 06                	je     c0022627 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022621:	39 c7                	cmp    edi,eax
c0022623:	75 db                	jne    c0022600 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022625:	89 f8                	mov    eax,edi
c0022627:	5b                   	pop    ebx
c0022628:	5e                   	pop    esi
c0022629:	5f                   	pop    edi
c002262a:	5d                   	pop    ebp
c002262b:	c3                   	ret    
c002262c:	5b                   	pop    ebx
c002262d:	31 c0                	xor    eax,eax
c002262f:	5e                   	pop    esi
c0022630:	5f                   	pop    edi
c0022631:	5d                   	pop    ebp
c0022632:	c3                   	ret    
c0022633:	b8 01 00 00 00       	mov    eax,0x1
c0022638:	eb ed                	jmp    c0022627 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c002263a <SoundDevice::SoundDevice(char const*)>:
c002263a:	83 ec 1c             	sub    esp,0x1c
c002263d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022641:	83 ec 08             	sub    esp,0x8
c0022644:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022648:	50                   	push   eax
c0022649:	e8 d6 1e ff ff       	call   c0014524 <Device::Device(char const*)>
c002264e:	83 c4 10             	add    esp,0x10
c0022651:	ba 70 cb 02 c0       	mov    edx,0xc002cb70
c0022656:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002265a:	89 10                	mov    DWORD PTR [eax],edx
c002265c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022660:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c002266a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002266e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0022678:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022680:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022685:	7f 19                	jg     c00226a0 <SoundDevice::SoundDevice(char const*)+0x66>
c0022687:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002268b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002268f:	83 c2 54             	add    edx,0x54
c0022692:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c002269a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002269e:	eb e0                	jmp    c0022680 <SoundDevice::SoundDevice(char const*)+0x46>
c00226a0:	90                   	nop
c00226a1:	83 c4 1c             	add    esp,0x1c
c00226a4:	c3                   	ret    
c00226a5:	90                   	nop

c00226a6 <SoundDevice::~SoundDevice()>:
c00226a6:	53                   	push   ebx
c00226a7:	83 ec 18             	sub    esp,0x18
c00226aa:	ba 70 cb 02 c0       	mov    edx,0xc002cb70
c00226af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00226b3:	89 10                	mov    DWORD PTR [eax],edx
c00226b5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00226bd:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00226c2:	7f 46                	jg     c002270a <SoundDevice::~SoundDevice()+0x64>
c00226c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00226c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00226cc:	83 c2 54             	add    edx,0x54
c00226cf:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c00226d3:	85 c0                	test   eax,eax
c00226d5:	74 2d                	je     c0022704 <SoundDevice::~SoundDevice()+0x5e>
c00226d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00226db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00226df:	83 c2 54             	add    edx,0x54
c00226e2:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c00226e6:	85 db                	test   ebx,ebx
c00226e8:	74 1a                	je     c0022704 <SoundDevice::~SoundDevice()+0x5e>
c00226ea:	83 ec 0c             	sub    esp,0xc
c00226ed:	53                   	push   ebx
c00226ee:	e8 21 fc ff ff       	call   c0022314 <SoundChannel::~SoundChannel()>
c00226f3:	83 c4 10             	add    esp,0x10
c00226f6:	83 ec 08             	sub    esp,0x8
c00226f9:	6a 2c                	push   0x2c
c00226fb:	53                   	push   ebx
c00226fc:	e8 26 07 ff ff       	call   c0012e27 <operator delete(void*, unsigned long)>
c0022701:	83 c4 10             	add    esp,0x10
c0022704:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022708:	eb b3                	jmp    c00226bd <SoundDevice::~SoundDevice()+0x17>
c002270a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002270e:	83 ec 0c             	sub    esp,0xc
c0022711:	50                   	push   eax
c0022712:	e8 ef 1a ff ff       	call   c0014206 <Device::~Device()>
c0022717:	83 c4 10             	add    esp,0x10
c002271a:	90                   	nop
c002271b:	83 c4 18             	add    esp,0x18
c002271e:	5b                   	pop    ebx
c002271f:	c3                   	ret    

c0022720 <SoundDevice::~SoundDevice()>:
c0022720:	83 ec 0c             	sub    esp,0xc
c0022723:	83 ec 0c             	sub    esp,0xc
c0022726:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002272a:	e8 77 ff ff ff       	call   c00226a6 <SoundDevice::~SoundDevice()>
c002272f:	83 c4 10             	add    esp,0x10
c0022732:	83 ec 08             	sub    esp,0x8
c0022735:	68 e4 01 00 00       	push   0x1e4
c002273a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002273e:	e8 e4 06 ff ff       	call   c0012e27 <operator delete(void*, unsigned long)>
c0022743:	83 c4 10             	add    esp,0x10
c0022746:	83 c4 0c             	add    esp,0xc
c0022749:	c3                   	ret    

c002274a <SoundDevice::getFreeChannelNum()>:
c002274a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002274e:	31 c0                	xor    eax,eax
c0022750:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022758:	74 09                	je     c0022763 <SoundDevice::getFreeChannelNum()+0x19>
c002275a:	40                   	inc    eax
c002275b:	83 f8 20             	cmp    eax,0x20
c002275e:	75 f0                	jne    c0022750 <SoundDevice::getFreeChannelNum()+0x6>
c0022760:	83 c8 ff             	or     eax,0xffffffff
c0022763:	c3                   	ret    

c0022764 <SoundDevice::addChannel(SoundChannel*)>:
c0022764:	56                   	push   esi
c0022765:	53                   	push   ebx
c0022766:	51                   	push   ecx
c0022767:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002276b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002276f:	53                   	push   ebx
c0022770:	e8 d5 ff ff ff       	call   c002274a <SoundDevice::getFreeChannelNum()>
c0022775:	5a                   	pop    edx
c0022776:	83 f8 ff             	cmp    eax,0xffffffff
c0022779:	74 51                	je     c00227cc <SoundDevice::addChannel(SoundChannel*)+0x68>
c002277b:	85 f6                	test   esi,esi
c002277d:	74 4d                	je     c00227cc <SoundDevice::addChannel(SoundChannel*)+0x68>
c002277f:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022786:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c002278d:	75 30                	jne    c00227bf <SoundDevice::addChannel(SoundChannel*)+0x5b>
c002278f:	83 ec 0c             	sub    esp,0xc
c0022792:	56                   	push   esi
c0022793:	e8 42 fd ff ff       	call   c00224da <SoundChannel::getSampleRate()>
c0022798:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c002279e:	89 34 24             	mov    DWORD PTR [esp],esi
c00227a1:	e8 3c fd ff ff       	call   c00224e2 <SoundChannel::getBits()>
c00227a6:	83 c4 0c             	add    esp,0xc
c00227a9:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00227af:	8b 13                	mov    edx,DWORD PTR [ebx]
c00227b1:	50                   	push   eax
c00227b2:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00227b8:	53                   	push   ebx
c00227b9:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00227bc:	83 c4 10             	add    esp,0x10
c00227bf:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c00227c5:	b8 01 00 00 00       	mov    eax,0x1
c00227ca:	eb 03                	jmp    c00227cf <SoundDevice::addChannel(SoundChannel*)+0x6b>
c00227cc:	83 c8 ff             	or     eax,0xffffffff
c00227cf:	5a                   	pop    edx
c00227d0:	5b                   	pop    ebx
c00227d1:	5e                   	pop    esi
c00227d2:	c3                   	ret    
c00227d3:	90                   	nop

c00227d4 <SoundDevice::removeChannel(int)>:
c00227d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00227d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00227dc:	83 fa 1f             	cmp    edx,0x1f
c00227df:	77 23                	ja     c0022804 <SoundDevice::removeChannel(int)+0x30>
c00227e1:	8d 14 90             	lea    edx,[eax+edx*4]
c00227e4:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c00227eb:	74 17                	je     c0022804 <SoundDevice::removeChannel(int)+0x30>
c00227ed:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c00227f7:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c00227fd:	75 05                	jne    c0022804 <SoundDevice::removeChannel(int)+0x30>
c00227ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0022801:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0022804:	c3                   	ret    
c0022805:	90                   	nop

c0022806 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022806:	57                   	push   edi
c0022807:	56                   	push   esi
c0022808:	53                   	push   ebx
c0022809:	31 db                	xor    ebx,ebx
c002280b:	83 ec 10             	sub    esp,0x10
c002280e:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022812:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022816:	0f 8d cb 00 00 00    	jge    c00228e7 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c002281c:	83 ec 0c             	sub    esp,0xc
c002281f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022823:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022826:	e8 d4 5e 00 00       	call   c00286ff <__extendsfdf2>
c002282b:	83 c4 10             	add    esp,0x10
c002282e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022832:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022836:	68 00 00 f0 3f       	push   0x3ff00000
c002283b:	6a 00                	push   0x0
c002283d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022841:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022845:	e8 41 4e 00 00       	call   c002768b <__adddf3>
c002284a:	83 c4 10             	add    esp,0x10
c002284d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022851:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022855:	68 00 00 e0 3f       	push   0x3fe00000
c002285a:	6a 00                	push   0x0
c002285c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022860:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022864:	e8 9f 54 00 00       	call   c0027d08 <__muldf3>
c0022869:	83 c4 10             	add    esp,0x10
c002286c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022870:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022874:	68 00 00 60 40       	push   0x40600000
c0022879:	6a 00                	push   0x0
c002287b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002287f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022883:	e8 80 54 00 00       	call   c0027d08 <__muldf3>
c0022888:	59                   	pop    ecx
c0022889:	5f                   	pop    edi
c002288a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002288e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022892:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022896:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002289a:	e8 3c 5d 00 00       	call   c00285db <__truncdfsf2>
c002289f:	5a                   	pop    edx
c00228a0:	89 c7                	mov    edi,eax
c00228a2:	59                   	pop    ecx
c00228a3:	68 00 00 fe 42       	push   0x42fe0000
c00228a8:	50                   	push   eax
c00228a9:	e8 d7 4d 00 00       	call   c0027685 <__gesf2>
c00228ae:	83 c4 10             	add    esp,0x10
c00228b1:	85 c0                	test   eax,eax
c00228b3:	78 06                	js     c00228bb <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c00228b5:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c00228b9:	eb 26                	jmp    c00228e1 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00228bb:	50                   	push   eax
c00228bc:	50                   	push   eax
c00228bd:	6a 00                	push   0x0
c00228bf:	57                   	push   edi
c00228c0:	e8 c4 4d 00 00       	call   c0027689 <__lesf2>
c00228c5:	83 c4 10             	add    esp,0x10
c00228c8:	85 c0                	test   eax,eax
c00228ca:	7f 06                	jg     c00228d2 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c00228cc:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c00228d0:	eb 0f                	jmp    c00228e1 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00228d2:	83 ec 0c             	sub    esp,0xc
c00228d5:	57                   	push   edi
c00228d6:	e8 c1 5e 00 00       	call   c002879c <lrintf>
c00228db:	83 c4 10             	add    esp,0x10
c00228de:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00228e1:	43                   	inc    ebx
c00228e2:	e9 2b ff ff ff       	jmp    c0022812 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c00228e7:	83 c4 10             	add    esp,0x10
c00228ea:	5b                   	pop    ebx
c00228eb:	5e                   	pop    esi
c00228ec:	5f                   	pop    edi
c00228ed:	c3                   	ret    

c00228ee <SoundDevice::getAudio(int, float*, float*)>:
c00228ee:	55                   	push   ebp
c00228ef:	57                   	push   edi
c00228f0:	56                   	push   esi
c00228f1:	53                   	push   ebx
c00228f2:	31 db                	xor    ebx,ebx
c00228f4:	83 ec 20             	sub    esp,0x20
c00228f7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00228fb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00228ff:	c1 e0 02             	shl    eax,0x2
c0022902:	50                   	push   eax
c0022903:	6a 00                	push   0x0
c0022905:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022909:	e8 72 de fd ff       	call   c0000780 <memset>
c002290e:	83 c4 10             	add    esp,0x10
c0022911:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0022915:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c002291c:	85 c0                	test   eax,eax
c002291e:	0f 84 d7 00 00 00    	je     c00229fb <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022924:	83 ec 0c             	sub    esp,0xc
c0022927:	50                   	push   eax
c0022928:	e8 a5 fb ff ff       	call   c00224d2 <SoundChannel::paused()>
c002292d:	83 c4 10             	add    esp,0x10
c0022930:	84 c0                	test   al,al
c0022932:	0f 85 c3 00 00 00    	jne    c00229fb <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022938:	83 ec 0c             	sub    esp,0xc
c002293b:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022942:	e8 19 fa ff ff       	call   c0022360 <SoundChannel::getVolume()>
c0022947:	83 c4 10             	add    esp,0x10
c002294a:	85 c0                	test   eax,eax
c002294c:	0f 84 a9 00 00 00    	je     c00229fb <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022952:	83 ec 0c             	sub    esp,0xc
c0022955:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002295c:	e8 ff f9 ff ff       	call   c0022360 <SoundChannel::getVolume()>
c0022961:	83 ec 0c             	sub    esp,0xc
c0022964:	50                   	push   eax
c0022965:	e8 c5 4a 00 00       	call   c002742f <__floatsisf>
c002296a:	59                   	pop    ecx
c002296b:	5d                   	pop    ebp
c002296c:	31 ed                	xor    ebp,ebp
c002296e:	68 00 00 c8 42       	push   0x42c80000
c0022973:	50                   	push   eax
c0022974:	e8 8b 48 00 00       	call   c0027204 <__divsf3>
c0022979:	83 c4 10             	add    esp,0x10
c002297c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022980:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0022984:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c002298a:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c002298e:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022995:	e8 60 fb ff ff       	call   c00224fa <SoundChannel::unbuffer(float*, int, int)>
c002299a:	83 c4 20             	add    esp,0x20
c002299d:	89 c1                	mov    ecx,eax
c002299f:	39 cd                	cmp    ebp,ecx
c00229a1:	7d 52                	jge    c00229f5 <SoundDevice::getAudio(int, float*, float*)+0x107>
c00229a3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00229a7:	50                   	push   eax
c00229a8:	50                   	push   eax
c00229a9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00229ad:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00229b0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00229b4:	e8 88 46 00 00       	call   c0027041 <__mulsf3>
c00229b9:	5a                   	pop    edx
c00229ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00229be:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c00229c4:	e8 66 4a 00 00       	call   c002742f <__floatsisf>
c00229c9:	59                   	pop    ecx
c00229ca:	5a                   	pop    edx
c00229cb:	50                   	push   eax
c00229cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229d0:	e8 2f 48 00 00       	call   c0027204 <__divsf3>
c00229d5:	59                   	pop    ecx
c00229d6:	5a                   	pop    edx
c00229d7:	50                   	push   eax
c00229d8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00229dc:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00229df:	e8 3a 43 00 00       	call   c0026d1e <__addsf3>
c00229e4:	83 c4 10             	add    esp,0x10
c00229e7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00229eb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00229ef:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c00229f2:	45                   	inc    ebp
c00229f3:	eb aa                	jmp    c002299f <SoundDevice::getAudio(int, float*, float*)+0xb1>
c00229f5:	39 cf                	cmp    edi,ecx
c00229f7:	7e 02                	jle    c00229fb <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00229f9:	89 cf                	mov    edi,ecx
c00229fb:	43                   	inc    ebx
c00229fc:	83 fb 20             	cmp    ebx,0x20
c00229ff:	0f 85 10 ff ff ff    	jne    c0022915 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0022a05:	83 c4 1c             	add    esp,0x1c
c0022a08:	89 f8                	mov    eax,edi
c0022a0a:	5b                   	pop    ebx
c0022a0b:	5e                   	pop    esi
c0022a0c:	5f                   	pop    edi
c0022a0d:	5d                   	pop    ebp
c0022a0e:	c3                   	ret    
c0022a0f:	90                   	nop

c0022a10 <PCI::open(int, int, void*)>:
c0022a10:	83 ec 18             	sub    esp,0x18
c0022a13:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022a17:	8b 10                	mov    edx,DWORD PTR [eax]
c0022a19:	50                   	push   eax
c0022a1a:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0022a1d:	31 c0                	xor    eax,eax
c0022a1f:	83 c4 1c             	add    esp,0x1c
c0022a22:	c3                   	ret    
c0022a23:	90                   	nop

c0022a24 <PCI::close(int, int, void*)>:
c0022a24:	31 c0                	xor    eax,eax
c0022a26:	c3                   	ret    
c0022a27:	90                   	nop

c0022a28 <PCI::PCI()>:
c0022a28:	83 ec 0c             	sub    esp,0xc
c0022a2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a2f:	83 ec 08             	sub    esp,0x8
c0022a32:	68 a0 cb 02 c0       	push   0xc002cba0
c0022a37:	50                   	push   eax
c0022a38:	e8 6b 11 ff ff       	call   c0013ba8 <Bus::Bus(char const*)>
c0022a3d:	83 c4 10             	add    esp,0x10
c0022a40:	ba 0c cc 02 c0       	mov    edx,0xc002cc0c
c0022a45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a49:	89 10                	mov    DWORD PTR [eax],edx
c0022a4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a4f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022a55:	0f b6 d0             	movzx  edx,al
c0022a58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a5c:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0022a63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a67:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022a6d:	0f b6 d0             	movzx  edx,al
c0022a70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a74:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0022a79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a7d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022a83:	8d 50 01             	lea    edx,[eax+0x1]
c0022a86:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022a8a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022a90:	0f b6 d0             	movzx  edx,al
c0022a93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a97:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022a9b:	83 c9 c0             	or     ecx,0xffffffc0
c0022a9e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022aa2:	90                   	nop
c0022aa3:	83 c4 0c             	add    esp,0xc
c0022aa6:	c3                   	ret    
c0022aa7:	90                   	nop

c0022aa8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022aa8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0022aac:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022ab1:	89 ca                	mov    edx,ecx
c0022ab3:	c1 e0 10             	shl    eax,0x10
c0022ab6:	81 e2 fc 00 00 00    	and    edx,0xfc
c0022abc:	09 d0                	or     eax,edx
c0022abe:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0022ac3:	c1 e2 08             	shl    edx,0x8
c0022ac6:	09 d0                	or     eax,edx
c0022ac8:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0022acd:	c1 e2 0b             	shl    edx,0xb
c0022ad0:	09 d0                	or     eax,edx
c0022ad2:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022ad7:	0d 00 00 00 80       	or     eax,0x80000000
c0022adc:	ef                   	out    dx,eax
c0022add:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022ae2:	ed                   	in     eax,dx
c0022ae3:	83 e1 02             	and    ecx,0x2
c0022ae6:	0f b6 c9             	movzx  ecx,cl
c0022ae9:	c1 e1 03             	shl    ecx,0x3
c0022aec:	d3 e8                	shr    eax,cl
c0022aee:	c3                   	ret    
c0022aef:	90                   	nop

c0022af0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022af0:	6a 00                	push   0x0
c0022af2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022af7:	50                   	push   eax
c0022af8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022afd:	50                   	push   eax
c0022afe:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b03:	50                   	push   eax
c0022b04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b08:	e8 9b ff ff ff       	call   c0022aa8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b0d:	83 c4 14             	add    esp,0x14
c0022b10:	c3                   	ret    
c0022b11:	90                   	nop

c0022b12 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022b12:	6a 0e                	push   0xe
c0022b14:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b19:	50                   	push   eax
c0022b1a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b1f:	50                   	push   eax
c0022b20:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b25:	50                   	push   eax
c0022b26:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b2a:	e8 79 ff ff ff       	call   c0022aa8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b2f:	83 c4 14             	add    esp,0x14
c0022b32:	0f b6 c0             	movzx  eax,al
c0022b35:	c3                   	ret    

c0022b36 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022b36:	55                   	push   ebp
c0022b37:	57                   	push   edi
c0022b38:	56                   	push   esi
c0022b39:	53                   	push   ebx
c0022b3a:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0022b3f:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0022b44:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0022b49:	6a 0a                	push   0xa
c0022b4b:	56                   	push   esi
c0022b4c:	55                   	push   ebp
c0022b4d:	57                   	push   edi
c0022b4e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022b52:	e8 51 ff ff ff       	call   c0022aa8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b57:	6a 0a                	push   0xa
c0022b59:	89 c3                	mov    ebx,eax
c0022b5b:	56                   	push   esi
c0022b5c:	0f b6 db             	movzx  ebx,bl
c0022b5f:	55                   	push   ebp
c0022b60:	57                   	push   edi
c0022b61:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022b65:	e8 3e ff ff ff       	call   c0022aa8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b6a:	83 c4 28             	add    esp,0x28
c0022b6d:	25 00 ff 00 00       	and    eax,0xff00
c0022b72:	09 d8                	or     eax,ebx
c0022b74:	5b                   	pop    ebx
c0022b75:	5e                   	pop    esi
c0022b76:	5f                   	pop    edi
c0022b77:	5d                   	pop    ebp
c0022b78:	c3                   	ret    
c0022b79:	90                   	nop

c0022b7a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022b7a:	6a 08                	push   0x8
c0022b7c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b81:	50                   	push   eax
c0022b82:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b87:	50                   	push   eax
c0022b88:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b8d:	50                   	push   eax
c0022b8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b92:	e8 11 ff ff ff       	call   c0022aa8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b97:	83 c4 14             	add    esp,0x14
c0022b9a:	0f b6 c4             	movzx  eax,ah
c0022b9d:	c3                   	ret    

c0022b9e <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022b9e:	6a 08                	push   0x8
c0022ba0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ba5:	50                   	push   eax
c0022ba6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022bab:	50                   	push   eax
c0022bac:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022bb1:	50                   	push   eax
c0022bb2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022bb6:	e8 ed fe ff ff       	call   c0022aa8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022bbb:	83 c4 14             	add    esp,0x14
c0022bbe:	c3                   	ret    
c0022bbf:	90                   	nop

c0022bc0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022bc0:	6a 3c                	push   0x3c
c0022bc2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022bc7:	50                   	push   eax
c0022bc8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022bcd:	50                   	push   eax
c0022bce:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022bd3:	50                   	push   eax
c0022bd4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022bd8:	e8 cb fe ff ff       	call   c0022aa8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022bdd:	83 c4 14             	add    esp,0x14
c0022be0:	c3                   	ret    
c0022be1:	90                   	nop

c0022be2 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022be2:	6a 18                	push   0x18
c0022be4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022be9:	50                   	push   eax
c0022bea:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022bef:	50                   	push   eax
c0022bf0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022bf5:	50                   	push   eax
c0022bf6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022bfa:	e8 a9 fe ff ff       	call   c0022aa8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022bff:	83 c4 14             	add    esp,0x14
c0022c02:	0f b6 c4             	movzx  eax,ah
c0022c05:	c3                   	ret    

c0022c06 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022c06:	55                   	push   ebp
c0022c07:	57                   	push   edi
c0022c08:	56                   	push   esi
c0022c09:	53                   	push   ebx
c0022c0a:	50                   	push   eax
c0022c0b:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0022c0f:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0022c14:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022c19:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0022c1e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022c25:	8d 43 12             	lea    eax,[ebx+0x12]
c0022c28:	83 c3 10             	add    ebx,0x10
c0022c2b:	0f b6 c0             	movzx  eax,al
c0022c2e:	0f b6 db             	movzx  ebx,bl
c0022c31:	50                   	push   eax
c0022c32:	51                   	push   ecx
c0022c33:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022c37:	57                   	push   edi
c0022c38:	55                   	push   ebp
c0022c39:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0022c3d:	e8 66 fe ff ff       	call   c0022aa8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c42:	53                   	push   ebx
c0022c43:	89 c6                	mov    esi,eax
c0022c45:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022c49:	c1 e6 10             	shl    esi,0x10
c0022c4c:	51                   	push   ecx
c0022c4d:	57                   	push   edi
c0022c4e:	55                   	push   ebp
c0022c4f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022c53:	e8 50 fe ff ff       	call   c0022aa8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c58:	83 c4 2c             	add    esp,0x2c
c0022c5b:	0f b7 c0             	movzx  eax,ax
c0022c5e:	5b                   	pop    ebx
c0022c5f:	09 f0                	or     eax,esi
c0022c61:	5e                   	pop    esi
c0022c62:	5f                   	pop    edi
c0022c63:	5d                   	pop    ebp
c0022c64:	c3                   	ret    
c0022c65:	90                   	nop

c0022c66 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022c66:	53                   	push   ebx
c0022c67:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022c6c:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0022c71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022c75:	c1 e1 10             	shl    ecx,0x10
c0022c78:	25 fc 00 00 00       	and    eax,0xfc
c0022c7d:	09 c1                	or     ecx,eax
c0022c7f:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022c84:	c1 e0 08             	shl    eax,0x8
c0022c87:	09 c1                	or     ecx,eax
c0022c89:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022c8e:	c1 e0 0b             	shl    eax,0xb
c0022c91:	09 c1                	or     ecx,eax
c0022c93:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022c99:	89 c8                	mov    eax,ecx
c0022c9b:	ef                   	out    dx,eax
c0022c9c:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022ca1:	ed                   	in     eax,dx
c0022ca2:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022ca7:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022cac:	74 0a                	je     c0022cb8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022cae:	0f b7 d8             	movzx  ebx,ax
c0022cb1:	89 d0                	mov    eax,edx
c0022cb3:	c1 e0 10             	shl    eax,0x10
c0022cb6:	eb 05                	jmp    c0022cbd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022cb8:	66 31 c0             	xor    ax,ax
c0022cbb:	89 d3                	mov    ebx,edx
c0022cbd:	09 c3                	or     ebx,eax
c0022cbf:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022cc4:	89 c8                	mov    eax,ecx
c0022cc6:	ef                   	out    dx,eax
c0022cc7:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022ccc:	89 d8                	mov    eax,ebx
c0022cce:	ef                   	out    dx,eax
c0022ccf:	5b                   	pop    ebx
c0022cd0:	c3                   	ret    
c0022cd1:	90                   	nop

c0022cd2 <PCI::checkBus(unsigned char)>:
c0022cd2:	56                   	push   esi
c0022cd3:	53                   	push   ebx
c0022cd4:	31 db                	xor    ebx,ebx
c0022cd6:	51                   	push   ecx
c0022cd7:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022cdc:	52                   	push   edx
c0022cdd:	53                   	push   ebx
c0022cde:	43                   	inc    ebx
c0022cdf:	56                   	push   esi
c0022ce0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022ce4:	e8 2b 03 00 00       	call   c0023014 <PCI::checkDevice(unsigned char, unsigned char)>
c0022ce9:	83 c4 10             	add    esp,0x10
c0022cec:	83 fb 20             	cmp    ebx,0x20
c0022cef:	75 eb                	jne    c0022cdc <PCI::checkBus(unsigned char)+0xa>
c0022cf1:	58                   	pop    eax
c0022cf2:	5b                   	pop    ebx
c0022cf3:	5e                   	pop    esi
c0022cf4:	c3                   	ret    
c0022cf5:	90                   	nop

c0022cf6 <PCI::foundDevice(PCIDeviceInfo)>:
c0022cf6:	55                   	push   ebp
c0022cf7:	57                   	push   edi
c0022cf8:	56                   	push   esi
c0022cf9:	53                   	push   ebx
c0022cfa:	83 ec 1c             	sub    esp,0x1c
c0022cfd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022d01:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022d07:	0f 84 52 01 00 00    	je     c0022e5f <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022d0d:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022d11:	66 81 f9 06 04       	cmp    cx,0x406
c0022d16:	75 2c                	jne    c0022d44 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022d18:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022d1d:	50                   	push   eax
c0022d1e:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022d23:	50                   	push   eax
c0022d24:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022d29:	50                   	push   eax
c0022d2a:	56                   	push   esi
c0022d2b:	e8 b2 fe ff ff       	call   c0022be2 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022d30:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022d34:	0f b6 c0             	movzx  eax,al
c0022d37:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022d3b:	83 c4 2c             	add    esp,0x2c
c0022d3e:	5b                   	pop    ebx
c0022d3f:	5e                   	pop    esi
c0022d40:	5f                   	pop    edi
c0022d41:	5d                   	pop    ebp
c0022d42:	eb 8e                	jmp    c0022cd2 <PCI::checkBus(unsigned char)>
c0022d44:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022d48:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022d4e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022d52:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022d56:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022d5a:	88 d3                	mov    bl,dl
c0022d5c:	85 c0                	test   eax,eax
c0022d5e:	74 33                	je     c0022d93 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022d60:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022d63:	85 d2                	test   edx,edx
c0022d65:	74 28                	je     c0022d8f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022d67:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022d6d:	31 ef                	xor    edi,ebp
c0022d6f:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022d75:	75 18                	jne    c0022d8f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022d77:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022d7b:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022d81:	75 0c                	jne    c0022d8f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022d83:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022d89:	0f 84 d0 00 00 00    	je     c0022e5f <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022d8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022d91:	eb c9                	jmp    c0022d5c <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022d93:	66 81 f9 01 06       	cmp    cx,0x601
c0022d98:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022d9c:	75 19                	jne    c0022db7 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022d9e:	83 ec 0c             	sub    esp,0xc
c0022da1:	68 64 01 00 00       	push   0x164
c0022da6:	e8 a0 ca fe ff       	call   c000f84b <malloc>
c0022dab:	89 c5                	mov    ebp,eax
c0022dad:	89 04 24             	mov    DWORD PTR [esp],eax
c0022db0:	e8 95 0f 00 00       	call   c0023d4a <SATABus::SATABus()>
c0022db5:	eb 1e                	jmp    c0022dd5 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022db7:	66 81 f9 01 01       	cmp    cx,0x101
c0022dbc:	75 60                	jne    c0022e1e <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022dbe:	83 ec 0c             	sub    esp,0xc
c0022dc1:	68 70 02 00 00       	push   0x270
c0022dc6:	e8 80 ca fe ff       	call   c000f84b <malloc>
c0022dcb:	89 c5                	mov    ebp,eax
c0022dcd:	89 04 24             	mov    DWORD PTR [esp],eax
c0022dd0:	e8 03 03 00 00       	call   c00230d8 <IDE::IDE()>
c0022dd5:	58                   	pop    eax
c0022dd6:	5a                   	pop    edx
c0022dd7:	55                   	push   ebp
c0022dd8:	56                   	push   esi
c0022dd9:	e8 56 15 ff ff       	call   c0014334 <Device::addChild(Device*)>
c0022dde:	83 ec 1c             	sub    esp,0x1c
c0022de1:	b9 09 00 00 00       	mov    ecx,0x9
c0022de6:	fc                   	cld    
c0022de7:	89 e7                	mov    edi,esp
c0022de9:	89 de                	mov    esi,ebx
c0022deb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022ded:	55                   	push   ebp
c0022dee:	e8 4b 14 ff ff       	call   c001423e <Device::preOpenPCI(PCIDeviceInfo)>
c0022df3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022df6:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022dfa:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022e02:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022e0a:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022e12:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022e15:	83 c4 4c             	add    esp,0x4c
c0022e18:	5b                   	pop    ebx
c0022e19:	5e                   	pop    esi
c0022e1a:	5f                   	pop    edi
c0022e1b:	5d                   	pop    ebp
c0022e1c:	ff e0                	jmp    eax
c0022e1e:	83 ec 0c             	sub    esp,0xc
c0022e21:	68 58 01 00 00       	push   0x158
c0022e26:	e8 20 ca fe ff       	call   c000f84b <malloc>
c0022e2b:	89 c5                	mov    ebp,eax
c0022e2d:	58                   	pop    eax
c0022e2e:	5a                   	pop    edx
c0022e2f:	68 a8 cb 02 c0       	push   0xc002cba8
c0022e34:	55                   	push   ebp
c0022e35:	e8 f0 17 ff ff       	call   c001462a <DriverlessDevice::DriverlessDevice(char const*)>
c0022e3a:	59                   	pop    ecx
c0022e3b:	5f                   	pop    edi
c0022e3c:	55                   	push   ebp
c0022e3d:	56                   	push   esi
c0022e3e:	e8 f1 14 ff ff       	call   c0014334 <Device::addChild(Device*)>
c0022e43:	b9 09 00 00 00       	mov    ecx,0x9
c0022e48:	fc                   	cld    
c0022e49:	89 df                	mov    edi,ebx
c0022e4b:	89 de                	mov    esi,ebx
c0022e4d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022e4f:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022e53:	83 c4 2c             	add    esp,0x2c
c0022e56:	5b                   	pop    ebx
c0022e57:	5e                   	pop    esi
c0022e58:	5f                   	pop    edi
c0022e59:	5d                   	pop    ebp
c0022e5a:	e9 df 13 ff ff       	jmp    c001423e <Device::preOpenPCI(PCIDeviceInfo)>
c0022e5f:	83 c4 1c             	add    esp,0x1c
c0022e62:	5b                   	pop    ebx
c0022e63:	5e                   	pop    esi
c0022e64:	5f                   	pop    edi
c0022e65:	5d                   	pop    ebp
c0022e66:	c3                   	ret    
c0022e67:	90                   	nop

c0022e68 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022e68:	55                   	push   ebp
c0022e69:	57                   	push   edi
c0022e6a:	56                   	push   esi
c0022e6b:	53                   	push   ebx
c0022e6c:	83 ec 5c             	sub    esp,0x5c
c0022e6f:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022e73:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022e77:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022e7b:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022e80:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022e84:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022e88:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022e8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022e91:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022e96:	6a 0c                	push   0xc
c0022e98:	55                   	push   ebp
c0022e99:	53                   	push   ebx
c0022e9a:	57                   	push   edi
c0022e9b:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022ea2:	e8 01 fc ff ff       	call   c0022aa8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ea7:	55                   	push   ebp
c0022ea8:	53                   	push   ebx
c0022ea9:	57                   	push   edi
c0022eaa:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022eb1:	e8 80 fc ff ff       	call   c0022b36 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022eb6:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022ebb:	83 c4 24             	add    esp,0x24
c0022ebe:	55                   	push   ebp
c0022ebf:	53                   	push   ebx
c0022ec0:	57                   	push   edi
c0022ec1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022ec5:	e8 f6 fc ff ff       	call   c0022bc0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022eca:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022ece:	6a 3c                	push   0x3c
c0022ed0:	55                   	push   ebp
c0022ed1:	53                   	push   ebx
c0022ed2:	57                   	push   edi
c0022ed3:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022eda:	e8 c9 fb ff ff       	call   c0022aa8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022edf:	0f b6 c4             	movzx  eax,ah
c0022ee2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022ee6:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022eea:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022eee:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0022ef3:	83 c4 24             	add    esp,0x24
c0022ef6:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022efc:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022f03:	74 6c                	je     c0022f71 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022f05:	31 f6                	xor    esi,esi
c0022f07:	8b 15 c8 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5c8
c0022f0d:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022f13:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022f19:	7e 56                	jle    c0022f71 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022f1b:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022f1e:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022f25:	39 cb                	cmp    ebx,ecx
c0022f27:	75 45                	jne    c0022f6e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022f29:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022f30:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022f34:	75 38                	jne    c0022f6e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022f36:	83 ec 0c             	sub    esp,0xc
c0022f39:	68 c2 cb 02 c0       	push   0xc002cbc2
c0022f3e:	e8 c4 ff fe ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0022f43:	8b 15 c8 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5c8
c0022f49:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022f4f:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022f57:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022f5b:	52                   	push   edx
c0022f5c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022f60:	53                   	push   ebx
c0022f61:	68 e7 cb 02 c0       	push   0xc002cbe7
c0022f66:	e8 9c ff fe ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0022f6b:	83 c4 20             	add    esp,0x20
c0022f6e:	46                   	inc    esi
c0022f6f:	eb 96                	jmp    c0022f07 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022f71:	31 d2                	xor    edx,edx
c0022f73:	83 ec 0c             	sub    esp,0xc
c0022f76:	55                   	push   ebp
c0022f77:	53                   	push   ebx
c0022f78:	57                   	push   edi
c0022f79:	52                   	push   edx
c0022f7a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022f7e:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022f85:	e8 7c fc ff ff       	call   c0022c06 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022f8a:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022f8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022f92:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022f96:	42                   	inc    edx
c0022f97:	83 c4 20             	add    esp,0x20
c0022f9a:	83 fa 06             	cmp    edx,0x6
c0022f9d:	75 d4                	jne    c0022f73 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022f9f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022fa3:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022fa7:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022fab:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022faf:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022fb3:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022fb7:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022fbc:	86 e0                	xchg   al,ah
c0022fbe:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022fc3:	55                   	push   ebp
c0022fc4:	53                   	push   ebx
c0022fc5:	57                   	push   edi
c0022fc6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022fca:	e8 ab fb ff ff       	call   c0022b7a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022fcf:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022fd3:	55                   	push   ebp
c0022fd4:	53                   	push   ebx
c0022fd5:	57                   	push   edi
c0022fd6:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022fdd:	e8 0e fb ff ff       	call   c0022af0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022fe2:	83 ec 0c             	sub    esp,0xc
c0022fe5:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022fea:	b9 09 00 00 00       	mov    ecx,0x9
c0022fef:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022ff3:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022ff7:	fc                   	cld    
c0022ff8:	89 e7                	mov    edi,esp
c0022ffa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022ffc:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0023003:	e8 ee fc ff ff       	call   c0022cf6 <PCI::foundDevice(PCIDeviceInfo)>
c0023008:	81 c4 8c 00 00 00    	add    esp,0x8c
c002300e:	5b                   	pop    ebx
c002300f:	5e                   	pop    esi
c0023010:	5f                   	pop    edi
c0023011:	5d                   	pop    ebp
c0023012:	c3                   	ret    
c0023013:	90                   	nop

c0023014 <PCI::checkDevice(unsigned char, unsigned char)>:
c0023014:	55                   	push   ebp
c0023015:	57                   	push   edi
c0023016:	56                   	push   esi
c0023017:	53                   	push   ebx
c0023018:	83 ec 0c             	sub    esp,0xc
c002301b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c002301f:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0023024:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0023029:	6a 00                	push   0x0
c002302b:	56                   	push   esi
c002302c:	57                   	push   edi
c002302d:	55                   	push   ebp
c002302e:	e8 bd fa ff ff       	call   c0022af0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023033:	6a 00                	push   0x0
c0023035:	56                   	push   esi
c0023036:	57                   	push   edi
c0023037:	55                   	push   ebp
c0023038:	e8 2b fe ff ff       	call   c0022e68 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002303d:	83 c4 20             	add    esp,0x20
c0023040:	6a 00                	push   0x0
c0023042:	56                   	push   esi
c0023043:	57                   	push   edi
c0023044:	55                   	push   ebp
c0023045:	e8 c8 fa ff ff       	call   c0022b12 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002304a:	83 c4 10             	add    esp,0x10
c002304d:	84 c0                	test   al,al
c002304f:	79 27                	jns    c0023078 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0023051:	bb 01 00 00 00       	mov    ebx,0x1
c0023056:	53                   	push   ebx
c0023057:	56                   	push   esi
c0023058:	57                   	push   edi
c0023059:	55                   	push   ebp
c002305a:	e8 91 fa ff ff       	call   c0022af0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002305f:	83 c4 10             	add    esp,0x10
c0023062:	66 40                	inc    ax
c0023064:	74 0c                	je     c0023072 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0023066:	53                   	push   ebx
c0023067:	56                   	push   esi
c0023068:	57                   	push   edi
c0023069:	55                   	push   ebp
c002306a:	e8 f9 fd ff ff       	call   c0022e68 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002306f:	83 c4 10             	add    esp,0x10
c0023072:	43                   	inc    ebx
c0023073:	83 fb 08             	cmp    ebx,0x8
c0023076:	75 de                	jne    c0023056 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0023078:	83 c4 0c             	add    esp,0xc
c002307b:	5b                   	pop    ebx
c002307c:	5e                   	pop    esi
c002307d:	5f                   	pop    edi
c002307e:	5d                   	pop    ebp
c002307f:	c3                   	ret    

c0023080 <PCI::detect()>:
c0023080:	56                   	push   esi
c0023081:	53                   	push   ebx
c0023082:	53                   	push   ebx
c0023083:	31 db                	xor    ebx,ebx
c0023085:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023089:	6a 00                	push   0x0
c002308b:	6a 00                	push   0x0
c002308d:	6a 00                	push   0x0
c002308f:	56                   	push   esi
c0023090:	e8 7d fa ff ff       	call   c0022b12 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0023095:	83 c4 10             	add    esp,0x10
c0023098:	a8 80                	test   al,0x80
c002309a:	75 21                	jne    c00230bd <PCI::detect()+0x3d>
c002309c:	51                   	push   ecx
c002309d:	51                   	push   ecx
c002309e:	6a 00                	push   0x0
c00230a0:	56                   	push   esi
c00230a1:	e8 2c fc ff ff       	call   c0022cd2 <PCI::checkBus(unsigned char)>
c00230a6:	83 c4 10             	add    esp,0x10
c00230a9:	eb 24                	jmp    c00230cf <PCI::detect()+0x4f>
c00230ab:	52                   	push   edx
c00230ac:	52                   	push   edx
c00230ad:	53                   	push   ebx
c00230ae:	43                   	inc    ebx
c00230af:	56                   	push   esi
c00230b0:	e8 1d fc ff ff       	call   c0022cd2 <PCI::checkBus(unsigned char)>
c00230b5:	83 c4 10             	add    esp,0x10
c00230b8:	83 fb 08             	cmp    ebx,0x8
c00230bb:	74 12                	je     c00230cf <PCI::detect()+0x4f>
c00230bd:	53                   	push   ebx
c00230be:	6a 00                	push   0x0
c00230c0:	6a 00                	push   0x0
c00230c2:	56                   	push   esi
c00230c3:	e8 28 fa ff ff       	call   c0022af0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00230c8:	83 c4 10             	add    esp,0x10
c00230cb:	66 40                	inc    ax
c00230cd:	74 dc                	je     c00230ab <PCI::detect()+0x2b>
c00230cf:	58                   	pop    eax
c00230d0:	5b                   	pop    ebx
c00230d1:	5e                   	pop    esi
c00230d2:	c3                   	ret    
c00230d3:	90                   	nop

c00230d4 <IDE::close(int, int, void*)>:
c00230d4:	83 c8 ff             	or     eax,0xffffffff
c00230d7:	c3                   	ret    

c00230d8 <IDE::IDE()>:
c00230d8:	83 ec 0c             	sub    esp,0xc
c00230db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230df:	83 ec 08             	sub    esp,0x8
c00230e2:	68 30 cc 02 c0       	push   0xc002cc30
c00230e7:	50                   	push   eax
c00230e8:	e8 d3 15 ff ff       	call   c00146c0 <HardDiskController::HardDiskController(char const*)>
c00230ed:	83 c4 10             	add    esp,0x10
c00230f0:	ba 70 ce 02 c0       	mov    edx,0xc002ce70
c00230f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230f9:	89 10                	mov    DWORD PTR [eax],edx
c00230fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230ff:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0023106:	90                   	nop
c0023107:	83 c4 0c             	add    esp,0xc
c002310a:	c3                   	ret    
c002310b:	90                   	nop

c002310c <IDE::prepareInterrupt(unsigned char)>:
c002310c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023111:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023115:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c002311d:	c3                   	ret    

c002311e <selectDrive(unsigned char, unsigned char)>:
c002311e:	c3                   	ret    
c002311f:	90                   	nop

c0023120 <IDE::getBase(unsigned char)>:
c0023120:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0023125:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023129:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0023131:	c3                   	ret    

c0023132 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0023132:	55                   	push   ebp
c0023133:	57                   	push   edi
c0023134:	56                   	push   esi
c0023135:	53                   	push   ebx
c0023136:	83 ec 1c             	sub    esp,0x1c
c0023139:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002313d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023141:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0023144:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023148:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002314c:	80 f9 03             	cmp    cl,0x3
c002314f:	77 51                	ja     c00231a2 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0023151:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023155:	0f b6 f2             	movzx  esi,dl
c0023158:	0f b6 db             	movzx  ebx,bl
c002315b:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c002315e:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0023162:	83 ca 80             	or     edx,0xffffff80
c0023165:	0f b6 d2             	movzx  edx,dl
c0023168:	52                   	push   edx
c0023169:	6a 0c                	push   0xc
c002316b:	56                   	push   esi
c002316c:	57                   	push   edi
c002316d:	e8 c0 ff ff ff       	call   c0023132 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023172:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0023177:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002317b:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c002317f:	ee                   	out    dx,al
c0023180:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0023185:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0023189:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c002318d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023191:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023199:	83 c4 2c             	add    esp,0x2c
c002319c:	5b                   	pop    ebx
c002319d:	5e                   	pop    esi
c002319e:	5f                   	pop    edi
c002319f:	5d                   	pop    ebp
c00231a0:	eb 90                	jmp    c0023132 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231a2:	80 fb 07             	cmp    bl,0x7
c00231a5:	77 12                	ja     c00231b9 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c00231a7:	0f b6 d2             	movzx  edx,dl
c00231aa:	0f b6 db             	movzx  ebx,bl
c00231ad:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c00231b5:	89 da                	mov    edx,ebx
c00231b7:	eb 2f                	jmp    c00231e8 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00231b9:	80 fb 0d             	cmp    bl,0xd
c00231bc:	77 13                	ja     c00231d1 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c00231be:	0f b6 d2             	movzx  edx,dl
c00231c1:	0f b6 db             	movzx  ebx,bl
c00231c4:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c00231cb:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c00231cf:	eb 17                	jmp    c00231e8 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00231d1:	80 fb 15             	cmp    bl,0x15
c00231d4:	77 13                	ja     c00231e9 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c00231d6:	0f b6 d2             	movzx  edx,dl
c00231d9:	0f b6 db             	movzx  ebx,bl
c00231dc:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c00231e4:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00231e8:	ee                   	out    dx,al
c00231e9:	83 c4 1c             	add    esp,0x1c
c00231ec:	5b                   	pop    ebx
c00231ed:	5e                   	pop    esi
c00231ee:	5f                   	pop    edi
c00231ef:	5d                   	pop    ebp
c00231f0:	c3                   	ret    
c00231f1:	90                   	nop

c00231f2 <IDE::read(unsigned char, unsigned char)>:
c00231f2:	55                   	push   ebp
c00231f3:	57                   	push   edi
c00231f4:	56                   	push   esi
c00231f5:	53                   	push   ebx
c00231f6:	83 ec 1c             	sub    esp,0x1c
c00231f9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00231fd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023201:	8d 43 f8             	lea    eax,[ebx-0x8]
c0023204:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023208:	3c 03                	cmp    al,0x3
c002320a:	77 43                	ja     c002324f <IDE::read(unsigned char, unsigned char)+0x5d>
c002320c:	0f b6 f2             	movzx  esi,dl
c002320f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023212:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0023216:	83 c8 80             	or     eax,0xffffff80
c0023219:	0f b6 c0             	movzx  eax,al
c002321c:	50                   	push   eax
c002321d:	6a 0c                	push   0xc
c002321f:	56                   	push   esi
c0023220:	57                   	push   edi
c0023221:	e8 0c ff ff ff       	call   c0023132 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023226:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c002322b:	0f b6 c3             	movzx  eax,bl
c002322e:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0023232:	ec                   	in     al,dx
c0023233:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023237:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c002323c:	52                   	push   edx
c002323d:	6a 0c                	push   0xc
c002323f:	56                   	push   esi
c0023240:	57                   	push   edi
c0023241:	e8 ec fe ff ff       	call   c0023132 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023246:	83 c4 20             	add    esp,0x20
c0023249:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002324d:	eb 49                	jmp    c0023298 <IDE::read(unsigned char, unsigned char)+0xa6>
c002324f:	80 fb 07             	cmp    bl,0x7
c0023252:	77 12                	ja     c0023266 <IDE::read(unsigned char, unsigned char)+0x74>
c0023254:	0f b6 d2             	movzx  edx,dl
c0023257:	0f b6 c3             	movzx  eax,bl
c002325a:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023262:	89 c2                	mov    edx,eax
c0023264:	eb 31                	jmp    c0023297 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023266:	80 fb 0d             	cmp    bl,0xd
c0023269:	77 13                	ja     c002327e <IDE::read(unsigned char, unsigned char)+0x8c>
c002326b:	0f b6 d2             	movzx  edx,dl
c002326e:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023275:	0f b6 d3             	movzx  edx,bl
c0023278:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002327c:	eb 19                	jmp    c0023297 <IDE::read(unsigned char, unsigned char)+0xa5>
c002327e:	31 c0                	xor    eax,eax
c0023280:	80 fb 15             	cmp    bl,0x15
c0023283:	77 13                	ja     c0023298 <IDE::read(unsigned char, unsigned char)+0xa6>
c0023285:	0f b6 d2             	movzx  edx,dl
c0023288:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023290:	0f b6 d3             	movzx  edx,bl
c0023293:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023297:	ec                   	in     al,dx
c0023298:	83 c4 1c             	add    esp,0x1c
c002329b:	5b                   	pop    ebx
c002329c:	5e                   	pop    esi
c002329d:	5f                   	pop    edi
c002329e:	5d                   	pop    ebp
c002329f:	c3                   	ret    

c00232a0 <IDE::waitInterrupt(unsigned char)>:
c00232a0:	55                   	push   ebp
c00232a1:	57                   	push   edi
c00232a2:	56                   	push   esi
c00232a3:	53                   	push   ebx
c00232a4:	31 db                	xor    ebx,ebx
c00232a6:	83 ec 0c             	sub    esp,0xc
c00232a9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00232ad:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c00232b2:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c00232ba:	89 e8                	mov    eax,ebp
c00232bc:	84 c0                	test   al,al
c00232be:	75 34                	jne    c00232f4 <IDE::waitInterrupt(unsigned char)+0x54>
c00232c0:	52                   	push   edx
c00232c1:	6a 0c                	push   0xc
c00232c3:	56                   	push   esi
c00232c4:	57                   	push   edi
c00232c5:	e8 28 ff ff ff       	call   c00231f2 <IDE::read(unsigned char, unsigned char)>
c00232ca:	83 c4 10             	add    esp,0x10
c00232cd:	a8 01                	test   al,0x1
c00232cf:	75 2b                	jne    c00232fc <IDE::waitInterrupt(unsigned char)+0x5c>
c00232d1:	f6 c3 04             	test   bl,0x4
c00232d4:	75 16                	jne    c00232ec <IDE::waitInterrupt(unsigned char)+0x4c>
c00232d6:	83 fb 32             	cmp    ebx,0x32
c00232d9:	7e 11                	jle    c00232ec <IDE::waitInterrupt(unsigned char)+0x4c>
c00232db:	50                   	push   eax
c00232dc:	50                   	push   eax
c00232dd:	6a 00                	push   0x0
c00232df:	68 80 96 98 00       	push   0x989680
c00232e4:	e8 c1 b0 ff ff       	call   c001e3aa <nanoSleep(unsigned long long)>
c00232e9:	83 c4 10             	add    esp,0x10
c00232ec:	83 fb 3c             	cmp    ebx,0x3c
c00232ef:	74 0b                	je     c00232fc <IDE::waitInterrupt(unsigned char)+0x5c>
c00232f1:	43                   	inc    ebx
c00232f2:	eb be                	jmp    c00232b2 <IDE::waitInterrupt(unsigned char)+0x12>
c00232f4:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c00232fc:	83 c4 0c             	add    esp,0xc
c00232ff:	89 e8                	mov    eax,ebp
c0023301:	5b                   	pop    ebx
c0023302:	5e                   	pop    esi
c0023303:	5f                   	pop    edi
c0023304:	5d                   	pop    ebp
c0023305:	c3                   	ret    

c0023306 <ideChannel0IRQHandler(regs*, void*)>:
c0023306:	83 ec 10             	sub    esp,0x10
c0023309:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002330d:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023314:	6a 07                	push   0x7
c0023316:	6a 00                	push   0x0
c0023318:	50                   	push   eax
c0023319:	e8 d4 fe ff ff       	call   c00231f2 <IDE::read(unsigned char, unsigned char)>
c002331e:	83 c4 1c             	add    esp,0x1c
c0023321:	c3                   	ret    

c0023322 <ideChannel1IRQHandler(regs*, void*)>:
c0023322:	83 ec 10             	sub    esp,0x10
c0023325:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023329:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023330:	6a 07                	push   0x7
c0023332:	6a 01                	push   0x1
c0023334:	50                   	push   eax
c0023335:	e8 b8 fe ff ff       	call   c00231f2 <IDE::read(unsigned char, unsigned char)>
c002333a:	83 c4 1c             	add    esp,0x1c
c002333d:	c3                   	ret    

c002333e <IDE::enableIRQs(unsigned char, bool)>:
c002333e:	57                   	push   edi
c002333f:	56                   	push   esi
c0023340:	be 04 00 00 00       	mov    esi,0x4
c0023345:	53                   	push   ebx
c0023346:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c002334b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002334f:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023354:	0f 94 c0             	sete   al
c0023357:	d1 e0                	shl    eax,1
c0023359:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023360:	0f b6 c0             	movzx  eax,al
c0023363:	50                   	push   eax
c0023364:	6a 0c                	push   0xc
c0023366:	57                   	push   edi
c0023367:	53                   	push   ebx
c0023368:	e8 c5 fd ff ff       	call   c0023132 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002336d:	83 c4 10             	add    esp,0x10
c0023370:	50                   	push   eax
c0023371:	6a 0c                	push   0xc
c0023373:	57                   	push   edi
c0023374:	53                   	push   ebx
c0023375:	e8 78 fe ff ff       	call   c00231f2 <IDE::read(unsigned char, unsigned char)>
c002337a:	83 c4 10             	add    esp,0x10
c002337d:	4e                   	dec    esi
c002337e:	75 f0                	jne    c0023370 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023380:	5b                   	pop    ebx
c0023381:	5e                   	pop    esi
c0023382:	5f                   	pop    edi
c0023383:	c3                   	ret    

c0023384 <IDE::open(int, int, void*)>:
c0023384:	55                   	push   ebp
c0023385:	57                   	push   edi
c0023386:	56                   	push   esi
c0023387:	53                   	push   ebx
c0023388:	83 ec 1c             	sub    esp,0x1c
c002338b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002338f:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023398:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c00233a1:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00233a8:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00233af:	0f 85 b0 02 00 00    	jne    c0023665 <IDE::open(int, int, void*)+0x2e1>
c00233b5:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00233bb:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00233bf:	83 e0 7f             	and    eax,0x7f
c00233c2:	3c 05                	cmp    al,0x5
c00233c4:	74 04                	je     c00233ca <IDE::open(int, int, void*)+0x46>
c00233c6:	3c 0f                	cmp    al,0xf
c00233c8:	75 32                	jne    c00233fc <IDE::open(int, int, void*)+0x78>
c00233ca:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00233d0:	83 e0 fc             	and    eax,0xfffffffc
c00233d3:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00233da:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00233e0:	83 e0 fc             	and    eax,0xfffffffc
c00233e3:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00233ea:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00233f0:	83 e0 fc             	and    eax,0xfffffffc
c00233f3:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00233fa:	eb 14                	jmp    c0023410 <IDE::open(int, int, void*)+0x8c>
c00233fc:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023406:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023410:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023417:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002341e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023422:	89 c6                	mov    esi,eax
c0023424:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023429:	c1 e6 10             	shl    esi,0x10
c002342c:	89 e8                	mov    eax,ebp
c002342e:	89 fa                	mov    edx,edi
c0023430:	c1 e0 0b             	shl    eax,0xb
c0023433:	09 f0                	or     eax,esi
c0023435:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c002343c:	c1 e6 08             	shl    esi,0x8
c002343f:	09 c6                	or     esi,eax
c0023441:	89 f0                	mov    eax,esi
c0023443:	0d 08 00 00 80       	or     eax,0x80000008
c0023448:	ef                   	out    dx,eax
c0023449:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c002344e:	89 ca                	mov    edx,ecx
c0023450:	ed                   	in     eax,dx
c0023451:	c1 e8 10             	shr    eax,0x10
c0023454:	3d ff ff 00 00       	cmp    eax,0xffff
c0023459:	0f 84 f5 00 00 00    	je     c0023554 <IDE::open(int, int, void*)+0x1d0>
c002345f:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023465:	89 fa                	mov    edx,edi
c0023467:	89 f0                	mov    eax,esi
c0023469:	ef                   	out    dx,eax
c002346a:	b0 fe                	mov    al,0xfe
c002346c:	89 ca                	mov    edx,ecx
c002346e:	ee                   	out    dx,al
c002346f:	89 f0                	mov    eax,esi
c0023471:	89 fa                	mov    edx,edi
c0023473:	ef                   	out    dx,eax
c0023474:	89 ca                	mov    edx,ecx
c0023476:	ed                   	in     eax,dx
c0023477:	3c fe                	cmp    al,0xfe
c0023479:	0f 85 a9 00 00 00    	jne    c0023528 <IDE::open(int, int, void*)+0x1a4>
c002347f:	8b 15 c8 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5c8
c0023485:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c002348c:	74 33                	je     c00234c1 <IDE::open(int, int, void*)+0x13d>
c002348e:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023494:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023498:	40                   	inc    eax
c0023499:	83 ec 0c             	sub    esp,0xc
c002349c:	0f b6 c0             	movzx  eax,al
c002349f:	50                   	push   eax
c00234a0:	55                   	push   ebp
c00234a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00234a5:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c00234ab:	51                   	push   ecx
c00234ac:	e8 e1 4d ff ff       	call   c0018292 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00234b1:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00234b6:	83 c4 1c             	add    esp,0x1c
c00234b9:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00234bf:	eb 0a                	jmp    c00234cb <IDE::open(int, int, void*)+0x147>
c00234c1:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00234cb:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00234d2:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00234d9:	c1 e1 10             	shl    ecx,0x10
c00234dc:	c1 e0 08             	shl    eax,0x8
c00234df:	bf f8 0c 00 00       	mov    edi,0xcf8
c00234e4:	09 c1                	or     ecx,eax
c00234e6:	89 fa                	mov    edx,edi
c00234e8:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00234ef:	c1 e0 0b             	shl    eax,0xb
c00234f2:	09 c1                	or     ecx,eax
c00234f4:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00234fa:	89 c8                	mov    eax,ecx
c00234fc:	ef                   	out    dx,eax
c00234fd:	be fc 0c 00 00       	mov    esi,0xcfc
c0023502:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023508:	89 f2                	mov    edx,esi
c002350a:	ee                   	out    dx,al
c002350b:	89 c8                	mov    eax,ecx
c002350d:	89 fa                	mov    edx,edi
c002350f:	ef                   	out    dx,eax
c0023510:	89 f2                	mov    edx,esi
c0023512:	ed                   	in     eax,dx
c0023513:	0f b6 c0             	movzx  eax,al
c0023516:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c002351c:	74 46                	je     c0023564 <IDE::open(int, int, void*)+0x1e0>
c002351e:	83 ec 0c             	sub    esp,0xc
c0023521:	68 48 cc 02 c0       	push   0xc002cc48
c0023526:	eb 34                	jmp    c002355c <IDE::open(int, int, void*)+0x1d8>
c0023528:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023531:	75 17                	jne    c002354a <IDE::open(int, int, void*)+0x1c6>
c0023533:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023538:	74 07                	je     c0023541 <IDE::open(int, int, void*)+0x1bd>
c002353a:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c002353f:	75 09                	jne    c002354a <IDE::open(int, int, void*)+0x1c6>
c0023541:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023548:	eb 1a                	jmp    c0023564 <IDE::open(int, int, void*)+0x1e0>
c002354a:	83 ec 0c             	sub    esp,0xc
c002354d:	68 50 cc 02 c0       	push   0xc002cc50
c0023552:	eb 08                	jmp    c002355c <IDE::open(int, int, void*)+0x1d8>
c0023554:	83 ec 0c             	sub    esp,0xc
c0023557:	68 81 cc 02 c0       	push   0xc002cc81
c002355c:	e8 e4 70 ff ff       	call   c001a645 <Krnl::panic(char const*)>
c0023561:	83 c4 10             	add    esp,0x10
c0023564:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c002356b:	79 1a                	jns    c0023587 <IDE::open(int, int, void*)+0x203>
c002356d:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023573:	83 e0 fc             	and    eax,0xfffffffc
c0023576:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c002357d:	83 c0 08             	add    eax,0x8
c0023580:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023587:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c002358d:	89 c2                	mov    edx,eax
c002358f:	83 e2 0f             	and    edx,0xf
c0023592:	66 83 fa 08          	cmp    dx,0x8
c0023596:	75 0a                	jne    c00235a2 <IDE::open(int, int, void*)+0x21e>
c0023598:	83 e8 02             	sub    eax,0x2
c002359b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00235a2:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00235a8:	89 c2                	mov    edx,eax
c00235aa:	83 e2 0f             	and    edx,0xf
c00235ad:	66 83 fa 08          	cmp    dx,0x8
c00235b1:	75 0a                	jne    c00235bd <IDE::open(int, int, void*)+0x239>
c00235b3:	83 e8 02             	sub    eax,0x2
c00235b6:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00235bd:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00235c4:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00235cb:	89 d0                	mov    eax,edx
c00235cd:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00235d0:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00235d4:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00235d8:	8d 4a 01             	lea    ecx,[edx+0x1]
c00235db:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00235e0:	0f b6 c9             	movzx  ecx,cl
c00235e3:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00235ea:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00235ed:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00235f1:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00235f5:	8d 50 02             	lea    edx,[eax+0x2]
c00235f8:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00235fd:	0f b6 d2             	movzx  edx,dl
c0023600:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023606:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023609:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002360d:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023611:	8d 48 03             	lea    ecx,[eax+0x3]
c0023614:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023619:	0f b6 c9             	movzx  ecx,cl
c002361c:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023622:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023625:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023629:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002362d:	8d 50 04             	lea    edx,[eax+0x4]
c0023630:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023636:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002363b:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023642:	66 85 f6             	test   si,si
c0023645:	74 3e                	je     c0023685 <IDE::open(int, int, void*)+0x301>
c0023647:	0f b6 d2             	movzx  edx,dl
c002364a:	83 c0 05             	add    eax,0x5
c002364d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023650:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023654:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023658:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c002365e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023663:	eb 20                	jmp    c0023685 <IDE::open(int, int, void*)+0x301>
c0023665:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002366f:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023679:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023680:	e9 02 ff ff ff       	jmp    c0023587 <IDE::open(int, int, void*)+0x203>
c0023685:	52                   	push   edx
c0023686:	52                   	push   edx
c0023687:	6a 00                	push   0x0
c0023689:	53                   	push   ebx
c002368a:	e8 7d fa ff ff       	call   c002310c <IDE::prepareInterrupt(unsigned char)>
c002368f:	59                   	pop    ecx
c0023690:	5e                   	pop    esi
c0023691:	6a 01                	push   0x1
c0023693:	53                   	push   ebx
c0023694:	e8 73 fa ff ff       	call   c002310c <IDE::prepareInterrupt(unsigned char)>
c0023699:	83 c4 0c             	add    esp,0xc
c002369c:	6a 00                	push   0x0
c002369e:	6a 00                	push   0x0
c00236a0:	53                   	push   ebx
c00236a1:	e8 98 fc ff ff       	call   c002333e <IDE::enableIRQs(unsigned char, bool)>
c00236a6:	83 c4 0c             	add    esp,0xc
c00236a9:	6a 00                	push   0x0
c00236ab:	6a 01                	push   0x1
c00236ad:	53                   	push   ebx
c00236ae:	e8 8b fc ff ff       	call   c002333e <IDE::enableIRQs(unsigned char, bool)>
c00236b3:	83 c4 10             	add    esp,0x10
c00236b6:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00236bd:	74 40                	je     c00236ff <IDE::open(int, int, void*)+0x37b>
c00236bf:	83 ec 0c             	sub    esp,0xc
c00236c2:	68 ab cc 02 c0       	push   0xc002ccab
c00236c7:	e8 3b f8 fe ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c00236cc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00236cf:	6a 01                	push   0x1
c00236d1:	68 06 33 02 c0       	push   0xc0023306
c00236d6:	6a 0e                	push   0xe
c00236d8:	53                   	push   ebx
c00236d9:	e8 da 0b ff ff       	call   c00142b8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00236de:	83 c4 14             	add    esp,0x14
c00236e1:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00236e7:	53                   	push   ebx
c00236e8:	6a 01                	push   0x1
c00236ea:	68 22 33 02 c0       	push   0xc0023322
c00236ef:	6a 0f                	push   0xf
c00236f1:	53                   	push   ebx
c00236f2:	e8 c1 0b ff ff       	call   c00142b8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00236f7:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00236fd:	eb 4a                	jmp    c0023749 <IDE::open(int, int, void*)+0x3c5>
c00236ff:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023709:	50                   	push   eax
c002370a:	6a 0f                	push   0xf
c002370c:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023712:	68 c7 cc 02 c0       	push   0xc002ccc7
c0023717:	e8 eb f7 fe ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c002371c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002371f:	6a 00                	push   0x0
c0023721:	68 06 33 02 c0       	push   0xc0023306
c0023726:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002372c:	53                   	push   ebx
c002372d:	e8 86 0b ff ff       	call   c00142b8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023732:	83 c4 14             	add    esp,0x14
c0023735:	53                   	push   ebx
c0023736:	6a 00                	push   0x0
c0023738:	68 22 33 02 c0       	push   0xc0023322
c002373d:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023743:	53                   	push   ebx
c0023744:	e8 6f 0b ff ff       	call   c00142b8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023749:	8b 03                	mov    eax,DWORD PTR [ebx]
c002374b:	83 c4 20             	add    esp,0x20
c002374e:	83 ec 0c             	sub    esp,0xc
c0023751:	53                   	push   ebx
c0023752:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023755:	83 c4 0c             	add    esp,0xc
c0023758:	6a 07                	push   0x7
c002375a:	6a 00                	push   0x0
c002375c:	53                   	push   ebx
c002375d:	e8 90 fa ff ff       	call   c00231f2 <IDE::read(unsigned char, unsigned char)>
c0023762:	83 c4 0c             	add    esp,0xc
c0023765:	6a 07                	push   0x7
c0023767:	6a 01                	push   0x1
c0023769:	53                   	push   ebx
c002376a:	e8 83 fa ff ff       	call   c00231f2 <IDE::read(unsigned char, unsigned char)>
c002376f:	83 c4 0c             	add    esp,0xc
c0023772:	6a 01                	push   0x1
c0023774:	6a 00                	push   0x0
c0023776:	53                   	push   ebx
c0023777:	e8 c2 fb ff ff       	call   c002333e <IDE::enableIRQs(unsigned char, bool)>
c002377c:	83 c4 0c             	add    esp,0xc
c002377f:	6a 01                	push   0x1
c0023781:	6a 01                	push   0x1
c0023783:	53                   	push   ebx
c0023784:	e8 b5 fb ff ff       	call   c002333e <IDE::enableIRQs(unsigned char, bool)>
c0023789:	83 c4 2c             	add    esp,0x2c
c002378c:	31 c0                	xor    eax,eax
c002378e:	5b                   	pop    ebx
c002378f:	5e                   	pop    esi
c0023790:	5f                   	pop    edi
c0023791:	5d                   	pop    ebp
c0023792:	c3                   	ret    
c0023793:	90                   	nop

c0023794 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023794:	55                   	push   ebp
c0023795:	57                   	push   edi
c0023796:	56                   	push   esi
c0023797:	53                   	push   ebx
c0023798:	83 ec 1c             	sub    esp,0x1c
c002379b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002379f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00237a3:	8d 50 f8             	lea    edx,[eax-0x8]
c00237a6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00237aa:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00237ae:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00237b2:	80 fa 03             	cmp    dl,0x3
c00237b5:	77 5d                	ja     c0023814 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00237b7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00237bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00237bf:	0f b6 db             	movzx  ebx,bl
c00237c2:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00237c5:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00237c9:	83 ca 80             	or     edx,0xffffff80
c00237cc:	0f b6 d2             	movzx  edx,dl
c00237cf:	52                   	push   edx
c00237d0:	6a 0c                	push   0xc
c00237d2:	53                   	push   ebx
c00237d3:	56                   	push   esi
c00237d4:	e8 59 f9 ff ff       	call   c0023132 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00237d9:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00237de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00237e2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00237e6:	0f b6 c0             	movzx  eax,al
c00237e9:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00237ed:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00237ef:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00237f4:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00237f8:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00237fc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023800:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023808:	83 c4 2c             	add    esp,0x2c
c002380b:	5b                   	pop    ebx
c002380c:	5e                   	pop    esi
c002380d:	5f                   	pop    edi
c002380e:	5d                   	pop    ebp
c002380f:	e9 1e f9 ff ff       	jmp    c0023132 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023814:	3c 07                	cmp    al,0x7
c0023816:	77 10                	ja     c0023828 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023818:	0f b6 db             	movzx  ebx,bl
c002381b:	0f b6 d0             	movzx  edx,al
c002381e:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023826:	eb 2d                	jmp    c0023855 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023828:	3c 0d                	cmp    al,0xd
c002382a:	77 13                	ja     c002383f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c002382c:	0f b6 db             	movzx  ebx,bl
c002382f:	0f b6 c0             	movzx  eax,al
c0023832:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023839:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c002383d:	eb 16                	jmp    c0023855 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002383f:	3c 15                	cmp    al,0x15
c0023841:	77 14                	ja     c0023857 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023843:	0f b6 db             	movzx  ebx,bl
c0023846:	0f b6 c0             	movzx  eax,al
c0023849:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023851:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023855:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023857:	83 c4 1c             	add    esp,0x1c
c002385a:	5b                   	pop    ebx
c002385b:	5e                   	pop    esi
c002385c:	5f                   	pop    edi
c002385d:	5d                   	pop    ebp
c002385e:	c3                   	ret    
c002385f:	90                   	nop

c0023860 <IDE::detect()>:
c0023860:	55                   	push   ebp
c0023861:	57                   	push   edi
c0023862:	56                   	push   esi
c0023863:	53                   	push   ebx
c0023864:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002386a:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023871:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023878:	0f 85 be 02 00 00    	jne    c0023b3c <IDE::detect()+0x2dc>
c002387e:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023885:	31 f6                	xor    esi,esi
c0023887:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002388f:	31 ed                	xor    ebp,ebp
c0023891:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023895:	c1 e0 06             	shl    eax,0x6
c0023898:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00238a0:	89 e8                	mov    eax,ebp
c00238a2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00238a6:	c1 e0 04             	shl    eax,0x4
c00238a9:	83 c8 a0             	or     eax,0xffffffa0
c00238ac:	0f b6 c0             	movzx  eax,al
c00238af:	50                   	push   eax
c00238b0:	6a 06                	push   0x6
c00238b2:	56                   	push   esi
c00238b3:	53                   	push   ebx
c00238b4:	e8 79 f8 ff ff       	call   c0023132 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00238b9:	83 c4 0c             	add    esp,0xc
c00238bc:	6a 0c                	push   0xc
c00238be:	56                   	push   esi
c00238bf:	53                   	push   ebx
c00238c0:	e8 2d f9 ff ff       	call   c00231f2 <IDE::read(unsigned char, unsigned char)>
c00238c5:	83 c4 0c             	add    esp,0xc
c00238c8:	6a 0c                	push   0xc
c00238ca:	56                   	push   esi
c00238cb:	53                   	push   ebx
c00238cc:	e8 21 f9 ff ff       	call   c00231f2 <IDE::read(unsigned char, unsigned char)>
c00238d1:	83 c4 0c             	add    esp,0xc
c00238d4:	6a 0c                	push   0xc
c00238d6:	56                   	push   esi
c00238d7:	53                   	push   ebx
c00238d8:	e8 15 f9 ff ff       	call   c00231f2 <IDE::read(unsigned char, unsigned char)>
c00238dd:	83 c4 0c             	add    esp,0xc
c00238e0:	6a 0c                	push   0xc
c00238e2:	56                   	push   esi
c00238e3:	53                   	push   ebx
c00238e4:	e8 09 f9 ff ff       	call   c00231f2 <IDE::read(unsigned char, unsigned char)>
c00238e9:	68 ec 00 00 00       	push   0xec
c00238ee:	6a 07                	push   0x7
c00238f0:	56                   	push   esi
c00238f1:	53                   	push   ebx
c00238f2:	e8 3b f8 ff ff       	call   c0023132 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00238f7:	83 c4 1c             	add    esp,0x1c
c00238fa:	6a 0c                	push   0xc
c00238fc:	56                   	push   esi
c00238fd:	53                   	push   ebx
c00238fe:	e8 ef f8 ff ff       	call   c00231f2 <IDE::read(unsigned char, unsigned char)>
c0023903:	83 c4 0c             	add    esp,0xc
c0023906:	6a 0c                	push   0xc
c0023908:	56                   	push   esi
c0023909:	53                   	push   ebx
c002390a:	e8 e3 f8 ff ff       	call   c00231f2 <IDE::read(unsigned char, unsigned char)>
c002390f:	83 c4 0c             	add    esp,0xc
c0023912:	6a 0c                	push   0xc
c0023914:	56                   	push   esi
c0023915:	53                   	push   ebx
c0023916:	e8 d7 f8 ff ff       	call   c00231f2 <IDE::read(unsigned char, unsigned char)>
c002391b:	83 c4 0c             	add    esp,0xc
c002391e:	6a 0c                	push   0xc
c0023920:	56                   	push   esi
c0023921:	53                   	push   ebx
c0023922:	e8 cb f8 ff ff       	call   c00231f2 <IDE::read(unsigned char, unsigned char)>
c0023927:	83 c4 0c             	add    esp,0xc
c002392a:	6a 0c                	push   0xc
c002392c:	56                   	push   esi
c002392d:	53                   	push   ebx
c002392e:	e8 bf f8 ff ff       	call   c00231f2 <IDE::read(unsigned char, unsigned char)>
c0023933:	83 c4 10             	add    esp,0x10
c0023936:	84 c0                	test   al,al
c0023938:	0f 84 8b 01 00 00    	je     c0023ac9 <IDE::detect()+0x269>
c002393e:	31 ff                	xor    edi,edi
c0023940:	50                   	push   eax
c0023941:	6a 0c                	push   0xc
c0023943:	56                   	push   esi
c0023944:	53                   	push   ebx
c0023945:	e8 a8 f8 ff ff       	call   c00231f2 <IDE::read(unsigned char, unsigned char)>
c002394a:	83 c4 10             	add    esp,0x10
c002394d:	a8 01                	test   al,0x1
c002394f:	0f 85 8e 01 00 00    	jne    c0023ae3 <IDE::detect()+0x283>
c0023955:	84 c0                	test   al,al
c0023957:	78 04                	js     c002395d <IDE::detect()+0xfd>
c0023959:	a8 08                	test   al,0x8
c002395b:	75 27                	jne    c0023984 <IDE::detect()+0x124>
c002395d:	47                   	inc    edi
c002395e:	81 ff 17 01 00 00    	cmp    edi,0x117
c0023964:	7e da                	jle    c0023940 <IDE::detect()+0xe0>
c0023966:	50                   	push   eax
c0023967:	50                   	push   eax
c0023968:	6a 00                	push   0x0
c002396a:	68 40 4b 4c 00       	push   0x4c4b40
c002396f:	e8 36 aa ff ff       	call   c001e3aa <nanoSleep(unsigned long long)>
c0023974:	83 c4 10             	add    esp,0x10
c0023977:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c002397d:	75 c1                	jne    c0023940 <IDE::detect()+0xe0>
c002397f:	e9 5f 01 00 00       	jmp    c0023ae3 <IDE::detect()+0x283>
c0023984:	31 c9                	xor    ecx,ecx
c0023986:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002398a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c002398e:	83 ec 0c             	sub    esp,0xc
c0023991:	68 80 00 00 00       	push   0x80
c0023996:	57                   	push   edi
c0023997:	6a 00                	push   0x0
c0023999:	56                   	push   esi
c002399a:	53                   	push   ebx
c002399b:	e8 f4 fd ff ff       	call   c0023794 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00239a0:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00239a5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00239a9:	89 d1                	mov    ecx,edx
c00239ab:	c1 e0 06             	shl    eax,0x6
c00239ae:	01 d8                	add    eax,ebx
c00239b0:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00239b7:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00239be:	89 f2                	mov    edx,esi
c00239c0:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00239c6:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00239ca:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00239d0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00239d4:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00239db:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00239e3:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00239ea:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00239f2:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00239f8:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00239ff:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0023a05:	8d 54 24 58          	lea    edx,[esp+0x58]
c0023a09:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023a0d:	83 c4 20             	add    esp,0x20
c0023a10:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023a13:	83 c0 02             	add    eax,0x2
c0023a16:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0023a1c:	83 c7 02             	add    edi,0x2
c0023a1f:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0023a22:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0023a28:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0023a2c:	75 e2                	jne    c0023a10 <IDE::detect()+0x1b0>
c0023a2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023a32:	c1 e0 06             	shl    eax,0x6
c0023a35:	01 d8                	add    eax,ebx
c0023a37:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0023a3d:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0023a44:	66 c1 ea 09          	shr    dx,0x9
c0023a48:	83 e2 01             	and    edx,0x1
c0023a4b:	84 c9                	test   cl,cl
c0023a4d:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023a53:	75 2f                	jne    c0023a84 <IDE::detect()+0x224>
c0023a55:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0023a5b:	85 c0                	test   eax,eax
c0023a5d:	74 66                	je     c0023ac5 <IDE::detect()+0x265>
c0023a5f:	50                   	push   eax
c0023a60:	55                   	push   ebp
c0023a61:	56                   	push   esi
c0023a62:	68 e3 cc 02 c0       	push   0xc002cce3
c0023a67:	e8 9b f4 fe ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0023a6c:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023a73:	e8 d3 bd fe ff       	call   c000f84b <malloc>
c0023a78:	89 c7                	mov    edi,eax
c0023a7a:	89 04 24             	mov    DWORD PTR [esp],eax
c0023a7d:	e8 78 06 00 00       	call   c00240fa <ATA::ATA()>
c0023a82:	eb 28                	jmp    c0023aac <IDE::detect()+0x24c>
c0023a84:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0023a8a:	55                   	push   ebp
c0023a8b:	56                   	push   esi
c0023a8c:	68 12 cd 02 c0       	push   0xc002cd12
c0023a91:	e8 71 f4 fe ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0023a96:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023a9d:	e8 a9 bd fe ff       	call   c000f84b <malloc>
c0023aa2:	89 c7                	mov    edi,eax
c0023aa4:	89 04 24             	mov    DWORD PTR [esp],eax
c0023aa7:	e8 8e 0c 00 00       	call   c002473a <ATAPI::ATAPI()>
c0023aac:	5a                   	pop    edx
c0023aad:	59                   	pop    ecx
c0023aae:	57                   	push   edi
c0023aaf:	53                   	push   ebx
c0023ab0:	e8 7f 08 ff ff       	call   c0014334 <Device::addChild(Device*)>
c0023ab5:	8b 07                	mov    eax,DWORD PTR [edi]
c0023ab7:	53                   	push   ebx
c0023ab8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023abc:	6a 00                	push   0x0
c0023abe:	57                   	push   edi
c0023abf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023ac2:	83 c4 20             	add    esp,0x20
c0023ac5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0023ac9:	4d                   	dec    ebp
c0023aca:	74 0a                	je     c0023ad6 <IDE::detect()+0x276>
c0023acc:	bd 01 00 00 00       	mov    ebp,0x1
c0023ad1:	e9 bb fd ff ff       	jmp    c0023891 <IDE::detect()+0x31>
c0023ad6:	4e                   	dec    esi
c0023ad7:	74 63                	je     c0023b3c <IDE::detect()+0x2dc>
c0023ad9:	be 01 00 00 00       	mov    esi,0x1
c0023ade:	e9 ac fd ff ff       	jmp    c002388f <IDE::detect()+0x2f>
c0023ae3:	50                   	push   eax
c0023ae4:	6a 04                	push   0x4
c0023ae6:	56                   	push   esi
c0023ae7:	53                   	push   ebx
c0023ae8:	e8 05 f7 ff ff       	call   c00231f2 <IDE::read(unsigned char, unsigned char)>
c0023aed:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023af1:	83 c4 0c             	add    esp,0xc
c0023af4:	6a 05                	push   0x5
c0023af6:	56                   	push   esi
c0023af7:	53                   	push   ebx
c0023af8:	e8 f5 f6 ff ff       	call   c00231f2 <IDE::read(unsigned char, unsigned char)>
c0023afd:	83 c4 10             	add    esp,0x10
c0023b00:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023b04:	80 fa 14             	cmp    dl,0x14
c0023b07:	75 04                	jne    c0023b0d <IDE::detect()+0x2ad>
c0023b09:	3c eb                	cmp    al,0xeb
c0023b0b:	eb 07                	jmp    c0023b14 <IDE::detect()+0x2b4>
c0023b0d:	3c 96                	cmp    al,0x96
c0023b0f:	75 b8                	jne    c0023ac9 <IDE::detect()+0x269>
c0023b11:	80 fa 69             	cmp    dl,0x69
c0023b14:	75 b3                	jne    c0023ac9 <IDE::detect()+0x269>
c0023b16:	68 a1 00 00 00       	push   0xa1
c0023b1b:	6a 07                	push   0x7
c0023b1d:	56                   	push   esi
c0023b1e:	53                   	push   ebx
c0023b1f:	e8 0e f6 ff ff       	call   c0023132 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023b24:	5f                   	pop    edi
c0023b25:	58                   	pop    eax
c0023b26:	6a 00                	push   0x0
c0023b28:	68 40 42 0f 00       	push   0xf4240
c0023b2d:	e8 78 a8 ff ff       	call   c001e3aa <nanoSleep(unsigned long long)>
c0023b32:	83 c4 10             	add    esp,0x10
c0023b35:	b1 01                	mov    cl,0x1
c0023b37:	e9 4a fe ff ff       	jmp    c0023986 <IDE::detect()+0x126>
c0023b3c:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023b42:	5b                   	pop    ebx
c0023b43:	5e                   	pop    esi
c0023b44:	5f                   	pop    edi
c0023b45:	5d                   	pop    ebp
c0023b46:	c3                   	ret    
c0023b47:	90                   	nop

c0023b48 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023b48:	55                   	push   ebp
c0023b49:	57                   	push   edi
c0023b4a:	56                   	push   esi
c0023b4b:	53                   	push   ebx
c0023b4c:	83 ec 1c             	sub    esp,0x1c
c0023b4f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023b53:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023b57:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023b5b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023b5f:	88 c3                	mov    bl,al
c0023b61:	84 c0                	test   al,al
c0023b63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023b67:	0f 84 67 01 00 00    	je     c0023cd4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0023b6d:	83 ec 0c             	sub    esp,0xc
c0023b70:	68 43 cd 02 c0       	push   0xc002cd43
c0023b75:	e8 8d f3 fe ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0023b7a:	83 c4 10             	add    esp,0x10
c0023b7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023b81:	3c 01                	cmp    al,0x1
c0023b83:	75 17                	jne    c0023b9c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0023b85:	83 ec 0c             	sub    esp,0xc
c0023b88:	b3 13                	mov    bl,0x13
c0023b8a:	68 4f cd 02 c0       	push   0xc002cd4f
c0023b8f:	e8 73 f3 fe ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0023b94:	83 c4 10             	add    esp,0x10
c0023b97:	e9 25 01 00 00       	jmp    c0023cc1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b9c:	3c 02                	cmp    al,0x2
c0023b9e:	0f 85 ef 00 00 00    	jne    c0023c93 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0023ba4:	d1 e6                	shl    esi,1
c0023ba6:	09 ee                	or     esi,ebp
c0023ba8:	52                   	push   edx
c0023ba9:	89 f0                	mov    eax,esi
c0023bab:	6a 01                	push   0x1
c0023bad:	0f b6 f0             	movzx  esi,al
c0023bb0:	c1 e6 06             	shl    esi,0x6
c0023bb3:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023bbb:	50                   	push   eax
c0023bbc:	57                   	push   edi
c0023bbd:	e8 30 f6 ff ff       	call   c00231f2 <IDE::read(unsigned char, unsigned char)>
c0023bc2:	83 c4 10             	add    esp,0x10
c0023bc5:	89 c6                	mov    esi,eax
c0023bc7:	a8 01                	test   al,0x1
c0023bc9:	74 12                	je     c0023bdd <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0023bcb:	83 ec 0c             	sub    esp,0xc
c0023bce:	b3 07                	mov    bl,0x7
c0023bd0:	68 64 cd 02 c0       	push   0xc002cd64
c0023bd5:	e8 2d f3 fe ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0023bda:	83 c4 10             	add    esp,0x10
c0023bdd:	f7 c6 02 00 00 00    	test   esi,0x2
c0023be3:	74 12                	je     c0023bf7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0023be5:	83 ec 0c             	sub    esp,0xc
c0023be8:	b3 03                	mov    bl,0x3
c0023bea:	68 82 cd 02 c0       	push   0xc002cd82
c0023bef:	e8 13 f3 fe ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0023bf4:	83 c4 10             	add    esp,0x10
c0023bf7:	f7 c6 04 00 00 00    	test   esi,0x4
c0023bfd:	74 12                	je     c0023c11 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023bff:	83 ec 0c             	sub    esp,0xc
c0023c02:	b3 14                	mov    bl,0x14
c0023c04:	68 a2 cd 02 c0       	push   0xc002cda2
c0023c09:	e8 f9 f2 fe ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0023c0e:	83 c4 10             	add    esp,0x10
c0023c11:	f7 c6 08 00 00 00    	test   esi,0x8
c0023c17:	74 12                	je     c0023c2b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0023c19:	83 ec 0c             	sub    esp,0xc
c0023c1c:	b3 03                	mov    bl,0x3
c0023c1e:	68 82 cd 02 c0       	push   0xc002cd82
c0023c23:	e8 df f2 fe ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0023c28:	83 c4 10             	add    esp,0x10
c0023c2b:	f7 c6 10 00 00 00    	test   esi,0x10
c0023c31:	74 12                	je     c0023c45 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0023c33:	83 ec 0c             	sub    esp,0xc
c0023c36:	b3 15                	mov    bl,0x15
c0023c38:	68 ba cd 02 c0       	push   0xc002cdba
c0023c3d:	e8 c5 f2 fe ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0023c42:	83 c4 10             	add    esp,0x10
c0023c45:	f7 c6 20 00 00 00    	test   esi,0x20
c0023c4b:	74 12                	je     c0023c5f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0023c4d:	83 ec 0c             	sub    esp,0xc
c0023c50:	b3 03                	mov    bl,0x3
c0023c52:	68 82 cd 02 c0       	push   0xc002cd82
c0023c57:	e8 ab f2 fe ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0023c5c:	83 c4 10             	add    esp,0x10
c0023c5f:	f7 c6 40 00 00 00    	test   esi,0x40
c0023c65:	74 12                	je     c0023c79 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0023c67:	83 ec 0c             	sub    esp,0xc
c0023c6a:	b3 16                	mov    bl,0x16
c0023c6c:	68 d4 cd 02 c0       	push   0xc002cdd4
c0023c71:	e8 91 f2 fe ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0023c76:	83 c4 10             	add    esp,0x10
c0023c79:	89 f0                	mov    eax,esi
c0023c7b:	84 c0                	test   al,al
c0023c7d:	79 42                	jns    c0023cc1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023c7f:	83 ec 0c             	sub    esp,0xc
c0023c82:	b3 0d                	mov    bl,0xd
c0023c84:	68 f5 cd 02 c0       	push   0xc002cdf5
c0023c89:	e8 79 f2 fe ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0023c8e:	83 c4 10             	add    esp,0x10
c0023c91:	eb 2e                	jmp    c0023cc1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023c93:	3c 03                	cmp    al,0x3
c0023c95:	75 14                	jne    c0023cab <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0023c97:	83 ec 0c             	sub    esp,0xc
c0023c9a:	b3 17                	mov    bl,0x17
c0023c9c:	68 09 ce 02 c0       	push   0xc002ce09
c0023ca1:	e8 61 f2 fe ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0023ca6:	83 c4 10             	add    esp,0x10
c0023ca9:	eb 16                	jmp    c0023cc1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023cab:	3c 04                	cmp    al,0x4
c0023cad:	75 12                	jne    c0023cc1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023caf:	83 ec 0c             	sub    esp,0xc
c0023cb2:	b3 08                	mov    bl,0x8
c0023cb4:	68 1f ce 02 c0       	push   0xc002ce1f
c0023cb9:	e8 49 f2 fe ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0023cbe:	83 c4 10             	add    esp,0x10
c0023cc1:	50                   	push   eax
c0023cc2:	50                   	push   eax
c0023cc3:	0f b6 c3             	movzx  eax,bl
c0023cc6:	50                   	push   eax
c0023cc7:	68 37 ce 02 c0       	push   0xc002ce37
c0023ccc:	e8 36 f2 fe ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0023cd1:	83 c4 10             	add    esp,0x10
c0023cd4:	83 c4 1c             	add    esp,0x1c
c0023cd7:	88 d8                	mov    al,bl
c0023cd9:	5b                   	pop    ebx
c0023cda:	5e                   	pop    esi
c0023cdb:	5f                   	pop    edi
c0023cdc:	5d                   	pop    ebp
c0023cdd:	c3                   	ret    

c0023cde <IDE::polling(unsigned char, unsigned int)>:
c0023cde:	57                   	push   edi
c0023cdf:	56                   	push   esi
c0023ce0:	53                   	push   ebx
c0023ce1:	bb 04 00 00 00       	mov    ebx,0x4
c0023ce6:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023cea:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023cef:	52                   	push   edx
c0023cf0:	6a 0c                	push   0xc
c0023cf2:	56                   	push   esi
c0023cf3:	57                   	push   edi
c0023cf4:	e8 f9 f4 ff ff       	call   c00231f2 <IDE::read(unsigned char, unsigned char)>
c0023cf9:	83 c4 10             	add    esp,0x10
c0023cfc:	4b                   	dec    ebx
c0023cfd:	75 f0                	jne    c0023cef <IDE::polling(unsigned char, unsigned int)+0x11>
c0023cff:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023d04:	50                   	push   eax
c0023d05:	6a 0c                	push   0xc
c0023d07:	56                   	push   esi
c0023d08:	57                   	push   edi
c0023d09:	e8 e4 f4 ff ff       	call   c00231f2 <IDE::read(unsigned char, unsigned char)>
c0023d0e:	83 c4 10             	add    esp,0x10
c0023d11:	a8 01                	test   al,0x1
c0023d13:	74 12                	je     c0023d27 <IDE::polling(unsigned char, unsigned int)+0x49>
c0023d15:	83 ec 0c             	sub    esp,0xc
c0023d18:	68 51 ce 02 c0       	push   0xc002ce51
c0023d1d:	e8 e5 f1 fe ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0023d22:	83 c4 10             	add    esp,0x10
c0023d25:	eb 17                	jmp    c0023d3e <IDE::polling(unsigned char, unsigned int)+0x60>
c0023d27:	a8 20                	test   al,0x20
c0023d29:	75 0f                	jne    c0023d3a <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023d2b:	4b                   	dec    ebx
c0023d2c:	74 10                	je     c0023d3e <IDE::polling(unsigned char, unsigned int)+0x60>
c0023d2e:	84 c0                	test   al,al
c0023d30:	78 d2                	js     c0023d04 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023d32:	a8 08                	test   al,0x8
c0023d34:	74 ce                	je     c0023d04 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023d36:	31 c0                	xor    eax,eax
c0023d38:	eb 06                	jmp    c0023d40 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023d3a:	b0 01                	mov    al,0x1
c0023d3c:	eb 02                	jmp    c0023d40 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023d3e:	b0 02                	mov    al,0x2
c0023d40:	5b                   	pop    ebx
c0023d41:	5e                   	pop    esi
c0023d42:	5f                   	pop    edi
c0023d43:	c3                   	ret    

c0023d44 <SATABus::close(int, int, void*)>:
c0023d44:	31 c0                	xor    eax,eax
c0023d46:	c3                   	ret    
c0023d47:	90                   	nop

c0023d48 <SATABus::detect()>:
c0023d48:	c3                   	ret    
c0023d49:	90                   	nop

c0023d4a <SATABus::SATABus()>:
c0023d4a:	83 ec 0c             	sub    esp,0xc
c0023d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d51:	83 ec 08             	sub    esp,0x8
c0023d54:	68 94 ce 02 c0       	push   0xc002ce94
c0023d59:	50                   	push   eax
c0023d5a:	e8 61 09 ff ff       	call   c00146c0 <HardDiskController::HardDiskController(char const*)>
c0023d5f:	83 c4 10             	add    esp,0x10
c0023d62:	ba 50 cf 02 c0       	mov    edx,0xc002cf50
c0023d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d6b:	89 10                	mov    DWORD PTR [eax],edx
c0023d6d:	83 ec 0c             	sub    esp,0xc
c0023d70:	6a 50                	push   0x50
c0023d72:	e8 5b c2 fe ff       	call   c000ffd2 <Phys::allocateContiguousPages(int)>
c0023d77:	83 c4 10             	add    esp,0x10
c0023d7a:	89 c2                	mov    edx,eax
c0023d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d80:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023d86:	83 ec 0c             	sub    esp,0xc
c0023d89:	6a 50                	push   0x50
c0023d8b:	e8 bb dd fe ff       	call   c0011b4b <Virt::allocateKernelVirtualPages(int)>
c0023d90:	83 c4 10             	add    esp,0x10
c0023d93:	89 c2                	mov    edx,eax
c0023d95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d99:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023d9f:	e8 42 e0 fe ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0023da4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023da8:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023dae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023db2:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023db8:	83 ec 0c             	sub    esp,0xc
c0023dbb:	6a 03                	push   0x3
c0023dbd:	6a 50                	push   0x50
c0023dbf:	51                   	push   ecx
c0023dc0:	52                   	push   edx
c0023dc1:	50                   	push   eax
c0023dc2:	e8 8d e8 fe ff       	call   c0012654 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023dc7:	83 c4 20             	add    esp,0x20
c0023dca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023dce:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023dd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023dd8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023dde:	83 ec 04             	sub    esp,0x4
c0023de1:	52                   	push   edx
c0023de2:	50                   	push   eax
c0023de3:	68 b8 ce 02 c0       	push   0xc002ceb8
c0023de8:	e8 1a f1 fe ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0023ded:	83 c4 10             	add    esp,0x10
c0023df0:	90                   	nop
c0023df1:	83 c4 0c             	add    esp,0xc
c0023df4:	c3                   	ret    
c0023df5:	90                   	nop

c0023df6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023df6:	83 ec 0c             	sub    esp,0xc
c0023df9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023dfd:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023e00:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023e03:	09 c2                	or     edx,eax
c0023e05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e09:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023e0f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023e11:	31 c0                	xor    eax,eax
c0023e13:	c1 e9 08             	shr    ecx,0x8
c0023e16:	83 e1 0f             	and    ecx,0xf
c0023e19:	39 c8                	cmp    eax,ecx
c0023e1b:	74 0a                	je     c0023e27 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023e1d:	f6 c2 01             	test   dl,0x1
c0023e20:	74 18                	je     c0023e3a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023e22:	d1 ea                	shr    edx,1
c0023e24:	40                   	inc    eax
c0023e25:	eb f2                	jmp    c0023e19 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023e27:	83 ec 0c             	sub    esp,0xc
c0023e2a:	68 dc ce 02 c0       	push   0xc002cedc
c0023e2f:	e8 11 68 ff ff       	call   c001a645 <Krnl::panic(char const*)>
c0023e34:	83 c4 10             	add    esp,0x10
c0023e37:	83 c8 ff             	or     eax,0xffffffff
c0023e3a:	83 c4 0c             	add    esp,0xc
c0023e3d:	c3                   	ret    

c0023e3e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023e3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023e42:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023e45:	89 c2                	mov    edx,eax
c0023e47:	c1 ea 08             	shr    edx,0x8
c0023e4a:	83 e2 0f             	and    edx,0xf
c0023e4d:	fe ca                	dec    dl
c0023e4f:	75 31                	jne    c0023e82 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023e51:	83 e0 0f             	and    eax,0xf
c0023e54:	3c 03                	cmp    al,0x3
c0023e56:	75 2a                	jne    c0023e82 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023e58:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023e5b:	b8 02 00 00 00       	mov    eax,0x2
c0023e60:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023e66:	74 1c                	je     c0023e84 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023e68:	b8 04 00 00 00       	mov    eax,0x4
c0023e6d:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023e73:	74 0f                	je     c0023e84 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023e75:	31 c0                	xor    eax,eax
c0023e77:	83 fa 03             	cmp    edx,0x3
c0023e7a:	0f 94 c0             	sete   al
c0023e7d:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023e81:	c3                   	ret    
c0023e82:	31 c0                	xor    eax,eax
c0023e84:	c3                   	ret    
c0023e85:	90                   	nop

c0023e86 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023e86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023e8a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e8d:	0f ba e2 0f          	bt     edx,0xf
c0023e91:	72 f7                	jb     c0023e8a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023e93:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e96:	83 ca 10             	or     edx,0x10
c0023e99:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023e9c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e9f:	83 ca 01             	or     edx,0x1
c0023ea2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023ea5:	c3                   	ret    

c0023ea6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023ea6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023eaa:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023ead:	83 e2 fe             	and    edx,0xfffffffe
c0023eb0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023eb3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023eb6:	83 e2 ef             	and    edx,0xffffffef
c0023eb9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023ebc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023ebf:	0f ba e2 0e          	bt     edx,0xe
c0023ec3:	72 f7                	jb     c0023ebc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023ec5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023ec8:	0f ba e2 0f          	bt     edx,0xf
c0023ecc:	72 ee                	jb     c0023ebc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023ece:	c3                   	ret    
c0023ecf:	90                   	nop

c0023ed0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023ed0:	55                   	push   ebp
c0023ed1:	57                   	push   edi
c0023ed2:	56                   	push   esi
c0023ed3:	53                   	push   ebx
c0023ed4:	83 ec 1c             	sub    esp,0x1c
c0023ed7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023edb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023edf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023ee3:	53                   	push   ebx
c0023ee4:	89 fd                	mov    ebp,edi
c0023ee6:	56                   	push   esi
c0023ee7:	c1 e5 0a             	shl    ebp,0xa
c0023eea:	e8 b7 ff ff ff       	call   c0023ea6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023eef:	83 ec 0c             	sub    esp,0xc
c0023ef2:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023ef8:	01 e8                	add    eax,ebp
c0023efa:	89 03                	mov    DWORD PTR [ebx],eax
c0023efc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023efe:	68 00 04 00 00       	push   0x400
c0023f03:	6a 00                	push   0x0
c0023f05:	50                   	push   eax
c0023f06:	e8 75 c8 fd ff       	call   c0000780 <memset>
c0023f0b:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023f11:	89 fa                	mov    edx,edi
c0023f13:	01 e8                	add    eax,ebp
c0023f15:	c1 e7 0d             	shl    edi,0xd
c0023f18:	89 03                	mov    DWORD PTR [ebx],eax
c0023f1a:	c1 e2 08             	shl    edx,0x8
c0023f1d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023f24:	81 c2 00 80 00 00    	add    edx,0x8000
c0023f2a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023f2e:	89 d0                	mov    eax,edx
c0023f30:	83 c4 1c             	add    esp,0x1c
c0023f33:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023f39:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023f3c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023f3f:	68 00 01 00 00       	push   0x100
c0023f44:	6a 00                	push   0x0
c0023f46:	50                   	push   eax
c0023f47:	e8 34 c8 fd ff       	call   c0000780 <memset>
c0023f4c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023f50:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023f56:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023f5c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023f60:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023f63:	83 c4 10             	add    esp,0x10
c0023f66:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023f6d:	31 ff                	xor    edi,edi
c0023f6f:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023f75:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023f7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023f7f:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023f85:	83 c5 20             	add    ebp,0x20
c0023f88:	01 f8                	add    eax,edi
c0023f8a:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023f8d:	52                   	push   edx
c0023f8e:	68 00 01 00 00       	push   0x100
c0023f93:	6a 00                	push   0x0
c0023f95:	50                   	push   eax
c0023f96:	e8 e5 c7 fd ff       	call   c0000780 <memset>
c0023f9b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023f9f:	83 c4 10             	add    esp,0x10
c0023fa2:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023fa8:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023faf:	01 f8                	add    eax,edi
c0023fb1:	81 c7 00 01 00 00    	add    edi,0x100
c0023fb7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023fba:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023fc0:	75 b3                	jne    c0023f75 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023fc2:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023fc6:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023fca:	83 c4 1c             	add    esp,0x1c
c0023fcd:	5b                   	pop    ebx
c0023fce:	5e                   	pop    esi
c0023fcf:	5f                   	pop    edi
c0023fd0:	5d                   	pop    ebp
c0023fd1:	e9 b0 fe ff ff       	jmp    c0023e86 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023fd6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023fd6:	55                   	push   ebp
c0023fd7:	57                   	push   edi
c0023fd8:	56                   	push   esi
c0023fd9:	53                   	push   ebx
c0023fda:	31 db                	xor    ebx,ebx
c0023fdc:	83 ec 0c             	sub    esp,0xc
c0023fdf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023fe3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023fe7:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023fea:	f7 c7 01 00 00 00    	test   edi,0x1
c0023ff0:	0f 84 aa 00 00 00    	je     c00240a0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023ff6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023ffa:	89 d8                	mov    eax,ebx
c0023ffc:	c1 e0 07             	shl    eax,0x7
c0023fff:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0024006:	55                   	push   ebp
c0024007:	56                   	push   esi
c0024008:	e8 31 fe ff ff       	call   c0023e3e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c002400d:	5a                   	pop    edx
c002400e:	83 f8 01             	cmp    eax,0x1
c0024011:	59                   	pop    ecx
c0024012:	75 30                	jne    c0024044 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0024014:	50                   	push   eax
c0024015:	50                   	push   eax
c0024016:	53                   	push   ebx
c0024017:	68 01 cf 02 c0       	push   0xc002cf01
c002401c:	e8 e6 ee fe ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0024021:	83 c4 0c             	add    esp,0xc
c0024024:	53                   	push   ebx
c0024025:	55                   	push   ebp
c0024026:	56                   	push   esi
c0024027:	e8 a4 fe ff ff       	call   c0023ed0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002402c:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0024033:	e8 13 b8 fe ff       	call   c000f84b <malloc>
c0024038:	89 c5                	mov    ebp,eax
c002403a:	89 04 24             	mov    DWORD PTR [esp],eax
c002403d:	e8 60 0d 00 00       	call   c0024da2 <SATA::SATA()>
c0024042:	eb 33                	jmp    c0024077 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0024044:	83 f8 04             	cmp    eax,0x4
c0024047:	75 47                	jne    c0024090 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0024049:	50                   	push   eax
c002404a:	50                   	push   eax
c002404b:	53                   	push   ebx
c002404c:	68 18 cf 02 c0       	push   0xc002cf18
c0024051:	e8 b1 ee fe ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0024056:	83 c4 0c             	add    esp,0xc
c0024059:	53                   	push   ebx
c002405a:	55                   	push   ebp
c002405b:	56                   	push   esi
c002405c:	e8 6f fe ff ff       	call   c0023ed0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0024061:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0024068:	e8 de b7 fe ff       	call   c000f84b <malloc>
c002406d:	89 c5                	mov    ebp,eax
c002406f:	89 04 24             	mov    DWORD PTR [esp],eax
c0024072:	e8 d7 10 00 00       	call   c002514e <SATAPI::SATAPI()>
c0024077:	5a                   	pop    edx
c0024078:	59                   	pop    ecx
c0024079:	55                   	push   ebp
c002407a:	56                   	push   esi
c002407b:	e8 b4 02 ff ff       	call   c0014334 <Device::addChild(Device*)>
c0024080:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0024083:	56                   	push   esi
c0024084:	6a 00                	push   0x0
c0024086:	53                   	push   ebx
c0024087:	55                   	push   ebp
c0024088:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002408b:	83 c4 20             	add    esp,0x20
c002408e:	eb 10                	jmp    c00240a0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0024090:	50                   	push   eax
c0024091:	50                   	push   eax
c0024092:	53                   	push   ebx
c0024093:	68 31 cf 02 c0       	push   0xc002cf31
c0024098:	e8 6a ee fe ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c002409d:	83 c4 10             	add    esp,0x10
c00240a0:	d1 ef                	shr    edi,1
c00240a2:	43                   	inc    ebx
c00240a3:	83 fb 20             	cmp    ebx,0x20
c00240a6:	0f 85 3e ff ff ff    	jne    c0023fea <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c00240ac:	83 c4 0c             	add    esp,0xc
c00240af:	5b                   	pop    ebx
c00240b0:	5e                   	pop    esi
c00240b1:	5f                   	pop    edi
c00240b2:	5d                   	pop    ebp
c00240b3:	c3                   	ret    

c00240b4 <SATABus::open(int, int, void*)>:
c00240b4:	83 ec 14             	sub    esp,0x14
c00240b7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00240bb:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c00240c1:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00240c7:	52                   	push   edx
c00240c8:	50                   	push   eax
c00240c9:	e8 08 ff ff ff       	call   c0023fd6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c00240ce:	31 c0                	xor    eax,eax
c00240d0:	83 c4 1c             	add    esp,0x1c
c00240d3:	c3                   	ret    

c00240d4 <ATA::close(int, int, void*)>:
c00240d4:	83 ec 0c             	sub    esp,0xc
c00240d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00240db:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00240e1:	85 c0                	test   eax,eax
c00240e3:	74 0c                	je     c00240f1 <ATA::close(int, int, void*)+0x1d>
c00240e5:	83 ec 0c             	sub    esp,0xc
c00240e8:	8b 10                	mov    edx,DWORD PTR [eax]
c00240ea:	50                   	push   eax
c00240eb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00240ee:	83 c4 10             	add    esp,0x10
c00240f1:	31 c0                	xor    eax,eax
c00240f3:	83 c4 0c             	add    esp,0xc
c00240f6:	c3                   	ret    
c00240f7:	90                   	nop

c00240f8 <ATA::powerSaving(PowerSavingLevel)>:
c00240f8:	c3                   	ret    
c00240f9:	90                   	nop

c00240fa <ATA::ATA()>:
c00240fa:	83 ec 0c             	sub    esp,0xc
c00240fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024101:	83 ec 04             	sub    esp,0x4
c0024104:	68 00 02 00 00       	push   0x200
c0024109:	68 19 d0 02 c0       	push   0xc002d019
c002410e:	50                   	push   eax
c002410f:	e8 44 06 ff ff       	call   c0014758 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024114:	83 c4 10             	add    esp,0x10
c0024117:	ba 9c cf 02 c0       	mov    edx,0xc002cf9c
c002411c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024120:	89 10                	mov    DWORD PTR [eax],edx
c0024122:	90                   	nop
c0024123:	83 c4 0c             	add    esp,0xc
c0024126:	c3                   	ret    
c0024127:	90                   	nop

c0024128 <ATA::flush(bool)>:
c0024128:	53                   	push   ebx
c0024129:	83 ec 08             	sub    esp,0x8
c002412c:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0024131:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024135:	19 c0                	sbb    eax,eax
c0024137:	83 e0 fd             	and    eax,0xfffffffd
c002413a:	05 ea 00 00 00       	add    eax,0xea
c002413f:	50                   	push   eax
c0024140:	6a 07                	push   0x7
c0024142:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024149:	50                   	push   eax
c002414a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024150:	e8 dd ef ff ff       	call   c0023132 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024155:	83 c4 0c             	add    esp,0xc
c0024158:	6a 00                	push   0x0
c002415a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024161:	50                   	push   eax
c0024162:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024168:	e8 71 fb ff ff       	call   c0023cde <IDE::polling(unsigned char, unsigned int)>
c002416d:	83 c4 18             	add    esp,0x18
c0024170:	5b                   	pop    ebx
c0024171:	c3                   	ret    

c0024172 <ATA::readyForCommand()>:
c0024172:	56                   	push   esi
c0024173:	53                   	push   ebx
c0024174:	31 db                	xor    ebx,ebx
c0024176:	50                   	push   eax
c0024177:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002417b:	50                   	push   eax
c002417c:	6a 0c                	push   0xc
c002417e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024185:	50                   	push   eax
c0024186:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002418c:	e8 61 f0 ff ff       	call   c00231f2 <IDE::read(unsigned char, unsigned char)>
c0024191:	83 c4 10             	add    esp,0x10
c0024194:	a8 88                	test   al,0x88
c0024196:	74 23                	je     c00241bb <ATA::readyForCommand()+0x49>
c0024198:	43                   	inc    ebx
c0024199:	83 fb 63             	cmp    ebx,0x63
c002419c:	7e dd                	jle    c002417b <ATA::readyForCommand()+0x9>
c002419e:	51                   	push   ecx
c002419f:	51                   	push   ecx
c00241a0:	6a 00                	push   0x0
c00241a2:	68 40 42 0f 00       	push   0xf4240
c00241a7:	e8 fe a1 ff ff       	call   c001e3aa <nanoSleep(unsigned long long)>
c00241ac:	83 c4 10             	add    esp,0x10
c00241af:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00241b5:	75 c4                	jne    c002417b <ATA::readyForCommand()+0x9>
c00241b7:	31 c0                	xor    eax,eax
c00241b9:	eb 02                	jmp    c00241bd <ATA::readyForCommand()+0x4b>
c00241bb:	b0 01                	mov    al,0x1
c00241bd:	5a                   	pop    edx
c00241be:	5b                   	pop    ebx
c00241bf:	5e                   	pop    esi
c00241c0:	c3                   	ret    
c00241c1:	90                   	nop

c00241c2 <ATA::access(unsigned long long, int, void*, bool)>:
c00241c2:	55                   	push   ebp
c00241c3:	57                   	push   edi
c00241c4:	56                   	push   esi
c00241c5:	53                   	push   ebx
c00241c6:	83 ec 2c             	sub    esp,0x2c
c00241c9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00241cd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00241d1:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00241d5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00241d9:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00241dd:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00241e1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00241e5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00241eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00241ef:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00241f5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00241f9:	c1 e0 06             	shl    eax,0x6
c00241fc:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0024204:	74 5d                	je     c0024263 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0024206:	89 fa                	mov    edx,edi
c0024208:	89 f0                	mov    eax,esi
c002420a:	0f ac d0 1c          	shrd   eax,edx,0x1c
c002420e:	c1 ea 1c             	shr    edx,0x1c
c0024211:	89 d1                	mov    ecx,edx
c0024213:	09 c1                	or     ecx,eax
c0024215:	74 25                	je     c002423c <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0024217:	31 ed                	xor    ebp,ebp
c0024219:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0024220:	89 fa                	mov    edx,edi
c0024222:	89 f0                	mov    eax,esi
c0024224:	0f ad d0             	shrd   eax,edx,cl
c0024227:	d3 ea                	shr    edx,cl
c0024229:	f6 c1 20             	test   cl,0x20
c002422c:	74 02                	je     c0024230 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c002422e:	89 d0                	mov    eax,edx
c0024230:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0024234:	45                   	inc    ebp
c0024235:	83 fd 06             	cmp    ebp,0x6
c0024238:	75 df                	jne    c0024219 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c002423a:	eb 76                	jmp    c00242b2 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c002423c:	89 f0                	mov    eax,esi
c002423e:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0024243:	89 fa                	mov    edx,edi
c0024245:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002424c:	0f ac d0 10          	shrd   eax,edx,0x10
c0024250:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024255:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0024259:	c1 ee 18             	shr    esi,0x18
c002425c:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0024261:	eb 56                	jmp    c00242b9 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024263:	6a 00                	push   0x0
c0024265:	6a 3f                	push   0x3f
c0024267:	57                   	push   edi
c0024268:	56                   	push   esi
c0024269:	e8 96 29 00 00       	call   c0026c04 <__umoddi3>
c002426e:	83 c4 10             	add    esp,0x10
c0024271:	40                   	inc    eax
c0024272:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0024276:	6a 00                	push   0x0
c0024278:	68 f0 03 00 00       	push   0x3f0
c002427d:	57                   	push   edi
c002427e:	56                   	push   esi
c002427f:	e8 80 28 00 00       	call   c0026b04 <__udivdi3>
c0024284:	83 c4 10             	add    esp,0x10
c0024287:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c002428c:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024293:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024298:	6a 00                	push   0x0
c002429a:	6a 3f                	push   0x3f
c002429c:	57                   	push   edi
c002429d:	56                   	push   esi
c002429e:	e8 61 28 00 00       	call   c0026b04 <__udivdi3>
c00242a3:	83 c4 10             	add    esp,0x10
c00242a6:	89 c6                	mov    esi,eax
c00242a8:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c00242ad:	83 e6 0f             	and    esi,0xf
c00242b0:	eb 07                	jmp    c00242b9 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00242b2:	31 f6                	xor    esi,esi
c00242b4:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c00242b9:	bf 01 00 00 00       	mov    edi,0x1
c00242be:	50                   	push   eax
c00242bf:	6a 00                	push   0x0
c00242c1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242c8:	50                   	push   eax
c00242c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00242cd:	e8 6c f0 ff ff       	call   c002333e <IDE::enableIRQs(unsigned char, bool)>
c00242d2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00242d5:	e8 98 fe ff ff       	call   c0024172 <ATA::readyForCommand()>
c00242da:	83 c4 10             	add    esp,0x10
c00242dd:	84 c0                	test   al,al
c00242df:	0f 84 5a 02 00 00    	je     c002453f <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c00242e5:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00242eb:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00242f1:	c1 e0 04             	shl    eax,0x4
c00242f4:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c00242fb:	09 c6                	or     esi,eax
c00242fd:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024302:	75 05                	jne    c0024309 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0024304:	83 ce a0             	or     esi,0xffffffa0
c0024307:	eb 03                	jmp    c002430c <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0024309:	83 ce e0             	or     esi,0xffffffe0
c002430c:	89 f0                	mov    eax,esi
c002430e:	0f b6 f0             	movzx  esi,al
c0024311:	56                   	push   esi
c0024312:	6a 06                	push   0x6
c0024314:	51                   	push   ecx
c0024315:	52                   	push   edx
c0024316:	e8 17 ee ff ff       	call   c0023132 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002431b:	83 c4 10             	add    esp,0x10
c002431e:	6a 00                	push   0x0
c0024320:	6a 01                	push   0x1
c0024322:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024329:	50                   	push   eax
c002432a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024330:	e8 fd ed ff ff       	call   c0023132 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024335:	83 c4 10             	add    esp,0x10
c0024338:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002433d:	75 6e                	jne    c00243ad <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c002433f:	6a 00                	push   0x0
c0024341:	6a 08                	push   0x8
c0024343:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002434a:	50                   	push   eax
c002434b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024351:	e8 dc ed ff ff       	call   c0023132 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024356:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002435b:	50                   	push   eax
c002435c:	6a 09                	push   0x9
c002435e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024365:	50                   	push   eax
c0024366:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002436c:	e8 c1 ed ff ff       	call   c0023132 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024371:	83 c4 20             	add    esp,0x20
c0024374:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024379:	50                   	push   eax
c002437a:	6a 0a                	push   0xa
c002437c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024383:	50                   	push   eax
c0024384:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002438a:	e8 a3 ed ff ff       	call   c0023132 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002438f:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024394:	50                   	push   eax
c0024395:	6a 0b                	push   0xb
c0024397:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002439e:	50                   	push   eax
c002439f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243a5:	e8 88 ed ff ff       	call   c0023132 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243aa:	83 c4 20             	add    esp,0x20
c00243ad:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c00243b2:	50                   	push   eax
c00243b3:	6a 02                	push   0x2
c00243b5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243bc:	50                   	push   eax
c00243bd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243c3:	e8 6a ed ff ff       	call   c0023132 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243c8:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c00243cd:	50                   	push   eax
c00243ce:	6a 03                	push   0x3
c00243d0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243d7:	50                   	push   eax
c00243d8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243de:	e8 4f ed ff ff       	call   c0023132 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243e3:	83 c4 20             	add    esp,0x20
c00243e6:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00243eb:	50                   	push   eax
c00243ec:	6a 04                	push   0x4
c00243ee:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243f5:	50                   	push   eax
c00243f6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243fc:	e8 31 ed ff ff       	call   c0023132 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024401:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024406:	50                   	push   eax
c0024407:	6a 05                	push   0x5
c0024409:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024410:	50                   	push   eax
c0024411:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024417:	e8 16 ed ff ff       	call   c0023132 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002441c:	83 c4 20             	add    esp,0x20
c002441f:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024424:	0f 94 c0             	sete   al
c0024427:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002442c:	74 09                	je     c0024437 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c002442e:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024435:	eb 07                	jmp    c002443e <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0024437:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c002443e:	0f b6 c0             	movzx  eax,al
c0024441:	50                   	push   eax
c0024442:	6a 07                	push   0x7
c0024444:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002444b:	50                   	push   eax
c002444c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024452:	e8 db ec ff ff       	call   c0023132 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024457:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002445b:	83 c4 10             	add    esp,0x10
c002445e:	85 f6                	test   esi,esi
c0024460:	0f 84 ba 00 00 00    	je     c0024520 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0024466:	50                   	push   eax
c0024467:	6a 01                	push   0x1
c0024469:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024470:	50                   	push   eax
c0024471:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024477:	e8 62 f8 ff ff       	call   c0023cde <IDE::polling(unsigned char, unsigned int)>
c002447c:	83 c4 10             	add    esp,0x10
c002447f:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024485:	84 c0                	test   al,al
c0024487:	74 2c                	je     c00244b5 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024489:	0f b6 f8             	movzx  edi,al
c002448c:	0f b6 d2             	movzx  edx,dl
c002448f:	57                   	push   edi
c0024490:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024497:	50                   	push   eax
c0024498:	52                   	push   edx
c0024499:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002449f:	e8 a4 f6 ff ff       	call   c0023b48 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00244a4:	c7 04 24 74 cf 02 c0 	mov    DWORD PTR [esp],0xc002cf74
c00244ab:	e8 57 ea fe ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c00244b0:	e9 87 00 00 00       	jmp    c002453c <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c00244b5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00244ba:	74 33                	je     c00244ef <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c00244bc:	31 ed                	xor    ebp,ebp
c00244be:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00244c2:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c00244c6:	50                   	push   eax
c00244c7:	50                   	push   eax
c00244c8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00244cf:	50                   	push   eax
c00244d0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00244d6:	e8 45 ec ff ff       	call   c0023120 <IDE::getBase(unsigned char)>
c00244db:	89 c2                	mov    edx,eax
c00244dd:	89 f8                	mov    eax,edi
c00244df:	66 ef                	out    dx,ax
c00244e1:	45                   	inc    ebp
c00244e2:	83 c4 10             	add    esp,0x10
c00244e5:	81 fd 00 01 00 00    	cmp    ebp,0x100
c00244eb:	75 d1                	jne    c00244be <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c00244ed:	eb 23                	jmp    c0024512 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c00244ef:	0f b6 d2             	movzx  edx,dl
c00244f2:	51                   	push   ecx
c00244f3:	51                   	push   ecx
c00244f4:	52                   	push   edx
c00244f5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00244fb:	e8 20 ec ff ff       	call   c0023120 <IDE::getBase(unsigned char)>
c0024500:	b9 00 01 00 00       	mov    ecx,0x100
c0024505:	89 c2                	mov    edx,eax
c0024507:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002450b:	fc                   	cld    
c002450c:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002450f:	83 c4 10             	add    esp,0x10
c0024512:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002451a:	4e                   	dec    esi
c002451b:	e9 3e ff ff ff       	jmp    c002445e <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024520:	31 ff                	xor    edi,edi
c0024522:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024527:	74 16                	je     c002453f <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024529:	50                   	push   eax
c002452a:	50                   	push   eax
c002452b:	31 c0                	xor    eax,eax
c002452d:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024532:	0f 94 c0             	sete   al
c0024535:	50                   	push   eax
c0024536:	53                   	push   ebx
c0024537:	e8 ec fb ff ff       	call   c0024128 <ATA::flush(bool)>
c002453c:	83 c4 10             	add    esp,0x10
c002453f:	83 c4 2c             	add    esp,0x2c
c0024542:	89 f8                	mov    eax,edi
c0024544:	5b                   	pop    ebx
c0024545:	5e                   	pop    esi
c0024546:	5f                   	pop    edi
c0024547:	5d                   	pop    ebp
c0024548:	c3                   	ret    
c0024549:	90                   	nop

c002454a <ATA::read(unsigned long long, int, void*)>:
c002454a:	57                   	push   edi
c002454b:	b8 04 00 00 00       	mov    eax,0x4
c0024550:	56                   	push   esi
c0024551:	53                   	push   ebx
c0024552:	83 ec 10             	sub    esp,0x10
c0024555:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024559:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002455d:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024560:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024564:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024568:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002456e:	77 3b                	ja     c00245ab <ATA::read(unsigned long long, int, void*)+0x61>
c0024570:	b8 06 00 00 00       	mov    eax,0x6
c0024575:	85 d2                	test   edx,edx
c0024577:	74 32                	je     c00245ab <ATA::read(unsigned long long, int, void*)+0x61>
c0024579:	50                   	push   eax
c002457a:	50                   	push   eax
c002457b:	6a 00                	push   0x0
c002457d:	52                   	push   edx
c002457e:	53                   	push   ebx
c002457f:	57                   	push   edi
c0024580:	56                   	push   esi
c0024581:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024585:	e8 38 fc ff ff       	call   c00241c2 <ATA::access(unsigned long long, int, void*, bool)>
c002458a:	83 c4 20             	add    esp,0x20
c002458d:	85 c0                	test   eax,eax
c002458f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024593:	75 11                	jne    c00245a6 <ATA::read(unsigned long long, int, void*)+0x5c>
c0024595:	01 1d 28 29 03 c0    	add    DWORD PTR ds:0xc0032928,ebx
c002459b:	e8 00 c4 fe ff       	call   c00109a0 <VgaText::updateDiskUsage()>
c00245a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00245a4:	eb 05                	jmp    c00245ab <ATA::read(unsigned long long, int, void*)+0x61>
c00245a6:	b8 01 00 00 00       	mov    eax,0x1
c00245ab:	83 c4 10             	add    esp,0x10
c00245ae:	5b                   	pop    ebx
c00245af:	5e                   	pop    esi
c00245b0:	5f                   	pop    edi
c00245b1:	c3                   	ret    

c00245b2 <ATA::write(unsigned long long, int, void*)>:
c00245b2:	57                   	push   edi
c00245b3:	b8 04 00 00 00       	mov    eax,0x4
c00245b8:	56                   	push   esi
c00245b9:	53                   	push   ebx
c00245ba:	83 ec 10             	sub    esp,0x10
c00245bd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00245c1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00245c5:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00245c8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00245cc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00245d0:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00245d6:	77 3b                	ja     c0024613 <ATA::write(unsigned long long, int, void*)+0x61>
c00245d8:	b8 06 00 00 00       	mov    eax,0x6
c00245dd:	85 d2                	test   edx,edx
c00245df:	74 32                	je     c0024613 <ATA::write(unsigned long long, int, void*)+0x61>
c00245e1:	50                   	push   eax
c00245e2:	50                   	push   eax
c00245e3:	6a 01                	push   0x1
c00245e5:	52                   	push   edx
c00245e6:	53                   	push   ebx
c00245e7:	57                   	push   edi
c00245e8:	56                   	push   esi
c00245e9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00245ed:	e8 d0 fb ff ff       	call   c00241c2 <ATA::access(unsigned long long, int, void*, bool)>
c00245f2:	83 c4 20             	add    esp,0x20
c00245f5:	85 c0                	test   eax,eax
c00245f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00245fb:	75 11                	jne    c002460e <ATA::write(unsigned long long, int, void*)+0x5c>
c00245fd:	01 1d 24 29 03 c0    	add    DWORD PTR ds:0xc0032924,ebx
c0024603:	e8 98 c3 fe ff       	call   c00109a0 <VgaText::updateDiskUsage()>
c0024608:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002460c:	eb 05                	jmp    c0024613 <ATA::write(unsigned long long, int, void*)+0x61>
c002460e:	b8 01 00 00 00       	mov    eax,0x1
c0024613:	83 c4 10             	add    esp,0x10
c0024616:	5b                   	pop    ebx
c0024617:	5e                   	pop    esi
c0024618:	5f                   	pop    edi
c0024619:	c3                   	ret    

c002461a <ATA::detectCHS()>:
c002461a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002461e:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024624:	c1 e0 06             	shl    eax,0x6
c0024627:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002462d:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024637:	c7 44 24 04 7f cf 02 c0 	mov    DWORD PTR [esp+0x4],0xc002cf7f
c002463f:	e9 01 60 ff ff       	jmp    c001a645 <Krnl::panic(char const*)>

c0024644 <ATA::open(int, int, void*)>:
c0024644:	53                   	push   ebx
c0024645:	83 ec 08             	sub    esp,0x8
c0024648:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002464c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024650:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024654:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002465a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024660:	c1 e0 06             	shl    eax,0x6
c0024663:	01 d0                	add    eax,edx
c0024665:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c002466c:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024672:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024679:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024683:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024689:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024690:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024697:	75 0c                	jne    c00246a5 <ATA::open(int, int, void*)+0x61>
c0024699:	83 ec 0c             	sub    esp,0xc
c002469c:	53                   	push   ebx
c002469d:	e8 78 ff ff ff       	call   c002461a <ATA::detectCHS()>
c00246a2:	83 c4 10             	add    esp,0x10
c00246a5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00246ab:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00246b1:	c1 e0 06             	shl    eax,0x6
c00246b4:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00246bb:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00246c5:	d1 e8                	shr    eax,1
c00246c7:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00246cd:	6a 04                	push   0x4
c00246cf:	6a 0c                	push   0xc
c00246d1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00246d8:	50                   	push   eax
c00246d9:	52                   	push   edx
c00246da:	e8 53 ea ff ff       	call   c0023132 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246df:	90                   	nop
c00246e0:	90                   	nop
c00246e1:	6a 00                	push   0x0
c00246e3:	6a 0c                	push   0xc
c00246e5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00246ec:	50                   	push   eax
c00246ed:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00246f3:	e8 3a ea ff ff       	call   c0023132 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246f8:	83 c4 14             	add    esp,0x14
c00246fb:	53                   	push   ebx
c00246fc:	e8 bf 00 ff ff       	call   c00147c0 <PhysicalDisk::startCache()>
c0024701:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024704:	e8 a7 22 ff ff       	call   c00169b0 <createPartitionsForDisk(PhysicalDisk*)>
c0024709:	31 c0                	xor    eax,eax
c002470b:	83 c4 18             	add    esp,0x18
c002470e:	5b                   	pop    ebx
c002470f:	c3                   	ret    

c0024710 <ATAPI::write(unsigned long long, int, void*)>:
c0024710:	b8 03 00 00 00       	mov    eax,0x3
c0024715:	c3                   	ret    

c0024716 <ATAPI::close(int, int, void*)>:
c0024716:	83 ec 0c             	sub    esp,0xc
c0024719:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002471d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024723:	85 c0                	test   eax,eax
c0024725:	74 0c                	je     c0024733 <ATAPI::close(int, int, void*)+0x1d>
c0024727:	83 ec 0c             	sub    esp,0xc
c002472a:	8b 10                	mov    edx,DWORD PTR [eax]
c002472c:	50                   	push   eax
c002472d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024730:	83 c4 10             	add    esp,0x10
c0024733:	31 c0                	xor    eax,eax
c0024735:	83 c4 0c             	add    esp,0xc
c0024738:	c3                   	ret    
c0024739:	90                   	nop

c002473a <ATAPI::ATAPI()>:
c002473a:	83 ec 0c             	sub    esp,0xc
c002473d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024741:	83 ec 04             	sub    esp,0x4
c0024744:	68 00 08 00 00       	push   0x800
c0024749:	68 b9 d0 02 c0       	push   0xc002d0b9
c002474e:	50                   	push   eax
c002474f:	e8 04 00 ff ff       	call   c0014758 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024754:	83 c4 10             	add    esp,0x10
c0024757:	ba d4 cf 02 c0       	mov    edx,0xc002cfd4
c002475c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024760:	89 10                	mov    DWORD PTR [eax],edx
c0024762:	90                   	nop
c0024763:	83 c4 0c             	add    esp,0xc
c0024766:	c3                   	ret    
c0024767:	90                   	nop

c0024768 <ATAPI::readyForCommand()>:
c0024768:	56                   	push   esi
c0024769:	53                   	push   ebx
c002476a:	31 db                	xor    ebx,ebx
c002476c:	50                   	push   eax
c002476d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024771:	50                   	push   eax
c0024772:	6a 0c                	push   0xc
c0024774:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002477b:	50                   	push   eax
c002477c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024782:	e8 6b ea ff ff       	call   c00231f2 <IDE::read(unsigned char, unsigned char)>
c0024787:	83 c4 10             	add    esp,0x10
c002478a:	a8 88                	test   al,0x88
c002478c:	74 23                	je     c00247b1 <ATAPI::readyForCommand()+0x49>
c002478e:	43                   	inc    ebx
c002478f:	83 fb 63             	cmp    ebx,0x63
c0024792:	7e dd                	jle    c0024771 <ATAPI::readyForCommand()+0x9>
c0024794:	51                   	push   ecx
c0024795:	51                   	push   ecx
c0024796:	6a 00                	push   0x0
c0024798:	68 40 42 0f 00       	push   0xf4240
c002479d:	e8 08 9c ff ff       	call   c001e3aa <nanoSleep(unsigned long long)>
c00247a2:	83 c4 10             	add    esp,0x10
c00247a5:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00247ab:	75 c4                	jne    c0024771 <ATAPI::readyForCommand()+0x9>
c00247ad:	31 c0                	xor    eax,eax
c00247af:	eb 02                	jmp    c00247b3 <ATAPI::readyForCommand()+0x4b>
c00247b1:	b0 01                	mov    al,0x1
c00247b3:	5a                   	pop    edx
c00247b4:	5b                   	pop    ebx
c00247b5:	5e                   	pop    esi
c00247b6:	c3                   	ret    
c00247b7:	90                   	nop

c00247b8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00247b8:	55                   	push   ebp
c00247b9:	57                   	push   edi
c00247ba:	56                   	push   esi
c00247bb:	53                   	push   ebx
c00247bc:	83 ec 20             	sub    esp,0x20
c00247bf:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00247c3:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00247c7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00247cb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00247cf:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00247d3:	6a 01                	push   0x1
c00247d5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247dc:	50                   	push   eax
c00247dd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247e3:	e8 56 eb ff ff       	call   c002333e <IDE::enableIRQs(unsigned char, bool)>
c00247e8:	5e                   	pop    esi
c00247e9:	58                   	pop    eax
c00247ea:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247f1:	50                   	push   eax
c00247f2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247f8:	e8 0f e9 ff ff       	call   c002310c <IDE::prepareInterrupt(unsigned char)>
c00247fd:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024800:	e8 63 ff ff ff       	call   c0024768 <ATAPI::readyForCommand()>
c0024805:	83 c4 10             	add    esp,0x10
c0024808:	84 c0                	test   al,al
c002480a:	75 0a                	jne    c0024816 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c002480c:	bb 01 00 00 00       	mov    ebx,0x1
c0024811:	e9 57 02 00 00       	jmp    c0024a6d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024816:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c002481c:	c1 e0 04             	shl    eax,0x4
c002481f:	0f b6 c0             	movzx  eax,al
c0024822:	50                   	push   eax
c0024823:	6a 06                	push   0x6
c0024825:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002482c:	50                   	push   eax
c002482d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024833:	e8 fa e8 ff ff       	call   c0023132 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024838:	6a 00                	push   0x0
c002483a:	6a 01                	push   0x1
c002483c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024843:	50                   	push   eax
c0024844:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002484a:	e8 e3 e8 ff ff       	call   c0023132 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002484f:	83 c4 20             	add    esp,0x20
c0024852:	0f b6 c3             	movzx  eax,bl
c0024855:	0f b6 df             	movzx  ebx,bh
c0024858:	50                   	push   eax
c0024859:	6a 04                	push   0x4
c002485b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024862:	50                   	push   eax
c0024863:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024869:	e8 c4 e8 ff ff       	call   c0023132 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002486e:	53                   	push   ebx
c002486f:	6a 05                	push   0x5
c0024871:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024878:	50                   	push   eax
c0024879:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002487f:	e8 ae e8 ff ff       	call   c0023132 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024884:	83 c4 20             	add    esp,0x20
c0024887:	68 a0 00 00 00       	push   0xa0
c002488c:	6a 07                	push   0x7
c002488e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024895:	50                   	push   eax
c0024896:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002489c:	e8 91 e8 ff ff       	call   c0023132 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00248a1:	83 c4 0c             	add    esp,0xc
c00248a4:	6a 01                	push   0x1
c00248a6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248ad:	50                   	push   eax
c00248ae:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248b4:	e8 25 f4 ff ff       	call   c0023cde <IDE::polling(unsigned char, unsigned int)>
c00248b9:	83 c4 10             	add    esp,0x10
c00248bc:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c00248c2:	84 c0                	test   al,al
c00248c4:	74 23                	je     c00248e9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c00248c6:	0f b6 d8             	movzx  ebx,al
c00248c9:	0f b6 d2             	movzx  edx,dl
c00248cc:	53                   	push   ebx
c00248cd:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c00248d4:	50                   	push   eax
c00248d5:	52                   	push   edx
c00248d6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248dc:	e8 67 f2 ff ff       	call   c0023b48 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00248e1:	83 c4 10             	add    esp,0x10
c00248e4:	e9 84 01 00 00       	jmp    c0024a6d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00248e9:	0f b6 d2             	movzx  edx,dl
c00248ec:	53                   	push   ebx
c00248ed:	53                   	push   ebx
c00248ee:	52                   	push   edx
c00248ef:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248f5:	e8 26 e8 ff ff       	call   c0023120 <IDE::getBase(unsigned char)>
c00248fa:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00248fe:	b9 06 00 00 00       	mov    ecx,0x6
c0024903:	89 c2                	mov    edx,eax
c0024905:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024908:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002490c:	83 c4 10             	add    esp,0x10
c002490f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024915:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002491c:	85 db                	test   ebx,ebx
c002491e:	0f 84 ec 00 00 00    	je     c0024a10 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024924:	51                   	push   ecx
c0024925:	51                   	push   ecx
c0024926:	52                   	push   edx
c0024927:	50                   	push   eax
c0024928:	e8 73 e9 ff ff       	call   c00232a0 <IDE::waitInterrupt(unsigned char)>
c002492d:	83 c4 10             	add    esp,0x10
c0024930:	84 c0                	test   al,al
c0024932:	0f 84 d4 fe ff ff    	je     c002480c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024938:	56                   	push   esi
c0024939:	56                   	push   esi
c002493a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024941:	50                   	push   eax
c0024942:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024948:	e8 bf e7 ff ff       	call   c002310c <IDE::prepareInterrupt(unsigned char)>
c002494d:	83 c4 0c             	add    esp,0xc
c0024950:	6a 04                	push   0x4
c0024952:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024959:	50                   	push   eax
c002495a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024960:	e8 8d e8 ff ff       	call   c00231f2 <IDE::read(unsigned char, unsigned char)>
c0024965:	83 c4 0c             	add    esp,0xc
c0024968:	89 c6                	mov    esi,eax
c002496a:	6a 05                	push   0x5
c002496c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024973:	50                   	push   eax
c0024974:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002497a:	e8 73 e8 ff ff       	call   c00231f2 <IDE::read(unsigned char, unsigned char)>
c002497f:	89 f1                	mov    ecx,esi
c0024981:	0f b6 c0             	movzx  eax,al
c0024984:	0f b6 f1             	movzx  esi,cl
c0024987:	c1 e0 08             	shl    eax,0x8
c002498a:	09 c6                	or     esi,eax
c002498c:	d1 fe                	sar    esi,1
c002498e:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0024992:	83 c4 10             	add    esp,0x10
c0024995:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c002499a:	74 41                	je     c00249dd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c002499c:	31 c9                	xor    ecx,ecx
c002499e:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00249a4:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00249ab:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00249af:	75 0a                	jne    c00249bb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00249b1:	01 c9                	add    ecx,ecx
c00249b3:	01 cd                	add    ebp,ecx
c00249b5:	4b                   	dec    ebx
c00249b6:	e9 54 ff ff ff       	jmp    c002490f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00249bb:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00249c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00249c4:	51                   	push   ecx
c00249c5:	51                   	push   ecx
c00249c6:	52                   	push   edx
c00249c7:	50                   	push   eax
c00249c8:	e8 53 e7 ff ff       	call   c0023120 <IDE::getBase(unsigned char)>
c00249cd:	89 c2                	mov    edx,eax
c00249cf:	89 f0                	mov    eax,esi
c00249d1:	66 ef                	out    dx,ax
c00249d3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00249d7:	83 c4 10             	add    esp,0x10
c00249da:	41                   	inc    ecx
c00249db:	eb c1                	jmp    c002499e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c00249dd:	31 f6                	xor    esi,esi
c00249df:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00249e5:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00249ec:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00249f0:	75 06                	jne    c00249f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00249f2:	01 f6                	add    esi,esi
c00249f4:	01 f5                	add    ebp,esi
c00249f6:	eb bd                	jmp    c00249b5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00249f8:	51                   	push   ecx
c00249f9:	51                   	push   ecx
c00249fa:	52                   	push   edx
c00249fb:	50                   	push   eax
c00249fc:	e8 1f e7 ff ff       	call   c0023120 <IDE::getBase(unsigned char)>
c0024a01:	89 c2                	mov    edx,eax
c0024a03:	66 ed                	in     ax,dx
c0024a05:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0024a0a:	83 c4 10             	add    esp,0x10
c0024a0d:	46                   	inc    esi
c0024a0e:	eb cf                	jmp    c00249df <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0024a10:	51                   	push   ecx
c0024a11:	51                   	push   ecx
c0024a12:	52                   	push   edx
c0024a13:	50                   	push   eax
c0024a14:	e8 87 e8 ff ff       	call   c00232a0 <IDE::waitInterrupt(unsigned char)>
c0024a19:	83 c4 10             	add    esp,0x10
c0024a1c:	84 c0                	test   al,al
c0024a1e:	0f 84 e8 fd ff ff    	je     c002480c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024a24:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024a29:	52                   	push   edx
c0024a2a:	52                   	push   edx
c0024a2b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024a32:	50                   	push   eax
c0024a33:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024a39:	e8 ce e6 ff ff       	call   c002310c <IDE::prepareInterrupt(unsigned char)>
c0024a3e:	83 c4 10             	add    esp,0x10
c0024a41:	50                   	push   eax
c0024a42:	50                   	push   eax
c0024a43:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024a4a:	50                   	push   eax
c0024a4b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024a51:	e8 ca e6 ff ff       	call   c0023120 <IDE::getBase(unsigned char)>
c0024a56:	8d 50 07             	lea    edx,[eax+0x7]
c0024a59:	ec                   	in     al,dx
c0024a5a:	83 c4 10             	add    esp,0x10
c0024a5d:	a8 88                	test   al,0x88
c0024a5f:	74 0a                	je     c0024a6b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0024a61:	4b                   	dec    ebx
c0024a62:	75 dd                	jne    c0024a41 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0024a64:	bb 02 00 00 00       	mov    ebx,0x2
c0024a69:	eb 02                	jmp    c0024a6d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024a6b:	31 db                	xor    ebx,ebx
c0024a6d:	83 c4 1c             	add    esp,0x1c
c0024a70:	89 d8                	mov    eax,ebx
c0024a72:	5b                   	pop    ebx
c0024a73:	5e                   	pop    esi
c0024a74:	5f                   	pop    edi
c0024a75:	5d                   	pop    ebp
c0024a76:	c3                   	ret    
c0024a77:	90                   	nop

c0024a78 <ATAPI::diskRemoved()>:
c0024a78:	83 ec 18             	sub    esp,0x18
c0024a7b:	68 c5 d0 02 c0       	push   0xc002d0c5
c0024a80:	e8 82 e4 fe ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0024a85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024a89:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0024a90:	83 c4 1c             	add    esp,0x1c
c0024a93:	c3                   	ret    

c0024a94 <ATAPI::eject()>:
c0024a94:	57                   	push   edi
c0024a95:	b9 03 00 00 00       	mov    ecx,0x3
c0024a9a:	53                   	push   ebx
c0024a9b:	83 ec 14             	sub    esp,0x14
c0024a9e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024aa2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024aa6:	fc                   	cld    
c0024aa7:	31 c0                	xor    eax,eax
c0024aa9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024aab:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024ab0:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024ab5:	50                   	push   eax
c0024ab6:	50                   	push   eax
c0024ab7:	6a 00                	push   0x0
c0024ab9:	6a 00                	push   0x0
c0024abb:	6a 00                	push   0x0
c0024abd:	6a 02                	push   0x2
c0024abf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024ac3:	50                   	push   eax
c0024ac4:	53                   	push   ebx
c0024ac5:	e8 ee fc ff ff       	call   c00247b8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024aca:	83 c4 14             	add    esp,0x14
c0024acd:	53                   	push   ebx
c0024ace:	e8 a5 ff ff ff       	call   c0024a78 <ATAPI::diskRemoved()>
c0024ad3:	83 c4 24             	add    esp,0x24
c0024ad6:	31 c0                	xor    eax,eax
c0024ad8:	5b                   	pop    ebx
c0024ad9:	5f                   	pop    edi
c0024ada:	c3                   	ret    
c0024adb:	90                   	nop

c0024adc <ATAPI::diskInserted()>:
c0024adc:	53                   	push   ebx
c0024add:	83 ec 14             	sub    esp,0x14
c0024ae0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024ae4:	68 dc d0 02 c0       	push   0xc002d0dc
c0024ae9:	e8 19 e4 fe ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0024aee:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024af5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024af8:	e8 c3 fc fe ff       	call   c00147c0 <PhysicalDisk::startCache()>
c0024afd:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024b01:	83 c4 18             	add    esp,0x18
c0024b04:	5b                   	pop    ebx
c0024b05:	e9 a6 1e ff ff       	jmp    c00169b0 <createPartitionsForDisk(PhysicalDisk*)>

c0024b0a <ATAPI::detectMedia()>:
c0024b0a:	56                   	push   esi
c0024b0b:	53                   	push   ebx
c0024b0c:	83 ec 28             	sub    esp,0x28
c0024b0f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024b13:	6a 0c                	push   0xc
c0024b15:	6a 00                	push   0x0
c0024b17:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024b1b:	56                   	push   esi
c0024b1c:	e8 5f bc fd ff       	call   c0000780 <memset>
c0024b21:	58                   	pop    eax
c0024b22:	5a                   	pop    edx
c0024b23:	6a 00                	push   0x0
c0024b25:	6a 00                	push   0x0
c0024b27:	6a 00                	push   0x0
c0024b29:	6a 00                	push   0x0
c0024b2b:	56                   	push   esi
c0024b2c:	53                   	push   ebx
c0024b2d:	e8 86 fc ff ff       	call   c00247b8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024b32:	83 c4 1c             	add    esp,0x1c
c0024b35:	6a 0c                	push   0xc
c0024b37:	6a 00                	push   0x0
c0024b39:	56                   	push   esi
c0024b3a:	e8 41 bc fd ff       	call   c0000780 <memset>
c0024b3f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024b44:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024b49:	59                   	pop    ecx
c0024b4a:	58                   	pop    eax
c0024b4b:	6a 01                	push   0x1
c0024b4d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024b51:	50                   	push   eax
c0024b52:	6a 00                	push   0x0
c0024b54:	6a 12                	push   0x12
c0024b56:	56                   	push   esi
c0024b57:	53                   	push   ebx
c0024b58:	e8 5b fc ff ff       	call   c00247b8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024b5d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024b61:	83 c4 20             	add    esp,0x20
c0024b64:	83 e0 7f             	and    eax,0x7f
c0024b67:	3c 70                	cmp    al,0x70
c0024b69:	74 15                	je     c0024b80 <ATAPI::detectMedia()+0x76>
c0024b6b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024b72:	75 0c                	jne    c0024b80 <ATAPI::detectMedia()+0x76>
c0024b74:	83 ec 0c             	sub    esp,0xc
c0024b77:	53                   	push   ebx
c0024b78:	e8 5f ff ff ff       	call   c0024adc <ATAPI::diskInserted()>
c0024b7d:	83 c4 10             	add    esp,0x10
c0024b80:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024b84:	83 e0 0f             	and    eax,0xf
c0024b87:	3c 02                	cmp    al,0x2
c0024b89:	75 1b                	jne    c0024ba6 <ATAPI::detectMedia()+0x9c>
c0024b8b:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024b90:	75 2d                	jne    c0024bbf <ATAPI::detectMedia()+0xb5>
c0024b92:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024b99:	74 24                	je     c0024bbf <ATAPI::detectMedia()+0xb5>
c0024b9b:	83 ec 0c             	sub    esp,0xc
c0024b9e:	53                   	push   ebx
c0024b9f:	e8 d4 fe ff ff       	call   c0024a78 <ATAPI::diskRemoved()>
c0024ba4:	eb 16                	jmp    c0024bbc <ATAPI::detectMedia()+0xb2>
c0024ba6:	84 c0                	test   al,al
c0024ba8:	75 15                	jne    c0024bbf <ATAPI::detectMedia()+0xb5>
c0024baa:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024bb1:	75 0c                	jne    c0024bbf <ATAPI::detectMedia()+0xb5>
c0024bb3:	83 ec 0c             	sub    esp,0xc
c0024bb6:	53                   	push   ebx
c0024bb7:	e8 20 ff ff ff       	call   c0024adc <ATAPI::diskInserted()>
c0024bbc:	83 c4 10             	add    esp,0x10
c0024bbf:	83 c4 24             	add    esp,0x24
c0024bc2:	5b                   	pop    ebx
c0024bc3:	5e                   	pop    esi
c0024bc4:	c3                   	ret    
c0024bc5:	90                   	nop

c0024bc6 <ATAPI::open(int, int, void*)>:
c0024bc6:	53                   	push   ebx
c0024bc7:	83 ec 08             	sub    esp,0x8
c0024bca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024bce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024bd2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024bd6:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024bdc:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024be2:	c1 e0 06             	shl    eax,0x6
c0024be5:	01 d0                	add    eax,edx
c0024be7:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024bee:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024bf4:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024bfb:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024c05:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024c0b:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024c12:	6a 04                	push   0x4
c0024c14:	6a 0c                	push   0xc
c0024c16:	51                   	push   ecx
c0024c17:	52                   	push   edx
c0024c18:	e8 15 e5 ff ff       	call   c0023132 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024c1d:	90                   	nop
c0024c1e:	90                   	nop
c0024c1f:	6a 00                	push   0x0
c0024c21:	6a 0c                	push   0xc
c0024c23:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024c2a:	50                   	push   eax
c0024c2b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c31:	e8 fc e4 ff ff       	call   c0023132 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024c36:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024c3d:	83 c4 14             	add    esp,0x14
c0024c40:	53                   	push   ebx
c0024c41:	e8 c4 fe ff ff       	call   c0024b0a <ATAPI::detectMedia()>
c0024c46:	31 c0                	xor    eax,eax
c0024c48:	83 c4 18             	add    esp,0x18
c0024c4b:	5b                   	pop    ebx
c0024c4c:	c3                   	ret    
c0024c4d:	90                   	nop

c0024c4e <ATAPI::read(unsigned long long, int, void*)>:
c0024c4e:	55                   	push   ebp
c0024c4f:	57                   	push   edi
c0024c50:	56                   	push   esi
c0024c51:	53                   	push   ebx
c0024c52:	83 ec 1c             	sub    esp,0x1c
c0024c55:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024c59:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024c5d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024c61:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024c68:	74 41                	je     c0024cab <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024c6a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024c6e:	b9 03 00 00 00       	mov    ecx,0x3
c0024c73:	fc                   	cld    
c0024c74:	31 c0                	xor    eax,eax
c0024c76:	86 fb                	xchg   bl,bh
c0024c78:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024c7a:	c1 c3 10             	rol    ebx,0x10
c0024c7d:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024c82:	89 e8                	mov    eax,ebp
c0024c84:	86 fb                	xchg   bl,bh
c0024c86:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024c8a:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024c8e:	50                   	push   eax
c0024c8f:	50                   	push   eax
c0024c90:	55                   	push   ebp
c0024c91:	c1 e5 0b             	shl    ebp,0xb
c0024c94:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024c98:	6a 00                	push   0x0
c0024c9a:	55                   	push   ebp
c0024c9b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024c9f:	50                   	push   eax
c0024ca0:	56                   	push   esi
c0024ca1:	e8 12 fb ff ff       	call   c00247b8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024ca6:	83 c4 20             	add    esp,0x20
c0024ca9:	eb 1a                	jmp    c0024cc5 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024cab:	83 ec 0c             	sub    esp,0xc
c0024cae:	56                   	push   esi
c0024caf:	e8 56 fe ff ff       	call   c0024b0a <ATAPI::detectMedia()>
c0024cb4:	83 c4 10             	add    esp,0x10
c0024cb7:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024cbe:	75 aa                	jne    c0024c6a <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024cc0:	b8 02 00 00 00       	mov    eax,0x2
c0024cc5:	83 c4 1c             	add    esp,0x1c
c0024cc8:	5b                   	pop    ebx
c0024cc9:	5e                   	pop    esi
c0024cca:	5f                   	pop    edi
c0024ccb:	5d                   	pop    ebp
c0024ccc:	c3                   	ret    
c0024ccd:	90                   	nop

c0024cce <SATA::close(int, int, void*)>:
c0024cce:	83 ec 0c             	sub    esp,0xc
c0024cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024cd5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024cdb:	85 c0                	test   eax,eax
c0024cdd:	74 0c                	je     c0024ceb <SATA::close(int, int, void*)+0x1d>
c0024cdf:	83 ec 0c             	sub    esp,0xc
c0024ce2:	8b 10                	mov    edx,DWORD PTR [eax]
c0024ce4:	50                   	push   eax
c0024ce5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024ce8:	83 c4 10             	add    esp,0x10
c0024ceb:	31 c0                	xor    eax,eax
c0024ced:	83 c4 0c             	add    esp,0xc
c0024cf0:	c3                   	ret    
c0024cf1:	90                   	nop

c0024cf2 <SATA::powerSaving(PowerSavingLevel)>:
c0024cf2:	c3                   	ret    
c0024cf3:	90                   	nop

c0024cf4 <SATA::open(int, int, void*)>:
c0024cf4:	56                   	push   esi
c0024cf5:	53                   	push   ebx
c0024cf6:	50                   	push   eax
c0024cf7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024cfb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024cff:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024d09:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024d0f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024d19:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024d1d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024d27:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024d2d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024d34:	e8 b4 b1 fe ff       	call   c000feed <Phys::allocatePage()>
c0024d39:	89 c6                	mov    esi,eax
c0024d3b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024d41:	81 c6 00 10 00 00    	add    esi,0x1000
c0024d47:	e8 a1 b1 fe ff       	call   c000feed <Phys::allocatePage()>
c0024d4c:	39 c6                	cmp    esi,eax
c0024d4e:	74 10                	je     c0024d60 <SATA::open(int, int, void*)+0x6c>
c0024d50:	83 ec 0c             	sub    esp,0xc
c0024d53:	68 04 d0 02 c0       	push   0xc002d004
c0024d58:	e8 e8 58 ff ff       	call   c001a645 <Krnl::panic(char const*)>
c0024d5d:	83 c4 10             	add    esp,0x10
c0024d60:	83 ec 0c             	sub    esp,0xc
c0024d63:	6a 02                	push   0x2
c0024d65:	e8 e1 cd fe ff       	call   c0011b4b <Virt::allocateKernelVirtualPages(int)>
c0024d6a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024d70:	e8 71 d0 fe ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0024d75:	6a 03                	push   0x3
c0024d77:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024d7d:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024d83:	50                   	push   eax
c0024d84:	e8 d7 d5 fe ff       	call   c0012360 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024d89:	83 c4 14             	add    esp,0x14
c0024d8c:	53                   	push   ebx
c0024d8d:	e8 2e fa fe ff       	call   c00147c0 <PhysicalDisk::startCache()>
c0024d92:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024d95:	e8 16 1c ff ff       	call   c00169b0 <createPartitionsForDisk(PhysicalDisk*)>
c0024d9a:	83 c4 14             	add    esp,0x14
c0024d9d:	31 c0                	xor    eax,eax
c0024d9f:	5b                   	pop    ebx
c0024da0:	5e                   	pop    esi
c0024da1:	c3                   	ret    

c0024da2 <SATA::SATA()>:
c0024da2:	83 ec 0c             	sub    esp,0xc
c0024da5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024da9:	83 ec 04             	sub    esp,0x4
c0024dac:	68 00 02 00 00       	push   0x200
c0024db1:	68 18 d0 02 c0       	push   0xc002d018
c0024db6:	50                   	push   eax
c0024db7:	e8 9c f9 fe ff       	call   c0014758 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024dbc:	83 c4 10             	add    esp,0x10
c0024dbf:	ba 88 d0 02 c0       	mov    edx,0xc002d088
c0024dc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024dc8:	89 10                	mov    DWORD PTR [eax],edx
c0024dca:	90                   	nop
c0024dcb:	83 c4 0c             	add    esp,0xc
c0024dce:	c3                   	ret    
c0024dcf:	90                   	nop

c0024dd0 <SATA::access(unsigned long long, int, void*, bool)>:
c0024dd0:	55                   	push   ebp
c0024dd1:	57                   	push   edi
c0024dd2:	56                   	push   esi
c0024dd3:	53                   	push   ebx
c0024dd4:	83 ec 2c             	sub    esp,0x2c
c0024dd7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024ddb:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024ddf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024de3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024de7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024deb:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024df0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024df4:	7e 10                	jle    c0024e06 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024df6:	83 ec 0c             	sub    esp,0xc
c0024df9:	68 28 d0 02 c0       	push   0xc002d028
c0024dfe:	e8 42 58 ff ff       	call   c001a645 <Krnl::panic(char const*)>
c0024e03:	83 c4 10             	add    esp,0x10
c0024e06:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0024e0c:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024e12:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024e18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024e1c:	89 f0                	mov    eax,esi
c0024e1e:	c1 e0 07             	shl    eax,0x7
c0024e21:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024e25:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024e2f:	53                   	push   ebx
c0024e30:	8d 46 02             	lea    eax,[esi+0x2]
c0024e33:	53                   	push   ebx
c0024e34:	c1 e0 07             	shl    eax,0x7
c0024e37:	bb 01 00 00 00       	mov    ebx,0x1
c0024e3c:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0024e40:	50                   	push   eax
c0024e41:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024e47:	e8 aa ef ff ff       	call   c0023df6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024e4c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024e50:	83 c4 10             	add    esp,0x10
c0024e53:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024e58:	0f 84 ce 01 00 00    	je     c002502c <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024e5e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024e62:	c1 e0 09             	shl    eax,0x9
c0024e65:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024e6a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024e6e:	74 17                	je     c0024e87 <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0024e70:	51                   	push   ecx
c0024e71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024e75:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024e79:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024e7f:	e8 c8 b8 fd ff       	call   c000074c <memcpy>
c0024e84:	83 c4 10             	add    esp,0x10
c0024e87:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024e8d:	8d 46 02             	lea    eax,[esi+0x2]
c0024e90:	c1 e0 07             	shl    eax,0x7
c0024e93:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024e97:	8b 00                	mov    eax,DWORD PTR [eax]
c0024e99:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024e9f:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024ea5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024ea9:	c1 e1 05             	shl    ecx,0x5
c0024eac:	01 c8                	add    eax,ecx
c0024eae:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024eb2:	8a 18                	mov    bl,BYTE PTR [eax]
c0024eb4:	83 e1 01             	and    ecx,0x1
c0024eb7:	83 e3 bf             	and    ebx,0xffffffbf
c0024eba:	c1 e1 06             	shl    ecx,0x6
c0024ebd:	09 d9                	or     ecx,ebx
c0024ebf:	88 08                	mov    BYTE PTR [eax],cl
c0024ec1:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024ec3:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024ec9:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024ecf:	89 08                	mov    DWORD PTR [eax],ecx
c0024ed1:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024ed7:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024edd:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024ee3:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024ee6:	52                   	push   edx
c0024ee7:	68 90 00 00 00       	push   0x90
c0024eec:	6a 00                	push   0x0
c0024eee:	53                   	push   ebx
c0024eef:	e8 8c b8 fd ff       	call   c0000780 <memset>
c0024ef4:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024efa:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0024efe:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024f04:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024f08:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024f0c:	83 c4 10             	add    esp,0x10
c0024f0f:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024f12:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024f18:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024f1e:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024f23:	09 c8                	or     eax,ecx
c0024f25:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024f2b:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024f2e:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024f35:	66 25 00 7f          	and    ax,0x7f00
c0024f39:	66 0d 27 80          	or     ax,0x8027
c0024f3d:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0024f42:	66 89 03             	mov    WORD PTR [ebx],ax
c0024f45:	19 c0                	sbb    eax,eax
c0024f47:	83 e0 f0             	and    eax,0xfffffff0
c0024f4a:	83 c0 35             	add    eax,0x35
c0024f4d:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0024f50:	89 f8                	mov    eax,edi
c0024f52:	c1 e8 10             	shr    eax,0x10
c0024f55:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024f58:	89 f8                	mov    eax,edi
c0024f5a:	c1 e8 18             	shr    eax,0x18
c0024f5d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024f60:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024f64:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024f67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024f6b:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024f6e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024f72:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024f76:	89 f3                	mov    ebx,esi
c0024f78:	31 c0                	xor    eax,eax
c0024f7a:	c1 e3 07             	shl    ebx,0x7
c0024f7d:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024f81:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024f87:	80 e1 88             	and    cl,0x88
c0024f8a:	74 0a                	je     c0024f96 <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024f8c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024f91:	74 0a                	je     c0024f9d <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0024f93:	40                   	inc    eax
c0024f94:	eb eb                	jmp    c0024f81 <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0024f96:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024f9b:	75 0a                	jne    c0024fa7 <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0024f9d:	83 ec 0c             	sub    esp,0xc
c0024fa0:	68 61 d0 02 c0       	push   0xc002d061
c0024fa5:	eb 56                	jmp    c0024ffd <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0024fa7:	b8 01 00 00 00       	mov    eax,0x1
c0024fac:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024fb0:	c1 e6 07             	shl    esi,0x7
c0024fb3:	d3 e0                	shl    eax,cl
c0024fb5:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0024fb9:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0024fbf:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0024fc5:	85 c8                	test   eax,ecx
c0024fc7:	74 20                	je     c0024fe9 <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0024fc9:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0024fcf:	0f ba e1 1e          	bt     ecx,0x1e
c0024fd3:	73 ea                	jae    c0024fbf <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0024fd5:	83 ec 0c             	sub    esp,0xc
c0024fd8:	31 db                	xor    ebx,ebx
c0024fda:	68 6f d0 02 c0       	push   0xc002d06f
c0024fdf:	e8 61 56 ff ff       	call   c001a645 <Krnl::panic(char const*)>
c0024fe4:	83 c4 10             	add    esp,0x10
c0024fe7:	eb 43                	jmp    c002502c <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024fe9:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0024fef:	0f ba e0 1e          	bt     eax,0x1e
c0024ff3:	73 17                	jae    c002500c <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0024ff5:	83 ec 0c             	sub    esp,0xc
c0024ff8:	68 6f d0 02 c0       	push   0xc002d06f
c0024ffd:	e8 43 56 ff ff       	call   c001a645 <Krnl::panic(char const*)>
c0025002:	bb 01 00 00 00       	mov    ebx,0x1
c0025007:	83 c4 10             	add    esp,0x10
c002500a:	eb 20                	jmp    c002502c <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c002500c:	31 db                	xor    ebx,ebx
c002500e:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0025013:	75 17                	jne    c002502c <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0025015:	50                   	push   eax
c0025016:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002501a:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0025020:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0025024:	e8 23 b7 fd ff       	call   c000074c <memcpy>
c0025029:	83 c4 10             	add    esp,0x10
c002502c:	83 c4 2c             	add    esp,0x2c
c002502f:	89 d8                	mov    eax,ebx
c0025031:	5b                   	pop    ebx
c0025032:	5e                   	pop    esi
c0025033:	5f                   	pop    edi
c0025034:	5d                   	pop    ebp
c0025035:	c3                   	ret    

c0025036 <SATA::read(unsigned long long, int, void*)>:
c0025036:	57                   	push   edi
c0025037:	b8 04 00 00 00       	mov    eax,0x4
c002503c:	56                   	push   esi
c002503d:	53                   	push   ebx
c002503e:	83 ec 10             	sub    esp,0x10
c0025041:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0025045:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0025049:	8d 4b ff             	lea    ecx,[ebx-0x1]
c002504c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0025050:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0025054:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002505a:	77 3b                	ja     c0025097 <SATA::read(unsigned long long, int, void*)+0x61>
c002505c:	b8 06 00 00 00       	mov    eax,0x6
c0025061:	85 d2                	test   edx,edx
c0025063:	74 32                	je     c0025097 <SATA::read(unsigned long long, int, void*)+0x61>
c0025065:	50                   	push   eax
c0025066:	50                   	push   eax
c0025067:	6a 00                	push   0x0
c0025069:	52                   	push   edx
c002506a:	53                   	push   ebx
c002506b:	57                   	push   edi
c002506c:	56                   	push   esi
c002506d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025071:	e8 5a fd ff ff       	call   c0024dd0 <SATA::access(unsigned long long, int, void*, bool)>
c0025076:	83 c4 20             	add    esp,0x20
c0025079:	85 c0                	test   eax,eax
c002507b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002507f:	75 11                	jne    c0025092 <SATA::read(unsigned long long, int, void*)+0x5c>
c0025081:	01 1d 28 29 03 c0    	add    DWORD PTR ds:0xc0032928,ebx
c0025087:	e8 14 b9 fe ff       	call   c00109a0 <VgaText::updateDiskUsage()>
c002508c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025090:	eb 05                	jmp    c0025097 <SATA::read(unsigned long long, int, void*)+0x61>
c0025092:	b8 01 00 00 00       	mov    eax,0x1
c0025097:	83 c4 10             	add    esp,0x10
c002509a:	5b                   	pop    ebx
c002509b:	5e                   	pop    esi
c002509c:	5f                   	pop    edi
c002509d:	c3                   	ret    

c002509e <SATA::write(unsigned long long, int, void*)>:
c002509e:	55                   	push   ebp
c002509f:	b8 04 00 00 00       	mov    eax,0x4
c00250a4:	57                   	push   edi
c00250a5:	56                   	push   esi
c00250a6:	53                   	push   ebx
c00250a7:	83 ec 1c             	sub    esp,0x1c
c00250aa:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00250ae:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00250b2:	8d 75 ff             	lea    esi,[ebp-0x1]
c00250b5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00250b9:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00250bd:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00250c3:	77 56                	ja     c002511b <SATA::write(unsigned long long, int, void*)+0x7d>
c00250c5:	b8 06 00 00 00       	mov    eax,0x6
c00250ca:	85 ff                	test   edi,edi
c00250cc:	74 4d                	je     c002511b <SATA::write(unsigned long long, int, void*)+0x7d>
c00250ce:	89 ee                	mov    esi,ebp
c00250d0:	c1 e6 09             	shl    esi,0x9
c00250d3:	01 fe                	add    esi,edi
c00250d5:	89 c8                	mov    eax,ecx
c00250d7:	89 da                	mov    edx,ebx
c00250d9:	83 c0 01             	add    eax,0x1
c00250dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00250e0:	83 d2 00             	adc    edx,0x0
c00250e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00250e7:	50                   	push   eax
c00250e8:	50                   	push   eax
c00250e9:	6a 01                	push   0x1
c00250eb:	57                   	push   edi
c00250ec:	81 c7 00 02 00 00    	add    edi,0x200
c00250f2:	6a 01                	push   0x1
c00250f4:	53                   	push   ebx
c00250f5:	51                   	push   ecx
c00250f6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00250fa:	e8 d1 fc ff ff       	call   c0024dd0 <SATA::access(unsigned long long, int, void*, bool)>
c00250ff:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0025103:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0025107:	83 c4 20             	add    esp,0x20
c002510a:	39 f7                	cmp    edi,esi
c002510c:	75 c7                	jne    c00250d5 <SATA::write(unsigned long long, int, void*)+0x37>
c002510e:	01 2d 24 29 03 c0    	add    DWORD PTR ds:0xc0032924,ebp
c0025114:	e8 87 b8 fe ff       	call   c00109a0 <VgaText::updateDiskUsage()>
c0025119:	31 c0                	xor    eax,eax
c002511b:	83 c4 1c             	add    esp,0x1c
c002511e:	5b                   	pop    ebx
c002511f:	5e                   	pop    esi
c0025120:	5f                   	pop    edi
c0025121:	5d                   	pop    ebp
c0025122:	c3                   	ret    
c0025123:	90                   	nop

c0025124 <SATAPI::write(unsigned long long, int, void*)>:
c0025124:	b8 03 00 00 00       	mov    eax,0x3
c0025129:	c3                   	ret    

c002512a <SATAPI::close(int, int, void*)>:
c002512a:	83 ec 0c             	sub    esp,0xc
c002512d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025131:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025137:	85 c0                	test   eax,eax
c0025139:	74 0c                	je     c0025147 <SATAPI::close(int, int, void*)+0x1d>
c002513b:	83 ec 0c             	sub    esp,0xc
c002513e:	8b 10                	mov    edx,DWORD PTR [eax]
c0025140:	50                   	push   eax
c0025141:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0025144:	83 c4 10             	add    esp,0x10
c0025147:	31 c0                	xor    eax,eax
c0025149:	83 c4 0c             	add    esp,0xc
c002514c:	c3                   	ret    
c002514d:	90                   	nop

c002514e <SATAPI::SATAPI()>:
c002514e:	83 ec 0c             	sub    esp,0xc
c0025151:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025155:	83 ec 04             	sub    esp,0x4
c0025158:	68 00 08 00 00       	push   0x800
c002515d:	68 b8 d0 02 c0       	push   0xc002d0b8
c0025162:	50                   	push   eax
c0025163:	e8 f0 f5 fe ff       	call   c0014758 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025168:	83 c4 10             	add    esp,0x10
c002516b:	ba 64 d1 02 c0       	mov    edx,0xc002d164
c0025170:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025174:	89 10                	mov    DWORD PTR [eax],edx
c0025176:	90                   	nop
c0025177:	83 c4 0c             	add    esp,0xc
c002517a:	c3                   	ret    
c002517b:	90                   	nop

c002517c <SATAPI::diskRemoved()>:
c002517c:	83 ec 18             	sub    esp,0x18
c002517f:	68 c4 d0 02 c0       	push   0xc002d0c4
c0025184:	e8 7e dd fe ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0025189:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002518d:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0025194:	83 c4 1c             	add    esp,0x1c
c0025197:	c3                   	ret    

c0025198 <SATAPI::diskInserted()>:
c0025198:	53                   	push   ebx
c0025199:	83 ec 14             	sub    esp,0x14
c002519c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00251a0:	68 db d0 02 c0       	push   0xc002d0db
c00251a5:	e8 5d dd fe ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c00251aa:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c00251b1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00251b4:	e8 07 f6 fe ff       	call   c00147c0 <PhysicalDisk::startCache()>
c00251b9:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00251bd:	83 c4 18             	add    esp,0x18
c00251c0:	5b                   	pop    ebx
c00251c1:	e9 ea 17 ff ff       	jmp    c00169b0 <createPartitionsForDisk(PhysicalDisk*)>

c00251c6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c00251c6:	55                   	push   ebp
c00251c7:	57                   	push   edi
c00251c8:	56                   	push   esi
c00251c9:	53                   	push   ebx
c00251ca:	83 ec 24             	sub    esp,0x24
c00251cd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00251d1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00251d5:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c00251db:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00251df:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00251e3:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c00251e9:	8d 5f 02             	lea    ebx,[edi+0x2]
c00251ec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00251f2:	c1 e3 07             	shl    ebx,0x7
c00251f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00251f9:	89 f8                	mov    eax,edi
c00251fb:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00251ff:	c1 e0 07             	shl    eax,0x7
c0025202:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025206:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002520a:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025214:	53                   	push   ebx
c0025215:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c002521b:	e8 d6 eb ff ff       	call   c0023df6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025220:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025224:	83 c4 10             	add    esp,0x10
c0025227:	b8 01 00 00 00       	mov    eax,0x1
c002522c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0025231:	0f 84 8a 01 00 00    	je     c00253c1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0025237:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c002523d:	8b 03                	mov    eax,DWORD PTR [ebx]
c002523f:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025245:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002524b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c002524f:	c1 e1 05             	shl    ecx,0x5
c0025252:	01 c8                	add    eax,ecx
c0025254:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025256:	81 e1 80 ff 00 00    	and    ecx,0xff80
c002525c:	81 c9 25 00 01 00    	or     ecx,0x10025
c0025262:	89 08                	mov    DWORD PTR [eax],ecx
c0025264:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c002526a:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025270:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025276:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0025279:	52                   	push   edx
c002527a:	68 90 00 00 00       	push   0x90
c002527f:	6a 00                	push   0x0
c0025281:	53                   	push   ebx
c0025282:	e8 f9 b4 fd ff       	call   c0000780 <memset>
c0025287:	83 c4 0c             	add    esp,0xc
c002528a:	8d 43 40             	lea    eax,[ebx+0x40]
c002528d:	6a 0c                	push   0xc
c002528f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025293:	50                   	push   eax
c0025294:	e8 b3 b4 fd ff       	call   c000074c <memcpy>
c0025299:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c002529f:	89 ea                	mov    edx,ebp
c00252a1:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c00252a7:	c1 ea 18             	shr    edx,0x18
c00252aa:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00252ae:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c00252b1:	8d 48 ff             	lea    ecx,[eax-0x1]
c00252b4:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c00252b8:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c00252be:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c00252c4:	25 00 00 c0 ff       	and    eax,0xffc00000
c00252c9:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c00252cd:	09 c8                	or     eax,ecx
c00252cf:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00252d3:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c00252d9:	66 8b 03             	mov    ax,WORD PTR [ebx]
c00252dc:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c00252e3:	66 25 00 7f          	and    ax,0x7f00
c00252e7:	66 0d 27 80          	or     ax,0x8027
c00252eb:	66 89 03             	mov    WORD PTR [ebx],ax
c00252ee:	89 e8                	mov    eax,ebp
c00252f0:	c1 e8 10             	shr    eax,0x10
c00252f3:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00252f6:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00252fa:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00252fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025301:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025304:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025308:	83 c4 10             	add    esp,0x10
c002530b:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c002530f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025313:	31 c0                	xor    eax,eax
c0025315:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c002531b:	80 e1 88             	and    cl,0x88
c002531e:	74 0a                	je     c002532a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c0025320:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025325:	74 0a                	je     c0025331 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0025327:	40                   	inc    eax
c0025328:	eb eb                	jmp    c0025315 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c002532a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002532f:	75 0f                	jne    c0025340 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c0025331:	83 ec 0c             	sub    esp,0xc
c0025334:	68 61 d0 02 c0       	push   0xc002d061
c0025339:	e8 07 53 ff ff       	call   c001a645 <Krnl::panic(char const*)>
c002533e:	eb 3a                	jmp    c002537a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c0025340:	b8 01 00 00 00       	mov    eax,0x1
c0025345:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0025349:	c1 e7 07             	shl    edi,0x7
c002534c:	d3 e0                	shl    eax,cl
c002534e:	03 3c 24             	add    edi,DWORD PTR [esp]
c0025351:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c0025357:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c002535d:	85 d0                	test   eax,edx
c002535f:	74 23                	je     c0025384 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c0025361:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c0025367:	0f ba e2 1e          	bt     edx,0x1e
c002536b:	73 ea                	jae    c0025357 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c002536d:	83 ec 0c             	sub    esp,0xc
c0025370:	68 f3 d0 02 c0       	push   0xc002d0f3
c0025375:	e8 8d db fe ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c002537a:	83 c4 10             	add    esp,0x10
c002537d:	b8 01 00 00 00       	mov    eax,0x1
c0025382:	eb 3d                	jmp    c00253c1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0025384:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c002538a:	0f ba e0 1e          	bt     eax,0x1e
c002538e:	73 0a                	jae    c002539a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c0025390:	83 ec 0c             	sub    esp,0xc
c0025393:	68 06 d1 02 c0       	push   0xc002d106
c0025398:	eb db                	jmp    c0025375 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c002539a:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c002539f:	74 1e                	je     c00253bf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c00253a1:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00253a6:	74 17                	je     c00253bf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c00253a8:	50                   	push   eax
c00253a9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00253ad:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c00253b3:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00253b7:	e8 90 b3 fd ff       	call   c000074c <memcpy>
c00253bc:	83 c4 10             	add    esp,0x10
c00253bf:	31 c0                	xor    eax,eax
c00253c1:	83 c4 1c             	add    esp,0x1c
c00253c4:	5b                   	pop    ebx
c00253c5:	5e                   	pop    esi
c00253c6:	5f                   	pop    edi
c00253c7:	5d                   	pop    ebp
c00253c8:	c3                   	ret    
c00253c9:	90                   	nop

c00253ca <SATAPI::eject()>:
c00253ca:	57                   	push   edi
c00253cb:	b9 03 00 00 00       	mov    ecx,0x3
c00253d0:	53                   	push   ebx
c00253d1:	83 ec 14             	sub    esp,0x14
c00253d4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00253d8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00253dc:	fc                   	cld    
c00253dd:	31 c0                	xor    eax,eax
c00253df:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00253e1:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00253e6:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00253eb:	50                   	push   eax
c00253ec:	6a 00                	push   0x0
c00253ee:	6a 00                	push   0x0
c00253f0:	6a 00                	push   0x0
c00253f2:	6a 00                	push   0x0
c00253f4:	6a 02                	push   0x2
c00253f6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00253fa:	50                   	push   eax
c00253fb:	53                   	push   ebx
c00253fc:	e8 c5 fd ff ff       	call   c00251c6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025401:	83 c4 14             	add    esp,0x14
c0025404:	53                   	push   ebx
c0025405:	e8 72 fd ff ff       	call   c002517c <SATAPI::diskRemoved()>
c002540a:	83 c4 24             	add    esp,0x24
c002540d:	31 c0                	xor    eax,eax
c002540f:	5b                   	pop    ebx
c0025410:	5f                   	pop    edi
c0025411:	c3                   	ret    

c0025412 <SATAPI::detectMedia()>:
c0025412:	56                   	push   esi
c0025413:	53                   	push   ebx
c0025414:	83 ec 28             	sub    esp,0x28
c0025417:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002541b:	6a 0c                	push   0xc
c002541d:	6a 00                	push   0x0
c002541f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025423:	56                   	push   esi
c0025424:	e8 57 b3 fd ff       	call   c0000780 <memset>
c0025429:	83 c4 0c             	add    esp,0xc
c002542c:	6a 00                	push   0x0
c002542e:	6a 00                	push   0x0
c0025430:	6a 00                	push   0x0
c0025432:	6a 00                	push   0x0
c0025434:	6a 00                	push   0x0
c0025436:	56                   	push   esi
c0025437:	53                   	push   ebx
c0025438:	e8 89 fd ff ff       	call   c00251c6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002543d:	83 c4 1c             	add    esp,0x1c
c0025440:	6a 0c                	push   0xc
c0025442:	6a 00                	push   0x0
c0025444:	56                   	push   esi
c0025445:	e8 36 b3 fd ff       	call   c0000780 <memset>
c002544a:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002544f:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025454:	83 c4 0c             	add    esp,0xc
c0025457:	6a 01                	push   0x1
c0025459:	8d 44 24 16          	lea    eax,[esp+0x16]
c002545d:	50                   	push   eax
c002545e:	6a 00                	push   0x0
c0025460:	6a 00                	push   0x0
c0025462:	6a 12                	push   0x12
c0025464:	56                   	push   esi
c0025465:	53                   	push   ebx
c0025466:	e8 5b fd ff ff       	call   c00251c6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002546b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002546f:	83 c4 20             	add    esp,0x20
c0025472:	83 e0 7f             	and    eax,0x7f
c0025475:	3c 70                	cmp    al,0x70
c0025477:	74 15                	je     c002548e <SATAPI::detectMedia()+0x7c>
c0025479:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025480:	75 0c                	jne    c002548e <SATAPI::detectMedia()+0x7c>
c0025482:	83 ec 0c             	sub    esp,0xc
c0025485:	53                   	push   ebx
c0025486:	e8 0d fd ff ff       	call   c0025198 <SATAPI::diskInserted()>
c002548b:	83 c4 10             	add    esp,0x10
c002548e:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025492:	83 e0 0f             	and    eax,0xf
c0025495:	3c 02                	cmp    al,0x2
c0025497:	75 1b                	jne    c00254b4 <SATAPI::detectMedia()+0xa2>
c0025499:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002549e:	75 2d                	jne    c00254cd <SATAPI::detectMedia()+0xbb>
c00254a0:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00254a7:	74 24                	je     c00254cd <SATAPI::detectMedia()+0xbb>
c00254a9:	83 ec 0c             	sub    esp,0xc
c00254ac:	53                   	push   ebx
c00254ad:	e8 ca fc ff ff       	call   c002517c <SATAPI::diskRemoved()>
c00254b2:	eb 16                	jmp    c00254ca <SATAPI::detectMedia()+0xb8>
c00254b4:	84 c0                	test   al,al
c00254b6:	75 15                	jne    c00254cd <SATAPI::detectMedia()+0xbb>
c00254b8:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00254bf:	75 0c                	jne    c00254cd <SATAPI::detectMedia()+0xbb>
c00254c1:	83 ec 0c             	sub    esp,0xc
c00254c4:	53                   	push   ebx
c00254c5:	e8 ce fc ff ff       	call   c0025198 <SATAPI::diskInserted()>
c00254ca:	83 c4 10             	add    esp,0x10
c00254cd:	83 c4 24             	add    esp,0x24
c00254d0:	5b                   	pop    ebx
c00254d1:	5e                   	pop    esi
c00254d2:	c3                   	ret    
c00254d3:	90                   	nop

c00254d4 <SATAPI::open(int, int, void*)>:
c00254d4:	56                   	push   esi
c00254d5:	53                   	push   ebx
c00254d6:	50                   	push   eax
c00254d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00254db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00254df:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00254e9:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00254ef:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00254f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00254fd:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025507:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002550d:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025514:	e8 d4 a9 fe ff       	call   c000feed <Phys::allocatePage()>
c0025519:	89 c6                	mov    esi,eax
c002551b:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025521:	81 c6 00 10 00 00    	add    esi,0x1000
c0025527:	e8 c1 a9 fe ff       	call   c000feed <Phys::allocatePage()>
c002552c:	39 c6                	cmp    esi,eax
c002552e:	74 10                	je     c0025540 <SATAPI::open(int, int, void*)+0x6c>
c0025530:	83 ec 0c             	sub    esp,0xc
c0025533:	68 1b d1 02 c0       	push   0xc002d11b
c0025538:	e8 08 51 ff ff       	call   c001a645 <Krnl::panic(char const*)>
c002553d:	83 c4 10             	add    esp,0x10
c0025540:	83 ec 0c             	sub    esp,0xc
c0025543:	6a 02                	push   0x2
c0025545:	e8 01 c6 fe ff       	call   c0011b4b <Virt::allocateKernelVirtualPages(int)>
c002554a:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025550:	e8 91 c8 fe ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0025555:	6a 03                	push   0x3
c0025557:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c002555d:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025563:	50                   	push   eax
c0025564:	e8 f7 cd fe ff       	call   c0012360 <VAS::mapPage(unsigned long, unsigned long, int)>
c0025569:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025570:	83 c4 14             	add    esp,0x14
c0025573:	53                   	push   ebx
c0025574:	e8 99 fe ff ff       	call   c0025412 <SATAPI::detectMedia()>
c0025579:	83 c4 14             	add    esp,0x14
c002557c:	31 c0                	xor    eax,eax
c002557e:	5b                   	pop    ebx
c002557f:	5e                   	pop    esi
c0025580:	c3                   	ret    
c0025581:	90                   	nop

c0025582 <SATAPI::read(unsigned long long, int, void*)>:
c0025582:	55                   	push   ebp
c0025583:	57                   	push   edi
c0025584:	56                   	push   esi
c0025585:	53                   	push   ebx
c0025586:	83 ec 1c             	sub    esp,0x1c
c0025589:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002558d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025591:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025595:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002559c:	74 19                	je     c00255b7 <SATAPI::read(unsigned long long, int, void*)+0x35>
c002559e:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c00255a3:	7e 2e                	jle    c00255d3 <SATAPI::read(unsigned long long, int, void*)+0x51>
c00255a5:	83 ec 0c             	sub    esp,0xc
c00255a8:	68 31 d1 02 c0       	push   0xc002d131
c00255ad:	e8 93 50 ff ff       	call   c001a645 <Krnl::panic(char const*)>
c00255b2:	83 c4 10             	add    esp,0x10
c00255b5:	eb 1c                	jmp    c00255d3 <SATAPI::read(unsigned long long, int, void*)+0x51>
c00255b7:	83 ec 0c             	sub    esp,0xc
c00255ba:	55                   	push   ebp
c00255bb:	e8 52 fe ff ff       	call   c0025412 <SATAPI::detectMedia()>
c00255c0:	83 c4 10             	add    esp,0x10
c00255c3:	b8 02 00 00 00       	mov    eax,0x2
c00255c8:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00255cf:	75 cd                	jne    c002559e <SATAPI::read(unsigned long long, int, void*)+0x1c>
c00255d1:	eb 49                	jmp    c002561c <SATAPI::read(unsigned long long, int, void*)+0x9a>
c00255d3:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00255d7:	b9 03 00 00 00       	mov    ecx,0x3
c00255dc:	fc                   	cld    
c00255dd:	31 c0                	xor    eax,eax
c00255df:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00255e1:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00255e6:	89 d8                	mov    eax,ebx
c00255e8:	86 e0                	xchg   al,ah
c00255ea:	c1 c0 10             	rol    eax,0x10
c00255ed:	86 e0                	xchg   al,ah
c00255ef:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c00255f3:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c00255f7:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00255fb:	50                   	push   eax
c00255fc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025600:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025604:	56                   	push   esi
c0025605:	53                   	push   ebx
c0025606:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002560a:	c1 e0 0b             	shl    eax,0xb
c002560d:	50                   	push   eax
c002560e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025612:	50                   	push   eax
c0025613:	55                   	push   ebp
c0025614:	e8 ad fb ff ff       	call   c00251c6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025619:	83 c4 20             	add    esp,0x20
c002561c:	83 c4 1c             	add    esp,0x1c
c002561f:	5b                   	pop    ebx
c0025620:	5e                   	pop    esi
c0025621:	5f                   	pop    edi
c0025622:	5d                   	pop    ebp
c0025623:	c3                   	ret    

c0025624 <AVX::open(int, int, void*)>:
c0025624:	83 ec 0c             	sub    esp,0xc
c0025627:	e8 3c 11 00 00       	call   c0026768 <avxInit>
c002562c:	b8 00 00 00 00       	mov    eax,0x0
c0025631:	83 c4 0c             	add    esp,0xc
c0025634:	c3                   	ret    
c0025635:	90                   	nop

c0025636 <AVX::close(int, int, void*)>:
c0025636:	83 ec 0c             	sub    esp,0xc
c0025639:	e8 2b 11 00 00       	call   c0026769 <avxClose>
c002563e:	b8 00 00 00 00       	mov    eax,0x0
c0025643:	83 c4 0c             	add    esp,0xc
c0025646:	c3                   	ret    
c0025647:	90                   	nop

c0025648 <AVX::available()>:
c0025648:	83 ec 0c             	sub    esp,0xc
c002564b:	e8 10 11 00 00       	call   c0026760 <avxDetect>
c0025650:	85 c0                	test   eax,eax
c0025652:	0f 95 c0             	setne  al
c0025655:	83 c4 0c             	add    esp,0xc
c0025658:	c3                   	ret    
c0025659:	90                   	nop

c002565a <AVX::save(void*)>:
c002565a:	83 ec 0c             	sub    esp,0xc
c002565d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025661:	83 ec 0c             	sub    esp,0xc
c0025664:	50                   	push   eax
c0025665:	e8 fc 10 00 00       	call   c0026766 <avxSave>
c002566a:	83 c4 10             	add    esp,0x10
c002566d:	90                   	nop
c002566e:	83 c4 0c             	add    esp,0xc
c0025671:	c3                   	ret    

c0025672 <AVX::load(void*)>:
c0025672:	83 ec 0c             	sub    esp,0xc
c0025675:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025679:	83 ec 0c             	sub    esp,0xc
c002567c:	50                   	push   eax
c002567d:	e8 e5 10 00 00       	call   c0026767 <avxLoad>
c0025682:	83 c4 10             	add    esp,0x10
c0025685:	90                   	nop
c0025686:	83 c4 0c             	add    esp,0xc
c0025689:	c3                   	ret    

c002568a <AVX::AVX()>:
c002568a:	83 ec 0c             	sub    esp,0xc
c002568d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025691:	83 ec 08             	sub    esp,0x8
c0025694:	68 94 d1 02 c0       	push   0xc002d194
c0025699:	50                   	push   eax
c002569a:	e8 97 f1 fe ff       	call   c0014836 <FPU::FPU(char const*)>
c002569f:	83 c4 10             	add    esp,0x10
c00256a2:	ba a4 d1 02 c0       	mov    edx,0xc002d1a4
c00256a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256ab:	89 10                	mov    DWORD PTR [eax],edx
c00256ad:	90                   	nop
c00256ae:	83 c4 0c             	add    esp,0xc
c00256b1:	c3                   	ret    

c00256b2 <MMX::available()>:
c00256b2:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c00256b7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00256bd:	83 e0 20             	and    eax,0x20
c00256c0:	84 c0                	test   al,al
c00256c2:	0f 95 c0             	setne  al
c00256c5:	c3                   	ret    

c00256c6 <MMX::open(int, int, void*)>:
c00256c6:	83 ec 0c             	sub    esp,0xc
c00256c9:	e8 24 11 00 00       	call   c00267f2 <x87Init>
c00256ce:	b8 00 00 00 00       	mov    eax,0x0
c00256d3:	83 c4 0c             	add    esp,0xc
c00256d6:	c3                   	ret    
c00256d7:	90                   	nop

c00256d8 <MMX::close(int, int, void*)>:
c00256d8:	83 ec 0c             	sub    esp,0xc
c00256db:	e8 2c 11 00 00       	call   c002680c <x87Close>
c00256e0:	b8 00 00 00 00       	mov    eax,0x0
c00256e5:	83 c4 0c             	add    esp,0xc
c00256e8:	c3                   	ret    
c00256e9:	90                   	nop

c00256ea <MMX::save(void*)>:
c00256ea:	83 ec 0c             	sub    esp,0xc
c00256ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256f1:	83 ec 0c             	sub    esp,0xc
c00256f4:	50                   	push   eax
c00256f5:	e8 e7 10 00 00       	call   c00267e1 <x87Save>
c00256fa:	83 c4 10             	add    esp,0x10
c00256fd:	90                   	nop
c00256fe:	83 c4 0c             	add    esp,0xc
c0025701:	c3                   	ret    

c0025702 <MMX::load(void*)>:
c0025702:	83 ec 0c             	sub    esp,0xc
c0025705:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025709:	83 ec 0c             	sub    esp,0xc
c002570c:	50                   	push   eax
c002570d:	e8 d8 10 00 00       	call   c00267ea <x87Load>
c0025712:	83 c4 10             	add    esp,0x10
c0025715:	90                   	nop
c0025716:	83 c4 0c             	add    esp,0xc
c0025719:	c3                   	ret    

c002571a <MMX::MMX()>:
c002571a:	83 ec 0c             	sub    esp,0xc
c002571d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025721:	83 ec 08             	sub    esp,0x8
c0025724:	68 d4 d1 02 c0       	push   0xc002d1d4
c0025729:	50                   	push   eax
c002572a:	e8 07 f1 fe ff       	call   c0014836 <FPU::FPU(char const*)>
c002572f:	83 c4 10             	add    esp,0x10
c0025732:	ba e4 d1 02 c0       	mov    edx,0xc002d1e4
c0025737:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002573b:	89 10                	mov    DWORD PTR [eax],edx
c002573d:	90                   	nop
c002573e:	83 c4 0c             	add    esp,0xc
c0025741:	c3                   	ret    

c0025742 <SSE::open(int, int, void*)>:
c0025742:	83 ec 0c             	sub    esp,0xc
c0025745:	e8 5a 10 00 00       	call   c00267a4 <sseInit>
c002574a:	b8 00 00 00 00       	mov    eax,0x0
c002574f:	83 c4 0c             	add    esp,0xc
c0025752:	c3                   	ret    
c0025753:	90                   	nop

c0025754 <SSE::close(int, int, void*)>:
c0025754:	83 ec 0c             	sub    esp,0xc
c0025757:	e8 58 10 00 00       	call   c00267b4 <sseClose>
c002575c:	b8 00 00 00 00       	mov    eax,0x0
c0025761:	83 c4 0c             	add    esp,0xc
c0025764:	c3                   	ret    
c0025765:	90                   	nop

c0025766 <SSE::available()>:
c0025766:	83 ec 1c             	sub    esp,0x1c
c0025769:	e8 12 10 00 00       	call   c0026780 <absolutelyNoChanceInHell>
c002576e:	85 c0                	test   eax,eax
c0025770:	0f 95 c0             	setne  al
c0025773:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025777:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002577b:	83 c4 1c             	add    esp,0x1c
c002577e:	c3                   	ret    
c002577f:	90                   	nop

c0025780 <SSE::save(void*)>:
c0025780:	83 ec 0c             	sub    esp,0xc
c0025783:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025787:	83 ec 0c             	sub    esp,0xc
c002578a:	50                   	push   eax
c002578b:	e8 08 10 00 00       	call   c0026798 <sseSave>
c0025790:	83 c4 10             	add    esp,0x10
c0025793:	90                   	nop
c0025794:	83 c4 0c             	add    esp,0xc
c0025797:	c3                   	ret    

c0025798 <SSE::load(void*)>:
c0025798:	83 ec 0c             	sub    esp,0xc
c002579b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002579f:	83 ec 0c             	sub    esp,0xc
c00257a2:	50                   	push   eax
c00257a3:	e8 f6 0f 00 00       	call   c002679e <sseLoad>
c00257a8:	83 c4 10             	add    esp,0x10
c00257ab:	90                   	nop
c00257ac:	83 c4 0c             	add    esp,0xc
c00257af:	c3                   	ret    

c00257b0 <SSE::SSE()>:
c00257b0:	83 ec 0c             	sub    esp,0xc
c00257b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257b7:	83 ec 08             	sub    esp,0x8
c00257ba:	68 14 d2 02 c0       	push   0xc002d214
c00257bf:	50                   	push   eax
c00257c0:	e8 71 f0 fe ff       	call   c0014836 <FPU::FPU(char const*)>
c00257c5:	83 c4 10             	add    esp,0x10
c00257c8:	ba 24 d2 02 c0       	mov    edx,0xc002d224
c00257cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257d1:	89 10                	mov    DWORD PTR [eax],edx
c00257d3:	90                   	nop
c00257d4:	83 c4 0c             	add    esp,0xc
c00257d7:	c3                   	ret    

c00257d8 <x87::open(int, int, void*)>:
c00257d8:	83 ec 0c             	sub    esp,0xc
c00257db:	e8 12 10 00 00       	call   c00267f2 <x87Init>
c00257e0:	b8 00 00 00 00       	mov    eax,0x0
c00257e5:	83 c4 0c             	add    esp,0xc
c00257e8:	c3                   	ret    
c00257e9:	90                   	nop

c00257ea <x87::close(int, int, void*)>:
c00257ea:	83 ec 0c             	sub    esp,0xc
c00257ed:	e8 1a 10 00 00       	call   c002680c <x87Close>
c00257f2:	b8 00 00 00 00       	mov    eax,0x0
c00257f7:	83 c4 0c             	add    esp,0xc
c00257fa:	c3                   	ret    
c00257fb:	90                   	nop

c00257fc <x87::available()>:
c00257fc:	83 ec 0c             	sub    esp,0xc
c00257ff:	e8 c2 0f 00 00       	call   c00267c6 <x87Detect>
c0025804:	85 c0                	test   eax,eax
c0025806:	0f 95 c0             	setne  al
c0025809:	83 c4 0c             	add    esp,0xc
c002580c:	c3                   	ret    
c002580d:	90                   	nop

c002580e <x87::save(void*)>:
c002580e:	83 ec 0c             	sub    esp,0xc
c0025811:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025815:	83 ec 0c             	sub    esp,0xc
c0025818:	50                   	push   eax
c0025819:	e8 c3 0f 00 00       	call   c00267e1 <x87Save>
c002581e:	83 c4 10             	add    esp,0x10
c0025821:	90                   	nop
c0025822:	83 c4 0c             	add    esp,0xc
c0025825:	c3                   	ret    

c0025826 <x87::load(void*)>:
c0025826:	83 ec 0c             	sub    esp,0xc
c0025829:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002582d:	83 ec 0c             	sub    esp,0xc
c0025830:	50                   	push   eax
c0025831:	e8 b4 0f 00 00       	call   c00267ea <x87Load>
c0025836:	83 c4 10             	add    esp,0x10
c0025839:	90                   	nop
c002583a:	83 c4 0c             	add    esp,0xc
c002583d:	c3                   	ret    

c002583e <x87::x87()>:
c002583e:	83 ec 0c             	sub    esp,0xc
c0025841:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025845:	83 ec 08             	sub    esp,0x8
c0025848:	68 54 d2 02 c0       	push   0xc002d254
c002584d:	50                   	push   eax
c002584e:	e8 e3 ef fe ff       	call   c0014836 <FPU::FPU(char const*)>
c0025853:	83 c4 10             	add    esp,0x10
c0025856:	ba 64 d2 02 c0       	mov    edx,0xc002d264
c002585b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002585f:	89 10                	mov    DWORD PTR [eax],edx
c0025861:	90                   	nop
c0025862:	83 c4 0c             	add    esp,0xc
c0025865:	c3                   	ret    

c0025866 <APIC::disable()>:
c0025866:	90                   	nop
c0025867:	c3                   	ret    

c0025868 <APIC::close(int, int, void*)>:
c0025868:	55                   	push   ebp
c0025869:	89 e5                	mov    ebp,esp
c002586b:	83 ec 08             	sub    esp,0x8
c002586e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025871:	8b 00                	mov    eax,DWORD PTR [eax]
c0025873:	83 c0 3c             	add    eax,0x3c
c0025876:	8b 00                	mov    eax,DWORD PTR [eax]
c0025878:	83 ec 0c             	sub    esp,0xc
c002587b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002587e:	ff d0                	call   eax
c0025880:	83 c4 10             	add    esp,0x10
c0025883:	b8 00 00 00 00       	mov    eax,0x0
c0025888:	c9                   	leave  
c0025889:	c3                   	ret    

c002588a <IOAPIC::close(int, int, void*)>:
c002588a:	b8 00 00 00 00       	mov    eax,0x0
c002588f:	c3                   	ret    

c0025890 <APIC::io_wait()>:
c0025890:	eb 00                	jmp    c0025892 <APIC::io_wait()+0x2>
c0025892:	eb 00                	jmp    c0025894 <APIC::io_wait()+0x4>
c0025894:	90                   	nop
c0025895:	c3                   	ret    

c0025896 <APIC::getBase()>:
c0025896:	55                   	push   ebp
c0025897:	89 e5                	mov    ebp,esp
c0025899:	83 ec 18             	sub    esp,0x18
c002589c:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c00258a1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00258a7:	83 e0 08             	and    eax,0x8
c00258aa:	84 c0                	test   al,al
c00258ac:	75 07                	jne    c00258b5 <APIC::getBase()+0x1f>
c00258ae:	b8 00 00 00 00       	mov    eax,0x0
c00258b3:	eb 21                	jmp    c00258d6 <APIC::getBase()+0x40>
c00258b5:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c00258ba:	83 ec 08             	sub    esp,0x8
c00258bd:	6a 1b                	push   0x1b
c00258bf:	50                   	push   eax
c00258c0:	e8 2b 95 fe ff       	call   c000edf0 <Computer::rdmsr(unsigned int)>
c00258c5:	83 c4 10             	add    esp,0x10
c00258c8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00258cb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00258ce:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00258d1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00258d6:	c9                   	leave  
c00258d7:	c3                   	ret    

c00258d8 <APIC::eoi(unsigned char)>:
c00258d8:	55                   	push   ebp
c00258d9:	89 e5                	mov    ebp,esp
c00258db:	83 ec 28             	sub    esp,0x28
c00258de:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00258e1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00258e4:	83 ec 0c             	sub    esp,0xc
c00258e7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258ea:	e8 a7 ff ff ff       	call   c0025896 <APIC::getBase()>
c00258ef:	83 c4 10             	add    esp,0x10
c00258f2:	05 b0 00 00 00       	add    eax,0xb0
c00258f7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00258fa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00258fd:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025903:	90                   	nop
c0025904:	c9                   	leave  
c0025905:	c3                   	ret    

c0025906 <APIC::open(int, int, void*)>:
c0025906:	55                   	push   ebp
c0025907:	89 e5                	mov    ebp,esp
c0025909:	57                   	push   edi
c002590a:	56                   	push   esi
c002590b:	53                   	push   ebx
c002590c:	83 ec 2c             	sub    esp,0x2c
c002590f:	83 ec 0c             	sub    esp,0xc
c0025912:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025915:	e8 7c ff ff ff       	call   c0025896 <APIC::getBase()>
c002591a:	83 c4 10             	add    esp,0x10
c002591d:	89 c2                	mov    edx,eax
c002591f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025922:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025928:	0f b6 f8             	movzx  edi,al
c002592b:	89 d0                	mov    eax,edx
c002592d:	ba 00 00 00 00       	mov    edx,0x0
c0025932:	89 c1                	mov    ecx,eax
c0025934:	80 e5 ff             	and    ch,0xff
c0025937:	89 cb                	mov    ebx,ecx
c0025939:	0f b6 f2             	movzx  esi,dl
c002593c:	89 d8                	mov    eax,ebx
c002593e:	89 f2                	mov    edx,esi
c0025940:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025943:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025946:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002594a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002594e:	83 e0 00             	and    eax,0x0
c0025951:	09 d0                	or     eax,edx
c0025953:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025957:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002595a:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025960:	8d 50 01             	lea    edx,[eax+0x1]
c0025963:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025966:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002596c:	0f b6 d0             	movzx  edx,al
c002596f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025972:	83 c2 08             	add    edx,0x8
c0025975:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025979:	0f b6 c9             	movzx  ecx,cl
c002597c:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025982:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025986:	83 ec 0c             	sub    esp,0xc
c0025989:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002598c:	e8 05 ff ff ff       	call   c0025896 <APIC::getBase()>
c0025991:	83 c4 10             	add    esp,0x10
c0025994:	05 f0 00 00 00       	add    eax,0xf0
c0025999:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002599c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002599f:	8b 00                	mov    eax,DWORD PTR [eax]
c00259a1:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00259a4:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c00259ab:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00259b2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00259b5:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00259b8:	89 10                	mov    DWORD PTR [eax],edx
c00259ba:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00259c1:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c00259c6:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00259c9:	7d 7c                	jge    c0025a47 <APIC::open(int, int, void*)+0x141>
c00259cb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00259ce:	8b 04 85 c0 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf140]
c00259d5:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00259d8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00259db:	8b 04 85 c0 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf140]
c00259e2:	c1 e8 08             	shr    eax,0x8
c00259e5:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00259e9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00259ec:	8b 04 85 c0 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf140]
c00259f3:	c1 e8 18             	shr    eax,0x18
c00259f6:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00259f9:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00259fd:	75 40                	jne    c0025a3f <APIC::open(int, int, void*)+0x139>
c00259ff:	83 ec 0c             	sub    esp,0xc
c0025a02:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025a05:	e8 8c fe ff ff       	call   c0025896 <APIC::getBase()>
c0025a0a:	83 c4 10             	add    esp,0x10
c0025a0d:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0025a11:	75 07                	jne    c0025a1a <APIC::open(int, int, void*)+0x114>
c0025a13:	ba 60 03 00 00       	mov    edx,0x360
c0025a18:	eb 05                	jmp    c0025a1f <APIC::open(int, int, void*)+0x119>
c0025a1a:	ba 50 03 00 00       	mov    edx,0x350
c0025a1f:	01 d0                	add    eax,edx
c0025a21:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025a24:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025a27:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a29:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0025a2c:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0025a33:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025a37:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025a3a:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025a3d:	89 10                	mov    DWORD PTR [eax],edx
c0025a3f:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0025a42:	e9 7a ff ff ff       	jmp    c00259c1 <APIC::open(int, int, void*)+0xbb>
c0025a47:	b8 00 00 00 00       	mov    eax,0x0
c0025a4c:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025a4f:	5b                   	pop    ebx
c0025a50:	5e                   	pop    esi
c0025a51:	5f                   	pop    edi
c0025a52:	5d                   	pop    ebp
c0025a53:	c3                   	ret    

c0025a54 <IOAPIC::IOAPIC()>:
c0025a54:	83 ec 0c             	sub    esp,0xc
c0025a57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a5b:	83 ec 08             	sub    esp,0x8
c0025a5e:	68 94 d2 02 c0       	push   0xc002d294
c0025a63:	50                   	push   eax
c0025a64:	e8 bb ea fe ff       	call   c0014524 <Device::Device(char const*)>
c0025a69:	83 c4 10             	add    esp,0x10
c0025a6c:	ba bc d3 02 c0       	mov    edx,0xc002d3bc
c0025a71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a75:	89 10                	mov    DWORD PTR [eax],edx
c0025a77:	90                   	nop
c0025a78:	83 c4 0c             	add    esp,0xc
c0025a7b:	c3                   	ret    

c0025a7c <APIC::APIC()>:
c0025a7c:	53                   	push   ebx
c0025a7d:	83 ec 18             	sub    esp,0x18
c0025a80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025a84:	83 ec 08             	sub    esp,0x8
c0025a87:	68 9c d2 02 c0       	push   0xc002d29c
c0025a8c:	50                   	push   eax
c0025a8d:	e8 fe f1 fe ff       	call   c0014c90 <InterruptController::InterruptController(char const*)>
c0025a92:	83 c4 10             	add    esp,0x10
c0025a95:	ba 74 d3 02 c0       	mov    edx,0xc002d374
c0025a9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025a9e:	89 10                	mov    DWORD PTR [eax],edx
c0025aa0:	a0 80 29 03 c0       	mov    al,ds:0xc0032980
c0025aa5:	83 f0 01             	xor    eax,0x1
c0025aa8:	84 c0                	test   al,al
c0025aaa:	0f 84 a1 00 00 00    	je     c0025b51 <APIC::APIC()+0xd5>
c0025ab0:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025ab5:	a0 60 0f 03 c0       	mov    al,ds:0xc0030f60
c0025aba:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0025abe:	0f 83 86 00 00 00    	jae    c0025b4a <APIC::APIC()+0xce>
c0025ac4:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0025acc:	83 ec 0c             	sub    esp,0xc
c0025acf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025ad3:	e8 73 9d fe ff       	call   c000f84b <malloc>
c0025ad8:	83 c4 10             	add    esp,0x10
c0025adb:	89 c3                	mov    ebx,eax
c0025add:	83 ec 0c             	sub    esp,0xc
c0025ae0:	53                   	push   ebx
c0025ae1:	e8 6e ff ff ff       	call   c0025a54 <IOAPIC::IOAPIC()>
c0025ae6:	83 c4 10             	add    esp,0x10
c0025ae9:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0025aed:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025af2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025af6:	89 14 85 60 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd6a0],edx
c0025afd:	a1 40 29 03 c0       	mov    eax,ds:0xc0032940
c0025b02:	40                   	inc    eax
c0025b03:	a3 40 29 03 c0       	mov    ds:0xc0032940,eax
c0025b08:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0025b0d:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025b13:	83 ec 08             	sub    esp,0x8
c0025b16:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025b1a:	50                   	push   eax
c0025b1b:	e8 14 e8 fe ff       	call   c0014334 <Device::addChild(Device*)>
c0025b20:	83 c4 10             	add    esp,0x10
c0025b23:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025b27:	8b 00                	mov    eax,DWORD PTR [eax]
c0025b29:	83 c0 08             	add    eax,0x8
c0025b2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0025b2e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025b33:	6a 00                	push   0x0
c0025b35:	6a 00                	push   0x0
c0025b37:	52                   	push   edx
c0025b38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025b3c:	ff d0                	call   eax
c0025b3e:	83 c4 10             	add    esp,0x10
c0025b41:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025b45:	e9 6b ff ff ff       	jmp    c0025ab5 <APIC::APIC()+0x39>
c0025b4a:	c6 05 80 29 03 c0 01 	mov    BYTE PTR ds:0xc0032980,0x1
c0025b51:	90                   	nop
c0025b52:	83 c4 18             	add    esp,0x18
c0025b55:	5b                   	pop    ebx
c0025b56:	c3                   	ret    
c0025b57:	90                   	nop

c0025b58 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025b58:	55                   	push   ebp
c0025b59:	89 e5                	mov    ebp,esp
c0025b5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b5e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025b64:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025b67:	72 1d                	jb     c0025b86 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025b69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b6c:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025b72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b75:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025b7b:	01 d0                	add    eax,edx
c0025b7d:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025b80:	73 04                	jae    c0025b86 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025b82:	b0 01                	mov    al,0x1
c0025b84:	eb 02                	jmp    c0025b88 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025b86:	b0 00                	mov    al,0x0
c0025b88:	5d                   	pop    ebp
c0025b89:	c3                   	ret    

c0025b8a <IOAPIC::read(int)>:
c0025b8a:	55                   	push   ebp
c0025b8b:	89 e5                	mov    ebp,esp
c0025b8d:	83 ec 10             	sub    esp,0x10
c0025b90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b93:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025b99:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025b9c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b9f:	0f b6 d0             	movzx  edx,al
c0025ba2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025ba5:	89 10                	mov    DWORD PTR [eax],edx
c0025ba7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025baa:	83 c0 10             	add    eax,0x10
c0025bad:	8b 00                	mov    eax,DWORD PTR [eax]
c0025baf:	c9                   	leave  
c0025bb0:	c3                   	ret    
c0025bb1:	90                   	nop

c0025bb2 <IOAPIC::open(int, int, void*)>:
c0025bb2:	55                   	push   ebp
c0025bb3:	89 e5                	mov    ebp,esp
c0025bb5:	57                   	push   edi
c0025bb6:	56                   	push   esi
c0025bb7:	53                   	push   ebx
c0025bb8:	83 ec 0c             	sub    esp,0xc
c0025bbb:	83 ec 0c             	sub    esp,0xc
c0025bbe:	68 c7 d2 02 c0       	push   0xc002d2c7
c0025bc3:	e8 3f d3 fe ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0025bc8:	83 c4 10             	add    esp,0x10
c0025bcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bce:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025bd1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025bd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bda:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025be0:	8b 14 85 a0 0f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf060]
c0025be7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bea:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025bf0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bf3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025bf9:	8b 14 85 20 10 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcefe0]
c0025c00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c03:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025c09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c0c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025c12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c15:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025c1b:	0f b6 f8             	movzx  edi,al
c0025c1e:	89 d0                	mov    eax,edx
c0025c20:	ba 00 00 00 00       	mov    edx,0x0
c0025c25:	89 c1                	mov    ecx,eax
c0025c27:	80 e5 ff             	and    ch,0xff
c0025c2a:	89 cb                	mov    ebx,ecx
c0025c2c:	0f b6 f2             	movzx  esi,dl
c0025c2f:	89 d8                	mov    eax,ebx
c0025c31:	89 f2                	mov    edx,esi
c0025c33:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025c36:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025c39:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025c3d:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025c41:	83 e0 00             	and    eax,0x0
c0025c44:	09 d0                	or     eax,edx
c0025c46:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025c4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c4d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025c53:	8d 50 01             	lea    edx,[eax+0x1]
c0025c56:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025c59:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025c5f:	0f b6 d0             	movzx  edx,al
c0025c62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c65:	83 c2 08             	add    edx,0x8
c0025c68:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025c6c:	0f b6 c9             	movzx  ecx,cl
c0025c6f:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025c75:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025c79:	83 ec 08             	sub    esp,0x8
c0025c7c:	6a 01                	push   0x1
c0025c7e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c81:	e8 04 ff ff ff       	call   c0025b8a <IOAPIC::read(int)>
c0025c86:	83 c4 10             	add    esp,0x10
c0025c89:	c1 f8 10             	sar    eax,0x10
c0025c8c:	0f b6 c0             	movzx  eax,al
c0025c8f:	8d 50 01             	lea    edx,[eax+0x1]
c0025c92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c95:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025c9b:	b8 00 00 00 00       	mov    eax,0x0
c0025ca0:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025ca3:	5b                   	pop    ebx
c0025ca4:	5e                   	pop    esi
c0025ca5:	5f                   	pop    edi
c0025ca6:	5d                   	pop    ebp
c0025ca7:	c3                   	ret    

c0025ca8 <IOAPIC::write(int, int)>:
c0025ca8:	55                   	push   ebp
c0025ca9:	89 e5                	mov    ebp,esp
c0025cab:	83 ec 10             	sub    esp,0x10
c0025cae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025cb1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025cb7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025cba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025cbd:	0f b6 d0             	movzx  edx,al
c0025cc0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025cc3:	89 10                	mov    DWORD PTR [eax],edx
c0025cc5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025cc8:	8d 50 10             	lea    edx,[eax+0x10]
c0025ccb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025cce:	89 02                	mov    DWORD PTR [edx],eax
c0025cd0:	90                   	nop
c0025cd1:	c9                   	leave  
c0025cd2:	c3                   	ret    
c0025cd3:	90                   	nop

c0025cd4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025cd4:	55                   	push   ebp
c0025cd5:	89 e5                	mov    ebp,esp
c0025cd7:	53                   	push   ebx
c0025cd8:	83 ec 2c             	sub    esp,0x2c
c0025cdb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025cde:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025ce1:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025ce4:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025ce7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025cea:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025ced:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025cf0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025cf3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025cf6:	88 d8                	mov    al,bl
c0025cf8:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025cfb:	88 c8                	mov    al,cl
c0025cfd:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025d00:	88 d0                	mov    al,dl
c0025d02:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025d05:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025d09:	83 c0 08             	add    eax,0x8
c0025d0c:	01 c0                	add    eax,eax
c0025d0e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025d11:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025d15:	83 c0 08             	add    eax,0x8
c0025d18:	01 c0                	add    eax,eax
c0025d1a:	40                   	inc    eax
c0025d1b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025d1e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025d21:	50                   	push   eax
c0025d22:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d25:	e8 60 fe ff ff       	call   c0025b8a <IOAPIC::read(int)>
c0025d2a:	83 c4 08             	add    esp,0x8
c0025d2d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025d30:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025d37:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025d3a:	c1 e0 18             	shl    eax,0x18
c0025d3d:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025d40:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025d43:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025d46:	52                   	push   edx
c0025d47:	50                   	push   eax
c0025d48:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d4b:	e8 58 ff ff ff       	call   c0025ca8 <IOAPIC::write(int, int)>
c0025d50:	83 c4 0c             	add    esp,0xc
c0025d53:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025d56:	50                   	push   eax
c0025d57:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d5a:	e8 2b fe ff ff       	call   c0025b8a <IOAPIC::read(int)>
c0025d5f:	83 c4 08             	add    esp,0x8
c0025d62:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025d65:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025d6c:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025d73:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025d7a:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025d7e:	74 09                	je     c0025d89 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025d80:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025d87:	eb 07                	jmp    c0025d90 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025d89:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025d90:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025d94:	74 09                	je     c0025d9f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025d96:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025d9d:	eb 07                	jmp    c0025da6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025d9f:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025da6:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025dad:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025db1:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025db4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025db7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025dba:	52                   	push   edx
c0025dbb:	50                   	push   eax
c0025dbc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025dbf:	e8 e4 fe ff ff       	call   c0025ca8 <IOAPIC::write(int, int)>
c0025dc4:	83 c4 0c             	add    esp,0xc
c0025dc7:	90                   	nop
c0025dc8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025dcb:	c9                   	leave  
c0025dcc:	c3                   	ret    
c0025dcd:	90                   	nop

c0025dce <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025dce:	55                   	push   ebp
c0025dcf:	89 e5                	mov    ebp,esp
c0025dd1:	57                   	push   edi
c0025dd2:	56                   	push   esi
c0025dd3:	53                   	push   ebx
c0025dd4:	83 ec 2c             	sub    esp,0x2c
c0025dd7:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025dda:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025ddd:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025de1:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025de5:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025de9:	74 5a                	je     c0025e45 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025deb:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025def:	7f 44                	jg     c0025e35 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025df1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025df4:	05 20 d8 02 c0       	add    eax,0xc002d820
c0025df9:	8a 00                	mov    al,BYTE PTR [eax]
c0025dfb:	0f b6 c0             	movzx  eax,al
c0025dfe:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025e01:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e04:	66 8b 84 00 40 0f 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf0c0]
c0025e0c:	0f b7 c0             	movzx  eax,ax
c0025e0f:	83 e0 02             	and    eax,0x2
c0025e12:	85 c0                	test   eax,eax
c0025e14:	74 04                	je     c0025e1a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025e16:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025e1a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e1d:	66 8b 84 00 40 0f 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf0c0]
c0025e25:	0f b7 c0             	movzx  eax,ax
c0025e28:	83 e0 08             	and    eax,0x8
c0025e2b:	85 c0                	test   eax,eax
c0025e2d:	74 16                	je     c0025e45 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025e2f:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025e33:	eb 10                	jmp    c0025e45 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025e35:	83 ec 0c             	sub    esp,0xc
c0025e38:	68 d8 d2 02 c0       	push   0xc002d2d8
c0025e3d:	e8 03 48 ff ff       	call   c001a645 <Krnl::panic(char const*)>
c0025e42:	83 c4 10             	add    esp,0x10
c0025e45:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025e49:	a1 40 29 03 c0       	mov    eax,ds:0xc0032940
c0025e4e:	83 ec 08             	sub    esp,0x8
c0025e51:	50                   	push   eax
c0025e52:	68 10 d3 02 c0       	push   0xc002d310
c0025e57:	e8 ab d0 fe ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0025e5c:	83 c4 10             	add    esp,0x10
c0025e5f:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025e66:	a1 40 29 03 c0       	mov    eax,ds:0xc0032940
c0025e6b:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025e6e:	7d 67                	jge    c0025ed7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025e70:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025e73:	8b 04 85 60 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd6a0]
c0025e7a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e7d:	83 ec 08             	sub    esp,0x8
c0025e80:	52                   	push   edx
c0025e81:	50                   	push   eax
c0025e82:	e8 d1 fc ff ff       	call   c0025b58 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025e87:	83 c4 10             	add    esp,0x10
c0025e8a:	84 c0                	test   al,al
c0025e8c:	74 44                	je     c0025ed2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025e8e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025e91:	8b 1c 85 60 29 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcd6a0]
c0025e98:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025e9c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025e9f:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025ea3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ea6:	83 c0 20             	add    eax,0x20
c0025ea9:	0f b6 f0             	movzx  esi,al
c0025eac:	b8 00 00 00 00       	mov    eax,0x0
c0025eb1:	99                   	cdq    
c0025eb2:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025eb5:	0f b6 c9             	movzx  ecx,cl
c0025eb8:	83 ec 04             	sub    esp,0x4
c0025ebb:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025ebe:	57                   	push   edi
c0025ebf:	56                   	push   esi
c0025ec0:	52                   	push   edx
c0025ec1:	50                   	push   eax
c0025ec2:	51                   	push   ecx
c0025ec3:	53                   	push   ebx
c0025ec4:	e8 0b fe ff ff       	call   c0025cd4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025ec9:	83 c4 20             	add    esp,0x20
c0025ecc:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025ed0:	eb 05                	jmp    c0025ed7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025ed2:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025ed5:	eb 8f                	jmp    c0025e66 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025ed7:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025eda:	83 f0 01             	xor    eax,0x1
c0025edd:	84 c0                	test   al,al
c0025edf:	74 10                	je     c0025ef1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025ee1:	83 ec 0c             	sub    esp,0xc
c0025ee4:	68 27 d3 02 c0       	push   0xc002d327
c0025ee9:	e8 57 47 ff ff       	call   c001a645 <Krnl::panic(char const*)>
c0025eee:	83 c4 10             	add    esp,0x10
c0025ef1:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025ef5:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025efc:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025f00:	7f 65                	jg     c0025f67 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025f02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f05:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025f08:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025f0f:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025f12:	01 ca                	add    edx,ecx
c0025f14:	83 c2 54             	add    edx,0x54
c0025f17:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025f1b:	85 c0                	test   eax,eax
c0025f1d:	75 43                	jne    c0025f62 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025f1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f22:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025f25:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025f2c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025f2f:	01 ca                	add    edx,ecx
c0025f31:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025f34:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025f37:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025f3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f3e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025f41:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025f48:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025f4b:	01 ca                	add    edx,ecx
c0025f4d:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025f53:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025f56:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025f5a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f5d:	83 e8 20             	sub    eax,0x20
c0025f60:	eb 1a                	jmp    c0025f7c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025f62:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025f65:	eb 95                	jmp    c0025efc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025f67:	83 ec 0c             	sub    esp,0xc
c0025f6a:	68 34 d3 02 c0       	push   0xc002d334
c0025f6f:	e8 d1 46 ff ff       	call   c001a645 <Krnl::panic(char const*)>
c0025f74:	83 c4 10             	add    esp,0x10
c0025f77:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025f7c:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025f7f:	5b                   	pop    ebx
c0025f80:	5e                   	pop    esi
c0025f81:	5f                   	pop    edi
c0025f82:	5d                   	pop    ebp
c0025f83:	c3                   	ret    

c0025f84 <PIC::disable()>:
c0025f84:	55                   	push   ebp
c0025f85:	89 e5                	mov    ebp,esp
c0025f87:	83 ec 10             	sub    esp,0x10
c0025f8a:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025f90:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025f94:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025f97:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025f9b:	ee                   	out    dx,al
c0025f9c:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025fa2:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025fa6:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025fa9:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025fad:	ee                   	out    dx,al
c0025fae:	90                   	nop
c0025faf:	c9                   	leave  
c0025fb0:	c3                   	ret    
c0025fb1:	90                   	nop

c0025fb2 <PIC::close(int, int, void*)>:
c0025fb2:	55                   	push   ebp
c0025fb3:	89 e5                	mov    ebp,esp
c0025fb5:	83 ec 08             	sub    esp,0x8
c0025fb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025fbb:	8b 00                	mov    eax,DWORD PTR [eax]
c0025fbd:	83 c0 3c             	add    eax,0x3c
c0025fc0:	8b 00                	mov    eax,DWORD PTR [eax]
c0025fc2:	83 ec 0c             	sub    esp,0xc
c0025fc5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fc8:	ff d0                	call   eax
c0025fca:	83 c4 10             	add    esp,0x10
c0025fcd:	b8 00 00 00 00       	mov    eax,0x0
c0025fd2:	c9                   	leave  
c0025fd3:	c3                   	ret    

c0025fd4 <PIC::PIC()>:
c0025fd4:	83 ec 0c             	sub    esp,0xc
c0025fd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fdb:	83 ec 08             	sub    esp,0x8
c0025fde:	68 e0 d3 02 c0       	push   0xc002d3e0
c0025fe3:	50                   	push   eax
c0025fe4:	e8 a7 ec fe ff       	call   c0014c90 <InterruptController::InterruptController(char const*)>
c0025fe9:	83 c4 10             	add    esp,0x10
c0025fec:	ba 0c d4 02 c0       	mov    edx,0xc002d40c
c0025ff1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ff5:	89 10                	mov    DWORD PTR [eax],edx
c0025ff7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ffb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026001:	0f b6 d0             	movzx  edx,al
c0026004:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026008:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c002600f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026013:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026019:	0f b6 d0             	movzx  edx,al
c002601c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026020:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0026025:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026029:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002602f:	8d 50 01             	lea    edx,[eax+0x1]
c0026032:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026036:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002603c:	0f b6 d0             	movzx  edx,al
c002603f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026043:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026047:	83 e1 3f             	and    ecx,0x3f
c002604a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002604e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026052:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026058:	0f b6 d0             	movzx  edx,al
c002605b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002605f:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0026066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002606a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026070:	0f b6 d0             	movzx  edx,al
c0026073:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026077:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c002607c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026080:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026086:	8d 50 01             	lea    edx,[eax+0x1]
c0026089:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002608d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026093:	0f b6 d0             	movzx  edx,al
c0026096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002609a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002609e:	83 e1 3f             	and    ecx,0x3f
c00260a1:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00260a5:	90                   	nop
c00260a6:	83 c4 0c             	add    esp,0xc
c00260a9:	c3                   	ret    

c00260aa <PIC::ioWait()>:
c00260aa:	eb 00                	jmp    c00260ac <PIC::ioWait()+0x2>
c00260ac:	eb 00                	jmp    c00260ae <PIC::ioWait()+0x4>
c00260ae:	90                   	nop
c00260af:	c3                   	ret    

c00260b0 <PIC::getIRQReg(int)>:
c00260b0:	55                   	push   ebp
c00260b1:	89 e5                	mov    ebp,esp
c00260b3:	83 ec 10             	sub    esp,0x10
c00260b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00260b9:	0f b6 c0             	movzx  eax,al
c00260bc:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00260c2:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c00260c5:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00260c8:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00260cc:	ee                   	out    dx,al
c00260cd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00260d0:	0f b6 c0             	movzx  eax,al
c00260d3:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00260d9:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c00260dc:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00260df:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00260e3:	ee                   	out    dx,al
c00260e4:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c00260ea:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c00260ee:	89 c2                	mov    edx,eax
c00260f0:	ec                   	in     al,dx
c00260f1:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c00260f4:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00260f7:	0f b6 c0             	movzx  eax,al
c00260fa:	c1 e0 08             	shl    eax,0x8
c00260fd:	89 c1                	mov    ecx,eax
c00260ff:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0026105:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0026109:	89 c2                	mov    edx,eax
c002610b:	ec                   	in     al,dx
c002610c:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c002610f:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026112:	0f b6 c0             	movzx  eax,al
c0026115:	09 c8                	or     eax,ecx
c0026117:	c9                   	leave  
c0026118:	c3                   	ret    
c0026119:	90                   	nop

c002611a <PIC::eoi(unsigned char)>:
c002611a:	55                   	push   ebp
c002611b:	89 e5                	mov    ebp,esp
c002611d:	83 ec 14             	sub    esp,0x14
c0026120:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026123:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0026126:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002612a:	75 1e                	jne    c002614a <PIC::eoi(unsigned char)+0x30>
c002612c:	6a 0b                	push   0xb
c002612e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026131:	e8 7a ff ff ff       	call   c00260b0 <PIC::getIRQReg(int)>
c0026136:	83 c4 08             	add    esp,0x8
c0026139:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c002613d:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0026141:	25 80 00 00 00       	and    eax,0x80
c0026146:	85 c0                	test   eax,eax
c0026148:	74 5f                	je     c00261a9 <PIC::eoi(unsigned char)+0x8f>
c002614a:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c002614e:	75 2d                	jne    c002617d <PIC::eoi(unsigned char)+0x63>
c0026150:	6a 0b                	push   0xb
c0026152:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026155:	e8 56 ff ff ff       	call   c00260b0 <PIC::getIRQReg(int)>
c002615a:	83 c4 08             	add    esp,0x8
c002615d:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0026161:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026164:	66 85 c0             	test   ax,ax
c0026167:	78 14                	js     c002617d <PIC::eoi(unsigned char)+0x63>
c0026169:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c002616f:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0026173:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026176:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c002617a:	ee                   	out    dx,al
c002617b:	eb 2d                	jmp    c00261aa <PIC::eoi(unsigned char)+0x90>
c002617d:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026181:	76 12                	jbe    c0026195 <PIC::eoi(unsigned char)+0x7b>
c0026183:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026189:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c002618d:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026190:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026194:	ee                   	out    dx,al
c0026195:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002619b:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c002619f:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00261a2:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00261a6:	ee                   	out    dx,al
c00261a7:	eb 01                	jmp    c00261aa <PIC::eoi(unsigned char)+0x90>
c00261a9:	90                   	nop
c00261aa:	c9                   	leave  
c00261ab:	c3                   	ret    

c00261ac <PIC::remap()>:
c00261ac:	55                   	push   ebp
c00261ad:	89 e5                	mov    ebp,esp
c00261af:	83 ec 48             	sub    esp,0x48
c00261b2:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c00261b9:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c00261c0:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c00261c6:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c00261c9:	89 c2                	mov    edx,eax
c00261cb:	ec                   	in     al,dx
c00261cc:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c00261cf:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c00261d2:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00261d5:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c00261db:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c00261de:	89 c2                	mov    edx,eax
c00261e0:	ec                   	in     al,dx
c00261e1:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c00261e4:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c00261e7:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c00261ea:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c00261f0:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c00261f4:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c00261f7:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c00261fa:	ee                   	out    dx,al
c00261fb:	83 ec 0c             	sub    esp,0xc
c00261fe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026201:	e8 a4 fe ff ff       	call   c00260aa <PIC::ioWait()>
c0026206:	83 c4 10             	add    esp,0x10
c0026209:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c002620f:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0026213:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0026216:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0026219:	ee                   	out    dx,al
c002621a:	83 ec 0c             	sub    esp,0xc
c002621d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026220:	e8 85 fe ff ff       	call   c00260aa <PIC::ioWait()>
c0026225:	83 c4 10             	add    esp,0x10
c0026228:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002622b:	0f b6 c0             	movzx  eax,al
c002622e:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0026234:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0026237:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c002623a:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c002623d:	ee                   	out    dx,al
c002623e:	83 ec 0c             	sub    esp,0xc
c0026241:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026244:	e8 61 fe ff ff       	call   c00260aa <PIC::ioWait()>
c0026249:	83 c4 10             	add    esp,0x10
c002624c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002624f:	0f b6 c0             	movzx  eax,al
c0026252:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0026258:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c002625b:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c002625e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026261:	ee                   	out    dx,al
c0026262:	83 ec 0c             	sub    esp,0xc
c0026265:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026268:	e8 3d fe ff ff       	call   c00260aa <PIC::ioWait()>
c002626d:	83 c4 10             	add    esp,0x10
c0026270:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0026276:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c002627a:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c002627d:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0026280:	ee                   	out    dx,al
c0026281:	83 ec 0c             	sub    esp,0xc
c0026284:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026287:	e8 1e fe ff ff       	call   c00260aa <PIC::ioWait()>
c002628c:	83 c4 10             	add    esp,0x10
c002628f:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026295:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026299:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c002629c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002629f:	ee                   	out    dx,al
c00262a0:	83 ec 0c             	sub    esp,0xc
c00262a3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00262a6:	e8 ff fd ff ff       	call   c00260aa <PIC::ioWait()>
c00262ab:	83 c4 10             	add    esp,0x10
c00262ae:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c00262b4:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c00262b8:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c00262bb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00262be:	ee                   	out    dx,al
c00262bf:	83 ec 0c             	sub    esp,0xc
c00262c2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00262c5:	e8 e0 fd ff ff       	call   c00260aa <PIC::ioWait()>
c00262ca:	83 c4 10             	add    esp,0x10
c00262cd:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c00262d3:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c00262d7:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c00262da:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00262dd:	ee                   	out    dx,al
c00262de:	83 ec 0c             	sub    esp,0xc
c00262e1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00262e4:	e8 c1 fd ff ff       	call   c00260aa <PIC::ioWait()>
c00262e9:	83 c4 10             	add    esp,0x10
c00262ec:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c00262f0:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c00262f6:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c00262f9:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c00262fc:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00262ff:	ee                   	out    dx,al
c0026300:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0026304:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c002630a:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c002630d:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0026310:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026313:	ee                   	out    dx,al
c0026314:	90                   	nop
c0026315:	c9                   	leave  
c0026316:	c3                   	ret    
c0026317:	90                   	nop

c0026318 <PIC::open(int, int, void*)>:
c0026318:	55                   	push   ebp
c0026319:	89 e5                	mov    ebp,esp
c002631b:	83 ec 18             	sub    esp,0x18
c002631e:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0026324:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0026328:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002632b:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002632f:	ee                   	out    dx,al
c0026330:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0026336:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c002633a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002633d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026341:	ee                   	out    dx,al
c0026342:	83 ec 0c             	sub    esp,0xc
c0026345:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026348:	e8 5f fe ff ff       	call   c00261ac <PIC::remap()>
c002634d:	83 c4 10             	add    esp,0x10
c0026350:	b8 00 00 00 00       	mov    eax,0x0
c0026355:	c9                   	leave  
c0026356:	c3                   	ret    
c0026357:	90                   	nop

c0026358 <APICTimer::close(int, int, void*)>:
c0026358:	b8 00 00 00 00       	mov    eax,0x0
c002635d:	c3                   	ret    

c002635e <apicTimerHandler(regs*, void*)>:
c002635e:	83 ec 0c             	sub    esp,0xc
c0026361:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026365:	8b 00                	mov    eax,DWORD PTR [eax]
c0026367:	99                   	cdq    
c0026368:	52                   	push   edx
c0026369:	50                   	push   eax
c002636a:	6a 00                	push   0x0
c002636c:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026371:	e8 8e 07 00 00       	call   c0026b04 <__udivdi3>
c0026376:	83 c4 10             	add    esp,0x10
c0026379:	83 ec 08             	sub    esp,0x8
c002637c:	52                   	push   edx
c002637d:	50                   	push   eax
c002637e:	e8 d2 09 ff ff       	call   c0016d55 <timerHandler(unsigned long long)>
c0026383:	83 c4 10             	add    esp,0x10
c0026386:	90                   	nop
c0026387:	83 c4 0c             	add    esp,0xc
c002638a:	c3                   	ret    
c002638b:	90                   	nop

c002638c <APICTimer::write(int)>:
c002638c:	53                   	push   ebx
c002638d:	83 ec 28             	sub    esp,0x28
c0026390:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026394:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026398:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002639e:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c00263a3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00263a9:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00263af:	83 ec 0c             	sub    esp,0xc
c00263b2:	50                   	push   eax
c00263b3:	e8 de f4 ff ff       	call   c0025896 <APIC::getBase()>
c00263b8:	83 c4 10             	add    esp,0x10
c00263bb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00263bf:	a1 50 ec 02 c0       	mov    eax,ds:0xc002ec50
c00263c4:	8b 15 54 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ec54
c00263ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00263ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00263d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00263d6:	05 e0 03 00 00       	add    eax,0x3e0
c00263db:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00263e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00263e5:	05 80 03 00 00       	add    eax,0x380
c00263ea:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00263f0:	fb                   	sti    
c00263f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263f5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00263f9:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c00263fe:	83 d2 00             	adc    edx,0x0
c0026401:	89 c1                	mov    ecx,eax
c0026403:	89 d3                	mov    ebx,edx
c0026405:	a1 50 ec 02 c0       	mov    eax,ds:0xc002ec50
c002640a:	8b 15 54 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ec54
c0026410:	39 c8                	cmp    eax,ecx
c0026412:	89 d0                	mov    eax,edx
c0026414:	19 d8                	sbb    eax,ebx
c0026416:	73 02                	jae    c002641a <APICTimer::write(int)+0x8e>
c0026418:	eb d7                	jmp    c00263f1 <APICTimer::write(int)+0x65>
c002641a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002641e:	05 20 03 00 00       	add    eax,0x320
c0026423:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026429:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002642d:	05 90 03 00 00       	add    eax,0x390
c0026432:	8b 00                	mov    eax,DWORD PTR [eax]
c0026434:	f7 d0                	not    eax
c0026436:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002643a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002643e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026442:	ba 00 00 00 00       	mov    edx,0x0
c0026447:	f7 f3                	div    ebx
c0026449:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002644d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026451:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026457:	0d 00 00 02 00       	or     eax,0x20000
c002645c:	89 c2                	mov    edx,eax
c002645e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026462:	05 20 03 00 00       	add    eax,0x320
c0026467:	89 10                	mov    DWORD PTR [eax],edx
c0026469:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002646d:	05 e0 03 00 00       	add    eax,0x3e0
c0026472:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026478:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002647c:	05 80 03 00 00       	add    eax,0x380
c0026481:	89 c2                	mov    edx,eax
c0026483:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026487:	89 02                	mov    DWORD PTR [edx],eax
c0026489:	90                   	nop
c002648a:	83 c4 28             	add    esp,0x28
c002648d:	5b                   	pop    ebx
c002648e:	c3                   	ret    
c002648f:	90                   	nop

c0026490 <APICTimer::open(int, int, void*)>:
c0026490:	57                   	push   edi
c0026491:	56                   	push   esi
c0026492:	53                   	push   ebx
c0026493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026497:	8b 00                	mov    eax,DWORD PTR [eax]
c0026499:	83 c0 24             	add    eax,0x24
c002649c:	8b 00                	mov    eax,DWORD PTR [eax]
c002649e:	83 ec 08             	sub    esp,0x8
c00264a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00264a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00264a9:	ff d0                	call   eax
c00264ab:	83 c4 10             	add    esp,0x10
c00264ae:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c00264b3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00264b9:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00264bf:	83 ec 0c             	sub    esp,0xc
c00264c2:	50                   	push   eax
c00264c3:	e8 ce f3 ff ff       	call   c0025896 <APIC::getBase()>
c00264c8:	83 c4 10             	add    esp,0x10
c00264cb:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c00264d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264d5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00264db:	0f b6 f8             	movzx  edi,al
c00264de:	89 d0                	mov    eax,edx
c00264e0:	ba 00 00 00 00       	mov    edx,0x0
c00264e5:	89 c1                	mov    ecx,eax
c00264e7:	80 e5 ff             	and    ch,0xff
c00264ea:	89 cb                	mov    ebx,ecx
c00264ec:	0f b6 f2             	movzx  esi,dl
c00264ef:	89 d8                	mov    eax,ebx
c00264f1:	89 f2                	mov    edx,esi
c00264f3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00264f7:	8d 5f 08             	lea    ebx,[edi+0x8]
c00264fa:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00264fe:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026502:	83 e0 00             	and    eax,0x0
c0026505:	09 d0                	or     eax,edx
c0026507:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002650b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002650f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026515:	8d 50 01             	lea    edx,[eax+0x1]
c0026518:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002651c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026522:	0f b6 d0             	movzx  edx,al
c0026525:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026529:	83 c2 08             	add    edx,0x8
c002652c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026530:	0f b6 c9             	movzx  ecx,cl
c0026533:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026539:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002653d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026541:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026545:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002654b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002654f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026553:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026559:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002655d:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026563:	83 ec 0c             	sub    esp,0xc
c0026566:	51                   	push   ecx
c0026567:	6a 01                	push   0x1
c0026569:	68 5e 63 02 c0       	push   0xc002635e
c002656e:	52                   	push   edx
c002656f:	50                   	push   eax
c0026570:	e8 43 dd fe ff       	call   c00142b8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026575:	83 c4 20             	add    esp,0x20
c0026578:	89 c2                	mov    edx,eax
c002657a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002657e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026584:	b8 00 00 00 00       	mov    eax,0x0
c0026589:	5b                   	pop    ebx
c002658a:	5e                   	pop    esi
c002658b:	5f                   	pop    edi
c002658c:	c3                   	ret    
c002658d:	90                   	nop

c002658e <APICTimer::APICTimer()>:
c002658e:	83 ec 0c             	sub    esp,0xc
c0026591:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026595:	83 ec 08             	sub    esp,0x8
c0026598:	68 4c d4 02 c0       	push   0xc002d44c
c002659d:	50                   	push   eax
c002659e:	e8 23 07 ff ff       	call   c0016cc6 <Timer::Timer(char const*)>
c00265a3:	83 c4 10             	add    esp,0x10
c00265a6:	ba 60 d4 02 c0       	mov    edx,0xc002d460
c00265ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265af:	89 10                	mov    DWORD PTR [eax],edx
c00265b1:	90                   	nop
c00265b2:	83 c4 0c             	add    esp,0xc
c00265b5:	c3                   	ret    

c00265b6 <PIT::write(int)>:
c00265b6:	83 ec 10             	sub    esp,0x10
c00265b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00265bd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00265c1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00265c7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00265cb:	a3 84 29 03 c0       	mov    ds:0xc0032984,eax
c00265d0:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00265d5:	99                   	cdq    
c00265d6:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00265da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00265de:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00265e5:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00265ea:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00265ee:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00265f3:	ee                   	out    dx,al
c00265f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00265f8:	0f b6 c0             	movzx  eax,al
c00265fb:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026602:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026606:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002660a:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002660f:	ee                   	out    dx,al
c0026610:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026614:	c1 f8 08             	sar    eax,0x8
c0026617:	0f b6 c0             	movzx  eax,al
c002661a:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026621:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026625:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026629:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002662e:	ee                   	out    dx,al
c002662f:	90                   	nop
c0026630:	83 c4 10             	add    esp,0x10
c0026633:	c3                   	ret    

c0026634 <pitHandler(regs*, void*)>:
c0026634:	83 ec 0c             	sub    esp,0xc
c0026637:	a1 84 29 03 c0       	mov    eax,ds:0xc0032984
c002663c:	99                   	cdq    
c002663d:	52                   	push   edx
c002663e:	50                   	push   eax
c002663f:	6a 00                	push   0x0
c0026641:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026646:	e8 b9 04 00 00       	call   c0026b04 <__udivdi3>
c002664b:	83 c4 10             	add    esp,0x10
c002664e:	83 ec 08             	sub    esp,0x8
c0026651:	52                   	push   edx
c0026652:	50                   	push   eax
c0026653:	e8 fd 06 ff ff       	call   c0016d55 <timerHandler(unsigned long long)>
c0026658:	83 c4 10             	add    esp,0x10
c002665b:	90                   	nop
c002665c:	83 c4 0c             	add    esp,0xc
c002665f:	c3                   	ret    

c0026660 <PIT::open(int, int, void*)>:
c0026660:	83 ec 0c             	sub    esp,0xc
c0026663:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026667:	8b 00                	mov    eax,DWORD PTR [eax]
c0026669:	83 c0 24             	add    eax,0x24
c002666c:	8b 00                	mov    eax,DWORD PTR [eax]
c002666e:	83 ec 08             	sub    esp,0x8
c0026671:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026675:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026679:	ff d0                	call   eax
c002667b:	83 c4 10             	add    esp,0x10
c002667e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026682:	83 ec 0c             	sub    esp,0xc
c0026685:	6a 00                	push   0x0
c0026687:	6a 01                	push   0x1
c0026689:	68 34 66 02 c0       	push   0xc0026634
c002668e:	6a 00                	push   0x0
c0026690:	50                   	push   eax
c0026691:	e8 22 dc fe ff       	call   c00142b8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026696:	83 c4 20             	add    esp,0x20
c0026699:	89 c2                	mov    edx,eax
c002669b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002669f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00266a5:	b8 00 00 00 00       	mov    eax,0x0
c00266aa:	83 c4 0c             	add    esp,0xc
c00266ad:	c3                   	ret    

c00266ae <PIT::close(int, int, void*)>:
c00266ae:	83 ec 0c             	sub    esp,0xc
c00266b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266b5:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00266bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266c3:	6a 01                	push   0x1
c00266c5:	68 34 66 02 c0       	push   0xc0026634
c00266ca:	6a 00                	push   0x0
c00266cc:	50                   	push   eax
c00266cd:	e8 24 dc fe ff       	call   c00142f6 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00266d2:	83 c4 10             	add    esp,0x10
c00266d5:	b8 00 00 00 00       	mov    eax,0x0
c00266da:	83 c4 0c             	add    esp,0xc
c00266dd:	c3                   	ret    

c00266de <PIT::PIT()>:
c00266de:	83 ec 0c             	sub    esp,0xc
c00266e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266e5:	83 ec 08             	sub    esp,0x8
c00266e8:	68 88 d4 02 c0       	push   0xc002d488
c00266ed:	50                   	push   eax
c00266ee:	e8 d3 05 ff ff       	call   c0016cc6 <Timer::Timer(char const*)>
c00266f3:	83 c4 10             	add    esp,0x10
c00266f6:	ba b0 d4 02 c0       	mov    edx,0xc002d4b0
c00266fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266ff:	89 10                	mov    DWORD PTR [eax],edx
c0026701:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026705:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002670b:	0f b6 d0             	movzx  edx,al
c002670e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026712:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026719:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002671d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026723:	0f b6 d0             	movzx  edx,al
c0026726:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002672a:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002672f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026733:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026739:	8d 50 01             	lea    edx,[eax+0x1]
c002673c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026740:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026746:	0f b6 d0             	movzx  edx,al
c0026749:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002674d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026751:	83 e1 3f             	and    ecx,0x3f
c0026754:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026758:	90                   	nop
c0026759:	83 c4 0c             	add    esp,0xc
c002675c:	c3                   	ret    
c002675d:	66 90                	xchg   ax,ax
c002675f:	90                   	nop

c0026760 <avxDetect>:
c0026760:	b8 00 00 00 00       	mov    eax,0x0
c0026765:	c3                   	ret    

c0026766 <avxSave>:
c0026766:	c3                   	ret    

c0026767 <avxLoad>:
c0026767:	c3                   	ret    

c0026768 <avxInit>:
c0026768:	c3                   	ret    

c0026769 <avxClose>:
c0026769:	c3                   	ret    

c002676a <wouldSheSayYes>:
c002676a:	c3                   	ret    
c002676b:	49                   	dec    ecx
c002676c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026770:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026774:	75 20                	jne    c0026796 <sseDetect.noSSE+0x1>
c0026776:	4e                   	dec    esi
c0026777:	79 61                	jns    c00267da <x87Detect+0x14>
c0026779:	68 2e 2e 2e 00       	push   0x2e2e2e
c002677e:	66 90                	xchg   ax,ax

c0026780 <absolutelyNoChanceInHell>:
c0026780:	b8 01 00 00 00       	mov    eax,0x1
c0026785:	0f a2                	cpuid  
c0026787:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002678d:	74 06                	je     c0026795 <sseDetect.noSSE>
c002678f:	b8 01 00 00 00       	mov    eax,0x1
c0026794:	c3                   	ret    

c0026795 <sseDetect.noSSE>:
c0026795:	31 c0                	xor    eax,eax
c0026797:	c3                   	ret    

c0026798 <sseSave>:
c0026798:	0f ae 44 24 04       	fxsave [esp+0x4]
c002679d:	c3                   	ret    

c002679e <sseLoad>:
c002679e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c00267a3:	c3                   	ret    

c00267a4 <sseInit>:
c00267a4:	e8 49 00 00 00       	call   c00267f2 <x87Init>
c00267a9:	0f 20 e0             	mov    eax,cr4
c00267ac:	66 0d 00 06          	or     ax,0x600
c00267b0:	0f 22 e0             	mov    cr4,eax
c00267b3:	c3                   	ret    

c00267b4 <sseClose>:
c00267b4:	c3                   	ret    
c00267b5:	66 90                	xchg   ax,ax
c00267b7:	66 90                	xchg   ax,ax
c00267b9:	66 90                	xchg   ax,ax
c00267bb:	66 90                	xchg   ax,ax
c00267bd:	66 90                	xchg   ax,ax
c00267bf:	90                   	nop

c00267c0 <value_37F>:
c00267c0:	7f 03                	jg     c00267c5 <value_37A+0x1>

c00267c2 <value_37E>:
c00267c2:	7e 03                	jle    c00267c7 <x87Detect+0x1>

c00267c4 <value_37A>:
c00267c4:	7a 03                	jp     c00267c9 <x87Detect+0x3>

c00267c6 <x87Detect>:
c00267c6:	b8 01 00 00 00       	mov    eax,0x1
c00267cb:	0f a2                	cpuid  
c00267cd:	f7 c2 01 00 00 00    	test   edx,0x1
c00267d3:	74 06                	je     c00267db <x87Detect.nox87>
c00267d5:	b8 01 00 00 00       	mov    eax,0x1
c00267da:	c3                   	ret    

c00267db <x87Detect.nox87>:
c00267db:	b8 00 00 00 00       	mov    eax,0x0
c00267e0:	c3                   	ret    

c00267e1 <x87Save>:
c00267e1:	55                   	push   ebp
c00267e2:	89 e5                	mov    ebp,esp
c00267e4:	9b dd 75 08          	fsave  [ebp+0x8]
c00267e8:	c9                   	leave  
c00267e9:	c3                   	ret    

c00267ea <x87Load>:
c00267ea:	55                   	push   ebp
c00267eb:	89 e5                	mov    ebp,esp
c00267ed:	dd 65 08             	frstor [ebp+0x8]
c00267f0:	c9                   	leave  
c00267f1:	c3                   	ret    

c00267f2 <x87Init>:
c00267f2:	9b db e3             	finit  
c00267f5:	0f 20 c0             	mov    eax,cr0
c00267f8:	66 25 fb ff          	and    ax,0xfffb
c00267fc:	66 0d 22 00          	or     ax,0x22
c0026800:	0f 22 c0             	mov    cr0,eax
c0026803:	0f 06                	clts   
c0026805:	d9 2d c4 67 02 c0    	fldcw  WORD PTR ds:0xc00267c4
c002680b:	c3                   	ret    

c002680c <x87Close>:
c002680c:	c3                   	ret    
c002680d:	66 90                	xchg   ax,ax
c002680f:	90                   	nop

c0026810 <__do_global_ctors_aux>:
c0026810:	a1 68 93 02 c0       	mov    eax,ds:0xc0029368
c0026815:	83 f8 ff             	cmp    eax,0xffffffff
c0026818:	74 1a                	je     c0026834 <__do_global_ctors_aux+0x24>
c002681a:	55                   	push   ebp
c002681b:	89 e5                	mov    ebp,esp
c002681d:	53                   	push   ebx
c002681e:	52                   	push   edx
c002681f:	bb 68 93 02 c0       	mov    ebx,0xc0029368
c0026824:	ff d0                	call   eax
c0026826:	83 eb 04             	sub    ebx,0x4
c0026829:	8b 03                	mov    eax,DWORD PTR [ebx]
c002682b:	83 f8 ff             	cmp    eax,0xffffffff
c002682e:	75 f4                	jne    c0026824 <__do_global_ctors_aux+0x14>
c0026830:	58                   	pop    eax
c0026831:	5b                   	pop    ebx
c0026832:	5d                   	pop    ebp
c0026833:	c3                   	ret    
c0026834:	c3                   	ret    
c0026835:	66 90                	xchg   ax,ax
c0026837:	90                   	nop

c0026838 <__divdi3>:
c0026838:	55                   	push   ebp
c0026839:	57                   	push   edi
c002683a:	56                   	push   esi
c002683b:	53                   	push   ebx
c002683c:	83 ec 1c             	sub    esp,0x1c
c002683f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0026843:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026847:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002684a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002684e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0026852:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026856:	85 db                	test   ebx,ebx
c0026858:	0f 88 8e 00 00 00    	js     c00268ec <__divdi3+0xb4>
c002685e:	89 dd                	mov    ebp,ebx
c0026860:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026868:	89 d3                	mov    ebx,edx
c002686a:	85 d2                	test   edx,edx
c002686c:	79 0d                	jns    c002687b <__divdi3+0x43>
c002686e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0026872:	f7 d8                	neg    eax
c0026874:	83 d2 00             	adc    edx,0x0
c0026877:	f7 da                	neg    edx
c0026879:	89 d3                	mov    ebx,edx
c002687b:	89 c7                	mov    edi,eax
c002687d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026880:	85 db                	test   ebx,ebx
c0026882:	75 48                	jne    c00268cc <__divdi3+0x94>
c0026884:	39 ef                	cmp    edi,ebp
c0026886:	76 24                	jbe    c00268ac <__divdi3+0x74>
c0026888:	89 ea                	mov    edx,ebp
c002688a:	f7 f7                	div    edi
c002688c:	89 c1                	mov    ecx,eax
c002688e:	31 f6                	xor    esi,esi
c0026890:	89 c8                	mov    eax,ecx
c0026892:	89 f2                	mov    edx,esi
c0026894:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026898:	85 c9                	test   ecx,ecx
c002689a:	74 07                	je     c00268a3 <__divdi3+0x6b>
c002689c:	f7 d8                	neg    eax
c002689e:	83 d2 00             	adc    edx,0x0
c00268a1:	f7 da                	neg    edx
c00268a3:	83 c4 1c             	add    esp,0x1c
c00268a6:	5b                   	pop    ebx
c00268a7:	5e                   	pop    esi
c00268a8:	5f                   	pop    edi
c00268a9:	5d                   	pop    ebp
c00268aa:	c3                   	ret    
c00268ab:	90                   	nop
c00268ac:	85 ff                	test   edi,edi
c00268ae:	75 0b                	jne    c00268bb <__divdi3+0x83>
c00268b0:	b8 01 00 00 00       	mov    eax,0x1
c00268b5:	31 d2                	xor    edx,edx
c00268b7:	f7 f3                	div    ebx
c00268b9:	89 c7                	mov    edi,eax
c00268bb:	31 d2                	xor    edx,edx
c00268bd:	89 e8                	mov    eax,ebp
c00268bf:	f7 f7                	div    edi
c00268c1:	89 c6                	mov    esi,eax
c00268c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00268c6:	f7 f7                	div    edi
c00268c8:	89 c1                	mov    ecx,eax
c00268ca:	eb c4                	jmp    c0026890 <__divdi3+0x58>
c00268cc:	39 eb                	cmp    ebx,ebp
c00268ce:	77 3c                	ja     c002690c <__divdi3+0xd4>
c00268d0:	0f bd f3             	bsr    esi,ebx
c00268d3:	83 f6 1f             	xor    esi,0x1f
c00268d6:	75 40                	jne    c0026918 <__divdi3+0xe0>
c00268d8:	39 eb                	cmp    ebx,ebp
c00268da:	72 09                	jb     c00268e5 <__divdi3+0xad>
c00268dc:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00268df:	0f 87 97 00 00 00    	ja     c002697c <__divdi3+0x144>
c00268e5:	b9 01 00 00 00       	mov    ecx,0x1
c00268ea:	eb a4                	jmp    c0026890 <__divdi3+0x58>
c00268ec:	f7 d9                	neg    ecx
c00268ee:	83 d3 00             	adc    ebx,0x0
c00268f1:	f7 db                	neg    ebx
c00268f3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00268f6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00268fa:	89 dd                	mov    ebp,ebx
c00268fc:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0026904:	e9 5f ff ff ff       	jmp    c0026868 <__divdi3+0x30>
c0026909:	8d 76 00             	lea    esi,[esi+0x0]
c002690c:	31 f6                	xor    esi,esi
c002690e:	31 c9                	xor    ecx,ecx
c0026910:	e9 7b ff ff ff       	jmp    c0026890 <__divdi3+0x58>
c0026915:	8d 76 00             	lea    esi,[esi+0x0]
c0026918:	b8 20 00 00 00       	mov    eax,0x20
c002691d:	29 f0                	sub    eax,esi
c002691f:	89 f1                	mov    ecx,esi
c0026921:	d3 e3                	shl    ebx,cl
c0026923:	89 fa                	mov    edx,edi
c0026925:	88 c1                	mov    cl,al
c0026927:	d3 ea                	shr    edx,cl
c0026929:	09 da                	or     edx,ebx
c002692b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002692f:	89 f1                	mov    ecx,esi
c0026931:	d3 e7                	shl    edi,cl
c0026933:	89 eb                	mov    ebx,ebp
c0026935:	88 c1                	mov    cl,al
c0026937:	d3 eb                	shr    ebx,cl
c0026939:	89 f1                	mov    ecx,esi
c002693b:	d3 e5                	shl    ebp,cl
c002693d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026940:	88 c1                	mov    cl,al
c0026942:	d3 ea                	shr    edx,cl
c0026944:	09 d5                	or     ebp,edx
c0026946:	89 e8                	mov    eax,ebp
c0026948:	89 da                	mov    edx,ebx
c002694a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002694e:	89 d3                	mov    ebx,edx
c0026950:	89 c5                	mov    ebp,eax
c0026952:	f7 e7                	mul    edi
c0026954:	39 d3                	cmp    ebx,edx
c0026956:	72 18                	jb     c0026970 <__divdi3+0x138>
c0026958:	74 0a                	je     c0026964 <__divdi3+0x12c>
c002695a:	89 e9                	mov    ecx,ebp
c002695c:	31 f6                	xor    esi,esi
c002695e:	e9 2d ff ff ff       	jmp    c0026890 <__divdi3+0x58>
c0026963:	90                   	nop
c0026964:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0026967:	89 f1                	mov    ecx,esi
c0026969:	d3 e7                	shl    edi,cl
c002696b:	39 c7                	cmp    edi,eax
c002696d:	73 eb                	jae    c002695a <__divdi3+0x122>
c002696f:	90                   	nop
c0026970:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0026973:	31 f6                	xor    esi,esi
c0026975:	e9 16 ff ff ff       	jmp    c0026890 <__divdi3+0x58>
c002697a:	66 90                	xchg   ax,ax
c002697c:	31 c9                	xor    ecx,ecx
c002697e:	e9 0d ff ff ff       	jmp    c0026890 <__divdi3+0x58>
c0026983:	90                   	nop

c0026984 <__moddi3>:
c0026984:	55                   	push   ebp
c0026985:	57                   	push   edi
c0026986:	56                   	push   esi
c0026987:	53                   	push   ebx
c0026988:	83 ec 2c             	sub    esp,0x2c
c002698b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002698f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0026993:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0026997:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002699b:	85 db                	test   ebx,ebx
c002699d:	0f 88 85 00 00 00    	js     c0026a28 <__moddi3+0xa4>
c00269a3:	89 de                	mov    esi,ebx
c00269a5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00269ad:	89 d7                	mov    edi,edx
c00269af:	85 d2                	test   edx,edx
c00269b1:	79 09                	jns    c00269bc <__moddi3+0x38>
c00269b3:	f7 d8                	neg    eax
c00269b5:	83 d2 00             	adc    edx,0x0
c00269b8:	f7 da                	neg    edx
c00269ba:	89 d7                	mov    edi,edx
c00269bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00269c0:	89 cd                	mov    ebp,ecx
c00269c2:	85 ff                	test   edi,edi
c00269c4:	75 52                	jne    c0026a18 <__moddi3+0x94>
c00269c6:	89 c3                	mov    ebx,eax
c00269c8:	39 f0                	cmp    eax,esi
c00269ca:	76 24                	jbe    c00269f0 <__moddi3+0x6c>
c00269cc:	89 c8                	mov    eax,ecx
c00269ce:	89 f2                	mov    edx,esi
c00269d0:	f7 f3                	div    ebx
c00269d2:	89 d6                	mov    esi,edx
c00269d4:	89 f0                	mov    eax,esi
c00269d6:	31 d2                	xor    edx,edx
c00269d8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00269dc:	85 c9                	test   ecx,ecx
c00269de:	74 07                	je     c00269e7 <__moddi3+0x63>
c00269e0:	f7 d8                	neg    eax
c00269e2:	83 d2 00             	adc    edx,0x0
c00269e5:	f7 da                	neg    edx
c00269e7:	83 c4 2c             	add    esp,0x2c
c00269ea:	5b                   	pop    ebx
c00269eb:	5e                   	pop    esi
c00269ec:	5f                   	pop    edi
c00269ed:	5d                   	pop    ebp
c00269ee:	c3                   	ret    
c00269ef:	90                   	nop
c00269f0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00269f4:	85 db                	test   ebx,ebx
c00269f6:	75 0d                	jne    c0026a05 <__moddi3+0x81>
c00269f8:	b8 01 00 00 00       	mov    eax,0x1
c00269fd:	31 d2                	xor    edx,edx
c00269ff:	f7 f7                	div    edi
c0026a01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026a05:	89 f0                	mov    eax,esi
c0026a07:	31 d2                	xor    edx,edx
c0026a09:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026a0d:	f7 f7                	div    edi
c0026a0f:	89 e8                	mov    eax,ebp
c0026a11:	f7 f7                	div    edi
c0026a13:	89 d6                	mov    esi,edx
c0026a15:	eb bd                	jmp    c00269d4 <__moddi3+0x50>
c0026a17:	90                   	nop
c0026a18:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026a1c:	39 f7                	cmp    edi,esi
c0026a1e:	76 20                	jbe    c0026a40 <__moddi3+0xbc>
c0026a20:	89 c8                	mov    eax,ecx
c0026a22:	89 f2                	mov    edx,esi
c0026a24:	eb b2                	jmp    c00269d8 <__moddi3+0x54>
c0026a26:	66 90                	xchg   ax,ax
c0026a28:	f7 d9                	neg    ecx
c0026a2a:	83 d3 00             	adc    ebx,0x0
c0026a2d:	f7 db                	neg    ebx
c0026a2f:	89 de                	mov    esi,ebx
c0026a31:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026a39:	e9 6f ff ff ff       	jmp    c00269ad <__moddi3+0x29>
c0026a3e:	66 90                	xchg   ax,ax
c0026a40:	0f bd c7             	bsr    eax,edi
c0026a43:	83 f0 1f             	xor    eax,0x1f
c0026a46:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0026a4a:	75 24                	jne    c0026a70 <__moddi3+0xec>
c0026a4c:	39 f7                	cmp    edi,esi
c0026a4e:	72 06                	jb     c0026a56 <__moddi3+0xd2>
c0026a50:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0026a54:	77 0c                	ja     c0026a62 <__moddi3+0xde>
c0026a56:	89 e9                	mov    ecx,ebp
c0026a58:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0026a5c:	19 fe                	sbb    esi,edi
c0026a5e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026a62:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026a66:	89 f2                	mov    edx,esi
c0026a68:	e9 6b ff ff ff       	jmp    c00269d8 <__moddi3+0x54>
c0026a6d:	8d 76 00             	lea    esi,[esi+0x0]
c0026a70:	b8 20 00 00 00       	mov    eax,0x20
c0026a75:	89 c2                	mov    edx,eax
c0026a77:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026a7b:	29 da                	sub    edx,ebx
c0026a7d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026a81:	88 d9                	mov    cl,bl
c0026a83:	d3 e7                	shl    edi,cl
c0026a85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026a89:	88 d1                	mov    cl,dl
c0026a8b:	d3 e8                	shr    eax,cl
c0026a8d:	09 c7                	or     edi,eax
c0026a8f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0026a93:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026a97:	89 d8                	mov    eax,ebx
c0026a99:	88 d9                	mov    cl,bl
c0026a9b:	d3 e7                	shl    edi,cl
c0026a9d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026aa1:	89 f3                	mov    ebx,esi
c0026aa3:	88 d1                	mov    cl,dl
c0026aa5:	d3 eb                	shr    ebx,cl
c0026aa7:	89 c7                	mov    edi,eax
c0026aa9:	88 c1                	mov    cl,al
c0026aab:	d3 e6                	shl    esi,cl
c0026aad:	89 e8                	mov    eax,ebp
c0026aaf:	88 d1                	mov    cl,dl
c0026ab1:	d3 e8                	shr    eax,cl
c0026ab3:	09 f0                	or     eax,esi
c0026ab5:	89 f9                	mov    ecx,edi
c0026ab7:	d3 e5                	shl    ebp,cl
c0026ab9:	89 da                	mov    edx,ebx
c0026abb:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026abf:	89 d3                	mov    ebx,edx
c0026ac1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026ac5:	89 c6                	mov    esi,eax
c0026ac7:	89 d1                	mov    ecx,edx
c0026ac9:	39 d3                	cmp    ebx,edx
c0026acb:	72 27                	jb     c0026af4 <__moddi3+0x170>
c0026acd:	74 21                	je     c0026af0 <__moddi3+0x16c>
c0026acf:	29 f5                	sub    ebp,esi
c0026ad1:	19 cb                	sbb    ebx,ecx
c0026ad3:	89 de                	mov    esi,ebx
c0026ad5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026ad9:	d3 e6                	shl    esi,cl
c0026adb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026adf:	89 f9                	mov    ecx,edi
c0026ae1:	d3 ed                	shr    ebp,cl
c0026ae3:	09 ee                	or     esi,ebp
c0026ae5:	89 f0                	mov    eax,esi
c0026ae7:	d3 eb                	shr    ebx,cl
c0026ae9:	89 da                	mov    edx,ebx
c0026aeb:	e9 e8 fe ff ff       	jmp    c00269d8 <__moddi3+0x54>
c0026af0:	39 c5                	cmp    ebp,eax
c0026af2:	73 db                	jae    c0026acf <__moddi3+0x14b>
c0026af4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026af8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026afc:	89 d1                	mov    ecx,edx
c0026afe:	89 c6                	mov    esi,eax
c0026b00:	eb cd                	jmp    c0026acf <__moddi3+0x14b>
c0026b02:	66 90                	xchg   ax,ax

c0026b04 <__udivdi3>:
c0026b04:	55                   	push   ebp
c0026b05:	57                   	push   edi
c0026b06:	56                   	push   esi
c0026b07:	53                   	push   ebx
c0026b08:	83 ec 1c             	sub    esp,0x1c
c0026b0b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026b0f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026b13:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026b17:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026b1b:	85 d2                	test   edx,edx
c0026b1d:	75 41                	jne    c0026b60 <__udivdi3+0x5c>
c0026b1f:	39 f7                	cmp    edi,esi
c0026b21:	76 15                	jbe    c0026b38 <__udivdi3+0x34>
c0026b23:	89 e8                	mov    eax,ebp
c0026b25:	89 f2                	mov    edx,esi
c0026b27:	f7 f7                	div    edi
c0026b29:	31 db                	xor    ebx,ebx
c0026b2b:	89 da                	mov    edx,ebx
c0026b2d:	83 c4 1c             	add    esp,0x1c
c0026b30:	5b                   	pop    ebx
c0026b31:	5e                   	pop    esi
c0026b32:	5f                   	pop    edi
c0026b33:	5d                   	pop    ebp
c0026b34:	c3                   	ret    
c0026b35:	8d 76 00             	lea    esi,[esi+0x0]
c0026b38:	89 f9                	mov    ecx,edi
c0026b3a:	85 ff                	test   edi,edi
c0026b3c:	75 0b                	jne    c0026b49 <__udivdi3+0x45>
c0026b3e:	b8 01 00 00 00       	mov    eax,0x1
c0026b43:	31 d2                	xor    edx,edx
c0026b45:	f7 f7                	div    edi
c0026b47:	89 c1                	mov    ecx,eax
c0026b49:	31 d2                	xor    edx,edx
c0026b4b:	89 f0                	mov    eax,esi
c0026b4d:	f7 f1                	div    ecx
c0026b4f:	89 c3                	mov    ebx,eax
c0026b51:	89 e8                	mov    eax,ebp
c0026b53:	f7 f1                	div    ecx
c0026b55:	89 da                	mov    edx,ebx
c0026b57:	83 c4 1c             	add    esp,0x1c
c0026b5a:	5b                   	pop    ebx
c0026b5b:	5e                   	pop    esi
c0026b5c:	5f                   	pop    edi
c0026b5d:	5d                   	pop    ebp
c0026b5e:	c3                   	ret    
c0026b5f:	90                   	nop
c0026b60:	39 f2                	cmp    edx,esi
c0026b62:	77 1c                	ja     c0026b80 <__udivdi3+0x7c>
c0026b64:	0f bd da             	bsr    ebx,edx
c0026b67:	83 f3 1f             	xor    ebx,0x1f
c0026b6a:	75 24                	jne    c0026b90 <__udivdi3+0x8c>
c0026b6c:	39 f2                	cmp    edx,esi
c0026b6e:	72 08                	jb     c0026b78 <__udivdi3+0x74>
c0026b70:	39 ef                	cmp    edi,ebp
c0026b72:	0f 87 84 00 00 00    	ja     c0026bfc <__udivdi3+0xf8>
c0026b78:	b8 01 00 00 00       	mov    eax,0x1
c0026b7d:	eb ac                	jmp    c0026b2b <__udivdi3+0x27>
c0026b7f:	90                   	nop
c0026b80:	31 db                	xor    ebx,ebx
c0026b82:	31 c0                	xor    eax,eax
c0026b84:	89 da                	mov    edx,ebx
c0026b86:	83 c4 1c             	add    esp,0x1c
c0026b89:	5b                   	pop    ebx
c0026b8a:	5e                   	pop    esi
c0026b8b:	5f                   	pop    edi
c0026b8c:	5d                   	pop    ebp
c0026b8d:	c3                   	ret    
c0026b8e:	66 90                	xchg   ax,ax
c0026b90:	b8 20 00 00 00       	mov    eax,0x20
c0026b95:	29 d8                	sub    eax,ebx
c0026b97:	88 d9                	mov    cl,bl
c0026b99:	d3 e2                	shl    edx,cl
c0026b9b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026b9f:	89 fa                	mov    edx,edi
c0026ba1:	88 c1                	mov    cl,al
c0026ba3:	d3 ea                	shr    edx,cl
c0026ba5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026ba9:	09 d1                	or     ecx,edx
c0026bab:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026baf:	88 d9                	mov    cl,bl
c0026bb1:	d3 e7                	shl    edi,cl
c0026bb3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026bb7:	89 f7                	mov    edi,esi
c0026bb9:	88 c1                	mov    cl,al
c0026bbb:	d3 ef                	shr    edi,cl
c0026bbd:	88 d9                	mov    cl,bl
c0026bbf:	d3 e6                	shl    esi,cl
c0026bc1:	89 ea                	mov    edx,ebp
c0026bc3:	88 c1                	mov    cl,al
c0026bc5:	d3 ea                	shr    edx,cl
c0026bc7:	09 d6                	or     esi,edx
c0026bc9:	89 f0                	mov    eax,esi
c0026bcb:	89 fa                	mov    edx,edi
c0026bcd:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026bd1:	89 d7                	mov    edi,edx
c0026bd3:	89 c6                	mov    esi,eax
c0026bd5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026bd9:	39 d7                	cmp    edi,edx
c0026bdb:	72 13                	jb     c0026bf0 <__udivdi3+0xec>
c0026bdd:	74 09                	je     c0026be8 <__udivdi3+0xe4>
c0026bdf:	89 f0                	mov    eax,esi
c0026be1:	31 db                	xor    ebx,ebx
c0026be3:	e9 43 ff ff ff       	jmp    c0026b2b <__udivdi3+0x27>
c0026be8:	88 d9                	mov    cl,bl
c0026bea:	d3 e5                	shl    ebp,cl
c0026bec:	39 c5                	cmp    ebp,eax
c0026bee:	73 ef                	jae    c0026bdf <__udivdi3+0xdb>
c0026bf0:	8d 46 ff             	lea    eax,[esi-0x1]
c0026bf3:	31 db                	xor    ebx,ebx
c0026bf5:	e9 31 ff ff ff       	jmp    c0026b2b <__udivdi3+0x27>
c0026bfa:	66 90                	xchg   ax,ax
c0026bfc:	31 c0                	xor    eax,eax
c0026bfe:	e9 28 ff ff ff       	jmp    c0026b2b <__udivdi3+0x27>
c0026c03:	90                   	nop

c0026c04 <__umoddi3>:
c0026c04:	55                   	push   ebp
c0026c05:	57                   	push   edi
c0026c06:	56                   	push   esi
c0026c07:	53                   	push   ebx
c0026c08:	83 ec 1c             	sub    esp,0x1c
c0026c0b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026c0f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026c13:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026c17:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026c1b:	89 da                	mov    edx,ebx
c0026c1d:	85 c0                	test   eax,eax
c0026c1f:	75 37                	jne    c0026c58 <__umoddi3+0x54>
c0026c21:	39 df                	cmp    edi,ebx
c0026c23:	76 13                	jbe    c0026c38 <__umoddi3+0x34>
c0026c25:	89 f0                	mov    eax,esi
c0026c27:	f7 f7                	div    edi
c0026c29:	89 d0                	mov    eax,edx
c0026c2b:	31 d2                	xor    edx,edx
c0026c2d:	83 c4 1c             	add    esp,0x1c
c0026c30:	5b                   	pop    ebx
c0026c31:	5e                   	pop    esi
c0026c32:	5f                   	pop    edi
c0026c33:	5d                   	pop    ebp
c0026c34:	c3                   	ret    
c0026c35:	8d 76 00             	lea    esi,[esi+0x0]
c0026c38:	89 fd                	mov    ebp,edi
c0026c3a:	85 ff                	test   edi,edi
c0026c3c:	75 0b                	jne    c0026c49 <__umoddi3+0x45>
c0026c3e:	b8 01 00 00 00       	mov    eax,0x1
c0026c43:	31 d2                	xor    edx,edx
c0026c45:	f7 f7                	div    edi
c0026c47:	89 c5                	mov    ebp,eax
c0026c49:	89 d8                	mov    eax,ebx
c0026c4b:	31 d2                	xor    edx,edx
c0026c4d:	f7 f5                	div    ebp
c0026c4f:	89 f0                	mov    eax,esi
c0026c51:	f7 f5                	div    ebp
c0026c53:	89 d0                	mov    eax,edx
c0026c55:	eb d4                	jmp    c0026c2b <__umoddi3+0x27>
c0026c57:	90                   	nop
c0026c58:	89 f1                	mov    ecx,esi
c0026c5a:	39 d8                	cmp    eax,ebx
c0026c5c:	76 0a                	jbe    c0026c68 <__umoddi3+0x64>
c0026c5e:	89 f0                	mov    eax,esi
c0026c60:	83 c4 1c             	add    esp,0x1c
c0026c63:	5b                   	pop    ebx
c0026c64:	5e                   	pop    esi
c0026c65:	5f                   	pop    edi
c0026c66:	5d                   	pop    ebp
c0026c67:	c3                   	ret    
c0026c68:	0f bd e8             	bsr    ebp,eax
c0026c6b:	83 f5 1f             	xor    ebp,0x1f
c0026c6e:	75 1c                	jne    c0026c8c <__umoddi3+0x88>
c0026c70:	39 d8                	cmp    eax,ebx
c0026c72:	72 04                	jb     c0026c78 <__umoddi3+0x74>
c0026c74:	39 f7                	cmp    edi,esi
c0026c76:	77 08                	ja     c0026c80 <__umoddi3+0x7c>
c0026c78:	89 da                	mov    edx,ebx
c0026c7a:	29 fe                	sub    esi,edi
c0026c7c:	19 c2                	sbb    edx,eax
c0026c7e:	89 f1                	mov    ecx,esi
c0026c80:	89 c8                	mov    eax,ecx
c0026c82:	83 c4 1c             	add    esp,0x1c
c0026c85:	5b                   	pop    ebx
c0026c86:	5e                   	pop    esi
c0026c87:	5f                   	pop    edi
c0026c88:	5d                   	pop    ebp
c0026c89:	c3                   	ret    
c0026c8a:	66 90                	xchg   ax,ax
c0026c8c:	ba 20 00 00 00       	mov    edx,0x20
c0026c91:	29 ea                	sub    edx,ebp
c0026c93:	89 e9                	mov    ecx,ebp
c0026c95:	d3 e0                	shl    eax,cl
c0026c97:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026c9b:	89 f8                	mov    eax,edi
c0026c9d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026ca1:	88 d1                	mov    cl,dl
c0026ca3:	d3 e8                	shr    eax,cl
c0026ca5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026ca9:	09 c1                	or     ecx,eax
c0026cab:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026caf:	89 e9                	mov    ecx,ebp
c0026cb1:	d3 e7                	shl    edi,cl
c0026cb3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026cb7:	89 d8                	mov    eax,ebx
c0026cb9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026cbd:	88 d1                	mov    cl,dl
c0026cbf:	d3 e8                	shr    eax,cl
c0026cc1:	89 c7                	mov    edi,eax
c0026cc3:	89 e9                	mov    ecx,ebp
c0026cc5:	d3 e3                	shl    ebx,cl
c0026cc7:	89 f0                	mov    eax,esi
c0026cc9:	88 d1                	mov    cl,dl
c0026ccb:	d3 e8                	shr    eax,cl
c0026ccd:	09 d8                	or     eax,ebx
c0026ccf:	89 e9                	mov    ecx,ebp
c0026cd1:	d3 e6                	shl    esi,cl
c0026cd3:	89 f3                	mov    ebx,esi
c0026cd5:	89 fa                	mov    edx,edi
c0026cd7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026cdb:	89 d1                	mov    ecx,edx
c0026cdd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026ce1:	89 c6                	mov    esi,eax
c0026ce3:	89 d7                	mov    edi,edx
c0026ce5:	39 d1                	cmp    ecx,edx
c0026ce7:	72 27                	jb     c0026d10 <__umoddi3+0x10c>
c0026ce9:	74 21                	je     c0026d0c <__umoddi3+0x108>
c0026ceb:	89 ca                	mov    edx,ecx
c0026ced:	29 f3                	sub    ebx,esi
c0026cef:	19 fa                	sbb    edx,edi
c0026cf1:	89 d0                	mov    eax,edx
c0026cf3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026cf7:	d3 e0                	shl    eax,cl
c0026cf9:	89 e9                	mov    ecx,ebp
c0026cfb:	d3 eb                	shr    ebx,cl
c0026cfd:	09 d8                	or     eax,ebx
c0026cff:	d3 ea                	shr    edx,cl
c0026d01:	83 c4 1c             	add    esp,0x1c
c0026d04:	5b                   	pop    ebx
c0026d05:	5e                   	pop    esi
c0026d06:	5f                   	pop    edi
c0026d07:	5d                   	pop    ebp
c0026d08:	c3                   	ret    
c0026d09:	8d 76 00             	lea    esi,[esi+0x0]
c0026d0c:	39 c3                	cmp    ebx,eax
c0026d0e:	73 db                	jae    c0026ceb <__umoddi3+0xe7>
c0026d10:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026d14:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026d18:	89 d7                	mov    edi,edx
c0026d1a:	89 c6                	mov    esi,eax
c0026d1c:	eb cd                	jmp    c0026ceb <__umoddi3+0xe7>

c0026d1e <__addsf3>:
c0026d1e:	55                   	push   ebp
c0026d1f:	89 e5                	mov    ebp,esp
c0026d21:	57                   	push   edi
c0026d22:	56                   	push   esi
c0026d23:	53                   	push   ebx
c0026d24:	83 ec 08             	sub    esp,0x8
c0026d27:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026d2a:	89 fa                	mov    edx,edi
c0026d2c:	89 f8                	mov    eax,edi
c0026d2e:	c1 f8 17             	sar    eax,0x17
c0026d31:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026d34:	c1 e2 08             	shl    edx,0x8
c0026d37:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026d3d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026d40:	89 de                	mov    esi,ebx
c0026d42:	c1 fe 17             	sar    esi,0x17
c0026d45:	c1 e3 08             	shl    ebx,0x8
c0026d48:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026d4e:	31 f0                	xor    eax,esi
c0026d50:	0f 88 3b 01 00 00    	js     c0026e91 <__addsf3+0x173>
c0026d56:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026d59:	29 f1                	sub    ecx,esi
c0026d5b:	85 c9                	test   ecx,ecx
c0026d5d:	7e 54                	jle    c0026db3 <__addsf3+0x95>
c0026d5f:	89 f0                	mov    eax,esi
c0026d61:	84 c0                	test   al,al
c0026d63:	75 10                	jne    c0026d75 <__addsf3+0x57>
c0026d65:	85 db                	test   ebx,ebx
c0026d67:	0f 84 aa 02 00 00    	je     c0027017 <__addsf3+0x2f9>
c0026d6d:	49                   	dec    ecx
c0026d6e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026d71:	74 38                	je     c0026dab <__addsf3+0x8d>
c0026d73:	eb 13                	jmp    c0026d88 <__addsf3+0x6a>
c0026d75:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026d78:	f7 d0                	not    eax
c0026d7a:	84 c0                	test   al,al
c0026d7c:	0f 84 95 02 00 00    	je     c0027017 <__addsf3+0x2f9>
c0026d82:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026d88:	83 f9 1f             	cmp    ecx,0x1f
c0026d8b:	0f 8f 86 02 00 00    	jg     c0027017 <__addsf3+0x2f9>
c0026d91:	89 de                	mov    esi,ebx
c0026d93:	d3 ee                	shr    esi,cl
c0026d95:	b8 20 00 00 00       	mov    eax,0x20
c0026d9a:	29 c8                	sub    eax,ecx
c0026d9c:	89 c1                	mov    ecx,eax
c0026d9e:	d3 e3                	shl    ebx,cl
c0026da0:	31 c0                	xor    eax,eax
c0026da2:	85 db                	test   ebx,ebx
c0026da4:	0f 95 c0             	setne  al
c0026da7:	09 f0                	or     eax,esi
c0026da9:	01 d0                	add    eax,edx
c0026dab:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026dae:	e9 b6 00 00 00       	jmp    c0026e69 <__addsf3+0x14b>
c0026db3:	74 5c                	je     c0026e11 <__addsf3+0xf3>
c0026db5:	89 f1                	mov    ecx,esi
c0026db7:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026dba:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026dbd:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026dc1:	75 14                	jne    c0026dd7 <__addsf3+0xb9>
c0026dc3:	85 d2                	test   edx,edx
c0026dc5:	0f 84 4c 02 00 00    	je     c0027017 <__addsf3+0x2f9>
c0026dcb:	49                   	dec    ecx
c0026dcc:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026dcf:	0f 84 94 00 00 00    	je     c0026e69 <__addsf3+0x14b>
c0026dd5:	eb 12                	jmp    c0026de9 <__addsf3+0xcb>
c0026dd7:	89 f0                	mov    eax,esi
c0026dd9:	f7 d0                	not    eax
c0026ddb:	84 c0                	test   al,al
c0026ddd:	0f 84 34 02 00 00    	je     c0027017 <__addsf3+0x2f9>
c0026de3:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026de9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026dec:	83 f9 1f             	cmp    ecx,0x1f
c0026def:	0f 8f 22 02 00 00    	jg     c0027017 <__addsf3+0x2f9>
c0026df5:	89 d7                	mov    edi,edx
c0026df7:	d3 ef                	shr    edi,cl
c0026df9:	b8 20 00 00 00       	mov    eax,0x20
c0026dfe:	29 c8                	sub    eax,ecx
c0026e00:	89 c1                	mov    ecx,eax
c0026e02:	d3 e2                	shl    edx,cl
c0026e04:	31 c0                	xor    eax,eax
c0026e06:	85 d2                	test   edx,edx
c0026e08:	0f 95 c0             	setne  al
c0026e0b:	09 f8                	or     eax,edi
c0026e0d:	01 d8                	add    eax,ebx
c0026e0f:	eb 58                	jmp    c0026e69 <__addsf3+0x14b>
c0026e11:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026e14:	8d 70 01             	lea    esi,[eax+0x1]
c0026e17:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026e1d:	75 32                	jne    c0026e51 <__addsf3+0x133>
c0026e1f:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026e23:	75 1f                	jne    c0026e44 <__addsf3+0x126>
c0026e25:	85 d2                	test   edx,edx
c0026e27:	0f 84 e0 01 00 00    	je     c002700d <__addsf3+0x2ef>
c0026e2d:	85 db                	test   ebx,ebx
c0026e2f:	0f 84 e2 01 00 00    	je     c0027017 <__addsf3+0x2f9>
c0026e35:	89 d0                	mov    eax,edx
c0026e37:	01 d8                	add    eax,ebx
c0026e39:	0f 89 a9 01 00 00    	jns    c0026fe8 <__addsf3+0x2ca>
c0026e3f:	e9 9d 01 00 00       	jmp    c0026fe1 <__addsf3+0x2c3>
c0026e44:	85 d2                	test   edx,edx
c0026e46:	0f 85 cb 01 00 00    	jne    c0027017 <__addsf3+0x2f9>
c0026e4c:	e9 bc 01 00 00       	jmp    c002700d <__addsf3+0x2ef>
c0026e51:	31 c0                	xor    eax,eax
c0026e53:	89 f1                	mov    ecx,esi
c0026e55:	f7 d1                	not    ecx
c0026e57:	84 c9                	test   cl,cl
c0026e59:	0f 84 90 01 00 00    	je     c0026fef <__addsf3+0x2d1>
c0026e5f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026e62:	d1 e8                	shr    eax,1
c0026e64:	e9 86 01 00 00       	jmp    c0026fef <__addsf3+0x2d1>
c0026e69:	85 c0                	test   eax,eax
c0026e6b:	0f 89 7e 01 00 00    	jns    c0026fef <__addsf3+0x2d1>
c0026e71:	46                   	inc    esi
c0026e72:	89 f2                	mov    edx,esi
c0026e74:	f7 d2                	not    edx
c0026e76:	84 d2                	test   dl,dl
c0026e78:	0f 84 6f 01 00 00    	je     c0026fed <__addsf3+0x2cf>
c0026e7e:	89 c2                	mov    edx,eax
c0026e80:	83 e2 01             	and    edx,0x1
c0026e83:	d1 e8                	shr    eax,1
c0026e85:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026e8a:	09 d0                	or     eax,edx
c0026e8c:	e9 5e 01 00 00       	jmp    c0026fef <__addsf3+0x2d1>
c0026e91:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026e95:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026e98:	89 f0                	mov    eax,esi
c0026e9a:	0f b6 c0             	movzx  eax,al
c0026e9d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026ea0:	29 c1                	sub    ecx,eax
c0026ea2:	85 c9                	test   ecx,ecx
c0026ea4:	7e 55                	jle    c0026efb <__addsf3+0x1dd>
c0026ea6:	85 c0                	test   eax,eax
c0026ea8:	75 11                	jne    c0026ebb <__addsf3+0x19d>
c0026eaa:	85 db                	test   ebx,ebx
c0026eac:	0f 84 65 01 00 00    	je     c0027017 <__addsf3+0x2f9>
c0026eb2:	49                   	dec    ecx
c0026eb3:	75 19                	jne    c0026ece <__addsf3+0x1b0>
c0026eb5:	89 d0                	mov    eax,edx
c0026eb7:	29 d8                	sub    eax,ebx
c0026eb9:	eb 38                	jmp    c0026ef3 <__addsf3+0x1d5>
c0026ebb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026ebe:	f7 d0                	not    eax
c0026ec0:	84 c0                	test   al,al
c0026ec2:	0f 84 4f 01 00 00    	je     c0027017 <__addsf3+0x2f9>
c0026ec8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026ece:	83 f9 1f             	cmp    ecx,0x1f
c0026ed1:	0f 8f 40 01 00 00    	jg     c0027017 <__addsf3+0x2f9>
c0026ed7:	89 de                	mov    esi,ebx
c0026ed9:	d3 ee                	shr    esi,cl
c0026edb:	b8 20 00 00 00       	mov    eax,0x20
c0026ee0:	29 c8                	sub    eax,ecx
c0026ee2:	89 c1                	mov    ecx,eax
c0026ee4:	d3 e3                	shl    ebx,cl
c0026ee6:	31 c0                	xor    eax,eax
c0026ee8:	85 db                	test   ebx,ebx
c0026eea:	0f 95 c0             	setne  al
c0026eed:	09 f0                	or     eax,esi
c0026eef:	29 c2                	sub    edx,eax
c0026ef1:	89 d0                	mov    eax,edx
c0026ef3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026ef6:	e9 af 00 00 00       	jmp    c0026faa <__addsf3+0x28c>
c0026efb:	74 5c                	je     c0026f59 <__addsf3+0x23b>
c0026efd:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026f00:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026f03:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026f07:	75 14                	jne    c0026f1d <__addsf3+0x1ff>
c0026f09:	85 d2                	test   edx,edx
c0026f0b:	0f 84 06 01 00 00    	je     c0027017 <__addsf3+0x2f9>
c0026f11:	48                   	dec    eax
c0026f12:	75 1b                	jne    c0026f2f <__addsf3+0x211>
c0026f14:	89 d8                	mov    eax,ebx
c0026f16:	29 d0                	sub    eax,edx
c0026f18:	e9 8d 00 00 00       	jmp    c0026faa <__addsf3+0x28c>
c0026f1d:	89 f1                	mov    ecx,esi
c0026f1f:	f7 d1                	not    ecx
c0026f21:	84 c9                	test   cl,cl
c0026f23:	0f 84 ee 00 00 00    	je     c0027017 <__addsf3+0x2f9>
c0026f29:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026f2f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026f32:	83 f8 1f             	cmp    eax,0x1f
c0026f35:	0f 8f dc 00 00 00    	jg     c0027017 <__addsf3+0x2f9>
c0026f3b:	89 d7                	mov    edi,edx
c0026f3d:	88 c1                	mov    cl,al
c0026f3f:	d3 ef                	shr    edi,cl
c0026f41:	b9 20 00 00 00       	mov    ecx,0x20
c0026f46:	29 c1                	sub    ecx,eax
c0026f48:	d3 e2                	shl    edx,cl
c0026f4a:	31 c0                	xor    eax,eax
c0026f4c:	85 d2                	test   edx,edx
c0026f4e:	0f 95 c0             	setne  al
c0026f51:	09 f8                	or     eax,edi
c0026f53:	29 c3                	sub    ebx,eax
c0026f55:	89 d8                	mov    eax,ebx
c0026f57:	eb 51                	jmp    c0026faa <__addsf3+0x28c>
c0026f59:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026f5c:	40                   	inc    eax
c0026f5d:	a8 fe                	test   al,0xfe
c0026f5f:	75 3d                	jne    c0026f9e <__addsf3+0x280>
c0026f61:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026f65:	0f 85 a7 00 00 00    	jne    c0027012 <__addsf3+0x2f4>
c0026f6b:	85 d2                	test   edx,edx
c0026f6d:	75 12                	jne    c0026f81 <__addsf3+0x263>
c0026f6f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026f72:	85 db                	test   ebx,ebx
c0026f74:	0f 85 9d 00 00 00    	jne    c0027017 <__addsf3+0x2f9>
c0026f7a:	31 ff                	xor    edi,edi
c0026f7c:	e9 96 00 00 00       	jmp    c0027017 <__addsf3+0x2f9>
c0026f81:	85 db                	test   ebx,ebx
c0026f83:	0f 84 8e 00 00 00    	je     c0027017 <__addsf3+0x2f9>
c0026f89:	89 d0                	mov    eax,edx
c0026f8b:	29 d8                	sub    eax,ebx
c0026f8d:	79 06                	jns    c0026f95 <__addsf3+0x277>
c0026f8f:	89 d8                	mov    eax,ebx
c0026f91:	29 d0                	sub    eax,edx
c0026f93:	eb 5a                	jmp    c0026fef <__addsf3+0x2d1>
c0026f95:	bf 00 00 00 00       	mov    edi,0x0
c0026f9a:	74 7b                	je     c0027017 <__addsf3+0x2f9>
c0026f9c:	eb 4a                	jmp    c0026fe8 <__addsf3+0x2ca>
c0026f9e:	89 d0                	mov    eax,edx
c0026fa0:	29 d8                	sub    eax,ebx
c0026fa2:	79 12                	jns    c0026fb6 <__addsf3+0x298>
c0026fa4:	89 d8                	mov    eax,ebx
c0026fa6:	29 d0                	sub    eax,edx
c0026fa8:	eb 09                	jmp    c0026fb3 <__addsf3+0x295>
c0026faa:	85 c0                	test   eax,eax
c0026fac:	79 41                	jns    c0026fef <__addsf3+0x2d1>
c0026fae:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026fb3:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026fb6:	31 f6                	xor    esi,esi
c0026fb8:	85 c0                	test   eax,eax
c0026fba:	74 33                	je     c0026fef <__addsf3+0x2d1>
c0026fbc:	0f bd c8             	bsr    ecx,eax
c0026fbf:	83 f1 1f             	xor    ecx,0x1f
c0026fc2:	d3 e0                	shl    eax,cl
c0026fc4:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026fc8:	39 ca                	cmp    edx,ecx
c0026fca:	7f 10                	jg     c0026fdc <__addsf3+0x2be>
c0026fcc:	29 d1                	sub    ecx,edx
c0026fce:	41                   	inc    ecx
c0026fcf:	d3 e8                	shr    eax,cl
c0026fd1:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026fd4:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026fda:	eb 13                	jmp    c0026fef <__addsf3+0x2d1>
c0026fdc:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026fdf:	29 ce                	sub    esi,ecx
c0026fe1:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026fe6:	eb 07                	jmp    c0026fef <__addsf3+0x2d1>
c0026fe8:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026feb:	eb 02                	jmp    c0026fef <__addsf3+0x2d1>
c0026fed:	31 c0                	xor    eax,eax
c0026fef:	89 c2                	mov    edx,eax
c0026ff1:	c1 ea 08             	shr    edx,0x8
c0026ff4:	a8 7f                	test   al,0x7f
c0026ff6:	0f 95 c1             	setne  cl
c0026ff9:	09 d1                	or     ecx,edx
c0026ffb:	83 e1 01             	and    ecx,0x1
c0026ffe:	c1 e8 07             	shr    eax,0x7
c0027001:	21 c8                	and    eax,ecx
c0027003:	c1 e6 17             	shl    esi,0x17
c0027006:	09 d6                	or     esi,edx
c0027008:	8d 3c 30             	lea    edi,[eax+esi*1]
c002700b:	eb 0a                	jmp    c0027017 <__addsf3+0x2f9>
c002700d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027010:	eb 05                	jmp    c0027017 <__addsf3+0x2f9>
c0027012:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0027017:	89 f8                	mov    eax,edi
c0027019:	5a                   	pop    edx
c002701a:	59                   	pop    ecx
c002701b:	5b                   	pop    ebx
c002701c:	5e                   	pop    esi
c002701d:	5f                   	pop    edi
c002701e:	5d                   	pop    ebp
c002701f:	c3                   	ret    

c0027020 <__subsf3>:
c0027020:	55                   	push   ebp
c0027021:	89 e5                	mov    ebp,esp
c0027023:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027026:	05 00 00 00 80       	add    eax,0x80000000
c002702b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002702e:	5d                   	pop    ebp
c002702f:	e9 ea fc ff ff       	jmp    c0026d1e <__addsf3>

c0027034 <__negsf2>:
c0027034:	55                   	push   ebp
c0027035:	89 e5                	mov    ebp,esp
c0027037:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002703a:	05 00 00 00 80       	add    eax,0x80000000
c002703f:	5d                   	pop    ebp
c0027040:	c3                   	ret    

c0027041 <__mulsf3>:
c0027041:	55                   	push   ebp
c0027042:	89 e5                	mov    ebp,esp
c0027044:	57                   	push   edi
c0027045:	56                   	push   esi
c0027046:	53                   	push   ebx
c0027047:	83 ec 1c             	sub    esp,0x1c
c002704a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c002704d:	89 f0                	mov    eax,esi
c002704f:	89 f1                	mov    ecx,esi
c0027051:	c1 f9 17             	sar    ecx,0x17
c0027054:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027057:	c1 e0 08             	shl    eax,0x8
c002705a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002705f:	89 c1                	mov    ecx,eax
c0027061:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027064:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027067:	89 c7                	mov    edi,eax
c0027069:	c1 ff 17             	sar    edi,0x17
c002706c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027070:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027073:	89 f8                	mov    eax,edi
c0027075:	0f b6 c0             	movzx  eax,al
c0027078:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c002707b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c002707f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027082:	42                   	inc    edx
c0027083:	80 e2 fe             	and    dl,0xfe
c0027086:	75 7b                	jne    c0027103 <__mulsf3+0xc2>
c0027088:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002708c:	74 54                	je     c00270e2 <__mulsf3+0xa1>
c002708e:	85 c9                	test   ecx,ecx
c0027090:	0f 85 64 01 00 00    	jne    c00271fa <__mulsf3+0x1b9>
c0027096:	8d 57 01             	lea    edx,[edi+0x1]
c0027099:	80 e2 fe             	and    dl,0xfe
c002709c:	75 1f                	jne    c00270bd <__mulsf3+0x7c>
c002709e:	85 c0                	test   eax,eax
c00270a0:	b8 00 00 00 00       	mov    eax,0x0
c00270a5:	74 29                	je     c00270d0 <__mulsf3+0x8f>
c00270a7:	53                   	push   ebx
c00270a8:	53                   	push   ebx
c00270a9:	50                   	push   eax
c00270aa:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00270ad:	e8 96 05 00 00       	call   c0027648 <__nesf2>
c00270b2:	83 c4 10             	add    esp,0x10
c00270b5:	85 c0                	test   eax,eax
c00270b7:	0f 85 3a 01 00 00    	jne    c00271f7 <__mulsf3+0x1b6>
c00270bd:	85 ff                	test   edi,edi
c00270bf:	0f 89 35 01 00 00    	jns    c00271fa <__mulsf3+0x1b9>
c00270c5:	81 c6 00 00 00 80    	add    esi,0x80000000
c00270cb:	e9 2a 01 00 00       	jmp    c00271fa <__mulsf3+0x1b9>
c00270d0:	51                   	push   ecx
c00270d1:	51                   	push   ecx
c00270d2:	50                   	push   eax
c00270d3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00270d6:	e8 6d 05 00 00       	call   c0027648 <__nesf2>
c00270db:	83 c4 10             	add    esp,0x10
c00270de:	85 c0                	test   eax,eax
c00270e0:	eb 15                	jmp    c00270f7 <__mulsf3+0xb6>
c00270e2:	85 c9                	test   ecx,ecx
c00270e4:	74 0b                	je     c00270f1 <__mulsf3+0xb0>
c00270e6:	8d 53 ff             	lea    edx,[ebx-0x1]
c00270e9:	01 c9                	add    ecx,ecx
c00270eb:	78 16                	js     c0027103 <__mulsf3+0xc2>
c00270ed:	89 d3                	mov    ebx,edx
c00270ef:	eb f5                	jmp    c00270e6 <__mulsf3+0xa5>
c00270f1:	89 f8                	mov    eax,edi
c00270f3:	f7 d0                	not    eax
c00270f5:	84 c0                	test   al,al
c00270f7:	75 c4                	jne    c00270bd <__mulsf3+0x7c>
c00270f9:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c00270fe:	e9 f7 00 00 00       	jmp    c00271fa <__mulsf3+0x1b9>
c0027103:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027106:	c1 e6 08             	shl    esi,0x8
c0027109:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c002710f:	8d 57 01             	lea    edx,[edi+0x1]
c0027112:	80 e2 fe             	and    dl,0xfe
c0027115:	75 63                	jne    c002717a <__mulsf3+0x139>
c0027117:	85 c0                	test   eax,eax
c0027119:	74 2f                	je     c002714a <__mulsf3+0x109>
c002711b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c002711f:	0f 89 d2 00 00 00    	jns    c00271f7 <__mulsf3+0x1b6>
c0027125:	52                   	push   edx
c0027126:	52                   	push   edx
c0027127:	6a 00                	push   0x0
c0027129:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002712c:	e8 dc 04 00 00       	call   c002760d <__eqsf2>
c0027131:	83 c4 10             	add    esp,0x10
c0027134:	85 c0                	test   eax,eax
c0027136:	0f 85 bb 00 00 00    	jne    c00271f7 <__mulsf3+0x1b6>
c002713c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002713f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0027145:	e9 b0 00 00 00       	jmp    c00271fa <__mulsf3+0x1b9>
c002714a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c002714d:	50                   	push   eax
c002714e:	50                   	push   eax
c002714f:	6a 00                	push   0x0
c0027151:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027154:	e8 b4 04 00 00       	call   c002760d <__eqsf2>
c0027159:	83 c4 10             	add    esp,0x10
c002715c:	85 c0                	test   eax,eax
c002715e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027161:	75 0c                	jne    c002716f <__mulsf3+0x12e>
c0027163:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027167:	0f 89 8a 00 00 00    	jns    c00271f7 <__mulsf3+0x1b6>
c002716d:	eb cd                	jmp    c002713c <__mulsf3+0xfb>
c002716f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027172:	01 f6                	add    esi,esi
c0027174:	78 04                	js     c002717a <__mulsf3+0x139>
c0027176:	89 c3                	mov    ebx,eax
c0027178:	eb f5                	jmp    c002716f <__mulsf3+0x12e>
c002717a:	89 c8                	mov    eax,ecx
c002717c:	0d 00 00 00 80       	or     eax,0x80000000
c0027181:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027187:	f7 e6                	mul    esi
c0027189:	85 c0                	test   eax,eax
c002718b:	0f 95 c0             	setne  al
c002718e:	0f b6 c0             	movzx  eax,al
c0027191:	09 c2                	or     edx,eax
c0027193:	78 03                	js     c0027198 <__mulsf3+0x157>
c0027195:	01 d2                	add    edx,edx
c0027197:	4b                   	dec    ebx
c0027198:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c002719e:	7f 22                	jg     c00271c2 <__mulsf3+0x181>
c00271a0:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00271a6:	85 db                	test   ebx,ebx
c00271a8:	7f 23                	jg     c00271cd <__mulsf3+0x18c>
c00271aa:	83 fb e9             	cmp    ebx,0xffffffe9
c00271ad:	7c 1a                	jl     c00271c9 <__mulsf3+0x188>
c00271af:	81 ca 00 00 00 80    	or     edx,0x80000000
c00271b5:	b9 01 00 00 00       	mov    ecx,0x1
c00271ba:	29 d9                	sub    ecx,ebx
c00271bc:	d3 ea                	shr    edx,cl
c00271be:	31 db                	xor    ebx,ebx
c00271c0:	eb 0b                	jmp    c00271cd <__mulsf3+0x18c>
c00271c2:	bb ff 00 00 00       	mov    ebx,0xff
c00271c7:	eb 02                	jmp    c00271cb <__mulsf3+0x18a>
c00271c9:	31 db                	xor    ebx,ebx
c00271cb:	31 d2                	xor    edx,edx
c00271cd:	89 d0                	mov    eax,edx
c00271cf:	c1 e8 08             	shr    eax,0x8
c00271d2:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00271d5:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00271db:	09 fb                	or     ebx,edi
c00271dd:	c1 e3 17             	shl    ebx,0x17
c00271e0:	09 c3                	or     ebx,eax
c00271e2:	f6 c2 7f             	test   dl,0x7f
c00271e5:	0f 95 c1             	setne  cl
c00271e8:	09 c8                	or     eax,ecx
c00271ea:	83 e0 01             	and    eax,0x1
c00271ed:	c1 ea 07             	shr    edx,0x7
c00271f0:	21 c2                	and    edx,eax
c00271f2:	8d 34 13             	lea    esi,[ebx+edx*1]
c00271f5:	eb 03                	jmp    c00271fa <__mulsf3+0x1b9>
c00271f7:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00271fa:	89 f0                	mov    eax,esi
c00271fc:	8d 65 f4             	lea    esp,[ebp-0xc]
c00271ff:	5b                   	pop    ebx
c0027200:	5e                   	pop    esi
c0027201:	5f                   	pop    edi
c0027202:	5d                   	pop    ebp
c0027203:	c3                   	ret    

c0027204 <__divsf3>:
c0027204:	55                   	push   ebp
c0027205:	89 e5                	mov    ebp,esp
c0027207:	57                   	push   edi
c0027208:	56                   	push   esi
c0027209:	53                   	push   ebx
c002720a:	83 ec 1c             	sub    esp,0x1c
c002720d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027210:	89 d8                	mov    eax,ebx
c0027212:	89 d9                	mov    ecx,ebx
c0027214:	c1 f9 17             	sar    ecx,0x17
c0027217:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c002721a:	c1 e0 08             	shl    eax,0x8
c002721d:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027222:	89 c1                	mov    ecx,eax
c0027224:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027227:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002722a:	89 c7                	mov    edi,eax
c002722c:	c1 ff 17             	sar    edi,0x17
c002722f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027233:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027236:	89 f8                	mov    eax,edi
c0027238:	0f b6 c0             	movzx  eax,al
c002723b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002723e:	29 c6                	sub    esi,eax
c0027240:	83 c6 7f             	add    esi,0x7f
c0027243:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027246:	42                   	inc    edx
c0027247:	80 e2 fe             	and    dl,0xfe
c002724a:	0f 85 9c 00 00 00    	jne    c00272ec <__divsf3+0xe8>
c0027250:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027254:	74 33                	je     c0027289 <__divsf3+0x85>
c0027256:	85 c9                	test   ecx,ecx
c0027258:	0f 85 c7 01 00 00    	jne    c0027425 <__divsf3+0x221>
c002725e:	8d 57 01             	lea    edx,[edi+0x1]
c0027261:	80 e2 fe             	and    dl,0xfe
c0027264:	75 2f                	jne    c0027295 <__divsf3+0x91>
c0027266:	85 c0                	test   eax,eax
c0027268:	74 2b                	je     c0027295 <__divsf3+0x91>
c002726a:	51                   	push   ecx
c002726b:	51                   	push   ecx
c002726c:	6a 00                	push   0x0
c002726e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027271:	e8 d2 03 00 00       	call   c0027648 <__nesf2>
c0027276:	83 c4 10             	add    esp,0x10
c0027279:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002727c:	85 c0                	test   eax,eax
c002727e:	0f 85 a1 01 00 00    	jne    c0027425 <__divsf3+0x221>
c0027284:	e9 92 01 00 00       	jmp    c002741b <__divsf3+0x217>
c0027289:	85 c9                	test   ecx,ecx
c002728b:	75 1b                	jne    c00272a8 <__divsf3+0xa4>
c002728d:	8d 57 01             	lea    edx,[edi+0x1]
c0027290:	80 e2 fe             	and    dl,0xfe
c0027293:	74 1e                	je     c00272b3 <__divsf3+0xaf>
c0027295:	85 ff                	test   edi,edi
c0027297:	0f 89 88 01 00 00    	jns    c0027425 <__divsf3+0x221>
c002729d:	81 c3 00 00 00 80    	add    ebx,0x80000000
c00272a3:	e9 7d 01 00 00       	jmp    c0027425 <__divsf3+0x221>
c00272a8:	8d 56 ff             	lea    edx,[esi-0x1]
c00272ab:	01 c9                	add    ecx,ecx
c00272ad:	78 3d                	js     c00272ec <__divsf3+0xe8>
c00272af:	89 d6                	mov    esi,edx
c00272b1:	eb f5                	jmp    c00272a8 <__divsf3+0xa4>
c00272b3:	85 c0                	test   eax,eax
c00272b5:	b8 00 00 00 00       	mov    eax,0x0
c00272ba:	74 18                	je     c00272d4 <__divsf3+0xd0>
c00272bc:	52                   	push   edx
c00272bd:	52                   	push   edx
c00272be:	50                   	push   eax
c00272bf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00272c2:	e8 81 03 00 00       	call   c0027648 <__nesf2>
c00272c7:	83 c4 10             	add    esp,0x10
c00272ca:	85 c0                	test   eax,eax
c00272cc:	0f 85 50 01 00 00    	jne    c0027422 <__divsf3+0x21e>
c00272d2:	eb c1                	jmp    c0027295 <__divsf3+0x91>
c00272d4:	56                   	push   esi
c00272d5:	56                   	push   esi
c00272d6:	50                   	push   eax
c00272d7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00272da:	e8 69 03 00 00       	call   c0027648 <__nesf2>
c00272df:	83 c4 10             	add    esp,0x10
c00272e2:	85 c0                	test   eax,eax
c00272e4:	0f 84 31 01 00 00    	je     c002741b <__divsf3+0x217>
c00272ea:	eb a9                	jmp    c0027295 <__divsf3+0x91>
c00272ec:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c00272ef:	c1 e3 08             	shl    ebx,0x8
c00272f2:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00272f8:	8d 57 01             	lea    edx,[edi+0x1]
c00272fb:	80 e2 fe             	and    dl,0xfe
c00272fe:	75 71                	jne    c0027371 <__divsf3+0x16d>
c0027300:	85 c0                	test   eax,eax
c0027302:	ba 00 00 00 00       	mov    edx,0x0
c0027307:	74 2f                	je     c0027338 <__divsf3+0x134>
c0027309:	51                   	push   ecx
c002730a:	51                   	push   ecx
c002730b:	52                   	push   edx
c002730c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002730f:	e8 f9 02 00 00       	call   c002760d <__eqsf2>
c0027314:	83 c4 10             	add    esp,0x10
c0027317:	85 c0                	test   eax,eax
c0027319:	0f 85 03 01 00 00    	jne    c0027422 <__divsf3+0x21e>
c002731f:	31 d2                	xor    edx,edx
c0027321:	89 d3                	mov    ebx,edx
c0027323:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027326:	31 f8                	xor    eax,edi
c0027328:	0f 89 f7 00 00 00    	jns    c0027425 <__divsf3+0x221>
c002732e:	bb 00 00 00 80       	mov    ebx,0x80000000
c0027333:	e9 ed 00 00 00       	jmp    c0027425 <__divsf3+0x221>
c0027338:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c002733b:	50                   	push   eax
c002733c:	50                   	push   eax
c002733d:	52                   	push   edx
c002733e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027341:	e8 c7 02 00 00       	call   c002760d <__eqsf2>
c0027346:	83 c4 10             	add    esp,0x10
c0027349:	85 c0                	test   eax,eax
c002734b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002734e:	75 16                	jne    c0027366 <__divsf3+0x162>
c0027350:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027353:	31 fb                	xor    ebx,edi
c0027355:	81 e3 00 00 00 80    	and    ebx,0x80000000
c002735b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027361:	e9 bf 00 00 00       	jmp    c0027425 <__divsf3+0x221>
c0027366:	8d 46 01             	lea    eax,[esi+0x1]
c0027369:	01 db                	add    ebx,ebx
c002736b:	78 04                	js     c0027371 <__divsf3+0x16d>
c002736d:	89 c6                	mov    esi,eax
c002736f:	eb f5                	jmp    c0027366 <__divsf3+0x162>
c0027371:	89 c8                	mov    eax,ecx
c0027373:	0d 00 00 00 80       	or     eax,0x80000000
c0027378:	81 cb 00 00 00 80    	or     ebx,0x80000000
c002737e:	31 d2                	xor    edx,edx
c0027380:	39 d8                	cmp    eax,ebx
c0027382:	72 07                	jb     c002738b <__divsf3+0x187>
c0027384:	29 d8                	sub    eax,ebx
c0027386:	ba 01 00 00 00       	mov    edx,0x1
c002738b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0027392:	01 d2                	add    edx,edx
c0027394:	89 c1                	mov    ecx,eax
c0027396:	01 c0                	add    eax,eax
c0027398:	85 c9                	test   ecx,ecx
c002739a:	78 04                	js     c00273a0 <__divsf3+0x19c>
c002739c:	39 c3                	cmp    ebx,eax
c002739e:	77 05                	ja     c00273a5 <__divsf3+0x1a1>
c00273a0:	29 d8                	sub    eax,ebx
c00273a2:	83 ca 01             	or     edx,0x1
c00273a5:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c00273a8:	75 e8                	jne    c0027392 <__divsf3+0x18e>
c00273aa:	85 c0                	test   eax,eax
c00273ac:	0f 95 c0             	setne  al
c00273af:	0f b6 c0             	movzx  eax,al
c00273b2:	c1 e2 06             	shl    edx,0x6
c00273b5:	09 c2                	or     edx,eax
c00273b7:	78 03                	js     c00273bc <__divsf3+0x1b8>
c00273b9:	01 d2                	add    edx,edx
c00273bb:	4e                   	dec    esi
c00273bc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00273c2:	7f 22                	jg     c00273e6 <__divsf3+0x1e2>
c00273c4:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00273ca:	85 f6                	test   esi,esi
c00273cc:	7f 23                	jg     c00273f1 <__divsf3+0x1ed>
c00273ce:	83 fe e9             	cmp    esi,0xffffffe9
c00273d1:	7c 1a                	jl     c00273ed <__divsf3+0x1e9>
c00273d3:	81 ca 00 00 00 80    	or     edx,0x80000000
c00273d9:	b9 01 00 00 00       	mov    ecx,0x1
c00273de:	29 f1                	sub    ecx,esi
c00273e0:	d3 ea                	shr    edx,cl
c00273e2:	31 f6                	xor    esi,esi
c00273e4:	eb 0b                	jmp    c00273f1 <__divsf3+0x1ed>
c00273e6:	be ff 00 00 00       	mov    esi,0xff
c00273eb:	eb 02                	jmp    c00273ef <__divsf3+0x1eb>
c00273ed:	31 f6                	xor    esi,esi
c00273ef:	31 d2                	xor    edx,edx
c00273f1:	89 d0                	mov    eax,edx
c00273f3:	c1 e8 08             	shr    eax,0x8
c00273f6:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00273f9:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00273ff:	09 fe                	or     esi,edi
c0027401:	c1 e6 17             	shl    esi,0x17
c0027404:	09 c6                	or     esi,eax
c0027406:	f6 c2 7f             	test   dl,0x7f
c0027409:	0f 95 c1             	setne  cl
c002740c:	09 c8                	or     eax,ecx
c002740e:	83 e0 01             	and    eax,0x1
c0027411:	c1 ea 07             	shr    edx,0x7
c0027414:	21 c2                	and    edx,eax
c0027416:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027419:	eb 0a                	jmp    c0027425 <__divsf3+0x221>
c002741b:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027420:	eb 03                	jmp    c0027425 <__divsf3+0x221>
c0027422:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027425:	89 d8                	mov    eax,ebx
c0027427:	8d 65 f4             	lea    esp,[ebp-0xc]
c002742a:	5b                   	pop    ebx
c002742b:	5e                   	pop    esi
c002742c:	5f                   	pop    edi
c002742d:	5d                   	pop    ebp
c002742e:	c3                   	ret    

c002742f <__floatsisf>:
c002742f:	55                   	push   ebp
c0027430:	89 e5                	mov    ebp,esp
c0027432:	53                   	push   ebx
c0027433:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027436:	85 d2                	test   edx,edx
c0027438:	7e 2b                	jle    c0027465 <__floatsisf+0x36>
c002743a:	0f bd ca             	bsr    ecx,edx
c002743d:	83 f1 1f             	xor    ecx,0x1f
c0027440:	d3 e2                	shl    edx,cl
c0027442:	89 d0                	mov    eax,edx
c0027444:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027449:	89 c3                	mov    ebx,eax
c002744b:	c1 eb 08             	shr    ebx,0x8
c002744e:	80 e2 7f             	and    dl,0x7f
c0027451:	0f 95 c2             	setne  dl
c0027454:	09 da                	or     edx,ebx
c0027456:	83 e2 01             	and    edx,0x1
c0027459:	c1 e8 07             	shr    eax,0x7
c002745c:	21 c2                	and    edx,eax
c002745e:	b8 9e 00 00 00       	mov    eax,0x9e
c0027463:	eb 32                	jmp    c0027497 <__floatsisf+0x68>
c0027465:	b8 00 00 00 00       	mov    eax,0x0
c002746a:	74 34                	je     c00274a0 <__floatsisf+0x71>
c002746c:	f7 da                	neg    edx
c002746e:	0f bd ca             	bsr    ecx,edx
c0027471:	83 f1 1f             	xor    ecx,0x1f
c0027474:	d3 e2                	shl    edx,cl
c0027476:	89 d0                	mov    eax,edx
c0027478:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002747d:	89 c3                	mov    ebx,eax
c002747f:	c1 eb 08             	shr    ebx,0x8
c0027482:	80 e2 7f             	and    dl,0x7f
c0027485:	0f 95 c2             	setne  dl
c0027488:	09 da                	or     edx,ebx
c002748a:	83 e2 01             	and    edx,0x1
c002748d:	c1 e8 07             	shr    eax,0x7
c0027490:	21 c2                	and    edx,eax
c0027492:	b8 9e 01 00 00       	mov    eax,0x19e
c0027497:	29 c8                	sub    eax,ecx
c0027499:	c1 e0 17             	shl    eax,0x17
c002749c:	09 d8                	or     eax,ebx
c002749e:	01 d0                	add    eax,edx
c00274a0:	5b                   	pop    ebx
c00274a1:	5d                   	pop    ebp
c00274a2:	c3                   	ret    

c00274a3 <__floatunsisf>:
c00274a3:	55                   	push   ebp
c00274a4:	89 e5                	mov    ebp,esp
c00274a6:	53                   	push   ebx
c00274a7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00274aa:	31 c0                	xor    eax,eax
c00274ac:	85 d2                	test   edx,edx
c00274ae:	74 32                	je     c00274e2 <__floatunsisf+0x3f>
c00274b0:	0f bd ca             	bsr    ecx,edx
c00274b3:	83 f1 1f             	xor    ecx,0x1f
c00274b6:	d3 e2                	shl    edx,cl
c00274b8:	89 d0                	mov    eax,edx
c00274ba:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00274bf:	89 c3                	mov    ebx,eax
c00274c1:	c1 eb 08             	shr    ebx,0x8
c00274c4:	80 e2 7f             	and    dl,0x7f
c00274c7:	0f 95 c2             	setne  dl
c00274ca:	09 da                	or     edx,ebx
c00274cc:	83 e2 01             	and    edx,0x1
c00274cf:	c1 e8 07             	shr    eax,0x7
c00274d2:	21 c2                	and    edx,eax
c00274d4:	b8 9e 00 00 00       	mov    eax,0x9e
c00274d9:	29 c8                	sub    eax,ecx
c00274db:	c1 e0 17             	shl    eax,0x17
c00274de:	09 d8                	or     eax,ebx
c00274e0:	01 d0                	add    eax,edx
c00274e2:	5b                   	pop    ebx
c00274e3:	5d                   	pop    ebp
c00274e4:	c3                   	ret    

c00274e5 <__fixsfsi>:
c00274e5:	55                   	push   ebp
c00274e6:	89 e5                	mov    ebp,esp
c00274e8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00274eb:	89 d1                	mov    ecx,edx
c00274ed:	c1 e1 08             	shl    ecx,0x8
c00274f0:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c00274f6:	c1 fa 17             	sar    edx,0x17
c00274f9:	78 1c                	js     c0027517 <__fixsfsi+0x32>
c00274fb:	83 ea 7f             	sub    edx,0x7f
c00274fe:	31 c0                	xor    eax,eax
c0027500:	83 fa 1e             	cmp    edx,0x1e
c0027503:	77 40                	ja     c0027545 <__fixsfsi+0x60>
c0027505:	89 c8                	mov    eax,ecx
c0027507:	0d 00 00 00 80       	or     eax,0x80000000
c002750c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027511:	29 d1                	sub    ecx,edx
c0027513:	d3 e8                	shr    eax,cl
c0027515:	eb 2e                	jmp    c0027545 <__fixsfsi+0x60>
c0027517:	31 c0                	xor    eax,eax
c0027519:	81 c2 81 00 00 00    	add    edx,0x81
c002751f:	78 24                	js     c0027545 <__fixsfsi+0x60>
c0027521:	83 fa 1e             	cmp    edx,0x1e
c0027524:	7e 09                	jle    c002752f <__fixsfsi+0x4a>
c0027526:	83 fa 1f             	cmp    edx,0x1f
c0027529:	75 18                	jne    c0027543 <__fixsfsi+0x5e>
c002752b:	85 c9                	test   ecx,ecx
c002752d:	75 14                	jne    c0027543 <__fixsfsi+0x5e>
c002752f:	89 c8                	mov    eax,ecx
c0027531:	0d 00 00 00 80       	or     eax,0x80000000
c0027536:	b9 1f 00 00 00       	mov    ecx,0x1f
c002753b:	29 d1                	sub    ecx,edx
c002753d:	d3 e8                	shr    eax,cl
c002753f:	f7 d8                	neg    eax
c0027541:	eb 02                	jmp    c0027545 <__fixsfsi+0x60>
c0027543:	31 c0                	xor    eax,eax
c0027545:	5d                   	pop    ebp
c0027546:	c3                   	ret    

c0027547 <__fixunssfsi>:
c0027547:	55                   	push   ebp
c0027548:	89 e5                	mov    ebp,esp
c002754a:	53                   	push   ebx
c002754b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002754e:	89 d3                	mov    ebx,edx
c0027550:	c1 fb 17             	sar    ebx,0x17
c0027553:	83 eb 7f             	sub    ebx,0x7f
c0027556:	31 c0                	xor    eax,eax
c0027558:	83 fb 1f             	cmp    ebx,0x1f
c002755b:	77 18                	ja     c0027575 <__fixunssfsi+0x2e>
c002755d:	89 d0                	mov    eax,edx
c002755f:	c1 e0 08             	shl    eax,0x8
c0027562:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027567:	0d 00 00 00 80       	or     eax,0x80000000
c002756c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027571:	29 d9                	sub    ecx,ebx
c0027573:	d3 e8                	shr    eax,cl
c0027575:	5b                   	pop    ebx
c0027576:	5d                   	pop    ebp
c0027577:	c3                   	ret    

c0027578 <__cmpsf2>:
c0027578:	55                   	push   ebp
c0027579:	89 e5                	mov    ebp,esp
c002757b:	57                   	push   edi
c002757c:	56                   	push   esi
c002757d:	53                   	push   ebx
c002757e:	83 ec 24             	sub    esp,0x24
c0027581:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027584:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027587:	e8 4f 10 00 00       	call   c00285db <__truncdfsf2>
c002758c:	5a                   	pop    edx
c002758d:	59                   	pop    ecx
c002758e:	89 c3                	mov    ebx,eax
c0027590:	c1 e8 17             	shr    eax,0x17
c0027593:	0f b6 f0             	movzx  esi,al
c0027596:	89 d8                	mov    eax,ebx
c0027598:	c1 e8 1f             	shr    eax,0x1f
c002759b:	31 c6                	xor    esi,eax
c002759d:	c1 e3 08             	shl    ebx,0x8
c00275a0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00275a3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00275a6:	e8 30 10 00 00       	call   c00285db <__truncdfsf2>
c00275ab:	83 c4 10             	add    esp,0x10
c00275ae:	89 c1                	mov    ecx,eax
c00275b0:	c1 e9 17             	shr    ecx,0x17
c00275b3:	0f b6 c9             	movzx  ecx,cl
c00275b6:	89 c7                	mov    edi,eax
c00275b8:	c1 ef 1f             	shr    edi,0x1f
c00275bb:	89 ca                	mov    edx,ecx
c00275bd:	31 fa                	xor    edx,edi
c00275bf:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00275c2:	c1 e0 08             	shl    eax,0x8
c00275c5:	89 c2                	mov    edx,eax
c00275c7:	89 d8                	mov    eax,ebx
c00275c9:	09 d0                	or     eax,edx
c00275cb:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00275d0:	09 f0                	or     eax,esi
c00275d2:	75 08                	jne    c00275dc <__cmpsf2+0x64>
c00275d4:	31 c0                	xor    eax,eax
c00275d6:	39 f9                	cmp    ecx,edi
c00275d8:	75 0c                	jne    c00275e6 <__cmpsf2+0x6e>
c00275da:	eb 29                	jmp    c0027605 <__cmpsf2+0x8d>
c00275dc:	b8 01 00 00 00       	mov    eax,0x1
c00275e1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00275e4:	7f 1f                	jg     c0027605 <__cmpsf2+0x8d>
c00275e6:	83 c8 ff             	or     eax,0xffffffff
c00275e9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00275ec:	7c 17                	jl     c0027605 <__cmpsf2+0x8d>
c00275ee:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00275f4:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00275fa:	b8 01 00 00 00       	mov    eax,0x1
c00275ff:	39 d3                	cmp    ebx,edx
c0027601:	77 02                	ja     c0027605 <__cmpsf2+0x8d>
c0027603:	19 c0                	sbb    eax,eax
c0027605:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027608:	5b                   	pop    ebx
c0027609:	5e                   	pop    esi
c002760a:	5f                   	pop    edi
c002760b:	5d                   	pop    ebp
c002760c:	c3                   	ret    

c002760d <__eqsf2>:
c002760d:	55                   	push   ebp
c002760e:	89 e5                	mov    ebp,esp
c0027610:	83 ec 24             	sub    esp,0x24
c0027613:	6a 01                	push   0x1
c0027615:	83 ec 0c             	sub    esp,0xc
c0027618:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002761b:	e8 df 10 00 00       	call   c00286ff <__extendsfdf2>
c0027620:	83 c4 10             	add    esp,0x10
c0027623:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027626:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027629:	52                   	push   edx
c002762a:	50                   	push   eax
c002762b:	50                   	push   eax
c002762c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002762f:	e8 cb 10 00 00       	call   c00286ff <__extendsfdf2>
c0027634:	59                   	pop    ecx
c0027635:	59                   	pop    ecx
c0027636:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027639:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002763c:	52                   	push   edx
c002763d:	50                   	push   eax
c002763e:	e8 35 ff ff ff       	call   c0027578 <__cmpsf2>
c0027643:	83 c4 20             	add    esp,0x20
c0027646:	c9                   	leave  
c0027647:	c3                   	ret    

c0027648 <__nesf2>:
c0027648:	eb c3                	jmp    c002760d <__eqsf2>

c002764a <__gtsf2>:
c002764a:	55                   	push   ebp
c002764b:	89 e5                	mov    ebp,esp
c002764d:	83 ec 24             	sub    esp,0x24
c0027650:	6a ff                	push   0xffffffff
c0027652:	83 ec 0c             	sub    esp,0xc
c0027655:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027658:	e8 a2 10 00 00       	call   c00286ff <__extendsfdf2>
c002765d:	83 c4 10             	add    esp,0x10
c0027660:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027663:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027666:	52                   	push   edx
c0027667:	50                   	push   eax
c0027668:	50                   	push   eax
c0027669:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002766c:	e8 8e 10 00 00       	call   c00286ff <__extendsfdf2>
c0027671:	59                   	pop    ecx
c0027672:	59                   	pop    ecx
c0027673:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027676:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027679:	52                   	push   edx
c002767a:	50                   	push   eax
c002767b:	e8 f8 fe ff ff       	call   c0027578 <__cmpsf2>
c0027680:	83 c4 20             	add    esp,0x20
c0027683:	c9                   	leave  
c0027684:	c3                   	ret    

c0027685 <__gesf2>:
c0027685:	eb c3                	jmp    c002764a <__gtsf2>

c0027687 <__ltsf2>:
c0027687:	eb 84                	jmp    c002760d <__eqsf2>

c0027689 <__lesf2>:
c0027689:	eb 82                	jmp    c002760d <__eqsf2>

c002768b <__adddf3>:
c002768b:	55                   	push   ebp
c002768c:	89 e5                	mov    ebp,esp
c002768e:	57                   	push   edi
c002768f:	56                   	push   esi
c0027690:	53                   	push   ebx
c0027691:	83 ec 24             	sub    esp,0x24
c0027694:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027697:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002769a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002769d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00276a0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00276a3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00276a6:	89 c8                	mov    eax,ecx
c00276a8:	89 ce                	mov    esi,ecx
c00276aa:	c1 fe 14             	sar    esi,0x14
c00276ad:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c00276b0:	89 fb                	mov    ebx,edi
c00276b2:	89 fa                	mov    edx,edi
c00276b4:	c1 e2 0b             	shl    edx,0xb
c00276b7:	c1 e0 0b             	shl    eax,0xb
c00276ba:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00276bf:	c1 eb 15             	shr    ebx,0x15
c00276c2:	09 d8                	or     eax,ebx
c00276c4:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00276c7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00276ca:	c1 fe 14             	sar    esi,0x14
c00276cd:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00276d0:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00276d3:	89 f3                	mov    ebx,esi
c00276d5:	c1 e3 0b             	shl    ebx,0xb
c00276d8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00276db:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00276de:	c1 e3 0b             	shl    ebx,0xb
c00276e1:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c00276e7:	c1 ee 15             	shr    esi,0x15
c00276ea:	09 f3                	or     ebx,esi
c00276ec:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c00276ef:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00276f2:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c00276f5:	0f 88 5f 02 00 00    	js     c002795a <__adddf3+0x2cf>
c00276fb:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00276fe:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027701:	85 db                	test   ebx,ebx
c0027703:	0f 8e c7 00 00 00    	jle    c00277d0 <__adddf3+0x145>
c0027709:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027710:	75 1a                	jne    c002772c <__adddf3+0xa1>
c0027712:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027715:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027718:	0f 84 b2 05 00 00    	je     c0027cd0 <__adddf3+0x645>
c002771e:	4b                   	dec    ebx
c002771f:	75 23                	jne    c0027744 <__adddf3+0xb9>
c0027721:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027724:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027727:	e9 99 00 00 00       	jmp    c00277c5 <__adddf3+0x13a>
c002772c:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002772f:	f7 d6                	not    esi
c0027731:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027737:	0f 84 93 05 00 00    	je     c0027cd0 <__adddf3+0x645>
c002773d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027744:	83 fb 1f             	cmp    ebx,0x1f
c0027747:	7e 42                	jle    c002778b <__adddf3+0x100>
c0027749:	83 fb 3f             	cmp    ebx,0x3f
c002774c:	0f 8f 7e 05 00 00    	jg     c0027cd0 <__adddf3+0x645>
c0027752:	83 e3 1f             	and    ebx,0x1f
c0027755:	89 d9                	mov    ecx,ebx
c0027757:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c002775a:	d3 ef                	shr    edi,cl
c002775c:	31 db                	xor    ebx,ebx
c002775e:	85 c9                	test   ecx,ecx
c0027760:	74 15                	je     c0027777 <__adddf3+0xec>
c0027762:	be 20 00 00 00       	mov    esi,0x20
c0027767:	29 ce                	sub    esi,ecx
c0027769:	89 f1                	mov    ecx,esi
c002776b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002776e:	d3 e6                	shl    esi,cl
c0027770:	31 db                	xor    ebx,ebx
c0027772:	85 f6                	test   esi,esi
c0027774:	0f 95 c3             	setne  bl
c0027777:	31 c9                	xor    ecx,ecx
c0027779:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002777d:	0f 95 c1             	setne  cl
c0027780:	09 cf                	or     edi,ecx
c0027782:	09 fb                	or     ebx,edi
c0027784:	01 da                	add    edx,ebx
c0027786:	83 d0 00             	adc    eax,0x0
c0027789:	eb 3a                	jmp    c00277c5 <__adddf3+0x13a>
c002778b:	bf 20 00 00 00       	mov    edi,0x20
c0027790:	29 df                	sub    edi,ebx
c0027792:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027795:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027798:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002779b:	d3 e6                	shl    esi,cl
c002779d:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00277a0:	88 d9                	mov    cl,bl
c00277a2:	d3 ef                	shr    edi,cl
c00277a4:	09 fe                	or     esi,edi
c00277a6:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00277a9:	88 d9                	mov    cl,bl
c00277ab:	d3 ef                	shr    edi,cl
c00277ad:	89 fb                	mov    ebx,edi
c00277af:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00277b2:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00277b5:	d3 e7                	shl    edi,cl
c00277b7:	85 ff                	test   edi,edi
c00277b9:	0f 95 c1             	setne  cl
c00277bc:	0f b6 c9             	movzx  ecx,cl
c00277bf:	09 ce                	or     esi,ecx
c00277c1:	01 f2                	add    edx,esi
c00277c3:	11 d8                	adc    eax,ebx
c00277c5:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00277c8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00277cb:	e9 52 01 00 00       	jmp    c0027922 <__adddf3+0x297>
c00277d0:	0f 84 d5 00 00 00    	je     c00278ab <__adddf3+0x220>
c00277d6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00277d9:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c00277dc:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00277df:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00277e2:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00277e9:	75 20                	jne    c002780b <__adddf3+0x180>
c00277eb:	89 d6                	mov    esi,edx
c00277ed:	09 c6                	or     esi,eax
c00277ef:	0f 84 db 04 00 00    	je     c0027cd0 <__adddf3+0x645>
c00277f5:	4b                   	dec    ebx
c00277f6:	75 29                	jne    c0027821 <__adddf3+0x196>
c00277f8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00277fb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00277fe:	01 d1                	add    ecx,edx
c0027800:	11 c6                	adc    esi,eax
c0027802:	89 f0                	mov    eax,esi
c0027804:	89 ca                	mov    edx,ecx
c0027806:	e9 17 01 00 00       	jmp    c0027922 <__adddf3+0x297>
c002780b:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002780e:	f7 d6                	not    esi
c0027810:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027816:	0f 84 b4 04 00 00    	je     c0027cd0 <__adddf3+0x645>
c002781c:	0d 00 00 00 80       	or     eax,0x80000000
c0027821:	83 fb 1f             	cmp    ebx,0x1f
c0027824:	7e 48                	jle    c002786e <__adddf3+0x1e3>
c0027826:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027829:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002782c:	83 fb 3f             	cmp    ebx,0x3f
c002782f:	0f 8f 9b 04 00 00    	jg     c0027cd0 <__adddf3+0x645>
c0027835:	83 e3 1f             	and    ebx,0x1f
c0027838:	89 d9                	mov    ecx,ebx
c002783a:	89 c7                	mov    edi,eax
c002783c:	d3 ef                	shr    edi,cl
c002783e:	31 db                	xor    ebx,ebx
c0027840:	85 c9                	test   ecx,ecx
c0027842:	74 12                	je     c0027856 <__adddf3+0x1cb>
c0027844:	be 20 00 00 00       	mov    esi,0x20
c0027849:	29 ce                	sub    esi,ecx
c002784b:	89 f1                	mov    ecx,esi
c002784d:	d3 e0                	shl    eax,cl
c002784f:	31 db                	xor    ebx,ebx
c0027851:	85 c0                	test   eax,eax
c0027853:	0f 95 c3             	setne  bl
c0027856:	31 c0                	xor    eax,eax
c0027858:	85 d2                	test   edx,edx
c002785a:	0f 95 c0             	setne  al
c002785d:	09 c7                	or     edi,eax
c002785f:	09 fb                	or     ebx,edi
c0027861:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027864:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027867:	01 da                	add    edx,ebx
c0027869:	83 d6 00             	adc    esi,0x0
c002786c:	eb 39                	jmp    c00278a7 <__adddf3+0x21c>
c002786e:	be 20 00 00 00       	mov    esi,0x20
c0027873:	29 de                	sub    esi,ebx
c0027875:	89 c7                	mov    edi,eax
c0027877:	89 f1                	mov    ecx,esi
c0027879:	d3 e7                	shl    edi,cl
c002787b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002787e:	89 d7                	mov    edi,edx
c0027880:	88 d9                	mov    cl,bl
c0027882:	d3 ef                	shr    edi,cl
c0027884:	89 f9                	mov    ecx,edi
c0027886:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027889:	09 cf                	or     edi,ecx
c002788b:	88 d9                	mov    cl,bl
c002788d:	d3 e8                	shr    eax,cl
c002788f:	89 f1                	mov    ecx,esi
c0027891:	d3 e2                	shl    edx,cl
c0027893:	85 d2                	test   edx,edx
c0027895:	0f 95 c2             	setne  dl
c0027898:	0f b6 d2             	movzx  edx,dl
c002789b:	09 d7                	or     edi,edx
c002789d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00278a0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00278a3:	01 fa                	add    edx,edi
c00278a5:	11 c6                	adc    esi,eax
c00278a7:	89 f0                	mov    eax,esi
c00278a9:	eb 77                	jmp    c0027922 <__adddf3+0x297>
c00278ab:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00278ae:	46                   	inc    esi
c00278af:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00278b2:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00278b8:	75 41                	jne    c00278fb <__adddf3+0x270>
c00278ba:	89 d3                	mov    ebx,edx
c00278bc:	09 c3                	or     ebx,eax
c00278be:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00278c5:	75 27                	jne    c00278ee <__adddf3+0x263>
c00278c7:	85 db                	test   ebx,ebx
c00278c9:	0f 84 fb 03 00 00    	je     c0027cca <__adddf3+0x63f>
c00278cf:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00278d2:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00278d5:	0f 84 f5 03 00 00    	je     c0027cd0 <__adddf3+0x645>
c00278db:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00278de:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00278e1:	85 c0                	test   eax,eax
c00278e3:	0f 89 91 03 00 00    	jns    c0027c7a <__adddf3+0x5ef>
c00278e9:	e9 85 03 00 00       	jmp    c0027c73 <__adddf3+0x5e8>
c00278ee:	85 db                	test   ebx,ebx
c00278f0:	0f 85 da 03 00 00    	jne    c0027cd0 <__adddf3+0x645>
c00278f6:	e9 cf 03 00 00       	jmp    c0027cca <__adddf3+0x63f>
c00278fb:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00278fe:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027901:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027904:	f7 d1                	not    ecx
c0027906:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002790c:	0f 84 70 03 00 00    	je     c0027c82 <__adddf3+0x5f7>
c0027912:	d1 ea                	shr    edx,1
c0027914:	89 c1                	mov    ecx,eax
c0027916:	c1 e1 1f             	shl    ecx,0x1f
c0027919:	09 ca                	or     edx,ecx
c002791b:	d1 e8                	shr    eax,1
c002791d:	e9 6f 03 00 00       	jmp    c0027c91 <__adddf3+0x606>
c0027922:	85 c0                	test   eax,eax
c0027924:	0f 89 67 03 00 00    	jns    c0027c91 <__adddf3+0x606>
c002792a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c002792d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027930:	f7 d1                	not    ecx
c0027932:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027938:	0f 84 44 03 00 00    	je     c0027c82 <__adddf3+0x5f7>
c002793e:	89 d1                	mov    ecx,edx
c0027940:	d1 e9                	shr    ecx,1
c0027942:	83 e2 01             	and    edx,0x1
c0027945:	09 ca                	or     edx,ecx
c0027947:	89 c1                	mov    ecx,eax
c0027949:	c1 e1 1f             	shl    ecx,0x1f
c002794c:	09 ca                	or     edx,ecx
c002794e:	d1 e8                	shr    eax,1
c0027950:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0027955:	e9 37 03 00 00       	jmp    c0027c91 <__adddf3+0x606>
c002795a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002795d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027963:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0027966:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027969:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002796f:	29 de                	sub    esi,ebx
c0027971:	85 f6                	test   esi,esi
c0027973:	0f 8e bd 00 00 00    	jle    c0027a36 <__adddf3+0x3ab>
c0027979:	85 db                	test   ebx,ebx
c002797b:	75 17                	jne    c0027994 <__adddf3+0x309>
c002797d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027980:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027983:	0f 84 47 03 00 00    	je     c0027cd0 <__adddf3+0x645>
c0027989:	4e                   	dec    esi
c002798a:	75 20                	jne    c00279ac <__adddf3+0x321>
c002798c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002798f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027992:	eb 5b                	jmp    c00279ef <__adddf3+0x364>
c0027994:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027997:	f7 d3                	not    ebx
c0027999:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002799f:	0f 84 2b 03 00 00    	je     c0027cd0 <__adddf3+0x645>
c00279a5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00279ac:	83 fe 1f             	cmp    esi,0x1f
c00279af:	7e 49                	jle    c00279fa <__adddf3+0x36f>
c00279b1:	83 fe 3f             	cmp    esi,0x3f
c00279b4:	0f 8f 16 03 00 00    	jg     c0027cd0 <__adddf3+0x645>
c00279ba:	83 e6 1f             	and    esi,0x1f
c00279bd:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00279c0:	89 f1                	mov    ecx,esi
c00279c2:	d3 ef                	shr    edi,cl
c00279c4:	31 db                	xor    ebx,ebx
c00279c6:	85 f6                	test   esi,esi
c00279c8:	74 13                	je     c00279dd <__adddf3+0x352>
c00279ca:	b9 20 00 00 00       	mov    ecx,0x20
c00279cf:	29 f1                	sub    ecx,esi
c00279d1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00279d4:	d3 e6                	shl    esi,cl
c00279d6:	31 db                	xor    ebx,ebx
c00279d8:	85 f6                	test   esi,esi
c00279da:	0f 95 c3             	setne  bl
c00279dd:	31 c9                	xor    ecx,ecx
c00279df:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00279e3:	0f 95 c1             	setne  cl
c00279e6:	09 cf                	or     edi,ecx
c00279e8:	09 fb                	or     ebx,edi
c00279ea:	29 da                	sub    edx,ebx
c00279ec:	83 d8 00             	sbb    eax,0x0
c00279ef:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00279f2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00279f5:	e9 aa 01 00 00       	jmp    c0027ba4 <__adddf3+0x519>
c00279fa:	bf 20 00 00 00       	mov    edi,0x20
c00279ff:	29 f7                	sub    edi,esi
c0027a01:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027a04:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027a07:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027a0a:	d3 e3                	shl    ebx,cl
c0027a0c:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027a0f:	89 f1                	mov    ecx,esi
c0027a11:	d3 ef                	shr    edi,cl
c0027a13:	09 fb                	or     ebx,edi
c0027a15:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027a18:	89 f1                	mov    ecx,esi
c0027a1a:	d3 ef                	shr    edi,cl
c0027a1c:	89 fe                	mov    esi,edi
c0027a1e:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027a21:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027a24:	d3 e7                	shl    edi,cl
c0027a26:	85 ff                	test   edi,edi
c0027a28:	0f 95 c1             	setne  cl
c0027a2b:	0f b6 c9             	movzx  ecx,cl
c0027a2e:	09 cb                	or     ebx,ecx
c0027a30:	29 da                	sub    edx,ebx
c0027a32:	19 f0                	sbb    eax,esi
c0027a34:	eb b9                	jmp    c00279ef <__adddf3+0x364>
c0027a36:	0f 84 cd 00 00 00    	je     c0027b09 <__adddf3+0x47e>
c0027a3c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0027a3f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027a42:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027a45:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027a49:	75 1b                	jne    c0027a66 <__adddf3+0x3db>
c0027a4b:	89 d6                	mov    esi,edx
c0027a4d:	09 c6                	or     esi,eax
c0027a4f:	0f 84 7b 02 00 00    	je     c0027cd0 <__adddf3+0x645>
c0027a55:	4b                   	dec    ebx
c0027a56:	75 24                	jne    c0027a7c <__adddf3+0x3f1>
c0027a58:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027a5b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027a5e:	29 d1                	sub    ecx,edx
c0027a60:	19 c6                	sbb    esi,eax
c0027a62:	89 ca                	mov    edx,ecx
c0027a64:	eb 61                	jmp    c0027ac7 <__adddf3+0x43c>
c0027a66:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027a69:	f7 d6                	not    esi
c0027a6b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027a71:	0f 84 59 02 00 00    	je     c0027cd0 <__adddf3+0x645>
c0027a77:	0d 00 00 00 80       	or     eax,0x80000000
c0027a7c:	83 fb 1f             	cmp    ebx,0x1f
c0027a7f:	7e 4d                	jle    c0027ace <__adddf3+0x443>
c0027a81:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027a84:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027a87:	83 fb 3f             	cmp    ebx,0x3f
c0027a8a:	0f 8f 40 02 00 00    	jg     c0027cd0 <__adddf3+0x645>
c0027a90:	83 e3 1f             	and    ebx,0x1f
c0027a93:	89 d9                	mov    ecx,ebx
c0027a95:	89 c7                	mov    edi,eax
c0027a97:	d3 ef                	shr    edi,cl
c0027a99:	31 db                	xor    ebx,ebx
c0027a9b:	85 c9                	test   ecx,ecx
c0027a9d:	74 12                	je     c0027ab1 <__adddf3+0x426>
c0027a9f:	be 20 00 00 00       	mov    esi,0x20
c0027aa4:	29 ce                	sub    esi,ecx
c0027aa6:	89 f1                	mov    ecx,esi
c0027aa8:	d3 e0                	shl    eax,cl
c0027aaa:	31 db                	xor    ebx,ebx
c0027aac:	85 c0                	test   eax,eax
c0027aae:	0f 95 c3             	setne  bl
c0027ab1:	31 c0                	xor    eax,eax
c0027ab3:	85 d2                	test   edx,edx
c0027ab5:	0f 95 c0             	setne  al
c0027ab8:	09 c7                	or     edi,eax
c0027aba:	09 fb                	or     ebx,edi
c0027abc:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027abf:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027ac2:	29 da                	sub    edx,ebx
c0027ac4:	83 de 00             	sbb    esi,0x0
c0027ac7:	89 f0                	mov    eax,esi
c0027ac9:	e9 d6 00 00 00       	jmp    c0027ba4 <__adddf3+0x519>
c0027ace:	be 20 00 00 00       	mov    esi,0x20
c0027ad3:	29 de                	sub    esi,ebx
c0027ad5:	89 c7                	mov    edi,eax
c0027ad7:	89 f1                	mov    ecx,esi
c0027ad9:	d3 e7                	shl    edi,cl
c0027adb:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027ade:	89 d7                	mov    edi,edx
c0027ae0:	88 d9                	mov    cl,bl
c0027ae2:	d3 ef                	shr    edi,cl
c0027ae4:	89 f9                	mov    ecx,edi
c0027ae6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027ae9:	09 cf                	or     edi,ecx
c0027aeb:	88 d9                	mov    cl,bl
c0027aed:	d3 e8                	shr    eax,cl
c0027aef:	89 f1                	mov    ecx,esi
c0027af1:	d3 e2                	shl    edx,cl
c0027af3:	85 d2                	test   edx,edx
c0027af5:	0f 95 c2             	setne  dl
c0027af8:	0f b6 d2             	movzx  edx,dl
c0027afb:	09 d7                	or     edi,edx
c0027afd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027b00:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027b03:	29 fa                	sub    edx,edi
c0027b05:	19 c6                	sbb    esi,eax
c0027b07:	eb be                	jmp    c0027ac7 <__adddf3+0x43c>
c0027b09:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027b0c:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027b0f:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027b15:	75 6a                	jne    c0027b81 <__adddf3+0x4f6>
c0027b17:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027b1b:	75 58                	jne    c0027b75 <__adddf3+0x4ea>
c0027b1d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027b20:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027b23:	89 d6                	mov    esi,edx
c0027b25:	09 c6                	or     esi,eax
c0027b27:	75 17                	jne    c0027b40 <__adddf3+0x4b5>
c0027b29:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027b2c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027b2f:	85 db                	test   ebx,ebx
c0027b31:	0f 85 99 01 00 00    	jne    c0027cd0 <__adddf3+0x645>
c0027b37:	31 ff                	xor    edi,edi
c0027b39:	31 c9                	xor    ecx,ecx
c0027b3b:	e9 90 01 00 00       	jmp    c0027cd0 <__adddf3+0x645>
c0027b40:	85 db                	test   ebx,ebx
c0027b42:	0f 84 88 01 00 00    	je     c0027cd0 <__adddf3+0x645>
c0027b48:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027b4b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027b4e:	85 c0                	test   eax,eax
c0027b50:	79 10                	jns    c0027b62 <__adddf3+0x4d7>
c0027b52:	31 c9                	xor    ecx,ecx
c0027b54:	f7 da                	neg    edx
c0027b56:	0f 95 c1             	setne  cl
c0027b59:	01 c8                	add    eax,ecx
c0027b5b:	f7 d8                	neg    eax
c0027b5d:	e9 2f 01 00 00       	jmp    c0027c91 <__adddf3+0x606>
c0027b62:	31 ff                	xor    edi,edi
c0027b64:	31 c9                	xor    ecx,ecx
c0027b66:	89 c3                	mov    ebx,eax
c0027b68:	09 d3                	or     ebx,edx
c0027b6a:	0f 84 60 01 00 00    	je     c0027cd0 <__adddf3+0x645>
c0027b70:	e9 05 01 00 00       	jmp    c0027c7a <__adddf3+0x5ef>
c0027b75:	31 ff                	xor    edi,edi
c0027b77:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027b7c:	e9 4f 01 00 00       	jmp    c0027cd0 <__adddf3+0x645>
c0027b81:	89 c1                	mov    ecx,eax
c0027b83:	89 d0                	mov    eax,edx
c0027b85:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027b88:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027b8b:	89 ca                	mov    edx,ecx
c0027b8d:	85 c9                	test   ecx,ecx
c0027b8f:	79 2c                	jns    c0027bbd <__adddf3+0x532>
c0027b91:	31 c9                	xor    ecx,ecx
c0027b93:	f7 d8                	neg    eax
c0027b95:	0f 95 c1             	setne  cl
c0027b98:	01 ca                	add    edx,ecx
c0027b9a:	f7 da                	neg    edx
c0027b9c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027b9f:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027ba2:	eb 19                	jmp    c0027bbd <__adddf3+0x532>
c0027ba4:	85 c0                	test   eax,eax
c0027ba6:	0f 89 e5 00 00 00    	jns    c0027c91 <__adddf3+0x606>
c0027bac:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027bb1:	89 c1                	mov    ecx,eax
c0027bb3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027bb6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027bb9:	89 d0                	mov    eax,edx
c0027bbb:	89 ca                	mov    edx,ecx
c0027bbd:	85 d2                	test   edx,edx
c0027bbf:	74 59                	je     c0027c1a <__adddf3+0x58f>
c0027bc1:	0f bd da             	bsr    ebx,edx
c0027bc4:	83 f3 1f             	xor    ebx,0x1f
c0027bc7:	88 d9                	mov    cl,bl
c0027bc9:	d3 e2                	shl    edx,cl
c0027bcb:	bf 20 00 00 00       	mov    edi,0x20
c0027bd0:	89 f9                	mov    ecx,edi
c0027bd2:	29 d9                	sub    ecx,ebx
c0027bd4:	89 c6                	mov    esi,eax
c0027bd6:	d3 ee                	shr    esi,cl
c0027bd8:	09 d6                	or     esi,edx
c0027bda:	88 d9                	mov    cl,bl
c0027bdc:	d3 e0                	shl    eax,cl
c0027bde:	89 c2                	mov    edx,eax
c0027be0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027be3:	25 ff 07 00 00       	and    eax,0x7ff
c0027be8:	39 d8                	cmp    eax,ebx
c0027bea:	7f 22                	jg     c0027c0e <__adddf3+0x583>
c0027bec:	29 c3                	sub    ebx,eax
c0027bee:	43                   	inc    ebx
c0027bef:	88 d9                	mov    cl,bl
c0027bf1:	d3 ea                	shr    edx,cl
c0027bf3:	29 df                	sub    edi,ebx
c0027bf5:	89 f9                	mov    ecx,edi
c0027bf7:	89 f0                	mov    eax,esi
c0027bf9:	d3 e0                	shl    eax,cl
c0027bfb:	09 c2                	or     edx,eax
c0027bfd:	89 f0                	mov    eax,esi
c0027bff:	88 d9                	mov    cl,bl
c0027c01:	d3 e8                	shr    eax,cl
c0027c03:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027c06:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027c0c:	eb 6f                	jmp    c0027c7d <__adddf3+0x5f2>
c0027c0e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027c11:	29 d8                	sub    eax,ebx
c0027c13:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c16:	89 f0                	mov    eax,esi
c0027c18:	eb 59                	jmp    c0027c73 <__adddf3+0x5e8>
c0027c1a:	85 c0                	test   eax,eax
c0027c1c:	74 6a                	je     c0027c88 <__adddf3+0x5fd>
c0027c1e:	0f bd c8             	bsr    ecx,eax
c0027c21:	83 f1 1f             	xor    ecx,0x1f
c0027c24:	d3 e0                	shl    eax,cl
c0027c26:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027c29:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027c2f:	83 c1 20             	add    ecx,0x20
c0027c32:	39 cb                	cmp    ebx,ecx
c0027c34:	7f 35                	jg     c0027c6b <__adddf3+0x5e0>
c0027c36:	29 d9                	sub    ecx,ebx
c0027c38:	8d 71 01             	lea    esi,[ecx+0x1]
c0027c3b:	83 fe 1f             	cmp    esi,0x1f
c0027c3e:	7e 09                	jle    c0027c49 <__adddf3+0x5be>
c0027c40:	83 e9 1f             	sub    ecx,0x1f
c0027c43:	d3 e8                	shr    eax,cl
c0027c45:	89 c3                	mov    ebx,eax
c0027c47:	eb 11                	jmp    c0027c5a <__adddf3+0x5cf>
c0027c49:	b9 20 00 00 00       	mov    ecx,0x20
c0027c4e:	29 f1                	sub    ecx,esi
c0027c50:	89 c3                	mov    ebx,eax
c0027c52:	d3 e3                	shl    ebx,cl
c0027c54:	89 f1                	mov    ecx,esi
c0027c56:	d3 e8                	shr    eax,cl
c0027c58:	89 c2                	mov    edx,eax
c0027c5a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027c5d:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027c62:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c65:	89 d0                	mov    eax,edx
c0027c67:	89 da                	mov    edx,ebx
c0027c69:	eb 26                	jmp    c0027c91 <__adddf3+0x606>
c0027c6b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027c6e:	29 cf                	sub    edi,ecx
c0027c70:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027c73:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027c78:	eb 17                	jmp    c0027c91 <__adddf3+0x606>
c0027c7a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027c7d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027c80:	eb 0f                	jmp    c0027c91 <__adddf3+0x606>
c0027c82:	31 d2                	xor    edx,edx
c0027c84:	31 c0                	xor    eax,eax
c0027c86:	eb 09                	jmp    c0027c91 <__adddf3+0x606>
c0027c88:	89 c2                	mov    edx,eax
c0027c8a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027c91:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027c94:	c1 e1 14             	shl    ecx,0x14
c0027c97:	89 c3                	mov    ebx,eax
c0027c99:	c1 eb 0b             	shr    ebx,0xb
c0027c9c:	09 d9                	or     ecx,ebx
c0027c9e:	89 d3                	mov    ebx,edx
c0027ca0:	c1 eb 0b             	shr    ebx,0xb
c0027ca3:	c1 e0 15             	shl    eax,0x15
c0027ca6:	09 d8                	or     eax,ebx
c0027ca8:	89 c7                	mov    edi,eax
c0027caa:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027cb0:	0f 95 c0             	setne  al
c0027cb3:	89 c6                	mov    esi,eax
c0027cb5:	09 f3                	or     ebx,esi
c0027cb7:	83 e3 01             	and    ebx,0x1
c0027cba:	c1 ea 0a             	shr    edx,0xa
c0027cbd:	21 da                	and    edx,ebx
c0027cbf:	89 f8                	mov    eax,edi
c0027cc1:	01 d0                	add    eax,edx
c0027cc3:	83 d1 00             	adc    ecx,0x0
c0027cc6:	89 c7                	mov    edi,eax
c0027cc8:	eb 06                	jmp    c0027cd0 <__adddf3+0x645>
c0027cca:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027ccd:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027cd0:	89 f8                	mov    eax,edi
c0027cd2:	89 ca                	mov    edx,ecx
c0027cd4:	83 c4 24             	add    esp,0x24
c0027cd7:	5b                   	pop    ebx
c0027cd8:	5e                   	pop    esi
c0027cd9:	5f                   	pop    edi
c0027cda:	5d                   	pop    ebp
c0027cdb:	c3                   	ret    

c0027cdc <__subdf3>:
c0027cdc:	55                   	push   ebp
c0027cdd:	89 e5                	mov    ebp,esp
c0027cdf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027ce2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027ce5:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027ceb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027cee:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027cf1:	5d                   	pop    ebp
c0027cf2:	e9 94 f9 ff ff       	jmp    c002768b <__adddf3>

c0027cf7 <__negdf2>:
c0027cf7:	55                   	push   ebp
c0027cf8:	89 e5                	mov    ebp,esp
c0027cfa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027cfd:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027d00:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027d06:	5d                   	pop    ebp
c0027d07:	c3                   	ret    

c0027d08 <__muldf3>:
c0027d08:	55                   	push   ebp
c0027d09:	89 e5                	mov    ebp,esp
c0027d0b:	57                   	push   edi
c0027d0c:	56                   	push   esi
c0027d0d:	53                   	push   ebx
c0027d0e:	83 ec 24             	sub    esp,0x24
c0027d11:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027d14:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027d17:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d1a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027d1d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027d20:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027d23:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027d26:	89 c8                	mov    eax,ecx
c0027d28:	c1 f8 14             	sar    eax,0x14
c0027d2b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027d2e:	89 f8                	mov    eax,edi
c0027d30:	89 fb                	mov    ebx,edi
c0027d32:	c1 e3 0b             	shl    ebx,0xb
c0027d35:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027d38:	c1 e1 0b             	shl    ecx,0xb
c0027d3b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027d41:	c1 e8 15             	shr    eax,0x15
c0027d44:	09 c1                	or     ecx,eax
c0027d46:	89 d6                	mov    esi,edx
c0027d48:	89 d0                	mov    eax,edx
c0027d4a:	c1 f8 14             	sar    eax,0x14
c0027d4d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027d50:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027d53:	89 c3                	mov    ebx,eax
c0027d55:	c1 e3 0b             	shl    ebx,0xb
c0027d58:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027d5b:	c1 e6 0b             	shl    esi,0xb
c0027d5e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027d64:	c1 e8 15             	shr    eax,0x15
c0027d67:	09 c6                	or     esi,eax
c0027d69:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027d6c:	25 ff 07 00 00       	and    eax,0x7ff
c0027d71:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027d74:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d77:	25 ff 07 00 00       	and    eax,0x7ff
c0027d7c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027d7f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027d82:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027d85:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027d8c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027d8f:	40                   	inc    eax
c0027d90:	a9 fe 07 00 00       	test   eax,0x7fe
c0027d95:	0f 85 8d 00 00 00    	jne    c0027e28 <__muldf3+0x120>
c0027d9b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027d9e:	09 c8                	or     eax,ecx
c0027da0:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027da4:	74 44                	je     c0027dea <__muldf3+0xe2>
c0027da6:	85 c0                	test   eax,eax
c0027da8:	0f 85 31 02 00 00    	jne    c0027fdf <__muldf3+0x2d7>
c0027dae:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027db1:	40                   	inc    eax
c0027db2:	a9 fe 07 00 00       	test   eax,0x7fe
c0027db7:	75 13                	jne    c0027dcc <__muldf3+0xc4>
c0027db9:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027dbc:	09 f1                	or     ecx,esi
c0027dbe:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027dc2:	74 22                	je     c0027de6 <__muldf3+0xde>
c0027dc4:	85 c9                	test   ecx,ecx
c0027dc6:	0f 85 0d 02 00 00    	jne    c0027fd9 <__muldf3+0x2d1>
c0027dcc:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027dd0:	0f 89 09 02 00 00    	jns    c0027fdf <__muldf3+0x2d7>
c0027dd6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027dd9:	05 00 00 00 80       	add    eax,0x80000000
c0027dde:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027de1:	e9 f9 01 00 00       	jmp    c0027fdf <__muldf3+0x2d7>
c0027de6:	85 c9                	test   ecx,ecx
c0027de8:	eb 2e                	jmp    c0027e18 <__muldf3+0x110>
c0027dea:	85 c0                	test   eax,eax
c0027dec:	74 20                	je     c0027e0e <__muldf3+0x106>
c0027dee:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027df1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027df4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027df7:	c1 ef 1f             	shr    edi,0x1f
c0027dfa:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027dfd:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027e00:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027e03:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027e06:	09 f9                	or     ecx,edi
c0027e08:	78 1e                	js     c0027e28 <__muldf3+0x120>
c0027e0a:	89 c3                	mov    ebx,eax
c0027e0c:	eb e0                	jmp    c0027dee <__muldf3+0xe6>
c0027e0e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027e11:	f7 d0                	not    eax
c0027e13:	a9 ff 07 00 00       	test   eax,0x7ff
c0027e18:	75 b2                	jne    c0027dcc <__muldf3+0xc4>
c0027e1a:	31 ff                	xor    edi,edi
c0027e1c:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027e23:	e9 b7 01 00 00       	jmp    c0027fdf <__muldf3+0x2d7>
c0027e28:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027e2b:	40                   	inc    eax
c0027e2c:	a9 fe 07 00 00       	test   eax,0x7fe
c0027e31:	75 57                	jne    c0027e8a <__muldf3+0x182>
c0027e33:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027e36:	09 f0                	or     eax,esi
c0027e38:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027e3c:	74 23                	je     c0027e61 <__muldf3+0x159>
c0027e3e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027e42:	0f 89 91 01 00 00    	jns    c0027fd9 <__muldf3+0x2d1>
c0027e48:	85 c0                	test   eax,eax
c0027e4a:	0f 85 89 01 00 00    	jne    c0027fd9 <__muldf3+0x2d1>
c0027e50:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027e53:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027e59:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027e5c:	e9 7e 01 00 00       	jmp    c0027fdf <__muldf3+0x2d7>
c0027e61:	85 c0                	test   eax,eax
c0027e63:	75 0c                	jne    c0027e71 <__muldf3+0x169>
c0027e65:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027e69:	0f 89 6a 01 00 00    	jns    c0027fd9 <__muldf3+0x2d1>
c0027e6f:	eb df                	jmp    c0027e50 <__muldf3+0x148>
c0027e71:	01 f6                	add    esi,esi
c0027e73:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027e76:	c1 ea 1f             	shr    edx,0x1f
c0027e79:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027e7c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027e7f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027e82:	09 d6                	or     esi,edx
c0027e84:	78 04                	js     c0027e8a <__muldf3+0x182>
c0027e86:	89 c3                	mov    ebx,eax
c0027e88:	eb e7                	jmp    c0027e71 <__muldf3+0x169>
c0027e8a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027e90:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027e96:	89 c8                	mov    eax,ecx
c0027e98:	f7 e6                	mul    esi
c0027e9a:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027e9d:	89 c7                	mov    edi,eax
c0027e9f:	89 c8                	mov    eax,ecx
c0027ea1:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027ea4:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027ea7:	89 c1                	mov    ecx,eax
c0027ea9:	89 f0                	mov    eax,esi
c0027eab:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027eae:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027eb1:	89 c6                	mov    esi,eax
c0027eb3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027eb6:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027eb9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027ebc:	31 c0                	xor    eax,eax
c0027ebe:	01 f1                	add    ecx,esi
c0027ec0:	0f 92 c0             	setb   al
c0027ec3:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027ec6:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027ec9:	83 d6 00             	adc    esi,0x0
c0027ecc:	01 c7                	add    edi,eax
c0027ece:	83 d6 00             	adc    esi,0x0
c0027ed1:	01 ca                	add    edx,ecx
c0027ed3:	0f 92 c1             	setb   cl
c0027ed6:	0f b6 c9             	movzx  ecx,cl
c0027ed9:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027edc:	83 d6 00             	adc    esi,0x0
c0027edf:	01 cf                	add    edi,ecx
c0027ee1:	83 d6 00             	adc    esi,0x0
c0027ee4:	31 c9                	xor    ecx,ecx
c0027ee6:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027ee9:	0f 95 c1             	setne  cl
c0027eec:	09 cf                	or     edi,ecx
c0027eee:	85 f6                	test   esi,esi
c0027ef0:	78 0c                	js     c0027efe <__muldf3+0x1f6>
c0027ef2:	01 f6                	add    esi,esi
c0027ef4:	89 f8                	mov    eax,edi
c0027ef6:	c1 e8 1f             	shr    eax,0x1f
c0027ef9:	09 c6                	or     esi,eax
c0027efb:	01 ff                	add    edi,edi
c0027efd:	4b                   	dec    ebx
c0027efe:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027f04:	0f 8f 85 00 00 00    	jg     c0027f8f <__muldf3+0x287>
c0027f0a:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027f10:	85 db                	test   ebx,ebx
c0027f12:	0f 8f 84 00 00 00    	jg     c0027f9c <__muldf3+0x294>
c0027f18:	83 fb cc             	cmp    ebx,0xffffffcc
c0027f1b:	7c 79                	jl     c0027f96 <__muldf3+0x28e>
c0027f1d:	ba 01 00 00 00       	mov    edx,0x1
c0027f22:	29 da                	sub    edx,ebx
c0027f24:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027f2a:	83 fa 1f             	cmp    edx,0x1f
c0027f2d:	7e 30                	jle    c0027f5f <__muldf3+0x257>
c0027f2f:	83 fa 20             	cmp    edx,0x20
c0027f32:	75 0b                	jne    c0027f3f <__muldf3+0x237>
c0027f34:	31 c0                	xor    eax,eax
c0027f36:	85 ff                	test   edi,edi
c0027f38:	0f 95 c0             	setne  al
c0027f3b:	89 c7                	mov    edi,eax
c0027f3d:	eb 1a                	jmp    c0027f59 <__muldf3+0x251>
c0027f3f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027f42:	89 f0                	mov    eax,esi
c0027f44:	d3 e0                	shl    eax,cl
c0027f46:	09 f8                	or     eax,edi
c0027f48:	0f 95 c0             	setne  al
c0027f4b:	0f b6 c0             	movzx  eax,al
c0027f4e:	89 c7                	mov    edi,eax
c0027f50:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027f55:	29 d9                	sub    ecx,ebx
c0027f57:	d3 ee                	shr    esi,cl
c0027f59:	09 f7                	or     edi,esi
c0027f5b:	31 db                	xor    ebx,ebx
c0027f5d:	eb 3b                	jmp    c0027f9a <__muldf3+0x292>
c0027f5f:	83 c3 1f             	add    ebx,0x1f
c0027f62:	89 f0                	mov    eax,esi
c0027f64:	88 d9                	mov    cl,bl
c0027f66:	d3 e0                	shl    eax,cl
c0027f68:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027f6b:	89 f8                	mov    eax,edi
c0027f6d:	88 d1                	mov    cl,dl
c0027f6f:	d3 e8                	shr    eax,cl
c0027f71:	89 c1                	mov    ecx,eax
c0027f73:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027f76:	09 c8                	or     eax,ecx
c0027f78:	88 d9                	mov    cl,bl
c0027f7a:	d3 e7                	shl    edi,cl
c0027f7c:	31 db                	xor    ebx,ebx
c0027f7e:	85 ff                	test   edi,edi
c0027f80:	0f 95 c3             	setne  bl
c0027f83:	89 df                	mov    edi,ebx
c0027f85:	09 c7                	or     edi,eax
c0027f87:	88 d1                	mov    cl,dl
c0027f89:	d3 ee                	shr    esi,cl
c0027f8b:	31 db                	xor    ebx,ebx
c0027f8d:	eb 0d                	jmp    c0027f9c <__muldf3+0x294>
c0027f8f:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027f94:	eb 02                	jmp    c0027f98 <__muldf3+0x290>
c0027f96:	31 db                	xor    ebx,ebx
c0027f98:	31 ff                	xor    edi,edi
c0027f9a:	31 f6                	xor    esi,esi
c0027f9c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027f9f:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027fa2:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027fa7:	09 c3                	or     ebx,eax
c0027fa9:	c1 e3 14             	shl    ebx,0x14
c0027fac:	89 f0                	mov    eax,esi
c0027fae:	c1 e8 0b             	shr    eax,0xb
c0027fb1:	09 c3                	or     ebx,eax
c0027fb3:	89 f8                	mov    eax,edi
c0027fb5:	c1 e8 0b             	shr    eax,0xb
c0027fb8:	c1 e6 15             	shl    esi,0x15
c0027fbb:	09 c6                	or     esi,eax
c0027fbd:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027fc3:	0f 95 c1             	setne  cl
c0027fc6:	09 c8                	or     eax,ecx
c0027fc8:	83 e0 01             	and    eax,0x1
c0027fcb:	c1 ef 0a             	shr    edi,0xa
c0027fce:	21 c7                	and    edi,eax
c0027fd0:	01 f7                	add    edi,esi
c0027fd2:	83 d3 00             	adc    ebx,0x0
c0027fd5:	89 da                	mov    edx,ebx
c0027fd7:	eb 03                	jmp    c0027fdc <__muldf3+0x2d4>
c0027fd9:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027fdc:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027fdf:	89 f8                	mov    eax,edi
c0027fe1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027fe4:	83 c4 24             	add    esp,0x24
c0027fe7:	5b                   	pop    ebx
c0027fe8:	5e                   	pop    esi
c0027fe9:	5f                   	pop    edi
c0027fea:	5d                   	pop    ebp
c0027feb:	c3                   	ret    

c0027fec <__divdf3>:
c0027fec:	55                   	push   ebp
c0027fed:	89 e5                	mov    ebp,esp
c0027fef:	57                   	push   edi
c0027ff0:	56                   	push   esi
c0027ff1:	53                   	push   ebx
c0027ff2:	83 ec 2c             	sub    esp,0x2c
c0027ff5:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027ff8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027ffb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027ffe:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0028001:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0028004:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028007:	89 ce                	mov    esi,ecx
c0028009:	89 c8                	mov    eax,ecx
c002800b:	c1 f8 14             	sar    eax,0x14
c002800e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0028011:	89 f8                	mov    eax,edi
c0028013:	89 fb                	mov    ebx,edi
c0028015:	c1 e3 0b             	shl    ebx,0xb
c0028018:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c002801b:	c1 e6 0b             	shl    esi,0xb
c002801e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028024:	c1 e8 15             	shr    eax,0x15
c0028027:	09 c6                	or     esi,eax
c0028029:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c002802c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002802f:	89 c2                	mov    edx,eax
c0028031:	c1 fa 14             	sar    edx,0x14
c0028034:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0028037:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c002803a:	89 de                	mov    esi,ebx
c002803c:	c1 e6 0b             	shl    esi,0xb
c002803f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0028042:	c1 e0 0b             	shl    eax,0xb
c0028045:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002804a:	c1 eb 15             	shr    ebx,0x15
c002804d:	09 d8                	or     eax,ebx
c002804f:	89 c2                	mov    edx,eax
c0028051:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028054:	25 ff 07 00 00       	and    eax,0x7ff
c0028059:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002805c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002805f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028065:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0028068:	29 d8                	sub    eax,ebx
c002806a:	05 ff 03 00 00       	add    eax,0x3ff
c002806f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0028072:	46                   	inc    esi
c0028073:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0028079:	0f 85 a5 00 00 00    	jne    c0028124 <__divdf3+0x138>
c002807f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028082:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0028085:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0028089:	74 2a                	je     c00280b5 <__divdf3+0xc9>
c002808b:	85 f6                	test   esi,esi
c002808d:	0f 85 cc 02 00 00    	jne    c002835f <__divdf3+0x373>
c0028093:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028096:	40                   	inc    eax
c0028097:	a9 fe 07 00 00       	test   eax,0x7fe
c002809c:	75 26                	jne    c00280c4 <__divdf3+0xd8>
c002809e:	85 db                	test   ebx,ebx
c00280a0:	74 22                	je     c00280c4 <__divdf3+0xd8>
c00280a2:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00280a5:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00280a8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00280ab:	09 d0                	or     eax,edx
c00280ad:	0f 85 ac 02 00 00    	jne    c002835f <__divdf3+0x373>
c00280b3:	eb 63                	jmp    c0028118 <__divdf3+0x12c>
c00280b5:	85 f6                	test   esi,esi
c00280b7:	75 22                	jne    c00280db <__divdf3+0xef>
c00280b9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00280bc:	40                   	inc    eax
c00280bd:	a9 fe 07 00 00       	test   eax,0x7fe
c00280c2:	74 36                	je     c00280fa <__divdf3+0x10e>
c00280c4:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00280c8:	0f 89 91 02 00 00    	jns    c002835f <__divdf3+0x373>
c00280ce:	89 f8                	mov    eax,edi
c00280d0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00280d6:	e9 80 02 00 00       	jmp    c002835b <__divdf3+0x36f>
c00280db:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00280de:	01 f6                	add    esi,esi
c00280e0:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00280e3:	c1 ef 1f             	shr    edi,0x1f
c00280e6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00280e9:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c00280ec:	8d 48 ff             	lea    ecx,[eax-0x1]
c00280ef:	09 f7                	or     edi,esi
c00280f1:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c00280f4:	78 2e                	js     c0028124 <__divdf3+0x138>
c00280f6:	89 c8                	mov    eax,ecx
c00280f8:	eb e1                	jmp    c00280db <__divdf3+0xef>
c00280fa:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00280fd:	09 d0                	or     eax,edx
c00280ff:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028103:	74 0f                	je     c0028114 <__divdf3+0x128>
c0028105:	85 c0                	test   eax,eax
c0028107:	74 bb                	je     c00280c4 <__divdf3+0xd8>
c0028109:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c002810c:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c002810f:	e9 4b 02 00 00       	jmp    c002835f <__divdf3+0x373>
c0028114:	85 c0                	test   eax,eax
c0028116:	75 ac                	jne    c00280c4 <__divdf3+0xd8>
c0028118:	31 ff                	xor    edi,edi
c002811a:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002811f:	e9 3b 02 00 00       	jmp    c002835f <__divdf3+0x373>
c0028124:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028127:	8d 4f 01             	lea    ecx,[edi+0x1]
c002812a:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0028130:	75 6b                	jne    c002819d <__divdf3+0x1b1>
c0028132:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028135:	09 d6                	or     esi,edx
c0028137:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002813b:	74 28                	je     c0028165 <__divdf3+0x179>
c002813d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028140:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028143:	85 f6                	test   esi,esi
c0028145:	0f 85 14 02 00 00    	jne    c002835f <__divdf3+0x373>
c002814b:	31 ff                	xor    edi,edi
c002814d:	31 c9                	xor    ecx,ecx
c002814f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028152:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028155:	0f 89 04 02 00 00    	jns    c002835f <__divdf3+0x373>
c002815b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028160:	e9 fa 01 00 00       	jmp    c002835f <__divdf3+0x373>
c0028165:	85 f6                	test   esi,esi
c0028167:	75 1b                	jne    c0028184 <__divdf3+0x198>
c0028169:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002816c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002816f:	25 00 00 00 80       	and    eax,0x80000000
c0028174:	31 c9                	xor    ecx,ecx
c0028176:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c002817b:	89 cf                	mov    edi,ecx
c002817d:	89 c1                	mov    ecx,eax
c002817f:	e9 db 01 00 00       	jmp    c002835f <__divdf3+0x373>
c0028184:	01 d2                	add    edx,edx
c0028186:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028189:	c1 eb 1f             	shr    ebx,0x1f
c002818c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002818f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0028192:	8d 48 01             	lea    ecx,[eax+0x1]
c0028195:	09 da                	or     edx,ebx
c0028197:	78 04                	js     c002819d <__divdf3+0x1b1>
c0028199:	89 c8                	mov    eax,ecx
c002819b:	eb e7                	jmp    c0028184 <__divdf3+0x198>
c002819d:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00281a0:	81 ce 00 00 00 80    	or     esi,0x80000000
c00281a6:	81 ca 00 00 00 80    	or     edx,0x80000000
c00281ac:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c00281af:	39 d6                	cmp    esi,edx
c00281b1:	77 0d                	ja     c00281c0 <__divdf3+0x1d4>
c00281b3:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00281b6:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c00281b9:	72 1b                	jb     c00281d6 <__divdf3+0x1ea>
c00281bb:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c00281be:	75 16                	jne    c00281d6 <__divdf3+0x1ea>
c00281c0:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00281c3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00281c6:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c00281c9:	83 de 00             	sbb    esi,0x0
c00281cc:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c00281cf:	ba 01 00 00 00       	mov    edx,0x1
c00281d4:	eb 02                	jmp    c00281d8 <__divdf3+0x1ec>
c00281d6:	31 d2                	xor    edx,edx
c00281d8:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c00281df:	31 ff                	xor    edi,edi
c00281e1:	01 ff                	add    edi,edi
c00281e3:	89 d1                	mov    ecx,edx
c00281e5:	c1 e9 1f             	shr    ecx,0x1f
c00281e8:	09 cf                	or     edi,ecx
c00281ea:	8d 1c 12             	lea    ebx,[edx+edx*1]
c00281ed:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c00281f0:	89 da                	mov    edx,ebx
c00281f2:	89 f3                	mov    ebx,esi
c00281f4:	8d 34 36             	lea    esi,[esi+esi*1]
c00281f7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00281fa:	c1 e9 1f             	shr    ecx,0x1f
c00281fd:	09 ce                	or     esi,ecx
c00281ff:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028202:	01 c9                	add    ecx,ecx
c0028204:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0028207:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c002820a:	85 db                	test   ebx,ebx
c002820c:	78 29                	js     c0028237 <__divdf3+0x24b>
c002820e:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0028211:	72 07                	jb     c002821a <__divdf3+0x22e>
c0028213:	75 3c                	jne    c0028251 <__divdf3+0x265>
c0028215:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028218:	77 37                	ja     c0028251 <__divdf3+0x265>
c002821a:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002821d:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028220:	31 d2                	xor    edx,edx
c0028222:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0028225:	0f 97 c2             	seta   dl
c0028228:	29 d6                	sub    esi,edx
c002822a:	89 d9                	mov    ecx,ebx
c002822c:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c002822f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028232:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0028235:	eb 17                	jmp    c002824e <__divdf3+0x262>
c0028237:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002823a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002823d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028240:	0f 97 c1             	seta   cl
c0028243:	0f b6 c9             	movzx  ecx,cl
c0028246:	29 ce                	sub    esi,ecx
c0028248:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c002824b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c002824e:	83 ca 01             	or     edx,0x1
c0028251:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0028254:	75 8b                	jne    c00281e1 <__divdf3+0x1f5>
c0028256:	c1 e7 09             	shl    edi,0x9
c0028259:	89 d1                	mov    ecx,edx
c002825b:	c1 e9 17             	shr    ecx,0x17
c002825e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028261:	09 f3                	or     ebx,esi
c0028263:	0f 95 c3             	setne  bl
c0028266:	0f b6 db             	movzx  ebx,bl
c0028269:	c1 e2 09             	shl    edx,0x9
c002826c:	09 d3                	or     ebx,edx
c002826e:	89 ca                	mov    edx,ecx
c0028270:	09 fa                	or     edx,edi
c0028272:	78 0c                	js     c0028280 <__divdf3+0x294>
c0028274:	01 d2                	add    edx,edx
c0028276:	89 d9                	mov    ecx,ebx
c0028278:	c1 e9 1f             	shr    ecx,0x1f
c002827b:	09 ca                	or     edx,ecx
c002827d:	01 db                	add    ebx,ebx
c002827f:	48                   	dec    eax
c0028280:	3d fe 07 00 00       	cmp    eax,0x7fe
c0028285:	0f 8f 83 00 00 00    	jg     c002830e <__divdf3+0x322>
c002828b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028291:	85 c0                	test   eax,eax
c0028293:	0f 8f 82 00 00 00    	jg     c002831b <__divdf3+0x32f>
c0028299:	83 f8 cc             	cmp    eax,0xffffffcc
c002829c:	7c 77                	jl     c0028315 <__divdf3+0x329>
c002829e:	be 01 00 00 00       	mov    esi,0x1
c00282a3:	29 c6                	sub    esi,eax
c00282a5:	81 ca 00 00 00 80    	or     edx,0x80000000
c00282ab:	83 fe 1f             	cmp    esi,0x1f
c00282ae:	7e 2f                	jle    c00282df <__divdf3+0x2f3>
c00282b0:	83 fe 20             	cmp    esi,0x20
c00282b3:	75 0a                	jne    c00282bf <__divdf3+0x2d3>
c00282b5:	85 db                	test   ebx,ebx
c00282b7:	0f 95 c3             	setne  bl
c00282ba:	0f b6 db             	movzx  ebx,bl
c00282bd:	eb 1a                	jmp    c00282d9 <__divdf3+0x2ed>
c00282bf:	8d 48 3f             	lea    ecx,[eax+0x3f]
c00282c2:	89 d7                	mov    edi,edx
c00282c4:	d3 e7                	shl    edi,cl
c00282c6:	89 f9                	mov    ecx,edi
c00282c8:	09 d9                	or     ecx,ebx
c00282ca:	0f 95 c3             	setne  bl
c00282cd:	0f b6 db             	movzx  ebx,bl
c00282d0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00282d5:	29 c1                	sub    ecx,eax
c00282d7:	d3 ea                	shr    edx,cl
c00282d9:	09 d3                	or     ebx,edx
c00282db:	31 c0                	xor    eax,eax
c00282dd:	eb 3a                	jmp    c0028319 <__divdf3+0x32d>
c00282df:	83 c0 1f             	add    eax,0x1f
c00282e2:	89 d7                	mov    edi,edx
c00282e4:	88 c1                	mov    cl,al
c00282e6:	d3 e7                	shl    edi,cl
c00282e8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00282eb:	89 df                	mov    edi,ebx
c00282ed:	89 f1                	mov    ecx,esi
c00282ef:	d3 ef                	shr    edi,cl
c00282f1:	89 f9                	mov    ecx,edi
c00282f3:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00282f6:	09 cf                	or     edi,ecx
c00282f8:	88 c1                	mov    cl,al
c00282fa:	d3 e3                	shl    ebx,cl
c00282fc:	85 db                	test   ebx,ebx
c00282fe:	0f 95 c3             	setne  bl
c0028301:	0f b6 db             	movzx  ebx,bl
c0028304:	09 fb                	or     ebx,edi
c0028306:	89 f1                	mov    ecx,esi
c0028308:	d3 ea                	shr    edx,cl
c002830a:	31 c0                	xor    eax,eax
c002830c:	eb 0d                	jmp    c002831b <__divdf3+0x32f>
c002830e:	b8 ff 07 00 00       	mov    eax,0x7ff
c0028313:	eb 02                	jmp    c0028317 <__divdf3+0x32b>
c0028315:	31 c0                	xor    eax,eax
c0028317:	31 db                	xor    ebx,ebx
c0028319:	31 d2                	xor    edx,edx
c002831b:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c002831e:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028321:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0028327:	09 c8                	or     eax,ecx
c0028329:	c1 e0 14             	shl    eax,0x14
c002832c:	89 d1                	mov    ecx,edx
c002832e:	c1 e9 0b             	shr    ecx,0xb
c0028331:	09 c8                	or     eax,ecx
c0028333:	89 c6                	mov    esi,eax
c0028335:	89 d9                	mov    ecx,ebx
c0028337:	c1 e9 0b             	shr    ecx,0xb
c002833a:	c1 e2 15             	shl    edx,0x15
c002833d:	09 ca                	or     edx,ecx
c002833f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0028345:	0f 95 c0             	setne  al
c0028348:	09 c1                	or     ecx,eax
c002834a:	83 e1 01             	and    ecx,0x1
c002834d:	c1 eb 0a             	shr    ebx,0xa
c0028350:	21 cb                	and    ebx,ecx
c0028352:	01 d3                	add    ebx,edx
c0028354:	89 d8                	mov    eax,ebx
c0028356:	83 d6 00             	adc    esi,0x0
c0028359:	89 f2                	mov    edx,esi
c002835b:	89 c7                	mov    edi,eax
c002835d:	89 d1                	mov    ecx,edx
c002835f:	89 f8                	mov    eax,edi
c0028361:	89 ca                	mov    edx,ecx
c0028363:	83 c4 2c             	add    esp,0x2c
c0028366:	5b                   	pop    ebx
c0028367:	5e                   	pop    esi
c0028368:	5f                   	pop    edi
c0028369:	5d                   	pop    ebp
c002836a:	c3                   	ret    

c002836b <__floatsidf>:
c002836b:	55                   	push   ebp
c002836c:	89 e5                	mov    ebp,esp
c002836e:	56                   	push   esi
c002836f:	53                   	push   ebx
c0028370:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028373:	85 db                	test   ebx,ebx
c0028375:	7e 15                	jle    c002838c <__floatsidf+0x21>
c0028377:	0f bd cb             	bsr    ecx,ebx
c002837a:	83 f1 1f             	xor    ecx,0x1f
c002837d:	d3 e3                	shl    ebx,cl
c002837f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028385:	b8 1e 04 00 00       	mov    eax,0x41e
c002838a:	eb 21                	jmp    c00283ad <__floatsidf+0x42>
c002838c:	b8 00 00 00 00       	mov    eax,0x0
c0028391:	ba 00 00 00 00       	mov    edx,0x0
c0028396:	74 2a                	je     c00283c2 <__floatsidf+0x57>
c0028398:	f7 db                	neg    ebx
c002839a:	0f bd cb             	bsr    ecx,ebx
c002839d:	83 f1 1f             	xor    ecx,0x1f
c00283a0:	d3 e3                	shl    ebx,cl
c00283a2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00283a8:	b8 1e 0c 00 00       	mov    eax,0xc1e
c00283ad:	29 c8                	sub    eax,ecx
c00283af:	c1 e0 14             	shl    eax,0x14
c00283b2:	89 c1                	mov    ecx,eax
c00283b4:	89 de                	mov    esi,ebx
c00283b6:	c1 ee 0b             	shr    esi,0xb
c00283b9:	09 f1                	or     ecx,esi
c00283bb:	89 ca                	mov    edx,ecx
c00283bd:	c1 e3 15             	shl    ebx,0x15
c00283c0:	89 d8                	mov    eax,ebx
c00283c2:	5b                   	pop    ebx
c00283c3:	5e                   	pop    esi
c00283c4:	5d                   	pop    ebp
c00283c5:	c3                   	ret    

c00283c6 <__floatunsidf>:
c00283c6:	55                   	push   ebp
c00283c7:	89 e5                	mov    ebp,esp
c00283c9:	56                   	push   esi
c00283ca:	53                   	push   ebx
c00283cb:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00283ce:	85 db                	test   ebx,ebx
c00283d0:	74 2a                	je     c00283fc <__floatunsidf+0x36>
c00283d2:	0f bd cb             	bsr    ecx,ebx
c00283d5:	83 f1 1f             	xor    ecx,0x1f
c00283d8:	d3 e3                	shl    ebx,cl
c00283da:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00283e0:	b8 1e 04 00 00       	mov    eax,0x41e
c00283e5:	29 c8                	sub    eax,ecx
c00283e7:	c1 e0 14             	shl    eax,0x14
c00283ea:	89 c1                	mov    ecx,eax
c00283ec:	89 de                	mov    esi,ebx
c00283ee:	c1 ee 0b             	shr    esi,0xb
c00283f1:	09 f1                	or     ecx,esi
c00283f3:	89 ca                	mov    edx,ecx
c00283f5:	c1 e3 15             	shl    ebx,0x15
c00283f8:	89 d8                	mov    eax,ebx
c00283fa:	eb 04                	jmp    c0028400 <__floatunsidf+0x3a>
c00283fc:	31 c0                	xor    eax,eax
c00283fe:	31 d2                	xor    edx,edx
c0028400:	5b                   	pop    ebx
c0028401:	5e                   	pop    esi
c0028402:	5d                   	pop    ebp
c0028403:	c3                   	ret    

c0028404 <__fixdfsi>:
c0028404:	55                   	push   ebp
c0028405:	89 e5                	mov    ebp,esp
c0028407:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002840a:	89 d1                	mov    ecx,edx
c002840c:	c1 e1 0b             	shl    ecx,0xb
c002840f:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028415:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028418:	c1 e8 15             	shr    eax,0x15
c002841b:	09 c1                	or     ecx,eax
c002841d:	c1 fa 14             	sar    edx,0x14
c0028420:	78 1f                	js     c0028441 <__fixdfsi+0x3d>
c0028422:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028428:	31 c0                	xor    eax,eax
c002842a:	83 fa 1e             	cmp    edx,0x1e
c002842d:	77 40                	ja     c002846f <__fixdfsi+0x6b>
c002842f:	89 c8                	mov    eax,ecx
c0028431:	0d 00 00 00 80       	or     eax,0x80000000
c0028436:	b9 1f 00 00 00       	mov    ecx,0x1f
c002843b:	29 d1                	sub    ecx,edx
c002843d:	d3 e8                	shr    eax,cl
c002843f:	eb 2e                	jmp    c002846f <__fixdfsi+0x6b>
c0028441:	31 c0                	xor    eax,eax
c0028443:	81 c2 01 04 00 00    	add    edx,0x401
c0028449:	78 24                	js     c002846f <__fixdfsi+0x6b>
c002844b:	83 fa 1e             	cmp    edx,0x1e
c002844e:	7e 09                	jle    c0028459 <__fixdfsi+0x55>
c0028450:	83 fa 1f             	cmp    edx,0x1f
c0028453:	75 18                	jne    c002846d <__fixdfsi+0x69>
c0028455:	85 c9                	test   ecx,ecx
c0028457:	75 14                	jne    c002846d <__fixdfsi+0x69>
c0028459:	89 c8                	mov    eax,ecx
c002845b:	0d 00 00 00 80       	or     eax,0x80000000
c0028460:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028465:	29 d1                	sub    ecx,edx
c0028467:	d3 e8                	shr    eax,cl
c0028469:	f7 d8                	neg    eax
c002846b:	eb 02                	jmp    c002846f <__fixdfsi+0x6b>
c002846d:	31 c0                	xor    eax,eax
c002846f:	5d                   	pop    ebp
c0028470:	c3                   	ret    

c0028471 <__fixunsdfsi>:
c0028471:	55                   	push   ebp
c0028472:	89 e5                	mov    ebp,esp
c0028474:	53                   	push   ebx
c0028475:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028478:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002847b:	89 d3                	mov    ebx,edx
c002847d:	c1 fb 14             	sar    ebx,0x14
c0028480:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028486:	31 c0                	xor    eax,eax
c0028488:	83 fb 1f             	cmp    ebx,0x1f
c002848b:	77 1d                	ja     c00284aa <__fixunsdfsi+0x39>
c002848d:	89 d0                	mov    eax,edx
c002848f:	c1 e0 0b             	shl    eax,0xb
c0028492:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028497:	c1 e9 15             	shr    ecx,0x15
c002849a:	09 c8                	or     eax,ecx
c002849c:	0d 00 00 00 80       	or     eax,0x80000000
c00284a1:	b9 1f 00 00 00       	mov    ecx,0x1f
c00284a6:	29 d9                	sub    ecx,ebx
c00284a8:	d3 e8                	shr    eax,cl
c00284aa:	5b                   	pop    ebx
c00284ab:	5d                   	pop    ebp
c00284ac:	c3                   	ret    

c00284ad <__cmpdf2>:
c00284ad:	55                   	push   ebp
c00284ae:	89 e5                	mov    ebp,esp
c00284b0:	57                   	push   edi
c00284b1:	56                   	push   esi
c00284b2:	53                   	push   ebx
c00284b3:	83 ec 0c             	sub    esp,0xc
c00284b6:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00284b9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00284bc:	89 ca                	mov    edx,ecx
c00284be:	c1 ea 14             	shr    edx,0x14
c00284c1:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00284c7:	89 cb                	mov    ebx,ecx
c00284c9:	c1 fb 1f             	sar    ebx,0x1f
c00284cc:	31 da                	xor    edx,ebx
c00284ce:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00284d1:	89 df                	mov    edi,ebx
c00284d3:	c1 e7 0b             	shl    edi,0xb
c00284d6:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00284d9:	c1 e1 0b             	shl    ecx,0xb
c00284dc:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00284e2:	c1 eb 15             	shr    ebx,0x15
c00284e5:	09 d9                	or     ecx,ebx
c00284e7:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c00284ea:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00284ed:	89 ce                	mov    esi,ecx
c00284ef:	c1 ee 14             	shr    esi,0x14
c00284f2:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00284f8:	89 cb                	mov    ebx,ecx
c00284fa:	c1 fb 1f             	sar    ebx,0x1f
c00284fd:	31 de                	xor    esi,ebx
c00284ff:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0028502:	89 df                	mov    edi,ebx
c0028504:	c1 e7 0b             	shl    edi,0xb
c0028507:	c1 e1 0b             	shl    ecx,0xb
c002850a:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028510:	c1 eb 15             	shr    ebx,0x15
c0028513:	09 d9                	or     ecx,ebx
c0028515:	89 d3                	mov    ebx,edx
c0028517:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002851d:	43                   	inc    ebx
c002851e:	83 fb 01             	cmp    ebx,0x1
c0028521:	77 08                	ja     c002852b <__cmpdf2+0x7e>
c0028523:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028526:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028529:	75 68                	jne    c0028593 <__cmpdf2+0xe6>
c002852b:	89 f3                	mov    ebx,esi
c002852d:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028533:	43                   	inc    ebx
c0028534:	83 fb 01             	cmp    ebx,0x1
c0028537:	77 06                	ja     c002853f <__cmpdf2+0x92>
c0028539:	89 fb                	mov    ebx,edi
c002853b:	09 cb                	or     ebx,ecx
c002853d:	75 54                	jne    c0028593 <__cmpdf2+0xe6>
c002853f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028542:	09 f8                	or     eax,edi
c0028544:	09 c8                	or     eax,ecx
c0028546:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028549:	75 12                	jne    c002855d <__cmpdf2+0xb0>
c002854b:	8d 42 01             	lea    eax,[edx+0x1]
c002854e:	83 f8 01             	cmp    eax,0x1
c0028551:	77 0a                	ja     c002855d <__cmpdf2+0xb0>
c0028553:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028556:	31 c0                	xor    eax,eax
c0028558:	83 fb 01             	cmp    ebx,0x1
c002855b:	76 36                	jbe    c0028593 <__cmpdf2+0xe6>
c002855d:	b8 01 00 00 00       	mov    eax,0x1
c0028562:	39 f2                	cmp    edx,esi
c0028564:	7f 2d                	jg     c0028593 <__cmpdf2+0xe6>
c0028566:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002856b:	7c 26                	jl     c0028593 <__cmpdf2+0xe6>
c002856d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028570:	77 07                	ja     c0028579 <__cmpdf2+0xcc>
c0028572:	72 16                	jb     c002858a <__cmpdf2+0xdd>
c0028574:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028577:	76 0a                	jbe    c0028583 <__cmpdf2+0xd6>
c0028579:	89 d0                	mov    eax,edx
c002857b:	c1 f8 1f             	sar    eax,0x1f
c002857e:	83 c8 01             	or     eax,0x1
c0028581:	eb 10                	jmp    c0028593 <__cmpdf2+0xe6>
c0028583:	b8 00 00 00 00       	mov    eax,0x0
c0028588:	73 09                	jae    c0028593 <__cmpdf2+0xe6>
c002858a:	89 d0                	mov    eax,edx
c002858c:	c1 f8 1f             	sar    eax,0x1f
c002858f:	83 e0 02             	and    eax,0x2
c0028592:	48                   	dec    eax
c0028593:	83 c4 0c             	add    esp,0xc
c0028596:	5b                   	pop    ebx
c0028597:	5e                   	pop    esi
c0028598:	5f                   	pop    edi
c0028599:	5d                   	pop    ebp
c002859a:	c3                   	ret    

c002859b <__eqdf2>:
c002859b:	55                   	push   ebp
c002859c:	89 e5                	mov    ebp,esp
c002859e:	50                   	push   eax
c002859f:	6a 01                	push   0x1
c00285a1:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00285a4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00285a7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00285aa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00285ad:	e8 fb fe ff ff       	call   c00284ad <__cmpdf2>
c00285b2:	83 c4 18             	add    esp,0x18
c00285b5:	c9                   	leave  
c00285b6:	c3                   	ret    

c00285b7 <__nedf2>:
c00285b7:	eb e2                	jmp    c002859b <__eqdf2>

c00285b9 <__gtdf2>:
c00285b9:	55                   	push   ebp
c00285ba:	89 e5                	mov    ebp,esp
c00285bc:	50                   	push   eax
c00285bd:	6a ff                	push   0xffffffff
c00285bf:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00285c2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00285c5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00285c8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00285cb:	e8 dd fe ff ff       	call   c00284ad <__cmpdf2>
c00285d0:	83 c4 18             	add    esp,0x18
c00285d3:	c9                   	leave  
c00285d4:	c3                   	ret    

c00285d5 <__gedf2>:
c00285d5:	eb e2                	jmp    c00285b9 <__gtdf2>

c00285d7 <__ltdf2>:
c00285d7:	eb c2                	jmp    c002859b <__eqdf2>

c00285d9 <__ledf2>:
c00285d9:	eb c0                	jmp    c002859b <__eqdf2>

c00285db <__truncdfsf2>:
c00285db:	55                   	push   ebp
c00285dc:	89 e5                	mov    ebp,esp
c00285de:	57                   	push   edi
c00285df:	56                   	push   esi
c00285e0:	53                   	push   ebx
c00285e1:	83 ec 0c             	sub    esp,0xc
c00285e4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00285e7:	89 d1                	mov    ecx,edx
c00285e9:	c1 f9 14             	sar    ecx,0x14
c00285ec:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00285ef:	89 df                	mov    edi,ebx
c00285f1:	c1 e7 0b             	shl    edi,0xb
c00285f4:	89 d0                	mov    eax,edx
c00285f6:	c1 e0 0b             	shl    eax,0xb
c00285f9:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00285fe:	c1 eb 15             	shr    ebx,0x15
c0028601:	09 d8                	or     eax,ebx
c0028603:	89 cb                	mov    ebx,ecx
c0028605:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002860b:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028611:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028617:	0f 86 9e 00 00 00    	jbe    c00286bb <__truncdfsf2+0xe0>
c002861d:	85 db                	test   ebx,ebx
c002861f:	75 0a                	jne    c002862b <__truncdfsf2+0x50>
c0028621:	c1 fa 17             	sar    edx,0x17
c0028624:	30 d2                	xor    dl,dl
c0028626:	e9 84 00 00 00       	jmp    c00286af <__truncdfsf2+0xd4>
c002862b:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028631:	83 fe 83             	cmp    esi,0xffffff83
c0028634:	7d 4b                	jge    c0028681 <__truncdfsf2+0xa6>
c0028636:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c002863b:	29 f1                	sub    ecx,esi
c002863d:	83 f9 1f             	cmp    ecx,0x1f
c0028640:	7f 6b                	jg     c00286ad <__truncdfsf2+0xd2>
c0028642:	0d 00 00 00 80       	or     eax,0x80000000
c0028647:	89 c3                	mov    ebx,eax
c0028649:	d3 eb                	shr    ebx,cl
c002864b:	be 01 00 00 00       	mov    esi,0x1
c0028650:	d3 e6                	shl    esi,cl
c0028652:	4e                   	dec    esi
c0028653:	21 f0                	and    eax,esi
c0028655:	09 f8                	or     eax,edi
c0028657:	0f 95 c0             	setne  al
c002865a:	0f b6 c0             	movzx  eax,al
c002865d:	09 c3                	or     ebx,eax
c002865f:	89 d9                	mov    ecx,ebx
c0028661:	c1 e9 08             	shr    ecx,0x8
c0028664:	f6 c3 7f             	test   bl,0x7f
c0028667:	0f 95 c0             	setne  al
c002866a:	09 c8                	or     eax,ecx
c002866c:	83 e0 01             	and    eax,0x1
c002866f:	c1 eb 07             	shr    ebx,0x7
c0028672:	21 c3                	and    ebx,eax
c0028674:	81 e2 00 00 00 80    	and    edx,0x80000000
c002867a:	09 d1                	or     ecx,edx
c002867c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c002867f:	eb 76                	jmp    c00286f7 <__truncdfsf2+0x11c>
c0028681:	83 c6 80             	add    esi,0xffffff80
c0028684:	7e 1d                	jle    c00286a3 <__truncdfsf2+0xc8>
c0028686:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c002868c:	75 0b                	jne    c0028699 <__truncdfsf2+0xbe>
c002868e:	09 f8                	or     eax,edi
c0028690:	74 09                	je     c002869b <__truncdfsf2+0xc0>
c0028692:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0028697:	eb 02                	jmp    c002869b <__truncdfsf2+0xc0>
c0028699:	31 c0                	xor    eax,eax
c002869b:	c1 fa 17             	sar    edx,0x17
c002869e:	80 ca ff             	or     dl,0xff
c00286a1:	eb 0e                	jmp    c00286b1 <__truncdfsf2+0xd6>
c00286a3:	c1 fa 1f             	sar    edx,0x1f
c00286a6:	c1 e2 08             	shl    edx,0x8
c00286a9:	09 ca                	or     edx,ecx
c00286ab:	eb 04                	jmp    c00286b1 <__truncdfsf2+0xd6>
c00286ad:	31 d2                	xor    edx,edx
c00286af:	31 c0                	xor    eax,eax
c00286b1:	c1 e2 17             	shl    edx,0x17
c00286b4:	c1 e8 08             	shr    eax,0x8
c00286b7:	09 d0                	or     eax,edx
c00286b9:	eb 3c                	jmp    c00286f7 <__truncdfsf2+0x11c>
c00286bb:	81 e9 80 03 00 00    	sub    ecx,0x380
c00286c1:	89 ca                	mov    edx,ecx
c00286c3:	c1 fa 0b             	sar    edx,0xb
c00286c6:	c1 e2 08             	shl    edx,0x8
c00286c9:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00286cc:	31 db                	xor    ebx,ebx
c00286ce:	85 ff                	test   edi,edi
c00286d0:	0f 95 c3             	setne  bl
c00286d3:	09 d8                	or     eax,ebx
c00286d5:	89 c3                	mov    ebx,eax
c00286d7:	c1 eb 08             	shr    ebx,0x8
c00286da:	a8 7f                	test   al,0x7f
c00286dc:	0f 95 c2             	setne  dl
c00286df:	89 d6                	mov    esi,edx
c00286e1:	09 de                	or     esi,ebx
c00286e3:	83 e6 01             	and    esi,0x1
c00286e6:	c1 e8 07             	shr    eax,0x7
c00286e9:	21 f0                	and    eax,esi
c00286eb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00286ee:	09 ca                	or     edx,ecx
c00286f0:	c1 e2 17             	shl    edx,0x17
c00286f3:	09 da                	or     edx,ebx
c00286f5:	01 d0                	add    eax,edx
c00286f7:	83 c4 0c             	add    esp,0xc
c00286fa:	5b                   	pop    ebx
c00286fb:	5e                   	pop    esi
c00286fc:	5f                   	pop    edi
c00286fd:	5d                   	pop    ebp
c00286fe:	c3                   	ret    

c00286ff <__extendsfdf2>:
c00286ff:	55                   	push   ebp
c0028700:	89 e5                	mov    ebp,esp
c0028702:	57                   	push   edi
c0028703:	56                   	push   esi
c0028704:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028707:	89 d1                	mov    ecx,edx
c0028709:	c1 f9 17             	sar    ecx,0x17
c002870c:	c1 e2 08             	shl    edx,0x8
c002870f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0028715:	89 c8                	mov    eax,ecx
c0028717:	80 e4 f8             	and    ah,0xf8
c002871a:	8d 71 01             	lea    esi,[ecx+0x1]
c002871d:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028723:	75 27                	jne    c002874c <__extendsfdf2+0x4d>
c0028725:	81 e1 ff 00 00 00    	and    ecx,0xff
c002872b:	75 18                	jne    c0028745 <__extendsfdf2+0x46>
c002872d:	85 d2                	test   edx,edx
c002872f:	74 20                	je     c0028751 <__extendsfdf2+0x52>
c0028731:	41                   	inc    ecx
c0028732:	01 d2                	add    edx,edx
c0028734:	79 fb                	jns    c0028731 <__extendsfdf2+0x32>
c0028736:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002873c:	29 c8                	sub    eax,ecx
c002873e:	05 81 03 00 00       	add    eax,0x381
c0028743:	eb 0c                	jmp    c0028751 <__extendsfdf2+0x52>
c0028745:	05 00 07 00 00       	add    eax,0x700
c002874a:	eb 05                	jmp    c0028751 <__extendsfdf2+0x52>
c002874c:	05 80 03 00 00       	add    eax,0x380
c0028751:	c1 e0 14             	shl    eax,0x14
c0028754:	89 c1                	mov    ecx,eax
c0028756:	89 d0                	mov    eax,edx
c0028758:	c1 e8 0b             	shr    eax,0xb
c002875b:	09 c1                	or     ecx,eax
c002875d:	c1 e2 15             	shl    edx,0x15
c0028760:	89 d0                	mov    eax,edx
c0028762:	89 ca                	mov    edx,ecx
c0028764:	5e                   	pop    esi
c0028765:	5f                   	pop    edi
c0028766:	5d                   	pop    ebp
c0028767:	c3                   	ret    
c0028768:	66 90                	xchg   ax,ax
c002876a:	66 90                	xchg   ax,ax
c002876c:	66 90                	xchg   ax,ax
c002876e:	66 90                	xchg   ax,ax

c0028770 <fabs>:
c0028770:	83 ec 0c             	sub    esp,0xc
c0028773:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028777:	89 04 24             	mov    DWORD PTR [esp],eax
c002877a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002877e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028783:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028787:	dd 04 24             	fld    QWORD PTR [esp]
c002878a:	83 c4 0c             	add    esp,0xc
c002878d:	c3                   	ret    
c002878e:	66 90                	xchg   ax,ax

c0028790 <lrint>:
c0028790:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028794:	83 ec 04             	sub    esp,0x4
c0028797:	db 1c 24             	fistp  DWORD PTR [esp]
c002879a:	58                   	pop    eax
c002879b:	c3                   	ret    

c002879c <lrintf>:
c002879c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c00287a0:	83 ec 04             	sub    esp,0x4
c00287a3:	db 1c 24             	fistp  DWORD PTR [esp]
c00287a6:	58                   	pop    eax
c00287a7:	c3                   	ret    

Disassembly of section .init:

c00287a8 <_init>:
c00287a8:	55                   	push   ebp
c00287a9:	89 e5                	mov    ebp,esp
c00287ab:	e8 68 79 fd ff       	call   c0000118 <frame_dummy>
c00287b0:	e8 5b e0 ff ff       	call   c0026810 <__do_global_ctors_aux>
c00287b5:	5d                   	pop    ebp
c00287b6:	c3                   	ret    

Disassembly of section .fini:

c00287b7 <_fini>:
c00287b7:	55                   	push   ebp
c00287b8:	89 e5                	mov    ebp,esp
c00287ba:	e8 e9 78 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00287bf:	5d                   	pop    ebp
c00287c0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00287c2 <Computer::~Computer()>:
c00287c2:	83 ec 0c             	sub    esp,0xc
c00287c5:	ba 08 a3 02 c0       	mov    edx,0xc002a308
c00287ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287ce:	89 10                	mov    DWORD PTR [eax],edx
c00287d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287d4:	83 ec 0c             	sub    esp,0xc
c00287d7:	50                   	push   eax
c00287d8:	e8 29 ba fe ff       	call   c0014206 <Device::~Device()>
c00287dd:	83 c4 10             	add    esp,0x10
c00287e0:	90                   	nop
c00287e1:	83 c4 0c             	add    esp,0xc
c00287e4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00287e6 <Computer::~Computer()>:
c00287e6:	83 ec 0c             	sub    esp,0xc
c00287e9:	83 ec 0c             	sub    esp,0xc
c00287ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00287f0:	e8 cd ff ff ff       	call   c00287c2 <Computer::~Computer()>
c00287f5:	83 c4 10             	add    esp,0x10
c00287f8:	83 ec 08             	sub    esp,0x8
c00287fb:	68 ec 01 00 00       	push   0x1ec
c0028800:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028804:	e8 1e a6 fe ff       	call   c0012e27 <operator delete(void*, unsigned long)>
c0028809:	83 c4 10             	add    esp,0x10
c002880c:	83 c4 0c             	add    esp,0xc
c002880f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028810 <idleCommon()>:
c0028810:	83 ec 0c             	sub    esp,0xc
c0028813:	e8 08 56 ff ff       	call   c001de20 <lockScheduler()>
c0028818:	e8 79 59 ff ff       	call   c001e196 <schedule()>
c002881d:	83 c4 0c             	add    esp,0xc
c0028820:	e9 fd 55 ff ff       	jmp    c001de22 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028826 <LinkedList<UnixFile>::~LinkedList()>:
c0028826:	90                   	nop
c0028827:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028828 <LinkedList<UnixFile>::LinkedList()>:
c0028828:	83 ec 0c             	sub    esp,0xc
c002882b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002882f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028839:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028844:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002884b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002884f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028855:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028859:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028864:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002886b:	83 ec 0c             	sub    esp,0xc
c002886e:	68 c6 a5 02 c0       	push   0xc002a5c6
c0028873:	e8 8f a6 fe ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0028878:	83 c4 10             	add    esp,0x10
c002887b:	90                   	nop
c002887c:	83 c4 0c             	add    esp,0xc
c002887f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028880 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028880:	83 ec 0c             	sub    esp,0xc
c0028883:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028888:	75 10                	jne    c002889a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002888a:	83 ec 0c             	sub    esp,0xc
c002888d:	68 e0 a5 02 c0       	push   0xc002a5e0
c0028892:	e8 ae 1d ff ff       	call   c001a645 <Krnl::panic(char const*)>
c0028897:	83 c4 10             	add    esp,0x10
c002889a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002889e:	8b 00                	mov    eax,DWORD PTR [eax]
c00288a0:	85 c0                	test   eax,eax
c00288a2:	74 34                	je     c00288d8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00288a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288ab:	85 c0                	test   eax,eax
c00288ad:	74 29                	je     c00288d8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00288af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288b3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288b6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288ba:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00288bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288c1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288c5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00288c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288cf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00288d6:	eb 65                	jmp    c002893d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00288d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00288de:	85 c0                	test   eax,eax
c00288e0:	75 4b                	jne    c002892d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00288e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288e9:	85 c0                	test   eax,eax
c00288eb:	75 40                	jne    c002892d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00288ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288f1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288f5:	89 10                	mov    DWORD PTR [eax],edx
c00288f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288fb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288ff:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028902:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028906:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028909:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028914:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028917:	85 c0                	test   eax,eax
c0028919:	74 22                	je     c002893d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002891b:	83 ec 0c             	sub    esp,0xc
c002891e:	68 02 a6 02 c0       	push   0xc002a602
c0028923:	e8 1d 1d ff ff       	call   c001a645 <Krnl::panic(char const*)>
c0028928:	83 c4 10             	add    esp,0x10
c002892b:	eb 10                	jmp    c002893d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002892d:	83 ec 0c             	sub    esp,0xc
c0028930:	68 0c a6 02 c0       	push   0xc002a60c
c0028935:	e8 0b 1d ff ff       	call   c001a645 <Krnl::panic(char const*)>
c002893a:	83 c4 10             	add    esp,0x10
c002893d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028941:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028944:	8d 50 01             	lea    edx,[eax+0x1]
c0028947:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002894b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002894e:	90                   	nop
c002894f:	83 c4 0c             	add    esp,0xc
c0028952:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0028954 <LinkedList<UnixFile>::getFirstElement()>:
c0028954:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028958:	8b 00                	mov    eax,DWORD PTR [eax]
c002895a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002895c <LinkedList<UnixFile>::removeFirst()>:
c002895c:	83 ec 0c             	sub    esp,0xc
c002895f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028963:	8b 00                	mov    eax,DWORD PTR [eax]
c0028965:	85 c0                	test   eax,eax
c0028967:	75 12                	jne    c002897b <LinkedList<UnixFile>::removeFirst()+0x1f>
c0028969:	83 ec 0c             	sub    esp,0xc
c002896c:	68 18 a6 02 c0       	push   0xc002a618
c0028971:	e8 cf 1c ff ff       	call   c001a645 <Krnl::panic(char const*)>
c0028976:	83 c4 10             	add    esp,0x10
c0028979:	eb 7e                	jmp    c00289f9 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002897b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002897f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028982:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028985:	85 c0                	test   eax,eax
c0028987:	74 10                	je     c0028999 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0028989:	83 ec 0c             	sub    esp,0xc
c002898c:	68 63 a6 02 c0       	push   0xc002a663
c0028991:	e8 af 1c ff ff       	call   c001a645 <Krnl::panic(char const*)>
c0028996:	83 c4 10             	add    esp,0x10
c0028999:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002899d:	8b 00                	mov    eax,DWORD PTR [eax]
c002899f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289a2:	85 c0                	test   eax,eax
c00289a4:	75 33                	jne    c00289d9 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00289a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289aa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00289b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289b4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00289bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289bf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289c2:	83 f8 01             	cmp    eax,0x1
c00289c5:	74 21                	je     c00289e8 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00289c7:	83 ec 0c             	sub    esp,0xc
c00289ca:	68 3c a6 02 c0       	push   0xc002a63c
c00289cf:	e8 71 1c ff ff       	call   c001a645 <Krnl::panic(char const*)>
c00289d4:	83 c4 10             	add    esp,0x10
c00289d7:	eb 0f                	jmp    c00289e8 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00289d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00289df:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00289e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289e6:	89 10                	mov    DWORD PTR [eax],edx
c00289e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289ec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289ef:	8d 50 ff             	lea    edx,[eax-0x1]
c00289f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289f6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00289f9:	83 c4 0c             	add    esp,0xc
c00289fc:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00289fe <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00289fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028a02:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a05:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028a06 <DriverlessDevice::~DriverlessDevice()>:
c0028a06:	ba e4 ad 02 c0       	mov    edx,0xc002ade4
c0028a0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a0f:	89 10                	mov    DWORD PTR [eax],edx
c0028a11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a15:	50                   	push   eax
c0028a16:	e8 eb b7 fe ff       	call   c0014206 <Device::~Device()>
c0028a1b:	83 c4 04             	add    esp,0x4
c0028a1e:	90                   	nop
c0028a1f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028a20 <DriverlessDevice::~DriverlessDevice()>:
c0028a20:	83 ec 0c             	sub    esp,0xc
c0028a23:	83 ec 0c             	sub    esp,0xc
c0028a26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a2a:	e8 d7 ff ff ff       	call   c0028a06 <DriverlessDevice::~DriverlessDevice()>
c0028a2f:	83 c4 10             	add    esp,0x10
c0028a32:	83 ec 08             	sub    esp,0x8
c0028a35:	68 58 01 00 00       	push   0x158
c0028a3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a3e:	e8 e4 a3 fe ff       	call   c0012e27 <operator delete(void*, unsigned long)>
c0028a43:	83 c4 10             	add    esp,0x10
c0028a46:	83 c4 0c             	add    esp,0xc
c0028a49:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0028a4a <LinkedList<Device>::addElement(Device*)>:
c0028a4a:	83 ec 0c             	sub    esp,0xc
c0028a4d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028a52:	75 10                	jne    c0028a64 <LinkedList<Device>::addElement(Device*)+0x1a>
c0028a54:	83 ec 0c             	sub    esp,0xc
c0028a57:	68 e0 a5 02 c0       	push   0xc002a5e0
c0028a5c:	e8 e4 1b ff ff       	call   c001a645 <Krnl::panic(char const*)>
c0028a61:	83 c4 10             	add    esp,0x10
c0028a64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a68:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a6a:	85 c0                	test   eax,eax
c0028a6c:	74 3a                	je     c0028aa8 <LinkedList<Device>::addElement(Device*)+0x5e>
c0028a6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a72:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a75:	85 c0                	test   eax,eax
c0028a77:	74 2f                	je     c0028aa8 <LinkedList<Device>::addElement(Device*)+0x5e>
c0028a79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a7d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a80:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a84:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0028a8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a92:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028a95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a99:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a9c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028aa6:	eb 68                	jmp    c0028b10 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028aa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aac:	8b 00                	mov    eax,DWORD PTR [eax]
c0028aae:	85 c0                	test   eax,eax
c0028ab0:	75 4e                	jne    c0028b00 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028ab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ab6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ab9:	85 c0                	test   eax,eax
c0028abb:	75 43                	jne    c0028b00 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028abd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ac1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028ac5:	89 10                	mov    DWORD PTR [eax],edx
c0028ac7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028acb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028acf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028ad2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ad6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ad9:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028ae3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ae7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028aea:	85 c0                	test   eax,eax
c0028aec:	74 22                	je     c0028b10 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028aee:	83 ec 0c             	sub    esp,0xc
c0028af1:	68 02 a6 02 c0       	push   0xc002a602
c0028af6:	e8 4a 1b ff ff       	call   c001a645 <Krnl::panic(char const*)>
c0028afb:	83 c4 10             	add    esp,0x10
c0028afe:	eb 10                	jmp    c0028b10 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028b00:	83 ec 0c             	sub    esp,0xc
c0028b03:	68 0c a6 02 c0       	push   0xc002a60c
c0028b08:	e8 38 1b ff ff       	call   c001a645 <Krnl::panic(char const*)>
c0028b0d:	83 c4 10             	add    esp,0x10
c0028b10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b14:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b17:	8d 50 01             	lea    edx,[eax+0x1]
c0028b1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b1e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028b21:	90                   	nop
c0028b22:	83 c4 0c             	add    esp,0xc
c0028b25:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028b26 <LinkedList<Device>::LinkedList()>:
c0028b26:	83 ec 0c             	sub    esp,0xc
c0028b29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b2d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028b33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b37:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028b3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b42:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028b49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b4d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028b53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b57:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028b5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b62:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028b69:	83 ec 0c             	sub    esp,0xc
c0028b6c:	68 c6 a5 02 c0       	push   0xc002a5c6
c0028b71:	e8 91 a3 fe ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0028b76:	83 c4 10             	add    esp,0x10
c0028b79:	90                   	nop
c0028b7a:	83 c4 0c             	add    esp,0xc
c0028b7d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0028b7e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0028b7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b82:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b84:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028b86 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028b86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b8a:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b8c:	85 c0                	test   eax,eax
c0028b8e:	75 0e                	jne    c0028b9e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028b90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b94:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b97:	85 c0                	test   eax,eax
c0028b99:	75 03                	jne    c0028b9e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028b9b:	b0 01                	mov    al,0x1
c0028b9d:	c3                   	ret    
c0028b9e:	b0 00                	mov    al,0x0
c0028ba0:	90                   	nop
c0028ba1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028ba2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028ba2:	83 ec 0c             	sub    esp,0xc
c0028ba5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ba9:	8b 00                	mov    eax,DWORD PTR [eax]
c0028bab:	85 c0                	test   eax,eax
c0028bad:	75 15                	jne    c0028bc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0028baf:	83 ec 0c             	sub    esp,0xc
c0028bb2:	68 18 a6 02 c0       	push   0xc002a618
c0028bb7:	e8 89 1a ff ff       	call   c001a645 <Krnl::panic(char const*)>
c0028bbc:	83 c4 10             	add    esp,0x10
c0028bbf:	e9 88 00 00 00       	jmp    c0028c4c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028bc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028bcb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028bce:	85 c0                	test   eax,eax
c0028bd0:	0f 95 c0             	setne  al
c0028bd3:	84 c0                	test   al,al
c0028bd5:	74 10                	je     c0028be7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028bd7:	83 ec 0c             	sub    esp,0xc
c0028bda:	68 63 a6 02 c0       	push   0xc002a663
c0028bdf:	e8 61 1a ff ff       	call   c001a645 <Krnl::panic(char const*)>
c0028be4:	83 c4 10             	add    esp,0x10
c0028be7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028beb:	8b 00                	mov    eax,DWORD PTR [eax]
c0028bed:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028bf0:	85 c0                	test   eax,eax
c0028bf2:	0f 94 c0             	sete   al
c0028bf5:	84 c0                	test   al,al
c0028bf7:	74 33                	je     c0028c2c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028bf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bfd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028c03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c07:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028c0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c12:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c15:	83 f8 01             	cmp    eax,0x1
c0028c18:	74 21                	je     c0028c3b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028c1a:	83 ec 0c             	sub    esp,0xc
c0028c1d:	68 3c a6 02 c0       	push   0xc002a63c
c0028c22:	e8 1e 1a ff ff       	call   c001a645 <Krnl::panic(char const*)>
c0028c27:	83 c4 10             	add    esp,0x10
c0028c2a:	eb 0f                	jmp    c0028c3b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028c2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c30:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c32:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028c35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c39:	89 10                	mov    DWORD PTR [eax],edx
c0028c3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c3f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c42:	8d 50 ff             	lea    edx,[eax-0x1]
c0028c45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c49:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028c4c:	83 c4 0c             	add    esp,0xc
c0028c4f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028c50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028c50:	83 ec 0c             	sub    esp,0xc
c0028c53:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028c58:	75 10                	jne    c0028c6a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028c5a:	83 ec 0c             	sub    esp,0xc
c0028c5d:	68 e0 a5 02 c0       	push   0xc002a5e0
c0028c62:	e8 de 19 ff ff       	call   c001a645 <Krnl::panic(char const*)>
c0028c67:	83 c4 10             	add    esp,0x10
c0028c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c70:	85 c0                	test   eax,eax
c0028c72:	74 34                	je     c0028ca8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028c74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c7b:	85 c0                	test   eax,eax
c0028c7d:	74 29                	je     c0028ca8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028c7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c83:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c86:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c8a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028c8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c95:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028c98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c9f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028ca6:	eb 65                	jmp    c0028d0d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028ca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cac:	8b 00                	mov    eax,DWORD PTR [eax]
c0028cae:	85 c0                	test   eax,eax
c0028cb0:	75 4b                	jne    c0028cfd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028cb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cb6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028cb9:	85 c0                	test   eax,eax
c0028cbb:	75 40                	jne    c0028cfd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028cbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cc1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028cc5:	89 10                	mov    DWORD PTR [eax],edx
c0028cc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ccb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028ccf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cd6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028cd9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ce4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ce7:	85 c0                	test   eax,eax
c0028ce9:	74 22                	je     c0028d0d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028ceb:	83 ec 0c             	sub    esp,0xc
c0028cee:	68 02 a6 02 c0       	push   0xc002a602
c0028cf3:	e8 4d 19 ff ff       	call   c001a645 <Krnl::panic(char const*)>
c0028cf8:	83 c4 10             	add    esp,0x10
c0028cfb:	eb 10                	jmp    c0028d0d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028cfd:	83 ec 0c             	sub    esp,0xc
c0028d00:	68 0c a6 02 c0       	push   0xc002a60c
c0028d05:	e8 3b 19 ff ff       	call   c001a645 <Krnl::panic(char const*)>
c0028d0a:	83 c4 10             	add    esp,0x10
c0028d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d11:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028d14:	8d 50 01             	lea    edx,[eax+0x1]
c0028d17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d1b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028d1e:	90                   	nop
c0028d1f:	83 c4 0c             	add    esp,0xc
c0028d22:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028d24 <ACPI::~ACPI()>:
c0028d24:	83 ec 0c             	sub    esp,0xc
c0028d27:	ba 5c b7 02 c0       	mov    edx,0xc002b75c
c0028d2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d30:	89 10                	mov    DWORD PTR [eax],edx
c0028d32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d36:	83 ec 0c             	sub    esp,0xc
c0028d39:	50                   	push   eax
c0028d3a:	e8 c7 b4 fe ff       	call   c0014206 <Device::~Device()>
c0028d3f:	83 c4 10             	add    esp,0x10
c0028d42:	90                   	nop
c0028d43:	83 c4 0c             	add    esp,0xc
c0028d46:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028d48 <ACPI::~ACPI()>:
c0028d48:	83 ec 0c             	sub    esp,0xc
c0028d4b:	83 ec 0c             	sub    esp,0xc
c0028d4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d52:	e8 cd ff ff ff       	call   c0028d24 <ACPI::~ACPI()>
c0028d57:	83 c4 10             	add    esp,0x10
c0028d5a:	83 ec 08             	sub    esp,0x8
c0028d5d:	68 68 12 00 00       	push   0x1268
c0028d62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d66:	e8 bc a0 fe ff       	call   c0012e27 <operator delete(void*, unsigned long)>
c0028d6b:	83 c4 10             	add    esp,0x10
c0028d6e:	83 c4 0c             	add    esp,0xc
c0028d71:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028d72 <CPU::~CPU()>:
c0028d72:	83 ec 0c             	sub    esp,0xc
c0028d75:	ba 4c bb 02 c0       	mov    edx,0xc002bb4c
c0028d7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d7e:	89 10                	mov    DWORD PTR [eax],edx
c0028d80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d84:	83 ec 0c             	sub    esp,0xc
c0028d87:	50                   	push   eax
c0028d88:	e8 79 b4 fe ff       	call   c0014206 <Device::~Device()>
c0028d8d:	83 c4 10             	add    esp,0x10
c0028d90:	90                   	nop
c0028d91:	83 c4 0c             	add    esp,0xc
c0028d94:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028d96 <CPU::~CPU()>:
c0028d96:	83 ec 0c             	sub    esp,0xc
c0028d99:	83 ec 0c             	sub    esp,0xc
c0028d9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028da0:	e8 cd ff ff ff       	call   c0028d72 <CPU::~CPU()>
c0028da5:	83 c4 10             	add    esp,0x10
c0028da8:	83 ec 08             	sub    esp,0x8
c0028dab:	68 98 11 00 00       	push   0x1198
c0028db0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028db4:	e8 6e a0 fe ff       	call   c0012e27 <operator delete(void*, unsigned long)>
c0028db9:	83 c4 10             	add    esp,0x10
c0028dbc:	83 c4 0c             	add    esp,0xc
c0028dbf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028dc0 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028dc0:	90                   	nop
c0028dc1:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028dc2 <ThreadControlBlock::ThreadControlBlock()>:
c0028dc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028dc6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028dcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028dd1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028dd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ddc:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028de3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028de7:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028dee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028df2:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0028df9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028dfd:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028e01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e05:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028e09:	90                   	nop
c0028e0a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028e0c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028e0c:	83 ec 0c             	sub    esp,0xc
c0028e0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e13:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028e19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e1d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028e24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e28:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028e2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e33:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028e39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e3d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028e44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e48:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028e4f:	83 ec 0c             	sub    esp,0xc
c0028e52:	68 c6 a5 02 c0       	push   0xc002a5c6
c0028e57:	e8 ab a0 fe ff       	call   c0012f07 <Dbg::kprintf(char const*, ...)>
c0028e5c:	83 c4 10             	add    esp,0x10
c0028e5f:	90                   	nop
c0028e60:	83 c4 0c             	add    esp,0xc
c0028e63:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028e64 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028e64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028e68:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028e6b:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028e6c <Vm::_FPUState::_FPUState()>:
c0028e6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e70:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028e77:	90                   	nop
c0028e78:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028e7a <PCI::~PCI()>:
c0028e7a:	83 ec 0c             	sub    esp,0xc
c0028e7d:	ba 0c cc 02 c0       	mov    edx,0xc002cc0c
c0028e82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e86:	89 10                	mov    DWORD PTR [eax],edx
c0028e88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e8c:	83 ec 0c             	sub    esp,0xc
c0028e8f:	50                   	push   eax
c0028e90:	e8 49 ad fe ff       	call   c0013bde <Bus::~Bus()>
c0028e95:	83 c4 10             	add    esp,0x10
c0028e98:	90                   	nop
c0028e99:	83 c4 0c             	add    esp,0xc
c0028e9c:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028e9e <PCI::~PCI()>:
c0028e9e:	83 ec 0c             	sub    esp,0xc
c0028ea1:	83 ec 0c             	sub    esp,0xc
c0028ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ea8:	e8 cd ff ff ff       	call   c0028e7a <PCI::~PCI()>
c0028ead:	83 c4 10             	add    esp,0x10
c0028eb0:	83 ec 08             	sub    esp,0x8
c0028eb3:	68 58 01 00 00       	push   0x158
c0028eb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ebc:	e8 66 9f fe ff       	call   c0012e27 <operator delete(void*, unsigned long)>
c0028ec1:	83 c4 10             	add    esp,0x10
c0028ec4:	83 c4 0c             	add    esp,0xc
c0028ec7:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028ec8 <IDE::~IDE()>:
c0028ec8:	83 ec 0c             	sub    esp,0xc
c0028ecb:	ba 70 ce 02 c0       	mov    edx,0xc002ce70
c0028ed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ed4:	89 10                	mov    DWORD PTR [eax],edx
c0028ed6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eda:	83 ec 0c             	sub    esp,0xc
c0028edd:	50                   	push   eax
c0028ede:	e8 13 b8 fe ff       	call   c00146f6 <HardDiskController::~HardDiskController()>
c0028ee3:	83 c4 10             	add    esp,0x10
c0028ee6:	90                   	nop
c0028ee7:	83 c4 0c             	add    esp,0xc
c0028eea:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028eec <IDE::~IDE()>:
c0028eec:	83 ec 0c             	sub    esp,0xc
c0028eef:	83 ec 0c             	sub    esp,0xc
c0028ef2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ef6:	e8 cd ff ff ff       	call   c0028ec8 <IDE::~IDE()>
c0028efb:	83 c4 10             	add    esp,0x10
c0028efe:	83 ec 08             	sub    esp,0x8
c0028f01:	68 70 02 00 00       	push   0x270
c0028f06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f0a:	e8 18 9f fe ff       	call   c0012e27 <operator delete(void*, unsigned long)>
c0028f0f:	83 c4 10             	add    esp,0x10
c0028f12:	83 c4 0c             	add    esp,0xc
c0028f15:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028f16 <SATABus::~SATABus()>:
c0028f16:	83 ec 0c             	sub    esp,0xc
c0028f19:	ba 50 cf 02 c0       	mov    edx,0xc002cf50
c0028f1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f22:	89 10                	mov    DWORD PTR [eax],edx
c0028f24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f28:	83 ec 0c             	sub    esp,0xc
c0028f2b:	50                   	push   eax
c0028f2c:	e8 c5 b7 fe ff       	call   c00146f6 <HardDiskController::~HardDiskController()>
c0028f31:	83 c4 10             	add    esp,0x10
c0028f34:	90                   	nop
c0028f35:	83 c4 0c             	add    esp,0xc
c0028f38:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028f3a <SATABus::~SATABus()>:
c0028f3a:	83 ec 0c             	sub    esp,0xc
c0028f3d:	83 ec 0c             	sub    esp,0xc
c0028f40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f44:	e8 cd ff ff ff       	call   c0028f16 <SATABus::~SATABus()>
c0028f49:	83 c4 10             	add    esp,0x10
c0028f4c:	83 ec 08             	sub    esp,0x8
c0028f4f:	68 64 01 00 00       	push   0x164
c0028f54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f58:	e8 ca 9e fe ff       	call   c0012e27 <operator delete(void*, unsigned long)>
c0028f5d:	83 c4 10             	add    esp,0x10
c0028f60:	83 c4 0c             	add    esp,0xc
c0028f63:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028f64 <ATA::~ATA()>:
c0028f64:	83 ec 0c             	sub    esp,0xc
c0028f67:	ba 9c cf 02 c0       	mov    edx,0xc002cf9c
c0028f6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f70:	89 10                	mov    DWORD PTR [eax],edx
c0028f72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f76:	83 ec 0c             	sub    esp,0xc
c0028f79:	50                   	push   eax
c0028f7a:	e8 69 b8 fe ff       	call   c00147e8 <PhysicalDisk::~PhysicalDisk()>
c0028f7f:	83 c4 10             	add    esp,0x10
c0028f82:	90                   	nop
c0028f83:	83 c4 0c             	add    esp,0xc
c0028f86:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028f88 <ATA::~ATA()>:
c0028f88:	83 ec 0c             	sub    esp,0xc
c0028f8b:	83 ec 0c             	sub    esp,0xc
c0028f8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f92:	e8 cd ff ff ff       	call   c0028f64 <ATA::~ATA()>
c0028f97:	83 c4 10             	add    esp,0x10
c0028f9a:	83 ec 08             	sub    esp,0x8
c0028f9d:	68 7c 01 00 00       	push   0x17c
c0028fa2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fa6:	e8 7c 9e fe ff       	call   c0012e27 <operator delete(void*, unsigned long)>
c0028fab:	83 c4 10             	add    esp,0x10
c0028fae:	83 c4 0c             	add    esp,0xc
c0028fb1:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028fb2 <ATAPI::~ATAPI()>:
c0028fb2:	83 ec 0c             	sub    esp,0xc
c0028fb5:	ba d4 cf 02 c0       	mov    edx,0xc002cfd4
c0028fba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fbe:	89 10                	mov    DWORD PTR [eax],edx
c0028fc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fc4:	83 ec 0c             	sub    esp,0xc
c0028fc7:	50                   	push   eax
c0028fc8:	e8 1b b8 fe ff       	call   c00147e8 <PhysicalDisk::~PhysicalDisk()>
c0028fcd:	83 c4 10             	add    esp,0x10
c0028fd0:	90                   	nop
c0028fd1:	83 c4 0c             	add    esp,0xc
c0028fd4:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028fd6 <ATAPI::~ATAPI()>:
c0028fd6:	83 ec 0c             	sub    esp,0xc
c0028fd9:	83 ec 0c             	sub    esp,0xc
c0028fdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fe0:	e8 cd ff ff ff       	call   c0028fb2 <ATAPI::~ATAPI()>
c0028fe5:	83 c4 10             	add    esp,0x10
c0028fe8:	83 ec 08             	sub    esp,0x8
c0028feb:	68 80 01 00 00       	push   0x180
c0028ff0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ff4:	e8 2e 9e fe ff       	call   c0012e27 <operator delete(void*, unsigned long)>
c0028ff9:	83 c4 10             	add    esp,0x10
c0028ffc:	83 c4 0c             	add    esp,0xc
c0028fff:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0029000 <SATA::~SATA()>:
c0029000:	83 ec 0c             	sub    esp,0xc
c0029003:	ba 88 d0 02 c0       	mov    edx,0xc002d088
c0029008:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002900c:	89 10                	mov    DWORD PTR [eax],edx
c002900e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029012:	83 ec 0c             	sub    esp,0xc
c0029015:	50                   	push   eax
c0029016:	e8 cd b7 fe ff       	call   c00147e8 <PhysicalDisk::~PhysicalDisk()>
c002901b:	83 c4 10             	add    esp,0x10
c002901e:	90                   	nop
c002901f:	83 c4 0c             	add    esp,0xc
c0029022:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0029024 <SATA::~SATA()>:
c0029024:	83 ec 0c             	sub    esp,0xc
c0029027:	83 ec 0c             	sub    esp,0xc
c002902a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002902e:	e8 cd ff ff ff       	call   c0029000 <SATA::~SATA()>
c0029033:	83 c4 10             	add    esp,0x10
c0029036:	83 ec 08             	sub    esp,0x8
c0029039:	68 7c 01 00 00       	push   0x17c
c002903e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029042:	e8 e0 9d fe ff       	call   c0012e27 <operator delete(void*, unsigned long)>
c0029047:	83 c4 10             	add    esp,0x10
c002904a:	83 c4 0c             	add    esp,0xc
c002904d:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002904e <SATAPI::~SATAPI()>:
c002904e:	83 ec 0c             	sub    esp,0xc
c0029051:	ba 64 d1 02 c0       	mov    edx,0xc002d164
c0029056:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002905a:	89 10                	mov    DWORD PTR [eax],edx
c002905c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029060:	83 ec 0c             	sub    esp,0xc
c0029063:	50                   	push   eax
c0029064:	e8 7f b7 fe ff       	call   c00147e8 <PhysicalDisk::~PhysicalDisk()>
c0029069:	83 c4 10             	add    esp,0x10
c002906c:	90                   	nop
c002906d:	83 c4 0c             	add    esp,0xc
c0029070:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0029072 <SATAPI::~SATAPI()>:
c0029072:	83 ec 0c             	sub    esp,0xc
c0029075:	83 ec 0c             	sub    esp,0xc
c0029078:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002907c:	e8 cd ff ff ff       	call   c002904e <SATAPI::~SATAPI()>
c0029081:	83 c4 10             	add    esp,0x10
c0029084:	83 ec 08             	sub    esp,0x8
c0029087:	68 80 01 00 00       	push   0x180
c002908c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029090:	e8 92 9d fe ff       	call   c0012e27 <operator delete(void*, unsigned long)>
c0029095:	83 c4 10             	add    esp,0x10
c0029098:	83 c4 0c             	add    esp,0xc
c002909b:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c002909c <AVX::~AVX()>:
c002909c:	83 ec 0c             	sub    esp,0xc
c002909f:	ba a4 d1 02 c0       	mov    edx,0xc002d1a4
c00290a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290a8:	89 10                	mov    DWORD PTR [eax],edx
c00290aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290ae:	83 ec 0c             	sub    esp,0xc
c00290b1:	50                   	push   eax
c00290b2:	e8 b5 b7 fe ff       	call   c001486c <FPU::~FPU()>
c00290b7:	83 c4 10             	add    esp,0x10
c00290ba:	90                   	nop
c00290bb:	83 c4 0c             	add    esp,0xc
c00290be:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c00290c0 <AVX::~AVX()>:
c00290c0:	83 ec 0c             	sub    esp,0xc
c00290c3:	83 ec 0c             	sub    esp,0xc
c00290c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290ca:	e8 cd ff ff ff       	call   c002909c <AVX::~AVX()>
c00290cf:	83 c4 10             	add    esp,0x10
c00290d2:	83 ec 08             	sub    esp,0x8
c00290d5:	68 58 01 00 00       	push   0x158
c00290da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290de:	e8 44 9d fe ff       	call   c0012e27 <operator delete(void*, unsigned long)>
c00290e3:	83 c4 10             	add    esp,0x10
c00290e6:	83 c4 0c             	add    esp,0xc
c00290e9:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c00290ea <MMX::~MMX()>:
c00290ea:	83 ec 0c             	sub    esp,0xc
c00290ed:	ba e4 d1 02 c0       	mov    edx,0xc002d1e4
c00290f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290f6:	89 10                	mov    DWORD PTR [eax],edx
c00290f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290fc:	83 ec 0c             	sub    esp,0xc
c00290ff:	50                   	push   eax
c0029100:	e8 67 b7 fe ff       	call   c001486c <FPU::~FPU()>
c0029105:	83 c4 10             	add    esp,0x10
c0029108:	90                   	nop
c0029109:	83 c4 0c             	add    esp,0xc
c002910c:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c002910e <MMX::~MMX()>:
c002910e:	83 ec 0c             	sub    esp,0xc
c0029111:	83 ec 0c             	sub    esp,0xc
c0029114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029118:	e8 cd ff ff ff       	call   c00290ea <MMX::~MMX()>
c002911d:	83 c4 10             	add    esp,0x10
c0029120:	83 ec 08             	sub    esp,0x8
c0029123:	68 58 01 00 00       	push   0x158
c0029128:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002912c:	e8 f6 9c fe ff       	call   c0012e27 <operator delete(void*, unsigned long)>
c0029131:	83 c4 10             	add    esp,0x10
c0029134:	83 c4 0c             	add    esp,0xc
c0029137:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0029138 <SSE::~SSE()>:
c0029138:	83 ec 0c             	sub    esp,0xc
c002913b:	ba 24 d2 02 c0       	mov    edx,0xc002d224
c0029140:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029144:	89 10                	mov    DWORD PTR [eax],edx
c0029146:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002914a:	83 ec 0c             	sub    esp,0xc
c002914d:	50                   	push   eax
c002914e:	e8 19 b7 fe ff       	call   c001486c <FPU::~FPU()>
c0029153:	83 c4 10             	add    esp,0x10
c0029156:	90                   	nop
c0029157:	83 c4 0c             	add    esp,0xc
c002915a:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c002915c <SSE::~SSE()>:
c002915c:	83 ec 0c             	sub    esp,0xc
c002915f:	83 ec 0c             	sub    esp,0xc
c0029162:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029166:	e8 cd ff ff ff       	call   c0029138 <SSE::~SSE()>
c002916b:	83 c4 10             	add    esp,0x10
c002916e:	83 ec 08             	sub    esp,0x8
c0029171:	68 58 01 00 00       	push   0x158
c0029176:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002917a:	e8 a8 9c fe ff       	call   c0012e27 <operator delete(void*, unsigned long)>
c002917f:	83 c4 10             	add    esp,0x10
c0029182:	83 c4 0c             	add    esp,0xc
c0029185:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0029186 <x87::~x87()>:
c0029186:	83 ec 0c             	sub    esp,0xc
c0029189:	ba 64 d2 02 c0       	mov    edx,0xc002d264
c002918e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029192:	89 10                	mov    DWORD PTR [eax],edx
c0029194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029198:	83 ec 0c             	sub    esp,0xc
c002919b:	50                   	push   eax
c002919c:	e8 cb b6 fe ff       	call   c001486c <FPU::~FPU()>
c00291a1:	83 c4 10             	add    esp,0x10
c00291a4:	90                   	nop
c00291a5:	83 c4 0c             	add    esp,0xc
c00291a8:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c00291aa <x87::~x87()>:
c00291aa:	83 ec 0c             	sub    esp,0xc
c00291ad:	83 ec 0c             	sub    esp,0xc
c00291b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291b4:	e8 cd ff ff ff       	call   c0029186 <x87::~x87()>
c00291b9:	83 c4 10             	add    esp,0x10
c00291bc:	83 ec 08             	sub    esp,0x8
c00291bf:	68 58 01 00 00       	push   0x158
c00291c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291c8:	e8 5a 9c fe ff       	call   c0012e27 <operator delete(void*, unsigned long)>
c00291cd:	83 c4 10             	add    esp,0x10
c00291d0:	83 c4 0c             	add    esp,0xc
c00291d3:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00291d4 <IOAPIC::~IOAPIC()>:
c00291d4:	83 ec 0c             	sub    esp,0xc
c00291d7:	ba bc d3 02 c0       	mov    edx,0xc002d3bc
c00291dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291e0:	89 10                	mov    DWORD PTR [eax],edx
c00291e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291e6:	83 ec 0c             	sub    esp,0xc
c00291e9:	50                   	push   eax
c00291ea:	e8 17 b0 fe ff       	call   c0014206 <Device::~Device()>
c00291ef:	83 c4 10             	add    esp,0x10
c00291f2:	90                   	nop
c00291f3:	83 c4 0c             	add    esp,0xc
c00291f6:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00291f8 <IOAPIC::~IOAPIC()>:
c00291f8:	83 ec 0c             	sub    esp,0xc
c00291fb:	83 ec 0c             	sub    esp,0xc
c00291fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029202:	e8 cd ff ff ff       	call   c00291d4 <IOAPIC::~IOAPIC()>
c0029207:	83 c4 10             	add    esp,0x10
c002920a:	83 ec 08             	sub    esp,0x8
c002920d:	68 68 01 00 00       	push   0x168
c0029212:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029216:	e8 0c 9c fe ff       	call   c0012e27 <operator delete(void*, unsigned long)>
c002921b:	83 c4 10             	add    esp,0x10
c002921e:	83 c4 0c             	add    esp,0xc
c0029221:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0029222 <APIC::~APIC()>:
c0029222:	83 ec 0c             	sub    esp,0xc
c0029225:	ba 74 d3 02 c0       	mov    edx,0xc002d374
c002922a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002922e:	89 10                	mov    DWORD PTR [eax],edx
c0029230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029234:	83 ec 0c             	sub    esp,0xc
c0029237:	50                   	push   eax
c0029238:	e8 f9 ba fe ff       	call   c0014d36 <InterruptController::~InterruptController()>
c002923d:	83 c4 10             	add    esp,0x10
c0029240:	90                   	nop
c0029241:	83 c4 0c             	add    esp,0xc
c0029244:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0029246 <APIC::~APIC()>:
c0029246:	83 ec 0c             	sub    esp,0xc
c0029249:	83 ec 0c             	sub    esp,0xc
c002924c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029250:	e8 cd ff ff ff       	call   c0029222 <APIC::~APIC()>
c0029255:	83 c4 10             	add    esp,0x10
c0029258:	83 ec 08             	sub    esp,0x8
c002925b:	68 58 21 00 00       	push   0x2158
c0029260:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029264:	e8 be 9b fe ff       	call   c0012e27 <operator delete(void*, unsigned long)>
c0029269:	83 c4 10             	add    esp,0x10
c002926c:	83 c4 0c             	add    esp,0xc
c002926f:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029270 <PIC::~PIC()>:
c0029270:	83 ec 0c             	sub    esp,0xc
c0029273:	ba 0c d4 02 c0       	mov    edx,0xc002d40c
c0029278:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002927c:	89 10                	mov    DWORD PTR [eax],edx
c002927e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029282:	83 ec 0c             	sub    esp,0xc
c0029285:	50                   	push   eax
c0029286:	e8 ab ba fe ff       	call   c0014d36 <InterruptController::~InterruptController()>
c002928b:	83 c4 10             	add    esp,0x10
c002928e:	90                   	nop
c002928f:	83 c4 0c             	add    esp,0xc
c0029292:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029294 <PIC::~PIC()>:
c0029294:	83 ec 0c             	sub    esp,0xc
c0029297:	83 ec 0c             	sub    esp,0xc
c002929a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002929e:	e8 cd ff ff ff       	call   c0029270 <PIC::~PIC()>
c00292a3:	83 c4 10             	add    esp,0x10
c00292a6:	83 ec 08             	sub    esp,0x8
c00292a9:	68 58 21 00 00       	push   0x2158
c00292ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292b2:	e8 70 9b fe ff       	call   c0012e27 <operator delete(void*, unsigned long)>
c00292b7:	83 c4 10             	add    esp,0x10
c00292ba:	83 c4 0c             	add    esp,0xc
c00292bd:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00292be <APICTimer::~APICTimer()>:
c00292be:	83 ec 0c             	sub    esp,0xc
c00292c1:	ba 60 d4 02 c0       	mov    edx,0xc002d460
c00292c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292ca:	89 10                	mov    DWORD PTR [eax],edx
c00292cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292d0:	83 ec 0c             	sub    esp,0xc
c00292d3:	50                   	push   eax
c00292d4:	e8 23 da fe ff       	call   c0016cfc <Timer::~Timer()>
c00292d9:	83 c4 10             	add    esp,0x10
c00292dc:	90                   	nop
c00292dd:	83 c4 0c             	add    esp,0xc
c00292e0:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00292e2 <APICTimer::~APICTimer()>:
c00292e2:	83 ec 0c             	sub    esp,0xc
c00292e5:	83 ec 0c             	sub    esp,0xc
c00292e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292ec:	e8 cd ff ff ff       	call   c00292be <APICTimer::~APICTimer()>
c00292f1:	83 c4 10             	add    esp,0x10
c00292f4:	83 ec 08             	sub    esp,0x8
c00292f7:	68 60 01 00 00       	push   0x160
c00292fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029300:	e8 22 9b fe ff       	call   c0012e27 <operator delete(void*, unsigned long)>
c0029305:	83 c4 10             	add    esp,0x10
c0029308:	83 c4 0c             	add    esp,0xc
c002930b:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002930c <PIT::~PIT()>:
c002930c:	83 ec 0c             	sub    esp,0xc
c002930f:	ba b0 d4 02 c0       	mov    edx,0xc002d4b0
c0029314:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029318:	89 10                	mov    DWORD PTR [eax],edx
c002931a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002931e:	83 ec 0c             	sub    esp,0xc
c0029321:	50                   	push   eax
c0029322:	e8 d5 d9 fe ff       	call   c0016cfc <Timer::~Timer()>
c0029327:	83 c4 10             	add    esp,0x10
c002932a:	90                   	nop
c002932b:	83 c4 0c             	add    esp,0xc
c002932e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029330 <PIT::~PIT()>:
c0029330:	83 ec 0c             	sub    esp,0xc
c0029333:	83 ec 0c             	sub    esp,0xc
c0029336:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002933a:	e8 cd ff ff ff       	call   c002930c <PIT::~PIT()>
c002933f:	83 c4 10             	add    esp,0x10
c0029342:	83 ec 08             	sub    esp,0x8
c0029345:	68 5c 01 00 00       	push   0x15c
c002934a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002934e:	e8 d4 9a fe ff       	call   c0012e27 <operator delete(void*, unsigned long)>
c0029353:	83 c4 10             	add    esp,0x10
c0029356:	83 c4 0c             	add    esp,0xc
c0029359:	c3                   	ret    
