
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 42 f6 00 00       	call   c000f662 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 83 82 02 00       	call   c00282a8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb fc 8e 02 c0       	mov    ebx,0xc0028efc
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 08 8f 02 c0    	cmp    ebx,0xc0028f08
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 98 cc 02 c0       	mov    eax,0xc002cc98
c0000049:	3d 98 cc 02 c0       	cmp    eax,0xc002cc98
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 98 cc 02 c0       	push   0xc002cc98
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 98 cc 02 c0       	mov    eax,0xc002cc98
c0000075:	2d 98 cc 02 c0       	sub    eax,0xc002cc98
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 98 cc 02 c0       	push   0xc002cc98
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d c8 d2 02 c0 00 	cmp    BYTE PTR ds:0xc002d2c8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 10 8f 02 c0       	mov    ebx,0xc0028f10
c00000bb:	81 eb 0c 8f 02 c0    	sub    ebx,0xc0028f0c
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 0c 8f 02 c0       	mov    esi,0xc0028f0c
c00000ca:	a1 cc d2 02 c0       	mov    eax,ds:0xc002d2cc
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 cc d2 02 c0       	mov    ds:0xc002d2cc,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 cc d2 02 c0       	mov    eax,ds:0xc002d2cc
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 98 cc 02 c0       	push   0xc002cc98
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 c8 d2 02 c0 01 	mov    BYTE PTR ds:0xc002d2c8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 d0 d2 02 c0       	push   0xc002d2d0
c000012c:	68 98 cc 02 c0       	push   0xc002cc98
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 e9 cd 01 00       	call   c001d18c <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 f4 1f 01 00       	call   c00123af <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 c7 cd 01 00       	call   c001d18c <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 6f d2 01 00       	call   c001d653 <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 85 d8 01 00       	call   c001dc72 <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 10 d7 02 c0 	lgdtd  ds:0xc002d710
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 ed 3c 01 00       	call   c00142cf <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 df de 00 00       	jmp    c000e52a <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 e8 d2 02 c0       	mov    ds:0xc002d2e8,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 e8 d2 02 c0    	mov    DWORD PTR ds:0xc002d2e8,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d e8 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d2e8
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 20 8f 02 c0 02 	test   BYTE PTR [edx-0x3ffd70e0],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 20 8f 02 c0 01 	test   BYTE PTR [edx-0x3ffd70e0],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 20 8f 02 c0 08 	test   BYTE PTR [edx-0x3ffd70e0],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 20 8f 02 c0 04 	test   BYTE PTR [ebx-0x3ffd70e0],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 20 8f 02 c0 01 	test   BYTE PTR [edx-0x3ffd70e0],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d 00 d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d300
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d 00 d3 02 c0    	mov    DWORD PTR ds:0xc002d300,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 04 d3 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd2cfc]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 04 d3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2cfc],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d 00 d3 02 c0    	mov    DWORD PTR ds:0xc002d300,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 2c d3 02 c0    	cmp    DWORD PTR ds:0xc002d32c,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d 3c d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d33c
c0000e38:	c7 42 0c 34 d3 02 c0 	mov    DWORD PTR [edx+0xc],0xc002d334
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 3c d3 02 c0    	mov    DWORD PTR ds:0xc002d33c,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 2c d3 02 c0    	mov    DWORD PTR ds:0xc002d32c,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 00 d3 02 c0 02 	test   BYTE PTR ds:0xc002d300,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 00 d3 02 c0       	mov    eax,0xc002d300
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 df e4 00 00       	call   c000f3f8 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 21 e4 00 00       	call   c000f3f8 <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 0b e4 00 00       	call   c000f3f8 <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 e7 e3 00 00       	call   c000f3f8 <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d 00 d3 02 c0    	mov    edi,DWORD PTR ds:0xc002d300
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 00 d3 02 c0       	mov    eax,0xc002d300
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 04 d3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2cfc]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 04 d3 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2cfc],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 34 d3 02 c0 	lea    edx,[eax*8-0x3ffd2ccc]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 00 d3 02 c0       	mov    eax,0xc002d300
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d 40 d3 02 c0    	mov    ebx,DWORD PTR ds:0xc002d340
c00011ba:	81 fb 34 d3 02 c0    	cmp    ebx,0xc002d334
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d 34 d3 02 c0       	cmp    eax,0xc002d334
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d 30 d3 02 c0    	cmp    DWORD PTR ds:0xc002d330,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 3c d3 02 c0       	mov    ds:0xc002d33c,eax
c00011f6:	a3 40 d3 02 c0       	mov    ds:0xc002d340,eax
c00011fb:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 34 d3 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d334
c0001209:	c7 40 0c 34 d3 02 c0 	mov    DWORD PTR [eax+0xc],0xc002d334
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 40 d3 02 c0       	mov    ds:0xc002d340,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 34 d3 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d334
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 f8 d2 02 c0 	lea    ebp,[edx*4-0x3ffd2d08]
c000125a:	8b 14 95 00 d3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2d00]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 00 d3 02 c0 	lea    ecx,[edx*4-0x3ffd2d00]
c0001275:	8b 14 95 00 d3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2d00]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd 34 d6 02 c0 	or     DWORD PTR [edi*4-0x3ffd29cc],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 34 d3 02 c0 	lea    eax,[eax*8-0x3ffd2ccc]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d 3c d3 02 c0    	mov    DWORD PTR ds:0xc002d33c,ecx
c000132f:	89 0d 40 d3 02 c0    	mov    DWORD PTR ds:0xc002d340,ecx
c0001335:	c7 41 08 34 d3 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002d334
c000133c:	c7 41 0c 34 d3 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002d334
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd 2c d3 02 c0 	lea    edx,[ecx*8-0x3ffd2cd4]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d 34 d6 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd29cc]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d 34 d6 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd29cc]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 2c d3 02 c0 	lea    edx,[eax*4-0x3ffd2cd4]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d 34 d6 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd29cc],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d 3c d3 02 c0    	mov    DWORD PTR ds:0xc002d33c,edi
c0001402:	89 3d 40 d3 02 c0    	mov    DWORD PTR ds:0xc002d340,edi
c0001408:	c7 47 08 34 d3 02 c0 	mov    DWORD PTR [edi+0x8],0xc002d334
c000140f:	c7 47 0c 34 d3 02 c0 	mov    DWORD PTR [edi+0xc],0xc002d334
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d 30 d3 02 c0    	mov    DWORD PTR ds:0xc002d330,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d 2c d3 02 c0    	mov    DWORD PTR ds:0xc002d32c,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba 00 d3 02 c0       	mov    edx,0xc002d300
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d 00 d3 02 c0 00 	cmp    DWORD PTR ds:0xc002d300,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 00 d3 02 c0       	mov    eax,0xc002d300
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d 54 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d654
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 54 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d654,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d 54 d6 02 c0    	mov    DWORD PTR ds:0xc002d654,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 2c d3 02 c0    	cmp    DWORD PTR ds:0xc002d32c,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d 2c d3 02 c0    	mov    DWORD PTR ds:0xc002d32c,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d 00 d3 02 c0 00 	cmp    DWORD PTR ds:0xc002d300,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 00 d3 02 c0       	mov    eax,0xc002d300
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 5c d6 02 c0    	push   DWORD PTR ds:0xc002d65c
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d 00 d3 02 c0 00 	cmp    DWORD PTR ds:0xc002d300,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 00 d3 02 c0       	mov    eax,0xc002d300
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 5c d6 02 c0       	mov    eax,ds:0xc002d65c
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 00 d3 02 c0       	mov    eax,0xc002d300
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d 2c d3 02 c0 00 	cmp    DWORD PTR ds:0xc002d32c,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 00 d3 02 c0       	mov    eax,0xc002d300
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 04 d3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2cfc]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 34 d3 02 c0       	mov    eax,0xc002d334
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d 2c d6 02 c0       	cmp    eax,0xc002d62c
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 50 d6 02 c0    	mov    esi,DWORD PTR ds:0xc002d650
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 64 d6 02 c0    	mov    esi,DWORD PTR ds:0xc002d664
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 74 d6 02 c0    	mov    esi,DWORD PTR ds:0xc002d674
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 00 d3 02 c0       	mov    eax,0xc002d300
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 24 90 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6fdc]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 00 d3 02 c0       	mov    eax,ds:0xc002d300
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 00 d3 02 c0       	mov    ds:0xc002d300,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d 44 d6 02 c0    	mov    DWORD PTR ds:0xc002d644,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d 48 d6 02 c0    	mov    DWORD PTR ds:0xc002d648,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d 4c d6 02 c0    	mov    DWORD PTR ds:0xc002d64c,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 54 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d654,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 c0 0d 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcf240]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 b0 ea 01 00       	jmp    c00206a2 <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 c0 0d 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcf240]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 e1 ea 01 00       	jmp    c00206e9 <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 c0 0d 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcf240]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 09 eb 01 00       	jmp    c0020730 <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 fa 46 02 00       	call   c0026604 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 40 91 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6ec0]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 40 91 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6ec0]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba 40 90 02 c0       	mov    edx,0xc0029040
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba 60 91 02 c0       	mov    edx,0xc0029160
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba d4 bb 02 c0       	mov    edx,0xc002bbd4
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba 6c 91 02 c0       	mov    edx,0xc002916c
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba 50 91 02 c0       	mov    edx,0xc0029150
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 a0 d6 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd2960]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 80 d6 02 c0    	mov    ax,ds:0xc002d680
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 80 d6 02 c0    	mov    ds:0xc002d680,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 f7 34 02 00       	call   c0026604 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 35 4e 00 00       	call   c000845a <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 c7 4d 00 00       	call   c0008470 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 72 91 02 c0       	mov    eax,0xc0029172
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 48 46 00 00       	call   c0008487 <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad c0 90 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6f40]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 7b 91 02 c0       	mov    eax,0xc002917b
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 1e 46 00 00       	call   c0008583 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 40 91 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6ec0]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 fa 44 00 00       	call   c0008583 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 e1 44 00 00       	call   c0008583 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 0e 44 00 00       	call   c0008583 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 fb 43 00 00       	call   c0008583 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 c2 1e 02 00       	call   c0026604 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba 50 91 02 c0       	mov    edx,0xc0029150
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba 40 90 02 c0       	mov    edx,0xc0029040
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba 50 90 02 c0       	mov    edx,0xc0029050
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 46 38 00 00       	call   c0008517 <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 a0 d6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2960]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 a0 d6 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2960],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 a3 34 00 00       	call   c000845a <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 f4 30 00 00       	call   c0008470 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 f0 2a 00 00       	call   c000845a <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 2f 2a 00 00       	call   c0008470 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 89 08 02 00       	call   c0026604 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 6f 08 02 00       	call   c0026604 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 8b 24 00 00       	call   c000845a <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 02 24 00 00       	call   c0008470 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 6e 23 00 00       	call   c000845a <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 30 23 00 00       	call   c0008470 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 db 22 00 00       	call   c000845a <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 9f 22 00 00       	call   c0008470 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 80 1f 00 00       	call   c000845a <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 5d 1e 00 00       	call   c0008470 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 f8 1d 00 00       	call   c000845a <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 8f 1d 00 00       	call   c0008470 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 c3 1b 00 00       	call   c000845a <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 40 19 00 00       	call   c0008470 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 db 18 00 00       	call   c000845a <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 5e 18 00 00       	call   c0008470 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 02 18 00 00       	call   c000845a <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 7f 17 00 00       	call   c0008470 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 03 17 00 00       	call   c0008517 <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 97 90 02 c0       	mov    eax,0xc0029097
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 97 15 00 00       	call   c0008583 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 8e 14 00 00       	call   c0008487 <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 90 90 02 c0       	mov    eax,0xc0029090
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_forward>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 2c             	sub    esp,0x2c
c0007160:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007164:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007168:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000716e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0007172:	89 d8                	mov    eax,ebx
c0007174:	e8 b1 b1 ff ff       	call   c000232a <validate>
c0007179:	89 c5                	mov    ebp,eax
c000717b:	85 c0                	test   eax,eax
c000717d:	0f 85 aa 01 00 00    	jne    c000732d <f_forward+0x1d4>
c0007183:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007187:	85 ed                	test   ebp,ebp
c0007189:	0f 85 9e 01 00 00    	jne    c000732d <f_forward+0x1d4>
c000718f:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007193:	0f 84 8f 01 00 00    	je     c0007328 <f_forward+0x1cf>
c0007199:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000719c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000719f:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071a2:	bf 00 00 00 00       	mov    edi,0x0
c00071a7:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071aa:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071ae:	89 d1                	mov    ecx,edx
c00071b0:	19 f9                	sbb    ecx,edi
c00071b2:	0f 83 cf 00 00 00    	jae    c0007287 <f_forward+0x12e>
c00071b8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071bc:	e9 c6 00 00 00       	jmp    c0007287 <f_forward+0x12e>
c00071c1:	50                   	push   eax
c00071c2:	50                   	push   eax
c00071c3:	6a 00                	push   0x0
c00071c5:	6a 00                	push   0x0
c00071c7:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071cb:	83 c4 10             	add    esp,0x10
c00071ce:	85 c0                	test   eax,eax
c00071d0:	0f 84 57 01 00 00    	je     c000732d <f_forward+0x1d4>
c00071d6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071d9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00071dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00071e0:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c00071e4:	89 d7                	mov    edi,edx
c00071e6:	8d 4e ff             	lea    ecx,[esi-0x1]
c00071e9:	89 c6                	mov    esi,eax
c00071eb:	0f ac fe 09          	shrd   esi,edi,0x9
c00071ef:	21 ce                	and    esi,ecx
c00071f1:	89 c1                	mov    ecx,eax
c00071f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00071f9:	0f 84 98 00 00 00    	je     c0007297 <f_forward+0x13e>
c00071ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007203:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007206:	89 c8                	mov    eax,ecx
c0007208:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000720c:	e8 af ac ff ff       	call   c0001ec0 <clst2sect>
c0007211:	89 d7                	mov    edi,edx
c0007213:	09 c7                	or     edi,eax
c0007215:	0f 84 9e 00 00 00    	je     c00072b9 <f_forward+0x160>
c000721b:	31 ff                	xor    edi,edi
c000721d:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007220:	01 c6                	add    esi,eax
c0007222:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007226:	11 d7                	adc    edi,edx
c0007228:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000722b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000722e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007232:	39 fa                	cmp    edx,edi
c0007234:	0f 85 a2 00 00 00    	jne    c00072dc <f_forward+0x183>
c000723a:	39 f0                	cmp    eax,esi
c000723c:	0f 85 9a 00 00 00    	jne    c00072dc <f_forward+0x183>
c0007242:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007245:	ba 00 02 00 00       	mov    edx,0x200
c000724a:	25 ff 01 00 00       	and    eax,0x1ff
c000724f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007253:	29 c2                	sub    edx,eax
c0007255:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007258:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000725b:	39 d1                	cmp    ecx,edx
c000725d:	76 02                	jbe    c0007261 <f_forward+0x108>
c000725f:	89 d1                	mov    ecx,edx
c0007261:	8d 73 50             	lea    esi,[ebx+0x50]
c0007264:	52                   	push   edx
c0007265:	01 c6                	add    esi,eax
c0007267:	52                   	push   edx
c0007268:	51                   	push   ecx
c0007269:	56                   	push   esi
c000726a:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000726e:	83 c4 10             	add    esp,0x10
c0007271:	85 c0                	test   eax,eax
c0007273:	74 44                	je     c00072b9 <f_forward+0x160>
c0007275:	31 ff                	xor    edi,edi
c0007277:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000727a:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000727d:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007281:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007285:	01 07                	add    DWORD PTR [edi],eax
c0007287:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000728c:	0f 85 2f ff ff ff    	jne    c00071c1 <f_forward+0x68>
c0007292:	e9 96 00 00 00       	jmp    c000732d <f_forward+0x1d4>
c0007297:	85 f6                	test   esi,esi
c0007299:	0f 85 60 ff ff ff    	jne    c00071ff <f_forward+0xa6>
c000729f:	89 d7                	mov    edi,edx
c00072a1:	09 c7                	or     edi,eax
c00072a3:	75 05                	jne    c00072aa <f_forward+0x151>
c00072a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072a8:	eb 0a                	jmp    c00072b4 <f_forward+0x15b>
c00072aa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ad:	89 d8                	mov    eax,ebx
c00072af:	e8 d9 bc ff ff       	call   c0002f8d <get_fat>
c00072b4:	83 f8 01             	cmp    eax,0x1
c00072b7:	77 0b                	ja     c00072c4 <f_forward+0x16b>
c00072b9:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072bd:	bd 02 00 00 00       	mov    ebp,0x2
c00072c2:	eb 69                	jmp    c000732d <f_forward+0x1d4>
c00072c4:	83 f8 ff             	cmp    eax,0xffffffff
c00072c7:	75 0b                	jne    c00072d4 <f_forward+0x17b>
c00072c9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072cd:	bd 01 00 00 00       	mov    ebp,0x1
c00072d2:	eb 59                	jmp    c000732d <f_forward+0x1d4>
c00072d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072d7:	e9 23 ff ff ff       	jmp    c00071ff <f_forward+0xa6>
c00072dc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00072e0:	79 20                	jns    c0007302 <f_forward+0x1a9>
c00072e2:	83 ec 0c             	sub    esp,0xc
c00072e5:	6a 01                	push   0x1
c00072e7:	52                   	push   edx
c00072e8:	50                   	push   eax
c00072e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072ed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00072f1:	50                   	push   eax
c00072f2:	e8 fb a8 ff ff       	call   c0001bf2 <disk_write>
c00072f7:	83 c4 20             	add    esp,0x20
c00072fa:	85 c0                	test   eax,eax
c00072fc:	75 cb                	jne    c00072c9 <f_forward+0x170>
c00072fe:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007302:	83 ec 0c             	sub    esp,0xc
c0007305:	6a 01                	push   0x1
c0007307:	57                   	push   edi
c0007308:	56                   	push   esi
c0007309:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000730d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007311:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007315:	50                   	push   eax
c0007316:	e8 c1 a8 ff ff       	call   c0001bdc <disk_read>
c000731b:	83 c4 20             	add    esp,0x20
c000731e:	85 c0                	test   eax,eax
c0007320:	0f 84 1c ff ff ff    	je     c0007242 <f_forward+0xe9>
c0007326:	eb a1                	jmp    c00072c9 <f_forward+0x170>
c0007328:	bd 07 00 00 00       	mov    ebp,0x7
c000732d:	83 c4 2c             	add    esp,0x2c
c0007330:	89 e8                	mov    eax,ebp
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	5f                   	pop    edi
c0007335:	5d                   	pop    ebp
c0007336:	c3                   	ret    

c0007337 <f_mkfs>:
c0007337:	55                   	push   ebp
c0007338:	57                   	push   edi
c0007339:	56                   	push   esi
c000733a:	53                   	push   ebx
c000733b:	bb 0b 00 00 00       	mov    ebx,0xb
c0007340:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007346:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000734d:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007354:	e8 b0 ae ff ff       	call   c0002209 <get_ldnumber>
c0007359:	85 c0                	test   eax,eax
c000735b:	0f 88 ec 10 00 00    	js     c000844d <f_mkfs+0x1116>
c0007361:	8b 14 85 a0 d6 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2960]
c0007368:	85 d2                	test   edx,edx
c000736a:	74 03                	je     c000736f <f_mkfs+0x38>
c000736c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000736f:	85 f6                	test   esi,esi
c0007371:	75 05                	jne    c0007378 <f_mkfs+0x41>
c0007373:	be 80 90 02 c0       	mov    esi,0xc0029080
c0007378:	83 ec 0c             	sub    esp,0xc
c000737b:	0f b6 c0             	movzx  eax,al
c000737e:	bb 03 00 00 00       	mov    ebx,0x3
c0007383:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007387:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000738b:	e8 49 a8 ff ff       	call   c0001bd9 <disk_initialize>
c0007390:	83 c4 10             	add    esp,0x10
c0007393:	a8 01                	test   al,0x1
c0007395:	0f 85 b2 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c000739b:	bb 0a 00 00 00       	mov    ebx,0xa
c00073a0:	a8 04                	test   al,0x4
c00073a2:	0f 85 a5 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c00073a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ab:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073af:	85 c0                	test   eax,eax
c00073b1:	75 20                	jne    c00073d3 <f_mkfs+0x9c>
c00073b3:	51                   	push   ecx
c00073b4:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073b8:	50                   	push   eax
c00073b9:	6a 03                	push   0x3
c00073bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073bf:	e8 44 a8 ff ff       	call   c0001c08 <disk_ioctl>
c00073c4:	83 c4 10             	add    esp,0x10
c00073c7:	85 c0                	test   eax,eax
c00073c9:	74 08                	je     c00073d3 <f_mkfs+0x9c>
c00073cb:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073d3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073d7:	8d 42 ff             	lea    eax,[edx-0x1]
c00073da:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00073df:	77 04                	ja     c00073e5 <f_mkfs+0xae>
c00073e1:	85 c2                	test   edx,eax
c00073e3:	74 08                	je     c00073ed <f_mkfs+0xb6>
c00073e5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073ed:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00073f0:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00073f4:	48                   	dec    eax
c00073f5:	3c 01                	cmp    al,0x1
c00073f7:	76 05                	jbe    c00073fe <f_mkfs+0xc7>
c00073f9:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00073fe:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007401:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007405:	48                   	dec    eax
c0007406:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000740b:	77 07                	ja     c0007414 <f_mkfs+0xdd>
c000740d:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007412:	74 08                	je     c000741c <f_mkfs+0xe5>
c0007414:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000741c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000741f:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007425:	77 07                	ja     c000742e <f_mkfs+0xf7>
c0007427:	8d 43 ff             	lea    eax,[ebx-0x1]
c000742a:	85 d8                	test   eax,ebx
c000742c:	74 02                	je     c0007430 <f_mkfs+0xf9>
c000742e:	31 db                	xor    ebx,ebx
c0007430:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000743b:	77 0a                	ja     c0007447 <f_mkfs+0x110>
c000743d:	bb 11 00 00 00       	mov    ebx,0x11
c0007442:	e9 06 10 00 00       	jmp    c000844d <f_mkfs+0x1116>
c0007447:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000744e:	8b 36                	mov    esi,DWORD PTR [esi]
c0007450:	85 ed                	test   ebp,ebp
c0007452:	75 1e                	jne    c0007472 <f_mkfs+0x13b>
c0007454:	83 ec 0c             	sub    esp,0xc
c0007457:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000745e:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007463:	50                   	push   eax
c0007464:	e8 f1 0f 00 00       	call   c000845a <ff_memalloc>
c0007469:	83 c4 10             	add    esp,0x10
c000746c:	89 c5                	mov    ebp,eax
c000746e:	85 c0                	test   eax,eax
c0007470:	74 cb                	je     c000743d <f_mkfs+0x106>
c0007472:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000747a:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007482:	52                   	push   edx
c0007483:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007487:	50                   	push   eax
c0007488:	6a 01                	push   0x1
c000748a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000748e:	e8 75 a7 ff ff       	call   c0001c08 <disk_ioctl>
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	85 c0                	test   eax,eax
c0007498:	0f 85 4a 0f 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000749e:	89 f1                	mov    ecx,esi
c00074a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074a8:	83 e1 0f             	and    ecx,0xf
c00074ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074b3:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074b7:	83 e6 08             	and    esi,0x8
c00074ba:	75 56                	jne    c0007512 <f_mkfs+0x1db>
c00074bc:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074c0:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074c4:	83 ff 00             	cmp    edi,0x0
c00074c7:	76 20                	jbe    c00074e9 <f_mkfs+0x1b2>
c00074c9:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074ce:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074d6:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00074dc:	83 d7 ff             	adc    edi,0xffffffff
c00074df:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00074e3:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00074e7:	eb 21                	jmp    c000750a <f_mkfs+0x1d3>
c00074e9:	ba 3f 00 00 00       	mov    edx,0x3f
c00074ee:	39 f2                	cmp    edx,esi
c00074f0:	19 f8                	sbb    eax,edi
c00074f2:	73 1e                	jae    c0007512 <f_mkfs+0x1db>
c00074f4:	83 c6 c1             	add    esi,0xffffffc1
c00074f7:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00074ff:	83 d7 ff             	adc    edi,0xffffffff
c0007502:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007506:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000750a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007512:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007516:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000751a:	89 04 24             	mov    DWORD PTR [esp],eax
c000751d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007521:	31 c0                	xor    eax,eax
c0007523:	ba 7f 00 00 00       	mov    edx,0x7f
c0007528:	89 c7                	mov    edi,eax
c000752a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000752d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007531:	0f 83 c5 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c0007537:	89 df                	mov    edi,ebx
c0007539:	c1 ef 09             	shr    edi,0x9
c000753c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007540:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007547:	c1 ef 09             	shr    edi,0x9
c000754a:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000754f:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007553:	74 29                	je     c000757e <f_mkfs+0x247>
c0007555:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000755b:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007560:	0f 97 c2             	seta   dl
c0007563:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007566:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000756a:	0f 92 c0             	setb   al
c000756d:	08 c2                	or     dl,al
c000756f:	75 5b                	jne    c00075cc <f_mkfs+0x295>
c0007571:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007575:	83 e0 07             	and    eax,0x7
c0007578:	3c 04                	cmp    al,0x4
c000757a:	74 50                	je     c00075cc <f_mkfs+0x295>
c000757c:	eb 1b                	jmp    c0007599 <f_mkfs+0x262>
c000757e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007583:	0f 87 73 0a 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007589:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000758f:	76 08                	jbe    c0007599 <f_mkfs+0x262>
c0007591:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007599:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000759d:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075a1:	83 e0 01             	and    eax,0x1
c00075a4:	80 e1 02             	and    cl,0x2
c00075a7:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ab:	74 0d                	je     c00075ba <f_mkfs+0x283>
c00075ad:	84 c0                	test   al,al
c00075af:	0f 84 53 09 00 00    	je     c0007f08 <f_mkfs+0xbd1>
c00075b5:	e9 12 08 00 00       	jmp    c0007dcc <f_mkfs+0xa95>
c00075ba:	bb 13 00 00 00       	mov    ebx,0x13
c00075bf:	84 c0                	test   al,al
c00075c1:	0f 85 05 08 00 00    	jne    c0007dcc <f_mkfs+0xa95>
c00075c7:	e9 39 0e 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c00075cc:	31 c0                	xor    eax,eax
c00075ce:	ba ff 0f 00 00       	mov    edx,0xfff
c00075d3:	89 c7                	mov    edi,eax
c00075d5:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075d8:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075dc:	0f 83 1a 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00075e2:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00075e8:	77 39                	ja     c0007623 <f_mkfs+0x2ec>
c00075ea:	ba ff ff 07 00       	mov    edx,0x7ffff
c00075ef:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00075f7:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075fa:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075fe:	73 08                	jae    c0007608 <f_mkfs+0x2d1>
c0007600:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007608:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000760d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007610:	b8 00 00 00 00       	mov    eax,0x0
c0007615:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007619:	73 08                	jae    c0007623 <f_mkfs+0x2ec>
c000761b:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000762b:	83 c0 20             	add    eax,0x20
c000762e:	83 d2 00             	adc    edx,0x0
c0007631:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007635:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000763d:	31 d2                	xor    edx,edx
c000763f:	31 ff                	xor    edi,edi
c0007641:	52                   	push   edx
c0007642:	89 fb                	mov    ebx,edi
c0007644:	50                   	push   eax
c0007645:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007649:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000764d:	e8 b2 ef 01 00       	call   c0026604 <__udivdi3>
c0007652:	83 c4 10             	add    esp,0x10
c0007655:	c1 e0 02             	shl    eax,0x2
c0007658:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000765c:	05 07 02 00 00       	add    eax,0x207
c0007661:	89 f1                	mov    ecx,esi
c0007663:	c1 e8 09             	shr    eax,0x9
c0007666:	83 c1 ff             	add    ecx,0xffffffff
c0007669:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000766d:	83 d3 ff             	adc    ebx,0xffffffff
c0007670:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007674:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007678:	31 d2                	xor    edx,edx
c000767a:	01 c8                	add    eax,ecx
c000767c:	11 da                	adc    edx,ebx
c000767e:	89 c1                	mov    ecx,eax
c0007680:	f7 de                	neg    esi
c0007682:	89 d0                	mov    eax,edx
c0007684:	83 d7 00             	adc    edi,0x0
c0007687:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000768b:	f7 df                	neg    edi
c000768d:	21 f1                	and    ecx,esi
c000768f:	21 f8                	and    eax,edi
c0007691:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007695:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007699:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000769d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076a1:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076a8:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ac:	0f ac d0 01          	shrd   eax,edx,0x1
c00076b0:	89 df                	mov    edi,ebx
c00076b2:	d1 ea                	shr    edx,1
c00076b4:	39 c1                	cmp    ecx,eax
c00076b6:	19 d7                	sbb    edi,edx
c00076b8:	0f 83 3e 09 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00076be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076c2:	31 d2                	xor    edx,edx
c00076c4:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076cc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076d3:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076d7:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00076db:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00076df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00076e3:	83 f8 0f             	cmp    eax,0xf
c00076e6:	0f 86 10 09 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c00076ec:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00076f4:	0f 87 02 09 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c00076fa:	31 d2                	xor    edx,edx
c00076fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007700:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007708:	83 c0 07             	add    eax,0x7
c000770b:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007713:	c1 e8 03             	shr    eax,0x3
c0007716:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000771d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007725:	c1 e0 09             	shl    eax,0x9
c0007728:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000772c:	48                   	dec    eax
c000772d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007731:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007735:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007739:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000773d:	31 d2                	xor    edx,edx
c000773f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007743:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000774a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000774e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007753:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007757:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000775b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000775f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007763:	31 ff                	xor    edi,edi
c0007765:	31 f6                	xor    esi,esi
c0007767:	31 db                	xor    ebx,ebx
c0007769:	85 ff                	test   edi,edi
c000776b:	74 05                	je     c0007772 <f_mkfs+0x43b>
c000776d:	4f                   	dec    edi
c000776e:	74 44                	je     c00077b4 <f_mkfs+0x47d>
c0007770:	eb 4f                	jmp    c00077c1 <f_mkfs+0x48a>
c0007772:	83 ec 0c             	sub    esp,0xc
c0007775:	0f b7 c3             	movzx  eax,bx
c0007778:	50                   	push   eax
c0007779:	e8 05 0e 00 00       	call   c0008583 <ff_wtoupper>
c000777e:	83 c4 10             	add    esp,0x10
c0007781:	89 c1                	mov    ecx,eax
c0007783:	8d 53 01             	lea    edx,[ebx+0x1]
c0007786:	66 39 c3             	cmp    bx,ax
c0007789:	75 3e                	jne    c00077c9 <f_mkfs+0x492>
c000778b:	be 01 00 00 00       	mov    esi,0x1
c0007790:	89 df                	mov    edi,ebx
c0007792:	66 01 f7             	add    di,si
c0007795:	75 07                	jne    c000779e <f_mkfs+0x467>
c0007797:	83 fe 7f             	cmp    esi,0x7f
c000779a:	77 31                	ja     c00077cd <f_mkfs+0x496>
c000779c:	eb 16                	jmp    c00077b4 <f_mkfs+0x47d>
c000779e:	83 ec 0c             	sub    esp,0xc
c00077a1:	0f b7 ff             	movzx  edi,di
c00077a4:	57                   	push   edi
c00077a5:	e8 d9 0d 00 00       	call   c0008583 <ff_wtoupper>
c00077aa:	83 c4 10             	add    esp,0x10
c00077ad:	39 c7                	cmp    edi,eax
c00077af:	75 e6                	jne    c0007797 <f_mkfs+0x460>
c00077b1:	46                   	inc    esi
c00077b2:	eb dc                	jmp    c0007790 <f_mkfs+0x459>
c00077b4:	31 c0                	xor    eax,eax
c00077b6:	89 d9                	mov    ecx,ebx
c00077b8:	4e                   	dec    esi
c00077b9:	0f 95 c0             	setne  al
c00077bc:	43                   	inc    ebx
c00077bd:	89 c7                	mov    edi,eax
c00077bf:	eb 14                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c1:	89 f1                	mov    ecx,esi
c00077c3:	01 f3                	add    ebx,esi
c00077c5:	31 ff                	xor    edi,edi
c00077c7:	eb 0c                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c9:	89 d3                	mov    ebx,edx
c00077cb:	eb 08                	jmp    c00077d5 <f_mkfs+0x49e>
c00077cd:	bf 02 00 00 00       	mov    edi,0x2
c00077d2:	83 c9 ff             	or     ecx,0xffffffff
c00077d5:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077dc:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00077e0:	0f b6 c1             	movzx  eax,cl
c00077e3:	e8 3a a9 ff ff       	call   c0002122 <xsum32>
c00077e8:	66 c1 e9 08          	shr    cx,0x8
c00077ec:	89 c2                	mov    edx,eax
c00077ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077f1:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00077f5:	0f b7 c1             	movzx  eax,cx
c00077f8:	e8 25 a9 ff ff       	call   c0002122 <xsum32>
c00077fd:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007802:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007806:	66 85 db             	test   bx,bx
c0007809:	74 1f                	je     c000782a <f_mkfs+0x4f3>
c000780b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780e:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007815:	83 c0 02             	add    eax,0x2
c0007818:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000781e:	39 c2                	cmp    edx,eax
c0007820:	74 08                	je     c000782a <f_mkfs+0x4f3>
c0007822:	89 04 24             	mov    DWORD PTR [esp],eax
c0007825:	e9 3f ff ff ff       	jmp    c0007769 <f_mkfs+0x432>
c000782a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782d:	83 ec 0c             	sub    esp,0xc
c0007830:	05 01 02 00 00       	add    eax,0x201
c0007835:	c1 e8 09             	shr    eax,0x9
c0007838:	50                   	push   eax
c0007839:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000783d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007841:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007845:	55                   	push   ebp
c0007846:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000784a:	e8 a3 a3 ff ff       	call   c0001bf2 <disk_write>
c000784f:	83 c4 20             	add    esp,0x20
c0007852:	85 c0                	test   eax,eax
c0007854:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007857:	0f 85 8b 0b 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000785d:	89 d0                	mov    eax,edx
c000785f:	31 d2                	xor    edx,edx
c0007861:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007865:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007869:	66 85 db             	test   bx,bx
c000786c:	74 04                	je     c0007872 <f_mkfs+0x53b>
c000786e:	31 c0                	xor    eax,eax
c0007870:	eb b0                	jmp    c0007822 <f_mkfs+0x4eb>
c0007872:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007876:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000787a:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000787e:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007884:	31 d2                	xor    edx,edx
c0007886:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007891:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007895:	c1 eb 09             	shr    ebx,0x9
c0007898:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000789f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078a3:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078af:	8d 70 01             	lea    esi,[eax+0x1]
c00078b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078ba:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078c1:	31 d2                	xor    edx,edx
c00078c3:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00078cb:	89 c1                	mov    ecx,eax
c00078cd:	89 e8                	mov    eax,ebp
c00078cf:	e8 e7 a3 ff ff       	call   c0001cbb <mem_set>
c00078d4:	31 c0                	xor    eax,eax
c00078d6:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078d9:	76 10                	jbe    c00078eb <f_mkfs+0x5b4>
c00078db:	83 fe 07             	cmp    esi,0x7
c00078de:	76 0b                	jbe    c00078eb <f_mkfs+0x5b4>
c00078e0:	40                   	inc    eax
c00078e1:	83 ee 08             	sub    esi,0x8
c00078e4:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00078e9:	eb eb                	jmp    c00078d6 <f_mkfs+0x59f>
c00078eb:	b2 01                	mov    dl,0x1
c00078ed:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00078f1:	85 f6                	test   esi,esi
c00078f3:	74 0c                	je     c0007901 <f_mkfs+0x5ca>
c00078f5:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078f8:	76 07                	jbe    c0007901 <f_mkfs+0x5ca>
c00078fa:	08 11                	or     BYTE PTR [ecx],dl
c00078fc:	4e                   	dec    esi
c00078fd:	d1 e2                	shl    edx,1
c00078ff:	eb f0                	jmp    c00078f1 <f_mkfs+0x5ba>
c0007901:	89 df                	mov    edi,ebx
c0007903:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007907:	76 04                	jbe    c000790d <f_mkfs+0x5d6>
c0007909:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000790d:	83 ec 0c             	sub    esp,0xc
c0007910:	57                   	push   edi
c0007911:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007915:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007919:	55                   	push   ebp
c000791a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000791e:	e8 cf a2 ff ff       	call   c0001bf2 <disk_write>
c0007923:	83 c4 20             	add    esp,0x20
c0007926:	85 c0                	test   eax,eax
c0007928:	0f 85 ba 0a 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000792e:	31 d2                	xor    edx,edx
c0007930:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007934:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007938:	29 fb                	sub    ebx,edi
c000793a:	0f 85 7a ff ff ff    	jne    c00078ba <f_mkfs+0x583>
c0007940:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007944:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000794c:	31 f6                	xor    esi,esi
c000794e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007952:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007955:	31 d2                	xor    edx,edx
c0007957:	89 e8                	mov    eax,ebp
c0007959:	e8 5d a3 ff ff       	call   c0001cbb <mem_set>
c000795e:	31 c9                	xor    ecx,ecx
c0007960:	85 db                	test   ebx,ebx
c0007962:	75 40                	jne    c00079a4 <f_mkfs+0x66d>
c0007964:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007969:	89 e8                	mov    eax,ebp
c000796b:	bb 02 00 00 00       	mov    ebx,0x2
c0007970:	e8 28 a3 ff ff       	call   c0001c9d <st_dword>
c0007975:	8d 45 04             	lea    eax,[ebp+0x4]
c0007978:	83 ca ff             	or     edx,0xffffffff
c000797b:	e8 1d a3 ff ff       	call   c0001c9d <st_dword>
c0007980:	b9 08 00 00 00       	mov    ecx,0x8
c0007985:	eb 1d                	jmp    c00079a4 <f_mkfs+0x66d>
c0007987:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000798a:	76 3b                	jbe    c00079c7 <f_mkfs+0x690>
c000798c:	43                   	inc    ebx
c000798d:	83 fe 01             	cmp    esi,0x1
c0007990:	89 da                	mov    edx,ebx
c0007992:	77 03                	ja     c0007997 <f_mkfs+0x660>
c0007994:	83 ca ff             	or     edx,0xffffffff
c0007997:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000799b:	4e                   	dec    esi
c000799c:	e8 fc a2 ff ff       	call   c0001c9d <st_dword>
c00079a1:	83 c1 04             	add    ecx,0x4
c00079a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079a8:	85 f6                	test   esi,esi
c00079aa:	75 db                	jne    c0007987 <f_mkfs+0x650>
c00079ac:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079b1:	77 14                	ja     c00079c7 <f_mkfs+0x690>
c00079b3:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079b7:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079be:	85 f6                	test   esi,esi
c00079c0:	74 05                	je     c00079c7 <f_mkfs+0x690>
c00079c2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c5:	77 dd                	ja     c00079a4 <f_mkfs+0x66d>
c00079c7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079cb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079cf:	39 cf                	cmp    edi,ecx
c00079d1:	76 02                	jbe    c00079d5 <f_mkfs+0x69e>
c00079d3:	89 cf                	mov    edi,ecx
c00079d5:	83 ec 0c             	sub    esp,0xc
c00079d8:	57                   	push   edi
c00079d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079e1:	55                   	push   ebp
c00079e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e6:	e8 07 a2 ff ff       	call   c0001bf2 <disk_write>
c00079eb:	83 c4 20             	add    esp,0x20
c00079ee:	85 c0                	test   eax,eax
c00079f0:	0f 85 f2 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00079f6:	31 d2                	xor    edx,edx
c00079f8:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00079fc:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a00:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a04:	0f 85 48 ff ff ff    	jne    c0007952 <f_mkfs+0x61b>
c0007a0a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a0d:	31 d2                	xor    edx,edx
c0007a0f:	89 e8                	mov    eax,ebp
c0007a11:	31 ff                	xor    edi,edi
c0007a13:	e8 a3 a2 ff ff       	call   c0001cbb <mem_set>
c0007a18:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a1b:	ba 02 00 00 00       	mov    edx,0x2
c0007a20:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a24:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a28:	e8 70 a2 ff ff       	call   c0001c9d <st_dword>
c0007a2d:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a30:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a34:	e8 64 a2 ff ff       	call   c0001c9d <st_dword>
c0007a39:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a3c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a40:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a44:	e8 54 a2 ff ff       	call   c0001c9d <st_dword>
c0007a49:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a54:	83 c2 02             	add    edx,0x2
c0007a57:	e8 41 a2 ff ff       	call   c0001c9d <st_dword>
c0007a5c:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a5f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a63:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a67:	e8 31 a2 ff ff       	call   c0001c9d <st_dword>
c0007a6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a70:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a75:	89 c6                	mov    esi,eax
c0007a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a7b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a82:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007a86:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007a89:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a8d:	39 cb                	cmp    ebx,ecx
c0007a8f:	76 02                	jbe    c0007a93 <f_mkfs+0x75c>
c0007a91:	89 cb                	mov    ebx,ecx
c0007a93:	83 ec 0c             	sub    esp,0xc
c0007a96:	53                   	push   ebx
c0007a97:	57                   	push   edi
c0007a98:	56                   	push   esi
c0007a99:	55                   	push   ebp
c0007a9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a9e:	e8 4f a1 ff ff       	call   c0001bf2 <disk_write>
c0007aa3:	83 c4 20             	add    esp,0x20
c0007aa6:	85 c0                	test   eax,eax
c0007aa8:	0f 85 3a 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007aae:	31 d2                	xor    edx,edx
c0007ab0:	b9 00 02 00 00       	mov    ecx,0x200
c0007ab5:	89 e8                	mov    eax,ebp
c0007ab7:	e8 ff a1 ff ff       	call   c0001cbb <mem_set>
c0007abc:	31 d2                	xor    edx,edx
c0007abe:	01 de                	add    esi,ebx
c0007ac0:	11 d7                	adc    edi,edx
c0007ac2:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007ac5:	75 bf                	jne    c0007a86 <f_mkfs+0x74f>
c0007ac7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007acb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007acf:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007ad7:	b9 00 02 00 00       	mov    ecx,0x200
c0007adc:	31 d2                	xor    edx,edx
c0007ade:	89 e8                	mov    eax,ebp
c0007ae0:	e8 d6 a1 ff ff       	call   c0001cbb <mem_set>
c0007ae5:	b9 0b 00 00 00       	mov    ecx,0xb
c0007aea:	ba 60 91 02 c0       	mov    edx,0xc0029160
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 b0 a1 ff ff       	call   c0001ca6 <mem_cpy>
c0007af6:	8d 45 40             	lea    eax,[ebp+0x40]
c0007af9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007afd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b01:	e8 9a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b06:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b0a:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b0d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b11:	e8 8a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b16:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b19:	ba 20 00 00 00       	mov    edx,0x20
c0007b1e:	e8 7a a1 ff ff       	call   c0001c9d <st_dword>
c0007b23:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b2b:	e8 6d a1 ff ff       	call   c0001c9d <st_dword>
c0007b30:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b34:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b38:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b3c:	e8 5c a1 ff ff       	call   c0001c9d <st_dword>
c0007b41:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b44:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b48:	e8 50 a1 ff ff       	call   c0001c9d <st_dword>
c0007b4d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b51:	8d 50 02             	lea    edx,[eax+0x2]
c0007b54:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b57:	e8 41 a1 ff ff       	call   c0001c9d <st_dword>
c0007b5c:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b5f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b64:	e8 34 a1 ff ff       	call   c0001c9d <st_dword>
c0007b69:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b6c:	ba 00 01 00 00       	mov    edx,0x100
c0007b71:	e8 23 a1 ff ff       	call   c0001c99 <st_word>
c0007b76:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b7a:	b8 0a 00 00 00       	mov    eax,0xa
c0007b7f:	48                   	dec    eax
c0007b80:	74 05                	je     c0007b87 <f_mkfs+0x850>
c0007b82:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007b85:	eb f8                	jmp    c0007b7f <f_mkfs+0x848>
c0007b87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b8b:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007b8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b93:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007b97:	74 05                	je     c0007b9e <f_mkfs+0x867>
c0007b99:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007b9c:	eb f5                	jmp    c0007b93 <f_mkfs+0x85c>
c0007b9e:	8d 45 78             	lea    eax,[ebp+0x78]
c0007ba1:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ba6:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bac:	31 db                	xor    ebx,ebx
c0007bae:	e8 e6 a0 ff ff       	call   c0001c99 <st_word>
c0007bb3:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bc1:	e8 d3 a0 ff ff       	call   c0001c99 <st_word>
c0007bc6:	31 c9                	xor    ecx,ecx
c0007bc8:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007bcb:	83 f8 01             	cmp    eax,0x1
c0007bce:	76 13                	jbe    c0007be3 <f_mkfs+0x8ac>
c0007bd0:	83 f9 70             	cmp    ecx,0x70
c0007bd3:	74 0e                	je     c0007be3 <f_mkfs+0x8ac>
c0007bd5:	89 da                	mov    edx,ebx
c0007bd7:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007bdc:	e8 41 a5 ff ff       	call   c0002122 <xsum32>
c0007be1:	89 c3                	mov    ebx,eax
c0007be3:	41                   	inc    ecx
c0007be4:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007bea:	75 dc                	jne    c0007bc8 <f_mkfs+0x891>
c0007bec:	89 f0                	mov    eax,esi
c0007bee:	89 fa                	mov    edx,edi
c0007bf0:	83 c0 01             	add    eax,0x1
c0007bf3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007bf7:	83 d2 00             	adc    edx,0x0
c0007bfa:	83 ec 0c             	sub    esp,0xc
c0007bfd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c01:	6a 01                	push   0x1
c0007c03:	57                   	push   edi
c0007c04:	56                   	push   esi
c0007c05:	55                   	push   ebp
c0007c06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c0a:	e8 e3 9f ff ff       	call   c0001bf2 <disk_write>
c0007c0f:	83 c4 20             	add    esp,0x20
c0007c12:	85 c0                	test   eax,eax
c0007c14:	0f 85 ce 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	b9 00 02 00 00       	mov    ecx,0x200
c0007c21:	89 e8                	mov    eax,ebp
c0007c23:	e8 93 a0 ff ff       	call   c0001cbb <mem_set>
c0007c28:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c2d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c30:	e8 64 a0 ff ff       	call   c0001c99 <st_word>
c0007c35:	89 f0                	mov    eax,esi
c0007c37:	89 fa                	mov    edx,edi
c0007c39:	83 c0 09             	add    eax,0x9
c0007c3c:	83 d2 00             	adc    edx,0x0
c0007c3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c46:	31 c9                	xor    ecx,ecx
c0007c48:	41                   	inc    ecx
c0007c49:	89 da                	mov    edx,ebx
c0007c4b:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c50:	e8 cd a4 ff ff       	call   c0002122 <xsum32>
c0007c55:	89 c3                	mov    ebx,eax
c0007c57:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c5d:	75 e9                	jne    c0007c48 <f_mkfs+0x911>
c0007c5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c63:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c67:	83 c0 01             	add    eax,0x1
c0007c6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c6e:	83 d2 00             	adc    edx,0x0
c0007c71:	83 ec 0c             	sub    esp,0xc
c0007c74:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c78:	6a 01                	push   0x1
c0007c7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c82:	55                   	push   ebp
c0007c83:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c87:	e8 66 9f ff ff       	call   c0001bf2 <disk_write>
c0007c8c:	83 c4 20             	add    esp,0x20
c0007c8f:	85 c0                	test   eax,eax
c0007c91:	0f 85 51 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c9b:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007c9f:	75 09                	jne    c0007caa <f_mkfs+0x973>
c0007ca1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ca4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ca8:	74 12                	je     c0007cbc <f_mkfs+0x985>
c0007caa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cb2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cb6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cba:	eb 8a                	jmp    c0007c46 <f_mkfs+0x90f>
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	b9 00 02 00 00       	mov    ecx,0x200
c0007cc3:	89 e8                	mov    eax,ebp
c0007cc5:	e8 f1 9f ff ff       	call   c0001cbb <mem_set>
c0007cca:	83 c6 0b             	add    esi,0xb
c0007ccd:	83 d7 00             	adc    edi,0x0
c0007cd0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cd4:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007cd8:	31 c9                	xor    ecx,ecx
c0007cda:	41                   	inc    ecx
c0007cdb:	89 da                	mov    edx,ebx
c0007cdd:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ce2:	e8 3b a4 ff ff       	call   c0002122 <xsum32>
c0007ce7:	89 c3                	mov    ebx,eax
c0007ce9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007cef:	75 e9                	jne    c0007cda <f_mkfs+0x9a3>
c0007cf1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007cf4:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007cf8:	83 c6 01             	add    esi,0x1
c0007cfb:	83 d7 00             	adc    edi,0x0
c0007cfe:	83 ec 0c             	sub    esp,0xc
c0007d01:	6a 01                	push   0x1
c0007d03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d0b:	55                   	push   ebp
c0007d0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d10:	e8 dd 9e ff ff       	call   c0001bf2 <disk_write>
c0007d15:	83 c4 20             	add    esp,0x20
c0007d18:	85 c0                	test   eax,eax
c0007d1a:	0f 85 c8 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d20:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d24:	75 06                	jne    c0007d2c <f_mkfs+0x9f5>
c0007d26:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d2a:	74 09                	je     c0007d35 <f_mkfs+0x9fe>
c0007d2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d2f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d33:	eb a3                	jmp    c0007cd8 <f_mkfs+0x9a1>
c0007d35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d39:	89 da                	mov    edx,ebx
c0007d3b:	01 e8                	add    eax,ebp
c0007d3d:	e8 5b 9f ff ff       	call   c0001c9d <st_dword>
c0007d42:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d47:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d4f:	75 e4                	jne    c0007d35 <f_mkfs+0x9fe>
c0007d51:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d54:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d58:	83 c6 02             	add    esi,0x2
c0007d5b:	83 d7 00             	adc    edi,0x0
c0007d5e:	83 ec 0c             	sub    esp,0xc
c0007d61:	6a 01                	push   0x1
c0007d63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d6b:	55                   	push   ebp
c0007d6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d70:	e8 7d 9e ff ff       	call   c0001bf2 <disk_write>
c0007d75:	83 c4 20             	add    esp,0x20
c0007d78:	85 c0                	test   eax,eax
c0007d7a:	0f 85 68 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d80:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007d85:	74 0d                	je     c0007d94 <f_mkfs+0xa5d>
c0007d87:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007d8f:	e9 43 fd ff ff       	jmp    c0007ad7 <f_mkfs+0x7a0>
c0007d94:	b1 07                	mov    cl,0x7
c0007d96:	e9 e3 05 00 00       	jmp    c000837e <f_mkfs+0x1047>
c0007d9b:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007da0:	0f 85 4f 02 00 00    	jne    c0007ff5 <f_mkfs+0xcbe>
c0007da6:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dab:	0f 86 22 02 00 00    	jbe    c0007fd3 <f_mkfs+0xc9c>
c0007db1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db6:	0f 85 81 06 00 00    	jne    c000843d <f_mkfs+0x1106>
c0007dbc:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc3:	83 f8 40             	cmp    eax,0x40
c0007dc6:	0f 87 51 06 00 00    	ja     c000841d <f_mkfs+0x10e6>
c0007dcc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dd0:	85 ff                	test   edi,edi
c0007dd2:	75 1c                	jne    c0007df0 <f_mkfs+0xab9>
c0007dd4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007dd7:	ba 60 90 02 c0       	mov    edx,0xc0029060
c0007ddc:	c1 e9 0c             	shr    ecx,0xc
c0007ddf:	bf 01 00 00 00       	mov    edi,0x1
c0007de4:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007de7:	66 85 c0             	test   ax,ax
c0007dea:	0f 85 95 01 00 00    	jne    c0007f85 <f_mkfs+0xc4e>
c0007df0:	31 d2                	xor    edx,edx
c0007df2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007df5:	f7 f7                	div    edi
c0007df7:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfc:	0f 86 95 01 00 00    	jbe    c0007f97 <f_mkfs+0xc60>
c0007e02:	83 c0 02             	add    eax,0x2
c0007e05:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e0a:	01 c0                	add    eax,eax
c0007e0c:	05 ff 01 00 00       	add    eax,0x1ff
c0007e11:	be 01 00 00 00       	mov    esi,0x1
c0007e16:	c1 e8 09             	shr    eax,0x9
c0007e19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e21:	c1 e0 05             	shl    eax,0x5
c0007e24:	c1 e8 09             	shr    eax,0x9
c0007e27:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e2b:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e30:	31 d2                	xor    edx,edx
c0007e32:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e36:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e3a:	89 f0                	mov    eax,esi
c0007e3c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e40:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e44:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e48:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e4c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e57:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e5b:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e5f:	31 db                	xor    ebx,ebx
c0007e61:	01 c8                	add    eax,ecx
c0007e63:	11 da                	adc    edx,ebx
c0007e65:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e69:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e6d:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e71:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e75:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e79:	f7 da                	neg    edx
c0007e7b:	21 d1                	and    ecx,edx
c0007e7d:	29 d9                	sub    ecx,ebx
c0007e7f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e84:	0f 85 20 01 00 00    	jne    c0007faa <f_mkfs+0xc73>
c0007e8a:	31 db                	xor    ebx,ebx
c0007e8c:	01 ce                	add    esi,ecx
c0007e8e:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007e92:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007e96:	31 d2                	xor    edx,edx
c0007e98:	89 f8                	mov    eax,edi
c0007e9a:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007e9e:	c1 e0 04             	shl    eax,0x4
c0007ea1:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ea5:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ea9:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ead:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eb1:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eb4:	19 d3                	sbb    ebx,edx
c0007eb6:	0f 82 40 01 00 00    	jb     c0007ffc <f_mkfs+0xcc5>
c0007ebc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ebf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec3:	89 c8                	mov    eax,ecx
c0007ec5:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007eca:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ece:	29 f0                	sub    eax,esi
c0007ed0:	29 d0                	sub    eax,edx
c0007ed2:	31 d2                	xor    edx,edx
c0007ed4:	f7 f7                	div    edi
c0007ed6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007edb:	89 c3                	mov    ebx,eax
c0007edd:	0f 85 b8 fe ff ff    	jne    c0007d9b <f_mkfs+0xa64>
c0007ee3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ee8:	0f 87 1d 01 00 00    	ja     c000800b <f_mkfs+0xcd4>
c0007eee:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ef3:	0f 85 03 01 00 00    	jne    c0007ffc <f_mkfs+0xcc5>
c0007ef9:	83 ff 01             	cmp    edi,0x1
c0007efc:	0f 86 fa 00 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c0007f02:	d1 ef                	shr    edi,1
c0007f04:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f08:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f0c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f0f:	85 db                	test   ebx,ebx
c0007f11:	75 2d                	jne    c0007f40 <f_mkfs+0xc09>
c0007f13:	89 cb                	mov    ebx,ecx
c0007f15:	ba 70 90 02 c0       	mov    edx,0xc0029070
c0007f1a:	c1 eb 11             	shr    ebx,0x11
c0007f1d:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f25:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f28:	66 85 c0             	test   ax,ax
c0007f2b:	74 11                	je     c0007f3e <f_mkfs+0xc07>
c0007f2d:	83 c2 02             	add    edx,0x2
c0007f30:	39 d8                	cmp    eax,ebx
c0007f32:	77 0a                	ja     c0007f3e <f_mkfs+0xc07>
c0007f34:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f38:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f3c:	eb e7                	jmp    c0007f25 <f_mkfs+0xbee>
c0007f3e:	31 db                	xor    ebx,ebx
c0007f40:	31 d2                	xor    edx,edx
c0007f42:	89 c8                	mov    eax,ecx
c0007f44:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f48:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f4f:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f54:	c1 ea 09             	shr    edx,0x9
c0007f57:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f5c:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f60:	0f 87 96 00 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007f66:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f6a:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f72:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f76:	be 20 00 00 00       	mov    esi,0x20
c0007f7b:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f80:	e9 a6 fe ff ff       	jmp    c0007e2b <f_mkfs+0xaf4>
c0007f85:	83 c2 02             	add    edx,0x2
c0007f88:	39 c8                	cmp    eax,ecx
c0007f8a:	0f 87 60 fe ff ff    	ja     c0007df0 <f_mkfs+0xab9>
c0007f90:	01 ff                	add    edi,edi
c0007f92:	e9 4d fe ff ff       	jmp    c0007de4 <f_mkfs+0xaad>
c0007f97:	8d 04 40             	lea    eax,[eax+eax*2]
c0007f9a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f9f:	40                   	inc    eax
c0007fa0:	d1 e8                	shr    eax,1
c0007fa2:	83 c0 03             	add    eax,0x3
c0007fa5:	e9 62 fe ff ff       	jmp    c0007e0c <f_mkfs+0xad5>
c0007faa:	31 d2                	xor    edx,edx
c0007fac:	89 c8                	mov    eax,ecx
c0007fae:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fb2:	85 d2                	test   edx,edx
c0007fb4:	74 0c                	je     c0007fc2 <f_mkfs+0xc8b>
c0007fb6:	49                   	dec    ecx
c0007fb7:	46                   	inc    esi
c0007fb8:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fbd:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fc2:	89 c8                	mov    eax,ecx
c0007fc4:	31 d2                	xor    edx,edx
c0007fc6:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fca:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007fce:	e9 c3 fe ff ff       	jmp    c0007e96 <f_mkfs+0xb5f>
c0007fd3:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007fd8:	77 31                	ja     c000800b <f_mkfs+0xcd4>
c0007fda:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fdf:	75 1b                	jne    c0007ffc <f_mkfs+0xcc5>
c0007fe1:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007fe4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007fe8:	3d 80 00 00 00       	cmp    eax,0x80
c0007fed:	0f 86 d9 fd ff ff    	jbe    c0007dcc <f_mkfs+0xa95>
c0007ff3:	eb 07                	jmp    c0007ffc <f_mkfs+0xcc5>
c0007ff5:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007ffa:	76 0a                	jbe    c0008006 <f_mkfs+0xccf>
c0007ffc:	bb 0e 00 00 00       	mov    ebx,0xe
c0008001:	e9 ff 03 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c0008006:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000800b:	31 d2                	xor    edx,edx
c000800d:	b9 00 02 00 00       	mov    ecx,0x200
c0008012:	89 e8                	mov    eax,ebp
c0008014:	e8 a2 9c ff ff       	call   c0001cbb <mem_set>
c0008019:	b9 0b 00 00 00       	mov    ecx,0xb
c000801e:	ba 82 91 02 c0       	mov    edx,0xc0029182
c0008023:	89 e8                	mov    eax,ebp
c0008025:	e8 7c 9c ff ff       	call   c0001ca6 <mem_cpy>
c000802a:	8d 45 0b             	lea    eax,[ebp+0xb]
c000802d:	ba 00 02 00 00       	mov    edx,0x200
c0008032:	e8 62 9c ff ff       	call   c0001c99 <st_word>
c0008037:	89 f8                	mov    eax,edi
c0008039:	0f b7 d6             	movzx  edx,si
c000803c:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000803f:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008042:	e8 52 9c ff ff       	call   c0001c99 <st_word>
c0008047:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000804b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008050:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008053:	75 08                	jne    c000805d <f_mkfs+0xd26>
c0008055:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000805d:	8d 45 11             	lea    eax,[ebp+0x11]
c0008060:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008064:	e8 30 9c ff ff       	call   c0001c99 <st_word>
c0008069:	b8 ff ff 00 00       	mov    eax,0xffff
c000806e:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0008072:	39 d0                	cmp    eax,edx
c0008074:	b8 00 00 00 00       	mov    eax,0x0
c0008079:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c000807d:	72 0a                	jb     c0008089 <f_mkfs+0xd52>
c000807f:	8d 45 13             	lea    eax,[ebp+0x13]
c0008082:	e8 12 9c ff ff       	call   c0001c99 <st_word>
c0008087:	eb 08                	jmp    c0008091 <f_mkfs+0xd5a>
c0008089:	8d 45 20             	lea    eax,[ebp+0x20]
c000808c:	e8 0c 9c ff ff       	call   c0001c9d <st_dword>
c0008091:	8d 45 18             	lea    eax,[ebp+0x18]
c0008094:	ba 3f 00 00 00       	mov    edx,0x3f
c0008099:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c000809d:	e8 f7 9b ff ff       	call   c0001c99 <st_word>
c00080a2:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080a5:	ba ff 00 00 00       	mov    edx,0xff
c00080aa:	e8 ea 9b ff ff       	call   c0001c99 <st_word>
c00080af:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080b6:	e8 e2 9b ff ff       	call   c0001c9d <st_dword>
c00080bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c0:	75 57                	jne    c0008119 <f_mkfs+0xde2>
c00080c2:	8d 45 43             	lea    eax,[ebp+0x43]
c00080c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00080ca:	e8 ce 9b ff ff       	call   c0001c9d <st_dword>
c00080cf:	8d 45 24             	lea    eax,[ebp+0x24]
c00080d2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080d6:	e8 c2 9b ff ff       	call   c0001c9d <st_dword>
c00080db:	8d 45 2c             	lea    eax,[ebp+0x2c]
c00080de:	ba 02 00 00 00       	mov    edx,0x2
c00080e3:	e8 b5 9b ff ff       	call   c0001c9d <st_dword>
c00080e8:	8d 45 30             	lea    eax,[ebp+0x30]
c00080eb:	ba 01 00 00 00       	mov    edx,0x1
c00080f0:	e8 a4 9b ff ff       	call   c0001c99 <st_word>
c00080f5:	8d 45 32             	lea    eax,[ebp+0x32]
c00080f8:	ba 06 00 00 00       	mov    edx,0x6
c00080fd:	e8 97 9b ff ff       	call   c0001c99 <st_word>
c0008102:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008106:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000810a:	8d 45 47             	lea    eax,[ebp+0x47]
c000810d:	b9 13 00 00 00       	mov    ecx,0x13
c0008112:	ba 8e 91 02 c0       	mov    edx,0xc002918e
c0008117:	eb 2f                	jmp    c0008148 <f_mkfs+0xe11>
c0008119:	8d 45 27             	lea    eax,[ebp+0x27]
c000811c:	ba 00 00 21 50       	mov    edx,0x50210000
c0008121:	e8 77 9b ff ff       	call   c0001c9d <st_dword>
c0008126:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000812b:	8d 45 16             	lea    eax,[ebp+0x16]
c000812e:	e8 66 9b ff ff       	call   c0001c99 <st_word>
c0008133:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008137:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000813b:	8d 45 2b             	lea    eax,[ebp+0x2b]
c000813e:	b9 13 00 00 00       	mov    ecx,0x13
c0008143:	ba a2 91 02 c0       	mov    edx,0xc00291a2
c0008148:	e8 59 9b ff ff       	call   c0001ca6 <mem_cpy>
c000814d:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008153:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008158:	89 f0                	mov    eax,esi
c000815a:	e8 3a 9b ff ff       	call   c0001c99 <st_word>
c000815f:	83 ec 0c             	sub    esp,0xc
c0008162:	6a 01                	push   0x1
c0008164:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008168:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000816c:	55                   	push   ebp
c000816d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008171:	e8 7c 9a ff ff       	call   c0001bf2 <disk_write>
c0008176:	83 c4 20             	add    esp,0x20
c0008179:	85 c0                	test   eax,eax
c000817b:	0f 85 67 02 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0008181:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008186:	0f 85 b7 00 00 00    	jne    c0008243 <f_mkfs+0xf0c>
c000818c:	83 ec 0c             	sub    esp,0xc
c000818f:	6a 01                	push   0x1
c0008191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008195:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008199:	83 c0 06             	add    eax,0x6
c000819c:	83 d2 00             	adc    edx,0x0
c000819f:	52                   	push   edx
c00081a0:	50                   	push   eax
c00081a1:	55                   	push   ebp
c00081a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081a6:	e8 47 9a ff ff       	call   c0001bf2 <disk_write>
c00081ab:	83 c4 20             	add    esp,0x20
c00081ae:	b9 00 02 00 00       	mov    ecx,0x200
c00081b3:	31 d2                	xor    edx,edx
c00081b5:	89 e8                	mov    eax,ebp
c00081b7:	e8 ff 9a ff ff       	call   c0001cbb <mem_set>
c00081bc:	ba 52 52 61 41       	mov    edx,0x41615252
c00081c1:	89 e8                	mov    eax,ebp
c00081c3:	e8 d5 9a ff ff       	call   c0001c9d <st_dword>
c00081c8:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081ce:	ba 72 72 41 61       	mov    edx,0x61417272
c00081d3:	e8 c5 9a ff ff       	call   c0001c9d <st_dword>
c00081d8:	8d 53 ff             	lea    edx,[ebx-0x1]
c00081db:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c00081e1:	e8 b7 9a ff ff       	call   c0001c9d <st_dword>
c00081e6:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c00081ec:	ba 02 00 00 00       	mov    edx,0x2
c00081f1:	e8 a7 9a ff ff       	call   c0001c9d <st_dword>
c00081f6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081fb:	89 f0                	mov    eax,esi
c00081fd:	e8 97 9a ff ff       	call   c0001c99 <st_word>
c0008202:	83 ec 0c             	sub    esp,0xc
c0008205:	6a 01                	push   0x1
c0008207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000820b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000820f:	83 c0 07             	add    eax,0x7
c0008212:	83 d2 00             	adc    edx,0x0
c0008215:	52                   	push   edx
c0008216:	50                   	push   eax
c0008217:	55                   	push   ebp
c0008218:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000821c:	e8 d1 99 ff ff       	call   c0001bf2 <disk_write>
c0008221:	83 c4 14             	add    esp,0x14
c0008224:	6a 01                	push   0x1
c0008226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000822a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000822e:	83 c0 01             	add    eax,0x1
c0008231:	83 d2 00             	adc    edx,0x0
c0008234:	52                   	push   edx
c0008235:	50                   	push   eax
c0008236:	55                   	push   ebp
c0008237:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000823b:	e8 b2 99 ff ff       	call   c0001bf2 <disk_write>
c0008240:	83 c4 20             	add    esp,0x20
c0008243:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000824a:	31 d2                	xor    edx,edx
c000824c:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008252:	31 db                	xor    ebx,ebx
c0008254:	89 e8                	mov    eax,ebp
c0008256:	e8 60 9a ff ff       	call   c0001cbb <mem_set>
c000825b:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008260:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008267:	0f 94 c3             	sete   bl
c000826a:	4b                   	dec    ebx
c000826b:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008271:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008277:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000827c:	75 21                	jne    c000829f <f_mkfs+0xf68>
c000827e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008283:	89 e8                	mov    eax,ebp
c0008285:	e8 13 9a ff ff       	call   c0001c9d <st_dword>
c000828a:	8d 45 04             	lea    eax,[ebp+0x4]
c000828d:	83 ca ff             	or     edx,0xffffffff
c0008290:	e8 08 9a ff ff       	call   c0001c9d <st_dword>
c0008295:	8d 45 08             	lea    eax,[ebp+0x8]
c0008298:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000829d:	eb 04                	jmp    c00082a3 <f_mkfs+0xf6c>
c000829f:	89 da                	mov    edx,ebx
c00082a1:	89 e8                	mov    eax,ebp
c00082a3:	e8 f5 99 ff ff       	call   c0001c9d <st_dword>
c00082a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082b8:	39 ce                	cmp    esi,ecx
c00082ba:	76 02                	jbe    c00082be <f_mkfs+0xf87>
c00082bc:	89 ce                	mov    esi,ecx
c00082be:	83 ec 0c             	sub    esp,0xc
c00082c1:	56                   	push   esi
c00082c2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082c6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082ca:	55                   	push   ebp
c00082cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082cf:	e8 1e 99 ff ff       	call   c0001bf2 <disk_write>
c00082d4:	83 c4 20             	add    esp,0x20
c00082d7:	85 c0                	test   eax,eax
c00082d9:	0f 85 09 01 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00082df:	31 d2                	xor    edx,edx
c00082e1:	b9 00 02 00 00       	mov    ecx,0x200
c00082e6:	89 e8                	mov    eax,ebp
c00082e8:	e8 ce 99 ff ff       	call   c0001cbb <mem_set>
c00082ed:	31 d2                	xor    edx,edx
c00082ef:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00082f3:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00082f7:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00082fb:	75 b3                	jne    c00082b0 <f_mkfs+0xf79>
c00082fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008300:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008307:	40                   	inc    eax
c0008308:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000830c:	0f 87 65 ff ff ff    	ja     c0008277 <f_mkfs+0xf40>
c0008312:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008317:	74 04                	je     c000831d <f_mkfs+0xfe6>
c0008319:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000831d:	89 fb                	mov    ebx,edi
c000831f:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008323:	76 04                	jbe    c0008329 <f_mkfs+0xff2>
c0008325:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	53                   	push   ebx
c000832d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008331:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008335:	55                   	push   ebp
c0008336:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000833a:	e8 b3 98 ff ff       	call   c0001bf2 <disk_write>
c000833f:	83 c4 20             	add    esp,0x20
c0008342:	85 c0                	test   eax,eax
c0008344:	0f 85 9e 00 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000834a:	31 d2                	xor    edx,edx
c000834c:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008350:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008354:	29 df                	sub    edi,ebx
c0008356:	75 c5                	jne    c000831d <f_mkfs+0xfe6>
c0008358:	b1 0c                	mov    cl,0xc
c000835a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000835f:	74 1d                	je     c000837e <f_mkfs+0x1047>
c0008361:	b8 ff ff 00 00       	mov    eax,0xffff
c0008366:	b1 06                	mov    cl,0x6
c0008368:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000836c:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008370:	72 0c                	jb     c000837e <f_mkfs+0x1047>
c0008372:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008377:	0f 94 c1             	sete   cl
c000837a:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000837e:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008383:	75 4c                	jne    c00083d1 <f_mkfs+0x109a>
c0008385:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008389:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000838d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008394:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000839b:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083a6:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083b1:	0f b6 c9             	movzx  ecx,cl
c00083b4:	83 ec 0c             	sub    esp,0xc
c00083b7:	55                   	push   ebp
c00083b8:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083c3:	e8 2f c2 ff ff       	call   c00045f7 <create_partition>
c00083c8:	83 c4 10             	add    esp,0x10
c00083cb:	89 c3                	mov    ebx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	75 34                	jne    c0008405 <f_mkfs+0x10ce>
c00083d1:	31 db                	xor    ebx,ebx
c00083d3:	50                   	push   eax
c00083d4:	6a 00                	push   0x0
c00083d6:	6a 00                	push   0x0
c00083d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083dc:	e8 27 98 ff ff       	call   c0001c08 <disk_ioctl>
c00083e1:	83 c4 10             	add    esp,0x10
c00083e4:	85 c0                	test   eax,eax
c00083e6:	74 1d                	je     c0008405 <f_mkfs+0x10ce>
c00083e8:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00083f0:	75 0c                	jne    c00083fe <f_mkfs+0x10c7>
c00083f2:	83 ec 0c             	sub    esp,0xc
c00083f5:	55                   	push   ebp
c00083f6:	e8 75 00 00 00       	call   c0008470 <ff_memfree>
c00083fb:	83 c4 10             	add    esp,0x10
c00083fe:	bb 01 00 00 00       	mov    ebx,0x1
c0008403:	eb 48                	jmp    c000844d <f_mkfs+0x1116>
c0008405:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000840d:	75 3e                	jne    c000844d <f_mkfs+0x1116>
c000840f:	83 ec 0c             	sub    esp,0xc
c0008412:	55                   	push   ebp
c0008413:	e8 58 00 00 00       	call   c0008470 <ff_memfree>
c0008418:	83 c4 10             	add    esp,0x10
c000841b:	eb 30                	jmp    c000844d <f_mkfs+0x1116>
c000841d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008422:	0f 85 eb fa ff ff    	jne    c0007f13 <f_mkfs+0xbdc>
c0008428:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000842c:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008432:	0f 86 b8 f9 ff ff    	jbe    c0007df0 <f_mkfs+0xab9>
c0008438:	e9 bf fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000843d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008442:	0f 85 c0 fa ff ff    	jne    c0007f08 <f_mkfs+0xbd1>
c0008448:	e9 af fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000844d:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008453:	89 d8                	mov    eax,ebx
c0008455:	5b                   	pop    ebx
c0008456:	5e                   	pop    esi
c0008457:	5f                   	pop    edi
c0008458:	5d                   	pop    ebp
c0008459:	c3                   	ret    

c000845a <ff_memalloc>:
c000845a:	83 ec 0c             	sub    esp,0xc
c000845d:	83 ec 0c             	sub    esp,0xc
c0008460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008464:	e8 33 71 00 00       	call   c000f59c <malloc>
c0008469:	83 c4 10             	add    esp,0x10
c000846c:	83 c4 0c             	add    esp,0xc
c000846f:	c3                   	ret    

c0008470 <ff_memfree>:
c0008470:	83 ec 0c             	sub    esp,0xc
c0008473:	83 ec 0c             	sub    esp,0xc
c0008476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000847a:	e8 2d 71 00 00       	call   c000f5ac <free>
c000847f:	83 c4 10             	add    esp,0x10
c0008482:	90                   	nop
c0008483:	83 c4 0c             	add    esp,0xc
c0008486:	c3                   	ret    

c0008487 <ff_uni2oem>:
c0008487:	83 ec 14             	sub    esp,0x14
c000848a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000848e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008492:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008499:	c7 44 24 0c c0 94 02 c0 	mov    DWORD PTR [esp+0xc],0xc00294c0
c00084a1:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084a6:	77 0b                	ja     c00084b3 <ff_uni2oem+0x2c>
c00084a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ac:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084b1:	eb 5b                	jmp    c000850e <ff_uni2oem+0x87>
c00084b3:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084bb:	77 51                	ja     c000850e <ff_uni2oem+0x87>
c00084bd:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084c3:	75 49                	jne    c000850e <ff_uni2oem+0x87>
c00084c5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084cc:	eb 0b                	jmp    c00084d9 <ff_uni2oem+0x52>
c00084ce:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084d3:	40                   	inc    eax
c00084d4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084d9:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00084df:	77 1b                	ja     c00084fc <ff_uni2oem+0x75>
c00084e1:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00084e6:	01 c0                	add    eax,eax
c00084e8:	89 c2                	mov    edx,eax
c00084ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084ee:	01 d0                	add    eax,edx
c00084f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00084f3:	0f b7 c0             	movzx  eax,ax
c00084f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00084fa:	75 d2                	jne    c00084ce <ff_uni2oem+0x47>
c00084fc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008501:	83 e8 80             	sub    eax,0xffffff80
c0008504:	25 ff 00 00 00       	and    eax,0xff
c0008509:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000850e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008513:	83 c4 14             	add    esp,0x14
c0008516:	c3                   	ret    

c0008517 <ff_oem2uni>:
c0008517:	83 ec 18             	sub    esp,0x18
c000851a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000851e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008522:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008527:	66 89 04 24          	mov    WORD PTR [esp],ax
c000852b:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008532:	c7 44 24 10 c0 94 02 c0 	mov    DWORD PTR [esp+0x10],0xc00294c0
c000853a:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008540:	77 0b                	ja     c000854d <ff_oem2uni+0x36>
c0008542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008546:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000854b:	eb 2d                	jmp    c000857a <ff_oem2uni+0x63>
c000854d:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008553:	75 25                	jne    c000857a <ff_oem2uni+0x63>
c0008555:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000855c:	77 1c                	ja     c000857a <ff_oem2uni+0x63>
c000855e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008563:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008568:	01 c0                	add    eax,eax
c000856a:	89 c2                	mov    edx,eax
c000856c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008570:	01 d0                	add    eax,edx
c0008572:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008575:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000857a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000857f:	83 c4 18             	add    esp,0x18
c0008582:	c3                   	ret    

c0008583 <ff_wtoupper>:
c0008583:	83 ec 10             	sub    esp,0x10
c0008586:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000858e:	0f 87 3e 01 00 00    	ja     c00086d2 <ff_wtoupper+0x14f>
c0008594:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008598:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000859d:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085a4:	77 07                	ja     c00085ad <ff_wtoupper+0x2a>
c00085a6:	b8 c0 92 02 c0       	mov    eax,0xc00292c0
c00085ab:	eb 05                	jmp    c00085b2 <ff_wtoupper+0x2f>
c00085ad:	b8 00 92 02 c0       	mov    eax,0xc0029200
c00085b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085ba:	8d 50 02             	lea    edx,[eax+0x2]
c00085bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085c1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085c4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085c9:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085cf:	0f 84 f4 00 00 00    	je     c00086c9 <ff_wtoupper+0x146>
c00085d5:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085da:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00085df:	0f 82 e4 00 00 00    	jb     c00086c9 <ff_wtoupper+0x146>
c00085e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085e9:	8d 50 02             	lea    edx,[eax+0x2]
c00085ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085f3:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00085f8:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00085fd:	66 c1 e8 08          	shr    ax,0x8
c0008601:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008606:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000860d:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008612:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008617:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000861c:	01 ca                	add    edx,ecx
c000861e:	39 d0                	cmp    eax,edx
c0008620:	0f 8d 86 00 00 00    	jge    c00086ac <ff_wtoupper+0x129>
c0008626:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000862b:	83 f8 08             	cmp    eax,0x8
c000862e:	0f 87 94 00 00 00    	ja     c00086c8 <ff_wtoupper+0x145>
c0008634:	8b 04 85 c0 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e40]
c000863b:	ff e0                	jmp    eax
c000863d:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008642:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008647:	29 c2                	sub    edx,eax
c0008649:	89 d0                	mov    eax,edx
c000864b:	01 c0                	add    eax,eax
c000864d:	89 c2                	mov    edx,eax
c000864f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008653:	01 d0                	add    eax,edx
c0008655:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008658:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000865d:	eb 4b                	jmp    c00086aa <ff_wtoupper+0x127>
c000865f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008664:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008668:	83 e0 01             	and    eax,0x1
c000866b:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008670:	eb 38                	jmp    c00086aa <ff_wtoupper+0x127>
c0008672:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008678:	eb 30                	jmp    c00086aa <ff_wtoupper+0x127>
c000867a:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008680:	eb 28                	jmp    c00086aa <ff_wtoupper+0x127>
c0008682:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008688:	eb 20                	jmp    c00086aa <ff_wtoupper+0x127>
c000868a:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008690:	eb 18                	jmp    c00086aa <ff_wtoupper+0x127>
c0008692:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008698:	eb 10                	jmp    c00086aa <ff_wtoupper+0x127>
c000869a:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086a0:	eb 08                	jmp    c00086aa <ff_wtoupper+0x127>
c00086a2:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086a9:	90                   	nop
c00086aa:	eb 1c                	jmp    c00086c8 <ff_wtoupper+0x145>
c00086ac:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086b2:	0f 85 fe fe ff ff    	jne    c00085b6 <ff_wtoupper+0x33>
c00086b8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086bd:	01 c0                	add    eax,eax
c00086bf:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086c3:	e9 ee fe ff ff       	jmp    c00085b6 <ff_wtoupper+0x33>
c00086c8:	90                   	nop
c00086c9:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086d6:	83 c4 10             	add    esp,0x10
c00086d9:	c3                   	ret    

c00086da <psrc_set_converter>:
c00086da:	56                   	push   esi
c00086db:	89 d6                	mov    esi,edx
c00086dd:	53                   	push   ebx
c00086de:	89 c3                	mov    ebx,eax
c00086e0:	83 ec 0c             	sub    esp,0xc
c00086e3:	52                   	push   edx
c00086e4:	50                   	push   eax
c00086e5:	e8 6f 55 00 00       	call   c000dc59 <sinc_set_converter>
c00086ea:	83 c4 10             	add    esp,0x10
c00086ed:	85 c0                	test   eax,eax
c00086ef:	74 25                	je     c0008716 <psrc_set_converter+0x3c>
c00086f1:	50                   	push   eax
c00086f2:	50                   	push   eax
c00086f3:	56                   	push   esi
c00086f4:	53                   	push   ebx
c00086f5:	e8 17 5d 00 00       	call   c000e411 <zoh_set_converter>
c00086fa:	83 c4 10             	add    esp,0x10
c00086fd:	85 c0                	test   eax,eax
c00086ff:	74 15                	je     c0008716 <psrc_set_converter+0x3c>
c0008701:	51                   	push   ecx
c0008702:	51                   	push   ecx
c0008703:	56                   	push   esi
c0008704:	53                   	push   ebx
c0008705:	e8 0f 11 00 00       	call   c0009819 <linear_set_converter>
c000870a:	83 c4 10             	add    esp,0x10
c000870d:	ba 0a 00 00 00       	mov    edx,0xa
c0008712:	85 c0                	test   eax,eax
c0008714:	75 02                	jne    c0008718 <psrc_set_converter+0x3e>
c0008716:	31 d2                	xor    edx,edx
c0008718:	89 d0                	mov    eax,edx
c000871a:	5a                   	pop    edx
c000871b:	5b                   	pop    ebx
c000871c:	5e                   	pop    esi
c000871d:	c3                   	ret    

c000871e <src_delete>:
c000871e:	53                   	push   ebx
c000871f:	83 ec 08             	sub    esp,0x8
c0008722:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008726:	85 db                	test   ebx,ebx
c0008728:	74 29                	je     c0008753 <src_delete+0x35>
c000872a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000872d:	85 c0                	test   eax,eax
c000872f:	74 0c                	je     c000873d <src_delete+0x1f>
c0008731:	83 ec 0c             	sub    esp,0xc
c0008734:	50                   	push   eax
c0008735:	e8 72 6e 00 00       	call   c000f5ac <free>
c000873a:	83 c4 10             	add    esp,0x10
c000873d:	50                   	push   eax
c000873e:	6a 3c                	push   0x3c
c0008740:	6a 00                	push   0x0
c0008742:	53                   	push   ebx
c0008743:	e8 08 80 ff ff       	call   c0000750 <memset>
c0008748:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000874b:	e8 5c 6e 00 00       	call   c000f5ac <free>
c0008750:	83 c4 10             	add    esp,0x10
c0008753:	31 c0                	xor    eax,eax
c0008755:	83 c4 08             	add    esp,0x8
c0008758:	5b                   	pop    ebx
c0008759:	c3                   	ret    

c000875a <src_process>:
c000875a:	55                   	push   ebp
c000875b:	57                   	push   edi
c000875c:	56                   	push   esi
c000875d:	53                   	push   ebx
c000875e:	83 ec 1c             	sub    esp,0x1c
c0008761:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008765:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008769:	85 ed                	test   ebp,ebp
c000876b:	0f 84 6f 01 00 00    	je     c00088e0 <src_process+0x186>
c0008771:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008775:	0f 84 6c 01 00 00    	je     c00088e7 <src_process+0x18d>
c000877b:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000877f:	0f 84 62 01 00 00    	je     c00088e7 <src_process+0x18d>
c0008785:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c000878c:	0f 85 5c 01 00 00    	jne    c00088ee <src_process+0x194>
c0008792:	85 db                	test   ebx,ebx
c0008794:	0f 84 5b 01 00 00    	je     c00088f5 <src_process+0x19b>
c000879a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000879c:	85 f6                	test   esi,esi
c000879e:	0f 84 58 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087a4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087a7:	85 ff                	test   edi,edi
c00087a9:	0f 84 4d 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087af:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087b2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087bd:	68 00 00 70 3f       	push   0x3f700000
c00087c2:	6a 00                	push   0x0
c00087c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087cc:	e8 06 f9 01 00       	call   c00280d7 <__ltdf2>
c00087d1:	83 c4 10             	add    esp,0x10
c00087d4:	85 c0                	test   eax,eax
c00087d6:	0f 88 27 01 00 00    	js     c0008903 <src_process+0x1a9>
c00087dc:	68 00 00 70 40       	push   0x40700000
c00087e1:	6a 00                	push   0x0
c00087e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087eb:	e8 c9 f8 01 00       	call   c00280b9 <__gtdf2>
c00087f0:	83 c4 10             	add    esp,0x10
c00087f3:	85 c0                	test   eax,eax
c00087f5:	0f 8f 08 01 00 00    	jg     c0008903 <src_process+0x1a9>
c00087fb:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00087ff:	79 07                	jns    c0008808 <src_process+0xae>
c0008801:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008808:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000880b:	85 c0                	test   eax,eax
c000880d:	79 50                	jns    c000885f <src_process+0x105>
c000880f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008816:	39 fe                	cmp    esi,edi
c0008818:	72 37                	jb     c0008851 <src_process+0xf7>
c000881a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008821:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008828:	68 00 00 70 3f       	push   0x3f700000
c000882d:	6a 00                	push   0x0
c000882f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008832:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008835:	e8 9d f8 01 00       	call   c00280d7 <__ltdf2>
c000883a:	83 c4 10             	add    esp,0x10
c000883d:	85 c0                	test   eax,eax
c000883f:	79 37                	jns    c0008878 <src_process+0x11e>
c0008841:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008845:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008849:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000884c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000884f:	eb 27                	jmp    c0008878 <src_process+0x11e>
c0008851:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008854:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008858:	8d 04 86             	lea    eax,[esi+eax*4]
c000885b:	39 c7                	cmp    edi,eax
c000885d:	eb 0d                	jmp    c000886c <src_process+0x112>
c000885f:	39 fe                	cmp    esi,edi
c0008861:	72 ee                	jb     c0008851 <src_process+0xf7>
c0008863:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008867:	8d 04 87             	lea    eax,[edi+eax*4]
c000886a:	39 c6                	cmp    esi,eax
c000886c:	73 ac                	jae    c000881a <src_process+0xc0>
c000886e:	b8 10 00 00 00       	mov    eax,0x10
c0008873:	e9 90 00 00 00       	jmp    c0008908 <src_process+0x1ae>
c0008878:	83 ec 10             	sub    esp,0x10
c000887b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000887e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008881:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008884:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008887:	e8 50 ef 01 00       	call   c00277dc <__subdf3>
c000888c:	83 c4 18             	add    esp,0x18
c000888f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008893:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008897:	52                   	push   edx
c0008898:	50                   	push   eax
c0008899:	e8 d2 f9 01 00       	call   c0028270 <fabs>
c000889e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088a6:	83 c4 10             	add    esp,0x10
c00088a9:	68 af 03 d2 3c       	push   0x3cd203af
c00088ae:	68 16 56 e7 9e       	push   0x9ee75616
c00088b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088bb:	e8 17 f8 01 00       	call   c00280d7 <__ltdf2>
c00088c0:	83 c4 10             	add    esp,0x10
c00088c3:	85 c0                	test   eax,eax
c00088c5:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088c9:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088cd:	79 05                	jns    c00088d4 <src_process+0x17a>
c00088cf:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088d2:	eb 03                	jmp    c00088d7 <src_process+0x17d>
c00088d4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088d7:	83 c4 1c             	add    esp,0x1c
c00088da:	5b                   	pop    ebx
c00088db:	5e                   	pop    esi
c00088dc:	5f                   	pop    edi
c00088dd:	5d                   	pop    ebp
c00088de:	ff e0                	jmp    eax
c00088e0:	b8 02 00 00 00       	mov    eax,0x2
c00088e5:	eb 21                	jmp    c0008908 <src_process+0x1ae>
c00088e7:	b8 07 00 00 00       	mov    eax,0x7
c00088ec:	eb 1a                	jmp    c0008908 <src_process+0x1ae>
c00088ee:	b8 12 00 00 00       	mov    eax,0x12
c00088f3:	eb 13                	jmp    c0008908 <src_process+0x1ae>
c00088f5:	b8 03 00 00 00       	mov    eax,0x3
c00088fa:	eb 0c                	jmp    c0008908 <src_process+0x1ae>
c00088fc:	b8 04 00 00 00       	mov    eax,0x4
c0008901:	eb 05                	jmp    c0008908 <src_process+0x1ae>
c0008903:	b8 06 00 00 00       	mov    eax,0x6
c0008908:	83 c4 1c             	add    esp,0x1c
c000890b:	5b                   	pop    ebx
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	5d                   	pop    ebp
c000890f:	c3                   	ret    

c0008910 <src_callback_read>:
c0008910:	55                   	push   ebp
c0008911:	57                   	push   edi
c0008912:	56                   	push   esi
c0008913:	53                   	push   ebx
c0008914:	83 ec 3c             	sub    esp,0x3c
c0008917:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000891b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000891f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008923:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008927:	85 ed                	test   ebp,ebp
c0008929:	0f 8e 52 01 00 00    	jle    c0008a81 <src_callback_read+0x171>
c000892f:	85 db                	test   ebx,ebx
c0008931:	0f 84 4a 01 00 00    	je     c0008a81 <src_callback_read+0x171>
c0008937:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000893e:	74 0c                	je     c000894c <src_callback_read+0x3c>
c0008940:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008947:	e9 35 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000894c:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008950:	75 0c                	jne    c000895e <src_callback_read+0x4e>
c0008952:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008959:	e9 23 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000895e:	51                   	push   ecx
c000895f:	6a 24                	push   0x24
c0008961:	6a 00                	push   0x0
c0008963:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008967:	50                   	push   eax
c0008968:	e8 e3 7d ff ff       	call   c0000750 <memset>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	68 00 00 70 3f       	push   0x3f700000
c0008975:	6a 00                	push   0x0
c0008977:	57                   	push   edi
c0008978:	56                   	push   esi
c0008979:	e8 59 f7 01 00       	call   c00280d7 <__ltdf2>
c000897e:	83 c4 10             	add    esp,0x10
c0008981:	85 c0                	test   eax,eax
c0008983:	78 3e                	js     c00089c3 <src_callback_read+0xb3>
c0008985:	68 00 00 70 40       	push   0x40700000
c000898a:	6a 00                	push   0x0
c000898c:	57                   	push   edi
c000898d:	56                   	push   esi
c000898e:	e8 26 f7 01 00       	call   c00280b9 <__gtdf2>
c0008993:	83 c4 10             	add    esp,0x10
c0008996:	85 c0                	test   eax,eax
c0008998:	7f 29                	jg     c00089c3 <src_callback_read+0xb3>
c000899a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000899e:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089a6:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089aa:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ad:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089b5:	31 f6                	xor    esi,esi
c00089b7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089be:	e9 97 00 00 00       	jmp    c0008a5a <src_callback_read+0x14a>
c00089c3:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089ca:	e9 b2 00 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c00089cf:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089d7:	52                   	push   edx
c00089d8:	52                   	push   edx
c00089d9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089dd:	50                   	push   eax
c00089de:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089e1:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00089e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00089e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00089ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	85 c0                	test   eax,eax
c00089f5:	75 08                	jne    c00089ff <src_callback_read+0xef>
c00089f7:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00089ff:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a06:	50                   	push   eax
c0008a07:	50                   	push   eax
c0008a08:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a0c:	50                   	push   eax
c0008a0d:	53                   	push   ebx
c0008a0e:	e8 47 fd ff ff       	call   c000875a <src_process>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a1d:	85 c0                	test   eax,eax
c0008a1f:	75 49                	jne    c0008a6a <src_callback_read+0x15a>
c0008a21:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a25:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a28:	89 f9                	mov    ecx,edi
c0008a2a:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a2e:	0f af ca             	imul   ecx,edx
c0008a31:	c1 e1 02             	shl    ecx,0x2
c0008a34:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a38:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a3c:	0f af d1             	imul   edx,ecx
c0008a3f:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a43:	c1 e2 02             	shl    edx,0x2
c0008a46:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a4a:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a4d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a52:	74 12                	je     c0008a66 <src_callback_read+0x156>
c0008a54:	39 d5                	cmp    ebp,edx
c0008a56:	7e 14                	jle    c0008a6c <src_callback_read+0x15c>
c0008a58:	89 d6                	mov    esi,edx
c0008a5a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a5f:	75 9e                	jne    c00089ff <src_callback_read+0xef>
c0008a61:	e9 69 ff ff ff       	jmp    c00089cf <src_callback_read+0xbf>
c0008a66:	85 c9                	test   ecx,ecx
c0008a68:	75 ea                	jne    c0008a54 <src_callback_read+0x144>
c0008a6a:	89 f2                	mov    edx,esi
c0008a6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a70:	85 c0                	test   eax,eax
c0008a72:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a75:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a79:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a7c:	74 05                	je     c0008a83 <src_callback_read+0x173>
c0008a7e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a81:	31 d2                	xor    edx,edx
c0008a83:	83 c4 3c             	add    esp,0x3c
c0008a86:	89 d0                	mov    eax,edx
c0008a88:	5b                   	pop    ebx
c0008a89:	5e                   	pop    esi
c0008a8a:	5f                   	pop    edi
c0008a8b:	5d                   	pop    ebp
c0008a8c:	c3                   	ret    

c0008a8d <src_set_ratio>:
c0008a8d:	57                   	push   edi
c0008a8e:	ba 02 00 00 00       	mov    edx,0x2
c0008a93:	56                   	push   esi
c0008a94:	53                   	push   ebx
c0008a95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a9d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008aa1:	85 db                	test   ebx,ebx
c0008aa3:	74 4c                	je     c0008af1 <src_set_ratio+0x64>
c0008aa5:	ba 07 00 00 00       	mov    edx,0x7
c0008aaa:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008aae:	74 41                	je     c0008af1 <src_set_ratio+0x64>
c0008ab0:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008ab4:	74 3b                	je     c0008af1 <src_set_ratio+0x64>
c0008ab6:	68 00 00 70 3f       	push   0x3f700000
c0008abb:	6a 00                	push   0x0
c0008abd:	57                   	push   edi
c0008abe:	56                   	push   esi
c0008abf:	e8 13 f6 01 00       	call   c00280d7 <__ltdf2>
c0008ac4:	83 c4 10             	add    esp,0x10
c0008ac7:	ba 06 00 00 00       	mov    edx,0x6
c0008acc:	85 c0                	test   eax,eax
c0008ace:	78 21                	js     c0008af1 <src_set_ratio+0x64>
c0008ad0:	68 00 00 70 40       	push   0x40700000
c0008ad5:	6a 00                	push   0x0
c0008ad7:	57                   	push   edi
c0008ad8:	56                   	push   esi
c0008ad9:	e8 db f5 01 00       	call   c00280b9 <__gtdf2>
c0008ade:	83 c4 10             	add    esp,0x10
c0008ae1:	ba 06 00 00 00       	mov    edx,0x6
c0008ae6:	85 c0                	test   eax,eax
c0008ae8:	7f 07                	jg     c0008af1 <src_set_ratio+0x64>
c0008aea:	89 33                	mov    DWORD PTR [ebx],esi
c0008aec:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008aef:	31 d2                	xor    edx,edx
c0008af1:	5b                   	pop    ebx
c0008af2:	89 d0                	mov    eax,edx
c0008af4:	5e                   	pop    esi
c0008af5:	5f                   	pop    edi
c0008af6:	c3                   	ret    

c0008af7 <src_get_channels>:
c0008af7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008afb:	b8 02 00 00 00       	mov    eax,0x2
c0008b00:	85 d2                	test   edx,edx
c0008b02:	74 14                	je     c0008b18 <src_get_channels+0x21>
c0008b04:	b8 07 00 00 00       	mov    eax,0x7
c0008b09:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b0d:	74 09                	je     c0008b18 <src_get_channels+0x21>
c0008b0f:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b13:	74 03                	je     c0008b18 <src_get_channels+0x21>
c0008b15:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b18:	c3                   	ret    

c0008b19 <src_reset>:
c0008b19:	53                   	push   ebx
c0008b1a:	b8 02 00 00 00       	mov    eax,0x2
c0008b1f:	83 ec 08             	sub    esp,0x8
c0008b22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b26:	85 db                	test   ebx,ebx
c0008b28:	74 36                	je     c0008b60 <src_reset+0x47>
c0008b2a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b2d:	85 c0                	test   eax,eax
c0008b2f:	74 09                	je     c0008b3a <src_reset+0x21>
c0008b31:	83 ec 0c             	sub    esp,0xc
c0008b34:	53                   	push   ebx
c0008b35:	ff d0                	call   eax
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	31 c0                	xor    eax,eax
c0008b3c:	31 d2                	xor    edx,edx
c0008b3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b41:	89 03                	mov    DWORD PTR [ebx],eax
c0008b43:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b46:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b49:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b50:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b5e:	31 c0                	xor    eax,eax
c0008b60:	83 c4 08             	add    esp,0x8
c0008b63:	5b                   	pop    ebx
c0008b64:	c3                   	ret    

c0008b65 <src_new>:
c0008b65:	57                   	push   edi
c0008b66:	56                   	push   esi
c0008b67:	53                   	push   ebx
c0008b68:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b6c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b70:	85 f6                	test   esi,esi
c0008b72:	74 73                	je     c0008be7 <src_new+0x82>
c0008b74:	85 ff                	test   edi,edi
c0008b76:	7f 08                	jg     c0008b80 <src_new+0x1b>
c0008b78:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b7e:	eb 1e                	jmp    c0008b9e <src_new+0x39>
c0008b80:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008b86:	50                   	push   eax
c0008b87:	50                   	push   eax
c0008b88:	6a 3c                	push   0x3c
c0008b8a:	6a 01                	push   0x1
c0008b8c:	e8 3b 6a 00 00       	call   c000f5cc <calloc>
c0008b91:	83 c4 10             	add    esp,0x10
c0008b94:	89 c3                	mov    ebx,eax
c0008b96:	85 c0                	test   eax,eax
c0008b98:	75 10                	jne    c0008baa <src_new+0x45>
c0008b9a:	85 f6                	test   esi,esi
c0008b9c:	75 04                	jne    c0008ba2 <src_new+0x3d>
c0008b9e:	31 db                	xor    ebx,ebx
c0008ba0:	eb 4b                	jmp    c0008bed <src_new+0x88>
c0008ba2:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008ba8:	eb 43                	jmp    c0008bed <src_new+0x88>
c0008baa:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bad:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bb8:	e8 1d fb ff ff       	call   c00086da <psrc_set_converter>
c0008bbd:	85 c0                	test   eax,eax
c0008bbf:	74 18                	je     c0008bd9 <src_new+0x74>
c0008bc1:	85 f6                	test   esi,esi
c0008bc3:	74 06                	je     c0008bcb <src_new+0x66>
c0008bc5:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008bcb:	83 ec 0c             	sub    esp,0xc
c0008bce:	53                   	push   ebx
c0008bcf:	31 db                	xor    ebx,ebx
c0008bd1:	e8 d6 69 00 00       	call   c000f5ac <free>
c0008bd6:	83 c4 10             	add    esp,0x10
c0008bd9:	83 ec 0c             	sub    esp,0xc
c0008bdc:	53                   	push   ebx
c0008bdd:	e8 37 ff ff ff       	call   c0008b19 <src_reset>
c0008be2:	83 c4 10             	add    esp,0x10
c0008be5:	eb 06                	jmp    c0008bed <src_new+0x88>
c0008be7:	85 ff                	test   edi,edi
c0008be9:	7f 9b                	jg     c0008b86 <src_new+0x21>
c0008beb:	eb b1                	jmp    c0008b9e <src_new+0x39>
c0008bed:	89 d8                	mov    eax,ebx
c0008bef:	5b                   	pop    ebx
c0008bf0:	5e                   	pop    esi
c0008bf1:	5f                   	pop    edi
c0008bf2:	c3                   	ret    

c0008bf3 <src_callback_new>:
c0008bf3:	56                   	push   esi
c0008bf4:	53                   	push   ebx
c0008bf5:	53                   	push   ebx
c0008bf6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008bfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bfe:	85 f6                	test   esi,esi
c0008c00:	75 0e                	jne    c0008c10 <src_callback_new+0x1d>
c0008c02:	31 db                	xor    ebx,ebx
c0008c04:	85 c0                	test   eax,eax
c0008c06:	74 47                	je     c0008c4f <src_callback_new+0x5c>
c0008c08:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c0e:	eb 3f                	jmp    c0008c4f <src_callback_new+0x5c>
c0008c10:	85 c0                	test   eax,eax
c0008c12:	74 06                	je     c0008c1a <src_callback_new+0x27>
c0008c14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c1a:	51                   	push   ecx
c0008c1b:	50                   	push   eax
c0008c1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c24:	e8 3c ff ff ff       	call   c0008b65 <src_new>
c0008c29:	83 c4 10             	add    esp,0x10
c0008c2c:	89 c3                	mov    ebx,eax
c0008c2e:	85 c0                	test   eax,eax
c0008c30:	74 1d                	je     c0008c4f <src_callback_new+0x5c>
c0008c32:	83 ec 0c             	sub    esp,0xc
c0008c35:	50                   	push   eax
c0008c36:	e8 de fe ff ff       	call   c0008b19 <src_reset>
c0008c3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c3f:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c46:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c49:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c4c:	83 c4 10             	add    esp,0x10
c0008c4f:	89 d8                	mov    eax,ebx
c0008c51:	5a                   	pop    edx
c0008c52:	5b                   	pop    ebx
c0008c53:	5e                   	pop    esi
c0008c54:	c3                   	ret    

c0008c55 <src_get_name>:
c0008c55:	53                   	push   ebx
c0008c56:	83 ec 14             	sub    esp,0x14
c0008c59:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c5d:	53                   	push   ebx
c0008c5e:	e8 d0 4f 00 00       	call   c000dc33 <sinc_get_name>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	85 c0                	test   eax,eax
c0008c68:	75 1d                	jne    c0008c87 <src_get_name+0x32>
c0008c6a:	83 ec 0c             	sub    esp,0xc
c0008c6d:	53                   	push   ebx
c0008c6e:	e8 80 57 00 00       	call   c000e3f3 <zoh_get_name>
c0008c73:	83 c4 10             	add    esp,0x10
c0008c76:	85 c0                	test   eax,eax
c0008c78:	75 0d                	jne    c0008c87 <src_get_name+0x32>
c0008c7a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c7e:	83 c4 08             	add    esp,0x8
c0008c81:	5b                   	pop    ebx
c0008c82:	e9 74 0b 00 00       	jmp    c00097fb <linear_get_name>
c0008c87:	83 c4 08             	add    esp,0x8
c0008c8a:	5b                   	pop    ebx
c0008c8b:	c3                   	ret    

c0008c8c <src_get_description>:
c0008c8c:	53                   	push   ebx
c0008c8d:	83 ec 14             	sub    esp,0x14
c0008c90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c94:	53                   	push   ebx
c0008c95:	e8 ac 4f 00 00       	call   c000dc46 <sinc_get_description>
c0008c9a:	83 c4 10             	add    esp,0x10
c0008c9d:	85 c0                	test   eax,eax
c0008c9f:	75 1d                	jne    c0008cbe <src_get_description+0x32>
c0008ca1:	83 ec 0c             	sub    esp,0xc
c0008ca4:	53                   	push   ebx
c0008ca5:	e8 58 57 00 00       	call   c000e402 <zoh_get_description>
c0008caa:	83 c4 10             	add    esp,0x10
c0008cad:	85 c0                	test   eax,eax
c0008caf:	75 0d                	jne    c0008cbe <src_get_description+0x32>
c0008cb1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb5:	83 c4 08             	add    esp,0x8
c0008cb8:	5b                   	pop    ebx
c0008cb9:	e9 4c 0b 00 00       	jmp    c000980a <linear_get_description>
c0008cbe:	83 c4 08             	add    esp,0x8
c0008cc1:	5b                   	pop    ebx
c0008cc2:	c3                   	ret    

c0008cc3 <src_get_version>:
c0008cc3:	b8 c0 95 02 c0       	mov    eax,0xc00295c0
c0008cc8:	c3                   	ret    

c0008cc9 <src_is_valid_ratio>:
c0008cc9:	83 ec 1c             	sub    esp,0x1c
c0008ccc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cdc:	68 00 00 70 3f       	push   0x3f700000
c0008ce1:	6a 00                	push   0x0
c0008ce3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ceb:	e8 e7 f3 01 00       	call   c00280d7 <__ltdf2>
c0008cf0:	83 c4 10             	add    esp,0x10
c0008cf3:	31 d2                	xor    edx,edx
c0008cf5:	85 c0                	test   eax,eax
c0008cf7:	78 1e                	js     c0008d17 <src_is_valid_ratio+0x4e>
c0008cf9:	68 00 00 70 40       	push   0x40700000
c0008cfe:	6a 00                	push   0x0
c0008d00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d08:	e8 ac f3 01 00       	call   c00280b9 <__gtdf2>
c0008d0d:	31 d2                	xor    edx,edx
c0008d0f:	83 c4 10             	add    esp,0x10
c0008d12:	85 c0                	test   eax,eax
c0008d14:	0f 9e c2             	setle  dl
c0008d17:	89 d0                	mov    eax,edx
c0008d19:	83 c4 1c             	add    esp,0x1c
c0008d1c:	c3                   	ret    

c0008d1d <src_error>:
c0008d1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d21:	31 c0                	xor    eax,eax
c0008d23:	85 d2                	test   edx,edx
c0008d25:	74 03                	je     c0008d2a <src_error+0xd>
c0008d27:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d2a:	c3                   	ret    

c0008d2b <src_strerror>:
c0008d2b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d2f:	31 c0                	xor    eax,eax
c0008d31:	83 fa 17             	cmp    edx,0x17
c0008d34:	77 07                	ja     c0008d3d <src_strerror+0x12>
c0008d36:	8b 04 95 20 9a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd65e0]
c0008d3d:	c3                   	ret    

c0008d3e <src_simple>:
c0008d3e:	56                   	push   esi
c0008d3f:	53                   	push   ebx
c0008d40:	83 ec 18             	sub    esp,0x18
c0008d43:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d47:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d4b:	50                   	push   eax
c0008d4c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d54:	e8 0c fe ff ff       	call   c0008b65 <src_new>
c0008d59:	83 c4 10             	add    esp,0x10
c0008d5c:	85 c0                	test   eax,eax
c0008d5e:	75 06                	jne    c0008d66 <src_simple+0x28>
c0008d60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d64:	eb 25                	jmp    c0008d8b <src_simple+0x4d>
c0008d66:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d6d:	89 c3                	mov    ebx,eax
c0008d6f:	50                   	push   eax
c0008d70:	50                   	push   eax
c0008d71:	56                   	push   esi
c0008d72:	53                   	push   ebx
c0008d73:	e8 e2 f9 ff ff       	call   c000875a <src_process>
c0008d78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d7f:	e8 9a f9 ff ff       	call   c000871e <src_delete>
c0008d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008d88:	83 c4 10             	add    esp,0x10
c0008d8b:	83 c4 14             	add    esp,0x14
c0008d8e:	5b                   	pop    ebx
c0008d8f:	5e                   	pop    esi
c0008d90:	c3                   	ret    

c0008d91 <src_short_to_float_array>:
c0008d91:	53                   	push   ebx
c0008d92:	83 ec 18             	sub    esp,0x18
c0008d95:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d99:	85 db                	test   ebx,ebx
c0008d9b:	74 54                	je     c0008df1 <src_short_to_float_array+0x60>
c0008d9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008da1:	4b                   	dec    ebx
c0008da2:	83 ec 0c             	sub    esp,0xc
c0008da5:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008da9:	50                   	push   eax
c0008daa:	e8 bc f0 01 00       	call   c0027e6b <__floatsidf>
c0008daf:	83 c4 10             	add    esp,0x10
c0008db2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008db6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dba:	68 00 00 00 3f       	push   0x3f000000
c0008dbf:	6a 00                	push   0x0
c0008dc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc9:	e8 3a ea 01 00       	call   c0027808 <__muldf3>
c0008dce:	59                   	pop    ecx
c0008dcf:	59                   	pop    ecx
c0008dd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008dd4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008dd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ddc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de0:	e8 f6 f2 01 00       	call   c00280db <__truncdfsf2>
c0008de5:	83 c4 10             	add    esp,0x10
c0008de8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008dec:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008def:	eb a8                	jmp    c0008d99 <src_short_to_float_array+0x8>
c0008df1:	83 c4 18             	add    esp,0x18
c0008df4:	5b                   	pop    ebx
c0008df5:	c3                   	ret    

c0008df6 <src_float_to_short_array>:
c0008df6:	56                   	push   esi
c0008df7:	53                   	push   ebx
c0008df8:	83 ec 14             	sub    esp,0x14
c0008dfb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008dff:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e03:	85 db                	test   ebx,ebx
c0008e05:	0f 84 a4 00 00 00    	je     c0008eaf <src_float_to_short_array+0xb9>
c0008e0b:	83 ec 0c             	sub    esp,0xc
c0008e0e:	4b                   	dec    ebx
c0008e0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e13:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e16:	e8 e4 f3 01 00       	call   c00281ff <__extendsfdf2>
c0008e1b:	83 c4 10             	add    esp,0x10
c0008e1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e26:	68 00 00 e0 41       	push   0x41e00000
c0008e2b:	6a 00                	push   0x0
c0008e2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e35:	e8 ce e9 01 00       	call   c0027808 <__muldf3>
c0008e3a:	83 c4 10             	add    esp,0x10
c0008e3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e45:	68 ff ff df 41       	push   0x41dfffff
c0008e4a:	68 00 00 c0 ff       	push   0xffc00000
c0008e4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e57:	e8 79 f2 01 00       	call   c00280d5 <__gedf2>
c0008e5c:	83 c4 10             	add    esp,0x10
c0008e5f:	85 c0                	test   eax,eax
c0008e61:	78 08                	js     c0008e6b <src_float_to_short_array+0x75>
c0008e63:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e69:	eb 98                	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e6b:	68 00 00 e0 c1       	push   0xc1e00000
c0008e70:	6a 00                	push   0x0
c0008e72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e7a:	e8 5a f2 01 00       	call   c00280d9 <__ledf2>
c0008e7f:	83 c4 10             	add    esp,0x10
c0008e82:	85 c0                	test   eax,eax
c0008e84:	7f 0b                	jg     c0008e91 <src_float_to_short_array+0x9b>
c0008e86:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008e8c:	e9 72 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e91:	50                   	push   eax
c0008e92:	50                   	push   eax
c0008e93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e9b:	e8 f0 f3 01 00       	call   c0028290 <lrint>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	c1 f8 10             	sar    eax,0x10
c0008ea6:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eaa:	e9 54 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008eaf:	83 c4 14             	add    esp,0x14
c0008eb2:	5b                   	pop    ebx
c0008eb3:	5e                   	pop    esi
c0008eb4:	c3                   	ret    

c0008eb5 <src_int_to_float_array>:
c0008eb5:	53                   	push   ebx
c0008eb6:	83 ec 18             	sub    esp,0x18
c0008eb9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ebd:	85 db                	test   ebx,ebx
c0008ebf:	74 52                	je     c0008f13 <src_int_to_float_array+0x5e>
c0008ec1:	83 ec 0c             	sub    esp,0xc
c0008ec4:	4b                   	dec    ebx
c0008ec5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ec9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ecc:	e8 9a ef 01 00       	call   c0027e6b <__floatsidf>
c0008ed1:	83 c4 10             	add    esp,0x10
c0008ed4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ed8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008edc:	68 00 00 00 3e       	push   0x3e000000
c0008ee1:	6a 00                	push   0x0
c0008ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eeb:	e8 18 e9 01 00       	call   c0027808 <__muldf3>
c0008ef0:	59                   	pop    ecx
c0008ef1:	59                   	pop    ecx
c0008ef2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ef6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008efa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008efe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f02:	e8 d4 f1 01 00       	call   c00280db <__truncdfsf2>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f0e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f11:	eb aa                	jmp    c0008ebd <src_int_to_float_array+0x8>
c0008f13:	83 c4 18             	add    esp,0x18
c0008f16:	5b                   	pop    ebx
c0008f17:	c3                   	ret    

c0008f18 <src_float_to_int_array>:
c0008f18:	56                   	push   esi
c0008f19:	53                   	push   ebx
c0008f1a:	83 ec 14             	sub    esp,0x14
c0008f1d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f25:	85 db                	test   ebx,ebx
c0008f27:	0f 84 a2 00 00 00    	je     c0008fcf <src_float_to_int_array+0xb7>
c0008f2d:	83 ec 0c             	sub    esp,0xc
c0008f30:	4b                   	dec    ebx
c0008f31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f35:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f38:	e8 c2 f2 01 00       	call   c00281ff <__extendsfdf2>
c0008f3d:	83 c4 10             	add    esp,0x10
c0008f40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f48:	68 00 00 e0 41       	push   0x41e00000
c0008f4d:	6a 00                	push   0x0
c0008f4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f57:	e8 ac e8 01 00       	call   c0027808 <__muldf3>
c0008f5c:	83 c4 10             	add    esp,0x10
c0008f5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f67:	68 ff ff df 41       	push   0x41dfffff
c0008f6c:	68 00 00 c0 ff       	push   0xffc00000
c0008f71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f79:	e8 57 f1 01 00       	call   c00280d5 <__gedf2>
c0008f7e:	83 c4 10             	add    esp,0x10
c0008f81:	85 c0                	test   eax,eax
c0008f83:	78 09                	js     c0008f8e <src_float_to_int_array+0x76>
c0008f85:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008f8c:	eb 97                	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008f8e:	68 00 00 e0 c1       	push   0xc1e00000
c0008f93:	6a 00                	push   0x0
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9d:	e8 37 f1 01 00       	call   c00280d9 <__ledf2>
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	85 c0                	test   eax,eax
c0008fa7:	7f 0c                	jg     c0008fb5 <src_float_to_int_array+0x9d>
c0008fa9:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fb0:	e9 70 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fb5:	50                   	push   eax
c0008fb6:	50                   	push   eax
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbf:	e8 cc f2 01 00       	call   c0028290 <lrint>
c0008fc4:	83 c4 10             	add    esp,0x10
c0008fc7:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008fca:	e9 56 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fcf:	83 c4 14             	add    esp,0x14
c0008fd2:	5b                   	pop    ebx
c0008fd3:	5e                   	pop    esi
c0008fd4:	c3                   	ret    

c0008fd5 <linear_vari_process>:
c0008fd5:	55                   	push   ebp
c0008fd6:	31 d2                	xor    edx,edx
c0008fd8:	57                   	push   edi
c0008fd9:	56                   	push   esi
c0008fda:	53                   	push   ebx
c0008fdb:	83 ec 3c             	sub    esp,0x3c
c0008fde:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008fe2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008fe6:	0f 8e d3 07 00 00    	jle    c00097bf <linear_vari_process+0x7ea>
c0008fec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ff0:	ba 05 00 00 00       	mov    edx,0x5
c0008ff5:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008ff8:	85 db                	test   ebx,ebx
c0008ffa:	0f 84 bf 07 00 00    	je     c00097bf <linear_vari_process+0x7ea>
c0009000:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009003:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009007:	74 19                	je     c0009022 <linear_vari_process+0x4d>
c0009009:	31 d2                	xor    edx,edx
c000900b:	39 c2                	cmp    edx,eax
c000900d:	7d 0c                	jge    c000901b <linear_vari_process+0x46>
c000900f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009011:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009014:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009018:	42                   	inc    edx
c0009019:	eb f0                	jmp    c000900b <linear_vari_process+0x36>
c000901b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009022:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009025:	0f af d0             	imul   edx,eax
c0009028:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000902b:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000902f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009036:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009039:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009040:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009047:	8b 00                	mov    eax,DWORD PTR [eax]
c0009049:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000904d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009051:	68 00 00 70 3f       	push   0x3f700000
c0009056:	6a 00                	push   0x0
c0009058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000905c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009060:	e8 72 f0 01 00       	call   c00280d7 <__ltdf2>
c0009065:	83 c4 10             	add    esp,0x10
c0009068:	ba 16 00 00 00       	mov    edx,0x16
c000906d:	85 c0                	test   eax,eax
c000906f:	0f 88 4a 07 00 00    	js     c00097bf <linear_vari_process+0x7ea>
c0009075:	68 00 00 70 40       	push   0x40700000
c000907a:	6a 00                	push   0x0
c000907c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009084:	e8 30 f0 01 00       	call   c00280b9 <__gtdf2>
c0009089:	83 c4 10             	add    esp,0x10
c000908c:	ba 16 00 00 00       	mov    edx,0x16
c0009091:	85 c0                	test   eax,eax
c0009093:	0f 8f 26 07 00 00    	jg     c00097bf <linear_vari_process+0x7ea>
c0009099:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000909d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ab:	68 00 00 f0 3f       	push   0x3ff00000
c00090b0:	6a 00                	push   0x0
c00090b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ba:	e8 18 f0 01 00       	call   c00280d7 <__ltdf2>
c00090bf:	83 c4 10             	add    esp,0x10
c00090c2:	85 c0                	test   eax,eax
c00090c4:	0f 89 89 02 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c00090ca:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090cd:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090d0:	0f 8d 7d 02 00 00    	jge    c0009353 <linear_vari_process+0x37e>
c00090d6:	83 ec 0c             	sub    esp,0xc
c00090d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090dc:	e8 8a ed 01 00       	call   c0027e6b <__floatsidf>
c00090e1:	83 c4 10             	add    esp,0x10
c00090e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00090e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00090eb:	68 00 00 f0 3f       	push   0x3ff00000
c00090f0:	6a 00                	push   0x0
c00090f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fa:	e8 8c e0 01 00       	call   c002718b <__adddf3>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009106:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000910a:	52                   	push   edx
c000910b:	50                   	push   eax
c000910c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009114:	e8 ef e6 01 00       	call   c0027808 <__muldf3>
c0009119:	5d                   	pop    ebp
c000911a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000911e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009122:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009125:	e8 41 ed 01 00       	call   c0027e6b <__floatsidf>
c000912a:	83 c4 10             	add    esp,0x10
c000912d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009131:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009135:	52                   	push   edx
c0009136:	50                   	push   eax
c0009137:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913f:	e8 47 e0 01 00       	call   c002718b <__adddf3>
c0009144:	59                   	pop    ecx
c0009145:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009149:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000914d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009150:	e8 16 ed 01 00       	call   c0027e6b <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000915c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009166:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000916a:	e8 66 ef 01 00       	call   c00280d5 <__gedf2>
c000916f:	83 c4 10             	add    esp,0x10
c0009172:	85 c0                	test   eax,eax
c0009174:	0f 89 d9 01 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c000917a:	85 ff                	test   edi,edi
c000917c:	0f 8e f4 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c0009182:	83 ec 10             	sub    esp,0x10
c0009185:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009188:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000918b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000918f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009192:	ff 30                	push   DWORD PTR [eax]
c0009194:	e8 43 e6 01 00       	call   c00277dc <__subdf3>
c0009199:	83 c4 18             	add    esp,0x18
c000919c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091a4:	52                   	push   edx
c00091a5:	50                   	push   eax
c00091a6:	e8 c5 f0 01 00       	call   c0028270 <fabs>
c00091ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091b3:	83 c4 10             	add    esp,0x10
c00091b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091bb:	68 23 42 92 0c       	push   0xc924223
c00091c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c8:	e8 ec ee 01 00       	call   c00280b9 <__gtdf2>
c00091cd:	83 c4 10             	add    esp,0x10
c00091d0:	85 c0                	test   eax,eax
c00091d2:	0f 8e 9e 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c00091d8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00091dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00091df:	8b 00                	mov    eax,DWORD PTR [eax]
c00091e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e8:	52                   	push   edx
c00091e9:	50                   	push   eax
c00091ea:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ed:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091f0:	e8 e7 e5 01 00       	call   c00277dc <__subdf3>
c00091f5:	59                   	pop    ecx
c00091f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00091fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00091fe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009201:	e8 65 ec 01 00       	call   c0027e6b <__floatsidf>
c0009206:	83 c4 10             	add    esp,0x10
c0009209:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000920d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009211:	52                   	push   edx
c0009212:	50                   	push   eax
c0009213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000921b:	e8 e8 e5 01 00       	call   c0027808 <__muldf3>
c0009220:	5f                   	pop    edi
c0009221:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009225:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009229:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000922c:	e8 3a ec 01 00       	call   c0027e6b <__floatsidf>
c0009231:	83 c4 10             	add    esp,0x10
c0009234:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009238:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000923c:	52                   	push   edx
c000923d:	50                   	push   eax
c000923e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009246:	e8 a1 e8 01 00       	call   c0027aec <__divdf3>
c000924b:	83 c4 10             	add    esp,0x10
c000924e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009252:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009256:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009266:	e8 20 df 01 00       	call   c002718b <__adddf3>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009272:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009276:	31 ff                	xor    edi,edi
c0009278:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c000927b:	0f 8e 9d 00 00 00    	jle    c000931e <linear_vari_process+0x349>
c0009281:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009284:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009288:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000928b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000928f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009292:	8b 06                	mov    eax,DWORD PTR [esi]
c0009294:	52                   	push   edx
c0009295:	52                   	push   edx
c0009296:	55                   	push   ebp
c0009297:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c000929a:	47                   	inc    edi
c000929b:	e8 80 d8 01 00       	call   c0026b20 <__subsf3>
c00092a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00092a3:	e8 57 ef 01 00       	call   c00281ff <__extendsfdf2>
c00092a8:	83 c4 10             	add    esp,0x10
c00092ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092c3:	e8 40 e5 01 00       	call   c0027808 <__muldf3>
c00092c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092d3:	e8 27 ef 01 00       	call   c00281ff <__extendsfdf2>
c00092d8:	83 c4 10             	add    esp,0x10
c00092db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092df:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092e3:	52                   	push   edx
c00092e4:	50                   	push   eax
c00092e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092ed:	e8 99 de 01 00       	call   c002718b <__adddf3>
c00092f2:	59                   	pop    ecx
c00092f3:	5d                   	pop    ebp
c00092f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009300:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009304:	e8 d2 ed 01 00       	call   c00280db <__truncdfsf2>
c0009309:	83 c4 10             	add    esp,0x10
c000930c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000930f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009313:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009316:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009319:	e9 5a ff ff ff       	jmp    c0009278 <linear_vari_process+0x2a3>
c000931e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009322:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009326:	68 00 00 f0 3f       	push   0x3ff00000
c000932b:	6a 00                	push   0x0
c000932d:	e8 ba e7 01 00       	call   c0027aec <__divdf3>
c0009332:	83 c4 10             	add    esp,0x10
c0009335:	89 04 24             	mov    DWORD PTR [esp],eax
c0009338:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000933c:	52                   	push   edx
c000933d:	50                   	push   eax
c000933e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009346:	e8 40 de 01 00       	call   c002718b <__adddf3>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	e9 50 fd ff ff       	jmp    c00090a3 <linear_vari_process+0xce>
c0009353:	50                   	push   eax
c0009354:	50                   	push   eax
c0009355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009359:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935d:	e8 2e ef 01 00       	call   c0028290 <lrint>
c0009362:	83 ec 0c             	sub    esp,0xc
c0009365:	50                   	push   eax
c0009366:	e8 00 eb 01 00       	call   c0027e6b <__floatsidf>
c000936b:	83 c4 10             	add    esp,0x10
c000936e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009372:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000937c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009380:	e8 57 e4 01 00       	call   c00277dc <__subdf3>
c0009385:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009389:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000938d:	83 c4 20             	add    esp,0x20
c0009390:	6a 00                	push   0x0
c0009392:	6a 00                	push   0x0
c0009394:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	e8 36 ed 01 00       	call   c00280d7 <__ltdf2>
c00093a1:	83 c4 10             	add    esp,0x10
c00093a4:	85 c0                	test   eax,eax
c00093a6:	79 1e                	jns    c00093c6 <linear_vari_process+0x3f1>
c00093a8:	68 00 00 f0 3f       	push   0x3ff00000
c00093ad:	6a 00                	push   0x0
c00093af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b7:	e8 cf dd 01 00       	call   c002718b <__adddf3>
c00093bc:	83 c4 10             	add    esp,0x10
c00093bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093c9:	83 ec 10             	sub    esp,0x10
c00093cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093dc:	e8 fb e3 01 00       	call   c00277dc <__subdf3>
c00093e1:	83 c4 18             	add    esp,0x18
c00093e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093ec:	52                   	push   edx
c00093ed:	50                   	push   eax
c00093ee:	e8 9d ee 01 00       	call   c0028290 <lrint>
c00093f3:	83 c4 10             	add    esp,0x10
c00093f6:	0f af f8             	imul   edi,eax
c00093f9:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00093fc:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00093ff:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009402:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009405:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009408:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000940c:	0f 8d 13 03 00 00    	jge    c0009725 <linear_vari_process+0x750>
c0009412:	83 ec 0c             	sub    esp,0xc
c0009415:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009418:	e8 4e ea 01 00       	call   c0027e6b <__floatsidf>
c000941d:	83 c4 10             	add    esp,0x10
c0009420:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009424:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009428:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000942c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009434:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009438:	e8 cb e3 01 00       	call   c0027808 <__muldf3>
c000943d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009440:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009444:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009448:	e8 1e ea 01 00       	call   c0027e6b <__floatsidf>
c000944d:	83 c4 10             	add    esp,0x10
c0009450:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009454:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009458:	52                   	push   edx
c0009459:	50                   	push   eax
c000945a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009462:	e8 24 dd 01 00       	call   c002718b <__adddf3>
c0009467:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	e8 f4 e9 01 00       	call   c0027e6b <__floatsidf>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	52                   	push   edx
c0009483:	50                   	push   eax
c0009484:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009488:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000948c:	e8 46 ec 01 00       	call   c00280d7 <__ltdf2>
c0009491:	83 c4 10             	add    esp,0x10
c0009494:	85 c0                	test   eax,eax
c0009496:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000949a:	0f 89 85 02 00 00    	jns    c0009725 <linear_vari_process+0x750>
c00094a0:	85 c9                	test   ecx,ecx
c00094a2:	0f 8e f5 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094a8:	83 ec 10             	sub    esp,0x10
c00094ab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094ae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094b1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094b8:	ff 30                	push   DWORD PTR [eax]
c00094ba:	e8 1d e3 01 00       	call   c00277dc <__subdf3>
c00094bf:	83 c4 18             	add    esp,0x18
c00094c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ca:	52                   	push   edx
c00094cb:	50                   	push   eax
c00094cc:	e8 9f ed 01 00       	call   c0028270 <fabs>
c00094d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094d9:	83 c4 10             	add    esp,0x10
c00094dc:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00094e1:	68 23 42 92 0c       	push   0xc924223
c00094e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ee:	e8 c6 eb 01 00       	call   c00280b9 <__gtdf2>
c00094f3:	83 c4 10             	add    esp,0x10
c00094f6:	85 c0                	test   eax,eax
c00094f8:	0f 8e 9f 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094fe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009502:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009505:	8b 00                	mov    eax,DWORD PTR [eax]
c0009507:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000950b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000950f:	52                   	push   edx
c0009510:	50                   	push   eax
c0009511:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009514:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009517:	e8 c0 e2 01 00       	call   c00277dc <__subdf3>
c000951c:	5f                   	pop    edi
c000951d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009521:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009525:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009528:	e8 3e e9 01 00       	call   c0027e6b <__floatsidf>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009534:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009538:	52                   	push   edx
c0009539:	50                   	push   eax
c000953a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000953e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009542:	e8 c1 e2 01 00       	call   c0027808 <__muldf3>
c0009547:	5d                   	pop    ebp
c0009548:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000954c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009550:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009553:	e8 13 e9 01 00       	call   c0027e6b <__floatsidf>
c0009558:	83 c4 10             	add    esp,0x10
c000955b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000955f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009563:	52                   	push   edx
c0009564:	50                   	push   eax
c0009565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009569:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000956d:	e8 7a e5 01 00       	call   c0027aec <__divdf3>
c0009572:	83 c4 10             	add    esp,0x10
c0009575:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009579:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000957d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009581:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009585:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009589:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000958d:	e8 f9 db 01 00       	call   c002718b <__adddf3>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009599:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000959d:	31 ff                	xor    edi,edi
c000959f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095a2:	39 f8                	cmp    eax,edi
c00095a4:	0f 8e ac 00 00 00    	jle    c0009656 <linear_vari_process+0x681>
c00095aa:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ac:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095af:	29 c1                	sub    ecx,eax
c00095b1:	89 c8                	mov    eax,ecx
c00095b3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095b6:	01 f8                	add    eax,edi
c00095b8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095bc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095c9:	51                   	push   ecx
c00095ca:	01 f8                	add    eax,edi
c00095cc:	51                   	push   ecx
c00095cd:	47                   	inc    edi
c00095ce:	55                   	push   ebp
c00095cf:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095d2:	e8 49 d5 01 00       	call   c0026b20 <__subsf3>
c00095d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00095da:	e8 20 ec 01 00       	call   c00281ff <__extendsfdf2>
c00095df:	83 c4 10             	add    esp,0x10
c00095e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095ea:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095ee:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095fa:	e8 09 e2 01 00       	call   c0027808 <__muldf3>
c00095ff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000960a:	e8 f0 eb 01 00       	call   c00281ff <__extendsfdf2>
c000960f:	83 c4 10             	add    esp,0x10
c0009612:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009616:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000961a:	52                   	push   edx
c000961b:	50                   	push   eax
c000961c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009620:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009624:	e8 62 db 01 00       	call   c002718b <__adddf3>
c0009629:	5d                   	pop    ebp
c000962a:	59                   	pop    ecx
c000962b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000962f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009633:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009637:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963b:	e8 9b ea 01 00       	call   c00280db <__truncdfsf2>
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009647:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000964b:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000964e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009651:	e9 49 ff ff ff       	jmp    c000959f <linear_vari_process+0x5ca>
c0009656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965e:	68 00 00 f0 3f       	push   0x3ff00000
c0009663:	6a 00                	push   0x0
c0009665:	e8 82 e4 01 00       	call   c0027aec <__divdf3>
c000966a:	83 c4 10             	add    esp,0x10
c000966d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009671:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009675:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009679:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000967d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009681:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009685:	e8 01 db 01 00       	call   c002718b <__adddf3>
c000968a:	59                   	pop    ecx
c000968b:	5f                   	pop    edi
c000968c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009690:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	e8 ef eb 01 00       	call   c0028290 <lrint>
c00096a1:	83 ec 0c             	sub    esp,0xc
c00096a4:	50                   	push   eax
c00096a5:	e8 c1 e7 01 00       	call   c0027e6b <__floatsidf>
c00096aa:	83 c4 10             	add    esp,0x10
c00096ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096b5:	52                   	push   edx
c00096b6:	50                   	push   eax
c00096b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bf:	e8 18 e1 01 00       	call   c00277dc <__subdf3>
c00096c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096cc:	83 c4 20             	add    esp,0x20
c00096cf:	6a 00                	push   0x0
c00096d1:	6a 00                	push   0x0
c00096d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096db:	e8 f7 e9 01 00       	call   c00280d7 <__ltdf2>
c00096e0:	83 c4 10             	add    esp,0x10
c00096e3:	85 c0                	test   eax,eax
c00096e5:	79 1e                	jns    c0009705 <linear_vari_process+0x730>
c00096e7:	68 00 00 f0 3f       	push   0x3ff00000
c00096ec:	6a 00                	push   0x0
c00096ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f6:	e8 90 da 01 00       	call   c002718b <__adddf3>
c00096fb:	83 c4 10             	add    esp,0x10
c00096fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0009701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009705:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009708:	83 ec 10             	sub    esp,0x10
c000970b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000970f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009713:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009717:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000971b:	e8 bc e0 01 00       	call   c00277dc <__subdf3>
c0009720:	e9 bc fc ff ff       	jmp    c00093e1 <linear_vari_process+0x40c>
c0009725:	39 fd                	cmp    ebp,edi
c0009727:	7d 38                	jge    c0009761 <linear_vari_process+0x78c>
c0009729:	83 ec 0c             	sub    esp,0xc
c000972c:	89 f8                	mov    eax,edi
c000972e:	29 e8                	sub    eax,ebp
c0009730:	99                   	cdq    
c0009731:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009734:	50                   	push   eax
c0009735:	e8 31 e7 01 00       	call   c0027e6b <__floatsidf>
c000973a:	83 c4 10             	add    esp,0x10
c000973d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009741:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974f:	e8 37 da 01 00       	call   c002718b <__adddf3>
c0009754:	83 c4 10             	add    esp,0x10
c0009757:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000975a:	89 04 24             	mov    DWORD PTR [esp],eax
c000975d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009761:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009765:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009768:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000976c:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000976f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009772:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009775:	85 c0                	test   eax,eax
c0009777:	7f 29                	jg     c00097a2 <linear_vari_process+0x7cd>
c0009779:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000977d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009785:	89 01                	mov    DWORD PTR [ecx],eax
c0009787:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000978a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000978d:	99                   	cdq    
c000978e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009791:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009794:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009797:	99                   	cdq    
c0009798:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000979b:	31 d2                	xor    edx,edx
c000979d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097a0:	eb 1d                	jmp    c00097bf <linear_vari_process+0x7ea>
c00097a2:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097a5:	31 d2                	xor    edx,edx
c00097a7:	29 c8                	sub    eax,ecx
c00097a9:	c1 e0 02             	shl    eax,0x2
c00097ac:	39 d1                	cmp    ecx,edx
c00097ae:	7e c9                	jle    c0009779 <linear_vari_process+0x7a4>
c00097b0:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097b2:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097b5:	83 c0 04             	add    eax,0x4
c00097b8:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097bc:	42                   	inc    edx
c00097bd:	eb ed                	jmp    c00097ac <linear_vari_process+0x7d7>
c00097bf:	83 c4 3c             	add    esp,0x3c
c00097c2:	89 d0                	mov    eax,edx
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <linear_reset>:
c00097c9:	83 ec 0c             	sub    esp,0xc
c00097cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097d3:	85 c0                	test   eax,eax
c00097d5:	74 20                	je     c00097f7 <linear_reset+0x2e>
c00097d7:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00097da:	83 c0 1c             	add    eax,0x1c
c00097dd:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00097e0:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00097e7:	c1 e2 02             	shl    edx,0x2
c00097ea:	51                   	push   ecx
c00097eb:	52                   	push   edx
c00097ec:	6a 00                	push   0x0
c00097ee:	50                   	push   eax
c00097ef:	e8 5c 6f ff ff       	call   c0000750 <memset>
c00097f4:	83 c4 10             	add    esp,0x10
c00097f7:	83 c4 0c             	add    esp,0xc
c00097fa:	c3                   	ret    

c00097fb <linear_get_name>:
c00097fb:	31 c0                	xor    eax,eax
c00097fd:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009802:	75 05                	jne    c0009809 <linear_get_name+0xe>
c0009804:	b8 80 9a 02 c0       	mov    eax,0xc0029a80
c0009809:	c3                   	ret    

c000980a <linear_get_description>:
c000980a:	31 c0                	xor    eax,eax
c000980c:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009811:	75 05                	jne    c0009818 <linear_get_description+0xe>
c0009813:	b8 94 9a 02 c0       	mov    eax,0xc0029a94
c0009818:	c3                   	ret    

c0009819 <linear_set_converter>:
c0009819:	53                   	push   ebx
c000981a:	b8 0a 00 00 00       	mov    eax,0xa
c000981f:	83 ec 08             	sub    esp,0x8
c0009822:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009826:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000982b:	75 6e                	jne    c000989b <linear_set_converter+0x82>
c000982d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009830:	85 c0                	test   eax,eax
c0009832:	74 13                	je     c0009847 <linear_set_converter+0x2e>
c0009834:	83 ec 0c             	sub    esp,0xc
c0009837:	50                   	push   eax
c0009838:	e8 6f 5d 00 00       	call   c000f5ac <free>
c000983d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009844:	83 c4 10             	add    esp,0x10
c0009847:	50                   	push   eax
c0009848:	50                   	push   eax
c0009849:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000984c:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009853:	50                   	push   eax
c0009854:	6a 01                	push   0x1
c0009856:	e8 71 5d 00 00       	call   c000f5cc <calloc>
c000985b:	83 c4 10             	add    esp,0x10
c000985e:	89 c2                	mov    edx,eax
c0009860:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009863:	85 d2                	test   edx,edx
c0009865:	b8 01 00 00 00       	mov    eax,0x1
c000986a:	74 2f                	je     c000989b <linear_set_converter+0x82>
c000986c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000986f:	83 ec 0c             	sub    esp,0xc
c0009872:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009875:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000987b:	c7 43 24 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008fd5
c0009882:	c7 43 20 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008fd5
c0009889:	c7 43 28 c9 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097c9
c0009890:	53                   	push   ebx
c0009891:	e8 33 ff ff ff       	call   c00097c9 <linear_reset>
c0009896:	83 c4 10             	add    esp,0x10
c0009899:	31 c0                	xor    eax,eax
c000989b:	83 c4 08             	add    esp,0x8
c000989e:	5b                   	pop    ebx
c000989f:	c3                   	ret    

c00098a0 <int_to_fp>:
c00098a0:	c1 e0 0c             	shl    eax,0xc
c00098a3:	c3                   	ret    

c00098a4 <fp_to_int>:
c00098a4:	c1 f8 0c             	sar    eax,0xc
c00098a7:	c3                   	ret    

c00098a8 <fp_fraction_part>:
c00098a8:	25 ff 0f 00 00       	and    eax,0xfff
c00098ad:	c3                   	ret    

c00098ae <fp_to_double>:
c00098ae:	83 ec 1c             	sub    esp,0x1c
c00098b1:	e8 f2 ff ff ff       	call   c00098a8 <fp_fraction_part>
c00098b6:	83 ec 0c             	sub    esp,0xc
c00098b9:	50                   	push   eax
c00098ba:	e8 ac e5 01 00       	call   c0027e6b <__floatsidf>
c00098bf:	83 c4 10             	add    esp,0x10
c00098c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ca:	68 00 00 30 3f       	push   0x3f300000
c00098cf:	6a 00                	push   0x0
c00098d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d9:	e8 2a df 01 00       	call   c0027808 <__muldf3>
c00098de:	83 c4 2c             	add    esp,0x2c
c00098e1:	c3                   	ret    

c00098e2 <calc_output_single>:
c00098e2:	55                   	push   ebp
c00098e3:	57                   	push   edi
c00098e4:	56                   	push   esi
c00098e5:	89 c6                	mov    esi,eax
c00098e7:	53                   	push   ebx
c00098e8:	89 d3                	mov    ebx,edx
c00098ea:	83 ec 4c             	sub    esp,0x4c
c00098ed:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00098f1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00098f4:	e8 a7 ff ff ff       	call   c00098a0 <int_to_fp>
c00098f9:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00098fc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009900:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009904:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009908:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000990b:	99                   	cdq    
c000990c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009914:	f7 fb                	idiv   ebx
c0009916:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000991e:	89 da                	mov    edx,ebx
c0009920:	0f af d0             	imul   edx,eax
c0009923:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009927:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000992b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000992f:	29 c2                	sub    edx,eax
c0009931:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009938:	83 c5 04             	add    ebp,0x4
c000993b:	e8 6e ff ff ff       	call   c00098ae <fp_to_double>
c0009940:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009944:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000994c:	e8 53 ff ff ff       	call   c00098a4 <fp_to_int>
c0009951:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009954:	52                   	push   edx
c0009955:	52                   	push   edx
c0009956:	51                   	push   ecx
c0009957:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000995b:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000995f:	e8 bc d1 01 00       	call   c0026b20 <__subsf3>
c0009964:	89 04 24             	mov    DWORD PTR [esp],eax
c0009967:	e8 93 e8 01 00       	call   c00281ff <__extendsfdf2>
c000996c:	83 c4 10             	add    esp,0x10
c000996f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009977:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009983:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009987:	e8 7c de 01 00       	call   c0027808 <__muldf3>
c000998c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009990:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009994:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009997:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000999b:	e8 5f e8 01 00       	call   c00281ff <__extendsfdf2>
c00099a0:	83 c4 10             	add    esp,0x10
c00099a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ab:	52                   	push   edx
c00099ac:	50                   	push   eax
c00099ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b5:	e8 d1 d7 01 00       	call   c002718b <__adddf3>
c00099ba:	59                   	pop    ecx
c00099bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099c3:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099c9:	e8 31 e8 01 00       	call   c00281ff <__extendsfdf2>
c00099ce:	83 c4 10             	add    esp,0x10
c00099d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099d9:	52                   	push   edx
c00099da:	50                   	push   eax
c00099db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099e3:	e8 20 de 01 00       	call   c0027808 <__muldf3>
c00099e8:	83 c4 10             	add    esp,0x10
c00099eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00099ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00099f3:	52                   	push   edx
c00099f4:	50                   	push   eax
c00099f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099fd:	e8 89 d7 01 00       	call   c002718b <__adddf3>
c0009a02:	83 c4 10             	add    esp,0x10
c0009a05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a0d:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a11:	0f 89 1d ff ff ff    	jns    c0009934 <calc_output_single+0x52>
c0009a17:	89 d9                	mov    ecx,ebx
c0009a19:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a1d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a21:	89 dd                	mov    ebp,ebx
c0009a23:	29 c8                	sub    eax,ecx
c0009a25:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a2d:	99                   	cdq    
c0009a2e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a36:	f7 fb                	idiv   ebx
c0009a38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a3c:	0f af e8             	imul   ebp,eax
c0009a3f:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a43:	01 cd                	add    ebp,ecx
c0009a45:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a48:	89 e8                	mov    eax,ebp
c0009a4a:	83 ee 04             	sub    esi,0x4
c0009a4d:	e8 5c fe ff ff       	call   c00098ae <fp_to_double>
c0009a52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a5a:	89 e8                	mov    eax,ebp
c0009a5c:	29 dd                	sub    ebp,ebx
c0009a5e:	e8 41 fe ff ff       	call   c00098a4 <fp_to_int>
c0009a63:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a66:	52                   	push   edx
c0009a67:	52                   	push   edx
c0009a68:	51                   	push   ecx
c0009a69:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a6d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a71:	e8 aa d0 01 00       	call   c0026b20 <__subsf3>
c0009a76:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a79:	e8 81 e7 01 00       	call   c00281ff <__extendsfdf2>
c0009a7e:	83 c4 10             	add    esp,0x10
c0009a81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009a85:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009a89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a99:	e8 6a dd 01 00       	call   c0027808 <__muldf3>
c0009a9e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009aa2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009aa6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aa9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aad:	e8 4d e7 01 00       	call   c00281ff <__extendsfdf2>
c0009ab2:	83 c4 10             	add    esp,0x10
c0009ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ab9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009abd:	52                   	push   edx
c0009abe:	50                   	push   eax
c0009abf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac7:	e8 bf d6 01 00       	call   c002718b <__adddf3>
c0009acc:	59                   	pop    ecx
c0009acd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ad1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009ad5:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009adb:	e8 1f e7 01 00       	call   c00281ff <__extendsfdf2>
c0009ae0:	83 c4 10             	add    esp,0x10
c0009ae3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ae7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aeb:	52                   	push   edx
c0009aec:	50                   	push   eax
c0009aed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af5:	e8 0e dd 01 00       	call   c0027808 <__muldf3>
c0009afa:	83 c4 10             	add    esp,0x10
c0009afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b01:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b05:	52                   	push   edx
c0009b06:	50                   	push   eax
c0009b07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0f:	e8 77 d6 01 00       	call   c002718b <__adddf3>
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	85 ed                	test   ebp,ebp
c0009b19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b1d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b21:	0f 8f 21 ff ff ff    	jg     c0009a48 <calc_output_single+0x166>
c0009b27:	52                   	push   edx
c0009b28:	50                   	push   eax
c0009b29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b31:	e8 55 d6 01 00       	call   c002718b <__adddf3>
c0009b36:	83 c4 5c             	add    esp,0x5c
c0009b39:	5b                   	pop    ebx
c0009b3a:	5e                   	pop    esi
c0009b3b:	5f                   	pop    edi
c0009b3c:	5d                   	pop    ebp
c0009b3d:	c3                   	ret    

c0009b3e <calc_output_stereo>:
c0009b3e:	55                   	push   ebp
c0009b3f:	89 cd                	mov    ebp,ecx
c0009b41:	57                   	push   edi
c0009b42:	56                   	push   esi
c0009b43:	53                   	push   ebx
c0009b44:	89 c3                	mov    ebx,eax
c0009b46:	83 ec 6c             	sub    esp,0x6c
c0009b49:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b4d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b54:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b5b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b5f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b63:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b66:	e8 35 fd ff ff       	call   c00098a0 <int_to_fp>
c0009b6b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b73:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b77:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009b7f:	29 c8                	sub    eax,ecx
c0009b81:	99                   	cdq    
c0009b82:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009b8a:	0f af d0             	imul   edx,eax
c0009b8d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009b90:	31 d2                	xor    edx,edx
c0009b92:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009b96:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b9a:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009b9d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009ba1:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009ba4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009ba8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bac:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009baf:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bb4:	29 c1                	sub    ecx,eax
c0009bb6:	31 c0                	xor    eax,eax
c0009bb8:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bc3:	83 c7 08             	add    edi,0x8
c0009bc6:	e8 e3 fc ff ff       	call   c00098ae <fp_to_double>
c0009bcb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009bcf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bd7:	e8 c8 fc ff ff       	call   c00098a4 <fp_to_int>
c0009bdc:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009bdf:	52                   	push   edx
c0009be0:	52                   	push   edx
c0009be1:	51                   	push   ecx
c0009be2:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009be6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bea:	e8 31 cf 01 00       	call   c0026b20 <__subsf3>
c0009bef:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bf2:	e8 08 e6 01 00       	call   c00281ff <__extendsfdf2>
c0009bf7:	83 c4 10             	add    esp,0x10
c0009bfa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009bfe:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c06:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c0a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c0e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c12:	e8 f1 db 01 00       	call   c0027808 <__muldf3>
c0009c17:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c1b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c1f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c26:	e8 d4 e5 01 00       	call   c00281ff <__extendsfdf2>
c0009c2b:	83 c4 10             	add    esp,0x10
c0009c2e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c32:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c36:	52                   	push   edx
c0009c37:	50                   	push   eax
c0009c38:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c3c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c40:	e8 46 d5 01 00       	call   c002718b <__adddf3>
c0009c45:	59                   	pop    ecx
c0009c46:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c4a:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c4e:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c54:	e8 a6 e5 01 00       	call   c00281ff <__extendsfdf2>
c0009c59:	83 c4 10             	add    esp,0x10
c0009c5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c6c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c70:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c74:	e8 8f db 01 00       	call   c0027808 <__muldf3>
c0009c79:	83 c4 10             	add    esp,0x10
c0009c7c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c80:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c84:	52                   	push   edx
c0009c85:	50                   	push   eax
c0009c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8e:	e8 f8 d4 01 00       	call   c002718b <__adddf3>
c0009c93:	59                   	pop    ecx
c0009c94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c98:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009c9c:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ca2:	e8 58 e5 01 00       	call   c00281ff <__extendsfdf2>
c0009ca7:	83 c4 10             	add    esp,0x10
c0009caa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cae:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cb2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cb6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cbe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cc2:	e8 41 db 01 00       	call   c0027808 <__muldf3>
c0009cc7:	83 c4 10             	add    esp,0x10
c0009cca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009cce:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009cd2:	52                   	push   edx
c0009cd3:	50                   	push   eax
c0009cd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cdc:	e8 aa d4 01 00       	call   c002718b <__adddf3>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ce8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cec:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf0:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009cf4:	0f 89 c5 fe ff ff    	jns    c0009bbf <calc_output_stereo+0x81>
c0009cfa:	29 e9                	sub    ecx,ebp
c0009cfc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d04:	29 c8                	sub    eax,ecx
c0009d06:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d0e:	99                   	cdq    
c0009d0f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d13:	31 d2                	xor    edx,edx
c0009d15:	0f af f8             	imul   edi,eax
c0009d18:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d1c:	40                   	inc    eax
c0009d1d:	01 cf                	add    edi,ecx
c0009d1f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d24:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d28:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d30:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d33:	31 c0                	xor    eax,eax
c0009d35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d39:	89 f8                	mov    eax,edi
c0009d3b:	83 eb 08             	sub    ebx,0x8
c0009d3e:	e8 6b fb ff ff       	call   c00098ae <fp_to_double>
c0009d43:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d4b:	89 f8                	mov    eax,edi
c0009d4d:	e8 52 fb ff ff       	call   c00098a4 <fp_to_int>
c0009d52:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d55:	52                   	push   edx
c0009d56:	52                   	push   edx
c0009d57:	55                   	push   ebp
c0009d58:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d5c:	e8 bf cd 01 00       	call   c0026b20 <__subsf3>
c0009d61:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d64:	e8 96 e4 01 00       	call   c00281ff <__extendsfdf2>
c0009d69:	83 c4 10             	add    esp,0x10
c0009d6c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d70:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d74:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d78:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d80:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d84:	e8 7f da 01 00       	call   c0027808 <__muldf3>
c0009d89:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009d8c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d90:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d94:	e8 66 e4 01 00       	call   c00281ff <__extendsfdf2>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009da0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009da4:	52                   	push   edx
c0009da5:	50                   	push   eax
c0009da6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009daa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dae:	e8 d8 d3 01 00       	call   c002718b <__adddf3>
c0009db3:	59                   	pop    ecx
c0009db4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009db8:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dbc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dc2:	e8 38 e4 01 00       	call   c00281ff <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dde:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009de2:	e8 21 da 01 00       	call   c0027808 <__muldf3>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009df2:	52                   	push   edx
c0009df3:	50                   	push   eax
c0009df4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009df8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009dfc:	e8 8a d3 01 00       	call   c002718b <__adddf3>
c0009e01:	5d                   	pop    ebp
c0009e02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e06:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e0a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e10:	e8 ea e3 01 00       	call   c00281ff <__extendsfdf2>
c0009e15:	83 c4 10             	add    esp,0x10
c0009e18:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e1c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e30:	e8 d3 d9 01 00       	call   c0027808 <__muldf3>
c0009e35:	83 c4 10             	add    esp,0x10
c0009e38:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e40:	52                   	push   edx
c0009e41:	50                   	push   eax
c0009e42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e4a:	e8 3c d3 01 00       	call   c002718b <__adddf3>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e56:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e5a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e5e:	85 ff                	test   edi,edi
c0009e60:	0f 8f d3 fe ff ff    	jg     c0009d39 <calc_output_stereo+0x1fb>
c0009e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e76:	e8 10 d3 01 00       	call   c002718b <__adddf3>
c0009e7b:	83 c4 10             	add    esp,0x10
c0009e7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e96:	e8 6d d9 01 00       	call   c0027808 <__muldf3>
c0009e9b:	59                   	pop    ecx
c0009e9c:	5b                   	pop    ebx
c0009e9d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ea1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ea5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ead:	e8 29 e2 01 00       	call   c00280db <__truncdfsf2>
c0009eb2:	83 c4 10             	add    esp,0x10
c0009eb5:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ebc:	89 03                	mov    DWORD PTR [ebx],eax
c0009ebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ece:	e8 b8 d2 01 00       	call   c002718b <__adddf3>
c0009ed3:	83 c4 10             	add    esp,0x10
c0009ed6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ede:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eee:	e8 15 d9 01 00       	call   c0027808 <__muldf3>
c0009ef3:	5e                   	pop    esi
c0009ef4:	5f                   	pop    edi
c0009ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ef9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009efd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f05:	e8 d1 e1 01 00       	call   c00280db <__truncdfsf2>
c0009f0a:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f11:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f14:	83 c4 7c             	add    esp,0x7c
c0009f17:	5b                   	pop    ebx
c0009f18:	5e                   	pop    esi
c0009f19:	5f                   	pop    edi
c0009f1a:	5d                   	pop    ebp
c0009f1b:	c3                   	ret    

c0009f1c <calc_output_quad>:
c0009f1c:	55                   	push   ebp
c0009f1d:	57                   	push   edi
c0009f1e:	56                   	push   esi
c0009f1f:	89 c6                	mov    esi,eax
c0009f21:	53                   	push   ebx
c0009f22:	83 ec 7c             	sub    esp,0x7c
c0009f25:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f29:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f2d:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f34:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f43:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f46:	e8 55 f9 ff ff       	call   c00098a0 <int_to_fp>
c0009f4b:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f4e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f55:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f59:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f5d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f61:	99                   	cdq    
c0009f62:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f66:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f6a:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f6d:	31 d2                	xor    edx,edx
c0009f6f:	0f af d8             	imul   ebx,eax
c0009f72:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009f7a:	0f af c7             	imul   eax,edi
c0009f7d:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009f81:	29 c1                	sub    ecx,eax
c0009f83:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009f8b:	31 c0                	xor    eax,eax
c0009f8d:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009f90:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f94:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f9c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fa0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fa4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fa8:	89 d8                	mov    eax,ebx
c0009faa:	83 c7 10             	add    edi,0x10
c0009fad:	e8 fc f8 ff ff       	call   c00098ae <fp_to_double>
c0009fb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fba:	89 d8                	mov    eax,ebx
c0009fbc:	e8 e3 f8 ff ff       	call   c00098a4 <fp_to_int>
c0009fc1:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fc5:	52                   	push   edx
c0009fc6:	52                   	push   edx
c0009fc7:	51                   	push   ecx
c0009fc8:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009fcc:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fd0:	e8 4b cb 01 00       	call   c0026b20 <__subsf3>
c0009fd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd8:	e8 22 e2 01 00       	call   c00281ff <__extendsfdf2>
c0009fdd:	83 c4 10             	add    esp,0x10
c0009fe0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fe4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff8:	e8 0b d8 01 00       	call   c0027808 <__muldf3>
c0009ffd:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a001:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a005:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a008:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a00c:	e8 ee e1 01 00       	call   c00281ff <__extendsfdf2>
c000a011:	83 c4 10             	add    esp,0x10
c000a014:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a018:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a01c:	52                   	push   edx
c000a01d:	50                   	push   eax
c000a01e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a022:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a026:	e8 60 d1 01 00       	call   c002718b <__adddf3>
c000a02b:	59                   	pop    ecx
c000a02c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a030:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a034:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a03a:	e8 c0 e1 01 00       	call   c00281ff <__extendsfdf2>
c000a03f:	83 c4 10             	add    esp,0x10
c000a042:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a046:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a052:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a056:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05a:	e8 a9 d7 01 00       	call   c0027808 <__muldf3>
c000a05f:	83 c4 10             	add    esp,0x10
c000a062:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a066:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a06a:	52                   	push   edx
c000a06b:	50                   	push   eax
c000a06c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a070:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a074:	e8 12 d1 01 00       	call   c002718b <__adddf3>
c000a079:	59                   	pop    ecx
c000a07a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a07e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a082:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a088:	e8 72 e1 01 00       	call   c00281ff <__extendsfdf2>
c000a08d:	83 c4 10             	add    esp,0x10
c000a090:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a094:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a8:	e8 5b d7 01 00       	call   c0027808 <__muldf3>
c000a0ad:	83 c4 10             	add    esp,0x10
c000a0b0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b8:	52                   	push   edx
c000a0b9:	50                   	push   eax
c000a0ba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0be:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c2:	e8 c4 d0 01 00       	call   c002718b <__adddf3>
c000a0c7:	59                   	pop    ecx
c000a0c8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0cc:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0d0:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0d6:	e8 24 e1 01 00       	call   c00281ff <__extendsfdf2>
c000a0db:	83 c4 10             	add    esp,0x10
c000a0de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ee:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f6:	e8 0d d7 01 00       	call   c0027808 <__muldf3>
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a102:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a106:	52                   	push   edx
c000a107:	50                   	push   eax
c000a108:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a10c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a110:	e8 76 d0 01 00       	call   c002718b <__adddf3>
c000a115:	59                   	pop    ecx
c000a116:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a11a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a11e:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a124:	e8 d6 e0 01 00       	call   c00281ff <__extendsfdf2>
c000a129:	83 c4 10             	add    esp,0x10
c000a12c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a130:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a140:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a144:	e8 bf d6 01 00       	call   c0027808 <__muldf3>
c000a149:	83 c4 10             	add    esp,0x10
c000a14c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a150:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a154:	52                   	push   edx
c000a155:	50                   	push   eax
c000a156:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15e:	e8 28 d0 01 00       	call   c002718b <__adddf3>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a16a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a16e:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a172:	0f 89 30 fe ff ff    	jns    c0009fa8 <calc_output_quad+0x8c>
c000a178:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a17c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a180:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a184:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a188:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a190:	29 c8                	sub    eax,ecx
c000a192:	99                   	cdq    
c000a193:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a197:	31 d2                	xor    edx,edx
c000a199:	0f af d8             	imul   ebx,eax
c000a19c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1a0:	40                   	inc    eax
c000a1a1:	01 cb                	add    ebx,ecx
c000a1a3:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1a8:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ac:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1b4:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1b7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1bf:	31 c0                	xor    eax,eax
c000a1c1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1c5:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1cd:	89 d8                	mov    eax,ebx
c000a1cf:	83 ee 10             	sub    esi,0x10
c000a1d2:	e8 d7 f6 ff ff       	call   c00098ae <fp_to_double>
c000a1d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1df:	89 d8                	mov    eax,ebx
c000a1e1:	e8 be f6 ff ff       	call   c00098a4 <fp_to_int>
c000a1e6:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a1ea:	52                   	push   edx
c000a1eb:	52                   	push   edx
c000a1ec:	57                   	push   edi
c000a1ed:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a1f1:	e8 2a c9 01 00       	call   c0026b20 <__subsf3>
c000a1f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a1f9:	e8 01 e0 01 00       	call   c00281ff <__extendsfdf2>
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a205:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a211:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a215:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a219:	e8 ea d5 01 00       	call   c0027808 <__muldf3>
c000a21e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a221:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a225:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a229:	e8 d1 df 01 00       	call   c00281ff <__extendsfdf2>
c000a22e:	83 c4 10             	add    esp,0x10
c000a231:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a235:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a239:	52                   	push   edx
c000a23a:	50                   	push   eax
c000a23b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a23f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a243:	e8 43 cf 01 00       	call   c002718b <__adddf3>
c000a248:	59                   	pop    ecx
c000a249:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a24d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a251:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a257:	e8 a3 df 01 00       	call   c00281ff <__extendsfdf2>
c000a25c:	83 c4 10             	add    esp,0x10
c000a25f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a263:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a273:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a277:	e8 8c d5 01 00       	call   c0027808 <__muldf3>
c000a27c:	83 c4 10             	add    esp,0x10
c000a27f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a283:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a287:	52                   	push   edx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a28d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a291:	e8 f5 ce 01 00       	call   c002718b <__adddf3>
c000a296:	5f                   	pop    edi
c000a297:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a29b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a29f:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2a5:	e8 55 df 01 00       	call   c00281ff <__extendsfdf2>
c000a2aa:	83 c4 10             	add    esp,0x10
c000a2ad:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2b1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2bd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c5:	e8 3e d5 01 00       	call   c0027808 <__muldf3>
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2d1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2d5:	52                   	push   edx
c000a2d6:	50                   	push   eax
c000a2d7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2db:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2df:	e8 a7 ce 01 00       	call   c002718b <__adddf3>
c000a2e4:	59                   	pop    ecx
c000a2e5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a2e9:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a2ed:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a2f3:	e8 07 df 01 00       	call   c00281ff <__extendsfdf2>
c000a2f8:	83 c4 10             	add    esp,0x10
c000a2fb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ff:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a30b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a30f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a313:	e8 f0 d4 01 00       	call   c0027808 <__muldf3>
c000a318:	83 c4 10             	add    esp,0x10
c000a31b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a31f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a323:	52                   	push   edx
c000a324:	50                   	push   eax
c000a325:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a329:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a32d:	e8 59 ce 01 00       	call   c002718b <__adddf3>
c000a332:	5f                   	pop    edi
c000a333:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a337:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a33b:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a341:	e8 b9 de 01 00       	call   c00281ff <__extendsfdf2>
c000a346:	83 c4 10             	add    esp,0x10
c000a349:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a34d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a359:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a35d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a361:	e8 a2 d4 01 00       	call   c0027808 <__muldf3>
c000a366:	83 c4 10             	add    esp,0x10
c000a369:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a36d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a371:	52                   	push   edx
c000a372:	50                   	push   eax
c000a373:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a377:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a37b:	e8 0b ce 01 00       	call   c002718b <__adddf3>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a387:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a38b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a38f:	85 db                	test   ebx,ebx
c000a391:	0f 8f 36 fe ff ff    	jg     c000a1cd <calc_output_quad+0x2b1>
c000a397:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a7:	e8 df cd 01 00       	call   c002718b <__adddf3>
c000a3ac:	83 c4 10             	add    esp,0x10
c000a3af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c7:	e8 3c d4 01 00       	call   c0027808 <__muldf3>
c000a3cc:	59                   	pop    ecx
c000a3cd:	5b                   	pop    ebx
c000a3ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3de:	e8 f8 dc 01 00       	call   c00280db <__truncdfsf2>
c000a3e3:	83 c4 10             	add    esp,0x10
c000a3e6:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a3ed:	89 06                	mov    DWORD PTR [esi],eax
c000a3ef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3ff:	e8 87 cd 01 00       	call   c002718b <__adddf3>
c000a404:	83 c4 10             	add    esp,0x10
c000a407:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a40b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a40f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41f:	e8 e4 d3 01 00       	call   c0027808 <__muldf3>
c000a424:	5e                   	pop    esi
c000a425:	5f                   	pop    edi
c000a426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a42a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a436:	e8 a0 dc 01 00       	call   c00280db <__truncdfsf2>
c000a43b:	83 c4 10             	add    esp,0x10
c000a43e:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a445:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a448:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a44c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a450:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a454:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a458:	e8 2e cd 01 00       	call   c002718b <__adddf3>
c000a45d:	83 c4 10             	add    esp,0x10
c000a460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 8b d3 01 00       	call   c0027808 <__muldf3>
c000a47d:	5d                   	pop    ebp
c000a47e:	59                   	pop    ecx
c000a47f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a483:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48f:	e8 47 dc 01 00       	call   c00280db <__truncdfsf2>
c000a494:	83 c4 10             	add    esp,0x10
c000a497:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a49e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4b1:	e8 d5 cc 01 00       	call   c002718b <__adddf3>
c000a4b6:	83 c4 10             	add    esp,0x10
c000a4b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 32 d3 01 00       	call   c0027808 <__muldf3>
c000a4d6:	5b                   	pop    ebx
c000a4d7:	5e                   	pop    esi
c000a4d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e8:	e8 ee db 01 00       	call   c00280db <__truncdfsf2>
c000a4ed:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a4f4:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a4f7:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a4fd:	5b                   	pop    ebx
c000a4fe:	5e                   	pop    esi
c000a4ff:	5f                   	pop    edi
c000a500:	5d                   	pop    ebp
c000a501:	c3                   	ret    

c000a502 <calc_output_hex>:
c000a502:	55                   	push   ebp
c000a503:	89 cd                	mov    ebp,ecx
c000a505:	57                   	push   edi
c000a506:	56                   	push   esi
c000a507:	53                   	push   ebx
c000a508:	89 c3                	mov    ebx,eax
c000a50a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a510:	89 14 24             	mov    DWORD PTR [esp],edx
c000a513:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a51a:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a521:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a525:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a529:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a52c:	e8 6f f3 ff ff       	call   c00098a0 <int_to_fp>
c000a531:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a534:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a538:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a53b:	29 c8                	sub    eax,ecx
c000a53d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a541:	99                   	cdq    
c000a542:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a54a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a54d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a555:	0f af f8             	imul   edi,eax
c000a558:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a55b:	01 cf                	add    edi,ecx
c000a55d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a561:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a564:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a568:	0f af c2             	imul   eax,edx
c000a56b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a56f:	29 c1                	sub    ecx,eax
c000a571:	31 d2                	xor    edx,edx
c000a573:	31 c0                	xor    eax,eax
c000a575:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a580:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a584:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a588:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a58c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a590:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a594:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a598:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a59c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a0:	89 f8                	mov    eax,edi
c000a5a2:	e8 07 f3 ff ff       	call   c00098ae <fp_to_double>
c000a5a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5af:	89 f8                	mov    eax,edi
c000a5b1:	e8 ee f2 ff ff       	call   c00098a4 <fp_to_int>
c000a5b6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5ba:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5bd:	52                   	push   edx
c000a5be:	52                   	push   edx
c000a5bf:	51                   	push   ecx
c000a5c0:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5c4:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5cb:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5cf:	e8 4c c5 01 00       	call   c0026b20 <__subsf3>
c000a5d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5d7:	e8 23 dc 01 00       	call   c00281ff <__extendsfdf2>
c000a5dc:	83 c4 10             	add    esp,0x10
c000a5df:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5e3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ef:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f7:	e8 0c d2 01 00       	call   c0027808 <__muldf3>
c000a5fc:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a600:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a604:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a607:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a60b:	e8 ef db 01 00       	call   c00281ff <__extendsfdf2>
c000a610:	83 c4 10             	add    esp,0x10
c000a613:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a617:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a61b:	52                   	push   edx
c000a61c:	50                   	push   eax
c000a61d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a625:	e8 61 cb 01 00       	call   c002718b <__adddf3>
c000a62a:	59                   	pop    ecx
c000a62b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a62f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a633:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a639:	e8 c1 db 01 00       	call   c00281ff <__extendsfdf2>
c000a63e:	83 c4 10             	add    esp,0x10
c000a641:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a645:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a655:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a659:	e8 aa d1 01 00       	call   c0027808 <__muldf3>
c000a65e:	83 c4 10             	add    esp,0x10
c000a661:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a665:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a669:	52                   	push   edx
c000a66a:	50                   	push   eax
c000a66b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a66f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a673:	e8 13 cb 01 00       	call   c002718b <__adddf3>
c000a678:	59                   	pop    ecx
c000a679:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a67d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a681:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a687:	e8 73 db 01 00       	call   c00281ff <__extendsfdf2>
c000a68c:	83 c4 10             	add    esp,0x10
c000a68f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a693:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a697:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a7:	e8 5c d1 01 00       	call   c0027808 <__muldf3>
c000a6ac:	83 c4 10             	add    esp,0x10
c000a6af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6b7:	52                   	push   edx
c000a6b8:	50                   	push   eax
c000a6b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6c1:	e8 c5 ca 01 00       	call   c002718b <__adddf3>
c000a6c6:	59                   	pop    ecx
c000a6c7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6cb:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6cf:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6d5:	e8 25 db 01 00       	call   c00281ff <__extendsfdf2>
c000a6da:	83 c4 10             	add    esp,0x10
c000a6dd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6e1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f5:	e8 0e d1 01 00       	call   c0027808 <__muldf3>
c000a6fa:	83 c4 10             	add    esp,0x10
c000a6fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a701:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a705:	52                   	push   edx
c000a706:	50                   	push   eax
c000a707:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70f:	e8 77 ca 01 00       	call   c002718b <__adddf3>
c000a714:	59                   	pop    ecx
c000a715:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a719:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a71d:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a723:	e8 d7 da 01 00       	call   c00281ff <__extendsfdf2>
c000a728:	83 c4 10             	add    esp,0x10
c000a72b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a72f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a73f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a743:	e8 c0 d0 01 00       	call   c0027808 <__muldf3>
c000a748:	83 c4 10             	add    esp,0x10
c000a74b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a74f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a753:	52                   	push   edx
c000a754:	50                   	push   eax
c000a755:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a759:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a75d:	e8 29 ca 01 00       	call   c002718b <__adddf3>
c000a762:	59                   	pop    ecx
c000a763:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a767:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a76b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a771:	e8 89 da 01 00       	call   c00281ff <__extendsfdf2>
c000a776:	83 c4 10             	add    esp,0x10
c000a779:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a77d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a781:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a785:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a789:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a78d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a791:	e8 72 d0 01 00       	call   c0027808 <__muldf3>
c000a796:	83 c4 10             	add    esp,0x10
c000a799:	83 c6 18             	add    esi,0x18
c000a79c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7a4:	52                   	push   edx
c000a7a5:	50                   	push   eax
c000a7a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ae:	e8 d8 c9 01 00       	call   c002718b <__adddf3>
c000a7b3:	59                   	pop    ecx
c000a7b4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7b8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7bc:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7c2:	e8 38 da 01 00       	call   c00281ff <__extendsfdf2>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7e2:	e8 21 d0 01 00       	call   c0027808 <__muldf3>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7f2:	52                   	push   edx
c000a7f3:	50                   	push   eax
c000a7f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7fc:	e8 8a c9 01 00       	call   c002718b <__adddf3>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a808:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a80c:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a80f:	0f 89 8b fd ff ff    	jns    c000a5a0 <calc_output_hex+0x9e>
c000a815:	31 f6                	xor    esi,esi
c000a817:	31 ff                	xor    edi,edi
c000a819:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a81d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a820:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a824:	29 e9                	sub    ecx,ebp
c000a826:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a82a:	29 c8                	sub    eax,ecx
c000a82c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a82f:	99                   	cdq    
c000a830:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a834:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a837:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a83b:	0f af e8             	imul   ebp,eax
c000a83e:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a842:	40                   	inc    eax
c000a843:	01 cd                	add    ebp,ecx
c000a845:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a84a:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a84e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a852:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a856:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a859:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a85d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a861:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a865:	89 e8                	mov    eax,ebp
c000a867:	e8 42 f0 ff ff       	call   c00098ae <fp_to_double>
c000a86c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a870:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a874:	89 e8                	mov    eax,ebp
c000a876:	e8 29 f0 ff ff       	call   c00098a4 <fp_to_int>
c000a87b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a87f:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a882:	52                   	push   edx
c000a883:	52                   	push   edx
c000a884:	51                   	push   ecx
c000a885:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a88c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a893:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a897:	e8 84 c2 01 00       	call   c0026b20 <__subsf3>
c000a89c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a89f:	e8 5b d9 01 00       	call   c00281ff <__extendsfdf2>
c000a8a4:	83 c4 10             	add    esp,0x10
c000a8a7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ab:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bf:	e8 44 cf 01 00       	call   c0027808 <__muldf3>
c000a8c4:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8cf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8d2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8d6:	e8 24 d9 01 00       	call   c00281ff <__extendsfdf2>
c000a8db:	83 c4 10             	add    esp,0x10
c000a8de:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e6:	52                   	push   edx
c000a8e7:	50                   	push   eax
c000a8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8f0:	e8 96 c8 01 00       	call   c002718b <__adddf3>
c000a8f5:	59                   	pop    ecx
c000a8f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a8fe:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a904:	e8 f6 d8 01 00       	call   c00281ff <__extendsfdf2>
c000a909:	83 c4 10             	add    esp,0x10
c000a90c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a910:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a914:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a918:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a920:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a924:	e8 df ce 01 00       	call   c0027808 <__muldf3>
c000a929:	83 c4 10             	add    esp,0x10
c000a92c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a930:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a934:	52                   	push   edx
c000a935:	50                   	push   eax
c000a936:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93e:	e8 48 c8 01 00       	call   c002718b <__adddf3>
c000a943:	59                   	pop    ecx
c000a944:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a948:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a94c:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a952:	e8 a8 d8 01 00       	call   c00281ff <__extendsfdf2>
c000a957:	83 c4 10             	add    esp,0x10
c000a95a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a95e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a96e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a972:	e8 91 ce 01 00       	call   c0027808 <__muldf3>
c000a977:	83 c4 10             	add    esp,0x10
c000a97a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a97e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a982:	52                   	push   edx
c000a983:	50                   	push   eax
c000a984:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a988:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a98c:	e8 fa c7 01 00       	call   c002718b <__adddf3>
c000a991:	59                   	pop    ecx
c000a992:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a996:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a99a:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9a0:	e8 5a d8 01 00       	call   c00281ff <__extendsfdf2>
c000a9a5:	83 c4 10             	add    esp,0x10
c000a9a8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ac:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9bc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9c0:	e8 43 ce 01 00       	call   c0027808 <__muldf3>
c000a9c5:	83 c4 10             	add    esp,0x10
c000a9c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9d0:	52                   	push   edx
c000a9d1:	50                   	push   eax
c000a9d2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9da:	e8 ac c7 01 00       	call   c002718b <__adddf3>
c000a9df:	59                   	pop    ecx
c000a9e0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a9e4:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a9e8:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a9ee:	e8 0c d8 01 00       	call   c00281ff <__extendsfdf2>
c000a9f3:	83 c4 10             	add    esp,0x10
c000a9f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa06:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0e:	e8 f5 cd 01 00       	call   c0027808 <__muldf3>
c000aa13:	83 c4 10             	add    esp,0x10
c000aa16:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa1a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa1e:	52                   	push   edx
c000aa1f:	50                   	push   eax
c000aa20:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa24:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa28:	e8 5e c7 01 00       	call   c002718b <__adddf3>
c000aa2d:	59                   	pop    ecx
c000aa2e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa32:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa36:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa3c:	e8 be d7 01 00       	call   c00281ff <__extendsfdf2>
c000aa41:	83 c4 10             	add    esp,0x10
c000aa44:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa48:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa54:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa58:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa5c:	e8 a7 cd 01 00       	call   c0027808 <__muldf3>
c000aa61:	83 c4 10             	add    esp,0x10
c000aa64:	83 eb 18             	sub    ebx,0x18
c000aa67:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa6b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa6f:	52                   	push   edx
c000aa70:	50                   	push   eax
c000aa71:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa75:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa79:	e8 0d c7 01 00       	call   c002718b <__adddf3>
c000aa7e:	59                   	pop    ecx
c000aa7f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aa83:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aa87:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aa8d:	e8 6d d7 01 00       	call   c00281ff <__extendsfdf2>
c000aa92:	83 c4 10             	add    esp,0x10
c000aa95:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa99:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaa9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaad:	e8 56 cd 01 00       	call   c0027808 <__muldf3>
c000aab2:	83 c4 10             	add    esp,0x10
c000aab5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aab9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aabd:	52                   	push   edx
c000aabe:	50                   	push   eax
c000aabf:	57                   	push   edi
c000aac0:	56                   	push   esi
c000aac1:	e8 c5 c6 01 00       	call   c002718b <__adddf3>
c000aac6:	83 c4 10             	add    esp,0x10
c000aac9:	89 c6                	mov    esi,eax
c000aacb:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aace:	89 d7                	mov    edi,edx
c000aad0:	85 ed                	test   ebp,ebp
c000aad2:	0f 8f 8d fd ff ff    	jg     c000a865 <calc_output_hex+0x363>
c000aad8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aadc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae8:	e8 9e c6 01 00       	call   c002718b <__adddf3>
c000aaed:	83 c4 10             	add    esp,0x10
c000aaf0:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaf3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaf7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aafb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab07:	e8 fc cc 01 00       	call   c0027808 <__muldf3>
c000ab0c:	59                   	pop    ecx
c000ab0d:	5b                   	pop    ebx
c000ab0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab16:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1e:	e8 b8 d5 01 00       	call   c00280db <__truncdfsf2>
c000ab23:	83 c4 10             	add    esp,0x10
c000ab26:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab2d:	89 03                	mov    DWORD PTR [ebx],eax
c000ab2f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab33:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3f:	e8 47 c6 01 00       	call   c002718b <__adddf3>
c000ab44:	83 c4 10             	add    esp,0x10
c000ab47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab4a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5e:	e8 a5 cc 01 00       	call   c0027808 <__muldf3>
c000ab63:	5d                   	pop    ebp
c000ab64:	59                   	pop    ecx
c000ab65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab75:	e8 61 d5 01 00       	call   c00280db <__truncdfsf2>
c000ab7a:	83 c4 10             	add    esp,0x10
c000ab7d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab84:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ab87:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab97:	e8 ef c5 01 00       	call   c002718b <__adddf3>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aba6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb6:	e8 4d cc 01 00       	call   c0027808 <__muldf3>
c000abbb:	5b                   	pop    ebx
c000abbc:	5d                   	pop    ebp
c000abbd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abc5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abcd:	e8 09 d5 01 00       	call   c00280db <__truncdfsf2>
c000abd2:	83 c4 10             	add    esp,0x10
c000abd5:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abdc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000abdf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abef:	e8 97 c5 01 00       	call   c002718b <__adddf3>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	89 04 24             	mov    DWORD PTR [esp],eax
c000abfa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0e:	e8 f5 cb 01 00       	call   c0027808 <__muldf3>
c000ac13:	59                   	pop    ecx
c000ac14:	5b                   	pop    ebx
c000ac15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac25:	e8 b1 d4 01 00       	call   c00280db <__truncdfsf2>
c000ac2a:	83 c4 10             	add    esp,0x10
c000ac2d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac34:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac47:	e8 3f c5 01 00       	call   c002718b <__adddf3>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac52:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac66:	e8 9d cb 01 00       	call   c0027808 <__muldf3>
c000ac6b:	5d                   	pop    ebp
c000ac6c:	59                   	pop    ecx
c000ac6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7d:	e8 59 d4 01 00       	call   c00280db <__truncdfsf2>
c000ac82:	83 c4 10             	add    esp,0x10
c000ac85:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac8c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ac8f:	57                   	push   edi
c000ac90:	56                   	push   esi
c000ac91:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac95:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac99:	e8 ed c4 01 00       	call   c002718b <__adddf3>
c000ac9e:	83 c4 10             	add    esp,0x10
c000aca1:	89 04 24             	mov    DWORD PTR [esp],eax
c000aca4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aca8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb8:	e8 4b cb 01 00       	call   c0027808 <__muldf3>
c000acbd:	5b                   	pop    ebx
c000acbe:	5e                   	pop    esi
c000acbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accf:	e8 07 d4 01 00       	call   c00280db <__truncdfsf2>
c000acd4:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000acdb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000acde:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ace4:	5b                   	pop    ebx
c000ace5:	5e                   	pop    esi
c000ace6:	5f                   	pop    edi
c000ace7:	5d                   	pop    ebp
c000ace8:	c3                   	ret    

c000ace9 <sinc_reset>:
c000ace9:	56                   	push   esi
c000acea:	53                   	push   ebx
c000aceb:	51                   	push   ecx
c000acec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acf0:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000acf3:	85 db                	test   ebx,ebx
c000acf5:	74 59                	je     c000ad50 <sinc_reset+0x67>
c000acf7:	31 d2                	xor    edx,edx
c000acf9:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad00:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad03:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad06:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad0d:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad14:	31 c0                	xor    eax,eax
c000ad16:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad1c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad1f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad22:	52                   	push   edx
c000ad23:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad26:	c1 e0 02             	shl    eax,0x2
c000ad29:	50                   	push   eax
c000ad2a:	6a 00                	push   0x0
c000ad2c:	56                   	push   esi
c000ad2d:	e8 1e 5a ff ff       	call   c0000750 <memset>
c000ad32:	83 c4 0c             	add    esp,0xc
c000ad35:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad38:	c1 e0 02             	shl    eax,0x2
c000ad3b:	50                   	push   eax
c000ad3c:	68 aa 00 00 00       	push   0xaa
c000ad41:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad44:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad47:	50                   	push   eax
c000ad48:	e8 03 5a ff ff       	call   c0000750 <memset>
c000ad4d:	83 c4 10             	add    esp,0x10
c000ad50:	58                   	pop    eax
c000ad51:	5b                   	pop    ebx
c000ad52:	5e                   	pop    esi
c000ad53:	c3                   	ret    

c000ad54 <calc_output_multi>:
c000ad54:	55                   	push   ebp
c000ad55:	57                   	push   edi
c000ad56:	56                   	push   esi
c000ad57:	89 c6                	mov    esi,eax
c000ad59:	53                   	push   ebx
c000ad5a:	83 ec 4c             	sub    esp,0x4c
c000ad5d:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad61:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad65:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad69:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad6d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ad79:	8d 46 44             	lea    eax,[esi+0x44]
c000ad7c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad7f:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ad85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ad89:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ad8c:	e8 0f eb ff ff       	call   c00098a0 <int_to_fp>
c000ad91:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ad94:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ad98:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ad9c:	99                   	cdq    
c000ad9d:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ada1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ada5:	0f af d0             	imul   edx,eax
c000ada8:	0f af c3             	imul   eax,ebx
c000adab:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adaf:	29 c1                	sub    ecx,eax
c000adb1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adb5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adb9:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adc0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adc4:	57                   	push   edi
c000adc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000adc9:	6a 00                	push   0x0
c000adcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adcf:	e8 7c 59 ff ff       	call   c0000750 <memset>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000addb:	89 df                	mov    edi,ebx
c000addd:	e8 cc ea ff ff       	call   c00098ae <fp_to_double>
c000ade2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ade6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000adea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000adee:	e8 b1 ea ff ff       	call   c00098a4 <fp_to_int>
c000adf3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000adf6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000adf9:	51                   	push   ecx
c000adfa:	51                   	push   ecx
c000adfb:	55                   	push   ebp
c000adfc:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae00:	e8 1b bd 01 00       	call   c0026b20 <__subsf3>
c000ae05:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae08:	e8 f2 d3 01 00       	call   c00281ff <__extendsfdf2>
c000ae0d:	83 c4 10             	add    esp,0x10
c000ae10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae14:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae28:	e8 db c9 01 00       	call   c0027808 <__muldf3>
c000ae2d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae34:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae38:	e8 c2 d3 01 00       	call   c00281ff <__extendsfdf2>
c000ae3d:	83 c4 10             	add    esp,0x10
c000ae40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae48:	52                   	push   edx
c000ae49:	50                   	push   eax
c000ae4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae52:	e8 34 c3 01 00       	call   c002718b <__adddf3>
c000ae57:	83 c4 10             	add    esp,0x10
c000ae5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae62:	89 f8                	mov    eax,edi
c000ae64:	b9 08 00 00 00       	mov    ecx,0x8
c000ae69:	99                   	cdq    
c000ae6a:	f7 f9                	idiv   ecx
c000ae6c:	4a                   	dec    edx
c000ae6d:	83 fa 06             	cmp    edx,0x6
c000ae70:	77 07                	ja     c000ae79 <calc_output_multi+0x125>
c000ae72:	ff 24 95 c4 9a 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd653c]
c000ae79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae7c:	4f                   	dec    edi
c000ae7d:	83 ec 0c             	sub    esp,0xc
c000ae80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae92:	e8 68 d3 01 00       	call   c00281ff <__extendsfdf2>
c000ae97:	83 c4 10             	add    esp,0x10
c000ae9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeb2:	e8 51 c9 01 00       	call   c0027808 <__muldf3>
c000aeb7:	83 c4 10             	add    esp,0x10
c000aeba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aebe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec2:	52                   	push   edx
c000aec3:	50                   	push   eax
c000aec4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aec7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeca:	e8 bc c2 01 00       	call   c002718b <__adddf3>
c000aecf:	83 c4 10             	add    esp,0x10
c000aed2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aed5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aed8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aedb:	4f                   	dec    edi
c000aedc:	83 ec 0c             	sub    esp,0xc
c000aedf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aef1:	e8 09 d3 01 00       	call   c00281ff <__extendsfdf2>
c000aef6:	83 c4 10             	add    esp,0x10
c000aef9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af11:	e8 f2 c8 01 00       	call   c0027808 <__muldf3>
c000af16:	83 c4 10             	add    esp,0x10
c000af19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af21:	52                   	push   edx
c000af22:	50                   	push   eax
c000af23:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af26:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af29:	e8 5d c2 01 00       	call   c002718b <__adddf3>
c000af2e:	83 c4 10             	add    esp,0x10
c000af31:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af34:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af3a:	4f                   	dec    edi
c000af3b:	83 ec 0c             	sub    esp,0xc
c000af3e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af45:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af50:	e8 aa d2 01 00       	call   c00281ff <__extendsfdf2>
c000af55:	83 c4 10             	add    esp,0x10
c000af58:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af68:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af70:	e8 93 c8 01 00       	call   c0027808 <__muldf3>
c000af75:	83 c4 10             	add    esp,0x10
c000af78:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af80:	52                   	push   edx
c000af81:	50                   	push   eax
c000af82:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af85:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af88:	e8 fe c1 01 00       	call   c002718b <__adddf3>
c000af8d:	83 c4 10             	add    esp,0x10
c000af90:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af93:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af96:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af99:	4f                   	dec    edi
c000af9a:	83 ec 0c             	sub    esp,0xc
c000af9d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afa0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afa4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afaf:	e8 4b d2 01 00       	call   c00281ff <__extendsfdf2>
c000afb4:	83 c4 10             	add    esp,0x10
c000afb7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcf:	e8 34 c8 01 00       	call   c0027808 <__muldf3>
c000afd4:	83 c4 10             	add    esp,0x10
c000afd7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afdb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afdf:	52                   	push   edx
c000afe0:	50                   	push   eax
c000afe1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afe4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afe7:	e8 9f c1 01 00       	call   c002718b <__adddf3>
c000afec:	83 c4 10             	add    esp,0x10
c000afef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aff2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aff5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aff8:	4f                   	dec    edi
c000aff9:	83 ec 0c             	sub    esp,0xc
c000affc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b003:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b00a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b00e:	e8 ec d1 01 00       	call   c00281ff <__extendsfdf2>
c000b013:	83 c4 10             	add    esp,0x10
c000b016:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b01e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b022:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b026:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02e:	e8 d5 c7 01 00       	call   c0027808 <__muldf3>
c000b033:	83 c4 10             	add    esp,0x10
c000b036:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b03a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b03e:	52                   	push   edx
c000b03f:	50                   	push   eax
c000b040:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b043:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b046:	e8 40 c1 01 00       	call   c002718b <__adddf3>
c000b04b:	83 c4 10             	add    esp,0x10
c000b04e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b051:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b057:	4f                   	dec    edi
c000b058:	83 ec 0c             	sub    esp,0xc
c000b05b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b062:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b069:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06d:	e8 8d d1 01 00       	call   c00281ff <__extendsfdf2>
c000b072:	83 c4 10             	add    esp,0x10
c000b075:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b079:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b081:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b085:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b089:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b08d:	e8 76 c7 01 00       	call   c0027808 <__muldf3>
c000b092:	83 c4 10             	add    esp,0x10
c000b095:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b099:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b09d:	52                   	push   edx
c000b09e:	50                   	push   eax
c000b09f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a5:	e8 e1 c0 01 00       	call   c002718b <__adddf3>
c000b0aa:	83 c4 10             	add    esp,0x10
c000b0ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b6:	4f                   	dec    edi
c000b0b7:	83 ec 0c             	sub    esp,0xc
c000b0ba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cc:	e8 2e d1 01 00       	call   c00281ff <__extendsfdf2>
c000b0d1:	83 c4 10             	add    esp,0x10
c000b0d4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0ec:	e8 17 c7 01 00       	call   c0027808 <__muldf3>
c000b0f1:	83 c4 10             	add    esp,0x10
c000b0f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0fc:	52                   	push   edx
c000b0fd:	50                   	push   eax
c000b0fe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b101:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b104:	e8 82 c0 01 00       	call   c002718b <__adddf3>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b112:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 cf d0 01 00       	call   c00281ff <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b137:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b14b:	e8 b8 c6 01 00       	call   c0027808 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b157:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 23 c0 01 00       	call   c002718b <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	85 ff                	test   edi,edi
c000b173:	0f 8f e9 fc ff ff    	jg     c000ae62 <calc_output_multi+0x10e>
c000b179:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b17d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b181:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b185:	0f 89 4c fc ff ff    	jns    c000add7 <calc_output_multi+0x83>
c000b18b:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b18f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b193:	29 c8                	sub    eax,ecx
c000b195:	99                   	cdq    
c000b196:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b19a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b19e:	0f af d0             	imul   edx,eax
c000b1a1:	40                   	inc    eax
c000b1a2:	01 d1                	add    ecx,edx
c000b1a4:	0f af c3             	imul   eax,ebx
c000b1a7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ab:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1b2:	55                   	push   ebp
c000b1b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1b7:	6a 00                	push   0x0
c000b1b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1bd:	e8 8e 55 ff ff       	call   c0000750 <memset>
c000b1c2:	83 c4 10             	add    esp,0x10
c000b1c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1c9:	e8 e0 e6 ff ff       	call   c00098ae <fp_to_double>
c000b1ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1da:	e8 c5 e6 ff ff       	call   c00098a4 <fp_to_int>
c000b1df:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b1e2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b1e5:	57                   	push   edi
c000b1e6:	57                   	push   edi
c000b1e7:	89 df                	mov    edi,ebx
c000b1e9:	55                   	push   ebp
c000b1ea:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b1ee:	e8 2d b9 01 00       	call   c0026b20 <__subsf3>
c000b1f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b1f6:	e8 04 d0 01 00       	call   c00281ff <__extendsfdf2>
c000b1fb:	83 c4 10             	add    esp,0x10
c000b1fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b202:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b206:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b212:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b216:	e8 ed c5 01 00       	call   c0027808 <__muldf3>
c000b21b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b21e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b222:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b226:	e8 d4 cf 01 00       	call   c00281ff <__extendsfdf2>
c000b22b:	83 c4 10             	add    esp,0x10
c000b22e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b232:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b236:	52                   	push   edx
c000b237:	50                   	push   eax
c000b238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b240:	e8 46 bf 01 00       	call   c002718b <__adddf3>
c000b245:	83 c4 10             	add    esp,0x10
c000b248:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b24c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b250:	89 f8                	mov    eax,edi
c000b252:	b9 08 00 00 00       	mov    ecx,0x8
c000b257:	99                   	cdq    
c000b258:	f7 f9                	idiv   ecx
c000b25a:	4a                   	dec    edx
c000b25b:	83 fa 06             	cmp    edx,0x6
c000b25e:	77 07                	ja     c000b267 <calc_output_multi+0x513>
c000b260:	ff 24 95 e0 9a 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6520]
c000b267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b26b:	4f                   	dec    edi
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b272:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b276:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b27d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b281:	e8 79 cf 01 00       	call   c00281ff <__extendsfdf2>
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b291:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b295:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b299:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b29d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a1:	e8 62 c5 01 00       	call   c0027808 <__muldf3>
c000b2a6:	83 c4 10             	add    esp,0x10
c000b2a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b1:	52                   	push   edx
c000b2b2:	50                   	push   eax
c000b2b3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2b9:	e8 cd be 01 00       	call   c002718b <__adddf3>
c000b2be:	83 c4 10             	add    esp,0x10
c000b2c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2c4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2cb:	4f                   	dec    edi
c000b2cc:	83 ec 0c             	sub    esp,0xc
c000b2cf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2dd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2e1:	e8 19 cf 01 00       	call   c00281ff <__extendsfdf2>
c000b2e6:	83 c4 10             	add    esp,0x10
c000b2e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b301:	e8 02 c5 01 00       	call   c0027808 <__muldf3>
c000b306:	83 c4 10             	add    esp,0x10
c000b309:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b30d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b311:	52                   	push   edx
c000b312:	50                   	push   eax
c000b313:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b316:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b319:	e8 6d be 01 00       	call   c002718b <__adddf3>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b324:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b327:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b32b:	4f                   	dec    edi
c000b32c:	83 ec 0c             	sub    esp,0xc
c000b32f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b332:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b336:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b33d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b341:	e8 b9 ce 01 00       	call   c00281ff <__extendsfdf2>
c000b346:	83 c4 10             	add    esp,0x10
c000b349:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b351:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b359:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b361:	e8 a2 c4 01 00       	call   c0027808 <__muldf3>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b36d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b371:	52                   	push   edx
c000b372:	50                   	push   eax
c000b373:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b376:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b379:	e8 0d be 01 00       	call   c002718b <__adddf3>
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b384:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4f                   	dec    edi
c000b38c:	83 ec 0c             	sub    esp,0xc
c000b38f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b392:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b396:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b39d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3a1:	e8 59 ce 01 00       	call   c00281ff <__extendsfdf2>
c000b3a6:	83 c4 10             	add    esp,0x10
c000b3a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3c1:	e8 42 c4 01 00       	call   c0027808 <__muldf3>
c000b3c6:	83 c4 10             	add    esp,0x10
c000b3c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3d1:	52                   	push   edx
c000b3d2:	50                   	push   eax
c000b3d3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3d6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3d9:	e8 ad bd 01 00       	call   c002718b <__adddf3>
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3e4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3eb:	4f                   	dec    edi
c000b3ec:	83 ec 0c             	sub    esp,0xc
c000b3ef:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3f6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3fd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b401:	e8 f9 cd 01 00       	call   c00281ff <__extendsfdf2>
c000b406:	83 c4 10             	add    esp,0x10
c000b409:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b411:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b415:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b419:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b41d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b421:	e8 e2 c3 01 00       	call   c0027808 <__muldf3>
c000b426:	83 c4 10             	add    esp,0x10
c000b429:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b42d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b431:	52                   	push   edx
c000b432:	50                   	push   eax
c000b433:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b436:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b439:	e8 4d bd 01 00       	call   c002718b <__adddf3>
c000b43e:	83 c4 10             	add    esp,0x10
c000b441:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b444:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b44b:	4f                   	dec    edi
c000b44c:	83 ec 0c             	sub    esp,0xc
c000b44f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b452:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b456:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b45d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b461:	e8 99 cd 01 00       	call   c00281ff <__extendsfdf2>
c000b466:	83 c4 10             	add    esp,0x10
c000b469:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b479:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b47d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b481:	e8 82 c3 01 00       	call   c0027808 <__muldf3>
c000b486:	83 c4 10             	add    esp,0x10
c000b489:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b48d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b491:	52                   	push   edx
c000b492:	50                   	push   eax
c000b493:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b496:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b499:	e8 ed bc 01 00       	call   c002718b <__adddf3>
c000b49e:	83 c4 10             	add    esp,0x10
c000b4a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ab:	4f                   	dec    edi
c000b4ac:	83 ec 0c             	sub    esp,0xc
c000b4af:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4b6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4bd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4c1:	e8 39 cd 01 00       	call   c00281ff <__extendsfdf2>
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4e1:	e8 22 c3 01 00       	call   c0027808 <__muldf3>
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4f1:	52                   	push   edx
c000b4f2:	50                   	push   eax
c000b4f3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4f6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4f9:	e8 8d bc 01 00       	call   c002718b <__adddf3>
c000b4fe:	83 c4 10             	add    esp,0x10
c000b501:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b504:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50b:	4f                   	dec    edi
c000b50c:	83 ec 0c             	sub    esp,0xc
c000b50f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b512:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b516:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b51d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b521:	e8 d9 cc 01 00       	call   c00281ff <__extendsfdf2>
c000b526:	83 c4 10             	add    esp,0x10
c000b529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b539:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b53d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b541:	e8 c2 c2 01 00       	call   c0027808 <__muldf3>
c000b546:	83 c4 10             	add    esp,0x10
c000b549:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b54d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b551:	52                   	push   edx
c000b552:	50                   	push   eax
c000b553:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b556:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b559:	e8 2d bc 01 00       	call   c002718b <__adddf3>
c000b55e:	83 c4 10             	add    esp,0x10
c000b561:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b564:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b567:	85 ff                	test   edi,edi
c000b569:	0f 8f e1 fc ff ff    	jg     c000b250 <calc_output_multi+0x4fc>
c000b56f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b573:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b577:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b57b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b580:	0f 8f 3f fc ff ff    	jg     c000b1c5 <calc_output_multi+0x471>
c000b586:	be 08 00 00 00       	mov    esi,0x8
c000b58b:	89 d8                	mov    eax,ebx
c000b58d:	99                   	cdq    
c000b58e:	f7 fe                	idiv   esi
c000b590:	4a                   	dec    edx
c000b591:	83 fa 06             	cmp    edx,0x6
c000b594:	77 07                	ja     c000b59d <calc_output_multi+0x849>
c000b596:	ff 24 95 fc 9a 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6504]
c000b59d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5a1:	4b                   	dec    ebx
c000b5a2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5a6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5b4:	e8 d2 bb 01 00       	call   c002718b <__adddf3>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d4:	e8 2f c2 01 00       	call   c0027808 <__muldf3>
c000b5d9:	5d                   	pop    ebp
c000b5da:	59                   	pop    ecx
c000b5db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	e8 eb ca 01 00       	call   c00280db <__truncdfsf2>
c000b5f0:	83 c4 10             	add    esp,0x10
c000b5f3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5f7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5fe:	4b                   	dec    ebx
c000b5ff:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b603:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b606:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b60a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b611:	e8 75 bb 01 00       	call   c002718b <__adddf3>
c000b616:	83 c4 10             	add    esp,0x10
c000b619:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b61d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b631:	e8 d2 c1 01 00       	call   c0027808 <__muldf3>
c000b636:	59                   	pop    ecx
c000b637:	5f                   	pop    edi
c000b638:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b63c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b640:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b644:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b648:	e8 8e ca 01 00       	call   c00280db <__truncdfsf2>
c000b64d:	83 c4 10             	add    esp,0x10
c000b650:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b654:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65b:	4b                   	dec    ebx
c000b65c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b660:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b667:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b66b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b66e:	e8 18 bb 01 00       	call   c002718b <__adddf3>
c000b673:	83 c4 10             	add    esp,0x10
c000b676:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b67a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68e:	e8 75 c1 01 00       	call   c0027808 <__muldf3>
c000b693:	5f                   	pop    edi
c000b694:	5d                   	pop    ebp
c000b695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a5:	e8 31 ca 01 00       	call   c00280db <__truncdfsf2>
c000b6aa:	83 c4 10             	add    esp,0x10
c000b6ad:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6b1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6b8:	4b                   	dec    ebx
c000b6b9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6bd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6c4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6c8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6cb:	e8 bb ba 01 00       	call   c002718b <__adddf3>
c000b6d0:	83 c4 10             	add    esp,0x10
c000b6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6eb:	e8 18 c1 01 00       	call   c0027808 <__muldf3>
c000b6f0:	5d                   	pop    ebp
c000b6f1:	59                   	pop    ecx
c000b6f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b702:	e8 d4 c9 01 00       	call   c00280db <__truncdfsf2>
c000b707:	83 c4 10             	add    esp,0x10
c000b70a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b70e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b711:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b715:	4b                   	dec    ebx
c000b716:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b71a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b71d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b721:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b725:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b728:	e8 5e ba 01 00       	call   c002718b <__adddf3>
c000b72d:	83 c4 10             	add    esp,0x10
c000b730:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b734:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b73c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b748:	e8 bb c0 01 00       	call   c0027808 <__muldf3>
c000b74d:	59                   	pop    ecx
c000b74e:	5f                   	pop    edi
c000b74f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b753:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b757:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75f:	e8 77 c9 01 00       	call   c00280db <__truncdfsf2>
c000b764:	83 c4 10             	add    esp,0x10
c000b767:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b76b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b76e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b772:	4b                   	dec    ebx
c000b773:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b777:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b77a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b77e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b782:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b785:	e8 01 ba 01 00       	call   c002718b <__adddf3>
c000b78a:	83 c4 10             	add    esp,0x10
c000b78d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b791:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b795:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a5:	e8 5e c0 01 00       	call   c0027808 <__muldf3>
c000b7aa:	5f                   	pop    edi
c000b7ab:	5d                   	pop    ebp
c000b7ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bc:	e8 1a c9 01 00       	call   c00280db <__truncdfsf2>
c000b7c1:	83 c4 10             	add    esp,0x10
c000b7c4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7c8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7cf:	4b                   	dec    ebx
c000b7d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7db:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7df:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7e2:	e8 a4 b9 01 00       	call   c002718b <__adddf3>
c000b7e7:	83 c4 10             	add    esp,0x10
c000b7ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b802:	e8 01 c0 01 00       	call   c0027808 <__muldf3>
c000b807:	5d                   	pop    ebp
c000b808:	59                   	pop    ecx
c000b809:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b80d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b811:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b815:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b819:	e8 bd c8 01 00       	call   c00280db <__truncdfsf2>
c000b81e:	83 c4 10             	add    esp,0x10
c000b821:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b825:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b82c:	4b                   	dec    ebx
c000b82d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b831:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b834:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b838:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b83c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83f:	e8 47 b9 01 00       	call   c002718b <__adddf3>
c000b844:	83 c4 10             	add    esp,0x10
c000b847:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b84b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b84f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85f:	e8 a4 bf 01 00       	call   c0027808 <__muldf3>
c000b864:	59                   	pop    ecx
c000b865:	5f                   	pop    edi
c000b866:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b872:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b876:	e8 60 c8 01 00       	call   c00280db <__truncdfsf2>
c000b87b:	83 c4 10             	add    esp,0x10
c000b87e:	85 db                	test   ebx,ebx
c000b880:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b884:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b887:	0f 8f fe fc ff ff    	jg     c000b58b <calc_output_multi+0x837>
c000b88d:	83 c4 4c             	add    esp,0x4c
c000b890:	5b                   	pop    ebx
c000b891:	5e                   	pop    esi
c000b892:	5f                   	pop    edi
c000b893:	5d                   	pop    ebp
c000b894:	c3                   	ret    

c000b895 <double_to_fp>:
c000b895:	83 ec 0c             	sub    esp,0xc
c000b898:	68 00 00 b0 40       	push   0x40b00000
c000b89d:	6a 00                	push   0x0
c000b89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a7:	e8 5c bf 01 00       	call   c0027808 <__muldf3>
c000b8ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8b0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8b4:	83 c4 1c             	add    esp,0x1c
c000b8b7:	e9 d4 c9 01 00       	jmp    c0028290 <lrint>

c000b8bc <prepare_data>:
c000b8bc:	55                   	push   ebp
c000b8bd:	57                   	push   edi
c000b8be:	56                   	push   esi
c000b8bf:	53                   	push   ebx
c000b8c0:	83 ec 1c             	sub    esp,0x1c
c000b8c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8cb:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8cf:	0f 89 57 01 00 00    	jns    c000ba2c <prepare_data+0x170>
c000b8d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b8d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b8db:	85 d2                	test   edx,edx
c000b8dd:	75 0d                	jne    c000b8ec <prepare_data+0x30>
c000b8df:	8d 14 36             	lea    edx,[esi+esi*1]
c000b8e2:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b8e5:	29 d0                	sub    eax,edx
c000b8e7:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b8ea:	eb 44                	jmp    c000b930 <prepare_data+0x74>
c000b8ec:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b8ef:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b8f2:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b8f5:	39 c1                	cmp    ecx,eax
c000b8f7:	7d 04                	jge    c000b8fd <prepare_data+0x41>
c000b8f9:	29 d0                	sub    eax,edx
c000b8fb:	eb 2d                	jmp    c000b92a <prepare_data+0x6e>
c000b8fd:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b903:	29 d7                	sub    edi,edx
c000b905:	01 f7                	add    edi,esi
c000b907:	51                   	push   ecx
c000b908:	29 f2                	sub    edx,esi
c000b90a:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b911:	8d 14 90             	lea    edx,[eax+edx*4]
c000b914:	51                   	push   ecx
c000b915:	52                   	push   edx
c000b916:	50                   	push   eax
c000b917:	e8 6c 4d ff ff       	call   c0000688 <memmove>
c000b91c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91f:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b922:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b925:	29 f0                	sub    eax,esi
c000b927:	83 c4 10             	add    esp,0x10
c000b92a:	29 f0                	sub    eax,esi
c000b92c:	79 02                	jns    c000b930 <prepare_data+0x74>
c000b92e:	31 c0                	xor    eax,eax
c000b930:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b933:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b936:	29 ef                	sub    edi,ebp
c000b938:	39 c7                	cmp    edi,eax
c000b93a:	7e 02                	jle    c000b93e <prepare_data+0x82>
c000b93c:	89 c7                	mov    edi,eax
c000b93e:	89 f8                	mov    eax,edi
c000b940:	99                   	cdq    
c000b941:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b944:	b8 15 00 00 00       	mov    eax,0x15
c000b949:	29 d7                	sub    edi,edx
c000b94b:	0f 88 dd 00 00 00    	js     c000ba2e <prepare_data+0x172>
c000b951:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b954:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b957:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b95a:	0f 8f ce 00 00 00    	jg     c000ba2e <prepare_data+0x172>
c000b960:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b966:	50                   	push   eax
c000b967:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b96e:	50                   	push   eax
c000b96f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b973:	8b 00                	mov    eax,DWORD PTR [eax]
c000b975:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b978:	50                   	push   eax
c000b979:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b97c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b980:	50                   	push   eax
c000b981:	e8 c0 4c ff ff       	call   c0000646 <memcpy>
c000b986:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b989:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b98c:	01 fd                	add    ebp,edi
c000b98e:	01 f9                	add    ecx,edi
c000b990:	83 c4 10             	add    esp,0x10
c000b993:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b996:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b999:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b99c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9a0:	0f 85 86 00 00 00    	jne    c000ba2c <prepare_data+0x170>
c000b9a6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9a9:	89 e8                	mov    eax,ebp
c000b9ab:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9ae:	29 c8                	sub    eax,ecx
c000b9b0:	39 f8                	cmp    eax,edi
c000b9b2:	7d 78                	jge    c000ba2c <prepare_data+0x170>
c000b9b4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9b8:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9bc:	74 6e                	je     c000ba2c <prepare_data+0x170>
c000b9be:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9c1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9c5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9c8:	29 ef                	sub    edi,ebp
c000b9ca:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9ce:	7c 29                	jl     c000b9f9 <prepare_data+0x13d>
c000b9d0:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9d3:	29 f1                	sub    ecx,esi
c000b9d5:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9dc:	55                   	push   ebp
c000b9dd:	50                   	push   eax
c000b9de:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9e1:	50                   	push   eax
c000b9e2:	52                   	push   edx
c000b9e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e7:	e8 9c 4c ff ff       	call   c0000688 <memmove>
c000b9ec:	83 c4 10             	add    esp,0x10
c000b9ef:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b9f2:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b9f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b9fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b9ff:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba02:	83 c6 05             	add    esi,0x5
c000ba05:	78 07                	js     c000ba0e <prepare_data+0x152>
c000ba07:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0a:	39 cf                	cmp    edi,ecx
c000ba0c:	7e 04                	jle    c000ba12 <prepare_data+0x156>
c000ba0e:	89 ce                	mov    esi,ecx
c000ba10:	29 c6                	sub    esi,eax
c000ba12:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba15:	51                   	push   ecx
c000ba16:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba1d:	51                   	push   ecx
c000ba1e:	6a 00                	push   0x0
c000ba20:	50                   	push   eax
c000ba21:	e8 2a 4d ff ff       	call   c0000750 <memset>
c000ba26:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba29:	83 c4 10             	add    esp,0x10
c000ba2c:	31 c0                	xor    eax,eax
c000ba2e:	83 c4 1c             	add    esp,0x1c
c000ba31:	5b                   	pop    ebx
c000ba32:	5e                   	pop    esi
c000ba33:	5f                   	pop    edi
c000ba34:	5d                   	pop    ebp
c000ba35:	c3                   	ret    

c000ba36 <sinc_multichan_vari_process>:
c000ba36:	55                   	push   ebp
c000ba37:	ba 05 00 00 00       	mov    edx,0x5
c000ba3c:	57                   	push   edi
c000ba3d:	56                   	push   esi
c000ba3e:	53                   	push   ebx
c000ba3f:	83 ec 4c             	sub    esp,0x4c
c000ba42:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba46:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba4a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba4d:	85 db                	test   ebx,ebx
c000ba4f:	0f 84 9b 06 00 00    	je     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000ba55:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba58:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba5b:	0f af c5             	imul   eax,ebp
c000ba5e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba61:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba64:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba6b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba72:	0f af c5             	imul   eax,ebp
c000ba75:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ba78:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba7b:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba85:	68 00 00 70 3f       	push   0x3f700000
c000ba8a:	6a 00                	push   0x0
c000ba8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba94:	e8 3e c6 01 00       	call   c00280d7 <__ltdf2>
c000ba99:	83 c4 10             	add    esp,0x10
c000ba9c:	ba 16 00 00 00       	mov    edx,0x16
c000baa1:	85 c0                	test   eax,eax
c000baa3:	0f 88 47 06 00 00    	js     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000baa9:	68 00 00 70 40       	push   0x40700000
c000baae:	6a 00                	push   0x0
c000bab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab8:	e8 fc c5 01 00       	call   c00280b9 <__gtdf2>
c000babd:	83 c4 10             	add    esp,0x10
c000bac0:	ba 16 00 00 00       	mov    edx,0x16
c000bac5:	85 c0                	test   eax,eax
c000bac7:	0f 8f 23 06 00 00    	jg     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bacd:	83 ec 0c             	sub    esp,0xc
c000bad0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bad3:	e8 93 c3 01 00       	call   c0027e6b <__floatsidf>
c000bad8:	83 c4 10             	add    esp,0x10
c000badb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000badf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bae3:	68 00 00 00 40       	push   0x40000000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf2:	e8 94 b6 01 00       	call   c002718b <__adddf3>
c000baf7:	59                   	pop    ecx
c000baf8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bafc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb00:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb03:	e8 63 c3 01 00       	call   c0027e6b <__floatsidf>
c000bb08:	83 c4 10             	add    esp,0x10
c000bb0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb0f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb13:	52                   	push   edx
c000bb14:	50                   	push   eax
c000bb15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb1d:	e8 ca bf 01 00       	call   c0027aec <__divdf3>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb2d:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb30:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb4b:	e8 69 c5 01 00       	call   c00280b9 <__gtdf2>
c000bb50:	83 c4 10             	add    esp,0x10
c000bb53:	85 c0                	test   eax,eax
c000bb55:	7e 2d                	jle    c000bb84 <sinc_multichan_vari_process+0x14e>
c000bb57:	68 00 00 f0 3f       	push   0x3ff00000
c000bb5c:	6a 00                	push   0x0
c000bb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb66:	e8 6c c5 01 00       	call   c00280d7 <__ltdf2>
c000bb6b:	83 c4 10             	add    esp,0x10
c000bb6e:	85 c0                	test   eax,eax
c000bb70:	79 4d                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb82:	eb 1b                	jmp    c000bb9f <sinc_multichan_vari_process+0x169>
c000bb84:	68 00 00 f0 3f       	push   0x3ff00000
c000bb89:	6a 00                	push   0x0
c000bb8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb93:	e8 3f c5 01 00       	call   c00280d7 <__ltdf2>
c000bb98:	83 c4 10             	add    esp,0x10
c000bb9b:	85 c0                	test   eax,eax
c000bb9d:	79 20                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbaf:	e8 38 bf 01 00       	call   c0027aec <__divdf3>
c000bbb4:	83 c4 10             	add    esp,0x10
c000bbb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbbb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbbf:	50                   	push   eax
c000bbc0:	50                   	push   eax
c000bbc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc9:	e8 c2 c6 01 00       	call   c0028290 <lrint>
c000bbce:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbd1:	40                   	inc    eax
c000bbd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbd6:	0f af c5             	imul   eax,ebp
c000bbd9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bbdd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bbe0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbe4:	58                   	pop    eax
c000bbe5:	5a                   	pop    edx
c000bbe6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbee:	e8 9d c6 01 00       	call   c0028290 <lrint>
c000bbf3:	83 ec 0c             	sub    esp,0xc
c000bbf6:	50                   	push   eax
c000bbf7:	e8 6f c2 01 00       	call   c0027e6b <__floatsidf>
c000bbfc:	83 c4 10             	add    esp,0x10
c000bbff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc03:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc07:	52                   	push   edx
c000bc08:	50                   	push   eax
c000bc09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc0d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc11:	e8 c6 bb 01 00       	call   c00277dc <__subdf3>
c000bc16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc1e:	83 c4 20             	add    esp,0x20
c000bc21:	6a 00                	push   0x0
c000bc23:	6a 00                	push   0x0
c000bc25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc2d:	e8 a5 c4 01 00       	call   c00280d7 <__ltdf2>
c000bc32:	83 c4 10             	add    esp,0x10
c000bc35:	85 c0                	test   eax,eax
c000bc37:	79 1f                	jns    c000bc58 <sinc_multichan_vari_process+0x222>
c000bc39:	68 00 00 f0 3f       	push   0x3ff00000
c000bc3e:	6a 00                	push   0x0
c000bc40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc48:	e8 3e b5 01 00       	call   c002718b <__adddf3>
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc58:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc5b:	83 ec 10             	sub    esp,0x10
c000bc5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc75:	e8 62 bb 01 00       	call   c00277dc <__subdf3>
c000bc7a:	83 c4 18             	add    esp,0x18
c000bc7d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc85:	52                   	push   edx
c000bc86:	50                   	push   eax
c000bc87:	e8 04 c6 01 00       	call   c0028290 <lrint>
c000bc8c:	0f af e8             	imul   ebp,eax
c000bc8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc93:	01 e8                	add    eax,ebp
c000bc95:	99                   	cdq    
c000bc96:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bc99:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bc9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca4:	68 00 00 f0 3f       	push   0x3ff00000
c000bca9:	6a 00                	push   0x0
c000bcab:	e8 3c be 01 00       	call   c0027aec <__divdf3>
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcbb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcc0:	68 23 42 92 0c       	push   0xc924223
c000bcc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bccd:	e8 b9 b4 01 00       	call   c002718b <__adddf3>
c000bcd2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcd6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bcda:	83 c4 20             	add    esp,0x20
c000bcdd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bce5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bced:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bcf0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bcf3:	7d 50                	jge    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bcf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bcf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bcfb:	01 c8                	add    eax,ecx
c000bcfd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd00:	99                   	cdq    
c000bd01:	f7 f9                	idiv   ecx
c000bd03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd07:	7d 0c                	jge    c000bd15 <sinc_multichan_vari_process+0x2df>
c000bd09:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd0c:	85 ed                	test   ebp,ebp
c000bd0e:	79 6b                	jns    c000bd7b <sinc_multichan_vari_process+0x345>
c000bd10:	e9 e6 00 00 00       	jmp    c000bdfb <sinc_multichan_vari_process+0x3c5>
c000bd15:	50                   	push   eax
c000bd16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd1a:	57                   	push   edi
c000bd1b:	53                   	push   ebx
c000bd1c:	e8 9b fb ff ff       	call   c000b8bc <prepare_data>
c000bd21:	83 c4 10             	add    esp,0x10
c000bd24:	89 c2                	mov    edx,eax
c000bd26:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd29:	85 c0                	test   eax,eax
c000bd2b:	0f 85 bf 03 00 00    	jne    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd31:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd34:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd37:	01 c8                	add    eax,ecx
c000bd39:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3c:	99                   	cdq    
c000bd3d:	f7 f9                	idiv   ecx
c000bd3f:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd43:	7c c4                	jl     c000bd09 <sinc_multichan_vari_process+0x2d3>
c000bd45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd4d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd50:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd5b:	89 06                	mov    DWORD PTR [esi],eax
c000bd5d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd60:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd63:	99                   	cdq    
c000bd64:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd67:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd6a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd6d:	99                   	cdq    
c000bd6e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd71:	31 d2                	xor    edx,edx
c000bd73:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd76:	e9 75 03 00 00       	jmp    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd7b:	83 ec 0c             	sub    esp,0xc
c000bd7e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bd81:	e8 e5 c0 01 00       	call   c0027e6b <__floatsidf>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd8d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bda1:	e8 e5 b3 01 00       	call   c002718b <__adddf3>
c000bda6:	83 c4 10             	add    esp,0x10
c000bda9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdb1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdc1:	e8 c5 b3 01 00       	call   c002718b <__adddf3>
c000bdc6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bdc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdd1:	e8 95 c0 01 00       	call   c0027e6b <__floatsidf>
c000bdd6:	83 c4 10             	add    esp,0x10
c000bdd9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bddd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bde1:	52                   	push   edx
c000bde2:	50                   	push   eax
c000bde3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdeb:	e8 e5 c2 01 00       	call   c00280d5 <__gedf2>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	85 c0                	test   eax,eax
c000bdf5:	0f 89 4a ff ff ff    	jns    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bdfb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bdff:	0f 8e ed 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be05:	83 ec 10             	sub    esp,0x10
c000be08:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be0b:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be0e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be11:	ff 36                	push   DWORD PTR [esi]
c000be13:	e8 c4 b9 01 00       	call   c00277dc <__subdf3>
c000be18:	83 c4 18             	add    esp,0x18
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	e8 46 c4 01 00       	call   c0028270 <fabs>
c000be2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be2e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be3a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be47:	e8 6d c2 01 00       	call   c00280b9 <__gtdf2>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	85 c0                	test   eax,eax
c000be51:	0f 8e 9b 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be57:	8b 06                	mov    eax,DWORD PTR [esi]
c000be59:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be64:	52                   	push   edx
c000be65:	50                   	push   eax
c000be66:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be69:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be6c:	e8 6b b9 01 00       	call   c00277dc <__subdf3>
c000be71:	59                   	pop    ecx
c000be72:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be76:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be7a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000be7d:	e8 e9 bf 01 00       	call   c0027e6b <__floatsidf>
c000be82:	83 c4 10             	add    esp,0x10
c000be85:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be8d:	52                   	push   edx
c000be8e:	50                   	push   eax
c000be8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be97:	e8 6c b9 01 00       	call   c0027808 <__muldf3>
c000be9c:	5d                   	pop    ebp
c000be9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bea1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bea5:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bea8:	e8 be bf 01 00       	call   c0027e6b <__floatsidf>
c000bead:	83 c4 10             	add    esp,0x10
c000beb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb8:	52                   	push   edx
c000beb9:	50                   	push   eax
c000beba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bec2:	e8 25 bc 01 00       	call   c0027aec <__divdf3>
c000bec7:	83 c4 10             	add    esp,0x10
c000beca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bece:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bed2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bed6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bee2:	e8 a4 b2 01 00       	call   c002718b <__adddf3>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000beee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bef2:	83 ec 0c             	sub    esp,0xc
c000bef5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bef8:	e8 6e bf 01 00       	call   c0027e6b <__floatsidf>
c000befd:	83 c4 10             	add    esp,0x10
c000bf00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf18:	e8 ba c1 01 00       	call   c00280d7 <__ltdf2>
c000bf1d:	83 c4 10             	add    esp,0x10
c000bf20:	85 c0                	test   eax,eax
c000bf22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf26:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf2a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf2e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf32:	78 10                	js     c000bf44 <sinc_multichan_vari_process+0x50e>
c000bf34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf40:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf54:	e8 af b8 01 00       	call   c0027808 <__muldf3>
c000bf59:	59                   	pop    ecx
c000bf5a:	5d                   	pop    ebp
c000bf5b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf5f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf6b:	e8 25 f9 ff ff       	call   c000b895 <double_to_fp>
c000bf70:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf74:	89 c5                	mov    ebp,eax
c000bf76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	e8 81 b8 01 00       	call   c0027808 <__muldf3>
c000bf87:	83 c4 18             	add    esp,0x18
c000bf8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bf8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bf92:	52                   	push   edx
c000bf93:	50                   	push   eax
c000bf94:	e8 fc f8 ff ff       	call   c000b895 <double_to_fp>
c000bf99:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bf9c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfa0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfa3:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfa6:	50                   	push   eax
c000bfa7:	50                   	push   eax
c000bfa8:	50                   	push   eax
c000bfa9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfac:	e8 ba be 01 00       	call   c0027e6b <__floatsidf>
c000bfb1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfb5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfb9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfbd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc9:	e8 1e bb 01 00       	call   c0027aec <__divdf3>
c000bfce:	83 c4 1c             	add    esp,0x1c
c000bfd1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bfd5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bfd9:	52                   	push   edx
c000bfda:	89 ea                	mov    edx,ebp
c000bfdc:	50                   	push   eax
c000bfdd:	89 d8                	mov    eax,ebx
c000bfdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfe2:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bfe6:	e8 69 ed ff ff       	call   c000ad54 <calc_output_multi>
c000bfeb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bfee:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bff1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bffd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c001:	e8 e6 ba 01 00       	call   c0027aec <__divdf3>
c000c006:	83 c4 10             	add    esp,0x10
c000c009:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c00d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c011:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c015:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c019:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c01d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c021:	e8 65 b1 01 00       	call   c002718b <__adddf3>
c000c026:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c02a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c02e:	83 c4 28             	add    esp,0x28
c000c031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c035:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c039:	e8 52 c2 01 00       	call   c0028290 <lrint>
c000c03e:	83 ec 0c             	sub    esp,0xc
c000c041:	50                   	push   eax
c000c042:	e8 24 be 01 00       	call   c0027e6b <__floatsidf>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c04e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c052:	52                   	push   edx
c000c053:	50                   	push   eax
c000c054:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c058:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c05c:	e8 7b b7 01 00       	call   c00277dc <__subdf3>
c000c061:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c065:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c069:	83 c4 20             	add    esp,0x20
c000c06c:	6a 00                	push   0x0
c000c06e:	6a 00                	push   0x0
c000c070:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c078:	e8 5a c0 01 00       	call   c00280d7 <__ltdf2>
c000c07d:	83 c4 10             	add    esp,0x10
c000c080:	85 c0                	test   eax,eax
c000c082:	79 20                	jns    c000c0a4 <sinc_multichan_vari_process+0x66e>
c000c084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c08c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c094:	e8 f2 b0 01 00       	call   c002718b <__adddf3>
c000c099:	83 c4 10             	add    esp,0x10
c000c09c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0a4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0a7:	83 ec 10             	sub    esp,0x10
c000c0aa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0ae:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0c1:	e8 16 b7 01 00       	call   c00277dc <__subdf3>
c000c0c6:	83 c4 18             	add    esp,0x18
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0d1:	52                   	push   edx
c000c0d2:	50                   	push   eax
c000c0d3:	e8 b8 c1 01 00       	call   c0028290 <lrint>
c000c0d8:	0f af e8             	imul   ebp,eax
c000c0db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c0df:	83 c4 10             	add    esp,0x10
c000c0e2:	01 e8                	add    eax,ebp
c000c0e4:	99                   	cdq    
c000c0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c0eb:	e9 fd fb ff ff       	jmp    c000bced <sinc_multichan_vari_process+0x2b7>
c000c0f0:	83 c4 4c             	add    esp,0x4c
c000c0f3:	89 d0                	mov    eax,edx
c000c0f5:	5b                   	pop    ebx
c000c0f6:	5e                   	pop    esi
c000c0f7:	5f                   	pop    edi
c000c0f8:	5d                   	pop    ebp
c000c0f9:	c3                   	ret    

c000c0fa <sinc_hex_vari_process>:
c000c0fa:	55                   	push   ebp
c000c0fb:	ba 05 00 00 00       	mov    edx,0x5
c000c100:	57                   	push   edi
c000c101:	56                   	push   esi
c000c102:	53                   	push   ebx
c000c103:	83 ec 4c             	sub    esp,0x4c
c000c106:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c10a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c10e:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c111:	85 db                	test   ebx,ebx
c000c113:	0f 84 9c 06 00 00    	je     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c119:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c11c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c11f:	0f af c7             	imul   eax,edi
c000c122:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c125:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c128:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c12f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c136:	0f af c7             	imul   eax,edi
c000c139:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c13c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c13f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c142:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c146:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c14a:	68 00 00 70 3f       	push   0x3f700000
c000c14f:	6a 00                	push   0x0
c000c151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c159:	e8 79 bf 01 00       	call   c00280d7 <__ltdf2>
c000c15e:	83 c4 10             	add    esp,0x10
c000c161:	ba 16 00 00 00       	mov    edx,0x16
c000c166:	85 c0                	test   eax,eax
c000c168:	0f 88 47 06 00 00    	js     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c16e:	68 00 00 70 40       	push   0x40700000
c000c173:	6a 00                	push   0x0
c000c175:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17d:	e8 37 bf 01 00       	call   c00280b9 <__gtdf2>
c000c182:	83 c4 10             	add    esp,0x10
c000c185:	ba 16 00 00 00       	mov    edx,0x16
c000c18a:	85 c0                	test   eax,eax
c000c18c:	0f 8f 23 06 00 00    	jg     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c198:	e8 ce bc 01 00       	call   c0027e6b <__floatsidf>
c000c19d:	83 c4 10             	add    esp,0x10
c000c1a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1a8:	68 00 00 00 40       	push   0x40000000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b7:	e8 cf af 01 00       	call   c002718b <__adddf3>
c000c1bc:	59                   	pop    ecx
c000c1bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1c1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1c5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1c8:	e8 9e bc 01 00       	call   c0027e6b <__floatsidf>
c000c1cd:	83 c4 10             	add    esp,0x10
c000c1d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1d8:	52                   	push   edx
c000c1d9:	50                   	push   eax
c000c1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1e2:	e8 05 b9 01 00       	call   c0027aec <__divdf3>
c000c1e7:	83 c4 10             	add    esp,0x10
c000c1ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c1f5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c1f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c200:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c204:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c208:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c210:	e8 a4 be 01 00       	call   c00280b9 <__gtdf2>
c000c215:	83 c4 10             	add    esp,0x10
c000c218:	85 c0                	test   eax,eax
c000c21a:	7e 2d                	jle    c000c249 <sinc_hex_vari_process+0x14f>
c000c21c:	68 00 00 f0 3f       	push   0x3ff00000
c000c221:	6a 00                	push   0x0
c000c223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c227:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c22b:	e8 a7 be 01 00       	call   c00280d7 <__ltdf2>
c000c230:	83 c4 10             	add    esp,0x10
c000c233:	85 c0                	test   eax,eax
c000c235:	79 4d                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c23f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c243:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c247:	eb 1b                	jmp    c000c264 <sinc_hex_vari_process+0x16a>
c000c249:	68 00 00 f0 3f       	push   0x3ff00000
c000c24e:	6a 00                	push   0x0
c000c250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c258:	e8 7a be 01 00       	call   c00280d7 <__ltdf2>
c000c25d:	83 c4 10             	add    esp,0x10
c000c260:	85 c0                	test   eax,eax
c000c262:	79 20                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c264:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c268:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c26c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c270:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c274:	e8 73 b8 01 00       	call   c0027aec <__divdf3>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c280:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c284:	50                   	push   eax
c000c285:	50                   	push   eax
c000c286:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28e:	e8 fd bf 01 00       	call   c0028290 <lrint>
c000c293:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c296:	40                   	inc    eax
c000c297:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29b:	0f af c7             	imul   eax,edi
c000c29e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2a9:	58                   	pop    eax
c000c2aa:	5a                   	pop    edx
c000c2ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b3:	e8 d8 bf 01 00       	call   c0028290 <lrint>
c000c2b8:	83 ec 0c             	sub    esp,0xc
c000c2bb:	50                   	push   eax
c000c2bc:	e8 aa bb 01 00       	call   c0027e6b <__floatsidf>
c000c2c1:	83 c4 10             	add    esp,0x10
c000c2c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2cc:	52                   	push   edx
c000c2cd:	50                   	push   eax
c000c2ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d6:	e8 01 b5 01 00       	call   c00277dc <__subdf3>
c000c2db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2e3:	83 c4 20             	add    esp,0x20
c000c2e6:	6a 00                	push   0x0
c000c2e8:	6a 00                	push   0x0
c000c2ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2f2:	e8 e0 bd 01 00       	call   c00280d7 <__ltdf2>
c000c2f7:	83 c4 10             	add    esp,0x10
c000c2fa:	85 c0                	test   eax,eax
c000c2fc:	79 1f                	jns    c000c31d <sinc_hex_vari_process+0x223>
c000c2fe:	68 00 00 f0 3f       	push   0x3ff00000
c000c303:	6a 00                	push   0x0
c000c305:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c309:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30d:	e8 79 ae 01 00       	call   c002718b <__adddf3>
c000c312:	83 c4 10             	add    esp,0x10
c000c315:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c319:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c31d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c320:	83 ec 10             	sub    esp,0x10
c000c323:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c327:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c32e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c332:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c336:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c33a:	e8 9d b4 01 00       	call   c00277dc <__subdf3>
c000c33f:	83 c4 18             	add    esp,0x18
c000c342:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c34a:	52                   	push   edx
c000c34b:	50                   	push   eax
c000c34c:	e8 3f bf 01 00       	call   c0028290 <lrint>
c000c351:	0f af f8             	imul   edi,eax
c000c354:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c358:	01 f8                	add    eax,edi
c000c35a:	99                   	cdq    
c000c35b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c35e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c361:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c365:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c369:	68 00 00 f0 3f       	push   0x3ff00000
c000c36e:	6a 00                	push   0x0
c000c370:	e8 77 b7 01 00       	call   c0027aec <__divdf3>
c000c375:	83 c4 10             	add    esp,0x10
c000c378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c37c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c380:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c385:	68 23 42 92 0c       	push   0xc924223
c000c38a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c38e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c392:	e8 f4 ad 01 00       	call   c002718b <__adddf3>
c000c397:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c39b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c39f:	83 c4 20             	add    esp,0x20
c000c3a2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3aa:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3b5:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3b8:	7d 50                	jge    c000c40a <sinc_hex_vari_process+0x310>
c000c3ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3c0:	01 c8                	add    eax,ecx
c000c3c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3c5:	99                   	cdq    
c000c3c6:	f7 f9                	idiv   ecx
c000c3c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3cc:	7d 0c                	jge    c000c3da <sinc_hex_vari_process+0x2e0>
c000c3ce:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3d1:	85 ff                	test   edi,edi
c000c3d3:	79 6c                	jns    c000c441 <sinc_hex_vari_process+0x347>
c000c3d5:	e9 e7 00 00 00       	jmp    c000c4c1 <sinc_hex_vari_process+0x3c7>
c000c3da:	50                   	push   eax
c000c3db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3df:	56                   	push   esi
c000c3e0:	53                   	push   ebx
c000c3e1:	e8 d6 f4 ff ff       	call   c000b8bc <prepare_data>
c000c3e6:	83 c4 10             	add    esp,0x10
c000c3e9:	89 c2                	mov    edx,eax
c000c3eb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c3ee:	85 c0                	test   eax,eax
c000c3f0:	0f 85 bf 03 00 00    	jne    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c3f6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fc:	01 c8                	add    eax,ecx
c000c3fe:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c401:	99                   	cdq    
c000c402:	f7 f9                	idiv   ecx
c000c404:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c408:	7c c4                	jl     c000c3ce <sinc_hex_vari_process+0x2d4>
c000c40a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c40e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c412:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c415:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c41c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c420:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c423:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c426:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c429:	99                   	cdq    
c000c42a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c42d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c430:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c433:	99                   	cdq    
c000c434:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c437:	31 d2                	xor    edx,edx
c000c439:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c43c:	e9 74 03 00 00       	jmp    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c441:	83 ec 0c             	sub    esp,0xc
c000c444:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c447:	e8 1f ba 01 00       	call   c0027e6b <__floatsidf>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c453:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c457:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c463:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c467:	e8 1f ad 01 00       	call   c002718b <__adddf3>
c000c46c:	83 c4 10             	add    esp,0x10
c000c46f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c473:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c477:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c483:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c487:	e8 ff ac 01 00       	call   c002718b <__adddf3>
c000c48c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c48f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c493:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c497:	e8 cf b9 01 00       	call   c0027e6b <__floatsidf>
c000c49c:	83 c4 10             	add    esp,0x10
c000c49f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4a7:	52                   	push   edx
c000c4a8:	50                   	push   eax
c000c4a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4b1:	e8 1f bc 01 00       	call   c00280d5 <__gedf2>
c000c4b6:	83 c4 10             	add    esp,0x10
c000c4b9:	85 c0                	test   eax,eax
c000c4bb:	0f 89 49 ff ff ff    	jns    c000c40a <sinc_hex_vari_process+0x310>
c000c4c1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4c5:	0f 8e ef 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c4cb:	83 ec 10             	sub    esp,0x10
c000c4ce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4d1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4d4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4d7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c4da:	e8 fd b2 01 00       	call   c00277dc <__subdf3>
c000c4df:	83 c4 18             	add    esp,0x18
c000c4e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4ea:	52                   	push   edx
c000c4eb:	50                   	push   eax
c000c4ec:	e8 7f bd 01 00       	call   c0028270 <fabs>
c000c4f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f9:	83 c4 10             	add    esp,0x10
c000c4fc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c501:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c506:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50e:	e8 a6 bb 01 00       	call   c00280b9 <__gtdf2>
c000c513:	83 c4 10             	add    esp,0x10
c000c516:	85 c0                	test   eax,eax
c000c518:	0f 8e 9c 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c51e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c521:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c524:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c528:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c531:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c534:	e8 a3 b2 01 00       	call   c00277dc <__subdf3>
c000c539:	59                   	pop    ecx
c000c53a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c53e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c542:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c545:	e8 21 b9 01 00       	call   c0027e6b <__floatsidf>
c000c54a:	83 c4 10             	add    esp,0x10
c000c54d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c551:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c555:	52                   	push   edx
c000c556:	50                   	push   eax
c000c557:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55f:	e8 a4 b2 01 00       	call   c0027808 <__muldf3>
c000c564:	5f                   	pop    edi
c000c565:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c569:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c56d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c570:	e8 f6 b8 01 00       	call   c0027e6b <__floatsidf>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c586:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c58a:	e8 5d b5 01 00       	call   c0027aec <__divdf3>
c000c58f:	83 c4 10             	add    esp,0x10
c000c592:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c596:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c59a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5aa:	e8 dc ab 01 00       	call   c002718b <__adddf3>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5ba:	83 ec 0c             	sub    esp,0xc
c000c5bd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5c0:	e8 a6 b8 01 00       	call   c0027e6b <__floatsidf>
c000c5c5:	83 c4 10             	add    esp,0x10
c000c5c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5e0:	e8 f2 ba 01 00       	call   c00280d7 <__ltdf2>
c000c5e5:	83 c4 10             	add    esp,0x10
c000c5e8:	85 c0                	test   eax,eax
c000c5ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c5f2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c5f6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c5fa:	78 10                	js     c000c60c <sinc_hex_vari_process+0x512>
c000c5fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c600:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c604:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c608:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c60c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c610:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c614:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c618:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c61c:	e8 e7 b1 01 00       	call   c0027808 <__muldf3>
c000c621:	59                   	pop    ecx
c000c622:	5f                   	pop    edi
c000c623:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c627:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c62b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c62f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c633:	e8 5d f2 ff ff       	call   c000b895 <double_to_fp>
c000c638:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c63c:	89 c7                	mov    edi,eax
c000c63e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c642:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	e8 b9 b1 01 00       	call   c0027808 <__muldf3>
c000c64f:	83 c4 18             	add    esp,0x18
c000c652:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c656:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c65a:	52                   	push   edx
c000c65b:	50                   	push   eax
c000c65c:	e8 34 f2 ff ff       	call   c000b895 <double_to_fp>
c000c661:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c664:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c668:	83 c4 0c             	add    esp,0xc
c000c66b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c66e:	8d 04 90             	lea    eax,[eax+edx*4]
c000c671:	50                   	push   eax
c000c672:	50                   	push   eax
c000c673:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c676:	e8 f0 b7 01 00       	call   c0027e6b <__floatsidf>
c000c67b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c67f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c683:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c687:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c693:	e8 54 b4 01 00       	call   c0027aec <__divdf3>
c000c698:	83 c4 18             	add    esp,0x18
c000c69b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c69f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6a3:	52                   	push   edx
c000c6a4:	89 fa                	mov    edx,edi
c000c6a6:	50                   	push   eax
c000c6a7:	89 d8                	mov    eax,ebx
c000c6a9:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ad:	e8 50 de ff ff       	call   c000a502 <calc_output_hex>
c000c6b2:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c6:	e8 21 b4 01 00       	call   c0027aec <__divdf3>
c000c6cb:	83 c4 10             	add    esp,0x10
c000c6ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e6:	e8 a0 aa 01 00       	call   c002718b <__adddf3>
c000c6eb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c6ef:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c6f3:	83 c4 18             	add    esp,0x18
c000c6f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fe:	e8 8d bb 01 00       	call   c0028290 <lrint>
c000c703:	83 ec 0c             	sub    esp,0xc
c000c706:	50                   	push   eax
c000c707:	e8 5f b7 01 00       	call   c0027e6b <__floatsidf>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c713:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c717:	52                   	push   edx
c000c718:	50                   	push   eax
c000c719:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c721:	e8 b6 b0 01 00       	call   c00277dc <__subdf3>
c000c726:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c72a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c72e:	83 c4 20             	add    esp,0x20
c000c731:	6a 00                	push   0x0
c000c733:	6a 00                	push   0x0
c000c735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c739:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73d:	e8 95 b9 01 00       	call   c00280d7 <__ltdf2>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	85 c0                	test   eax,eax
c000c747:	79 20                	jns    c000c769 <sinc_hex_vari_process+0x66f>
c000c749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c74d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c759:	e8 2d aa 01 00       	call   c002718b <__adddf3>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c765:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c769:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c76c:	83 ec 10             	sub    esp,0x10
c000c76f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c773:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c782:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c786:	e8 51 b0 01 00       	call   c00277dc <__subdf3>
c000c78b:	83 c4 18             	add    esp,0x18
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c796:	52                   	push   edx
c000c797:	50                   	push   eax
c000c798:	e8 f3 ba 01 00       	call   c0028290 <lrint>
c000c79d:	0f af f8             	imul   edi,eax
c000c7a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7a4:	83 c4 10             	add    esp,0x10
c000c7a7:	01 f8                	add    eax,edi
c000c7a9:	99                   	cdq    
c000c7aa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ad:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7b0:	e9 fd fb ff ff       	jmp    c000c3b2 <sinc_hex_vari_process+0x2b8>
c000c7b5:	83 c4 4c             	add    esp,0x4c
c000c7b8:	89 d0                	mov    eax,edx
c000c7ba:	5b                   	pop    ebx
c000c7bb:	5e                   	pop    esi
c000c7bc:	5f                   	pop    edi
c000c7bd:	5d                   	pop    ebp
c000c7be:	c3                   	ret    

c000c7bf <sinc_quad_vari_process>:
c000c7bf:	55                   	push   ebp
c000c7c0:	ba 05 00 00 00       	mov    edx,0x5
c000c7c5:	57                   	push   edi
c000c7c6:	56                   	push   esi
c000c7c7:	53                   	push   ebx
c000c7c8:	83 ec 4c             	sub    esp,0x4c
c000c7cb:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7cf:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7d3:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7d6:	85 db                	test   ebx,ebx
c000c7d8:	0f 84 9c 06 00 00    	je     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c7de:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c7e1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7e4:	0f af c7             	imul   eax,edi
c000c7e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c7ea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c7ed:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c7f4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c7fb:	0f af c7             	imul   eax,edi
c000c7fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c801:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c804:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c807:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c80b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c80f:	68 00 00 70 3f       	push   0x3f700000
c000c814:	6a 00                	push   0x0
c000c816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81e:	e8 b4 b8 01 00       	call   c00280d7 <__ltdf2>
c000c823:	83 c4 10             	add    esp,0x10
c000c826:	ba 16 00 00 00       	mov    edx,0x16
c000c82b:	85 c0                	test   eax,eax
c000c82d:	0f 88 47 06 00 00    	js     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c833:	68 00 00 70 40       	push   0x40700000
c000c838:	6a 00                	push   0x0
c000c83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c842:	e8 72 b8 01 00       	call   c00280b9 <__gtdf2>
c000c847:	83 c4 10             	add    esp,0x10
c000c84a:	ba 16 00 00 00       	mov    edx,0x16
c000c84f:	85 c0                	test   eax,eax
c000c851:	0f 8f 23 06 00 00    	jg     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c857:	83 ec 0c             	sub    esp,0xc
c000c85a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c85d:	e8 09 b6 01 00       	call   c0027e6b <__floatsidf>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c869:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c86d:	68 00 00 00 40       	push   0x40000000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c87c:	e8 0a a9 01 00       	call   c002718b <__adddf3>
c000c881:	59                   	pop    ecx
c000c882:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c886:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c88a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c88d:	e8 d9 b5 01 00       	call   c0027e6b <__floatsidf>
c000c892:	83 c4 10             	add    esp,0x10
c000c895:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c899:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c89d:	52                   	push   edx
c000c89e:	50                   	push   eax
c000c89f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a7:	e8 40 b2 01 00       	call   c0027aec <__divdf3>
c000c8ac:	83 c4 10             	add    esp,0x10
c000c8af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8b3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8ba:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d5:	e8 df b7 01 00       	call   c00280b9 <__gtdf2>
c000c8da:	83 c4 10             	add    esp,0x10
c000c8dd:	85 c0                	test   eax,eax
c000c8df:	7e 2d                	jle    c000c90e <sinc_quad_vari_process+0x14f>
c000c8e1:	68 00 00 f0 3f       	push   0x3ff00000
c000c8e6:	6a 00                	push   0x0
c000c8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8f0:	e8 e2 b7 01 00       	call   c00280d7 <__ltdf2>
c000c8f5:	83 c4 10             	add    esp,0x10
c000c8f8:	85 c0                	test   eax,eax
c000c8fa:	79 4d                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c900:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c90c:	eb 1b                	jmp    c000c929 <sinc_quad_vari_process+0x16a>
c000c90e:	68 00 00 f0 3f       	push   0x3ff00000
c000c913:	6a 00                	push   0x0
c000c915:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c91d:	e8 b5 b7 01 00       	call   c00280d7 <__ltdf2>
c000c922:	83 c4 10             	add    esp,0x10
c000c925:	85 c0                	test   eax,eax
c000c927:	79 20                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c929:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c92d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c931:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c935:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c939:	e8 ae b1 01 00       	call   c0027aec <__divdf3>
c000c93e:	83 c4 10             	add    esp,0x10
c000c941:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c945:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c949:	50                   	push   eax
c000c94a:	50                   	push   eax
c000c94b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c94f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c953:	e8 38 b9 01 00       	call   c0028290 <lrint>
c000c958:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c95b:	40                   	inc    eax
c000c95c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c960:	0f af c7             	imul   eax,edi
c000c963:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c96a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c96e:	58                   	pop    eax
c000c96f:	5a                   	pop    edx
c000c970:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c974:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c978:	e8 13 b9 01 00       	call   c0028290 <lrint>
c000c97d:	83 ec 0c             	sub    esp,0xc
c000c980:	50                   	push   eax
c000c981:	e8 e5 b4 01 00       	call   c0027e6b <__floatsidf>
c000c986:	83 c4 10             	add    esp,0x10
c000c989:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c98d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c991:	52                   	push   edx
c000c992:	50                   	push   eax
c000c993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c99b:	e8 3c ae 01 00       	call   c00277dc <__subdf3>
c000c9a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a8:	83 c4 20             	add    esp,0x20
c000c9ab:	6a 00                	push   0x0
c000c9ad:	6a 00                	push   0x0
c000c9af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b7:	e8 1b b7 01 00       	call   c00280d7 <__ltdf2>
c000c9bc:	83 c4 10             	add    esp,0x10
c000c9bf:	85 c0                	test   eax,eax
c000c9c1:	79 1f                	jns    c000c9e2 <sinc_quad_vari_process+0x223>
c000c9c3:	68 00 00 f0 3f       	push   0x3ff00000
c000c9c8:	6a 00                	push   0x0
c000c9ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9d2:	e8 b4 a7 01 00       	call   c002718b <__adddf3>
c000c9d7:	83 c4 10             	add    esp,0x10
c000c9da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9e2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9e5:	83 ec 10             	sub    esp,0x10
c000c9e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9ec:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9ff:	e8 d8 ad 01 00       	call   c00277dc <__subdf3>
c000ca04:	83 c4 18             	add    esp,0x18
c000ca07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca0f:	52                   	push   edx
c000ca10:	50                   	push   eax
c000ca11:	e8 7a b8 01 00       	call   c0028290 <lrint>
c000ca16:	0f af f8             	imul   edi,eax
c000ca19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca1d:	01 f8                	add    eax,edi
c000ca1f:	99                   	cdq    
c000ca20:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca23:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2e:	68 00 00 f0 3f       	push   0x3ff00000
c000ca33:	6a 00                	push   0x0
c000ca35:	e8 b2 b0 01 00       	call   c0027aec <__divdf3>
c000ca3a:	83 c4 10             	add    esp,0x10
c000ca3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca45:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca4a:	68 23 42 92 0c       	push   0xc924223
c000ca4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca57:	e8 2f a7 01 00       	call   c002718b <__adddf3>
c000ca5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca64:	83 c4 20             	add    esp,0x20
c000ca67:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca6f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca77:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca7a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ca7d:	7d 50                	jge    c000cacf <sinc_quad_vari_process+0x310>
c000ca7f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ca82:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ca85:	01 c8                	add    eax,ecx
c000ca87:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ca8a:	99                   	cdq    
c000ca8b:	f7 f9                	idiv   ecx
c000ca8d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ca91:	7d 0c                	jge    c000ca9f <sinc_quad_vari_process+0x2e0>
c000ca93:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000ca96:	85 ff                	test   edi,edi
c000ca98:	79 6c                	jns    c000cb06 <sinc_quad_vari_process+0x347>
c000ca9a:	e9 e7 00 00 00       	jmp    c000cb86 <sinc_quad_vari_process+0x3c7>
c000ca9f:	50                   	push   eax
c000caa0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000caa4:	56                   	push   esi
c000caa5:	53                   	push   ebx
c000caa6:	e8 11 ee ff ff       	call   c000b8bc <prepare_data>
c000caab:	83 c4 10             	add    esp,0x10
c000caae:	89 c2                	mov    edx,eax
c000cab0:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cab3:	85 c0                	test   eax,eax
c000cab5:	0f 85 bf 03 00 00    	jne    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cabb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabe:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac1:	01 c8                	add    eax,ecx
c000cac3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac6:	99                   	cdq    
c000cac7:	f7 f9                	idiv   ecx
c000cac9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacd:	7c c4                	jl     c000ca93 <sinc_quad_vari_process+0x2d4>
c000cacf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cad7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cada:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cadd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cae1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cae5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cae8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000caeb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000caee:	99                   	cdq    
c000caef:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000caf2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000caf5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000caf8:	99                   	cdq    
c000caf9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cafc:	31 d2                	xor    edx,edx
c000cafe:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb01:	e9 74 03 00 00       	jmp    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cb06:	83 ec 0c             	sub    esp,0xc
c000cb09:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb0c:	e8 5a b3 01 00       	call   c0027e6b <__floatsidf>
c000cb11:	83 c4 10             	add    esp,0x10
c000cb14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb18:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb2c:	e8 5a a6 01 00       	call   c002718b <__adddf3>
c000cb31:	83 c4 10             	add    esp,0x10
c000cb34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb38:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb4c:	e8 3a a6 01 00       	call   c002718b <__adddf3>
c000cb51:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb5c:	e8 0a b3 01 00       	call   c0027e6b <__floatsidf>
c000cb61:	83 c4 10             	add    esp,0x10
c000cb64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb68:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb6c:	52                   	push   edx
c000cb6d:	50                   	push   eax
c000cb6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb76:	e8 5a b5 01 00       	call   c00280d5 <__gedf2>
c000cb7b:	83 c4 10             	add    esp,0x10
c000cb7e:	85 c0                	test   eax,eax
c000cb80:	0f 89 49 ff ff ff    	jns    c000cacf <sinc_quad_vari_process+0x310>
c000cb86:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cb8a:	0f 8e ef 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cb90:	83 ec 10             	sub    esp,0x10
c000cb93:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cb96:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cb99:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cb9c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cb9f:	e8 38 ac 01 00       	call   c00277dc <__subdf3>
c000cba4:	83 c4 18             	add    esp,0x18
c000cba7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbaf:	52                   	push   edx
c000cbb0:	50                   	push   eax
c000cbb1:	e8 ba b6 01 00       	call   c0028270 <fabs>
c000cbb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbbe:	83 c4 10             	add    esp,0x10
c000cbc1:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbc6:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd3:	e8 e1 b4 01 00       	call   c00280b9 <__gtdf2>
c000cbd8:	83 c4 10             	add    esp,0x10
c000cbdb:	85 c0                	test   eax,eax
c000cbdd:	0f 8e 9c 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cbe3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbe6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cbe9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbf6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbf9:	e8 de ab 01 00       	call   c00277dc <__subdf3>
c000cbfe:	59                   	pop    ecx
c000cbff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc03:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc07:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc0a:	e8 5c b2 01 00       	call   c0027e6b <__floatsidf>
c000cc0f:	83 c4 10             	add    esp,0x10
c000cc12:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc1a:	52                   	push   edx
c000cc1b:	50                   	push   eax
c000cc1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc24:	e8 df ab 01 00       	call   c0027808 <__muldf3>
c000cc29:	5f                   	pop    edi
c000cc2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc2e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc35:	e8 31 b2 01 00       	call   c0027e6b <__floatsidf>
c000cc3a:	83 c4 10             	add    esp,0x10
c000cc3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4f:	e8 98 ae 01 00       	call   c0027aec <__divdf3>
c000cc54:	83 c4 10             	add    esp,0x10
c000cc57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc5b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6f:	e8 17 a5 01 00       	call   c002718b <__adddf3>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc7b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc7f:	83 ec 0c             	sub    esp,0xc
c000cc82:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cc85:	e8 e1 b1 01 00       	call   c0027e6b <__floatsidf>
c000cc8a:	83 c4 10             	add    esp,0x10
c000cc8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca5:	e8 2d b4 01 00       	call   c00280d7 <__ltdf2>
c000ccaa:	83 c4 10             	add    esp,0x10
c000ccad:	85 c0                	test   eax,eax
c000ccaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccb3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccb7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccbb:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccbf:	78 10                	js     c000ccd1 <sinc_quad_vari_process+0x512>
c000ccc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ccc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cccd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ccd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccdd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cce1:	e8 22 ab 01 00       	call   c0027808 <__muldf3>
c000cce6:	59                   	pop    ecx
c000cce7:	5f                   	pop    edi
c000cce8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf8:	e8 98 eb ff ff       	call   c000b895 <double_to_fp>
c000ccfd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd01:	89 c7                	mov    edi,eax
c000cd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	e8 f4 aa 01 00       	call   c0027808 <__muldf3>
c000cd14:	83 c4 18             	add    esp,0x18
c000cd17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd1b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd1f:	52                   	push   edx
c000cd20:	50                   	push   eax
c000cd21:	e8 6f eb ff ff       	call   c000b895 <double_to_fp>
c000cd26:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd29:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd2d:	83 c4 0c             	add    esp,0xc
c000cd30:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd33:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd36:	50                   	push   eax
c000cd37:	50                   	push   eax
c000cd38:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3b:	e8 2b b1 01 00       	call   c0027e6b <__floatsidf>
c000cd40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd48:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd58:	e8 8f ad 01 00       	call   c0027aec <__divdf3>
c000cd5d:	83 c4 18             	add    esp,0x18
c000cd60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd68:	52                   	push   edx
c000cd69:	89 fa                	mov    edx,edi
c000cd6b:	50                   	push   eax
c000cd6c:	89 d8                	mov    eax,ebx
c000cd6e:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd72:	e8 a5 d1 ff ff       	call   c0009f1c <calc_output_quad>
c000cd77:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cd7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd8b:	e8 5c ad 01 00       	call   c0027aec <__divdf3>
c000cd90:	83 c4 10             	add    esp,0x10
c000cd93:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd97:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cda3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cda7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdab:	e8 db a3 01 00       	call   c002718b <__adddf3>
c000cdb0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdb4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdb8:	83 c4 18             	add    esp,0x18
c000cdbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdc3:	e8 c8 b4 01 00       	call   c0028290 <lrint>
c000cdc8:	83 ec 0c             	sub    esp,0xc
c000cdcb:	50                   	push   eax
c000cdcc:	e8 9a b0 01 00       	call   c0027e6b <__floatsidf>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cddc:	52                   	push   edx
c000cddd:	50                   	push   eax
c000cdde:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde6:	e8 f1 a9 01 00       	call   c00277dc <__subdf3>
c000cdeb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdf3:	83 c4 20             	add    esp,0x20
c000cdf6:	6a 00                	push   0x0
c000cdf8:	6a 00                	push   0x0
c000cdfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce02:	e8 d0 b2 01 00       	call   c00280d7 <__ltdf2>
c000ce07:	83 c4 10             	add    esp,0x10
c000ce0a:	85 c0                	test   eax,eax
c000ce0c:	79 20                	jns    c000ce2e <sinc_quad_vari_process+0x66f>
c000ce0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1e:	e8 68 a3 01 00       	call   c002718b <__adddf3>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce2e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce31:	83 ec 10             	sub    esp,0x10
c000ce34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce38:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce4b:	e8 8c a9 01 00       	call   c00277dc <__subdf3>
c000ce50:	83 c4 18             	add    esp,0x18
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce5b:	52                   	push   edx
c000ce5c:	50                   	push   eax
c000ce5d:	e8 2e b4 01 00       	call   c0028290 <lrint>
c000ce62:	0f af f8             	imul   edi,eax
c000ce65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce69:	83 c4 10             	add    esp,0x10
c000ce6c:	01 f8                	add    eax,edi
c000ce6e:	99                   	cdq    
c000ce6f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce72:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce75:	e9 fd fb ff ff       	jmp    c000ca77 <sinc_quad_vari_process+0x2b8>
c000ce7a:	83 c4 4c             	add    esp,0x4c
c000ce7d:	89 d0                	mov    eax,edx
c000ce7f:	5b                   	pop    ebx
c000ce80:	5e                   	pop    esi
c000ce81:	5f                   	pop    edi
c000ce82:	5d                   	pop    ebp
c000ce83:	c3                   	ret    

c000ce84 <sinc_stereo_vari_process>:
c000ce84:	55                   	push   ebp
c000ce85:	ba 05 00 00 00       	mov    edx,0x5
c000ce8a:	57                   	push   edi
c000ce8b:	56                   	push   esi
c000ce8c:	53                   	push   ebx
c000ce8d:	83 ec 4c             	sub    esp,0x4c
c000ce90:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ce94:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ce98:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ce9b:	85 db                	test   ebx,ebx
c000ce9d:	0f 84 9c 06 00 00    	je     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cea3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cea6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cea9:	0f af c7             	imul   eax,edi
c000ceac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ceaf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceb2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ceb9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cec0:	0f af c7             	imul   eax,edi
c000cec3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cec6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cec9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cecc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ced0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ced4:	68 00 00 70 3f       	push   0x3f700000
c000ced9:	6a 00                	push   0x0
c000cedb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee3:	e8 ef b1 01 00       	call   c00280d7 <__ltdf2>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	ba 16 00 00 00       	mov    edx,0x16
c000cef0:	85 c0                	test   eax,eax
c000cef2:	0f 88 47 06 00 00    	js     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cef8:	68 00 00 70 40       	push   0x40700000
c000cefd:	6a 00                	push   0x0
c000ceff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf07:	e8 ad b1 01 00       	call   c00280b9 <__gtdf2>
c000cf0c:	83 c4 10             	add    esp,0x10
c000cf0f:	ba 16 00 00 00       	mov    edx,0x16
c000cf14:	85 c0                	test   eax,eax
c000cf16:	0f 8f 23 06 00 00    	jg     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cf1c:	83 ec 0c             	sub    esp,0xc
c000cf1f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf22:	e8 44 af 01 00       	call   c0027e6b <__floatsidf>
c000cf27:	83 c4 10             	add    esp,0x10
c000cf2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf32:	68 00 00 00 40       	push   0x40000000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf41:	e8 45 a2 01 00       	call   c002718b <__adddf3>
c000cf46:	59                   	pop    ecx
c000cf47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf4b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf4f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf52:	e8 14 af 01 00       	call   c0027e6b <__floatsidf>
c000cf57:	83 c4 10             	add    esp,0x10
c000cf5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf62:	52                   	push   edx
c000cf63:	50                   	push   eax
c000cf64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf6c:	e8 7b ab 01 00       	call   c0027aec <__divdf3>
c000cf71:	83 c4 10             	add    esp,0x10
c000cf74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf78:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf7c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cf7f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cf82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf9a:	e8 1a b1 01 00       	call   c00280b9 <__gtdf2>
c000cf9f:	83 c4 10             	add    esp,0x10
c000cfa2:	85 c0                	test   eax,eax
c000cfa4:	7e 2d                	jle    c000cfd3 <sinc_stereo_vari_process+0x14f>
c000cfa6:	68 00 00 f0 3f       	push   0x3ff00000
c000cfab:	6a 00                	push   0x0
c000cfad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb5:	e8 1d b1 01 00       	call   c00280d7 <__ltdf2>
c000cfba:	83 c4 10             	add    esp,0x10
c000cfbd:	85 c0                	test   eax,eax
c000cfbf:	79 4d                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfcd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfd1:	eb 1b                	jmp    c000cfee <sinc_stereo_vari_process+0x16a>
c000cfd3:	68 00 00 f0 3f       	push   0x3ff00000
c000cfd8:	6a 00                	push   0x0
c000cfda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfe2:	e8 f0 b0 01 00       	call   c00280d7 <__ltdf2>
c000cfe7:	83 c4 10             	add    esp,0x10
c000cfea:	85 c0                	test   eax,eax
c000cfec:	79 20                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffe:	e8 e9 aa 01 00       	call   c0027aec <__divdf3>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d00e:	50                   	push   eax
c000d00f:	50                   	push   eax
c000d010:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d014:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d018:	e8 73 b2 01 00       	call   c0028290 <lrint>
c000d01d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d020:	40                   	inc    eax
c000d021:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d025:	0f af c7             	imul   eax,edi
c000d028:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d02c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d02f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d033:	58                   	pop    eax
c000d034:	5a                   	pop    edx
c000d035:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d039:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03d:	e8 4e b2 01 00       	call   c0028290 <lrint>
c000d042:	83 ec 0c             	sub    esp,0xc
c000d045:	50                   	push   eax
c000d046:	e8 20 ae 01 00       	call   c0027e6b <__floatsidf>
c000d04b:	83 c4 10             	add    esp,0x10
c000d04e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d052:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d056:	52                   	push   edx
c000d057:	50                   	push   eax
c000d058:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d05c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d060:	e8 77 a7 01 00       	call   c00277dc <__subdf3>
c000d065:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d069:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d06d:	83 c4 20             	add    esp,0x20
c000d070:	6a 00                	push   0x0
c000d072:	6a 00                	push   0x0
c000d074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d07c:	e8 56 b0 01 00       	call   c00280d7 <__ltdf2>
c000d081:	83 c4 10             	add    esp,0x10
c000d084:	85 c0                	test   eax,eax
c000d086:	79 1f                	jns    c000d0a7 <sinc_stereo_vari_process+0x223>
c000d088:	68 00 00 f0 3f       	push   0x3ff00000
c000d08d:	6a 00                	push   0x0
c000d08f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d093:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d097:	e8 ef a0 01 00       	call   c002718b <__adddf3>
c000d09c:	83 c4 10             	add    esp,0x10
c000d09f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0a7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0aa:	83 ec 10             	sub    esp,0x10
c000d0ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0b1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c4:	e8 13 a7 01 00       	call   c00277dc <__subdf3>
c000d0c9:	83 c4 18             	add    esp,0x18
c000d0cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0d4:	52                   	push   edx
c000d0d5:	50                   	push   eax
c000d0d6:	e8 b5 b1 01 00       	call   c0028290 <lrint>
c000d0db:	0f af f8             	imul   edi,eax
c000d0de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0e2:	01 f8                	add    eax,edi
c000d0e4:	99                   	cdq    
c000d0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0f3:	68 00 00 f0 3f       	push   0x3ff00000
c000d0f8:	6a 00                	push   0x0
c000d0fa:	e8 ed a9 01 00       	call   c0027aec <__divdf3>
c000d0ff:	83 c4 10             	add    esp,0x10
c000d102:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d106:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d10a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d10f:	68 23 42 92 0c       	push   0xc924223
c000d114:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d118:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d11c:	e8 6a a0 01 00       	call   c002718b <__adddf3>
c000d121:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d125:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d129:	83 c4 20             	add    esp,0x20
c000d12c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d134:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d13c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d13f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d142:	7d 50                	jge    c000d194 <sinc_stereo_vari_process+0x310>
c000d144:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d147:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d14a:	01 c8                	add    eax,ecx
c000d14c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d14f:	99                   	cdq    
c000d150:	f7 f9                	idiv   ecx
c000d152:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d156:	7d 0c                	jge    c000d164 <sinc_stereo_vari_process+0x2e0>
c000d158:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d15b:	85 ff                	test   edi,edi
c000d15d:	79 6c                	jns    c000d1cb <sinc_stereo_vari_process+0x347>
c000d15f:	e9 e7 00 00 00       	jmp    c000d24b <sinc_stereo_vari_process+0x3c7>
c000d164:	50                   	push   eax
c000d165:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d169:	56                   	push   esi
c000d16a:	53                   	push   ebx
c000d16b:	e8 4c e7 ff ff       	call   c000b8bc <prepare_data>
c000d170:	83 c4 10             	add    esp,0x10
c000d173:	89 c2                	mov    edx,eax
c000d175:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d178:	85 c0                	test   eax,eax
c000d17a:	0f 85 bf 03 00 00    	jne    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d180:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d183:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d186:	01 c8                	add    eax,ecx
c000d188:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d18b:	99                   	cdq    
c000d18c:	f7 f9                	idiv   ecx
c000d18e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d192:	7c c4                	jl     c000d158 <sinc_stereo_vari_process+0x2d4>
c000d194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d198:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d19c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d19f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ad:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1b3:	99                   	cdq    
c000d1b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1bd:	99                   	cdq    
c000d1be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1c1:	31 d2                	xor    edx,edx
c000d1c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1c6:	e9 74 03 00 00       	jmp    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d1cb:	83 ec 0c             	sub    esp,0xc
c000d1ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1d1:	e8 95 ac 01 00       	call   c0027e6b <__floatsidf>
c000d1d6:	83 c4 10             	add    esp,0x10
c000d1d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1dd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1f1:	e8 95 9f 01 00       	call   c002718b <__adddf3>
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d201:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d205:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d20d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d211:	e8 75 9f 01 00       	call   c002718b <__adddf3>
c000d216:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d219:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d21d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d221:	e8 45 ac 01 00       	call   c0027e6b <__floatsidf>
c000d226:	83 c4 10             	add    esp,0x10
c000d229:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d22d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d231:	52                   	push   edx
c000d232:	50                   	push   eax
c000d233:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d237:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d23b:	e8 95 ae 01 00       	call   c00280d5 <__gedf2>
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	85 c0                	test   eax,eax
c000d245:	0f 89 49 ff ff ff    	jns    c000d194 <sinc_stereo_vari_process+0x310>
c000d24b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d24f:	0f 8e ef 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d255:	83 ec 10             	sub    esp,0x10
c000d258:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d25b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d25e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d261:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d264:	e8 73 a5 01 00       	call   c00277dc <__subdf3>
c000d269:	83 c4 18             	add    esp,0x18
c000d26c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d270:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d274:	52                   	push   edx
c000d275:	50                   	push   eax
c000d276:	e8 f5 af 01 00       	call   c0028270 <fabs>
c000d27b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d283:	83 c4 10             	add    esp,0x10
c000d286:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d28b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d290:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d294:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d298:	e8 1c ae 01 00       	call   c00280b9 <__gtdf2>
c000d29d:	83 c4 10             	add    esp,0x10
c000d2a0:	85 c0                	test   eax,eax
c000d2a2:	0f 8e 9c 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d2a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ab:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2be:	e8 19 a5 01 00       	call   c00277dc <__subdf3>
c000d2c3:	59                   	pop    ecx
c000d2c4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2c8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2cc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2cf:	e8 97 ab 01 00       	call   c0027e6b <__floatsidf>
c000d2d4:	83 c4 10             	add    esp,0x10
c000d2d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2df:	52                   	push   edx
c000d2e0:	50                   	push   eax
c000d2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e9:	e8 1a a5 01 00       	call   c0027808 <__muldf3>
c000d2ee:	5f                   	pop    edi
c000d2ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2f3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2f7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d2fa:	e8 6c ab 01 00       	call   c0027e6b <__floatsidf>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d306:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d310:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d314:	e8 d3 a7 01 00       	call   c0027aec <__divdf3>
c000d319:	83 c4 10             	add    esp,0x10
c000d31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d32c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d330:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d334:	e8 52 9e 01 00       	call   c002718b <__adddf3>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d344:	83 ec 0c             	sub    esp,0xc
c000d347:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d34a:	e8 1c ab 01 00       	call   c0027e6b <__floatsidf>
c000d34f:	83 c4 10             	add    esp,0x10
c000d352:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d356:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d35a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d36a:	e8 68 ad 01 00       	call   c00280d7 <__ltdf2>
c000d36f:	83 c4 10             	add    esp,0x10
c000d372:	85 c0                	test   eax,eax
c000d374:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d378:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d37c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d380:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d384:	78 10                	js     c000d396 <sinc_stereo_vari_process+0x512>
c000d386:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d38a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d38e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d392:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a6:	e8 5d a4 01 00       	call   c0027808 <__muldf3>
c000d3ab:	59                   	pop    ecx
c000d3ac:	5f                   	pop    edi
c000d3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3bd:	e8 d3 e4 ff ff       	call   c000b895 <double_to_fp>
c000d3c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3c6:	89 c7                	mov    edi,eax
c000d3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	e8 2f a4 01 00       	call   c0027808 <__muldf3>
c000d3d9:	83 c4 18             	add    esp,0x18
c000d3dc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d3e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d3e4:	52                   	push   edx
c000d3e5:	50                   	push   eax
c000d3e6:	e8 aa e4 ff ff       	call   c000b895 <double_to_fp>
c000d3eb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d3ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d3f2:	83 c4 0c             	add    esp,0xc
c000d3f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d3f8:	8d 04 90             	lea    eax,[eax+edx*4]
c000d3fb:	50                   	push   eax
c000d3fc:	50                   	push   eax
c000d3fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d400:	e8 66 aa 01 00       	call   c0027e6b <__floatsidf>
c000d405:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d409:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d40d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d411:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d419:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d41d:	e8 ca a6 01 00       	call   c0027aec <__divdf3>
c000d422:	83 c4 18             	add    esp,0x18
c000d425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d42d:	52                   	push   edx
c000d42e:	89 fa                	mov    edx,edi
c000d430:	50                   	push   eax
c000d431:	89 d8                	mov    eax,ebx
c000d433:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d437:	e8 02 c7 ff ff       	call   c0009b3e <calc_output_stereo>
c000d43c:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d440:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d444:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d44c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d450:	e8 97 a6 01 00       	call   c0027aec <__divdf3>
c000d455:	83 c4 10             	add    esp,0x10
c000d458:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d45c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d468:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d46c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d470:	e8 16 9d 01 00       	call   c002718b <__adddf3>
c000d475:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d479:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d47d:	83 c4 18             	add    esp,0x18
c000d480:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d484:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d488:	e8 03 ae 01 00       	call   c0028290 <lrint>
c000d48d:	83 ec 0c             	sub    esp,0xc
c000d490:	50                   	push   eax
c000d491:	e8 d5 a9 01 00       	call   c0027e6b <__floatsidf>
c000d496:	83 c4 10             	add    esp,0x10
c000d499:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d49d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4a1:	52                   	push   edx
c000d4a2:	50                   	push   eax
c000d4a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ab:	e8 2c a3 01 00       	call   c00277dc <__subdf3>
c000d4b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4b8:	83 c4 20             	add    esp,0x20
c000d4bb:	6a 00                	push   0x0
c000d4bd:	6a 00                	push   0x0
c000d4bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c7:	e8 0b ac 01 00       	call   c00280d7 <__ltdf2>
c000d4cc:	83 c4 10             	add    esp,0x10
c000d4cf:	85 c0                	test   eax,eax
c000d4d1:	79 20                	jns    c000d4f3 <sinc_stereo_vari_process+0x66f>
c000d4d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4e3:	e8 a3 9c 01 00       	call   c002718b <__adddf3>
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4f3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d4f6:	83 ec 10             	sub    esp,0x10
c000d4f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d4fd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d508:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d50c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d510:	e8 c7 a2 01 00       	call   c00277dc <__subdf3>
c000d515:	83 c4 18             	add    esp,0x18
c000d518:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d520:	52                   	push   edx
c000d521:	50                   	push   eax
c000d522:	e8 69 ad 01 00       	call   c0028290 <lrint>
c000d527:	0f af f8             	imul   edi,eax
c000d52a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d52e:	83 c4 10             	add    esp,0x10
c000d531:	01 f8                	add    eax,edi
c000d533:	99                   	cdq    
c000d534:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d537:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d53a:	e9 fd fb ff ff       	jmp    c000d13c <sinc_stereo_vari_process+0x2b8>
c000d53f:	83 c4 4c             	add    esp,0x4c
c000d542:	89 d0                	mov    eax,edx
c000d544:	5b                   	pop    ebx
c000d545:	5e                   	pop    esi
c000d546:	5f                   	pop    edi
c000d547:	5d                   	pop    ebp
c000d548:	c3                   	ret    

c000d549 <sinc_mono_vari_process>:
c000d549:	55                   	push   ebp
c000d54a:	ba 05 00 00 00       	mov    edx,0x5
c000d54f:	57                   	push   edi
c000d550:	56                   	push   esi
c000d551:	53                   	push   ebx
c000d552:	83 ec 4c             	sub    esp,0x4c
c000d555:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d559:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d55d:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d560:	85 db                	test   ebx,ebx
c000d562:	0f 84 c1 06 00 00    	je     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d56b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d56e:	0f af c7             	imul   eax,edi
c000d571:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d574:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d577:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d57e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d585:	0f af c7             	imul   eax,edi
c000d588:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d58b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d58f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d592:	8b 00                	mov    eax,DWORD PTR [eax]
c000d594:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d598:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d59c:	68 00 00 70 3f       	push   0x3f700000
c000d5a1:	6a 00                	push   0x0
c000d5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ab:	e8 27 ab 01 00       	call   c00280d7 <__ltdf2>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	ba 16 00 00 00       	mov    edx,0x16
c000d5b8:	85 c0                	test   eax,eax
c000d5ba:	0f 88 69 06 00 00    	js     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5c0:	68 00 00 70 40       	push   0x40700000
c000d5c5:	6a 00                	push   0x0
c000d5c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cf:	e8 e5 aa 01 00       	call   c00280b9 <__gtdf2>
c000d5d4:	83 c4 10             	add    esp,0x10
c000d5d7:	ba 16 00 00 00       	mov    edx,0x16
c000d5dc:	85 c0                	test   eax,eax
c000d5de:	0f 8f 45 06 00 00    	jg     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5e4:	83 ec 0c             	sub    esp,0xc
c000d5e7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d5ea:	e8 7c a8 01 00       	call   c0027e6b <__floatsidf>
c000d5ef:	83 c4 10             	add    esp,0x10
c000d5f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d5fa:	68 00 00 00 40       	push   0x40000000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d605:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d609:	e8 7d 9b 01 00       	call   c002718b <__adddf3>
c000d60e:	59                   	pop    ecx
c000d60f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d613:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d617:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d61a:	e8 4c a8 01 00       	call   c0027e6b <__floatsidf>
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d626:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d62a:	52                   	push   edx
c000d62b:	50                   	push   eax
c000d62c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d630:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d634:	e8 b3 a4 01 00       	call   c0027aec <__divdf3>
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d640:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d644:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d647:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d64a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d64e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d652:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d662:	e8 52 aa 01 00       	call   c00280b9 <__gtdf2>
c000d667:	83 c4 10             	add    esp,0x10
c000d66a:	85 c0                	test   eax,eax
c000d66c:	7e 2d                	jle    c000d69b <sinc_mono_vari_process+0x152>
c000d66e:	68 00 00 f0 3f       	push   0x3ff00000
c000d673:	6a 00                	push   0x0
c000d675:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d679:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d67d:	e8 55 aa 01 00       	call   c00280d7 <__ltdf2>
c000d682:	83 c4 10             	add    esp,0x10
c000d685:	85 c0                	test   eax,eax
c000d687:	79 4d                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d68d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d691:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d695:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d699:	eb 1b                	jmp    c000d6b6 <sinc_mono_vari_process+0x16d>
c000d69b:	68 00 00 f0 3f       	push   0x3ff00000
c000d6a0:	6a 00                	push   0x0
c000d6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6aa:	e8 28 aa 01 00       	call   c00280d7 <__ltdf2>
c000d6af:	83 c4 10             	add    esp,0x10
c000d6b2:	85 c0                	test   eax,eax
c000d6b4:	79 20                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d6b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6ba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c6:	e8 21 a4 01 00       	call   c0027aec <__divdf3>
c000d6cb:	83 c4 10             	add    esp,0x10
c000d6ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d6:	50                   	push   eax
c000d6d7:	50                   	push   eax
c000d6d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6e0:	e8 ab ab 01 00       	call   c0028290 <lrint>
c000d6e5:	40                   	inc    eax
c000d6e6:	0f af c7             	imul   eax,edi
c000d6e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d6ed:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d6f1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d6f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d6f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ff:	58                   	pop    eax
c000d700:	5a                   	pop    edx
c000d701:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d705:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d709:	e8 82 ab 01 00       	call   c0028290 <lrint>
c000d70e:	83 ec 0c             	sub    esp,0xc
c000d711:	50                   	push   eax
c000d712:	e8 54 a7 01 00       	call   c0027e6b <__floatsidf>
c000d717:	83 c4 10             	add    esp,0x10
c000d71a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d71e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d722:	52                   	push   edx
c000d723:	50                   	push   eax
c000d724:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d728:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d72c:	e8 ab a0 01 00       	call   c00277dc <__subdf3>
c000d731:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d735:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d739:	83 c4 20             	add    esp,0x20
c000d73c:	6a 00                	push   0x0
c000d73e:	6a 00                	push   0x0
c000d740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d748:	e8 8a a9 01 00       	call   c00280d7 <__ltdf2>
c000d74d:	83 c4 10             	add    esp,0x10
c000d750:	85 c0                	test   eax,eax
c000d752:	79 1f                	jns    c000d773 <sinc_mono_vari_process+0x22a>
c000d754:	68 00 00 f0 3f       	push   0x3ff00000
c000d759:	6a 00                	push   0x0
c000d75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d75f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d763:	e8 23 9a 01 00       	call   c002718b <__adddf3>
c000d768:	83 c4 10             	add    esp,0x10
c000d76b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d76f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d773:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d776:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d779:	83 ec 10             	sub    esp,0x10
c000d77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d784:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d788:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78c:	e8 4b a0 01 00       	call   c00277dc <__subdf3>
c000d791:	83 c4 18             	add    esp,0x18
c000d794:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d798:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d79c:	52                   	push   edx
c000d79d:	50                   	push   eax
c000d79e:	e8 ed aa 01 00       	call   c0028290 <lrint>
c000d7a3:	0f af f8             	imul   edi,eax
c000d7a6:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7a9:	31 ff                	xor    edi,edi
c000d7ab:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7b0:	99                   	cdq    
c000d7b1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7b4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bf:	55                   	push   ebp
c000d7c0:	57                   	push   edi
c000d7c1:	e8 26 a3 01 00       	call   c0027aec <__divdf3>
c000d7c6:	83 c4 10             	add    esp,0x10
c000d7c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7d1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7d6:	68 23 42 92 0c       	push   0xc924223
c000d7db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e3:	e8 a3 99 01 00       	call   c002718b <__adddf3>
c000d7e8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d7ec:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d7f0:	83 c4 20             	add    esp,0x20
c000d7f3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d7f7:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d7fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d7fe:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d801:	7d 54                	jge    c000d857 <sinc_mono_vari_process+0x30e>
c000d803:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d806:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d809:	01 c8                	add    eax,ecx
c000d80b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d80e:	99                   	cdq    
c000d80f:	f7 f9                	idiv   ecx
c000d811:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d815:	7d 0c                	jge    c000d823 <sinc_mono_vari_process+0x2da>
c000d817:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d81a:	85 ff                	test   edi,edi
c000d81c:	79 73                	jns    c000d891 <sinc_mono_vari_process+0x348>
c000d81e:	e9 ee 00 00 00       	jmp    c000d911 <sinc_mono_vari_process+0x3c8>
c000d823:	50                   	push   eax
c000d824:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d828:	56                   	push   esi
c000d829:	53                   	push   ebx
c000d82a:	e8 8d e0 ff ff       	call   c000b8bc <prepare_data>
c000d82f:	89 c2                	mov    edx,eax
c000d831:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d835:	83 c4 10             	add    esp,0x10
c000d838:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d83b:	85 d2                	test   edx,edx
c000d83d:	0f 85 e6 03 00 00    	jne    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d843:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d846:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d849:	01 c8                	add    eax,ecx
c000d84b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d84e:	99                   	cdq    
c000d84f:	f7 f9                	idiv   ecx
c000d851:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d855:	7c c0                	jl     c000d817 <sinc_mono_vari_process+0x2ce>
c000d857:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d85b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d85f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d863:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d866:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d871:	89 01                	mov    DWORD PTR [ecx],eax
c000d873:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d876:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d879:	99                   	cdq    
c000d87a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d87d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d880:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d883:	99                   	cdq    
c000d884:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d887:	31 d2                	xor    edx,edx
c000d889:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d88c:	e9 98 03 00 00       	jmp    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d891:	83 ec 0c             	sub    esp,0xc
c000d894:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d897:	e8 cf a5 01 00       	call   c0027e6b <__floatsidf>
c000d89c:	83 c4 10             	add    esp,0x10
c000d89f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b7:	e8 cf 98 01 00       	call   c002718b <__adddf3>
c000d8bc:	83 c4 10             	add    esp,0x10
c000d8bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d7:	e8 af 98 01 00       	call   c002718b <__adddf3>
c000d8dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8e7:	e8 7f a5 01 00       	call   c0027e6b <__floatsidf>
c000d8ec:	83 c4 10             	add    esp,0x10
c000d8ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8f7:	52                   	push   edx
c000d8f8:	50                   	push   eax
c000d8f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d901:	e8 b3 a7 01 00       	call   c00280b9 <__gtdf2>
c000d906:	83 c4 10             	add    esp,0x10
c000d909:	85 c0                	test   eax,eax
c000d90b:	0f 8f 46 ff ff ff    	jg     c000d857 <sinc_mono_vari_process+0x30e>
c000d911:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d915:	0f 8e f5 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d91b:	83 ec 10             	sub    esp,0x10
c000d91e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d921:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d924:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d928:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d92b:	ff 30                	push   DWORD PTR [eax]
c000d92d:	e8 aa 9e 01 00       	call   c00277dc <__subdf3>
c000d932:	83 c4 18             	add    esp,0x18
c000d935:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d939:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d93d:	52                   	push   edx
c000d93e:	50                   	push   eax
c000d93f:	e8 2c a9 01 00       	call   c0028270 <fabs>
c000d944:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d948:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d94c:	83 c4 10             	add    esp,0x10
c000d94f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d954:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d959:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d961:	e8 53 a7 01 00       	call   c00280b9 <__gtdf2>
c000d966:	83 c4 10             	add    esp,0x10
c000d969:	85 c0                	test   eax,eax
c000d96b:	0f 8e 9f 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d971:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d975:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d978:	8b 00                	mov    eax,DWORD PTR [eax]
c000d97a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d97e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d982:	52                   	push   edx
c000d983:	50                   	push   eax
c000d984:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d987:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d98a:	e8 4d 9e 01 00       	call   c00277dc <__subdf3>
c000d98f:	5f                   	pop    edi
c000d990:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d994:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d998:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d99b:	e8 cb a4 01 00       	call   c0027e6b <__floatsidf>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ab:	52                   	push   edx
c000d9ac:	50                   	push   eax
c000d9ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b5:	e8 4e 9e 01 00       	call   c0027808 <__muldf3>
c000d9ba:	5d                   	pop    ebp
c000d9bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9c3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9c6:	e8 a0 a4 01 00       	call   c0027e6b <__floatsidf>
c000d9cb:	83 c4 10             	add    esp,0x10
c000d9ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9d6:	52                   	push   edx
c000d9d7:	50                   	push   eax
c000d9d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9e0:	e8 07 a1 01 00       	call   c0027aec <__divdf3>
c000d9e5:	83 c4 10             	add    esp,0x10
c000d9e8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da00:	e8 86 97 01 00       	call   c002718b <__adddf3>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da0c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da16:	e8 50 a4 01 00       	call   c0027e6b <__floatsidf>
c000da1b:	83 c4 10             	add    esp,0x10
c000da1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da36:	e8 9c a6 01 00       	call   c00280d7 <__ltdf2>
c000da3b:	83 c4 10             	add    esp,0x10
c000da3e:	85 c0                	test   eax,eax
c000da40:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da44:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da48:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da4c:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da50:	78 10                	js     c000da62 <sinc_mono_vari_process+0x519>
c000da52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da5a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da5e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da72:	e8 91 9d 01 00       	call   c0027808 <__muldf3>
c000da77:	59                   	pop    ecx
c000da78:	5f                   	pop    edi
c000da79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da89:	e8 07 de ff ff       	call   c000b895 <double_to_fp>
c000da8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da92:	89 c7                	mov    edi,eax
c000da94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000da9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000daa0:	e8 63 9d 01 00       	call   c0027808 <__muldf3>
c000daa5:	83 c4 18             	add    esp,0x18
c000daa8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dab0:	52                   	push   edx
c000dab1:	50                   	push   eax
c000dab2:	e8 de dd ff ff       	call   c000b895 <double_to_fp>
c000dab7:	83 ec 0c             	sub    esp,0xc
c000daba:	89 c5                	mov    ebp,eax
c000dabc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dabf:	e8 a7 a3 01 00       	call   c0027e6b <__floatsidf>
c000dac4:	83 c4 10             	add    esp,0x10
c000dac7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dacb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dacf:	52                   	push   edx
c000dad0:	50                   	push   eax
c000dad1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad9:	e8 0e a0 01 00       	call   c0027aec <__divdf3>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	89 e9                	mov    ecx,ebp
c000dae3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dae7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000daeb:	89 d8                	mov    eax,ebx
c000daed:	89 fa                	mov    edx,edi
c000daef:	e8 ee bd ff ff       	call   c00098e2 <calc_output_single>
c000daf4:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000daf7:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dafa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dafe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db02:	52                   	push   edx
c000db03:	50                   	push   eax
c000db04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db0c:	e8 f7 9c 01 00       	call   c0027808 <__muldf3>
c000db11:	59                   	pop    ecx
c000db12:	59                   	pop    ecx
c000db13:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db17:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db1b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db23:	e8 b3 a5 01 00       	call   c00280db <__truncdfsf2>
c000db28:	83 c4 10             	add    esp,0x10
c000db2b:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db2e:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db41:	e8 a6 9f 01 00       	call   c0027aec <__divdf3>
c000db46:	83 c4 10             	add    esp,0x10
c000db49:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db4d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	e8 25 96 01 00       	call   c002718b <__adddf3>
c000db66:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db6a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db6e:	83 c4 18             	add    esp,0x18
c000db71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db79:	e8 12 a7 01 00       	call   c0028290 <lrint>
c000db7e:	83 ec 0c             	sub    esp,0xc
c000db81:	50                   	push   eax
c000db82:	e8 e4 a2 01 00       	call   c0027e6b <__floatsidf>
c000db87:	83 c4 10             	add    esp,0x10
c000db8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db92:	52                   	push   edx
c000db93:	50                   	push   eax
c000db94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9c:	e8 3b 9c 01 00       	call   c00277dc <__subdf3>
c000dba1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dba5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dba9:	83 c4 20             	add    esp,0x20
c000dbac:	6a 00                	push   0x0
c000dbae:	6a 00                	push   0x0
c000dbb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb8:	e8 1a a5 01 00       	call   c00280d7 <__ltdf2>
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	85 c0                	test   eax,eax
c000dbc2:	79 20                	jns    c000dbe4 <sinc_mono_vari_process+0x69b>
c000dbc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd4:	e8 b2 95 01 00       	call   c002718b <__adddf3>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbe0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbe4:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dbe7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dbea:	83 ec 10             	sub    esp,0x10
c000dbed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbfd:	e8 da 9b 01 00       	call   c00277dc <__subdf3>
c000dc02:	83 c4 18             	add    esp,0x18
c000dc05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc09:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc0d:	52                   	push   edx
c000dc0e:	50                   	push   eax
c000dc0f:	e8 7c a6 01 00       	call   c0028290 <lrint>
c000dc14:	83 c4 10             	add    esp,0x10
c000dc17:	0f af f8             	imul   edi,eax
c000dc1a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc1d:	99                   	cdq    
c000dc1e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc21:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc24:	e9 d2 fb ff ff       	jmp    c000d7fb <sinc_mono_vari_process+0x2b2>
c000dc29:	83 c4 4c             	add    esp,0x4c
c000dc2c:	89 d0                	mov    eax,edx
c000dc2e:	5b                   	pop    ebx
c000dc2f:	5e                   	pop    esi
c000dc30:	5f                   	pop    edi
c000dc31:	5d                   	pop    ebp
c000dc32:	c3                   	ret    

c000dc33 <sinc_get_name>:
c000dc33:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc37:	31 c0                	xor    eax,eax
c000dc39:	83 fa 02             	cmp    edx,0x2
c000dc3c:	77 07                	ja     c000dc45 <sinc_get_name+0x12>
c000dc3e:	8b 04 95 24 9b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd64dc]
c000dc45:	c3                   	ret    

c000dc46 <sinc_get_description>:
c000dc46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc4a:	31 c0                	xor    eax,eax
c000dc4c:	83 fa 02             	cmp    edx,0x2
c000dc4f:	77 07                	ja     c000dc58 <sinc_get_description+0x12>
c000dc51:	8b 04 95 18 9b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd64e8]
c000dc58:	c3                   	ret    

c000dc59 <sinc_set_converter>:
c000dc59:	53                   	push   ebx
c000dc5a:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc60:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc67:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc6a:	85 c0                	test   eax,eax
c000dc6c:	74 13                	je     c000dc81 <sinc_set_converter+0x28>
c000dc6e:	83 ec 0c             	sub    esp,0xc
c000dc71:	50                   	push   eax
c000dc72:	e8 35 19 00 00       	call   c000f5ac <free>
c000dc77:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dc7e:	83 c4 10             	add    esp,0x10
c000dc81:	50                   	push   eax
c000dc82:	68 44 08 00 00       	push   0x844
c000dc87:	6a 00                	push   0x0
c000dc89:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc8d:	50                   	push   eax
c000dc8e:	e8 bd 2a ff ff       	call   c0000750 <memset>
c000dc93:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dc96:	83 c4 10             	add    esp,0x10
c000dc99:	b8 0b 00 00 00       	mov    eax,0xb
c000dc9e:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dca4:	7f 6e                	jg     c000dd14 <sinc_set_converter+0xbb>
c000dca6:	83 fa 01             	cmp    edx,0x1
c000dca9:	75 10                	jne    c000dcbb <sinc_set_converter+0x62>
c000dcab:	c7 43 24 49 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d549
c000dcb2:	c7 43 20 49 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d549
c000dcb9:	eb 4d                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcbb:	83 fa 02             	cmp    edx,0x2
c000dcbe:	75 10                	jne    c000dcd0 <sinc_set_converter+0x77>
c000dcc0:	c7 43 24 84 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ce84
c000dcc7:	c7 43 20 84 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ce84
c000dcce:	eb 38                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcd0:	83 fa 04             	cmp    edx,0x4
c000dcd3:	75 10                	jne    c000dce5 <sinc_set_converter+0x8c>
c000dcd5:	c7 43 24 bf c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7bf
c000dcdc:	c7 43 20 bf c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7bf
c000dce3:	eb 23                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dce5:	83 fa 06             	cmp    edx,0x6
c000dce8:	75 10                	jne    c000dcfa <sinc_set_converter+0xa1>
c000dcea:	c7 43 24 fa c0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c0fa
c000dcf1:	c7 43 20 fa c0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c0fa
c000dcf8:	eb 0e                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcfa:	c7 43 24 36 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba36
c000dd01:	c7 43 20 36 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba36
c000dd08:	c7 43 28 e9 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ace9
c000dd0f:	b8 0a 00 00 00       	mov    eax,0xa
c000dd14:	81 c4 58 08 00 00    	add    esp,0x858
c000dd1a:	5b                   	pop    ebx
c000dd1b:	c3                   	ret    

c000dd1c <zoh_vari_process>:
c000dd1c:	55                   	push   ebp
c000dd1d:	31 d2                	xor    edx,edx
c000dd1f:	57                   	push   edi
c000dd20:	56                   	push   esi
c000dd21:	53                   	push   ebx
c000dd22:	83 ec 3c             	sub    esp,0x3c
c000dd25:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd29:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd2d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd31:	0f 8e 80 06 00 00    	jle    c000e3b7 <zoh_vari_process+0x69b>
c000dd37:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd3a:	ba 05 00 00 00       	mov    edx,0x5
c000dd3f:	85 db                	test   ebx,ebx
c000dd41:	0f 84 70 06 00 00    	je     c000e3b7 <zoh_vari_process+0x69b>
c000dd47:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd4a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd4e:	74 19                	je     c000dd69 <zoh_vari_process+0x4d>
c000dd50:	31 d2                	xor    edx,edx
c000dd52:	39 c2                	cmp    edx,eax
c000dd54:	7d 0c                	jge    c000dd62 <zoh_vari_process+0x46>
c000dd56:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd58:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd5b:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd5f:	42                   	inc    edx
c000dd60:	eb f0                	jmp    c000dd52 <zoh_vari_process+0x36>
c000dd62:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd69:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd6c:	0f af d0             	imul   edx,eax
c000dd6f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd72:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd76:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dd7d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dd80:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dd87:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd8a:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd94:	68 00 00 70 3f       	push   0x3f700000
c000dd99:	6a 00                	push   0x0
c000dd9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	e8 2f a3 01 00       	call   c00280d7 <__ltdf2>
c000dda8:	83 c4 10             	add    esp,0x10
c000ddab:	ba 16 00 00 00       	mov    edx,0x16
c000ddb0:	85 c0                	test   eax,eax
c000ddb2:	0f 88 ff 05 00 00    	js     c000e3b7 <zoh_vari_process+0x69b>
c000ddb8:	68 00 00 70 40       	push   0x40700000
c000ddbd:	6a 00                	push   0x0
c000ddbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc7:	e8 ed a2 01 00       	call   c00280b9 <__gtdf2>
c000ddcc:	83 c4 10             	add    esp,0x10
c000ddcf:	ba 16 00 00 00       	mov    edx,0x16
c000ddd4:	85 c0                	test   eax,eax
c000ddd6:	0f 8f db 05 00 00    	jg     c000e3b7 <zoh_vari_process+0x69b>
c000dddc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dddf:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dde2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dde6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddea:	68 00 00 f0 3f       	push   0x3ff00000
c000ddef:	6a 00                	push   0x0
c000ddf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf9:	e8 d9 a2 01 00       	call   c00280d7 <__ltdf2>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	85 c0                	test   eax,eax
c000de03:	0f 89 da 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000de09:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de0c:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de0f:	0f 8d ce 01 00 00    	jge    c000dfe3 <zoh_vari_process+0x2c7>
c000de15:	83 ec 0c             	sub    esp,0xc
c000de18:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de1b:	e8 4b a0 01 00       	call   c0027e6b <__floatsidf>
c000de20:	83 c4 10             	add    esp,0x10
c000de23:	89 04 24             	mov    DWORD PTR [esp],eax
c000de26:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de3a:	e8 c9 99 01 00       	call   c0027808 <__muldf3>
c000de3f:	59                   	pop    ecx
c000de40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de44:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de48:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de4b:	e8 1b a0 01 00       	call   c0027e6b <__floatsidf>
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de57:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de5b:	52                   	push   edx
c000de5c:	50                   	push   eax
c000de5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de61:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de65:	e8 21 93 01 00       	call   c002718b <__adddf3>
c000de6a:	59                   	pop    ecx
c000de6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de6f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de73:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de76:	e8 f0 9f 01 00       	call   c0027e6b <__floatsidf>
c000de7b:	83 c4 10             	add    esp,0x10
c000de7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de86:	52                   	push   edx
c000de87:	50                   	push   eax
c000de88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de90:	e8 40 a2 01 00       	call   c00280d5 <__gedf2>
c000de95:	83 c4 10             	add    esp,0x10
c000de98:	85 c0                	test   eax,eax
c000de9a:	0f 89 43 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000dea0:	85 ed                	test   ebp,ebp
c000dea2:	0f 8e ec 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000dea8:	83 ec 10             	sub    esp,0x10
c000deab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000deae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deb1:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deb4:	ff 37                	push   DWORD PTR [edi]
c000deb6:	e8 21 99 01 00       	call   c00277dc <__subdf3>
c000debb:	83 c4 18             	add    esp,0x18
c000debe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dec6:	52                   	push   edx
c000dec7:	50                   	push   eax
c000dec8:	e8 a3 a3 01 00       	call   c0028270 <fabs>
c000decd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ded1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ded5:	83 c4 10             	add    esp,0x10
c000ded8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dedd:	68 23 42 92 0c       	push   0xc924223
c000dee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deea:	e8 ca a1 01 00       	call   c00280b9 <__gtdf2>
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	85 c0                	test   eax,eax
c000def4:	0f 8e 9a 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000defa:	8b 07                	mov    eax,DWORD PTR [edi]
c000defc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000deff:	89 04 24             	mov    DWORD PTR [esp],eax
c000df02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df06:	52                   	push   edx
c000df07:	50                   	push   eax
c000df08:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df0b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df0e:	e8 c9 98 01 00       	call   c00277dc <__subdf3>
c000df13:	59                   	pop    ecx
c000df14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df18:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df1c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df1f:	e8 47 9f 01 00       	call   c0027e6b <__floatsidf>
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df2f:	52                   	push   edx
c000df30:	50                   	push   eax
c000df31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df39:	e8 ca 98 01 00       	call   c0027808 <__muldf3>
c000df3e:	5d                   	pop    ebp
c000df3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df47:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df4a:	e8 1c 9f 01 00       	call   c0027e6b <__floatsidf>
c000df4f:	83 c4 10             	add    esp,0x10
c000df52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df56:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df5a:	52                   	push   edx
c000df5b:	50                   	push   eax
c000df5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df64:	e8 83 9b 01 00       	call   c0027aec <__divdf3>
c000df69:	83 c4 10             	add    esp,0x10
c000df6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df78:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df84:	e8 02 92 01 00       	call   c002718b <__adddf3>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df94:	31 c0                	xor    eax,eax
c000df96:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000df99:	7e 13                	jle    c000dfae <zoh_vari_process+0x292>
c000df9b:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000df9f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfa2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfa5:	40                   	inc    eax
c000dfa6:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfa9:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfac:	eb e8                	jmp    c000df96 <zoh_vari_process+0x27a>
c000dfae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb6:	68 00 00 f0 3f       	push   0x3ff00000
c000dfbb:	6a 00                	push   0x0
c000dfbd:	e8 2a 9b 01 00       	call   c0027aec <__divdf3>
c000dfc2:	83 c4 10             	add    esp,0x10
c000dfc5:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfc8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfcc:	52                   	push   edx
c000dfcd:	50                   	push   eax
c000dfce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd6:	e8 b0 91 01 00       	call   c002718b <__adddf3>
c000dfdb:	83 c4 10             	add    esp,0x10
c000dfde:	e9 ff fd ff ff       	jmp    c000dde2 <zoh_vari_process+0xc6>
c000dfe3:	55                   	push   ebp
c000dfe4:	55                   	push   ebp
c000dfe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfed:	e8 9e a2 01 00       	call   c0028290 <lrint>
c000dff2:	83 ec 0c             	sub    esp,0xc
c000dff5:	50                   	push   eax
c000dff6:	e8 70 9e 01 00       	call   c0027e6b <__floatsidf>
c000dffb:	83 c4 10             	add    esp,0x10
c000dffe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e002:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e00c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e010:	e8 c7 97 01 00       	call   c00277dc <__subdf3>
c000e015:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e019:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e01d:	83 c4 20             	add    esp,0x20
c000e020:	6a 00                	push   0x0
c000e022:	6a 00                	push   0x0
c000e024:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e02c:	e8 a6 a0 01 00       	call   c00280d7 <__ltdf2>
c000e031:	83 c4 10             	add    esp,0x10
c000e034:	85 c0                	test   eax,eax
c000e036:	79 1e                	jns    c000e056 <zoh_vari_process+0x33a>
c000e038:	68 00 00 f0 3f       	push   0x3ff00000
c000e03d:	6a 00                	push   0x0
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e047:	e8 3f 91 01 00       	call   c002718b <__adddf3>
c000e04c:	83 c4 10             	add    esp,0x10
c000e04f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e052:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e056:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e059:	83 ec 10             	sub    esp,0x10
c000e05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e068:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e06c:	e8 6b 97 01 00       	call   c00277dc <__subdf3>
c000e071:	83 c4 18             	add    esp,0x18
c000e074:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e078:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e07c:	52                   	push   edx
c000e07d:	50                   	push   eax
c000e07e:	e8 0d a2 01 00       	call   c0028290 <lrint>
c000e083:	83 c4 10             	add    esp,0x10
c000e086:	0f af e8             	imul   ebp,eax
c000e089:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e08c:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e08f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e093:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e096:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e099:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e09d:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0a0:	0f 8d 7a 02 00 00    	jge    c000e320 <zoh_vari_process+0x604>
c000e0a6:	83 ec 0c             	sub    esp,0xc
c000e0a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ac:	e8 ba 9d 01 00       	call   c0027e6b <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0cc:	e8 37 97 01 00       	call   c0027808 <__muldf3>
c000e0d1:	59                   	pop    ecx
c000e0d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0d6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0de:	e8 88 9d 01 00       	call   c0027e6b <__floatsidf>
c000e0e3:	83 c4 10             	add    esp,0x10
c000e0e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0ee:	52                   	push   edx
c000e0ef:	50                   	push   eax
c000e0f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f8:	e8 8e 90 01 00       	call   c002718b <__adddf3>
c000e0fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e100:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e104:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e108:	e8 5e 9d 01 00       	call   c0027e6b <__floatsidf>
c000e10d:	83 c4 10             	add    esp,0x10
c000e110:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e114:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e118:	52                   	push   edx
c000e119:	50                   	push   eax
c000e11a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e11e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e122:	e8 b2 9f 01 00       	call   c00280d9 <__ledf2>
c000e127:	83 c4 10             	add    esp,0x10
c000e12a:	85 c0                	test   eax,eax
c000e12c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e130:	0f 8f ea 01 00 00    	jg     c000e320 <zoh_vari_process+0x604>
c000e136:	85 c9                	test   ecx,ecx
c000e138:	0f 8e ed 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e13e:	83 ec 10             	sub    esp,0x10
c000e141:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e144:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e147:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e14a:	ff 37                	push   DWORD PTR [edi]
c000e14c:	e8 8b 96 01 00       	call   c00277dc <__subdf3>
c000e151:	83 c4 18             	add    esp,0x18
c000e154:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e158:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e15c:	52                   	push   edx
c000e15d:	50                   	push   eax
c000e15e:	e8 0d a1 01 00       	call   c0028270 <fabs>
c000e163:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e167:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e173:	68 23 42 92 0c       	push   0xc924223
c000e178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e180:	e8 34 9f 01 00       	call   c00280b9 <__gtdf2>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	85 c0                	test   eax,eax
c000e18a:	0f 8e 9b 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e190:	8b 07                	mov    eax,DWORD PTR [edi]
c000e192:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e19d:	52                   	push   edx
c000e19e:	50                   	push   eax
c000e19f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1a2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1a5:	e8 32 96 01 00       	call   c00277dc <__subdf3>
c000e1aa:	5d                   	pop    ebp
c000e1ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1af:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1b3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1b6:	e8 b0 9c 01 00       	call   c0027e6b <__floatsidf>
c000e1bb:	83 c4 10             	add    esp,0x10
c000e1be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1c6:	52                   	push   edx
c000e1c7:	50                   	push   eax
c000e1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1d0:	e8 33 96 01 00       	call   c0027808 <__muldf3>
c000e1d5:	59                   	pop    ecx
c000e1d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1da:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1de:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e1e1:	e8 85 9c 01 00       	call   c0027e6b <__floatsidf>
c000e1e6:	83 c4 10             	add    esp,0x10
c000e1e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1f1:	52                   	push   edx
c000e1f2:	50                   	push   eax
c000e1f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1fb:	e8 ec 98 01 00       	call   c0027aec <__divdf3>
c000e200:	83 c4 10             	add    esp,0x10
c000e203:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e207:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e20b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e20f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21b:	e8 6b 8f 01 00       	call   c002718b <__adddf3>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e227:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e22b:	31 d2                	xor    edx,edx
c000e22d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e230:	39 d0                	cmp    eax,edx
c000e232:	7e 1d                	jle    c000e251 <zoh_vari_process+0x535>
c000e234:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e237:	29 c1                	sub    ecx,eax
c000e239:	89 c8                	mov    eax,ecx
c000e23b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e23d:	01 d0                	add    eax,edx
c000e23f:	42                   	inc    edx
c000e240:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e243:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e246:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e249:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e24c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e24f:	eb dc                	jmp    c000e22d <zoh_vari_process+0x511>
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e259:	68 00 00 f0 3f       	push   0x3ff00000
c000e25e:	6a 00                	push   0x0
c000e260:	e8 87 98 01 00       	call   c0027aec <__divdf3>
c000e265:	83 c4 10             	add    esp,0x10
c000e268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e26c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e270:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e274:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e27c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e280:	e8 06 8f 01 00       	call   c002718b <__adddf3>
c000e285:	5d                   	pop    ebp
c000e286:	59                   	pop    ecx
c000e287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e28b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e28f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e297:	e8 f4 9f 01 00       	call   c0028290 <lrint>
c000e29c:	83 ec 0c             	sub    esp,0xc
c000e29f:	50                   	push   eax
c000e2a0:	e8 c6 9b 01 00       	call   c0027e6b <__floatsidf>
c000e2a5:	83 c4 10             	add    esp,0x10
c000e2a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b0:	52                   	push   edx
c000e2b1:	50                   	push   eax
c000e2b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ba:	e8 1d 95 01 00       	call   c00277dc <__subdf3>
c000e2bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2c7:	83 c4 20             	add    esp,0x20
c000e2ca:	6a 00                	push   0x0
c000e2cc:	6a 00                	push   0x0
c000e2ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d6:	e8 fc 9d 01 00       	call   c00280d7 <__ltdf2>
c000e2db:	83 c4 10             	add    esp,0x10
c000e2de:	85 c0                	test   eax,eax
c000e2e0:	79 1e                	jns    c000e300 <zoh_vari_process+0x5e4>
c000e2e2:	68 00 00 f0 3f       	push   0x3ff00000
c000e2e7:	6a 00                	push   0x0
c000e2e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2f1:	e8 95 8e 01 00       	call   c002718b <__adddf3>
c000e2f6:	83 c4 10             	add    esp,0x10
c000e2f9:	89 04 24             	mov    DWORD PTR [esp],eax
c000e2fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e300:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e303:	83 ec 10             	sub    esp,0x10
c000e306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e312:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e316:	e8 c1 94 01 00       	call   c00277dc <__subdf3>
c000e31b:	e9 51 fd ff ff       	jmp    c000e071 <zoh_vari_process+0x355>
c000e320:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e324:	7d 3a                	jge    c000e360 <zoh_vari_process+0x644>
c000e326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32a:	83 ec 0c             	sub    esp,0xc
c000e32d:	29 e8                	sub    eax,ebp
c000e32f:	99                   	cdq    
c000e330:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e333:	50                   	push   eax
c000e334:	e8 32 9b 01 00       	call   c0027e6b <__floatsidf>
c000e339:	83 c4 10             	add    esp,0x10
c000e33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e344:	52                   	push   edx
c000e345:	50                   	push   eax
c000e346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34e:	e8 38 8e 01 00       	call   c002718b <__adddf3>
c000e353:	83 c4 10             	add    esp,0x10
c000e356:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e359:	89 04 24             	mov    DWORD PTR [esp],eax
c000e35c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e360:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e363:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e367:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e36a:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e36d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e370:	85 c0                	test   eax,eax
c000e372:	7f 25                	jg     c000e399 <zoh_vari_process+0x67d>
c000e374:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e378:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e37c:	89 07                	mov    DWORD PTR [edi],eax
c000e37e:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e381:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e384:	99                   	cdq    
c000e385:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e388:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e38b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e38e:	99                   	cdq    
c000e38f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e392:	31 d2                	xor    edx,edx
c000e394:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e397:	eb 1e                	jmp    c000e3b7 <zoh_vari_process+0x69b>
c000e399:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e39c:	31 d2                	xor    edx,edx
c000e39e:	29 c8                	sub    eax,ecx
c000e3a0:	c1 e0 02             	shl    eax,0x2
c000e3a3:	39 d1                	cmp    ecx,edx
c000e3a5:	7e cd                	jle    c000e374 <zoh_vari_process+0x658>
c000e3a7:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3a9:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ad:	83 c0 04             	add    eax,0x4
c000e3b0:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3b4:	42                   	inc    edx
c000e3b5:	eb ec                	jmp    c000e3a3 <zoh_vari_process+0x687>
c000e3b7:	83 c4 3c             	add    esp,0x3c
c000e3ba:	89 d0                	mov    eax,edx
c000e3bc:	5b                   	pop    ebx
c000e3bd:	5e                   	pop    esi
c000e3be:	5f                   	pop    edi
c000e3bf:	5d                   	pop    ebp
c000e3c0:	c3                   	ret    

c000e3c1 <zoh_reset>:
c000e3c1:	83 ec 0c             	sub    esp,0xc
c000e3c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3c8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3cb:	85 c0                	test   eax,eax
c000e3cd:	74 20                	je     c000e3ef <zoh_reset+0x2e>
c000e3cf:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3d2:	83 c0 1c             	add    eax,0x1c
c000e3d5:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e3d8:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e3df:	c1 e2 02             	shl    edx,0x2
c000e3e2:	51                   	push   ecx
c000e3e3:	52                   	push   edx
c000e3e4:	6a 00                	push   0x0
c000e3e6:	50                   	push   eax
c000e3e7:	e8 64 23 ff ff       	call   c0000750 <memset>
c000e3ec:	83 c4 10             	add    esp,0x10
c000e3ef:	83 c4 0c             	add    esp,0xc
c000e3f2:	c3                   	ret    

c000e3f3 <zoh_get_name>:
c000e3f3:	31 c0                	xor    eax,eax
c000e3f5:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e3fa:	75 05                	jne    c000e401 <zoh_get_name+0xe>
c000e3fc:	b8 3e 9c 02 c0       	mov    eax,0xc0029c3e
c000e401:	c3                   	ret    

c000e402 <zoh_get_description>:
c000e402:	31 c0                	xor    eax,eax
c000e404:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e409:	75 05                	jne    c000e410 <zoh_get_description+0xe>
c000e40b:	b8 4f 9c 02 c0       	mov    eax,0xc0029c4f
c000e410:	c3                   	ret    

c000e411 <zoh_set_converter>:
c000e411:	53                   	push   ebx
c000e412:	b8 0a 00 00 00       	mov    eax,0xa
c000e417:	83 ec 08             	sub    esp,0x8
c000e41a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e41e:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e423:	75 6e                	jne    c000e493 <zoh_set_converter+0x82>
c000e425:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e428:	85 c0                	test   eax,eax
c000e42a:	74 13                	je     c000e43f <zoh_set_converter+0x2e>
c000e42c:	83 ec 0c             	sub    esp,0xc
c000e42f:	50                   	push   eax
c000e430:	e8 77 11 00 00       	call   c000f5ac <free>
c000e435:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e43c:	83 c4 10             	add    esp,0x10
c000e43f:	50                   	push   eax
c000e440:	50                   	push   eax
c000e441:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e444:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e44b:	50                   	push   eax
c000e44c:	6a 01                	push   0x1
c000e44e:	e8 79 11 00 00       	call   c000f5cc <calloc>
c000e453:	83 c4 10             	add    esp,0x10
c000e456:	89 c2                	mov    edx,eax
c000e458:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e45b:	85 d2                	test   edx,edx
c000e45d:	b8 01 00 00 00       	mov    eax,0x1
c000e462:	74 2f                	je     c000e493 <zoh_set_converter+0x82>
c000e464:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e467:	83 ec 0c             	sub    esp,0xc
c000e46a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e46d:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e473:	c7 43 24 1c dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd1c
c000e47a:	c7 43 20 1c dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd1c
c000e481:	c7 43 28 c1 e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3c1
c000e488:	53                   	push   ebx
c000e489:	e8 33 ff ff ff       	call   c000e3c1 <zoh_reset>
c000e48e:	83 c4 10             	add    esp,0x10
c000e491:	31 c0                	xor    eax,eax
c000e493:	83 c4 08             	add    esp,0x8
c000e496:	5b                   	pop    ebx
c000e497:	c3                   	ret    

c000e498 <CPU::current()>:
c000e498:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c000e49d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4a3:	c3                   	ret    

c000e4a4 <operator new(unsigned long)>:
c000e4a4:	e9 f3 10 00 00       	jmp    c000f59c <malloc>

c000e4a9 <operator delete(void*)>:
c000e4a9:	e9 0e 11 00 00       	jmp    c000f5bc <rfree>

c000e4ae <disableIRQs()>:
c000e4ae:	fa                   	cli    
c000e4af:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c000e4b5:	c3                   	ret    

c000e4b6 <enableIRQs()>:
c000e4b6:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c000e4bb:	48                   	dec    eax
c000e4bc:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c000e4c1:	75 01                	jne    c000e4c4 <enableIRQs()+0xe>
c000e4c3:	fb                   	sti    
c000e4c4:	c3                   	ret    

c000e4c5 <lockScheduler()>:
c000e4c5:	fa                   	cli    
c000e4c6:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c000e4cc:	c3                   	ret    

c000e4cd <unlockScheduler()>:
c000e4cd:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c000e4d2:	48                   	dec    eax
c000e4d3:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c000e4d8:	75 01                	jne    c000e4db <unlockScheduler()+0xe>
c000e4da:	fb                   	sti    
c000e4db:	c3                   	ret    

c000e4dc <lockStuff()>:
c000e4dc:	fa                   	cli    
c000e4dd:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c000e4e3:	ff 05 24 0c 03 c0    	inc    DWORD PTR ds:0xc0030c24
c000e4e9:	c3                   	ret    

c000e4ea <unlockStuff()>:
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	a1 24 0c 03 c0       	mov    eax,ds:0xc0030c24
c000e4f2:	48                   	dec    eax
c000e4f3:	a3 24 0c 03 c0       	mov    ds:0xc0030c24,eax
c000e4f8:	75 18                	jne    c000e512 <unlockStuff()+0x28>
c000e4fa:	83 3d 20 0c 03 c0 00 	cmp    DWORD PTR ds:0xc0030c20,0x0
c000e501:	74 0f                	je     c000e512 <unlockStuff()+0x28>
c000e503:	c7 05 20 0c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030c20,0x0
c000e50d:	e8 af f3 00 00       	call   c001d8c1 <schedule()>
c000e512:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c000e517:	48                   	dec    eax
c000e518:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c000e51d:	75 01                	jne    c000e520 <unlockStuff()+0x36>
c000e51f:	fb                   	sti    
c000e520:	83 c4 0c             	add    esp,0xc
c000e523:	c3                   	ret    

c000e524 <Virt::getAKernelVAS()>:
c000e524:	a1 70 d8 02 c0       	mov    eax,ds:0xc002d870
c000e529:	c3                   	ret    

c000e52a <__not_memcpy>:
c000e52a:	57                   	push   edi
c000e52b:	56                   	push   esi
c000e52c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e530:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e534:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e538:	89 c7                	mov    edi,eax
c000e53a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e53c:	5e                   	pop    esi
c000e53d:	5f                   	pop    edi
c000e53e:	c3                   	ret    

c000e53f <Krnl::resolveCompatibilitySymbol(char*)>:
c000e53f:	83 ec 0c             	sub    esp,0xc
c000e542:	83 ec 08             	sub    esp,0x8
c000e545:	68 86 9c 02 c0       	push   0xc0029c86
c000e54a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e54e:	e8 45 23 ff ff       	call   c0000898 <strcmp>
c000e553:	83 c4 10             	add    esp,0x10
c000e556:	85 c0                	test   eax,eax
c000e558:	0f 94 c0             	sete   al
c000e55b:	84 c0                	test   al,al
c000e55d:	74 0a                	je     c000e569 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e55f:	b8 08 d7 02 c0       	mov    eax,0xc002d708
c000e564:	e9 e3 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e569:	83 ec 08             	sub    esp,0x8
c000e56c:	68 8f 9c 02 c0       	push   0xc0029c8f
c000e571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e575:	e8 1e 23 ff ff       	call   c0000898 <strcmp>
c000e57a:	83 c4 10             	add    esp,0x10
c000e57d:	85 c0                	test   eax,eax
c000e57f:	0f 94 c0             	sete   al
c000e582:	84 c0                	test   al,al
c000e584:	74 0a                	je     c000e590 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e586:	b8 04 66 02 c0       	mov    eax,0xc0026604
c000e58b:	e9 bc 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e590:	83 ec 08             	sub    esp,0x8
c000e593:	68 99 9c 02 c0       	push   0xc0029c99
c000e598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59c:	e8 f7 22 ff ff       	call   c0000898 <strcmp>
c000e5a1:	83 c4 10             	add    esp,0x10
c000e5a4:	85 c0                	test   eax,eax
c000e5a6:	0f 94 c0             	sete   al
c000e5a9:	84 c0                	test   al,al
c000e5ab:	74 0a                	je     c000e5b7 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5ad:	b8 38 63 02 c0       	mov    eax,0xc0026338
c000e5b2:	e9 95 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b7:	83 ec 08             	sub    esp,0x8
c000e5ba:	68 a2 9c 02 c0       	push   0xc0029ca2
c000e5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c3:	e8 d0 22 ff ff       	call   c0000898 <strcmp>
c000e5c8:	83 c4 10             	add    esp,0x10
c000e5cb:	85 c0                	test   eax,eax
c000e5cd:	0f 94 c0             	sete   al
c000e5d0:	84 c0                	test   al,al
c000e5d2:	74 07                	je     c000e5db <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e5d4:	b8 04 67 02 c0       	mov    eax,0xc0026704
c000e5d9:	eb 71                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5db:	83 ec 08             	sub    esp,0x8
c000e5de:	68 ac 9c 02 c0       	push   0xc0029cac
c000e5e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e7:	e8 ac 22 ff ff       	call   c0000898 <strcmp>
c000e5ec:	83 c4 10             	add    esp,0x10
c000e5ef:	85 c0                	test   eax,eax
c000e5f1:	0f 94 c0             	sete   al
c000e5f4:	84 c0                	test   al,al
c000e5f6:	74 07                	je     c000e5ff <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5f8:	b8 84 64 02 c0       	mov    eax,0xc0026484
c000e5fd:	eb 4d                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5ff:	83 ec 08             	sub    esp,0x8
c000e602:	68 b5 9c 02 c0       	push   0xc0029cb5
c000e607:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e60b:	e8 88 22 ff ff       	call   c0000898 <strcmp>
c000e610:	83 c4 10             	add    esp,0x10
c000e613:	85 c0                	test   eax,eax
c000e615:	0f 94 c0             	sete   al
c000e618:	84 c0                	test   al,al
c000e61a:	74 07                	je     c000e623 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e61c:	b8 0c d7 02 c0       	mov    eax,0xc002d70c
c000e621:	eb 29                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e623:	83 ec 08             	sub    esp,0x8
c000e626:	68 c2 9c 02 c0       	push   0xc0029cc2
c000e62b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e62f:	e8 64 22 ff ff       	call   c0000898 <strcmp>
c000e634:	83 c4 10             	add    esp,0x10
c000e637:	85 c0                	test   eax,eax
c000e639:	0f 94 c0             	sete   al
c000e63c:	84 c0                	test   al,al
c000e63e:	74 07                	je     c000e647 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e640:	b8 0d d7 02 c0       	mov    eax,0xc002d70d
c000e645:	eb 05                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e647:	b8 00 00 00 00       	mov    eax,0x0
c000e64c:	83 c4 0c             	add    esp,0xc
c000e64f:	c3                   	ret    

c000e650 <Computer::close(int, int, void*)>:
c000e650:	57                   	push   edi
c000e651:	56                   	push   esi
c000e652:	53                   	push   ebx
c000e653:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e657:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e65b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e65f:	83 ec 0c             	sub    esp,0xc
c000e662:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e668:	e8 1f 55 00 00       	call   c0013b8c <Device::closeAll()>
c000e66d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e673:	83 c4 10             	add    esp,0x10
c000e676:	8b 10                	mov    edx,DWORD PTR [eax]
c000e678:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e67c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e684:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e688:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e68c:	5b                   	pop    ebx
c000e68d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e690:	5e                   	pop    esi
c000e691:	5f                   	pop    edi
c000e692:	ff e0                	jmp    eax

c000e694 <Krnl::firstTask()>:
c000e694:	53                   	push   ebx
c000e695:	83 ec 14             	sub    esp,0x14
c000e698:	fb                   	sti    
c000e699:	68 cf 9c 02 c0       	push   0xc0029ccf
c000e69e:	e8 53 0f 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000e6a3:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c000e6aa:	e8 ed 0e 00 00       	call   c000f59c <malloc>
c000e6af:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6b6:	89 c3                	mov    ebx,eax
c000e6b8:	ff 35 50 0c 03 c0    	push   DWORD PTR ds:0xc0030c50
c000e6be:	68 e8 9c 02 c0       	push   0xc0029ce8
c000e6c3:	6a 01                	push   0x1
c000e6c5:	50                   	push   eax
c000e6c6:	e8 d9 ed 00 00       	call   c001d4a4 <Process::Process(bool, char const*, Process*, char**)>
c000e6cb:	83 c4 20             	add    esp,0x20
c000e6ce:	68 ff 00 00 00       	push   0xff
c000e6d3:	6a 00                	push   0x0
c000e6d5:	68 2f ef 00 c0       	push   0xc000ef2f
c000e6da:	53                   	push   ebx
c000e6db:	e8 bc ef 00 00       	call   c001d69c <Process::createThread(void (*)(void*), void*, int)>
c000e6e0:	6a 7a                	push   0x7a
c000e6e2:	6a 00                	push   0x0
c000e6e4:	68 80 e0 01 c0       	push   0xc001e080
c000e6e9:	ff 35 50 0c 03 c0    	push   DWORD PTR ds:0xc0030c50
c000e6ef:	e8 a8 ef 00 00       	call   c001d69c <Process::createThread(void (*)(void*), void*, int)>
c000e6f4:	83 c4 14             	add    esp,0x14
c000e6f7:	a3 08 0c 03 c0       	mov    ds:0xc0030c08,eax
c000e6fc:	68 cc 9d 02 c0       	push   0xc0029dcc
c000e701:	c6 05 0d d7 02 c0 01 	mov    BYTE PTR ds:0xc002d70d,0x1
c000e708:	e8 e9 0e 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000e70d:	e8 19 fd 00 00       	call   c001e42b <Vm::initialise8086()>
c000e712:	e8 3d 42 00 00       	call   c0012954 <Fs::initVFS()>
c000e717:	c7 04 24 f5 9c 02 c0 	mov    DWORD PTR [esp],0xc0029cf5
c000e71e:	e8 d3 0e 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000e723:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c000e728:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e72e:	8b 10                	mov    edx,DWORD PTR [eax]
c000e730:	6a 00                	push   0x0
c000e732:	6a 00                	push   0x0
c000e734:	6a 00                	push   0x0
c000e736:	50                   	push   eax
c000e737:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e73a:	83 c4 14             	add    esp,0x14
c000e73d:	68 cc 9d 02 c0       	push   0xc0029dcc
c000e742:	e8 af 0e 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000e747:	e8 e3 d5 00 00       	call   c001bd2f <Sys::loadSyscalls()>
c000e74c:	e8 db b4 00 00       	call   c0019c2c <Krnl::loadSystemEnv()>
c000e751:	83 c4 0c             	add    esp,0xc
c000e754:	6a 3a                	push   0x3a
c000e756:	68 0f 9d 02 c0       	push   0xc0029d0f
c000e75b:	68 18 9d 02 c0       	push   0xc0029d18
c000e760:	e8 8c c3 00 00       	call   c001aaf1 <Reg::readIntWithDefault(char*, char*, int)>
c000e765:	89 04 24             	mov    DWORD PTR [esp],eax
c000e768:	e8 d7 4c 00 00       	call   c0013444 <User::loadClockSettings(int)>
c000e76d:	c7 04 24 f0 9d 02 c0 	mov    DWORD PTR [esp],0xc0029df0
c000e774:	e8 7d 0e 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000e779:	58                   	pop    eax
c000e77a:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c000e77f:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e785:	e8 c2 53 00 00       	call   c0013b4c <Device::loadDriversForAll()>
c000e78a:	c7 04 24 20 9d 02 c0 	mov    DWORD PTR [esp],0xc0029d20
c000e791:	e8 60 0e 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000e796:	e8 f9 af 00 00       	call   c0019794 <Krnl::startCPUs()>
c000e79b:	c7 04 24 3a 9d 02 c0 	mov    DWORD PTR [esp],0xc0029d3a
c000e7a2:	e8 4f 0e 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000e7a7:	5a                   	pop    edx
c000e7a8:	8b 1d 08 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d708
c000e7ae:	59                   	pop    ecx
c000e7af:	6a 01                	push   0x1
c000e7b1:	68 4b 9d 02 c0       	push   0xc0029d4b
c000e7b6:	e8 44 e7 00 00       	call   c001ceff <Thr::loadDLL(char const*, bool)>
c000e7bb:	5a                   	pop    edx
c000e7bc:	59                   	pop    ecx
c000e7bd:	53                   	push   ebx
c000e7be:	50                   	push   eax
c000e7bf:	e8 69 e9 00 00       	call   c001d12d <Thr::executeDLL(unsigned long, void*)>
c000e7c4:	83 c4 10             	add    esp,0x10
c000e7c7:	83 ec 0c             	sub    esp,0xc
c000e7ca:	6a 02                	push   0x2
c000e7cc:	e8 c6 f2 00 00       	call   c001da97 <blockTask(TaskState)>
c000e7d1:	83 c4 10             	add    esp,0x10
c000e7d4:	eb f1                	jmp    c000e7c7 <Krnl::firstTask()+0x133>

c000e7d6 <Computer::Computer()>:
c000e7d6:	83 ec 0c             	sub    esp,0xc
c000e7d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7dd:	83 ec 08             	sub    esp,0x8
c000e7e0:	68 67 9d 02 c0       	push   0xc0029d67
c000e7e5:	50                   	push   eax
c000e7e6:	e8 1b 54 00 00       	call   c0013c06 <Device::Device(char const*)>
c000e7eb:	83 c4 10             	add    esp,0x10
c000e7ee:	ba 3c 9e 02 c0       	mov    edx,0xc0029e3c
c000e7f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f7:	89 10                	mov    DWORD PTR [eax],edx
c000e7f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7fd:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e819:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e81f:	83 ca 04             	or     edx,0x4
c000e822:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e832:	0f b6 d0             	movzx  edx,al
c000e835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e839:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e844:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84a:	0f b6 d0             	movzx  edx,al
c000e84d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e851:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e860:	8d 50 01             	lea    edx,[eax+0x1]
c000e863:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e867:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e86d:	0f b6 d0             	movzx  edx,al
c000e870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e874:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e878:	83 e1 3f             	and    ecx,0x3f
c000e87b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e87f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e883:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e889:	0f b6 d0             	movzx  edx,al
c000e88c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e890:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e89b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8a1:	0f b6 d0             	movzx  edx,al
c000e8a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a8:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8b7:	8d 50 01             	lea    edx,[eax+0x1]
c000e8ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8be:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8c4:	0f b6 d0             	movzx  edx,al
c000e8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8cb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8cf:	83 e1 3f             	and    ecx,0x3f
c000e8d2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8e0:	0f b6 d0             	movzx  edx,al
c000e8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e7:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e8ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8f8:	0f b6 d0             	movzx  edx,al
c000e8fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ff:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e908:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e90e:	8d 50 01             	lea    edx,[eax+0x1]
c000e911:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e915:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e91b:	0f b6 d0             	movzx  edx,al
c000e91e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e922:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e926:	83 e1 3f             	and    ecx,0x3f
c000e929:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e92d:	90                   	nop
c000e92e:	83 c4 0c             	add    esp,0xc
c000e931:	c3                   	ret    

c000e932 <Computer::setBootMessage(char const*)>:
c000e932:	c3                   	ret    
c000e933:	90                   	nop

c000e934 <Computer::detectFeatures()>:
c000e934:	55                   	push   ebp
c000e935:	57                   	push   edi
c000e936:	56                   	push   esi
c000e937:	53                   	push   ebx
c000e938:	83 ec 1c             	sub    esp,0x1c
c000e93b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e93f:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e949:	e8 96 19 ff ff       	call   c00002e4 <detectCPUID>
c000e94e:	85 c0                	test   eax,eax
c000e950:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e956:	0f 95 c2             	setne  dl
c000e959:	83 e0 fd             	and    eax,0xfffffffd
c000e95c:	d1 e2                	shl    edx,1
c000e95e:	09 d0                	or     eax,edx
c000e960:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e966:	a8 02                	test   al,0x2
c000e968:	75 46                	jne    c000e9b0 <Computer::detectFeatures()+0x7c>
c000e96a:	f6 05 21 d7 02 c0 04 	test   BYTE PTR ds:0xc002d721,0x4
c000e971:	74 07                	je     c000e97a <Computer::detectFeatures()+0x46>
c000e973:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e97a:	e8 47 79 01 00       	call   c00262c6 <x87Detect>
c000e97f:	83 e0 01             	and    eax,0x1
c000e982:	c1 e0 04             	shl    eax,0x4
c000e985:	88 c2                	mov    dl,al
c000e987:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e98d:	83 e0 ef             	and    eax,0xffffffef
c000e990:	09 d0                	or     eax,edx
c000e992:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e998:	a8 10                	test   al,0x10
c000e99a:	0f 85 2a 01 00 00    	jne    c000eaca <Computer::detectFeatures()+0x196>
c000e9a0:	84 c0                	test   al,al
c000e9a2:	0f 88 45 01 00 00    	js     c000eaed <Computer::detectFeatures()+0x1b9>
c000e9a8:	83 c4 1c             	add    esp,0x1c
c000e9ab:	5b                   	pop    ebx
c000e9ac:	5e                   	pop    esi
c000e9ad:	5f                   	pop    edi
c000e9ae:	5d                   	pop    ebp
c000e9af:	c3                   	ret    
c000e9b0:	83 ec 0c             	sub    esp,0xc
c000e9b3:	6a 20                	push   0x20
c000e9b5:	e8 6c 9d 00 00       	call   c0018726 <CPU::cpuidCheckEDX(unsigned int)>
c000e9ba:	83 e0 01             	and    eax,0x1
c000e9bd:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e9c4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9ca:	83 e0 f7             	and    eax,0xfffffff7
c000e9cd:	09 d0                	or     eax,edx
c000e9cf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d5:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e9dc:	e8 45 9d 00 00       	call   c0018726 <CPU::cpuidCheckEDX(unsigned int)>
c000e9e1:	83 e0 01             	and    eax,0x1
c000e9e4:	88 c2                	mov    dl,al
c000e9e6:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9ec:	83 e0 fe             	and    eax,0xfffffffe
c000e9ef:	09 d0                	or     eax,edx
c000e9f1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9f7:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9fe:	e8 23 9d 00 00       	call   c0018726 <CPU::cpuidCheckEDX(unsigned int)>
c000ea03:	c1 e0 07             	shl    eax,0x7
c000ea06:	88 c2                	mov    dl,al
c000ea08:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea0e:	83 e0 7f             	and    eax,0x7f
c000ea11:	09 d0                	or     eax,edx
c000ea13:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea19:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000ea20:	e8 01 9d 00 00       	call   c0018726 <CPU::cpuidCheckEDX(unsigned int)>
c000ea25:	83 c4 10             	add    esp,0x10
c000ea28:	83 e0 01             	and    eax,0x1
c000ea2b:	c1 e0 05             	shl    eax,0x5
c000ea2e:	88 c2                	mov    dl,al
c000ea30:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea36:	83 e0 df             	and    eax,0xffffffdf
c000ea39:	09 d0                	or     eax,edx
c000ea3b:	f7 05 20 d7 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002d720,0x401
c000ea45:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea4b:	0f 84 c2 00 00 00    	je     c000eb13 <Computer::detectFeatures()+0x1df>
c000ea51:	83 e0 fe             	and    eax,0xfffffffe
c000ea54:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea5a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea60:	88 c2                	mov    dl,al
c000ea62:	83 e2 09             	and    edx,0x9
c000ea65:	fe ca                	dec    dl
c000ea67:	75 09                	jne    c000ea72 <Computer::detectFeatures()+0x13e>
c000ea69:	83 e0 fe             	and    eax,0xfffffffe
c000ea6c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea72:	83 ec 0c             	sub    esp,0xc
c000ea75:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea79:	50                   	push   eax
c000ea7a:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea7e:	55                   	push   ebp
c000ea7f:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea83:	57                   	push   edi
c000ea84:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea88:	56                   	push   esi
c000ea89:	68 00 00 00 80       	push   0x80000000
c000ea8e:	e8 0f 9c 00 00       	call   c00186a2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea93:	83 c4 20             	add    esp,0x20
c000ea96:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea9d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eaa1:	0f 86 c3 fe ff ff    	jbe    c000e96a <Computer::detectFeatures()+0x36>
c000eaa7:	83 ec 0c             	sub    esp,0xc
c000eaaa:	50                   	push   eax
c000eaab:	55                   	push   ebp
c000eaac:	57                   	push   edi
c000eaad:	56                   	push   esi
c000eaae:	68 01 00 00 80       	push   0x80000001
c000eab3:	e8 ea 9b 00 00       	call   c00186a2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eab8:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000eac2:	83 c4 20             	add    esp,0x20
c000eac5:	e9 a0 fe ff ff       	jmp    c000e96a <Computer::detectFeatures()+0x36>
c000eaca:	e8 b1 77 01 00       	call   c0026280 <absolutelyNoChanceInHell>
c000eacf:	88 c2                	mov    dl,al
c000ead1:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ead7:	c1 e2 07             	shl    edx,0x7
c000eada:	83 e0 7f             	and    eax,0x7f
c000eadd:	09 d0                	or     eax,edx
c000eadf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eae5:	84 c0                	test   al,al
c000eae7:	0f 89 bb fe ff ff    	jns    c000e9a8 <Computer::detectFeatures()+0x74>
c000eaed:	e8 6e 77 01 00       	call   c0026260 <avxDetect>
c000eaf2:	83 e0 01             	and    eax,0x1
c000eaf5:	c1 e0 05             	shl    eax,0x5
c000eaf8:	88 c2                	mov    dl,al
c000eafa:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eb00:	83 e0 df             	and    eax,0xffffffdf
c000eb03:	09 d0                	or     eax,edx
c000eb05:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eb0b:	83 c4 1c             	add    esp,0x1c
c000eb0e:	5b                   	pop    ebx
c000eb0f:	5e                   	pop    esi
c000eb10:	5f                   	pop    edi
c000eb11:	5d                   	pop    ebp
c000eb12:	c3                   	ret    
c000eb13:	83 ec 0c             	sub    esp,0xc
c000eb16:	68 00 02 00 00       	push   0x200
c000eb1b:	e8 06 9c 00 00       	call   c0018726 <CPU::cpuidCheckEDX(unsigned int)>
c000eb20:	83 c4 10             	add    esp,0x10
c000eb23:	83 e0 01             	and    eax,0x1
c000eb26:	88 c2                	mov    dl,al
c000eb28:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb2e:	83 e0 fe             	and    eax,0xfffffffe
c000eb31:	09 d0                	or     eax,edx
c000eb33:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb39:	e9 1c ff ff ff       	jmp    c000ea5a <Computer::detectFeatures()+0x126>

c000eb3e <Computer::displayFeatures()>:
c000eb3e:	c3                   	ret    
c000eb3f:	90                   	nop

c000eb40 <Computer::rdmsr(unsigned int)>:
c000eb40:	83 ec 0c             	sub    esp,0xc
c000eb43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb47:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb4e:	74 0a                	je     c000eb5a <Computer::rdmsr(unsigned int)+0x1a>
c000eb50:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb54:	0f 32                	rdmsr  
c000eb56:	83 c4 0c             	add    esp,0xc
c000eb59:	c3                   	ret    
c000eb5a:	83 ec 0c             	sub    esp,0xc
c000eb5d:	68 70 9d 02 c0       	push   0xc0029d70
c000eb62:	e8 ce b1 00 00       	call   c0019d35 <Krnl::panic(char const*)>
c000eb67:	83 c4 10             	add    esp,0x10
c000eb6a:	eb e4                	jmp    c000eb50 <Computer::rdmsr(unsigned int)+0x10>

c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eb6c:	57                   	push   edi
c000eb6d:	56                   	push   esi
c000eb6e:	52                   	push   edx
c000eb6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb73:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eb77:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eb7b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb82:	74 0e                	je     c000eb92 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eb84:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb88:	89 f0                	mov    eax,esi
c000eb8a:	89 fa                	mov    edx,edi
c000eb8c:	0f 30                	wrmsr  
c000eb8e:	58                   	pop    eax
c000eb8f:	5e                   	pop    esi
c000eb90:	5f                   	pop    edi
c000eb91:	c3                   	ret    
c000eb92:	83 ec 0c             	sub    esp,0xc
c000eb95:	68 76 9d 02 c0       	push   0xc0029d76
c000eb9a:	e8 96 b1 00 00       	call   c0019d35 <Krnl::panic(char const*)>
c000eb9f:	83 c4 10             	add    esp,0x10
c000eba2:	eb e0                	jmp    c000eb84 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eba4 <Computer::nmiEnabled()>:
c000eba4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eba8:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ebae:	c3                   	ret    
c000ebaf:	90                   	nop

c000ebb0 <Computer::readCMOS(unsigned char)>:
c000ebb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebb4:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ebbb:	19 c0                	sbb    eax,eax
c000ebbd:	83 e0 80             	and    eax,0xffffff80
c000ebc0:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ebc4:	e6 70                	out    0x70,al
c000ebc6:	e4 71                	in     al,0x71
c000ebc8:	c3                   	ret    
c000ebc9:	90                   	nop

c000ebca <Computer::enableNMI(bool)>:
c000ebca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ebce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebd2:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ebd8:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ebe0:	eb ce                	jmp    c000ebb0 <Computer::readCMOS(unsigned char)>

c000ebe2 <Computer::open(int, int, void*)>:
c000ebe2:	56                   	push   esi
c000ebe3:	53                   	push   ebx
c000ebe4:	83 ec 10             	sub    esp,0x10
c000ebe7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ebeb:	68 10 9e 02 c0       	push   0xc0029e10
c000ebf0:	e8 01 0a 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000ebf5:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000ebfc:	f6 05 20 d7 02 c0 04 	test   BYTE PTR ds:0xc002d720,0x4
c000ec03:	0f 94 05 40 c6 02 c0 	sete   BYTE PTR ds:0xc002c640
c000ec0a:	e8 8d 09 00 00       	call   c000f59c <malloc>
c000ec0f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec12:	89 c6                	mov    esi,eax
c000ec14:	e8 81 8d 00 00       	call   c001799a <ACPI::ACPI()>
c000ec19:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ec1f:	58                   	pop    eax
c000ec20:	5a                   	pop    edx
c000ec21:	56                   	push   esi
c000ec22:	53                   	push   ebx
c000ec23:	e8 da 4d 00 00       	call   c0013a02 <Device::addChild(Device*)>
c000ec28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ec2b:	e8 04 fd ff ff       	call   c000e934 <Computer::detectFeatures()>
c000ec30:	59                   	pop    ecx
c000ec31:	5e                   	pop    esi
c000ec32:	6a 01                	push   0x1
c000ec34:	53                   	push   ebx
c000ec35:	e8 90 ff ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ec3a:	c7 04 24 20 9d 02 c0 	mov    DWORD PTR [esp],0xc0029d20
c000ec41:	e8 b0 09 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000ec46:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ec4d:	e8 4a 09 00 00       	call   c000f59c <malloc>
c000ec52:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec55:	89 c6                	mov    esi,eax
c000ec57:	e8 82 9b 00 00       	call   c00187de <CPU::CPU()>
c000ec5c:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ec62:	58                   	pop    eax
c000ec63:	5a                   	pop    edx
c000ec64:	56                   	push   esi
c000ec65:	53                   	push   ebx
c000ec66:	e8 97 4d 00 00       	call   c0013a02 <Device::addChild(Device*)>
c000ec6b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ec71:	8b 10                	mov    edx,DWORD PTR [eax]
c000ec73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ec77:	6a 00                	push   0x0
c000ec79:	6a 00                	push   0x0
c000ec7b:	50                   	push   eax
c000ec7c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ec7f:	83 c4 20             	add    esp,0x20
c000ec82:	e8 13 53 00 00       	call   c0013f9a <setupFPU()>
c000ec87:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ec8d:	85 c0                	test   eax,eax
c000ec8f:	74 1f                	je     c000ecb0 <Computer::open(int, int, void*)+0xce>
c000ec91:	83 ec 08             	sub    esp,0x8
c000ec94:	50                   	push   eax
c000ec95:	53                   	push   ebx
c000ec96:	e8 67 4d 00 00       	call   c0013a02 <Device::addChild(Device*)>
c000ec9b:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000eca1:	8b 10                	mov    edx,DWORD PTR [eax]
c000eca3:	6a 00                	push   0x0
c000eca5:	6a 00                	push   0x0
c000eca7:	6a 00                	push   0x0
c000eca9:	50                   	push   eax
c000ecaa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ecad:	83 c4 20             	add    esp,0x20
c000ecb0:	83 ec 0c             	sub    esp,0xc
c000ecb3:	68 7c 9d 02 c0       	push   0xc0029d7c
c000ecb8:	e8 39 09 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000ecbd:	c7 04 24 94 e6 00 c0 	mov    DWORD PTR [esp],0xc000e694
c000ecc4:	e8 f5 ea 00 00       	call   c001d7be <setupMultitasking(void (*)())>
c000ecc9:	83 c4 14             	add    esp,0x14
c000eccc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ecd1:	5b                   	pop    ebx
c000ecd2:	5e                   	pop    esi
c000ecd3:	c3                   	ret    

c000ecd4 <Computer::disableNMI()>:
c000ecd4:	6a 00                	push   0x0
c000ecd6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ecda:	e8 eb fe ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ecdf:	58                   	pop    eax
c000ece0:	5a                   	pop    edx
c000ece1:	c3                   	ret    

c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ece2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ece6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eced:	19 c0                	sbb    eax,eax
c000ecef:	83 e0 80             	and    eax,0xffffff80
c000ecf2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ecf6:	e6 70                	out    0x70,al
c000ecf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ecfc:	e6 71                	out    0x71,al
c000ecfe:	c3                   	ret    
c000ecff:	90                   	nop

c000ed00 <Computer::handleNMI()>:
c000ed00:	56                   	push   esi
c000ed01:	53                   	push   ebx
c000ed02:	83 ec 10             	sub    esp,0x10
c000ed05:	e4 92                	in     al,0x92
c000ed07:	89 c6                	mov    esi,eax
c000ed09:	e4 61                	in     al,0x61
c000ed0b:	68 97 9d 02 c0       	push   0xc0029d97
c000ed10:	88 c3                	mov    bl,al
c000ed12:	e8 b2 38 00 00       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c000ed17:	83 c4 10             	add    esp,0x10
c000ed1a:	83 e6 10             	and    esi,0x10
c000ed1d:	75 0d                	jne    c000ed2c <Computer::handleNMI()+0x2c>
c000ed1f:	f6 c3 40             	test   bl,0x40
c000ed22:	75 1d                	jne    c000ed41 <Computer::handleNMI()+0x41>
c000ed24:	84 db                	test   bl,bl
c000ed26:	78 2d                	js     c000ed55 <Computer::handleNMI()+0x55>
c000ed28:	58                   	pop    eax
c000ed29:	5b                   	pop    ebx
c000ed2a:	5e                   	pop    esi
c000ed2b:	c3                   	ret    
c000ed2c:	83 ec 0c             	sub    esp,0xc
c000ed2f:	68 a8 9d 02 c0       	push   0xc0029da8
c000ed34:	e8 fc af 00 00       	call   c0019d35 <Krnl::panic(char const*)>
c000ed39:	83 c4 10             	add    esp,0x10
c000ed3c:	f6 c3 40             	test   bl,0x40
c000ed3f:	74 e3                	je     c000ed24 <Computer::handleNMI()+0x24>
c000ed41:	83 ec 0c             	sub    esp,0xc
c000ed44:	68 b5 9d 02 c0       	push   0xc0029db5
c000ed49:	e8 e7 af 00 00       	call   c0019d35 <Krnl::panic(char const*)>
c000ed4e:	83 c4 10             	add    esp,0x10
c000ed51:	84 db                	test   bl,bl
c000ed53:	79 d3                	jns    c000ed28 <Computer::handleNMI()+0x28>
c000ed55:	c7 44 24 10 bf 9d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029dbf
c000ed5d:	5a                   	pop    edx
c000ed5e:	5b                   	pop    ebx
c000ed5f:	5e                   	pop    esi
c000ed60:	e9 d0 af 00 00       	jmp    c0019d35 <Krnl::panic(char const*)>
c000ed65:	90                   	nop

c000ed66 <Computer::setDiskActivityLight(int, bool)>:
c000ed66:	56                   	push   esi
c000ed67:	53                   	push   ebx
c000ed68:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ed6c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ed71:	77 1b                	ja     c000ed8e <Computer::setDiskActivityLight(int, bool)+0x28>
c000ed73:	e4 92                	in     al,0x92
c000ed75:	bb 40 00 00 00       	mov    ebx,0x40
c000ed7a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000ed7e:	89 da                	mov    edx,ebx
c000ed80:	d3 e2                	shl    edx,cl
c000ed82:	89 f1                	mov    ecx,esi
c000ed84:	f7 d2                	not    edx
c000ed86:	d3 e3                	shl    ebx,cl
c000ed88:	21 d0                	and    eax,edx
c000ed8a:	09 d8                	or     eax,ebx
c000ed8c:	e6 92                	out    0x92,al
c000ed8e:	5b                   	pop    ebx
c000ed8f:	5e                   	pop    esi
c000ed90:	c3                   	ret    
c000ed91:	90                   	nop

c000ed92 <GDTEntry::setBase(unsigned int)>:
c000ed92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed96:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ed9a:	89 c1                	mov    ecx,eax
c000ed9c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000eda0:	c1 e9 10             	shr    ecx,0x10
c000eda3:	c1 e8 18             	shr    eax,0x18
c000eda6:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000eda9:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000edac:	c3                   	ret    
c000edad:	90                   	nop

c000edae <GDTEntry::setLimit(unsigned int)>:
c000edae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000edb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000edb6:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000edb9:	66 89 01             	mov    WORD PTR [ecx],ax
c000edbc:	83 e2 f0             	and    edx,0xfffffff0
c000edbf:	c1 e8 10             	shr    eax,0x10
c000edc2:	83 e0 0f             	and    eax,0xf
c000edc5:	09 d0                	or     eax,edx
c000edc7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000edca:	c3                   	ret    
c000edcb:	90                   	nop

c000edcc <GDT::GDT()>:
c000edcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edd0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000edd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edda:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ede0:	90                   	nop
c000ede1:	c3                   	ret    

c000ede2 <GDT::addEntry(GDTEntry)>:
c000ede2:	53                   	push   ebx
c000ede3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ede7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000edeb:	8b 02                	mov    eax,DWORD PTR [edx]
c000eded:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000edf1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000edf5:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000edf9:	8d 48 01             	lea    ecx,[eax+0x1]
c000edfc:	c1 e0 03             	shl    eax,0x3
c000edff:	89 0a                	mov    DWORD PTR [edx],ecx
c000ee01:	5b                   	pop    ebx
c000ee02:	c3                   	ret    
c000ee03:	90                   	nop

c000ee04 <GDT::getNumberOfEntries()>:
c000ee04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee08:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee0a:	c3                   	ret    
c000ee0b:	90                   	nop

c000ee0c <GDT::flush()>:
c000ee0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee10:	8b 10                	mov    edx,DWORD PTR [eax]
c000ee12:	83 c0 04             	add    eax,0x4
c000ee15:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ee1c:	a3 12 d7 02 c0       	mov    ds:0xc002d712,eax
c000ee21:	66 89 15 10 d7 02 c0 	mov    WORD PTR ds:0xc002d710,dx
c000ee28:	e9 23 16 ff ff       	jmp    c0000450 <loadGDT>
c000ee2d:	90                   	nop

c000ee2e <GDT::setup()>:
c000ee2e:	55                   	push   ebp
c000ee2f:	57                   	push   edi
c000ee30:	56                   	push   esi
c000ee31:	53                   	push   ebx
c000ee32:	83 ec 3c             	sub    esp,0x3c
c000ee35:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ee39:	6a 00                	push   0x0
c000ee3b:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ee3f:	53                   	push   ebx
c000ee40:	e8 4d ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee45:	6a 00                	push   0x0
c000ee47:	53                   	push   ebx
c000ee48:	e8 61 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee4d:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ee55:	6a 00                	push   0x0
c000ee57:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ee5b:	53                   	push   ebx
c000ee5c:	e8 31 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee61:	68 ff ff ff 00       	push   0xffffff
c000ee66:	53                   	push   ebx
c000ee67:	e8 42 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee6c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ee70:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ee75:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ee7a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ee7e:	83 c4 20             	add    esp,0x20
c000ee81:	6a 00                	push   0x0
c000ee83:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000ee87:	53                   	push   ebx
c000ee88:	e8 05 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee8d:	68 ff ff ff 00       	push   0xffffff
c000ee92:	53                   	push   ebx
c000ee93:	e8 16 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee98:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ee9c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eea0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000eea4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000eea8:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eeac:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000eeb1:	0d 00 92 c0 00       	or     eax,0xc09200
c000eeb6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000eeba:	89 d8                	mov    eax,ebx
c000eebc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000eec0:	80 cc 60             	or     ah,0x60
c000eec3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eec7:	83 c4 0c             	add    esp,0xc
c000eeca:	89 f8                	mov    eax,edi
c000eecc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed0:	80 cc 60             	or     ah,0x60
c000eed3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed7:	89 c7                	mov    edi,eax
c000eed9:	55                   	push   ebp
c000eeda:	e8 03 ff ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eedf:	83 c4 0c             	add    esp,0xc
c000eee2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eee6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eeea:	55                   	push   ebp
c000eeeb:	e8 f2 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eef0:	83 c4 0c             	add    esp,0xc
c000eef3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eef7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eefb:	55                   	push   ebp
c000eefc:	e8 e1 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef01:	83 c4 0c             	add    esp,0xc
c000ef04:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef08:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef0c:	53                   	push   ebx
c000ef0d:	51                   	push   ecx
c000ef0e:	55                   	push   ebp
c000ef0f:	e8 ce fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef14:	83 c4 0c             	add    esp,0xc
c000ef17:	57                   	push   edi
c000ef18:	56                   	push   esi
c000ef19:	55                   	push   ebp
c000ef1a:	e8 c3 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef1f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ef22:	e8 e5 fe ff ff       	call   c000ee0c <GDT::flush()>
c000ef27:	83 c4 4c             	add    esp,0x4c
c000ef2a:	5b                   	pop    ebx
c000ef2b:	5e                   	pop    esi
c000ef2c:	5f                   	pop    edi
c000ef2d:	5d                   	pop    ebp
c000ef2e:	c3                   	ret    

c000ef2f <idleFunction(void*)>:
c000ef2f:	53                   	push   ebx
c000ef30:	83 ec 08             	sub    esp,0x8
c000ef33:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c000ef38:	48                   	dec    eax
c000ef39:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c000ef3e:	75 01                	jne    c000ef41 <idleFunction(void*)+0x12>
c000ef40:	fb                   	sti    
c000ef41:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c000ef46:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000ef4c:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000ef53:	74 3c                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef55:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ef5c:	74 33                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef5e:	31 db                	xor    ebx,ebx
c000ef60:	52                   	push   edx
c000ef61:	52                   	push   edx
c000ef62:	68 e1 00 00 00       	push   0xe1
c000ef67:	50                   	push   eax
c000ef68:	e8 d3 fb ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c000ef6d:	53                   	push   ebx
c000ef6e:	83 e0 02             	and    eax,0x2
c000ef71:	50                   	push   eax
c000ef72:	68 e1 00 00 00       	push   0xe1
c000ef77:	ff 35 08 d7 02 c0    	push   DWORD PTR ds:0xc002d708
c000ef7d:	e8 ea fb ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c000ef82:	83 c4 20             	add    esp,0x20
c000ef85:	e8 f5 12 ff ff       	call   c000027f <doTPAUSE>
c000ef8a:	e8 81 93 01 00       	call   c0028310 <idleCommon()>
c000ef8f:	eb f4                	jmp    c000ef85 <idleFunction(void*)+0x56>
c000ef91:	fb                   	sti    
c000ef92:	f4                   	hlt    
c000ef93:	e8 78 93 01 00       	call   c0028310 <idleCommon()>
c000ef98:	eb f7                	jmp    c000ef91 <idleFunction(void*)+0x62>

c000ef9a <IDTEntry::IDTEntry(bool)>:
c000ef9a:	83 ec 04             	sub    esp,0x4
c000ef9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efa1:	88 04 24             	mov    BYTE PTR [esp],al
c000efa4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efa8:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000efae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efb2:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000efb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efba:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efbd:	83 e2 f0             	and    edx,0xfffffff0
c000efc0:	83 ca 0e             	or     edx,0xe
c000efc3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efca:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efcd:	83 e2 ef             	and    edx,0xffffffef
c000efd0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efd3:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000efd7:	74 04                	je     c000efdd <IDTEntry::IDTEntry(bool)+0x43>
c000efd9:	b2 03                	mov    dl,0x3
c000efdb:	eb 02                	jmp    c000efdf <IDTEntry::IDTEntry(bool)+0x45>
c000efdd:	b2 00                	mov    dl,0x0
c000efdf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efe3:	83 e2 03             	and    edx,0x3
c000efe6:	88 d1                	mov    cl,dl
c000efe8:	c1 e1 05             	shl    ecx,0x5
c000efeb:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efee:	83 e2 9f             	and    edx,0xffffff9f
c000eff1:	09 ca                	or     edx,ecx
c000eff3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000effa:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000effd:	83 ca 80             	or     edx,0xffffff80
c000f000:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f003:	90                   	nop
c000f004:	83 c4 04             	add    esp,0x4
c000f007:	c3                   	ret    

c000f008 <IDTEntry::setOffset(unsigned int)>:
c000f008:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f00c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f010:	66 89 02             	mov    WORD PTR [edx],ax
c000f013:	c1 e8 10             	shr    eax,0x10
c000f016:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f01a:	c3                   	ret    
c000f01b:	90                   	nop

c000f01c <IDT::IDT()>:
c000f01c:	90                   	nop
c000f01d:	c3                   	ret    

c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f01e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f022:	83 c0 30             	add    eax,0x30
c000f025:	c3                   	ret    

c000f026 <IDT::addEntry(IDTEntry, int)>:
c000f026:	53                   	push   ebx
c000f027:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f02b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f02f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f033:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f037:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f03a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f03e:	5b                   	pop    ebx
c000f03f:	c3                   	ret    

c000f040 <IDT::addEntry(int, void (*)(), bool)>:
c000f040:	53                   	push   ebx
c000f041:	83 ec 10             	sub    esp,0x10
c000f044:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f049:	50                   	push   eax
c000f04a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f04e:	53                   	push   ebx
c000f04f:	e8 46 ff ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f054:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f058:	53                   	push   ebx
c000f059:	e8 aa ff ff ff       	call   c000f008 <IDTEntry::setOffset(unsigned int)>
c000f05e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f062:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f066:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f06a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f06e:	e8 b3 ff ff ff       	call   c000f026 <IDT::addEntry(IDTEntry, int)>
c000f073:	83 c4 30             	add    esp,0x30
c000f076:	5b                   	pop    ebx
c000f077:	c3                   	ret    

c000f078 <IDT::flush()>:
c000f078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f07c:	66 c7 05 18 d7 02 c0 ff 07 	mov    WORD PTR ds:0xc002d718,0x7ff
c000f085:	a3 1a d7 02 c0       	mov    ds:0xc002d71a,eax
c000f08a:	0f 01 1d 18 d7 02 c0 	lidtd  ds:0xc002d718
c000f091:	c3                   	ret    

c000f092 <IDT::setup()>:
c000f092:	57                   	push   edi
c000f093:	56                   	push   esi
c000f094:	53                   	push   ebx
c000f095:	83 ec 10             	sub    esp,0x10
c000f098:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f09c:	6a 00                	push   0x0
c000f09e:	68 70 04 00 c0       	push   0xc0000470
c000f0a3:	6a 00                	push   0x0
c000f0a5:	53                   	push   ebx
c000f0a6:	e8 95 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ab:	6a 00                	push   0x0
c000f0ad:	68 80 04 00 c0       	push   0xc0000480
c000f0b2:	6a 01                	push   0x1
c000f0b4:	53                   	push   ebx
c000f0b5:	e8 86 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ba:	83 c4 20             	add    esp,0x20
c000f0bd:	6a 00                	push   0x0
c000f0bf:	68 8a 04 00 c0       	push   0xc000048a
c000f0c4:	6a 02                	push   0x2
c000f0c6:	53                   	push   ebx
c000f0c7:	e8 74 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0cc:	6a 00                	push   0x0
c000f0ce:	68 94 04 00 c0       	push   0xc0000494
c000f0d3:	6a 03                	push   0x3
c000f0d5:	53                   	push   ebx
c000f0d6:	e8 65 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0db:	83 c4 20             	add    esp,0x20
c000f0de:	6a 00                	push   0x0
c000f0e0:	68 9e 04 00 c0       	push   0xc000049e
c000f0e5:	6a 04                	push   0x4
c000f0e7:	53                   	push   ebx
c000f0e8:	e8 53 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ed:	6a 00                	push   0x0
c000f0ef:	68 a8 04 00 c0       	push   0xc00004a8
c000f0f4:	6a 05                	push   0x5
c000f0f6:	53                   	push   ebx
c000f0f7:	e8 44 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0fc:	83 c4 20             	add    esp,0x20
c000f0ff:	6a 00                	push   0x0
c000f101:	68 b2 04 00 c0       	push   0xc00004b2
c000f106:	6a 06                	push   0x6
c000f108:	53                   	push   ebx
c000f109:	e8 32 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f10e:	6a 00                	push   0x0
c000f110:	68 bc 04 00 c0       	push   0xc00004bc
c000f115:	6a 07                	push   0x7
c000f117:	53                   	push   ebx
c000f118:	e8 23 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f11d:	83 c4 20             	add    esp,0x20
c000f120:	6a 00                	push   0x0
c000f122:	68 c6 04 00 c0       	push   0xc00004c6
c000f127:	6a 08                	push   0x8
c000f129:	53                   	push   ebx
c000f12a:	e8 11 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f12f:	6a 00                	push   0x0
c000f131:	68 ce 04 00 c0       	push   0xc00004ce
c000f136:	6a 09                	push   0x9
c000f138:	53                   	push   ebx
c000f139:	e8 02 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f13e:	83 c4 20             	add    esp,0x20
c000f141:	6a 00                	push   0x0
c000f143:	68 d8 04 00 c0       	push   0xc00004d8
c000f148:	6a 0a                	push   0xa
c000f14a:	53                   	push   ebx
c000f14b:	e8 f0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f150:	6a 00                	push   0x0
c000f152:	68 e0 04 00 c0       	push   0xc00004e0
c000f157:	6a 0b                	push   0xb
c000f159:	53                   	push   ebx
c000f15a:	e8 e1 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f15f:	83 c4 20             	add    esp,0x20
c000f162:	6a 00                	push   0x0
c000f164:	68 e8 04 00 c0       	push   0xc00004e8
c000f169:	6a 0c                	push   0xc
c000f16b:	53                   	push   ebx
c000f16c:	e8 cf fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f171:	6a 00                	push   0x0
c000f173:	68 f0 04 00 c0       	push   0xc00004f0
c000f178:	6a 0d                	push   0xd
c000f17a:	53                   	push   ebx
c000f17b:	e8 c0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f180:	83 c4 20             	add    esp,0x20
c000f183:	6a 00                	push   0x0
c000f185:	68 f8 04 00 c0       	push   0xc00004f8
c000f18a:	6a 0e                	push   0xe
c000f18c:	53                   	push   ebx
c000f18d:	e8 ae fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f192:	6a 00                	push   0x0
c000f194:	68 00 05 00 c0       	push   0xc0000500
c000f199:	6a 0f                	push   0xf
c000f19b:	53                   	push   ebx
c000f19c:	e8 9f fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1a1:	83 c4 20             	add    esp,0x20
c000f1a4:	6a 00                	push   0x0
c000f1a6:	68 0a 05 00 c0       	push   0xc000050a
c000f1ab:	6a 10                	push   0x10
c000f1ad:	53                   	push   ebx
c000f1ae:	e8 8d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1b3:	6a 00                	push   0x0
c000f1b5:	68 14 05 00 c0       	push   0xc0000514
c000f1ba:	6a 11                	push   0x11
c000f1bc:	53                   	push   ebx
c000f1bd:	e8 7e fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1c2:	83 c4 20             	add    esp,0x20
c000f1c5:	6a 00                	push   0x0
c000f1c7:	68 1e 05 00 c0       	push   0xc000051e
c000f1cc:	6a 12                	push   0x12
c000f1ce:	53                   	push   ebx
c000f1cf:	e8 6c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1d4:	6a 01                	push   0x1
c000f1d6:	68 b8 05 00 c0       	push   0xc00005b8
c000f1db:	6a 60                	push   0x60
c000f1dd:	53                   	push   ebx
c000f1de:	e8 5d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1e3:	83 c4 20             	add    esp,0x20
c000f1e6:	6a 00                	push   0x0
c000f1e8:	68 bf 05 00 c0       	push   0xc00005bf
c000f1ed:	6a 20                	push   0x20
c000f1ef:	53                   	push   ebx
c000f1f0:	e8 4b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1f5:	6a 00                	push   0x0
c000f1f7:	68 aa 05 00 c0       	push   0xc00005aa
c000f1fc:	6a 21                	push   0x21
c000f1fe:	53                   	push   ebx
c000f1ff:	e8 3c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f204:	83 c4 20             	add    esp,0x20
c000f207:	6a 00                	push   0x0
c000f209:	68 b1 05 00 c0       	push   0xc00005b1
c000f20e:	6a 22                	push   0x22
c000f210:	53                   	push   ebx
c000f211:	e8 2a fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f216:	6a 00                	push   0x0
c000f218:	68 28 05 00 c0       	push   0xc0000528
c000f21d:	6a 23                	push   0x23
c000f21f:	53                   	push   ebx
c000f220:	e8 1b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f225:	83 c4 20             	add    esp,0x20
c000f228:	6a 00                	push   0x0
c000f22a:	68 32 05 00 c0       	push   0xc0000532
c000f22f:	6a 24                	push   0x24
c000f231:	53                   	push   ebx
c000f232:	e8 09 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f237:	6a 00                	push   0x0
c000f239:	68 3c 05 00 c0       	push   0xc000053c
c000f23e:	6a 25                	push   0x25
c000f240:	53                   	push   ebx
c000f241:	e8 fa fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f246:	83 c4 20             	add    esp,0x20
c000f249:	6a 00                	push   0x0
c000f24b:	68 46 05 00 c0       	push   0xc0000546
c000f250:	6a 26                	push   0x26
c000f252:	53                   	push   ebx
c000f253:	e8 e8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f258:	6a 00                	push   0x0
c000f25a:	68 50 05 00 c0       	push   0xc0000550
c000f25f:	6a 27                	push   0x27
c000f261:	53                   	push   ebx
c000f262:	e8 d9 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f267:	83 c4 20             	add    esp,0x20
c000f26a:	6a 00                	push   0x0
c000f26c:	68 5a 05 00 c0       	push   0xc000055a
c000f271:	6a 28                	push   0x28
c000f273:	53                   	push   ebx
c000f274:	e8 c7 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f279:	6a 00                	push   0x0
c000f27b:	68 64 05 00 c0       	push   0xc0000564
c000f280:	6a 29                	push   0x29
c000f282:	53                   	push   ebx
c000f283:	e8 b8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f288:	83 c4 20             	add    esp,0x20
c000f28b:	6a 00                	push   0x0
c000f28d:	68 6e 05 00 c0       	push   0xc000056e
c000f292:	6a 2a                	push   0x2a
c000f294:	53                   	push   ebx
c000f295:	e8 a6 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f29a:	6a 00                	push   0x0
c000f29c:	68 78 05 00 c0       	push   0xc0000578
c000f2a1:	6a 2b                	push   0x2b
c000f2a3:	53                   	push   ebx
c000f2a4:	e8 97 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2a9:	83 c4 20             	add    esp,0x20
c000f2ac:	6a 00                	push   0x0
c000f2ae:	68 82 05 00 c0       	push   0xc0000582
c000f2b3:	6a 2c                	push   0x2c
c000f2b5:	53                   	push   ebx
c000f2b6:	e8 85 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2bb:	6a 00                	push   0x0
c000f2bd:	68 8c 05 00 c0       	push   0xc000058c
c000f2c2:	6a 2d                	push   0x2d
c000f2c4:	53                   	push   ebx
c000f2c5:	e8 76 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2ca:	83 c4 20             	add    esp,0x20
c000f2cd:	6a 00                	push   0x0
c000f2cf:	68 96 05 00 c0       	push   0xc0000596
c000f2d4:	6a 2e                	push   0x2e
c000f2d6:	53                   	push   ebx
c000f2d7:	e8 64 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2dc:	6a 00                	push   0x0
c000f2de:	68 a0 05 00 c0       	push   0xc00005a0
c000f2e3:	6a 2f                	push   0x2f
c000f2e5:	53                   	push   ebx
c000f2e6:	e8 55 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2eb:	83 c4 20             	add    esp,0x20
c000f2ee:	6a 00                	push   0x0
c000f2f0:	68 f6 05 00 c0       	push   0xc00005f6
c000f2f5:	6a 30                	push   0x30
c000f2f7:	53                   	push   ebx
c000f2f8:	e8 43 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2fd:	6a 00                	push   0x0
c000f2ff:	68 00 06 00 c0       	push   0xc0000600
c000f304:	6a 31                	push   0x31
c000f306:	53                   	push   ebx
c000f307:	e8 34 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f30c:	83 c4 20             	add    esp,0x20
c000f30f:	6a 00                	push   0x0
c000f311:	68 0a 06 00 c0       	push   0xc000060a
c000f316:	6a 32                	push   0x32
c000f318:	53                   	push   ebx
c000f319:	e8 22 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f31e:	6a 00                	push   0x0
c000f320:	68 14 06 00 c0       	push   0xc0000614
c000f325:	6a 33                	push   0x33
c000f327:	53                   	push   ebx
c000f328:	e8 13 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f32d:	83 c4 20             	add    esp,0x20
c000f330:	6a 00                	push   0x0
c000f332:	68 1e 06 00 c0       	push   0xc000061e
c000f337:	6a 34                	push   0x34
c000f339:	53                   	push   ebx
c000f33a:	e8 01 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f33f:	6a 00                	push   0x0
c000f341:	68 28 06 00 c0       	push   0xc0000628
c000f346:	6a 35                	push   0x35
c000f348:	53                   	push   ebx
c000f349:	e8 f2 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f34e:	83 c4 20             	add    esp,0x20
c000f351:	6a 00                	push   0x0
c000f353:	68 32 06 00 c0       	push   0xc0000632
c000f358:	6a 36                	push   0x36
c000f35a:	53                   	push   ebx
c000f35b:	e8 e0 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f360:	6a 00                	push   0x0
c000f362:	68 3c 06 00 c0       	push   0xc000063c
c000f367:	6a 37                	push   0x37
c000f369:	53                   	push   ebx
c000f36a:	e8 d1 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f36f:	83 c4 1c             	add    esp,0x1c
c000f372:	6a 03                	push   0x3
c000f374:	6a 02                	push   0x2
c000f376:	ff 35 70 d8 02 c0    	push   DWORD PTR ds:0xc002d870
c000f37c:	e8 0d 27 00 00       	call   c0011a8e <VAS::allocatePages(int, int)>
c000f381:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f388:	89 c6                	mov    esi,eax
c000f38a:	e8 0d 02 00 00       	call   c000f59c <malloc>
c000f38f:	81 c6 00 20 00 00    	add    esi,0x2000
c000f395:	89 04 24             	mov    DWORD PTR [esp],eax
c000f398:	89 c7                	mov    edi,eax
c000f39a:	e8 77 17 00 00       	call   c0010b16 <TSS::TSS()>
c000f39f:	83 c4 0c             	add    esp,0xc
c000f3a2:	68 c6 04 00 c0       	push   0xc00004c6
c000f3a7:	56                   	push   esi
c000f3a8:	57                   	push   edi
c000f3a9:	e8 a8 17 00 00       	call   c0010b56 <TSS::setup(unsigned long, unsigned long)>
c000f3ae:	89 c6                	mov    esi,eax
c000f3b0:	58                   	pop    eax
c000f3b1:	5a                   	pop    edx
c000f3b2:	6a 00                	push   0x0
c000f3b4:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f3b8:	50                   	push   eax
c000f3b9:	e8 dc fb ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f3be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3c2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f3c7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f3ce:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f3d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f3d8:	80 ce 05             	or     dh,0x5
c000f3db:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f3de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f3e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3e6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f3e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f3ec:	e8 87 fc ff ff       	call   c000f078 <IDT::flush()>
c000f3f1:	83 c4 20             	add    esp,0x20
c000f3f4:	5b                   	pop    ebx
c000f3f5:	5e                   	pop    esi
c000f3f6:	5f                   	pop    edi
c000f3f7:	c3                   	ret    

c000f3f8 <sbrk>:
c000f3f8:	55                   	push   ebp
c000f3f9:	57                   	push   edi
c000f3fa:	56                   	push   esi
c000f3fb:	53                   	push   ebx
c000f3fc:	83 ec 1c             	sub    esp,0x1c
c000f3ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f403:	85 c0                	test   eax,eax
c000f405:	74 3e                	je     c000f445 <sbrk+0x4d>
c000f407:	78 43                	js     c000f44c <sbrk+0x54>
c000f409:	8b 15 08 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d708
c000f40f:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f415:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f41b:	83 e2 01             	and    edx,0x1
c000f41e:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f422:	8b 0d dc c4 02 c0    	mov    ecx,DWORD PTR ds:0xc002c4dc
c000f428:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f42c:	05 ff 0f 00 00       	add    eax,0xfff
c000f431:	89 c2                	mov    edx,eax
c000f433:	78 2f                	js     c000f464 <sbrk+0x6c>
c000f435:	c1 fa 0c             	sar    edx,0xc
c000f438:	89 d7                	mov    edi,edx
c000f43a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f43e:	be 00 00 00 00       	mov    esi,0x0
c000f443:	eb 36                	jmp    c000f47b <sbrk+0x83>
c000f445:	a1 dc c4 02 c0       	mov    eax,ds:0xc002c4dc
c000f44a:	eb 73                	jmp    c000f4bf <sbrk+0xc7>
c000f44c:	83 ec 08             	sub    esp,0x8
c000f44f:	50                   	push   eax
c000f450:	68 60 9e 02 c0       	push   0xc0029e60
c000f455:	e8 6f 31 00 00       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c000f45a:	83 c4 10             	add    esp,0x10
c000f45d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f462:	eb 5b                	jmp    c000f4bf <sbrk+0xc7>
c000f464:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f46a:	eb c9                	jmp    c000f435 <sbrk+0x3d>
c000f46c:	81 05 dc c4 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002c4dc,0x1000
c000f476:	46                   	inc    esi
c000f477:	39 f7                	cmp    edi,esi
c000f479:	74 33                	je     c000f4ae <sbrk+0xb6>
c000f47b:	8b 1d 70 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d870
c000f481:	8b 2d dc c4 02 c0    	mov    ebp,DWORD PTR ds:0xc002c4dc
c000f487:	e8 b4 04 00 00       	call   c000f940 <Phys::allocatePage()>
c000f48c:	68 01 0c 00 00       	push   0xc01
c000f491:	55                   	push   ebp
c000f492:	50                   	push   eax
c000f493:	53                   	push   ebx
c000f494:	e8 f3 24 00 00       	call   c001198c <VAS::mapPage(unsigned long, unsigned long, int)>
c000f499:	83 c4 10             	add    esp,0x10
c000f49c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4a1:	74 c9                	je     c000f46c <sbrk+0x74>
c000f4a3:	8b 1d dc c4 02 c0    	mov    ebx,DWORD PTR ds:0xc002c4dc
c000f4a9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4ac:	eb be                	jmp    c000f46c <sbrk+0x74>
c000f4ae:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4b3:	75 12                	jne    c000f4c7 <sbrk+0xcf>
c000f4b5:	0f 20 d8             	mov    eax,cr3
c000f4b8:	0f 22 d8             	mov    cr3,eax
c000f4bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f4bf:	83 c4 1c             	add    esp,0x1c
c000f4c2:	5b                   	pop    ebx
c000f4c3:	5e                   	pop    esi
c000f4c4:	5f                   	pop    edi
c000f4c5:	5d                   	pop    ebp
c000f4c6:	c3                   	ret    
c000f4c7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f4cb:	89 cb                	mov    ebx,ecx
c000f4cd:	c1 eb 0a             	shr    ebx,0xa
c000f4d0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f4d6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f4dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4e0:	c1 e0 0c             	shl    eax,0xc
c000f4e3:	01 c8                	add    eax,ecx
c000f4e5:	c1 e8 0a             	shr    eax,0xa
c000f4e8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f4ed:	2d 00 00 40 00       	sub    eax,0x400000
c000f4f2:	39 c3                	cmp    ebx,eax
c000f4f4:	77 c5                	ja     c000f4bb <sbrk+0xc3>
c000f4f6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4f9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f4ff:	39 d8                	cmp    eax,ebx
c000f501:	73 f3                	jae    c000f4f6 <sbrk+0xfe>
c000f503:	eb b6                	jmp    c000f4bb <sbrk+0xc3>

c000f505 <mmap>:
c000f505:	83 ec 18             	sub    esp,0x18
c000f508:	68 90 9e 02 c0       	push   0xc0029e90
c000f50d:	e8 23 a8 00 00       	call   c0019d35 <Krnl::panic(char const*)>
c000f512:	b8 00 00 00 00       	mov    eax,0x0
c000f517:	83 c4 1c             	add    esp,0x1c
c000f51a:	c3                   	ret    

c000f51b <munmap>:
c000f51b:	83 ec 18             	sub    esp,0x18
c000f51e:	68 95 9e 02 c0       	push   0xc0029e95
c000f523:	e8 0d a8 00 00       	call   c0019d35 <Krnl::panic(char const*)>
c000f528:	b8 00 00 00 00       	mov    eax,0x0
c000f52d:	83 c4 1c             	add    esp,0x1c
c000f530:	c3                   	ret    

c000f531 <liballoc_lock()>:
c000f531:	fa                   	cli    
c000f532:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c000f538:	b8 00 00 00 00       	mov    eax,0x0
c000f53d:	c3                   	ret    

c000f53e <liballoc_unlock()>:
c000f53e:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c000f543:	48                   	dec    eax
c000f544:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c000f549:	75 01                	jne    c000f54c <liballoc_unlock()+0xe>
c000f54b:	fb                   	sti    
c000f54c:	b8 00 00 00 00       	mov    eax,0x0
c000f551:	c3                   	ret    

c000f552 <liballoc_alloc(int)>:
c000f552:	83 ec 10             	sub    esp,0x10
c000f555:	68 01 08 00 00       	push   0x801
c000f55a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f55e:	ff 35 70 d8 02 c0    	push   DWORD PTR ds:0xc002d870
c000f564:	e8 25 25 00 00       	call   c0011a8e <VAS::allocatePages(int, int)>
c000f569:	83 c4 1c             	add    esp,0x1c
c000f56c:	c3                   	ret    

c000f56d <liballoc_free(void*, int)>:
c000f56d:	83 ec 14             	sub    esp,0x14
c000f570:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f574:	ff 35 70 d8 02 c0    	push   DWORD PTR ds:0xc002d870
c000f57a:	e8 b9 21 00 00       	call   c0011738 <VAS::freeAllocatedPages(unsigned long)>
c000f57f:	b8 00 00 00 00       	mov    eax,0x0
c000f584:	83 c4 1c             	add    esp,0x1c
c000f587:	c3                   	ret    

c000f588 <realloc>:
c000f588:	83 ec 14             	sub    esp,0x14
c000f58b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f58f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f593:	e8 94 20 ff ff       	call   c000162c <dlrealloc>
c000f598:	83 c4 1c             	add    esp,0x1c
c000f59b:	c3                   	ret    

c000f59c <malloc>:
c000f59c:	83 ec 18             	sub    esp,0x18
c000f59f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5a3:	e8 47 1b ff ff       	call   c00010ef <dlmalloc>
c000f5a8:	83 c4 1c             	add    esp,0x1c
c000f5ab:	c3                   	ret    

c000f5ac <free>:
c000f5ac:	83 ec 18             	sub    esp,0x18
c000f5af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5b3:	e8 dc 17 ff ff       	call   c0000d94 <dlfree>
c000f5b8:	83 c4 1c             	add    esp,0x1c
c000f5bb:	c3                   	ret    

c000f5bc <rfree>:
c000f5bc:	83 ec 18             	sub    esp,0x18
c000f5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5c3:	e8 cc 17 ff ff       	call   c0000d94 <dlfree>
c000f5c8:	83 c4 1c             	add    esp,0x1c
c000f5cb:	c3                   	ret    

c000f5cc <calloc>:
c000f5cc:	56                   	push   esi
c000f5cd:	53                   	push   ebx
c000f5ce:	83 ec 10             	sub    esp,0x10
c000f5d1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f5d5:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f5da:	53                   	push   ebx
c000f5db:	e8 bc ff ff ff       	call   c000f59c <malloc>
c000f5e0:	89 c6                	mov    esi,eax
c000f5e2:	83 c4 0c             	add    esp,0xc
c000f5e5:	53                   	push   ebx
c000f5e6:	6a 00                	push   0x0
c000f5e8:	50                   	push   eax
c000f5e9:	e8 62 11 ff ff       	call   c0000750 <memset>
c000f5ee:	89 f0                	mov    eax,esi
c000f5f0:	83 c4 14             	add    esp,0x14
c000f5f3:	5b                   	pop    ebx
c000f5f4:	5e                   	pop    esi
c000f5f5:	c3                   	ret    

c000f5f6 <Krnl::setBootMessage(char const*)>:
c000f5f6:	57                   	push   edi
c000f5f7:	56                   	push   esi
c000f5f8:	53                   	push   ebx
c000f5f9:	81 ec a4 00 00 00    	sub    esp,0xa4
c000f5ff:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000f606:	68 9e 00 00 00       	push   0x9e
c000f60b:	6a 00                	push   0x0
c000f60d:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000f611:	56                   	push   esi
c000f612:	e8 39 11 ff ff       	call   c0000750 <memset>
c000f617:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f61a:	e8 4d 11 ff ff       	call   c000076c <strlen>
c000f61f:	ba 50 00 00 00       	mov    edx,0x50
c000f624:	83 c4 10             	add    esp,0x10
c000f627:	29 c2                	sub    edx,eax
c000f629:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c000f62d:	d1 ea                	shr    edx,1
c000f62f:	84 c0                	test   al,al
c000f631:	74 19                	je     c000f64c <Krnl::setBootMessage(char const*)+0x56>
c000f633:	01 d2                	add    edx,edx
c000f635:	43                   	inc    ebx
c000f636:	01 f2                	add    edx,esi
c000f638:	80 cc 0f             	or     ah,0xf
c000f63b:	83 c2 02             	add    edx,0x2
c000f63e:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f642:	43                   	inc    ebx
c000f643:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c000f648:	84 c0                	test   al,al
c000f64a:	75 ec                	jne    c000f638 <Krnl::setBootMessage(char const*)+0x42>
c000f64c:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000f651:	b9 9e 00 00 00       	mov    ecx,0x9e
c000f656:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f658:	81 c4 a0 00 00 00    	add    esp,0xa0
c000f65e:	5b                   	pop    ebx
c000f65f:	5e                   	pop    esi
c000f660:	5f                   	pop    edi
c000f661:	c3                   	ret    

c000f662 <kernel_main>:
c000f662:	57                   	push   edi
c000f663:	bf f9 03 00 00       	mov    edi,0x3f9
c000f668:	56                   	push   esi
c000f669:	89 fa                	mov    edx,edi
c000f66b:	53                   	push   ebx
c000f66c:	31 f6                	xor    esi,esi
c000f66e:	83 ec 2c             	sub    esp,0x2c
c000f671:	89 f0                	mov    eax,esi
c000f673:	ee                   	out    dx,al
c000f674:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f679:	b0 80                	mov    al,0x80
c000f67b:	89 da                	mov    edx,ebx
c000f67d:	ee                   	out    dx,al
c000f67e:	b1 03                	mov    cl,0x3
c000f680:	ba f8 03 00 00       	mov    edx,0x3f8
c000f685:	88 c8                	mov    al,cl
c000f687:	ee                   	out    dx,al
c000f688:	89 f0                	mov    eax,esi
c000f68a:	89 fa                	mov    edx,edi
c000f68c:	ee                   	out    dx,al
c000f68d:	88 c8                	mov    al,cl
c000f68f:	89 da                	mov    edx,ebx
c000f691:	ee                   	out    dx,al
c000f692:	b0 c7                	mov    al,0xc7
c000f694:	ba fa 03 00 00       	mov    edx,0x3fa
c000f699:	ee                   	out    dx,al
c000f69a:	b0 0b                	mov    al,0xb
c000f69c:	ba fc 03 00 00       	mov    edx,0x3fc
c000f6a1:	ee                   	out    dx,al
c000f6a2:	68 9c 9e 02 c0       	push   0xc0029e9c
c000f6a7:	e8 1d 2f 00 00       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c000f6ac:	e8 67 09 00 00       	call   c0010018 <installVgaTextImplementation()>
c000f6b1:	0f b6 05 e0 c4 02 c0 	movzx  eax,BYTE PTR ds:0xc002c4e0
c000f6b8:	83 c4 10             	add    esp,0x10
c000f6bb:	84 c0                	test   al,al
c000f6bd:	74 6c                	je     c000f72b <kernel_main+0xc9>
c000f6bf:	31 db                	xor    ebx,ebx
c000f6c1:	bf 0a 00 00 00       	mov    edi,0xa
c000f6c6:	be 05 00 00 00       	mov    esi,0x5
c000f6cb:	31 c9                	xor    ecx,ecx
c000f6cd:	eb 2a                	jmp    c000f6f9 <kernel_main+0x97>
c000f6cf:	3c 0d                	cmp    al,0xd
c000f6d1:	74 1a                	je     c000f6ed <kernel_main+0x8b>
c000f6d3:	3c 0a                	cmp    al,0xa
c000f6d5:	74 40                	je     c000f717 <kernel_main+0xb5>
c000f6d7:	8d 14 b6             	lea    edx,[esi+esi*4]
c000f6da:	80 cc 0e             	or     ah,0xe
c000f6dd:	c1 e2 04             	shl    edx,0x4
c000f6e0:	01 ca                	add    edx,ecx
c000f6e2:	41                   	inc    ecx
c000f6e3:	01 fa                	add    edx,edi
c000f6e5:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f6ed:	43                   	inc    ebx
c000f6ee:	0f b6 83 e0 c4 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd3b20]
c000f6f5:	84 c0                	test   al,al
c000f6f7:	74 32                	je     c000f72b <kernel_main+0xc9>
c000f6f9:	80 b9 16 c5 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd3aea],0xdb
c000f700:	75 cd                	jne    c000f6cf <kernel_main+0x6d>
c000f702:	0f b6 91 15 c5 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd3aeb]
c000f709:	83 e2 fe             	and    edx,0xfffffffe
c000f70c:	81 fa ba 00 00 00    	cmp    edx,0xba
c000f712:	75 bb                	jne    c000f6cf <kernel_main+0x6d>
c000f714:	47                   	inc    edi
c000f715:	eb b8                	jmp    c000f6cf <kernel_main+0x6d>
c000f717:	43                   	inc    ebx
c000f718:	46                   	inc    esi
c000f719:	31 c9                	xor    ecx,ecx
c000f71b:	0f b6 83 e0 c4 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd3b20]
c000f722:	bf 0a 00 00 00       	mov    edi,0xa
c000f727:	84 c0                	test   al,al
c000f729:	75 ce                	jne    c000f6f9 <kernel_main+0x97>
c000f72b:	83 ec 0c             	sub    esp,0xc
c000f72e:	68 b4 9e 02 c0       	push   0xc0029eb4
c000f733:	e8 be fe ff ff       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000f738:	a1 00 05 00 00       	mov    eax,ds:0x500
c000f73d:	a3 20 d7 02 c0       	mov    ds:0xc002d720,eax
c000f742:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f747:	05 ff 0f 00 00       	add    eax,0xfff
c000f74c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f751:	89 04 24             	mov    DWORD PTR [esp],eax
c000f754:	e8 52 03 00 00       	call   c000faab <Phys::physicalMemorySetup(unsigned int)>
c000f759:	e8 30 1c 00 00       	call   c001138e <Virt::virtualMemorySetup()>
c000f75e:	58                   	pop    eax
c000f75f:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000f763:	53                   	push   ebx
c000f764:	e8 f7 1d 00 00       	call   c0011560 <VAS::VAS()>
c000f769:	89 1d 70 d8 02 c0    	mov    DWORD PTR ds:0xc002d870,ebx
c000f76f:	e8 ac 08 ff ff       	call   c0000020 <callGlobalConstructors>
c000f774:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f77b:	e8 1c fe ff ff       	call   c000f59c <malloc>
c000f780:	89 04 24             	mov    DWORD PTR [esp],eax
c000f783:	89 c6                	mov    esi,eax
c000f785:	e8 4c f0 ff ff       	call   c000e7d6 <Computer::Computer()>
c000f78a:	6a 00                	push   0x0
c000f78c:	89 35 08 d7 02 c0    	mov    DWORD PTR ds:0xc002d708,esi
c000f792:	6a 00                	push   0x0
c000f794:	6a 00                	push   0x0
c000f796:	56                   	push   esi
c000f797:	e8 46 f4 ff ff       	call   c000ebe2 <Computer::open(int, int, void*)>
c000f79c:	83 c4 14             	add    esp,0x14
c000f79f:	53                   	push   ebx
c000f7a0:	e8 6b 20 00 00       	call   c0011810 <VAS::~VAS()>
c000f7a5:	83 c4 30             	add    esp,0x30
c000f7a8:	5b                   	pop    ebx
c000f7a9:	5e                   	pop    esi
c000f7aa:	5f                   	pop    edi
c000f7ab:	c3                   	ret    

c000f7ac <Phys::allocateDMA(unsigned long)>:
c000f7ac:	55                   	push   ebp
c000f7ad:	31 d2                	xor    edx,edx
c000f7af:	57                   	push   edi
c000f7b0:	31 ed                	xor    ebp,ebp
c000f7b2:	56                   	push   esi
c000f7b3:	31 c9                	xor    ecx,ecx
c000f7b5:	53                   	push   ebx
c000f7b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f7ba:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f7c0:	31 c0                	xor    eax,eax
c000f7c2:	c1 ee 0c             	shr    esi,0xc
c000f7c5:	eb 17                	jmp    c000f7de <Phys::allocateDMA(unsigned long)+0x32>
c000f7c7:	85 c9                	test   ecx,ecx
c000f7c9:	75 04                	jne    c000f7cf <Phys::allocateDMA(unsigned long)+0x23>
c000f7cb:	89 d5                	mov    ebp,edx
c000f7cd:	89 d0                	mov    eax,edx
c000f7cf:	8d 59 01             	lea    ebx,[ecx+0x1]
c000f7d2:	39 de                	cmp    esi,ebx
c000f7d4:	74 20                	je     c000f7f6 <Phys::allocateDMA(unsigned long)+0x4a>
c000f7d6:	42                   	inc    edx
c000f7d7:	89 d9                	mov    ecx,ebx
c000f7d9:	83 fa 2f             	cmp    edx,0x2f
c000f7dc:	7f 11                	jg     c000f7ef <Phys::allocateDMA(unsigned long)+0x43>
c000f7de:	80 ba 60 d7 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd28a0],0x0
c000f7e5:	74 e0                	je     c000f7c7 <Phys::allocateDMA(unsigned long)+0x1b>
c000f7e7:	31 c9                	xor    ecx,ecx
c000f7e9:	42                   	inc    edx
c000f7ea:	83 fa 2f             	cmp    edx,0x2f
c000f7ed:	7e ef                	jle    c000f7de <Phys::allocateDMA(unsigned long)+0x32>
c000f7ef:	5b                   	pop    ebx
c000f7f0:	31 c0                	xor    eax,eax
c000f7f2:	5e                   	pop    esi
c000f7f3:	5f                   	pop    edi
c000f7f4:	5d                   	pop    ebp
c000f7f5:	c3                   	ret    
c000f7f6:	8d 14 30             	lea    edx,[eax+esi*1]
c000f7f9:	89 d7                	mov    edi,edx
c000f7fb:	4f                   	dec    edi
c000f7fc:	79 03                	jns    c000f801 <Phys::allocateDMA(unsigned long)+0x55>
c000f7fe:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f801:	c1 ff 04             	sar    edi,0x4
c000f804:	89 c2                	mov    edx,eax
c000f806:	c1 fa 04             	sar    edx,0x4
c000f809:	39 fa                	cmp    edx,edi
c000f80b:	75 2f                	jne    c000f83c <Phys::allocateDMA(unsigned long)+0x90>
c000f80d:	85 db                	test   ebx,ebx
c000f80f:	74 1a                	je     c000f82b <Phys::allocateDMA(unsigned long)+0x7f>
c000f811:	be 60 d7 02 c0       	mov    esi,0xc002d760
c000f816:	8d 90 60 d7 02 c0    	lea    edx,[eax-0x3ffd28a0]
c000f81c:	f7 d6                	not    esi
c000f81e:	29 c6                	sub    esi,eax
c000f820:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f823:	42                   	inc    edx
c000f824:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000f827:	39 d9                	cmp    ecx,ebx
c000f829:	7f f5                	jg     c000f820 <Phys::allocateDMA(unsigned long)+0x74>
c000f82b:	85 ff                	test   edi,edi
c000f82d:	74 13                	je     c000f842 <Phys::allocateDMA(unsigned long)+0x96>
c000f82f:	5b                   	pop    ebx
c000f830:	05 50 20 0c 00       	add    eax,0xc2050
c000f835:	5e                   	pop    esi
c000f836:	c1 e0 0c             	shl    eax,0xc
c000f839:	5f                   	pop    edi
c000f83a:	5d                   	pop    ebp
c000f83b:	c3                   	ret    
c000f83c:	89 ea                	mov    edx,ebp
c000f83e:	31 c9                	xor    ecx,ecx
c000f840:	eb a7                	jmp    c000f7e9 <Phys::allocateDMA(unsigned long)+0x3d>
c000f842:	5b                   	pop    ebx
c000f843:	c1 e0 0c             	shl    eax,0xc
c000f846:	5e                   	pop    esi
c000f847:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000f84c:	5f                   	pop    edi
c000f84d:	5d                   	pop    ebp
c000f84e:	c3                   	ret    

c000f84f <Phys::freeDMA(unsigned long, unsigned long)>:
c000f84f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f853:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f857:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000f85d:	c1 e9 0c             	shr    ecx,0xc
c000f860:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000f865:	76 25                	jbe    c000f88c <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000f867:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000f86c:	c1 e8 0c             	shr    eax,0xc
c000f86f:	8d 50 10             	lea    edx,[eax+0x10]
c000f872:	85 c9                	test   ecx,ecx
c000f874:	74 15                	je     c000f88b <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000f876:	8d 82 60 d7 02 c0    	lea    eax,[edx-0x3ffd28a0]
c000f87c:	8d 94 11 60 d7 02 c0 	lea    edx,[ecx+edx*1-0x3ffd28a0]
c000f883:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f886:	40                   	inc    eax
c000f887:	39 d0                	cmp    eax,edx
c000f889:	75 f8                	jne    c000f883 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000f88b:	c3                   	ret    
c000f88c:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f892:	c1 ea 0c             	shr    edx,0xc
c000f895:	eb db                	jmp    c000f872 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000f897 <Phys::setPageState(unsigned long, bool)>:
c000f897:	56                   	push   esi
c000f898:	ba 01 00 00 00       	mov    edx,0x1
c000f89d:	53                   	push   ebx
c000f89e:	8b 35 24 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c624
c000f8a4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f8a8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f8ac:	89 c8                	mov    eax,ecx
c000f8ae:	83 e1 07             	and    ecx,0x7
c000f8b1:	c1 e8 03             	shr    eax,0x3
c000f8b4:	d3 e3                	shl    ebx,cl
c000f8b6:	01 c6                	add    esi,eax
c000f8b8:	d3 e2                	shl    edx,cl
c000f8ba:	f7 d2                	not    edx
c000f8bc:	20 16                	and    BYTE PTR [esi],dl
c000f8be:	03 05 24 c6 02 c0    	add    eax,DWORD PTR ds:0xc002c624
c000f8c4:	08 18                	or     BYTE PTR [eax],bl
c000f8c6:	5b                   	pop    ebx
c000f8c7:	5e                   	pop    esi
c000f8c8:	c3                   	ret    

c000f8c9 <Phys::getPageState(unsigned long)>:
c000f8c9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f8cd:	8b 15 24 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c624
c000f8d3:	89 c8                	mov    eax,ecx
c000f8d5:	83 e1 07             	and    ecx,0x7
c000f8d8:	c1 e8 03             	shr    eax,0x3
c000f8db:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f8df:	d3 f8                	sar    eax,cl
c000f8e1:	83 e0 01             	and    eax,0x1
c000f8e4:	c3                   	ret    

c000f8e5 <Phys::freePage(unsigned long)>:
c000f8e5:	53                   	push   ebx
c000f8e6:	83 ec 08             	sub    esp,0x8
c000f8e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8ed:	3d ff ff 07 00       	cmp    eax,0x7ffff
c000f8f2:	76 3a                	jbe    c000f92e <Phys::freePage(unsigned long)+0x49>
c000f8f4:	c1 e8 0c             	shr    eax,0xc
c000f8f7:	50                   	push   eax
c000f8f8:	89 c3                	mov    ebx,eax
c000f8fa:	e8 ca ff ff ff       	call   c000f8c9 <Phys::getPageState(unsigned long)>
c000f8ff:	5a                   	pop    edx
c000f900:	84 c0                	test   al,al
c000f902:	74 19                	je     c000f91d <Phys::freePage(unsigned long)+0x38>
c000f904:	83 ec 08             	sub    esp,0x8
c000f907:	ff 0d 50 d7 02 c0    	dec    DWORD PTR ds:0xc002d750
c000f90d:	6a 00                	push   0x0
c000f90f:	53                   	push   ebx
c000f910:	e8 82 ff ff ff       	call   c000f897 <Phys::setPageState(unsigned long, bool)>
c000f915:	83 c4 10             	add    esp,0x10
c000f918:	83 c4 08             	add    esp,0x8
c000f91b:	5b                   	pop    ebx
c000f91c:	c3                   	ret    
c000f91d:	c7 44 24 10 d3 9e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029ed3
c000f925:	83 c4 08             	add    esp,0x8
c000f928:	5b                   	pop    ebx
c000f929:	e9 07 a4 00 00       	jmp    c0019d35 <Krnl::panic(char const*)>
c000f92e:	68 00 10 00 00       	push   0x1000
c000f933:	50                   	push   eax
c000f934:	e8 16 ff ff ff       	call   c000f84f <Phys::freeDMA(unsigned long, unsigned long)>
c000f939:	59                   	pop    ecx
c000f93a:	5b                   	pop    ebx
c000f93b:	83 c4 08             	add    esp,0x8
c000f93e:	5b                   	pop    ebx
c000f93f:	c3                   	ret    

c000f940 <Phys::allocatePage()>:
c000f940:	56                   	push   esi
c000f941:	53                   	push   ebx
c000f942:	51                   	push   ecx
c000f943:	8b 35 44 d7 02 c0    	mov    esi,DWORD PTR ds:0xc002d744
c000f949:	89 f3                	mov    ebx,esi
c000f94b:	eb 0a                	jmp    c000f957 <Phys::allocatePage()+0x17>
c000f94d:	89 1d 44 d7 02 c0    	mov    DWORD PTR ds:0xc002d744,ebx
c000f953:	39 de                	cmp    esi,ebx
c000f955:	74 24                	je     c000f97b <Phys::allocatePage()+0x3b>
c000f957:	53                   	push   ebx
c000f958:	e8 6c ff ff ff       	call   c000f8c9 <Phys::getPageState(unsigned long)>
c000f95d:	5a                   	pop    edx
c000f95e:	84 c0                	test   al,al
c000f960:	74 76                	je     c000f9d8 <Phys::allocatePage()+0x98>
c000f962:	43                   	inc    ebx
c000f963:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f969:	75 e2                	jne    c000f94d <Phys::allocatePage()+0xd>
c000f96b:	31 db                	xor    ebx,ebx
c000f96d:	c7 05 44 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d744,0x0
c000f977:	39 de                	cmp    esi,ebx
c000f979:	75 dc                	jne    c000f957 <Phys::allocatePage()+0x17>
c000f97b:	83 ec 0c             	sub    esp,0xc
c000f97e:	68 07 9f 02 c0       	push   0xc0029f07
c000f983:	e8 41 2c 00 00       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c000f988:	59                   	pop    ecx
c000f989:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f98e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f991:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000f997:	e8 50 29 00 00       	call   c00122ec <VAS::scanForEviction()>
c000f99c:	83 c4 10             	add    esp,0x10
c000f99f:	85 c0                	test   eax,eax
c000f9a1:	75 70                	jne    c000fa13 <Phys::allocatePage()+0xd3>
c000f9a3:	83 ec 0c             	sub    esp,0xc
c000f9a6:	68 00 10 00 00       	push   0x1000
c000f9ab:	e8 fc fd ff ff       	call   c000f7ac <Phys::allocateDMA(unsigned long)>
c000f9b0:	83 c4 10             	add    esp,0x10
c000f9b3:	85 c0                	test   eax,eax
c000f9b5:	75 5c                	jne    c000fa13 <Phys::allocatePage()+0xd3>
c000f9b7:	83 ec 0c             	sub    esp,0xc
c000f9ba:	68 1f 9f 02 c0       	push   0xc0029f1f
c000f9bf:	e8 71 a3 00 00       	call   c0019d35 <Krnl::panic(char const*)>
c000f9c4:	83 c4 10             	add    esp,0x10
c000f9c7:	8b 1d 44 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d744
c000f9cd:	53                   	push   ebx
c000f9ce:	e8 f6 fe ff ff       	call   c000f8c9 <Phys::getPageState(unsigned long)>
c000f9d3:	5a                   	pop    edx
c000f9d4:	84 c0                	test   al,al
c000f9d6:	75 8a                	jne    c000f962 <Phys::allocatePage()+0x22>
c000f9d8:	6a 01                	push   0x1
c000f9da:	53                   	push   ebx
c000f9db:	e8 b7 fe ff ff       	call   c000f897 <Phys::setPageState(unsigned long, bool)>
c000f9e0:	5b                   	pop    ebx
c000f9e1:	a1 50 d7 02 c0       	mov    eax,ds:0xc002d750
c000f9e6:	5e                   	pop    esi
c000f9e7:	40                   	inc    eax
c000f9e8:	8b 15 44 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d744
c000f9ee:	a3 50 d7 02 c0       	mov    ds:0xc002d750,eax
c000f9f3:	c1 e2 0c             	shl    edx,0xc
c000f9f6:	52                   	push   edx
c000f9f7:	ff 35 54 d7 02 c0    	push   DWORD PTR ds:0xc002d754
c000f9fd:	50                   	push   eax
c000f9fe:	68 e9 9e 02 c0       	push   0xc0029ee9
c000fa03:	e8 c1 2b 00 00       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c000fa08:	a1 44 d7 02 c0       	mov    eax,ds:0xc002d744
c000fa0d:	83 c4 10             	add    esp,0x10
c000fa10:	c1 e0 0c             	shl    eax,0xc
c000fa13:	5a                   	pop    edx
c000fa14:	5b                   	pop    ebx
c000fa15:	5e                   	pop    esi
c000fa16:	c3                   	ret    

c000fa17 <Phys::allocateContiguousPages(int)>:
c000fa17:	57                   	push   edi
c000fa18:	56                   	push   esi
c000fa19:	53                   	push   ebx
c000fa1a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fa1e:	fa                   	cli    
c000fa1f:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c000fa25:	31 db                	xor    ebx,ebx
c000fa27:	85 db                	test   ebx,ebx
c000fa29:	75 11                	jne    c000fa3c <Phys::allocateContiguousPages(int)+0x25>
c000fa2b:	e8 10 ff ff ff       	call   c000f940 <Phys::allocatePage()>
c000fa30:	83 fe 01             	cmp    esi,0x1
c000fa33:	89 c7                	mov    edi,eax
c000fa35:	74 21                	je     c000fa58 <Phys::allocateContiguousPages(int)+0x41>
c000fa37:	bb 01 00 00 00       	mov    ebx,0x1
c000fa3c:	e8 ff fe ff ff       	call   c000f940 <Phys::allocatePage()>
c000fa41:	89 da                	mov    edx,ebx
c000fa43:	c1 e2 0c             	shl    edx,0xc
c000fa46:	01 fa                	add    edx,edi
c000fa48:	39 c2                	cmp    edx,eax
c000fa4a:	74 20                	je     c000fa6c <Phys::allocateContiguousPages(int)+0x55>
c000fa4c:	bb 01 00 00 00       	mov    ebx,0x1
c000fa51:	89 c7                	mov    edi,eax
c000fa53:	83 fe 01             	cmp    esi,0x1
c000fa56:	75 e4                	jne    c000fa3c <Phys::allocateContiguousPages(int)+0x25>
c000fa58:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c000fa5d:	48                   	dec    eax
c000fa5e:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c000fa63:	75 01                	jne    c000fa66 <Phys::allocateContiguousPages(int)+0x4f>
c000fa65:	fb                   	sti    
c000fa66:	89 f8                	mov    eax,edi
c000fa68:	5b                   	pop    ebx
c000fa69:	5e                   	pop    esi
c000fa6a:	5f                   	pop    edi
c000fa6b:	c3                   	ret    
c000fa6c:	43                   	inc    ebx
c000fa6d:	39 f3                	cmp    ebx,esi
c000fa6f:	75 b6                	jne    c000fa27 <Phys::allocateContiguousPages(int)+0x10>
c000fa71:	eb e5                	jmp    c000fa58 <Phys::allocateContiguousPages(int)+0x41>

c000fa73 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fa73:	56                   	push   esi
c000fa74:	53                   	push   ebx
c000fa75:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fa79:	39 1d 48 d7 02 c0    	cmp    DWORD PTR ds:0xc002d748,ebx
c000fa7f:	73 06                	jae    c000fa87 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fa81:	89 1d 48 d7 02 c0    	mov    DWORD PTR ds:0xc002d748,ebx
c000fa87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa8b:	c1 eb 0c             	shr    ebx,0xc
c000fa8e:	c1 e8 0c             	shr    eax,0xc
c000fa91:	39 d8                	cmp    eax,ebx
c000fa93:	73 13                	jae    c000faa8 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fa95:	6a 00                	push   0x0
c000fa97:	8d 70 01             	lea    esi,[eax+0x1]
c000fa9a:	50                   	push   eax
c000fa9b:	e8 f7 fd ff ff       	call   c000f897 <Phys::setPageState(unsigned long, bool)>
c000faa0:	5a                   	pop    edx
c000faa1:	89 f0                	mov    eax,esi
c000faa3:	59                   	pop    ecx
c000faa4:	39 f3                	cmp    ebx,esi
c000faa6:	75 ed                	jne    c000fa95 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000faa8:	5b                   	pop    ebx
c000faa9:	5e                   	pop    esi
c000faaa:	c3                   	ret    

c000faab <Phys::physicalMemorySetup(unsigned int)>:
c000faab:	55                   	push   ebp
c000faac:	57                   	push   edi
c000faad:	56                   	push   esi
c000faae:	53                   	push   ebx
c000faaf:	31 db                	xor    ebx,ebx
c000fab1:	83 ec 40             	sub    esp,0x40
c000fab4:	6a 30                	push   0x30
c000fab6:	6a 00                	push   0x0
c000fab8:	68 60 d7 02 c0       	push   0xc002d760
c000fabd:	e8 8e 0c ff ff       	call   c0000750 <memset>
c000fac2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fac6:	25 00 f0 ff ff       	and    eax,0xfffff000
c000facb:	05 00 10 00 00       	add    eax,0x1000
c000fad0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fad4:	5a                   	pop    edx
c000fad5:	59                   	pop    ecx
c000fad6:	50                   	push   eax
c000fad7:	68 2d 9f 02 c0       	push   0xc0029f2d
c000fadc:	e8 e8 2a 00 00       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c000fae1:	83 c4 10             	add    esp,0x10
c000fae4:	83 ec 08             	sub    esp,0x8
c000fae7:	6a 01                	push   0x1
c000fae9:	53                   	push   ebx
c000faea:	43                   	inc    ebx
c000faeb:	e8 a7 fd ff ff       	call   c000f897 <Phys::setPageState(unsigned long, bool)>
c000faf0:	83 c4 10             	add    esp,0x10
c000faf3:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000faf9:	75 e9                	jne    c000fae4 <Phys::physicalMemorySetup(unsigned int)+0x39>
c000fafb:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fb02:	66 85 c0             	test   ax,ax
c000fb05:	0f 84 b5 01 00 00    	je     c000fcc0 <Phys::physicalMemorySetup(unsigned int)+0x215>
c000fb0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fb0f:	8b 15 04 06 00 c2    	mov    edx,DWORD PTR ds:0xc2000604
c000fb15:	a1 00 06 00 c2       	mov    eax,ds:0xc2000600
c000fb1a:	8b 0d 08 06 00 c2    	mov    ecx,DWORD PTR ds:0xc2000608
c000fb20:	8b 1d 0c 06 00 c2    	mov    ebx,DWORD PTR ds:0xc200060c
c000fb26:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000fb2a:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c000fb2e:	01 c1                	add    ecx,eax
c000fb30:	11 d3                	adc    ebx,edx
c000fb32:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000fb36:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000fb3a:	31 ff                	xor    edi,edi
c000fb3c:	89 d3                	mov    ebx,edx
c000fb3e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000fb42:	8b 35 10 06 00 c2    	mov    esi,DWORD PTR ds:0xc2000610
c000fb48:	09 cb                	or     ebx,ecx
c000fb4a:	0f 85 80 01 00 00    	jne    c000fcd0 <Phys::physicalMemorySetup(unsigned int)+0x225>
c000fb50:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000fb54:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fb5c:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fb61:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000fb65:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fb6d:	eb 49                	jmp    c000fbb8 <Phys::physicalMemorySetup(unsigned int)+0x10d>
c000fb6f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000fb73:	83 c3 18             	add    ebx,0x18
c000fb76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb7a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fb7e:	39 d0                	cmp    eax,edx
c000fb80:	0f 84 4a 01 00 00    	je     c000fcd0 <Phys::physicalMemorySetup(unsigned int)+0x225>
c000fb86:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000fb89:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c000fb8c:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000fb8f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fb91:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000fb95:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000fb99:	01 c6                	add    esi,eax
c000fb9b:	89 d5                	mov    ebp,edx
c000fb9d:	11 d7                	adc    edi,edx
c000fb9f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000fba3:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c000fba7:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000fbaa:	31 ff                	xor    edi,edi
c000fbac:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000fbb0:	09 cd                	or     ebp,ecx
c000fbb2:	0f 85 18 01 00 00    	jne    c000fcd0 <Phys::physicalMemorySetup(unsigned int)+0x225>
c000fbb8:	89 f1                	mov    ecx,esi
c000fbba:	83 f1 01             	xor    ecx,0x1
c000fbbd:	09 f9                	or     ecx,edi
c000fbbf:	75 ae                	jne    c000fb6f <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fbc1:	be 00 00 08 00       	mov    esi,0x80000
c000fbc6:	89 cf                	mov    edi,ecx
c000fbc8:	39 c6                	cmp    esi,eax
c000fbca:	19 d7                	sbb    edi,edx
c000fbcc:	0f 82 98 00 00 00    	jb     c000fc6a <Phys::physicalMemorySetup(unsigned int)+0x1bf>
c000fbd2:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000fbd6:	89 cd                	mov    ebp,ecx
c000fbd8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000fbdc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fbe0:	19 fd                	sbb    ebp,edi
c000fbe2:	0f 83 82 00 00 00    	jae    c000fc6a <Phys::physicalMemorySetup(unsigned int)+0x1bf>
c000fbe8:	b8 00 00 0a 00       	mov    eax,0xa0000
c000fbed:	39 f0                	cmp    eax,esi
c000fbef:	19 f9                	sbb    ecx,edi
c000fbf1:	0f 82 03 01 00 00    	jb     c000fcfa <Phys::physicalMemorySetup(unsigned int)+0x24f>
c000fbf7:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fbfc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fc00:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000fc04:	81 c6 00 00 f8 ff    	add    esi,0xfff80000
c000fc0a:	83 d7 ff             	adc    edi,0xffffffff
c000fc0d:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000fc11:	31 c0                	xor    eax,eax
c000fc13:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000fc17:	39 f2                	cmp    edx,esi
c000fc19:	89 c2                	mov    edx,eax
c000fc1b:	19 fa                	sbb    edx,edi
c000fc1d:	0f 83 4c ff ff ff    	jae    c000fb6f <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fc23:	b8 00 00 08 00       	mov    eax,0x80000
c000fc28:	83 ec 08             	sub    esp,0x8
c000fc2b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fc2f:	50                   	push   eax
c000fc30:	e8 3e fe ff ff       	call   c000fa73 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fc35:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fc39:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fc3d:	83 c4 0c             	add    esp,0xc
c000fc40:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fc44:	03 05 54 d7 02 c0    	add    eax,DWORD PTR ds:0xc002d754
c000fc4a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fc51:	a3 54 d7 02 c0       	mov    ds:0xc002d754,eax
c000fc56:	52                   	push   edx
c000fc57:	50                   	push   eax
c000fc58:	68 53 9f 02 c0       	push   0xc0029f53
c000fc5d:	e8 67 29 00 00       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c000fc62:	83 c4 10             	add    esp,0x10
c000fc65:	e9 05 ff ff ff       	jmp    c000fb6f <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fc6a:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fc6e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fc72:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000fc76:	39 ee                	cmp    esi,ebp
c000fc78:	1b 7c 24 2c          	sbb    edi,DWORD PTR [esp+0x2c]
c000fc7c:	0f 82 ed fe ff ff    	jb     c000fb6f <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fc82:	be ff 1f 00 00       	mov    esi,0x1fff
c000fc87:	3b 74 24 18          	cmp    esi,DWORD PTR [esp+0x18]
c000fc8b:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000fc8f:	0f 83 da fe ff ff    	jae    c000fb6f <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fc95:	39 e8                	cmp    eax,ebp
c000fc97:	89 d1                	mov    ecx,edx
c000fc99:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fc9d:	73 89                	jae    c000fc28 <Phys::physicalMemorySetup(unsigned int)+0x17d>
c000fc9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fca3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000fca7:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fcab:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fcaf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fcb3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fcb7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fcbb:	e9 68 ff ff ff       	jmp    c000fc28 <Phys::physicalMemorySetup(unsigned int)+0x17d>
c000fcc0:	83 ec 0c             	sub    esp,0xc
c000fcc3:	68 45 9f 02 c0       	push   0xc0029f45
c000fcc8:	e8 68 a0 00 00       	call   c0019d35 <Krnl::panic(char const*)>
c000fccd:	83 c4 10             	add    esp,0x10
c000fcd0:	bb 40 01 00 00       	mov    ebx,0x140
c000fcd5:	83 ec 08             	sub    esp,0x8
c000fcd8:	6a 00                	push   0x0
c000fcda:	53                   	push   ebx
c000fcdb:	43                   	inc    ebx
c000fcdc:	e8 b6 fb ff ff       	call   c000f897 <Phys::setPageState(unsigned long, bool)>
c000fce1:	ff 05 54 d7 02 c0    	inc    DWORD PTR ds:0xc002d754
c000fce7:	83 c4 10             	add    esp,0x10
c000fcea:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fcf0:	75 e3                	jne    c000fcd5 <Phys::physicalMemorySetup(unsigned int)+0x22a>
c000fcf2:	83 c4 3c             	add    esp,0x3c
c000fcf5:	5b                   	pop    ebx
c000fcf6:	5e                   	pop    esi
c000fcf7:	5f                   	pop    edi
c000fcf8:	5d                   	pop    ebp
c000fcf9:	c3                   	ret    
c000fcfa:	c7 44 24 10 00 00 0a 00 	mov    DWORD PTR [esp+0x10],0xa0000
c000fd02:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fd0a:	e9 e8 fe ff ff       	jmp    c000fbf7 <Phys::physicalMemorySetup(unsigned int)+0x14c>
c000fd0f:	90                   	nop

c000fd10 <Pipe::isAtty()>:
c000fd10:	31 c0                	xor    eax,eax
c000fd12:	c3                   	ret    
c000fd13:	90                   	nop

c000fd14 <Pipe::~Pipe()>:
c000fd14:	83 ec 0c             	sub    esp,0xc
c000fd17:	ba b0 9f 02 c0       	mov    edx,0xc0029fb0
c000fd1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd20:	89 10                	mov    DWORD PTR [eax],edx
c000fd22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd26:	83 ec 0c             	sub    esp,0xc
c000fd29:	50                   	push   eax
c000fd2a:	e8 3f 12 00 00       	call   c0010f6e <UnixFile::~UnixFile()>
c000fd2f:	83 c4 10             	add    esp,0x10
c000fd32:	90                   	nop
c000fd33:	83 c4 0c             	add    esp,0xc
c000fd36:	c3                   	ret    
c000fd37:	90                   	nop

c000fd38 <Pipe::~Pipe()>:
c000fd38:	83 ec 0c             	sub    esp,0xc
c000fd3b:	83 ec 0c             	sub    esp,0xc
c000fd3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd42:	e8 cd ff ff ff       	call   c000fd14 <Pipe::~Pipe()>
c000fd47:	83 c4 10             	add    esp,0x10
c000fd4a:	83 ec 08             	sub    esp,0x8
c000fd4d:	6a 20                	push   0x20
c000fd4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd53:	e8 99 27 00 00       	call   c00124f1 <operator delete(void*, unsigned long)>
c000fd58:	83 c4 10             	add    esp,0x10
c000fd5b:	83 c4 0c             	add    esp,0xc
c000fd5e:	c3                   	ret    
c000fd5f:	90                   	nop

c000fd60 <Pipe::read(unsigned long long, void*, int*)>:
c000fd60:	55                   	push   ebp
c000fd61:	57                   	push   edi
c000fd62:	56                   	push   esi
c000fd63:	53                   	push   ebx
c000fd64:	83 ec 1c             	sub    esp,0x1c
c000fd67:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fd6b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fd6f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fd73:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fd76:	89 c8                	mov    eax,ecx
c000fd78:	99                   	cdq    
c000fd79:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fd7d:	74 24                	je     c000fda3 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fd7f:	39 f9                	cmp    ecx,edi
c000fd81:	89 d1                	mov    ecx,edx
c000fd83:	19 f1                	sbb    ecx,esi
c000fd85:	73 1c                	jae    c000fda3 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fd87:	fa                   	cli    
c000fd88:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c000fd8e:	e8 2e db 00 00       	call   c001d8c1 <schedule()>
c000fd93:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c000fd98:	48                   	dec    eax
c000fd99:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c000fd9e:	75 d3                	jne    c000fd73 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fda0:	fb                   	sti    
c000fda1:	eb d0                	jmp    c000fd73 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fda3:	39 f8                	cmp    eax,edi
c000fda5:	89 d1                	mov    ecx,edx
c000fda7:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fdaa:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000fdae:	19 f1                	sbb    ecx,esi
c000fdb0:	73 07                	jae    c000fdb9 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000fdb2:	89 04 24             	mov    DWORD PTR [esp],eax
c000fdb5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fdb9:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000fdbc:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000fdbf:	29 f7                	sub    edi,esi
c000fdc1:	89 f8                	mov    eax,edi
c000fdc3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000fdc7:	99                   	cdq    
c000fdc8:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000fdcb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdcf:	19 d0                	sbb    eax,edx
c000fdd1:	73 07                	jae    c000fdda <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000fdd3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000fdd6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fdda:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000fddd:	89 ea                	mov    edx,ebp
c000fddf:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000fde3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000fde8:	74 0d                	je     c000fdf7 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000fdea:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000fded:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000fdf1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fdf5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fdf7:	85 d2                	test   edx,edx
c000fdf9:	74 11                	je     c000fe0c <Pipe::read(unsigned long long, void*, int*)+0xac>
c000fdfb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fdff:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000fe02:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000fe06:	89 d1                	mov    ecx,edx
c000fe08:	89 c7                	mov    edi,eax
c000fe0a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe0c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fe0f:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000fe12:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fe15:	99                   	cdq    
c000fe16:	89 f7                	mov    edi,esi
c000fe18:	03 04 24             	add    eax,DWORD PTR [esp]
c000fe1b:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000fe1f:	c1 ff 1f             	sar    edi,0x1f
c000fe22:	57                   	push   edi
c000fe23:	56                   	push   esi
c000fe24:	52                   	push   edx
c000fe25:	50                   	push   eax
c000fe26:	e8 d9 68 01 00       	call   c0026704 <__umoddi3>
c000fe2b:	83 c4 10             	add    esp,0x10
c000fe2e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000fe31:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fe36:	75 10                	jne    c000fe48 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000fe38:	83 ec 0c             	sub    esp,0xc
c000fe3b:	68 6f 9f 02 c0       	push   0xc0029f6f
c000fe40:	e8 f0 9e 00 00       	call   c0019d35 <Krnl::panic(char const*)>
c000fe45:	83 c4 10             	add    esp,0x10
c000fe48:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fe4c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000fe4f:	89 10                	mov    DWORD PTR [eax],edx
c000fe51:	83 c4 1c             	add    esp,0x1c
c000fe54:	31 c0                	xor    eax,eax
c000fe56:	5b                   	pop    ebx
c000fe57:	5e                   	pop    esi
c000fe58:	5f                   	pop    edi
c000fe59:	5d                   	pop    ebp
c000fe5a:	c3                   	ret    
c000fe5b:	90                   	nop

c000fe5c <Pipe::write(unsigned long long, void*, int*)>:
c000fe5c:	55                   	push   ebp
c000fe5d:	57                   	push   edi
c000fe5e:	56                   	push   esi
c000fe5f:	53                   	push   ebx
c000fe60:	83 ec 1c             	sub    esp,0x1c
c000fe63:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000fe67:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fe6b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000fe6e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fe72:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe75:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fe79:	89 d8                	mov    eax,ebx
c000fe7b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000fe7e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fe82:	89 d6                	mov    esi,edx
c000fe84:	89 d7                	mov    edi,edx
c000fe86:	c1 ff 1f             	sar    edi,0x1f
c000fe89:	03 34 24             	add    esi,DWORD PTR [esp]
c000fe8c:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000fe90:	c1 f8 1f             	sar    eax,0x1f
c000fe93:	39 f3                	cmp    ebx,esi
c000fe95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fe99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe9d:	19 f8                	sbb    eax,edi
c000fe9f:	b8 01 00 00 00       	mov    eax,0x1
c000fea4:	72 6e                	jb     c000ff14 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000fea6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000fea9:	01 d0                	add    eax,edx
c000feab:	99                   	cdq    
c000feac:	f7 fb                	idiv   ebx
c000feae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000feb2:	29 d3                	sub    ebx,edx
c000feb4:	89 d7                	mov    edi,edx
c000feb6:	89 de                	mov    esi,ebx
c000feb8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000febb:	c1 fb 1f             	sar    ebx,0x1f
c000febe:	39 f2                	cmp    edx,esi
c000fec0:	19 d8                	sbb    eax,ebx
c000fec2:	b8 00 00 00 00       	mov    eax,0x0
c000fec7:	72 04                	jb     c000fecd <Pipe::write(unsigned long long, void*, int*)+0x71>
c000fec9:	89 d0                	mov    eax,edx
c000fecb:	29 f0                	sub    eax,esi
c000fecd:	89 d3                	mov    ebx,edx
c000fecf:	29 c3                	sub    ebx,eax
c000fed1:	74 0b                	je     c000fede <Pipe::write(unsigned long long, void*, int*)+0x82>
c000fed3:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000fed6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000feda:	89 d9                	mov    ecx,ebx
c000fedc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fede:	85 c0                	test   eax,eax
c000fee0:	74 0d                	je     c000feef <Pipe::write(unsigned long long, void*, int*)+0x93>
c000fee2:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000fee6:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000fee9:	89 de                	mov    esi,ebx
c000feeb:	89 c1                	mov    ecx,eax
c000feed:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000feef:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000fef2:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fef7:	75 10                	jne    c000ff09 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000fef9:	83 ec 0c             	sub    esp,0xc
c000fefc:	68 8b 9f 02 c0       	push   0xc0029f8b
c000ff01:	e8 2f 9e 00 00       	call   c0019d35 <Krnl::panic(char const*)>
c000ff06:	83 c4 10             	add    esp,0x10
c000ff09:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ff0d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000ff10:	89 08                	mov    DWORD PTR [eax],ecx
c000ff12:	31 c0                	xor    eax,eax
c000ff14:	83 c4 1c             	add    esp,0x1c
c000ff17:	5b                   	pop    ebx
c000ff18:	5e                   	pop    esi
c000ff19:	5f                   	pop    edi
c000ff1a:	5d                   	pop    ebp
c000ff1b:	c3                   	ret    

c000ff1c <Pipe::Pipe(int)>:
c000ff1c:	83 ec 0c             	sub    esp,0xc
c000ff1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff23:	83 ec 08             	sub    esp,0x8
c000ff26:	6a 00                	push   0x0
c000ff28:	50                   	push   eax
c000ff29:	e8 5e 0e 00 00       	call   c0010d8c <UnixFile::UnixFile(int)>
c000ff2e:	83 c4 10             	add    esp,0x10
c000ff31:	ba b0 9f 02 c0       	mov    edx,0xc0029fb0
c000ff36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff3a:	89 10                	mov    DWORD PTR [eax],edx
c000ff3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff40:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ff44:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ff47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff4b:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000ff52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff56:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000ff5d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff61:	83 ec 0c             	sub    esp,0xc
c000ff64:	50                   	push   eax
c000ff65:	e8 32 f6 ff ff       	call   c000f59c <malloc>
c000ff6a:	83 c4 10             	add    esp,0x10
c000ff6d:	89 c2                	mov    edx,eax
c000ff6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff73:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ff76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff7a:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000ff7e:	90                   	nop
c000ff7f:	83 c4 0c             	add    esp,0xc
c000ff82:	c3                   	ret    
c000ff83:	90                   	nop

c000ff84 <VgaText::isAtty()>:
c000ff84:	b0 01                	mov    al,0x1
c000ff86:	c3                   	ret    
c000ff87:	90                   	nop

c000ff88 <VgaText::~VgaText()>:
c000ff88:	83 ec 0c             	sub    esp,0xc
c000ff8b:	ba 38 a0 02 c0       	mov    edx,0xc002a038
c000ff90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff94:	89 10                	mov    DWORD PTR [eax],edx
c000ff96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff9a:	83 ec 0c             	sub    esp,0xc
c000ff9d:	50                   	push   eax
c000ff9e:	e8 cb 0f 00 00       	call   c0010f6e <UnixFile::~UnixFile()>
c000ffa3:	83 c4 10             	add    esp,0x10
c000ffa6:	90                   	nop
c000ffa7:	83 c4 0c             	add    esp,0xc
c000ffaa:	c3                   	ret    
c000ffab:	90                   	nop

c000ffac <VgaText::~VgaText()>:
c000ffac:	83 ec 0c             	sub    esp,0xc
c000ffaf:	83 ec 0c             	sub    esp,0xc
c000ffb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffb6:	e8 cd ff ff ff       	call   c000ff88 <VgaText::~VgaText()>
c000ffbb:	83 c4 10             	add    esp,0x10
c000ffbe:	83 ec 08             	sub    esp,0x8
c000ffc1:	68 c4 02 00 00       	push   0x2c4
c000ffc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffca:	e8 22 25 00 00       	call   c00124f1 <operator delete(void*, unsigned long)>
c000ffcf:	83 c4 10             	add    esp,0x10
c000ffd2:	83 c4 0c             	add    esp,0xc
c000ffd5:	c3                   	ret    

c000ffd6 <VgaText::read(unsigned long long, void*, int*)>:
c000ffd6:	83 ec 10             	sub    esp,0x10
c000ffd9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ffdd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ffe1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffe5:	e8 a6 5a 00 00       	call   c0015a90 <readKeyboard(VgaText*, char*, unsigned long)>
c000ffea:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ffee:	89 02                	mov    DWORD PTR [edx],eax
c000fff0:	31 c0                	xor    eax,eax
c000fff2:	83 c4 1c             	add    esp,0x1c
c000fff5:	c3                   	ret    

c000fff6 <setTerminalScrollLock(bool)>:
c000fff6:	c3                   	ret    

c000fff7 <addToTerminalCycle(VgaText*)>:
c000fff7:	8b 15 c0 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d7c0
c000fffd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010001:	85 d2                	test   edx,edx
c0010003:	75 09                	jne    c001000e <addToTerminalCycle(VgaText*)+0x17>
c0010005:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c0010008:	a3 c0 d7 02 c0       	mov    ds:0xc002d7c0,eax
c001000d:	c3                   	ret    
c001000e:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c0010011:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0010014:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c0010017:	c3                   	ret    

c0010018 <installVgaTextImplementation()>:
c0010018:	83 ec 10             	sub    esp,0x10
c001001b:	6a 20                	push   0x20
c001001d:	6a 00                	push   0x0
c001001f:	68 a0 d7 02 c0       	push   0xc002d7a0
c0010024:	e8 27 07 ff ff       	call   c0000750 <memset>
c0010029:	83 c4 1c             	add    esp,0x1c
c001002c:	c3                   	ret    

c001002d <scrollTerminalScrollLock(int)>:
c001002d:	c3                   	ret    

c001002e <VgaText::updateTitle()>:
c001002e:	53                   	push   ebx
c001002f:	31 c0                	xor    eax,eax
c0010031:	83 ec 58             	sub    esp,0x58
c0010034:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010038:	89 e1                	mov    ecx,esp
c001003a:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c001003e:	40                   	inc    eax
c001003f:	83 f8 50             	cmp    eax,0x50
c0010042:	75 f6                	jne    c001003a <VgaText::updateTitle()+0xc>
c0010044:	31 c0                	xor    eax,eax
c0010046:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c001004d:	84 db                	test   bl,bl
c001004f:	74 06                	je     c0010057 <VgaText::updateTitle()+0x29>
c0010051:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010054:	40                   	inc    eax
c0010055:	eb ef                	jmp    c0010046 <VgaText::updateTitle()+0x18>
c0010057:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c001005a:	85 c0                	test   eax,eax
c001005c:	74 09                	je     c0010067 <VgaText::updateTitle()+0x39>
c001005e:	53                   	push   ebx
c001005f:	53                   	push   ebx
c0010060:	51                   	push   ecx
c0010061:	52                   	push   edx
c0010062:	ff d0                	call   eax
c0010064:	83 c4 10             	add    esp,0x10
c0010067:	83 c4 58             	add    esp,0x58
c001006a:	5b                   	pop    ebx
c001006b:	c3                   	ret    

c001006c <VgaText::load()>:
c001006c:	53                   	push   ebx
c001006d:	31 c0                	xor    eax,eax
c001006f:	83 ec 58             	sub    esp,0x58
c0010072:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010076:	89 e2                	mov    edx,esp
c0010078:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c001007c:	40                   	inc    eax
c001007d:	83 f8 50             	cmp    eax,0x50
c0010080:	75 f6                	jne    c0010078 <VgaText::load()+0xc>
c0010082:	31 c0                	xor    eax,eax
c0010084:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c001008b:	84 c9                	test   cl,cl
c001008d:	74 06                	je     c0010095 <VgaText::load()+0x29>
c001008f:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010092:	40                   	inc    eax
c0010093:	eb ef                	jmp    c0010084 <VgaText::load()+0x18>
c0010095:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c0010098:	85 c0                	test   eax,eax
c001009a:	74 09                	je     c00100a5 <VgaText::load()+0x39>
c001009c:	51                   	push   ecx
c001009d:	51                   	push   ecx
c001009e:	52                   	push   edx
c001009f:	53                   	push   ebx
c00100a0:	ff d0                	call   eax
c00100a2:	83 c4 10             	add    esp,0x10
c00100a5:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c00100a8:	85 c0                	test   eax,eax
c00100aa:	74 09                	je     c00100b5 <VgaText::load()+0x49>
c00100ac:	83 ec 0c             	sub    esp,0xc
c00100af:	53                   	push   ebx
c00100b0:	ff d0                	call   eax
c00100b2:	83 c4 10             	add    esp,0x10
c00100b5:	83 c4 58             	add    esp,0x58
c00100b8:	5b                   	pop    ebx
c00100b9:	c3                   	ret    

c00100ba <VgaText::updateCursor()>:
c00100ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100be:	39 05 c4 d7 02 c0    	cmp    DWORD PTR ds:0xc002d7c4,eax
c00100c4:	75 09                	jne    c00100cf <VgaText::updateCursor()+0x15>
c00100c6:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c00100c9:	85 c0                	test   eax,eax
c00100cb:	74 02                	je     c00100cf <VgaText::updateCursor()+0x15>
c00100cd:	ff e0                	jmp    eax
c00100cf:	c3                   	ret    

c00100d0 <VgaText::doANSI_SGR(int)>:
c00100d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00100d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100d8:	85 d2                	test   edx,edx
c00100da:	75 0b                	jne    c00100e7 <VgaText::doANSI_SGR(int)+0x17>
c00100dc:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00100df:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00100e2:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00100e5:	eb 59                	jmp    c0010140 <VgaText::doANSI_SGR(int)+0x70>
c00100e7:	83 fa 07             	cmp    edx,0x7
c00100ea:	75 0b                	jne    c00100f7 <VgaText::doANSI_SGR(int)+0x27>
c00100ec:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00100ef:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00100f2:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00100f5:	eb 49                	jmp    c0010140 <VgaText::doANSI_SGR(int)+0x70>
c00100f7:	83 fa 1b             	cmp    edx,0x1b
c00100fa:	74 e0                	je     c00100dc <VgaText::doANSI_SGR(int)+0xc>
c00100fc:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00100ff:	83 f9 07             	cmp    ecx,0x7
c0010102:	77 09                	ja     c001010d <VgaText::doANSI_SGR(int)+0x3d>
c0010104:	8b 14 8d 60 c6 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd39a0]
c001010b:	eb 20                	jmp    c001012d <VgaText::doANSI_SGR(int)+0x5d>
c001010d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010110:	83 f9 07             	cmp    ecx,0x7
c0010113:	77 09                	ja     c001011e <VgaText::doANSI_SGR(int)+0x4e>
c0010115:	8b 14 8d 60 c6 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd39a0]
c001011c:	eb 22                	jmp    c0010140 <VgaText::doANSI_SGR(int)+0x70>
c001011e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010121:	83 f9 07             	cmp    ecx,0x7
c0010124:	77 0b                	ja     c0010131 <VgaText::doANSI_SGR(int)+0x61>
c0010126:	8b 14 95 18 c5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3ae8]
c001012d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010130:	c3                   	ret    
c0010131:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010134:	83 f9 07             	cmp    ecx,0x7
c0010137:	77 0a                	ja     c0010143 <VgaText::doANSI_SGR(int)+0x73>
c0010139:	8b 14 95 f0 c4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3b10]
c0010140:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010143:	c3                   	ret    

c0010144 <VgaText::setDefaultBgColour(VgaColour)>:
c0010144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010148:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001014c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001014f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010152:	c3                   	ret    
c0010153:	90                   	nop

c0010154 <VgaText::setDefaultFgColour(VgaColour)>:
c0010154:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010158:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001015c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001015f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010162:	c3                   	ret    
c0010163:	90                   	nop

c0010164 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010164:	53                   	push   ebx
c0010165:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010169:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001016d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010171:	51                   	push   ecx
c0010172:	e8 cd ff ff ff       	call   c0010144 <VgaText::setDefaultBgColour(VgaColour)>
c0010177:	58                   	pop    eax
c0010178:	5a                   	pop    edx
c0010179:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001017d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010181:	5b                   	pop    ebx
c0010182:	eb d0                	jmp    c0010154 <VgaText::setDefaultFgColour(VgaColour)>

c0010184 <VgaText::setTitleTextColour(VgaColour)>:
c0010184:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010188:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001018c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c001018f:	e9 9a fe ff ff       	jmp    c001002e <VgaText::updateTitle()>

c0010194 <VgaText::setTitleColour(VgaColour)>:
c0010194:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010198:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001019c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001019f:	e9 8a fe ff ff       	jmp    c001002e <VgaText::updateTitle()>

c00101a4 <VgaText::setTitle(char*)>:
c00101a4:	53                   	push   ebx
c00101a5:	83 ec 10             	sub    esp,0x10
c00101a8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00101ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101b0:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c00101b6:	50                   	push   eax
c00101b7:	e8 50 06 ff ff       	call   c000080c <strcpy>
c00101bc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00101c0:	83 c4 18             	add    esp,0x18
c00101c3:	5b                   	pop    ebx
c00101c4:	e9 65 fe ff ff       	jmp    c001002e <VgaText::updateTitle()>
c00101c9:	90                   	nop

c00101ca <VgaText::combineColours(unsigned char, unsigned char)>:
c00101ca:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00101ce:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00101d3:	83 e0 0f             	and    eax,0xf
c00101d6:	c1 e2 04             	shl    edx,0x4
c00101d9:	09 d0                	or     eax,edx
c00101db:	c3                   	ret    

c00101dc <VgaText::scrollScreen()>:
c00101dc:	55                   	push   ebp
c00101dd:	b9 01 00 00 00       	mov    ecx,0x1
c00101e2:	57                   	push   edi
c00101e3:	56                   	push   esi
c00101e4:	53                   	push   ebx
c00101e5:	83 ec 0c             	sub    esp,0xc
c00101e8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00101ec:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00101f2:	31 ff                	xor    edi,edi
c00101f4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00101f7:	83 f9 17             	cmp    ecx,0x17
c00101fa:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00101fd:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0010204:	75 27                	jne    c001022d <VgaText::scrollScreen()+0x51>
c0010206:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0010209:	01 f5                	add    ebp,esi
c001020b:	f7 c7 01 00 00 00    	test   edi,0x1
c0010211:	74 16                	je     c0010229 <VgaText::scrollScreen()+0x4d>
c0010213:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010217:	50                   	push   eax
c0010218:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c001021c:	50                   	push   eax
c001021d:	e8 a8 ff ff ff       	call   c00101ca <VgaText::combineColours(unsigned char, unsigned char)>
c0010222:	5a                   	pop    edx
c0010223:	5a                   	pop    edx
c0010224:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0010227:	eb 04                	jmp    c001022d <VgaText::scrollScreen()+0x51>
c0010229:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c001022d:	47                   	inc    edi
c001022e:	46                   	inc    esi
c001022f:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010235:	75 bd                	jne    c00101f4 <VgaText::scrollScreen()+0x18>
c0010237:	41                   	inc    ecx
c0010238:	83 f9 18             	cmp    ecx,0x18
c001023b:	75 af                	jne    c00101ec <VgaText::scrollScreen()+0x10>
c001023d:	39 1d c4 d7 02 c0    	cmp    DWORD PTR ds:0xc002d7c4,ebx
c0010243:	75 1b                	jne    c0010260 <VgaText::scrollScreen()+0x84>
c0010245:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010249:	74 05                	je     c0010250 <VgaText::scrollScreen()+0x74>
c001024b:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c001024e:	eb 10                	jmp    c0010260 <VgaText::scrollScreen()+0x84>
c0010250:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c0010253:	85 c0                	test   eax,eax
c0010255:	74 09                	je     c0010260 <VgaText::scrollScreen()+0x84>
c0010257:	83 ec 0c             	sub    esp,0xc
c001025a:	53                   	push   ebx
c001025b:	ff d0                	call   eax
c001025d:	83 c4 10             	add    esp,0x10
c0010260:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010264:	83 c4 0c             	add    esp,0xc
c0010267:	5b                   	pop    ebx
c0010268:	5e                   	pop    esi
c0010269:	5f                   	pop    edi
c001026a:	5d                   	pop    ebp
c001026b:	e9 4a fe ff ff       	jmp    c00100ba <VgaText::updateCursor()>

c0010270 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010270:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010275:	c1 e0 08             	shl    eax,0x8
c0010278:	89 c2                	mov    edx,eax
c001027a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001027f:	09 d0                	or     eax,edx
c0010281:	c3                   	ret    

c0010282 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010282:	56                   	push   esi
c0010283:	53                   	push   ebx
c0010284:	51                   	push   ecx
c0010285:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010289:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001028e:	50                   	push   eax
c001028f:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010294:	50                   	push   eax
c0010295:	e8 30 ff ff ff       	call   c00101ca <VgaText::combineColours(unsigned char, unsigned char)>
c001029a:	5b                   	pop    ebx
c001029b:	0f b6 c0             	movzx  eax,al
c001029e:	5e                   	pop    esi
c001029f:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00102a4:	50                   	push   eax
c00102a5:	53                   	push   ebx
c00102a6:	e8 c5 ff ff ff       	call   c0010270 <VgaText::combineCharAndColour(char, unsigned char)>
c00102ab:	5a                   	pop    edx
c00102ac:	5e                   	pop    esi
c00102ad:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c00102b0:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c00102b6:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c00102ba:	0f b7 d2             	movzx  edx,dx
c00102bd:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c00102c1:	39 0d c4 d7 02 c0    	cmp    DWORD PTR ds:0xc002d7c4,ecx
c00102c7:	75 10                	jne    c00102d9 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c00102c9:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c00102cc:	85 c0                	test   eax,eax
c00102ce:	74 09                	je     c00102d9 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c00102d0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00102d4:	5a                   	pop    edx
c00102d5:	5b                   	pop    ebx
c00102d6:	5e                   	pop    esi
c00102d7:	ff e0                	jmp    eax
c00102d9:	58                   	pop    eax
c00102da:	5b                   	pop    ebx
c00102db:	5e                   	pop    esi
c00102dc:	c3                   	ret    
c00102dd:	90                   	nop

c00102de <VgaText::getCursorX()>:
c00102de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102e2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00102e5:	c3                   	ret    

c00102e6 <VgaText::getCursorY()>:
c00102e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102ea:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00102ed:	c3                   	ret    

c00102ee <VgaText::setCursor(int, int)>:
c00102ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102f6:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00102f9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00102fd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010300:	e9 b5 fd ff ff       	jmp    c00100ba <VgaText::updateCursor()>

c0010305 <setActiveTerminal(VgaText*)>:
c0010305:	53                   	push   ebx
c0010306:	83 ec 08             	sub    esp,0x8
c0010309:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001030d:	85 db                	test   ebx,ebx
c001030f:	75 11                	jne    c0010322 <setActiveTerminal(VgaText*)+0x1d>
c0010311:	c7 44 24 10 c4 9f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029fc4
c0010319:	83 c4 08             	add    esp,0x8
c001031c:	5b                   	pop    ebx
c001031d:	e9 13 9a 00 00       	jmp    c0019d35 <Krnl::panic(char const*)>
c0010322:	a1 c4 d7 02 c0       	mov    eax,ds:0xc002d7c4
c0010327:	85 c0                	test   eax,eax
c0010329:	74 0c                	je     c0010337 <setActiveTerminal(VgaText*)+0x32>
c001032b:	83 ec 0c             	sub    esp,0xc
c001032e:	50                   	push   eax
c001032f:	e8 86 fd ff ff       	call   c00100ba <VgaText::updateCursor()>
c0010334:	83 c4 10             	add    esp,0x10
c0010337:	89 1d c4 d7 02 c0    	mov    DWORD PTR ds:0xc002d7c4,ebx
c001033d:	51                   	push   ecx
c001033e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010341:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010344:	53                   	push   ebx
c0010345:	e8 a4 ff ff ff       	call   c00102ee <VgaText::setCursor(int, int)>
c001034a:	83 c4 10             	add    esp,0x10
c001034d:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010351:	75 07                	jne    c001035a <setActiveTerminal(VgaText*)+0x55>
c0010353:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c001035a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001035e:	83 c4 08             	add    esp,0x8
c0010361:	5b                   	pop    ebx
c0010362:	e9 05 fd ff ff       	jmp    c001006c <VgaText::load()>

c0010367 <doTerminalCycle()>:
c0010367:	83 ec 18             	sub    esp,0x18
c001036a:	a1 c0 d7 02 c0       	mov    eax,ds:0xc002d7c0
c001036f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010372:	50                   	push   eax
c0010373:	a3 c0 d7 02 c0       	mov    ds:0xc002d7c0,eax
c0010378:	e8 88 ff ff ff       	call   c0010305 <setActiveTerminal(VgaText*)>
c001037d:	83 c4 1c             	add    esp,0x1c
c0010380:	c3                   	ret    
c0010381:	90                   	nop

c0010382 <VgaText::setCursorX(int)>:
c0010382:	83 ec 10             	sub    esp,0x10
c0010385:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010389:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001038c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010390:	50                   	push   eax
c0010391:	e8 58 ff ff ff       	call   c00102ee <VgaText::setCursor(int, int)>
c0010396:	83 c4 1c             	add    esp,0x1c
c0010399:	c3                   	ret    

c001039a <VgaText::setCursorY(int)>:
c001039a:	83 ec 10             	sub    esp,0x10
c001039d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00103a5:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00103a8:	50                   	push   eax
c00103a9:	e8 40 ff ff ff       	call   c00102ee <VgaText::setCursor(int, int)>
c00103ae:	83 c4 1c             	add    esp,0x1c
c00103b1:	c3                   	ret    

c00103b2 <VgaText::incrementCursor(bool)>:
c00103b2:	56                   	push   esi
c00103b3:	53                   	push   ebx
c00103b4:	51                   	push   ecx
c00103b5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00103b9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00103bd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00103c0:	40                   	inc    eax
c00103c1:	83 f8 50             	cmp    eax,0x50
c00103c4:	74 05                	je     c00103cb <VgaText::incrementCursor(bool)+0x19>
c00103c6:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00103c9:	eb 24                	jmp    c00103ef <VgaText::incrementCursor(bool)+0x3d>
c00103cb:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00103ce:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00103d5:	8d 50 01             	lea    edx,[eax+0x1]
c00103d8:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00103db:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00103de:	75 0f                	jne    c00103ef <VgaText::incrementCursor(bool)+0x3d>
c00103e0:	83 ec 0c             	sub    esp,0xc
c00103e3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00103e6:	53                   	push   ebx
c00103e7:	e8 f0 fd ff ff       	call   c00101dc <VgaText::scrollScreen()>
c00103ec:	83 c4 10             	add    esp,0x10
c00103ef:	89 f0                	mov    eax,esi
c00103f1:	84 c0                	test   al,al
c00103f3:	74 0c                	je     c0010401 <VgaText::incrementCursor(bool)+0x4f>
c00103f5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00103f9:	5a                   	pop    edx
c00103fa:	5b                   	pop    ebx
c00103fb:	5e                   	pop    esi
c00103fc:	e9 b9 fc ff ff       	jmp    c00100ba <VgaText::updateCursor()>
c0010401:	58                   	pop    eax
c0010402:	5b                   	pop    ebx
c0010403:	5e                   	pop    esi
c0010404:	c3                   	ret    
c0010405:	90                   	nop

c0010406 <VgaText::decrementCursor(bool)>:
c0010406:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001040a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001040e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0010411:	85 c0                	test   eax,eax
c0010413:	74 04                	je     c0010419 <VgaText::decrementCursor(bool)+0x13>
c0010415:	48                   	dec    eax
c0010416:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0010419:	84 c9                	test   cl,cl
c001041b:	74 09                	je     c0010426 <VgaText::decrementCursor(bool)+0x20>
c001041d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010421:	e9 94 fc ff ff       	jmp    c00100ba <VgaText::updateCursor()>
c0010426:	c3                   	ret    
c0010427:	90                   	nop

c0010428 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010428:	53                   	push   ebx
c0010429:	83 ec 08             	sub    esp,0x8
c001042c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010430:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010434:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010438:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001043c:	3c 07                	cmp    al,0x7
c001043e:	75 2a                	jne    c001046a <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010440:	a1 78 d8 02 c0       	mov    eax,ds:0xc002d878
c0010445:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001044d:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010455:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c001045d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010461:	83 c4 08             	add    esp,0x8
c0010464:	5b                   	pop    ebx
c0010465:	e9 6c 2f 00 00       	jmp    c00133d6 <Buzzer::beep(int, int, bool)>
c001046a:	3c 0d                	cmp    al,0xd
c001046c:	75 09                	jne    c0010477 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c001046e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010475:	eb 2c                	jmp    c00104a3 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0010477:	3c 0a                	cmp    al,0xa
c0010479:	75 31                	jne    c00104ac <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c001047b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001047e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010485:	8d 50 01             	lea    edx,[eax+0x1]
c0010488:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001048b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001048e:	75 0f                	jne    c001049f <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c0010490:	83 ec 0c             	sub    esp,0xc
c0010493:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010496:	53                   	push   ebx
c0010497:	e8 40 fd ff ff       	call   c00101dc <VgaText::scrollScreen()>
c001049c:	83 c4 10             	add    esp,0x10
c001049f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00104a3:	83 c4 08             	add    esp,0x8
c00104a6:	5b                   	pop    ebx
c00104a7:	e9 0e fc ff ff       	jmp    c00100ba <VgaText::updateCursor()>
c00104ac:	3c 08                	cmp    al,0x8
c00104ae:	75 25                	jne    c00104d5 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c00104b0:	50                   	push   eax
c00104b1:	50                   	push   eax
c00104b2:	6a 01                	push   0x1
c00104b4:	53                   	push   ebx
c00104b5:	e8 4c ff ff ff       	call   c0010406 <VgaText::decrementCursor(bool)>
c00104ba:	5a                   	pop    edx
c00104bb:	59                   	pop    ecx
c00104bc:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00104bf:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00104c2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00104c5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00104c8:	6a 20                	push   0x20
c00104ca:	53                   	push   ebx
c00104cb:	e8 b2 fd ff ff       	call   c0010282 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00104d0:	83 c4 28             	add    esp,0x28
c00104d3:	5b                   	pop    ebx
c00104d4:	c3                   	ret    
c00104d5:	83 ec 08             	sub    esp,0x8
c00104d8:	0f be c0             	movsx  eax,al
c00104db:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00104de:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00104e1:	51                   	push   ecx
c00104e2:	52                   	push   edx
c00104e3:	50                   	push   eax
c00104e4:	53                   	push   ebx
c00104e5:	e8 98 fd ff ff       	call   c0010282 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00104ea:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00104ee:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00104f6:	83 c4 28             	add    esp,0x28
c00104f9:	5b                   	pop    ebx
c00104fa:	e9 b3 fe ff ff       	jmp    c00103b2 <VgaText::incrementCursor(bool)>
c00104ff:	90                   	nop

c0010500 <VgaText::doUpdate()>:
c0010500:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010504:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c0010507:	85 c0                	test   eax,eax
c0010509:	74 02                	je     c001050d <VgaText::doUpdate()+0xd>
c001050b:	ff e0                	jmp    eax
c001050d:	c3                   	ret    

c001050e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c001050e:	55                   	push   ebp
c001050f:	31 ed                	xor    ebp,ebp
c0010511:	57                   	push   edi
c0010512:	56                   	push   esi
c0010513:	53                   	push   ebx
c0010514:	83 ec 1c             	sub    esp,0x1c
c0010517:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001051b:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010520:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010527:	50                   	push   eax
c0010528:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001052d:	50                   	push   eax
c001052e:	e8 97 fc ff ff       	call   c00101ca <VgaText::combineColours(unsigned char, unsigned char)>
c0010533:	59                   	pop    ecx
c0010534:	0f b6 c0             	movzx  eax,al
c0010537:	5e                   	pop    esi
c0010538:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001053d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010541:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010544:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010548:	0f b7 f6             	movzx  esi,si
c001054b:	01 f6                	add    esi,esi
c001054d:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010550:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0010553:	84 c0                	test   al,al
c0010555:	0f 84 fd 00 00 00    	je     c0010658 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c001055b:	3c 0d                	cmp    al,0xd
c001055d:	75 0c                	jne    c001056b <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c001055f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010566:	e9 e7 00 00 00       	jmp    c0010652 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c001056b:	3c 0a                	cmp    al,0xa
c001056d:	75 47                	jne    c00105b6 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c001056f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010572:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010579:	8d 48 01             	lea    ecx,[eax+0x1]
c001057c:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c001057f:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0010582:	75 0f                	jne    c0010593 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c0010584:	83 ec 0c             	sub    esp,0xc
c0010587:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001058a:	53                   	push   ebx
c001058b:	e8 4c fc ff ff       	call   c00101dc <VgaText::scrollScreen()>
c0010590:	83 c4 10             	add    esp,0x10
c0010593:	83 ec 0c             	sub    esp,0xc
c0010596:	31 ed                	xor    ebp,ebp
c0010598:	53                   	push   ebx
c0010599:	e8 1c fb ff ff       	call   c00100ba <VgaText::updateCursor()>
c001059e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00105a3:	83 c4 10             	add    esp,0x10
c00105a6:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00105a9:	0f b7 f6             	movzx  esi,si
c00105ac:	01 f6                	add    esi,esi
c00105ae:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00105b1:	e9 9c 00 00 00       	jmp    c0010652 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00105b6:	3c 08                	cmp    al,0x8
c00105b8:	75 35                	jne    c00105ef <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c00105ba:	56                   	push   esi
c00105bb:	56                   	push   esi
c00105bc:	6a 01                	push   0x1
c00105be:	53                   	push   ebx
c00105bf:	e8 42 fe ff ff       	call   c0010406 <VgaText::decrementCursor(bool)>
c00105c4:	58                   	pop    eax
c00105c5:	5a                   	pop    edx
c00105c6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00105c9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00105cc:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00105cf:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00105d2:	6a 20                	push   0x20
c00105d4:	53                   	push   ebx
c00105d5:	e8 a8 fc ff ff       	call   c0010282 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00105da:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00105df:	83 c4 20             	add    esp,0x20
c00105e2:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00105e5:	0f b7 f6             	movzx  esi,si
c00105e8:	01 f6                	add    esi,esi
c00105ea:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00105ed:	eb 63                	jmp    c0010652 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00105ef:	51                   	push   ecx
c00105f0:	51                   	push   ecx
c00105f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00105f5:	50                   	push   eax
c00105f6:	e8 75 fc ff ff       	call   c0010270 <VgaText::combineCharAndColour(char, unsigned char)>
c00105fb:	83 c4 10             	add    esp,0x10
c00105fe:	66 89 06             	mov    WORD PTR [esi],ax
c0010601:	39 1d c4 d7 02 c0    	cmp    DWORD PTR ds:0xc002d7c4,ebx
c0010607:	75 21                	jne    c001062a <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010609:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c001060c:	85 c0                	test   eax,eax
c001060e:	74 1a                	je     c001062a <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010610:	52                   	push   edx
c0010611:	52                   	push   edx
c0010612:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010615:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010618:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001061c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010620:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010623:	51                   	push   ecx
c0010624:	53                   	push   ebx
c0010625:	ff d0                	call   eax
c0010627:	83 c4 20             	add    esp,0x20
c001062a:	83 c6 02             	add    esi,0x2
c001062d:	50                   	push   eax
c001062e:	50                   	push   eax
c001062f:	6a 00                	push   0x0
c0010631:	53                   	push   ebx
c0010632:	e8 7b fd ff ff       	call   c00103b2 <VgaText::incrementCursor(bool)>
c0010637:	83 c4 10             	add    esp,0x10
c001063a:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c001063e:	75 0d                	jne    c001064d <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c0010640:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010645:	0f b7 f6             	movzx  esi,si
c0010648:	01 f6                	add    esi,esi
c001064a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001064d:	bd 01 00 00 00       	mov    ebp,0x1
c0010652:	47                   	inc    edi
c0010653:	e9 f8 fe ff ff       	jmp    c0010550 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c0010658:	83 ec 0c             	sub    esp,0xc
c001065b:	53                   	push   ebx
c001065c:	e8 59 fa ff ff       	call   c00100ba <VgaText::updateCursor()>
c0010661:	83 c4 10             	add    esp,0x10
c0010664:	89 e8                	mov    eax,ebp
c0010666:	84 c0                	test   al,al
c0010668:	74 0c                	je     c0010676 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c001066a:	83 ec 0c             	sub    esp,0xc
c001066d:	53                   	push   ebx
c001066e:	e8 8d fe ff ff       	call   c0010500 <VgaText::doUpdate()>
c0010673:	83 c4 10             	add    esp,0x10
c0010676:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c001067d:	83 c4 1c             	add    esp,0x1c
c0010680:	5b                   	pop    ebx
c0010681:	5e                   	pop    esi
c0010682:	5f                   	pop    edi
c0010683:	5d                   	pop    ebp
c0010684:	c3                   	ret    
c0010685:	90                   	nop

c0010686 <VgaText::clearScreen()>:
c0010686:	57                   	push   edi
c0010687:	56                   	push   esi
c0010688:	31 f6                	xor    esi,esi
c001068a:	53                   	push   ebx
c001068b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001068f:	52                   	push   edx
c0010690:	6a 00                	push   0x0
c0010692:	6a 00                	push   0x0
c0010694:	53                   	push   ebx
c0010695:	e8 54 fc ff ff       	call   c00102ee <VgaText::setCursor(int, int)>
c001069a:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00106a1:	83 c4 10             	add    esp,0x10
c00106a4:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00106a7:	7e 20                	jle    c00106c9 <VgaText::clearScreen()+0x43>
c00106a9:	31 ff                	xor    edi,edi
c00106ab:	50                   	push   eax
c00106ac:	50                   	push   eax
c00106ad:	56                   	push   esi
c00106ae:	57                   	push   edi
c00106af:	47                   	inc    edi
c00106b0:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00106b3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00106b6:	6a 20                	push   0x20
c00106b8:	53                   	push   ebx
c00106b9:	e8 c4 fb ff ff       	call   c0010282 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00106be:	83 c4 20             	add    esp,0x20
c00106c1:	83 ff 50             	cmp    edi,0x50
c00106c4:	75 e5                	jne    c00106ab <VgaText::clearScreen()+0x25>
c00106c6:	46                   	inc    esi
c00106c7:	eb db                	jmp    c00106a4 <VgaText::clearScreen()+0x1e>
c00106c9:	83 ec 0c             	sub    esp,0xc
c00106cc:	53                   	push   ebx
c00106cd:	e8 2e fe ff ff       	call   c0010500 <VgaText::doUpdate()>
c00106d2:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00106d9:	83 c4 10             	add    esp,0x10
c00106dc:	5b                   	pop    ebx
c00106dd:	5e                   	pop    esi
c00106de:	5f                   	pop    edi
c00106df:	c3                   	ret    

c00106e0 <VgaText::putchar(char)>:
c00106e0:	56                   	push   esi
c00106e1:	53                   	push   ebx
c00106e2:	83 ec 14             	sub    esp,0x14
c00106e5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00106e9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00106ed:	3c 5b                	cmp    al,0x5b
c00106ef:	75 18                	jne    c0010709 <VgaText::putchar(char)+0x29>
c00106f1:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00106f5:	74 1f                	je     c0010716 <VgaText::putchar(char)+0x36>
c00106f7:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00106fd:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010704:	e9 bd 00 00 00       	jmp    c00107c6 <VgaText::putchar(char)+0xe6>
c0010709:	3c 1b                	cmp    al,0x1b
c001070b:	75 09                	jne    c0010716 <VgaText::putchar(char)+0x36>
c001070d:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0010711:	e9 b0 00 00 00       	jmp    c00107c6 <VgaText::putchar(char)+0xe6>
c0010716:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0010719:	84 c9                	test   cl,cl
c001071b:	0f 84 92 00 00 00    	je     c00107b3 <VgaText::putchar(char)+0xd3>
c0010721:	8d 50 c0             	lea    edx,[eax-0x40]
c0010724:	80 fa 3e             	cmp    dl,0x3e
c0010727:	77 76                	ja     c001079f <VgaText::putchar(char)+0xbf>
c0010729:	3c 6d                	cmp    al,0x6d
c001072b:	75 47                	jne    c0010774 <VgaText::putchar(char)+0x94>
c001072d:	31 f6                	xor    esi,esi
c001072f:	31 d2                	xor    edx,edx
c0010731:	31 c0                	xor    eax,eax
c0010733:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010736:	7e 2d                	jle    c0010765 <VgaText::putchar(char)+0x85>
c0010738:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c001073d:	80 fa 3b             	cmp    dl,0x3b
c0010740:	75 17                	jne    c0010759 <VgaText::putchar(char)+0x79>
c0010742:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010746:	50                   	push   eax
c0010747:	53                   	push   ebx
c0010748:	e8 83 f9 ff ff       	call   c00100d0 <VgaText::doANSI_SGR(int)>
c001074d:	59                   	pop    ecx
c001074e:	31 d2                	xor    edx,edx
c0010750:	58                   	pop    eax
c0010751:	31 c0                	xor    eax,eax
c0010753:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010757:	eb 09                	jmp    c0010762 <VgaText::putchar(char)+0x82>
c0010759:	6b c0 0a             	imul   eax,eax,0xa
c001075c:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010760:	88 ca                	mov    dl,cl
c0010762:	46                   	inc    esi
c0010763:	eb ce                	jmp    c0010733 <VgaText::putchar(char)+0x53>
c0010765:	84 d2                	test   dl,dl
c0010767:	74 2e                	je     c0010797 <VgaText::putchar(char)+0xb7>
c0010769:	50                   	push   eax
c001076a:	53                   	push   ebx
c001076b:	e8 60 f9 ff ff       	call   c00100d0 <VgaText::doANSI_SGR(int)>
c0010770:	58                   	pop    eax
c0010771:	5a                   	pop    edx
c0010772:	eb 23                	jmp    c0010797 <VgaText::putchar(char)+0xb7>
c0010774:	3c 4a                	cmp    al,0x4a
c0010776:	75 1f                	jne    c0010797 <VgaText::putchar(char)+0xb7>
c0010778:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c001077c:	75 19                	jne    c0010797 <VgaText::putchar(char)+0xb7>
c001077e:	83 ec 0c             	sub    esp,0xc
c0010781:	53                   	push   ebx
c0010782:	e8 ff fe ff ff       	call   c0010686 <VgaText::clearScreen()>
c0010787:	83 c4 0c             	add    esp,0xc
c001078a:	6a 00                	push   0x0
c001078c:	6a 00                	push   0x0
c001078e:	53                   	push   ebx
c001078f:	e8 5a fb ff ff       	call   c00102ee <VgaText::setCursor(int, int)>
c0010794:	83 c4 10             	add    esp,0x10
c0010797:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c001079d:	eb 27                	jmp    c00107c6 <VgaText::putchar(char)+0xe6>
c001079f:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c00107a2:	83 fa 0e             	cmp    edx,0xe
c00107a5:	7f 1f                	jg     c00107c6 <VgaText::putchar(char)+0xe6>
c00107a7:	8d 4a 01             	lea    ecx,[edx+0x1]
c00107aa:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00107ad:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00107b1:	eb 13                	jmp    c00107c6 <VgaText::putchar(char)+0xe6>
c00107b3:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00107b6:	0f be c0             	movsx  eax,al
c00107b9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00107bc:	50                   	push   eax
c00107bd:	53                   	push   ebx
c00107be:	e8 65 fc ff ff       	call   c0010428 <VgaText::putchar(char, VgaColour, VgaColour)>
c00107c3:	83 c4 10             	add    esp,0x10
c00107c6:	83 c4 14             	add    esp,0x14
c00107c9:	5b                   	pop    ebx
c00107ca:	5e                   	pop    esi
c00107cb:	c3                   	ret    

c00107cc <VgaText::putx(unsigned int)>:
c00107cc:	57                   	push   edi
c00107cd:	b9 11 00 00 00       	mov    ecx,0x11
c00107d2:	56                   	push   esi
c00107d3:	be d2 9f 02 c0       	mov    esi,0xc0029fd2
c00107d8:	53                   	push   ebx
c00107d9:	83 ec 20             	sub    esp,0x20
c00107dc:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00107e0:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00107e4:	fc                   	cld    
c00107e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00107e7:	be 08 00 00 00       	mov    esi,0x8
c00107ec:	50                   	push   eax
c00107ed:	50                   	push   eax
c00107ee:	89 d8                	mov    eax,ebx
c00107f0:	c1 e3 04             	shl    ebx,0x4
c00107f3:	c1 e8 1c             	shr    eax,0x1c
c00107f6:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00107fb:	50                   	push   eax
c00107fc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010800:	e8 db fe ff ff       	call   c00106e0 <VgaText::putchar(char)>
c0010805:	83 c4 10             	add    esp,0x10
c0010808:	4e                   	dec    esi
c0010809:	75 e1                	jne    c00107ec <VgaText::putx(unsigned int)+0x20>
c001080b:	83 c4 20             	add    esp,0x20
c001080e:	5b                   	pop    ebx
c001080f:	5e                   	pop    esi
c0010810:	5f                   	pop    edi
c0010811:	c3                   	ret    

c0010812 <VgaText::puts(char const*)>:
c0010812:	53                   	push   ebx
c0010813:	83 ec 08             	sub    esp,0x8
c0010816:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001081a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001081d:	84 c0                	test   al,al
c001081f:	74 12                	je     c0010833 <VgaText::puts(char const*)+0x21>
c0010821:	43                   	inc    ebx
c0010822:	51                   	push   ecx
c0010823:	51                   	push   ecx
c0010824:	50                   	push   eax
c0010825:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010829:	e8 b2 fe ff ff       	call   c00106e0 <VgaText::putchar(char)>
c001082e:	83 c4 10             	add    esp,0x10
c0010831:	eb e7                	jmp    c001081a <VgaText::puts(char const*)+0x8>
c0010833:	83 c4 08             	add    esp,0x8
c0010836:	5b                   	pop    ebx
c0010837:	c3                   	ret    

c0010838 <VgaText::VgaText(char const*)>:
c0010838:	57                   	push   edi
c0010839:	56                   	push   esi
c001083a:	53                   	push   ebx
c001083b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001083f:	83 ec 08             	sub    esp,0x8
c0010842:	6a 00                	push   0x0
c0010844:	50                   	push   eax
c0010845:	e8 42 05 00 00       	call   c0010d8c <UnixFile::UnixFile(int)>
c001084a:	83 c4 10             	add    esp,0x10
c001084d:	ba 38 a0 02 c0       	mov    edx,0xc002a038
c0010852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010856:	89 10                	mov    DWORD PTR [eax],edx
c0010858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001085c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0010863:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010867:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c001086e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010872:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0010876:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001087a:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c001087e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010882:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0010889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001088d:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0010894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010898:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c001089f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108a3:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00108aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108ae:	8d 50 60             	lea    edx,[eax+0x60]
c00108b1:	bb a0 d7 02 c0       	mov    ebx,0xc002d7a0
c00108b6:	b8 08 00 00 00       	mov    eax,0x8
c00108bb:	fc                   	cld    
c00108bc:	89 d7                	mov    edi,edx
c00108be:	89 de                	mov    esi,ebx
c00108c0:	89 c1                	mov    ecx,eax
c00108c2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00108c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c8:	05 82 00 00 00       	add    eax,0x82
c00108cd:	83 ec 08             	sub    esp,0x8
c00108d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108d4:	50                   	push   eax
c00108d5:	e8 32 ff fe ff       	call   c000080c <strcpy>
c00108da:	83 c4 10             	add    esp,0x10
c00108dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108e1:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c00108e8:	83 ec 0c             	sub    esp,0xc
c00108eb:	6a 01                	push   0x1
c00108ed:	e8 dd 08 00 00       	call   c00111cf <Virt::allocateKernelVirtualPages(int)>
c00108f2:	83 c4 10             	add    esp,0x10
c00108f5:	89 c2                	mov    edx,eax
c00108f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108fb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00108fe:	8b 1d 70 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d870
c0010904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010908:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001090b:	89 c6                	mov    esi,eax
c001090d:	e8 2e f0 ff ff       	call   c000f940 <Phys::allocatePage()>
c0010912:	6a 05                	push   0x5
c0010914:	56                   	push   esi
c0010915:	50                   	push   eax
c0010916:	53                   	push   ebx
c0010917:	e8 70 10 00 00       	call   c001198c <VAS::mapPage(unsigned long, unsigned long, int)>
c001091c:	83 c4 10             	add    esp,0x10
c001091f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010923:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010926:	83 ec 04             	sub    esp,0x4
c0010929:	68 00 0f 00 00       	push   0xf00
c001092e:	6a 00                	push   0x0
c0010930:	50                   	push   eax
c0010931:	e8 1a fe fe ff       	call   c0000750 <memset>
c0010936:	83 c4 10             	add    esp,0x10
c0010939:	83 ec 04             	sub    esp,0x4
c001093c:	6a 00                	push   0x0
c001093e:	6a 07                	push   0x7
c0010940:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010944:	e8 1b f8 ff ff       	call   c0010164 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010949:	83 c4 10             	add    esp,0x10
c001094c:	83 ec 04             	sub    esp,0x4
c001094f:	6a 00                	push   0x0
c0010951:	6a 00                	push   0x0
c0010953:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010957:	e8 92 f9 ff ff       	call   c00102ee <VgaText::setCursor(int, int)>
c001095c:	83 c4 10             	add    esp,0x10
c001095f:	83 ec 0c             	sub    esp,0xc
c0010962:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010966:	e8 1b fd ff ff       	call   c0010686 <VgaText::clearScreen()>
c001096b:	83 c4 10             	add    esp,0x10
c001096e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010972:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0010976:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001097a:	05 02 01 00 00       	add    eax,0x102
c001097f:	83 ec 04             	sub    esp,0x4
c0010982:	68 96 00 00 00       	push   0x96
c0010987:	6a 00                	push   0x0
c0010989:	50                   	push   eax
c001098a:	e8 c1 fd fe ff       	call   c0000750 <memset>
c001098f:	83 c4 10             	add    esp,0x10
c0010992:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010996:	05 98 01 00 00       	add    eax,0x198
c001099b:	83 ec 04             	sub    esp,0x4
c001099e:	68 2c 01 00 00       	push   0x12c
c00109a3:	6a 00                	push   0x0
c00109a5:	50                   	push   eax
c00109a6:	e8 a5 fd fe ff       	call   c0000750 <memset>
c00109ab:	83 c4 10             	add    esp,0x10
c00109ae:	90                   	nop
c00109af:	5b                   	pop    ebx
c00109b0:	5e                   	pop    esi
c00109b1:	5f                   	pop    edi
c00109b2:	c3                   	ret    
c00109b3:	90                   	nop

c00109b4 <VgaText::receiveKey(unsigned char)>:
c00109b4:	55                   	push   ebp
c00109b5:	57                   	push   edi
c00109b6:	56                   	push   esi
c00109b7:	53                   	push   ebx
c00109b8:	83 ec 1c             	sub    esp,0x1c
c00109bb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00109bf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00109c3:	84 db                	test   bl,bl
c00109c5:	0f 84 c9 00 00 00    	je     c0010a94 <VgaText::receiveKey(unsigned char)+0xe0>
c00109cb:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c00109d1:	80 fb 08             	cmp    bl,0x8
c00109d4:	75 2c                	jne    c0010a02 <VgaText::receiveKey(unsigned char)+0x4e>
c00109d6:	83 ec 0c             	sub    esp,0xc
c00109d9:	57                   	push   edi
c00109da:	e8 8d fd fe ff       	call   c000076c <strlen>
c00109df:	83 c4 10             	add    esp,0x10
c00109e2:	85 c0                	test   eax,eax
c00109e4:	74 41                	je     c0010a27 <VgaText::receiveKey(unsigned char)+0x73>
c00109e6:	50                   	push   eax
c00109e7:	50                   	push   eax
c00109e8:	6a 08                	push   0x8
c00109ea:	56                   	push   esi
c00109eb:	e8 f0 fc ff ff       	call   c00106e0 <VgaText::putchar(char)>
c00109f0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00109f3:	e8 74 fd fe ff       	call   c000076c <strlen>
c00109f8:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c0010a00:	eb 22                	jmp    c0010a24 <VgaText::receiveKey(unsigned char)+0x70>
c0010a02:	0f be c3             	movsx  eax,bl
c0010a05:	52                   	push   edx
c0010a06:	52                   	push   edx
c0010a07:	50                   	push   eax
c0010a08:	56                   	push   esi
c0010a09:	e8 d2 fc ff ff       	call   c00106e0 <VgaText::putchar(char)>
c0010a0e:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010a12:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010a17:	59                   	pop    ecx
c0010a18:	5d                   	pop    ebp
c0010a19:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010a1d:	50                   	push   eax
c0010a1e:	57                   	push   edi
c0010a1f:	e8 28 ff fe ff       	call   c000094c <strcat>
c0010a24:	83 c4 10             	add    esp,0x10
c0010a27:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0010a2e:	75 05                	jne    c0010a35 <VgaText::receiveKey(unsigned char)+0x81>
c0010a30:	80 fb 0a             	cmp    bl,0xa
c0010a33:	75 53                	jne    c0010a88 <VgaText::receiveKey(unsigned char)+0xd4>
c0010a35:	83 ec 0c             	sub    esp,0xc
c0010a38:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0010a3e:	53                   	push   ebx
c0010a3f:	e8 28 fd fe ff       	call   c000076c <strlen>
c0010a44:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a47:	89 c5                	mov    ebp,eax
c0010a49:	e8 1e fd fe ff       	call   c000076c <strlen>
c0010a4e:	83 c4 10             	add    esp,0x10
c0010a51:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010a55:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010a5a:	76 10                	jbe    c0010a6c <VgaText::receiveKey(unsigned char)+0xb8>
c0010a5c:	83 ec 0c             	sub    esp,0xc
c0010a5f:	68 e3 9f 02 c0       	push   0xc0029fe3
c0010a64:	e8 cc 92 00 00       	call   c0019d35 <Krnl::panic(char const*)>
c0010a69:	83 c4 10             	add    esp,0x10
c0010a6c:	50                   	push   eax
c0010a6d:	50                   	push   eax
c0010a6e:	57                   	push   edi
c0010a6f:	53                   	push   ebx
c0010a70:	e8 d7 fe fe ff       	call   c000094c <strcat>
c0010a75:	83 c4 0c             	add    esp,0xc
c0010a78:	68 96 00 00 00       	push   0x96
c0010a7d:	6a 00                	push   0x0
c0010a7f:	57                   	push   edi
c0010a80:	e8 cb fc fe ff       	call   c0000750 <memset>
c0010a85:	83 c4 10             	add    esp,0x10
c0010a88:	83 ec 0c             	sub    esp,0xc
c0010a8b:	56                   	push   esi
c0010a8c:	e8 6f fa ff ff       	call   c0010500 <VgaText::doUpdate()>
c0010a91:	83 c4 10             	add    esp,0x10
c0010a94:	83 c4 1c             	add    esp,0x1c
c0010a97:	5b                   	pop    ebx
c0010a98:	5e                   	pop    esi
c0010a99:	5f                   	pop    edi
c0010a9a:	5d                   	pop    ebp
c0010a9b:	c3                   	ret    

c0010a9c <VgaText::write(unsigned long long, void*, int*)>:
c0010a9c:	55                   	push   ebp
c0010a9d:	57                   	push   edi
c0010a9e:	56                   	push   esi
c0010a9f:	53                   	push   ebx
c0010aa0:	83 ec 0c             	sub    esp,0xc
c0010aa3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010aa7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010aab:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010aaf:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0010ab6:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010ab9:	39 eb                	cmp    ebx,ebp
c0010abb:	74 13                	je     c0010ad0 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010abd:	43                   	inc    ebx
c0010abe:	50                   	push   eax
c0010abf:	50                   	push   eax
c0010ac0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010ac4:	50                   	push   eax
c0010ac5:	56                   	push   esi
c0010ac6:	e8 15 fc ff ff       	call   c00106e0 <VgaText::putchar(char)>
c0010acb:	83 c4 10             	add    esp,0x10
c0010ace:	eb e9                	jmp    c0010ab9 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010ad0:	83 ec 0c             	sub    esp,0xc
c0010ad3:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0010ada:	56                   	push   esi
c0010adb:	e8 20 fa ff ff       	call   c0010500 <VgaText::doUpdate()>
c0010ae0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010ae4:	89 38                	mov    DWORD PTR [eax],edi
c0010ae6:	83 c4 1c             	add    esp,0x1c
c0010ae9:	31 c0                	xor    eax,eax
c0010aeb:	5b                   	pop    ebx
c0010aec:	5e                   	pop    esi
c0010aed:	5f                   	pop    edi
c0010aee:	5d                   	pop    ebp
c0010aef:	c3                   	ret    

c0010af0 <newTerminal(char*)>:
c0010af0:	83 ec 28             	sub    esp,0x28
c0010af3:	68 c4 02 00 00       	push   0x2c4
c0010af8:	e8 9f ea ff ff       	call   c000f59c <malloc>
c0010afd:	5a                   	pop    edx
c0010afe:	59                   	pop    ecx
c0010aff:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010b03:	50                   	push   eax
c0010b04:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010b08:	e8 2b fd ff ff       	call   c0010838 <VgaText::VgaText(char const*)>
c0010b0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010b11:	83 c4 2c             	add    esp,0x2c
c0010b14:	c3                   	ret    
c0010b15:	90                   	nop

c0010b16 <TSS::TSS()>:
c0010b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b1a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010b21:	90                   	nop
c0010b22:	c3                   	ret    
c0010b23:	90                   	nop

c0010b24 <TSS::setESP(unsigned long)>:
c0010b24:	55                   	push   ebp
c0010b25:	89 e5                	mov    ebp,esp
c0010b27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b2d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010b30:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b33:	90                   	nop
c0010b34:	5d                   	pop    ebp
c0010b35:	c3                   	ret    

c0010b36 <TSS::flush()>:
c0010b36:	55                   	push   ebp
c0010b37:	89 e5                	mov    ebp,esp
c0010b39:	83 ec 10             	sub    esp,0x10
c0010b3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b3f:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b41:	83 c8 03             	or     eax,0x3
c0010b44:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010b48:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010b4c:	66 89 d0             	mov    ax,dx
c0010b4f:	0f 00 d8             	ltr    ax
c0010b52:	90                   	nop
c0010b53:	c9                   	leave  
c0010b54:	c3                   	ret    
c0010b55:	90                   	nop

c0010b56 <TSS::setup(unsigned long, unsigned long)>:
c0010b56:	55                   	push   ebp
c0010b57:	89 e5                	mov    ebp,esp
c0010b59:	83 ec 18             	sub    esp,0x18
c0010b5c:	83 ec 0c             	sub    esp,0xc
c0010b5f:	6a 68                	push   0x68
c0010b61:	e8 36 ea ff ff       	call   c000f59c <malloc>
c0010b66:	83 c4 10             	add    esp,0x10
c0010b69:	89 c2                	mov    edx,eax
c0010b6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b6e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b74:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b77:	83 ec 04             	sub    esp,0x4
c0010b7a:	6a 68                	push   0x68
c0010b7c:	6a 00                	push   0x0
c0010b7e:	50                   	push   eax
c0010b7f:	e8 cc fb fe ff       	call   c0000750 <memset>
c0010b84:	83 c4 10             	add    esp,0x10
c0010b87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b8d:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010b93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b96:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b99:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010b9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ba2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ba5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010ba8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010bab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bb1:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010bb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bbd:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010bc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bc6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bc9:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010bcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bd2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bd5:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0010bdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010be1:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0010be7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bed:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010bf3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bf6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bf9:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010bfc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010bff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c02:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c05:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010c08:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010c0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c11:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010c18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c1b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c1e:	0f 20 da             	mov    edx,cr3
c0010c21:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0010c24:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0010c27:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010c2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c2d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c30:	83 ec 08             	sub    esp,0x8
c0010c33:	50                   	push   eax
c0010c34:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c37:	50                   	push   eax
c0010c38:	e8 55 e1 ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c0010c3d:	83 c4 10             	add    esp,0x10
c0010c40:	83 ec 08             	sub    esp,0x8
c0010c43:	6a 68                	push   0x68
c0010c45:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c48:	50                   	push   eax
c0010c49:	e8 60 e1 ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c0010c4e:	83 c4 10             	add    esp,0x10
c0010c51:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0010c55:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010c58:	83 e0 0f             	and    eax,0xf
c0010c5b:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010c5e:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010c61:	83 c8 40             	or     eax,0x40
c0010c64:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010c67:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0010c6c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010c72:	05 78 01 00 00       	add    eax,0x178
c0010c77:	83 ec 04             	sub    esp,0x4
c0010c7a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010c7d:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0010c80:	50                   	push   eax
c0010c81:	e8 5c e1 ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c0010c86:	83 c4 10             	add    esp,0x10
c0010c89:	89 c2                	mov    edx,eax
c0010c8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c8e:	89 10                	mov    DWORD PTR [eax],edx
c0010c90:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0010c95:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010c9b:	05 78 01 00 00       	add    eax,0x178
c0010ca0:	83 ec 0c             	sub    esp,0xc
c0010ca3:	50                   	push   eax
c0010ca4:	e8 63 e1 ff ff       	call   c000ee0c <GDT::flush()>
c0010ca9:	83 c4 10             	add    esp,0x10
c0010cac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010caf:	8b 00                	mov    eax,DWORD PTR [eax]
c0010cb1:	c9                   	leave  
c0010cb2:	c3                   	ret    
c0010cb3:	90                   	nop

c0010cb4 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010cb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cb8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010cbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cbf:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010cc4:	75 08                	jne    c0010cce <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0010cc6:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010ccc:	eb 38                	jmp    c0010d06 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0010cce:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010cd3:	75 17                	jne    c0010cec <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0010cd5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010cda:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010cdd:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010ce3:	8b 10                	mov    edx,DWORD PTR [eax]
c0010ce5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010ce9:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0010cec:	89 c1                	mov    ecx,eax
c0010cee:	83 e1 fd             	and    ecx,0xfffffffd
c0010cf1:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0010cf7:	74 cd                	je     c0010cc6 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010cf9:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010cfe:	83 e0 ef             	and    eax,0xffffffef
c0010d01:	83 f8 08             	cmp    eax,0x8
c0010d04:	76 c0                	jbe    c0010cc6 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010d06:	31 c0                	xor    eax,eax
c0010d08:	c3                   	ret    
c0010d09:	90                   	nop

c0010d0a <ReservedFilename::isAtty()>:
c0010d0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d0e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010d11:	31 c0                	xor    eax,eax
c0010d13:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0010d19:	74 09                	je     c0010d24 <ReservedFilename::isAtty()+0x1a>
c0010d1b:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0010d21:	0f 94 c0             	sete   al
c0010d24:	c3                   	ret    
c0010d25:	90                   	nop

c0010d26 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010d26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d2a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010d2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d31:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010d35:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010d3a:	75 08                	jne    c0010d44 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0010d3c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010d42:	eb 3d                	jmp    c0010d81 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010d44:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010d49:	75 17                	jne    c0010d62 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0010d4b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d50:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010d53:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010d59:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d5b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010d5f:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0010d62:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010d67:	75 04                	jne    c0010d6d <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0010d69:	89 0a                	mov    DWORD PTR [edx],ecx
c0010d6b:	eb 14                	jmp    c0010d81 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010d6d:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0010d72:	74 c8                	je     c0010d3c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010d74:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010d79:	83 e0 ef             	and    eax,0xffffffef
c0010d7c:	83 f8 08             	cmp    eax,0x8
c0010d7f:	76 bb                	jbe    c0010d3c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010d81:	31 c0                	xor    eax,eax
c0010d83:	c3                   	ret    

c0010d84 <UnixFile::getFileDescriptor()>:
c0010d84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d8b:	c3                   	ret    

c0010d8c <UnixFile::UnixFile(int)>:
c0010d8c:	53                   	push   ebx
c0010d8d:	83 ec 28             	sub    esp,0x28
c0010d90:	ba 00 a1 02 c0       	mov    edx,0xc002a100
c0010d95:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010d99:	89 10                	mov    DWORD PTR [eax],edx
c0010d9b:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0010da3:	0f 8f 8c 01 00 00    	jg     c0010f35 <UnixFile::UnixFile(int)+0x1a9>
c0010da9:	a1 a0 c6 02 c0       	mov    eax,ds:0xc002c6a0
c0010dae:	8d 50 01             	lea    edx,[eax+0x1]
c0010db1:	89 15 a0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6a0,edx
c0010db7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010dbb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010dbe:	83 ec 08             	sub    esp,0x8
c0010dc1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010dc5:	68 58 d8 02 c0       	push   0xc002d858
c0010dca:	e8 a7 75 01 00       	call   c0028376 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010dcf:	83 c4 10             	add    esp,0x10
c0010dd2:	a0 54 d8 02 c0       	mov    al,ds:0xc002d854
c0010dd7:	83 f0 01             	xor    eax,0x1
c0010dda:	84 c0                	test   al,al
c0010ddc:	0f 84 54 01 00 00    	je     c0010f36 <UnixFile::UnixFile(int)+0x1aa>
c0010de2:	c6 05 54 d8 02 c0 01 	mov    BYTE PTR ds:0xc002d854,0x1
c0010de9:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0010df1:	83 ec 0c             	sub    esp,0xc
c0010df4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010df8:	e8 9f e7 ff ff       	call   c000f59c <malloc>
c0010dfd:	83 c4 10             	add    esp,0x10
c0010e00:	89 c3                	mov    ebx,eax
c0010e02:	83 ec 08             	sub    esp,0x8
c0010e05:	68 03 ff ff 0f       	push   0xfffff03
c0010e0a:	53                   	push   ebx
c0010e0b:	e8 2c 01 00 00       	call   c0010f3c <ReservedFilename::ReservedFilename(int)>
c0010e10:	83 c4 10             	add    esp,0x10
c0010e13:	89 1d 4c d8 02 c0    	mov    DWORD PTR ds:0xc002d84c,ebx
c0010e19:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0010e21:	83 ec 0c             	sub    esp,0xc
c0010e24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e28:	e8 6f e7 ff ff       	call   c000f59c <malloc>
c0010e2d:	83 c4 10             	add    esp,0x10
c0010e30:	89 c3                	mov    ebx,eax
c0010e32:	83 ec 08             	sub    esp,0x8
c0010e35:	68 01 ff ff 0f       	push   0xfffff01
c0010e3a:	53                   	push   ebx
c0010e3b:	e8 fc 00 00 00       	call   c0010f3c <ReservedFilename::ReservedFilename(int)>
c0010e40:	83 c4 10             	add    esp,0x10
c0010e43:	89 1d 50 d8 02 c0    	mov    DWORD PTR ds:0xc002d850,ebx
c0010e49:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0010e51:	83 ec 0c             	sub    esp,0xc
c0010e54:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010e58:	e8 3f e7 ff ff       	call   c000f59c <malloc>
c0010e5d:	83 c4 10             	add    esp,0x10
c0010e60:	89 c3                	mov    ebx,eax
c0010e62:	83 ec 08             	sub    esp,0x8
c0010e65:	68 00 ff ff 0f       	push   0xfffff00
c0010e6a:	53                   	push   ebx
c0010e6b:	e8 cc 00 00 00       	call   c0010f3c <ReservedFilename::ReservedFilename(int)>
c0010e70:	83 c4 10             	add    esp,0x10
c0010e73:	89 1d 44 d8 02 c0    	mov    DWORD PTR ds:0xc002d844,ebx
c0010e79:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0010e81:	83 ec 0c             	sub    esp,0xc
c0010e84:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010e88:	e8 0f e7 ff ff       	call   c000f59c <malloc>
c0010e8d:	83 c4 10             	add    esp,0x10
c0010e90:	89 c3                	mov    ebx,eax
c0010e92:	83 ec 08             	sub    esp,0x8
c0010e95:	68 02 ff ff 0f       	push   0xfffff02
c0010e9a:	53                   	push   ebx
c0010e9b:	e8 9c 00 00 00       	call   c0010f3c <ReservedFilename::ReservedFilename(int)>
c0010ea0:	83 c4 10             	add    esp,0x10
c0010ea3:	89 1d 48 d8 02 c0    	mov    DWORD PTR ds:0xc002d848,ebx
c0010ea9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010eb1:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0010eb6:	7f 7e                	jg     c0010f36 <UnixFile::UnixFile(int)+0x1aa>
c0010eb8:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0010ec0:	83 ec 0c             	sub    esp,0xc
c0010ec3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010ec7:	e8 d0 e6 ff ff       	call   c000f59c <malloc>
c0010ecc:	83 c4 10             	add    esp,0x10
c0010ecf:	89 c3                	mov    ebx,eax
c0010ed1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ed5:	05 10 ff ff 0f       	add    eax,0xfffff10
c0010eda:	83 ec 08             	sub    esp,0x8
c0010edd:	50                   	push   eax
c0010ede:	53                   	push   ebx
c0010edf:	e8 58 00 00 00       	call   c0010f3c <ReservedFilename::ReservedFilename(int)>
c0010ee4:	83 c4 10             	add    esp,0x10
c0010ee7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010eeb:	89 1c 85 20 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd27e0],ebx
c0010ef2:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0010efa:	83 ec 0c             	sub    esp,0xc
c0010efd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010f01:	e8 96 e6 ff ff       	call   c000f59c <malloc>
c0010f06:	83 c4 10             	add    esp,0x10
c0010f09:	89 c3                	mov    ebx,eax
c0010f0b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f0f:	05 20 ff ff 0f       	add    eax,0xfffff20
c0010f14:	83 ec 08             	sub    esp,0x8
c0010f17:	50                   	push   eax
c0010f18:	53                   	push   ebx
c0010f19:	e8 1e 00 00 00       	call   c0010f3c <ReservedFilename::ReservedFilename(int)>
c0010f1e:	83 c4 10             	add    esp,0x10
c0010f21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f25:	89 1c 85 e0 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2820],ebx
c0010f2c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0010f30:	e9 7c ff ff ff       	jmp    c0010eb1 <UnixFile::UnixFile(int)+0x125>
c0010f35:	90                   	nop
c0010f36:	83 c4 28             	add    esp,0x28
c0010f39:	5b                   	pop    ebx
c0010f3a:	c3                   	ret    
c0010f3b:	90                   	nop

c0010f3c <ReservedFilename::ReservedFilename(int)>:
c0010f3c:	83 ec 0c             	sub    esp,0xc
c0010f3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f43:	83 ec 08             	sub    esp,0x8
c0010f46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f4a:	50                   	push   eax
c0010f4b:	e8 3c fe ff ff       	call   c0010d8c <UnixFile::UnixFile(int)>
c0010f50:	83 c4 10             	add    esp,0x10
c0010f53:	ba 1c a1 02 c0       	mov    edx,0xc002a11c
c0010f58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f5c:	89 10                	mov    DWORD PTR [eax],edx
c0010f5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f62:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010f66:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010f69:	90                   	nop
c0010f6a:	83 c4 0c             	add    esp,0xc
c0010f6d:	c3                   	ret    

c0010f6e <UnixFile::~UnixFile()>:
c0010f6e:	83 ec 1c             	sub    esp,0x1c
c0010f71:	ba 00 a1 02 c0       	mov    edx,0xc002a100
c0010f76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f7a:	89 10                	mov    DWORD PTR [eax],edx
c0010f7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f80:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f83:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0010f88:	7f 73                	jg     c0010ffd <UnixFile::~UnixFile()+0x8f>
c0010f8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010f92:	83 ec 0c             	sub    esp,0xc
c0010f95:	68 58 d8 02 c0       	push   0xc002d858
c0010f9a:	e8 ab 74 01 00       	call   c002844a <LinkedList<UnixFile>::getFirstElement()>
c0010f9f:	83 c4 10             	add    esp,0x10
c0010fa2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010fa6:	83 ec 0c             	sub    esp,0xc
c0010fa9:	68 58 d8 02 c0       	push   0xc002d858
c0010fae:	e8 9f 74 01 00       	call   c0028452 <LinkedList<UnixFile>::removeFirst()>
c0010fb3:	83 c4 10             	add    esp,0x10
c0010fb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010fba:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010fbe:	74 40                	je     c0011000 <UnixFile::~UnixFile()+0x92>
c0010fc0:	83 ec 08             	sub    esp,0x8
c0010fc3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010fc7:	68 58 d8 02 c0       	push   0xc002d858
c0010fcc:	e8 a5 73 01 00       	call   c0028376 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010fd1:	83 c4 10             	add    esp,0x10
c0010fd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fd8:	8d 50 01             	lea    edx,[eax+0x1]
c0010fdb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010fdf:	3d 88 13 00 00       	cmp    eax,0x1388
c0010fe4:	0f 94 c0             	sete   al
c0010fe7:	84 c0                	test   al,al
c0010fe9:	74 a7                	je     c0010f92 <UnixFile::~UnixFile()+0x24>
c0010feb:	83 ec 0c             	sub    esp,0xc
c0010fee:	68 d8 a0 02 c0       	push   0xc002a0d8
c0010ff3:	e8 3d 8d 00 00       	call   c0019d35 <Krnl::panic(char const*)>
c0010ff8:	83 c4 10             	add    esp,0x10
c0010ffb:	eb 95                	jmp    c0010f92 <UnixFile::~UnixFile()+0x24>
c0010ffd:	90                   	nop
c0010ffe:	eb 01                	jmp    c0011001 <UnixFile::~UnixFile()+0x93>
c0011000:	90                   	nop
c0011001:	90                   	nop
c0011002:	83 c4 1c             	add    esp,0x1c
c0011005:	c3                   	ret    

c0011006 <UnixFile::~UnixFile()>:
c0011006:	83 ec 0c             	sub    esp,0xc
c0011009:	83 ec 0c             	sub    esp,0xc
c001100c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011010:	e8 59 ff ff ff       	call   c0010f6e <UnixFile::~UnixFile()>
c0011015:	83 c4 10             	add    esp,0x10
c0011018:	83 ec 08             	sub    esp,0x8
c001101b:	6a 0c                	push   0xc
c001101d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011021:	e8 cb 14 00 00       	call   c00124f1 <operator delete(void*, unsigned long)>
c0011026:	83 c4 10             	add    esp,0x10
c0011029:	83 c4 0c             	add    esp,0xc
c001102c:	c3                   	ret    
c001102d:	90                   	nop

c001102e <ReservedFilename::~ReservedFilename()>:
c001102e:	83 ec 0c             	sub    esp,0xc
c0011031:	ba 1c a1 02 c0       	mov    edx,0xc002a11c
c0011036:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001103a:	89 10                	mov    DWORD PTR [eax],edx
c001103c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011040:	83 ec 0c             	sub    esp,0xc
c0011043:	50                   	push   eax
c0011044:	e8 25 ff ff ff       	call   c0010f6e <UnixFile::~UnixFile()>
c0011049:	83 c4 10             	add    esp,0x10
c001104c:	90                   	nop
c001104d:	83 c4 0c             	add    esp,0xc
c0011050:	c3                   	ret    
c0011051:	90                   	nop

c0011052 <ReservedFilename::~ReservedFilename()>:
c0011052:	83 ec 0c             	sub    esp,0xc
c0011055:	83 ec 0c             	sub    esp,0xc
c0011058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001105c:	e8 cd ff ff ff       	call   c001102e <ReservedFilename::~ReservedFilename()>
c0011061:	83 c4 10             	add    esp,0x10
c0011064:	83 ec 08             	sub    esp,0x8
c0011067:	6a 0c                	push   0xc
c0011069:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001106d:	e8 7f 14 00 00       	call   c00124f1 <operator delete(void*, unsigned long)>
c0011072:	83 c4 10             	add    esp,0x10
c0011075:	83 c4 0c             	add    esp,0xc
c0011078:	c3                   	ret    

c0011079 <getFromFileDescriptor(int)>:
c0011079:	53                   	push   ebx
c001107a:	83 ec 08             	sub    esp,0x8
c001107d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011081:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011087:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c001108d:	7f 2c                	jg     c00110bb <getFromFileDescriptor(int)+0x42>
c001108f:	83 ec 0c             	sub    esp,0xc
c0011092:	68 58 d8 02 c0       	push   0xc002d858
c0011097:	e8 ae 73 01 00       	call   c002844a <LinkedList<UnixFile>::getFirstElement()>
c001109c:	83 c4 10             	add    esp,0x10
c001109f:	85 c0                	test   eax,eax
c00110a1:	75 04                	jne    c00110a7 <getFromFileDescriptor(int)+0x2e>
c00110a3:	31 c0                	xor    eax,eax
c00110a5:	eb 6e                	jmp    c0011115 <getFromFileDescriptor(int)+0x9c>
c00110a7:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00110aa:	74 69                	je     c0011115 <getFromFileDescriptor(int)+0x9c>
c00110ac:	52                   	push   edx
c00110ad:	52                   	push   edx
c00110ae:	50                   	push   eax
c00110af:	68 58 d8 02 c0       	push   0xc002d858
c00110b4:	e8 3b 74 01 00       	call   c00284f4 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00110b9:	eb e1                	jmp    c001109c <getFromFileDescriptor(int)+0x23>
c00110bb:	a1 4c d8 02 c0       	mov    eax,ds:0xc002d84c
c00110c0:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00110c6:	74 4d                	je     c0011115 <getFromFileDescriptor(int)+0x9c>
c00110c8:	a1 50 d8 02 c0       	mov    eax,ds:0xc002d850
c00110cd:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00110d3:	74 40                	je     c0011115 <getFromFileDescriptor(int)+0x9c>
c00110d5:	a1 48 d8 02 c0       	mov    eax,ds:0xc002d848
c00110da:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00110e0:	74 33                	je     c0011115 <getFromFileDescriptor(int)+0x9c>
c00110e2:	a1 44 d8 02 c0       	mov    eax,ds:0xc002d844
c00110e7:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00110ed:	74 26                	je     c0011115 <getFromFileDescriptor(int)+0x9c>
c00110ef:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00110f5:	83 f8 08             	cmp    eax,0x8
c00110f8:	77 09                	ja     c0011103 <getFromFileDescriptor(int)+0x8a>
c00110fa:	8b 04 85 20 d8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd27e0]
c0011101:	eb 12                	jmp    c0011115 <getFromFileDescriptor(int)+0x9c>
c0011103:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011109:	83 fb 08             	cmp    ebx,0x8
c001110c:	77 95                	ja     c00110a3 <getFromFileDescriptor(int)+0x2a>
c001110e:	8b 04 9d e0 d7 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2820]
c0011115:	83 c4 08             	add    esp,0x8
c0011118:	5b                   	pop    ebx
c0011119:	c3                   	ret    

c001111a <__static_initialization_and_destruction_0(int, int)>:
c001111a:	83 ec 0c             	sub    esp,0xc
c001111d:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011122:	75 34                	jne    c0011158 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011124:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001112c:	75 2a                	jne    c0011158 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001112e:	83 ec 0c             	sub    esp,0xc
c0011131:	68 58 d8 02 c0       	push   0xc002d858
c0011136:	e8 f9 71 01 00       	call   c0028334 <LinkedList<UnixFile>::LinkedList()>
c001113b:	83 c4 10             	add    esp,0x10
c001113e:	83 ec 04             	sub    esp,0x4
c0011141:	68 d8 c4 02 c0       	push   0xc002c4d8
c0011146:	68 58 d8 02 c0       	push   0xc002d858
c001114b:	68 32 83 02 c0       	push   0xc0028332
c0011150:	e8 16 13 00 00       	call   c001246b <__cxa_atexit>
c0011155:	83 c4 10             	add    esp,0x10
c0011158:	90                   	nop
c0011159:	83 c4 0c             	add    esp,0xc
c001115c:	c3                   	ret    

c001115d <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c001115d:	83 ec 0c             	sub    esp,0xc
c0011160:	83 ec 08             	sub    esp,0x8
c0011163:	68 ff ff 00 00       	push   0xffff
c0011168:	6a 01                	push   0x1
c001116a:	e8 ab ff ff ff       	call   c001111a <__static_initialization_and_destruction_0(int, int)>
c001116f:	83 c4 10             	add    esp,0x10
c0011172:	83 c4 0c             	add    esp,0xc
c0011175:	c3                   	ret    

c0011176 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011176:	53                   	push   ebx
c0011177:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001117b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001117f:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011185:	89 c8                	mov    eax,ecx
c0011187:	d1 e8                	shr    eax,1
c0011189:	03 05 a8 c6 02 c0    	add    eax,DWORD PTR ds:0xc002c6a8
c001118f:	83 e1 01             	and    ecx,0x1
c0011192:	8a 10                	mov    dl,BYTE PTR [eax]
c0011194:	75 09                	jne    c001119f <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011196:	83 e2 f0             	and    edx,0xfffffff0
c0011199:	09 da                	or     edx,ebx
c001119b:	88 10                	mov    BYTE PTR [eax],dl
c001119d:	5b                   	pop    ebx
c001119e:	c3                   	ret    
c001119f:	c1 e3 04             	shl    ebx,0x4
c00111a2:	83 e2 0f             	and    edx,0xf
c00111a5:	09 da                	or     edx,ebx
c00111a7:	88 10                	mov    BYTE PTR [eax],dl
c00111a9:	5b                   	pop    ebx
c00111aa:	c3                   	ret    

c00111ab <Virt::getPageState(unsigned long)>:
c00111ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111af:	8b 0d a8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6a8
c00111b5:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00111bb:	89 d0                	mov    eax,edx
c00111bd:	d1 e8                	shr    eax,1
c00111bf:	83 e2 01             	and    edx,0x1
c00111c2:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00111c5:	75 04                	jne    c00111cb <Virt::getPageState(unsigned long)+0x20>
c00111c7:	83 e0 0f             	and    eax,0xf
c00111ca:	c3                   	ret    
c00111cb:	c0 e8 04             	shr    al,0x4
c00111ce:	c3                   	ret    

c00111cf <Virt::allocateKernelVirtualPages(int)>:
c00111cf:	55                   	push   ebp
c00111d0:	31 ed                	xor    ebp,ebp
c00111d2:	57                   	push   edi
c00111d3:	56                   	push   esi
c00111d4:	53                   	push   ebx
c00111d5:	31 db                	xor    ebx,ebx
c00111d7:	83 ec 1c             	sub    esp,0x1c
c00111da:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00111de:	8b 3d a4 c6 02 c0    	mov    edi,DWORD PTR ds:0xc002c6a4
c00111e4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00111e9:	57                   	push   edi
c00111ea:	e8 bc ff ff ff       	call   c00111ab <Virt::getPageState(unsigned long)>
c00111ef:	5a                   	pop    edx
c00111f0:	84 c0                	test   al,al
c00111f2:	75 3a                	jne    c001122e <Virt::allocateKernelVirtualPages(int)+0x5f>
c00111f4:	85 db                	test   ebx,ebx
c00111f6:	75 02                	jne    c00111fa <Virt::allocateKernelVirtualPages(int)+0x2b>
c00111f8:	89 fd                	mov    ebp,edi
c00111fa:	43                   	inc    ebx
c00111fb:	39 f3                	cmp    ebx,esi
c00111fd:	74 5a                	je     c0011259 <Virt::allocateKernelVirtualPages(int)+0x8a>
c00111ff:	47                   	inc    edi
c0011200:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011206:	76 31                	jbe    c0011239 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011208:	c7 05 a4 c6 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002c6a4,0xc8000
c0011212:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011217:	75 28                	jne    c0011241 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011219:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001121e:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011223:	57                   	push   edi
c0011224:	e8 82 ff ff ff       	call   c00111ab <Virt::getPageState(unsigned long)>
c0011229:	5a                   	pop    edx
c001122a:	84 c0                	test   al,al
c001122c:	74 c6                	je     c00111f4 <Virt::allocateKernelVirtualPages(int)+0x25>
c001122e:	31 db                	xor    ebx,ebx
c0011230:	47                   	inc    edi
c0011231:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011237:	77 cf                	ja     c0011208 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011239:	89 3d a4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6a4,edi
c001123f:	eb a8                	jmp    c00111e9 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011241:	83 ec 0c             	sub    esp,0xc
c0011244:	68 30 a1 02 c0       	push   0xc002a130
c0011249:	e8 e7 8a 00 00       	call   c0019d35 <Krnl::panic(char const*)>
c001124e:	8b 3d a4 c6 02 c0    	mov    edi,DWORD PTR ds:0xc002c6a4
c0011254:	83 c4 10             	add    esp,0x10
c0011257:	eb 90                	jmp    c00111e9 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011259:	89 2d a4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6a4,ebp
c001125f:	4b                   	dec    ebx
c0011260:	74 5f                	je     c00112c1 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011262:	85 f6                	test   esi,esi
c0011264:	74 3d                	je     c00112a3 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011266:	89 e8                	mov    eax,ebp
c0011268:	31 db                	xor    ebx,ebx
c001126a:	8d 7e ff             	lea    edi,[esi-0x1]
c001126d:	eb 14                	jmp    c0011283 <Virt::allocateKernelVirtualPages(int)+0xb4>
c001126f:	6a 01                	push   0x1
c0011271:	43                   	inc    ebx
c0011272:	50                   	push   eax
c0011273:	e8 fe fe ff ff       	call   c0011176 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011278:	58                   	pop    eax
c0011279:	39 f3                	cmp    ebx,esi
c001127b:	5a                   	pop    edx
c001127c:	74 25                	je     c00112a3 <Virt::allocateKernelVirtualPages(int)+0xd4>
c001127e:	a1 a4 c6 02 c0       	mov    eax,ds:0xc002c6a4
c0011283:	8d 50 01             	lea    edx,[eax+0x1]
c0011286:	85 db                	test   ebx,ebx
c0011288:	89 15 a4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6a4,edx
c001128e:	74 20                	je     c00112b0 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011290:	39 df                	cmp    edi,ebx
c0011292:	75 db                	jne    c001126f <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011294:	6a 03                	push   0x3
c0011296:	43                   	inc    ebx
c0011297:	50                   	push   eax
c0011298:	e8 d9 fe ff ff       	call   c0011176 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001129d:	59                   	pop    ecx
c001129e:	39 f3                	cmp    ebx,esi
c00112a0:	58                   	pop    eax
c00112a1:	75 db                	jne    c001127e <Virt::allocateKernelVirtualPages(int)+0xaf>
c00112a3:	83 c4 1c             	add    esp,0x1c
c00112a6:	89 e8                	mov    eax,ebp
c00112a8:	5b                   	pop    ebx
c00112a9:	c1 e0 0c             	shl    eax,0xc
c00112ac:	5e                   	pop    esi
c00112ad:	5f                   	pop    edi
c00112ae:	5d                   	pop    ebp
c00112af:	c3                   	ret    
c00112b0:	6a 02                	push   0x2
c00112b2:	bb 01 00 00 00       	mov    ebx,0x1
c00112b7:	50                   	push   eax
c00112b8:	e8 b9 fe ff ff       	call   c0011176 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112bd:	58                   	pop    eax
c00112be:	5a                   	pop    edx
c00112bf:	eb bd                	jmp    c001127e <Virt::allocateKernelVirtualPages(int)+0xaf>
c00112c1:	6a 04                	push   0x4
c00112c3:	8d 45 01             	lea    eax,[ebp+0x1]
c00112c6:	55                   	push   ebp
c00112c7:	a3 a4 c6 02 c0       	mov    ds:0xc002c6a4,eax
c00112cc:	e8 a5 fe ff ff       	call   c0011176 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112d1:	59                   	pop    ecx
c00112d2:	89 e8                	mov    eax,ebp
c00112d4:	5b                   	pop    ebx
c00112d5:	c1 e0 0c             	shl    eax,0xc
c00112d8:	83 c4 1c             	add    esp,0x1c
c00112db:	5b                   	pop    ebx
c00112dc:	5e                   	pop    esi
c00112dd:	5f                   	pop    edi
c00112de:	5d                   	pop    ebp
c00112df:	c3                   	ret    

c00112e0 <Virt::freeSwapfilePage(unsigned long)>:
c00112e0:	53                   	push   ebx
c00112e1:	8b 15 6c d8 02 c0    	mov    edx,DWORD PTR ds:0xc002d86c
c00112e7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00112eb:	b8 01 00 00 00       	mov    eax,0x1
c00112f0:	89 cb                	mov    ebx,ecx
c00112f2:	d3 e0                	shl    eax,cl
c00112f4:	c1 eb 05             	shr    ebx,0x5
c00112f7:	f7 d0                	not    eax
c00112f9:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c00112fc:	5b                   	pop    ebx
c00112fd:	c3                   	ret    

c00112fe <Virt::swapIDToSector(unsigned long)>:
c00112fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011302:	0f af 05 ac c6 02 c0 	imul   eax,DWORD PTR ds:0xc002c6ac
c0011309:	03 05 b4 c6 02 c0    	add    eax,DWORD PTR ds:0xc002c6b4
c001130f:	c3                   	ret    

c0011310 <Virt::allocateSwapfilePage()>:
c0011310:	55                   	push   ebp
c0011311:	31 d2                	xor    edx,edx
c0011313:	57                   	push   edi
c0011314:	56                   	push   esi
c0011315:	53                   	push   ebx
c0011316:	83 ec 0c             	sub    esp,0xc
c0011319:	8b 0d ac c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6ac
c001131f:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0011324:	f7 f1                	div    ecx
c0011326:	39 0d b0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6b0,ecx
c001132c:	72 2d                	jb     c001135b <Virt::allocateSwapfilePage()+0x4b>
c001132e:	8b 35 6c d8 02 c0    	mov    esi,DWORD PTR ds:0xc002d86c
c0011334:	8b 16                	mov    edx,DWORD PTR [esi]
c0011336:	f6 c2 01             	test   dl,0x1
c0011339:	74 3c                	je     c0011377 <Virt::allocateSwapfilePage()+0x67>
c001133b:	31 c9                	xor    ecx,ecx
c001133d:	bf 01 00 00 00       	mov    edi,0x1
c0011342:	eb 12                	jmp    c0011356 <Virt::allocateSwapfilePage()+0x46>
c0011344:	89 fd                	mov    ebp,edi
c0011346:	89 ca                	mov    edx,ecx
c0011348:	d3 e5                	shl    ebp,cl
c001134a:	c1 ea 05             	shr    edx,0x5
c001134d:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011350:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011352:	85 ea                	test   edx,ebp
c0011354:	74 2a                	je     c0011380 <Virt::allocateSwapfilePage()+0x70>
c0011356:	41                   	inc    ecx
c0011357:	39 c8                	cmp    eax,ecx
c0011359:	77 e9                	ja     c0011344 <Virt::allocateSwapfilePage()+0x34>
c001135b:	83 ec 0c             	sub    esp,0xc
c001135e:	68 b7 a2 02 c0       	push   0xc002a2b7
c0011363:	e8 cd 89 00 00       	call   c0019d35 <Krnl::panic(char const*)>
c0011368:	83 c4 10             	add    esp,0x10
c001136b:	31 c9                	xor    ecx,ecx
c001136d:	83 c4 0c             	add    esp,0xc
c0011370:	89 c8                	mov    eax,ecx
c0011372:	5b                   	pop    ebx
c0011373:	5e                   	pop    esi
c0011374:	5f                   	pop    edi
c0011375:	5d                   	pop    ebp
c0011376:	c3                   	ret    
c0011377:	89 f3                	mov    ebx,esi
c0011379:	bd 01 00 00 00       	mov    ebp,0x1
c001137e:	31 c9                	xor    ecx,ecx
c0011380:	09 ea                	or     edx,ebp
c0011382:	89 c8                	mov    eax,ecx
c0011384:	89 13                	mov    DWORD PTR [ebx],edx
c0011386:	83 c4 0c             	add    esp,0xc
c0011389:	5b                   	pop    ebx
c001138a:	5e                   	pop    esi
c001138b:	5f                   	pop    edi
c001138c:	5d                   	pop    ebp
c001138d:	c3                   	ret    

c001138e <Virt::virtualMemorySetup()>:
c001138e:	53                   	push   ebx
c001138f:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011394:	6a 0f                	push   0xf
c0011396:	53                   	push   ebx
c0011397:	43                   	inc    ebx
c0011398:	e8 d9 fd ff ff       	call   c0011176 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001139d:	58                   	pop    eax
c001139e:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00113a4:	5a                   	pop    edx
c00113a5:	75 ed                	jne    c0011394 <Virt::virtualMemorySetup()+0x6>
c00113a7:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113ac:	6a 00                	push   0x0
c00113ae:	53                   	push   ebx
c00113af:	43                   	inc    ebx
c00113b0:	e8 c1 fd ff ff       	call   c0011176 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113b5:	59                   	pop    ecx
c00113b6:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00113bc:	58                   	pop    eax
c00113bd:	75 ed                	jne    c00113ac <Virt::virtualMemorySetup()+0x1e>
c00113bf:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00113c4:	6a 0f                	push   0xf
c00113c6:	53                   	push   ebx
c00113c7:	43                   	inc    ebx
c00113c8:	e8 a9 fd ff ff       	call   c0011176 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113cd:	58                   	pop    eax
c00113ce:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00113d4:	5a                   	pop    edx
c00113d5:	75 ed                	jne    c00113c4 <Virt::virtualMemorySetup()+0x36>
c00113d7:	5b                   	pop    ebx
c00113d8:	c3                   	ret    

c00113d9 <Virt::setupPageSwapping(int)>:
c00113d9:	57                   	push   edi
c00113da:	56                   	push   esi
c00113db:	53                   	push   ebx
c00113dc:	83 ec 1c             	sub    esp,0x1c
c00113df:	68 14 01 00 00       	push   0x114
c00113e4:	e8 b3 e1 ff ff       	call   c000f59c <malloc>
c00113e9:	83 c4 0c             	add    esp,0xc
c00113ec:	89 c6                	mov    esi,eax
c00113ee:	ff 35 50 0c 03 c0    	push   DWORD PTR ds:0xc0030c50
c00113f4:	68 ce a2 02 c0       	push   0xc002a2ce
c00113f9:	50                   	push   eax
c00113fa:	e8 29 17 00 00       	call   c0012b28 <File::File(char const*, Process*)>
c00113ff:	89 34 24             	mov    DWORD PTR [esp],esi
c0011402:	e8 fd 18 00 00       	call   c0012d04 <File::unlink()>
c0011407:	58                   	pop    eax
c0011408:	5a                   	pop    edx
c0011409:	6a 12                	push   0x12
c001140b:	56                   	push   esi
c001140c:	e8 7b 17 00 00       	call   c0012b8c <File::open(FileOpenMode)>
c0011411:	83 c4 10             	add    esp,0x10
c0011414:	85 c0                	test   eax,eax
c0011416:	0f 85 2f 01 00 00    	jne    c001154b <Virt::setupPageSwapping(int)+0x172>
c001141c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011420:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011428:	c1 e3 08             	shl    ebx,0x8
c001142b:	83 ec 0c             	sub    esp,0xc
c001142e:	68 00 00 01 00       	push   0x10000
c0011433:	e8 64 e1 ff ff       	call   c000f59c <malloc>
c0011438:	83 c4 0c             	add    esp,0xc
c001143b:	89 c7                	mov    edi,eax
c001143d:	68 00 00 01 00       	push   0x10000
c0011442:	68 ee 00 00 00       	push   0xee
c0011447:	50                   	push   eax
c0011448:	e8 03 f3 fe ff       	call   c0000750 <memset>
c001144d:	83 c4 10             	add    esp,0x10
c0011450:	85 db                	test   ebx,ebx
c0011452:	79 03                	jns    c0011457 <Virt::setupPageSwapping(int)+0x7e>
c0011454:	83 c3 0f             	add    ebx,0xf
c0011457:	c1 fb 04             	sar    ebx,0x4
c001145a:	4b                   	dec    ebx
c001145b:	83 fb ff             	cmp    ebx,0xffffffff
c001145e:	74 41                	je     c00114a1 <Virt::setupPageSwapping(int)+0xc8>
c0011460:	83 ec 0c             	sub    esp,0xc
c0011463:	8b 06                	mov    eax,DWORD PTR [esi]
c0011465:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011469:	52                   	push   edx
c001146a:	57                   	push   edi
c001146b:	6a 00                	push   0x0
c001146d:	68 00 00 01 00       	push   0x10000
c0011472:	56                   	push   esi
c0011473:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011476:	83 c4 20             	add    esp,0x20
c0011479:	85 c0                	test   eax,eax
c001147b:	0f 85 b5 00 00 00    	jne    c0011536 <Virt::setupPageSwapping(int)+0x15d>
c0011481:	81 7c 24 0c 00 00 01 00 	cmp    DWORD PTR [esp+0xc],0x10000
c0011489:	74 cf                	je     c001145a <Virt::setupPageSwapping(int)+0x81>
c001148b:	83 ec 0c             	sub    esp,0xc
c001148e:	4b                   	dec    ebx
c001148f:	68 00 a3 02 c0       	push   0xc002a300
c0011494:	e8 9c 88 00 00       	call   c0019d35 <Krnl::panic(char const*)>
c0011499:	83 c4 10             	add    esp,0x10
c001149c:	83 fb ff             	cmp    ebx,0xffffffff
c001149f:	75 bf                	jne    c0011460 <Virt::setupPageSwapping(int)+0x87>
c00114a1:	83 ec 0c             	sub    esp,0xc
c00114a4:	56                   	push   esi
c00114a5:	e8 40 17 00 00       	call   c0012bea <File::close()>
c00114aa:	89 3c 24             	mov    DWORD PTR [esp],edi
c00114ad:	e8 0a e1 ff ff       	call   c000f5bc <rfree>
c00114b2:	83 c4 10             	add    esp,0x10
c00114b5:	85 f6                	test   esi,esi
c00114b7:	74 0c                	je     c00114c5 <Virt::setupPageSwapping(int)+0xec>
c00114b9:	83 ec 0c             	sub    esp,0xc
c00114bc:	8b 06                	mov    eax,DWORD PTR [esi]
c00114be:	56                   	push   esi
c00114bf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00114c2:	83 c4 10             	add    esp,0x10
c00114c5:	83 ec 08             	sub    esp,0x8
c00114c8:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c00114cd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00114d3:	8b 10                	mov    edx,DWORD PTR [eax]
c00114d5:	68 ce a2 02 c0       	push   0xc002a2ce
c00114da:	50                   	push   eax
c00114db:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00114de:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00114e2:	c6 05 b8 c6 02 c0 43 	mov    BYTE PTR ds:0xc002c6b8,0x43
c00114e9:	c1 e2 0b             	shl    edx,0xb
c00114ec:	a3 b4 c6 02 c0       	mov    ds:0xc002c6b4,eax
c00114f1:	89 15 b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,edx
c00114f7:	c7 05 ac c6 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002c6ac,0x8
c0011501:	c1 ea 08             	shr    edx,0x8
c0011504:	89 14 24             	mov    DWORD PTR [esp],edx
c0011507:	e8 90 e0 ff ff       	call   c000f59c <malloc>
c001150c:	83 c4 0c             	add    esp,0xc
c001150f:	89 c1                	mov    ecx,eax
c0011511:	a3 6c d8 02 c0       	mov    ds:0xc002d86c,eax
c0011516:	31 d2                	xor    edx,edx
c0011518:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001151d:	f7 35 ac c6 02 c0    	div    DWORD PTR ds:0xc002c6ac
c0011523:	c1 e8 05             	shr    eax,0x5
c0011526:	50                   	push   eax
c0011527:	6a 00                	push   0x0
c0011529:	51                   	push   ecx
c001152a:	e8 21 f2 fe ff       	call   c0000750 <memset>
c001152f:	83 c4 20             	add    esp,0x20
c0011532:	5b                   	pop    ebx
c0011533:	5e                   	pop    esi
c0011534:	5f                   	pop    edi
c0011535:	c3                   	ret    
c0011536:	83 ec 0c             	sub    esp,0xc
c0011539:	68 00 a3 02 c0       	push   0xc002a300
c001153e:	e8 f2 87 00 00       	call   c0019d35 <Krnl::panic(char const*)>
c0011543:	83 c4 10             	add    esp,0x10
c0011546:	e9 36 ff ff ff       	jmp    c0011481 <Virt::setupPageSwapping(int)+0xa8>
c001154b:	83 ec 0c             	sub    esp,0xc
c001154e:	68 e5 a2 02 c0       	push   0xc002a2e5
c0011553:	e8 dd 87 00 00       	call   c0019d35 <Krnl::panic(char const*)>
c0011558:	83 c4 10             	add    esp,0x10
c001155b:	e9 bc fe ff ff       	jmp    c001141c <Virt::setupPageSwapping(int)+0x43>

c0011560 <VAS::VAS()>:
c0011560:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011564:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001156b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001156f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011576:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001157a:	a3 70 d8 02 c0       	mov    ds:0xc002d870,eax
c001157f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011583:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011587:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001158b:	c6 00 01             	mov    BYTE PTR [eax],0x1
c001158e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011592:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0011599:	90                   	nop
c001159a:	c3                   	ret    
c001159b:	90                   	nop

c001159c <VAS::VAS(VAS*)>:
c001159c:	83 ec 0c             	sub    esp,0xc
c001159f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115a3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00115aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115ae:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00115b5:	83 ec 0c             	sub    esp,0xc
c00115b8:	68 50 a1 02 c0       	push   0xc002a150
c00115bd:	e8 73 87 00 00       	call   c0019d35 <Krnl::panic(char const*)>
c00115c2:	83 c4 10             	add    esp,0x10
c00115c5:	90                   	nop
c00115c6:	83 c4 0c             	add    esp,0xc
c00115c9:	c3                   	ret    

c00115ca <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00115ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00115ce:	89 c2                	mov    edx,eax
c00115d0:	c1 e8 0a             	shr    eax,0xa
c00115d3:	c1 ea 16             	shr    edx,0x16
c00115d6:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00115db:	19 c9                	sbb    ecx,ecx
c00115dd:	c1 e2 0c             	shl    edx,0xc
c00115e0:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00115e6:	25 fc 0f 00 00       	and    eax,0xffc
c00115eb:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00115f2:	01 d0                	add    eax,edx
c00115f4:	c3                   	ret    
c00115f5:	90                   	nop

c00115f6 <VAS::getPageTableEntry(unsigned long)>:
c00115f6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00115fa:	89 ca                	mov    edx,ecx
c00115fc:	c1 e9 0a             	shr    ecx,0xa
c00115ff:	c1 ea 16             	shr    edx,0x16
c0011602:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011608:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c001160e:	c1 e0 0c             	shl    eax,0xc
c0011611:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011614:	c3                   	ret    

c0011615 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011615:	57                   	push   edi
c0011616:	56                   	push   esi
c0011617:	be 01 00 00 00       	mov    esi,0x1
c001161c:	53                   	push   ebx
c001161d:	83 ec 10             	sub    esp,0x10
c0011620:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011624:	c1 eb 0c             	shr    ebx,0xc
c0011627:	eb 3f                	jmp    c0011668 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011629:	83 ec 08             	sub    esp,0x8
c001162c:	57                   	push   edi
c001162d:	ff 35 70 d8 02 c0    	push   DWORD PTR ds:0xc002d870
c0011633:	e8 be ff ff ff       	call   c00115f6 <VAS::getPageTableEntry(unsigned long)>
c0011638:	83 c4 10             	add    esp,0x10
c001163b:	8b 00                	mov    eax,DWORD PTR [eax]
c001163d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011641:	f6 c4 04             	test   ah,0x4
c0011644:	75 5f                	jne    c00116a5 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011646:	80 fa 04             	cmp    dl,0x4
c0011649:	74 78                	je     c00116c3 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c001164b:	80 fa 02             	cmp    dl,0x2
c001164e:	0f 84 88 00 00 00    	je     c00116dc <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011654:	80 fa 03             	cmp    dl,0x3
c0011657:	0f 84 ad 00 00 00    	je     c001170a <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c001165d:	fe ca                	dec    dl
c001165f:	0f 84 92 00 00 00    	je     c00116f7 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011665:	43                   	inc    ebx
c0011666:	31 f6                	xor    esi,esi
c0011668:	53                   	push   ebx
c0011669:	89 df                	mov    edi,ebx
c001166b:	e8 3b fb ff ff       	call   c00111ab <Virt::getPageState(unsigned long)>
c0011670:	c1 e7 0c             	shl    edi,0xc
c0011673:	59                   	pop    ecx
c0011674:	84 c0                	test   al,al
c0011676:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001167a:	75 ad                	jne    c0011629 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c001167c:	83 ec 0c             	sub    esp,0xc
c001167f:	68 06 a3 02 c0       	push   0xc002a306
c0011684:	e8 ac 86 00 00       	call   c0019d35 <Krnl::panic(char const*)>
c0011689:	58                   	pop    eax
c001168a:	5a                   	pop    edx
c001168b:	57                   	push   edi
c001168c:	ff 35 70 d8 02 c0    	push   DWORD PTR ds:0xc002d870
c0011692:	e8 5f ff ff ff       	call   c00115f6 <VAS::getPageTableEntry(unsigned long)>
c0011697:	83 c4 10             	add    esp,0x10
c001169a:	8b 00                	mov    eax,DWORD PTR [eax]
c001169c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00116a0:	f6 c4 04             	test   ah,0x4
c00116a3:	74 c0                	je     c0011665 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116a5:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00116a9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00116ae:	83 ec 0c             	sub    esp,0xc
c00116b1:	50                   	push   eax
c00116b2:	e8 2e e2 ff ff       	call   c000f8e5 <Phys::freePage(unsigned long)>
c00116b7:	83 c4 10             	add    esp,0x10
c00116ba:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00116be:	80 fa 04             	cmp    dl,0x4
c00116c1:	75 88                	jne    c001164b <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00116c3:	89 f0                	mov    eax,esi
c00116c5:	84 c0                	test   al,al
c00116c7:	75 47                	jne    c0011710 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c00116c9:	c7 44 24 20 74 a1 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a174
c00116d1:	83 c4 10             	add    esp,0x10
c00116d4:	5b                   	pop    ebx
c00116d5:	5e                   	pop    esi
c00116d6:	5f                   	pop    edi
c00116d7:	e9 59 86 00 00       	jmp    c0019d35 <Krnl::panic(char const*)>
c00116dc:	89 f0                	mov    eax,esi
c00116de:	84 c0                	test   al,al
c00116e0:	75 15                	jne    c00116f7 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00116e2:	83 ec 0c             	sub    esp,0xc
c00116e5:	68 22 a3 02 c0       	push   0xc002a322
c00116ea:	e8 46 86 00 00       	call   c0019d35 <Krnl::panic(char const*)>
c00116ef:	83 c4 10             	add    esp,0x10
c00116f2:	e9 6e ff ff ff       	jmp    c0011665 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116f7:	83 ec 08             	sub    esp,0x8
c00116fa:	6a 00                	push   0x0
c00116fc:	53                   	push   ebx
c00116fd:	e8 74 fa ff ff       	call   c0011176 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011702:	83 c4 10             	add    esp,0x10
c0011705:	e9 5b ff ff ff       	jmp    c0011665 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001170a:	89 f0                	mov    eax,esi
c001170c:	84 c0                	test   al,al
c001170e:	75 15                	jne    c0011725 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011710:	83 ec 08             	sub    esp,0x8
c0011713:	6a 00                	push   0x0
c0011715:	53                   	push   ebx
c0011716:	e8 5b fa ff ff       	call   c0011176 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001171b:	83 c4 10             	add    esp,0x10
c001171e:	83 c4 10             	add    esp,0x10
c0011721:	5b                   	pop    ebx
c0011722:	5e                   	pop    esi
c0011723:	5f                   	pop    edi
c0011724:	c3                   	ret    
c0011725:	c7 44 24 20 3e a3 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a33e
c001172d:	83 c4 10             	add    esp,0x10
c0011730:	5b                   	pop    ebx
c0011731:	5e                   	pop    esi
c0011732:	5f                   	pop    edi
c0011733:	e9 fd 85 00 00       	jmp    c0019d35 <Krnl::panic(char const*)>

c0011738 <VAS::freeAllocatedPages(unsigned long)>:
c0011738:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001173c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011740:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011744:	74 09                	je     c001174f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011746:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001174a:	e9 c6 fe ff ff       	jmp    c0011615 <Virt::freeKernelVirtualPages(unsigned long)>
c001174f:	c7 44 24 04 98 a1 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a198
c0011757:	e9 6d 0e 00 00       	jmp    c00125c9 <Dbg::kprintf(char const*, ...)>

c001175c <VAS::virtualToPhysical(unsigned long)>:
c001175c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011760:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011764:	e8 8d fe ff ff       	call   c00115f6 <VAS::getPageTableEntry(unsigned long)>
c0011769:	5a                   	pop    edx
c001176a:	8b 00                	mov    eax,DWORD PTR [eax]
c001176c:	59                   	pop    ecx
c001176d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011772:	c3                   	ret    
c0011773:	90                   	nop

c0011774 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011774:	55                   	push   ebp
c0011775:	57                   	push   edi
c0011776:	56                   	push   esi
c0011777:	53                   	push   ebx
c0011778:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001177c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011780:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011784:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011788:	85 db                	test   ebx,ebx
c001178a:	7e 22                	jle    c00117ae <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c001178c:	c1 e3 0c             	shl    ebx,0xc
c001178f:	01 f3                	add    ebx,esi
c0011791:	56                   	push   esi
c0011792:	81 c6 00 10 00 00    	add    esi,0x1000
c0011798:	55                   	push   ebp
c0011799:	e8 58 fe ff ff       	call   c00115f6 <VAS::getPageTableEntry(unsigned long)>
c001179e:	5a                   	pop    edx
c001179f:	59                   	pop    ecx
c00117a0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00117a2:	21 f9                	and    ecx,edi
c00117a4:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00117a8:	39 f3                	cmp    ebx,esi
c00117aa:	89 08                	mov    DWORD PTR [eax],ecx
c00117ac:	75 e3                	jne    c0011791 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00117ae:	5b                   	pop    ebx
c00117af:	5e                   	pop    esi
c00117b0:	5f                   	pop    edi
c00117b1:	5d                   	pop    ebp
c00117b2:	c3                   	ret    
c00117b3:	90                   	nop

c00117b4 <VAS::setToWriteCombining(unsigned long, int)>:
c00117b4:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c00117b9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00117bf:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00117c6:	75 01                	jne    c00117c9 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00117c8:	c3                   	ret    
c00117c9:	68 80 00 00 00       	push   0x80
c00117ce:	6a ff                	push   0xffffffff
c00117d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00117d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00117d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00117dc:	e8 93 ff ff ff       	call   c0011774 <VAS::reflagRange(unsigned long, int, int, int)>
c00117e1:	83 c4 14             	add    esp,0x14
c00117e4:	c3                   	ret    
c00117e5:	90                   	nop

c00117e6 <VAS::mapOtherVASIn(bool, VAS*)>:
c00117e6:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00117eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00117ef:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00117f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117f6:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00117f9:	19 c0                	sbb    eax,eax
c00117fb:	83 ca 03             	or     edx,0x3
c00117fe:	83 e0 fc             	and    eax,0xfffffffc
c0011801:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011808:	0f 20 d8             	mov    eax,cr3
c001180b:	0f 22 d8             	mov    cr3,eax
c001180e:	c3                   	ret    
c001180f:	90                   	nop

c0011810 <VAS::~VAS()>:
c0011810:	83 ec 2c             	sub    esp,0x2c
c0011813:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001181b:	fa                   	cli    
c001181c:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c0011821:	40                   	inc    eax
c0011822:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c0011827:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001182c:	8b 00                	mov    eax,DWORD PTR [eax]
c001182e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011831:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011837:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001183b:	6a 01                	push   0x1
c001183d:	50                   	push   eax
c001183e:	e8 a3 ff ff ff       	call   c00117e6 <VAS::mapOtherVASIn(bool, VAS*)>
c0011843:	83 c4 0c             	add    esp,0xc
c0011846:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001184e:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011856:	0f 8f d4 00 00 00    	jg     c0011930 <VAS::~VAS()+0x120>
c001185c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011860:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011863:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011867:	c1 e2 02             	shl    edx,0x2
c001186a:	01 d0                	add    eax,edx
c001186c:	8b 00                	mov    eax,DWORD PTR [eax]
c001186e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011876:	83 e0 01             	and    eax,0x1
c0011879:	0f 84 a8 00 00 00    	je     c0011927 <VAS::~VAS()+0x117>
c001187f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011887:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c001188f:	7f 72                	jg     c0011903 <VAS::~VAS()+0xf3>
c0011891:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011895:	c1 e0 0a             	shl    eax,0xa
c0011898:	89 c2                	mov    edx,eax
c001189a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001189e:	01 d0                	add    eax,edx
c00118a0:	c1 e0 0c             	shl    eax,0xc
c00118a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00118a7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00118ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00118ae:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00118b1:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00118b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00118bb:	6a 01                	push   0x1
c00118bd:	50                   	push   eax
c00118be:	e8 07 fd ff ff       	call   c00115ca <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00118c3:	83 c4 0c             	add    esp,0xc
c00118c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00118ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00118ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00118d0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00118d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118d8:	25 01 04 00 00       	and    eax,0x401
c00118dd:	3d 01 04 00 00       	cmp    eax,0x401
c00118e2:	75 19                	jne    c00118fd <VAS::~VAS()+0xed>
c00118e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118e8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00118ed:	83 ec 0c             	sub    esp,0xc
c00118f0:	50                   	push   eax
c00118f1:	e8 ef df ff ff       	call   c000f8e5 <Phys::freePage(unsigned long)>
c00118f6:	83 c4 10             	add    esp,0x10
c00118f9:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118fd:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011901:	eb 84                	jmp    c0011887 <VAS::~VAS()+0x77>
c0011903:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011907:	25 00 04 00 00       	and    eax,0x400
c001190c:	74 19                	je     c0011927 <VAS::~VAS()+0x117>
c001190e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011912:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011917:	83 ec 0c             	sub    esp,0xc
c001191a:	50                   	push   eax
c001191b:	e8 c5 df ff ff       	call   c000f8e5 <Phys::freePage(unsigned long)>
c0011920:	83 c4 10             	add    esp,0x10
c0011923:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011927:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001192b:	e9 1e ff ff ff       	jmp    c001184e <VAS::~VAS()+0x3e>
c0011930:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011934:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011937:	83 ec 0c             	sub    esp,0xc
c001193a:	50                   	push   eax
c001193b:	e8 d5 fc ff ff       	call   c0011615 <Virt::freeKernelVirtualPages(unsigned long)>
c0011940:	83 c4 10             	add    esp,0x10
c0011943:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011947:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001194a:	83 ec 0c             	sub    esp,0xc
c001194d:	50                   	push   eax
c001194e:	e8 92 df ff ff       	call   c000f8e5 <Phys::freePage(unsigned long)>
c0011953:	83 c4 10             	add    esp,0x10
c0011956:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001195a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001195e:	c1 e0 02             	shl    eax,0x2
c0011961:	83 ec 08             	sub    esp,0x8
c0011964:	50                   	push   eax
c0011965:	68 bc a1 02 c0       	push   0xc002a1bc
c001196a:	e8 5a 0c 00 00       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c001196f:	83 c4 10             	add    esp,0x10
c0011972:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c0011977:	48                   	dec    eax
c0011978:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001197d:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c0011982:	85 c0                	test   eax,eax
c0011984:	75 01                	jne    c0011987 <VAS::~VAS()+0x177>
c0011986:	fb                   	sti    
c0011987:	90                   	nop
c0011988:	83 c4 2c             	add    esp,0x2c
c001198b:	c3                   	ret    

c001198c <VAS::mapPage(unsigned long, unsigned long, int)>:
c001198c:	55                   	push   ebp
c001198d:	57                   	push   edi
c001198e:	56                   	push   esi
c001198f:	53                   	push   ebx
c0011990:	83 ec 1c             	sub    esp,0x1c
c0011993:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011997:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001199b:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00119a1:	77 08                	ja     c00119ab <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c00119a3:	0f 20 d8             	mov    eax,cr3
c00119a6:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c00119a9:	75 47                	jne    c00119f2 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c00119ab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00119af:	09 d8                	or     eax,ebx
c00119b1:	a9 ff 0f 00 00       	test   eax,0xfff
c00119b6:	75 57                	jne    c0011a0f <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c00119b8:	89 de                	mov    esi,ebx
c00119ba:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00119bd:	c1 ee 16             	shr    esi,0x16
c00119c0:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00119c7:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00119cb:	74 54                	je     c0011a21 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c00119cd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00119d1:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00119d7:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00119db:	c1 e6 0c             	shl    esi,0xc
c00119de:	c1 eb 0a             	shr    ebx,0xa
c00119e1:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00119e7:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00119ea:	83 c4 1c             	add    esp,0x1c
c00119ed:	5b                   	pop    ebx
c00119ee:	5e                   	pop    esi
c00119ef:	5f                   	pop    edi
c00119f0:	5d                   	pop    ebp
c00119f1:	c3                   	ret    
c00119f2:	83 ec 0c             	sub    esp,0xc
c00119f5:	68 dc a1 02 c0       	push   0xc002a1dc
c00119fa:	e8 ca 0b 00 00       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c00119ff:	83 c4 10             	add    esp,0x10
c0011a02:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011a06:	09 d8                	or     eax,ebx
c0011a08:	a9 ff 0f 00 00       	test   eax,0xfff
c0011a0d:	74 a9                	je     c00119b8 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011a0f:	83 ec 0c             	sub    esp,0xc
c0011a12:	68 44 a2 02 c0       	push   0xc002a244
c0011a17:	e8 19 83 00 00       	call   c0019d35 <Krnl::panic(char const*)>
c0011a1c:	83 c4 10             	add    esp,0x10
c0011a1f:	eb 97                	jmp    c00119b8 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011a21:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011a25:	e8 16 df ff ff       	call   c000f940 <Phys::allocatePage()>
c0011a2a:	83 ec 0c             	sub    esp,0xc
c0011a2d:	89 c5                	mov    ebp,eax
c0011a2f:	8b 0d 70 d8 02 c0    	mov    ecx,DWORD PTR ds:0xc002d870
c0011a35:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011a39:	6a 01                	push   0x1
c0011a3b:	e8 8f f7 ff ff       	call   c00111cf <Virt::allocateKernelVirtualPages(int)>
c0011a40:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011a47:	6a 01                	push   0x1
c0011a49:	50                   	push   eax
c0011a4a:	55                   	push   ebp
c0011a4b:	81 cd 07 04 00 00    	or     ebp,0x407
c0011a51:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011a55:	51                   	push   ecx
c0011a56:	e8 27 02 00 00       	call   c0011c82 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011a5b:	83 c4 1c             	add    esp,0x1c
c0011a5e:	68 00 10 00 00       	push   0x1000
c0011a63:	6a 00                	push   0x0
c0011a65:	50                   	push   eax
c0011a66:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011a6a:	e8 e1 ec fe ff       	call   c0000750 <memset>
c0011a6f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011a73:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011a76:	e8 9a fb ff ff       	call   c0011615 <Virt::freeKernelVirtualPages(unsigned long)>
c0011a7b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011a7f:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011a82:	83 c4 10             	add    esp,0x10
c0011a85:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011a88:	e9 40 ff ff ff       	jmp    c00119cd <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0011a8d:	90                   	nop

c0011a8e <VAS::allocatePages(int, int)>:
c0011a8e:	55                   	push   ebp
c0011a8f:	57                   	push   edi
c0011a90:	56                   	push   esi
c0011a91:	53                   	push   ebx
c0011a92:	83 ec 1c             	sub    esp,0x1c
c0011a95:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011a99:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0011a9e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011aa4:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011aaa:	83 e0 01             	and    eax,0x1
c0011aad:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011ab1:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011ab5:	0f 85 cc 00 00 00    	jne    c0011b87 <VAS::allocatePages(int, int)+0xf9>
c0011abb:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011abe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011ac2:	85 c0                	test   eax,eax
c0011ac4:	0f 84 a1 00 00 00    	je     c0011b6b <VAS::allocatePages(int, int)+0xdd>
c0011aca:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011ace:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ad2:	c1 e6 0c             	shl    esi,0xc
c0011ad5:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011ad9:	85 c0                	test   eax,eax
c0011adb:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011ade:	7e 33                	jle    c0011b13 <VAS::allocatePages(int, int)+0x85>
c0011ae0:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011ae4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011ae8:	81 cd 00 04 00 00    	or     ebp,0x400
c0011aee:	e8 4d de ff ff       	call   c000f940 <Phys::allocatePage()>
c0011af3:	55                   	push   ebp
c0011af4:	53                   	push   ebx
c0011af5:	50                   	push   eax
c0011af6:	57                   	push   edi
c0011af7:	e8 90 fe ff ff       	call   c001198c <VAS::mapPage(unsigned long, unsigned long, int)>
c0011afc:	83 c4 10             	add    esp,0x10
c0011aff:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011b04:	74 03                	je     c0011b09 <VAS::allocatePages(int, int)+0x7b>
c0011b06:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011b09:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011b0f:	39 de                	cmp    esi,ebx
c0011b11:	75 db                	jne    c0011aee <VAS::allocatePages(int, int)+0x60>
c0011b13:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011b18:	75 12                	jne    c0011b2c <VAS::allocatePages(int, int)+0x9e>
c0011b1a:	0f 20 d8             	mov    eax,cr3
c0011b1d:	0f 22 d8             	mov    cr3,eax
c0011b20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b24:	83 c4 1c             	add    esp,0x1c
c0011b27:	5b                   	pop    ebx
c0011b28:	5e                   	pop    esi
c0011b29:	5f                   	pop    edi
c0011b2a:	5d                   	pop    ebp
c0011b2b:	c3                   	ret    
c0011b2c:	c1 ee 0a             	shr    esi,0xa
c0011b2f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b33:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011b39:	c1 eb 0a             	shr    ebx,0xa
c0011b3c:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011b42:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011b48:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011b4e:	39 c3                	cmp    ebx,eax
c0011b50:	77 ce                	ja     c0011b20 <VAS::allocatePages(int, int)+0x92>
c0011b52:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011b55:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011b5b:	39 d8                	cmp    eax,ebx
c0011b5d:	73 f3                	jae    c0011b52 <VAS::allocatePages(int, int)+0xc4>
c0011b5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b63:	83 c4 1c             	add    esp,0x1c
c0011b66:	5b                   	pop    ebx
c0011b67:	5e                   	pop    esi
c0011b68:	5f                   	pop    edi
c0011b69:	5d                   	pop    ebp
c0011b6a:	c3                   	ret    
c0011b6b:	83 ec 0c             	sub    esp,0xc
c0011b6e:	68 68 a2 02 c0       	push   0xc002a268
c0011b73:	e8 bd 81 00 00       	call   c0019d35 <Krnl::panic(char const*)>
c0011b78:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011b7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b7f:	83 c4 10             	add    esp,0x10
c0011b82:	e9 43 ff ff ff       	jmp    c0011aca <VAS::allocatePages(int, int)+0x3c>
c0011b87:	83 ec 0c             	sub    esp,0xc
c0011b8a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011b8e:	e8 3c f6 ff ff       	call   c00111cf <Virt::allocateKernelVirtualPages(int)>
c0011b93:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b97:	83 c4 10             	add    esp,0x10
c0011b9a:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011b9f:	0f 87 9b 00 00 00    	ja     c0011c40 <VAS::allocatePages(int, int)+0x1b2>
c0011ba5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011ba9:	85 d2                	test   edx,edx
c0011bab:	7e 3c                	jle    c0011be9 <VAS::allocatePages(int, int)+0x15b>
c0011bad:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011bb1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011bb5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011bb9:	c1 e5 0c             	shl    ebp,0xc
c0011bbc:	81 ce 00 04 00 00    	or     esi,0x400
c0011bc2:	01 dd                	add    ebp,ebx
c0011bc4:	e8 77 dd ff ff       	call   c000f940 <Phys::allocatePage()>
c0011bc9:	56                   	push   esi
c0011bca:	53                   	push   ebx
c0011bcb:	50                   	push   eax
c0011bcc:	57                   	push   edi
c0011bcd:	e8 ba fd ff ff       	call   c001198c <VAS::mapPage(unsigned long, unsigned long, int)>
c0011bd2:	83 c4 10             	add    esp,0x10
c0011bd5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011bda:	74 03                	je     c0011bdf <VAS::allocatePages(int, int)+0x151>
c0011bdc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011bdf:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011be5:	39 dd                	cmp    ebp,ebx
c0011be7:	75 db                	jne    c0011bc4 <VAS::allocatePages(int, int)+0x136>
c0011be9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011bee:	0f 84 26 ff ff ff    	je     c0011b1a <VAS::allocatePages(int, int)+0x8c>
c0011bf4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011bf8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011bfc:	89 d3                	mov    ebx,edx
c0011bfe:	c1 e0 0c             	shl    eax,0xc
c0011c01:	c1 eb 0a             	shr    ebx,0xa
c0011c04:	01 d0                	add    eax,edx
c0011c06:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011c0c:	c1 e8 0a             	shr    eax,0xa
c0011c0f:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011c15:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c1a:	2d 00 00 40 00       	sub    eax,0x400000
c0011c1f:	39 c3                	cmp    ebx,eax
c0011c21:	0f 87 f9 fe ff ff    	ja     c0011b20 <VAS::allocatePages(int, int)+0x92>
c0011c27:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c2a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c30:	39 d8                	cmp    eax,ebx
c0011c32:	73 f3                	jae    c0011c27 <VAS::allocatePages(int, int)+0x199>
c0011c34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c38:	83 c4 1c             	add    esp,0x1c
c0011c3b:	5b                   	pop    ebx
c0011c3c:	5e                   	pop    esi
c0011c3d:	5f                   	pop    edi
c0011c3e:	5d                   	pop    ebp
c0011c3f:	c3                   	ret    
c0011c40:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0011c45:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011c4b:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011c52:	0f 84 4d ff ff ff    	je     c0011ba5 <VAS::allocatePages(int, int)+0x117>
c0011c58:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011c60:	e9 40 ff ff ff       	jmp    c0011ba5 <VAS::allocatePages(int, int)+0x117>
c0011c65:	90                   	nop

c0011c66 <VAS::setCPUSpecific(unsigned long)>:
c0011c66:	83 ec 0c             	sub    esp,0xc
c0011c69:	6a 05                	push   0x5
c0011c6b:	68 00 00 40 c2       	push   0xc2400000
c0011c70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c78:	e8 0f fd ff ff       	call   c001198c <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c7d:	83 c4 1c             	add    esp,0x1c
c0011c80:	c3                   	ret    
c0011c81:	90                   	nop

c0011c82 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011c82:	55                   	push   ebp
c0011c83:	57                   	push   edi
c0011c84:	56                   	push   esi
c0011c85:	53                   	push   ebx
c0011c86:	83 ec 1c             	sub    esp,0x1c
c0011c89:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0011c8e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011c92:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011c98:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011c9c:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011ca2:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011ca6:	83 e0 01             	and    eax,0x1
c0011ca9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011cad:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011cb1:	85 c0                	test   eax,eax
c0011cb3:	7e 39                	jle    c0011cee <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0011cb5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011cb9:	89 f3                	mov    ebx,esi
c0011cbb:	c1 e0 0c             	shl    eax,0xc
c0011cbe:	01 f0                	add    eax,esi
c0011cc0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011cc4:	55                   	push   ebp
c0011cc5:	53                   	push   ebx
c0011cc6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011cca:	29 f0                	sub    eax,esi
c0011ccc:	01 d8                	add    eax,ebx
c0011cce:	50                   	push   eax
c0011ccf:	57                   	push   edi
c0011cd0:	e8 b7 fc ff ff       	call   c001198c <VAS::mapPage(unsigned long, unsigned long, int)>
c0011cd5:	83 c4 10             	add    esp,0x10
c0011cd8:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011cdd:	74 03                	je     c0011ce2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0011cdf:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011ce2:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ce8:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011cec:	75 d6                	jne    c0011cc4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0011cee:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011cf3:	75 10                	jne    c0011d05 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0011cf5:	0f 20 d8             	mov    eax,cr3
c0011cf8:	0f 22 d8             	mov    cr3,eax
c0011cfb:	83 c4 1c             	add    esp,0x1c
c0011cfe:	89 f0                	mov    eax,esi
c0011d00:	5b                   	pop    ebx
c0011d01:	5e                   	pop    esi
c0011d02:	5f                   	pop    edi
c0011d03:	5d                   	pop    ebp
c0011d04:	c3                   	ret    
c0011d05:	89 f3                	mov    ebx,esi
c0011d07:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d0b:	c1 eb 0a             	shr    ebx,0xa
c0011d0e:	c1 e0 0c             	shl    eax,0xc
c0011d11:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011d17:	01 f0                	add    eax,esi
c0011d19:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011d1f:	c1 e8 0a             	shr    eax,0xa
c0011d22:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011d27:	2d 00 00 40 00       	sub    eax,0x400000
c0011d2c:	39 c3                	cmp    ebx,eax
c0011d2e:	77 cb                	ja     c0011cfb <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0011d30:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011d33:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011d39:	39 d8                	cmp    eax,ebx
c0011d3b:	73 f3                	jae    c0011d30 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0011d3d:	83 c4 1c             	add    esp,0x1c
c0011d40:	89 f0                	mov    eax,esi
c0011d42:	5b                   	pop    ebx
c0011d43:	5e                   	pop    esi
c0011d44:	5f                   	pop    edi
c0011d45:	5d                   	pop    ebp
c0011d46:	c3                   	ret    
c0011d47:	90                   	nop

c0011d48 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011d48:	55                   	push   ebp
c0011d49:	57                   	push   edi
c0011d4a:	56                   	push   esi
c0011d4b:	53                   	push   ebx
c0011d4c:	83 ec 1c             	sub    esp,0x1c
c0011d4f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d53:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011d57:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0011d5b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011d5f:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d64:	75 4a                	jne    c0011db0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0011d66:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011d6a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011d6d:	c1 eb 16             	shr    ebx,0x16
c0011d70:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0011d77:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0011d7b:	74 4d                	je     c0011dca <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0011d7d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d81:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0011d85:	c1 e8 0a             	shr    eax,0xa
c0011d88:	80 fa 01             	cmp    dl,0x1
c0011d8b:	19 d2                	sbb    edx,edx
c0011d8d:	c1 e3 0c             	shl    ebx,0xc
c0011d90:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0011d94:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0011d9a:	25 fc 0f 00 00       	and    eax,0xffc
c0011d9f:	01 d8                	add    eax,ebx
c0011da1:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0011da8:	83 c4 1c             	add    esp,0x1c
c0011dab:	5b                   	pop    ebx
c0011dac:	5e                   	pop    esi
c0011dad:	5f                   	pop    edi
c0011dae:	5d                   	pop    ebp
c0011daf:	c3                   	ret    
c0011db0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011db4:	83 ec 0c             	sub    esp,0xc
c0011db7:	68 94 a2 02 c0       	push   0xc002a294
c0011dbc:	e8 74 7f 00 00       	call   c0019d35 <Krnl::panic(char const*)>
c0011dc1:	83 c4 10             	add    esp,0x10
c0011dc4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011dc8:	eb 9c                	jmp    c0011d66 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0011dca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011dce:	e8 6d db ff ff       	call   c000f940 <Phys::allocatePage()>
c0011dd3:	83 ec 0c             	sub    esp,0xc
c0011dd6:	89 c5                	mov    ebp,eax
c0011dd8:	8b 0d 70 d8 02 c0    	mov    ecx,DWORD PTR ds:0xc002d870
c0011dde:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011de2:	6a 01                	push   0x1
c0011de4:	e8 e6 f3 ff ff       	call   c00111cf <Virt::allocateKernelVirtualPages(int)>
c0011de9:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011df0:	6a 01                	push   0x1
c0011df2:	50                   	push   eax
c0011df3:	55                   	push   ebp
c0011df4:	81 cd 07 04 00 00    	or     ebp,0x407
c0011dfa:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011dfe:	51                   	push   ecx
c0011dff:	e8 7e fe ff ff       	call   c0011c82 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e04:	83 c4 1c             	add    esp,0x1c
c0011e07:	68 00 10 00 00       	push   0x1000
c0011e0c:	6a 00                	push   0x0
c0011e0e:	50                   	push   eax
c0011e0f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011e13:	e8 38 e9 fe ff       	call   c0000750 <memset>
c0011e18:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011e1c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011e1f:	e8 f1 f7 ff ff       	call   c0011615 <Virt::freeKernelVirtualPages(unsigned long)>
c0011e24:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011e27:	83 c4 10             	add    esp,0x10
c0011e2a:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0011e2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011e31:	e9 47 ff ff ff       	jmp    c0011d7d <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0011e36 <VAS::VAS(bool)>:
c0011e36:	53                   	push   ebx
c0011e37:	83 ec 28             	sub    esp,0x28
c0011e3a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e3e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011e42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e46:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e4d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e51:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011e58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e5c:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0011e60:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011e63:	e8 d8 da ff ff       	call   c000f940 <Phys::allocatePage()>
c0011e68:	89 c2                	mov    edx,eax
c0011e6a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e6e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0011e71:	8b 1d 70 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d870
c0011e77:	83 ec 0c             	sub    esp,0xc
c0011e7a:	6a 01                	push   0x1
c0011e7c:	e8 4e f3 ff ff       	call   c00111cf <Virt::allocateKernelVirtualPages(int)>
c0011e81:	83 c4 10             	add    esp,0x10
c0011e84:	89 c2                	mov    edx,eax
c0011e86:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e8a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011e8d:	83 ec 0c             	sub    esp,0xc
c0011e90:	6a 03                	push   0x3
c0011e92:	6a 01                	push   0x1
c0011e94:	52                   	push   edx
c0011e95:	50                   	push   eax
c0011e96:	53                   	push   ebx
c0011e97:	e8 e6 fd ff ff       	call   c0011c82 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e9c:	83 c4 20             	add    esp,0x20
c0011e9f:	89 c2                	mov    edx,eax
c0011ea1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ea5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011ea8:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011eb0:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0011eb8:	7f 1c                	jg     c0011ed6 <VAS::VAS(bool)+0xa0>
c0011eba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ebe:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011ec1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011ec5:	c1 e2 02             	shl    edx,0x2
c0011ec8:	01 d0                	add    eax,edx
c0011eca:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011ed0:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011ed4:	eb da                	jmp    c0011eb0 <VAS::VAS(bool)+0x7a>
c0011ed6:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0011ede:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0011ee6:	7f 7a                	jg     c0011f62 <VAS::VAS(bool)+0x12c>
c0011ee8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011eec:	2d 00 02 00 00       	sub    eax,0x200
c0011ef1:	c1 e0 0c             	shl    eax,0xc
c0011ef4:	83 c8 03             	or     eax,0x3
c0011ef7:	89 c2                	mov    edx,eax
c0011ef9:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0011efe:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f04:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f0a:	83 e0 10             	and    eax,0x10
c0011f0d:	84 c0                	test   al,al
c0011f0f:	74 07                	je     c0011f18 <VAS::VAS(bool)+0xe2>
c0011f11:	b8 00 01 00 00       	mov    eax,0x100
c0011f16:	eb 05                	jmp    c0011f1d <VAS::VAS(bool)+0xe7>
c0011f18:	b8 00 00 00 00       	mov    eax,0x0
c0011f1d:	09 d0                	or     eax,edx
c0011f1f:	89 c1                	mov    ecx,eax
c0011f21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f25:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f28:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f2c:	c1 e2 02             	shl    edx,0x2
c0011f2f:	01 d0                	add    eax,edx
c0011f31:	89 ca                	mov    edx,ecx
c0011f33:	89 10                	mov    DWORD PTR [eax],edx
c0011f35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f39:	2d 40 03 00 00       	sub    eax,0x340
c0011f3e:	83 f8 7f             	cmp    eax,0x7f
c0011f41:	77 16                	ja     c0011f59 <VAS::VAS(bool)+0x123>
c0011f43:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f47:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f4a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f4e:	c1 e2 02             	shl    edx,0x2
c0011f51:	01 d0                	add    eax,edx
c0011f53:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011f59:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011f5d:	e9 7c ff ff ff       	jmp    c0011ede <VAS::VAS(bool)+0xa8>
c0011f62:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0011f67:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f6d:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f73:	83 e0 10             	and    eax,0x10
c0011f76:	84 c0                	test   al,al
c0011f78:	74 07                	je     c0011f81 <VAS::VAS(bool)+0x14b>
c0011f7a:	b8 03 41 00 00       	mov    eax,0x4103
c0011f7f:	eb 05                	jmp    c0011f86 <VAS::VAS(bool)+0x150>
c0011f81:	b8 03 40 00 00       	mov    eax,0x4003
c0011f86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011f8a:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0011f8d:	81 c2 20 0c 00 00    	add    edx,0xc20
c0011f93:	89 02                	mov    DWORD PTR [edx],eax
c0011f95:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0011f9a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011fa0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0011fa6:	83 ec 08             	sub    esp,0x8
c0011fa9:	50                   	push   eax
c0011faa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011fae:	e8 b3 fc ff ff       	call   c0011c66 <VAS::setCPUSpecific(unsigned long)>
c0011fb3:	83 c4 10             	add    esp,0x10
c0011fb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011fba:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0011fbd:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0011fc2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011fc8:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011fce:	83 e0 10             	and    eax,0x10
c0011fd1:	84 c0                	test   al,al
c0011fd3:	74 07                	je     c0011fdc <VAS::VAS(bool)+0x1a6>
c0011fd5:	b8 00 01 00 00       	mov    eax,0x100
c0011fda:	eb 05                	jmp    c0011fe1 <VAS::VAS(bool)+0x1ab>
c0011fdc:	b8 00 00 00 00       	mov    eax,0x0
c0011fe1:	09 c2                	or     edx,eax
c0011fe3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011fe7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011fea:	05 fc 0f 00 00       	add    eax,0xffc
c0011fef:	83 ca 03             	or     edx,0x3
c0011ff2:	89 10                	mov    DWORD PTR [eax],edx
c0011ff4:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0011ff9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011fff:	83 ec 0c             	sub    esp,0xc
c0012002:	50                   	push   eax
c0012003:	e8 fa 1c 00 00       	call   c0013d02 <Device::getName()>
c0012008:	83 c4 10             	add    esp,0x10
c001200b:	83 ec 08             	sub    esp,0x8
c001200e:	68 58 a3 02 c0       	push   0xc002a358
c0012013:	50                   	push   eax
c0012014:	e8 7f e8 fe ff       	call   c0000898 <strcmp>
c0012019:	83 c4 10             	add    esp,0x10
c001201c:	85 c0                	test   eax,eax
c001201e:	0f 94 c0             	sete   al
c0012021:	84 c0                	test   al,al
c0012023:	0f 84 87 00 00 00    	je     c00120b0 <VAS::VAS(bool)+0x27a>
c0012029:	fa                   	cli    
c001202a:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001202f:	40                   	inc    eax
c0012030:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c0012035:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c001203a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012040:	05 7c 09 00 00       	add    eax,0x97c
c0012045:	83 ec 0c             	sub    esp,0xc
c0012048:	50                   	push   eax
c0012049:	e8 d0 cf ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001204e:	83 c4 10             	add    esp,0x10
c0012051:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012056:	89 c3                	mov    ebx,eax
c0012058:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c001205d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012063:	05 7c 09 00 00       	add    eax,0x97c
c0012068:	83 ec 0c             	sub    esp,0xc
c001206b:	50                   	push   eax
c001206c:	e8 ad cf ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012071:	83 c4 10             	add    esp,0x10
c0012074:	83 ec 08             	sub    esp,0x8
c0012077:	50                   	push   eax
c0012078:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001207c:	e8 75 f5 ff ff       	call   c00115f6 <VAS::getPageTableEntry(unsigned long)>
c0012081:	83 c4 10             	add    esp,0x10
c0012084:	8b 00                	mov    eax,DWORD PTR [eax]
c0012086:	25 00 f0 ff ff       	and    eax,0xfffff000
c001208b:	6a 11                	push   0x11
c001208d:	53                   	push   ebx
c001208e:	50                   	push   eax
c001208f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012093:	e8 f4 f8 ff ff       	call   c001198c <VAS::mapPage(unsigned long, unsigned long, int)>
c0012098:	83 c4 10             	add    esp,0x10
c001209b:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c00120a0:	48                   	dec    eax
c00120a1:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c00120a6:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c00120ab:	85 c0                	test   eax,eax
c00120ad:	75 01                	jne    c00120b0 <VAS::VAS(bool)+0x27a>
c00120af:	fb                   	sti    
c00120b0:	90                   	nop
c00120b1:	83 c4 28             	add    esp,0x28
c00120b4:	5b                   	pop    ebx
c00120b5:	c3                   	ret    

c00120b6 <VAS::evict(unsigned long)>:
c00120b6:	55                   	push   ebp
c00120b7:	57                   	push   edi
c00120b8:	56                   	push   esi
c00120b9:	53                   	push   ebx
c00120ba:	83 ec 1c             	sub    esp,0x1c
c00120bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120c1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00120c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00120c9:	e8 42 f2 ff ff       	call   c0011310 <Virt::allocateSwapfilePage()>
c00120ce:	89 c7                	mov    edi,eax
c00120d0:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c00120d5:	85 c0                	test   eax,eax
c00120d7:	7e 3d                	jle    c0012116 <VAS::evict(unsigned long)+0x60>
c00120d9:	89 ee                	mov    esi,ebp
c00120db:	31 db                	xor    ebx,ebx
c00120dd:	83 ec 0c             	sub    esp,0xc
c00120e0:	57                   	push   edi
c00120e1:	e8 18 f2 ff ff       	call   c00112fe <Virt::swapIDToSector(unsigned long)>
c00120e6:	89 34 24             	mov    DWORD PTR [esp],esi
c00120e9:	01 d8                	add    eax,ebx
c00120eb:	6a 01                	push   0x1
c00120ed:	31 d2                	xor    edx,edx
c00120ef:	43                   	inc    ebx
c00120f0:	52                   	push   edx
c00120f1:	81 c6 00 02 00 00    	add    esi,0x200
c00120f7:	50                   	push   eax
c00120f8:	0f be 05 b8 c6 02 c0 	movsx  eax,BYTE PTR ds:0xc002c6b8
c00120ff:	ff 34 85 fc db 02 c0 	push   DWORD PTR [eax*4-0x3ffd2404]
c0012106:	e8 7f 3e 00 00       	call   c0015f8a <LogicalDisk::write(unsigned long long, int, void*)>
c001210b:	83 c4 20             	add    esp,0x20
c001210e:	39 1d ac c6 02 c0    	cmp    DWORD PTR ds:0xc002c6ac,ebx
c0012114:	7f c7                	jg     c00120dd <VAS::evict(unsigned long)+0x27>
c0012116:	83 ec 08             	sub    esp,0x8
c0012119:	c1 e7 0b             	shl    edi,0xb
c001211c:	55                   	push   ebp
c001211d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012121:	e8 d0 f4 ff ff       	call   c00115f6 <VAS::getPageTableEntry(unsigned long)>
c0012126:	83 c4 0c             	add    esp,0xc
c0012129:	8b 10                	mov    edx,DWORD PTR [eax]
c001212b:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012131:	09 d7                	or     edi,edx
c0012133:	89 38                	mov    DWORD PTR [eax],edi
c0012135:	a1 68 d8 02 c0       	mov    eax,ds:0xc002d868
c001213a:	40                   	inc    eax
c001213b:	a3 68 d8 02 c0       	mov    ds:0xc002d868,eax
c0012140:	0f 20 da             	mov    edx,cr3
c0012143:	0f 22 da             	mov    cr3,edx
c0012146:	50                   	push   eax
c0012147:	55                   	push   ebp
c0012148:	68 66 a3 02 c0       	push   0xc002a366
c001214d:	e8 77 04 00 00       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c0012152:	a1 64 d8 02 c0       	mov    eax,ds:0xc002d864
c0012157:	c7 44 24 40 7b a3 02 c0 	mov    DWORD PTR [esp+0x40],0xc002a37b
c001215f:	8d 50 01             	lea    edx,[eax+0x1]
c0012162:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012166:	89 15 64 d8 02 c0    	mov    DWORD PTR ds:0xc002d864,edx
c001216c:	83 c4 2c             	add    esp,0x2c
c001216f:	5b                   	pop    ebx
c0012170:	5e                   	pop    esi
c0012171:	5f                   	pop    edi
c0012172:	5d                   	pop    ebp
c0012173:	e9 51 04 00 00       	jmp    c00125c9 <Dbg::kprintf(char const*, ...)>

c0012178 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012178:	55                   	push   ebp
c0012179:	57                   	push   edi
c001217a:	56                   	push   esi
c001217b:	53                   	push   ebx
c001217c:	83 ec 14             	sub    esp,0x14
c001217f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012183:	68 8c a3 02 c0       	push   0xc002a38c
c0012188:	e8 3c 04 00 00       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c001218d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0012191:	58                   	pop    eax
c0012192:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012198:	5a                   	pop    edx
c0012199:	53                   	push   ebx
c001219a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001219e:	e8 53 f4 ff ff       	call   c00115f6 <VAS::getPageTableEntry(unsigned long)>
c00121a3:	59                   	pop    ecx
c00121a4:	5e                   	pop    esi
c00121a5:	89 c6                	mov    esi,eax
c00121a7:	ff 30                	push   DWORD PTR [eax]
c00121a9:	68 9f a3 02 c0       	push   0xc002a39f
c00121ae:	e8 16 04 00 00       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c00121b3:	83 c4 10             	add    esp,0x10
c00121b6:	85 db                	test   ebx,ebx
c00121b8:	74 1c                	je     c00121d6 <VAS::tryLoadBackOffDisk(unsigned long)+0x5e>
c00121ba:	8b 3e                	mov    edi,DWORD PTR [esi]
c00121bc:	31 c0                	xor    eax,eax
c00121be:	89 fa                	mov    edx,edi
c00121c0:	81 e2 01 04 00 00    	and    edx,0x401
c00121c6:	81 fa 00 04 00 00    	cmp    edx,0x400
c00121cc:	74 12                	je     c00121e0 <VAS::tryLoadBackOffDisk(unsigned long)+0x68>
c00121ce:	83 c4 0c             	add    esp,0xc
c00121d1:	5b                   	pop    ebx
c00121d2:	5e                   	pop    esi
c00121d3:	5f                   	pop    edi
c00121d4:	5d                   	pop    ebp
c00121d5:	c3                   	ret    
c00121d6:	83 c4 0c             	add    esp,0xc
c00121d9:	31 c0                	xor    eax,eax
c00121db:	5b                   	pop    ebx
c00121dc:	5e                   	pop    esi
c00121dd:	5f                   	pop    edi
c00121de:	5d                   	pop    ebp
c00121df:	c3                   	ret    
c00121e0:	83 ec 08             	sub    esp,0x8
c00121e3:	c1 ef 0b             	shr    edi,0xb
c00121e6:	57                   	push   edi
c00121e7:	68 ad a3 02 c0       	push   0xc002a3ad
c00121ec:	e8 d8 03 00 00       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c00121f1:	e8 4a d7 ff ff       	call   c000f940 <Phys::allocatePage()>
c00121f6:	59                   	pop    ecx
c00121f7:	89 c5                	mov    ebp,eax
c00121f9:	58                   	pop    eax
c00121fa:	55                   	push   ebp
c00121fb:	68 b8 a3 02 c0       	push   0xc002a3b8
c0012200:	e8 c4 03 00 00       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c0012205:	8b 16                	mov    edx,DWORD PTR [esi]
c0012207:	81 e2 ff 0f 00 00    	and    edx,0xfff
c001220d:	09 ea                	or     edx,ebp
c001220f:	81 ca 01 08 00 00    	or     edx,0x801
c0012215:	89 16                	mov    DWORD PTR [esi],edx
c0012217:	c7 04 24 c5 a3 02 c0 	mov    DWORD PTR [esp],0xc002a3c5
c001221e:	e8 a6 03 00 00       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c0012223:	83 c4 10             	add    esp,0x10
c0012226:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c001222b:	85 c0                	test   eax,eax
c001222d:	7e 3d                	jle    c001226c <VAS::tryLoadBackOffDisk(unsigned long)+0xf4>
c001222f:	89 dd                	mov    ebp,ebx
c0012231:	31 f6                	xor    esi,esi
c0012233:	83 ec 0c             	sub    esp,0xc
c0012236:	57                   	push   edi
c0012237:	e8 c2 f0 ff ff       	call   c00112fe <Virt::swapIDToSector(unsigned long)>
c001223c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001223f:	01 f0                	add    eax,esi
c0012241:	6a 01                	push   0x1
c0012243:	31 d2                	xor    edx,edx
c0012245:	46                   	inc    esi
c0012246:	52                   	push   edx
c0012247:	81 c5 00 02 00 00    	add    ebp,0x200
c001224d:	50                   	push   eax
c001224e:	0f be 05 b8 c6 02 c0 	movsx  eax,BYTE PTR ds:0xc002c6b8
c0012255:	ff 34 85 fc db 02 c0 	push   DWORD PTR [eax*4-0x3ffd2404]
c001225c:	e8 bd 3c 00 00       	call   c0015f1e <LogicalDisk::read(unsigned long long, int, void*)>
c0012261:	83 c4 20             	add    esp,0x20
c0012264:	39 35 ac c6 02 c0    	cmp    DWORD PTR ds:0xc002c6ac,esi
c001226a:	7f c7                	jg     c0012233 <VAS::tryLoadBackOffDisk(unsigned long)+0xbb>
c001226c:	a1 68 d8 02 c0       	mov    eax,ds:0xc002d868
c0012271:	48                   	dec    eax
c0012272:	52                   	push   edx
c0012273:	a3 68 d8 02 c0       	mov    ds:0xc002d868,eax
c0012278:	50                   	push   eax
c0012279:	53                   	push   ebx
c001227a:	68 d5 a3 02 c0       	push   0xc002a3d5
c001227f:	e8 45 03 00 00       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c0012284:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012287:	e8 54 f0 ff ff       	call   c00112e0 <Virt::freeSwapfilePage(unsigned long)>
c001228c:	c7 04 24 ea a3 02 c0 	mov    DWORD PTR [esp],0xc002a3ea
c0012293:	e8 31 03 00 00       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c0012298:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001229d:	83 c4 10             	add    esp,0x10
c00122a0:	48                   	dec    eax
c00122a1:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c00122a6:	85 c0                	test   eax,eax
c00122a8:	74 2d                	je     c00122d7 <VAS::tryLoadBackOffDisk(unsigned long)+0x15f>
c00122aa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00122ae:	25 ff 0f 00 00       	and    eax,0xfff
c00122b3:	3d e0 0f 00 00       	cmp    eax,0xfe0
c00122b8:	77 20                	ja     c00122da <VAS::tryLoadBackOffDisk(unsigned long)+0x162>
c00122ba:	0f 20 d8             	mov    eax,cr3
c00122bd:	0f 22 d8             	mov    cr3,eax
c00122c0:	83 ec 0c             	sub    esp,0xc
c00122c3:	68 10 a4 02 c0       	push   0xc002a410
c00122c8:	e8 fc 02 00 00       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c00122cd:	83 c4 10             	add    esp,0x10
c00122d0:	b0 01                	mov    al,0x1
c00122d2:	e9 f7 fe ff ff       	jmp    c00121ce <VAS::tryLoadBackOffDisk(unsigned long)+0x56>
c00122d7:	fb                   	sti    
c00122d8:	eb d0                	jmp    c00122aa <VAS::tryLoadBackOffDisk(unsigned long)+0x132>
c00122da:	83 ec 0c             	sub    esp,0xc
c00122dd:	68 00 a4 02 c0       	push   0xc002a400
c00122e2:	e8 e2 02 00 00       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c00122e7:	83 c4 10             	add    esp,0x10
c00122ea:	eb ce                	jmp    c00122ba <VAS::tryLoadBackOffDisk(unsigned long)+0x142>

c00122ec <VAS::scanForEviction()>:
c00122ec:	57                   	push   edi
c00122ed:	56                   	push   esi
c00122ee:	53                   	push   ebx
c00122ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00122f3:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00122f6:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00122fc:	75 0e                	jne    c001230c <VAS::scanForEviction()+0x20>
c00122fe:	89 da                	mov    edx,ebx
c0012300:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012303:	c1 ea 16             	shr    edx,0x16
c0012306:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c001230a:	74 4c                	je     c0012358 <VAS::scanForEviction()+0x6c>
c001230c:	83 ec 08             	sub    esp,0x8
c001230f:	53                   	push   ebx
c0012310:	56                   	push   esi
c0012311:	e8 e0 f2 ff ff       	call   c00115f6 <VAS::getPageTableEntry(unsigned long)>
c0012316:	83 c4 10             	add    esp,0x10
c0012319:	8b 38                	mov    edi,DWORD PTR [eax]
c001231b:	89 fa                	mov    edx,edi
c001231d:	81 e2 01 08 00 00    	and    edx,0x801
c0012323:	81 fa 01 08 00 00    	cmp    edx,0x801
c0012329:	74 53                	je     c001237e <VAS::scanForEviction()+0x92>
c001232b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012331:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0012337:	76 3d                	jbe    c0012376 <VAS::scanForEviction()+0x8a>
c0012339:	31 db                	xor    ebx,ebx
c001233b:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0012342:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012348:	75 c2                	jne    c001230c <VAS::scanForEviction()+0x20>
c001234a:	89 da                	mov    edx,ebx
c001234c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001234f:	c1 ea 16             	shr    edx,0x16
c0012352:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012356:	75 b4                	jne    c001230c <VAS::scanForEviction()+0x20>
c0012358:	83 ec 0c             	sub    esp,0xc
c001235b:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012361:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012364:	68 1e a4 02 c0       	push   0xc002a41e
c0012369:	e8 5b 02 00 00       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c001236e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012371:	83 c4 10             	add    esp,0x10
c0012374:	eb 80                	jmp    c00122f6 <VAS::scanForEviction()+0xa>
c0012376:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012379:	e9 78 ff ff ff       	jmp    c00122f6 <VAS::scanForEviction()+0xa>
c001237e:	f7 c7 20 00 00 00    	test   edi,0x20
c0012384:	74 0a                	je     c0012390 <VAS::scanForEviction()+0xa4>
c0012386:	83 e7 df             	and    edi,0xffffffdf
c0012389:	89 38                	mov    DWORD PTR [eax],edi
c001238b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c001238e:	eb 9b                	jmp    c001232b <VAS::scanForEviction()+0x3f>
c0012390:	83 ec 08             	sub    esp,0x8
c0012393:	53                   	push   ebx
c0012394:	56                   	push   esi
c0012395:	e8 1c fd ff ff       	call   c00120b6 <VAS::evict(unsigned long)>
c001239a:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c00123a1:	83 c4 10             	add    esp,0x10
c00123a4:	89 f8                	mov    eax,edi
c00123a6:	5b                   	pop    ebx
c00123a7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00123ac:	5e                   	pop    esi
c00123ad:	5f                   	pop    edi
c00123ae:	c3                   	ret    

c00123af <mapVASFirstTime>:
c00123af:	55                   	push   ebp
c00123b0:	57                   	push   edi
c00123b1:	56                   	push   esi
c00123b2:	53                   	push   ebx
c00123b3:	83 ec 0c             	sub    esp,0xc
c00123b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00123bb:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00123be:	4a                   	dec    edx
c00123bf:	0f 84 8e 00 00 00    	je     c0012453 <mapVASFirstTime+0xa4>
c00123c5:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00123c8:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c00123cb:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00123d0:	c1 e5 15             	shl    ebp,0x15
c00123d3:	be 00 90 e7 01       	mov    esi,0x1e79000
c00123d8:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c00123de:	29 eb                	sub    ebx,ebp
c00123e0:	29 ee                	sub    esi,ebp
c00123e2:	e8 59 d5 ff ff       	call   c000f940 <Phys::allocatePage()>
c00123e7:	83 ec 0c             	sub    esp,0xc
c00123ea:	68 03 04 00 00       	push   0x403
c00123ef:	6a 01                	push   0x1
c00123f1:	53                   	push   ebx
c00123f2:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00123f8:	50                   	push   eax
c00123f9:	57                   	push   edi
c00123fa:	e8 83 f8 ff ff       	call   c0011c82 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00123ff:	83 c4 20             	add    esp,0x20
c0012402:	39 f3                	cmp    ebx,esi
c0012404:	75 dc                	jne    c00123e2 <mapVASFirstTime+0x33>
c0012406:	be 00 f0 ff 01       	mov    esi,0x1fff000
c001240b:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012410:	29 ee                	sub    esi,ebp
c0012412:	29 e8                	sub    eax,ebp
c0012414:	89 c5                	mov    ebp,eax
c0012416:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c001241a:	19 db                	sbb    ebx,ebx
c001241c:	e8 1f d5 ff ff       	call   c000f940 <Phys::allocatePage()>
c0012421:	83 e3 04             	and    ebx,0x4
c0012424:	83 ec 0c             	sub    esp,0xc
c0012427:	81 c3 03 04 00 00    	add    ebx,0x403
c001242d:	53                   	push   ebx
c001242e:	6a 01                	push   0x1
c0012430:	56                   	push   esi
c0012431:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012437:	50                   	push   eax
c0012438:	57                   	push   edi
c0012439:	e8 44 f8 ff ff       	call   c0011c82 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001243e:	83 c4 20             	add    esp,0x20
c0012441:	39 f5                	cmp    ebp,esi
c0012443:	75 d1                	jne    c0012416 <mapVASFirstTime+0x67>
c0012445:	0f 20 d8             	mov    eax,cr3
c0012448:	0f 22 d8             	mov    cr3,eax
c001244b:	83 c4 0c             	add    esp,0xc
c001244e:	5b                   	pop    ebx
c001244f:	5e                   	pop    esi
c0012450:	5f                   	pop    edi
c0012451:	5d                   	pop    ebp
c0012452:	c3                   	ret    
c0012453:	83 ec 0c             	sub    esp,0xc
c0012456:	68 33 a4 02 c0       	push   0xc002a433
c001245b:	e8 69 01 00 00       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c0012460:	83 c4 10             	add    esp,0x10
c0012463:	83 c4 0c             	add    esp,0xc
c0012466:	5b                   	pop    ebx
c0012467:	5e                   	pop    esi
c0012468:	5f                   	pop    edi
c0012469:	5d                   	pop    ebp
c001246a:	c3                   	ret    

c001246b <__cxa_atexit>:
c001246b:	31 c0                	xor    eax,eax
c001246d:	c3                   	ret    

c001246e <__cxa_finalize>:
c001246e:	c3                   	ret    

c001246f <__stack_chk_fail>:
c001246f:	55                   	push   ebp
c0012470:	89 e5                	mov    ebp,esp
c0012472:	83 ec 14             	sub    esp,0x14
c0012475:	68 4c a4 02 c0       	push   0xc002a44c
c001247a:	e8 4a 01 00 00       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c001247f:	58                   	pop    eax
c0012480:	5a                   	pop    edx
c0012481:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012484:	68 9c a4 02 c0       	push   0xc002a49c
c0012489:	e8 3b 01 00 00       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c001248e:	59                   	pop    ecx
c001248f:	58                   	pop    eax
c0012490:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012493:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012496:	68 9c a4 02 c0       	push   0xc002a49c
c001249b:	e8 29 01 00 00       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c00124a0:	5a                   	pop    edx
c00124a1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00124a4:	59                   	pop    ecx
c00124a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00124a7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00124aa:	68 9c a4 02 c0       	push   0xc002a49c
c00124af:	e8 15 01 00 00       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c00124b4:	5a                   	pop    edx
c00124b5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00124b8:	59                   	pop    ecx
c00124b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00124bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00124bd:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00124c0:	68 9c a4 02 c0       	push   0xc002a49c
c00124c5:	e8 ff 00 00 00       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c00124ca:	c7 04 24 a4 a4 02 c0 	mov    DWORD PTR [esp],0xc002a4a4
c00124d1:	e8 5f 78 00 00       	call   c0019d35 <Krnl::panic(char const*)>
c00124d6:	83 c4 10             	add    esp,0x10
c00124d9:	c9                   	leave  
c00124da:	c3                   	ret    

c00124db <__cxa_pure_virtual>:
c00124db:	83 ec 18             	sub    esp,0x18
c00124de:	68 bc a4 02 c0       	push   0xc002a4bc
c00124e3:	e8 4d 78 00 00       	call   c0019d35 <Krnl::panic(char const*)>
c00124e8:	83 c4 1c             	add    esp,0x1c
c00124eb:	c3                   	ret    

c00124ec <operator new[](unsigned long)>:
c00124ec:	e9 ab d0 ff ff       	jmp    c000f59c <malloc>

c00124f1 <operator delete(void*, unsigned long)>:
c00124f1:	e9 c6 d0 ff ff       	jmp    c000f5bc <rfree>

c00124f6 <operator delete[](void*)>:
c00124f6:	e9 c1 d0 ff ff       	jmp    c000f5bc <rfree>

c00124fb <operator delete[](void*, unsigned long)>:
c00124fb:	e9 bc d0 ff ff       	jmp    c000f5bc <rfree>

c0012500 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012500:	55                   	push   ebp
c0012501:	b9 11 00 00 00       	mov    ecx,0x11
c0012506:	57                   	push   edi
c0012507:	56                   	push   esi
c0012508:	be d2 9f 02 c0       	mov    esi,0xc0029fd2
c001250d:	53                   	push   ebx
c001250e:	83 ec 20             	sub    esp,0x20
c0012511:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012515:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012519:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c001251d:	fc                   	cld    
c001251e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012520:	89 ee                	mov    esi,ebp
c0012522:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0012526:	eb 02                	jmp    c001252a <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c0012528:	89 c6                	mov    esi,eax
c001252a:	31 d2                	xor    edx,edx
c001252c:	41                   	inc    ecx
c001252d:	89 f0                	mov    eax,esi
c001252f:	f7 f3                	div    ebx
c0012531:	39 de                	cmp    esi,ebx
c0012533:	73 f3                	jae    c0012528 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c0012535:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012538:	eb 02                	jmp    c001253c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c001253a:	89 c5                	mov    ebp,eax
c001253c:	31 d2                	xor    edx,edx
c001253e:	49                   	dec    ecx
c001253f:	89 e8                	mov    eax,ebp
c0012541:	f7 f3                	div    ebx
c0012543:	39 dd                	cmp    ebp,ebx
c0012545:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0012549:	88 11                	mov    BYTE PTR [ecx],dl
c001254b:	73 ed                	jae    c001253a <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c001254d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012551:	83 c4 20             	add    esp,0x20
c0012554:	5b                   	pop    ebx
c0012555:	5e                   	pop    esi
c0012556:	5f                   	pop    edi
c0012557:	5d                   	pop    ebp
c0012558:	c3                   	ret    

c0012559 <Dbg::logc(char)>:
c0012559:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001255d:	ba fd 03 00 00       	mov    edx,0x3fd
c0012562:	ec                   	in     al,dx
c0012563:	a8 20                	test   al,0x20
c0012565:	74 fb                	je     c0012562 <Dbg::logc(char)+0x9>
c0012567:	ba f8 03 00 00       	mov    edx,0x3f8
c001256c:	88 c8                	mov    al,cl
c001256e:	ee                   	out    dx,al
c001256f:	c3                   	ret    

c0012570 <Dbg::logs(char*)>:
c0012570:	53                   	push   ebx
c0012571:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012575:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012578:	84 c0                	test   al,al
c001257a:	74 0f                	je     c001258b <Dbg::logs(char*)+0x1b>
c001257c:	50                   	push   eax
c001257d:	43                   	inc    ebx
c001257e:	e8 d6 ff ff ff       	call   c0012559 <Dbg::logc(char)>
c0012583:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012586:	5a                   	pop    edx
c0012587:	84 c0                	test   al,al
c0012589:	75 f1                	jne    c001257c <Dbg::logs(char*)+0xc>
c001258b:	5b                   	pop    ebx
c001258c:	c3                   	ret    

c001258d <Dbg::logWriteInt(unsigned int)>:
c001258d:	83 ec 10             	sub    esp,0x10
c0012590:	6a 0a                	push   0xa
c0012592:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012596:	50                   	push   eax
c0012597:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001259b:	e8 60 ff ff ff       	call   c0012500 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00125a0:	50                   	push   eax
c00125a1:	e8 ca ff ff ff       	call   c0012570 <Dbg::logs(char*)>
c00125a6:	83 c4 20             	add    esp,0x20
c00125a9:	c3                   	ret    

c00125aa <Dbg::logWriteIntBase(unsigned int, int)>:
c00125aa:	83 ec 10             	sub    esp,0x10
c00125ad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00125b1:	8d 44 24 08          	lea    eax,[esp+0x8]
c00125b5:	50                   	push   eax
c00125b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125ba:	e8 41 ff ff ff       	call   c0012500 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00125bf:	50                   	push   eax
c00125c0:	e8 ab ff ff ff       	call   c0012570 <Dbg::logs(char*)>
c00125c5:	83 c4 20             	add    esp,0x20
c00125c8:	c3                   	ret    

c00125c9 <Dbg::kprintf(char const*, ...)>:
c00125c9:	55                   	push   ebp
c00125ca:	57                   	push   edi
c00125cb:	56                   	push   esi
c00125cc:	53                   	push   ebx
c00125cd:	83 ec 0c             	sub    esp,0xc
c00125d0:	8d 44 24 24          	lea    eax,[esp+0x24]
c00125d4:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00125d8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00125dc:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00125df:	84 c0                	test   al,al
c00125e1:	74 4a                	je     c001262d <Dbg::kprintf(char const*, ...)+0x64>
c00125e3:	31 db                	xor    ebx,ebx
c00125e5:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00125e8:	3c 25                	cmp    al,0x25
c00125ea:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c00125ed:	0f 85 e4 00 00 00    	jne    c00126d7 <Dbg::kprintf(char const*, ...)+0x10e>
c00125f3:	83 c3 02             	add    ebx,0x2
c00125f6:	8a 07                	mov    al,BYTE PTR [edi]
c00125f8:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c00125fb:	83 e8 25             	sub    eax,0x25
c00125fe:	3c 53                	cmp    al,0x53
c0012600:	0f 87 ba 00 00 00    	ja     c00126c0 <Dbg::kprintf(char const*, ...)+0xf7>
c0012606:	0f b6 c0             	movzx  eax,al
c0012609:	ff 24 85 d0 a4 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5b30]
c0012610:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012614:	89 c8                	mov    eax,ecx
c0012616:	83 c1 04             	add    ecx,0x4
c0012619:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001261d:	ff 30                	push   DWORD PTR [eax]
c001261f:	e8 69 ff ff ff       	call   c001258d <Dbg::logWriteInt(unsigned int)>
c0012624:	5f                   	pop    edi
c0012625:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012629:	84 c0                	test   al,al
c001262b:	75 b8                	jne    c00125e5 <Dbg::kprintf(char const*, ...)+0x1c>
c001262d:	83 c4 0c             	add    esp,0xc
c0012630:	5b                   	pop    ebx
c0012631:	5e                   	pop    esi
c0012632:	5f                   	pop    edi
c0012633:	5d                   	pop    ebp
c0012634:	c3                   	ret    
c0012635:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012639:	89 c8                	mov    eax,ecx
c001263b:	83 c1 04             	add    ecx,0x4
c001263e:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012642:	ff 30                	push   DWORD PTR [eax]
c0012644:	e8 27 ff ff ff       	call   c0012570 <Dbg::logs(char*)>
c0012649:	58                   	pop    eax
c001264a:	eb d9                	jmp    c0012625 <Dbg::kprintf(char const*, ...)+0x5c>
c001264c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012650:	89 d0                	mov    eax,edx
c0012652:	83 c2 04             	add    edx,0x4
c0012655:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012659:	ff 30                	push   DWORD PTR [eax]
c001265b:	e8 2d ff ff ff       	call   c001258d <Dbg::logWriteInt(unsigned int)>
c0012660:	58                   	pop    eax
c0012661:	eb c2                	jmp    c0012625 <Dbg::kprintf(char const*, ...)+0x5c>
c0012663:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012667:	89 d0                	mov    eax,edx
c0012669:	83 c2 04             	add    edx,0x4
c001266c:	0f be 00             	movsx  eax,BYTE PTR [eax]
c001266f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012673:	50                   	push   eax
c0012674:	e8 e0 fe ff ff       	call   c0012559 <Dbg::logc(char)>
c0012679:	58                   	pop    eax
c001267a:	eb a9                	jmp    c0012625 <Dbg::kprintf(char const*, ...)+0x5c>
c001267c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012680:	89 c8                	mov    eax,ecx
c0012682:	83 c1 04             	add    ecx,0x4
c0012685:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012689:	6a 10                	push   0x10
c001268b:	ff 30                	push   DWORD PTR [eax]
c001268d:	e8 18 ff ff ff       	call   c00125aa <Dbg::logWriteIntBase(unsigned int, int)>
c0012692:	59                   	pop    ecx
c0012693:	5f                   	pop    edi
c0012694:	eb 8f                	jmp    c0012625 <Dbg::kprintf(char const*, ...)+0x5c>
c0012696:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001269a:	89 d0                	mov    eax,edx
c001269c:	83 c2 08             	add    edx,0x8
c001269f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00126a3:	6a 10                	push   0x10
c00126a5:	ff 30                	push   DWORD PTR [eax]
c00126a7:	e8 fe fe ff ff       	call   c00125aa <Dbg::logWriteIntBase(unsigned int, int)>
c00126ac:	58                   	pop    eax
c00126ad:	5a                   	pop    edx
c00126ae:	e9 72 ff ff ff       	jmp    c0012625 <Dbg::kprintf(char const*, ...)+0x5c>
c00126b3:	6a 25                	push   0x25
c00126b5:	e8 9f fe ff ff       	call   c0012559 <Dbg::logc(char)>
c00126ba:	58                   	pop    eax
c00126bb:	e9 65 ff ff ff       	jmp    c0012625 <Dbg::kprintf(char const*, ...)+0x5c>
c00126c0:	6a 25                	push   0x25
c00126c2:	e8 92 fe ff ff       	call   c0012559 <Dbg::logc(char)>
c00126c7:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00126ca:	50                   	push   eax
c00126cb:	e8 89 fe ff ff       	call   c0012559 <Dbg::logc(char)>
c00126d0:	5a                   	pop    edx
c00126d1:	59                   	pop    ecx
c00126d2:	e9 4e ff ff ff       	jmp    c0012625 <Dbg::kprintf(char const*, ...)+0x5c>
c00126d7:	50                   	push   eax
c00126d8:	89 eb                	mov    ebx,ebp
c00126da:	e8 7a fe ff ff       	call   c0012559 <Dbg::logc(char)>
c00126df:	89 fd                	mov    ebp,edi
c00126e1:	58                   	pop    eax
c00126e2:	e9 3e ff ff ff       	jmp    c0012625 <Dbg::kprintf(char const*, ...)+0x5c>
c00126e7:	90                   	nop

c00126e8 <File::read(unsigned long long, void*, int*)>:
c00126e8:	53                   	push   ebx
c00126e9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00126ed:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00126f1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00126f8:	3c 19                	cmp    al,0x19
c00126fa:	77 35                	ja     c0012731 <File::read(unsigned long long, void*, int*)+0x49>
c00126fc:	8b 04 85 00 dd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2300]
c0012703:	85 c0                	test   eax,eax
c0012705:	74 2a                	je     c0012731 <File::read(unsigned long long, void*, int*)+0x49>
c0012707:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001270d:	85 c0                	test   eax,eax
c001270f:	74 20                	je     c0012731 <File::read(unsigned long long, void*, int*)+0x49>
c0012711:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012715:	74 21                	je     c0012738 <File::read(unsigned long long, void*, int*)+0x50>
c0012717:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012719:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001271d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012723:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012727:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001272b:	5b                   	pop    ebx
c001272c:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c001272f:	ff e0                	jmp    eax
c0012731:	b8 0b 00 00 00       	mov    eax,0xb
c0012736:	eb 05                	jmp    c001273d <File::read(unsigned long long, void*, int*)+0x55>
c0012738:	b8 05 00 00 00       	mov    eax,0x5
c001273d:	5b                   	pop    ebx
c001273e:	c3                   	ret    
c001273f:	90                   	nop

c0012740 <File::write(unsigned long long, void*, int*)>:
c0012740:	53                   	push   ebx
c0012741:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012745:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012749:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012750:	3c 19                	cmp    al,0x19
c0012752:	77 35                	ja     c0012789 <File::write(unsigned long long, void*, int*)+0x49>
c0012754:	8b 04 85 00 dd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2300]
c001275b:	85 c0                	test   eax,eax
c001275d:	74 2a                	je     c0012789 <File::write(unsigned long long, void*, int*)+0x49>
c001275f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012765:	85 c0                	test   eax,eax
c0012767:	74 20                	je     c0012789 <File::write(unsigned long long, void*, int*)+0x49>
c0012769:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001276d:	74 21                	je     c0012790 <File::write(unsigned long long, void*, int*)+0x50>
c001276f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012771:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012775:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001277b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001277f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012783:	5b                   	pop    ebx
c0012784:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012787:	ff e0                	jmp    eax
c0012789:	b8 0b 00 00 00       	mov    eax,0xb
c001278e:	eb 05                	jmp    c0012795 <File::write(unsigned long long, void*, int*)+0x55>
c0012790:	b8 05 00 00 00       	mov    eax,0x5
c0012795:	5b                   	pop    ebx
c0012796:	c3                   	ret    
c0012797:	90                   	nop

c0012798 <Directory::read(unsigned long long, void*, int*)>:
c0012798:	53                   	push   ebx
c0012799:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001279d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00127a1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00127a8:	3c 19                	cmp    al,0x19
c00127aa:	77 35                	ja     c00127e1 <Directory::read(unsigned long long, void*, int*)+0x49>
c00127ac:	8b 04 85 00 dd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2300]
c00127b3:	85 c0                	test   eax,eax
c00127b5:	74 2a                	je     c00127e1 <Directory::read(unsigned long long, void*, int*)+0x49>
c00127b7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00127bd:	85 c0                	test   eax,eax
c00127bf:	74 20                	je     c00127e1 <Directory::read(unsigned long long, void*, int*)+0x49>
c00127c1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00127c5:	74 21                	je     c00127e8 <Directory::read(unsigned long long, void*, int*)+0x50>
c00127c7:	8b 08                	mov    ecx,DWORD PTR [eax]
c00127c9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00127cd:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00127d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00127d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00127db:	5b                   	pop    ebx
c00127dc:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c00127df:	ff e0                	jmp    eax
c00127e1:	b8 0b 00 00 00       	mov    eax,0xb
c00127e6:	eb 05                	jmp    c00127ed <Directory::read(unsigned long long, void*, int*)+0x55>
c00127e8:	b8 05 00 00 00       	mov    eax,0x5
c00127ed:	5b                   	pop    ebx
c00127ee:	c3                   	ret    
c00127ef:	90                   	nop

c00127f0 <Directory::write(unsigned long long, void*, int*)>:
c00127f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00127f4:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00127fb:	b8 0b 00 00 00       	mov    eax,0xb
c0012800:	80 fa 19             	cmp    dl,0x19
c0012803:	77 18                	ja     c001281d <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012805:	8b 14 95 00 dd 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2300]
c001280c:	85 d2                	test   edx,edx
c001280e:	74 0d                	je     c001281d <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012810:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012817:	19 c0                	sbb    eax,eax
c0012819:	83 e0 0a             	and    eax,0xa
c001281c:	40                   	inc    eax
c001281d:	c3                   	ret    

c001281e <File::isAtty()>:
c001281e:	31 c0                	xor    eax,eax
c0012820:	c3                   	ret    
c0012821:	90                   	nop

c0012822 <Directory::isAtty()>:
c0012822:	31 c0                	xor    eax,eax
c0012824:	c3                   	ret    
c0012825:	90                   	nop

c0012826 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012826:	b8 0a 00 00 00       	mov    eax,0xa
c001282b:	c3                   	ret    

c001282c <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c001282c:	b8 0a 00 00 00       	mov    eax,0xa
c0012831:	c3                   	ret    

c0012832 <Filesystem::getFileFirstSector(char const*)>:
c0012832:	31 c0                	xor    eax,eax
c0012834:	31 d2                	xor    edx,edx
c0012836:	c3                   	ret    
c0012837:	90                   	nop

c0012838 <File::~File()>:
c0012838:	83 ec 0c             	sub    esp,0xc
c001283b:	ba 90 a6 02 c0       	mov    edx,0xc002a690
c0012840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012844:	89 10                	mov    DWORD PTR [eax],edx
c0012846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001284a:	83 ec 0c             	sub    esp,0xc
c001284d:	50                   	push   eax
c001284e:	e8 1b e7 ff ff       	call   c0010f6e <UnixFile::~UnixFile()>
c0012853:	83 c4 10             	add    esp,0x10
c0012856:	90                   	nop
c0012857:	83 c4 0c             	add    esp,0xc
c001285a:	c3                   	ret    
c001285b:	90                   	nop

c001285c <File::~File()>:
c001285c:	83 ec 0c             	sub    esp,0xc
c001285f:	83 ec 0c             	sub    esp,0xc
c0012862:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012866:	e8 cd ff ff ff       	call   c0012838 <File::~File()>
c001286b:	83 c4 10             	add    esp,0x10
c001286e:	83 ec 08             	sub    esp,0x8
c0012871:	68 14 01 00 00       	push   0x114
c0012876:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001287a:	e8 72 fc ff ff       	call   c00124f1 <operator delete(void*, unsigned long)>
c001287f:	83 c4 10             	add    esp,0x10
c0012882:	83 c4 0c             	add    esp,0xc
c0012885:	c3                   	ret    

c0012886 <Directory::~Directory()>:
c0012886:	83 ec 0c             	sub    esp,0xc
c0012889:	ba ac a6 02 c0       	mov    edx,0xc002a6ac
c001288e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012892:	89 10                	mov    DWORD PTR [eax],edx
c0012894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012898:	83 ec 0c             	sub    esp,0xc
c001289b:	50                   	push   eax
c001289c:	e8 cd e6 ff ff       	call   c0010f6e <UnixFile::~UnixFile()>
c00128a1:	83 c4 10             	add    esp,0x10
c00128a4:	90                   	nop
c00128a5:	83 c4 0c             	add    esp,0xc
c00128a8:	c3                   	ret    
c00128a9:	90                   	nop

c00128aa <Directory::~Directory()>:
c00128aa:	83 ec 0c             	sub    esp,0xc
c00128ad:	83 ec 0c             	sub    esp,0xc
c00128b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128b4:	e8 cd ff ff ff       	call   c0012886 <Directory::~Directory()>
c00128b9:	83 c4 10             	add    esp,0x10
c00128bc:	83 ec 08             	sub    esp,0x8
c00128bf:	68 14 01 00 00       	push   0x114
c00128c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128c8:	e8 24 fc ff ff       	call   c00124f1 <operator delete(void*, unsigned long)>
c00128cd:	83 c4 10             	add    esp,0x10
c00128d0:	83 c4 0c             	add    esp,0xc
c00128d3:	c3                   	ret    

c00128d4 <Filesystem::Filesystem()>:
c00128d4:	ba 28 a6 02 c0       	mov    edx,0xc002a628
c00128d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128dd:	89 10                	mov    DWORD PTR [eax],edx
c00128df:	8b 15 74 d8 02 c0    	mov    edx,DWORD PTR ds:0xc002d874
c00128e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128e9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00128ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128f0:	a3 74 d8 02 c0       	mov    ds:0xc002d874,eax
c00128f5:	90                   	nop
c00128f6:	c3                   	ret    
c00128f7:	90                   	nop

c00128f8 <Filesystem::~Filesystem()>:
c00128f8:	ba 28 a6 02 c0       	mov    edx,0xc002a628
c00128fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012901:	89 10                	mov    DWORD PTR [eax],edx
c0012903:	90                   	nop
c0012904:	c3                   	ret    
c0012905:	90                   	nop

c0012906 <Filesystem::~Filesystem()>:
c0012906:	83 ec 0c             	sub    esp,0xc
c0012909:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001290d:	e8 e6 ff ff ff       	call   c00128f8 <Filesystem::~Filesystem()>
c0012912:	83 c4 04             	add    esp,0x4
c0012915:	83 ec 08             	sub    esp,0x8
c0012918:	6a 08                	push   0x8
c001291a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001291e:	e8 ce fb ff ff       	call   c00124f1 <operator delete(void*, unsigned long)>
c0012923:	83 c4 10             	add    esp,0x10
c0012926:	83 c4 0c             	add    esp,0xc
c0012929:	c3                   	ret    

c001292a <Fs::getcwd(Process*, char*, int)>:
c001292a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001292e:	31 c0                	xor    eax,eax
c0012930:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012933:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012937:	7d 15                	jge    c001294e <Fs::getcwd(Process*, char*, int)+0x24>
c0012939:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001293d:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012944:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012947:	84 c9                	test   cl,cl
c0012949:	74 06                	je     c0012951 <Fs::getcwd(Process*, char*, int)+0x27>
c001294b:	40                   	inc    eax
c001294c:	eb e2                	jmp    c0012930 <Fs::getcwd(Process*, char*, int)+0x6>
c001294e:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012951:	31 c0                	xor    eax,eax
c0012953:	c3                   	ret    

c0012954 <Fs::initVFS()>:
c0012954:	83 ec 18             	sub    esp,0x18
c0012957:	6a 08                	push   0x8
c0012959:	e8 3e cc ff ff       	call   c000f59c <malloc>
c001295e:	89 04 24             	mov    DWORD PTR [esp],eax
c0012961:	e8 ce de 00 00       	call   c0020834 <FAT::FAT()>
c0012966:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001296d:	e8 2a cc ff ff       	call   c000f59c <malloc>
c0012972:	89 04 24             	mov    DWORD PTR [esp],eax
c0012975:	e8 c6 f0 00 00       	call   c0021a40 <ISO9660::ISO9660()>
c001297a:	83 c4 1c             	add    esp,0x1c
c001297d:	c3                   	ret    

c001297e <Fs::standardiseFiles(char*, char const*, char const*)>:
c001297e:	55                   	push   ebp
c001297f:	57                   	push   edi
c0012980:	56                   	push   esi
c0012981:	53                   	push   ebx
c0012982:	81 ec 10 04 00 00    	sub    esp,0x410
c0012988:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c001298f:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012996:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c001299d:	68 00 04 00 00       	push   0x400
c00129a2:	6a 00                	push   0x0
c00129a4:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00129a8:	56                   	push   esi
c00129a9:	e8 a2 dd fe ff       	call   c0000750 <memset>
c00129ae:	83 c4 10             	add    esp,0x10
c00129b1:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c00129b5:	75 0b                	jne    c00129c2 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c00129b7:	50                   	push   eax
c00129b8:	50                   	push   eax
c00129b9:	57                   	push   edi
c00129ba:	56                   	push   esi
c00129bb:	e8 4c de fe ff       	call   c000080c <strcpy>
c00129c0:	eb 41                	jmp    c0012a03 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c00129c2:	8a 07                	mov    al,BYTE PTR [edi]
c00129c4:	3c 5c                	cmp    al,0x5c
c00129c6:	74 04                	je     c00129cc <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c00129c8:	3c 2f                	cmp    al,0x2f
c00129ca:	75 18                	jne    c00129e4 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c00129cc:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c00129cf:	3c 60                	cmp    al,0x60
c00129d1:	7e 03                	jle    c00129d6 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c00129d3:	83 e8 20             	sub    eax,0x20
c00129d6:	88 04 24             	mov    BYTE PTR [esp],al
c00129d9:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00129e0:	50                   	push   eax
c00129e1:	50                   	push   eax
c00129e2:	eb 18                	jmp    c00129fc <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c00129e4:	50                   	push   eax
c00129e5:	50                   	push   eax
c00129e6:	55                   	push   ebp
c00129e7:	56                   	push   esi
c00129e8:	e8 1f de fe ff       	call   c000080c <strcpy>
c00129ed:	5a                   	pop    edx
c00129ee:	59                   	pop    ecx
c00129ef:	68 0a b9 02 c0       	push   0xc002b90a
c00129f4:	56                   	push   esi
c00129f5:	e8 52 df fe ff       	call   c000094c <strcat>
c00129fa:	5d                   	pop    ebp
c00129fb:	58                   	pop    eax
c00129fc:	57                   	push   edi
c00129fd:	56                   	push   esi
c00129fe:	e8 49 df fe ff       	call   c000094c <strcat>
c0012a03:	83 c4 10             	add    esp,0x10
c0012a06:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012a09:	3c 60                	cmp    al,0x60
c0012a0b:	7e 03                	jle    c0012a10 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012a0d:	83 e8 20             	sub    eax,0x20
c0012a10:	88 04 24             	mov    BYTE PTR [esp],al
c0012a13:	88 03                	mov    BYTE PTR [ebx],al
c0012a15:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012a1c:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012a22:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012a26:	bf 03 00 00 00       	mov    edi,0x3
c0012a2b:	b8 03 00 00 00       	mov    eax,0x3
c0012a30:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012a33:	84 d2                	test   dl,dl
c0012a35:	0f 84 91 00 00 00    	je     c0012acc <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012a3b:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012a3e:	80 fa 5c             	cmp    dl,0x5c
c0012a41:	74 05                	je     c0012a48 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012a43:	80 fa 2f             	cmp    dl,0x2f
c0012a46:	75 12                	jne    c0012a5a <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012a48:	89 c5                	mov    ebp,eax
c0012a4a:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012a4f:	74 09                	je     c0012a5a <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012a51:	40                   	inc    eax
c0012a52:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012a56:	89 cf                	mov    edi,ecx
c0012a58:	eb d6                	jmp    c0012a30 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012a5a:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012a5f:	75 5b                	jne    c0012abc <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012a61:	80 fa 2e             	cmp    dl,0x2e
c0012a64:	75 56                	jne    c0012abc <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012a66:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012a6a:	74 19                	je     c0012a85 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012a6c:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012a71:	74 53                	je     c0012ac6 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012a73:	89 f9                	mov    ecx,edi
c0012a75:	41                   	inc    ecx
c0012a76:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012a79:	80 fa 2f             	cmp    dl,0x2f
c0012a7c:	74 f7                	je     c0012a75 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012a7e:	80 fa 5c             	cmp    dl,0x5c
c0012a81:	74 f2                	je     c0012a75 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012a83:	eb d1                	jmp    c0012a56 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012a85:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012a8a:	74 3a                	je     c0012ac6 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012a8c:	83 f8 03             	cmp    eax,0x3
c0012a8f:	74 c5                	je     c0012a56 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012a91:	41                   	inc    ecx
c0012a92:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012a95:	80 fa 2f             	cmp    dl,0x2f
c0012a98:	74 f7                	je     c0012a91 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012a9a:	80 fa 5c             	cmp    dl,0x5c
c0012a9d:	74 f2                	je     c0012a91 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012a9f:	48                   	dec    eax
c0012aa0:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012aa4:	75 06                	jne    c0012aac <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012aa6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012aaa:	eb f3                	jmp    c0012a9f <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012aac:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012ab0:	74 07                	je     c0012ab9 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012ab2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012ab6:	48                   	dec    eax
c0012ab7:	eb f3                	jmp    c0012aac <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012ab9:	40                   	inc    eax
c0012aba:	eb 9a                	jmp    c0012a56 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012abc:	80 fa 2f             	cmp    dl,0x2f
c0012abf:	74 95                	je     c0012a56 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012ac1:	80 fa 5c             	cmp    dl,0x5c
c0012ac4:	74 90                	je     c0012a56 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012ac6:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012ac9:	40                   	inc    eax
c0012aca:	eb 8a                	jmp    c0012a56 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012acc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012ad0:	83 ec 0c             	sub    esp,0xc
c0012ad3:	53                   	push   ebx
c0012ad4:	e8 93 dc fe ff       	call   c000076c <strlen>
c0012ad9:	83 c4 10             	add    esp,0x10
c0012adc:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012ae1:	75 26                	jne    c0012b09 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012ae3:	83 ec 0c             	sub    esp,0xc
c0012ae6:	53                   	push   ebx
c0012ae7:	e8 80 dc fe ff       	call   c000076c <strlen>
c0012aec:	83 c4 10             	add    esp,0x10
c0012aef:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012af4:	74 26                	je     c0012b1c <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012af6:	83 ec 0c             	sub    esp,0xc
c0012af9:	53                   	push   ebx
c0012afa:	e8 6d dc fe ff       	call   c000076c <strlen>
c0012aff:	83 c4 10             	add    esp,0x10
c0012b02:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012b07:	eb c7                	jmp    c0012ad0 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012b09:	83 ec 0c             	sub    esp,0xc
c0012b0c:	53                   	push   ebx
c0012b0d:	e8 5a dc fe ff       	call   c000076c <strlen>
c0012b12:	83 c4 10             	add    esp,0x10
c0012b15:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012b1a:	74 c7                	je     c0012ae3 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012b1c:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012b22:	5b                   	pop    ebx
c0012b23:	5e                   	pop    esi
c0012b24:	5f                   	pop    edi
c0012b25:	5d                   	pop    ebp
c0012b26:	c3                   	ret    
c0012b27:	90                   	nop

c0012b28 <File::File(char const*, Process*)>:
c0012b28:	83 ec 0c             	sub    esp,0xc
c0012b2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b2f:	83 ec 08             	sub    esp,0x8
c0012b32:	6a 00                	push   0x0
c0012b34:	50                   	push   eax
c0012b35:	e8 52 e2 ff ff       	call   c0010d8c <UnixFile::UnixFile(int)>
c0012b3a:	83 c4 10             	add    esp,0x10
c0012b3d:	ba 90 a6 02 c0       	mov    edx,0xc002a690
c0012b42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b46:	89 10                	mov    DWORD PTR [eax],edx
c0012b48:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012b4c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b56:	83 c0 0d             	add    eax,0xd
c0012b59:	83 ec 04             	sub    esp,0x4
c0012b5c:	52                   	push   edx
c0012b5d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b61:	50                   	push   eax
c0012b62:	e8 17 fe ff ff       	call   c001297e <Fs::standardiseFiles(char*, char const*, char const*)>
c0012b67:	83 c4 10             	add    esp,0x10
c0012b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b6e:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012b71:	8d 50 bf             	lea    edx,[eax-0x41]
c0012b74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b78:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012b7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b82:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012b86:	90                   	nop
c0012b87:	83 c4 0c             	add    esp,0xc
c0012b8a:	c3                   	ret    
c0012b8b:	90                   	nop

c0012b8c <File::open(FileOpenMode)>:
c0012b8c:	53                   	push   ebx
c0012b8d:	b8 0b 00 00 00       	mov    eax,0xb
c0012b92:	83 ec 08             	sub    esp,0x8
c0012b95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012b99:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012ba0:	80 fa 19             	cmp    dl,0x19
c0012ba3:	77 40                	ja     c0012be5 <File::open(FileOpenMode)+0x59>
c0012ba5:	8b 14 95 00 dd 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2300]
c0012bac:	85 d2                	test   edx,edx
c0012bae:	74 35                	je     c0012be5 <File::open(FileOpenMode)+0x59>
c0012bb0:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012bb6:	85 d2                	test   edx,edx
c0012bb8:	74 2b                	je     c0012be5 <File::open(FileOpenMode)+0x59>
c0012bba:	b8 06 00 00 00       	mov    eax,0x6
c0012bbf:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012bc3:	75 20                	jne    c0012be5 <File::open(FileOpenMode)+0x59>
c0012bc5:	8b 02                	mov    eax,DWORD PTR [edx]
c0012bc7:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012bcd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012bd1:	51                   	push   ecx
c0012bd2:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012bd5:	51                   	push   ecx
c0012bd6:	52                   	push   edx
c0012bd7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012bda:	83 c4 10             	add    esp,0x10
c0012bdd:	85 c0                	test   eax,eax
c0012bdf:	75 04                	jne    c0012be5 <File::open(FileOpenMode)+0x59>
c0012be1:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012be5:	83 c4 08             	add    esp,0x8
c0012be8:	5b                   	pop    ebx
c0012be9:	c3                   	ret    

c0012bea <File::close()>:
c0012bea:	53                   	push   ebx
c0012beb:	b8 0b 00 00 00       	mov    eax,0xb
c0012bf0:	83 ec 08             	sub    esp,0x8
c0012bf3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012bf7:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012bfe:	80 fa 19             	cmp    dl,0x19
c0012c01:	77 41                	ja     c0012c44 <File::close()+0x5a>
c0012c03:	8b 1c 95 00 dd 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd2300]
c0012c0a:	85 db                	test   ebx,ebx
c0012c0c:	74 36                	je     c0012c44 <File::close()+0x5a>
c0012c0e:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012c15:	74 2d                	je     c0012c44 <File::close()+0x5a>
c0012c17:	b8 05 00 00 00       	mov    eax,0x5
c0012c1c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012c20:	74 22                	je     c0012c44 <File::close()+0x5a>
c0012c22:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012c26:	8b 04 95 00 dd 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2300]
c0012c2d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012c33:	53                   	push   ebx
c0012c34:	53                   	push   ebx
c0012c35:	8b 10                	mov    edx,DWORD PTR [eax]
c0012c37:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012c3d:	50                   	push   eax
c0012c3e:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012c41:	83 c4 10             	add    esp,0x10
c0012c44:	83 c4 08             	add    esp,0x8
c0012c47:	5b                   	pop    ebx
c0012c48:	c3                   	ret    
c0012c49:	90                   	nop

c0012c4a <File::seek(unsigned long long)>:
c0012c4a:	56                   	push   esi
c0012c4b:	53                   	push   ebx
c0012c4c:	b8 0b 00 00 00       	mov    eax,0xb
c0012c51:	51                   	push   ecx
c0012c52:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012c56:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012c5a:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012c61:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012c65:	80 fa 19             	cmp    dl,0x19
c0012c68:	77 31                	ja     c0012c9b <File::seek(unsigned long long)+0x51>
c0012c6a:	8b 14 95 00 dd 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2300]
c0012c71:	85 d2                	test   edx,edx
c0012c73:	74 26                	je     c0012c9b <File::seek(unsigned long long)+0x51>
c0012c75:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012c7b:	85 d2                	test   edx,edx
c0012c7d:	74 1c                	je     c0012c9b <File::seek(unsigned long long)+0x51>
c0012c7f:	b8 05 00 00 00       	mov    eax,0x5
c0012c84:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012c88:	74 11                	je     c0012c9b <File::seek(unsigned long long)+0x51>
c0012c8a:	8b 02                	mov    eax,DWORD PTR [edx]
c0012c8c:	53                   	push   ebx
c0012c8d:	51                   	push   ecx
c0012c8e:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012c94:	52                   	push   edx
c0012c95:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012c98:	83 c4 10             	add    esp,0x10
c0012c9b:	5a                   	pop    edx
c0012c9c:	5b                   	pop    ebx
c0012c9d:	5e                   	pop    esi
c0012c9e:	c3                   	ret    
c0012c9f:	90                   	nop

c0012ca0 <File::tell(unsigned long long*)>:
c0012ca0:	83 ec 0c             	sub    esp,0xc
c0012ca3:	b8 0b 00 00 00       	mov    eax,0xb
c0012ca8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012cac:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012cb3:	80 fa 19             	cmp    dl,0x19
c0012cb6:	77 34                	ja     c0012cec <File::tell(unsigned long long*)+0x4c>
c0012cb8:	8b 14 95 00 dd 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2300]
c0012cbf:	85 d2                	test   edx,edx
c0012cc1:	74 29                	je     c0012cec <File::tell(unsigned long long*)+0x4c>
c0012cc3:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012cc9:	85 d2                	test   edx,edx
c0012ccb:	74 1f                	je     c0012cec <File::tell(unsigned long long*)+0x4c>
c0012ccd:	b8 05 00 00 00       	mov    eax,0x5
c0012cd2:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012cd6:	74 14                	je     c0012cec <File::tell(unsigned long long*)+0x4c>
c0012cd8:	50                   	push   eax
c0012cd9:	8b 02                	mov    eax,DWORD PTR [edx]
c0012cdb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012cdf:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012ce5:	52                   	push   edx
c0012ce6:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012ce9:	83 c4 10             	add    esp,0x10
c0012cec:	83 c4 0c             	add    esp,0xc
c0012cef:	c3                   	ret    

c0012cf0 <File::rewind()>:
c0012cf0:	83 ec 10             	sub    esp,0x10
c0012cf3:	6a 00                	push   0x0
c0012cf5:	6a 00                	push   0x0
c0012cf7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cfb:	e8 4a ff ff ff       	call   c0012c4a <File::seek(unsigned long long)>
c0012d00:	83 c4 1c             	add    esp,0x1c
c0012d03:	c3                   	ret    

c0012d04 <File::unlink()>:
c0012d04:	83 ec 0c             	sub    esp,0xc
c0012d07:	b8 0b 00 00 00       	mov    eax,0xb
c0012d0c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012d10:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012d17:	80 f9 19             	cmp    cl,0x19
c0012d1a:	77 2f                	ja     c0012d4b <File::unlink()+0x47>
c0012d1c:	8b 0c 8d 00 dd 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2300]
c0012d23:	85 c9                	test   ecx,ecx
c0012d25:	74 24                	je     c0012d4b <File::unlink()+0x47>
c0012d27:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012d2d:	85 c9                	test   ecx,ecx
c0012d2f:	74 1a                	je     c0012d4b <File::unlink()+0x47>
c0012d31:	b8 06 00 00 00       	mov    eax,0x6
c0012d36:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012d3a:	75 0f                	jne    c0012d4b <File::unlink()+0x47>
c0012d3c:	83 c2 0d             	add    edx,0xd
c0012d3f:	50                   	push   eax
c0012d40:	50                   	push   eax
c0012d41:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012d43:	52                   	push   edx
c0012d44:	51                   	push   ecx
c0012d45:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012d48:	83 c4 10             	add    esp,0x10
c0012d4b:	83 c4 0c             	add    esp,0xc
c0012d4e:	c3                   	ret    
c0012d4f:	90                   	nop

c0012d50 <File::rename(char const*)>:
c0012d50:	83 ec 0c             	sub    esp,0xc
c0012d53:	b8 0b 00 00 00       	mov    eax,0xb
c0012d58:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012d5c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012d63:	80 f9 19             	cmp    cl,0x19
c0012d66:	77 32                	ja     c0012d9a <File::rename(char const*)+0x4a>
c0012d68:	8b 0c 8d 00 dd 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2300]
c0012d6f:	85 c9                	test   ecx,ecx
c0012d71:	74 27                	je     c0012d9a <File::rename(char const*)+0x4a>
c0012d73:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012d79:	85 c9                	test   ecx,ecx
c0012d7b:	74 1d                	je     c0012d9a <File::rename(char const*)+0x4a>
c0012d7d:	b8 06 00 00 00       	mov    eax,0x6
c0012d82:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012d86:	75 12                	jne    c0012d9a <File::rename(char const*)+0x4a>
c0012d88:	83 c2 0d             	add    edx,0xd
c0012d8b:	50                   	push   eax
c0012d8c:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012d8e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012d92:	52                   	push   edx
c0012d93:	51                   	push   ecx
c0012d94:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012d97:	83 c4 10             	add    esp,0x10
c0012d9a:	83 c4 0c             	add    esp,0xc
c0012d9d:	c3                   	ret    

c0012d9e <File::chfatattr(unsigned char, unsigned char)>:
c0012d9e:	57                   	push   edi
c0012d9f:	b8 0b 00 00 00       	mov    eax,0xb
c0012da4:	56                   	push   esi
c0012da5:	53                   	push   ebx
c0012da6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012daa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012dae:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012db5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012db9:	80 f9 19             	cmp    cl,0x19
c0012dbc:	77 37                	ja     c0012df5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012dbe:	8b 0c 8d 00 dd 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2300]
c0012dc5:	85 c9                	test   ecx,ecx
c0012dc7:	74 2c                	je     c0012df5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012dc9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012dcf:	85 c9                	test   ecx,ecx
c0012dd1:	74 22                	je     c0012df5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012dd3:	b8 06 00 00 00       	mov    eax,0x6
c0012dd8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ddc:	75 17                	jne    c0012df5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012dde:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012de0:	89 f0                	mov    eax,esi
c0012de2:	83 c2 0d             	add    edx,0xd
c0012de5:	0f b6 f0             	movzx  esi,al
c0012de8:	0f b6 db             	movzx  ebx,bl
c0012deb:	56                   	push   esi
c0012dec:	53                   	push   ebx
c0012ded:	52                   	push   edx
c0012dee:	51                   	push   ecx
c0012def:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012df2:	83 c4 10             	add    esp,0x10
c0012df5:	5b                   	pop    ebx
c0012df6:	5e                   	pop    esi
c0012df7:	5f                   	pop    edi
c0012df8:	c3                   	ret    
c0012df9:	90                   	nop

c0012dfa <File::exists()>:
c0012dfa:	83 ec 0c             	sub    esp,0xc
c0012dfd:	31 c0                	xor    eax,eax
c0012dff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e03:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e0a:	80 f9 19             	cmp    cl,0x19
c0012e0d:	77 24                	ja     c0012e33 <File::exists()+0x39>
c0012e0f:	8b 0c 8d 00 dd 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2300]
c0012e16:	85 c9                	test   ecx,ecx
c0012e18:	74 19                	je     c0012e33 <File::exists()+0x39>
c0012e1a:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e20:	85 c9                	test   ecx,ecx
c0012e22:	74 0f                	je     c0012e33 <File::exists()+0x39>
c0012e24:	83 c2 0d             	add    edx,0xd
c0012e27:	50                   	push   eax
c0012e28:	50                   	push   eax
c0012e29:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e2b:	52                   	push   edx
c0012e2c:	51                   	push   ecx
c0012e2d:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012e30:	83 c4 10             	add    esp,0x10
c0012e33:	83 c4 0c             	add    esp,0xc
c0012e36:	c3                   	ret    
c0012e37:	90                   	nop

c0012e38 <File::stat(unsigned long long*, bool*)>:
c0012e38:	56                   	push   esi
c0012e39:	53                   	push   ebx
c0012e3a:	50                   	push   eax
c0012e3b:	b8 0b 00 00 00       	mov    eax,0xb
c0012e40:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e44:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012e48:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e4f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012e53:	80 f9 19             	cmp    cl,0x19
c0012e56:	77 3d                	ja     c0012e95 <File::stat(unsigned long long*, bool*)+0x5d>
c0012e58:	8b 0c 8d 00 dd 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2300]
c0012e5f:	85 c9                	test   ecx,ecx
c0012e61:	74 32                	je     c0012e95 <File::stat(unsigned long long*, bool*)+0x5d>
c0012e63:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e69:	85 c9                	test   ecx,ecx
c0012e6b:	74 28                	je     c0012e95 <File::stat(unsigned long long*, bool*)+0x5d>
c0012e6d:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e6f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012e73:	74 13                	je     c0012e88 <File::stat(unsigned long long*, bool*)+0x50>
c0012e75:	83 ec 04             	sub    esp,0x4
c0012e78:	56                   	push   esi
c0012e79:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012e7f:	51                   	push   ecx
c0012e80:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012e83:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012e86:	eb 0a                	jmp    c0012e92 <File::stat(unsigned long long*, bool*)+0x5a>
c0012e88:	53                   	push   ebx
c0012e89:	83 c2 0d             	add    edx,0xd
c0012e8c:	56                   	push   esi
c0012e8d:	52                   	push   edx
c0012e8e:	51                   	push   ecx
c0012e8f:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012e92:	83 c4 10             	add    esp,0x10
c0012e95:	5a                   	pop    edx
c0012e96:	5b                   	pop    ebx
c0012e97:	5e                   	pop    esi
c0012e98:	c3                   	ret    

c0012e99 <Fs::setcwd(Process*, char*)>:
c0012e99:	55                   	push   ebp
c0012e9a:	57                   	push   edi
c0012e9b:	56                   	push   esi
c0012e9c:	53                   	push   ebx
c0012e9d:	81 ec 20 02 00 00    	sub    esp,0x220
c0012ea3:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012eaa:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012eb0:	57                   	push   edi
c0012eb1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012eb8:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012ebc:	56                   	push   esi
c0012ebd:	e8 bc fa ff ff       	call   c001297e <Fs::standardiseFiles(char*, char const*, char const*)>
c0012ec2:	89 34 24             	mov    DWORD PTR [esp],esi
c0012ec5:	e8 a2 d8 fe ff       	call   c000076c <strlen>
c0012eca:	83 c4 10             	add    esp,0x10
c0012ecd:	83 f8 02             	cmp    eax,0x2
c0012ed0:	77 17                	ja     c0012ee9 <Fs::setcwd(Process*, char*)+0x50>
c0012ed2:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0012ed7:	83 e8 41             	sub    eax,0x41
c0012eda:	83 f8 19             	cmp    eax,0x19
c0012edd:	76 24                	jbe    c0012f03 <Fs::setcwd(Process*, char*)+0x6a>
c0012edf:	b8 03 00 00 00       	mov    eax,0x3
c0012ee4:	e9 e0 00 00 00       	jmp    c0012fc9 <Fs::setcwd(Process*, char*)+0x130>
c0012ee9:	83 ec 0c             	sub    esp,0xc
c0012eec:	56                   	push   esi
c0012eed:	e8 7a d8 fe ff       	call   c000076c <strlen>
c0012ef2:	83 c4 10             	add    esp,0x10
c0012ef5:	83 f8 03             	cmp    eax,0x3
c0012ef8:	75 34                	jne    c0012f2e <Fs::setcwd(Process*, char*)+0x95>
c0012efa:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0012eff:	75 2d                	jne    c0012f2e <Fs::setcwd(Process*, char*)+0x95>
c0012f01:	eb cf                	jmp    c0012ed2 <Fs::setcwd(Process*, char*)+0x39>
c0012f03:	8b 14 85 00 dd 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2300]
c0012f0a:	b8 05 00 00 00       	mov    eax,0x5
c0012f0f:	85 d2                	test   edx,edx
c0012f11:	0f 84 b2 00 00 00    	je     c0012fc9 <Fs::setcwd(Process*, char*)+0x130>
c0012f17:	b8 06 00 00 00       	mov    eax,0x6
c0012f1c:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012f23:	0f 85 92 00 00 00    	jne    c0012fbb <Fs::setcwd(Process*, char*)+0x122>
c0012f29:	e9 9b 00 00 00       	jmp    c0012fc9 <Fs::setcwd(Process*, char*)+0x130>
c0012f2e:	83 ec 0c             	sub    esp,0xc
c0012f31:	68 14 01 00 00       	push   0x114
c0012f36:	e8 61 c6 ff ff       	call   c000f59c <malloc>
c0012f3b:	83 c4 0c             	add    esp,0xc
c0012f3e:	89 c3                	mov    ebx,eax
c0012f40:	55                   	push   ebp
c0012f41:	56                   	push   esi
c0012f42:	50                   	push   eax
c0012f43:	e8 e0 fb ff ff       	call   c0012b28 <File::File(char const*, Process*)>
c0012f48:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0012f4d:	83 c4 0c             	add    esp,0xc
c0012f50:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0012f54:	50                   	push   eax
c0012f55:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012f59:	50                   	push   eax
c0012f5a:	53                   	push   ebx
c0012f5b:	e8 d8 fe ff ff       	call   c0012e38 <File::stat(unsigned long long*, bool*)>
c0012f60:	83 c4 10             	add    esp,0x10
c0012f63:	83 f8 02             	cmp    eax,0x2
c0012f66:	74 04                	je     c0012f6c <Fs::setcwd(Process*, char*)+0xd3>
c0012f68:	85 c0                	test   eax,eax
c0012f6a:	74 1c                	je     c0012f88 <Fs::setcwd(Process*, char*)+0xef>
c0012f6c:	b8 01 00 00 00       	mov    eax,0x1
c0012f71:	85 db                	test   ebx,ebx
c0012f73:	74 54                	je     c0012fc9 <Fs::setcwd(Process*, char*)+0x130>
c0012f75:	83 ec 0c             	sub    esp,0xc
c0012f78:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f7a:	53                   	push   ebx
c0012f7b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012f7e:	83 c4 10             	add    esp,0x10
c0012f81:	b8 01 00 00 00       	mov    eax,0x1
c0012f86:	eb 41                	jmp    c0012fc9 <Fs::setcwd(Process*, char*)+0x130>
c0012f88:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0012f8d:	75 1c                	jne    c0012fab <Fs::setcwd(Process*, char*)+0x112>
c0012f8f:	b8 02 00 00 00       	mov    eax,0x2
c0012f94:	85 db                	test   ebx,ebx
c0012f96:	74 31                	je     c0012fc9 <Fs::setcwd(Process*, char*)+0x130>
c0012f98:	83 ec 0c             	sub    esp,0xc
c0012f9b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f9d:	53                   	push   ebx
c0012f9e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012fa1:	83 c4 10             	add    esp,0x10
c0012fa4:	b8 02 00 00 00       	mov    eax,0x2
c0012fa9:	eb 1e                	jmp    c0012fc9 <Fs::setcwd(Process*, char*)+0x130>
c0012fab:	85 db                	test   ebx,ebx
c0012fad:	74 0c                	je     c0012fbb <Fs::setcwd(Process*, char*)+0x122>
c0012faf:	83 ec 0c             	sub    esp,0xc
c0012fb2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012fb4:	53                   	push   ebx
c0012fb5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012fb8:	83 c4 10             	add    esp,0x10
c0012fbb:	50                   	push   eax
c0012fbc:	50                   	push   eax
c0012fbd:	56                   	push   esi
c0012fbe:	57                   	push   edi
c0012fbf:	e8 48 d8 fe ff       	call   c000080c <strcpy>
c0012fc4:	83 c4 10             	add    esp,0x10
c0012fc7:	31 c0                	xor    eax,eax
c0012fc9:	81 c4 1c 02 00 00    	add    esp,0x21c
c0012fcf:	5b                   	pop    ebx
c0012fd0:	5e                   	pop    esi
c0012fd1:	5f                   	pop    edi
c0012fd2:	5d                   	pop    ebp
c0012fd3:	c3                   	ret    

c0012fd4 <Directory::Directory(char const*, Process*)>:
c0012fd4:	83 ec 0c             	sub    esp,0xc
c0012fd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fdb:	83 ec 08             	sub    esp,0x8
c0012fde:	6a 00                	push   0x0
c0012fe0:	50                   	push   eax
c0012fe1:	e8 a6 dd ff ff       	call   c0010d8c <UnixFile::UnixFile(int)>
c0012fe6:	83 c4 10             	add    esp,0x10
c0012fe9:	ba ac a6 02 c0       	mov    edx,0xc002a6ac
c0012fee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ff2:	89 10                	mov    DWORD PTR [eax],edx
c0012ff4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012ff8:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012ffe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013002:	83 c0 0d             	add    eax,0xd
c0013005:	83 ec 04             	sub    esp,0x4
c0013008:	52                   	push   edx
c0013009:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001300d:	50                   	push   eax
c001300e:	e8 6b f9 ff ff       	call   c001297e <Fs::standardiseFiles(char*, char const*, char const*)>
c0013013:	83 c4 10             	add    esp,0x10
c0013016:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001301a:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001301d:	8d 50 bf             	lea    edx,[eax-0x41]
c0013020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013024:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001302a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001302e:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013032:	90                   	nop
c0013033:	83 c4 0c             	add    esp,0xc
c0013036:	c3                   	ret    
c0013037:	90                   	nop

c0013038 <Directory::open()>:
c0013038:	53                   	push   ebx
c0013039:	b8 0b 00 00 00       	mov    eax,0xb
c001303e:	83 ec 08             	sub    esp,0x8
c0013041:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013045:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001304c:	80 fa 19             	cmp    dl,0x19
c001304f:	77 3d                	ja     c001308e <Directory::open()+0x56>
c0013051:	8b 14 95 00 dd 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2300]
c0013058:	85 d2                	test   edx,edx
c001305a:	74 32                	je     c001308e <Directory::open()+0x56>
c001305c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013062:	85 d2                	test   edx,edx
c0013064:	74 28                	je     c001308e <Directory::open()+0x56>
c0013066:	b8 06 00 00 00       	mov    eax,0x6
c001306b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001306f:	75 1d                	jne    c001308e <Directory::open()+0x56>
c0013071:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013077:	50                   	push   eax
c0013078:	8b 02                	mov    eax,DWORD PTR [edx]
c001307a:	51                   	push   ecx
c001307b:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001307e:	51                   	push   ecx
c001307f:	52                   	push   edx
c0013080:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013083:	83 c4 10             	add    esp,0x10
c0013086:	85 c0                	test   eax,eax
c0013088:	75 04                	jne    c001308e <Directory::open()+0x56>
c001308a:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001308e:	83 c4 08             	add    esp,0x8
c0013091:	5b                   	pop    ebx
c0013092:	c3                   	ret    
c0013093:	90                   	nop

c0013094 <Directory::close()>:
c0013094:	53                   	push   ebx
c0013095:	b8 0b 00 00 00       	mov    eax,0xb
c001309a:	83 ec 08             	sub    esp,0x8
c001309d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00130a1:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00130a8:	80 fa 19             	cmp    dl,0x19
c00130ab:	77 41                	ja     c00130ee <Directory::close()+0x5a>
c00130ad:	8b 1c 95 00 dd 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd2300]
c00130b4:	85 db                	test   ebx,ebx
c00130b6:	74 36                	je     c00130ee <Directory::close()+0x5a>
c00130b8:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00130bf:	74 2d                	je     c00130ee <Directory::close()+0x5a>
c00130c1:	b8 05 00 00 00       	mov    eax,0x5
c00130c6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00130ca:	74 22                	je     c00130ee <Directory::close()+0x5a>
c00130cc:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00130d0:	8b 04 95 00 dd 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2300]
c00130d7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00130dd:	53                   	push   ebx
c00130de:	53                   	push   ebx
c00130df:	8b 10                	mov    edx,DWORD PTR [eax]
c00130e1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00130e7:	50                   	push   eax
c00130e8:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00130eb:	83 c4 10             	add    esp,0x10
c00130ee:	83 c4 08             	add    esp,0x8
c00130f1:	5b                   	pop    ebx
c00130f2:	c3                   	ret    
c00130f3:	90                   	nop

c00130f4 <Directory::unlink()>:
c00130f4:	83 ec 0c             	sub    esp,0xc
c00130f7:	b8 0b 00 00 00       	mov    eax,0xb
c00130fc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013100:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013107:	80 f9 19             	cmp    cl,0x19
c001310a:	77 2f                	ja     c001313b <Directory::unlink()+0x47>
c001310c:	8b 0c 8d 00 dd 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2300]
c0013113:	85 c9                	test   ecx,ecx
c0013115:	74 24                	je     c001313b <Directory::unlink()+0x47>
c0013117:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001311d:	85 c9                	test   ecx,ecx
c001311f:	74 1a                	je     c001313b <Directory::unlink()+0x47>
c0013121:	b8 06 00 00 00       	mov    eax,0x6
c0013126:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001312a:	75 0f                	jne    c001313b <Directory::unlink()+0x47>
c001312c:	83 c2 0d             	add    edx,0xd
c001312f:	50                   	push   eax
c0013130:	50                   	push   eax
c0013131:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013133:	52                   	push   edx
c0013134:	51                   	push   ecx
c0013135:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013138:	83 c4 10             	add    esp,0x10
c001313b:	83 c4 0c             	add    esp,0xc
c001313e:	c3                   	ret    
c001313f:	90                   	nop

c0013140 <Directory::rename(char const*)>:
c0013140:	83 ec 0c             	sub    esp,0xc
c0013143:	b8 0b 00 00 00       	mov    eax,0xb
c0013148:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001314c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013153:	80 f9 19             	cmp    cl,0x19
c0013156:	77 32                	ja     c001318a <Directory::rename(char const*)+0x4a>
c0013158:	8b 0c 8d 00 dd 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2300]
c001315f:	85 c9                	test   ecx,ecx
c0013161:	74 27                	je     c001318a <Directory::rename(char const*)+0x4a>
c0013163:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013169:	85 c9                	test   ecx,ecx
c001316b:	74 1d                	je     c001318a <Directory::rename(char const*)+0x4a>
c001316d:	b8 06 00 00 00       	mov    eax,0x6
c0013172:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013176:	75 12                	jne    c001318a <Directory::rename(char const*)+0x4a>
c0013178:	83 c2 0d             	add    edx,0xd
c001317b:	50                   	push   eax
c001317c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001317e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013182:	52                   	push   edx
c0013183:	51                   	push   ecx
c0013184:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013187:	83 c4 10             	add    esp,0x10
c001318a:	83 c4 0c             	add    esp,0xc
c001318d:	c3                   	ret    

c001318e <Directory::exists()>:
c001318e:	83 ec 0c             	sub    esp,0xc
c0013191:	31 c0                	xor    eax,eax
c0013193:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013197:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001319e:	80 f9 19             	cmp    cl,0x19
c00131a1:	77 24                	ja     c00131c7 <Directory::exists()+0x39>
c00131a3:	8b 0c 8d 00 dd 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2300]
c00131aa:	85 c9                	test   ecx,ecx
c00131ac:	74 19                	je     c00131c7 <Directory::exists()+0x39>
c00131ae:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00131b4:	85 c9                	test   ecx,ecx
c00131b6:	74 0f                	je     c00131c7 <Directory::exists()+0x39>
c00131b8:	83 c2 0d             	add    edx,0xd
c00131bb:	50                   	push   eax
c00131bc:	50                   	push   eax
c00131bd:	8b 01                	mov    eax,DWORD PTR [ecx]
c00131bf:	52                   	push   edx
c00131c0:	51                   	push   ecx
c00131c1:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00131c4:	83 c4 10             	add    esp,0x10
c00131c7:	83 c4 0c             	add    esp,0xc
c00131ca:	c3                   	ret    
c00131cb:	90                   	nop

c00131cc <Directory::read(dirent*)>:
c00131cc:	83 ec 1c             	sub    esp,0x1c
c00131cf:	b8 0b 00 00 00       	mov    eax,0xb
c00131d4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00131d8:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00131df:	80 fa 19             	cmp    dl,0x19
c00131e2:	77 30                	ja     c0013214 <Directory::read(dirent*)+0x48>
c00131e4:	8b 14 95 00 dd 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2300]
c00131eb:	85 d2                	test   edx,edx
c00131ed:	74 25                	je     c0013214 <Directory::read(dirent*)+0x48>
c00131ef:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00131f6:	74 1c                	je     c0013214 <Directory::read(dirent*)+0x48>
c00131f8:	83 ec 0c             	sub    esp,0xc
c00131fb:	8b 01                	mov    eax,DWORD PTR [ecx]
c00131fd:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013201:	52                   	push   edx
c0013202:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013206:	6a 00                	push   0x0
c0013208:	68 10 01 00 00       	push   0x110
c001320d:	51                   	push   ecx
c001320e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013211:	83 c4 20             	add    esp,0x20
c0013214:	83 c4 1c             	add    esp,0x1c
c0013217:	c3                   	ret    

c0013218 <Directory::create()>:
c0013218:	83 ec 0c             	sub    esp,0xc
c001321b:	b8 0b 00 00 00       	mov    eax,0xb
c0013220:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013224:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001322b:	80 f9 19             	cmp    cl,0x19
c001322e:	77 2f                	ja     c001325f <Directory::create()+0x47>
c0013230:	8b 0c 8d 00 dd 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2300]
c0013237:	85 c9                	test   ecx,ecx
c0013239:	74 24                	je     c001325f <Directory::create()+0x47>
c001323b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013241:	85 c9                	test   ecx,ecx
c0013243:	74 1a                	je     c001325f <Directory::create()+0x47>
c0013245:	b8 06 00 00 00       	mov    eax,0x6
c001324a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001324e:	75 0f                	jne    c001325f <Directory::create()+0x47>
c0013250:	83 c2 0d             	add    edx,0xd
c0013253:	50                   	push   eax
c0013254:	50                   	push   eax
c0013255:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013257:	52                   	push   edx
c0013258:	51                   	push   ecx
c0013259:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001325c:	83 c4 10             	add    esp,0x10
c001325f:	83 c4 0c             	add    esp,0xc
c0013262:	c3                   	ret    
c0013263:	90                   	nop

c0013264 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013264:	b8 0a 00 00 00       	mov    eax,0xa
c0013269:	c3                   	ret    

c001326a <Bus::Bus(char const*)>:
c001326a:	83 ec 0c             	sub    esp,0xc
c001326d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013271:	83 ec 08             	sub    esp,0x8
c0013274:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013278:	50                   	push   eax
c0013279:	e8 88 09 00 00       	call   c0013c06 <Device::Device(char const*)>
c001327e:	83 c4 10             	add    esp,0x10
c0013281:	ba c8 a6 02 c0       	mov    edx,0xc002a6c8
c0013286:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001328a:	89 10                	mov    DWORD PTR [eax],edx
c001328c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013290:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c001329a:	90                   	nop
c001329b:	83 c4 0c             	add    esp,0xc
c001329e:	c3                   	ret    
c001329f:	90                   	nop

c00132a0 <Bus::~Bus()>:
c00132a0:	83 ec 0c             	sub    esp,0xc
c00132a3:	ba c8 a6 02 c0       	mov    edx,0xc002a6c8
c00132a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132ac:	89 10                	mov    DWORD PTR [eax],edx
c00132ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132b2:	83 ec 0c             	sub    esp,0xc
c00132b5:	50                   	push   eax
c00132b6:	e8 15 06 00 00       	call   c00138d0 <Device::~Device()>
c00132bb:	83 c4 10             	add    esp,0x10
c00132be:	90                   	nop
c00132bf:	83 c4 0c             	add    esp,0xc
c00132c2:	c3                   	ret    
c00132c3:	90                   	nop

c00132c4 <Bus::~Bus()>:
c00132c4:	83 ec 0c             	sub    esp,0xc
c00132c7:	83 ec 0c             	sub    esp,0xc
c00132ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132ce:	e8 cd ff ff ff       	call   c00132a0 <Bus::~Bus()>
c00132d3:	83 c4 10             	add    esp,0x10
c00132d6:	83 ec 08             	sub    esp,0x8
c00132d9:	68 58 01 00 00       	push   0x158
c00132de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132e2:	e8 0a f2 ff ff       	call   c00124f1 <operator delete(void*, unsigned long)>
c00132e7:	83 c4 10             	add    esp,0x10
c00132ea:	83 c4 0c             	add    esp,0xc
c00132ed:	c3                   	ret    

c00132ee <Buzzer::Buzzer(char const*)>:
c00132ee:	83 ec 0c             	sub    esp,0xc
c00132f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132f5:	83 ec 08             	sub    esp,0x8
c00132f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132fc:	50                   	push   eax
c00132fd:	e8 04 09 00 00       	call   c0013c06 <Device::Device(char const*)>
c0013302:	83 c4 10             	add    esp,0x10
c0013305:	ba f4 a6 02 c0       	mov    edx,0xc002a6f4
c001330a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001330e:	89 10                	mov    DWORD PTR [eax],edx
c0013310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013314:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001331e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013322:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c001332c:	90                   	nop
c001332d:	83 c4 0c             	add    esp,0xc
c0013330:	c3                   	ret    
c0013331:	90                   	nop

c0013332 <Buzzer::~Buzzer()>:
c0013332:	83 ec 0c             	sub    esp,0xc
c0013335:	ba f4 a6 02 c0       	mov    edx,0xc002a6f4
c001333a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001333e:	89 10                	mov    DWORD PTR [eax],edx
c0013340:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013344:	83 ec 0c             	sub    esp,0xc
c0013347:	50                   	push   eax
c0013348:	e8 83 05 00 00       	call   c00138d0 <Device::~Device()>
c001334d:	83 c4 10             	add    esp,0x10
c0013350:	90                   	nop
c0013351:	83 c4 0c             	add    esp,0xc
c0013354:	c3                   	ret    
c0013355:	90                   	nop

c0013356 <Buzzer::~Buzzer()>:
c0013356:	83 ec 0c             	sub    esp,0xc
c0013359:	83 ec 0c             	sub    esp,0xc
c001335c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013360:	e8 cd ff ff ff       	call   c0013332 <Buzzer::~Buzzer()>
c0013365:	83 c4 10             	add    esp,0x10
c0013368:	83 ec 08             	sub    esp,0x8
c001336b:	68 5c 01 00 00       	push   0x15c
c0013370:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013374:	e8 78 f1 ff ff       	call   c00124f1 <operator delete(void*, unsigned long)>
c0013379:	83 c4 10             	add    esp,0x10
c001337c:	83 c4 0c             	add    esp,0xc
c001337f:	c3                   	ret    

c0013380 <Buzzer::stop()>:
c0013380:	83 ec 14             	sub    esp,0x14
c0013383:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013387:	8b 10                	mov    edx,DWORD PTR [eax]
c0013389:	6a 00                	push   0x0
c001338b:	50                   	push   eax
c001338c:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001338f:	83 c4 1c             	add    esp,0x1c
c0013392:	c3                   	ret    

c0013393 <beepThread(void*)>:
c0013393:	53                   	push   ebx
c0013394:	83 ec 08             	sub    esp,0x8
c0013397:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001339c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00133a0:	48                   	dec    eax
c00133a1:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c00133a6:	75 01                	jne    c00133a9 <beepThread(void*)+0x16>
c00133a8:	fb                   	sti    
c00133a9:	50                   	push   eax
c00133aa:	50                   	push   eax
c00133ab:	b8 40 42 0f 00       	mov    eax,0xf4240
c00133b0:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c00133b6:	52                   	push   edx
c00133b7:	50                   	push   eax
c00133b8:	e8 de a7 00 00       	call   c001db9b <nanoSleep(unsigned long long)>
c00133bd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00133c0:	e8 bb ff ff ff       	call   c0013380 <Buzzer::stop()>
c00133c5:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00133cd:	83 c4 18             	add    esp,0x18
c00133d0:	5b                   	pop    ebx
c00133d1:	e9 c1 a6 00 00       	jmp    c001da97 <blockTask(TaskState)>

c00133d6 <Buzzer::beep(int, int, bool)>:
c00133d6:	57                   	push   edi
c00133d7:	56                   	push   esi
c00133d8:	53                   	push   ebx
c00133d9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00133dd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00133e1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00133e5:	52                   	push   edx
c00133e6:	52                   	push   edx
c00133e7:	8b 06                	mov    eax,DWORD PTR [esi]
c00133e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133ed:	56                   	push   esi
c00133ee:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00133f1:	83 c4 10             	add    esp,0x10
c00133f4:	89 f8                	mov    eax,edi
c00133f6:	84 c0                	test   al,al
c00133f8:	74 1f                	je     c0013419 <Buzzer::beep(int, int, bool)+0x43>
c00133fa:	50                   	push   eax
c00133fb:	50                   	push   eax
c00133fc:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013402:	99                   	cdq    
c0013403:	52                   	push   edx
c0013404:	50                   	push   eax
c0013405:	e8 91 a7 00 00       	call   c001db9b <nanoSleep(unsigned long long)>
c001340a:	83 c4 10             	add    esp,0x10
c001340d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013411:	5b                   	pop    ebx
c0013412:	5e                   	pop    esi
c0013413:	5f                   	pop    edi
c0013414:	e9 67 ff ff ff       	jmp    c0013380 <Buzzer::stop()>
c0013419:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c001341f:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0013424:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c001342c:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013430:	c7 44 24 14 93 33 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013393
c0013438:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001343c:	5b                   	pop    ebx
c001343d:	5e                   	pop    esi
c001343e:	5f                   	pop    edi
c001343f:	e9 58 a2 00 00       	jmp    c001d69c <Process::createThread(void (*)(void*), void*, int)>

c0013444 <User::loadClockSettings(int)>:
c0013444:	53                   	push   ebx
c0013445:	83 ec 14             	sub    esp,0x14
c0013448:	68 14 01 00 00       	push   0x114
c001344d:	e8 4a c1 ff ff       	call   c000f59c <malloc>
c0013452:	83 c4 0c             	add    esp,0xc
c0013455:	89 c3                	mov    ebx,eax
c0013457:	ff 35 50 0c 03 c0    	push   DWORD PTR ds:0xc0030c50
c001345d:	68 1c a7 02 c0       	push   0xc002a71c
c0013462:	50                   	push   eax
c0013463:	e8 c0 f6 ff ff       	call   c0012b28 <File::File(char const*, Process*)>
c0013468:	58                   	pop    eax
c0013469:	5a                   	pop    edx
c001346a:	6a 01                	push   0x1
c001346c:	53                   	push   ebx
c001346d:	e8 1a f7 ff ff       	call   c0012b8c <File::open(FileOpenMode)>
c0013472:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013475:	e8 70 f7 ff ff       	call   c0012bea <File::close()>
c001347a:	83 c4 10             	add    esp,0x10
c001347d:	85 db                	test   ebx,ebx
c001347f:	74 0f                	je     c0013490 <User::loadClockSettings(int)+0x4c>
c0013481:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013483:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013487:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001348a:	83 c4 08             	add    esp,0x8
c001348d:	5b                   	pop    ebx
c001348e:	ff e0                	jmp    eax
c0013490:	83 c4 08             	add    esp,0x8
c0013493:	5b                   	pop    ebx
c0013494:	c3                   	ret    
c0013495:	90                   	nop

c0013496 <Clock::Clock(char const*)>:
c0013496:	83 ec 0c             	sub    esp,0xc
c0013499:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001349d:	83 ec 08             	sub    esp,0x8
c00134a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134a4:	50                   	push   eax
c00134a5:	e8 5c 07 00 00       	call   c0013c06 <Device::Device(char const*)>
c00134aa:	83 c4 10             	add    esp,0x10
c00134ad:	ba 44 a7 02 c0       	mov    edx,0xc002a744
c00134b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134b6:	89 10                	mov    DWORD PTR [eax],edx
c00134b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134bc:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00134c6:	90                   	nop
c00134c7:	83 c4 0c             	add    esp,0xc
c00134ca:	c3                   	ret    
c00134cb:	90                   	nop

c00134cc <Clock::~Clock()>:
c00134cc:	83 ec 0c             	sub    esp,0xc
c00134cf:	ba 44 a7 02 c0       	mov    edx,0xc002a744
c00134d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134d8:	89 10                	mov    DWORD PTR [eax],edx
c00134da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134de:	83 ec 0c             	sub    esp,0xc
c00134e1:	50                   	push   eax
c00134e2:	e8 e9 03 00 00       	call   c00138d0 <Device::~Device()>
c00134e7:	83 c4 10             	add    esp,0x10
c00134ea:	90                   	nop
c00134eb:	83 c4 0c             	add    esp,0xc
c00134ee:	c3                   	ret    
c00134ef:	90                   	nop

c00134f0 <Clock::~Clock()>:
c00134f0:	83 ec 0c             	sub    esp,0xc
c00134f3:	83 ec 0c             	sub    esp,0xc
c00134f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134fa:	e8 cd ff ff ff       	call   c00134cc <Clock::~Clock()>
c00134ff:	83 c4 10             	add    esp,0x10
c0013502:	83 ec 08             	sub    esp,0x8
c0013505:	68 58 01 00 00       	push   0x158
c001350a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001350e:	e8 de ef ff ff       	call   c00124f1 <operator delete(void*, unsigned long)>
c0013513:	83 c4 10             	add    esp,0x10
c0013516:	83 c4 0c             	add    esp,0xc
c0013519:	c3                   	ret    

c001351a <Clock::timeInSecondsLocal()>:
c001351a:	53                   	push   ebx
c001351b:	83 ec 14             	sub    esp,0x14
c001351e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013522:	8b 10                	mov    edx,DWORD PTR [eax]
c0013524:	50                   	push   eax
c0013525:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013528:	0f b6 0d 7c d8 02 c0 	movzx  ecx,BYTE PTR ds:0xc002d87c
c001352f:	03 0d 80 d8 02 c0    	add    ecx,DWORD PTR ds:0xc002d880
c0013535:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001353b:	89 cb                	mov    ebx,ecx
c001353d:	c1 fb 1f             	sar    ebx,0x1f
c0013540:	01 c8                	add    eax,ecx
c0013542:	11 da                	adc    edx,ebx
c0013544:	83 c4 10             	add    esp,0x10
c0013547:	31 c9                	xor    ecx,ecx
c0013549:	80 3d 7d d8 02 c0 00 	cmp    BYTE PTR ds:0xc002d87d,0x0
c0013550:	74 05                	je     c0013557 <Clock::timeInSecondsLocal()+0x3d>
c0013552:	b9 08 07 00 00       	mov    ecx,0x708
c0013557:	31 db                	xor    ebx,ebx
c0013559:	01 c8                	add    eax,ecx
c001355b:	11 da                	adc    edx,ebx
c001355d:	83 c4 08             	add    esp,0x8
c0013560:	5b                   	pop    ebx
c0013561:	c3                   	ret    

c0013562 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013562:	57                   	push   edi
c0013563:	56                   	push   esi
c0013564:	53                   	push   ebx
c0013565:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013569:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001356d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001356f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013573:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013576:	0f b6 05 7c d8 02 c0 	movzx  eax,BYTE PTR ds:0xc002d87c
c001357d:	03 05 80 d8 02 c0    	add    eax,DWORD PTR ds:0xc002d880
c0013583:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013589:	99                   	cdq    
c001358a:	29 c6                	sub    esi,eax
c001358c:	19 d7                	sbb    edi,edx
c001358e:	89 f0                	mov    eax,esi
c0013590:	89 fa                	mov    edx,edi
c0013592:	31 f6                	xor    esi,esi
c0013594:	80 3d 7d d8 02 c0 00 	cmp    BYTE PTR ds:0xc002d87d,0x0
c001359b:	74 05                	je     c00135a2 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c001359d:	be 08 07 00 00       	mov    esi,0x708
c00135a2:	31 ff                	xor    edi,edi
c00135a4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00135a8:	29 f0                	sub    eax,esi
c00135aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00135ae:	19 fa                	sbb    edx,edi
c00135b0:	89 d8                	mov    eax,ebx
c00135b2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00135b6:	5b                   	pop    ebx
c00135b7:	5e                   	pop    esi
c00135b8:	5f                   	pop    edi
c00135b9:	ff e0                	jmp    eax

c00135bb <datetimeToSeconds(datetime_t)>:
c00135bb:	55                   	push   ebp
c00135bc:	57                   	push   edi
c00135bd:	56                   	push   esi
c00135be:	53                   	push   ebx
c00135bf:	83 ec 14             	sub    esp,0x14
c00135c2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00135c6:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00135ca:	89 d3                	mov    ebx,edx
c00135cc:	0f b6 c6             	movzx  eax,dh
c00135cf:	c1 eb 10             	shr    ebx,0x10
c00135d2:	48                   	dec    eax
c00135d3:	66 81 eb 6c 07       	sub    bx,0x76c
c00135d8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00135dc:	0f b6 f5             	movzx  esi,ch
c00135df:	89 cf                	mov    edi,ecx
c00135e1:	6b f6 3c             	imul   esi,esi,0x3c
c00135e4:	c1 ef 10             	shr    edi,0x10
c00135e7:	0f b6 c9             	movzx  ecx,cl
c00135ea:	89 f8                	mov    eax,edi
c00135ec:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00135f2:	0f b6 f8             	movzx  edi,al
c00135f5:	0f b6 d2             	movzx  edx,dl
c00135f8:	01 fe                	add    esi,edi
c00135fa:	01 f1                	add    ecx,esi
c00135fc:	0f b7 f3             	movzx  esi,bx
c00135ff:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013603:	c1 f9 1f             	sar    ecx,0x1f
c0013606:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c001360b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001360f:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013614:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c001361b:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001361f:	76 29                	jbe    c001364a <datetimeToSeconds(datetime_t)+0x8f>
c0013621:	f6 c3 03             	test   bl,0x3
c0013624:	75 24                	jne    c001364a <datetimeToSeconds(datetime_t)+0x8f>
c0013626:	31 d2                	xor    edx,edx
c0013628:	bf 64 00 00 00       	mov    edi,0x64
c001362d:	89 d8                	mov    eax,ebx
c001362f:	66 f7 f7             	div    di
c0013632:	66 85 d2             	test   dx,dx
c0013635:	75 12                	jne    c0013649 <datetimeToSeconds(datetime_t)+0x8e>
c0013637:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001363d:	bf 90 01 00 00       	mov    edi,0x190
c0013642:	99                   	cdq    
c0013643:	f7 ff                	idiv   edi
c0013645:	85 d2                	test   edx,edx
c0013647:	75 01                	jne    c001364a <datetimeToSeconds(datetime_t)+0x8f>
c0013649:	41                   	inc    ecx
c001364a:	66 83 fb 46          	cmp    bx,0x46
c001364e:	76 45                	jbe    c0013695 <datetimeToSeconds(datetime_t)+0xda>
c0013650:	bb 46 00 00 00       	mov    ebx,0x46
c0013655:	bf 64 00 00 00       	mov    edi,0x64
c001365a:	bd 90 01 00 00       	mov    ebp,0x190
c001365f:	b8 6d 01 00 00       	mov    eax,0x16d
c0013664:	f6 c3 03             	test   bl,0x3
c0013667:	75 23                	jne    c001368c <datetimeToSeconds(datetime_t)+0xd1>
c0013669:	89 d8                	mov    eax,ebx
c001366b:	99                   	cdq    
c001366c:	f7 ff                	idiv   edi
c001366e:	b8 6e 01 00 00       	mov    eax,0x16e
c0013673:	85 d2                	test   edx,edx
c0013675:	75 15                	jne    c001368c <datetimeToSeconds(datetime_t)+0xd1>
c0013677:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c001367d:	99                   	cdq    
c001367e:	f7 fd                	idiv   ebp
c0013680:	83 fa 01             	cmp    edx,0x1
c0013683:	19 c0                	sbb    eax,eax
c0013685:	f7 d0                	not    eax
c0013687:	05 6e 01 00 00       	add    eax,0x16e
c001368c:	01 c1                	add    ecx,eax
c001368e:	43                   	inc    ebx
c001368f:	39 f3                	cmp    ebx,esi
c0013691:	7c cc                	jl     c001365f <datetimeToSeconds(datetime_t)+0xa4>
c0013693:	eb 35                	jmp    c00136ca <datetimeToSeconds(datetime_t)+0x10f>
c0013695:	74 33                	je     c00136ca <datetimeToSeconds(datetime_t)+0x10f>
c0013697:	b8 45 00 00 00       	mov    eax,0x45
c001369c:	89 c2                	mov    edx,eax
c001369e:	83 e2 03             	and    edx,0x3
c00136a1:	39 f0                	cmp    eax,esi
c00136a3:	7e 0f                	jle    c00136b4 <datetimeToSeconds(datetime_t)+0xf9>
c00136a5:	83 fa 01             	cmp    edx,0x1
c00136a8:	19 d2                	sbb    edx,edx
c00136aa:	48                   	dec    eax
c00136ab:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00136b2:	eb e8                	jmp    c001369c <datetimeToSeconds(datetime_t)+0xe1>
c00136b4:	b8 6d 01 00 00       	mov    eax,0x16d
c00136b9:	85 d2                	test   edx,edx
c00136bb:	75 0b                	jne    c00136c8 <datetimeToSeconds(datetime_t)+0x10d>
c00136bd:	66 83 fb 01          	cmp    bx,0x1
c00136c1:	19 c0                	sbb    eax,eax
c00136c3:	05 6e 01 00 00       	add    eax,0x16e
c00136c8:	29 c1                	sub    ecx,eax
c00136ca:	b8 80 51 01 00       	mov    eax,0x15180
c00136cf:	f7 e9                	imul   ecx
c00136d1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00136d5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00136d9:	83 c4 14             	add    esp,0x14
c00136dc:	5b                   	pop    ebx
c00136dd:	5e                   	pop    esi
c00136de:	5f                   	pop    edi
c00136df:	5d                   	pop    ebp
c00136e0:	c3                   	ret    
c00136e1:	90                   	nop

c00136e2 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00136e2:	57                   	push   edi
c00136e3:	56                   	push   esi
c00136e4:	53                   	push   ebx
c00136e5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00136e9:	8b 06                	mov    eax,DWORD PTR [esi]
c00136eb:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00136ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00136f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00136f6:	e8 c0 fe ff ff       	call   c00135bb <datetimeToSeconds(datetime_t)>
c00136fb:	59                   	pop    ecx
c00136fc:	0f b6 0d 7c d8 02 c0 	movzx  ecx,BYTE PTR ds:0xc002d87c
c0013703:	5b                   	pop    ebx
c0013704:	03 0d 80 d8 02 c0    	add    ecx,DWORD PTR ds:0xc002d880
c001370a:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013710:	89 cb                	mov    ebx,ecx
c0013712:	c1 fb 1f             	sar    ebx,0x1f
c0013715:	29 c8                	sub    eax,ecx
c0013717:	19 da                	sbb    edx,ebx
c0013719:	31 c9                	xor    ecx,ecx
c001371b:	80 3d 7d d8 02 c0 00 	cmp    BYTE PTR ds:0xc002d87d,0x0
c0013722:	74 05                	je     c0013729 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013724:	b9 08 07 00 00       	mov    ecx,0x708
c0013729:	31 db                	xor    ebx,ebx
c001372b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001372f:	29 c8                	sub    eax,ecx
c0013731:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013735:	19 da                	sbb    edx,ebx
c0013737:	89 f8                	mov    eax,edi
c0013739:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001373d:	5b                   	pop    ebx
c001373e:	5e                   	pop    esi
c001373f:	5f                   	pop    edi
c0013740:	ff e0                	jmp    eax

c0013742 <secondsToDatetime(unsigned long long)>:
c0013742:	55                   	push   ebp
c0013743:	57                   	push   edi
c0013744:	56                   	push   esi
c0013745:	53                   	push   ebx
c0013746:	83 ec 1c             	sub    esp,0x1c
c0013749:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001374d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013751:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013755:	6a 00                	push   0x0
c0013757:	68 80 51 01 00       	push   0x15180
c001375c:	55                   	push   ebp
c001375d:	57                   	push   edi
c001375e:	e8 a1 2e 01 00       	call   c0026604 <__udivdi3>
c0013763:	83 c4 10             	add    esp,0x10
c0013766:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001376c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013770:	6a 00                	push   0x0
c0013772:	68 80 51 01 00       	push   0x15180
c0013777:	55                   	push   ebp
c0013778:	57                   	push   edi
c0013779:	bf 10 0e 00 00       	mov    edi,0xe10
c001377e:	e8 81 2f 01 00       	call   c0026704 <__umoddi3>
c0013783:	83 c4 10             	add    esp,0x10
c0013786:	99                   	cdq    
c0013787:	f7 ff                	idiv   edi
c0013789:	bf 3c 00 00 00       	mov    edi,0x3c
c001378e:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013791:	89 d0                	mov    eax,edx
c0013793:	99                   	cdq    
c0013794:	f7 ff                	idiv   edi
c0013796:	85 db                	test   ebx,ebx
c0013798:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c001379b:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c001379e:	79 11                	jns    c00137b1 <secondsToDatetime(unsigned long long)+0x6f>
c00137a0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00137a4:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00137aa:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00137af:	eb 07                	jmp    c00137b8 <secondsToDatetime(unsigned long long)+0x76>
c00137b1:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00137b6:	89 d8                	mov    eax,ebx
c00137b8:	bf b4 05 00 00       	mov    edi,0x5b4
c00137bd:	99                   	cdq    
c00137be:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00137c3:	f7 f9                	idiv   ecx
c00137c5:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00137ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00137ce:	31 d2                	xor    edx,edx
c00137d0:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00137d8:	01 c3                	add    ebx,eax
c00137da:	89 d8                	mov    eax,ebx
c00137dc:	f7 f1                	div    ecx
c00137de:	31 d2                	xor    edx,edx
c00137e0:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00137e3:	89 d8                	mov    eax,ebx
c00137e5:	f7 f7                	div    edi
c00137e7:	31 d2                	xor    edx,edx
c00137e9:	29 c1                	sub    ecx,eax
c00137eb:	89 d8                	mov    eax,ebx
c00137ed:	f7 f5                	div    ebp
c00137ef:	bd 6d 01 00 00       	mov    ebp,0x16d
c00137f4:	29 c1                	sub    ecx,eax
c00137f6:	31 d2                	xor    edx,edx
c00137f8:	89 c8                	mov    eax,ecx
c00137fa:	f7 f5                	div    ebp
c00137fc:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013801:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013805:	31 d2                	xor    edx,edx
c0013807:	89 c8                	mov    eax,ecx
c0013809:	f7 f5                	div    ebp
c001380b:	31 d2                	xor    edx,edx
c001380d:	01 c3                	add    ebx,eax
c001380f:	89 c8                	mov    eax,ecx
c0013811:	f7 f7                	div    edi
c0013813:	bf 99 00 00 00       	mov    edi,0x99
c0013818:	29 c3                	sub    ebx,eax
c001381a:	31 d2                	xor    edx,edx
c001381c:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013824:	29 c3                	sub    ebx,eax
c0013826:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013829:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001382c:	bb 05 00 00 00       	mov    ebx,0x5
c0013831:	83 c1 02             	add    ecx,0x2
c0013834:	89 c8                	mov    eax,ecx
c0013836:	f7 f7                	div    edi
c0013838:	31 d2                	xor    edx,edx
c001383a:	89 c7                	mov    edi,eax
c001383c:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013842:	83 c0 02             	add    eax,0x2
c0013845:	f7 f3                	div    ebx
c0013847:	89 eb                	mov    ebx,ebp
c0013849:	29 c3                	sub    ebx,eax
c001384b:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013851:	88 1e                	mov    BYTE PTR [esi],bl
c0013853:	19 c0                	sbb    eax,eax
c0013855:	31 d2                	xor    edx,edx
c0013857:	83 e0 0c             	and    eax,0xc
c001385a:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001385e:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013866:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001386a:	83 f9 01             	cmp    ecx,0x1
c001386d:	0f 96 c2             	setbe  dl
c0013870:	41                   	inc    ecx
c0013871:	01 d0                	add    eax,edx
c0013873:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013876:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001387a:	83 c4 1c             	add    esp,0x1c
c001387d:	89 f0                	mov    eax,esi
c001387f:	5b                   	pop    ebx
c0013880:	5e                   	pop    esi
c0013881:	5f                   	pop    edi
c0013882:	5d                   	pop    ebp
c0013883:	c2 04 00             	ret    0x4

c0013886 <Clock::timeInDatetimeLocal()>:
c0013886:	53                   	push   ebx
c0013887:	83 ec 14             	sub    esp,0x14
c001388a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001388e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013892:	e8 83 fc ff ff       	call   c001351a <Clock::timeInSecondsLocal()>
c0013897:	83 c4 0c             	add    esp,0xc
c001389a:	52                   	push   edx
c001389b:	50                   	push   eax
c001389c:	53                   	push   ebx
c001389d:	e8 a0 fe ff ff       	call   c0013742 <secondsToDatetime(unsigned long long)>
c00138a2:	89 d8                	mov    eax,ebx
c00138a4:	83 c4 14             	add    esp,0x14
c00138a7:	5b                   	pop    ebx
c00138a8:	c2 04 00             	ret    0x4
c00138ab:	90                   	nop

c00138ac <Device::hibernate()>:
c00138ac:	c3                   	ret    
c00138ad:	90                   	nop

c00138ae <Device::wake()>:
c00138ae:	c3                   	ret    
c00138af:	90                   	nop

c00138b0 <Device::detect()>:
c00138b0:	c3                   	ret    
c00138b1:	90                   	nop

c00138b2 <Device::disableLegacy()>:
c00138b2:	c3                   	ret    
c00138b3:	90                   	nop

c00138b4 <Device::powerSaving(PowerSavingLevel)>:
c00138b4:	c3                   	ret    
c00138b5:	90                   	nop

c00138b6 <DriverlessDevice::close(int, int, void*)>:
c00138b6:	31 c0                	xor    eax,eax
c00138b8:	c3                   	ret    
c00138b9:	90                   	nop

c00138ba <DriverlessDevice::detect()>:
c00138ba:	c3                   	ret    
c00138bb:	90                   	nop

c00138bc <DriverlessDevice::open(int, int, void*)>:
c00138bc:	83 ec 18             	sub    esp,0x18
c00138bf:	68 b0 a7 02 c0       	push   0xc002a7b0
c00138c4:	e8 6c 64 00 00       	call   c0019d35 <Krnl::panic(char const*)>
c00138c9:	83 c8 ff             	or     eax,0xffffffff
c00138cc:	83 c4 1c             	add    esp,0x1c
c00138cf:	c3                   	ret    

c00138d0 <Device::~Device()>:
c00138d0:	ba 10 a8 02 c0       	mov    edx,0xc002a810
c00138d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00138d9:	89 10                	mov    DWORD PTR [eax],edx
c00138db:	90                   	nop
c00138dc:	c3                   	ret    
c00138dd:	90                   	nop

c00138de <Device::~Device()>:
c00138de:	83 ec 0c             	sub    esp,0xc
c00138e1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00138e5:	e8 e6 ff ff ff       	call   c00138d0 <Device::~Device()>
c00138ea:	83 c4 04             	add    esp,0x4
c00138ed:	83 ec 08             	sub    esp,0x8
c00138f0:	68 58 01 00 00       	push   0x158
c00138f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138f9:	e8 f3 eb ff ff       	call   c00124f1 <operator delete(void*, unsigned long)>
c00138fe:	83 c4 10             	add    esp,0x10
c0013901:	83 c4 0c             	add    esp,0xc
c0013904:	c3                   	ret    
c0013905:	90                   	nop

c0013906 <Device::findAndLoadDriver()>:
c0013906:	c7 44 24 04 ce a7 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a7ce
c001390e:	e9 b6 ec ff ff       	jmp    c00125c9 <Dbg::kprintf(char const*, ...)>
c0013913:	90                   	nop

c0013914 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013914:	57                   	push   edi
c0013915:	b9 09 00 00 00       	mov    ecx,0x9
c001391a:	56                   	push   esi
c001391b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001391f:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013923:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001392d:	81 c7 18 01 00 00    	add    edi,0x118
c0013933:	fc                   	cld    
c0013934:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013936:	5e                   	pop    esi
c0013937:	5f                   	pop    edi
c0013938:	c3                   	ret    
c0013939:	90                   	nop

c001393a <Device::preOpenACPI(void*, char*, char*)>:
c001393a:	57                   	push   edi
c001393b:	b9 1e 00 00 00       	mov    ecx,0x1e
c0013940:	56                   	push   esi
c0013941:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013945:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013949:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0013953:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0013959:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c001395f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013963:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013965:	b9 0e 00 00 00       	mov    ecx,0xe
c001396a:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0013970:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013974:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013976:	5e                   	pop    esi
c0013977:	5f                   	pop    edi
c0013978:	c3                   	ret    
c0013979:	90                   	nop

c001397a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001397a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001397e:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013983:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001398a:	75 0b                	jne    c0013997 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c001398c:	8b 00                	mov    eax,DWORD PTR [eax]
c001398e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013992:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013995:	eb 1e                	jmp    c00139b5 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013997:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c001399c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00139a2:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00139a8:	8b 08                	mov    ecx,DWORD PTR [eax]
c00139aa:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00139ae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00139b2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00139b5:	ff e0                	jmp    eax
c00139b7:	90                   	nop

c00139b8 <Device::getParent()>:
c00139b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139bc:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c00139c2:	c3                   	ret    
c00139c3:	90                   	nop

c00139c4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00139c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139c8:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00139cd:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00139d4:	75 0b                	jne    c00139e1 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c00139d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00139d8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00139dc:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00139df:	eb 1e                	jmp    c00139ff <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c00139e1:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c00139e6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00139ec:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00139f2:	8b 08                	mov    ecx,DWORD PTR [eax]
c00139f4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00139f8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00139fc:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c00139ff:	ff e0                	jmp    eax
c0013a01:	90                   	nop

c0013a02 <Device::addChild(Device*)>:
c0013a02:	53                   	push   ebx
c0013a03:	83 ec 08             	sub    esp,0x8
c0013a06:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a0a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013a0e:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013a14:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013a1a:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013a1c:	85 d2                	test   edx,edx
c0013a1e:	74 04                	je     c0013a24 <Device::addChild(Device*)+0x22>
c0013a20:	89 d3                	mov    ebx,edx
c0013a22:	eb f6                	jmp    c0013a1a <Device::addChild(Device*)+0x18>
c0013a24:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013a27:	83 ec 0c             	sub    esp,0xc
c0013a2a:	6a 08                	push   0x8
c0013a2c:	e8 6b bb ff ff       	call   c000f59c <malloc>
c0013a31:	89 03                	mov    DWORD PTR [ebx],eax
c0013a33:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013a39:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013a40:	83 c4 18             	add    esp,0x18
c0013a43:	5b                   	pop    ebx
c0013a44:	c3                   	ret    
c0013a45:	90                   	nop

c0013a46 <Device::removeAllChildren()>:
c0013a46:	56                   	push   esi
c0013a47:	53                   	push   ebx
c0013a48:	52                   	push   edx
c0013a49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013a4d:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013a53:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013a56:	74 17                	je     c0013a6f <Device::removeAllChildren()+0x29>
c0013a58:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013a5b:	85 c0                	test   eax,eax
c0013a5d:	74 0c                	je     c0013a6b <Device::removeAllChildren()+0x25>
c0013a5f:	83 ec 0c             	sub    esp,0xc
c0013a62:	8b 10                	mov    edx,DWORD PTR [eax]
c0013a64:	50                   	push   eax
c0013a65:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013a68:	83 c4 10             	add    esp,0x10
c0013a6b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013a6d:	eb e4                	jmp    c0013a53 <Device::removeAllChildren()+0xd>
c0013a6f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013a75:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013a7b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013a81:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013a88:	58                   	pop    eax
c0013a89:	5b                   	pop    ebx
c0013a8a:	5e                   	pop    esi
c0013a8b:	c3                   	ret    

c0013a8c <Device::hibernateAll()>:
c0013a8c:	53                   	push   ebx
c0013a8d:	83 ec 14             	sub    esp,0x14
c0013a90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013a94:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013a96:	53                   	push   ebx
c0013a97:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013a9a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013aa0:	83 c4 10             	add    esp,0x10
c0013aa3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013aa6:	74 0f                	je     c0013ab7 <Device::hibernateAll()+0x2b>
c0013aa8:	83 ec 0c             	sub    esp,0xc
c0013aab:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013aae:	e8 d9 ff ff ff       	call   c0013a8c <Device::hibernateAll()>
c0013ab3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ab5:	eb e9                	jmp    c0013aa0 <Device::hibernateAll()+0x14>
c0013ab7:	83 c4 08             	add    esp,0x8
c0013aba:	5b                   	pop    ebx
c0013abb:	c3                   	ret    

c0013abc <Device::wakeAll()>:
c0013abc:	53                   	push   ebx
c0013abd:	83 ec 14             	sub    esp,0x14
c0013ac0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ac4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ac6:	53                   	push   ebx
c0013ac7:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013aca:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ad0:	83 c4 10             	add    esp,0x10
c0013ad3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ad6:	74 0f                	je     c0013ae7 <Device::wakeAll()+0x2b>
c0013ad8:	83 ec 0c             	sub    esp,0xc
c0013adb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ade:	e8 d9 ff ff ff       	call   c0013abc <Device::wakeAll()>
c0013ae3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ae5:	eb e9                	jmp    c0013ad0 <Device::wakeAll()+0x14>
c0013ae7:	83 c4 08             	add    esp,0x8
c0013aea:	5b                   	pop    ebx
c0013aeb:	c3                   	ret    

c0013aec <Device::detectAll()>:
c0013aec:	53                   	push   ebx
c0013aed:	83 ec 14             	sub    esp,0x14
c0013af0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013af4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013af6:	53                   	push   ebx
c0013af7:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013afa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b00:	83 c4 10             	add    esp,0x10
c0013b03:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b06:	74 0f                	je     c0013b17 <Device::detectAll()+0x2b>
c0013b08:	83 ec 0c             	sub    esp,0xc
c0013b0b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b0e:	e8 d9 ff ff ff       	call   c0013aec <Device::detectAll()>
c0013b13:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b15:	eb e9                	jmp    c0013b00 <Device::detectAll()+0x14>
c0013b17:	83 c4 08             	add    esp,0x8
c0013b1a:	5b                   	pop    ebx
c0013b1b:	c3                   	ret    

c0013b1c <Device::disableLegacyAll()>:
c0013b1c:	53                   	push   ebx
c0013b1d:	83 ec 14             	sub    esp,0x14
c0013b20:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b24:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b26:	53                   	push   ebx
c0013b27:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013b2a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b30:	83 c4 10             	add    esp,0x10
c0013b33:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b36:	74 0f                	je     c0013b47 <Device::disableLegacyAll()+0x2b>
c0013b38:	83 ec 0c             	sub    esp,0xc
c0013b3b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b3e:	e8 d9 ff ff ff       	call   c0013b1c <Device::disableLegacyAll()>
c0013b43:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b45:	eb e9                	jmp    c0013b30 <Device::disableLegacyAll()+0x14>
c0013b47:	83 c4 08             	add    esp,0x8
c0013b4a:	5b                   	pop    ebx
c0013b4b:	c3                   	ret    

c0013b4c <Device::loadDriversForAll()>:
c0013b4c:	53                   	push   ebx
c0013b4d:	83 ec 08             	sub    esp,0x8
c0013b50:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013b54:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c0013b5b:	75 0c                	jne    c0013b69 <Device::loadDriversForAll()+0x1d>
c0013b5d:	83 ec 0c             	sub    esp,0xc
c0013b60:	53                   	push   ebx
c0013b61:	e8 a0 fd ff ff       	call   c0013906 <Device::findAndLoadDriver()>
c0013b66:	83 c4 10             	add    esp,0x10
c0013b69:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b6f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b72:	74 12                	je     c0013b86 <Device::loadDriversForAll()+0x3a>
c0013b74:	83 ec 0c             	sub    esp,0xc
c0013b77:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b7a:	e8 cd ff ff ff       	call   c0013b4c <Device::loadDriversForAll()>
c0013b7f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b81:	83 c4 10             	add    esp,0x10
c0013b84:	eb e9                	jmp    c0013b6f <Device::loadDriversForAll()+0x23>
c0013b86:	83 c4 08             	add    esp,0x8
c0013b89:	5b                   	pop    ebx
c0013b8a:	c3                   	ret    
c0013b8b:	90                   	nop

c0013b8c <Device::closeAll()>:
c0013b8c:	53                   	push   ebx
c0013b8d:	83 ec 08             	sub    esp,0x8
c0013b90:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013b94:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b96:	6a 00                	push   0x0
c0013b98:	6a 00                	push   0x0
c0013b9a:	6a 00                	push   0x0
c0013b9c:	53                   	push   ebx
c0013b9d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013ba0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ba6:	83 c4 10             	add    esp,0x10
c0013ba9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013bac:	74 0f                	je     c0013bbd <Device::closeAll()+0x31>
c0013bae:	83 ec 0c             	sub    esp,0xc
c0013bb1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013bb4:	e8 d3 ff ff ff       	call   c0013b8c <Device::closeAll()>
c0013bb9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013bbb:	eb e9                	jmp    c0013ba6 <Device::closeAll()+0x1a>
c0013bbd:	83 c4 08             	add    esp,0x8
c0013bc0:	5b                   	pop    ebx
c0013bc1:	c3                   	ret    

c0013bc2 <Device::powerSavingAll(PowerSavingLevel)>:
c0013bc2:	56                   	push   esi
c0013bc3:	53                   	push   ebx
c0013bc4:	83 ec 0c             	sub    esp,0xc
c0013bc7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013bcb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013bcf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bd1:	56                   	push   esi
c0013bd2:	53                   	push   ebx
c0013bd3:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013bd6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013bdc:	83 c4 10             	add    esp,0x10
c0013bdf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013be2:	74 0f                	je     c0013bf3 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013be4:	52                   	push   edx
c0013be5:	52                   	push   edx
c0013be6:	56                   	push   esi
c0013be7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013bea:	e8 d3 ff ff ff       	call   c0013bc2 <Device::powerSavingAll(PowerSavingLevel)>
c0013bef:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013bf1:	eb e9                	jmp    c0013bdc <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013bf3:	58                   	pop    eax
c0013bf4:	5b                   	pop    ebx
c0013bf5:	5e                   	pop    esi
c0013bf6:	c3                   	ret    
c0013bf7:	90                   	nop

c0013bf8 <Device::setName(char const*)>:
c0013bf8:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013c00:	e9 07 cc fe ff       	jmp    c000080c <strcpy>
c0013c05:	90                   	nop

c0013c06 <Device::Device(char const*)>:
c0013c06:	83 ec 1c             	sub    esp,0x1c
c0013c09:	ba 10 a8 02 c0       	mov    edx,0xc002a810
c0013c0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c12:	89 10                	mov    DWORD PTR [eax],edx
c0013c14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c18:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013c22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c26:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013c30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c34:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013c3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c42:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013c4c:	83 ec 08             	sub    esp,0x8
c0013c4f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c53:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c57:	e8 9c ff ff ff       	call   c0013bf8 <Device::setName(char const*)>
c0013c5c:	83 c4 10             	add    esp,0x10
c0013c5f:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013c67:	83 ec 0c             	sub    esp,0xc
c0013c6a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013c6e:	e8 29 b9 ff ff       	call   c000f59c <malloc>
c0013c73:	83 c4 10             	add    esp,0x10
c0013c76:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013c7c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013c83:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013c87:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013c8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c91:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013c97:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013c9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ca1:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013ca7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013cae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cb2:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013cb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cbd:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013cc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cc8:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013cd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cd6:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013ce0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ce4:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013cee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cf2:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0013cfc:	90                   	nop
c0013cfd:	83 c4 1c             	add    esp,0x1c
c0013d00:	c3                   	ret    
c0013d01:	90                   	nop

c0013d02 <Device::getName()>:
c0013d02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013d06:	05 d0 00 00 00       	add    eax,0xd0
c0013d0b:	c3                   	ret    

c0013d0c <DriverlessDevice::DriverlessDevice(char const*)>:
c0013d0c:	83 ec 0c             	sub    esp,0xc
c0013d0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d13:	83 ec 08             	sub    esp,0x8
c0013d16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d1a:	50                   	push   eax
c0013d1b:	e8 e6 fe ff ff       	call   c0013c06 <Device::Device(char const*)>
c0013d20:	83 c4 10             	add    esp,0x10
c0013d23:	ba 3c a8 02 c0       	mov    edx,0xc002a83c
c0013d28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d2c:	89 10                	mov    DWORD PTR [eax],edx
c0013d2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d32:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013d3c:	90                   	nop
c0013d3d:	83 c4 0c             	add    esp,0xc
c0013d40:	c3                   	ret    
c0013d41:	90                   	nop

c0013d42 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013d42:	57                   	push   edi
c0013d43:	56                   	push   esi
c0013d44:	53                   	push   ebx
c0013d45:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d49:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013d4d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013d51:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013d57:	75 0c                	jne    c0013d65 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013d59:	52                   	push   edx
c0013d5a:	52                   	push   edx
c0013d5b:	53                   	push   ebx
c0013d5c:	56                   	push   esi
c0013d5d:	e8 de 47 01 00       	call   c0028540 <LinkedList<Device>::addElement(Device*)>
c0013d62:	83 c4 10             	add    esp,0x10
c0013d65:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d6b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d6e:	74 12                	je     c0013d82 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013d70:	50                   	push   eax
c0013d71:	57                   	push   edi
c0013d72:	56                   	push   esi
c0013d73:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d76:	e8 c7 ff ff ff       	call   c0013d42 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013d7b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d7d:	83 c4 10             	add    esp,0x10
c0013d80:	eb e9                	jmp    c0013d6b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013d82:	5b                   	pop    ebx
c0013d83:	5e                   	pop    esi
c0013d84:	5f                   	pop    edi
c0013d85:	c3                   	ret    

c0013d86 <getDevicesOfType(DeviceType)>:
c0013d86:	53                   	push   ebx
c0013d87:	83 ec 14             	sub    esp,0x14
c0013d8a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013d8e:	53                   	push   ebx
c0013d8f:	e8 88 48 01 00       	call   c002861c <LinkedList<Device>::LinkedList()>
c0013d94:	83 c4 0c             	add    esp,0xc
c0013d97:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013d9b:	53                   	push   ebx
c0013d9c:	ff 35 08 d7 02 c0    	push   DWORD PTR ds:0xc002d708
c0013da2:	e8 9b ff ff ff       	call   c0013d42 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013da7:	89 d8                	mov    eax,ebx
c0013da9:	83 c4 18             	add    esp,0x18
c0013dac:	5b                   	pop    ebx
c0013dad:	c2 04 00             	ret    0x4

c0013db0 <HardDiskController::HardDiskController(char const*)>:
c0013db0:	83 ec 0c             	sub    esp,0xc
c0013db3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013db7:	83 ec 08             	sub    esp,0x8
c0013dba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dbe:	50                   	push   eax
c0013dbf:	e8 42 fe ff ff       	call   c0013c06 <Device::Device(char const*)>
c0013dc4:	83 c4 10             	add    esp,0x10
c0013dc7:	ba 68 a8 02 c0       	mov    edx,0xc002a868
c0013dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dd0:	89 10                	mov    DWORD PTR [eax],edx
c0013dd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dd6:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013de0:	90                   	nop
c0013de1:	83 c4 0c             	add    esp,0xc
c0013de4:	c3                   	ret    
c0013de5:	90                   	nop

c0013de6 <HardDiskController::~HardDiskController()>:
c0013de6:	83 ec 0c             	sub    esp,0xc
c0013de9:	ba 68 a8 02 c0       	mov    edx,0xc002a868
c0013dee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013df2:	89 10                	mov    DWORD PTR [eax],edx
c0013df4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013df8:	83 ec 0c             	sub    esp,0xc
c0013dfb:	50                   	push   eax
c0013dfc:	e8 cf fa ff ff       	call   c00138d0 <Device::~Device()>
c0013e01:	83 c4 10             	add    esp,0x10
c0013e04:	90                   	nop
c0013e05:	83 c4 0c             	add    esp,0xc
c0013e08:	c3                   	ret    
c0013e09:	90                   	nop

c0013e0a <HardDiskController::~HardDiskController()>:
c0013e0a:	83 ec 0c             	sub    esp,0xc
c0013e0d:	83 ec 0c             	sub    esp,0xc
c0013e10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e14:	e8 cd ff ff ff       	call   c0013de6 <HardDiskController::~HardDiskController()>
c0013e19:	83 c4 10             	add    esp,0x10
c0013e1c:	83 ec 08             	sub    esp,0x8
c0013e1f:	68 58 01 00 00       	push   0x158
c0013e24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e28:	e8 c4 e6 ff ff       	call   c00124f1 <operator delete(void*, unsigned long)>
c0013e2d:	83 c4 10             	add    esp,0x10
c0013e30:	83 c4 0c             	add    esp,0xc
c0013e33:	c3                   	ret    

c0013e34 <PhysicalDisk::eject()>:
c0013e34:	83 c8 ff             	or     eax,0xffffffff
c0013e37:	c3                   	ret    

c0013e38 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013e38:	83 ec 0c             	sub    esp,0xc
c0013e3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e3f:	83 ec 08             	sub    esp,0x8
c0013e42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e46:	50                   	push   eax
c0013e47:	e8 ba fd ff ff       	call   c0013c06 <Device::Device(char const*)>
c0013e4c:	83 c4 10             	add    esp,0x10
c0013e4f:	ba 94 a8 02 c0       	mov    edx,0xc002a894
c0013e54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e58:	89 10                	mov    DWORD PTR [eax],edx
c0013e5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e5e:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013e65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e69:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013e70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e74:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013e7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e82:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013e86:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013e8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e90:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013e9a:	90                   	nop
c0013e9b:	83 c4 0c             	add    esp,0xc
c0013e9e:	c3                   	ret    
c0013e9f:	90                   	nop

c0013ea0 <PhysicalDisk::startCache()>:
c0013ea0:	56                   	push   esi
c0013ea1:	53                   	push   ebx
c0013ea2:	83 ec 10             	sub    esp,0x10
c0013ea5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ea9:	6a 44                	push   0x44
c0013eab:	e8 ec b6 ff ff       	call   c000f59c <malloc>
c0013eb0:	89 c6                	mov    esi,eax
c0013eb2:	58                   	pop    eax
c0013eb3:	5a                   	pop    edx
c0013eb4:	53                   	push   ebx
c0013eb5:	56                   	push   esi
c0013eb6:	e8 71 28 00 00       	call   c001672c <VCache::VCache(PhysicalDisk*)>
c0013ebb:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013ec1:	83 c4 14             	add    esp,0x14
c0013ec4:	5b                   	pop    ebx
c0013ec5:	5e                   	pop    esi
c0013ec6:	c3                   	ret    
c0013ec7:	90                   	nop

c0013ec8 <PhysicalDisk::~PhysicalDisk()>:
c0013ec8:	83 ec 0c             	sub    esp,0xc
c0013ecb:	ba 94 a8 02 c0       	mov    edx,0xc002a894
c0013ed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ed4:	89 10                	mov    DWORD PTR [eax],edx
c0013ed6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013eda:	83 ec 0c             	sub    esp,0xc
c0013edd:	50                   	push   eax
c0013ede:	e8 ed f9 ff ff       	call   c00138d0 <Device::~Device()>
c0013ee3:	83 c4 10             	add    esp,0x10
c0013ee6:	90                   	nop
c0013ee7:	83 c4 0c             	add    esp,0xc
c0013eea:	c3                   	ret    
c0013eeb:	90                   	nop

c0013eec <PhysicalDisk::~PhysicalDisk()>:
c0013eec:	83 ec 0c             	sub    esp,0xc
c0013eef:	83 ec 0c             	sub    esp,0xc
c0013ef2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ef6:	e8 cd ff ff ff       	call   c0013ec8 <PhysicalDisk::~PhysicalDisk()>
c0013efb:	83 c4 10             	add    esp,0x10
c0013efe:	83 ec 08             	sub    esp,0x8
c0013f01:	68 6c 01 00 00       	push   0x16c
c0013f06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f0a:	e8 e2 e5 ff ff       	call   c00124f1 <operator delete(void*, unsigned long)>
c0013f0f:	83 c4 10             	add    esp,0x10
c0013f12:	83 c4 0c             	add    esp,0xc
c0013f15:	c3                   	ret    

c0013f16 <FPU::FPU(char const*)>:
c0013f16:	83 ec 0c             	sub    esp,0xc
c0013f19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f1d:	83 ec 08             	sub    esp,0x8
c0013f20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f24:	50                   	push   eax
c0013f25:	e8 dc fc ff ff       	call   c0013c06 <Device::Device(char const*)>
c0013f2a:	83 c4 10             	add    esp,0x10
c0013f2d:	ba d8 a8 02 c0       	mov    edx,0xc002a8d8
c0013f32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f36:	89 10                	mov    DWORD PTR [eax],edx
c0013f38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f3c:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0013f46:	90                   	nop
c0013f47:	83 c4 0c             	add    esp,0xc
c0013f4a:	c3                   	ret    
c0013f4b:	90                   	nop

c0013f4c <FPU::~FPU()>:
c0013f4c:	83 ec 0c             	sub    esp,0xc
c0013f4f:	ba d8 a8 02 c0       	mov    edx,0xc002a8d8
c0013f54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f58:	89 10                	mov    DWORD PTR [eax],edx
c0013f5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f5e:	83 ec 0c             	sub    esp,0xc
c0013f61:	50                   	push   eax
c0013f62:	e8 69 f9 ff ff       	call   c00138d0 <Device::~Device()>
c0013f67:	83 c4 10             	add    esp,0x10
c0013f6a:	90                   	nop
c0013f6b:	83 c4 0c             	add    esp,0xc
c0013f6e:	c3                   	ret    
c0013f6f:	90                   	nop

c0013f70 <FPU::~FPU()>:
c0013f70:	83 ec 0c             	sub    esp,0xc
c0013f73:	83 ec 0c             	sub    esp,0xc
c0013f76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f7a:	e8 cd ff ff ff       	call   c0013f4c <FPU::~FPU()>
c0013f7f:	83 c4 10             	add    esp,0x10
c0013f82:	83 ec 08             	sub    esp,0x8
c0013f85:	68 58 01 00 00       	push   0x158
c0013f8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f8e:	e8 5e e5 ff ff       	call   c00124f1 <operator delete(void*, unsigned long)>
c0013f93:	83 c4 10             	add    esp,0x10
c0013f96:	83 c4 0c             	add    esp,0xc
c0013f99:	c3                   	ret    

c0013f9a <setupFPU()>:
c0013f9a:	53                   	push   ebx
c0013f9b:	83 ec 08             	sub    esp,0x8
c0013f9e:	8b 15 08 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d708
c0013fa4:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0013fab:	74 19                	je     c0013fc6 <setupFPU()+0x2c>
c0013fad:	83 ec 0c             	sub    esp,0xc
c0013fb0:	68 58 01 00 00       	push   0x158
c0013fb5:	e8 e2 b5 ff ff       	call   c000f59c <malloc>
c0013fba:	89 c3                	mov    ebx,eax
c0013fbc:	89 04 24             	mov    DWORD PTR [esp],eax
c0013fbf:	e8 c8 11 01 00       	call   c002518c <AVX::AVX()>
c0013fc4:	eb 5b                	jmp    c0014021 <setupFPU()+0x87>
c0013fc6:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0013fcc:	84 c0                	test   al,al
c0013fce:	79 19                	jns    c0013fe9 <setupFPU()+0x4f>
c0013fd0:	83 ec 0c             	sub    esp,0xc
c0013fd3:	68 58 01 00 00       	push   0x158
c0013fd8:	e8 bf b5 ff ff       	call   c000f59c <malloc>
c0013fdd:	89 c3                	mov    ebx,eax
c0013fdf:	89 04 24             	mov    DWORD PTR [esp],eax
c0013fe2:	e8 cb 12 01 00       	call   c00252b2 <SSE::SSE()>
c0013fe7:	eb 38                	jmp    c0014021 <setupFPU()+0x87>
c0013fe9:	a8 20                	test   al,0x20
c0013feb:	74 19                	je     c0014006 <setupFPU()+0x6c>
c0013fed:	83 ec 0c             	sub    esp,0xc
c0013ff0:	68 58 01 00 00       	push   0x158
c0013ff5:	e8 a2 b5 ff ff       	call   c000f59c <malloc>
c0013ffa:	89 c3                	mov    ebx,eax
c0013ffc:	89 04 24             	mov    DWORD PTR [esp],eax
c0013fff:	e8 18 12 01 00       	call   c002521c <MMX::MMX()>
c0014004:	eb 1b                	jmp    c0014021 <setupFPU()+0x87>
c0014006:	a8 10                	test   al,0x10
c0014008:	74 1c                	je     c0014026 <setupFPU()+0x8c>
c001400a:	83 ec 0c             	sub    esp,0xc
c001400d:	68 58 01 00 00       	push   0x158
c0014012:	e8 85 b5 ff ff       	call   c000f59c <malloc>
c0014017:	89 c3                	mov    ebx,eax
c0014019:	89 04 24             	mov    DWORD PTR [esp],eax
c001401c:	e8 1f 13 01 00       	call   c0025340 <x87::x87()>
c0014021:	83 c4 10             	add    esp,0x10
c0014024:	eb 24                	jmp    c001404a <setupFPU()+0xb0>
c0014026:	83 e0 ef             	and    eax,0xffffffef
c0014029:	83 ec 0c             	sub    esp,0xc
c001402c:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014032:	68 c4 a8 02 c0       	push   0xc002a8c4
c0014037:	e8 8d e5 ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c001403c:	0f 20 c0             	mov    eax,cr0
c001403f:	83 c8 04             	or     eax,0x4
c0014042:	0f 22 c0             	mov    cr0,eax
c0014045:	31 db                	xor    ebx,ebx
c0014047:	83 c4 10             	add    esp,0x10
c001404a:	89 d8                	mov    eax,ebx
c001404c:	83 c4 08             	add    esp,0x8
c001404f:	5b                   	pop    ebx
c0014050:	c3                   	ret    
c0014051:	90                   	nop

c0014052 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014052:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014056:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001405a:	c1 e0 04             	shl    eax,0x4
c001405d:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014061:	8d 50 10             	lea    edx,[eax+0x10]
c0014064:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c001406a:	74 08                	je     c0014074 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c001406c:	83 c0 04             	add    eax,0x4
c001406f:	39 d0                	cmp    eax,edx
c0014071:	75 f1                	jne    c0014064 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014073:	c3                   	ret    
c0014074:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001407e:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014088:	eb e2                	jmp    c001406c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c001408a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c001408a:	57                   	push   edi
c001408b:	31 c0                	xor    eax,eax
c001408d:	56                   	push   esi
c001408e:	53                   	push   ebx
c001408f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014093:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014097:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001409b:	89 da                	mov    edx,ebx
c001409d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00140a1:	c1 e2 04             	shl    edx,0x4
c00140a4:	01 ca                	add    edx,ecx
c00140a6:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00140ae:	74 16                	je     c00140c6 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00140b0:	40                   	inc    eax
c00140b1:	83 f8 04             	cmp    eax,0x4
c00140b4:	75 f0                	jne    c00140a6 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00140b6:	c7 44 24 10 08 a9 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a908
c00140be:	5b                   	pop    ebx
c00140bf:	5e                   	pop    esi
c00140c0:	5f                   	pop    edi
c00140c1:	e9 6f 5c 00 00       	jmp    c0019d35 <Krnl::panic(char const*)>
c00140c6:	8d 04 98             	lea    eax,[eax+ebx*4]
c00140c9:	8d 04 81             	lea    eax,[ecx+eax*4]
c00140cc:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00140d2:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00140d8:	5b                   	pop    ebx
c00140d9:	5e                   	pop    esi
c00140da:	5f                   	pop    edi
c00140db:	c3                   	ret    

c00140dc <doubleFault(regs*, void*)>:
c00140dc:	55                   	push   ebp
c00140dd:	89 e5                	mov    ebp,esp
c00140df:	83 ec 08             	sub    esp,0x8
c00140e2:	83 ec 0c             	sub    esp,0xc
c00140e5:	68 15 a9 02 c0       	push   0xc002a915
c00140ea:	e8 46 5c 00 00       	call   c0019d35 <Krnl::panic(char const*)>
c00140ef:	83 c4 10             	add    esp,0x10
c00140f2:	90                   	nop
c00140f3:	c9                   	leave  
c00140f4:	c3                   	ret    
c00140f5:	90                   	nop

c00140f6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00140f6:	56                   	push   esi
c00140f7:	53                   	push   ebx
c00140f8:	50                   	push   eax
c00140f9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00140fd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014101:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014106:	75 35                	jne    c001413d <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014108:	8d 43 20             	lea    eax,[ebx+0x20]
c001410b:	31 d2                	xor    edx,edx
c001410d:	89 c1                	mov    ecx,eax
c001410f:	c1 e1 04             	shl    ecx,0x4
c0014112:	01 f1                	add    ecx,esi
c0014114:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c001411c:	74 3e                	je     c001415c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c001411e:	42                   	inc    edx
c001411f:	83 fa 04             	cmp    edx,0x4
c0014122:	75 f0                	jne    c0014114 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014124:	83 ec 0c             	sub    esp,0xc
c0014127:	68 2f a9 02 c0       	push   0xc002a92f
c001412c:	e8 04 5c 00 00       	call   c0019d35 <Krnl::panic(char const*)>
c0014131:	83 c4 10             	add    esp,0x10
c0014134:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014139:	5a                   	pop    edx
c001413a:	5b                   	pop    ebx
c001413b:	5e                   	pop    esi
c001413c:	c3                   	ret    
c001413d:	83 ec 0c             	sub    esp,0xc
c0014140:	56                   	push   esi
c0014141:	e8 bc fb ff ff       	call   c0013d02 <Device::getName()>
c0014146:	83 c4 10             	add    esp,0x10
c0014149:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001414c:	75 ba                	jne    c0014108 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001414e:	83 fb 0f             	cmp    ebx,0xf
c0014151:	7f 29                	jg     c001417c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014153:	0f b6 9b 60 c9 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd36a0]
c001415a:	eb ac                	jmp    c0014108 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001415c:	8d 04 82             	lea    eax,[edx+eax*4]
c001415f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014163:	8d 04 86             	lea    eax,[esi+eax*4]
c0014166:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001416c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014170:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014176:	89 d8                	mov    eax,ebx
c0014178:	5a                   	pop    edx
c0014179:	5b                   	pop    ebx
c001417a:	5e                   	pop    esi
c001417b:	c3                   	ret    
c001417c:	83 ec 0c             	sub    esp,0xc
c001417f:	68 22 a9 02 c0       	push   0xc002a922
c0014184:	e8 ac 5b 00 00       	call   c0019d35 <Krnl::panic(char const*)>
c0014189:	83 c4 10             	add    esp,0x10
c001418c:	e9 77 ff ff ff       	jmp    c0014108 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014191:	90                   	nop

c0014192 <InterruptController::clearAllHandlers(int, bool)>:
c0014192:	56                   	push   esi
c0014193:	53                   	push   ebx
c0014194:	52                   	push   edx
c0014195:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014199:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001419d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00141a2:	75 61                	jne    c0014205 <InterruptController::clearAllHandlers(int, bool)+0x73>
c00141a4:	8d 46 20             	lea    eax,[esi+0x20]
c00141a7:	c1 e6 04             	shl    esi,0x4
c00141aa:	c1 e0 04             	shl    eax,0x4
c00141ad:	01 de                	add    esi,ebx
c00141af:	01 d8                	add    eax,ebx
c00141b1:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00141bb:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c00141c5:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00141cf:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00141d9:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c00141e3:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c00141ed:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c00141f7:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014201:	58                   	pop    eax
c0014202:	5b                   	pop    ebx
c0014203:	5e                   	pop    esi
c0014204:	c3                   	ret    
c0014205:	83 ec 0c             	sub    esp,0xc
c0014208:	53                   	push   ebx
c0014209:	e8 f4 fa ff ff       	call   c0013d02 <Device::getName()>
c001420e:	83 c4 10             	add    esp,0x10
c0014211:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014214:	75 8e                	jne    c00141a4 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014216:	83 fe 0f             	cmp    esi,0xf
c0014219:	7f 09                	jg     c0014224 <InterruptController::clearAllHandlers(int, bool)+0x92>
c001421b:	0f b6 b6 60 c9 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd36a0]
c0014222:	eb 80                	jmp    c00141a4 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014224:	83 ec 0c             	sub    esp,0xc
c0014227:	68 3c a9 02 c0       	push   0xc002a93c
c001422c:	e8 04 5b 00 00       	call   c0019d35 <Krnl::panic(char const*)>
c0014231:	83 c4 10             	add    esp,0x10
c0014234:	e9 6b ff ff ff       	jmp    c00141a4 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014239:	90                   	nop

c001423a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001423a:	56                   	push   esi
c001423b:	53                   	push   ebx
c001423c:	52                   	push   edx
c001423d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014241:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014245:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001424a:	75 3a                	jne    c0014286 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c001424c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014250:	8d 50 20             	lea    edx,[eax+0x20]
c0014253:	c1 e2 04             	shl    edx,0x4
c0014256:	8d 04 16             	lea    eax,[esi+edx*1]
c0014259:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c001425d:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014263:	74 0b                	je     c0014270 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014265:	83 c0 04             	add    eax,0x4
c0014268:	39 d0                	cmp    eax,edx
c001426a:	75 f1                	jne    c001425d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c001426c:	58                   	pop    eax
c001426d:	5b                   	pop    ebx
c001426e:	5e                   	pop    esi
c001426f:	c3                   	ret    
c0014270:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001427a:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014284:	eb df                	jmp    c0014265 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014286:	83 ec 0c             	sub    esp,0xc
c0014289:	56                   	push   esi
c001428a:	e8 73 fa ff ff       	call   c0013d02 <Device::getName()>
c001428f:	83 c4 10             	add    esp,0x10
c0014292:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014295:	75 b5                	jne    c001424c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014297:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001429c:	7f 11                	jg     c00142af <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c001429e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00142a2:	0f b6 80 60 c9 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd36a0]
c00142a9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00142ad:	eb 9d                	jmp    c001424c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00142af:	83 ec 0c             	sub    esp,0xc
c00142b2:	68 49 a9 02 c0       	push   0xc002a949
c00142b7:	e8 79 5a 00 00       	call   c0019d35 <Krnl::panic(char const*)>
c00142bc:	83 c4 10             	add    esp,0x10
c00142bf:	eb 8b                	jmp    c001424c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c00142c1 <nmiHandler(regs*, void*)>:
c00142c1:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c00142c6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00142ca:	e9 31 aa ff ff       	jmp    c000ed00 <Computer::handleNMI()>

c00142cf <int_handler>:
c00142cf:	55                   	push   ebp
c00142d0:	57                   	push   edi
c00142d1:	56                   	push   esi
c00142d2:	53                   	push   ebx
c00142d3:	83 ec 0c             	sub    esp,0xc
c00142d6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00142da:	80 3d 44 02 03 c0 00 	cmp    BYTE PTR ds:0xc0030244,0x0
c00142e1:	74 0b                	je     c00142ee <int_handler+0x1f>
c00142e3:	fa                   	cli    
c00142e4:	f4                   	hlt    
c00142e5:	80 3d 44 02 03 c0 00 	cmp    BYTE PTR ds:0xc0030244,0x0
c00142ec:	75 f5                	jne    c00142e3 <int_handler+0x14>
c00142ee:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c00142f3:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c00142f6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00142fc:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014302:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014305:	83 f8 17             	cmp    eax,0x17
c0014308:	77 13                	ja     c001431d <int_handler+0x4e>
c001430a:	83 ec 08             	sub    esp,0x8
c001430d:	8b 17                	mov    edx,DWORD PTR [edi]
c001430f:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014312:	0f b6 c0             	movzx  eax,al
c0014315:	50                   	push   eax
c0014316:	57                   	push   edi
c0014317:	ff 52 38             	call   DWORD PTR [edx+0x38]
c001431a:	83 c4 10             	add    esp,0x10
c001431d:	83 c3 15             	add    ebx,0x15
c0014320:	c1 e3 04             	shl    ebx,0x4
c0014323:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014327:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c001432e:	31 db                	xor    ebx,ebx
c0014330:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014334:	85 c0                	test   eax,eax
c0014336:	74 13                	je     c001434b <int_handler+0x7c>
c0014338:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c001433b:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c001433f:	74 1c                	je     c001435d <int_handler+0x8e>
c0014341:	83 ec 08             	sub    esp,0x8
c0014344:	52                   	push   edx
c0014345:	56                   	push   esi
c0014346:	ff d0                	call   eax
c0014348:	83 c4 10             	add    esp,0x10
c001434b:	43                   	inc    ebx
c001434c:	83 fb 04             	cmp    ebx,0x4
c001434f:	75 df                	jne    c0014330 <int_handler+0x61>
c0014351:	83 c4 0c             	add    esp,0xc
c0014354:	31 c0                	xor    eax,eax
c0014356:	5b                   	pop    ebx
c0014357:	31 d2                	xor    edx,edx
c0014359:	5e                   	pop    esi
c001435a:	5f                   	pop    edi
c001435b:	5d                   	pop    ebp
c001435c:	c3                   	ret    
c001435d:	83 ec 08             	sub    esp,0x8
c0014360:	52                   	push   edx
c0014361:	56                   	push   esi
c0014362:	ff d0                	call   eax
c0014364:	83 c4 10             	add    esp,0x10
c0014367:	83 c4 0c             	add    esp,0xc
c001436a:	5b                   	pop    ebx
c001436b:	5e                   	pop    esi
c001436c:	5f                   	pop    edi
c001436d:	5d                   	pop    ebp
c001436e:	c3                   	ret    
c001436f:	90                   	nop

c0014370 <InterruptController::InterruptController(char const*)>:
c0014370:	83 ec 1c             	sub    esp,0x1c
c0014373:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014377:	83 ec 08             	sub    esp,0x8
c001437a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001437e:	50                   	push   eax
c001437f:	e8 82 f8 ff ff       	call   c0013c06 <Device::Device(char const*)>
c0014384:	83 c4 10             	add    esp,0x10
c0014387:	ba 04 ac 02 c0       	mov    edx,0xc002ac04
c001438c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014390:	89 10                	mov    DWORD PTR [eax],edx
c0014392:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014396:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c00143a0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00143a8:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00143b0:	7f 5e                	jg     c0014410 <InterruptController::InterruptController(char const*)+0xa0>
c00143b2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00143ba:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00143bf:	7f 49                	jg     c001440a <InterruptController::InterruptController(char const*)+0x9a>
c00143c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00143c9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00143d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00143d4:	01 ca                	add    edx,ecx
c00143d6:	83 c2 54             	add    edx,0x54
c00143d9:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00143e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143e5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00143e9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00143f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00143f4:	01 ca                	add    edx,ecx
c00143f6:	81 c2 54 04 00 00    	add    edx,0x454
c00143fc:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014404:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014408:	eb b0                	jmp    c00143ba <InterruptController::InterruptController(char const*)+0x4a>
c001440a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001440e:	eb 98                	jmp    c00143a8 <InterruptController::InterruptController(char const*)+0x38>
c0014410:	90                   	nop
c0014411:	83 c4 1c             	add    esp,0x1c
c0014414:	c3                   	ret    
c0014415:	90                   	nop

c0014416 <InterruptController::~InterruptController()>:
c0014416:	83 ec 0c             	sub    esp,0xc
c0014419:	ba 04 ac 02 c0       	mov    edx,0xc002ac04
c001441e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014422:	89 10                	mov    DWORD PTR [eax],edx
c0014424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014428:	83 ec 0c             	sub    esp,0xc
c001442b:	50                   	push   eax
c001442c:	e8 9f f4 ff ff       	call   c00138d0 <Device::~Device()>
c0014431:	83 c4 10             	add    esp,0x10
c0014434:	90                   	nop
c0014435:	83 c4 0c             	add    esp,0xc
c0014438:	c3                   	ret    
c0014439:	90                   	nop

c001443a <InterruptController::~InterruptController()>:
c001443a:	83 ec 0c             	sub    esp,0xc
c001443d:	83 ec 0c             	sub    esp,0xc
c0014440:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014444:	e8 cd ff ff ff       	call   c0014416 <InterruptController::~InterruptController()>
c0014449:	83 c4 10             	add    esp,0x10
c001444c:	83 ec 08             	sub    esp,0x8
c001444f:	68 58 21 00 00       	push   0x2158
c0014454:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014458:	e8 94 e0 ff ff       	call   c00124f1 <operator delete(void*, unsigned long)>
c001445d:	83 c4 10             	add    esp,0x10
c0014460:	83 c4 0c             	add    esp,0xc
c0014463:	c3                   	ret    

c0014464 <displayDebugInfo(regs*)>:
c0014464:	55                   	push   ebp
c0014465:	57                   	push   edi
c0014466:	56                   	push   esi
c0014467:	53                   	push   ebx
c0014468:	83 ec 24             	sub    esp,0x24
c001446b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001446f:	0f 20 c2             	mov    edx,cr0
c0014472:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014476:	0f 20 d7             	mov    edi,cr2
c0014479:	0f 20 de             	mov    esi,cr3
c001447c:	0f 20 e5             	mov    ebp,cr4
c001447f:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014482:	68 56 a9 02 c0       	push   0xc002a956
c0014487:	e8 3d e1 ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c001448c:	59                   	pop    ecx
c001448d:	58                   	pop    eax
c001448e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014491:	68 61 a9 02 c0       	push   0xc002a961
c0014496:	e8 2e e1 ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c001449b:	58                   	pop    eax
c001449c:	5a                   	pop    edx
c001449d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00144a0:	68 6c a9 02 c0       	push   0xc002a96c
c00144a5:	e8 1f e1 ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c00144aa:	59                   	pop    ecx
c00144ab:	58                   	pop    eax
c00144ac:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00144af:	68 77 a9 02 c0       	push   0xc002a977
c00144b4:	e8 10 e1 ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c00144b9:	58                   	pop    eax
c00144ba:	5a                   	pop    edx
c00144bb:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00144be:	68 82 a9 02 c0       	push   0xc002a982
c00144c3:	e8 01 e1 ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c00144c8:	59                   	pop    ecx
c00144c9:	58                   	pop    eax
c00144ca:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00144cd:	68 8d a9 02 c0       	push   0xc002a98d
c00144d2:	e8 f2 e0 ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c00144d7:	58                   	pop    eax
c00144d8:	5a                   	pop    edx
c00144d9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00144dc:	68 98 a9 02 c0       	push   0xc002a998
c00144e1:	e8 e3 e0 ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c00144e6:	59                   	pop    ecx
c00144e7:	58                   	pop    eax
c00144e8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00144eb:	68 a3 a9 02 c0       	push   0xc002a9a3
c00144f0:	e8 d4 e0 ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c00144f5:	58                   	pop    eax
c00144f6:	5a                   	pop    edx
c00144f7:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00144fa:	68 ae a9 02 c0       	push   0xc002a9ae
c00144ff:	e8 c5 e0 ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c0014504:	59                   	pop    ecx
c0014505:	58                   	pop    eax
c0014506:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014509:	68 bd a9 02 c0       	push   0xc002a9bd
c001450e:	e8 b6 e0 ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c0014513:	58                   	pop    eax
c0014514:	5a                   	pop    edx
c0014515:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014518:	68 c8 a9 02 c0       	push   0xc002a9c8
c001451d:	e8 a7 e0 ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c0014522:	59                   	pop    ecx
c0014523:	58                   	pop    eax
c0014524:	57                   	push   edi
c0014525:	68 d3 a9 02 c0       	push   0xc002a9d3
c001452a:	e8 9a e0 ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c001452f:	58                   	pop    eax
c0014530:	5a                   	pop    edx
c0014531:	56                   	push   esi
c0014532:	68 de a9 02 c0       	push   0xc002a9de
c0014537:	e8 8d e0 ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c001453c:	59                   	pop    ecx
c001453d:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0014542:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014548:	e8 b8 bd ff ff       	call   c0010305 <setActiveTerminal(VgaText*)>
c001454d:	58                   	pop    eax
c001454e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014551:	5a                   	pop    edx
c0014552:	c1 e0 05             	shl    eax,0x5
c0014555:	05 c0 c6 02 c0       	add    eax,0xc002c6c0
c001455a:	50                   	push   eax
c001455b:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0014560:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014566:	e8 a7 c2 ff ff       	call   c0010812 <VgaText::puts(char const*)>
c001456b:	59                   	pop    ecx
c001456c:	58                   	pop    eax
c001456d:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0014572:	68 e9 a9 02 c0       	push   0xc002a9e9
c0014577:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001457d:	e8 90 c2 ff ff       	call   c0010812 <VgaText::puts(char const*)>
c0014582:	58                   	pop    eax
c0014583:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014588:	5a                   	pop    edx
c0014589:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001458c:	83 c0 0c             	add    eax,0xc
c001458f:	50                   	push   eax
c0014590:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0014595:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001459b:	e8 72 c2 ff ff       	call   c0010812 <VgaText::puts(char const*)>
c00145a0:	59                   	pop    ecx
c00145a1:	58                   	pop    eax
c00145a2:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c00145a7:	68 f2 a9 02 c0       	push   0xc002a9f2
c00145ac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145b2:	e8 5b c2 ff ff       	call   c0010812 <VgaText::puts(char const*)>
c00145b7:	58                   	pop    eax
c00145b8:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c00145bd:	5a                   	pop    edx
c00145be:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00145c1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145c7:	e8 00 c2 ff ff       	call   c00107cc <VgaText::putx(unsigned int)>
c00145cc:	59                   	pop    ecx
c00145cd:	58                   	pop    eax
c00145ce:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c00145d3:	68 fa a9 02 c0       	push   0xc002a9fa
c00145d8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145de:	e8 2f c2 ff ff       	call   c0010812 <VgaText::puts(char const*)>
c00145e3:	58                   	pop    eax
c00145e4:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c00145e9:	5a                   	pop    edx
c00145ea:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00145ed:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145f3:	e8 d4 c1 ff ff       	call   c00107cc <VgaText::putx(unsigned int)>
c00145f8:	59                   	pop    ecx
c00145f9:	58                   	pop    eax
c00145fa:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c00145ff:	68 02 aa 02 c0       	push   0xc002aa02
c0014604:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001460a:	e8 03 c2 ff ff       	call   c0010812 <VgaText::puts(char const*)>
c001460f:	58                   	pop    eax
c0014610:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0014615:	5a                   	pop    edx
c0014616:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014619:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001461f:	e8 a8 c1 ff ff       	call   c00107cc <VgaText::putx(unsigned int)>
c0014624:	59                   	pop    ecx
c0014625:	58                   	pop    eax
c0014626:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c001462b:	68 0a aa 02 c0       	push   0xc002aa0a
c0014630:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014636:	e8 d7 c1 ff ff       	call   c0010812 <VgaText::puts(char const*)>
c001463b:	58                   	pop    eax
c001463c:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0014641:	5a                   	pop    edx
c0014642:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014645:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001464b:	e8 7c c1 ff ff       	call   c00107cc <VgaText::putx(unsigned int)>
c0014650:	59                   	pop    ecx
c0014651:	58                   	pop    eax
c0014652:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0014657:	68 12 aa 02 c0       	push   0xc002aa12
c001465c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014662:	e8 ab c1 ff ff       	call   c0010812 <VgaText::puts(char const*)>
c0014667:	58                   	pop    eax
c0014668:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c001466d:	5a                   	pop    edx
c001466e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014671:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014677:	e8 50 c1 ff ff       	call   c00107cc <VgaText::putx(unsigned int)>
c001467c:	59                   	pop    ecx
c001467d:	58                   	pop    eax
c001467e:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0014683:	68 1a aa 02 c0       	push   0xc002aa1a
c0014688:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001468e:	e8 7f c1 ff ff       	call   c0010812 <VgaText::puts(char const*)>
c0014693:	58                   	pop    eax
c0014694:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0014699:	5a                   	pop    edx
c001469a:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c001469d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146a3:	e8 24 c1 ff ff       	call   c00107cc <VgaText::putx(unsigned int)>
c00146a8:	59                   	pop    ecx
c00146a9:	58                   	pop    eax
c00146aa:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c00146af:	68 22 aa 02 c0       	push   0xc002aa22
c00146b4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146ba:	e8 53 c1 ff ff       	call   c0010812 <VgaText::puts(char const*)>
c00146bf:	58                   	pop    eax
c00146c0:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c00146c5:	5a                   	pop    edx
c00146c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00146ca:	52                   	push   edx
c00146cb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146d1:	e8 f6 c0 ff ff       	call   c00107cc <VgaText::putx(unsigned int)>
c00146d6:	59                   	pop    ecx
c00146d7:	58                   	pop    eax
c00146d8:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c00146dd:	68 2b aa 02 c0       	push   0xc002aa2b
c00146e2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146e8:	e8 25 c1 ff ff       	call   c0010812 <VgaText::puts(char const*)>
c00146ed:	58                   	pop    eax
c00146ee:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c00146f3:	5a                   	pop    edx
c00146f4:	57                   	push   edi
c00146f5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146fb:	e8 cc c0 ff ff       	call   c00107cc <VgaText::putx(unsigned int)>
c0014700:	59                   	pop    ecx
c0014701:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0014706:	5f                   	pop    edi
c0014707:	68 33 aa 02 c0       	push   0xc002aa33
c001470c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014712:	e8 fb c0 ff ff       	call   c0010812 <VgaText::puts(char const*)>
c0014717:	58                   	pop    eax
c0014718:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c001471d:	5a                   	pop    edx
c001471e:	56                   	push   esi
c001471f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014725:	e8 a2 c0 ff ff       	call   c00107cc <VgaText::putx(unsigned int)>
c001472a:	59                   	pop    ecx
c001472b:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0014730:	5e                   	pop    esi
c0014731:	68 3b aa 02 c0       	push   0xc002aa3b
c0014736:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001473c:	e8 d1 c0 ff ff       	call   c0010812 <VgaText::puts(char const*)>
c0014741:	5f                   	pop    edi
c0014742:	58                   	pop    eax
c0014743:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0014748:	55                   	push   ebp
c0014749:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001474f:	e8 78 c0 ff ff       	call   c00107cc <VgaText::putx(unsigned int)>
c0014754:	58                   	pop    eax
c0014755:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c001475a:	5a                   	pop    edx
c001475b:	68 43 aa 02 c0       	push   0xc002aa43
c0014760:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014766:	e8 a7 c0 ff ff       	call   c0010812 <VgaText::puts(char const*)>
c001476b:	0f 21 c0             	mov    eax,db0
c001476e:	59                   	pop    ecx
c001476f:	5e                   	pop    esi
c0014770:	50                   	push   eax
c0014771:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0014776:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001477c:	e8 4b c0 ff ff       	call   c00107cc <VgaText::putx(unsigned int)>
c0014781:	5f                   	pop    edi
c0014782:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0014787:	5d                   	pop    ebp
c0014788:	68 4c aa 02 c0       	push   0xc002aa4c
c001478d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014793:	e8 7a c0 ff ff       	call   c0010812 <VgaText::puts(char const*)>
c0014798:	0f 21 c8             	mov    eax,db1
c001479b:	5a                   	pop    edx
c001479c:	59                   	pop    ecx
c001479d:	50                   	push   eax
c001479e:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c00147a3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147a9:	e8 1e c0 ff ff       	call   c00107cc <VgaText::putx(unsigned int)>
c00147ae:	5e                   	pop    esi
c00147af:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c00147b4:	5f                   	pop    edi
c00147b5:	68 54 aa 02 c0       	push   0xc002aa54
c00147ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147c0:	e8 4d c0 ff ff       	call   c0010812 <VgaText::puts(char const*)>
c00147c5:	0f 21 d0             	mov    eax,db2
c00147c8:	5d                   	pop    ebp
c00147c9:	5a                   	pop    edx
c00147ca:	50                   	push   eax
c00147cb:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c00147d0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147d6:	e8 f1 bf ff ff       	call   c00107cc <VgaText::putx(unsigned int)>
c00147db:	59                   	pop    ecx
c00147dc:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c00147e1:	5e                   	pop    esi
c00147e2:	68 5c aa 02 c0       	push   0xc002aa5c
c00147e7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147ed:	e8 20 c0 ff ff       	call   c0010812 <VgaText::puts(char const*)>
c00147f2:	0f 21 d8             	mov    eax,db3
c00147f5:	5f                   	pop    edi
c00147f6:	5d                   	pop    ebp
c00147f7:	50                   	push   eax
c00147f8:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c00147fd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014803:	e8 c4 bf ff ff       	call   c00107cc <VgaText::putx(unsigned int)>
c0014808:	58                   	pop    eax
c0014809:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c001480e:	5a                   	pop    edx
c001480f:	68 64 aa 02 c0       	push   0xc002aa64
c0014814:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001481a:	e8 f3 bf ff ff       	call   c0010812 <VgaText::puts(char const*)>
c001481f:	0f 21 f0             	mov    eax,db6
c0014822:	59                   	pop    ecx
c0014823:	5e                   	pop    esi
c0014824:	50                   	push   eax
c0014825:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c001482a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014830:	e8 97 bf ff ff       	call   c00107cc <VgaText::putx(unsigned int)>
c0014835:	5f                   	pop    edi
c0014836:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c001483b:	5d                   	pop    ebp
c001483c:	68 6c aa 02 c0       	push   0xc002aa6c
c0014841:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014847:	e8 c6 bf ff ff       	call   c0010812 <VgaText::puts(char const*)>
c001484c:	0f 21 f8             	mov    eax,db7
c001484f:	5a                   	pop    edx
c0014850:	59                   	pop    ecx
c0014851:	50                   	push   eax
c0014852:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0014857:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001485d:	e8 6a bf ff ff       	call   c00107cc <VgaText::putx(unsigned int)>
c0014862:	5e                   	pop    esi
c0014863:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014866:	e8 43 86 00 00       	call   c001ceae <Thr::getDriverNameFromAddress(unsigned long)>
c001486b:	83 c4 10             	add    esp,0x10
c001486e:	85 c0                	test   eax,eax
c0014870:	74 7d                	je     c00148ef <displayDebugInfo(regs*)+0x48b>
c0014872:	89 c6                	mov    esi,eax
c0014874:	50                   	push   eax
c0014875:	50                   	push   eax
c0014876:	56                   	push   esi
c0014877:	68 74 aa 02 c0       	push   0xc002aa74
c001487c:	e8 48 dd ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c0014881:	5a                   	pop    edx
c0014882:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0014887:	59                   	pop    ecx
c0014888:	68 82 aa 02 c0       	push   0xc002aa82
c001488d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014893:	e8 7a bf ff ff       	call   c0010812 <VgaText::puts(char const*)>
c0014898:	5f                   	pop    edi
c0014899:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c001489e:	5d                   	pop    ebp
c001489f:	56                   	push   esi
c00148a0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148a6:	e8 67 bf ff ff       	call   c0010812 <VgaText::puts(char const*)>
c00148ab:	58                   	pop    eax
c00148ac:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c00148b1:	5a                   	pop    edx
c00148b2:	68 8e aa 02 c0       	push   0xc002aa8e
c00148b7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148bd:	e8 50 bf ff ff       	call   c0010812 <VgaText::puts(char const*)>
c00148c2:	59                   	pop    ecx
c00148c3:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c00148c8:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c00148ce:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00148d1:	e8 0f 86 00 00       	call   c001cee5 <Thr::getDriverOffsetFromAddress(unsigned long)>
c00148d6:	5b                   	pop    ebx
c00148d7:	5d                   	pop    ebp
c00148d8:	50                   	push   eax
c00148d9:	57                   	push   edi
c00148da:	e8 ed be ff ff       	call   c00107cc <VgaText::putx(unsigned int)>
c00148df:	58                   	pop    eax
c00148e0:	5a                   	pop    edx
c00148e1:	56                   	push   esi
c00148e2:	68 9a aa 02 c0       	push   0xc002aa9a
c00148e7:	e8 dd dc ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c00148ec:	83 c4 10             	add    esp,0x10
c00148ef:	fa                   	cli    
c00148f0:	f4                   	hlt    
c00148f1:	eb fe                	jmp    c00148f1 <displayDebugInfo(regs*)+0x48d>

c00148f3 <x87EmulHandler(regs*, void*)>:
c00148f3:	83 ec 0c             	sub    esp,0xc
c00148f6:	0f 20 c2             	mov    edx,cr0
c00148f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148fe:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0014902:	75 4b                	jne    c001494f <x87EmulHandler(regs*, void*)+0x5c>
c0014904:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0014909:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c001490f:	85 c0                	test   eax,eax
c0014911:	74 05                	je     c0014918 <x87EmulHandler(regs*, void*)+0x25>
c0014913:	83 e2 08             	and    edx,0x8
c0014916:	75 17                	jne    c001492f <x87EmulHandler(regs*, void*)+0x3c>
c0014918:	83 ec 0c             	sub    esp,0xc
c001491b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001491f:	e8 5d a9 00 00       	call   c001f281 <Vm::x87Handler(regs*)>
c0014924:	83 c4 10             	add    esp,0x10
c0014927:	84 c0                	test   al,al
c0014929:	74 24                	je     c001494f <x87EmulHandler(regs*, void*)+0x5c>
c001492b:	83 c4 0c             	add    esp,0xc
c001492e:	c3                   	ret    
c001492f:	83 ec 0c             	sub    esp,0xc
c0014932:	68 c0 aa 02 c0       	push   0xc002aac0
c0014937:	e8 8d dc ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c001493c:	0f 06                	clts   
c001493e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014943:	83 c4 10             	add    esp,0x10
c0014946:	a3 88 d8 02 c0       	mov    ds:0xc002d888,eax
c001494b:	83 c4 0c             	add    esp,0xc
c001494e:	c3                   	ret    
c001494f:	83 ec 0c             	sub    esp,0xc
c0014952:	68 aa aa 02 c0       	push   0xc002aaaa
c0014957:	e8 6d dc ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c001495c:	5a                   	pop    edx
c001495d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014961:	e8 fe fa ff ff       	call   c0014464 <displayDebugInfo(regs*)>

c0014966 <gpFault(regs*, void*)>:
c0014966:	53                   	push   ebx
c0014967:	83 ec 14             	sub    esp,0x14
c001496a:	c7 05 84 d8 02 c0 5a e7 01 c0 	mov    DWORD PTR ds:0xc002d884,0xc001e75a
c0014974:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014978:	53                   	push   ebx
c0014979:	e8 dc 9d 00 00       	call   c001e75a <Vm::faultHandler(regs*)>
c001497e:	83 c4 10             	add    esp,0x10
c0014981:	84 c0                	test   al,al
c0014983:	74 05                	je     c001498a <gpFault(regs*, void*)+0x24>
c0014985:	83 c4 08             	add    esp,0x8
c0014988:	5b                   	pop    ebx
c0014989:	c3                   	ret    
c001498a:	83 ec 0c             	sub    esp,0xc
c001498d:	68 cd aa 02 c0       	push   0xc002aacd
c0014992:	e8 32 dc ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c0014997:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001499a:	e8 c5 fa ff ff       	call   c0014464 <displayDebugInfo(regs*)>

c001499f <pgFault(regs*, void*)>:
c001499f:	83 ec 18             	sub    esp,0x18
c00149a2:	68 e8 aa 02 c0       	push   0xc002aae8
c00149a7:	e8 1d dc ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c00149ac:	0f 20 d0             	mov    eax,cr2
c00149af:	5a                   	pop    edx
c00149b0:	59                   	pop    ecx
c00149b1:	50                   	push   eax
c00149b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149b7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00149ba:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00149c0:	e8 b3 d7 ff ff       	call   c0012178 <VAS::tryLoadBackOffDisk(unsigned long)>
c00149c5:	83 c4 10             	add    esp,0x10
c00149c8:	84 c0                	test   al,al
c00149ca:	74 04                	je     c00149d0 <pgFault(regs*, void*)+0x31>
c00149cc:	83 c4 0c             	add    esp,0xc
c00149cf:	c3                   	ret    
c00149d0:	83 ec 0c             	sub    esp,0xc
c00149d3:	68 f2 aa 02 c0       	push   0xc002aaf2
c00149d8:	e8 ec db ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c00149dd:	58                   	pop    eax
c00149de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00149e2:	e8 7d fa ff ff       	call   c0014464 <displayDebugInfo(regs*)>

c00149e7 <otherISRHandler(regs*, void*)>:
c00149e7:	53                   	push   ebx
c00149e8:	83 ec 0c             	sub    esp,0xc
c00149eb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00149ef:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00149f2:	50                   	push   eax
c00149f3:	50                   	push   eax
c00149f4:	68 ff aa 02 c0       	push   0xc002aaff
c00149f9:	e8 cb db ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c00149fe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a01:	e8 5e fa ff ff       	call   c0014464 <displayDebugInfo(regs*)>

c0014a06 <opcodeFault(regs*, void*)>:
c0014a06:	55                   	push   ebp
c0014a07:	89 e5                	mov    ebp,esp
c0014a09:	56                   	push   esi
c0014a0a:	53                   	push   ebx
c0014a0b:	83 ec 40             	sub    esp,0x40
c0014a0e:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0014a13:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014a19:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014a1f:	84 c0                	test   al,al
c0014a21:	74 24                	je     c0014a47 <opcodeFault(regs*, void*)+0x41>
c0014a23:	83 ec 0c             	sub    esp,0xc
c0014a26:	68 1c ab 02 c0       	push   0xc002ab1c
c0014a2b:	e8 99 db ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c0014a30:	83 c4 10             	add    esp,0x10
c0014a33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a36:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a39:	8d 50 19             	lea    edx,[eax+0x19]
c0014a3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a3f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a42:	e9 d5 05 00 00       	jmp    c001501c <opcodeFault(regs*, void*)+0x616>
c0014a47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a4a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a4d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014a50:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014a54:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014a58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a5b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a5e:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014a61:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a64:	8a 00                	mov    al,BYTE PTR [eax]
c0014a66:	3c f0                	cmp    al,0xf0
c0014a68:	75 17                	jne    c0014a81 <opcodeFault(regs*, void*)+0x7b>
c0014a6a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a70:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a73:	8d 50 01             	lea    edx,[eax+0x1]
c0014a76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a79:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a7c:	e9 da 00 00 00       	jmp    c0014b5b <opcodeFault(regs*, void*)+0x155>
c0014a81:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a84:	8a 00                	mov    al,BYTE PTR [eax]
c0014a86:	3c f2                	cmp    al,0xf2
c0014a88:	74 09                	je     c0014a93 <opcodeFault(regs*, void*)+0x8d>
c0014a8a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a8d:	8a 00                	mov    al,BYTE PTR [eax]
c0014a8f:	3c f3                	cmp    al,0xf3
c0014a91:	75 1b                	jne    c0014aae <opcodeFault(regs*, void*)+0xa8>
c0014a93:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014a97:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a9d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014aa0:	8d 50 01             	lea    edx,[eax+0x1]
c0014aa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aa6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014aa9:	e9 ad 00 00 00       	jmp    c0014b5b <opcodeFault(regs*, void*)+0x155>
c0014aae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ab1:	8a 00                	mov    al,BYTE PTR [eax]
c0014ab3:	3c 66                	cmp    al,0x66
c0014ab5:	75 1f                	jne    c0014ad6 <opcodeFault(regs*, void*)+0xd0>
c0014ab7:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014abb:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014abf:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ac2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ac5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ac8:	8d 50 01             	lea    edx,[eax+0x1]
c0014acb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ace:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ad1:	e9 85 00 00 00       	jmp    c0014b5b <opcodeFault(regs*, void*)+0x155>
c0014ad6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ad9:	8a 00                	mov    al,BYTE PTR [eax]
c0014adb:	3c 67                	cmp    al,0x67
c0014add:	75 18                	jne    c0014af7 <opcodeFault(regs*, void*)+0xf1>
c0014adf:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014ae3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ae6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ae9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014aec:	8d 50 01             	lea    edx,[eax+0x1]
c0014aef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014af2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014af5:	eb 64                	jmp    c0014b5b <opcodeFault(regs*, void*)+0x155>
c0014af7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014afa:	8a 00                	mov    al,BYTE PTR [eax]
c0014afc:	3c 2e                	cmp    al,0x2e
c0014afe:	74 09                	je     c0014b09 <opcodeFault(regs*, void*)+0x103>
c0014b00:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b03:	8a 00                	mov    al,BYTE PTR [eax]
c0014b05:	3c 3e                	cmp    al,0x3e
c0014b07:	75 18                	jne    c0014b21 <opcodeFault(regs*, void*)+0x11b>
c0014b09:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014b0d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b13:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b16:	8d 50 01             	lea    edx,[eax+0x1]
c0014b19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b1c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b1f:	eb 3a                	jmp    c0014b5b <opcodeFault(regs*, void*)+0x155>
c0014b21:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b24:	8a 00                	mov    al,BYTE PTR [eax]
c0014b26:	3c 36                	cmp    al,0x36
c0014b28:	74 1b                	je     c0014b45 <opcodeFault(regs*, void*)+0x13f>
c0014b2a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b2d:	8a 00                	mov    al,BYTE PTR [eax]
c0014b2f:	3c 26                	cmp    al,0x26
c0014b31:	74 12                	je     c0014b45 <opcodeFault(regs*, void*)+0x13f>
c0014b33:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b36:	8a 00                	mov    al,BYTE PTR [eax]
c0014b38:	3c 64                	cmp    al,0x64
c0014b3a:	74 09                	je     c0014b45 <opcodeFault(regs*, void*)+0x13f>
c0014b3c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b3f:	8a 00                	mov    al,BYTE PTR [eax]
c0014b41:	3c 65                	cmp    al,0x65
c0014b43:	75 16                	jne    c0014b5b <opcodeFault(regs*, void*)+0x155>
c0014b45:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014b49:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b4f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b52:	8d 50 01             	lea    edx,[eax+0x1]
c0014b55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b58:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b5b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b5e:	8a 00                	mov    al,BYTE PTR [eax]
c0014b60:	3c 0f                	cmp    al,0xf
c0014b62:	0f 85 ad 00 00 00    	jne    c0014c15 <opcodeFault(regs*, void*)+0x20f>
c0014b68:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b6b:	40                   	inc    eax
c0014b6c:	8a 00                	mov    al,BYTE PTR [eax]
c0014b6e:	3c c2                	cmp    al,0xc2
c0014b70:	74 0e                	je     c0014b80 <opcodeFault(regs*, void*)+0x17a>
c0014b72:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b75:	40                   	inc    eax
c0014b76:	8a 00                	mov    al,BYTE PTR [eax]
c0014b78:	3c c3                	cmp    al,0xc3
c0014b7a:	0f 85 95 00 00 00    	jne    c0014c15 <opcodeFault(regs*, void*)+0x20f>
c0014b80:	83 ec 0c             	sub    esp,0xc
c0014b83:	68 3f ab 02 c0       	push   0xc002ab3f
c0014b88:	e8 3c da ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c0014b8d:	83 c4 10             	add    esp,0x10
c0014b90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b93:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b96:	8d 50 01             	lea    edx,[eax+0x1]
c0014b99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b9c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b9f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ba2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ba5:	8a 00                	mov    al,BYTE PTR [eax]
c0014ba7:	8d 50 fe             	lea    edx,[eax-0x2]
c0014baa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bad:	88 10                	mov    BYTE PTR [eax],dl
c0014baf:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014bb2:	50                   	push   eax
c0014bb3:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014bb6:	50                   	push   eax
c0014bb7:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014bba:	50                   	push   eax
c0014bbb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014bbe:	e8 8b 48 00 00       	call   c001944e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014bc3:	83 c4 10             	add    esp,0x10
c0014bc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bc9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014bcc:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014bcf:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014bd2:	01 d0                	add    eax,edx
c0014bd4:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014bd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bda:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014bdd:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014be0:	48                   	dec    eax
c0014be1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014be4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014be7:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014bea:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014bed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bf0:	83 ec 04             	sub    esp,0x4
c0014bf3:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014bf6:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014bf9:	50                   	push   eax
c0014bfa:	e8 b5 b5 fe ff       	call   c00001b4 <voodooXADD>
c0014bff:	83 c4 10             	add    esp,0x10
c0014c02:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014c05:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014c08:	01 c2                	add    edx,eax
c0014c0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c0d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c10:	e9 07 04 00 00       	jmp    c001501c <opcodeFault(regs*, void*)+0x616>
c0014c15:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c18:	8a 00                	mov    al,BYTE PTR [eax]
c0014c1a:	3c 0f                	cmp    al,0xf
c0014c1c:	0f 85 8b 01 00 00    	jne    c0014dad <opcodeFault(regs*, void*)+0x3a7>
c0014c22:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c25:	40                   	inc    eax
c0014c26:	8a 00                	mov    al,BYTE PTR [eax]
c0014c28:	3c c7                	cmp    al,0xc7
c0014c2a:	0f 86 7d 01 00 00    	jbe    c0014dad <opcodeFault(regs*, void*)+0x3a7>
c0014c30:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c33:	40                   	inc    eax
c0014c34:	8a 00                	mov    al,BYTE PTR [eax]
c0014c36:	3c cf                	cmp    al,0xcf
c0014c38:	0f 87 6f 01 00 00    	ja     c0014dad <opcodeFault(regs*, void*)+0x3a7>
c0014c3e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c41:	40                   	inc    eax
c0014c42:	8a 00                	mov    al,BYTE PTR [eax]
c0014c44:	83 c0 38             	add    eax,0x38
c0014c47:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014c4a:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014c4e:	75 0b                	jne    c0014c5b <opcodeFault(regs*, void*)+0x255>
c0014c50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c53:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014c56:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c59:	eb 75                	jmp    c0014cd0 <opcodeFault(regs*, void*)+0x2ca>
c0014c5b:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014c5f:	75 0b                	jne    c0014c6c <opcodeFault(regs*, void*)+0x266>
c0014c61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c64:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014c67:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c6a:	eb 64                	jmp    c0014cd0 <opcodeFault(regs*, void*)+0x2ca>
c0014c6c:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014c70:	75 0b                	jne    c0014c7d <opcodeFault(regs*, void*)+0x277>
c0014c72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c75:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014c78:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c7b:	eb 53                	jmp    c0014cd0 <opcodeFault(regs*, void*)+0x2ca>
c0014c7d:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014c81:	75 0b                	jne    c0014c8e <opcodeFault(regs*, void*)+0x288>
c0014c83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c86:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014c89:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c8c:	eb 42                	jmp    c0014cd0 <opcodeFault(regs*, void*)+0x2ca>
c0014c8e:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014c92:	75 0b                	jne    c0014c9f <opcodeFault(regs*, void*)+0x299>
c0014c94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c97:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014c9a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c9d:	eb 31                	jmp    c0014cd0 <opcodeFault(regs*, void*)+0x2ca>
c0014c9f:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014ca3:	75 0b                	jne    c0014cb0 <opcodeFault(regs*, void*)+0x2aa>
c0014ca5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ca8:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014cab:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014cae:	eb 20                	jmp    c0014cd0 <opcodeFault(regs*, void*)+0x2ca>
c0014cb0:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014cb4:	75 0b                	jne    c0014cc1 <opcodeFault(regs*, void*)+0x2bb>
c0014cb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cb9:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014cbc:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014cbf:	eb 0f                	jmp    c0014cd0 <opcodeFault(regs*, void*)+0x2ca>
c0014cc1:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014cc5:	75 09                	jne    c0014cd0 <opcodeFault(regs*, void*)+0x2ca>
c0014cc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cca:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014ccd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014cd0:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014cd4:	74 10                	je     c0014ce6 <opcodeFault(regs*, void*)+0x2e0>
c0014cd6:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014cdd:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014ce4:	eb 2d                	jmp    c0014d13 <opcodeFault(regs*, void*)+0x30d>
c0014ce6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014ce9:	c1 e0 18             	shl    eax,0x18
c0014cec:	89 c2                	mov    edx,eax
c0014cee:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014cf1:	c1 e0 08             	shl    eax,0x8
c0014cf4:	25 00 00 ff 00       	and    eax,0xff0000
c0014cf9:	09 c2                	or     edx,eax
c0014cfb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014cfe:	c1 e8 08             	shr    eax,0x8
c0014d01:	25 00 ff 00 00       	and    eax,0xff00
c0014d06:	09 c2                	or     edx,eax
c0014d08:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014d0b:	c1 e8 18             	shr    eax,0x18
c0014d0e:	09 d0                	or     eax,edx
c0014d10:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d13:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014d17:	75 0b                	jne    c0014d24 <opcodeFault(regs*, void*)+0x31e>
c0014d19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d1c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d1f:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014d22:	eb 75                	jmp    c0014d99 <opcodeFault(regs*, void*)+0x393>
c0014d24:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014d28:	75 0b                	jne    c0014d35 <opcodeFault(regs*, void*)+0x32f>
c0014d2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d2d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d30:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014d33:	eb 64                	jmp    c0014d99 <opcodeFault(regs*, void*)+0x393>
c0014d35:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014d39:	75 0b                	jne    c0014d46 <opcodeFault(regs*, void*)+0x340>
c0014d3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d3e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d41:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014d44:	eb 53                	jmp    c0014d99 <opcodeFault(regs*, void*)+0x393>
c0014d46:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014d4a:	75 0b                	jne    c0014d57 <opcodeFault(regs*, void*)+0x351>
c0014d4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d4f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d52:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014d55:	eb 42                	jmp    c0014d99 <opcodeFault(regs*, void*)+0x393>
c0014d57:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014d5b:	75 0b                	jne    c0014d68 <opcodeFault(regs*, void*)+0x362>
c0014d5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d60:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d63:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014d66:	eb 31                	jmp    c0014d99 <opcodeFault(regs*, void*)+0x393>
c0014d68:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014d6c:	75 0b                	jne    c0014d79 <opcodeFault(regs*, void*)+0x373>
c0014d6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d71:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d74:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014d77:	eb 20                	jmp    c0014d99 <opcodeFault(regs*, void*)+0x393>
c0014d79:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014d7d:	75 0b                	jne    c0014d8a <opcodeFault(regs*, void*)+0x384>
c0014d7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d82:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d85:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014d88:	eb 0f                	jmp    c0014d99 <opcodeFault(regs*, void*)+0x393>
c0014d8a:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014d8e:	75 09                	jne    c0014d99 <opcodeFault(regs*, void*)+0x393>
c0014d90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d93:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d96:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014d99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d9c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d9f:	8d 50 02             	lea    edx,[eax+0x2]
c0014da2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014da5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014da8:	e9 6f 02 00 00       	jmp    c001501c <opcodeFault(regs*, void*)+0x616>
c0014dad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014db0:	8a 00                	mov    al,BYTE PTR [eax]
c0014db2:	3c 0f                	cmp    al,0xf
c0014db4:	0f 85 8d 01 00 00    	jne    c0014f47 <opcodeFault(regs*, void*)+0x541>
c0014dba:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dbd:	40                   	inc    eax
c0014dbe:	8a 00                	mov    al,BYTE PTR [eax]
c0014dc0:	3c c7                	cmp    al,0xc7
c0014dc2:	0f 85 7f 01 00 00    	jne    c0014f47 <opcodeFault(regs*, void*)+0x541>
c0014dc8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014dcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dce:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014dd1:	8d 50 01             	lea    edx,[eax+0x1]
c0014dd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dd7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014dda:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014ddd:	50                   	push   eax
c0014dde:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014de1:	50                   	push   eax
c0014de2:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014de5:	50                   	push   eax
c0014de6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014de9:	e8 60 46 00 00       	call   c001944e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014dee:	83 c4 10             	add    esp,0x10
c0014df1:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014df4:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014df7:	83 f0 01             	xor    eax,0x1
c0014dfa:	84 c0                	test   al,al
c0014dfc:	0f 84 45 01 00 00    	je     c0014f47 <opcodeFault(regs*, void*)+0x541>
c0014e02:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014e05:	3c 01                	cmp    al,0x1
c0014e07:	0f 85 3a 01 00 00    	jne    c0014f47 <opcodeFault(regs*, void*)+0x541>
c0014e0d:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014e10:	83 f0 01             	xor    eax,0x1
c0014e13:	84 c0                	test   al,al
c0014e15:	0f 84 2c 01 00 00    	je     c0014f47 <opcodeFault(regs*, void*)+0x541>
c0014e1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e1e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014e21:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014e24:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014e2b:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014e2e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014e31:	89 c2                	mov    edx,eax
c0014e33:	b8 00 00 00 00       	mov    eax,0x0
c0014e38:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014e3b:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014e3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e41:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014e44:	ba 00 00 00 00       	mov    edx,0x0
c0014e49:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0014e4c:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0014e4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e52:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014e55:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014e58:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0014e5f:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014e62:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014e65:	89 c2                	mov    edx,eax
c0014e67:	b8 00 00 00 00       	mov    eax,0x0
c0014e6c:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014e6f:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0014e72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e75:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014e78:	ba 00 00 00 00       	mov    edx,0x0
c0014e7d:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0014e80:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0014e83:	fa                   	cli    
c0014e84:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c0014e89:	40                   	inc    eax
c0014e8a:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c0014e8f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014e92:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014e95:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e97:	89 c1                	mov    ecx,eax
c0014e99:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0014e9c:	89 cb                	mov    ebx,ecx
c0014e9e:	89 d0                	mov    eax,edx
c0014ea0:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0014ea3:	89 c6                	mov    esi,eax
c0014ea5:	89 f0                	mov    eax,esi
c0014ea7:	09 d8                	or     eax,ebx
c0014ea9:	85 c0                	test   eax,eax
c0014eab:	75 21                	jne    c0014ece <opcodeFault(regs*, void*)+0x4c8>
c0014ead:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0014eb0:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014eb3:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014eb6:	89 01                	mov    DWORD PTR [ecx],eax
c0014eb8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0014ebb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ebe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014ec1:	83 c8 40             	or     eax,0x40
c0014ec4:	89 c2                	mov    edx,eax
c0014ec6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ec9:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014ecc:	eb 3e                	jmp    c0014f0c <opcodeFault(regs*, void*)+0x506>
c0014ece:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014ed1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014ed4:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ed6:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014ed9:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014edc:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0014edf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ee2:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014ee5:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014ee8:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014eeb:	89 d0                	mov    eax,edx
c0014eed:	31 d2                	xor    edx,edx
c0014eef:	89 c3                	mov    ebx,eax
c0014ef1:	89 d6                	mov    esi,edx
c0014ef3:	89 da                	mov    edx,ebx
c0014ef5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ef8:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014efb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014efe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014f01:	83 e0 bf             	and    eax,0xffffffbf
c0014f04:	89 c2                	mov    edx,eax
c0014f06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f09:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014f0c:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c0014f11:	48                   	dec    eax
c0014f12:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c0014f17:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c0014f1c:	85 c0                	test   eax,eax
c0014f1e:	75 01                	jne    c0014f21 <opcodeFault(regs*, void*)+0x51b>
c0014f20:	fb                   	sti    
c0014f21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f24:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f27:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0014f2a:	01 c2                	add    edx,eax
c0014f2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f2f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f32:	83 ec 0c             	sub    esp,0xc
c0014f35:	68 4e ab 02 c0       	push   0xc002ab4e
c0014f3a:	e8 8a d6 ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c0014f3f:	83 c4 10             	add    esp,0x10
c0014f42:	e9 d5 00 00 00       	jmp    c001501c <opcodeFault(regs*, void*)+0x616>
c0014f47:	83 ec 0c             	sub    esp,0xc
c0014f4a:	68 61 ab 02 c0       	push   0xc002ab61
c0014f4f:	e8 75 d6 ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c0014f54:	83 c4 10             	add    esp,0x10
c0014f57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f5a:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014f5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f60:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014f63:	c1 e0 04             	shl    eax,0x4
c0014f66:	01 d0                	add    eax,edx
c0014f68:	83 c0 03             	add    eax,0x3
c0014f6b:	8a 00                	mov    al,BYTE PTR [eax]
c0014f6d:	0f b6 d8             	movzx  ebx,al
c0014f70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f73:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014f76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f79:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014f7c:	c1 e0 04             	shl    eax,0x4
c0014f7f:	01 d0                	add    eax,edx
c0014f81:	83 c0 02             	add    eax,0x2
c0014f84:	8a 00                	mov    al,BYTE PTR [eax]
c0014f86:	0f b6 c8             	movzx  ecx,al
c0014f89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f8c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014f8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f92:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014f95:	c1 e0 04             	shl    eax,0x4
c0014f98:	01 d0                	add    eax,edx
c0014f9a:	40                   	inc    eax
c0014f9b:	8a 00                	mov    al,BYTE PTR [eax]
c0014f9d:	0f b6 d0             	movzx  edx,al
c0014fa0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fa3:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0014fa6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fa9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014fac:	c1 e0 04             	shl    eax,0x4
c0014faf:	01 f0                	add    eax,esi
c0014fb1:	8a 00                	mov    al,BYTE PTR [eax]
c0014fb3:	0f b6 c0             	movzx  eax,al
c0014fb6:	83 ec 0c             	sub    esp,0xc
c0014fb9:	53                   	push   ebx
c0014fba:	51                   	push   ecx
c0014fbb:	52                   	push   edx
c0014fbc:	50                   	push   eax
c0014fbd:	68 74 ab 02 c0       	push   0xc002ab74
c0014fc2:	e8 02 d6 ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c0014fc7:	83 c4 20             	add    esp,0x20
c0014fca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fcd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fd0:	83 c0 03             	add    eax,0x3
c0014fd3:	8a 00                	mov    al,BYTE PTR [eax]
c0014fd5:	0f b6 d8             	movzx  ebx,al
c0014fd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fdb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fde:	83 c0 02             	add    eax,0x2
c0014fe1:	8a 00                	mov    al,BYTE PTR [eax]
c0014fe3:	0f b6 c8             	movzx  ecx,al
c0014fe6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fe9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fec:	40                   	inc    eax
c0014fed:	8a 00                	mov    al,BYTE PTR [eax]
c0014fef:	0f b6 d0             	movzx  edx,al
c0014ff2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ff5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ff8:	8a 00                	mov    al,BYTE PTR [eax]
c0014ffa:	0f b6 c0             	movzx  eax,al
c0014ffd:	83 ec 0c             	sub    esp,0xc
c0015000:	53                   	push   ebx
c0015001:	51                   	push   ecx
c0015002:	52                   	push   edx
c0015003:	50                   	push   eax
c0015004:	68 9c ab 02 c0       	push   0xc002ab9c
c0015009:	e8 bb d5 ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c001500e:	83 c4 20             	add    esp,0x20
c0015011:	83 ec 0c             	sub    esp,0xc
c0015014:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015017:	e8 48 f4 ff ff       	call   c0014464 <displayDebugInfo(regs*)>
c001501c:	8d 65 f8             	lea    esp,[ebp-0x8]
c001501f:	5b                   	pop    ebx
c0015020:	5e                   	pop    esi
c0015021:	5d                   	pop    ebp
c0015022:	c3                   	ret    

c0015023 <displayProgramFault(char const*)>:
c0015023:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015028:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001502b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015031:	85 c0                	test   eax,eax
c0015033:	74 15                	je     c001504a <displayProgramFault(char const*)+0x27>
c0015035:	83 ec 0c             	sub    esp,0xc
c0015038:	6a 04                	push   0x4
c001503a:	6a 0f                	push   0xf
c001503c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015040:	50                   	push   eax
c0015041:	e8 c8 b4 ff ff       	call   c001050e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015046:	83 c4 1c             	add    esp,0x1c
c0015049:	c3                   	ret    
c001504a:	c3                   	ret    

c001504b <setupInterruptController()>:
c001504b:	55                   	push   ebp
c001504c:	89 e5                	mov    ebp,esp
c001504e:	53                   	push   ebx
c001504f:	83 ec 24             	sub    esp,0x24
c0015052:	b8 00 00 00 00       	mov    eax,0x0
c0015057:	85 c0                	test   eax,eax
c0015059:	0f 95 c0             	setne  al
c001505c:	84 c0                	test   al,al
c001505e:	74 5b                	je     c00150bb <setupInterruptController()+0x70>
c0015060:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015067:	83 ec 0c             	sub    esp,0xc
c001506a:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c001506d:	e8 2a a5 ff ff       	call   c000f59c <malloc>
c0015072:	83 c4 10             	add    esp,0x10
c0015075:	89 c3                	mov    ebx,eax
c0015077:	83 ec 0c             	sub    esp,0xc
c001507a:	53                   	push   ebx
c001507b:	e8 fe 04 01 00       	call   c002557e <APIC::APIC()>
c0015080:	83 c4 10             	add    esp,0x10
c0015083:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015086:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015089:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001508c:	8b 00                	mov    eax,DWORD PTR [eax]
c001508e:	83 c0 08             	add    eax,0x8
c0015091:	8b 00                	mov    eax,DWORD PTR [eax]
c0015093:	6a 00                	push   0x0
c0015095:	6a 00                	push   0x0
c0015097:	6a 00                	push   0x0
c0015099:	52                   	push   edx
c001509a:	ff d0                	call   eax
c001509c:	83 c4 10             	add    esp,0x10
c001509f:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c00150a4:	83 ec 08             	sub    esp,0x8
c00150a7:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00150aa:	50                   	push   eax
c00150ab:	e8 52 e9 ff ff       	call   c0013a02 <Device::addChild(Device*)>
c00150b0:	83 c4 10             	add    esp,0x10
c00150b3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00150b6:	e9 79 03 00 00       	jmp    c0015434 <setupInterruptController()+0x3e9>
c00150bb:	a0 80 00 03 c0       	mov    al,ds:0xc0030080
c00150c0:	84 c0                	test   al,al
c00150c2:	75 14                	jne    c00150d8 <setupInterruptController()+0x8d>
c00150c4:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c00150c9:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00150cf:	83 e2 fe             	and    edx,0xfffffffe
c00150d2:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00150d8:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c00150dd:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00150e3:	83 e0 01             	and    eax,0x1
c00150e6:	84 c0                	test   al,al
c00150e8:	0f 95 c0             	setne  al
c00150eb:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00150ee:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00150f5:	83 ec 0c             	sub    esp,0xc
c00150f8:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00150fb:	e8 9c a4 ff ff       	call   c000f59c <malloc>
c0015100:	83 c4 10             	add    esp,0x10
c0015103:	89 c3                	mov    ebx,eax
c0015105:	83 ec 0c             	sub    esp,0xc
c0015108:	53                   	push   ebx
c0015109:	e8 c8 09 01 00       	call   c0025ad6 <PIC::PIC()>
c001510e:	83 c4 10             	add    esp,0x10
c0015111:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015114:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015117:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001511a:	8b 00                	mov    eax,DWORD PTR [eax]
c001511c:	83 c0 08             	add    eax,0x8
c001511f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015121:	6a 00                	push   0x0
c0015123:	6a 00                	push   0x0
c0015125:	6a 00                	push   0x0
c0015127:	52                   	push   edx
c0015128:	ff d0                	call   eax
c001512a:	83 c4 10             	add    esp,0x10
c001512d:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015131:	74 73                	je     c00151a6 <setupInterruptController()+0x15b>
c0015133:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015136:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015139:	8b 00                	mov    eax,DWORD PTR [eax]
c001513b:	83 c0 0c             	add    eax,0xc
c001513e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015140:	6a 00                	push   0x0
c0015142:	6a 00                	push   0x0
c0015144:	6a 00                	push   0x0
c0015146:	52                   	push   edx
c0015147:	ff d0                	call   eax
c0015149:	83 c4 10             	add    esp,0x10
c001514c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015150:	74 15                	je     c0015167 <setupInterruptController()+0x11c>
c0015152:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015155:	8b 00                	mov    eax,DWORD PTR [eax]
c0015157:	83 c0 04             	add    eax,0x4
c001515a:	8b 00                	mov    eax,DWORD PTR [eax]
c001515c:	83 ec 0c             	sub    esp,0xc
c001515f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015162:	ff d0                	call   eax
c0015164:	83 c4 10             	add    esp,0x10
c0015167:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c001516e:	83 ec 0c             	sub    esp,0xc
c0015171:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015174:	e8 23 a4 ff ff       	call   c000f59c <malloc>
c0015179:	83 c4 10             	add    esp,0x10
c001517c:	89 c3                	mov    ebx,eax
c001517e:	83 ec 0c             	sub    esp,0xc
c0015181:	53                   	push   ebx
c0015182:	e8 f7 03 01 00       	call   c002557e <APIC::APIC()>
c0015187:	83 c4 10             	add    esp,0x10
c001518a:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001518d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015190:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015193:	8b 00                	mov    eax,DWORD PTR [eax]
c0015195:	83 c0 08             	add    eax,0x8
c0015198:	8b 00                	mov    eax,DWORD PTR [eax]
c001519a:	6a 00                	push   0x0
c001519c:	6a 00                	push   0x0
c001519e:	6a 00                	push   0x0
c00151a0:	52                   	push   edx
c00151a1:	ff d0                	call   eax
c00151a3:	83 c4 10             	add    esp,0x10
c00151a6:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c00151ab:	83 ec 08             	sub    esp,0x8
c00151ae:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151b1:	50                   	push   eax
c00151b2:	e8 4b e8 ff ff       	call   c0013a02 <Device::addChild(Device*)>
c00151b7:	83 c4 10             	add    esp,0x10
c00151ba:	c7 05 88 d8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d888,0x0
c00151c4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00151c9:	83 c0 24             	add    eax,0x24
c00151cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00151ce:	6a 00                	push   0x0
c00151d0:	68 e7 49 01 c0       	push   0xc00149e7
c00151d5:	6a 00                	push   0x0
c00151d7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151da:	ff d0                	call   eax
c00151dc:	83 c4 10             	add    esp,0x10
c00151df:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00151e4:	83 c0 24             	add    eax,0x24
c00151e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00151e9:	6a 00                	push   0x0
c00151eb:	68 e7 49 01 c0       	push   0xc00149e7
c00151f0:	6a 01                	push   0x1
c00151f2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151f5:	ff d0                	call   eax
c00151f7:	83 c4 10             	add    esp,0x10
c00151fa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00151ff:	83 c0 24             	add    eax,0x24
c0015202:	8b 00                	mov    eax,DWORD PTR [eax]
c0015204:	6a 00                	push   0x0
c0015206:	68 c1 42 01 c0       	push   0xc00142c1
c001520b:	6a 02                	push   0x2
c001520d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015210:	ff d0                	call   eax
c0015212:	83 c4 10             	add    esp,0x10
c0015215:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015218:	8b 00                	mov    eax,DWORD PTR [eax]
c001521a:	83 c0 24             	add    eax,0x24
c001521d:	8b 00                	mov    eax,DWORD PTR [eax]
c001521f:	6a 00                	push   0x0
c0015221:	68 e7 49 01 c0       	push   0xc00149e7
c0015226:	6a 03                	push   0x3
c0015228:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001522b:	ff d0                	call   eax
c001522d:	83 c4 10             	add    esp,0x10
c0015230:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015233:	8b 00                	mov    eax,DWORD PTR [eax]
c0015235:	83 c0 24             	add    eax,0x24
c0015238:	8b 00                	mov    eax,DWORD PTR [eax]
c001523a:	6a 00                	push   0x0
c001523c:	68 e7 49 01 c0       	push   0xc00149e7
c0015241:	6a 04                	push   0x4
c0015243:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015246:	ff d0                	call   eax
c0015248:	83 c4 10             	add    esp,0x10
c001524b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001524e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015250:	83 c0 24             	add    eax,0x24
c0015253:	8b 00                	mov    eax,DWORD PTR [eax]
c0015255:	6a 00                	push   0x0
c0015257:	68 e7 49 01 c0       	push   0xc00149e7
c001525c:	6a 05                	push   0x5
c001525e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015261:	ff d0                	call   eax
c0015263:	83 c4 10             	add    esp,0x10
c0015266:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015269:	8b 00                	mov    eax,DWORD PTR [eax]
c001526b:	83 c0 24             	add    eax,0x24
c001526e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015270:	6a 00                	push   0x0
c0015272:	68 06 4a 01 c0       	push   0xc0014a06
c0015277:	6a 06                	push   0x6
c0015279:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001527c:	ff d0                	call   eax
c001527e:	83 c4 10             	add    esp,0x10
c0015281:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015284:	8b 00                	mov    eax,DWORD PTR [eax]
c0015286:	83 c0 24             	add    eax,0x24
c0015289:	8b 00                	mov    eax,DWORD PTR [eax]
c001528b:	6a 00                	push   0x0
c001528d:	68 f3 48 01 c0       	push   0xc00148f3
c0015292:	6a 07                	push   0x7
c0015294:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015297:	ff d0                	call   eax
c0015299:	83 c4 10             	add    esp,0x10
c001529c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001529f:	8b 00                	mov    eax,DWORD PTR [eax]
c00152a1:	83 c0 24             	add    eax,0x24
c00152a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00152a6:	6a 00                	push   0x0
c00152a8:	68 dc 40 01 c0       	push   0xc00140dc
c00152ad:	6a 08                	push   0x8
c00152af:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152b2:	ff d0                	call   eax
c00152b4:	83 c4 10             	add    esp,0x10
c00152b7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00152bc:	83 c0 24             	add    eax,0x24
c00152bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00152c1:	6a 00                	push   0x0
c00152c3:	68 e7 49 01 c0       	push   0xc00149e7
c00152c8:	6a 09                	push   0x9
c00152ca:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152cd:	ff d0                	call   eax
c00152cf:	83 c4 10             	add    esp,0x10
c00152d2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00152d7:	83 c0 24             	add    eax,0x24
c00152da:	8b 00                	mov    eax,DWORD PTR [eax]
c00152dc:	6a 00                	push   0x0
c00152de:	68 e7 49 01 c0       	push   0xc00149e7
c00152e3:	6a 0a                	push   0xa
c00152e5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152e8:	ff d0                	call   eax
c00152ea:	83 c4 10             	add    esp,0x10
c00152ed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00152f2:	83 c0 24             	add    eax,0x24
c00152f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00152f7:	6a 00                	push   0x0
c00152f9:	68 e7 49 01 c0       	push   0xc00149e7
c00152fe:	6a 0b                	push   0xb
c0015300:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015303:	ff d0                	call   eax
c0015305:	83 c4 10             	add    esp,0x10
c0015308:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001530b:	8b 00                	mov    eax,DWORD PTR [eax]
c001530d:	83 c0 24             	add    eax,0x24
c0015310:	8b 00                	mov    eax,DWORD PTR [eax]
c0015312:	6a 00                	push   0x0
c0015314:	68 e7 49 01 c0       	push   0xc00149e7
c0015319:	6a 0c                	push   0xc
c001531b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001531e:	ff d0                	call   eax
c0015320:	83 c4 10             	add    esp,0x10
c0015323:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015326:	8b 00                	mov    eax,DWORD PTR [eax]
c0015328:	83 c0 24             	add    eax,0x24
c001532b:	8b 00                	mov    eax,DWORD PTR [eax]
c001532d:	6a 00                	push   0x0
c001532f:	68 66 49 01 c0       	push   0xc0014966
c0015334:	6a 0d                	push   0xd
c0015336:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015339:	ff d0                	call   eax
c001533b:	83 c4 10             	add    esp,0x10
c001533e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015341:	8b 00                	mov    eax,DWORD PTR [eax]
c0015343:	83 c0 24             	add    eax,0x24
c0015346:	8b 00                	mov    eax,DWORD PTR [eax]
c0015348:	6a 00                	push   0x0
c001534a:	68 9f 49 01 c0       	push   0xc001499f
c001534f:	6a 0e                	push   0xe
c0015351:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015354:	ff d0                	call   eax
c0015356:	83 c4 10             	add    esp,0x10
c0015359:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001535c:	8b 00                	mov    eax,DWORD PTR [eax]
c001535e:	83 c0 24             	add    eax,0x24
c0015361:	8b 00                	mov    eax,DWORD PTR [eax]
c0015363:	6a 00                	push   0x0
c0015365:	68 e7 49 01 c0       	push   0xc00149e7
c001536a:	6a 0f                	push   0xf
c001536c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001536f:	ff d0                	call   eax
c0015371:	83 c4 10             	add    esp,0x10
c0015374:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015377:	8b 00                	mov    eax,DWORD PTR [eax]
c0015379:	83 c0 24             	add    eax,0x24
c001537c:	8b 00                	mov    eax,DWORD PTR [eax]
c001537e:	6a 00                	push   0x0
c0015380:	68 e7 49 01 c0       	push   0xc00149e7
c0015385:	6a 10                	push   0x10
c0015387:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001538a:	ff d0                	call   eax
c001538c:	83 c4 10             	add    esp,0x10
c001538f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015392:	8b 00                	mov    eax,DWORD PTR [eax]
c0015394:	83 c0 24             	add    eax,0x24
c0015397:	8b 00                	mov    eax,DWORD PTR [eax]
c0015399:	6a 00                	push   0x0
c001539b:	68 e7 49 01 c0       	push   0xc00149e7
c00153a0:	6a 11                	push   0x11
c00153a2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153a5:	ff d0                	call   eax
c00153a7:	83 c4 10             	add    esp,0x10
c00153aa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00153af:	83 c0 24             	add    eax,0x24
c00153b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00153b4:	6a 00                	push   0x0
c00153b6:	68 e7 49 01 c0       	push   0xc00149e7
c00153bb:	6a 12                	push   0x12
c00153bd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153c0:	ff d0                	call   eax
c00153c2:	83 c4 10             	add    esp,0x10
c00153c5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00153ca:	83 c0 24             	add    eax,0x24
c00153cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00153cf:	6a 00                	push   0x0
c00153d1:	68 e7 49 01 c0       	push   0xc00149e7
c00153d6:	6a 13                	push   0x13
c00153d8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153db:	ff d0                	call   eax
c00153dd:	83 c4 10             	add    esp,0x10
c00153e0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00153e5:	83 c0 24             	add    eax,0x24
c00153e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00153ea:	6a 00                	push   0x0
c00153ec:	68 e7 49 01 c0       	push   0xc00149e7
c00153f1:	6a 14                	push   0x14
c00153f3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153f6:	ff d0                	call   eax
c00153f8:	83 c4 10             	add    esp,0x10
c00153fb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0015400:	83 c0 24             	add    eax,0x24
c0015403:	8b 00                	mov    eax,DWORD PTR [eax]
c0015405:	6a 00                	push   0x0
c0015407:	68 e7 49 01 c0       	push   0xc00149e7
c001540c:	6a 1e                	push   0x1e
c001540e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015411:	ff d0                	call   eax
c0015413:	83 c4 10             	add    esp,0x10
c0015416:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015419:	8b 00                	mov    eax,DWORD PTR [eax]
c001541b:	83 c0 24             	add    eax,0x24
c001541e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015420:	6a 00                	push   0x0
c0015422:	68 24 bf 01 c0       	push   0xc001bf24
c0015427:	6a 60                	push   0x60
c0015429:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001542c:	ff d0                	call   eax
c001542e:	83 c4 10             	add    esp,0x10
c0015431:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015434:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015437:	c9                   	leave  
c0015438:	c3                   	ret    
c0015439:	90                   	nop

c001543a <InterruptController::convertLegacyIRQNumber(int)>:
c001543a:	55                   	push   ebp
c001543b:	89 e5                	mov    ebp,esp
c001543d:	83 ec 08             	sub    esp,0x8
c0015440:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015443:	83 ec 0c             	sub    esp,0xc
c0015446:	50                   	push   eax
c0015447:	e8 b6 e8 ff ff       	call   c0013d02 <Device::getName()>
c001544c:	83 c4 10             	add    esp,0x10
c001544f:	8a 00                	mov    al,BYTE PTR [eax]
c0015451:	3c 41                	cmp    al,0x41
c0015453:	0f 94 c0             	sete   al
c0015456:	84 c0                	test   al,al
c0015458:	74 28                	je     c0015482 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c001545a:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001545e:	7f 12                	jg     c0015472 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015460:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015463:	05 60 c9 02 c0       	add    eax,0xc002c960
c0015468:	8a 00                	mov    al,BYTE PTR [eax]
c001546a:	0f b6 c0             	movzx  eax,al
c001546d:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015470:	eb 10                	jmp    c0015482 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015472:	83 ec 0c             	sub    esp,0xc
c0015475:	68 c4 ab 02 c0       	push   0xc002abc4
c001547a:	e8 b6 48 00 00       	call   c0019d35 <Krnl::panic(char const*)>
c001547f:	83 c4 10             	add    esp,0x10
c0015482:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015485:	c9                   	leave  
c0015486:	c3                   	ret    
c0015487:	90                   	nop

c0015488 <startGUI(void*)>:
c0015488:	55                   	push   ebp
c0015489:	89 e5                	mov    ebp,esp
c001548b:	53                   	push   ebx
c001548c:	83 ec 04             	sub    esp,0x4
c001548f:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c0015494:	48                   	dec    eax
c0015495:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001549a:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001549f:	85 c0                	test   eax,eax
c00154a1:	75 01                	jne    c00154a4 <startGUI(void*)+0x1c>
c00154a3:	fb                   	sti    
c00154a4:	8b 1d 08 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d708
c00154aa:	83 ec 08             	sub    esp,0x8
c00154ad:	6a 01                	push   0x1
c00154af:	68 44 ac 02 c0       	push   0xc002ac44
c00154b4:	e8 46 7a 00 00       	call   c001ceff <Thr::loadDLL(char const*, bool)>
c00154b9:	83 c4 10             	add    esp,0x10
c00154bc:	83 ec 08             	sub    esp,0x8
c00154bf:	53                   	push   ebx
c00154c0:	50                   	push   eax
c00154c1:	e8 67 7c 00 00       	call   c001d12d <Thr::executeDLL(unsigned long, void*)>
c00154c6:	83 c4 10             	add    esp,0x10
c00154c9:	8b 1d 08 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d708
c00154cf:	83 ec 08             	sub    esp,0x8
c00154d2:	6a 01                	push   0x1
c00154d4:	68 5e ac 02 c0       	push   0xc002ac5e
c00154d9:	e8 21 7a 00 00       	call   c001ceff <Thr::loadDLL(char const*, bool)>
c00154de:	83 c4 10             	add    esp,0x10
c00154e1:	83 ec 08             	sub    esp,0x8
c00154e4:	53                   	push   ebx
c00154e5:	50                   	push   eax
c00154e6:	e8 42 7c 00 00       	call   c001d12d <Thr::executeDLL(unsigned long, void*)>
c00154eb:	83 c4 10             	add    esp,0x10
c00154ee:	90                   	nop
c00154ef:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00154f2:	c9                   	leave  
c00154f3:	c3                   	ret    

c00154f4 <startGUIVESA(void*)>:
c00154f4:	55                   	push   ebp
c00154f5:	89 e5                	mov    ebp,esp
c00154f7:	53                   	push   ebx
c00154f8:	83 ec 04             	sub    esp,0x4
c00154fb:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c0015500:	48                   	dec    eax
c0015501:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c0015506:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001550b:	85 c0                	test   eax,eax
c001550d:	75 01                	jne    c0015510 <startGUIVESA(void*)+0x1c>
c001550f:	fb                   	sti    
c0015510:	8b 1d 08 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d708
c0015516:	83 ec 08             	sub    esp,0x8
c0015519:	6a 01                	push   0x1
c001551b:	68 78 ac 02 c0       	push   0xc002ac78
c0015520:	e8 da 79 00 00       	call   c001ceff <Thr::loadDLL(char const*, bool)>
c0015525:	83 c4 10             	add    esp,0x10
c0015528:	83 ec 08             	sub    esp,0x8
c001552b:	53                   	push   ebx
c001552c:	50                   	push   eax
c001552d:	e8 fb 7b 00 00       	call   c001d12d <Thr::executeDLL(unsigned long, void*)>
c0015532:	83 c4 10             	add    esp,0x10
c0015535:	8b 1d 08 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d708
c001553b:	83 ec 08             	sub    esp,0x8
c001553e:	6a 01                	push   0x1
c0015540:	68 5e ac 02 c0       	push   0xc002ac5e
c0015545:	e8 b5 79 00 00       	call   c001ceff <Thr::loadDLL(char const*, bool)>
c001554a:	83 c4 10             	add    esp,0x10
c001554d:	83 ec 08             	sub    esp,0x8
c0015550:	53                   	push   ebx
c0015551:	50                   	push   eax
c0015552:	e8 d6 7b 00 00       	call   c001d12d <Thr::executeDLL(unsigned long, void*)>
c0015557:	83 c4 10             	add    esp,0x10
c001555a:	90                   	nop
c001555b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001555e:	c9                   	leave  
c001555f:	c3                   	ret    

c0015560 <sendKeyToTerminal(unsigned char)>:
c0015560:	55                   	push   ebp
c0015561:	89 e5                	mov    ebp,esp
c0015563:	83 ec 28             	sub    esp,0x28
c0015566:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015569:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001556c:	a1 c4 d7 02 c0       	mov    eax,ds:0xc002d7c4
c0015571:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015575:	83 ec 08             	sub    esp,0x8
c0015578:	52                   	push   edx
c0015579:	50                   	push   eax
c001557a:	e8 35 b4 ff ff       	call   c00109b4 <VgaText::receiveKey(unsigned char)>
c001557f:	83 c4 10             	add    esp,0x10
c0015582:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015586:	0f 85 8f 00 00 00    	jne    c001561b <sendKeyToTerminal(unsigned char)+0xbb>
c001558c:	fa                   	cli    
c001558d:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c0015592:	40                   	inc    eax
c0015593:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c0015598:	a1 24 0c 03 c0       	mov    eax,ds:0xc0030c24
c001559d:	40                   	inc    eax
c001559e:	a3 24 0c 03 c0       	mov    ds:0xc0030c24,eax
c00155a3:	a1 a0 d8 02 c0       	mov    eax,ds:0xc002d8a0
c00155a8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00155ab:	c7 05 a0 d8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d8a0,0x0
c00155b5:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00155b9:	74 1f                	je     c00155da <sendKeyToTerminal(unsigned char)+0x7a>
c00155bb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155be:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00155c1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00155c4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00155c7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00155ca:	83 ec 0c             	sub    esp,0xc
c00155cd:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00155d0:	e8 6f 87 00 00       	call   c001dd44 <unblockTask(ThreadControlBlock*)>
c00155d5:	83 c4 10             	add    esp,0x10
c00155d8:	eb db                	jmp    c00155b5 <sendKeyToTerminal(unsigned char)+0x55>
c00155da:	a1 24 0c 03 c0       	mov    eax,ds:0xc0030c24
c00155df:	48                   	dec    eax
c00155e0:	a3 24 0c 03 c0       	mov    ds:0xc0030c24,eax
c00155e5:	a1 24 0c 03 c0       	mov    eax,ds:0xc0030c24
c00155ea:	85 c0                	test   eax,eax
c00155ec:	75 18                	jne    c0015606 <sendKeyToTerminal(unsigned char)+0xa6>
c00155ee:	a1 20 0c 03 c0       	mov    eax,ds:0xc0030c20
c00155f3:	85 c0                	test   eax,eax
c00155f5:	74 0f                	je     c0015606 <sendKeyToTerminal(unsigned char)+0xa6>
c00155f7:	c7 05 20 0c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030c20,0x0
c0015601:	e8 bb 82 00 00       	call   c001d8c1 <schedule()>
c0015606:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001560b:	48                   	dec    eax
c001560c:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c0015611:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c0015616:	85 c0                	test   eax,eax
c0015618:	75 01                	jne    c001561b <sendKeyToTerminal(unsigned char)+0xbb>
c001561a:	fb                   	sti    
c001561b:	90                   	nop
c001561c:	c9                   	leave  
c001561d:	c3                   	ret    

c001561e <sendKeyboardToken(KeyboardToken)>:
c001561e:	55                   	push   ebp
c001561f:	89 e5                	mov    ebp,esp
c0015621:	83 ec 18             	sub    esp,0x18
c0015624:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015627:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001562a:	0f b7 c0             	movzx  eax,ax
c001562d:	83 f2 01             	xor    edx,0x1
c0015630:	88 90 c0 d8 02 c0    	mov    BYTE PTR [eax-0x3ffd2740],dl
c0015636:	a1 a8 d8 02 c0       	mov    eax,ds:0xc002d8a8
c001563b:	85 c0                	test   eax,eax
c001563d:	74 24                	je     c0015663 <sendKeyboardToken(KeyboardToken)+0x45>
c001563f:	8b 0d a8 d8 02 c0    	mov    ecx,DWORD PTR ds:0xc002d8a8
c0015645:	83 ec 04             	sub    esp,0x4
c0015648:	68 c0 d8 02 c0       	push   0xc002d8c0
c001564d:	83 ec 08             	sub    esp,0x8
c0015650:	89 e2                	mov    edx,esp
c0015652:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015655:	89 02                	mov    DWORD PTR [edx],eax
c0015657:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001565a:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001565e:	ff d1                	call   ecx
c0015660:	83 c4 10             	add    esp,0x10
c0015663:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015666:	66 3d 03 02          	cmp    ax,0x203
c001566a:	75 07                	jne    c0015673 <sendKeyboardToken(KeyboardToken)+0x55>
c001566c:	a0 c0 d9 02 c0       	mov    al,ds:0xc002d9c0
c0015671:	84 c0                	test   al,al
c0015673:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015677:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001567a:	a0 c8 dc 02 c0       	mov    al,ds:0xc002dcc8
c001567f:	38 c2                	cmp    dl,al
c0015681:	74 1c                	je     c001569f <sendKeyboardToken(KeyboardToken)+0x81>
c0015683:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015686:	a2 c8 dc 02 c0       	mov    ds:0xc002dcc8,al
c001568b:	a0 c8 dc 02 c0       	mov    al,ds:0xc002dcc8
c0015690:	0f b6 c0             	movzx  eax,al
c0015693:	83 ec 0c             	sub    esp,0xc
c0015696:	50                   	push   eax
c0015697:	e8 5a a9 ff ff       	call   c000fff6 <setTerminalScrollLock(bool)>
c001569c:	83 c4 10             	add    esp,0x10
c001569f:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c00156a2:	84 c0                	test   al,al
c00156a4:	0f 84 ae 00 00 00    	je     c0015758 <sendKeyboardToken(KeyboardToken)+0x13a>
c00156aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ad:	66 3d 10 03          	cmp    ax,0x310
c00156b1:	75 06                	jne    c00156b9 <sendKeyboardToken(KeyboardToken)+0x9b>
c00156b3:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00156b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156bc:	66 3d 11 03          	cmp    ax,0x311
c00156c0:	75 06                	jne    c00156c8 <sendKeyboardToken(KeyboardToken)+0xaa>
c00156c2:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c00156c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156cb:	66 3d 12 03          	cmp    ax,0x312
c00156cf:	75 06                	jne    c00156d7 <sendKeyboardToken(KeyboardToken)+0xb9>
c00156d1:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00156d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156da:	66 3d 13 03          	cmp    ax,0x313
c00156de:	75 06                	jne    c00156e6 <sendKeyboardToken(KeyboardToken)+0xc8>
c00156e0:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00156e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156e9:	66 3d 14 03          	cmp    ax,0x314
c00156ed:	75 06                	jne    c00156f5 <sendKeyboardToken(KeyboardToken)+0xd7>
c00156ef:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00156f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156f8:	66 3d 15 03          	cmp    ax,0x315
c00156fc:	75 06                	jne    c0015704 <sendKeyboardToken(KeyboardToken)+0xe6>
c00156fe:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015704:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015707:	66 3d 16 03          	cmp    ax,0x316
c001570b:	75 06                	jne    c0015713 <sendKeyboardToken(KeyboardToken)+0xf5>
c001570d:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015713:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015716:	66 3d 17 03          	cmp    ax,0x317
c001571a:	75 06                	jne    c0015722 <sendKeyboardToken(KeyboardToken)+0x104>
c001571c:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015722:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015725:	66 3d 18 03          	cmp    ax,0x318
c0015729:	75 06                	jne    c0015731 <sendKeyboardToken(KeyboardToken)+0x113>
c001572b:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015731:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015734:	66 3d 19 03          	cmp    ax,0x319
c0015738:	75 06                	jne    c0015740 <sendKeyboardToken(KeyboardToken)+0x122>
c001573a:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015740:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015743:	66 3d 1a 03          	cmp    ax,0x31a
c0015747:	0f 85 c9 00 00 00    	jne    c0015816 <sendKeyboardToken(KeyboardToken)+0x1f8>
c001574d:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015753:	e9 be 00 00 00       	jmp    c0015816 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015758:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001575b:	66 3d 10 03          	cmp    ax,0x310
c001575f:	75 0a                	jne    c001576b <sendKeyboardToken(KeyboardToken)+0x14d>
c0015761:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015767:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001576b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001576e:	66 3d 11 03          	cmp    ax,0x311
c0015772:	75 0a                	jne    c001577e <sendKeyboardToken(KeyboardToken)+0x160>
c0015774:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001577a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001577e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015781:	66 3d 12 03          	cmp    ax,0x312
c0015785:	75 0a                	jne    c0015791 <sendKeyboardToken(KeyboardToken)+0x173>
c0015787:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001578d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015791:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015794:	66 3d 13 03          	cmp    ax,0x313
c0015798:	75 0a                	jne    c00157a4 <sendKeyboardToken(KeyboardToken)+0x186>
c001579a:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00157a0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00157a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157a7:	66 3d 14 03          	cmp    ax,0x314
c00157ab:	75 0a                	jne    c00157b7 <sendKeyboardToken(KeyboardToken)+0x199>
c00157ad:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00157b3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00157b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ba:	66 3d 15 03          	cmp    ax,0x315
c00157be:	75 0a                	jne    c00157ca <sendKeyboardToken(KeyboardToken)+0x1ac>
c00157c0:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00157c6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00157ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157cd:	66 3d 16 03          	cmp    ax,0x316
c00157d1:	75 0a                	jne    c00157dd <sendKeyboardToken(KeyboardToken)+0x1bf>
c00157d3:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00157d9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00157dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157e0:	66 3d 17 03          	cmp    ax,0x317
c00157e4:	75 0a                	jne    c00157f0 <sendKeyboardToken(KeyboardToken)+0x1d2>
c00157e6:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00157ec:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00157f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f3:	66 3d 18 03          	cmp    ax,0x318
c00157f7:	75 0a                	jne    c0015803 <sendKeyboardToken(KeyboardToken)+0x1e5>
c00157f9:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00157ff:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015803:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015806:	66 3d 19 03          	cmp    ax,0x319
c001580a:	75 0a                	jne    c0015816 <sendKeyboardToken(KeyboardToken)+0x1f8>
c001580c:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015812:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015816:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015819:	66 3d 00 02          	cmp    ax,0x200
c001581d:	75 2c                	jne    c001584b <sendKeyboardToken(KeyboardToken)+0x22d>
c001581f:	a0 c0 dc 02 c0       	mov    al,ds:0xc002dcc0
c0015824:	83 f0 01             	xor    eax,0x1
c0015827:	84 c0                	test   al,al
c0015829:	74 20                	je     c001584b <sendKeyboardToken(KeyboardToken)+0x22d>
c001582b:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0015830:	6a 01                	push   0x1
c0015832:	6a 00                	push   0x0
c0015834:	68 88 54 01 c0       	push   0xc0015488
c0015839:	50                   	push   eax
c001583a:	e8 5d 7e 00 00       	call   c001d69c <Process::createThread(void (*)(void*), void*, int)>
c001583f:	83 c4 10             	add    esp,0x10
c0015842:	c6 05 c0 dc 02 c0 01 	mov    BYTE PTR ds:0xc002dcc0,0x1
c0015849:	eb 33                	jmp    c001587e <sendKeyboardToken(KeyboardToken)+0x260>
c001584b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001584e:	66 3d 01 02          	cmp    ax,0x201
c0015852:	75 2a                	jne    c001587e <sendKeyboardToken(KeyboardToken)+0x260>
c0015854:	a0 c0 dc 02 c0       	mov    al,ds:0xc002dcc0
c0015859:	83 f0 01             	xor    eax,0x1
c001585c:	84 c0                	test   al,al
c001585e:	74 1e                	je     c001587e <sendKeyboardToken(KeyboardToken)+0x260>
c0015860:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0015865:	6a 01                	push   0x1
c0015867:	6a 00                	push   0x0
c0015869:	68 f4 54 01 c0       	push   0xc00154f4
c001586e:	50                   	push   eax
c001586f:	e8 28 7e 00 00       	call   c001d69c <Process::createThread(void (*)(void*), void*, int)>
c0015874:	83 c4 10             	add    esp,0x10
c0015877:	c6 05 c0 dc 02 c0 01 	mov    BYTE PTR ds:0xc002dcc0,0x1
c001587e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015881:	66 3d 1d 03          	cmp    ax,0x31d
c0015885:	75 06                	jne    c001588d <sendKeyboardToken(KeyboardToken)+0x26f>
c0015887:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001588d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015890:	66 3d 1c 03          	cmp    ax,0x31c
c0015894:	75 06                	jne    c001589c <sendKeyboardToken(KeyboardToken)+0x27e>
c0015896:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001589c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001589f:	66 3d 1b 03          	cmp    ax,0x31b
c00158a3:	75 06                	jne    c00158ab <sendKeyboardToken(KeyboardToken)+0x28d>
c00158a5:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00158ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ae:	66 3d 1e 03          	cmp    ax,0x31e
c00158b2:	75 06                	jne    c00158ba <sendKeyboardToken(KeyboardToken)+0x29c>
c00158b4:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00158ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158bd:	66 3d 1f 03          	cmp    ax,0x31f
c00158c1:	75 06                	jne    c00158c9 <sendKeyboardToken(KeyboardToken)+0x2ab>
c00158c3:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00158c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158cc:	66 3d 1a 03          	cmp    ax,0x31a
c00158d0:	75 06                	jne    c00158d8 <sendKeyboardToken(KeyboardToken)+0x2ba>
c00158d2:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00158d8:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00158dc:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00158df:	83 f0 01             	xor    eax,0x1
c00158e2:	84 c0                	test   al,al
c00158e4:	74 77                	je     c001595d <sendKeyboardToken(KeyboardToken)+0x33f>
c00158e6:	a0 c1 d9 02 c0       	mov    al,ds:0xc002d9c1
c00158eb:	84 c0                	test   al,al
c00158ed:	74 41                	je     c0015930 <sendKeyboardToken(KeyboardToken)+0x312>
c00158ef:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00158f3:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00158f7:	74 2b                	je     c0015924 <sendKeyboardToken(KeyboardToken)+0x306>
c00158f9:	8b 15 c4 dc 02 c0    	mov    edx,DWORD PTR ds:0xc002dcc4
c00158ff:	89 d0                	mov    eax,edx
c0015901:	c1 e0 02             	shl    eax,0x2
c0015904:	01 d0                	add    eax,edx
c0015906:	01 c0                	add    eax,eax
c0015908:	a3 c4 dc 02 c0       	mov    ds:0xc002dcc4,eax
c001590d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015910:	0f b7 c0             	movzx  eax,ax
c0015913:	8d 50 d0             	lea    edx,[eax-0x30]
c0015916:	a1 c4 dc 02 c0       	mov    eax,ds:0xc002dcc4
c001591b:	01 d0                	add    eax,edx
c001591d:	a3 c4 dc 02 c0       	mov    ds:0xc002dcc4,eax
c0015922:	eb 6d                	jmp    c0015991 <sendKeyboardToken(KeyboardToken)+0x373>
c0015924:	c7 05 c4 dc 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dcc4,0x0
c001592e:	eb 61                	jmp    c0015991 <sendKeyboardToken(KeyboardToken)+0x373>
c0015930:	a1 c4 dc 02 c0       	mov    eax,ds:0xc002dcc4
c0015935:	85 c0                	test   eax,eax
c0015937:	74 18                	je     c0015951 <sendKeyboardToken(KeyboardToken)+0x333>
c0015939:	a1 c4 dc 02 c0       	mov    eax,ds:0xc002dcc4
c001593e:	0f b6 c0             	movzx  eax,al
c0015941:	83 ec 0c             	sub    esp,0xc
c0015944:	50                   	push   eax
c0015945:	e8 16 fc ff ff       	call   c0015560 <sendKeyToTerminal(unsigned char)>
c001594a:	83 c4 10             	add    esp,0x10
c001594d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015951:	c7 05 c4 dc 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dcc4,0x0
c001595b:	eb 34                	jmp    c0015991 <sendKeyboardToken(KeyboardToken)+0x373>
c001595d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015960:	66 3d 01 01          	cmp    ax,0x101
c0015964:	75 2b                	jne    c0015991 <sendKeyboardToken(KeyboardToken)+0x373>
c0015966:	a1 c4 dc 02 c0       	mov    eax,ds:0xc002dcc4
c001596b:	85 c0                	test   eax,eax
c001596d:	74 18                	je     c0015987 <sendKeyboardToken(KeyboardToken)+0x369>
c001596f:	a1 c4 dc 02 c0       	mov    eax,ds:0xc002dcc4
c0015974:	0f b6 c0             	movzx  eax,al
c0015977:	83 ec 0c             	sub    esp,0xc
c001597a:	50                   	push   eax
c001597b:	e8 e0 fb ff ff       	call   c0015560 <sendKeyToTerminal(unsigned char)>
c0015980:	83 c4 10             	add    esp,0x10
c0015983:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015987:	c7 05 c4 dc 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dcc4,0x0
c0015991:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015994:	83 f0 01             	xor    eax,0x1
c0015997:	84 c0                	test   al,al
c0015999:	74 4c                	je     c00159e7 <sendKeyboardToken(KeyboardToken)+0x3c9>
c001599b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001599e:	83 f0 01             	xor    eax,0x1
c00159a1:	84 c0                	test   al,al
c00159a3:	74 42                	je     c00159e7 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00159a5:	a0 c0 d9 02 c0       	mov    al,ds:0xc002d9c0
c00159aa:	83 f0 01             	xor    eax,0x1
c00159ad:	84 c0                	test   al,al
c00159af:	74 36                	je     c00159e7 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00159b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159b4:	66 83 f8 1f          	cmp    ax,0x1f
c00159b8:	76 09                	jbe    c00159c3 <sendKeyboardToken(KeyboardToken)+0x3a5>
c00159ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159bd:	66 83 f8 7e          	cmp    ax,0x7e
c00159c1:	76 12                	jbe    c00159d5 <sendKeyboardToken(KeyboardToken)+0x3b7>
c00159c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159c6:	66 83 f8 0a          	cmp    ax,0xa
c00159ca:	74 09                	je     c00159d5 <sendKeyboardToken(KeyboardToken)+0x3b7>
c00159cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159cf:	66 83 f8 08          	cmp    ax,0x8
c00159d3:	75 12                	jne    c00159e7 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00159d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159d8:	0f b6 c0             	movzx  eax,al
c00159db:	83 ec 0c             	sub    esp,0xc
c00159de:	50                   	push   eax
c00159df:	e8 7c fb ff ff       	call   c0015560 <sendKeyToTerminal(unsigned char)>
c00159e4:	83 c4 10             	add    esp,0x10
c00159e7:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00159ea:	83 f0 01             	xor    eax,0x1
c00159ed:	84 c0                	test   al,al
c00159ef:	74 4f                	je     c0015a40 <sendKeyboardToken(KeyboardToken)+0x422>
c00159f1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00159f4:	83 f0 01             	xor    eax,0x1
c00159f7:	84 c0                	test   al,al
c00159f9:	74 45                	je     c0015a40 <sendKeyboardToken(KeyboardToken)+0x422>
c00159fb:	a0 c0 d9 02 c0       	mov    al,ds:0xc002d9c0
c0015a00:	84 c0                	test   al,al
c0015a02:	74 3c                	je     c0015a40 <sendKeyboardToken(KeyboardToken)+0x422>
c0015a04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a07:	66 83 f8 3f          	cmp    ax,0x3f
c0015a0b:	76 33                	jbe    c0015a40 <sendKeyboardToken(KeyboardToken)+0x422>
c0015a0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a10:	66 83 f8 7f          	cmp    ax,0x7f
c0015a14:	77 2a                	ja     c0015a40 <sendKeyboardToken(KeyboardToken)+0x422>
c0015a16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a19:	88 c2                	mov    dl,al
c0015a1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a1e:	66 83 f8 5f          	cmp    ax,0x5f
c0015a22:	76 04                	jbe    c0015a28 <sendKeyboardToken(KeyboardToken)+0x40a>
c0015a24:	b0 20                	mov    al,0x20
c0015a26:	eb 02                	jmp    c0015a2a <sendKeyboardToken(KeyboardToken)+0x40c>
c0015a28:	b0 00                	mov    al,0x0
c0015a2a:	29 c2                	sub    edx,eax
c0015a2c:	88 d0                	mov    al,dl
c0015a2e:	83 e8 40             	sub    eax,0x40
c0015a31:	0f b6 c0             	movzx  eax,al
c0015a34:	83 ec 0c             	sub    esp,0xc
c0015a37:	50                   	push   eax
c0015a38:	e8 23 fb ff ff       	call   c0015560 <sendKeyToTerminal(unsigned char)>
c0015a3d:	83 c4 10             	add    esp,0x10
c0015a40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a43:	66 3d 00 03          	cmp    ax,0x300
c0015a47:	75 0f                	jne    c0015a58 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015a49:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015a4c:	83 f0 01             	xor    eax,0x1
c0015a4f:	84 c0                	test   al,al
c0015a51:	74 05                	je     c0015a58 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015a53:	e8 0f a9 ff ff       	call   c0010367 <doTerminalCycle()>
c0015a58:	90                   	nop
c0015a59:	c9                   	leave  
c0015a5a:	c3                   	ret    

c0015a5b <clearInternalKeybuffer(VgaText*)>:
c0015a5b:	55                   	push   ebp
c0015a5c:	89 e5                	mov    ebp,esp
c0015a5e:	83 ec 08             	sub    esp,0x8
c0015a61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a64:	05 98 01 00 00       	add    eax,0x198
c0015a69:	83 ec 0c             	sub    esp,0xc
c0015a6c:	50                   	push   eax
c0015a6d:	e8 fa ac fe ff       	call   c000076c <strlen>
c0015a72:	83 c4 10             	add    esp,0x10
c0015a75:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015a78:	81 c2 98 01 00 00    	add    edx,0x198
c0015a7e:	83 ec 04             	sub    esp,0x4
c0015a81:	50                   	push   eax
c0015a82:	6a 00                	push   0x0
c0015a84:	52                   	push   edx
c0015a85:	e8 c6 ac fe ff       	call   c0000750 <memset>
c0015a8a:	83 c4 10             	add    esp,0x10
c0015a8d:	90                   	nop
c0015a8e:	c9                   	leave  
c0015a8f:	c3                   	ret    

c0015a90 <readKeyboard(VgaText*, char*, unsigned long)>:
c0015a90:	55                   	push   ebp
c0015a91:	89 e5                	mov    ebp,esp
c0015a93:	83 ec 18             	sub    esp,0x18
c0015a96:	a1 a8 d8 02 c0       	mov    eax,ds:0xc002d8a8
c0015a9b:	85 c0                	test   eax,eax
c0015a9d:	74 2a                	je     c0015ac9 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0015a9f:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0015aa5:	8b 0d a8 d8 02 c0    	mov    ecx,DWORD PTR ds:0xc002d8a8
c0015aab:	83 ec 04             	sub    esp,0x4
c0015aae:	68 c0 d8 02 c0       	push   0xc002d8c0
c0015ab3:	83 ec 08             	sub    esp,0x8
c0015ab6:	89 e2                	mov    edx,esp
c0015ab8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015abb:	89 02                	mov    DWORD PTR [edx],eax
c0015abd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015ac0:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015ac4:	ff d1                	call   ecx
c0015ac6:	83 c4 10             	add    esp,0x10
c0015ac9:	fb                   	sti    
c0015aca:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015ad1:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015ad5:	0f 84 a1 00 00 00    	je     c0015b7c <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c0015adb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ade:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015ae4:	84 c0                	test   al,al
c0015ae6:	75 28                	jne    c0015b10 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c0015ae8:	fa                   	cli    
c0015ae9:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c0015aee:	40                   	inc    eax
c0015aef:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c0015af4:	e8 c8 7d 00 00       	call   c001d8c1 <schedule()>
c0015af9:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c0015afe:	48                   	dec    eax
c0015aff:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c0015b04:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c0015b09:	85 c0                	test   eax,eax
c0015b0b:	75 ce                	jne    c0015adb <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015b0d:	fb                   	sti    
c0015b0e:	eb cb                	jmp    c0015adb <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015b10:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015b13:	8d 50 01             	lea    edx,[eax+0x1]
c0015b16:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015b19:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015b1c:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0015b22:	88 10                	mov    BYTE PTR [eax],dl
c0015b24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b27:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015b2d:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015b30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b33:	05 98 01 00 00       	add    eax,0x198
c0015b38:	83 ec 0c             	sub    esp,0xc
c0015b3b:	50                   	push   eax
c0015b3c:	e8 2b ac fe ff       	call   c000076c <strlen>
c0015b41:	83 c4 10             	add    esp,0x10
c0015b44:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015b47:	81 c2 98 01 00 00    	add    edx,0x198
c0015b4d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015b50:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015b53:	81 c2 98 01 00 00    	add    edx,0x198
c0015b59:	83 ec 04             	sub    esp,0x4
c0015b5c:	50                   	push   eax
c0015b5d:	51                   	push   ecx
c0015b5e:	52                   	push   edx
c0015b5f:	e8 24 ab fe ff       	call   c0000688 <memmove>
c0015b64:	83 c4 10             	add    esp,0x10
c0015b67:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015b6a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015b6d:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015b71:	0f 85 5a ff ff ff    	jne    c0015ad1 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0015b77:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b7a:	eb 03                	jmp    c0015b7f <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c0015b7c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b7f:	c9                   	leave  
c0015b80:	c3                   	ret    
c0015b81:	90                   	nop

c0015b82 <Keyboard::Keyboard(char const*)>:
c0015b82:	83 ec 0c             	sub    esp,0xc
c0015b85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b89:	83 ec 08             	sub    esp,0x8
c0015b8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b90:	50                   	push   eax
c0015b91:	e8 70 e0 ff ff       	call   c0013c06 <Device::Device(char const*)>
c0015b96:	83 c4 10             	add    esp,0x10
c0015b99:	ba 9c ac 02 c0       	mov    edx,0xc002ac9c
c0015b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ba2:	89 10                	mov    DWORD PTR [eax],edx
c0015ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ba8:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015bb2:	c6 05 a4 d8 02 c0 01 	mov    BYTE PTR ds:0xc002d8a4,0x1
c0015bb9:	90                   	nop
c0015bba:	83 c4 0c             	add    esp,0xc
c0015bbd:	c3                   	ret    

c0015bbe <Keyboard::~Keyboard()>:
c0015bbe:	83 ec 0c             	sub    esp,0xc
c0015bc1:	ba 9c ac 02 c0       	mov    edx,0xc002ac9c
c0015bc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015bca:	89 10                	mov    DWORD PTR [eax],edx
c0015bcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015bd0:	83 ec 0c             	sub    esp,0xc
c0015bd3:	50                   	push   eax
c0015bd4:	e8 f7 dc ff ff       	call   c00138d0 <Device::~Device()>
c0015bd9:	83 c4 10             	add    esp,0x10
c0015bdc:	90                   	nop
c0015bdd:	83 c4 0c             	add    esp,0xc
c0015be0:	c3                   	ret    
c0015be1:	90                   	nop

c0015be2 <Keyboard::~Keyboard()>:
c0015be2:	83 ec 0c             	sub    esp,0xc
c0015be5:	83 ec 0c             	sub    esp,0xc
c0015be8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015bec:	e8 cd ff ff ff       	call   c0015bbe <Keyboard::~Keyboard()>
c0015bf1:	83 c4 10             	add    esp,0x10
c0015bf4:	83 ec 08             	sub    esp,0x8
c0015bf7:	68 5c 01 00 00       	push   0x15c
c0015bfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c00:	e8 ec c8 ff ff       	call   c00124f1 <operator delete(void*, unsigned long)>
c0015c05:	83 c4 10             	add    esp,0x10
c0015c08:	83 c4 0c             	add    esp,0xc
c0015c0b:	c3                   	ret    

c0015c0c <LogicalDisk::close(int, int, void*)>:
c0015c0c:	83 c8 ff             	or     eax,0xffffffff
c0015c0f:	c3                   	ret    

c0015c10 <LogicalDisk::~LogicalDisk()>:
c0015c10:	83 ec 0c             	sub    esp,0xc
c0015c13:	ba 14 ad 02 c0       	mov    edx,0xc002ad14
c0015c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c1c:	89 10                	mov    DWORD PTR [eax],edx
c0015c1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c22:	83 ec 0c             	sub    esp,0xc
c0015c25:	50                   	push   eax
c0015c26:	e8 a5 dc ff ff       	call   c00138d0 <Device::~Device()>
c0015c2b:	83 c4 10             	add    esp,0x10
c0015c2e:	90                   	nop
c0015c2f:	83 c4 0c             	add    esp,0xc
c0015c32:	c3                   	ret    
c0015c33:	90                   	nop

c0015c34 <LogicalDisk::~LogicalDisk()>:
c0015c34:	83 ec 0c             	sub    esp,0xc
c0015c37:	83 ec 0c             	sub    esp,0xc
c0015c3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c3e:	e8 cd ff ff ff       	call   c0015c10 <LogicalDisk::~LogicalDisk()>
c0015c43:	83 c4 10             	add    esp,0x10
c0015c46:	83 ec 08             	sub    esp,0x8
c0015c49:	68 74 01 00 00       	push   0x174
c0015c4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c52:	e8 9a c8 ff ff       	call   c00124f1 <operator delete(void*, unsigned long)>
c0015c57:	83 c4 10             	add    esp,0x10
c0015c5a:	83 c4 0c             	add    esp,0xc
c0015c5d:	c3                   	ret    

c0015c5e <LogicalDisk::open(int, int, void*)>:
c0015c5e:	83 ec 18             	sub    esp,0x18
c0015c61:	68 c8 ac 02 c0       	push   0xc002acc8
c0015c66:	e8 ca 40 00 00       	call   c0019d35 <Krnl::panic(char const*)>
c0015c6b:	83 c8 ff             	or     eax,0xffffffff
c0015c6e:	83 c4 1c             	add    esp,0x1c
c0015c71:	c3                   	ret    

c0015c72 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015c72:	53                   	push   ebx
c0015c73:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015c77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015c7b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015c7f:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015c85:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015c8b:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015c91:	77 10                	ja     c0015ca3 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015c93:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015c99:	89 d3                	mov    ebx,edx
c0015c9b:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015ca1:	72 05                	jb     c0015ca8 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015ca3:	83 c8 ff             	or     eax,0xffffffff
c0015ca6:	89 c2                	mov    edx,eax
c0015ca8:	5b                   	pop    ebx
c0015ca9:	c3                   	ret    

c0015caa <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015caa:	56                   	push   esi
c0015cab:	83 c8 ff             	or     eax,0xffffffff
c0015cae:	53                   	push   ebx
c0015caf:	89 c2                	mov    edx,eax
c0015cb1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015cb5:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015cb9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015cbd:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015cc3:	77 27                	ja     c0015cec <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015cc5:	89 d8                	mov    eax,ebx
c0015cc7:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015ccd:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015cd3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015cd8:	89 c2                	mov    edx,eax
c0015cda:	73 10                	jae    c0015cec <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015cdc:	89 c8                	mov    eax,ecx
c0015cde:	89 da                	mov    edx,ebx
c0015ce0:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015ce6:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015cec:	5b                   	pop    ebx
c0015ced:	5e                   	pop    esi
c0015cee:	c3                   	ret    
c0015cef:	90                   	nop

c0015cf0 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015cf0:	83 ec 1c             	sub    esp,0x1c
c0015cf3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015cf7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015cfb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015d03:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015d07:	89 04 24             	mov    DWORD PTR [esp],eax
c0015d0a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015d0e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015d12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d16:	83 ec 08             	sub    esp,0x8
c0015d19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d1d:	50                   	push   eax
c0015d1e:	e8 e3 de ff ff       	call   c0013c06 <Device::Device(char const*)>
c0015d23:	83 c4 10             	add    esp,0x10
c0015d26:	ba 14 ad 02 c0       	mov    edx,0xc002ad14
c0015d2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d2f:	89 10                	mov    DWORD PTR [eax],edx
c0015d31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d35:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015d3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d40:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015d47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d4b:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015d55:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015d59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015d5d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015d61:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015d67:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015d6d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015d71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015d74:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015d78:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015d7e:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015d84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d88:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015d8c:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015d92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d96:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015da0:	90                   	nop
c0015da1:	83 c4 1c             	add    esp,0x1c
c0015da4:	c3                   	ret    
c0015da5:	90                   	nop

c0015da6 <LogicalDisk::assignDriveLetter()>:
c0015da6:	55                   	push   ebp
c0015da7:	57                   	push   edi
c0015da8:	56                   	push   esi
c0015da9:	53                   	push   ebx
c0015daa:	83 ec 14             	sub    esp,0x14
c0015dad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015db1:	8b 3d e0 dc 02 c0    	mov    edi,DWORD PTR ds:0xc002dce0
c0015db7:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015dbd:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015dc1:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015dc7:	8b 3d e4 dc 02 c0    	mov    edi,DWORD PTR ds:0xc002dce4
c0015dcd:	3c 01                	cmp    al,0x1
c0015dcf:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015dd3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015dd7:	19 c0                	sbb    eax,eax
c0015dd9:	83 e0 02             	and    eax,0x2
c0015ddc:	83 c0 41             	add    eax,0x41
c0015ddf:	0f be e8             	movsx  ebp,al
c0015de2:	3c 43                	cmp    al,0x43
c0015de4:	75 10                	jne    c0015df6 <LogicalDisk::assignDriveLetter()+0x50>
c0015de6:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015ded:	75 5d                	jne    c0015e4c <LogicalDisk::assignDriveLetter()+0xa6>
c0015def:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015df4:	75 56                	jne    c0015e4c <LogicalDisk::assignDriveLetter()+0xa6>
c0015df6:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015df9:	ba 01 00 00 00       	mov    edx,0x1
c0015dfe:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015e02:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015e06:	d3 e2                	shl    edx,cl
c0015e08:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015e0c:	89 d7                	mov    edi,edx
c0015e0e:	89 d6                	mov    esi,edx
c0015e10:	c1 ff 1f             	sar    edi,0x1f
c0015e13:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015e17:	21 f9                	and    ecx,edi
c0015e19:	09 d1                	or     ecx,edx
c0015e1b:	75 2f                	jne    c0015e4c <LogicalDisk::assignDriveLetter()+0xa6>
c0015e1d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015e21:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015e25:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015e2b:	09 f2                	or     edx,esi
c0015e2d:	89 15 e0 dc 02 c0    	mov    DWORD PTR ds:0xc002dce0,edx
c0015e33:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e37:	09 fa                	or     edx,edi
c0015e39:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015e3d:	89 15 e4 dc 02 c0    	mov    DWORD PTR ds:0xc002dce4,edx
c0015e43:	89 1c bd 00 dd 02 c0 	mov    DWORD PTR [edi*4-0x3ffd2300],ebx
c0015e4a:	eb 08                	jmp    c0015e54 <LogicalDisk::assignDriveLetter()+0xae>
c0015e4c:	45                   	inc    ebp
c0015e4d:	40                   	inc    eax
c0015e4e:	3c 5b                	cmp    al,0x5b
c0015e50:	75 90                	jne    c0015de2 <LogicalDisk::assignDriveLetter()+0x3c>
c0015e52:	31 c0                	xor    eax,eax
c0015e54:	83 c4 14             	add    esp,0x14
c0015e57:	5b                   	pop    ebx
c0015e58:	5e                   	pop    esi
c0015e59:	5f                   	pop    edi
c0015e5a:	5d                   	pop    ebp
c0015e5b:	c3                   	ret    

c0015e5c <LogicalDisk::mount()>:
c0015e5c:	56                   	push   esi
c0015e5d:	53                   	push   ebx
c0015e5e:	53                   	push   ebx
c0015e5f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015e63:	8b 1d 74 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d874
c0015e69:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015e73:	85 db                	test   ebx,ebx
c0015e75:	74 27                	je     c0015e9e <LogicalDisk::mount()+0x42>
c0015e77:	51                   	push   ecx
c0015e78:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015e7f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015e81:	83 e8 41             	sub    eax,0x41
c0015e84:	50                   	push   eax
c0015e85:	56                   	push   esi
c0015e86:	53                   	push   ebx
c0015e87:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015e8a:	83 c4 10             	add    esp,0x10
c0015e8d:	84 c0                	test   al,al
c0015e8f:	74 08                	je     c0015e99 <LogicalDisk::mount()+0x3d>
c0015e91:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015e97:	eb 07                	jmp    c0015ea0 <LogicalDisk::mount()+0x44>
c0015e99:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015e9c:	eb d5                	jmp    c0015e73 <LogicalDisk::mount()+0x17>
c0015e9e:	31 c0                	xor    eax,eax
c0015ea0:	5a                   	pop    edx
c0015ea1:	5b                   	pop    ebx
c0015ea2:	5e                   	pop    esi
c0015ea3:	c3                   	ret    

c0015ea4 <LogicalDisk::unmount()>:
c0015ea4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ea8:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015eb2:	c3                   	ret    
c0015eb3:	90                   	nop

c0015eb4 <LogicalDisk::eject()>:
c0015eb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015eb8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0015ebe:	8b 10                	mov    edx,DWORD PTR [eax]
c0015ec0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015ec4:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0015ec7:	90                   	nop

c0015ec8 <LogicalDisk::unassignDriveLetter()>:
c0015ec8:	57                   	push   edi
c0015ec9:	56                   	push   esi
c0015eca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015ece:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015ed5:	84 c9                	test   cl,cl
c0015ed7:	75 0f                	jne    c0015ee8 <LogicalDisk::unassignDriveLetter()+0x20>
c0015ed9:	c7 44 24 0c ec ac 02 c0 	mov    DWORD PTR [esp+0xc],0xc002acec
c0015ee1:	5e                   	pop    esi
c0015ee2:	5f                   	pop    edi
c0015ee3:	e9 4d 3e 00 00       	jmp    c0019d35 <Krnl::panic(char const*)>
c0015ee8:	83 e9 41             	sub    ecx,0x41
c0015eeb:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0015ef2:	b8 01 00 00 00       	mov    eax,0x1
c0015ef7:	c7 04 8d 00 dd 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd2300],0x0
c0015f02:	d3 e0                	shl    eax,cl
c0015f04:	89 c7                	mov    edi,eax
c0015f06:	f7 d0                	not    eax
c0015f08:	c1 ff 1f             	sar    edi,0x1f
c0015f0b:	21 05 e0 dc 02 c0    	and    DWORD PTR ds:0xc002dce0,eax
c0015f11:	89 fe                	mov    esi,edi
c0015f13:	f7 d6                	not    esi
c0015f15:	21 35 e4 dc 02 c0    	and    DWORD PTR ds:0xc002dce4,esi
c0015f1b:	5e                   	pop    esi
c0015f1c:	5f                   	pop    edi
c0015f1d:	c3                   	ret    

c0015f1e <LogicalDisk::read(unsigned long long, int, void*)>:
c0015f1e:	57                   	push   edi
c0015f1f:	56                   	push   esi
c0015f20:	53                   	push   ebx
c0015f21:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015f25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015f29:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015f2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015f31:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015f37:	77 41                	ja     c0015f7a <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0015f39:	99                   	cdq    
c0015f3a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015f40:	01 c8                	add    eax,ecx
c0015f42:	11 da                	adc    edx,ebx
c0015f44:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015f4a:	19 d7                	sbb    edi,edx
c0015f4c:	72 33                	jb     c0015f81 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0015f4e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015f54:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015f5a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015f5e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015f62:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015f68:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015f6e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015f72:	5b                   	pop    ebx
c0015f73:	5e                   	pop    esi
c0015f74:	5f                   	pop    edi
c0015f75:	e9 cc 0a 00 00       	jmp    c0016a46 <VCache::read(unsigned long long, int, void*)>
c0015f7a:	b8 05 00 00 00       	mov    eax,0x5
c0015f7f:	eb 05                	jmp    c0015f86 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0015f81:	b8 07 00 00 00       	mov    eax,0x7
c0015f86:	5b                   	pop    ebx
c0015f87:	5e                   	pop    esi
c0015f88:	5f                   	pop    edi
c0015f89:	c3                   	ret    

c0015f8a <LogicalDisk::write(unsigned long long, int, void*)>:
c0015f8a:	57                   	push   edi
c0015f8b:	56                   	push   esi
c0015f8c:	53                   	push   ebx
c0015f8d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015f91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015f95:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015f99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015f9d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015fa3:	77 41                	ja     c0015fe6 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0015fa5:	99                   	cdq    
c0015fa6:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015fac:	01 c8                	add    eax,ecx
c0015fae:	11 da                	adc    edx,ebx
c0015fb0:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015fb6:	19 d7                	sbb    edi,edx
c0015fb8:	72 33                	jb     c0015fed <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0015fba:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015fc0:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015fc6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015fca:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015fce:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015fd4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015fda:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015fde:	5b                   	pop    ebx
c0015fdf:	5e                   	pop    esi
c0015fe0:	5f                   	pop    edi
c0015fe1:	e9 76 09 00 00       	jmp    c001695c <VCache::write(unsigned long long, int, void*)>
c0015fe6:	b8 05 00 00 00       	mov    eax,0x5
c0015feb:	eb 05                	jmp    c0015ff2 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0015fed:	b8 07 00 00 00       	mov    eax,0x7
c0015ff2:	5b                   	pop    ebx
c0015ff3:	5e                   	pop    esi
c0015ff4:	5f                   	pop    edi
c0015ff5:	c3                   	ret    

c0015ff6 <Mouse::Mouse(char const*)>:
c0015ff6:	83 ec 0c             	sub    esp,0xc
c0015ff9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ffd:	83 ec 08             	sub    esp,0x8
c0016000:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016004:	50                   	push   eax
c0016005:	e8 fc db ff ff       	call   c0013c06 <Device::Device(char const*)>
c001600a:	83 c4 10             	add    esp,0x10
c001600d:	ba 40 ad 02 c0       	mov    edx,0xc002ad40
c0016012:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016016:	89 10                	mov    DWORD PTR [eax],edx
c0016018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001601c:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0016026:	90                   	nop
c0016027:	83 c4 0c             	add    esp,0xc
c001602a:	c3                   	ret    
c001602b:	90                   	nop

c001602c <Mouse::~Mouse()>:
c001602c:	83 ec 0c             	sub    esp,0xc
c001602f:	ba 40 ad 02 c0       	mov    edx,0xc002ad40
c0016034:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016038:	89 10                	mov    DWORD PTR [eax],edx
c001603a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001603e:	83 ec 0c             	sub    esp,0xc
c0016041:	50                   	push   eax
c0016042:	e8 89 d8 ff ff       	call   c00138d0 <Device::~Device()>
c0016047:	83 c4 10             	add    esp,0x10
c001604a:	90                   	nop
c001604b:	83 c4 0c             	add    esp,0xc
c001604e:	c3                   	ret    
c001604f:	90                   	nop

c0016050 <Mouse::~Mouse()>:
c0016050:	83 ec 0c             	sub    esp,0xc
c0016053:	83 ec 0c             	sub    esp,0xc
c0016056:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001605a:	e8 cd ff ff ff       	call   c001602c <Mouse::~Mouse()>
c001605f:	83 c4 10             	add    esp,0x10
c0016062:	83 ec 08             	sub    esp,0x8
c0016065:	68 58 01 00 00       	push   0x158
c001606a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001606e:	e8 7e c4 ff ff       	call   c00124f1 <operator delete(void*, unsigned long)>
c0016073:	83 c4 10             	add    esp,0x10
c0016076:	83 c4 0c             	add    esp,0xc
c0016079:	c3                   	ret    

c001607a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001607a:	55                   	push   ebp
c001607b:	57                   	push   edi
c001607c:	56                   	push   esi
c001607d:	53                   	push   ebx
c001607e:	81 ec 28 01 00 00    	sub    esp,0x128
c0016084:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001608b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0016092:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016099:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00160a0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00160a4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00160a8:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00160af:	e8 4e dc ff ff       	call   c0013d02 <Device::getName()>
c00160b4:	5a                   	pop    edx
c00160b5:	59                   	pop    ecx
c00160b6:	50                   	push   eax
c00160b7:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00160bb:	55                   	push   ebp
c00160bc:	e8 4b a7 fe ff       	call   c000080c <strcpy>
c00160c1:	5b                   	pop    ebx
c00160c2:	58                   	pop    eax
c00160c3:	68 64 ad 02 c0       	push   0xc002ad64
c00160c8:	55                   	push   ebp
c00160c9:	e8 7e a8 fe ff       	call   c000094c <strcat>
c00160ce:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00160d5:	e8 c2 94 ff ff       	call   c000f59c <malloc>
c00160da:	83 c4 0c             	add    esp,0xc
c00160dd:	89 c3                	mov    ebx,eax
c00160df:	57                   	push   edi
c00160e0:	56                   	push   esi
c00160e1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00160e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00160e9:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00160f0:	55                   	push   ebp
c00160f1:	50                   	push   eax
c00160f2:	e8 f9 fb ff ff       	call   c0015cf0 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00160f7:	83 c4 14             	add    esp,0x14
c00160fa:	53                   	push   ebx
c00160fb:	e8 a6 fc ff ff       	call   c0015da6 <LogicalDisk::assignDriveLetter()>
c0016100:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016103:	e8 54 fd ff ff       	call   c0015e5c <LogicalDisk::mount()>
c0016108:	58                   	pop    eax
c0016109:	5a                   	pop    edx
c001610a:	53                   	push   ebx
c001610b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016112:	e8 eb d8 ff ff       	call   c0013a02 <Device::addChild(Device*)>
c0016117:	81 c4 2c 01 00 00    	add    esp,0x12c
c001611d:	5b                   	pop    ebx
c001611e:	5e                   	pop    esi
c001611f:	5f                   	pop    edi
c0016120:	5d                   	pop    ebp
c0016121:	c3                   	ret    

c0016122 <createPartitionsForDisk(PhysicalDisk*)>:
c0016122:	55                   	push   ebp
c0016123:	57                   	push   edi
c0016124:	56                   	push   esi
c0016125:	53                   	push   ebx
c0016126:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001612c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016133:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016139:	3d 00 02 00 00       	cmp    eax,0x200
c001613e:	74 27                	je     c0016167 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016140:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016146:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001614c:	83 ec 10             	sub    esp,0x10
c001614f:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016153:	99                   	cdq    
c0016154:	c1 e6 0a             	shl    esi,0xa
c0016157:	52                   	push   edx
c0016158:	89 fd                	mov    ebp,edi
c001615a:	50                   	push   eax
c001615b:	55                   	push   ebp
c001615c:	56                   	push   esi
c001615d:	e8 a2 04 01 00       	call   c0026604 <__udivdi3>
c0016162:	e9 b1 00 00 00       	jmp    c0016218 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016167:	83 ec 0c             	sub    esp,0xc
c001616a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001616c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016170:	56                   	push   esi
c0016171:	6a 01                	push   0x1
c0016173:	6a 00                	push   0x0
c0016175:	6a 00                	push   0x0
c0016177:	53                   	push   ebx
c0016178:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001617b:	83 c4 20             	add    esp,0x20
c001617e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016186:	75 0a                	jne    c0016192 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016188:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016190:	74 2c                	je     c00161be <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016192:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016198:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001619e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00161a4:	83 ec 10             	sub    esp,0x10
c00161a7:	0f a4 c2 0a          	shld   edx,eax,0xa
c00161ab:	89 f7                	mov    edi,esi
c00161ad:	c1 e0 0a             	shl    eax,0xa
c00161b0:	c1 ff 1f             	sar    edi,0x1f
c00161b3:	57                   	push   edi
c00161b4:	56                   	push   esi
c00161b5:	52                   	push   edx
c00161b6:	50                   	push   eax
c00161b7:	e8 48 04 01 00       	call   c0026604 <__udivdi3>
c00161bc:	eb 5a                	jmp    c0016218 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00161be:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00161c5:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00161cc:	83 e1 7f             	and    ecx,0x7f
c00161cf:	83 e0 7f             	and    eax,0x7f
c00161d2:	01 c1                	add    ecx,eax
c00161d4:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00161db:	83 e0 7f             	and    eax,0x7f
c00161de:	01 c1                	add    ecx,eax
c00161e0:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00161e7:	83 e0 7f             	and    eax,0x7f
c00161ea:	00 c1                	add    cl,al
c00161ec:	74 41                	je     c001622f <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00161ee:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00161f4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00161fa:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016200:	83 ec 10             	sub    esp,0x10
c0016203:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016207:	89 f7                	mov    edi,esi
c0016209:	c1 e0 0a             	shl    eax,0xa
c001620c:	c1 ff 1f             	sar    edi,0x1f
c001620f:	57                   	push   edi
c0016210:	56                   	push   esi
c0016211:	52                   	push   edx
c0016212:	50                   	push   eax
c0016213:	e8 ec 03 01 00       	call   c0026604 <__udivdi3>
c0016218:	83 c4 14             	add    esp,0x14
c001621b:	52                   	push   edx
c001621c:	50                   	push   eax
c001621d:	6a 00                	push   0x0
c001621f:	6a 00                	push   0x0
c0016221:	53                   	push   ebx
c0016222:	e8 53 fe ff ff       	call   c001607a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016227:	83 c4 20             	add    esp,0x20
c001622a:	e9 79 01 00 00       	jmp    c00163a8 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c001622f:	89 f0                	mov    eax,esi
c0016231:	31 f6                	xor    esi,esi
c0016233:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001623a:	75 02                	jne    c001623e <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c001623c:	89 f1                	mov    ecx,esi
c001623e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016245:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c001624c:	c1 e2 08             	shl    edx,0x8
c001624f:	c1 e7 10             	shl    edi,0x10
c0016252:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c001625a:	09 fa                	or     edx,edi
c001625c:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016264:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c001626b:	83 c0 10             	add    eax,0x10
c001626e:	09 fa                	or     edx,edi
c0016270:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016277:	c1 e7 18             	shl    edi,0x18
c001627a:	09 fa                	or     edx,edi
c001627c:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016283:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016287:	c1 e7 10             	shl    edi,0x10
c001628a:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016291:	c1 e2 08             	shl    edx,0x8
c0016294:	09 fa                	or     edx,edi
c0016296:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c001629d:	09 fa                	or     edx,edi
c001629f:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00162a6:	c1 e7 18             	shl    edi,0x18
c00162a9:	09 fa                	or     edx,edi
c00162ab:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00162af:	46                   	inc    esi
c00162b0:	83 fe 04             	cmp    esi,0x4
c00162b3:	0f 85 7a ff ff ff    	jne    c0016233 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00162b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162bd:	83 f0 01             	xor    eax,0x1
c00162c0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00162c4:	75 57                	jne    c001631d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00162c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00162ca:	83 f0 01             	xor    eax,0x1
c00162cd:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00162d1:	75 4a                	jne    c001631d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00162d3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00162d7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00162df:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00162e7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00162ed:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00162f3:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00162f9:	0f a4 c2 0a          	shld   edx,eax,0xa
c00162fd:	89 f7                	mov    edi,esi
c00162ff:	c1 e0 0a             	shl    eax,0xa
c0016302:	c1 ff 1f             	sar    edi,0x1f
c0016305:	57                   	push   edi
c0016306:	56                   	push   esi
c0016307:	52                   	push   edx
c0016308:	50                   	push   eax
c0016309:	e8 f6 02 01 00       	call   c0026604 <__udivdi3>
c001630e:	83 c4 10             	add    esp,0x10
c0016311:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016315:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016319:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c001631d:	84 c9                	test   cl,cl
c001631f:	74 53                	je     c0016374 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016321:	0f b6 c9             	movzx  ecx,cl
c0016324:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016328:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001632c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016330:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016334:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016338:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001633c:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016340:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016344:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016348:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001634c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016350:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016354:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016358:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c001635c:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016360:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016364:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016368:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001636c:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016370:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016374:	31 ed                	xor    ebp,ebp
c0016376:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001637a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001637e:	89 f8                	mov    eax,edi
c0016380:	09 f0                	or     eax,esi
c0016382:	74 1e                	je     c00163a2 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016384:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016388:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001638c:	89 d1                	mov    ecx,edx
c001638e:	09 c1                	or     ecx,eax
c0016390:	74 10                	je     c00163a2 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016392:	83 ec 0c             	sub    esp,0xc
c0016395:	57                   	push   edi
c0016396:	56                   	push   esi
c0016397:	52                   	push   edx
c0016398:	50                   	push   eax
c0016399:	53                   	push   ebx
c001639a:	e8 db fc ff ff       	call   c001607a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001639f:	83 c4 20             	add    esp,0x20
c00163a2:	45                   	inc    ebp
c00163a3:	83 fd 04             	cmp    ebp,0x4
c00163a6:	75 ce                	jne    c0016376 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00163a8:	81 c4 5c 02 00 00    	add    esp,0x25c
c00163ae:	5b                   	pop    ebx
c00163af:	5e                   	pop    esi
c00163b0:	5f                   	pop    edi
c00163b1:	5d                   	pop    ebp
c00163b2:	c3                   	ret    
c00163b3:	90                   	nop

c00163b4 <Serial::Serial(char const*)>:
c00163b4:	83 ec 0c             	sub    esp,0xc
c00163b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163bb:	83 ec 08             	sub    esp,0x8
c00163be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163c2:	50                   	push   eax
c00163c3:	e8 3e d8 ff ff       	call   c0013c06 <Device::Device(char const*)>
c00163c8:	83 c4 10             	add    esp,0x10
c00163cb:	ba 78 ad 02 c0       	mov    edx,0xc002ad78
c00163d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163d4:	89 10                	mov    DWORD PTR [eax],edx
c00163d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163da:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c00163e4:	90                   	nop
c00163e5:	83 c4 0c             	add    esp,0xc
c00163e8:	c3                   	ret    
c00163e9:	90                   	nop

c00163ea <Serial::~Serial()>:
c00163ea:	83 ec 0c             	sub    esp,0xc
c00163ed:	ba 78 ad 02 c0       	mov    edx,0xc002ad78
c00163f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163f6:	89 10                	mov    DWORD PTR [eax],edx
c00163f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163fc:	83 ec 0c             	sub    esp,0xc
c00163ff:	50                   	push   eax
c0016400:	e8 cb d4 ff ff       	call   c00138d0 <Device::~Device()>
c0016405:	83 c4 10             	add    esp,0x10
c0016408:	90                   	nop
c0016409:	83 c4 0c             	add    esp,0xc
c001640c:	c3                   	ret    
c001640d:	90                   	nop

c001640e <Serial::~Serial()>:
c001640e:	83 ec 0c             	sub    esp,0xc
c0016411:	83 ec 0c             	sub    esp,0xc
c0016414:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016418:	e8 cd ff ff ff       	call   c00163ea <Serial::~Serial()>
c001641d:	83 c4 10             	add    esp,0x10
c0016420:	83 ec 08             	sub    esp,0x8
c0016423:	68 58 01 00 00       	push   0x158
c0016428:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001642c:	e8 c0 c0 ff ff       	call   c00124f1 <operator delete(void*, unsigned long)>
c0016431:	83 c4 10             	add    esp,0x10
c0016434:	83 c4 0c             	add    esp,0xc
c0016437:	c3                   	ret    

c0016438 <Timer::Timer(char const*)>:
c0016438:	83 ec 0c             	sub    esp,0xc
c001643b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001643f:	83 ec 08             	sub    esp,0x8
c0016442:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016446:	50                   	push   eax
c0016447:	e8 ba d7 ff ff       	call   c0013c06 <Device::Device(char const*)>
c001644c:	83 c4 10             	add    esp,0x10
c001644f:	ba bc ad 02 c0       	mov    edx,0xc002adbc
c0016454:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016458:	89 10                	mov    DWORD PTR [eax],edx
c001645a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001645e:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016468:	90                   	nop
c0016469:	83 c4 0c             	add    esp,0xc
c001646c:	c3                   	ret    
c001646d:	90                   	nop

c001646e <Timer::~Timer()>:
c001646e:	83 ec 0c             	sub    esp,0xc
c0016471:	ba bc ad 02 c0       	mov    edx,0xc002adbc
c0016476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001647a:	89 10                	mov    DWORD PTR [eax],edx
c001647c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016480:	83 ec 0c             	sub    esp,0xc
c0016483:	50                   	push   eax
c0016484:	e8 47 d4 ff ff       	call   c00138d0 <Device::~Device()>
c0016489:	83 c4 10             	add    esp,0x10
c001648c:	90                   	nop
c001648d:	83 c4 0c             	add    esp,0xc
c0016490:	c3                   	ret    
c0016491:	90                   	nop

c0016492 <Timer::~Timer()>:
c0016492:	83 ec 0c             	sub    esp,0xc
c0016495:	83 ec 0c             	sub    esp,0xc
c0016498:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001649c:	e8 cd ff ff ff       	call   c001646e <Timer::~Timer()>
c00164a1:	83 c4 10             	add    esp,0x10
c00164a4:	83 ec 08             	sub    esp,0x8
c00164a7:	68 5c 01 00 00       	push   0x15c
c00164ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164b0:	e8 3c c0 ff ff       	call   c00124f1 <operator delete(void*, unsigned long)>
c00164b5:	83 c4 10             	add    esp,0x10
c00164b8:	83 c4 0c             	add    esp,0xc
c00164bb:	c3                   	ret    

c00164bc <Timer::read()>:
c00164bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00164c0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00164c6:	c3                   	ret    

c00164c7 <timerHandler(unsigned long long)>:
c00164c7:	55                   	push   ebp
c00164c8:	57                   	push   edi
c00164c9:	56                   	push   esi
c00164ca:	53                   	push   ebx
c00164cb:	83 ec 0c             	sub    esp,0xc
c00164ce:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00164d2:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00164d6:	01 35 70 dd 02 c0    	add    DWORD PTR ds:0xc002dd70,esi
c00164dc:	11 3d 74 dd 02 c0    	adc    DWORD PTR ds:0xc002dd74,edi
c00164e2:	80 3d 0d d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d70d,0x0
c00164e9:	0f 84 42 01 00 00    	je     c0016631 <timerHandler(unsigned long long)+0x16a>
c00164ef:	fa                   	cli    
c00164f0:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c00164f6:	83 ec 0c             	sub    esp,0xc
c00164f9:	ff 05 24 0c 03 c0    	inc    DWORD PTR ds:0xc0030c24
c00164ff:	68 38 0c 03 c0       	push   0xc0030c38
c0016504:	e8 55 21 01 00       	call   c002865e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016509:	83 c4 10             	add    esp,0x10
c001650c:	84 c0                	test   al,al
c001650e:	0f 85 a2 00 00 00    	jne    c00165b6 <timerHandler(unsigned long long)+0xef>
c0016514:	83 ec 0c             	sub    esp,0xc
c0016517:	68 38 0c 03 c0       	push   0xc0030c38
c001651c:	e8 59 21 01 00       	call   c002867a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016521:	83 c4 10             	add    esp,0x10
c0016524:	89 c3                	mov    ebx,eax
c0016526:	83 ec 0c             	sub    esp,0xc
c0016529:	68 38 0c 03 c0       	push   0xc0030c38
c001652e:	e8 47 21 01 00       	call   c002867a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016533:	c7 04 24 38 0c 03 c0 	mov    DWORD PTR [esp],0xc0030c38
c001653a:	89 c5                	mov    ebp,eax
c001653c:	e8 41 21 01 00       	call   c0028682 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016541:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016544:	83 c4 10             	add    esp,0x10
c0016547:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c001654a:	39 15 70 dd 02 c0    	cmp    DWORD PTR ds:0xc002dd70,edx
c0016550:	a1 74 dd 02 c0       	mov    eax,ds:0xc002dd74
c0016555:	19 c8                	sbb    eax,ecx
c0016557:	72 21                	jb     c001657a <timerHandler(unsigned long long)+0xb3>
c0016559:	83 ec 0c             	sub    esp,0xc
c001655c:	55                   	push   ebp
c001655d:	e8 e2 77 00 00       	call   c001dd44 <unblockTask(ThreadControlBlock*)>
c0016562:	83 c4 10             	add    esp,0x10
c0016565:	39 eb                	cmp    ebx,ebp
c0016567:	75 21                	jne    c001658a <timerHandler(unsigned long long)+0xc3>
c0016569:	83 ec 0c             	sub    esp,0xc
c001656c:	68 38 0c 03 c0       	push   0xc0030c38
c0016571:	e8 04 21 01 00       	call   c002867a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016576:	89 c3                	mov    ebx,eax
c0016578:	eb 0d                	jmp    c0016587 <timerHandler(unsigned long long)+0xc0>
c001657a:	50                   	push   eax
c001657b:	50                   	push   eax
c001657c:	55                   	push   ebp
c001657d:	68 38 0c 03 c0       	push   0xc0030c38
c0016582:	e8 a9 21 01 00       	call   c0028730 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016587:	83 c4 10             	add    esp,0x10
c001658a:	83 ec 0c             	sub    esp,0xc
c001658d:	68 38 0c 03 c0       	push   0xc0030c38
c0016592:	e8 c7 20 01 00       	call   c002865e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016597:	83 c4 10             	add    esp,0x10
c001659a:	84 c0                	test   al,al
c001659c:	75 18                	jne    c00165b6 <timerHandler(unsigned long long)+0xef>
c001659e:	83 ec 0c             	sub    esp,0xc
c00165a1:	68 38 0c 03 c0       	push   0xc0030c38
c00165a6:	e8 cf 20 01 00       	call   c002867a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00165ab:	83 c4 10             	add    esp,0x10
c00165ae:	39 d8                	cmp    eax,ebx
c00165b0:	0f 85 70 ff ff ff    	jne    c0016526 <timerHandler(unsigned long long)+0x5f>
c00165b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165bb:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c00165bf:	74 3d                	je     c00165fe <timerHandler(unsigned long long)+0x137>
c00165c1:	80 3d 0c d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d70c,0x0
c00165c8:	74 34                	je     c00165fe <timerHandler(unsigned long long)+0x137>
c00165ca:	fa                   	cli    
c00165cb:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c00165d1:	31 d2                	xor    edx,edx
c00165d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165d8:	89 f9                	mov    ecx,edi
c00165da:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c00165dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165e2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00165e5:	39 c6                	cmp    esi,eax
c00165e7:	19 d1                	sbb    ecx,edx
c00165e9:	72 05                	jb     c00165f0 <timerHandler(unsigned long long)+0x129>
c00165eb:	e8 d1 72 00 00       	call   c001d8c1 <schedule()>
c00165f0:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c00165f5:	48                   	dec    eax
c00165f6:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c00165fb:	75 01                	jne    c00165fe <timerHandler(unsigned long long)+0x137>
c00165fd:	fb                   	sti    
c00165fe:	a1 24 0c 03 c0       	mov    eax,ds:0xc0030c24
c0016603:	48                   	dec    eax
c0016604:	a3 24 0c 03 c0       	mov    ds:0xc0030c24,eax
c0016609:	75 18                	jne    c0016623 <timerHandler(unsigned long long)+0x15c>
c001660b:	83 3d 20 0c 03 c0 00 	cmp    DWORD PTR ds:0xc0030c20,0x0
c0016612:	74 0f                	je     c0016623 <timerHandler(unsigned long long)+0x15c>
c0016614:	c7 05 20 0c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030c20,0x0
c001661e:	e8 9e 72 00 00       	call   c001d8c1 <schedule()>
c0016623:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c0016628:	48                   	dec    eax
c0016629:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001662e:	75 01                	jne    c0016631 <timerHandler(unsigned long long)+0x16a>
c0016630:	fb                   	sti    
c0016631:	83 c4 0c             	add    esp,0xc
c0016634:	5b                   	pop    ebx
c0016635:	5e                   	pop    esi
c0016636:	5f                   	pop    edi
c0016637:	5d                   	pop    ebp
c0016638:	c3                   	ret    

c0016639 <setupTimer(int)>:
c0016639:	57                   	push   edi
c001663a:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c001663f:	56                   	push   esi
c0016640:	53                   	push   ebx
c0016641:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016645:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001664b:	83 ec 0c             	sub    esp,0xc
c001664e:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016654:	e8 a9 d6 ff ff       	call   c0013d02 <Device::getName()>
c0016659:	83 c4 10             	add    esp,0x10
c001665c:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001665f:	0f 85 8d 00 00 00    	jne    c00166f2 <setupTimer(int)+0xb9>
c0016665:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c001666a:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016671:	74 7f                	je     c00166f2 <setupTimer(int)+0xb9>
c0016673:	83 ec 0c             	sub    esp,0xc
c0016676:	68 5c 01 00 00       	push   0x15c
c001667b:	e8 1c 8f ff ff       	call   c000f59c <malloc>
c0016680:	89 04 24             	mov    DWORD PTR [esp],eax
c0016683:	89 c3                	mov    ebx,eax
c0016685:	e8 56 fb 00 00       	call   c00261e0 <PIT::PIT()>
c001668a:	59                   	pop    ecx
c001668b:	5f                   	pop    edi
c001668c:	53                   	push   ebx
c001668d:	ff 35 08 d7 02 c0    	push   DWORD PTR ds:0xc002d708
c0016693:	e8 6a d3 ff ff       	call   c0013a02 <Device::addChild(Device*)>
c0016698:	8b 03                	mov    eax,DWORD PTR [ebx]
c001669a:	6a 00                	push   0x0
c001669c:	6a 00                	push   0x0
c001669e:	56                   	push   esi
c001669f:	53                   	push   ebx
c00166a0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00166a3:	83 c4 14             	add    esp,0x14
c00166a6:	68 60 01 00 00       	push   0x160
c00166ab:	e8 ec 8e ff ff       	call   c000f59c <malloc>
c00166b0:	89 04 24             	mov    DWORD PTR [esp],eax
c00166b3:	89 c7                	mov    edi,eax
c00166b5:	e8 d6 f9 00 00       	call   c0026090 <APICTimer::APICTimer()>
c00166ba:	6a 00                	push   0x0
c00166bc:	6a 00                	push   0x0
c00166be:	56                   	push   esi
c00166bf:	57                   	push   edi
c00166c0:	e8 cd f8 00 00       	call   c0025f92 <APICTimer::open(int, int, void*)>
c00166c5:	83 c4 20             	add    esp,0x20
c00166c8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00166ca:	6a 00                	push   0x0
c00166cc:	6a 00                	push   0x0
c00166ce:	6a 00                	push   0x0
c00166d0:	53                   	push   ebx
c00166d1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00166d4:	58                   	pop    eax
c00166d5:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c00166da:	5a                   	pop    edx
c00166db:	57                   	push   edi
c00166dc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00166e2:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00166e8:	e8 15 d3 ff ff       	call   c0013a02 <Device::addChild(Device*)>
c00166ed:	83 c4 10             	add    esp,0x10
c00166f0:	eb 33                	jmp    c0016725 <setupTimer(int)+0xec>
c00166f2:	83 ec 0c             	sub    esp,0xc
c00166f5:	68 5c 01 00 00       	push   0x15c
c00166fa:	e8 9d 8e ff ff       	call   c000f59c <malloc>
c00166ff:	89 04 24             	mov    DWORD PTR [esp],eax
c0016702:	89 c3                	mov    ebx,eax
c0016704:	e8 d7 fa 00 00       	call   c00261e0 <PIT::PIT()>
c0016709:	58                   	pop    eax
c001670a:	5a                   	pop    edx
c001670b:	53                   	push   ebx
c001670c:	ff 35 08 d7 02 c0    	push   DWORD PTR ds:0xc002d708
c0016712:	e8 eb d2 ff ff       	call   c0013a02 <Device::addChild(Device*)>
c0016717:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016719:	6a 00                	push   0x0
c001671b:	6a 00                	push   0x0
c001671d:	56                   	push   esi
c001671e:	53                   	push   ebx
c001671f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016722:	83 c4 20             	add    esp,0x20
c0016725:	89 d8                	mov    eax,ebx
c0016727:	5b                   	pop    ebx
c0016728:	5e                   	pop    esi
c0016729:	5f                   	pop    edi
c001672a:	c3                   	ret    
c001672b:	90                   	nop

c001672c <VCache::VCache(PhysicalDisk*)>:
c001672c:	53                   	push   ebx
c001672d:	83 ec 18             	sub    esp,0x18
c0016730:	ba ec ad 02 c0       	mov    edx,0xc002adec
c0016735:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016739:	89 10                	mov    DWORD PTR [eax],edx
c001673b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001673f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016746:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001674a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016751:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016755:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001675c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016763:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016767:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001676e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016775:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016779:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016780:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016784:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016788:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001678c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016793:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c001679a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001679e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00167a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167a6:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c00167aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167ae:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00167b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167b6:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00167bd:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c00167c5:	83 ec 0c             	sub    esp,0xc
c00167c8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00167cc:	e8 cb 8d ff ff       	call   c000f59c <malloc>
c00167d1:	83 c4 10             	add    esp,0x10
c00167d4:	89 c3                	mov    ebx,eax
c00167d6:	83 ec 0c             	sub    esp,0xc
c00167d9:	53                   	push   ebx
c00167da:	e8 ab 6e 00 00       	call   c001d68a <Mutex::Mutex()>
c00167df:	83 c4 10             	add    esp,0x10
c00167e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167e6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00167e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167ed:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00167f1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00167f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167f8:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c00167ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016803:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016809:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001680d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016810:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016814:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001681a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016820:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016824:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016827:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001682a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001682e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016832:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016836:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001683c:	05 00 01 00 00       	add    eax,0x100
c0016841:	c1 e0 04             	shl    eax,0x4
c0016844:	83 ec 0c             	sub    esp,0xc
c0016847:	50                   	push   eax
c0016848:	e8 4f 8d ff ff       	call   c000f59c <malloc>
c001684d:	83 c4 10             	add    esp,0x10
c0016850:	89 c2                	mov    edx,eax
c0016852:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016856:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016859:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001685d:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016864:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016868:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001686c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016870:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016876:	c1 e0 07             	shl    eax,0x7
c0016879:	83 ec 0c             	sub    esp,0xc
c001687c:	50                   	push   eax
c001687d:	e8 1a 8d ff ff       	call   c000f59c <malloc>
c0016882:	83 c4 10             	add    esp,0x10
c0016885:	89 c2                	mov    edx,eax
c0016887:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001688b:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001688e:	90                   	nop
c001688f:	83 c4 18             	add    esp,0x18
c0016892:	5b                   	pop    ebx
c0016893:	c3                   	ret    

c0016894 <VCache::invalidateReadBuffer()>:
c0016894:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016898:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c001689e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00168a2:	c3                   	ret    
c00168a3:	90                   	nop

c00168a4 <VCache::writeWriteBuffer()>:
c00168a4:	53                   	push   ebx
c00168a5:	83 ec 14             	sub    esp,0x14
c00168a8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00168ac:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00168af:	8b 10                	mov    edx,DWORD PTR [eax]
c00168b1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00168b4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00168b7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00168ba:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00168bd:	50                   	push   eax
c00168be:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00168c1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00168c8:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00168cf:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00168d3:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00168da:	83 c4 28             	add    esp,0x28
c00168dd:	5b                   	pop    ebx
c00168de:	c3                   	ret    
c00168df:	90                   	nop

c00168e0 <VCache::~VCache()>:
c00168e0:	83 ec 0c             	sub    esp,0xc
c00168e3:	ba ec ad 02 c0       	mov    edx,0xc002adec
c00168e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168ec:	89 10                	mov    DWORD PTR [eax],edx
c00168ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168f2:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00168f5:	84 c0                	test   al,al
c00168f7:	74 0f                	je     c0016908 <VCache::~VCache()+0x28>
c00168f9:	83 ec 0c             	sub    esp,0xc
c00168fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016900:	e8 9f ff ff ff       	call   c00168a4 <VCache::writeWriteBuffer()>
c0016905:	83 c4 10             	add    esp,0x10
c0016908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001690c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001690f:	83 ec 0c             	sub    esp,0xc
c0016912:	50                   	push   eax
c0016913:	e8 94 8c ff ff       	call   c000f5ac <free>
c0016918:	83 c4 10             	add    esp,0x10
c001691b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001691f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016922:	83 ec 0c             	sub    esp,0xc
c0016925:	50                   	push   eax
c0016926:	e8 81 8c ff ff       	call   c000f5ac <free>
c001692b:	83 c4 10             	add    esp,0x10
c001692e:	90                   	nop
c001692f:	83 c4 0c             	add    esp,0xc
c0016932:	c3                   	ret    
c0016933:	90                   	nop

c0016934 <VCache::~VCache()>:
c0016934:	83 ec 0c             	sub    esp,0xc
c0016937:	83 ec 0c             	sub    esp,0xc
c001693a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001693e:	e8 9d ff ff ff       	call   c00168e0 <VCache::~VCache()>
c0016943:	83 c4 10             	add    esp,0x10
c0016946:	83 ec 08             	sub    esp,0x8
c0016949:	6a 44                	push   0x44
c001694b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001694f:	e8 9d bb ff ff       	call   c00124f1 <operator delete(void*, unsigned long)>
c0016954:	83 c4 10             	add    esp,0x10
c0016957:	83 c4 0c             	add    esp,0xc
c001695a:	c3                   	ret    
c001695b:	90                   	nop

c001695c <VCache::write(unsigned long long, int, void*)>:
c001695c:	55                   	push   ebp
c001695d:	57                   	push   edi
c001695e:	56                   	push   esi
c001695f:	53                   	push   ebx
c0016960:	83 ec 18             	sub    esp,0x18
c0016963:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016967:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001696b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001696f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016972:	e8 59 72 00 00       	call   c001dbd0 <Semaphore::acquire()>
c0016977:	83 c4 10             	add    esp,0x10
c001697a:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001697e:	74 0c                	je     c001698c <VCache::write(unsigned long long, int, void*)+0x30>
c0016980:	83 ec 0c             	sub    esp,0xc
c0016983:	53                   	push   ebx
c0016984:	e8 0b ff ff ff       	call   c0016894 <VCache::invalidateReadBuffer()>
c0016989:	83 c4 10             	add    esp,0x10
c001698c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016990:	74 5c                	je     c00169ee <VCache::write(unsigned long long, int, void*)+0x92>
c0016992:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0016995:	89 e8                	mov    eax,ebp
c0016997:	99                   	cdq    
c0016998:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001699b:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001699e:	89 c1                	mov    ecx,eax
c00169a0:	89 d0                	mov    eax,edx
c00169a2:	31 f1                	xor    ecx,esi
c00169a4:	31 f8                	xor    eax,edi
c00169a6:	09 c1                	or     ecx,eax
c00169a8:	75 38                	jne    c00169e2 <VCache::write(unsigned long long, int, void*)+0x86>
c00169aa:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c00169af:	75 31                	jne    c00169e2 <VCache::write(unsigned long long, int, void*)+0x86>
c00169b1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00169b4:	89 ef                	mov    edi,ebp
c00169b6:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00169bc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00169c0:	0f af f9             	imul   edi,ecx
c00169c3:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c00169c6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00169c8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00169cb:	40                   	inc    eax
c00169cc:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00169cf:	83 c0 80             	add    eax,0xffffff80
c00169d2:	75 5c                	jne    c0016a30 <VCache::write(unsigned long long, int, void*)+0xd4>
c00169d4:	83 ec 0c             	sub    esp,0xc
c00169d7:	53                   	push   ebx
c00169d8:	e8 c7 fe ff ff       	call   c00168a4 <VCache::writeWriteBuffer()>
c00169dd:	83 c4 10             	add    esp,0x10
c00169e0:	eb 4e                	jmp    c0016a30 <VCache::write(unsigned long long, int, void*)+0xd4>
c00169e2:	83 ec 0c             	sub    esp,0xc
c00169e5:	53                   	push   ebx
c00169e6:	e8 b9 fe ff ff       	call   c00168a4 <VCache::writeWriteBuffer()>
c00169eb:	83 c4 10             	add    esp,0x10
c00169ee:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00169f1:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c00169f6:	7f 22                	jg     c0016a1a <VCache::write(unsigned long long, int, void*)+0xbe>
c00169f8:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00169fb:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00169fe:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016a02:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016a06:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c0016a09:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0016a0c:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016a12:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016a16:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016a18:	eb 16                	jmp    c0016a30 <VCache::write(unsigned long long, int, void*)+0xd4>
c0016a1a:	83 ec 0c             	sub    esp,0xc
c0016a1d:	8b 10                	mov    edx,DWORD PTR [eax]
c0016a1f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016a23:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016a27:	57                   	push   edi
c0016a28:	56                   	push   esi
c0016a29:	50                   	push   eax
c0016a2a:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016a2d:	83 c4 20             	add    esp,0x20
c0016a30:	83 ec 0c             	sub    esp,0xc
c0016a33:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016a36:	e8 f1 77 00 00       	call   c001e22c <Semaphore::release()>
c0016a3b:	83 c4 1c             	add    esp,0x1c
c0016a3e:	31 c0                	xor    eax,eax
c0016a40:	5b                   	pop    ebx
c0016a41:	5e                   	pop    esi
c0016a42:	5f                   	pop    edi
c0016a43:	5d                   	pop    ebp
c0016a44:	c3                   	ret    
c0016a45:	90                   	nop

c0016a46 <VCache::read(unsigned long long, int, void*)>:
c0016a46:	55                   	push   ebp
c0016a47:	57                   	push   edi
c0016a48:	56                   	push   esi
c0016a49:	53                   	push   ebx
c0016a4a:	83 ec 28             	sub    esp,0x28
c0016a4d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016a51:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016a55:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016a59:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016a5d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016a60:	e8 6b 71 00 00       	call   c001dbd0 <Semaphore::acquire()>
c0016a65:	83 c4 10             	add    esp,0x10
c0016a68:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016a6c:	74 0c                	je     c0016a7a <VCache::read(unsigned long long, int, void*)+0x34>
c0016a6e:	83 ec 0c             	sub    esp,0xc
c0016a71:	53                   	push   ebx
c0016a72:	e8 2d fe ff ff       	call   c00168a4 <VCache::writeWriteBuffer()>
c0016a77:	83 c4 10             	add    esp,0x10
c0016a7a:	83 fd 01             	cmp    ebp,0x1
c0016a7d:	0f 85 80 00 00 00    	jne    c0016b03 <VCache::read(unsigned long long, int, void*)+0xbd>
c0016a83:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016a86:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016a8a:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016a91:	75 70                	jne    c0016b03 <VCache::read(unsigned long long, int, void*)+0xbd>
c0016a93:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0016a96:	89 e9                	mov    ecx,ebp
c0016a98:	f7 d9                	neg    ecx
c0016a9a:	89 c8                	mov    eax,ecx
c0016a9c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016aa0:	c1 f8 1f             	sar    eax,0x1f
c0016aa3:	21 f1                	and    ecx,esi
c0016aa5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016aa9:	89 c8                	mov    eax,ecx
c0016aab:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016aaf:	21 f9                	and    ecx,edi
c0016ab1:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016ab5:	89 ca                	mov    edx,ecx
c0016ab7:	74 0a                	je     c0016ac3 <VCache::read(unsigned long long, int, void*)+0x7d>
c0016ab9:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016abc:	75 05                	jne    c0016ac3 <VCache::read(unsigned long long, int, void*)+0x7d>
c0016abe:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0016ac1:	74 23                	je     c0016ae6 <VCache::read(unsigned long long, int, void*)+0xa0>
c0016ac3:	83 ec 0c             	sub    esp,0xc
c0016ac6:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016aca:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016ace:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0016ad1:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0016ad4:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0016ad6:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016ad9:	55                   	push   ebp
c0016ada:	52                   	push   edx
c0016adb:	50                   	push   eax
c0016adc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016ae0:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016ae3:	83 c4 20             	add    esp,0x20
c0016ae6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016ae9:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016aed:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016af3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016af6:	48                   	dec    eax
c0016af7:	21 c6                	and    esi,eax
c0016af9:	0f af f1             	imul   esi,ecx
c0016afc:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0016aff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016b01:	eb 1d                	jmp    c0016b20 <VCache::read(unsigned long long, int, void*)+0xda>
c0016b03:	83 ec 0c             	sub    esp,0xc
c0016b06:	53                   	push   ebx
c0016b07:	e8 88 fd ff ff       	call   c0016894 <VCache::invalidateReadBuffer()>
c0016b0c:	5a                   	pop    edx
c0016b0d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016b10:	8b 10                	mov    edx,DWORD PTR [eax]
c0016b12:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016b16:	55                   	push   ebp
c0016b17:	57                   	push   edi
c0016b18:	56                   	push   esi
c0016b19:	50                   	push   eax
c0016b1a:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016b1d:	83 c4 20             	add    esp,0x20
c0016b20:	83 ec 0c             	sub    esp,0xc
c0016b23:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016b26:	e8 01 77 00 00       	call   c001e22c <Semaphore::release()>
c0016b2b:	83 c4 2c             	add    esp,0x2c
c0016b2e:	31 c0                	xor    eax,eax
c0016b30:	5b                   	pop    ebx
c0016b31:	5e                   	pop    esi
c0016b32:	5f                   	pop    edi
c0016b33:	5d                   	pop    ebp
c0016b34:	c3                   	ret    
c0016b35:	90                   	nop

c0016b36 <Video::putrect(int, int, int, int, unsigned int)>:
c0016b36:	55                   	push   ebp
c0016b37:	57                   	push   edi
c0016b38:	56                   	push   esi
c0016b39:	53                   	push   ebx
c0016b3a:	83 ec 1c             	sub    esp,0x1c
c0016b3d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016b41:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016b45:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016b49:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016b4d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016b51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b55:	01 df                	add    edi,ebx
c0016b57:	39 fb                	cmp    ebx,edi
c0016b59:	7d 1f                	jge    c0016b7a <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016b5b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016b5f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016b63:	7d 12                	jge    c0016b77 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016b65:	8b 16                	mov    edx,DWORD PTR [esi]
c0016b67:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016b6b:	53                   	push   ebx
c0016b6c:	55                   	push   ebp
c0016b6d:	45                   	inc    ebp
c0016b6e:	56                   	push   esi
c0016b6f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016b72:	83 c4 10             	add    esp,0x10
c0016b75:	eb e8                	jmp    c0016b5f <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016b77:	43                   	inc    ebx
c0016b78:	eb dd                	jmp    c0016b57 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016b7a:	83 c4 1c             	add    esp,0x1c
c0016b7d:	5b                   	pop    ebx
c0016b7e:	5e                   	pop    esi
c0016b7f:	5f                   	pop    edi
c0016b80:	5d                   	pop    ebp
c0016b81:	c3                   	ret    

c0016b82 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016b82:	55                   	push   ebp
c0016b83:	57                   	push   edi
c0016b84:	31 ff                	xor    edi,edi
c0016b86:	56                   	push   esi
c0016b87:	53                   	push   ebx
c0016b88:	83 ec 1c             	sub    esp,0x1c
c0016b8b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016b8f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016b93:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016b9a:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016b9f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016ba3:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016ba7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016bab:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016bae:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016bb2:	01 f9                	add    ecx,edi
c0016bb4:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016bb8:	7d 2f                	jge    c0016be9 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016bba:	31 f6                	xor    esi,esi
c0016bbc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016bc0:	01 f2                	add    edx,esi
c0016bc2:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016bc6:	7d 1a                	jge    c0016be2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016bc8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016bcb:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016bce:	46                   	inc    esi
c0016bcf:	51                   	push   ecx
c0016bd0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016bd4:	52                   	push   edx
c0016bd5:	55                   	push   ebp
c0016bd6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016bd9:	83 c4 10             	add    esp,0x10
c0016bdc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016be0:	eb da                	jmp    c0016bbc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016be2:	47                   	inc    edi
c0016be3:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016be7:	eb c5                	jmp    c0016bae <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016be9:	83 c4 1c             	add    esp,0x1c
c0016bec:	5b                   	pop    ebx
c0016bed:	5e                   	pop    esi
c0016bee:	5f                   	pop    edi
c0016bef:	5d                   	pop    ebp
c0016bf0:	c3                   	ret    
c0016bf1:	90                   	nop

c0016bf2 <Video::blit(unsigned int*, int, int, int, int)>:
c0016bf2:	55                   	push   ebp
c0016bf3:	57                   	push   edi
c0016bf4:	56                   	push   esi
c0016bf5:	53                   	push   ebx
c0016bf6:	83 ec 1c             	sub    esp,0x1c
c0016bf9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016bfd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016c01:	85 c0                	test   eax,eax
c0016c03:	79 02                	jns    c0016c07 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016c05:	31 c0                	xor    eax,eax
c0016c07:	c1 e0 02             	shl    eax,0x2
c0016c0a:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016c0e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c12:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016c16:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016c1a:	39 d8                	cmp    eax,ebx
c0016c1c:	7e 49                	jle    c0016c67 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016c1e:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016c24:	7c 41                	jl     c0016c67 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016c26:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016c2a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016c2e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016c32:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016c36:	39 f9                	cmp    ecx,edi
c0016c38:	7e 22                	jle    c0016c5c <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016c3a:	83 c5 04             	add    ebp,0x4
c0016c3d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016c43:	7c 14                	jl     c0016c59 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016c45:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016c47:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016c4a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016c4e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016c52:	56                   	push   esi
c0016c53:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016c56:	83 c4 10             	add    esp,0x10
c0016c59:	47                   	inc    edi
c0016c5a:	eb d2                	jmp    c0016c2e <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016c5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016c60:	43                   	inc    ebx
c0016c61:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016c65:	eb ab                	jmp    c0016c12 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016c67:	83 c4 1c             	add    esp,0x1c
c0016c6a:	5b                   	pop    ebx
c0016c6b:	5e                   	pop    esi
c0016c6c:	5f                   	pop    edi
c0016c6d:	5d                   	pop    ebp
c0016c6e:	c3                   	ret    
c0016c6f:	90                   	nop

c0016c70 <Video::clearScreen(unsigned int)>:
c0016c70:	57                   	push   edi
c0016c71:	56                   	push   esi
c0016c72:	53                   	push   ebx
c0016c73:	31 db                	xor    ebx,ebx
c0016c75:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016c79:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016c7f:	7e 1f                	jle    c0016ca0 <Video::clearScreen(unsigned int)+0x30>
c0016c81:	31 ff                	xor    edi,edi
c0016c83:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016c89:	7e 12                	jle    c0016c9d <Video::clearScreen(unsigned int)+0x2d>
c0016c8b:	8b 06                	mov    eax,DWORD PTR [esi]
c0016c8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016c91:	53                   	push   ebx
c0016c92:	57                   	push   edi
c0016c93:	47                   	inc    edi
c0016c94:	56                   	push   esi
c0016c95:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016c98:	83 c4 10             	add    esp,0x10
c0016c9b:	eb e6                	jmp    c0016c83 <Video::clearScreen(unsigned int)+0x13>
c0016c9d:	43                   	inc    ebx
c0016c9e:	eb d9                	jmp    c0016c79 <Video::clearScreen(unsigned int)+0x9>
c0016ca0:	5b                   	pop    ebx
c0016ca1:	5e                   	pop    esi
c0016ca2:	5f                   	pop    edi
c0016ca3:	c3                   	ret    

c0016ca4 <Video::putpixel(int, int, unsigned int)>:
c0016ca4:	c7 44 24 04 f4 ad 02 c0 	mov    DWORD PTR [esp+0x4],0xc002adf4
c0016cac:	e9 84 30 00 00       	jmp    c0019d35 <Krnl::panic(char const*)>
c0016cb1:	90                   	nop

c0016cb2 <Video::Video(char const*)>:
c0016cb2:	83 ec 0c             	sub    esp,0xc
c0016cb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cb9:	83 ec 08             	sub    esp,0x8
c0016cbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cc0:	50                   	push   eax
c0016cc1:	e8 40 cf ff ff       	call   c0013c06 <Device::Device(char const*)>
c0016cc6:	83 c4 10             	add    esp,0x10
c0016cc9:	ba 64 ae 02 c0       	mov    edx,0xc002ae64
c0016cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cd2:	89 10                	mov    DWORD PTR [eax],edx
c0016cd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cd8:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016ce2:	90                   	nop
c0016ce3:	83 c4 0c             	add    esp,0xc
c0016ce6:	c3                   	ret    
c0016ce7:	90                   	nop

c0016ce8 <Video::~Video()>:
c0016ce8:	83 ec 0c             	sub    esp,0xc
c0016ceb:	ba 64 ae 02 c0       	mov    edx,0xc002ae64
c0016cf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cf4:	89 10                	mov    DWORD PTR [eax],edx
c0016cf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cfa:	83 ec 0c             	sub    esp,0xc
c0016cfd:	50                   	push   eax
c0016cfe:	e8 cd cb ff ff       	call   c00138d0 <Device::~Device()>
c0016d03:	83 c4 10             	add    esp,0x10
c0016d06:	90                   	nop
c0016d07:	83 c4 0c             	add    esp,0xc
c0016d0a:	c3                   	ret    
c0016d0b:	90                   	nop

c0016d0c <Video::~Video()>:
c0016d0c:	83 ec 0c             	sub    esp,0xc
c0016d0f:	83 ec 0c             	sub    esp,0xc
c0016d12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d16:	e8 cd ff ff ff       	call   c0016ce8 <Video::~Video()>
c0016d1b:	83 c4 10             	add    esp,0x10
c0016d1e:	83 ec 08             	sub    esp,0x8
c0016d21:	68 64 01 00 00       	push   0x164
c0016d26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d2a:	e8 c2 b7 ff ff       	call   c00124f1 <operator delete(void*, unsigned long)>
c0016d2f:	83 c4 10             	add    esp,0x10
c0016d32:	83 c4 0c             	add    esp,0xc
c0016d35:	c3                   	ret    

c0016d36 <Video::isMonochrome()>:
c0016d36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d3a:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016d40:	c3                   	ret    
c0016d41:	90                   	nop

c0016d42 <Video::getWidth()>:
c0016d42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d46:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016d4c:	c3                   	ret    
c0016d4d:	90                   	nop

c0016d4e <Video::getHeight()>:
c0016d4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d52:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016d58:	c3                   	ret    
c0016d59:	90                   	nop

c0016d5a <Video::drawCursor(int, int, unsigned char*, int)>:
c0016d5a:	55                   	push   ebp
c0016d5b:	57                   	push   edi
c0016d5c:	56                   	push   esi
c0016d5d:	53                   	push   ebx
c0016d5e:	83 ec 2c             	sub    esp,0x2c
c0016d61:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016d65:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016d69:	83 f8 01             	cmp    eax,0x1
c0016d6c:	19 c9                	sbb    ecx,ecx
c0016d6e:	31 db                	xor    ebx,ebx
c0016d70:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016d74:	89 cd                	mov    ebp,ecx
c0016d76:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016d7e:	f7 d5                	not    ebp
c0016d80:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016d86:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016d8a:	01 d8                	add    eax,ebx
c0016d8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d90:	56                   	push   esi
c0016d91:	e8 b8 ff ff ff       	call   c0016d4e <Video::getHeight()>
c0016d96:	59                   	pop    ecx
c0016d97:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016d9b:	7e 70                	jle    c0016e0d <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016d9d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016da1:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016da5:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016da8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016dac:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016db0:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016db7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016dbb:	89 f8                	mov    eax,edi
c0016dbd:	83 c0 20             	add    eax,0x20
c0016dc0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016dc4:	56                   	push   esi
c0016dc5:	e8 78 ff ff ff       	call   c0016d42 <Video::getWidth()>
c0016dca:	5a                   	pop    edx
c0016dcb:	39 c7                	cmp    edi,eax
c0016dcd:	7d 34                	jge    c0016e03 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016dcf:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016dd4:	74 05                	je     c0016ddb <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016dd6:	8b 06                	mov    eax,DWORD PTR [esi]
c0016dd8:	55                   	push   ebp
c0016dd9:	eb 0d                	jmp    c0016de8 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016ddb:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016de0:	74 12                	je     c0016df4 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016de2:	8b 06                	mov    eax,DWORD PTR [esi]
c0016de4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016de8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016dec:	57                   	push   edi
c0016ded:	56                   	push   esi
c0016dee:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016df1:	83 c4 10             	add    esp,0x10
c0016df4:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016df8:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016dfc:	47                   	inc    edi
c0016dfd:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016e01:	75 c1                	jne    c0016dc4 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016e03:	43                   	inc    ebx
c0016e04:	83 fb 20             	cmp    ebx,0x20
c0016e07:	0f 85 79 ff ff ff    	jne    c0016d86 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016e0d:	83 c4 2c             	add    esp,0x2c
c0016e10:	5b                   	pop    ebx
c0016e11:	5e                   	pop    esi
c0016e12:	5f                   	pop    edi
c0016e13:	5d                   	pop    ebp
c0016e14:	c3                   	ret    
c0016e15:	90                   	nop

c0016e16 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0016e16:	55                   	push   ebp
c0016e17:	57                   	push   edi
c0016e18:	56                   	push   esi
c0016e19:	53                   	push   ebx
c0016e1a:	83 ec 28             	sub    esp,0x28
c0016e1d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016e21:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0016e25:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c0016e29:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0016e2d:	c1 e6 08             	shl    esi,0x8
c0016e30:	01 c6                	add    esi,eax
c0016e32:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0016e36:	c1 e0 08             	shl    eax,0x8
c0016e39:	01 d0                	add    eax,edx
c0016e3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e43:	0f af c6             	imul   eax,esi
c0016e46:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0016e4d:	50                   	push   eax
c0016e4e:	e8 49 87 ff ff       	call   c000f59c <malloc>
c0016e53:	83 c4 10             	add    esp,0x10
c0016e56:	89 c7                	mov    edi,eax
c0016e58:	85 c0                	test   eax,eax
c0016e5a:	75 10                	jne    c0016e6c <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c0016e5c:	83 ec 0c             	sub    esp,0xc
c0016e5f:	68 15 ae 02 c0       	push   0xc002ae15
c0016e64:	e8 cc 2e 00 00       	call   c0019d35 <Krnl::panic(char const*)>
c0016e69:	83 c4 10             	add    esp,0x10
c0016e6c:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0016e6f:	ba 12 00 00 00       	mov    edx,0x12
c0016e74:	84 c0                	test   al,al
c0016e76:	74 11                	je     c0016e89 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c0016e78:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0016e7c:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c0016e80:	c1 fa 03             	sar    edx,0x3
c0016e83:	0f af d1             	imul   edx,ecx
c0016e86:	83 c2 12             	add    edx,0x12
c0016e89:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0016e8d:	74 04                	je     c0016e93 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c0016e8f:	85 f6                	test   esi,esi
c0016e91:	75 12                	jne    c0016ea5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c0016e93:	83 ec 0c             	sub    esp,0xc
c0016e96:	68 25 ae 02 c0       	push   0xc002ae25
c0016e9b:	e8 29 b7 ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c0016ea0:	e9 b8 00 00 00       	jmp    c0016f5d <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0016ea5:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c0016ea9:	80 f9 02             	cmp    cl,0x2
c0016eac:	0f 85 96 00 00 00    	jne    c0016f48 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c0016eb2:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0016eb7:	75 0e                	jne    c0016ec7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0016eb9:	84 c0                	test   al,al
c0016ebb:	75 0a                	jne    c0016ec7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0016ebd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0016ec0:	83 e8 18             	sub    eax,0x18
c0016ec3:	a8 f7                	test   al,0xf7
c0016ec5:	74 0a                	je     c0016ed1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c0016ec7:	83 ec 0c             	sub    esp,0xc
c0016eca:	68 3a ae 02 c0       	push   0xc002ae3a
c0016ecf:	eb 7f                	jmp    c0016f50 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c0016ed1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016ed9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016ee1:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0016ee5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016eed:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0016ef1:	75 0c                	jne    c0016eff <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0016ef3:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c0016ef8:	c1 e0 18             	shl    eax,0x18
c0016efb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016eff:	45                   	inc    ebp
c0016f00:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c0016f05:	c1 e1 10             	shl    ecx,0x10
c0016f08:	89 c8                	mov    eax,ecx
c0016f0a:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c0016f0f:	c1 e1 08             	shl    ecx,0x8
c0016f12:	09 c1                	or     ecx,eax
c0016f14:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c0016f18:	09 c1                	or     ecx,eax
c0016f1a:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c0016f1e:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c0016f22:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0016f26:	c1 f8 03             	sar    eax,0x3
c0016f29:	01 c2                	add    edx,eax
c0016f2b:	89 e8                	mov    eax,ebp
c0016f2d:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0016f31:	39 c6                	cmp    esi,eax
c0016f33:	7f b0                	jg     c0016ee5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c0016f35:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016f39:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016f3d:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0016f40:	7e 22                	jle    c0016f64 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c0016f42:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c0016f46:	eb 99                	jmp    c0016ee1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016f48:	50                   	push   eax
c0016f49:	50                   	push   eax
c0016f4a:	51                   	push   ecx
c0016f4b:	68 48 ae 02 c0       	push   0xc002ae48
c0016f50:	e8 74 b6 ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c0016f55:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016f58:	e8 4f 86 ff ff       	call   c000f5ac <free>
c0016f5d:	83 c4 10             	add    esp,0x10
c0016f60:	31 ff                	xor    edi,edi
c0016f62:	eb 0f                	jmp    c0016f73 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c0016f64:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016f68:	89 30                	mov    DWORD PTR [eax],esi
c0016f6a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016f6e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0016f71:	89 30                	mov    DWORD PTR [eax],esi
c0016f73:	83 c4 1c             	add    esp,0x1c
c0016f76:	89 f8                	mov    eax,edi
c0016f78:	5b                   	pop    ebx
c0016f79:	5e                   	pop    esi
c0016f7a:	5f                   	pop    edi
c0016f7b:	5d                   	pop    ebp
c0016f7c:	c3                   	ret    
c0016f7d:	90                   	nop

c0016f7e <Video::putTGA(int, int, unsigned char*, int)>:
c0016f7e:	55                   	push   ebp
c0016f7f:	57                   	push   edi
c0016f80:	56                   	push   esi
c0016f81:	53                   	push   ebx
c0016f82:	83 ec 28             	sub    esp,0x28
c0016f85:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016f89:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016f8d:	50                   	push   eax
c0016f8e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016f92:	50                   	push   eax
c0016f93:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016f97:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016f9b:	56                   	push   esi
c0016f9c:	e8 75 fe ff ff       	call   c0016e16 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0016fa1:	83 c4 20             	add    esp,0x20
c0016fa4:	85 c0                	test   eax,eax
c0016fa6:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016faa:	74 35                	je     c0016fe1 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016fac:	89 c7                	mov    edi,eax
c0016fae:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016fb2:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0016fb6:	39 d8                	cmp    eax,ebx
c0016fb8:	7e 27                	jle    c0016fe1 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016fba:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016fbe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016fc2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0016fc6:	39 e8                	cmp    eax,ebp
c0016fc8:	7e 14                	jle    c0016fde <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0016fca:	8b 06                	mov    eax,DWORD PTR [esi]
c0016fcc:	83 c7 04             	add    edi,0x4
c0016fcf:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0016fd2:	53                   	push   ebx
c0016fd3:	55                   	push   ebp
c0016fd4:	45                   	inc    ebp
c0016fd5:	56                   	push   esi
c0016fd6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016fd9:	83 c4 10             	add    esp,0x10
c0016fdc:	eb e0                	jmp    c0016fbe <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0016fde:	43                   	inc    ebx
c0016fdf:	eb cd                	jmp    c0016fae <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0016fe1:	83 c4 1c             	add    esp,0x1c
c0016fe4:	5b                   	pop    ebx
c0016fe5:	5e                   	pop    esi
c0016fe6:	5f                   	pop    edi
c0016fe7:	5d                   	pop    ebp
c0016fe8:	c3                   	ret    
c0016fe9:	90                   	nop

c0016fea <ACPI::close(int, int, void*)>:
c0016fea:	83 ec 1c             	sub    esp,0x1c
c0016fed:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0016ff5:	74 0a                	je     c0017001 <ACPI::close(int, int, void*)+0x17>
c0016ff7:	b8 00 00 00 00       	mov    eax,0x0
c0016ffc:	e9 8a 00 00 00       	jmp    c001708b <ACPI::close(int, int, void*)+0xa1>
c0017001:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017006:	75 27                	jne    c001702f <ACPI::close(int, int, void*)+0x45>
c0017008:	a1 a8 fd 02 c0       	mov    eax,ds:0xc002fda8
c001700d:	85 c0                	test   eax,eax
c001700f:	74 07                	je     c0017018 <ACPI::close(int, int, void*)+0x2e>
c0017011:	a1 a8 fd 02 c0       	mov    eax,ds:0xc002fda8
c0017016:	ff d0                	call   eax
c0017018:	83 ec 0c             	sub    esp,0xc
c001701b:	68 a4 ae 02 c0       	push   0xc002aea4
c0017020:	e8 10 2d 00 00       	call   c0019d35 <Krnl::panic(char const*)>
c0017025:	83 c4 10             	add    esp,0x10
c0017028:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001702d:	eb 5c                	jmp    c001708b <ACPI::close(int, int, void*)+0xa1>
c001702f:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0017034:	75 50                	jne    c0017086 <ACPI::close(int, int, void*)+0x9c>
c0017036:	a1 a4 fd 02 c0       	mov    eax,ds:0xc002fda4
c001703b:	85 c0                	test   eax,eax
c001703d:	74 07                	je     c0017046 <ACPI::close(int, int, void*)+0x5c>
c001703f:	a1 a4 fd 02 c0       	mov    eax,ds:0xc002fda4
c0017044:	ff d0                	call   eax
c0017046:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001704b:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017050:	83 e0 02             	and    eax,0x2
c0017053:	74 1c                	je     c0017071 <ACPI::close(int, int, void*)+0x87>
c0017055:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c001705c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017060:	89 c2                	mov    edx,eax
c0017062:	ec                   	in     al,dx
c0017063:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017067:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001706b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001706f:	eb da                	jmp    c001704b <ACPI::close(int, int, void*)+0x61>
c0017071:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0017078:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001707d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017081:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017085:	ee                   	out    dx,al
c0017086:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001708b:	83 c4 1c             	add    esp,0x1c
c001708e:	c3                   	ret    

c001708f <findRSDP()>:
c001708f:	83 ec 1c             	sub    esp,0x1c
c0017092:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0017097:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001709d:	83 e0 04             	and    eax,0x4
c00170a0:	84 c0                	test   al,al
c00170a2:	75 07                	jne    c00170ab <findRSDP()+0x1c>
c00170a4:	b8 00 00 00 00       	mov    eax,0x0
c00170a9:	eb 6a                	jmp    c0017115 <findRSDP()+0x86>
c00170ab:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c00170b0:	3d ff 07 00 00       	cmp    eax,0x7ff
c00170b5:	7f 1b                	jg     c00170d2 <findRSDP()+0x43>
c00170b7:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c00170bc:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00170c2:	83 e2 fb             	and    edx,0xfffffffb
c00170c5:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00170cb:	b8 00 00 00 00       	mov    eax,0x0
c00170d0:	eb 43                	jmp    c0017115 <findRSDP()+0x86>
c00170d2:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00170da:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00170e2:	77 2c                	ja     c0017110 <findRSDP()+0x81>
c00170e4:	83 ec 04             	sub    esp,0x4
c00170e7:	6a 08                	push   0x8
c00170e9:	68 3f af 02 c0       	push   0xc002af3f
c00170ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00170f2:	e8 55 95 fe ff       	call   c000064c <memcmp>
c00170f7:	83 c4 10             	add    esp,0x10
c00170fa:	85 c0                	test   eax,eax
c00170fc:	0f 94 c0             	sete   al
c00170ff:	84 c0                	test   al,al
c0017101:	74 06                	je     c0017109 <findRSDP()+0x7a>
c0017103:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017107:	eb 0c                	jmp    c0017115 <findRSDP()+0x86>
c0017109:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001710e:	eb ca                	jmp    c00170da <findRSDP()+0x4b>
c0017110:	b8 00 00 00 00       	mov    eax,0x0
c0017115:	83 c4 1c             	add    esp,0x1c
c0017118:	c3                   	ret    

c0017119 <loadACPITables(unsigned char*)>:
c0017119:	57                   	push   edi
c001711a:	56                   	push   esi
c001711b:	53                   	push   ebx
c001711c:	83 ec 60             	sub    esp,0x60
c001711f:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0017124:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001712a:	83 e0 04             	and    eax,0x4
c001712d:	84 c0                	test   al,al
c001712f:	0f 84 33 02 00 00    	je     c0017368 <loadACPITables(unsigned char*)+0x24f>
c0017135:	a0 c0 ff 02 c0       	mov    al,ds:0xc002ffc0
c001713a:	84 c0                	test   al,al
c001713c:	74 75                	je     c00171b3 <loadACPITables(unsigned char*)+0x9a>
c001713e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017142:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0017146:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001714a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001714d:	83 e8 24             	sub    eax,0x24
c0017150:	c1 e8 03             	shr    eax,0x3
c0017153:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017157:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001715f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017163:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0017167:	0f 8d b2 00 00 00    	jge    c001721f <loadACPITables(unsigned char*)+0x106>
c001716d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017171:	83 c0 24             	add    eax,0x24
c0017174:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017178:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001717c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017180:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017184:	c1 e0 03             	shl    eax,0x3
c0017187:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c001718b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001718f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017192:	8b 00                	mov    eax,DWORD PTR [eax]
c0017194:	89 c1                	mov    ecx,eax
c0017196:	a1 ac fd 02 c0       	mov    eax,ds:0xc002fdac
c001719b:	8d 50 01             	lea    edx,[eax+0x1]
c001719e:	89 15 ac fd 02 c0    	mov    DWORD PTR ds:0xc002fdac,edx
c00171a4:	89 ca                	mov    edx,ecx
c00171a6:	89 14 c5 c4 fd 02 c0 	mov    DWORD PTR [eax*8-0x3ffd023c],edx
c00171ad:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c00171b1:	eb ac                	jmp    c001715f <loadACPITables(unsigned char*)+0x46>
c00171b3:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00171b7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00171bb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00171bf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00171c2:	83 e8 24             	sub    eax,0x24
c00171c5:	c1 e8 02             	shr    eax,0x2
c00171c8:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00171cc:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00171d4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00171d8:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c00171dc:	7d 41                	jge    c001721f <loadACPITables(unsigned char*)+0x106>
c00171de:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00171e2:	83 c0 24             	add    eax,0x24
c00171e5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00171e9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00171ed:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00171f1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00171f5:	c1 e0 02             	shl    eax,0x2
c00171f8:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00171fc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017200:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017202:	a1 ac fd 02 c0       	mov    eax,ds:0xc002fdac
c0017207:	8d 50 01             	lea    edx,[eax+0x1]
c001720a:	89 15 ac fd 02 c0    	mov    DWORD PTR ds:0xc002fdac,edx
c0017210:	89 ca                	mov    edx,ecx
c0017212:	89 14 c5 c4 fd 02 c0 	mov    DWORD PTR [eax*8-0x3ffd023c],edx
c0017219:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c001721d:	eb b5                	jmp    c00171d4 <loadACPITables(unsigned char*)+0xbb>
c001721f:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0017227:	a1 ac fd 02 c0       	mov    eax,ds:0xc002fdac
c001722c:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0017230:	0f 8d 33 01 00 00    	jge    c0017369 <loadACPITables(unsigned char*)+0x250>
c0017236:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001723a:	8b 04 c5 c4 fd 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd023c]
c0017241:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017245:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017249:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001724d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017251:	25 ff 0f 00 00       	and    eax,0xfff
c0017256:	89 c6                	mov    esi,eax
c0017258:	8b 1d 70 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d870
c001725e:	83 ec 0c             	sub    esp,0xc
c0017261:	6a 01                	push   0x1
c0017263:	e8 67 9f ff ff       	call   c00111cf <Virt::allocateKernelVirtualPages(int)>
c0017268:	83 c4 10             	add    esp,0x10
c001726b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001726f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017275:	83 ec 0c             	sub    esp,0xc
c0017278:	6a 01                	push   0x1
c001727a:	6a 01                	push   0x1
c001727c:	50                   	push   eax
c001727d:	52                   	push   edx
c001727e:	53                   	push   ebx
c001727f:	e8 fe a9 ff ff       	call   c0011c82 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017284:	83 c4 20             	add    esp,0x20
c0017287:	09 f0                	or     eax,esi
c0017289:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001728d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017291:	c1 e0 03             	shl    eax,0x3
c0017294:	05 c0 fd 02 c0       	add    eax,0xc002fdc0
c0017299:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001729d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00172a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00172a5:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c00172ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00172b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00172b5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00172b9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00172bd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00172c1:	89 c6                	mov    esi,eax
c00172c3:	89 d7                	mov    edi,edx
c00172c5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00172c7:	89 c8                	mov    eax,ecx
c00172c9:	89 fa                	mov    edx,edi
c00172cb:	89 f3                	mov    ebx,esi
c00172cd:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00172d1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00172d5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00172d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00172dd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00172e0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00172e4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00172e8:	05 00 10 00 00       	add    eax,0x1000
c00172ed:	c1 e8 0c             	shr    eax,0xc
c00172f0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00172f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00172f8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00172fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017300:	25 ff 0f 00 00       	and    eax,0xfff
c0017305:	89 c6                	mov    esi,eax
c0017307:	8b 1d 70 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d870
c001730d:	83 ec 0c             	sub    esp,0xc
c0017310:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017314:	e8 b6 9e ff ff       	call   c00111cf <Virt::allocateKernelVirtualPages(int)>
c0017319:	83 c4 10             	add    esp,0x10
c001731c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017320:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017326:	83 ec 0c             	sub    esp,0xc
c0017329:	6a 01                	push   0x1
c001732b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001732f:	50                   	push   eax
c0017330:	52                   	push   edx
c0017331:	53                   	push   ebx
c0017332:	e8 4b a9 ff ff       	call   c0011c82 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017337:	83 c4 20             	add    esp,0x20
c001733a:	09 f0                	or     eax,esi
c001733c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017340:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017344:	83 ec 0c             	sub    esp,0xc
c0017347:	50                   	push   eax
c0017348:	e8 c8 a2 ff ff       	call   c0011615 <Virt::freeKernelVirtualPages(unsigned long)>
c001734d:	83 c4 10             	add    esp,0x10
c0017350:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017354:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017358:	89 14 c5 c4 fd 02 c0 	mov    DWORD PTR [eax*8-0x3ffd023c],edx
c001735f:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0017363:	e9 bf fe ff ff       	jmp    c0017227 <loadACPITables(unsigned char*)+0x10e>
c0017368:	90                   	nop
c0017369:	83 c4 60             	add    esp,0x60
c001736c:	5b                   	pop    ebx
c001736d:	5e                   	pop    esi
c001736e:	5f                   	pop    edi
c001736f:	c3                   	ret    

c0017370 <findRSDT(unsigned char*)>:
c0017370:	57                   	push   edi
c0017371:	56                   	push   esi
c0017372:	53                   	push   ebx
c0017373:	83 ec 50             	sub    esp,0x50
c0017376:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c001737b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017381:	83 e0 04             	and    eax,0x4
c0017384:	84 c0                	test   al,al
c0017386:	75 0a                	jne    c0017392 <findRSDT(unsigned char*)+0x22>
c0017388:	b8 00 00 00 00       	mov    eax,0x0
c001738d:	e9 21 01 00 00       	jmp    c00174b3 <findRSDT(unsigned char*)+0x143>
c0017392:	89 e0                	mov    eax,esp
c0017394:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017398:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001739c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00173a0:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c00173a8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00173ac:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00173b0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00173b4:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00173b8:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00173bc:	89 c6                	mov    esi,eax
c00173be:	89 d7                	mov    edi,edx
c00173c0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00173c2:	89 c8                	mov    eax,ecx
c00173c4:	89 fa                	mov    edx,edi
c00173c6:	89 f3                	mov    ebx,esi
c00173c8:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00173cc:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00173d0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00173d4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00173d8:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c00173dc:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c00173e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00173e8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00173ec:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00173f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00173f4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00173f8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00173fc:	25 ff 0f 00 00       	and    eax,0xfff
c0017401:	89 c6                	mov    esi,eax
c0017403:	8b 1d 70 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d870
c0017409:	83 ec 0c             	sub    esp,0xc
c001740c:	6a 02                	push   0x2
c001740e:	e8 bc 9d ff ff       	call   c00111cf <Virt::allocateKernelVirtualPages(int)>
c0017413:	83 c4 10             	add    esp,0x10
c0017416:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001741a:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017420:	83 ec 0c             	sub    esp,0xc
c0017423:	6a 01                	push   0x1
c0017425:	6a 02                	push   0x2
c0017427:	50                   	push   eax
c0017428:	52                   	push   edx
c0017429:	53                   	push   ebx
c001742a:	e8 53 a8 ff ff       	call   c0011c82 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001742f:	83 c4 20             	add    esp,0x20
c0017432:	09 f0                	or     eax,esi
c0017434:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017438:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001743c:	25 ff 0f 00 00       	and    eax,0xfff
c0017441:	89 c6                	mov    esi,eax
c0017443:	8b 1d 70 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d870
c0017449:	83 ec 0c             	sub    esp,0xc
c001744c:	6a 02                	push   0x2
c001744e:	e8 7c 9d ff ff       	call   c00111cf <Virt::allocateKernelVirtualPages(int)>
c0017453:	83 c4 10             	add    esp,0x10
c0017456:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001745a:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017460:	83 ec 0c             	sub    esp,0xc
c0017463:	6a 01                	push   0x1
c0017465:	6a 02                	push   0x2
c0017467:	50                   	push   eax
c0017468:	52                   	push   edx
c0017469:	53                   	push   ebx
c001746a:	e8 13 a8 ff ff       	call   c0011c82 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001746f:	83 c4 20             	add    esp,0x20
c0017472:	09 f0                	or     eax,esi
c0017474:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017478:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c001747d:	75 11                	jne    c0017490 <findRSDT(unsigned char*)+0x120>
c001747f:	c6 05 c0 ff 02 c0 00 	mov    BYTE PTR ds:0xc002ffc0,0x0
c0017486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001748a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001748e:	eb 1f                	jmp    c00174af <findRSDT(unsigned char*)+0x13f>
c0017490:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0017495:	75 11                	jne    c00174a8 <findRSDT(unsigned char*)+0x138>
c0017497:	c6 05 c0 ff 02 c0 01 	mov    BYTE PTR ds:0xc002ffc0,0x1
c001749e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00174a2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00174a6:	eb 07                	jmp    c00174af <findRSDT(unsigned char*)+0x13f>
c00174a8:	b8 00 00 00 00       	mov    eax,0x0
c00174ad:	eb 04                	jmp    c00174b3 <findRSDT(unsigned char*)+0x143>
c00174af:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00174b3:	83 c4 50             	add    esp,0x50
c00174b6:	5b                   	pop    ebx
c00174b7:	5e                   	pop    esi
c00174b8:	5f                   	pop    edi
c00174b9:	c3                   	ret    

c00174ba <findDataTable(unsigned char*, char*)>:
c00174ba:	83 ec 1c             	sub    esp,0x1c
c00174bd:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c00174c2:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00174c8:	83 e0 04             	and    eax,0x4
c00174cb:	84 c0                	test   al,al
c00174cd:	75 07                	jne    c00174d6 <findDataTable(unsigned char*, char*)+0x1c>
c00174cf:	b8 00 00 00 00       	mov    eax,0x0
c00174d4:	eb 52                	jmp    c0017528 <findDataTable(unsigned char*, char*)+0x6e>
c00174d6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00174de:	a1 ac fd 02 c0       	mov    eax,ds:0xc002fdac
c00174e3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00174e7:	7d 3a                	jge    c0017523 <findDataTable(unsigned char*, char*)+0x69>
c00174e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00174ed:	c1 e0 03             	shl    eax,0x3
c00174f0:	05 c0 fd 02 c0       	add    eax,0xc002fdc0
c00174f5:	83 ec 04             	sub    esp,0x4
c00174f8:	6a 04                	push   0x4
c00174fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00174fe:	50                   	push   eax
c00174ff:	e8 48 91 fe ff       	call   c000064c <memcmp>
c0017504:	83 c4 10             	add    esp,0x10
c0017507:	85 c0                	test   eax,eax
c0017509:	0f 94 c0             	sete   al
c001750c:	84 c0                	test   al,al
c001750e:	74 0d                	je     c001751d <findDataTable(unsigned char*, char*)+0x63>
c0017510:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017514:	8b 04 c5 c4 fd 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd023c]
c001751b:	eb 0b                	jmp    c0017528 <findDataTable(unsigned char*, char*)+0x6e>
c001751d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017521:	eb bb                	jmp    c00174de <findDataTable(unsigned char*, char*)+0x24>
c0017523:	b8 00 00 00 00       	mov    eax,0x0
c0017528:	83 c4 1c             	add    esp,0x1c
c001752b:	c3                   	ret    

c001752c <scanMADT()>:
c001752c:	53                   	push   ebx
c001752d:	83 ec 38             	sub    esp,0x38
c0017530:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0017535:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001753b:	83 e0 04             	and    eax,0x4
c001753e:	84 c0                	test   al,al
c0017540:	0f 84 4a 04 00 00    	je     c0017990 <scanMADT()+0x464>
c0017546:	e8 44 fb ff ff       	call   c001708f <findRSDP()>
c001754b:	a3 cc ff 02 c0       	mov    ds:0xc002ffcc,eax
c0017550:	a1 cc ff 02 c0       	mov    eax,ds:0xc002ffcc
c0017555:	85 c0                	test   eax,eax
c0017557:	75 19                	jne    c0017572 <scanMADT()+0x46>
c0017559:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c001755e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017564:	83 e2 fb             	and    edx,0xfffffffb
c0017567:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001756d:	e9 22 04 00 00       	jmp    c0017994 <scanMADT()+0x468>
c0017572:	a1 cc ff 02 c0       	mov    eax,ds:0xc002ffcc
c0017577:	83 ec 0c             	sub    esp,0xc
c001757a:	50                   	push   eax
c001757b:	e8 f0 fd ff ff       	call   c0017370 <findRSDT(unsigned char*)>
c0017580:	83 c4 10             	add    esp,0x10
c0017583:	a3 c8 ff 02 c0       	mov    ds:0xc002ffc8,eax
c0017588:	a1 c8 ff 02 c0       	mov    eax,ds:0xc002ffc8
c001758d:	85 c0                	test   eax,eax
c001758f:	75 19                	jne    c00175aa <scanMADT()+0x7e>
c0017591:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0017596:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001759c:	83 e2 fb             	and    edx,0xfffffffb
c001759f:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00175a5:	e9 ea 03 00 00       	jmp    c0017994 <scanMADT()+0x468>
c00175aa:	a1 c8 ff 02 c0       	mov    eax,ds:0xc002ffc8
c00175af:	83 ec 0c             	sub    esp,0xc
c00175b2:	50                   	push   eax
c00175b3:	e8 61 fb ff ff       	call   c0017119 <loadACPITables(unsigned char*)>
c00175b8:	83 c4 10             	add    esp,0x10
c00175bb:	a1 c8 ff 02 c0       	mov    eax,ds:0xc002ffc8
c00175c0:	83 ec 08             	sub    esp,0x8
c00175c3:	68 48 af 02 c0       	push   0xc002af48
c00175c8:	50                   	push   eax
c00175c9:	e8 ec fe ff ff       	call   c00174ba <findDataTable(unsigned char*, char*)>
c00175ce:	83 c4 10             	add    esp,0x10
c00175d1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00175d5:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00175da:	75 19                	jne    c00175f5 <scanMADT()+0xc9>
c00175dc:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c00175e1:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00175e7:	83 e2 fe             	and    edx,0xfffffffe
c00175ea:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00175f0:	e9 9f 03 00 00       	jmp    c0017994 <scanMADT()+0x468>
c00175f5:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00175fd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017601:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017604:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017608:	0f 87 86 03 00 00    	ja     c0017994 <scanMADT()+0x468>
c001760e:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017616:	0f 87 78 03 00 00    	ja     c0017994 <scanMADT()+0x468>
c001761c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017620:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017624:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017628:	8d 50 01             	lea    edx,[eax+0x1]
c001762b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001762f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017633:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017637:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001763b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001763f:	8d 50 01             	lea    edx,[eax+0x1]
c0017642:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017646:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001764a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001764e:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017652:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017657:	0f 86 36 03 00 00    	jbe    c0017993 <scanMADT()+0x467>
c001765d:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017662:	75 57                	jne    c00176bb <scanMADT()+0x18f>
c0017664:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017668:	8d 50 01             	lea    edx,[eax+0x1]
c001766b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001766f:	8a 15 c0 01 03 c0    	mov    dl,BYTE PTR ds:0xc00301c0
c0017675:	0f b6 d2             	movzx  edx,dl
c0017678:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001767c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017680:	88 82 00 02 03 c0    	mov    BYTE PTR [edx-0x3ffcfe00],al
c0017686:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001768a:	8d 50 01             	lea    edx,[eax+0x1]
c001768d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017691:	8a 15 c0 01 03 c0    	mov    dl,BYTE PTR ds:0xc00301c0
c0017697:	8d 4a 01             	lea    ecx,[edx+0x1]
c001769a:	88 0d c0 01 03 c0    	mov    BYTE PTR ds:0xc00301c0,cl
c00176a0:	0f b6 d2             	movzx  edx,dl
c00176a3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00176a7:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00176ab:	88 82 e0 01 03 c0    	mov    BYTE PTR [edx-0x3ffcfe20],al
c00176b1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00176b6:	e9 c1 02 00 00       	jmp    c001797c <scanMADT()+0x450>
c00176bb:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c00176c0:	0f 85 14 01 00 00    	jne    c00177da <scanMADT()+0x2ae>
c00176c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176ca:	8d 50 01             	lea    edx,[eax+0x1]
c00176cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00176d1:	8a 15 80 00 03 c0    	mov    dl,BYTE PTR ds:0xc0030080
c00176d7:	0f b6 d2             	movzx  edx,dl
c00176da:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00176de:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00176e2:	88 82 a0 00 03 c0    	mov    BYTE PTR [edx-0x3ffcff60],al
c00176e8:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c00176ec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00176f0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176f4:	01 d0                	add    eax,edx
c00176f6:	83 c0 2c             	add    eax,0x2c
c00176f9:	8a 00                	mov    al,BYTE PTR [eax]
c00176fb:	0f b6 d0             	movzx  edx,al
c00176fe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017702:	8d 48 01             	lea    ecx,[eax+0x1]
c0017705:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017709:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001770d:	0f b6 c0             	movzx  eax,al
c0017710:	c1 e0 08             	shl    eax,0x8
c0017713:	89 d1                	mov    ecx,edx
c0017715:	09 c1                	or     ecx,eax
c0017717:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001771b:	8d 50 02             	lea    edx,[eax+0x2]
c001771e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017722:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017726:	0f b6 c0             	movzx  eax,al
c0017729:	c1 e0 10             	shl    eax,0x10
c001772c:	09 c1                	or     ecx,eax
c001772e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017732:	8d 50 03             	lea    edx,[eax+0x3]
c0017735:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017739:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001773d:	0f b6 c0             	movzx  eax,al
c0017740:	c1 e0 18             	shl    eax,0x18
c0017743:	09 c1                	or     ecx,eax
c0017745:	89 ca                	mov    edx,ecx
c0017747:	a0 80 00 03 c0       	mov    al,ds:0xc0030080
c001774c:	0f b6 c0             	movzx  eax,al
c001774f:	89 14 85 c0 00 03 c0 	mov    DWORD PTR [eax*4-0x3ffcff40],edx
c0017756:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001775b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001775f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017763:	01 d0                	add    eax,edx
c0017765:	83 c0 2c             	add    eax,0x2c
c0017768:	8a 00                	mov    al,BYTE PTR [eax]
c001776a:	0f b6 d0             	movzx  edx,al
c001776d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017771:	8d 48 01             	lea    ecx,[eax+0x1]
c0017774:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017778:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001777c:	0f b6 c0             	movzx  eax,al
c001777f:	c1 e0 08             	shl    eax,0x8
c0017782:	89 d1                	mov    ecx,edx
c0017784:	09 c1                	or     ecx,eax
c0017786:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001778a:	8d 50 02             	lea    edx,[eax+0x2]
c001778d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017791:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017795:	0f b6 c0             	movzx  eax,al
c0017798:	c1 e0 10             	shl    eax,0x10
c001779b:	09 c1                	or     ecx,eax
c001779d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177a1:	8d 50 03             	lea    edx,[eax+0x3]
c00177a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00177a8:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00177ac:	0f b6 c0             	movzx  eax,al
c00177af:	c1 e0 18             	shl    eax,0x18
c00177b2:	09 c1                	or     ecx,eax
c00177b4:	89 ca                	mov    edx,ecx
c00177b6:	a0 80 00 03 c0       	mov    al,ds:0xc0030080
c00177bb:	0f b6 c0             	movzx  eax,al
c00177be:	89 14 85 40 01 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfec0],edx
c00177c5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00177ca:	a0 80 00 03 c0       	mov    al,ds:0xc0030080
c00177cf:	40                   	inc    eax
c00177d0:	a2 80 00 03 c0       	mov    ds:0xc0030080,al
c00177d5:	e9 a2 01 00 00       	jmp    c001797c <scanMADT()+0x450>
c00177da:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00177df:	0f 85 e9 00 00 00    	jne    c00178ce <scanMADT()+0x3a2>
c00177e5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177e9:	8d 50 01             	lea    edx,[eax+0x1]
c00177ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00177f0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00177f4:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00177f8:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c00177fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017800:	8d 50 01             	lea    edx,[eax+0x1]
c0017803:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017807:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001780b:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001780f:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017813:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017817:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001781b:	01 d0                	add    eax,edx
c001781d:	83 c0 2c             	add    eax,0x2c
c0017820:	8a 00                	mov    al,BYTE PTR [eax]
c0017822:	0f b6 d0             	movzx  edx,al
c0017825:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017829:	8d 48 01             	lea    ecx,[eax+0x1]
c001782c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017830:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017834:	0f b6 c0             	movzx  eax,al
c0017837:	c1 e0 08             	shl    eax,0x8
c001783a:	89 d1                	mov    ecx,edx
c001783c:	09 c1                	or     ecx,eax
c001783e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017842:	8d 50 02             	lea    edx,[eax+0x2]
c0017845:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017849:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001784d:	0f b6 c0             	movzx  eax,al
c0017850:	c1 e0 10             	shl    eax,0x10
c0017853:	09 c1                	or     ecx,eax
c0017855:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017859:	8d 50 03             	lea    edx,[eax+0x3]
c001785c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017860:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017864:	0f b6 c0             	movzx  eax,al
c0017867:	c1 e0 18             	shl    eax,0x18
c001786a:	09 c8                	or     eax,ecx
c001786c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017870:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017875:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017879:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001787d:	01 d0                	add    eax,edx
c001787f:	83 c0 2c             	add    eax,0x2c
c0017882:	8a 00                	mov    al,BYTE PTR [eax]
c0017884:	0f b6 c0             	movzx  eax,al
c0017887:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001788b:	8d 4a 01             	lea    ecx,[edx+0x1]
c001788e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017892:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017896:	0f b6 d2             	movzx  edx,dl
c0017899:	c1 e2 08             	shl    edx,0x8
c001789c:	09 d0                	or     eax,edx
c001789e:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00178a3:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00178a8:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00178ad:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00178b1:	88 90 60 c9 02 c0    	mov    BYTE PTR [eax-0x3ffd36a0],dl
c00178b7:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00178bc:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00178c1:	66 89 84 12 60 00 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcffa0],ax
c00178c9:	e9 ae 00 00 00       	jmp    c001797c <scanMADT()+0x450>
c00178ce:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00178d3:	0f 85 97 00 00 00    	jne    c0017970 <scanMADT()+0x444>
c00178d9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178dd:	8d 50 01             	lea    edx,[eax+0x1]
c00178e0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00178e4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00178e8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00178ec:	0f b6 c0             	movzx  eax,al
c00178ef:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00178f3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00178f7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178fb:	01 d0                	add    eax,edx
c00178fd:	83 c0 2c             	add    eax,0x2c
c0017900:	8a 00                	mov    al,BYTE PTR [eax]
c0017902:	0f b6 d0             	movzx  edx,al
c0017905:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017909:	8d 48 01             	lea    ecx,[eax+0x1]
c001790c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017910:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017914:	0f b6 c0             	movzx  eax,al
c0017917:	c1 e0 08             	shl    eax,0x8
c001791a:	09 d0                	or     eax,edx
c001791c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017920:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017925:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017929:	8d 50 01             	lea    edx,[eax+0x1]
c001792c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017930:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017934:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017938:	0f b6 c0             	movzx  eax,al
c001793b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001793f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017943:	c1 e0 08             	shl    eax,0x8
c0017946:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001794a:	89 c1                	mov    ecx,eax
c001794c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017950:	c1 e0 18             	shl    eax,0x18
c0017953:	89 c3                	mov    ebx,eax
c0017955:	a1 d0 ff 02 c0       	mov    eax,ds:0xc002ffd0
c001795a:	8d 50 01             	lea    edx,[eax+0x1]
c001795d:	89 15 d0 ff 02 c0    	mov    DWORD PTR ds:0xc002ffd0,edx
c0017963:	09 d9                	or     ecx,ebx
c0017965:	89 ca                	mov    edx,ecx
c0017967:	89 14 85 e0 ff 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0020],edx
c001796e:	eb 0c                	jmp    c001797c <scanMADT()+0x450>
c0017970:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017975:	75 05                	jne    c001797c <scanMADT()+0x450>
c0017977:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001797c:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017981:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017985:	01 d0                	add    eax,edx
c0017987:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001798b:	e9 6d fc ff ff       	jmp    c00175fd <scanMADT()+0xd1>
c0017990:	90                   	nop
c0017991:	eb 01                	jmp    c0017994 <scanMADT()+0x468>
c0017993:	90                   	nop
c0017994:	83 c4 38             	add    esp,0x38
c0017997:	5b                   	pop    ebx
c0017998:	c3                   	ret    
c0017999:	90                   	nop

c001799a <ACPI::ACPI()>:
c001799a:	83 ec 0c             	sub    esp,0xc
c001799d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179a1:	83 ec 08             	sub    esp,0x8
c00179a4:	68 4d af 02 c0       	push   0xc002af4d
c00179a9:	50                   	push   eax
c00179aa:	e8 57 c2 ff ff       	call   c0013c06 <Device::Device(char const*)>
c00179af:	83 c4 10             	add    esp,0x10
c00179b2:	ba a8 b0 02 c0       	mov    edx,0xc002b0a8
c00179b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179bb:	89 10                	mov    DWORD PTR [eax],edx
c00179bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179c1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00179c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179cc:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00179d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179da:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c00179e4:	e8 43 fb ff ff       	call   c001752c <scanMADT()>
c00179e9:	90                   	nop
c00179ea:	83 c4 0c             	add    esp,0xc
c00179ed:	c3                   	ret    

c00179ee <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00179ee:	83 ec 2c             	sub    esp,0x2c
c00179f1:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00179f5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00179f9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00179fd:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017a01:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017a06:	88 d0                	mov    al,dl
c0017a08:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017a0c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017a11:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017a19:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a1d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017a23:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017a27:	0f 8d 97 00 00 00    	jge    c0017ac4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017a2d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a31:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017a35:	83 c2 2a             	add    edx,0x2a
c0017a38:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017a3c:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017a41:	75 78                	jne    c0017abb <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017a43:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a47:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017a4b:	83 c2 2a             	add    edx,0x2a
c0017a4e:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017a52:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017a56:	75 63                	jne    c0017abb <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017a58:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017a5d:	74 3a                	je     c0017a99 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017a5f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a63:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017a67:	83 c2 2a             	add    edx,0x2a
c0017a6a:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017a6e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017a72:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a75:	39 c2                	cmp    edx,eax
c0017a77:	74 10                	je     c0017a89 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017a79:	83 ec 0c             	sub    esp,0xc
c0017a7c:	68 c8 ae 02 c0       	push   0xc002aec8
c0017a81:	e8 af 22 00 00       	call   c0019d35 <Krnl::panic(char const*)>
c0017a86:	83 c4 10             	add    esp,0x10
c0017a89:	83 ec 0c             	sub    esp,0xc
c0017a8c:	68 52 af 02 c0       	push   0xc002af52
c0017a91:	e8 9f 22 00 00       	call   c0019d35 <Krnl::panic(char const*)>
c0017a96:	83 c4 10             	add    esp,0x10
c0017a99:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017a9d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017aa1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017aa5:	83 c2 2a             	add    edx,0x2a
c0017aa8:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017aac:	8b 02                	mov    eax,DWORD PTR [edx]
c0017aae:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017ab1:	89 01                	mov    DWORD PTR [ecx],eax
c0017ab3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017ab6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017abb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017abf:	e9 55 ff ff ff       	jmp    c0017a19 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017ac4:	90                   	nop
c0017ac5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ac9:	83 c4 2c             	add    esp,0x2c
c0017acc:	c2 04 00             	ret    0x4
c0017acf:	90                   	nop

c0017ad0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017ad0:	83 ec 1c             	sub    esp,0x1c
c0017ad3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ad7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017adb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017adf:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017ae4:	88 c8                	mov    al,cl
c0017ae6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017aea:	88 d0                	mov    al,dl
c0017aec:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017af0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017af4:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017afa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017afe:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017b01:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017b05:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017b09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b0d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017b13:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b17:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017b1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017b1e:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017b23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b27:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017b2d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017b31:	8d 48 01             	lea    ecx,[eax+0x1]
c0017b34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b38:	83 c2 2a             	add    edx,0x2a
c0017b3b:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017b3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b43:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017b49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b4d:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017b50:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017b54:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017b58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b5c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017b62:	8d 50 01             	lea    edx,[eax+0x1]
c0017b65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b69:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017b6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b73:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017b79:	3d 00 02 00 00       	cmp    eax,0x200
c0017b7e:	75 10                	jne    c0017b90 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017b80:	83 ec 0c             	sub    esp,0xc
c0017b83:	68 61 af 02 c0       	push   0xc002af61
c0017b88:	e8 a8 21 00 00       	call   c0019d35 <Krnl::panic(char const*)>
c0017b8d:	83 c4 10             	add    esp,0x10
c0017b90:	90                   	nop
c0017b91:	83 c4 1c             	add    esp,0x1c
c0017b94:	c3                   	ret    
c0017b95:	90                   	nop

c0017b96 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017b96:	b8 00 00 00 00       	mov    eax,0x0
c0017b9b:	c3                   	ret    

c0017b9c <ACPI::detectPCI()>:
c0017b9c:	53                   	push   ebx
c0017b9d:	83 ec 28             	sub    esp,0x28
c0017ba0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017ba5:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0017baa:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0017baf:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017bb5:	83 e0 04             	and    eax,0x4
c0017bb8:	84 c0                	test   al,al
c0017bba:	74 2b                	je     c0017be7 <ACPI::detectPCI()+0x4b>
c0017bbc:	a1 c8 ff 02 c0       	mov    eax,ds:0xc002ffc8
c0017bc1:	83 ec 08             	sub    esp,0x8
c0017bc4:	68 7e af 02 c0       	push   0xc002af7e
c0017bc9:	50                   	push   eax
c0017bca:	e8 eb f8 ff ff       	call   c00174ba <findDataTable(unsigned char*, char*)>
c0017bcf:	83 c4 10             	add    esp,0x10
c0017bd2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017bd6:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017bdb:	74 0a                	je     c0017be7 <ACPI::detectPCI()+0x4b>
c0017bdd:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017be2:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017be7:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c0017bef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017bf3:	8a 00                	mov    al,BYTE PTR [eax]
c0017bf5:	3c 01                	cmp    al,0x1
c0017bf7:	75 0c                	jne    c0017c05 <ACPI::detectPCI()+0x69>
c0017bf9:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017bfe:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017c03:	eb 26                	jmp    c0017c2b <ACPI::detectPCI()+0x8f>
c0017c05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c09:	8a 00                	mov    al,BYTE PTR [eax]
c0017c0b:	3c 02                	cmp    al,0x2
c0017c0d:	75 1c                	jne    c0017c2b <ACPI::detectPCI()+0x8f>
c0017c0f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017c14:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017c19:	74 10                	je     c0017c2b <ACPI::detectPCI()+0x8f>
c0017c1b:	83 ec 0c             	sub    esp,0xc
c0017c1e:	68 f8 ae 02 c0       	push   0xc002aef8
c0017c23:	e8 0d 21 00 00       	call   c0019d35 <Krnl::panic(char const*)>
c0017c28:	83 c4 10             	add    esp,0x10
c0017c2b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017c2f:	83 f0 01             	xor    eax,0x1
c0017c32:	84 c0                	test   al,al
c0017c34:	74 3f                	je     c0017c75 <ACPI::detectPCI()+0xd9>
c0017c36:	e8 15 85 fe ff       	call   c0000150 <manualPCIProbe>
c0017c3b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017c3f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017c44:	75 0c                	jne    c0017c52 <ACPI::detectPCI()+0xb6>
c0017c46:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017c4b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017c50:	eb 23                	jmp    c0017c75 <ACPI::detectPCI()+0xd9>
c0017c52:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c0017c57:	75 1c                	jne    c0017c75 <ACPI::detectPCI()+0xd9>
c0017c59:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017c5e:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017c63:	74 10                	je     c0017c75 <ACPI::detectPCI()+0xd9>
c0017c65:	83 ec 0c             	sub    esp,0xc
c0017c68:	68 f8 ae 02 c0       	push   0xc002aef8
c0017c6d:	e8 c3 20 00 00       	call   c0019d35 <Krnl::panic(char const*)>
c0017c72:	83 c4 10             	add    esp,0x10
c0017c75:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017c7a:	74 7e                	je     c0017cfa <ACPI::detectPCI()+0x15e>
c0017c7c:	83 ec 0c             	sub    esp,0xc
c0017c7f:	68 83 af 02 c0       	push   0xc002af83
c0017c84:	e8 6d 79 ff ff       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c0017c89:	83 c4 10             	add    esp,0x10
c0017c8c:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c0017c94:	83 ec 0c             	sub    esp,0xc
c0017c97:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017c9b:	e8 fc 78 ff ff       	call   c000f59c <malloc>
c0017ca0:	83 c4 10             	add    esp,0x10
c0017ca3:	89 c3                	mov    ebx,eax
c0017ca5:	83 ec 0c             	sub    esp,0xc
c0017ca8:	53                   	push   ebx
c0017ca9:	e8 ac a5 00 00       	call   c002225a <PCI::PCI()>
c0017cae:	83 c4 10             	add    esp,0x10
c0017cb1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017cb5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017cb9:	83 ec 08             	sub    esp,0x8
c0017cbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017cc0:	50                   	push   eax
c0017cc1:	e8 3c bd ff ff       	call   c0013a02 <Device::addChild(Device*)>
c0017cc6:	83 c4 10             	add    esp,0x10
c0017cc9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017ccd:	8b 00                	mov    eax,DWORD PTR [eax]
c0017ccf:	83 c0 08             	add    eax,0x8
c0017cd2:	8b 00                	mov    eax,DWORD PTR [eax]
c0017cd4:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017cd9:	74 07                	je     c0017ce2 <ACPI::detectPCI()+0x146>
c0017cdb:	ba 01 00 00 00       	mov    edx,0x1
c0017ce0:	eb 05                	jmp    c0017ce7 <ACPI::detectPCI()+0x14b>
c0017ce2:	ba 02 00 00 00       	mov    edx,0x2
c0017ce7:	6a 00                	push   0x0
c0017ce9:	6a 00                	push   0x0
c0017ceb:	52                   	push   edx
c0017cec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017cf0:	ff d0                	call   eax
c0017cf2:	83 c4 10             	add    esp,0x10
c0017cf5:	e9 9e 00 00 00       	jmp    c0017d98 <ACPI::detectPCI()+0x1fc>
c0017cfa:	83 ec 0c             	sub    esp,0xc
c0017cfd:	68 9b af 02 c0       	push   0xc002af9b
c0017d02:	e8 c2 a8 ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c0017d07:	83 c4 10             	add    esp,0x10
c0017d0a:	83 ec 0c             	sub    esp,0xc
c0017d0d:	68 a6 af 02 c0       	push   0xc002afa6
c0017d12:	e8 df 78 ff ff       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c0017d17:	83 c4 10             	add    esp,0x10
c0017d1a:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c0017d21:	83 ec 0c             	sub    esp,0xc
c0017d24:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017d28:	e8 6f 78 ff ff       	call   c000f59c <malloc>
c0017d2d:	83 c4 10             	add    esp,0x10
c0017d30:	89 c3                	mov    ebx,eax
c0017d32:	83 ec 0c             	sub    esp,0xc
c0017d35:	53                   	push   ebx
c0017d36:	e8 89 b0 00 00       	call   c0022dc4 <IDE::IDE()>
c0017d3b:	83 c4 10             	add    esp,0x10
c0017d3e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0017d42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d46:	83 ec 08             	sub    esp,0x8
c0017d49:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017d4d:	50                   	push   eax
c0017d4e:	e8 af bc ff ff       	call   c0013a02 <Device::addChild(Device*)>
c0017d53:	83 c4 10             	add    esp,0x10
c0017d56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d5a:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0017d64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d68:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0017d71:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d75:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0017d7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d82:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d84:	83 c0 08             	add    eax,0x8
c0017d87:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d89:	6a 00                	push   0x0
c0017d8b:	6a 00                	push   0x0
c0017d8d:	6a 00                	push   0x0
c0017d8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017d93:	ff d0                	call   eax
c0017d95:	83 c4 10             	add    esp,0x10
c0017d98:	90                   	nop
c0017d99:	83 c4 28             	add    esp,0x28
c0017d9c:	5b                   	pop    ebx
c0017d9d:	c3                   	ret    

c0017d9e <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017d9e:	83 ec 1c             	sub    esp,0x1c
c0017da1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017da5:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017da8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017dac:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0017db1:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017db6:	83 ec 08             	sub    esp,0x8
c0017db9:	52                   	push   edx
c0017dba:	50                   	push   eax
c0017dbb:	e8 f0 6d ff ff       	call   c000ebb0 <Computer::readCMOS(unsigned char)>
c0017dc0:	83 c4 10             	add    esp,0x10
c0017dc3:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017dc7:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0017dcc:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017dd1:	83 ec 04             	sub    esp,0x4
c0017dd4:	6a 01                	push   0x1
c0017dd6:	52                   	push   edx
c0017dd7:	50                   	push   eax
c0017dd8:	e8 05 6f ff ff       	call   c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017ddd:	83 c4 10             	add    esp,0x10
c0017de0:	90                   	nop
c0017de1:	83 c4 1c             	add    esp,0x1c
c0017de4:	c3                   	ret    
c0017de5:	90                   	nop

c0017de6 <ACPI::sleep()>:
c0017de6:	83 ec 0c             	sub    esp,0xc
c0017de9:	a1 a0 fd 02 c0       	mov    eax,ds:0xc002fda0
c0017dee:	85 c0                	test   eax,eax
c0017df0:	74 07                	je     c0017df9 <ACPI::sleep()+0x13>
c0017df2:	a1 a0 fd 02 c0       	mov    eax,ds:0xc002fda0
c0017df7:	ff d0                	call   eax
c0017df9:	90                   	nop
c0017dfa:	83 c4 0c             	add    esp,0xc
c0017dfd:	c3                   	ret    

c0017dfe <ACPI::open(int, int, void*)>:
c0017dfe:	57                   	push   edi
c0017dff:	56                   	push   esi
c0017e00:	53                   	push   ebx
c0017e01:	81 ec 60 01 00 00    	sub    esp,0x160
c0017e07:	83 ec 0c             	sub    esp,0xc
c0017e0a:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c0017e11:	e8 86 fd ff ff       	call   c0017b9c <ACPI::detectPCI()>
c0017e16:	83 c4 10             	add    esp,0x10
c0017e19:	83 ec 0c             	sub    esp,0xc
c0017e1c:	68 20 af 02 c0       	push   0xc002af20
c0017e21:	e8 d0 77 ff ff       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c0017e26:	83 c4 10             	add    esp,0x10
c0017e29:	83 ec 0c             	sub    esp,0xc
c0017e2c:	68 bb af 02 c0       	push   0xc002afbb
c0017e31:	e8 52 46 00 00       	call   c001c488 <Thr::loadKernelSymbolTable(char const*)>
c0017e36:	83 c4 10             	add    esp,0x10
c0017e39:	83 ec 0c             	sub    esp,0xc
c0017e3c:	68 d9 af 02 c0       	push   0xc002afd9
c0017e41:	e8 b0 77 ff ff       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c0017e46:	83 c4 10             	add    esp,0x10
c0017e49:	83 ec 04             	sub    esp,0x4
c0017e4c:	6a 0c                	push   0xc
c0017e4e:	68 f4 af 02 c0       	push   0xc002aff4
c0017e53:	68 05 b0 02 c0       	push   0xc002b005
c0017e58:	e8 94 2c 00 00       	call   c001aaf1 <Reg::readIntWithDefault(char*, char*, int)>
c0017e5d:	83 c4 10             	add    esp,0x10
c0017e60:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0017e67:	83 ec 0c             	sub    esp,0xc
c0017e6a:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c0017e71:	e8 63 95 ff ff       	call   c00113d9 <Virt::setupPageSwapping(int)>
c0017e76:	83 c4 10             	add    esp,0x10
c0017e79:	83 ec 0c             	sub    esp,0xc
c0017e7c:	68 f5 9c 02 c0       	push   0xc0029cf5
c0017e81:	e8 70 77 ff ff       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c0017e86:	83 c4 10             	add    esp,0x10
c0017e89:	8b 1d 08 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d708
c0017e8f:	83 ec 08             	sub    esp,0x8
c0017e92:	6a 01                	push   0x1
c0017e94:	68 0c b0 02 c0       	push   0xc002b00c
c0017e99:	e8 61 50 00 00       	call   c001ceff <Thr::loadDLL(char const*, bool)>
c0017e9e:	83 c4 10             	add    esp,0x10
c0017ea1:	83 ec 08             	sub    esp,0x8
c0017ea4:	53                   	push   ebx
c0017ea5:	50                   	push   eax
c0017ea6:	e8 82 52 00 00       	call   c001d12d <Thr::executeDLL(unsigned long, void*)>
c0017eab:	83 c4 10             	add    esp,0x10
c0017eae:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0017eb5:	83 ec 08             	sub    esp,0x8
c0017eb8:	6a 12                	push   0x12
c0017eba:	50                   	push   eax
c0017ebb:	e8 c6 be ff ff       	call   c0013d86 <getDevicesOfType(DeviceType)>
c0017ec0:	83 c4 0c             	add    esp,0xc
c0017ec3:	83 ec 0c             	sub    esp,0xc
c0017ec6:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017ecd:	50                   	push   eax
c0017ece:	e8 81 09 01 00       	call   c0028854 <LinkedList<Device>::isEmpty()>
c0017ed3:	83 c4 10             	add    esp,0x10
c0017ed6:	83 f0 01             	xor    eax,0x1
c0017ed9:	84 c0                	test   al,al
c0017edb:	0f 84 43 01 00 00    	je     c0018024 <ACPI::open(int, int, void*)+0x226>
c0017ee1:	83 ec 0c             	sub    esp,0xc
c0017ee4:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017eeb:	50                   	push   eax
c0017eec:	e8 7f 09 01 00       	call   c0028870 <LinkedList<Device>::getFirstElement()>
c0017ef1:	83 c4 10             	add    esp,0x10
c0017ef4:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0017efb:	83 ec 0c             	sub    esp,0xc
c0017efe:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017f05:	50                   	push   eax
c0017f06:	e8 6d 09 01 00       	call   c0028878 <LinkedList<Device>::removeFirst()>
c0017f0b:	83 c4 10             	add    esp,0x10
c0017f0e:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c0017f15:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0017f1c:	8b 94 24 54 01 00 00 	mov    edx,DWORD PTR [esp+0x154]
c0017f23:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017f27:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0017f2d:	ba 09 00 00 00       	mov    edx,0x9
c0017f32:	fc                   	cld    
c0017f33:	89 c7                	mov    edi,eax
c0017f35:	89 de                	mov    esi,ebx
c0017f37:	89 d1                	mov    ecx,edx
c0017f39:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0017f3b:	83 ec 08             	sub    esp,0x8
c0017f3e:	8d 44 24 38          	lea    eax,[esp+0x38]
c0017f42:	50                   	push   eax
c0017f43:	83 ec 24             	sub    esp,0x24
c0017f46:	89 e0                	mov    eax,esp
c0017f48:	89 c3                	mov    ebx,eax
c0017f4a:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017f4e:	ba 09 00 00 00       	mov    edx,0x9
c0017f53:	89 df                	mov    edi,ebx
c0017f55:	89 c6                	mov    esi,eax
c0017f57:	89 d1                	mov    ecx,edx
c0017f59:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0017f5b:	e8 d8 a7 00 00       	call   c0022738 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0017f60:	83 c4 30             	add    esp,0x30
c0017f63:	89 84 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],eax
c0017f6a:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0017f72:	0f 84 4b ff ff ff    	je     c0017ec3 <ACPI::open(int, int, void*)+0xc5>
c0017f78:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0017f83:	83 ec 0c             	sub    esp,0xc
c0017f86:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0017f8d:	e8 0a 76 ff ff       	call   c000f59c <malloc>
c0017f92:	83 c4 10             	add    esp,0x10
c0017f95:	89 c3                	mov    ebx,eax
c0017f97:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0017f9c:	83 ec 04             	sub    esp,0x4
c0017f9f:	50                   	push   eax
c0017fa0:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0017fa7:	53                   	push   ebx
c0017fa8:	e8 7b ab ff ff       	call   c0012b28 <File::File(char const*, Process*)>
c0017fad:	83 c4 10             	add    esp,0x10
c0017fb0:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0017fb7:	83 ec 0c             	sub    esp,0xc
c0017fba:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0017fc1:	e8 34 ae ff ff       	call   c0012dfa <File::exists()>
c0017fc6:	83 c4 10             	add    esp,0x10
c0017fc9:	84 c0                	test   al,al
c0017fcb:	74 27                	je     c0017ff4 <ACPI::open(int, int, void*)+0x1f6>
c0017fcd:	83 ec 08             	sub    esp,0x8
c0017fd0:	6a 01                	push   0x1
c0017fd2:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0017fd9:	e8 21 4f 00 00       	call   c001ceff <Thr::loadDLL(char const*, bool)>
c0017fde:	83 c4 10             	add    esp,0x10
c0017fe1:	83 ec 08             	sub    esp,0x8
c0017fe4:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0017feb:	50                   	push   eax
c0017fec:	e8 3c 51 00 00       	call   c001d12d <Thr::executeDLL(unsigned long, void*)>
c0017ff1:	83 c4 10             	add    esp,0x10
c0017ff4:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0017ffc:	0f 84 c1 fe ff ff    	je     c0017ec3 <ACPI::open(int, int, void*)+0xc5>
c0018002:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0018009:	8b 00                	mov    eax,DWORD PTR [eax]
c001800b:	83 c0 08             	add    eax,0x8
c001800e:	8b 00                	mov    eax,DWORD PTR [eax]
c0018010:	83 ec 0c             	sub    esp,0xc
c0018013:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001801a:	ff d0                	call   eax
c001801c:	83 c4 10             	add    esp,0x10
c001801f:	e9 9f fe ff ff       	jmp    c0017ec3 <ACPI::open(int, int, void*)+0xc5>
c0018024:	83 ec 0c             	sub    esp,0xc
c0018027:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001802e:	50                   	push   eax
c001802f:	e8 1e 08 01 00       	call   c0028852 <LinkedList<Device>::~LinkedList()>
c0018034:	83 c4 10             	add    esp,0x10
c0018037:	8b 1d 08 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d708
c001803d:	83 ec 08             	sub    esp,0x8
c0018040:	6a 01                	push   0x1
c0018042:	68 27 b0 02 c0       	push   0xc002b027
c0018047:	e8 b3 4e 00 00       	call   c001ceff <Thr::loadDLL(char const*, bool)>
c001804c:	83 c4 10             	add    esp,0x10
c001804f:	83 ec 08             	sub    esp,0x8
c0018052:	53                   	push   ebx
c0018053:	50                   	push   eax
c0018054:	e8 d4 50 00 00       	call   c001d12d <Thr::executeDLL(unsigned long, void*)>
c0018059:	83 c4 10             	add    esp,0x10
c001805c:	8b 1d 08 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d708
c0018062:	83 ec 08             	sub    esp,0x8
c0018065:	6a 01                	push   0x1
c0018067:	68 44 b0 02 c0       	push   0xc002b044
c001806c:	e8 8e 4e 00 00       	call   c001ceff <Thr::loadDLL(char const*, bool)>
c0018071:	83 c4 10             	add    esp,0x10
c0018074:	83 ec 08             	sub    esp,0x8
c0018077:	53                   	push   ebx
c0018078:	50                   	push   eax
c0018079:	e8 af 50 00 00       	call   c001d12d <Thr::executeDLL(unsigned long, void*)>
c001807e:	83 c4 10             	add    esp,0x10
c0018081:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0018086:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001808c:	83 e0 04             	and    eax,0x4
c001808f:	84 c0                	test   al,al
c0018091:	0f 84 0d 01 00 00    	je     c00181a4 <ACPI::open(int, int, void*)+0x3a6>
c0018097:	83 ec 0c             	sub    esp,0xc
c001809a:	68 61 b0 02 c0       	push   0xc002b061
c001809f:	e8 52 75 ff ff       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c00180a4:	83 c4 10             	add    esp,0x10
c00180a7:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c00180b2:	83 ec 0c             	sub    esp,0xc
c00180b5:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c00180bc:	e8 db 74 ff ff       	call   c000f59c <malloc>
c00180c1:	83 c4 10             	add    esp,0x10
c00180c4:	89 c3                	mov    ebx,eax
c00180c6:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c00180cb:	83 ec 04             	sub    esp,0x4
c00180ce:	50                   	push   eax
c00180cf:	68 7e b0 02 c0       	push   0xc002b07e
c00180d4:	53                   	push   ebx
c00180d5:	e8 4e aa ff ff       	call   c0012b28 <File::File(char const*, Process*)>
c00180da:	83 c4 10             	add    esp,0x10
c00180dd:	89 9c 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],ebx
c00180e4:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00180ec:	74 1a                	je     c0018108 <ACPI::open(int, int, void*)+0x30a>
c00180ee:	83 ec 0c             	sub    esp,0xc
c00180f1:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00180f8:	e8 fd ac ff ff       	call   c0012dfa <File::exists()>
c00180fd:	83 c4 10             	add    esp,0x10
c0018100:	84 c0                	test   al,al
c0018102:	74 04                	je     c0018108 <ACPI::open(int, int, void*)+0x30a>
c0018104:	b0 01                	mov    al,0x1
c0018106:	eb 02                	jmp    c001810a <ACPI::open(int, int, void*)+0x30c>
c0018108:	b0 00                	mov    al,0x0
c001810a:	84 c0                	test   al,al
c001810c:	74 25                	je     c0018133 <ACPI::open(int, int, void*)+0x335>
c001810e:	83 ec 08             	sub    esp,0x8
c0018111:	6a 01                	push   0x1
c0018113:	68 7e b0 02 c0       	push   0xc002b07e
c0018118:	e8 e2 4d 00 00       	call   c001ceff <Thr::loadDLL(char const*, bool)>
c001811d:	83 c4 10             	add    esp,0x10
c0018120:	83 ec 08             	sub    esp,0x8
c0018123:	ff b4 24 78 01 00 00 	push   DWORD PTR [esp+0x178]
c001812a:	50                   	push   eax
c001812b:	e8 fd 4f 00 00       	call   c001d12d <Thr::executeDLL(unsigned long, void*)>
c0018130:	83 c4 10             	add    esp,0x10
c0018133:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001813b:	74 27                	je     c0018164 <ACPI::open(int, int, void*)+0x366>
c001813d:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018145:	74 1d                	je     c0018164 <ACPI::open(int, int, void*)+0x366>
c0018147:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c001814e:	8b 00                	mov    eax,DWORD PTR [eax]
c0018150:	83 c0 08             	add    eax,0x8
c0018153:	8b 00                	mov    eax,DWORD PTR [eax]
c0018155:	83 ec 0c             	sub    esp,0xc
c0018158:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001815f:	ff d0                	call   eax
c0018161:	83 c4 10             	add    esp,0x10
c0018164:	a1 c8 ff 02 c0       	mov    eax,ds:0xc002ffc8
c0018169:	83 ec 08             	sub    esp,0x8
c001816c:	68 9b b0 02 c0       	push   0xc002b09b
c0018171:	50                   	push   eax
c0018172:	e8 43 f3 ff ff       	call   c00174ba <findDataTable(unsigned char*, char*)>
c0018177:	83 c4 10             	add    esp,0x10
c001817a:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c0018181:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c0018189:	74 19                	je     c00181a4 <ACPI::open(int, int, void*)+0x3a6>
c001818b:	83 ec 08             	sub    esp,0x8
c001818e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0018195:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c001819c:	e8 fd fb ff ff       	call   c0017d9e <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00181a1:	83 c4 10             	add    esp,0x10
c00181a4:	b8 00 00 00 00       	mov    eax,0x0
c00181a9:	81 c4 60 01 00 00    	add    esp,0x160
c00181af:	5b                   	pop    ebx
c00181b0:	5e                   	pop    esi
c00181b1:	5f                   	pop    edi
c00181b2:	c3                   	ret    
c00181b3:	90                   	nop

c00181b4 <CPU::close(int, int, void*)>:
c00181b4:	31 c0                	xor    eax,eax
c00181b6:	c3                   	ret    
c00181b7:	90                   	nop

c00181b8 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00181b8:	55                   	push   ebp
c00181b9:	57                   	push   edi
c00181ba:	56                   	push   esi
c00181bb:	53                   	push   ebx
c00181bc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00181c0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00181c4:	89 ce                	mov    esi,ecx
c00181c6:	89 d5                	mov    ebp,edx
c00181c8:	80 f9 04             	cmp    cl,0x4
c00181cb:	75 28                	jne    c00181f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00181cd:	8d 42 f9             	lea    eax,[edx-0x7]
c00181d0:	3c 03                	cmp    al,0x3
c00181d2:	0f 86 63 01 00 00    	jbe    c001833b <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00181d8:	80 fa 03             	cmp    dl,0x3
c00181db:	0f 84 5a 01 00 00    	je     c001833b <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00181e1:	8d 7a f2             	lea    edi,[edx-0xe]
c00181e4:	b8 30 cb 02 c0       	mov    eax,0xc002cb30
c00181e9:	89 fb                	mov    ebx,edi
c00181eb:	80 fb 01             	cmp    bl,0x1
c00181ee:	77 4e                	ja     c001823e <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00181f0:	e9 52 01 00 00       	jmp    c0018347 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00181f5:	80 f9 05             	cmp    cl,0x5
c00181f8:	75 4d                	jne    c0018247 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00181fa:	b8 40 cb 02 c0       	mov    eax,0xc002cb40
c00181ff:	80 fa 03             	cmp    dl,0x3
c0018202:	0f 86 3f 01 00 00    	jbe    c0018347 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018208:	8d 7a fa             	lea    edi,[edx-0x6]
c001820b:	b8 50 cb 02 c0       	mov    eax,0xc002cb50
c0018210:	89 fb                	mov    ebx,edi
c0018212:	80 fb 01             	cmp    bl,0x1
c0018215:	0f 86 2c 01 00 00    	jbe    c0018347 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001821b:	b8 60 cb 02 c0       	mov    eax,0xc002cb60
c0018220:	80 fa 08             	cmp    dl,0x8
c0018223:	0f 84 1e 01 00 00    	je     c0018347 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018229:	89 d7                	mov    edi,edx
c001822b:	b8 70 cb 02 c0       	mov    eax,0xc002cb70
c0018230:	83 e7 fb             	and    edi,0xfffffffb
c0018233:	89 fb                	mov    ebx,edi
c0018235:	80 fb 09             	cmp    bl,0x9
c0018238:	0f 84 09 01 00 00    	je     c0018347 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001823e:	31 c0                	xor    eax,eax
c0018240:	89 eb                	mov    ebx,ebp
c0018242:	0f b6 fb             	movzx  edi,bl
c0018245:	eb 30                	jmp    c0018277 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018247:	31 c0                	xor    eax,eax
c0018249:	80 f9 06             	cmp    cl,0x6
c001824c:	75 f2                	jne    c0018240 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001824e:	80 fa 0a             	cmp    dl,0xa
c0018251:	77 ed                	ja     c0018240 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018253:	bf de 05 00 00       	mov    edi,0x5de
c0018258:	0f a3 d7             	bt     edi,edx
c001825b:	73 e3                	jae    c0018240 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001825d:	b8 80 cb 02 c0       	mov    eax,0xc002cb80
c0018262:	e9 e0 00 00 00       	jmp    c0018347 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018267:	39 c7                	cmp    edi,eax
c0018269:	0f 84 d3 00 00 00    	je     c0018342 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001826f:	40                   	inc    eax
c0018270:	3d d0 00 00 00       	cmp    eax,0xd0
c0018275:	74 09                	je     c0018280 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018277:	89 f3                	mov    ebx,esi
c0018279:	80 fb 0f             	cmp    bl,0xf
c001827c:	75 f1                	jne    c001826f <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c001827e:	eb e7                	jmp    c0018267 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018280:	80 f9 10             	cmp    cl,0x10
c0018283:	75 14                	jne    c0018299 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018285:	8d 42 fc             	lea    eax,[edx-0x4]
c0018288:	83 e0 fb             	and    eax,0xfffffffb
c001828b:	3c 02                	cmp    al,0x2
c001828d:	76 34                	jbe    c00182c3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c001828f:	b8 21 b2 02 c0       	mov    eax,0xc002b221
c0018294:	80 fa 02             	cmp    dl,0x2
c0018297:	eb 24                	jmp    c00182bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018299:	80 f9 11             	cmp    cl,0x11
c001829c:	75 13                	jne    c00182b1 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c001829e:	b8 21 b2 02 c0       	mov    eax,0xc002b221
c00182a3:	80 fa 03             	cmp    dl,0x3
c00182a6:	0f 85 9b 00 00 00    	jne    c0018347 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182ac:	e9 91 00 00 00       	jmp    c0018342 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00182b1:	80 f9 12             	cmp    cl,0x12
c00182b4:	75 14                	jne    c00182ca <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00182b6:	b8 21 b2 02 c0       	mov    eax,0xc002b221
c00182bb:	fe ca                	dec    dl
c00182bd:	0f 85 84 00 00 00    	jne    c0018347 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182c3:	b8 a0 cb 02 c0       	mov    eax,0xc002cba0
c00182c8:	eb 7d                	jmp    c0018347 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182ca:	80 f9 14             	cmp    cl,0x14
c00182cd:	75 12                	jne    c00182e1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00182cf:	4a                   	dec    edx
c00182d0:	b8 21 b2 02 c0       	mov    eax,0xc002b221
c00182d5:	80 fa 01             	cmp    dl,0x1
c00182d8:	77 6d                	ja     c0018347 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182da:	b8 b0 cb 02 c0       	mov    eax,0xc002cbb0
c00182df:	eb 66                	jmp    c0018347 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182e1:	80 f9 15             	cmp    cl,0x15
c00182e4:	75 31                	jne    c0018317 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00182e6:	b8 c0 cb 02 c0       	mov    eax,0xc002cbc0
c00182eb:	80 fa 01             	cmp    dl,0x1
c00182ee:	74 57                	je     c0018347 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182f0:	b8 21 b2 02 c0       	mov    eax,0xc002b221
c00182f5:	80 fa 13             	cmp    dl,0x13
c00182f8:	76 0c                	jbe    c0018306 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00182fa:	80 fa 30             	cmp    dl,0x30
c00182fd:	75 48                	jne    c0018347 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182ff:	b8 e0 cb 02 c0       	mov    eax,0xc002cbe0
c0018304:	eb 41                	jmp    c0018347 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018306:	b9 04 00 09 00       	mov    ecx,0x90004
c001830b:	0f a3 d1             	bt     ecx,edx
c001830e:	73 37                	jae    c0018347 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018310:	b8 d0 cb 02 c0       	mov    eax,0xc002cbd0
c0018315:	eb 30                	jmp    c0018347 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018317:	b8 21 b2 02 c0       	mov    eax,0xc002b221
c001831c:	80 f9 16             	cmp    cl,0x16
c001831f:	75 26                	jne    c0018347 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018321:	b8 f0 cb 02 c0       	mov    eax,0xc002cbf0
c0018326:	84 d2                	test   dl,dl
c0018328:	74 1d                	je     c0018347 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001832a:	b8 21 b2 02 c0       	mov    eax,0xc002b221
c001832f:	80 fa 30             	cmp    dl,0x30
c0018332:	75 13                	jne    c0018347 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018334:	b8 00 cc 02 c0       	mov    eax,0xc002cc00
c0018339:	eb 0c                	jmp    c0018347 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001833b:	b8 20 cb 02 c0       	mov    eax,0xc002cb20
c0018340:	eb 05                	jmp    c0018347 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018342:	b8 90 cb 02 c0       	mov    eax,0xc002cb90
c0018347:	5b                   	pop    ebx
c0018348:	5e                   	pop    esi
c0018349:	5f                   	pop    edi
c001834a:	5d                   	pop    ebp
c001834b:	c3                   	ret    

c001834c <CPU::lookupIntelName(unsigned char, unsigned char)>:
c001834c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018350:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018354:	80 f9 04             	cmp    cl,0x4
c0018357:	75 6b                	jne    c00183c4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018359:	b8 80 c9 02 c0       	mov    eax,0xc002c980
c001835e:	80 fa 01             	cmp    dl,0x1
c0018361:	0f 86 92 02 00 00    	jbe    c00185f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018367:	b8 90 c9 02 c0       	mov    eax,0xc002c990
c001836c:	80 fa 02             	cmp    dl,0x2
c001836f:	0f 84 84 02 00 00    	je     c00185f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018375:	b8 a0 c9 02 c0       	mov    eax,0xc002c9a0
c001837a:	80 fa 03             	cmp    dl,0x3
c001837d:	0f 84 76 02 00 00    	je     c00185f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018383:	b8 b0 c9 02 c0       	mov    eax,0xc002c9b0
c0018388:	80 fa 04             	cmp    dl,0x4
c001838b:	0f 84 68 02 00 00    	je     c00185f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018391:	b8 c0 c9 02 c0       	mov    eax,0xc002c9c0
c0018396:	80 fa 05             	cmp    dl,0x5
c0018399:	0f 84 5a 02 00 00    	je     c00185f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001839f:	b8 a0 c9 02 c0       	mov    eax,0xc002c9a0
c00183a4:	80 fa 07             	cmp    dl,0x7
c00183a7:	0f 84 4c 02 00 00    	je     c00185f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183ad:	83 ea 08             	sub    edx,0x8
c00183b0:	b8 21 b2 02 c0       	mov    eax,0xc002b221
c00183b5:	80 fa 01             	cmp    dl,0x1
c00183b8:	0f 87 3b 02 00 00    	ja     c00185f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183be:	b8 d0 c9 02 c0       	mov    eax,0xc002c9d0
c00183c3:	c3                   	ret    
c00183c4:	80 f9 05             	cmp    cl,0x5
c00183c7:	75 45                	jne    c001840e <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00183c9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00183cc:	b8 e0 c9 02 c0       	mov    eax,0xc002c9e0
c00183d1:	80 f9 02             	cmp    cl,0x2
c00183d4:	0f 86 1f 02 00 00    	jbe    c00185f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183da:	80 fa 04             	cmp    dl,0x4
c00183dd:	0f 84 f3 01 00 00    	je     c00185d6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00183e3:	80 fa 07             	cmp    dl,0x7
c00183e6:	0f 84 0d 02 00 00    	je     c00185f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183ec:	b8 f0 c9 02 c0       	mov    eax,0xc002c9f0
c00183f1:	80 fa 08             	cmp    dl,0x8
c00183f4:	0f 84 ff 01 00 00    	je     c00185f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183fa:	b8 21 b2 02 c0       	mov    eax,0xc002b221
c00183ff:	80 fa 09             	cmp    dl,0x9
c0018402:	0f 85 f1 01 00 00    	jne    c00185f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018408:	b8 00 ca 02 c0       	mov    eax,0xc002ca00
c001840d:	c3                   	ret    
c001840e:	80 f9 06             	cmp    cl,0x6
c0018411:	0f 85 85 01 00 00    	jne    c001859c <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018417:	b8 10 ca 02 c0       	mov    eax,0xc002ca10
c001841c:	80 fa 01             	cmp    dl,0x1
c001841f:	0f 84 d4 01 00 00    	je     c00185f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018425:	8d 42 fb             	lea    eax,[edx-0x5]
c0018428:	3c 01                	cmp    al,0x1
c001842a:	0f 86 ac 01 00 00    	jbe    c00185dc <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018430:	80 fa 03             	cmp    dl,0x3
c0018433:	0f 84 a3 01 00 00    	je     c00185dc <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018439:	8d 4a f9             	lea    ecx,[edx-0x7]
c001843c:	b8 30 ca 02 c0       	mov    eax,0xc002ca30
c0018441:	80 f9 01             	cmp    cl,0x1
c0018444:	0f 86 af 01 00 00    	jbe    c00185f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001844a:	80 fa 09             	cmp    dl,0x9
c001844d:	0f 84 8f 01 00 00    	je     c00185e2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018453:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018456:	80 f9 01             	cmp    cl,0x1
c0018459:	0f 86 9a 01 00 00    	jbe    c00185f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001845f:	b8 40 ca 02 c0       	mov    eax,0xc002ca40
c0018464:	80 fa 0d             	cmp    dl,0xd
c0018467:	0f 84 8c 01 00 00    	je     c00185f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001846d:	b8 50 ca 02 c0       	mov    eax,0xc002ca50
c0018472:	80 fa 0e             	cmp    dl,0xe
c0018475:	0f 84 7e 01 00 00    	je     c00185f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001847b:	b8 60 ca 02 c0       	mov    eax,0xc002ca60
c0018480:	80 fa 0f             	cmp    dl,0xf
c0018483:	0f 84 70 01 00 00    	je     c00185f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018489:	b8 40 ca 02 c0       	mov    eax,0xc002ca40
c001848e:	80 fa 15             	cmp    dl,0x15
c0018491:	0f 84 62 01 00 00    	je     c00185f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018497:	8d 4a ea             	lea    ecx,[edx-0x16]
c001849a:	b8 60 ca 02 c0       	mov    eax,0xc002ca60
c001849f:	80 f9 01             	cmp    cl,0x1
c00184a2:	0f 86 51 01 00 00    	jbe    c00185f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184a8:	80 fa 1a             	cmp    dl,0x1a
c00184ab:	0f 84 37 01 00 00    	je     c00185e8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c00184b1:	80 fa 1c             	cmp    dl,0x1c
c00184b4:	0f 84 34 01 00 00    	je     c00185ee <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c00184ba:	80 fa 1d             	cmp    dl,0x1d
c00184bd:	0f 84 36 01 00 00    	je     c00185f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184c3:	b8 90 ca 02 c0       	mov    eax,0xc002ca90
c00184c8:	80 fa 25             	cmp    dl,0x25
c00184cb:	0f 84 28 01 00 00    	je     c00185f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184d1:	8d 4a da             	lea    ecx,[edx-0x26]
c00184d4:	b8 80 ca 02 c0       	mov    eax,0xc002ca80
c00184d9:	80 f9 01             	cmp    cl,0x1
c00184dc:	0f 86 17 01 00 00    	jbe    c00185f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184e2:	b8 a0 ca 02 c0       	mov    eax,0xc002caa0
c00184e7:	80 fa 2a             	cmp    dl,0x2a
c00184ea:	0f 84 09 01 00 00    	je     c00185f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184f0:	b8 90 ca 02 c0       	mov    eax,0xc002ca90
c00184f5:	80 fa 2c             	cmp    dl,0x2c
c00184f8:	0f 84 fb 00 00 00    	je     c00185f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184fe:	b8 a0 ca 02 c0       	mov    eax,0xc002caa0
c0018503:	80 fa 2d             	cmp    dl,0x2d
c0018506:	0f 84 ed 00 00 00    	je     c00185f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001850c:	b8 70 ca 02 c0       	mov    eax,0xc002ca70
c0018511:	80 fa 2e             	cmp    dl,0x2e
c0018514:	0f 84 df 00 00 00    	je     c00185f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001851a:	b8 90 ca 02 c0       	mov    eax,0xc002ca90
c001851f:	80 fa 2f             	cmp    dl,0x2f
c0018522:	0f 84 d1 00 00 00    	je     c00185f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018528:	8d 4a cb             	lea    ecx,[edx-0x35]
c001852b:	b8 80 ca 02 c0       	mov    eax,0xc002ca80
c0018530:	80 f9 01             	cmp    cl,0x1
c0018533:	0f 86 c0 00 00 00    	jbe    c00185f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018539:	b8 b0 ca 02 c0       	mov    eax,0xc002cab0
c001853e:	80 fa 37             	cmp    dl,0x37
c0018541:	0f 84 b2 00 00 00    	je     c00185f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018547:	b8 c0 ca 02 c0       	mov    eax,0xc002cac0
c001854c:	80 fa 3a             	cmp    dl,0x3a
c001854f:	0f 84 a4 00 00 00    	je     c00185f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018555:	b8 d0 ca 02 c0       	mov    eax,0xc002cad0
c001855a:	80 fa 3c             	cmp    dl,0x3c
c001855d:	0f 84 96 00 00 00    	je     c00185f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018563:	b8 e0 ca 02 c0       	mov    eax,0xc002cae0
c0018568:	80 fa 3d             	cmp    dl,0x3d
c001856b:	0f 84 88 00 00 00    	je     c00185f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018571:	b8 c0 ca 02 c0       	mov    eax,0xc002cac0
c0018576:	80 fa 3e             	cmp    dl,0x3e
c0018579:	74 7e                	je     c00185f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001857b:	8d 42 bb             	lea    eax,[edx-0x45]
c001857e:	3c 01                	cmp    al,0x1
c0018580:	76 72                	jbe    c00185f4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018582:	80 fa 3f             	cmp    dl,0x3f
c0018585:	74 6d                	je     c00185f4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018587:	80 fa 4a             	cmp    dl,0x4a
c001858a:	74 0a                	je     c0018596 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c001858c:	b8 21 b2 02 c0       	mov    eax,0xc002b221
c0018591:	80 fa 4d             	cmp    dl,0x4d
c0018594:	75 63                	jne    c00185f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018596:	b8 b0 ca 02 c0       	mov    eax,0xc002cab0
c001859b:	c3                   	ret    
c001859c:	b8 21 b2 02 c0       	mov    eax,0xc002b221
c00185a1:	80 f9 0b             	cmp    cl,0xb
c00185a4:	75 0a                	jne    c00185b0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c00185a6:	fe ca                	dec    dl
c00185a8:	75 4f                	jne    c00185f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185aa:	b8 f0 ca 02 c0       	mov    eax,0xc002caf0
c00185af:	c3                   	ret    
c00185b0:	80 f9 0f             	cmp    cl,0xf
c00185b3:	75 44                	jne    c00185f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185b5:	b8 00 cb 02 c0       	mov    eax,0xc002cb00
c00185ba:	80 fa 02             	cmp    dl,0x2
c00185bd:	76 3a                	jbe    c00185f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185bf:	8d 42 fd             	lea    eax,[edx-0x3]
c00185c2:	3c 01                	cmp    al,0x1
c00185c4:	76 0a                	jbe    c00185d0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c00185c6:	b8 21 b2 02 c0       	mov    eax,0xc002b221
c00185cb:	80 fa 06             	cmp    dl,0x6
c00185ce:	75 29                	jne    c00185f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185d0:	b8 10 cb 02 c0       	mov    eax,0xc002cb10
c00185d5:	c3                   	ret    
c00185d6:	b8 f0 c9 02 c0       	mov    eax,0xc002c9f0
c00185db:	c3                   	ret    
c00185dc:	b8 20 ca 02 c0       	mov    eax,0xc002ca20
c00185e1:	c3                   	ret    
c00185e2:	b8 40 ca 02 c0       	mov    eax,0xc002ca40
c00185e7:	c3                   	ret    
c00185e8:	b8 70 ca 02 c0       	mov    eax,0xc002ca70
c00185ed:	c3                   	ret    
c00185ee:	b8 80 ca 02 c0       	mov    eax,0xc002ca80
c00185f3:	c3                   	ret    
c00185f4:	b8 d0 ca 02 c0       	mov    eax,0xc002cad0
c00185f9:	c3                   	ret    

c00185fa <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c00185fa:	60                   	pusha  
c00185fb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00185ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018603:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018607:	9c                   	pushf  
c0018608:	fa                   	cli    
c0018609:	0f 09                	wbinvd 
c001860b:	0f 30                	wrmsr  
c001860d:	9d                   	popf   
c001860e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018612:	89 02                	mov    DWORD PTR [edx],eax
c0018614:	61                   	popa   
c0018615:	c3                   	ret    

c0018616 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018616:	60                   	pusha  
c0018617:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001861b:	9c                   	pushf  
c001861c:	fa                   	cli    
c001861d:	0f 09                	wbinvd 
c001861f:	31 c0                	xor    eax,eax
c0018621:	31 d2                	xor    edx,edx
c0018623:	0f 32                	rdmsr  
c0018625:	9d                   	popf   
c0018626:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001862a:	89 02                	mov    DWORD PTR [edx],eax
c001862c:	61                   	popa   
c001862d:	c3                   	ret    

c001862e <CPU::AMD_K6_writeback(int, int, int)>:
c001862e:	56                   	push   esi
c001862f:	53                   	push   ebx
c0018630:	83 ec 10             	sub    esp,0x10
c0018633:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018637:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001863c:	75 5d                	jne    c001869b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001863e:	83 f8 08             	cmp    eax,0x8
c0018641:	75 09                	jne    c001864c <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018643:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018648:	7e 13                	jle    c001865d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001864a:	eb 30                	jmp    c001867c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001864c:	83 f8 06             	cmp    eax,0x6
c001864f:	7c 4a                	jl     c001869b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018651:	83 f8 07             	cmp    eax,0x7
c0018654:	7e 07                	jle    c001865d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018656:	83 f8 09             	cmp    eax,0x9
c0018659:	74 21                	je     c001867c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001865b:	eb 3e                	jmp    c001869b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001865d:	89 e6                	mov    esi,esp
c001865f:	8b 1d 48 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d748
c0018665:	56                   	push   esi
c0018666:	c1 eb 15             	shr    ebx,0x15
c0018669:	68 82 00 00 c0       	push   0xc0000082
c001866e:	83 e3 7e             	and    ebx,0x7e
c0018671:	e8 a0 ff ff ff       	call   c0018616 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018676:	56                   	push   esi
c0018677:	6a 00                	push   0x0
c0018679:	53                   	push   ebx
c001867a:	eb 12                	jmp    c001868e <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001867c:	89 e3                	mov    ebx,esp
c001867e:	53                   	push   ebx
c001867f:	68 82 00 00 c0       	push   0xc0000082
c0018684:	e8 8d ff ff ff       	call   c0018616 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018689:	53                   	push   ebx
c001868a:	6a 00                	push   0x0
c001868c:	6a 00                	push   0x0
c001868e:	68 82 00 00 c0       	push   0xc0000082
c0018693:	e8 62 ff ff ff       	call   c00185fa <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018698:	83 c4 18             	add    esp,0x18
c001869b:	83 c4 10             	add    esp,0x10
c001869e:	5b                   	pop    ebx
c001869f:	5e                   	pop    esi
c00186a0:	c3                   	ret    
c00186a1:	90                   	nop

c00186a2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00186a2:	55                   	push   ebp
c00186a3:	57                   	push   edi
c00186a4:	56                   	push   esi
c00186a5:	53                   	push   ebx
c00186a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00186aa:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00186ae:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00186b2:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00186b6:	39 05 20 cc 02 c0    	cmp    DWORD PTR ds:0xc002cc20,eax
c00186bc:	75 23                	jne    c00186e1 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00186be:	a1 2c 02 03 c0       	mov    eax,ds:0xc003022c
c00186c3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00186c7:	89 06                	mov    DWORD PTR [esi],eax
c00186c9:	a1 28 02 03 c0       	mov    eax,ds:0xc0030228
c00186ce:	89 07                	mov    DWORD PTR [edi],eax
c00186d0:	a1 24 02 03 c0       	mov    eax,ds:0xc0030224
c00186d5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00186d8:	a1 20 02 03 c0       	mov    eax,ds:0xc0030220
c00186dd:	89 02                	mov    DWORD PTR [edx],eax
c00186df:	eb 3f                	jmp    c0018720 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00186e1:	31 c9                	xor    ecx,ecx
c00186e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00186e7:	0f a2                	cpuid  
c00186e9:	89 06                	mov    DWORD PTR [esi],eax
c00186eb:	89 1f                	mov    DWORD PTR [edi],ebx
c00186ed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00186f1:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00186f4:	89 10                	mov    DWORD PTR [eax],edx
c00186f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00186fa:	a3 20 cc 02 c0       	mov    ds:0xc002cc20,eax
c00186ff:	8b 06                	mov    eax,DWORD PTR [esi]
c0018701:	a3 2c 02 03 c0       	mov    ds:0xc003022c,eax
c0018706:	8b 07                	mov    eax,DWORD PTR [edi]
c0018708:	a3 28 02 03 c0       	mov    ds:0xc0030228,eax
c001870d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018710:	a3 24 02 03 c0       	mov    ds:0xc0030224,eax
c0018715:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018719:	8b 00                	mov    eax,DWORD PTR [eax]
c001871b:	a3 20 02 03 c0       	mov    ds:0xc0030220,eax
c0018720:	5b                   	pop    ebx
c0018721:	5e                   	pop    esi
c0018722:	5f                   	pop    edi
c0018723:	5d                   	pop    ebp
c0018724:	c3                   	ret    
c0018725:	90                   	nop

c0018726 <CPU::cpuidCheckEDX(unsigned int)>:
c0018726:	83 ec 10             	sub    esp,0x10
c0018729:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001872d:	50                   	push   eax
c001872e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018732:	50                   	push   eax
c0018733:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018737:	50                   	push   eax
c0018738:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001873c:	50                   	push   eax
c001873d:	6a 01                	push   0x1
c001873f:	e8 5e ff ff ff       	call   c00186a2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018744:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018748:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001874c:	0f 95 c0             	setne  al
c001874f:	83 c4 24             	add    esp,0x24
c0018752:	c3                   	ret    
c0018753:	90                   	nop

c0018754 <CPU::cpuidCheckECX(unsigned int)>:
c0018754:	83 ec 10             	sub    esp,0x10
c0018757:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001875b:	50                   	push   eax
c001875c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018760:	50                   	push   eax
c0018761:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018765:	50                   	push   eax
c0018766:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001876a:	50                   	push   eax
c001876b:	6a 01                	push   0x1
c001876d:	e8 30 ff ff ff       	call   c00186a2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018772:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018776:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001877a:	0f 95 c0             	setne  al
c001877d:	83 c4 24             	add    esp,0x24
c0018780:	c3                   	ret    
c0018781:	90                   	nop

c0018782 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018782:	83 ec 10             	sub    esp,0x10
c0018785:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018789:	50                   	push   eax
c001878a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001878e:	50                   	push   eax
c001878f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018793:	50                   	push   eax
c0018794:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018798:	50                   	push   eax
c0018799:	6a 07                	push   0x7
c001879b:	e8 02 ff ff ff       	call   c00186a2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00187a0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00187a4:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00187a8:	0f 95 c0             	setne  al
c00187ab:	83 c4 24             	add    esp,0x24
c00187ae:	c3                   	ret    
c00187af:	90                   	nop

c00187b0 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00187b0:	83 ec 10             	sub    esp,0x10
c00187b3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00187b7:	50                   	push   eax
c00187b8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00187bc:	50                   	push   eax
c00187bd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00187c1:	50                   	push   eax
c00187c2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00187c6:	50                   	push   eax
c00187c7:	6a 07                	push   0x7
c00187c9:	e8 d4 fe ff ff       	call   c00186a2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00187ce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00187d2:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00187d6:	0f 95 c0             	setne  al
c00187d9:	83 c4 24             	add    esp,0x24
c00187dc:	c3                   	ret    
c00187dd:	90                   	nop

c00187de <CPU::CPU()>:
c00187de:	83 ec 0c             	sub    esp,0xc
c00187e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187e5:	83 ec 08             	sub    esp,0x8
c00187e8:	68 21 b2 02 c0       	push   0xc002b221
c00187ed:	50                   	push   eax
c00187ee:	e8 13 b4 ff ff       	call   c0013c06 <Device::Device(char const*)>
c00187f3:	83 c4 10             	add    esp,0x10
c00187f6:	ba f8 b2 02 c0       	mov    edx,0xc002b2f8
c00187fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187ff:	89 10                	mov    DWORD PTR [eax],edx
c0018801:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018805:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001880f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018813:	05 78 01 00 00       	add    eax,0x178
c0018818:	83 ec 0c             	sub    esp,0xc
c001881b:	50                   	push   eax
c001881c:	e8 ab 65 ff ff       	call   c000edcc <GDT::GDT()>
c0018821:	83 c4 10             	add    esp,0x10
c0018824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018828:	05 7c 09 00 00       	add    eax,0x97c
c001882d:	83 ec 0c             	sub    esp,0xc
c0018830:	50                   	push   eax
c0018831:	e8 e6 67 ff ff       	call   c000f01c <IDT::IDT()>
c0018836:	83 c4 10             	add    esp,0x10
c0018839:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001883d:	05 7c 11 00 00       	add    eax,0x117c
c0018842:	83 ec 0c             	sub    esp,0xc
c0018845:	50                   	push   eax
c0018846:	e8 cb 82 ff ff       	call   c0010b16 <TSS::TSS()>
c001884b:	83 c4 10             	add    esp,0x10
c001884e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018852:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018859:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001885d:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018867:	90                   	nop
c0018868:	83 c4 0c             	add    esp,0xc
c001886b:	c3                   	ret    

c001886c <CPU::displayFeatures()>:
c001886c:	c3                   	ret    
c001886d:	90                   	nop

c001886e <CPU::detectFeatures()>:
c001886e:	55                   	push   ebp
c001886f:	57                   	push   edi
c0018870:	56                   	push   esi
c0018871:	53                   	push   ebx
c0018872:	83 ec 50             	sub    esp,0x50
c0018875:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018879:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018883:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c001888a:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0018890:	6a 0d                	push   0xd
c0018892:	6a 00                	push   0x0
c0018894:	55                   	push   ebp
c0018895:	e8 b6 7e fe ff       	call   c0000750 <memset>
c001889a:	83 c4 10             	add    esp,0x10
c001889d:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c00188a2:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00188a9:	0f 84 22 09 00 00    	je     c00191d1 <CPU::detectFeatures()+0x963>
c00188af:	83 ec 0c             	sub    esp,0xc
c00188b2:	89 ef                	mov    edi,ebp
c00188b4:	6a 10                	push   0x10
c00188b6:	e8 6b fe ff ff       	call   c0018726 <CPU::cpuidCheckEDX(unsigned int)>
c00188bb:	83 e0 01             	and    eax,0x1
c00188be:	8d 14 00             	lea    edx,[eax+eax*1]
c00188c1:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00188c7:	83 e0 fd             	and    eax,0xfffffffd
c00188ca:	09 d0                	or     eax,edx
c00188cc:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00188d2:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00188d9:	e8 48 fe ff ff       	call   c0018726 <CPU::cpuidCheckEDX(unsigned int)>
c00188de:	83 e0 01             	and    eax,0x1
c00188e1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00188e8:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00188ee:	83 e0 fb             	and    eax,0xfffffffb
c00188f1:	09 d0                	or     eax,edx
c00188f3:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00188f9:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018900:	e8 21 fe ff ff       	call   c0018726 <CPU::cpuidCheckEDX(unsigned int)>
c0018905:	83 e0 01             	and    eax,0x1
c0018908:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001890f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018915:	83 e0 f7             	and    eax,0xfffffff7
c0018918:	09 d0                	or     eax,edx
c001891a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018920:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018927:	e8 fa fd ff ff       	call   c0018726 <CPU::cpuidCheckEDX(unsigned int)>
c001892c:	83 e0 01             	and    eax,0x1
c001892f:	c1 e0 04             	shl    eax,0x4
c0018932:	88 c2                	mov    dl,al
c0018934:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001893a:	83 e0 ef             	and    eax,0xffffffef
c001893d:	09 d0                	or     eax,edx
c001893f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018945:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001894c:	e8 d5 fd ff ff       	call   c0018726 <CPU::cpuidCheckEDX(unsigned int)>
c0018951:	83 e0 01             	and    eax,0x1
c0018954:	c1 e0 05             	shl    eax,0x5
c0018957:	88 c2                	mov    dl,al
c0018959:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001895f:	83 e0 df             	and    eax,0xffffffdf
c0018962:	09 d0                	or     eax,edx
c0018964:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001896a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018971:	e8 b0 fd ff ff       	call   c0018726 <CPU::cpuidCheckEDX(unsigned int)>
c0018976:	83 e0 01             	and    eax,0x1
c0018979:	8d 14 00             	lea    edx,[eax+eax*1]
c001897c:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018982:	83 e0 fd             	and    eax,0xfffffffd
c0018985:	09 d0                	or     eax,edx
c0018987:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001898d:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018994:	e8 8d fd ff ff       	call   c0018726 <CPU::cpuidCheckEDX(unsigned int)>
c0018999:	83 e0 01             	and    eax,0x1
c001899c:	c1 e0 06             	shl    eax,0x6
c001899f:	88 c2                	mov    dl,al
c00189a1:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00189a7:	83 e0 bf             	and    eax,0xffffffbf
c00189aa:	09 d0                	or     eax,edx
c00189ac:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00189b2:	58                   	pop    eax
c00189b3:	8d 44 24 28          	lea    eax,[esp+0x28]
c00189b7:	50                   	push   eax
c00189b8:	8d 44 24 28          	lea    eax,[esp+0x28]
c00189bc:	50                   	push   eax
c00189bd:	8d 74 24 28          	lea    esi,[esp+0x28]
c00189c1:	56                   	push   esi
c00189c2:	8d 44 24 28          	lea    eax,[esp+0x28]
c00189c6:	50                   	push   eax
c00189c7:	6a 00                	push   0x0
c00189c9:	e8 d4 fc ff ff       	call   c00186a2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00189ce:	b8 04 00 00 00       	mov    eax,0x4
c00189d3:	89 c1                	mov    ecx,eax
c00189d5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00189d7:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c00189dd:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00189e1:	89 c1                	mov    ecx,eax
c00189e3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00189e5:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c00189eb:	8d 74 24 38          	lea    esi,[esp+0x38]
c00189ef:	89 c1                	mov    ecx,eax
c00189f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00189f3:	83 c4 18             	add    esp,0x18
c00189f6:	68 cc b0 02 c0       	push   0xc002b0cc
c00189fb:	55                   	push   ebp
c00189fc:	e8 97 7e fe ff       	call   c0000898 <strcmp>
c0018a01:	83 c4 10             	add    esp,0x10
c0018a04:	85 c0                	test   eax,eax
c0018a06:	75 0f                	jne    c0018a17 <CPU::detectFeatures()+0x1a9>
c0018a08:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018a12:	e9 22 02 00 00       	jmp    c0018c39 <CPU::detectFeatures()+0x3cb>
c0018a17:	50                   	push   eax
c0018a18:	50                   	push   eax
c0018a19:	68 d9 b0 02 c0       	push   0xc002b0d9
c0018a1e:	55                   	push   ebp
c0018a1f:	e8 74 7e fe ff       	call   c0000898 <strcmp>
c0018a24:	83 c4 10             	add    esp,0x10
c0018a27:	85 c0                	test   eax,eax
c0018a29:	74 dd                	je     c0018a08 <CPU::detectFeatures()+0x19a>
c0018a2b:	50                   	push   eax
c0018a2c:	50                   	push   eax
c0018a2d:	68 e6 b0 02 c0       	push   0xc002b0e6
c0018a32:	55                   	push   ebp
c0018a33:	e8 60 7e fe ff       	call   c0000898 <strcmp>
c0018a38:	83 c4 10             	add    esp,0x10
c0018a3b:	85 c0                	test   eax,eax
c0018a3d:	74 2a                	je     c0018a69 <CPU::detectFeatures()+0x1fb>
c0018a3f:	50                   	push   eax
c0018a40:	50                   	push   eax
c0018a41:	68 f3 b0 02 c0       	push   0xc002b0f3
c0018a46:	55                   	push   ebp
c0018a47:	e8 4c 7e fe ff       	call   c0000898 <strcmp>
c0018a4c:	83 c4 10             	add    esp,0x10
c0018a4f:	85 c0                	test   eax,eax
c0018a51:	74 16                	je     c0018a69 <CPU::detectFeatures()+0x1fb>
c0018a53:	50                   	push   eax
c0018a54:	50                   	push   eax
c0018a55:	68 00 b1 02 c0       	push   0xc002b100
c0018a5a:	55                   	push   ebp
c0018a5b:	e8 38 7e fe ff       	call   c0000898 <strcmp>
c0018a60:	83 c4 10             	add    esp,0x10
c0018a63:	85 c0                	test   eax,eax
c0018a65:	74 48                	je     c0018aaf <CPU::detectFeatures()+0x241>
c0018a67:	eb 0f                	jmp    c0018a78 <CPU::detectFeatures()+0x20a>
c0018a69:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018a73:	e9 c1 01 00 00       	jmp    c0018c39 <CPU::detectFeatures()+0x3cb>
c0018a78:	50                   	push   eax
c0018a79:	50                   	push   eax
c0018a7a:	68 0d b1 02 c0       	push   0xc002b10d
c0018a7f:	55                   	push   ebp
c0018a80:	e8 13 7e fe ff       	call   c0000898 <strcmp>
c0018a85:	83 c4 10             	add    esp,0x10
c0018a88:	85 c0                	test   eax,eax
c0018a8a:	74 23                	je     c0018aaf <CPU::detectFeatures()+0x241>
c0018a8c:	57                   	push   edi
c0018a8d:	57                   	push   edi
c0018a8e:	68 1a b1 02 c0       	push   0xc002b11a
c0018a93:	55                   	push   ebp
c0018a94:	e8 ff 7d fe ff       	call   c0000898 <strcmp>
c0018a99:	83 c4 10             	add    esp,0x10
c0018a9c:	85 c0                	test   eax,eax
c0018a9e:	75 1e                	jne    c0018abe <CPU::detectFeatures()+0x250>
c0018aa0:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018aaa:	e9 8a 01 00 00       	jmp    c0018c39 <CPU::detectFeatures()+0x3cb>
c0018aaf:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018ab9:	e9 7b 01 00 00       	jmp    c0018c39 <CPU::detectFeatures()+0x3cb>
c0018abe:	56                   	push   esi
c0018abf:	56                   	push   esi
c0018ac0:	68 27 b1 02 c0       	push   0xc002b127
c0018ac5:	55                   	push   ebp
c0018ac6:	e8 cd 7d fe ff       	call   c0000898 <strcmp>
c0018acb:	83 c4 10             	add    esp,0x10
c0018ace:	85 c0                	test   eax,eax
c0018ad0:	75 0f                	jne    c0018ae1 <CPU::detectFeatures()+0x273>
c0018ad2:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018adc:	e9 58 01 00 00       	jmp    c0018c39 <CPU::detectFeatures()+0x3cb>
c0018ae1:	51                   	push   ecx
c0018ae2:	51                   	push   ecx
c0018ae3:	68 e6 b0 02 c0       	push   0xc002b0e6
c0018ae8:	55                   	push   ebp
c0018ae9:	e8 aa 7d fe ff       	call   c0000898 <strcmp>
c0018aee:	83 c4 10             	add    esp,0x10
c0018af1:	85 c0                	test   eax,eax
c0018af3:	75 0f                	jne    c0018b04 <CPU::detectFeatures()+0x296>
c0018af5:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018aff:	e9 35 01 00 00       	jmp    c0018c39 <CPU::detectFeatures()+0x3cb>
c0018b04:	52                   	push   edx
c0018b05:	52                   	push   edx
c0018b06:	68 34 b1 02 c0       	push   0xc002b134
c0018b0b:	55                   	push   ebp
c0018b0c:	e8 87 7d fe ff       	call   c0000898 <strcmp>
c0018b11:	83 c4 10             	add    esp,0x10
c0018b14:	85 c0                	test   eax,eax
c0018b16:	75 0f                	jne    c0018b27 <CPU::detectFeatures()+0x2b9>
c0018b18:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018b22:	e9 12 01 00 00       	jmp    c0018c39 <CPU::detectFeatures()+0x3cb>
c0018b27:	50                   	push   eax
c0018b28:	50                   	push   eax
c0018b29:	68 41 b1 02 c0       	push   0xc002b141
c0018b2e:	55                   	push   ebp
c0018b2f:	e8 64 7d fe ff       	call   c0000898 <strcmp>
c0018b34:	83 c4 10             	add    esp,0x10
c0018b37:	85 c0                	test   eax,eax
c0018b39:	75 0f                	jne    c0018b4a <CPU::detectFeatures()+0x2dc>
c0018b3b:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018b45:	e9 ef 00 00 00       	jmp    c0018c39 <CPU::detectFeatures()+0x3cb>
c0018b4a:	50                   	push   eax
c0018b4b:	50                   	push   eax
c0018b4c:	68 4e b1 02 c0       	push   0xc002b14e
c0018b51:	55                   	push   ebp
c0018b52:	e8 41 7d fe ff       	call   c0000898 <strcmp>
c0018b57:	83 c4 10             	add    esp,0x10
c0018b5a:	85 c0                	test   eax,eax
c0018b5c:	75 0f                	jne    c0018b6d <CPU::detectFeatures()+0x2ff>
c0018b5e:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018b68:	e9 cc 00 00 00       	jmp    c0018c39 <CPU::detectFeatures()+0x3cb>
c0018b6d:	50                   	push   eax
c0018b6e:	50                   	push   eax
c0018b6f:	68 5b b1 02 c0       	push   0xc002b15b
c0018b74:	55                   	push   ebp
c0018b75:	e8 1e 7d fe ff       	call   c0000898 <strcmp>
c0018b7a:	83 c4 10             	add    esp,0x10
c0018b7d:	85 c0                	test   eax,eax
c0018b7f:	75 0f                	jne    c0018b90 <CPU::detectFeatures()+0x322>
c0018b81:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018b8b:	e9 a9 00 00 00       	jmp    c0018c39 <CPU::detectFeatures()+0x3cb>
c0018b90:	50                   	push   eax
c0018b91:	50                   	push   eax
c0018b92:	68 68 b1 02 c0       	push   0xc002b168
c0018b97:	55                   	push   ebp
c0018b98:	e8 fb 7c fe ff       	call   c0000898 <strcmp>
c0018b9d:	83 c4 10             	add    esp,0x10
c0018ba0:	85 c0                	test   eax,eax
c0018ba2:	75 0f                	jne    c0018bb3 <CPU::detectFeatures()+0x345>
c0018ba4:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018bae:	e9 86 00 00 00       	jmp    c0018c39 <CPU::detectFeatures()+0x3cb>
c0018bb3:	50                   	push   eax
c0018bb4:	50                   	push   eax
c0018bb5:	68 75 b1 02 c0       	push   0xc002b175
c0018bba:	55                   	push   ebp
c0018bbb:	e8 d8 7c fe ff       	call   c0000898 <strcmp>
c0018bc0:	83 c4 10             	add    esp,0x10
c0018bc3:	85 c0                	test   eax,eax
c0018bc5:	75 0c                	jne    c0018bd3 <CPU::detectFeatures()+0x365>
c0018bc7:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018bd1:	eb 66                	jmp    c0018c39 <CPU::detectFeatures()+0x3cb>
c0018bd3:	50                   	push   eax
c0018bd4:	50                   	push   eax
c0018bd5:	68 82 b1 02 c0       	push   0xc002b182
c0018bda:	55                   	push   ebp
c0018bdb:	e8 b8 7c fe ff       	call   c0000898 <strcmp>
c0018be0:	83 c4 10             	add    esp,0x10
c0018be3:	85 c0                	test   eax,eax
c0018be5:	75 0c                	jne    c0018bf3 <CPU::detectFeatures()+0x385>
c0018be7:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018bf1:	eb 46                	jmp    c0018c39 <CPU::detectFeatures()+0x3cb>
c0018bf3:	57                   	push   edi
c0018bf4:	57                   	push   edi
c0018bf5:	68 8f b1 02 c0       	push   0xc002b18f
c0018bfa:	55                   	push   ebp
c0018bfb:	e8 98 7c fe ff       	call   c0000898 <strcmp>
c0018c00:	83 c4 10             	add    esp,0x10
c0018c03:	85 c0                	test   eax,eax
c0018c05:	74 e0                	je     c0018be7 <CPU::detectFeatures()+0x379>
c0018c07:	56                   	push   esi
c0018c08:	56                   	push   esi
c0018c09:	68 9c b1 02 c0       	push   0xc002b19c
c0018c0e:	55                   	push   ebp
c0018c0f:	e8 84 7c fe ff       	call   c0000898 <strcmp>
c0018c14:	83 c4 10             	add    esp,0x10
c0018c17:	85 c0                	test   eax,eax
c0018c19:	74 cc                	je     c0018be7 <CPU::detectFeatures()+0x379>
c0018c1b:	51                   	push   ecx
c0018c1c:	51                   	push   ecx
c0018c1d:	68 a9 b1 02 c0       	push   0xc002b1a9
c0018c22:	55                   	push   ebp
c0018c23:	e8 70 7c fe ff       	call   c0000898 <strcmp>
c0018c28:	83 c4 10             	add    esp,0x10
c0018c2b:	85 c0                	test   eax,eax
c0018c2d:	74 b8                	je     c0018be7 <CPU::detectFeatures()+0x379>
c0018c2f:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0018c39:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0018c3e:	0f 86 be 00 00 00    	jbe    c0018d02 <CPU::detectFeatures()+0x494>
c0018c44:	83 ec 0c             	sub    esp,0xc
c0018c47:	68 80 00 00 00       	push   0x80
c0018c4c:	e8 31 fb ff ff       	call   c0018782 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018c51:	83 e0 01             	and    eax,0x1
c0018c54:	c1 e0 06             	shl    eax,0x6
c0018c57:	88 c2                	mov    dl,al
c0018c59:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018c5f:	83 e0 bf             	and    eax,0xffffffbf
c0018c62:	09 d0                	or     eax,edx
c0018c64:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018c6a:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0018c71:	e8 0c fb ff ff       	call   c0018782 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018c76:	83 e0 01             	and    eax,0x1
c0018c79:	c1 e0 04             	shl    eax,0x4
c0018c7c:	88 c2                	mov    dl,al
c0018c7e:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018c84:	83 e0 ef             	and    eax,0xffffffef
c0018c87:	09 d0                	or     eax,edx
c0018c89:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018c8f:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0018c96:	e8 e7 fa ff ff       	call   c0018782 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018c9b:	c1 e0 07             	shl    eax,0x7
c0018c9e:	88 c2                	mov    dl,al
c0018ca0:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018ca6:	83 e0 7f             	and    eax,0x7f
c0018ca9:	09 d0                	or     eax,edx
c0018cab:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018cb1:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018cb8:	e8 f3 fa ff ff       	call   c00187b0 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018cbd:	83 e0 01             	and    eax,0x1
c0018cc0:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018cc7:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018ccd:	83 e0 f7             	and    eax,0xfffffff7
c0018cd0:	09 d0                	or     eax,edx
c0018cd2:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018cd8:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018cdf:	e8 cc fa ff ff       	call   c00187b0 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018ce4:	83 c4 10             	add    esp,0x10
c0018ce7:	83 e0 01             	and    eax,0x1
c0018cea:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018cf1:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018cf7:	83 e0 fb             	and    eax,0xfffffffb
c0018cfa:	09 d0                	or     eax,edx
c0018cfc:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018d02:	83 ec 0c             	sub    esp,0xc
c0018d05:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018d09:	50                   	push   eax
c0018d0a:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018d0e:	50                   	push   eax
c0018d0f:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018d13:	56                   	push   esi
c0018d14:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018d18:	50                   	push   eax
c0018d19:	6a 01                	push   0x1
c0018d1b:	e8 82 f9 ff ff       	call   c00186a2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d20:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018d24:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018d2a:	88 ca                	mov    dl,cl
c0018d2c:	83 e0 f0             	and    eax,0xfffffff0
c0018d2f:	83 e2 0f             	and    edx,0xf
c0018d32:	09 d0                	or     eax,edx
c0018d34:	88 ca                	mov    dl,cl
c0018d36:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0018d3c:	c0 ea 04             	shr    dl,0x4
c0018d3f:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0018d43:	0f b6 c2             	movzx  eax,dl
c0018d46:	83 c4 20             	add    esp,0x20
c0018d49:	c1 e0 06             	shl    eax,0x6
c0018d4c:	89 c7                	mov    edi,eax
c0018d4e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018d54:	66 25 3f c0          	and    ax,0xc03f
c0018d58:	09 f8                	or     eax,edi
c0018d5a:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018d61:	89 c8                	mov    eax,ecx
c0018d63:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0018d6a:	c1 e8 08             	shr    eax,0x8
c0018d6d:	83 e5 3f             	and    ebp,0x3f
c0018d70:	83 e0 0f             	and    eax,0xf
c0018d73:	89 c7                	mov    edi,eax
c0018d75:	c1 e7 06             	shl    edi,0x6
c0018d78:	09 ef                	or     edi,ebp
c0018d7a:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0018d81:	89 fa                	mov    edx,edi
c0018d83:	83 e5 c0             	and    ebp,0xffffffc0
c0018d86:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0018d8c:	88 c2                	mov    dl,al
c0018d8e:	c0 ea 02             	shr    dl,0x2
c0018d91:	89 d7                	mov    edi,edx
c0018d93:	09 ef                	or     edi,ebp
c0018d95:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0018d9b:	89 fa                	mov    edx,edi
c0018d9d:	83 e5 cf             	and    ebp,0xffffffcf
c0018da0:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0018da6:	89 cf                	mov    edi,ecx
c0018da8:	c1 ef 0c             	shr    edi,0xc
c0018dab:	83 e7 03             	and    edi,0x3
c0018dae:	c1 e7 04             	shl    edi,0x4
c0018db1:	09 ef                	or     edi,ebp
c0018db3:	3c 06                	cmp    al,0x6
c0018db5:	89 fa                	mov    edx,edi
c0018db7:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0018dbd:	74 04                	je     c0018dc3 <CPU::detectFeatures()+0x555>
c0018dbf:	3c 0f                	cmp    al,0xf
c0018dc1:	75 5c                	jne    c0018e1f <CPU::detectFeatures()+0x5b1>
c0018dc3:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018dc7:	89 cf                	mov    edi,ecx
c0018dc9:	c1 ef 10             	shr    edi,0x10
c0018dcc:	c1 e7 04             	shl    edi,0x4
c0018dcf:	09 fa                	or     edx,edi
c0018dd1:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0018dd7:	0f b6 d2             	movzx  edx,dl
c0018dda:	66 81 e7 3f c0       	and    di,0xc03f
c0018ddf:	c1 e2 06             	shl    edx,0x6
c0018de2:	09 fa                	or     edx,edi
c0018de4:	3c 0f                	cmp    al,0xf
c0018de6:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0018ded:	75 30                	jne    c0018e1f <CPU::detectFeatures()+0x5b1>
c0018def:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0018df5:	c1 e9 14             	shr    ecx,0x14
c0018df8:	83 e0 3f             	and    eax,0x3f
c0018dfb:	83 c1 0f             	add    ecx,0xf
c0018dfe:	88 ca                	mov    dl,cl
c0018e00:	c0 e9 02             	shr    cl,0x2
c0018e03:	c1 e2 06             	shl    edx,0x6
c0018e06:	09 d0                	or     eax,edx
c0018e08:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0018e0e:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0018e14:	83 e0 c0             	and    eax,0xffffffc0
c0018e17:	09 c1                	or     ecx,eax
c0018e19:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0018e1f:	83 ec 0c             	sub    esp,0xc
c0018e22:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018e29:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e2d:	50                   	push   eax
c0018e2e:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018e32:	55                   	push   ebp
c0018e33:	56                   	push   esi
c0018e34:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0018e38:	57                   	push   edi
c0018e39:	68 00 00 00 80       	push   0x80000000
c0018e3e:	e8 5f f8 ff ff       	call   c00186a2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e43:	83 c4 20             	add    esp,0x20
c0018e46:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0018e4e:	76 22                	jbe    c0018e72 <CPU::detectFeatures()+0x604>
c0018e50:	83 ec 0c             	sub    esp,0xc
c0018e53:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e57:	50                   	push   eax
c0018e58:	55                   	push   ebp
c0018e59:	56                   	push   esi
c0018e5a:	57                   	push   edi
c0018e5b:	68 01 00 00 80       	push   0x80000001
c0018e60:	e8 3d f8 ff ff       	call   c00186a2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e65:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0018e6f:	83 c4 20             	add    esp,0x20
c0018e72:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018e78:	83 f8 01             	cmp    eax,0x1
c0018e7b:	75 6f                	jne    c0018eec <CPU::detectFeatures()+0x67e>
c0018e7d:	51                   	push   ecx
c0018e7e:	51                   	push   ecx
c0018e7f:	68 b5 b1 02 c0       	push   0xc002b1b5
c0018e84:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018e88:	56                   	push   esi
c0018e89:	e8 7e 79 fe ff       	call   c000080c <strcpy>
c0018e8e:	5f                   	pop    edi
c0018e8f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e95:	5d                   	pop    ebp
c0018e96:	66 c1 e8 06          	shr    ax,0x6
c0018e9a:	0f b6 c0             	movzx  eax,al
c0018e9d:	50                   	push   eax
c0018e9e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018ea4:	c1 e8 0e             	shr    eax,0xe
c0018ea7:	0f b6 c0             	movzx  eax,al
c0018eaa:	50                   	push   eax
c0018eab:	e8 9c f4 ff ff       	call   c001834c <CPU::lookupIntelName(unsigned char, unsigned char)>
c0018eb0:	5a                   	pop    edx
c0018eb1:	59                   	pop    ecx
c0018eb2:	50                   	push   eax
c0018eb3:	56                   	push   esi
c0018eb4:	e8 93 7a fe ff       	call   c000094c <strcat>
c0018eb9:	5f                   	pop    edi
c0018eba:	5d                   	pop    ebp
c0018ebb:	56                   	push   esi
c0018ebc:	53                   	push   ebx
c0018ebd:	e8 36 ad ff ff       	call   c0013bf8 <Device::setName(char const*)>
c0018ec2:	58                   	pop    eax
c0018ec3:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018ec9:	5a                   	pop    edx
c0018eca:	68 bc b1 02 c0       	push   0xc002b1bc
c0018ecf:	50                   	push   eax
c0018ed0:	e8 c3 79 fe ff       	call   c0000898 <strcmp>
c0018ed5:	83 c4 10             	add    esp,0x10
c0018ed8:	85 c0                	test   eax,eax
c0018eda:	0f 85 71 03 00 00    	jne    c0019251 <CPU::detectFeatures()+0x9e3>
c0018ee0:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0018ee7:	e9 65 03 00 00       	jmp    c0019251 <CPU::detectFeatures()+0x9e3>
c0018eec:	83 f8 02             	cmp    eax,0x2
c0018eef:	0f 85 b5 00 00 00    	jne    c0018faa <CPU::detectFeatures()+0x73c>
c0018ef5:	57                   	push   edi
c0018ef6:	57                   	push   edi
c0018ef7:	68 ce b1 02 c0       	push   0xc002b1ce
c0018efc:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018f00:	56                   	push   esi
c0018f01:	e8 06 79 fe ff       	call   c000080c <strcpy>
c0018f06:	5d                   	pop    ebp
c0018f07:	58                   	pop    eax
c0018f08:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f0e:	66 c1 e8 06          	shr    ax,0x6
c0018f12:	0f b6 c0             	movzx  eax,al
c0018f15:	50                   	push   eax
c0018f16:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f1c:	c1 e8 0e             	shr    eax,0xe
c0018f1f:	0f b6 c0             	movzx  eax,al
c0018f22:	50                   	push   eax
c0018f23:	e8 90 f2 ff ff       	call   c00181b8 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0018f28:	5a                   	pop    edx
c0018f29:	59                   	pop    ecx
c0018f2a:	50                   	push   eax
c0018f2b:	56                   	push   esi
c0018f2c:	e8 1b 7a fe ff       	call   c000094c <strcat>
c0018f31:	5f                   	pop    edi
c0018f32:	5d                   	pop    ebp
c0018f33:	56                   	push   esi
c0018f34:	53                   	push   ebx
c0018f35:	e8 be ac ff ff       	call   c0013bf8 <Device::setName(char const*)>
c0018f3a:	58                   	pop    eax
c0018f3b:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018f41:	5a                   	pop    edx
c0018f42:	68 d3 b1 02 c0       	push   0xc002b1d3
c0018f47:	50                   	push   eax
c0018f48:	e8 4b 79 fe ff       	call   c0000898 <strcmp>
c0018f4d:	83 c4 10             	add    esp,0x10
c0018f50:	85 c0                	test   eax,eax
c0018f52:	75 20                	jne    c0018f74 <CPU::detectFeatures()+0x706>
c0018f54:	8b 15 08 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d708
c0018f5a:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0018f60:	a8 01                	test   al,0x1
c0018f62:	74 10                	je     c0018f74 <CPU::detectFeatures()+0x706>
c0018f64:	83 e0 fe             	and    eax,0xfffffffe
c0018f67:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0018f6d:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0018f74:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f7a:	c1 e8 0e             	shr    eax,0xe
c0018f7d:	3c 05                	cmp    al,0x5
c0018f7f:	0f 85 cc 02 00 00    	jne    c0019251 <CPU::detectFeatures()+0x9e3>
c0018f85:	56                   	push   esi
c0018f86:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018f8c:	83 e0 0f             	and    eax,0xf
c0018f8f:	50                   	push   eax
c0018f90:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f96:	66 c1 e8 06          	shr    ax,0x6
c0018f9a:	0f b6 c0             	movzx  eax,al
c0018f9d:	50                   	push   eax
c0018f9e:	6a 05                	push   0x5
c0018fa0:	e8 89 f6 ff ff       	call   c001862e <CPU::AMD_K6_writeback(int, int, int)>
c0018fa5:	e9 1f 02 00 00       	jmp    c00191c9 <CPU::detectFeatures()+0x95b>
c0018faa:	8d 50 fd             	lea    edx,[eax-0x3]
c0018fad:	83 fa 01             	cmp    edx,0x1
c0018fb0:	76 09                	jbe    c0018fbb <CPU::detectFeatures()+0x74d>
c0018fb2:	83 f8 06             	cmp    eax,0x6
c0018fb5:	0f 85 91 01 00 00    	jne    c001914c <CPU::detectFeatures()+0x8de>
c0018fbb:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018fc1:	c1 ea 0e             	shr    edx,0xe
c0018fc4:	80 fa 05             	cmp    dl,0x5
c0018fc7:	75 7b                	jne    c0019044 <CPU::detectFeatures()+0x7d6>
c0018fc9:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018fcf:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018fd4:	66 81 fa 00 01       	cmp    dx,0x100
c0018fd9:	75 0c                	jne    c0018fe7 <CPU::detectFeatures()+0x779>
c0018fdb:	51                   	push   ecx
c0018fdc:	51                   	push   ecx
c0018fdd:	68 da b1 02 c0       	push   0xc002b1da
c0018fe2:	e9 dc 01 00 00       	jmp    c00191c3 <CPU::detectFeatures()+0x955>
c0018fe7:	66 81 fa 00 02       	cmp    dx,0x200
c0018fec:	75 0c                	jne    c0018ffa <CPU::detectFeatures()+0x78c>
c0018fee:	52                   	push   edx
c0018fef:	52                   	push   edx
c0018ff0:	68 ed b1 02 c0       	push   0xc002b1ed
c0018ff5:	e9 c9 01 00 00       	jmp    c00191c3 <CPU::detectFeatures()+0x955>
c0018ffa:	66 81 fa 40 02       	cmp    dx,0x240
c0018fff:	75 0c                	jne    c001900d <CPU::detectFeatures()+0x79f>
c0019001:	50                   	push   eax
c0019002:	50                   	push   eax
c0019003:	68 ff b1 02 c0       	push   0xc002b1ff
c0019008:	e9 b6 01 00 00       	jmp    c00191c3 <CPU::detectFeatures()+0x955>
c001900d:	83 f8 06             	cmp    eax,0x6
c0019010:	75 0c                	jne    c001901e <CPU::detectFeatures()+0x7b0>
c0019012:	50                   	push   eax
c0019013:	50                   	push   eax
c0019014:	68 11 b2 02 c0       	push   0xc002b211
c0019019:	e9 a5 01 00 00       	jmp    c00191c3 <CPU::detectFeatures()+0x955>
c001901e:	83 f8 04             	cmp    eax,0x4
c0019021:	75 0c                	jne    c001902f <CPU::detectFeatures()+0x7c1>
c0019023:	50                   	push   eax
c0019024:	50                   	push   eax
c0019025:	68 1d b2 02 c0       	push   0xc002b21d
c001902a:	e9 94 01 00 00       	jmp    c00191c3 <CPU::detectFeatures()+0x955>
c001902f:	83 f8 03             	cmp    eax,0x3
c0019032:	0f 85 19 02 00 00    	jne    c0019251 <CPU::detectFeatures()+0x9e3>
c0019038:	50                   	push   eax
c0019039:	50                   	push   eax
c001903a:	68 25 b2 02 c0       	push   0xc002b225
c001903f:	e9 7f 01 00 00       	jmp    c00191c3 <CPU::detectFeatures()+0x955>
c0019044:	80 fa 06             	cmp    dl,0x6
c0019047:	0f 85 db 00 00 00    	jne    c0019128 <CPU::detectFeatures()+0x8ba>
c001904d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019053:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019058:	66 81 fa 80 01       	cmp    dx,0x180
c001905d:	75 0c                	jne    c001906b <CPU::detectFeatures()+0x7fd>
c001905f:	50                   	push   eax
c0019060:	50                   	push   eax
c0019061:	68 30 b2 02 c0       	push   0xc002b230
c0019066:	e9 58 01 00 00       	jmp    c00191c3 <CPU::detectFeatures()+0x955>
c001906b:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019071:	66 f7 c1 80 ff       	test   cx,0xff80
c0019076:	75 0c                	jne    c0019084 <CPU::detectFeatures()+0x816>
c0019078:	50                   	push   eax
c0019079:	50                   	push   eax
c001907a:	68 40 b2 02 c0       	push   0xc002b240
c001907f:	e9 3f 01 00 00       	jmp    c00191c3 <CPU::detectFeatures()+0x955>
c0019084:	66 81 fa 40 02       	cmp    dx,0x240
c0019089:	75 0c                	jne    c0019097 <CPU::detectFeatures()+0x829>
c001908b:	55                   	push   ebp
c001908c:	55                   	push   ebp
c001908d:	68 47 b2 02 c0       	push   0xc002b247
c0019092:	e9 2c 01 00 00       	jmp    c00191c3 <CPU::detectFeatures()+0x955>
c0019097:	66 81 fa 80 02       	cmp    dx,0x280
c001909c:	75 0c                	jne    c00190aa <CPU::detectFeatures()+0x83c>
c001909e:	57                   	push   edi
c001909f:	57                   	push   edi
c00190a0:	68 50 b2 02 c0       	push   0xc002b250
c00190a5:	e9 19 01 00 00       	jmp    c00191c3 <CPU::detectFeatures()+0x955>
c00190aa:	66 81 fa 40 03       	cmp    dx,0x340
c00190af:	74 ed                	je     c001909e <CPU::detectFeatures()+0x830>
c00190b1:	66 81 fa c0 03       	cmp    dx,0x3c0
c00190b6:	75 0c                	jne    c00190c4 <CPU::detectFeatures()+0x856>
c00190b8:	56                   	push   esi
c00190b9:	56                   	push   esi
c00190ba:	68 57 b2 02 c0       	push   0xc002b257
c00190bf:	e9 ff 00 00 00       	jmp    c00191c3 <CPU::detectFeatures()+0x955>
c00190c4:	83 f8 06             	cmp    eax,0x6
c00190c7:	0f 84 45 ff ff ff    	je     c0019012 <CPU::detectFeatures()+0x7a4>
c00190cd:	83 f8 04             	cmp    eax,0x4
c00190d0:	0f 84 4d ff ff ff    	je     c0019023 <CPU::detectFeatures()+0x7b5>
c00190d6:	83 f8 03             	cmp    eax,0x3
c00190d9:	0f 85 72 01 00 00    	jne    c0019251 <CPU::detectFeatures()+0x9e3>
c00190df:	51                   	push   ecx
c00190e0:	51                   	push   ecx
c00190e1:	68 60 b2 02 c0       	push   0xc002b260
c00190e6:	53                   	push   ebx
c00190e7:	e8 0c ab ff ff       	call   c0013bf8 <Device::setName(char const*)>
c00190ec:	b1 c1                	mov    cl,0xc1
c00190ee:	88 c8                	mov    al,cl
c00190f0:	e6 22                	out    0x22,al
c00190f2:	e4 23                	in     al,0x23
c00190f4:	88 c2                	mov    dl,al
c00190f6:	88 c8                	mov    al,cl
c00190f8:	e6 22                	out    0x22,al
c00190fa:	88 d0                	mov    al,dl
c00190fc:	83 c8 10             	or     eax,0x10
c00190ff:	e6 23                	out    0x23,al
c0019101:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019108:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001910b:	89 d0                	mov    eax,edx
c001910d:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019113:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019117:	40                   	inc    eax
c0019118:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001911e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019123:	e9 a1 00 00 00       	jmp    c00191c9 <CPU::detectFeatures()+0x95b>
c0019128:	83 f8 06             	cmp    eax,0x6
c001912b:	0f 84 e1 fe ff ff    	je     c0019012 <CPU::detectFeatures()+0x7a4>
c0019131:	83 f8 04             	cmp    eax,0x4
c0019134:	0f 84 e9 fe ff ff    	je     c0019023 <CPU::detectFeatures()+0x7b5>
c001913a:	83 f8 03             	cmp    eax,0x3
c001913d:	0f 85 0e 01 00 00    	jne    c0019251 <CPU::detectFeatures()+0x9e3>
c0019143:	52                   	push   edx
c0019144:	52                   	push   edx
c0019145:	68 6b b2 02 c0       	push   0xc002b26b
c001914a:	eb 77                	jmp    c00191c3 <CPU::detectFeatures()+0x955>
c001914c:	83 f8 07             	cmp    eax,0x7
c001914f:	75 09                	jne    c001915a <CPU::detectFeatures()+0x8ec>
c0019151:	50                   	push   eax
c0019152:	50                   	push   eax
c0019153:	68 75 b2 02 c0       	push   0xc002b275
c0019158:	eb 69                	jmp    c00191c3 <CPU::detectFeatures()+0x955>
c001915a:	83 f8 0a             	cmp    eax,0xa
c001915d:	75 09                	jne    c0019168 <CPU::detectFeatures()+0x8fa>
c001915f:	50                   	push   eax
c0019160:	50                   	push   eax
c0019161:	68 80 b2 02 c0       	push   0xc002b280
c0019166:	eb 5b                	jmp    c00191c3 <CPU::detectFeatures()+0x955>
c0019168:	83 f8 0b             	cmp    eax,0xb
c001916b:	75 09                	jne    c0019176 <CPU::detectFeatures()+0x908>
c001916d:	50                   	push   eax
c001916e:	50                   	push   eax
c001916f:	68 88 b2 02 c0       	push   0xc002b288
c0019174:	eb 4d                	jmp    c00191c3 <CPU::detectFeatures()+0x955>
c0019176:	83 f8 08             	cmp    eax,0x8
c0019179:	75 09                	jne    c0019184 <CPU::detectFeatures()+0x916>
c001917b:	50                   	push   eax
c001917c:	50                   	push   eax
c001917d:	68 91 b2 02 c0       	push   0xc002b291
c0019182:	eb 3f                	jmp    c00191c3 <CPU::detectFeatures()+0x955>
c0019184:	83 f8 09             	cmp    eax,0x9
c0019187:	75 09                	jne    c0019192 <CPU::detectFeatures()+0x924>
c0019189:	50                   	push   eax
c001918a:	50                   	push   eax
c001918b:	68 99 b2 02 c0       	push   0xc002b299
c0019190:	eb 31                	jmp    c00191c3 <CPU::detectFeatures()+0x955>
c0019192:	83 f8 05             	cmp    eax,0x5
c0019195:	75 09                	jne    c00191a0 <CPU::detectFeatures()+0x932>
c0019197:	50                   	push   eax
c0019198:	50                   	push   eax
c0019199:	68 a1 b2 02 c0       	push   0xc002b2a1
c001919e:	eb 23                	jmp    c00191c3 <CPU::detectFeatures()+0x955>
c00191a0:	83 f8 0c             	cmp    eax,0xc
c00191a3:	75 09                	jne    c00191ae <CPU::detectFeatures()+0x940>
c00191a5:	55                   	push   ebp
c00191a6:	55                   	push   ebp
c00191a7:	68 af b2 02 c0       	push   0xc002b2af
c00191ac:	eb 15                	jmp    c00191c3 <CPU::detectFeatures()+0x955>
c00191ae:	83 f8 0d             	cmp    eax,0xd
c00191b1:	75 09                	jne    c00191bc <CPU::detectFeatures()+0x94e>
c00191b3:	57                   	push   edi
c00191b4:	57                   	push   edi
c00191b5:	68 ba b2 02 c0       	push   0xc002b2ba
c00191ba:	eb 07                	jmp    c00191c3 <CPU::detectFeatures()+0x955>
c00191bc:	56                   	push   esi
c00191bd:	56                   	push   esi
c00191be:	68 ce b2 02 c0       	push   0xc002b2ce
c00191c3:	53                   	push   ebx
c00191c4:	e8 2f aa ff ff       	call   c0013bf8 <Device::setName(char const*)>
c00191c9:	83 c4 10             	add    esp,0x10
c00191cc:	e9 80 00 00 00       	jmp    c0019251 <CPU::detectFeatures()+0x9e3>
c00191d1:	51                   	push   ecx
c00191d2:	51                   	push   ecx
c00191d3:	68 1a b1 02 c0       	push   0xc002b11a
c00191d8:	55                   	push   ebp
c00191d9:	e8 2e 76 fe ff       	call   c000080c <strcpy>
c00191de:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00191e8:	e8 c1 70 fe ff       	call   c00002ae <is486>
c00191ed:	83 c4 10             	add    esp,0x10
c00191f0:	85 c0                	test   eax,eax
c00191f2:	74 2b                	je     c001921f <CPU::detectFeatures()+0x9b1>
c00191f4:	52                   	push   edx
c00191f5:	52                   	push   edx
c00191f6:	68 da b2 02 c0       	push   0xc002b2da
c00191fb:	53                   	push   ebx
c00191fc:	e8 f7 a9 ff ff       	call   c0013bf8 <Device::setName(char const*)>
c0019201:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019208:	0f 20 c0             	mov    eax,cr0
c001920b:	83 e0 14             	and    eax,0x14
c001920e:	83 c4 10             	add    esp,0x10
c0019211:	83 f8 04             	cmp    eax,0x4
c0019214:	75 1f                	jne    c0019235 <CPU::detectFeatures()+0x9c7>
c0019216:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c001921d:	eb 32                	jmp    c0019251 <CPU::detectFeatures()+0x9e3>
c001921f:	50                   	push   eax
c0019220:	50                   	push   eax
c0019221:	68 e5 b2 02 c0       	push   0xc002b2e5
c0019226:	53                   	push   ebx
c0019227:	e8 cc a9 ff ff       	call   c0013bf8 <Device::setName(char const*)>
c001922c:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019233:	eb d3                	jmp    c0019208 <CPU::detectFeatures()+0x99a>
c0019235:	e8 4f 70 fe ff       	call   c0000289 <hasLegacyFPU>
c001923a:	83 e0 01             	and    eax,0x1
c001923d:	8d 14 00             	lea    edx,[eax+eax*1]
c0019240:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019246:	83 e0 fd             	and    eax,0xfffffffd
c0019249:	09 d0                	or     eax,edx
c001924b:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019251:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019258:	83 c4 4c             	add    esp,0x4c
c001925b:	5b                   	pop    ebx
c001925c:	5e                   	pop    esi
c001925d:	5f                   	pop    edi
c001925e:	5d                   	pop    ebp
c001925f:	c3                   	ret    

c0019260 <CPU::setupSMEP()>:
c0019260:	0f 20 e0             	mov    eax,cr4
c0019263:	0d 00 00 10 00       	or     eax,0x100000
c0019268:	0f 22 e0             	mov    cr4,eax
c001926b:	c3                   	ret    

c001926c <CPU::setupUMIP()>:
c001926c:	0f 20 e0             	mov    eax,cr4
c001926f:	80 cc 08             	or     ah,0x8
c0019272:	0f 22 e0             	mov    cr4,eax
c0019275:	c3                   	ret    

c0019276 <CPU::setupTSC()>:
c0019276:	0f 20 e0             	mov    eax,cr4
c0019279:	83 c8 04             	or     eax,0x4
c001927c:	0f 22 e0             	mov    cr4,eax
c001927f:	c3                   	ret    

c0019280 <CPU::setupLargePages()>:
c0019280:	0f 20 e0             	mov    eax,cr4
c0019283:	83 c8 10             	or     eax,0x10
c0019286:	0f 22 e0             	mov    cr4,eax
c0019289:	c3                   	ret    

c001928a <CPU::setupPAT()>:
c001928a:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c001928f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019296:	74 2c                	je     c00192c4 <CPU::setupPAT()+0x3a>
c0019298:	53                   	push   ebx
c0019299:	83 ec 10             	sub    esp,0x10
c001929c:	68 77 02 00 00       	push   0x277
c00192a1:	50                   	push   eax
c00192a2:	e8 99 58 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c00192a7:	83 e2 f8             	and    edx,0xfffffff8
c00192aa:	83 ca 01             	or     edx,0x1
c00192ad:	52                   	push   edx
c00192ae:	50                   	push   eax
c00192af:	68 77 02 00 00       	push   0x277
c00192b4:	ff 35 08 d7 02 c0    	push   DWORD PTR ds:0xc002d708
c00192ba:	e8 ad 58 ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c00192bf:	83 c4 28             	add    esp,0x28
c00192c2:	5b                   	pop    ebx
c00192c3:	c3                   	ret    
c00192c4:	c3                   	ret    
c00192c5:	90                   	nop

c00192c6 <CPU::setupMTRR()>:
c00192c6:	c3                   	ret    
c00192c7:	90                   	nop

c00192c8 <CPU::setupGlobalPages()>:
c00192c8:	0f 20 e0             	mov    eax,cr4
c00192cb:	0c 80                	or     al,0x80
c00192cd:	0f 22 e0             	mov    cr4,eax
c00192d0:	c3                   	ret    
c00192d1:	90                   	nop

c00192d2 <CPU::allowUsermodeDataAccess()>:
c00192d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00192d6:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00192dd:	74 03                	je     c00192e2 <CPU::allowUsermodeDataAccess()+0x10>
c00192df:	0f 01 cb             	stac   
c00192e2:	c3                   	ret    
c00192e3:	90                   	nop

c00192e4 <CPU::prohibitUsermodeDataAccess()>:
c00192e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00192e8:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00192ef:	74 03                	je     c00192f4 <CPU::prohibitUsermodeDataAccess()+0x10>
c00192f1:	0f 01 ca             	clac   
c00192f4:	c3                   	ret    
c00192f5:	90                   	nop

c00192f6 <CPU::setupSMAP()>:
c00192f6:	0f 20 e0             	mov    eax,cr4
c00192f9:	0d 00 00 20 00       	or     eax,0x200000
c00192fe:	0f 22 e0             	mov    cr4,eax
c0019301:	eb e1                	jmp    c00192e4 <CPU::prohibitUsermodeDataAccess()>
c0019303:	90                   	nop

c0019304 <CPU::setupFeatures()>:
c0019304:	83 ec 0c             	sub    esp,0xc
c0019307:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001930b:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019312:	74 07                	je     c001931b <CPU::setupFeatures()+0x17>
c0019314:	52                   	push   edx
c0019315:	e8 46 ff ff ff       	call   c0019260 <CPU::setupSMEP()>
c001931a:	58                   	pop    eax
c001931b:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019322:	74 07                	je     c001932b <CPU::setupFeatures()+0x27>
c0019324:	52                   	push   edx
c0019325:	e8 cc ff ff ff       	call   c00192f6 <CPU::setupSMAP()>
c001932a:	58                   	pop    eax
c001932b:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019332:	74 07                	je     c001933b <CPU::setupFeatures()+0x37>
c0019334:	52                   	push   edx
c0019335:	e8 32 ff ff ff       	call   c001926c <CPU::setupUMIP()>
c001933a:	58                   	pop    eax
c001933b:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019342:	74 07                	je     c001934b <CPU::setupFeatures()+0x47>
c0019344:	52                   	push   edx
c0019345:	e8 2c ff ff ff       	call   c0019276 <CPU::setupTSC()>
c001934a:	58                   	pop    eax
c001934b:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019352:	74 07                	je     c001935b <CPU::setupFeatures()+0x57>
c0019354:	52                   	push   edx
c0019355:	e8 26 ff ff ff       	call   c0019280 <CPU::setupLargePages()>
c001935a:	59                   	pop    ecx
c001935b:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019362:	74 07                	je     c001936b <CPU::setupFeatures()+0x67>
c0019364:	52                   	push   edx
c0019365:	e8 5e ff ff ff       	call   c00192c8 <CPU::setupGlobalPages()>
c001936a:	58                   	pop    eax
c001936b:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019372:	74 0c                	je     c0019380 <CPU::setupFeatures()+0x7c>
c0019374:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019378:	83 c4 0c             	add    esp,0xc
c001937b:	e9 0a ff ff ff       	jmp    c001928a <CPU::setupPAT()>
c0019380:	83 c4 0c             	add    esp,0xc
c0019383:	c3                   	ret    

c0019384 <CPU::open(int, int, void*)>:
c0019384:	57                   	push   edi
c0019385:	56                   	push   esi
c0019386:	53                   	push   ebx
c0019387:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001938b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001938f:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019395:	83 ec 0c             	sub    esp,0xc
c0019398:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c001939e:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00193a4:	50                   	push   eax
c00193a5:	e8 84 5a ff ff       	call   c000ee2e <GDT::setup()>
c00193aa:	83 c4 0c             	add    esp,0xc
c00193ad:	6a 00                	push   0x0
c00193af:	68 ef be ad de       	push   0xdeadbeef
c00193b4:	57                   	push   edi
c00193b5:	e8 9c 77 ff ff       	call   c0010b56 <TSS::setup(unsigned long, unsigned long)>
c00193ba:	89 3c 24             	mov    DWORD PTR [esp],edi
c00193bd:	e8 74 77 ff ff       	call   c0010b36 <TSS::flush()>
c00193c2:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00193c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00193cb:	e8 c2 5c ff ff       	call   c000f092 <IDT::setup()>
c00193d0:	b8 00 04 00 00       	mov    eax,0x400
c00193d5:	0f 23 f8             	mov    db7,eax
c00193d8:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00193e2:	e8 59 65 ff ff       	call   c000f940 <Phys::allocatePage()>
c00193e7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00193ed:	89 30                	mov    DWORD PTR [eax],esi
c00193ef:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00193f5:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00193f8:	58                   	pop    eax
c00193f9:	5a                   	pop    edx
c00193fa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019400:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019404:	e8 5d 88 ff ff       	call   c0011c66 <VAS::setCPUSpecific(unsigned long)>
c0019409:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001940c:	e8 5d f4 ff ff       	call   c001886e <CPU::detectFeatures()>
c0019411:	e8 35 bc ff ff       	call   c001504b <setupInterruptController()>
c0019416:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001941c:	a1 20 d7 02 c0       	mov    eax,ds:0xc002d720
c0019421:	83 e0 10             	and    eax,0x10
c0019424:	83 f8 01             	cmp    eax,0x1
c0019427:	19 c0                	sbb    eax,eax
c0019429:	83 e0 46             	and    eax,0x46
c001942c:	83 c0 1e             	add    eax,0x1e
c001942f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019432:	e8 02 d2 ff ff       	call   c0016639 <setupTimer(int)>
c0019437:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c001943d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019440:	e8 bf fe ff ff       	call   c0019304 <CPU::setupFeatures()>
c0019445:	83 c4 10             	add    esp,0x10
c0019448:	31 c0                	xor    eax,eax
c001944a:	5b                   	pop    ebx
c001944b:	5e                   	pop    esi
c001944c:	5f                   	pop    edi
c001944d:	c3                   	ret    

c001944e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c001944e:	57                   	push   edi
c001944f:	56                   	push   esi
c0019450:	53                   	push   ebx
c0019451:	51                   	push   ecx
c0019452:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019456:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019459:	0f 02 c0             	lar    eax,ax
c001945c:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c001945f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019463:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019466:	88 ca                	mov    dl,cl
c0019468:	c0 ea 06             	shr    dl,0x6
c001946b:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c001946f:	89 ca                	mov    edx,ecx
c0019471:	66 c1 ea 03          	shr    dx,0x3
c0019475:	83 e2 07             	and    edx,0x7
c0019478:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c001947d:	88 17                	mov    BYTE PTR [edi],dl
c001947f:	0f 84 a6 01 00 00    	je     c001962b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019485:	83 e1 07             	and    ecx,0x7
c0019488:	80 f9 04             	cmp    cl,0x4
c001948b:	0f 84 98 00 00 00    	je     c0019529 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019491:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019496:	0f 95 c0             	setne  al
c0019499:	80 f9 05             	cmp    cl,0x5
c001949c:	0f 95 c2             	setne  dl
c001949f:	08 c2                	or     dl,al
c00194a1:	74 79                	je     c001951c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c00194a3:	84 c9                	test   cl,cl
c00194a5:	75 05                	jne    c00194ac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c00194a7:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00194aa:	eb 3c                	jmp    c00194e8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00194ac:	80 f9 01             	cmp    cl,0x1
c00194af:	75 05                	jne    c00194b6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c00194b1:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00194b4:	eb 32                	jmp    c00194e8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00194b6:	80 f9 02             	cmp    cl,0x2
c00194b9:	75 05                	jne    c00194c0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c00194bb:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00194be:	eb 28                	jmp    c00194e8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00194c0:	31 c0                	xor    eax,eax
c00194c2:	80 f9 03             	cmp    cl,0x3
c00194c5:	75 05                	jne    c00194cc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c00194c7:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00194ca:	eb 1c                	jmp    c00194e8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00194cc:	80 f9 05             	cmp    cl,0x5
c00194cf:	75 05                	jne    c00194d6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c00194d1:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00194d4:	eb 12                	jmp    c00194e8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00194d6:	80 f9 06             	cmp    cl,0x6
c00194d9:	75 05                	jne    c00194e0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c00194db:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00194de:	eb 08                	jmp    c00194e8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00194e0:	80 f9 07             	cmp    cl,0x7
c00194e3:	75 03                	jne    c00194e8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00194e5:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00194e8:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00194ed:	75 10                	jne    c00194ff <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c00194ef:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00194f3:	b9 03 00 00 00       	mov    ecx,0x3
c00194f8:	01 d0                	add    eax,edx
c00194fa:	e9 37 01 00 00       	jmp    c0019636 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00194ff:	b9 02 00 00 00       	mov    ecx,0x2
c0019504:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019509:	0f 85 27 01 00 00    	jne    c0019636 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001950f:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019512:	b9 06 00 00 00       	mov    ecx,0x6
c0019517:	e9 1a 01 00 00       	jmp    c0019636 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001951c:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c001951f:	b9 06 00 00 00       	mov    ecx,0x6
c0019524:	e9 0f 01 00 00       	jmp    c0019638 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019529:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c001952c:	88 ca                	mov    dl,cl
c001952e:	c0 ea 06             	shr    dl,0x6
c0019531:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019535:	89 ca                	mov    edx,ecx
c0019537:	66 c1 ea 03          	shr    dx,0x3
c001953b:	83 e2 07             	and    edx,0x7
c001953e:	80 e1 07             	and    cl,0x7
c0019541:	75 05                	jne    c0019548 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019543:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019546:	eb 4c                	jmp    c0019594 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019548:	80 f9 01             	cmp    cl,0x1
c001954b:	75 05                	jne    c0019552 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c001954d:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019550:	eb 42                	jmp    c0019594 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019552:	80 f9 02             	cmp    cl,0x2
c0019555:	75 05                	jne    c001955c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019557:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001955a:	eb 38                	jmp    c0019594 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001955c:	80 f9 03             	cmp    cl,0x3
c001955f:	75 05                	jne    c0019566 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019561:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019564:	eb 2e                	jmp    c0019594 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019566:	80 f9 04             	cmp    cl,0x4
c0019569:	75 12                	jne    c001957d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c001956b:	f6 c4 60             	test   ah,0x60
c001956e:	75 08                	jne    c0019578 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019570:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019573:	8d 78 14             	lea    edi,[eax+0x14]
c0019576:	eb 1c                	jmp    c0019594 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019578:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c001957b:	eb 17                	jmp    c0019594 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001957d:	80 f9 05             	cmp    cl,0x5
c0019580:	75 05                	jne    c0019587 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019582:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019585:	eb 0d                	jmp    c0019594 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019587:	80 f9 06             	cmp    cl,0x6
c001958a:	75 05                	jne    c0019591 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001958c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001958f:	eb 03                	jmp    c0019594 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019591:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019594:	84 d2                	test   dl,dl
c0019596:	75 05                	jne    c001959d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019598:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001959b:	eb 3c                	jmp    c00195d9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001959d:	80 fa 01             	cmp    dl,0x1
c00195a0:	75 05                	jne    c00195a7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c00195a2:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00195a5:	eb 32                	jmp    c00195d9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00195a7:	80 fa 02             	cmp    dl,0x2
c00195aa:	75 05                	jne    c00195b1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c00195ac:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00195af:	eb 28                	jmp    c00195d9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00195b1:	80 fa 03             	cmp    dl,0x3
c00195b4:	75 05                	jne    c00195bb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c00195b6:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00195b9:	eb 1e                	jmp    c00195d9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00195bb:	31 c0                	xor    eax,eax
c00195bd:	80 fa 04             	cmp    dl,0x4
c00195c0:	74 17                	je     c00195d9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00195c2:	80 fa 05             	cmp    dl,0x5
c00195c5:	75 05                	jne    c00195cc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c00195c7:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00195ca:	eb 0d                	jmp    c00195d9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00195cc:	80 fa 06             	cmp    dl,0x6
c00195cf:	75 05                	jne    c00195d6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c00195d1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00195d4:	eb 03                	jmp    c00195d9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00195d6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00195d9:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00195de:	0f 94 c2             	sete   dl
c00195e1:	80 f9 05             	cmp    cl,0x5
c00195e4:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c00195e8:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c00195ed:	d3 e0                	shl    eax,cl
c00195ef:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c00195f3:	74 0a                	je     c00195ff <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c00195f5:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00195f8:	b9 07 00 00 00       	mov    ecx,0x7
c00195fd:	eb 37                	jmp    c0019636 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00195ff:	01 f8                	add    eax,edi
c0019601:	b9 03 00 00 00       	mov    ecx,0x3
c0019606:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001960b:	74 2b                	je     c0019638 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001960d:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019612:	75 0d                	jne    c0019621 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019614:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019618:	01 c8                	add    eax,ecx
c001961a:	b9 04 00 00 00       	mov    ecx,0x4
c001961f:	eb 17                	jmp    c0019638 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019621:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019624:	b9 07 00 00 00       	mov    ecx,0x7
c0019629:	eb 0d                	jmp    c0019638 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001962b:	b9 02 00 00 00       	mov    ecx,0x2
c0019630:	b2 01                	mov    dl,0x1
c0019632:	31 c0                	xor    eax,eax
c0019634:	eb 02                	jmp    c0019638 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019636:	31 d2                	xor    edx,edx
c0019638:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001963c:	89 0b                	mov    DWORD PTR [ebx],ecx
c001963e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019642:	88 11                	mov    BYTE PTR [ecx],dl
c0019644:	5a                   	pop    edx
c0019645:	5b                   	pop    ebx
c0019646:	5e                   	pop    esi
c0019647:	5f                   	pop    edi
c0019648:	c3                   	ret    

c0019649 <Krnl::smpEntry()>:
c0019649:	eb fe                	jmp    c0019649 <Krnl::smpEntry()>

c001964b <Krnl::startCPU(int)>:
c001964b:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0019650:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019657:	0f 84 36 01 00 00    	je     c0019793 <Krnl::startCPU(int)+0x148>
c001965d:	53                   	push   ebx
c001965e:	83 ec 10             	sub    esp,0x10
c0019661:	fa                   	cli    
c0019662:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c0019668:	6a 1b                	push   0x1b
c001966a:	ff 35 08 d7 02 c0    	push   DWORD PTR ds:0xc002d708
c0019670:	e8 cb 54 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c0019675:	25 00 f0 ff ff       	and    eax,0xfffff000
c001967a:	89 c3                	mov    ebx,eax
c001967c:	58                   	pop    eax
c001967d:	5a                   	pop    edx
c001967e:	53                   	push   ebx
c001967f:	68 1c b3 02 c0       	push   0xc002b31c
c0019684:	e8 40 8f ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c0019689:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019693:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019697:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00196a1:	c1 e0 18             	shl    eax,0x18
c00196a4:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c00196aa:	83 c4 10             	add    esp,0x10
c00196ad:	81 e2 ff ff ff 00    	and    edx,0xffffff
c00196b3:	09 c2                	or     edx,eax
c00196b5:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c00196bb:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c00196c1:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00196c7:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c00196cd:	80 cd c5             	or     ch,0xc5
c00196d0:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00196d6:	f3 90                	pause  
c00196d8:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00196da:	0f ba e1 0c          	bt     ecx,0xc
c00196de:	72 f6                	jb     c00196d6 <Krnl::startCPU(int)+0x8b>
c00196e0:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00196e6:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00196ec:	09 c1                	or     ecx,eax
c00196ee:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c00196f4:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00196fa:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019700:	80 cd 85             	or     ch,0x85
c0019703:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019709:	f3 90                	pause  
c001970b:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001970d:	0f ba e1 0c          	bt     ecx,0xc
c0019711:	72 f6                	jb     c0019709 <Krnl::startCPU(int)+0xbe>
c0019713:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001971d:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019723:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019729:	09 c1                	or     ecx,eax
c001972b:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019731:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019737:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c001973d:	81 c9 02 06 00 00    	or     ecx,0x602
c0019743:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019749:	f3 90                	pause  
c001974b:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001974d:	0f ba e1 0c          	bt     ecx,0xc
c0019751:	72 f6                	jb     c0019749 <Krnl::startCPU(int)+0xfe>
c0019753:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001975d:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019763:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019769:	09 c8                	or     eax,ecx
c001976b:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019771:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019777:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001977c:	0d 02 06 00 00       	or     eax,0x602
c0019781:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019787:	f3 90                	pause  
c0019789:	8b 02                	mov    eax,DWORD PTR [edx]
c001978b:	0f ba e0 0c          	bt     eax,0xc
c001978f:	72 f6                	jb     c0019787 <Krnl::startCPU(int)+0x13c>
c0019791:	eb fe                	jmp    c0019791 <Krnl::startCPU(int)+0x146>
c0019793:	c3                   	ret    

c0019794 <Krnl::startCPUs()>:
c0019794:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0019799:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001979f:	88 c2                	mov    dl,al
c00197a1:	83 e2 0a             	and    edx,0xa
c00197a4:	80 fa 0a             	cmp    dl,0xa
c00197a7:	75 09                	jne    c00197b2 <Krnl::startCPUs()+0x1e>
c00197a9:	a8 01                	test   al,0x1
c00197ab:	74 05                	je     c00197b2 <Krnl::startCPUs()+0x1e>
c00197ad:	e9 e9 69 fe ff       	jmp    c000019b <prepareTramp>
c00197b2:	c3                   	ret    
c00197b3:	90                   	nop

c00197b4 <EnvVarContainer::getEnv(char const*)>:
c00197b4:	57                   	push   edi
c00197b5:	56                   	push   esi
c00197b6:	53                   	push   ebx
c00197b7:	31 db                	xor    ebx,ebx
c00197b9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00197bd:	39 1e                	cmp    DWORD PTR [esi],ebx
c00197bf:	7e 2b                	jle    c00197ec <EnvVarContainer::getEnv(char const*)+0x38>
c00197c1:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c00197c8:	50                   	push   eax
c00197c9:	50                   	push   eax
c00197ca:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00197cd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c00197d0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00197d4:	e8 bf 70 fe ff       	call   c0000898 <strcmp>
c00197d9:	83 c4 10             	add    esp,0x10
c00197dc:	85 c0                	test   eax,eax
c00197de:	75 09                	jne    c00197e9 <EnvVarContainer::getEnv(char const*)+0x35>
c00197e0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00197e3:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c00197e7:	eb 05                	jmp    c00197ee <EnvVarContainer::getEnv(char const*)+0x3a>
c00197e9:	43                   	inc    ebx
c00197ea:	eb d1                	jmp    c00197bd <EnvVarContainer::getEnv(char const*)+0x9>
c00197ec:	31 c0                	xor    eax,eax
c00197ee:	5b                   	pop    ebx
c00197ef:	5e                   	pop    esi
c00197f0:	5f                   	pop    edi
c00197f1:	c3                   	ret    

c00197f2 <EnvVarContainer::setEnv(char const*, char const*)>:
c00197f2:	55                   	push   ebp
c00197f3:	57                   	push   edi
c00197f4:	56                   	push   esi
c00197f5:	53                   	push   ebx
c00197f6:	83 ec 28             	sub    esp,0x28
c00197f9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00197fd:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0019801:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0019805:	56                   	push   esi
c0019806:	e8 61 6f fe ff       	call   c000076c <strlen>
c001980b:	40                   	inc    eax
c001980c:	89 04 24             	mov    DWORD PTR [esp],eax
c001980f:	e8 88 5d ff ff       	call   c000f59c <malloc>
c0019814:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019817:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001981b:	e8 4c 6f fe ff       	call   c000076c <strlen>
c0019820:	40                   	inc    eax
c0019821:	89 04 24             	mov    DWORD PTR [esp],eax
c0019824:	e8 73 5d ff ff       	call   c000f59c <malloc>
c0019829:	89 34 24             	mov    DWORD PTR [esp],esi
c001982c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019830:	e8 37 6f fe ff       	call   c000076c <strlen>
c0019835:	83 c4 0c             	add    esp,0xc
c0019838:	40                   	inc    eax
c0019839:	50                   	push   eax
c001983a:	6a 00                	push   0x0
c001983c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019840:	e8 0b 6f fe ff       	call   c0000750 <memset>
c0019845:	89 34 24             	mov    DWORD PTR [esp],esi
c0019848:	e8 1f 6f fe ff       	call   c000076c <strlen>
c001984d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019851:	8d 48 01             	lea    ecx,[eax+0x1]
c0019854:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019856:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019859:	89 de                	mov    esi,ebx
c001985b:	e8 0c 6f fe ff       	call   c000076c <strlen>
c0019860:	83 c4 0c             	add    esp,0xc
c0019863:	40                   	inc    eax
c0019864:	50                   	push   eax
c0019865:	6a 00                	push   0x0
c0019867:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001986b:	e8 e0 6e fe ff       	call   c0000750 <memset>
c0019870:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019873:	e8 f4 6e fe ff       	call   c000076c <strlen>
c0019878:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001987c:	8d 48 01             	lea    ecx,[eax+0x1]
c001987f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019881:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019884:	40                   	inc    eax
c0019885:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019888:	c1 e0 03             	shl    eax,0x3
c001988b:	5a                   	pop    edx
c001988c:	59                   	pop    ecx
c001988d:	50                   	push   eax
c001988e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019891:	e8 f2 5c ff ff       	call   c000f588 <realloc>
c0019896:	8d 74 24 18          	lea    esi,[esp+0x18]
c001989a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001989d:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00198a0:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00198a4:	b9 08 00 00 00       	mov    ecx,0x8
c00198a9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00198ab:	83 c4 2c             	add    esp,0x2c
c00198ae:	5b                   	pop    ebx
c00198af:	5e                   	pop    esi
c00198b0:	5f                   	pop    edi
c00198b1:	5d                   	pop    ebp
c00198b2:	c3                   	ret    
c00198b3:	90                   	nop

c00198b4 <EnvVarContainer::deleteEnv(char const*)>:
c00198b4:	c3                   	ret    
c00198b5:	90                   	nop

c00198b6 <EnvVarContainer::loadFrom(char const*, char const*)>:
c00198b6:	55                   	push   ebp
c00198b7:	57                   	push   edi
c00198b8:	56                   	push   esi
c00198b9:	53                   	push   ebx
c00198ba:	81 ec 38 01 00 00    	sub    esp,0x138
c00198c0:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00198c7:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c00198ce:	68 14 01 00 00       	push   0x114
c00198d3:	e8 c4 5c ff ff       	call   c000f59c <malloc>
c00198d8:	83 c4 0c             	add    esp,0xc
c00198db:	89 c3                	mov    ebx,eax
c00198dd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00198e0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00198e7:	50                   	push   eax
c00198e8:	e8 3b 92 ff ff       	call   c0012b28 <File::File(char const*, Process*)>
c00198ed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00198f0:	e8 05 95 ff ff       	call   c0012dfa <File::exists()>
c00198f5:	83 c4 10             	add    esp,0x10
c00198f8:	84 c0                	test   al,al
c00198fa:	75 31                	jne    c001992d <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c00198fc:	50                   	push   eax
c00198fd:	50                   	push   eax
c00198fe:	6a 12                	push   0x12
c0019900:	53                   	push   ebx
c0019901:	e8 86 92 ff ff       	call   c0012b8c <File::open(FileOpenMode)>
c0019906:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019908:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001990b:	89 34 24             	mov    DWORD PTR [esp],esi
c001990e:	e8 59 6e fe ff       	call   c000076c <strlen>
c0019913:	5a                   	pop    edx
c0019914:	31 d2                	xor    edx,edx
c0019916:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001991a:	51                   	push   ecx
c001991b:	56                   	push   esi
c001991c:	52                   	push   edx
c001991d:	50                   	push   eax
c001991e:	53                   	push   ebx
c001991f:	ff d7                	call   edi
c0019921:	83 c4 14             	add    esp,0x14
c0019924:	53                   	push   ebx
c0019925:	e8 c0 92 ff ff       	call   c0012bea <File::close()>
c001992a:	83 c4 10             	add    esp,0x10
c001992d:	56                   	push   esi
c001992e:	31 f6                	xor    esi,esi
c0019930:	68 00 01 00 00       	push   0x100
c0019935:	6a 00                	push   0x0
c0019937:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001993b:	50                   	push   eax
c001993c:	e8 0f 6e fe ff       	call   c0000750 <memset>
c0019941:	5f                   	pop    edi
c0019942:	58                   	pop    eax
c0019943:	6a 01                	push   0x1
c0019945:	53                   	push   ebx
c0019946:	e8 41 92 ff ff       	call   c0012b8c <File::open(FileOpenMode)>
c001994b:	83 c4 10             	add    esp,0x10
c001994e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019956:	83 ec 0c             	sub    esp,0xc
c0019959:	8b 03                	mov    eax,DWORD PTR [ebx]
c001995b:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001995f:	51                   	push   ecx
c0019960:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019964:	52                   	push   edx
c0019965:	6a 00                	push   0x0
c0019967:	6a 01                	push   0x1
c0019969:	53                   	push   ebx
c001996a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001996d:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019971:	83 c4 20             	add    esp,0x20
c0019974:	3c 0d                	cmp    al,0xd
c0019976:	0f 84 09 01 00 00    	je     c0019a85 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001997c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019981:	0f 84 ef 00 00 00    	je     c0019a76 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019987:	3c 0a                	cmp    al,0xa
c0019989:	74 13                	je     c001999e <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c001998b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019990:	74 0c                	je     c001999e <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019992:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0019998:	0f 8e d8 00 00 00    	jle    c0019a76 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c001999e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00199a2:	83 ec 0c             	sub    esp,0xc
c00199a5:	8d 78 01             	lea    edi,[eax+0x1]
c00199a8:	57                   	push   edi
c00199a9:	e8 ee 5b ff ff       	call   c000f59c <malloc>
c00199ae:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c00199b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00199b6:	8d 56 04             	lea    edx,[esi+0x4]
c00199b9:	89 14 24             	mov    DWORD PTR [esp],edx
c00199bc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00199c0:	e8 d7 5b ff ff       	call   c000f59c <malloc>
c00199c5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00199c9:	83 c4 0c             	add    esp,0xc
c00199cc:	57                   	push   edi
c00199cd:	6a 00                	push   0x0
c00199cf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00199d3:	e8 78 6d fe ff       	call   c0000750 <memset>
c00199d8:	8d 74 24 30          	lea    esi,[esp+0x30]
c00199dc:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00199e0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00199e4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00199e6:	83 c4 0c             	add    esp,0xc
c00199e9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00199ed:	52                   	push   edx
c00199ee:	6a 00                	push   0x0
c00199f0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00199f4:	e8 57 6d fe ff       	call   c0000750 <memset>
c00199f9:	8d 74 24 30          	lea    esi,[esp+0x30]
c00199fd:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0019a01:	89 34 24             	mov    DWORD PTR [esp],esi
c0019a04:	e8 63 6d fe ff       	call   c000076c <strlen>
c0019a09:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0019a0d:	89 c1                	mov    ecx,eax
c0019a0f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019a11:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019a14:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0019a17:	40                   	inc    eax
c0019a18:	83 c4 10             	add    esp,0x10
c0019a1b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019a1e:	85 d2                	test   edx,edx
c0019a20:	75 0c                	jne    c0019a2e <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0019a22:	83 ec 0c             	sub    esp,0xc
c0019a25:	6a 08                	push   0x8
c0019a27:	e8 70 5b ff ff       	call   c000f59c <malloc>
c0019a2c:	eb 0c                	jmp    c0019a3a <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0019a2e:	c1 e0 03             	shl    eax,0x3
c0019a31:	51                   	push   ecx
c0019a32:	51                   	push   ecx
c0019a33:	50                   	push   eax
c0019a34:	52                   	push   edx
c0019a35:	e8 4e 5b ff ff       	call   c000f588 <realloc>
c0019a3a:	83 c4 10             	add    esp,0x10
c0019a3d:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019a40:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019a43:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0019a46:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019a4a:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019a4e:	b9 08 00 00 00       	mov    ecx,0x8
c0019a53:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019a55:	31 f6                	xor    esi,esi
c0019a57:	50                   	push   eax
c0019a58:	68 00 01 00 00       	push   0x100
c0019a5d:	6a 00                	push   0x0
c0019a5f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019a63:	50                   	push   eax
c0019a64:	e8 e7 6c fe ff       	call   c0000750 <memset>
c0019a69:	83 c4 10             	add    esp,0x10
c0019a6c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019a74:	eb 0f                	jmp    c0019a85 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019a76:	3c 3d                	cmp    al,0x3d
c0019a78:	74 07                	je     c0019a81 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0019a7a:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0019a7e:	46                   	inc    esi
c0019a7f:	eb 04                	jmp    c0019a85 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019a81:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0019a85:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019a8a:	0f 85 c6 fe ff ff    	jne    c0019956 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0019a90:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019a96:	5b                   	pop    ebx
c0019a97:	5e                   	pop    esi
c0019a98:	5f                   	pop    edi
c0019a99:	5d                   	pop    ebp
c0019a9a:	c3                   	ret    
c0019a9b:	90                   	nop

c0019a9c <EnvVarContainer::__loadSystem()>:
c0019a9c:	83 ec 10             	sub    esp,0x10
c0019a9f:	68 40 cc 02 c0       	push   0xc002cc40
c0019aa4:	68 2d b3 02 c0       	push   0xc002b32d
c0019aa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019aad:	e8 04 fe ff ff       	call   c00198b6 <EnvVarContainer::loadFrom(char const*, char const*)>
c0019ab2:	83 c4 1c             	add    esp,0x1c
c0019ab5:	c3                   	ret    

c0019ab6 <EnvVarContainer::__loadUser()>:
c0019ab6:	c3                   	ret    
c0019ab7:	90                   	nop

c0019ab8 <EnvVarContainer::EnvVarContainer(Process*)>:
c0019ab8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019abc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019ac2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ac6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019aca:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019acd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ad1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019ad8:	90                   	nop
c0019ad9:	c3                   	ret    

c0019ada <EnvVarContainer::~EnvVarContainer()>:
c0019ada:	83 ec 0c             	sub    esp,0xc
c0019add:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ae1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019ae4:	85 c0                	test   eax,eax
c0019ae6:	74 1d                	je     c0019b05 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019ae8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019aec:	8b 00                	mov    eax,DWORD PTR [eax]
c0019aee:	85 c0                	test   eax,eax
c0019af0:	74 13                	je     c0019b05 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019af2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019af6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019af9:	83 ec 0c             	sub    esp,0xc
c0019afc:	50                   	push   eax
c0019afd:	e8 aa 5a ff ff       	call   c000f5ac <free>
c0019b02:	83 c4 10             	add    esp,0x10
c0019b05:	90                   	nop
c0019b06:	83 c4 0c             	add    esp,0xc
c0019b09:	c3                   	ret    

c0019b0a <Krnl::getEnv(Process*, char const*)>:
c0019b0a:	53                   	push   ebx
c0019b0b:	83 ec 08             	sub    esp,0x8
c0019b0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b12:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019b16:	39 05 50 0c 03 c0    	cmp    DWORD PTR ds:0xc0030c50,eax
c0019b1c:	74 04                	je     c0019b22 <Krnl::getEnv(Process*, char const*)+0x18>
c0019b1e:	85 c0                	test   eax,eax
c0019b20:	75 0b                	jne    c0019b2d <Krnl::getEnv(Process*, char const*)+0x23>
c0019b22:	a1 34 02 03 c0       	mov    eax,ds:0xc0030234
c0019b27:	85 c0                	test   eax,eax
c0019b29:	75 19                	jne    c0019b44 <Krnl::getEnv(Process*, char const*)+0x3a>
c0019b2b:	eb 27                	jmp    c0019b54 <Krnl::getEnv(Process*, char const*)+0x4a>
c0019b2d:	52                   	push   edx
c0019b2e:	52                   	push   edx
c0019b2f:	53                   	push   ebx
c0019b30:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c0019b36:	e8 79 fc ff ff       	call   c00197b4 <EnvVarContainer::getEnv(char const*)>
c0019b3b:	83 c4 10             	add    esp,0x10
c0019b3e:	85 c0                	test   eax,eax
c0019b40:	75 28                	jne    c0019b6a <Krnl::getEnv(Process*, char const*)+0x60>
c0019b42:	eb de                	jmp    c0019b22 <Krnl::getEnv(Process*, char const*)+0x18>
c0019b44:	52                   	push   edx
c0019b45:	52                   	push   edx
c0019b46:	53                   	push   ebx
c0019b47:	50                   	push   eax
c0019b48:	e8 67 fc ff ff       	call   c00197b4 <EnvVarContainer::getEnv(char const*)>
c0019b4d:	83 c4 10             	add    esp,0x10
c0019b50:	85 c0                	test   eax,eax
c0019b52:	75 16                	jne    c0019b6a <Krnl::getEnv(Process*, char const*)+0x60>
c0019b54:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019b58:	a1 38 02 03 c0       	mov    eax,ds:0xc0030238
c0019b5d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019b61:	83 c4 08             	add    esp,0x8
c0019b64:	5b                   	pop    ebx
c0019b65:	e9 4a fc ff ff       	jmp    c00197b4 <EnvVarContainer::getEnv(char const*)>
c0019b6a:	83 c4 08             	add    esp,0x8
c0019b6d:	5b                   	pop    ebx
c0019b6e:	c3                   	ret    

c0019b6f <Krnl::setEnvSystem(char const*, char const*)>:
c0019b6f:	83 ec 10             	sub    esp,0x10
c0019b72:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019b76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019b7a:	ff 35 38 02 03 c0    	push   DWORD PTR ds:0xc0030238
c0019b80:	e8 6d fc ff ff       	call   c00197f2 <EnvVarContainer::setEnv(char const*, char const*)>
c0019b85:	83 c4 1c             	add    esp,0x1c
c0019b88:	c3                   	ret    

c0019b89 <Krnl::setEnvUser(char const*, char const*)>:
c0019b89:	a1 34 02 03 c0       	mov    eax,ds:0xc0030234
c0019b8e:	85 c0                	test   eax,eax
c0019b90:	74 15                	je     c0019ba7 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0019b92:	83 ec 10             	sub    esp,0x10
c0019b95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019b99:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019b9d:	50                   	push   eax
c0019b9e:	e8 4f fc ff ff       	call   c00197f2 <EnvVarContainer::setEnv(char const*, char const*)>
c0019ba3:	83 c4 1c             	add    esp,0x1c
c0019ba6:	c3                   	ret    
c0019ba7:	c3                   	ret    

c0019ba8 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0019ba8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bac:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c0019bb2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019bb6:	e9 37 fc ff ff       	jmp    c00197f2 <EnvVarContainer::setEnv(char const*, char const*)>

c0019bbb <Krnl::deleteEnvSystem(char const*)>:
c0019bbb:	c3                   	ret    

c0019bbc <Krnl::deleteEnvUser(char const*)>:
c0019bbc:	c3                   	ret    

c0019bbd <Krnl::deleteEnvProcess(Process*, char const*)>:
c0019bbd:	c3                   	ret    

c0019bbe <Krnl::newProcessEnv(Process*)>:
c0019bbe:	83 ec 28             	sub    esp,0x28
c0019bc1:	6a 0c                	push   0xc
c0019bc3:	e8 d4 59 ff ff       	call   c000f59c <malloc>
c0019bc8:	5a                   	pop    edx
c0019bc9:	59                   	pop    ecx
c0019bca:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019bce:	50                   	push   eax
c0019bcf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019bd3:	e8 e0 fe ff ff       	call   c0019ab8 <EnvVarContainer::EnvVarContainer(Process*)>
c0019bd8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019bdc:	83 c4 2c             	add    esp,0x2c
c0019bdf:	c3                   	ret    

c0019be0 <Krnl::copyProcessEnv(Process*, Process*)>:
c0019be0:	57                   	push   edi
c0019be1:	56                   	push   esi
c0019be2:	53                   	push   ebx
c0019be3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019be7:	83 ec 0c             	sub    esp,0xc
c0019bea:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c0019bf0:	6a 0c                	push   0xc
c0019bf2:	e8 a5 59 ff ff       	call   c000f59c <malloc>
c0019bf7:	89 c3                	mov    ebx,eax
c0019bf9:	58                   	pop    eax
c0019bfa:	5a                   	pop    edx
c0019bfb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019bff:	53                   	push   ebx
c0019c00:	e8 b3 fe ff ff       	call   c0019ab8 <EnvVarContainer::EnvVarContainer(Process*)>
c0019c05:	8b 07                	mov    eax,DWORD PTR [edi]
c0019c07:	89 03                	mov    DWORD PTR [ebx],eax
c0019c09:	c1 e0 03             	shl    eax,0x3
c0019c0c:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c0f:	e8 88 59 ff ff       	call   c000f59c <malloc>
c0019c14:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019c17:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0019c19:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0019c1c:	c1 e1 03             	shl    ecx,0x3
c0019c1f:	89 c7                	mov    edi,eax
c0019c21:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019c23:	83 c4 10             	add    esp,0x10
c0019c26:	89 d8                	mov    eax,ebx
c0019c28:	5b                   	pop    ebx
c0019c29:	5e                   	pop    esi
c0019c2a:	5f                   	pop    edi
c0019c2b:	c3                   	ret    

c0019c2c <Krnl::loadSystemEnv()>:
c0019c2c:	53                   	push   ebx
c0019c2d:	83 ec 14             	sub    esp,0x14
c0019c30:	6a 0c                	push   0xc
c0019c32:	e8 65 59 ff ff       	call   c000f59c <malloc>
c0019c37:	89 c3                	mov    ebx,eax
c0019c39:	58                   	pop    eax
c0019c3a:	5a                   	pop    edx
c0019c3b:	ff 35 50 0c 03 c0    	push   DWORD PTR ds:0xc0030c50
c0019c41:	53                   	push   ebx
c0019c42:	e8 71 fe ff ff       	call   c0019ab8 <EnvVarContainer::EnvVarContainer(Process*)>
c0019c47:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c4a:	89 1d 38 02 03 c0    	mov    DWORD PTR ds:0xc0030238,ebx
c0019c50:	e8 47 fe ff ff       	call   c0019a9c <EnvVarContainer::__loadSystem()>
c0019c55:	83 c4 18             	add    esp,0x18
c0019c58:	5b                   	pop    ebx
c0019c59:	c3                   	ret    

c0019c5a <Krnl::loadUserEnv()>:
c0019c5a:	53                   	push   ebx
c0019c5b:	83 ec 14             	sub    esp,0x14
c0019c5e:	6a 0c                	push   0xc
c0019c60:	e8 37 59 ff ff       	call   c000f59c <malloc>
c0019c65:	89 c3                	mov    ebx,eax
c0019c67:	58                   	pop    eax
c0019c68:	5a                   	pop    edx
c0019c69:	ff 35 50 0c 03 c0    	push   DWORD PTR ds:0xc0030c50
c0019c6f:	53                   	push   ebx
c0019c70:	e8 43 fe ff ff       	call   c0019ab8 <EnvVarContainer::EnvVarContainer(Process*)>
c0019c75:	89 1d 34 02 03 c0    	mov    DWORD PTR ds:0xc0030234,ebx
c0019c7b:	83 c4 18             	add    esp,0x18
c0019c7e:	5b                   	pop    ebx
c0019c7f:	c3                   	ret    

c0019c80 <Krnl::flushEnv()>:
c0019c80:	c3                   	ret    

c0019c81 <Krnl::getProcessTotalEnvCount(Process*)>:
c0019c81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c85:	8b 15 34 02 03 c0    	mov    edx,DWORD PTR ds:0xc0030234
c0019c8b:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019c91:	a1 38 02 03 c0       	mov    eax,ds:0xc0030238
c0019c96:	8b 00                	mov    eax,DWORD PTR [eax]
c0019c98:	03 01                	add    eax,DWORD PTR [ecx]
c0019c9a:	85 d2                	test   edx,edx
c0019c9c:	74 02                	je     c0019ca0 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0019c9e:	03 02                	add    eax,DWORD PTR [edx]
c0019ca0:	c3                   	ret    

c0019ca1 <Krnl::getProcessEnvPair(Process*, int)>:
c0019ca1:	57                   	push   edi
c0019ca2:	56                   	push   esi
c0019ca3:	8b 35 34 02 03 c0    	mov    esi,DWORD PTR ds:0xc0030234
c0019ca9:	53                   	push   ebx
c0019caa:	85 f6                	test   esi,esi
c0019cac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019cb0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019cb4:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019cba:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019cbe:	8b 01                	mov    eax,DWORD PTR [ecx]
c0019cc0:	75 16                	jne    c0019cd8 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0019cc2:	39 c2                	cmp    edx,eax
c0019cc4:	7c 16                	jl     c0019cdc <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019cc6:	8b 0d 38 02 03 c0    	mov    ecx,DWORD PTR ds:0xc0030238
c0019ccc:	8b 31                	mov    esi,DWORD PTR [ecx]
c0019cce:	01 c6                	add    esi,eax
c0019cd0:	39 d6                	cmp    esi,edx
c0019cd2:	7e 3c                	jle    c0019d10 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019cd4:	29 c2                	sub    edx,eax
c0019cd6:	eb 04                	jmp    c0019cdc <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019cd8:	39 c2                	cmp    edx,eax
c0019cda:	7d 05                	jge    c0019ce1 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0019cdc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0019cdf:	eb 20                	jmp    c0019d01 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0019ce1:	8b 3e                	mov    edi,DWORD PTR [esi]
c0019ce3:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0019ce6:	39 d1                	cmp    ecx,edx
c0019ce8:	7e 04                	jle    c0019cee <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0019cea:	29 c2                	sub    edx,eax
c0019cec:	eb 10                	jmp    c0019cfe <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0019cee:	8b 35 38 02 03 c0    	mov    esi,DWORD PTR ds:0xc0030238
c0019cf4:	03 0e                	add    ecx,DWORD PTR [esi]
c0019cf6:	39 d1                	cmp    ecx,edx
c0019cf8:	7e 16                	jle    c0019d10 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019cfa:	29 c2                	sub    edx,eax
c0019cfc:	29 fa                	sub    edx,edi
c0019cfe:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019d01:	8d 14 d0             	lea    edx,[eax+edx*8]
c0019d04:	8b 02                	mov    eax,DWORD PTR [edx]
c0019d06:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0019d09:	89 03                	mov    DWORD PTR [ebx],eax
c0019d0b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0019d0e:	eb 1d                	jmp    c0019d2d <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0019d10:	83 ec 0c             	sub    esp,0xc
c0019d13:	68 4f b3 02 c0       	push   0xc002b34f
c0019d18:	e8 18 00 00 00       	call   c0019d35 <Krnl::panic(char const*)>
c0019d1d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0019d23:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019d2a:	83 c4 10             	add    esp,0x10
c0019d2d:	89 d8                	mov    eax,ebx
c0019d2f:	5b                   	pop    ebx
c0019d30:	5e                   	pop    esi
c0019d31:	5f                   	pop    edi
c0019d32:	c2 04 00             	ret    0x4

c0019d35 <Krnl::panic(char const*)>:
c0019d35:	55                   	push   ebp
c0019d36:	89 e5                	mov    ebp,esp
c0019d38:	53                   	push   ebx
c0019d39:	83 ec 10             	sub    esp,0x10
c0019d3c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0019d3f:	fa                   	cli    
c0019d40:	c6 05 44 02 03 c0 01 	mov    BYTE PTR ds:0xc0030244,0x1
c0019d47:	53                   	push   ebx
c0019d48:	e8 a9 58 ff ff       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c0019d4d:	58                   	pop    eax
c0019d4e:	c6 05 40 c6 02 c0 00 	mov    BYTE PTR ds:0xc002c640,0x0
c0019d55:	5a                   	pop    edx
c0019d56:	53                   	push   ebx
c0019d57:	68 69 b3 02 c0       	push   0xc002b369
c0019d5c:	e8 68 88 ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c0019d61:	59                   	pop    ecx
c0019d62:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019d67:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d6d:	e8 93 65 ff ff       	call   c0010305 <setActiveTerminal(VgaText*)>
c0019d72:	83 c4 0c             	add    esp,0xc
c0019d75:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019d7a:	6a 01                	push   0x1
c0019d7c:	6a 0f                	push   0xf
c0019d7e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d84:	e8 db 63 ff ff       	call   c0010164 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019d89:	58                   	pop    eax
c0019d8a:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019d8f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d95:	e8 ec 68 ff ff       	call   c0010686 <VgaText::clearScreen()>
c0019d9a:	58                   	pop    eax
c0019d9b:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019da0:	5a                   	pop    edx
c0019da1:	68 82 b3 02 c0       	push   0xc002b382
c0019da6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019dac:	e8 61 6a ff ff       	call   c0010812 <VgaText::puts(char const*)>
c0019db1:	59                   	pop    ecx
c0019db2:	58                   	pop    eax
c0019db3:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019db8:	68 28 b4 02 c0       	push   0xc002b428
c0019dbd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019dc3:	e8 4a 6a ff ff       	call   c0010812 <VgaText::puts(char const*)>
c0019dc8:	58                   	pop    eax
c0019dc9:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019dce:	5a                   	pop    edx
c0019dcf:	68 9e b3 02 c0       	push   0xc002b39e
c0019dd4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019dda:	e8 33 6a ff ff       	call   c0010812 <VgaText::puts(char const*)>
c0019ddf:	59                   	pop    ecx
c0019de0:	58                   	pop    eax
c0019de1:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019de6:	53                   	push   ebx
c0019de7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ded:	e8 20 6a ff ff       	call   c0010812 <VgaText::puts(char const*)>
c0019df2:	58                   	pop    eax
c0019df3:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019df8:	5a                   	pop    edx
c0019df9:	68 be b3 02 c0       	push   0xc002b3be
c0019dfe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e04:	e8 09 6a ff ff       	call   c0010812 <VgaText::puts(char const*)>
c0019e09:	a1 40 02 03 c0       	mov    eax,ds:0xc0030240
c0019e0e:	83 c4 10             	add    esp,0x10
c0019e11:	85 c0                	test   eax,eax
c0019e13:	74 02                	je     c0019e17 <Krnl::panic(char const*)+0xe2>
c0019e15:	ff d0                	call   eax
c0019e17:	83 ec 0c             	sub    esp,0xc
c0019e1a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019e1d:	e8 8c 30 00 00       	call   c001ceae <Thr::getDriverNameFromAddress(unsigned long)>
c0019e22:	83 c4 10             	add    esp,0x10
c0019e25:	89 c3                	mov    ebx,eax
c0019e27:	85 c0                	test   eax,eax
c0019e29:	0f 84 4e 02 00 00    	je     c001a07d <Krnl::panic(char const*)+0x348>
c0019e2f:	83 ec 08             	sub    esp,0x8
c0019e32:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019e37:	68 64 b4 02 c0       	push   0xc002b464
c0019e3c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e42:	e8 cb 69 ff ff       	call   c0010812 <VgaText::puts(char const*)>
c0019e47:	58                   	pop    eax
c0019e48:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019e4d:	5a                   	pop    edx
c0019e4e:	68 9e b3 02 c0       	push   0xc002b39e
c0019e53:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e59:	e8 b4 69 ff ff       	call   c0010812 <VgaText::puts(char const*)>
c0019e5e:	59                   	pop    ecx
c0019e5f:	58                   	pop    eax
c0019e60:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019e65:	53                   	push   ebx
c0019e66:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e6c:	e8 a1 69 ff ff       	call   c0010812 <VgaText::puts(char const*)>
c0019e71:	83 c4 10             	add    esp,0x10
c0019e74:	83 ec 08             	sub    esp,0x8
c0019e77:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019e7c:	68 bd b3 02 c0       	push   0xc002b3bd
c0019e81:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e87:	e8 86 69 ff ff       	call   c0010812 <VgaText::puts(char const*)>
c0019e8c:	58                   	pop    eax
c0019e8d:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019e92:	5a                   	pop    edx
c0019e93:	68 bc b4 02 c0       	push   0xc002b4bc
c0019e98:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e9e:	e8 6f 69 ff ff       	call   c0010812 <VgaText::puts(char const*)>
c0019ea3:	59                   	pop    ecx
c0019ea4:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019ea9:	5b                   	pop    ebx
c0019eaa:	68 fc b4 02 c0       	push   0xc002b4fc
c0019eaf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019eb5:	e8 58 69 ff ff       	call   c0010812 <VgaText::puts(char const*)>
c0019eba:	58                   	pop    eax
c0019ebb:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019ec0:	5a                   	pop    edx
c0019ec1:	68 a9 b3 02 c0       	push   0xc002b3a9
c0019ec6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ecc:	e8 41 69 ff ff       	call   c0010812 <VgaText::puts(char const*)>
c0019ed1:	59                   	pop    ecx
c0019ed2:	5b                   	pop    ebx
c0019ed3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019ed6:	68 c1 b3 02 c0       	push   0xc002b3c1
c0019edb:	e8 e9 86 ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c0019ee0:	58                   	pop    eax
c0019ee1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019ee4:	5a                   	pop    edx
c0019ee5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019ee8:	68 ca b3 02 c0       	push   0xc002b3ca
c0019eed:	e8 d7 86 ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c0019ef2:	59                   	pop    ecx
c0019ef3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019ef6:	5b                   	pop    ebx
c0019ef7:	8b 00                	mov    eax,DWORD PTR [eax]
c0019ef9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019efc:	68 d3 b3 02 c0       	push   0xc002b3d3
c0019f01:	e8 c3 86 ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c0019f06:	58                   	pop    eax
c0019f07:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019f0c:	5a                   	pop    edx
c0019f0d:	68 40 b5 02 c0       	push   0xc002b540
c0019f12:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f18:	e8 f5 68 ff ff       	call   c0010812 <VgaText::puts(char const*)>
c0019f1d:	59                   	pop    ecx
c0019f1e:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019f23:	5b                   	pop    ebx
c0019f24:	68 dc b3 02 c0       	push   0xc002b3dc
c0019f29:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f2f:	e8 de 68 ff ff       	call   c0010812 <VgaText::puts(char const*)>
c0019f34:	0f 20 c0             	mov    eax,cr0
c0019f37:	5a                   	pop    edx
c0019f38:	59                   	pop    ecx
c0019f39:	50                   	push   eax
c0019f3a:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019f3f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f45:	e8 82 68 ff ff       	call   c00107cc <VgaText::putx(unsigned int)>
c0019f4a:	5b                   	pop    ebx
c0019f4b:	58                   	pop    eax
c0019f4c:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019f51:	68 e6 b3 02 c0       	push   0xc002b3e6
c0019f56:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f5c:	e8 b1 68 ff ff       	call   c0010812 <VgaText::puts(char const*)>
c0019f61:	0f 20 d0             	mov    eax,cr2
c0019f64:	5a                   	pop    edx
c0019f65:	59                   	pop    ecx
c0019f66:	50                   	push   eax
c0019f67:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019f6c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f72:	e8 55 68 ff ff       	call   c00107cc <VgaText::putx(unsigned int)>
c0019f77:	5b                   	pop    ebx
c0019f78:	58                   	pop    eax
c0019f79:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019f7e:	68 f0 b3 02 c0       	push   0xc002b3f0
c0019f83:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f89:	e8 84 68 ff ff       	call   c0010812 <VgaText::puts(char const*)>
c0019f8e:	0f 20 d8             	mov    eax,cr3
c0019f91:	5a                   	pop    edx
c0019f92:	59                   	pop    ecx
c0019f93:	50                   	push   eax
c0019f94:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019f99:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f9f:	e8 28 68 ff ff       	call   c00107cc <VgaText::putx(unsigned int)>
c0019fa4:	5b                   	pop    ebx
c0019fa5:	58                   	pop    eax
c0019fa6:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019fab:	68 03 b4 02 c0       	push   0xc002b403
c0019fb0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fb6:	e8 57 68 ff ff       	call   c0010812 <VgaText::puts(char const*)>
c0019fbb:	0f 20 e0             	mov    eax,cr4
c0019fbe:	5a                   	pop    edx
c0019fbf:	59                   	pop    ecx
c0019fc0:	50                   	push   eax
c0019fc1:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019fc6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fcc:	e8 fb 67 ff ff       	call   c00107cc <VgaText::putx(unsigned int)>
c0019fd1:	5b                   	pop    ebx
c0019fd2:	58                   	pop    eax
c0019fd3:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019fd8:	68 0d b4 02 c0       	push   0xc002b40d
c0019fdd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fe3:	e8 2a 68 ff ff       	call   c0010812 <VgaText::puts(char const*)>
c0019fe8:	5a                   	pop    edx
c0019fe9:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019fee:	59                   	pop    ecx
c0019fef:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019ff5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019ff8:	50                   	push   eax
c0019ff9:	e8 ce 67 ff ff       	call   c00107cc <VgaText::putx(unsigned int)>
c0019ffe:	5b                   	pop    ebx
c0019fff:	58                   	pop    eax
c001a000:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c001a005:	68 24 b4 02 c0       	push   0xc002b424
c001a00a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a010:	e8 fd 67 ff ff       	call   c0010812 <VgaText::puts(char const*)>
c001a015:	5a                   	pop    edx
c001a016:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c001a01b:	59                   	pop    ecx
c001a01c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a022:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a025:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a028:	50                   	push   eax
c001a029:	e8 9e 67 ff ff       	call   c00107cc <VgaText::putx(unsigned int)>
c001a02e:	5b                   	pop    ebx
c001a02f:	58                   	pop    eax
c001a030:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c001a035:	68 24 b4 02 c0       	push   0xc002b424
c001a03a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a040:	e8 cd 67 ff ff       	call   c0010812 <VgaText::puts(char const*)>
c001a045:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c001a04a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a04d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a053:	8b 12                	mov    edx,DWORD PTR [edx]
c001a055:	59                   	pop    ecx
c001a056:	5b                   	pop    ebx
c001a057:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a05a:	50                   	push   eax
c001a05b:	e8 6c 67 ff ff       	call   c00107cc <VgaText::putx(unsigned int)>
c001a060:	83 c4 10             	add    esp,0x10
c001a063:	b2 fe                	mov    dl,0xfe
c001a065:	e4 60                	in     al,0x60
c001a067:	3c 1c                	cmp    al,0x1c
c001a069:	74 04                	je     c001a06f <Krnl::panic(char const*)+0x33a>
c001a06b:	3c 5a                	cmp    al,0x5a
c001a06d:	75 f6                	jne    c001a065 <Krnl::panic(char const*)+0x330>
c001a06f:	e4 64                	in     al,0x64
c001a071:	a8 02                	test   al,0x2
c001a073:	75 fa                	jne    c001a06f <Krnl::panic(char const*)+0x33a>
c001a075:	88 d0                	mov    al,dl
c001a077:	e6 64                	out    0x64,al
c001a079:	fa                   	cli    
c001a07a:	f4                   	hlt    
c001a07b:	eb e8                	jmp    c001a065 <Krnl::panic(char const*)+0x330>
c001a07d:	50                   	push   eax
c001a07e:	50                   	push   eax
c001a07f:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c001a084:	68 90 b4 02 c0       	push   0xc002b490
c001a089:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a08f:	e8 7e 67 ff ff       	call   c0010812 <VgaText::puts(char const*)>
c001a094:	58                   	pop    eax
c001a095:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c001a09a:	5a                   	pop    edx
c001a09b:	68 9e b3 02 c0       	push   0xc002b39e
c001a0a0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0a6:	e8 67 67 ff ff       	call   c0010812 <VgaText::puts(char const*)>
c001a0ab:	59                   	pop    ecx
c001a0ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a0b1:	5b                   	pop    ebx
c001a0b2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a0b5:	83 c0 0c             	add    eax,0xc
c001a0b8:	50                   	push   eax
c001a0b9:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c001a0be:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0c4:	e8 49 67 ff ff       	call   c0010812 <VgaText::puts(char const*)>
c001a0c9:	83 c4 10             	add    esp,0x10
c001a0cc:	e9 a3 fd ff ff       	jmp    c0019e74 <Krnl::panic(char const*)+0x13f>

c001a0d1 <Net::switchEndian16(unsigned short)>:
c001a0d1:	83 ec 04             	sub    esp,0x4
c001a0d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a0d8:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a0dc:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a0e0:	c1 f8 08             	sar    eax,0x8
c001a0e3:	89 c2                	mov    edx,eax
c001a0e5:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a0e9:	c1 e0 08             	shl    eax,0x8
c001a0ec:	09 d0                	or     eax,edx
c001a0ee:	83 c4 04             	add    esp,0x4
c001a0f1:	c3                   	ret    

c001a0f2 <Net::switchEndian32(unsigned int)>:
c001a0f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0f6:	c1 e8 18             	shr    eax,0x18
c001a0f9:	89 c2                	mov    edx,eax
c001a0fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0ff:	c1 e0 08             	shl    eax,0x8
c001a102:	25 00 00 ff 00       	and    eax,0xff0000
c001a107:	09 c2                	or     edx,eax
c001a109:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a10d:	c1 e8 08             	shr    eax,0x8
c001a110:	25 00 ff 00 00       	and    eax,0xff00
c001a115:	09 c2                	or     edx,eax
c001a117:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a11b:	c1 e0 18             	shl    eax,0x18
c001a11e:	09 d0                	or     eax,edx
c001a120:	c3                   	ret    

c001a121 <Net::crc32Calc(unsigned char*, int)>:
c001a121:	83 ec 10             	sub    esp,0x10
c001a124:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a129:	75 07                	jne    c001a132 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a12b:	b8 00 00 00 00       	mov    eax,0x0
c001a130:	eb 7c                	jmp    c001a1ae <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a132:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a137:	7f 07                	jg     c001a140 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a139:	b8 00 00 00 00       	mov    eax,0x0
c001a13e:	eb 6e                	jmp    c001a1ae <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a140:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a148:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a150:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a154:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a158:	7d 4e                	jge    c001a1a8 <Net::crc32Calc(unsigned char*, int)+0x87>
c001a15a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a15e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a162:	01 d0                	add    eax,edx
c001a164:	8a 00                	mov    al,BYTE PTR [eax]
c001a166:	0f b6 c0             	movzx  eax,al
c001a169:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a16d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a175:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a17a:	7f 26                	jg     c001a1a2 <Net::crc32Calc(unsigned char*, int)+0x81>
c001a17c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a180:	83 e0 01             	and    eax,0x1
c001a183:	74 0d                	je     c001a192 <Net::crc32Calc(unsigned char*, int)+0x71>
c001a185:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a189:	d1 e8                	shr    eax,1
c001a18b:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a190:	eb 06                	jmp    c001a198 <Net::crc32Calc(unsigned char*, int)+0x77>
c001a192:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a196:	d1 e8                	shr    eax,1
c001a198:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a19c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a1a0:	eb d3                	jmp    c001a175 <Net::crc32Calc(unsigned char*, int)+0x54>
c001a1a2:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a1a6:	eb a8                	jmp    c001a150 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a1a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1ac:	f7 d0                	not    eax
c001a1ae:	83 c4 10             	add    esp,0x10
c001a1b1:	c3                   	ret    

c001a1b2 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a1b2:	57                   	push   edi
c001a1b3:	56                   	push   esi
c001a1b4:	53                   	push   ebx
c001a1b5:	83 ec 60             	sub    esp,0x60
c001a1b8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a1bf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a1c3:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001a1cb:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001a1d0:	7f 1a                	jg     c001a1ec <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001a1d2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a1d9:	8d 50 01             	lea    edx,[eax+0x1]
c001a1dc:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a1e3:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a1e6:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001a1ea:	eb df                	jmp    c001a1cb <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001a1ec:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a1f3:	8d 50 01             	lea    edx,[eax+0x1]
c001a1f6:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a1fd:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a200:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a207:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a20b:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001a20f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a213:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001a21b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a21f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a223:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a227:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a22b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a22f:	89 c6                	mov    esi,eax
c001a231:	89 d7                	mov    edi,edx
c001a233:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a235:	89 c8                	mov    eax,ecx
c001a237:	89 fa                	mov    edx,edi
c001a239:	89 f3                	mov    ebx,esi
c001a23b:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a23f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a243:	89 04 24             	mov    DWORD PTR [esp],eax
c001a246:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a24e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a255:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a259:	8d 44 24 78          	lea    eax,[esp+0x78]
c001a25d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a261:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a269:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a26d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a271:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a275:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a279:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a27d:	89 c6                	mov    esi,eax
c001a27f:	89 d7                	mov    edi,edx
c001a281:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a283:	89 c8                	mov    eax,ecx
c001a285:	89 fa                	mov    edx,edi
c001a287:	89 f3                	mov    ebx,esi
c001a289:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a28d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a291:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a295:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a29d:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a2a4:	0f b7 c0             	movzx  eax,ax
c001a2a7:	c1 f8 08             	sar    eax,0x8
c001a2aa:	89 c1                	mov    ecx,eax
c001a2ac:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a2b3:	8d 50 01             	lea    edx,[eax+0x1]
c001a2b6:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a2bd:	88 ca                	mov    dl,cl
c001a2bf:	88 10                	mov    BYTE PTR [eax],dl
c001a2c1:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a2c8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a2cf:	8d 48 01             	lea    ecx,[eax+0x1]
c001a2d2:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001a2d9:	88 10                	mov    BYTE PTR [eax],dl
c001a2db:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a2df:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001a2e3:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001a2ea:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001a2ee:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001a2f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001a2f6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a2fa:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a2fe:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a302:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a306:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a30a:	89 c6                	mov    esi,eax
c001a30c:	89 d7                	mov    edi,edx
c001a30e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a310:	89 c8                	mov    eax,ecx
c001a312:	89 fa                	mov    edx,edi
c001a314:	89 f3                	mov    ebx,esi
c001a316:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a31a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a31e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a322:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a326:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001a32d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a334:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001a338:	50                   	push   eax
c001a339:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a33d:	e8 df fd ff ff       	call   c001a121 <Net::crc32Calc(unsigned char*, int)>
c001a342:	83 c4 08             	add    esp,0x8
c001a345:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a349:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a34d:	c1 e8 18             	shr    eax,0x18
c001a350:	89 c1                	mov    ecx,eax
c001a352:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a359:	8d 50 01             	lea    edx,[eax+0x1]
c001a35c:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a363:	88 ca                	mov    dl,cl
c001a365:	88 10                	mov    BYTE PTR [eax],dl
c001a367:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a36b:	c1 e8 10             	shr    eax,0x10
c001a36e:	89 c1                	mov    ecx,eax
c001a370:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a377:	8d 50 01             	lea    edx,[eax+0x1]
c001a37a:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a381:	88 ca                	mov    dl,cl
c001a383:	88 10                	mov    BYTE PTR [eax],dl
c001a385:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a389:	c1 e8 08             	shr    eax,0x8
c001a38c:	89 c1                	mov    ecx,eax
c001a38e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a395:	8d 50 01             	lea    edx,[eax+0x1]
c001a398:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a39f:	88 ca                	mov    dl,cl
c001a3a1:	88 10                	mov    BYTE PTR [eax],dl
c001a3a3:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a3aa:	8d 50 01             	lea    edx,[eax+0x1]
c001a3ad:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a3b4:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001a3b8:	88 10                	mov    BYTE PTR [eax],dl
c001a3ba:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a3be:	83 c4 60             	add    esp,0x60
c001a3c1:	5b                   	pop    ebx
c001a3c2:	5e                   	pop    esi
c001a3c3:	5f                   	pop    edi
c001a3c4:	c3                   	ret    

c001a3c5 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a3c5:	57                   	push   edi
c001a3c6:	56                   	push   esi
c001a3c7:	53                   	push   ebx
c001a3c8:	83 ec 70             	sub    esp,0x70
c001a3cb:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a3d2:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001a3d6:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001a3de:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a3e5:	83 c0 0e             	add    eax,0xe
c001a3e8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a3ec:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a3f3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a3f7:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a3ff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a407:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a40b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a40f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a413:	89 c6                	mov    esi,eax
c001a415:	89 d7                	mov    edi,edx
c001a417:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a419:	89 c8                	mov    eax,ecx
c001a41b:	89 fa                	mov    edx,edi
c001a41d:	89 f3                	mov    ebx,esi
c001a41f:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a423:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a427:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a42b:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a433:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a43a:	83 c0 08             	add    eax,0x8
c001a43d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001a441:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a448:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a44c:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001a454:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a458:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a45c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a460:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a464:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a468:	89 c6                	mov    esi,eax
c001a46a:	89 d7                	mov    edi,edx
c001a46c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a46e:	89 c8                	mov    eax,ecx
c001a470:	89 fa                	mov    edx,edi
c001a472:	89 f3                	mov    ebx,esi
c001a474:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a478:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a47c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a480:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a488:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a48f:	8d 50 01             	lea    edx,[eax+0x1]
c001a492:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a499:	8a 00                	mov    al,BYTE PTR [eax]
c001a49b:	0f b6 c0             	movzx  eax,al
c001a49e:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001a4a3:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a4aa:	8d 50 01             	lea    edx,[eax+0x1]
c001a4ad:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a4b4:	8a 00                	mov    al,BYTE PTR [eax]
c001a4b6:	0f b6 c0             	movzx  eax,al
c001a4b9:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001a4be:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001a4c3:	c1 e0 08             	shl    eax,0x8
c001a4c6:	89 c2                	mov    edx,eax
c001a4c8:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a4cc:	09 d0                	or     eax,edx
c001a4ce:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a4d5:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001a4d9:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001a4e1:	75 46                	jne    c001a529 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a4e3:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a4ea:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a4ed:	66 3d dc 05          	cmp    ax,0x5dc
c001a4f1:	77 16                	ja     c001a509 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001a4f3:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a4fa:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a4fd:	0f b7 c0             	movzx  eax,ax
c001a500:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001a507:	eb 20                	jmp    c001a529 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a509:	83 ec 0c             	sub    esp,0xc
c001a50c:	68 68 b5 02 c0       	push   0xc002b568
c001a511:	e8 b3 80 ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c001a516:	83 c4 10             	add    esp,0x10
c001a519:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a520:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001a524:	e9 17 01 00 00       	jmp    c001a640 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001a529:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a530:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a537:	8b 12                	mov    edx,DWORD PTR [edx]
c001a539:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001a53d:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a544:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001a548:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a54c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a550:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a554:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a558:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a55c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a560:	89 c6                	mov    esi,eax
c001a562:	89 d7                	mov    edi,edx
c001a564:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a566:	89 c8                	mov    eax,ecx
c001a568:	89 fa                	mov    edx,edi
c001a56a:	89 f3                	mov    ebx,esi
c001a56c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a570:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a574:	89 04 24             	mov    DWORD PTR [esp],eax
c001a577:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a57e:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001a585:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a58c:	8d 50 01             	lea    edx,[eax+0x1]
c001a58f:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a596:	8a 00                	mov    al,BYTE PTR [eax]
c001a598:	0f b6 c0             	movzx  eax,al
c001a59b:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001a59f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a5a6:	8d 50 01             	lea    edx,[eax+0x1]
c001a5a9:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a5b0:	8a 00                	mov    al,BYTE PTR [eax]
c001a5b2:	0f b6 c0             	movzx  eax,al
c001a5b5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001a5b9:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a5c0:	8d 50 01             	lea    edx,[eax+0x1]
c001a5c3:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a5ca:	8a 00                	mov    al,BYTE PTR [eax]
c001a5cc:	0f b6 c0             	movzx  eax,al
c001a5cf:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001a5d3:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a5da:	8d 50 01             	lea    edx,[eax+0x1]
c001a5dd:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a5e4:	8a 00                	mov    al,BYTE PTR [eax]
c001a5e6:	0f b6 c0             	movzx  eax,al
c001a5e9:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a5ed:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001a5f1:	c1 e0 18             	shl    eax,0x18
c001a5f4:	89 c2                	mov    edx,eax
c001a5f6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001a5fa:	c1 e0 10             	shl    eax,0x10
c001a5fd:	09 c2                	or     edx,eax
c001a5ff:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001a603:	c1 e0 08             	shl    eax,0x8
c001a606:	09 d0                	or     eax,edx
c001a608:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001a60c:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a610:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a617:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001a61b:	83 e8 04             	sub    eax,0x4
c001a61e:	83 ec 08             	sub    esp,0x8
c001a621:	50                   	push   eax
c001a622:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001a626:	e8 f6 fa ff ff       	call   c001a121 <Net::crc32Calc(unsigned char*, int)>
c001a62b:	83 c4 10             	add    esp,0x10
c001a62e:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001a632:	0f 94 c2             	sete   dl
c001a635:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a63c:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001a63f:	90                   	nop
c001a640:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a647:	83 c4 70             	add    esp,0x70
c001a64a:	5b                   	pop    ebx
c001a64b:	5e                   	pop    esi
c001a64c:	5f                   	pop    edi
c001a64d:	c2 04 00             	ret    0x4

c001a650 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001a650:	55                   	push   ebp
c001a651:	57                   	push   edi
c001a652:	56                   	push   esi
c001a653:	53                   	push   ebx
c001a654:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a65a:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001a661:	8a 1e                	mov    bl,BYTE PTR [esi]
c001a663:	8d 6e 01             	lea    ebp,[esi+0x1]
c001a666:	80 fb 40             	cmp    bl,0x40
c001a669:	75 1b                	jne    c001a686 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001a66b:	8a 16                	mov    dl,BYTE PTR [esi]
c001a66d:	84 d2                	test   dl,dl
c001a66f:	0f 84 f1 00 00 00    	je     c001a766 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a675:	8d 46 01             	lea    eax,[esi+0x1]
c001a678:	80 fa 3a             	cmp    dl,0x3a
c001a67b:	74 04                	je     c001a681 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001a67d:	89 c6                	mov    esi,eax
c001a67f:	eb ea                	jmp    c001a66b <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001a681:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a684:	89 c6                	mov    esi,eax
c001a686:	50                   	push   eax
c001a687:	6a 40                	push   0x40
c001a689:	6a 00                	push   0x0
c001a68b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a68f:	50                   	push   eax
c001a690:	e8 bb 60 fe ff       	call   c0000750 <memset>
c001a695:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001a69c:	31 c0                	xor    eax,eax
c001a69e:	83 c4 10             	add    esp,0x10
c001a6a1:	8a 0f                	mov    cl,BYTE PTR [edi]
c001a6a3:	84 c9                	test   cl,cl
c001a6a5:	0f 84 bb 00 00 00    	je     c001a766 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a6ab:	3d c7 00 00 00       	cmp    eax,0xc7
c001a6b0:	0f 8f b0 00 00 00    	jg     c001a766 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a6b6:	80 f9 0a             	cmp    cl,0xa
c001a6b9:	0f 85 98 00 00 00    	jne    c001a757 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001a6bf:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001a6c4:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001a6c8:	a8 df                	test   al,0xdf
c001a6ca:	0f 94 c1             	sete   cl
c001a6cd:	3c 23                	cmp    al,0x23
c001a6cf:	0f 94 c2             	sete   dl
c001a6d2:	08 d1                	or     cl,dl
c001a6d4:	75 4a                	jne    c001a720 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a6d6:	8d 50 f7             	lea    edx,[eax-0x9]
c001a6d9:	80 fa 01             	cmp    dl,0x1
c001a6dc:	76 42                	jbe    c001a720 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a6de:	3c 5b                	cmp    al,0x5b
c001a6e0:	75 42                	jne    c001a724 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001a6e2:	80 fb 40             	cmp    bl,0x40
c001a6e5:	75 39                	jne    c001a720 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a6e7:	83 ec 0c             	sub    esp,0xc
c001a6ea:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a6ee:	52                   	push   edx
c001a6ef:	e8 78 60 fe ff       	call   c000076c <strlen>
c001a6f4:	83 c4 10             	add    esp,0x10
c001a6f7:	83 f8 3f             	cmp    eax,0x3f
c001a6fa:	77 6a                	ja     c001a766 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a6fc:	50                   	push   eax
c001a6fd:	50                   	push   eax
c001a6fe:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a702:	52                   	push   edx
c001a703:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a707:	52                   	push   edx
c001a708:	e8 ff 60 fe ff       	call   c000080c <strcpy>
c001a70d:	58                   	pop    eax
c001a70e:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a712:	52                   	push   edx
c001a713:	e8 54 60 fe ff       	call   c000076c <strlen>
c001a718:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a71d:	83 c4 10             	add    esp,0x10
c001a720:	31 d2                	xor    edx,edx
c001a722:	eb 3a                	jmp    c001a75e <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001a724:	80 fb 40             	cmp    bl,0x40
c001a727:	74 06                	je     c001a72f <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001a729:	8d 44 24 58          	lea    eax,[esp+0x58]
c001a72d:	eb 20                	jmp    c001a74f <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001a72f:	50                   	push   eax
c001a730:	50                   	push   eax
c001a731:	55                   	push   ebp
c001a732:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a736:	50                   	push   eax
c001a737:	e8 5c 61 fe ff       	call   c0000898 <strcmp>
c001a73c:	83 c4 10             	add    esp,0x10
c001a73f:	85 c0                	test   eax,eax
c001a741:	75 dd                	jne    c001a720 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a743:	eb e4                	jmp    c001a729 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001a745:	8d 50 01             	lea    edx,[eax+0x1]
c001a748:	80 f9 3d             	cmp    cl,0x3d
c001a74b:	74 1d                	je     c001a76a <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001a74d:	89 d0                	mov    eax,edx
c001a74f:	8a 08                	mov    cl,BYTE PTR [eax]
c001a751:	84 c9                	test   cl,cl
c001a753:	75 f0                	jne    c001a745 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001a755:	eb 0f                	jmp    c001a766 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a757:	8d 50 01             	lea    edx,[eax+0x1]
c001a75a:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001a75e:	47                   	inc    edi
c001a75f:	89 d0                	mov    eax,edx
c001a761:	e9 3b ff ff ff       	jmp    c001a6a1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001a766:	31 c0                	xor    eax,eax
c001a768:	eb 33                	jmp    c001a79d <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001a76a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a76e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a771:	50                   	push   eax
c001a772:	50                   	push   eax
c001a773:	8d 44 24 60          	lea    eax,[esp+0x60]
c001a777:	50                   	push   eax
c001a778:	56                   	push   esi
c001a779:	e8 1a 61 fe ff       	call   c0000898 <strcmp>
c001a77e:	83 c4 10             	add    esp,0x10
c001a781:	85 c0                	test   eax,eax
c001a783:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a787:	75 97                	jne    c001a720 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a789:	51                   	push   ecx
c001a78a:	51                   	push   ecx
c001a78b:	52                   	push   edx
c001a78c:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001a793:	e8 74 60 fe ff       	call   c000080c <strcpy>
c001a798:	83 c4 10             	add    esp,0x10
c001a79b:	b0 01                	mov    al,0x1
c001a79d:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a7a3:	5b                   	pop    ebx
c001a7a4:	5e                   	pop    esi
c001a7a5:	5f                   	pop    edi
c001a7a6:	5d                   	pop    ebp
c001a7a7:	c3                   	ret    

c001a7a8 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001a7a8:	57                   	push   edi
c001a7a9:	56                   	push   esi
c001a7aa:	53                   	push   ebx
c001a7ab:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a7b1:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001a7b8:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a7bf:	53                   	push   ebx
c001a7c0:	e8 a7 5f fe ff       	call   c000076c <strlen>
c001a7c5:	89 34 24             	mov    DWORD PTR [esp],esi
c001a7c8:	89 c7                	mov    edi,eax
c001a7ca:	e8 9d 5f fe ff       	call   c000076c <strlen>
c001a7cf:	83 c4 10             	add    esp,0x10
c001a7d2:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001a7d6:	3d ff 00 00 00       	cmp    eax,0xff
c001a7db:	0f 87 d3 00 00 00    	ja     c001a8b4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a7e1:	57                   	push   edi
c001a7e2:	57                   	push   edi
c001a7e3:	56                   	push   esi
c001a7e4:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001a7e8:	56                   	push   esi
c001a7e9:	e8 1e 60 fe ff       	call   c000080c <strcpy>
c001a7ee:	58                   	pop    eax
c001a7ef:	5a                   	pop    edx
c001a7f0:	68 0a b9 02 c0       	push   0xc002b90a
c001a7f5:	56                   	push   esi
c001a7f6:	e8 51 61 fe ff       	call   c000094c <strcat>
c001a7fb:	59                   	pop    ecx
c001a7fc:	5f                   	pop    edi
c001a7fd:	53                   	push   ebx
c001a7fe:	56                   	push   esi
c001a7ff:	e8 48 61 fe ff       	call   c000094c <strcat>
c001a804:	58                   	pop    eax
c001a805:	5a                   	pop    edx
c001a806:	68 b4 b5 02 c0       	push   0xc002b5b4
c001a80b:	56                   	push   esi
c001a80c:	e8 3b 61 fe ff       	call   c000094c <strcat>
c001a811:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001a818:	e8 7f 4d ff ff       	call   c000f59c <malloc>
c001a81d:	83 c4 0c             	add    esp,0xc
c001a820:	89 c3                	mov    ebx,eax
c001a822:	ff 35 50 0c 03 c0    	push   DWORD PTR ds:0xc0030c50
c001a828:	56                   	push   esi
c001a829:	50                   	push   eax
c001a82a:	e8 f9 82 ff ff       	call   c0012b28 <File::File(char const*, Process*)>
c001a82f:	83 c4 10             	add    esp,0x10
c001a832:	85 db                	test   ebx,ebx
c001a834:	74 7e                	je     c001a8b4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a836:	51                   	push   ecx
c001a837:	51                   	push   ecx
c001a838:	6a 01                	push   0x1
c001a83a:	53                   	push   ebx
c001a83b:	e8 4c 83 ff ff       	call   c0012b8c <File::open(FileOpenMode)>
c001a840:	83 c4 10             	add    esp,0x10
c001a843:	85 c0                	test   eax,eax
c001a845:	74 08                	je     c001a84f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001a847:	83 ec 0c             	sub    esp,0xc
c001a84a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a84c:	53                   	push   ebx
c001a84d:	eb 5f                	jmp    c001a8ae <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001a84f:	52                   	push   edx
c001a850:	8d 44 24 17          	lea    eax,[esp+0x17]
c001a854:	50                   	push   eax
c001a855:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a859:	50                   	push   eax
c001a85a:	53                   	push   ebx
c001a85b:	e8 d8 85 ff ff       	call   c0012e38 <File::stat(unsigned long long*, bool*)>
c001a860:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a864:	83 c4 10             	add    esp,0x10
c001a867:	89 c1                	mov    ecx,eax
c001a869:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001a86d:	74 31                	je     c001a8a0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a86f:	83 ec 0c             	sub    esp,0xc
c001a872:	50                   	push   eax
c001a873:	e8 24 4d ff ff       	call   c000f59c <malloc>
c001a878:	89 c6                	mov    esi,eax
c001a87a:	58                   	pop    eax
c001a87b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a87d:	8d 54 24 20          	lea    edx,[esp+0x20]
c001a881:	52                   	push   edx
c001a882:	56                   	push   esi
c001a883:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a887:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a88b:	53                   	push   ebx
c001a88c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a88f:	83 c4 20             	add    esp,0x20
c001a892:	85 c0                	test   eax,eax
c001a894:	75 0a                	jne    c001a8a0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a896:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a89a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a89e:	74 18                	je     c001a8b8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001a8a0:	83 ec 0c             	sub    esp,0xc
c001a8a3:	53                   	push   ebx
c001a8a4:	e8 41 83 ff ff       	call   c0012bea <File::close()>
c001a8a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a8ab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a8ae:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a8b1:	83 c4 10             	add    esp,0x10
c001a8b4:	31 c0                	xor    eax,eax
c001a8b6:	eb 3b                	jmp    c001a8f3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001a8b8:	83 ec 0c             	sub    esp,0xc
c001a8bb:	53                   	push   ebx
c001a8bc:	e8 29 83 ff ff       	call   c0012bea <File::close()>
c001a8c1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a8c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a8c6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a8c9:	83 c4 0c             	add    esp,0xc
c001a8cc:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a8d3:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a8da:	56                   	push   esi
c001a8db:	e8 70 fd ff ff       	call   c001a650 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001a8e0:	89 34 24             	mov    DWORD PTR [esp],esi
c001a8e3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a8e7:	e8 c0 4c ff ff       	call   c000f5ac <free>
c001a8ec:	83 c4 10             	add    esp,0x10
c001a8ef:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a8f3:	81 c4 20 01 00 00    	add    esp,0x120
c001a8f9:	5b                   	pop    ebx
c001a8fa:	5e                   	pop    esi
c001a8fb:	5f                   	pop    edi
c001a8fc:	c3                   	ret    

c001a8fd <Reg::getLine(char*, char*, char*)>:
c001a8fd:	57                   	push   edi
c001a8fe:	56                   	push   esi
c001a8ff:	53                   	push   ebx
c001a900:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a904:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a908:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a90c:	57                   	push   edi
c001a90d:	56                   	push   esi
c001a90e:	53                   	push   ebx
c001a90f:	68 b9 b5 02 c0       	push   0xc002b5b9
c001a914:	e8 8f fe ff ff       	call   c001a7a8 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a919:	83 c4 10             	add    esp,0x10
c001a91c:	84 c0                	test   al,al
c001a91e:	75 10                	jne    c001a930 <Reg::getLine(char*, char*, char*)+0x33>
c001a920:	57                   	push   edi
c001a921:	56                   	push   esi
c001a922:	53                   	push   ebx
c001a923:	68 de b5 02 c0       	push   0xc002b5de
c001a928:	e8 7b fe ff ff       	call   c001a7a8 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a92d:	83 c4 10             	add    esp,0x10
c001a930:	5b                   	pop    ebx
c001a931:	5e                   	pop    esi
c001a932:	5f                   	pop    edi
c001a933:	c3                   	ret    

c001a934 <Reg::readInt(char*, char*, int*)>:
c001a934:	55                   	push   ebp
c001a935:	57                   	push   edi
c001a936:	56                   	push   esi
c001a937:	53                   	push   ebx
c001a938:	81 ec f0 00 00 00    	sub    esp,0xf0
c001a93e:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a942:	57                   	push   edi
c001a943:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a94a:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a951:	e8 a7 ff ff ff       	call   c001a8fd <Reg::getLine(char*, char*, char*)>
c001a956:	83 c4 10             	add    esp,0x10
c001a959:	84 c0                	test   al,al
c001a95b:	0f 84 b3 00 00 00    	je     c001aa14 <Reg::readInt(char*, char*, int*)+0xe0>
c001a961:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001a965:	80 fa 2b             	cmp    dl,0x2b
c001a968:	74 0c                	je     c001a976 <Reg::readInt(char*, char*, int*)+0x42>
c001a96a:	80 fa 2d             	cmp    dl,0x2d
c001a96d:	75 0e                	jne    c001a97d <Reg::readInt(char*, char*, int*)+0x49>
c001a96f:	ba 01 00 00 00       	mov    edx,0x1
c001a974:	eb 0b                	jmp    c001a981 <Reg::readInt(char*, char*, int*)+0x4d>
c001a976:	ba 01 00 00 00       	mov    edx,0x1
c001a97b:	eb 02                	jmp    c001a97f <Reg::readInt(char*, char*, int*)+0x4b>
c001a97d:	31 d2                	xor    edx,edx
c001a97f:	31 c0                	xor    eax,eax
c001a981:	be 0a 00 00 00       	mov    esi,0xa
c001a986:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001a98b:	75 20                	jne    c001a9ad <Reg::readInt(char*, char*, int*)+0x79>
c001a98d:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001a991:	80 f9 78             	cmp    cl,0x78
c001a994:	75 0a                	jne    c001a9a0 <Reg::readInt(char*, char*, int*)+0x6c>
c001a996:	83 c2 02             	add    edx,0x2
c001a999:	be 10 00 00 00       	mov    esi,0x10
c001a99e:	eb 0d                	jmp    c001a9ad <Reg::readInt(char*, char*, int*)+0x79>
c001a9a0:	80 f9 62             	cmp    cl,0x62
c001a9a3:	75 08                	jne    c001a9ad <Reg::readInt(char*, char*, int*)+0x79>
c001a9a5:	83 c2 02             	add    edx,0x2
c001a9a8:	be 02 00 00 00       	mov    esi,0x2
c001a9ad:	01 d7                	add    edi,edx
c001a9af:	31 d2                	xor    edx,edx
c001a9b1:	8a 1f                	mov    bl,BYTE PTR [edi]
c001a9b3:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001a9b7:	80 fb 0d             	cmp    bl,0xd
c001a9ba:	0f 94 c3             	sete   bl
c001a9bd:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a9c2:	0f 94 c1             	sete   cl
c001a9c5:	08 cb                	or     bl,cl
c001a9c7:	75 3a                	jne    c001aa03 <Reg::readInt(char*, char*, int*)+0xcf>
c001a9c9:	0f af d6             	imul   edx,esi
c001a9cc:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001a9d1:	83 fe 10             	cmp    esi,0x10
c001a9d4:	75 26                	jne    c001a9fc <Reg::readInt(char*, char*, int*)+0xc8>
c001a9d6:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a9da:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001a9dd:	89 e9                	mov    ecx,ebp
c001a9df:	80 f9 05             	cmp    cl,0x5
c001a9e2:	77 06                	ja     c001a9ea <Reg::readInt(char*, char*, int*)+0xb6>
c001a9e4:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001a9e8:	eb 16                	jmp    c001aa00 <Reg::readInt(char*, char*, int*)+0xcc>
c001a9ea:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a9ee:	83 e9 61             	sub    ecx,0x61
c001a9f1:	80 f9 05             	cmp    cl,0x5
c001a9f4:	77 06                	ja     c001a9fc <Reg::readInt(char*, char*, int*)+0xc8>
c001a9f6:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001a9fa:	eb 04                	jmp    c001aa00 <Reg::readInt(char*, char*, int*)+0xcc>
c001a9fc:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001aa00:	47                   	inc    edi
c001aa01:	eb ae                	jmp    c001a9b1 <Reg::readInt(char*, char*, int*)+0x7d>
c001aa03:	84 c0                	test   al,al
c001aa05:	74 02                	je     c001aa09 <Reg::readInt(char*, char*, int*)+0xd5>
c001aa07:	f7 da                	neg    edx
c001aa09:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001aa10:	89 10                	mov    DWORD PTR [eax],edx
c001aa12:	88 d8                	mov    al,bl
c001aa14:	81 c4 ec 00 00 00    	add    esp,0xec
c001aa1a:	5b                   	pop    ebx
c001aa1b:	5e                   	pop    esi
c001aa1c:	5f                   	pop    edi
c001aa1d:	5d                   	pop    ebp
c001aa1e:	c3                   	ret    

c001aa1f <Reg::readString(char*, char*, char*, int)>:
c001aa1f:	57                   	push   edi
c001aa20:	56                   	push   esi
c001aa21:	53                   	push   ebx
c001aa22:	81 ec d4 00 00 00    	sub    esp,0xd4
c001aa28:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001aa2f:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001aa33:	57                   	push   edi
c001aa34:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001aa3b:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001aa42:	e8 b6 fe ff ff       	call   c001a8fd <Reg::getLine(char*, char*, char*)>
c001aa47:	83 c4 10             	add    esp,0x10
c001aa4a:	89 c6                	mov    esi,eax
c001aa4c:	84 c0                	test   al,al
c001aa4e:	74 44                	je     c001aa94 <Reg::readString(char*, char*, char*, int)+0x75>
c001aa50:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001aa57:	31 c0                	xor    eax,eax
c001aa59:	4a                   	dec    edx
c001aa5a:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001aa5d:	84 c9                	test   cl,cl
c001aa5f:	74 0f                	je     c001aa70 <Reg::readString(char*, char*, char*, int)+0x51>
c001aa61:	39 c2                	cmp    edx,eax
c001aa63:	7e 0b                	jle    c001aa70 <Reg::readString(char*, char*, char*, int)+0x51>
c001aa65:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001aa68:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001aa6d:	40                   	inc    eax
c001aa6e:	eb ea                	jmp    c001aa5a <Reg::readString(char*, char*, char*, int)+0x3b>
c001aa70:	83 ec 0c             	sub    esp,0xc
c001aa73:	53                   	push   ebx
c001aa74:	e8 f3 5c fe ff       	call   c000076c <strlen>
c001aa79:	83 c4 10             	add    esp,0x10
c001aa7c:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001aa81:	75 11                	jne    c001aa94 <Reg::readString(char*, char*, char*, int)+0x75>
c001aa83:	83 ec 0c             	sub    esp,0xc
c001aa86:	53                   	push   ebx
c001aa87:	e8 e0 5c fe ff       	call   c000076c <strlen>
c001aa8c:	83 c4 10             	add    esp,0x10
c001aa8f:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001aa94:	81 c4 d0 00 00 00    	add    esp,0xd0
c001aa9a:	89 f0                	mov    eax,esi
c001aa9c:	5b                   	pop    ebx
c001aa9d:	5e                   	pop    esi
c001aa9e:	5f                   	pop    edi
c001aa9f:	c3                   	ret    

c001aaa0 <Reg::readBool(char*, char*, bool*)>:
c001aaa0:	83 ec 20             	sub    esp,0x20
c001aaa3:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aaa7:	50                   	push   eax
c001aaa8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aaac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aab0:	e8 7f fe ff ff       	call   c001a934 <Reg::readInt(char*, char*, int*)>
c001aab5:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001aaba:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001aabe:	0f 95 02             	setne  BYTE PTR [edx]
c001aac1:	83 c4 2c             	add    esp,0x2c
c001aac4:	c3                   	ret    

c001aac5 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001aac5:	53                   	push   ebx
c001aac6:	83 ec 1c             	sub    esp,0x1c
c001aac9:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001aacd:	8d 44 24 13          	lea    eax,[esp+0x13]
c001aad1:	50                   	push   eax
c001aad2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aad6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aada:	e8 c1 ff ff ff       	call   c001aaa0 <Reg::readBool(char*, char*, bool*)>
c001aadf:	83 c4 10             	add    esp,0x10
c001aae2:	84 c0                	test   al,al
c001aae4:	74 04                	je     c001aaea <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001aae6:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001aaea:	88 d8                	mov    al,bl
c001aaec:	83 c4 18             	add    esp,0x18
c001aaef:	5b                   	pop    ebx
c001aaf0:	c3                   	ret    

c001aaf1 <Reg::readIntWithDefault(char*, char*, int)>:
c001aaf1:	53                   	push   ebx
c001aaf2:	83 ec 1c             	sub    esp,0x1c
c001aaf5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001aaf9:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aafd:	50                   	push   eax
c001aafe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ab02:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ab06:	e8 29 fe ff ff       	call   c001a934 <Reg::readInt(char*, char*, int*)>
c001ab0b:	83 c4 10             	add    esp,0x10
c001ab0e:	84 c0                	test   al,al
c001ab10:	74 04                	je     c001ab16 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001ab12:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ab16:	89 d8                	mov    eax,ebx
c001ab18:	83 c4 18             	add    esp,0x18
c001ab1b:	5b                   	pop    ebx
c001ab1c:	c3                   	ret    

c001ab1d <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001ab1d:	57                   	push   edi
c001ab1e:	56                   	push   esi
c001ab1f:	56                   	push   esi
c001ab20:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ab24:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001ab28:	56                   	push   esi
c001ab29:	57                   	push   edi
c001ab2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ab2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ab32:	e8 e8 fe ff ff       	call   c001aa1f <Reg::readString(char*, char*, char*, int)>
c001ab37:	83 c4 10             	add    esp,0x10
c001ab3a:	84 c0                	test   al,al
c001ab3c:	75 1a                	jne    c001ab58 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001ab3e:	51                   	push   ecx
c001ab3f:	56                   	push   esi
c001ab40:	6a 00                	push   0x0
c001ab42:	57                   	push   edi
c001ab43:	e8 08 5c fe ff       	call   c0000750 <memset>
c001ab48:	8d 4e ff             	lea    ecx,[esi-0x1]
c001ab4b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ab4f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ab51:	83 c4 10             	add    esp,0x10
c001ab54:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ab58:	89 f8                	mov    eax,edi
c001ab5a:	5a                   	pop    edx
c001ab5b:	5e                   	pop    esi
c001ab5c:	5f                   	pop    edi
c001ab5d:	c3                   	ret    

c001ab5e <Sys::eject(regs*)>:
c001ab5e:	83 ec 0c             	sub    esp,0xc
c001ab61:	83 ca ff             	or     edx,0xffffffff
c001ab64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab68:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001ab6b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ab70:	83 e9 41             	sub    ecx,0x41
c001ab73:	83 f9 19             	cmp    ecx,0x19
c001ab76:	77 18                	ja     c001ab90 <Sys::eject(regs*)+0x32>
c001ab78:	8b 0c 8d 00 dd 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2300]
c001ab7f:	85 c9                	test   ecx,ecx
c001ab81:	74 0d                	je     c001ab90 <Sys::eject(regs*)+0x32>
c001ab83:	83 ec 0c             	sub    esp,0xc
c001ab86:	51                   	push   ecx
c001ab87:	e8 28 b3 ff ff       	call   c0015eb4 <LogicalDisk::eject()>
c001ab8c:	83 c4 10             	add    esp,0x10
c001ab8f:	99                   	cdq    
c001ab90:	83 c4 0c             	add    esp,0xc
c001ab93:	c3                   	ret    

c001ab94 <Sys::exit(regs*)>:
c001ab94:	83 ec 18             	sub    esp,0x18
c001ab97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ab9b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ab9e:	e8 be 35 00 00       	call   c001e161 <terminateTask(int)>
c001aba3:	83 c8 ff             	or     eax,0xffffffff
c001aba6:	83 c4 1c             	add    esp,0x1c
c001aba9:	89 c2                	mov    edx,eax
c001abab:	c3                   	ret    

c001abac <Sys::getCwd(regs*)>:
c001abac:	83 ec 10             	sub    esp,0x10
c001abaf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001abb3:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001abb6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001abb9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001abbe:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001abc1:	e8 64 7d ff ff       	call   c001292a <Fs::getcwd(Process*, char*, int)>
c001abc6:	83 c4 1c             	add    esp,0x1c
c001abc9:	99                   	cdq    
c001abca:	c3                   	ret    

c001abcb <Sys::getPID(regs*)>:
c001abcb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001abd0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001abd3:	8b 00                	mov    eax,DWORD PTR [eax]
c001abd5:	99                   	cdq    
c001abd6:	c3                   	ret    

c001abd7 <Sys::getRAMData(regs*)>:
c001abd7:	8b 0d 54 d7 02 c0    	mov    ecx,DWORD PTR ds:0xc002d754
c001abdd:	6b 05 50 d7 02 c0 64 	imul   eax,DWORD PTR ds:0xc002d750,0x64
c001abe4:	99                   	cdq    
c001abe5:	f7 f9                	idiv   ecx
c001abe7:	c1 e0 18             	shl    eax,0x18
c001abea:	09 c8                	or     eax,ecx
c001abec:	99                   	cdq    
c001abed:	c3                   	ret    

c001abee <Sys::getVGAPtr(regs*)>:
c001abee:	55                   	push   ebp
c001abef:	57                   	push   edi
c001abf0:	56                   	push   esi
c001abf1:	53                   	push   ebx
c001abf2:	83 ec 18             	sub    esp,0x18
c001abf5:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001abf9:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001abfc:	e8 ac 30 00 00       	call   c001dcad <Thr::processFromPID(int)>
c001ac01:	83 c4 10             	add    esp,0x10
c001ac04:	89 c1                	mov    ecx,eax
c001ac06:	b8 01 00 00 00       	mov    eax,0x1
c001ac0b:	85 c9                	test   ecx,ecx
c001ac0d:	74 59                	je     c001ac68 <Sys::getVGAPtr(regs*)+0x7a>
c001ac0f:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001ac15:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001ac19:	74 0c                	je     c001ac27 <Sys::getVGAPtr(regs*)+0x39>
c001ac1b:	83 ec 0c             	sub    esp,0xc
c001ac1e:	53                   	push   ebx
c001ac1f:	e8 e1 56 ff ff       	call   c0010305 <setActiveTerminal(VgaText*)>
c001ac24:	83 c4 10             	add    esp,0x10
c001ac27:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001ac2a:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001ac2d:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001ac32:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ac34:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001ac37:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ac3a:	81 c3 82 00 00 00    	add    ebx,0x82
c001ac40:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001ac46:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ac49:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001ac4c:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001ac52:	50                   	push   eax
c001ac53:	50                   	push   eax
c001ac54:	53                   	push   ebx
c001ac55:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ac58:	05 a8 0f 00 00       	add    eax,0xfa8
c001ac5d:	50                   	push   eax
c001ac5e:	e8 a9 5b fe ff       	call   c000080c <strcpy>
c001ac63:	83 c4 10             	add    esp,0x10
c001ac66:	31 c0                	xor    eax,eax
c001ac68:	83 c4 0c             	add    esp,0xc
c001ac6b:	31 d2                	xor    edx,edx
c001ac6d:	5b                   	pop    ebx
c001ac6e:	5e                   	pop    esi
c001ac6f:	5f                   	pop    edi
c001ac70:	5d                   	pop    ebp
c001ac71:	c3                   	ret    

c001ac72 <Sys::loadDLL(regs*)>:
c001ac72:	56                   	push   esi
c001ac73:	53                   	push   ebx
c001ac74:	31 d2                	xor    edx,edx
c001ac76:	51                   	push   ecx
c001ac77:	b8 01 00 00 00       	mov    eax,0x1
c001ac7c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ac80:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001ac84:	0f 84 8c 00 00 00    	je     c001ad16 <Sys::loadDLL(regs*)+0xa4>
c001ac8a:	83 ec 0c             	sub    esp,0xc
c001ac8d:	68 14 01 00 00       	push   0x114
c001ac92:	e8 05 49 ff ff       	call   c000f59c <malloc>
c001ac97:	83 c4 0c             	add    esp,0xc
c001ac9a:	89 c3                	mov    ebx,eax
c001ac9c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aca1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001aca4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001aca7:	53                   	push   ebx
c001aca8:	e8 7b 7e ff ff       	call   c0012b28 <File::File(char const*, Process*)>
c001acad:	83 c4 10             	add    esp,0x10
c001acb0:	31 d2                	xor    edx,edx
c001acb2:	b8 02 00 00 00       	mov    eax,0x2
c001acb7:	85 db                	test   ebx,ebx
c001acb9:	74 5b                	je     c001ad16 <Sys::loadDLL(regs*)+0xa4>
c001acbb:	83 ec 0c             	sub    esp,0xc
c001acbe:	53                   	push   ebx
c001acbf:	e8 36 81 ff ff       	call   c0012dfa <File::exists()>
c001acc4:	83 c4 10             	add    esp,0x10
c001acc7:	84 c0                	test   al,al
c001acc9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001accb:	75 11                	jne    c001acde <Sys::loadDLL(regs*)+0x6c>
c001accd:	83 ec 0c             	sub    esp,0xc
c001acd0:	53                   	push   ebx
c001acd1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001acd4:	83 c4 10             	add    esp,0x10
c001acd7:	b8 03 00 00 00       	mov    eax,0x3
c001acdc:	eb 36                	jmp    c001ad14 <Sys::loadDLL(regs*)+0xa2>
c001acde:	83 ec 0c             	sub    esp,0xc
c001ace1:	53                   	push   ebx
c001ace2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ace5:	58                   	pop    eax
c001ace6:	5a                   	pop    edx
c001ace7:	6a 00                	push   0x0
c001ace9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001acec:	e8 0e 22 00 00       	call   c001ceff <Thr::loadDLL(char const*, bool)>
c001acf1:	83 c4 10             	add    esp,0x10
c001acf4:	89 c1                	mov    ecx,eax
c001acf6:	31 d2                	xor    edx,edx
c001acf8:	b8 04 00 00 00       	mov    eax,0x4
c001acfd:	85 c9                	test   ecx,ecx
c001acff:	74 15                	je     c001ad16 <Sys::loadDLL(regs*)+0xa4>
c001ad01:	53                   	push   ebx
c001ad02:	53                   	push   ebx
c001ad03:	ff 35 08 d7 02 c0    	push   DWORD PTR ds:0xc002d708
c001ad09:	51                   	push   ecx
c001ad0a:	e8 1e 24 00 00       	call   c001d12d <Thr::executeDLL(unsigned long, void*)>
c001ad0f:	83 c4 10             	add    esp,0x10
c001ad12:	31 c0                	xor    eax,eax
c001ad14:	31 d2                	xor    edx,edx
c001ad16:	59                   	pop    ecx
c001ad17:	5b                   	pop    ebx
c001ad18:	5e                   	pop    esi
c001ad19:	c3                   	ret    

c001ad1a <Sys::read(regs*)>:
c001ad1a:	57                   	push   edi
c001ad1b:	56                   	push   esi
c001ad1c:	53                   	push   ebx
c001ad1d:	83 ec 10             	sub    esp,0x10
c001ad20:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ad24:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ad27:	83 f8 02             	cmp    eax,0x2
c001ad2a:	77 10                	ja     c001ad3c <Sys::read(regs*)+0x22>
c001ad2c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad31:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ad34:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001ad3a:	eb 0e                	jmp    c001ad4a <Sys::read(regs*)+0x30>
c001ad3c:	83 ec 0c             	sub    esp,0xc
c001ad3f:	50                   	push   eax
c001ad40:	e8 34 63 ff ff       	call   c0011079 <getFromFileDescriptor(int)>
c001ad45:	83 c4 10             	add    esp,0x10
c001ad48:	89 c1                	mov    ecx,eax
c001ad4a:	83 c8 ff             	or     eax,0xffffffff
c001ad4d:	85 c9                	test   ecx,ecx
c001ad4f:	89 c2                	mov    edx,eax
c001ad51:	74 28                	je     c001ad7b <Sys::read(regs*)+0x61>
c001ad53:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ad5b:	31 ff                	xor    edi,edi
c001ad5d:	83 ec 0c             	sub    esp,0xc
c001ad60:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ad62:	8d 54 24 18          	lea    edx,[esp+0x18]
c001ad66:	52                   	push   edx
c001ad67:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ad6a:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001ad6d:	57                   	push   edi
c001ad6e:	56                   	push   esi
c001ad6f:	51                   	push   ecx
c001ad70:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ad73:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ad77:	83 c4 20             	add    esp,0x20
c001ad7a:	99                   	cdq    
c001ad7b:	83 c4 10             	add    esp,0x10
c001ad7e:	5b                   	pop    ebx
c001ad7f:	5e                   	pop    esi
c001ad80:	5f                   	pop    edi
c001ad81:	c3                   	ret    

c001ad82 <Sys::sbrk(regs*)>:
c001ad82:	56                   	push   esi
c001ad83:	53                   	push   ebx
c001ad84:	50                   	push   eax
c001ad85:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ad8e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ad91:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001ad94:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001ad9a:	85 db                	test   ebx,ebx
c001ad9c:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001ad9f:	74 02                	je     c001ada3 <Sys::sbrk(regs*)+0x21>
c001ada1:	79 06                	jns    c001ada9 <Sys::sbrk(regs*)+0x27>
c001ada3:	89 f0                	mov    eax,esi
c001ada5:	31 d2                	xor    edx,edx
c001ada7:	eb 2a                	jmp    c001add3 <Sys::sbrk(regs*)+0x51>
c001ada9:	83 c8 ff             	or     eax,0xffffffff
c001adac:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001adb2:	89 c2                	mov    edx,eax
c001adb4:	77 1d                	ja     c001add3 <Sys::sbrk(regs*)+0x51>
c001adb6:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001adbc:	50                   	push   eax
c001adbd:	c1 ea 0c             	shr    edx,0xc
c001adc0:	68 07 0c 00 00       	push   0xc07
c001adc5:	52                   	push   edx
c001adc6:	51                   	push   ecx
c001adc7:	e8 c2 6c ff ff       	call   c0011a8e <VAS::allocatePages(int, int)>
c001adcc:	89 f0                	mov    eax,esi
c001adce:	31 d2                	xor    edx,edx
c001add0:	83 c4 10             	add    esp,0x10
c001add3:	59                   	pop    ecx
c001add4:	5b                   	pop    ebx
c001add5:	5e                   	pop    esi
c001add6:	c3                   	ret    

c001add7 <Sys::setCwd(regs*)>:
c001add7:	83 ec 14             	sub    esp,0x14
c001adda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001adde:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ade1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ade6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ade9:	e8 ab 80 ff ff       	call   c0012e99 <Fs::setcwd(Process*, char*)>
c001adee:	83 c4 1c             	add    esp,0x1c
c001adf1:	99                   	cdq    
c001adf2:	c3                   	ret    

c001adf3 <Sys::setTime(regs*)>:
c001adf3:	55                   	push   ebp
c001adf4:	31 c9                	xor    ecx,ecx
c001adf6:	57                   	push   edi
c001adf7:	bd 0c 00 00 00       	mov    ebp,0xc
c001adfc:	56                   	push   esi
c001adfd:	53                   	push   ebx
c001adfe:	31 db                	xor    ebx,ebx
c001ae00:	83 ec 10             	sub    esp,0x10
c001ae03:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ae07:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001ae0a:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001ae0d:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001ae10:	89 c2                	mov    edx,eax
c001ae12:	66 81 ef 6c 07       	sub    di,0x76c
c001ae17:	83 e2 1f             	and    edx,0x1f
c001ae1a:	c1 e7 10             	shl    edi,0x10
c001ae1d:	42                   	inc    edx
c001ae1e:	c1 e8 05             	shr    eax,0x5
c001ae21:	88 d1                	mov    cl,dl
c001ae23:	31 d2                	xor    edx,edx
c001ae25:	f7 f5                	div    ebp
c001ae27:	89 dd                	mov    ebp,ebx
c001ae29:	88 d5                	mov    ch,dl
c001ae2b:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001ae31:	0f b7 c1             	movzx  eax,cx
c001ae34:	31 d2                	xor    edx,edx
c001ae36:	09 f8                	or     eax,edi
c001ae38:	bf 3c 00 00 00       	mov    edi,0x3c
c001ae3d:	89 c1                	mov    ecx,eax
c001ae3f:	89 f0                	mov    eax,esi
c001ae41:	f7 f7                	div    edi
c001ae43:	c1 e2 10             	shl    edx,0x10
c001ae46:	09 d5                	or     ebp,edx
c001ae48:	31 d2                	xor    edx,edx
c001ae4a:	89 eb                	mov    ebx,ebp
c001ae4c:	f7 f7                	div    edi
c001ae4e:	bf 10 0e 00 00       	mov    edi,0xe10
c001ae53:	88 d7                	mov    bh,dl
c001ae55:	89 f0                	mov    eax,esi
c001ae57:	31 d2                	xor    edx,edx
c001ae59:	f7 f7                	div    edi
c001ae5b:	bf 18 00 00 00       	mov    edi,0x18
c001ae60:	31 d2                	xor    edx,edx
c001ae62:	f7 f7                	div    edi
c001ae64:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c001ae69:	88 d3                	mov    bl,dl
c001ae6b:	53                   	push   ebx
c001ae6c:	51                   	push   ecx
c001ae6d:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001ae73:	e8 6a 88 ff ff       	call   c00136e2 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001ae78:	83 c4 1c             	add    esp,0x1c
c001ae7b:	83 f0 01             	xor    eax,0x1
c001ae7e:	5b                   	pop    ebx
c001ae7f:	0f b6 c0             	movzx  eax,al
c001ae82:	5e                   	pop    esi
c001ae83:	31 d2                	xor    edx,edx
c001ae85:	5f                   	pop    edi
c001ae86:	5d                   	pop    ebp
c001ae87:	c3                   	ret    

c001ae88 <Sys::timezone(regs*)>:
c001ae88:	53                   	push   ebx
c001ae89:	83 ec 08             	sub    esp,0x8
c001ae8c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ae90:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001ae94:	75 17                	jne    c001aead <Sys::timezone(regs*)+0x25>
c001ae96:	83 ec 0c             	sub    esp,0xc
c001ae99:	68 f9 b5 02 c0       	push   0xc002b5f9
c001ae9e:	e8 26 77 ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c001aea3:	83 c8 ff             	or     eax,0xffffffff
c001aea6:	83 c4 10             	add    esp,0x10
c001aea9:	89 c2                	mov    edx,eax
c001aeab:	eb 20                	jmp    c001aecd <Sys::timezone(regs*)+0x45>
c001aead:	83 ec 0c             	sub    esp,0xc
c001aeb0:	68 0e b6 02 c0       	push   0xc002b60e
c001aeb5:	e8 0f 77 ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c001aeba:	58                   	pop    eax
c001aebb:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001aebe:	e8 81 85 ff ff       	call   c0013444 <User::loadClockSettings(int)>
c001aec3:	83 c4 10             	add    esp,0x10
c001aec6:	b8 01 00 00 00       	mov    eax,0x1
c001aecb:	31 d2                	xor    edx,edx
c001aecd:	83 c4 08             	add    esp,0x8
c001aed0:	5b                   	pop    ebx
c001aed1:	c3                   	ret    

c001aed2 <Sys::write(regs*)>:
c001aed2:	57                   	push   edi
c001aed3:	56                   	push   esi
c001aed4:	53                   	push   ebx
c001aed5:	83 ec 10             	sub    esp,0x10
c001aed8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001aedc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001aedf:	83 f8 02             	cmp    eax,0x2
c001aee2:	77 10                	ja     c001aef4 <Sys::write(regs*)+0x22>
c001aee4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aee9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aeec:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001aef2:	eb 0e                	jmp    c001af02 <Sys::write(regs*)+0x30>
c001aef4:	83 ec 0c             	sub    esp,0xc
c001aef7:	50                   	push   eax
c001aef8:	e8 7c 61 ff ff       	call   c0011079 <getFromFileDescriptor(int)>
c001aefd:	83 c4 10             	add    esp,0x10
c001af00:	89 c1                	mov    ecx,eax
c001af02:	83 c8 ff             	or     eax,0xffffffff
c001af05:	85 c9                	test   ecx,ecx
c001af07:	89 c2                	mov    edx,eax
c001af09:	74 28                	je     c001af33 <Sys::write(regs*)+0x61>
c001af0b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001af13:	31 ff                	xor    edi,edi
c001af15:	83 ec 0c             	sub    esp,0xc
c001af18:	8b 01                	mov    eax,DWORD PTR [ecx]
c001af1a:	8d 54 24 18          	lea    edx,[esp+0x18]
c001af1e:	52                   	push   edx
c001af1f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001af22:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001af25:	57                   	push   edi
c001af26:	56                   	push   esi
c001af27:	51                   	push   ecx
c001af28:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001af2b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001af2f:	83 c4 20             	add    esp,0x20
c001af32:	99                   	cdq    
c001af33:	83 c4 10             	add    esp,0x10
c001af36:	5b                   	pop    ebx
c001af37:	5e                   	pop    esi
c001af38:	5f                   	pop    edi
c001af39:	c3                   	ret    

c001af3a <Sys::wsbe(regs*)>:
c001af3a:	57                   	push   edi
c001af3b:	b9 0b 00 00 00       	mov    ecx,0xb
c001af40:	56                   	push   esi
c001af41:	be 4d b6 02 c0       	mov    esi,0xc002b64d
c001af46:	53                   	push   ebx
c001af47:	83 ec 30             	sub    esp,0x30
c001af4a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001af4e:	fc                   	cld    
c001af4f:	83 ec 0c             	sub    esp,0xc
c001af52:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001af54:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001af58:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001af5d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001af60:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001af66:	8b 06                	mov    eax,DWORD PTR [esi]
c001af68:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001af6b:	57                   	push   edi
c001af6c:	e8 fb 57 fe ff       	call   c000076c <strlen>
c001af71:	5a                   	pop    edx
c001af72:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001af76:	52                   	push   edx
c001af77:	31 d2                	xor    edx,edx
c001af79:	57                   	push   edi
c001af7a:	52                   	push   edx
c001af7b:	50                   	push   eax
c001af7c:	56                   	push   esi
c001af7d:	ff d3                	call   ebx
c001af7f:	83 c4 14             	add    esp,0x14
c001af82:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001af86:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001af89:	e8 d3 31 00 00       	call   c001e161 <terminateTask(int)>
c001af8e:	83 c4 40             	add    esp,0x40
c001af91:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001af96:	5b                   	pop    ebx
c001af97:	31 d2                	xor    edx,edx
c001af99:	5e                   	pop    esi
c001af9a:	5f                   	pop    edi
c001af9b:	c3                   	ret    

c001af9c <Sys::yield(regs*)>:
c001af9c:	57                   	push   edi
c001af9d:	56                   	push   esi
c001af9e:	53                   	push   ebx
c001af9f:	fa                   	cli    
c001afa0:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c001afa6:	e8 16 29 00 00       	call   c001d8c1 <schedule()>
c001afab:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001afb0:	48                   	dec    eax
c001afb1:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001afb6:	75 01                	jne    c001afb9 <Sys::yield(regs*)+0x1d>
c001afb8:	fb                   	sti    
c001afb9:	8b 35 70 dd 02 c0    	mov    esi,DWORD PTR ds:0xc002dd70
c001afbf:	8b 3d 74 dd 02 c0    	mov    edi,DWORD PTR ds:0xc002dd74
c001afc5:	89 f0                	mov    eax,esi
c001afc7:	89 fb                	mov    ebx,edi
c001afc9:	89 f1                	mov    ecx,esi
c001afcb:	c1 e0 07             	shl    eax,0x7
c001afce:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001afd2:	25 80 30 0f 00       	and    eax,0xf3080
c001afd7:	c1 eb 17             	shr    ebx,0x17
c001afda:	31 c8                	xor    eax,ecx
c001afdc:	89 da                	mov    edx,ebx
c001afde:	5b                   	pop    ebx
c001afdf:	5e                   	pop    esi
c001afe0:	5f                   	pop    edi
c001afe1:	c3                   	ret    

c001afe2 <sysCallSeekDir(regs*)>:
c001afe2:	31 c0                	xor    eax,eax
c001afe4:	31 d2                	xor    edx,edx
c001afe6:	c3                   	ret    

c001afe7 <sysCallTellDir(regs*)>:
c001afe7:	31 c0                	xor    eax,eax
c001afe9:	31 d2                	xor    edx,edx
c001afeb:	c3                   	ret    

c001afec <sysCallVerify(regs*)>:
c001afec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aff0:	31 d2                	xor    edx,edx
c001aff2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001aff5:	c3                   	ret    

c001aff6 <sysCallGetArgc(regs*)>:
c001aff6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001affb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001affe:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b004:	99                   	cdq    
c001b005:	c3                   	ret    

c001b006 <sysFormatDisk(regs*)>:
c001b006:	56                   	push   esi
c001b007:	53                   	push   ebx
c001b008:	53                   	push   ebx
c001b009:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b00d:	8b 1d 74 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d874
c001b013:	eb 25                	jmp    c001b03a <sysFormatDisk(regs*)+0x34>
c001b015:	83 ec 0c             	sub    esp,0xc
c001b018:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b01b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b01d:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b020:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b023:	50                   	push   eax
c001b024:	ff 34 85 00 dd 02 c0 	push   DWORD PTR [eax*4-0x3ffd2300]
c001b02b:	53                   	push   ebx
c001b02c:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b02f:	83 c4 20             	add    esp,0x20
c001b032:	83 f8 08             	cmp    eax,0x8
c001b035:	75 12                	jne    c001b049 <sysFormatDisk(regs*)+0x43>
c001b037:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b03a:	85 db                	test   ebx,ebx
c001b03c:	75 d7                	jne    c001b015 <sysFormatDisk(regs*)+0xf>
c001b03e:	59                   	pop    ecx
c001b03f:	b8 03 00 00 00       	mov    eax,0x3
c001b044:	31 d2                	xor    edx,edx
c001b046:	5b                   	pop    ebx
c001b047:	5e                   	pop    esi
c001b048:	c3                   	ret    
c001b049:	85 c0                	test   eax,eax
c001b04b:	74 1b                	je     c001b068 <sysFormatDisk(regs*)+0x62>
c001b04d:	83 f8 09             	cmp    eax,0x9
c001b050:	74 0b                	je     c001b05d <sysFormatDisk(regs*)+0x57>
c001b052:	59                   	pop    ecx
c001b053:	b8 02 00 00 00       	mov    eax,0x2
c001b058:	31 d2                	xor    edx,edx
c001b05a:	5b                   	pop    ebx
c001b05b:	5e                   	pop    esi
c001b05c:	c3                   	ret    
c001b05d:	59                   	pop    ecx
c001b05e:	b8 01 00 00 00       	mov    eax,0x1
c001b063:	31 d2                	xor    edx,edx
c001b065:	5b                   	pop    ebx
c001b066:	5e                   	pop    esi
c001b067:	c3                   	ret    
c001b068:	59                   	pop    ecx
c001b069:	31 c0                	xor    eax,eax
c001b06b:	31 d2                	xor    edx,edx
c001b06d:	5b                   	pop    ebx
c001b06e:	5e                   	pop    esi
c001b06f:	c3                   	ret    

c001b070 <sysSetDiskVolumeLabel(regs*)>:
c001b070:	56                   	push   esi
c001b071:	53                   	push   ebx
c001b072:	53                   	push   ebx
c001b073:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b077:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b07a:	83 f8 19             	cmp    eax,0x19
c001b07d:	77 29                	ja     c001b0a8 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b07f:	8b 0c 85 00 dd 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd2300]
c001b086:	85 c9                	test   ecx,ecx
c001b088:	74 1e                	je     c001b0a8 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b08a:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b08d:	85 d2                	test   edx,edx
c001b08f:	74 17                	je     c001b0a8 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b091:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b097:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b099:	52                   	push   edx
c001b09a:	50                   	push   eax
c001b09b:	51                   	push   ecx
c001b09c:	53                   	push   ebx
c001b09d:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b0a0:	83 c4 10             	add    esp,0x10
c001b0a3:	99                   	cdq    
c001b0a4:	59                   	pop    ecx
c001b0a5:	5b                   	pop    ebx
c001b0a6:	5e                   	pop    esi
c001b0a7:	c3                   	ret    
c001b0a8:	59                   	pop    ecx
c001b0a9:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b0ae:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b0b3:	5b                   	pop    ebx
c001b0b4:	5e                   	pop    esi
c001b0b5:	c3                   	ret    

c001b0b6 <sysGetDiskVolumeLabel(regs*)>:
c001b0b6:	57                   	push   edi
c001b0b7:	56                   	push   esi
c001b0b8:	53                   	push   ebx
c001b0b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0bd:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b0c0:	83 fa 19             	cmp    edx,0x19
c001b0c3:	77 34                	ja     c001b0f9 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b0c5:	8b 0c 95 00 dd 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd2300]
c001b0cc:	85 c9                	test   ecx,ecx
c001b0ce:	74 29                	je     c001b0f9 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b0d0:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b0d3:	85 db                	test   ebx,ebx
c001b0d5:	74 22                	je     c001b0f9 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b0d7:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b0da:	85 c0                	test   eax,eax
c001b0dc:	74 1b                	je     c001b0f9 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b0de:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b0e4:	83 ec 0c             	sub    esp,0xc
c001b0e7:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b0e9:	50                   	push   eax
c001b0ea:	53                   	push   ebx
c001b0eb:	52                   	push   edx
c001b0ec:	51                   	push   ecx
c001b0ed:	56                   	push   esi
c001b0ee:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b0f1:	83 c4 20             	add    esp,0x20
c001b0f4:	99                   	cdq    
c001b0f5:	5b                   	pop    ebx
c001b0f6:	5e                   	pop    esi
c001b0f7:	5f                   	pop    edi
c001b0f8:	c3                   	ret    
c001b0f9:	5b                   	pop    ebx
c001b0fa:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b0ff:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b104:	5e                   	pop    esi
c001b105:	5f                   	pop    edi
c001b106:	c3                   	ret    

c001b107 <sysShutdown(regs*)>:
c001b107:	83 ec 0c             	sub    esp,0xc
c001b10a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b10e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b111:	85 c0                	test   eax,eax
c001b113:	74 18                	je     c001b12d <sysShutdown(regs*)+0x26>
c001b115:	83 f8 01             	cmp    eax,0x1
c001b118:	74 38                	je     c001b152 <sysShutdown(regs*)+0x4b>
c001b11a:	83 f8 02             	cmp    eax,0x2
c001b11d:	74 24                	je     c001b143 <sysShutdown(regs*)+0x3c>
c001b11f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b124:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b129:	83 c4 0c             	add    esp,0xc
c001b12c:	c3                   	ret    
c001b12d:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c001b132:	8b 10                	mov    edx,DWORD PTR [eax]
c001b134:	6a 00                	push   0x0
c001b136:	6a 00                	push   0x0
c001b138:	6a 00                	push   0x0
c001b13a:	50                   	push   eax
c001b13b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b13e:	83 c4 10             	add    esp,0x10
c001b141:	eb dc                	jmp    c001b11f <sysShutdown(regs*)+0x18>
c001b143:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c001b148:	8b 10                	mov    edx,DWORD PTR [eax]
c001b14a:	6a 00                	push   0x0
c001b14c:	6a 00                	push   0x0
c001b14e:	6a 01                	push   0x1
c001b150:	eb e8                	jmp    c001b13a <sysShutdown(regs*)+0x33>
c001b152:	a1 a0 fd 02 c0       	mov    eax,ds:0xc002fda0
c001b157:	85 c0                	test   eax,eax
c001b159:	74 02                	je     c001b15d <sysShutdown(regs*)+0x56>
c001b15b:	ff d0                	call   eax
c001b15d:	31 c0                	xor    eax,eax
c001b15f:	31 d2                	xor    edx,edx
c001b161:	83 c4 0c             	add    esp,0xc
c001b164:	c3                   	ret    

c001b165 <sysCallRealpath(regs*)>:
c001b165:	83 ec 0c             	sub    esp,0xc
c001b168:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b16c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b16f:	85 d2                	test   edx,edx
c001b171:	74 07                	je     c001b17a <sysCallRealpath(regs*)+0x15>
c001b173:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b176:	85 c0                	test   eax,eax
c001b178:	75 0b                	jne    c001b185 <sysCallRealpath(regs*)+0x20>
c001b17a:	b8 01 00 00 00       	mov    eax,0x1
c001b17f:	31 d2                	xor    edx,edx
c001b181:	83 c4 0c             	add    esp,0xc
c001b184:	c3                   	ret    
c001b185:	51                   	push   ecx
c001b186:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b18c:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b18f:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b195:	51                   	push   ecx
c001b196:	52                   	push   edx
c001b197:	50                   	push   eax
c001b198:	e8 e1 77 ff ff       	call   c001297e <Fs::standardiseFiles(char*, char const*, char const*)>
c001b19d:	83 c4 10             	add    esp,0x10
c001b1a0:	31 c0                	xor    eax,eax
c001b1a2:	31 d2                	xor    edx,edx
c001b1a4:	83 c4 0c             	add    esp,0xc
c001b1a7:	c3                   	ret    

c001b1a8 <sysCallReadDir(regs*)>:
c001b1a8:	53                   	push   ebx
c001b1a9:	83 ec 18             	sub    esp,0x18
c001b1ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b1b0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b1b3:	83 f8 02             	cmp    eax,0x2
c001b1b6:	76 60                	jbe    c001b218 <sysCallReadDir(regs*)+0x70>
c001b1b8:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001b1bf:	77 48                	ja     c001b209 <sysCallReadDir(regs*)+0x61>
c001b1c1:	83 ec 0c             	sub    esp,0xc
c001b1c4:	50                   	push   eax
c001b1c5:	e8 af 5e ff ff       	call   c0011079 <getFromFileDescriptor(int)>
c001b1ca:	83 c4 10             	add    esp,0x10
c001b1cd:	85 c0                	test   eax,eax
c001b1cf:	74 38                	je     c001b209 <sysCallReadDir(regs*)+0x61>
c001b1d1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b1d9:	83 ec 0c             	sub    esp,0xc
c001b1dc:	8b 10                	mov    edx,DWORD PTR [eax]
c001b1de:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b1e2:	51                   	push   ecx
c001b1e3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b1e6:	6a 00                	push   0x0
c001b1e8:	68 10 01 00 00       	push   0x110
c001b1ed:	50                   	push   eax
c001b1ee:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b1f1:	83 c4 20             	add    esp,0x20
c001b1f4:	85 c0                	test   eax,eax
c001b1f6:	74 29                	je     c001b221 <sysCallReadDir(regs*)+0x79>
c001b1f8:	83 f8 07             	cmp    eax,0x7
c001b1fb:	74 1b                	je     c001b218 <sysCallReadDir(regs*)+0x70>
c001b1fd:	b8 02 00 00 00       	mov    eax,0x2
c001b202:	31 d2                	xor    edx,edx
c001b204:	83 c4 18             	add    esp,0x18
c001b207:	5b                   	pop    ebx
c001b208:	c3                   	ret    
c001b209:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b20e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b213:	83 c4 18             	add    esp,0x18
c001b216:	5b                   	pop    ebx
c001b217:	c3                   	ret    
c001b218:	b8 01 00 00 00       	mov    eax,0x1
c001b21d:	31 d2                	xor    edx,edx
c001b21f:	eb e3                	jmp    c001b204 <sysCallReadDir(regs*)+0x5c>
c001b221:	31 c0                	xor    eax,eax
c001b223:	31 d2                	xor    edx,edx
c001b225:	eb dd                	jmp    c001b204 <sysCallReadDir(regs*)+0x5c>

c001b227 <sysCallIsATTY(regs*)>:
c001b227:	83 ec 0c             	sub    esp,0xc
c001b22a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b22e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b231:	83 f8 02             	cmp    eax,0x2
c001b234:	76 07                	jbe    c001b23d <sysCallIsATTY(regs*)+0x16>
c001b236:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b23b:	75 26                	jne    c001b263 <sysCallIsATTY(regs*)+0x3c>
c001b23d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b242:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b245:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b24b:	85 c0                	test   eax,eax
c001b24d:	74 24                	je     c001b273 <sysCallIsATTY(regs*)+0x4c>
c001b24f:	83 ec 0c             	sub    esp,0xc
c001b252:	8b 10                	mov    edx,DWORD PTR [eax]
c001b254:	50                   	push   eax
c001b255:	ff 12                	call   DWORD PTR [edx]
c001b257:	31 d2                	xor    edx,edx
c001b259:	0f b6 c0             	movzx  eax,al
c001b25c:	83 c4 10             	add    esp,0x10
c001b25f:	83 c4 0c             	add    esp,0xc
c001b262:	c3                   	ret    
c001b263:	83 ec 0c             	sub    esp,0xc
c001b266:	50                   	push   eax
c001b267:	e8 0d 5e ff ff       	call   c0011079 <getFromFileDescriptor(int)>
c001b26c:	83 c4 10             	add    esp,0x10
c001b26f:	85 c0                	test   eax,eax
c001b271:	75 dc                	jne    c001b24f <sysCallIsATTY(regs*)+0x28>
c001b273:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b278:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b27d:	83 c4 0c             	add    esp,0xc
c001b280:	c3                   	ret    

c001b281 <sysCallSeek(regs*)>:
c001b281:	53                   	push   ebx
c001b282:	83 ec 08             	sub    esp,0x8
c001b285:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b289:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b28c:	8d 50 fd             	lea    edx,[eax-0x3]
c001b28f:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b295:	77 32                	ja     c001b2c9 <sysCallSeek(regs*)+0x48>
c001b297:	83 ec 0c             	sub    esp,0xc
c001b29a:	50                   	push   eax
c001b29b:	e8 d9 5d ff ff       	call   c0011079 <getFromFileDescriptor(int)>
c001b2a0:	83 c4 0c             	add    esp,0xc
c001b2a3:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b2a6:	31 db                	xor    ebx,ebx
c001b2a8:	53                   	push   ebx
c001b2a9:	51                   	push   ecx
c001b2aa:	50                   	push   eax
c001b2ab:	e8 9a 79 ff ff       	call   c0012c4a <File::seek(unsigned long long)>
c001b2b0:	83 c4 10             	add    esp,0x10
c001b2b3:	85 c0                	test   eax,eax
c001b2b5:	0f 95 c0             	setne  al
c001b2b8:	31 d2                	xor    edx,edx
c001b2ba:	0f b6 c0             	movzx  eax,al
c001b2bd:	f7 d8                	neg    eax
c001b2bf:	83 d2 00             	adc    edx,0x0
c001b2c2:	83 c4 08             	add    esp,0x8
c001b2c5:	f7 da                	neg    edx
c001b2c7:	5b                   	pop    ebx
c001b2c8:	c3                   	ret    
c001b2c9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b2ce:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b2d3:	83 c4 08             	add    esp,0x8
c001b2d6:	5b                   	pop    ebx
c001b2d7:	c3                   	ret    

c001b2d8 <sysCallTell(regs*)>:
c001b2d8:	53                   	push   ebx
c001b2d9:	83 ec 08             	sub    esp,0x8
c001b2dc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b2e0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b2e3:	83 f8 02             	cmp    eax,0x2
c001b2e6:	76 4d                	jbe    c001b335 <sysCallTell(regs*)+0x5d>
c001b2e8:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b2ed:	76 19                	jbe    c001b308 <sysCallTell(regs*)+0x30>
c001b2ef:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b2f2:	31 d2                	xor    edx,edx
c001b2f4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b2fa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b301:	31 c0                	xor    eax,eax
c001b303:	83 c4 08             	add    esp,0x8
c001b306:	5b                   	pop    ebx
c001b307:	c3                   	ret    
c001b308:	83 ec 0c             	sub    esp,0xc
c001b30b:	50                   	push   eax
c001b30c:	e8 68 5d ff ff       	call   c0011079 <getFromFileDescriptor(int)>
c001b311:	5a                   	pop    edx
c001b312:	59                   	pop    ecx
c001b313:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b316:	50                   	push   eax
c001b317:	e8 84 79 ff ff       	call   c0012ca0 <File::tell(unsigned long long*)>
c001b31c:	83 c4 10             	add    esp,0x10
c001b31f:	85 c0                	test   eax,eax
c001b321:	0f 95 c0             	setne  al
c001b324:	31 d2                	xor    edx,edx
c001b326:	0f b6 c0             	movzx  eax,al
c001b329:	f7 d8                	neg    eax
c001b32b:	83 d2 00             	adc    edx,0x0
c001b32e:	83 c4 08             	add    esp,0x8
c001b331:	f7 da                	neg    edx
c001b333:	5b                   	pop    ebx
c001b334:	c3                   	ret    
c001b335:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b33a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b33f:	83 c4 08             	add    esp,0x8
c001b342:	5b                   	pop    ebx
c001b343:	c3                   	ret    

c001b344 <sysCallSize(regs*)>:
c001b344:	53                   	push   ebx
c001b345:	83 ec 18             	sub    esp,0x18
c001b348:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b34c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b34f:	83 f8 02             	cmp    eax,0x2
c001b352:	76 53                	jbe    c001b3a7 <sysCallSize(regs*)+0x63>
c001b354:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b359:	76 19                	jbe    c001b374 <sysCallSize(regs*)+0x30>
c001b35b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b35e:	31 d2                	xor    edx,edx
c001b360:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b366:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b36d:	31 c0                	xor    eax,eax
c001b36f:	83 c4 18             	add    esp,0x18
c001b372:	5b                   	pop    ebx
c001b373:	c3                   	ret    
c001b374:	83 ec 0c             	sub    esp,0xc
c001b377:	50                   	push   eax
c001b378:	e8 fc 5c ff ff       	call   c0011079 <getFromFileDescriptor(int)>
c001b37d:	83 c4 0c             	add    esp,0xc
c001b380:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b384:	52                   	push   edx
c001b385:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b388:	50                   	push   eax
c001b389:	e8 aa 7a ff ff       	call   c0012e38 <File::stat(unsigned long long*, bool*)>
c001b38e:	83 c4 10             	add    esp,0x10
c001b391:	85 c0                	test   eax,eax
c001b393:	0f 95 c0             	setne  al
c001b396:	31 d2                	xor    edx,edx
c001b398:	0f b6 c0             	movzx  eax,al
c001b39b:	f7 d8                	neg    eax
c001b39d:	83 d2 00             	adc    edx,0x0
c001b3a0:	83 c4 18             	add    esp,0x18
c001b3a3:	f7 da                	neg    edx
c001b3a5:	5b                   	pop    ebx
c001b3a6:	c3                   	ret    
c001b3a7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b3ac:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b3b1:	83 c4 18             	add    esp,0x18
c001b3b4:	5b                   	pop    ebx
c001b3b5:	c3                   	ret    

c001b3b6 <sysCallSizeFromFilename(regs*)>:
c001b3b6:	57                   	push   edi
c001b3b7:	56                   	push   esi
c001b3b8:	53                   	push   ebx
c001b3b9:	83 ec 20             	sub    esp,0x20
c001b3bc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b3c0:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001b3c3:	83 fb 02             	cmp    ebx,0x2
c001b3c6:	0f 86 88 00 00 00    	jbe    c001b454 <sysCallSizeFromFilename(regs*)+0x9e>
c001b3cc:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b3d2:	76 1b                	jbe    c001b3ef <sysCallSizeFromFilename(regs*)+0x39>
c001b3d4:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b3d7:	31 d2                	xor    edx,edx
c001b3d9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b3df:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b3e6:	83 c4 20             	add    esp,0x20
c001b3e9:	31 c0                	xor    eax,eax
c001b3eb:	5b                   	pop    ebx
c001b3ec:	5e                   	pop    esi
c001b3ed:	5f                   	pop    edi
c001b3ee:	c3                   	ret    
c001b3ef:	83 ec 0c             	sub    esp,0xc
c001b3f2:	68 14 01 00 00       	push   0x114
c001b3f7:	e8 a0 41 ff ff       	call   c000f59c <malloc>
c001b3fc:	83 c4 0c             	add    esp,0xc
c001b3ff:	89 c7                	mov    edi,eax
c001b401:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b406:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b409:	53                   	push   ebx
c001b40a:	57                   	push   edi
c001b40b:	e8 18 77 ff ff       	call   c0012b28 <File::File(char const*, Process*)>
c001b410:	83 c4 0c             	add    esp,0xc
c001b413:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b417:	50                   	push   eax
c001b418:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b41b:	57                   	push   edi
c001b41c:	e8 17 7a ff ff       	call   c0012e38 <File::stat(unsigned long long*, bool*)>
c001b421:	83 c4 10             	add    esp,0x10
c001b424:	85 ff                	test   edi,edi
c001b426:	74 14                	je     c001b43c <sysCallSizeFromFilename(regs*)+0x86>
c001b428:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b42c:	8b 17                	mov    edx,DWORD PTR [edi]
c001b42e:	83 ec 0c             	sub    esp,0xc
c001b431:	57                   	push   edi
c001b432:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b435:	83 c4 10             	add    esp,0x10
c001b438:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b43c:	85 c0                	test   eax,eax
c001b43e:	0f 95 c0             	setne  al
c001b441:	31 d2                	xor    edx,edx
c001b443:	0f b6 c0             	movzx  eax,al
c001b446:	f7 d8                	neg    eax
c001b448:	83 d2 00             	adc    edx,0x0
c001b44b:	83 c4 20             	add    esp,0x20
c001b44e:	f7 da                	neg    edx
c001b450:	5b                   	pop    ebx
c001b451:	5e                   	pop    esi
c001b452:	5f                   	pop    edi
c001b453:	c3                   	ret    
c001b454:	83 c4 20             	add    esp,0x20
c001b457:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b45c:	5b                   	pop    ebx
c001b45d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b462:	5e                   	pop    esi
c001b463:	5f                   	pop    edi
c001b464:	c3                   	ret    

c001b465 <sysCallClose(regs*)>:
c001b465:	53                   	push   ebx
c001b466:	83 ec 08             	sub    esp,0x8
c001b469:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b46d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b470:	83 f8 02             	cmp    eax,0x2
c001b473:	76 41                	jbe    c001b4b6 <sysCallClose(regs*)+0x51>
c001b475:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001b47b:	83 fa 01             	cmp    edx,0x1
c001b47e:	76 2d                	jbe    c001b4ad <sysCallClose(regs*)+0x48>
c001b480:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b485:	77 2f                	ja     c001b4b6 <sysCallClose(regs*)+0x51>
c001b487:	83 ec 0c             	sub    esp,0xc
c001b48a:	50                   	push   eax
c001b48b:	e8 e9 5b ff ff       	call   c0011079 <getFromFileDescriptor(int)>
c001b490:	89 c3                	mov    ebx,eax
c001b492:	89 04 24             	mov    DWORD PTR [esp],eax
c001b495:	e8 50 77 ff ff       	call   c0012bea <File::close()>
c001b49a:	83 c4 10             	add    esp,0x10
c001b49d:	85 db                	test   ebx,ebx
c001b49f:	74 0c                	je     c001b4ad <sysCallClose(regs*)+0x48>
c001b4a1:	83 ec 0c             	sub    esp,0xc
c001b4a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b4a6:	53                   	push   ebx
c001b4a7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b4aa:	83 c4 10             	add    esp,0x10
c001b4ad:	31 c0                	xor    eax,eax
c001b4af:	31 d2                	xor    edx,edx
c001b4b1:	83 c4 08             	add    esp,0x8
c001b4b4:	5b                   	pop    ebx
c001b4b5:	c3                   	ret    
c001b4b6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b4bb:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b4c0:	83 c4 08             	add    esp,0x8
c001b4c3:	5b                   	pop    ebx
c001b4c4:	c3                   	ret    

c001b4c5 <sysCallOpenDir(regs*)>:
c001b4c5:	56                   	push   esi
c001b4c6:	53                   	push   ebx
c001b4c7:	53                   	push   ebx
c001b4c8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b4cc:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001b4cf:	85 f6                	test   esi,esi
c001b4d1:	74 59                	je     c001b52c <sysCallOpenDir(regs*)+0x67>
c001b4d3:	83 ec 0c             	sub    esp,0xc
c001b4d6:	68 14 01 00 00       	push   0x114
c001b4db:	e8 bc 40 ff ff       	call   c000f59c <malloc>
c001b4e0:	83 c4 0c             	add    esp,0xc
c001b4e3:	89 c6                	mov    esi,eax
c001b4e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4ea:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b4ed:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b4f0:	56                   	push   esi
c001b4f1:	e8 de 7a ff ff       	call   c0012fd4 <Directory::Directory(char const*, Process*)>
c001b4f6:	83 c4 10             	add    esp,0x10
c001b4f9:	85 f6                	test   esi,esi
c001b4fb:	74 2f                	je     c001b52c <sysCallOpenDir(regs*)+0x67>
c001b4fd:	83 ec 0c             	sub    esp,0xc
c001b500:	56                   	push   esi
c001b501:	e8 32 7b ff ff       	call   c0013038 <Directory::open()>
c001b506:	83 c4 10             	add    esp,0x10
c001b509:	85 c0                	test   eax,eax
c001b50b:	75 1f                	jne    c001b52c <sysCallOpenDir(regs*)+0x67>
c001b50d:	83 ec 0c             	sub    esp,0xc
c001b510:	56                   	push   esi
c001b511:	e8 6e 58 ff ff       	call   c0010d84 <UnixFile::getFileDescriptor()>
c001b516:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b519:	83 c4 10             	add    esp,0x10
c001b51c:	89 02                	mov    DWORD PTR [edx],eax
c001b51e:	c1 f8 1f             	sar    eax,0x1f
c001b521:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b524:	31 c0                	xor    eax,eax
c001b526:	59                   	pop    ecx
c001b527:	31 d2                	xor    edx,edx
c001b529:	5b                   	pop    ebx
c001b52a:	5e                   	pop    esi
c001b52b:	c3                   	ret    
c001b52c:	59                   	pop    ecx
c001b52d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b532:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b537:	5b                   	pop    ebx
c001b538:	5e                   	pop    esi
c001b539:	c3                   	ret    

c001b53a <sysCallCloseDir(regs*)>:
c001b53a:	53                   	push   ebx
c001b53b:	83 ec 08             	sub    esp,0x8
c001b53e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b542:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b545:	8d 50 fd             	lea    edx,[eax-0x3]
c001b548:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b54e:	77 2f                	ja     c001b57f <sysCallCloseDir(regs*)+0x45>
c001b550:	83 ec 0c             	sub    esp,0xc
c001b553:	50                   	push   eax
c001b554:	e8 20 5b ff ff       	call   c0011079 <getFromFileDescriptor(int)>
c001b559:	89 c3                	mov    ebx,eax
c001b55b:	89 04 24             	mov    DWORD PTR [esp],eax
c001b55e:	e8 31 7b ff ff       	call   c0013094 <Directory::close()>
c001b563:	83 c4 10             	add    esp,0x10
c001b566:	85 db                	test   ebx,ebx
c001b568:	74 0c                	je     c001b576 <sysCallCloseDir(regs*)+0x3c>
c001b56a:	83 ec 0c             	sub    esp,0xc
c001b56d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b56f:	53                   	push   ebx
c001b570:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b573:	83 c4 10             	add    esp,0x10
c001b576:	31 c0                	xor    eax,eax
c001b578:	31 d2                	xor    edx,edx
c001b57a:	83 c4 08             	add    esp,0x8
c001b57d:	5b                   	pop    ebx
c001b57e:	c3                   	ret    
c001b57f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b584:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b589:	83 c4 08             	add    esp,0x8
c001b58c:	5b                   	pop    ebx
c001b58d:	c3                   	ret    

c001b58e <sysCallMakeDir(regs*)>:
c001b58e:	56                   	push   esi
c001b58f:	53                   	push   ebx
c001b590:	83 ec 10             	sub    esp,0x10
c001b593:	68 14 01 00 00       	push   0x114
c001b598:	e8 ff 3f ff ff       	call   c000f59c <malloc>
c001b59d:	83 c4 0c             	add    esp,0xc
c001b5a0:	89 c3                	mov    ebx,eax
c001b5a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5a7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b5aa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b5ae:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b5b1:	53                   	push   ebx
c001b5b2:	e8 1d 7a ff ff       	call   c0012fd4 <Directory::Directory(char const*, Process*)>
c001b5b7:	83 c4 10             	add    esp,0x10
c001b5ba:	85 db                	test   ebx,ebx
c001b5bc:	74 32                	je     c001b5f0 <sysCallMakeDir(regs*)+0x62>
c001b5be:	83 ec 0c             	sub    esp,0xc
c001b5c1:	53                   	push   ebx
c001b5c2:	e8 51 7c ff ff       	call   c0013218 <Directory::create()>
c001b5c7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b5ca:	89 c6                	mov    esi,eax
c001b5cc:	e8 c3 7a ff ff       	call   c0013094 <Directory::close()>
c001b5d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b5d3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b5d6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b5d9:	83 c4 10             	add    esp,0x10
c001b5dc:	31 c0                	xor    eax,eax
c001b5de:	59                   	pop    ecx
c001b5df:	85 f6                	test   esi,esi
c001b5e1:	5b                   	pop    ebx
c001b5e2:	0f 95 c0             	setne  al
c001b5e5:	5e                   	pop    esi
c001b5e6:	31 d2                	xor    edx,edx
c001b5e8:	f7 d8                	neg    eax
c001b5ea:	83 d2 00             	adc    edx,0x0
c001b5ed:	f7 da                	neg    edx
c001b5ef:	c3                   	ret    
c001b5f0:	59                   	pop    ecx
c001b5f1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b5f6:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b5fb:	5b                   	pop    ebx
c001b5fc:	5e                   	pop    esi
c001b5fd:	c3                   	ret    

c001b5fe <sysCallWait(regs*)>:
c001b5fe:	83 ec 10             	sub    esp,0x10
c001b601:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b605:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b608:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b60b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b60e:	e8 b1 24 00 00       	call   c001dac4 <waitTask(int, int*, int)>
c001b613:	83 c4 1c             	add    esp,0x1c
c001b616:	99                   	cdq    
c001b617:	c3                   	ret    

c001b618 <sysCallNotImpl(regs*)>:
c001b618:	83 ec 18             	sub    esp,0x18
c001b61b:	68 79 b6 02 c0       	push   0xc002b679
c001b620:	e8 10 e7 ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c001b625:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b62a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b62f:	83 c4 1c             	add    esp,0x1c
c001b632:	c3                   	ret    

c001b633 <sysPanic(regs*)>:
c001b633:	83 ec 18             	sub    esp,0x18
c001b636:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b63a:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b63d:	e8 f3 e6 ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c001b642:	b8 01 00 00 00       	mov    eax,0x1
c001b647:	31 d2                	xor    edx,edx
c001b649:	83 c4 1c             	add    esp,0x1c
c001b64c:	c3                   	ret    

c001b64d <sysCallRmdir(regs*)>:
c001b64d:	56                   	push   esi
c001b64e:	53                   	push   ebx
c001b64f:	83 ec 20             	sub    esp,0x20
c001b652:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b656:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b659:	68 14 01 00 00       	push   0x114
c001b65e:	e8 39 3f ff ff       	call   c000f59c <malloc>
c001b663:	83 c4 0c             	add    esp,0xc
c001b666:	89 c3                	mov    ebx,eax
c001b668:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b66d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b670:	56                   	push   esi
c001b671:	53                   	push   ebx
c001b672:	e8 b1 74 ff ff       	call   c0012b28 <File::File(char const*, Process*)>
c001b677:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b67a:	e8 85 76 ff ff       	call   c0012d04 <File::unlink()>
c001b67f:	83 c4 10             	add    esp,0x10
c001b682:	85 db                	test   ebx,ebx
c001b684:	74 14                	je     c001b69a <sysCallRmdir(regs*)+0x4d>
c001b686:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b68a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b68c:	83 ec 0c             	sub    esp,0xc
c001b68f:	53                   	push   ebx
c001b690:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b693:	83 c4 10             	add    esp,0x10
c001b696:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b69a:	85 c0                	test   eax,eax
c001b69c:	0f 95 c0             	setne  al
c001b69f:	31 d2                	xor    edx,edx
c001b6a1:	0f b6 c0             	movzx  eax,al
c001b6a4:	f7 d8                	neg    eax
c001b6a6:	83 d2 00             	adc    edx,0x0
c001b6a9:	83 c4 14             	add    esp,0x14
c001b6ac:	f7 da                	neg    edx
c001b6ae:	5b                   	pop    ebx
c001b6af:	5e                   	pop    esi
c001b6b0:	c3                   	ret    

c001b6b1 <sysCallUnlink(regs*)>:
c001b6b1:	56                   	push   esi
c001b6b2:	53                   	push   ebx
c001b6b3:	83 ec 20             	sub    esp,0x20
c001b6b6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b6ba:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b6bd:	68 14 01 00 00       	push   0x114
c001b6c2:	e8 d5 3e ff ff       	call   c000f59c <malloc>
c001b6c7:	83 c4 0c             	add    esp,0xc
c001b6ca:	89 c3                	mov    ebx,eax
c001b6cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6d1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b6d4:	56                   	push   esi
c001b6d5:	53                   	push   ebx
c001b6d6:	e8 4d 74 ff ff       	call   c0012b28 <File::File(char const*, Process*)>
c001b6db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b6de:	e8 21 76 ff ff       	call   c0012d04 <File::unlink()>
c001b6e3:	83 c4 10             	add    esp,0x10
c001b6e6:	85 db                	test   ebx,ebx
c001b6e8:	74 14                	je     c001b6fe <sysCallUnlink(regs*)+0x4d>
c001b6ea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b6ee:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b6f0:	83 ec 0c             	sub    esp,0xc
c001b6f3:	53                   	push   ebx
c001b6f4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b6f7:	83 c4 10             	add    esp,0x10
c001b6fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b6fe:	85 c0                	test   eax,eax
c001b700:	0f 95 c0             	setne  al
c001b703:	31 d2                	xor    edx,edx
c001b705:	0f b6 c0             	movzx  eax,al
c001b708:	f7 d8                	neg    eax
c001b70a:	83 d2 00             	adc    edx,0x0
c001b70d:	83 c4 14             	add    esp,0x14
c001b710:	f7 da                	neg    edx
c001b712:	5b                   	pop    ebx
c001b713:	5e                   	pop    esi
c001b714:	c3                   	ret    

c001b715 <sysCallGetArgv(regs*)>:
c001b715:	83 ec 0c             	sub    esp,0xc
c001b718:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b71c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b71f:	85 c0                	test   eax,eax
c001b721:	78 2b                	js     c001b74e <sysCallGetArgv(regs*)+0x39>
c001b723:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b729:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b72c:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001b732:	7d 1a                	jge    c001b74e <sysCallGetArgv(regs*)+0x39>
c001b734:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001b73b:	85 c0                	test   eax,eax
c001b73d:	74 17                	je     c001b756 <sysCallGetArgv(regs*)+0x41>
c001b73f:	83 ec 08             	sub    esp,0x8
c001b742:	50                   	push   eax
c001b743:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001b746:	e8 c1 50 fe ff       	call   c000080c <strcpy>
c001b74b:	83 c4 10             	add    esp,0x10
c001b74e:	31 c0                	xor    eax,eax
c001b750:	31 d2                	xor    edx,edx
c001b752:	83 c4 0c             	add    esp,0xc
c001b755:	c3                   	ret    
c001b756:	b8 01 00 00 00       	mov    eax,0x1
c001b75b:	31 d2                	xor    edx,edx
c001b75d:	83 c4 0c             	add    esp,0xc
c001b760:	c3                   	ret    

c001b761 <sysCallTTYName(regs*)>:
c001b761:	56                   	push   esi
c001b762:	53                   	push   ebx
c001b763:	53                   	push   ebx
c001b764:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b768:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001b76b:	85 c0                	test   eax,eax
c001b76d:	74 5f                	je     c001b7ce <sysCallTTYName(regs*)+0x6d>
c001b76f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b772:	83 f8 02             	cmp    eax,0x2
c001b775:	77 3e                	ja     c001b7b5 <sysCallTTYName(regs*)+0x54>
c001b777:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b77c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b77f:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001b785:	85 db                	test   ebx,ebx
c001b787:	74 45                	je     c001b7ce <sysCallTTYName(regs*)+0x6d>
c001b789:	83 ec 0c             	sub    esp,0xc
c001b78c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b78e:	53                   	push   ebx
c001b78f:	ff 10                	call   DWORD PTR [eax]
c001b791:	83 c4 10             	add    esp,0x10
c001b794:	84 c0                	test   al,al
c001b796:	74 41                	je     c001b7d9 <sysCallTTYName(regs*)+0x78>
c001b798:	83 ec 08             	sub    esp,0x8
c001b79b:	81 c3 82 00 00 00    	add    ebx,0x82
c001b7a1:	53                   	push   ebx
c001b7a2:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b7a5:	e8 62 50 fe ff       	call   c000080c <strcpy>
c001b7aa:	83 c4 10             	add    esp,0x10
c001b7ad:	31 c0                	xor    eax,eax
c001b7af:	59                   	pop    ecx
c001b7b0:	31 d2                	xor    edx,edx
c001b7b2:	5b                   	pop    ebx
c001b7b3:	5e                   	pop    esi
c001b7b4:	c3                   	ret    
c001b7b5:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b7ba:	74 bb                	je     c001b777 <sysCallTTYName(regs*)+0x16>
c001b7bc:	83 ec 0c             	sub    esp,0xc
c001b7bf:	50                   	push   eax
c001b7c0:	e8 b4 58 ff ff       	call   c0011079 <getFromFileDescriptor(int)>
c001b7c5:	83 c4 10             	add    esp,0x10
c001b7c8:	89 c3                	mov    ebx,eax
c001b7ca:	85 db                	test   ebx,ebx
c001b7cc:	75 bb                	jne    c001b789 <sysCallTTYName(regs*)+0x28>
c001b7ce:	59                   	pop    ecx
c001b7cf:	b8 01 00 00 00       	mov    eax,0x1
c001b7d4:	31 d2                	xor    edx,edx
c001b7d6:	5b                   	pop    ebx
c001b7d7:	5e                   	pop    esi
c001b7d8:	c3                   	ret    
c001b7d9:	59                   	pop    ecx
c001b7da:	b8 02 00 00 00       	mov    eax,0x2
c001b7df:	31 d2                	xor    edx,edx
c001b7e1:	5b                   	pop    ebx
c001b7e2:	5e                   	pop    esi
c001b7e3:	c3                   	ret    

c001b7e4 <sysCallUSleep(regs*)>:
c001b7e4:	83 ec 14             	sub    esp,0x14
c001b7e7:	b8 e8 03 00 00       	mov    eax,0x3e8
c001b7ec:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b7f0:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001b7f7:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001b7fa:	01 ca                	add    edx,ecx
c001b7fc:	52                   	push   edx
c001b7fd:	50                   	push   eax
c001b7fe:	e8 98 23 00 00       	call   c001db9b <nanoSleep(unsigned long long)>
c001b803:	31 c0                	xor    eax,eax
c001b805:	31 d2                	xor    edx,edx
c001b807:	83 c4 1c             	add    esp,0x1c
c001b80a:	c3                   	ret    

c001b80b <sysCallSpawn(regs*)>:
c001b80b:	56                   	push   esi
c001b80c:	53                   	push   ebx
c001b80d:	50                   	push   eax
c001b80e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b812:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001b815:	85 c0                	test   eax,eax
c001b817:	75 08                	jne    c001b821 <sysCallSpawn(regs*)+0x16>
c001b819:	59                   	pop    ecx
c001b81a:	31 c0                	xor    eax,eax
c001b81c:	31 d2                	xor    edx,edx
c001b81e:	5b                   	pop    ebx
c001b81f:	5e                   	pop    esi
c001b820:	c3                   	ret    
c001b821:	83 ec 0c             	sub    esp,0xc
c001b824:	68 3f 07 00 00       	push   0x73f
c001b829:	e8 6e 3d ff ff       	call   c000f59c <malloc>
c001b82e:	83 c4 10             	add    esp,0x10
c001b831:	89 c6                	mov    esi,eax
c001b833:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001b836:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b839:	85 c0                	test   eax,eax
c001b83b:	75 32                	jne    c001b86f <sysCallSpawn(regs*)+0x64>
c001b83d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b842:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b845:	52                   	push   edx
c001b846:	50                   	push   eax
c001b847:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b84a:	56                   	push   esi
c001b84b:	e8 70 1a 00 00       	call   c001d2c0 <Process::Process(char const*, Process*, char**)>
c001b850:	83 c4 10             	add    esp,0x10
c001b853:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001b85a:	75 bd                	jne    c001b819 <sysCallSpawn(regs*)+0xe>
c001b85c:	83 ec 0c             	sub    esp,0xc
c001b85f:	56                   	push   esi
c001b860:	e8 3d 1f 00 00       	call   c001d7a2 <Process::createUserThread()>
c001b865:	8b 06                	mov    eax,DWORD PTR [esi]
c001b867:	83 c4 10             	add    esp,0x10
c001b86a:	99                   	cdq    
c001b86b:	59                   	pop    ecx
c001b86c:	5b                   	pop    ebx
c001b86d:	5e                   	pop    esi
c001b86e:	c3                   	ret    
c001b86f:	31 c0                	xor    eax,eax
c001b871:	eb d2                	jmp    c001b845 <sysCallSpawn(regs*)+0x3a>

c001b873 <sysCallGetEnv(regs*)>:
c001b873:	57                   	push   edi
c001b874:	56                   	push   esi
c001b875:	53                   	push   ebx
c001b876:	83 ec 1c             	sub    esp,0x1c
c001b879:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b87d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b882:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001b885:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b888:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b88b:	e8 f1 e3 ff ff       	call   c0019c81 <Krnl::getProcessTotalEnvCount(Process*)>
c001b890:	83 c4 10             	add    esp,0x10
c001b893:	39 c7                	cmp    edi,eax
c001b895:	7c 14                	jl     c001b8ab <sysCallGetEnv(regs*)+0x38>
c001b897:	85 f6                	test   esi,esi
c001b899:	75 0b                	jne    c001b8a6 <sysCallGetEnv(regs*)+0x33>
c001b89b:	83 c4 10             	add    esp,0x10
c001b89e:	31 c0                	xor    eax,eax
c001b8a0:	5b                   	pop    ebx
c001b8a1:	31 d2                	xor    edx,edx
c001b8a3:	5e                   	pop    esi
c001b8a4:	5f                   	pop    edi
c001b8a5:	c3                   	ret    
c001b8a6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b8a9:	eb f0                	jmp    c001b89b <sysCallGetEnv(regs*)+0x28>
c001b8ab:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b8af:	52                   	push   edx
c001b8b0:	57                   	push   edi
c001b8b1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b8b7:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001b8ba:	50                   	push   eax
c001b8bb:	e8 e1 e3 ff ff       	call   c0019ca1 <Krnl::getProcessEnvPair(Process*, int)>
c001b8c0:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b8c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b8c7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b8cb:	83 c4 0c             	add    esp,0xc
c001b8ce:	85 c9                	test   ecx,ecx
c001b8d0:	75 23                	jne    c001b8f5 <sysCallGetEnv(regs*)+0x82>
c001b8d2:	83 ec 0c             	sub    esp,0xc
c001b8d5:	50                   	push   eax
c001b8d6:	e8 91 4e fe ff       	call   c000076c <strlen>
c001b8db:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b8de:	89 c3                	mov    ebx,eax
c001b8e0:	e8 87 4e fe ff       	call   c000076c <strlen>
c001b8e5:	83 c4 10             	add    esp,0x10
c001b8e8:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001b8ec:	83 c4 10             	add    esp,0x10
c001b8ef:	31 d2                	xor    edx,edx
c001b8f1:	5b                   	pop    ebx
c001b8f2:	5e                   	pop    esi
c001b8f3:	5f                   	pop    edi
c001b8f4:	c3                   	ret    
c001b8f5:	83 ec 08             	sub    esp,0x8
c001b8f8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b8fb:	50                   	push   eax
c001b8fc:	56                   	push   esi
c001b8fd:	e8 0a 4f fe ff       	call   c000080c <strcpy>
c001b902:	58                   	pop    eax
c001b903:	5a                   	pop    edx
c001b904:	68 93 b6 02 c0       	push   0xc002b693
c001b909:	56                   	push   esi
c001b90a:	e8 3d 50 fe ff       	call   c000094c <strcat>
c001b90f:	59                   	pop    ecx
c001b910:	5b                   	pop    ebx
c001b911:	57                   	push   edi
c001b912:	56                   	push   esi
c001b913:	e8 34 50 fe ff       	call   c000094c <strcat>
c001b918:	83 c4 10             	add    esp,0x10
c001b91b:	e9 7b ff ff ff       	jmp    c001b89b <sysCallGetEnv(regs*)+0x28>

c001b920 <sysAppSettings(regs*)>:
c001b920:	57                   	push   edi
c001b921:	56                   	push   esi
c001b922:	56                   	push   esi
c001b923:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b927:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b92a:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001b930:	25 e0 1f 00 00       	and    eax,0x1fe0
c001b935:	66 3d c0 09          	cmp    ax,0x9c0
c001b939:	75 2e                	jne    c001b969 <sysAppSettings(regs*)+0x49>
c001b93b:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001b941:	83 e0 1f             	and    eax,0x1f
c001b944:	3c 01                	cmp    al,0x1
c001b946:	74 2c                	je     c001b974 <sysAppSettings(regs*)+0x54>
c001b948:	3c 07                	cmp    al,0x7
c001b94a:	0f 84 b3 00 00 00    	je     c001ba03 <sysAppSettings(regs*)+0xe3>
c001b950:	84 c0                	test   al,al
c001b952:	0f 84 d2 00 00 00    	je     c001ba2a <sysAppSettings(regs*)+0x10a>
c001b958:	3c 08                	cmp    al,0x8
c001b95a:	74 63                	je     c001b9bf <sysAppSettings(regs*)+0x9f>
c001b95c:	59                   	pop    ecx
c001b95d:	0f b6 c0             	movzx  eax,al
c001b960:	5e                   	pop    esi
c001b961:	05 e8 03 00 00       	add    eax,0x3e8
c001b966:	5f                   	pop    edi
c001b967:	99                   	cdq    
c001b968:	c3                   	ret    
c001b969:	b8 01 00 00 00       	mov    eax,0x1
c001b96e:	59                   	pop    ecx
c001b96f:	31 d2                	xor    edx,edx
c001b971:	5e                   	pop    esi
c001b972:	5f                   	pop    edi
c001b973:	c3                   	ret    
c001b974:	50                   	push   eax
c001b975:	68 00 01 00 00       	push   0x100
c001b97a:	6a 00                	push   0x0
c001b97c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b981:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b984:	83 c0 0c             	add    eax,0xc
c001b987:	50                   	push   eax
c001b988:	e8 c3 4d fe ff       	call   c0000750 <memset>
c001b98d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b992:	b9 ff 00 00 00       	mov    ecx,0xff
c001b997:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001b99a:	83 c7 0c             	add    edi,0xc
c001b99d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b99f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9a4:	5a                   	pop    edx
c001b9a5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b9a8:	59                   	pop    ecx
c001b9a9:	8d 50 0c             	lea    edx,[eax+0xc]
c001b9ac:	52                   	push   edx
c001b9ad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b9b3:	e8 ec 47 ff ff       	call   c00101a4 <VgaText::setTitle(char*)>
c001b9b8:	83 c4 10             	add    esp,0x10
c001b9bb:	31 c0                	xor    eax,eax
c001b9bd:	eb af                	jmp    c001b96e <sysAppSettings(regs*)+0x4e>
c001b9bf:	83 ec 08             	sub    esp,0x8
c001b9c2:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001b9c8:	83 e0 0f             	and    eax,0xf
c001b9cb:	50                   	push   eax
c001b9cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9d1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b9d4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b9da:	e8 b5 47 ff ff       	call   c0010194 <VgaText::setTitleColour(VgaColour)>
c001b9df:	5f                   	pop    edi
c001b9e0:	58                   	pop    eax
c001b9e1:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001b9e7:	c1 e8 04             	shr    eax,0x4
c001b9ea:	83 e0 0f             	and    eax,0xf
c001b9ed:	50                   	push   eax
c001b9ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9f3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b9f6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b9fc:	e8 83 47 ff ff       	call   c0010184 <VgaText::setTitleTextColour(VgaColour)>
c001ba01:	eb b5                	jmp    c001b9b8 <sysAppSettings(regs*)+0x98>
c001ba03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba08:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ba0b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001ba11:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001ba17:	c0 e8 06             	shr    al,0x6
c001ba1a:	83 e0 01             	and    eax,0x1
c001ba1d:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001ba23:	31 c0                	xor    eax,eax
c001ba25:	e9 44 ff ff ff       	jmp    c001b96e <sysAppSettings(regs*)+0x4e>
c001ba2a:	b8 02 00 00 00       	mov    eax,0x2
c001ba2f:	e9 3a ff ff ff       	jmp    c001b96e <sysAppSettings(regs*)+0x4e>

c001ba34 <sysSetFatAttrib(regs*)>:
c001ba34:	57                   	push   edi
c001ba35:	56                   	push   esi
c001ba36:	53                   	push   ebx
c001ba37:	83 ec 1c             	sub    esp,0x1c
c001ba3a:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001ba3e:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001ba41:	68 14 01 00 00       	push   0x114
c001ba46:	e8 51 3b ff ff       	call   c000f59c <malloc>
c001ba4b:	83 c4 0c             	add    esp,0xc
c001ba4e:	89 c3                	mov    ebx,eax
c001ba50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba55:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ba58:	57                   	push   edi
c001ba59:	53                   	push   ebx
c001ba5a:	e8 c9 70 ff ff       	call   c0012b28 <File::File(char const*, Process*)>
c001ba5f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001ba62:	83 c4 0c             	add    esp,0xc
c001ba65:	0f b6 d4             	movzx  edx,ah
c001ba68:	0f b6 c0             	movzx  eax,al
c001ba6b:	52                   	push   edx
c001ba6c:	50                   	push   eax
c001ba6d:	53                   	push   ebx
c001ba6e:	e8 2b 73 ff ff       	call   c0012d9e <File::chfatattr(unsigned char, unsigned char)>
c001ba73:	83 c4 10             	add    esp,0x10
c001ba76:	85 db                	test   ebx,ebx
c001ba78:	74 14                	je     c001ba8e <sysSetFatAttrib(regs*)+0x5a>
c001ba7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ba7e:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ba80:	83 ec 0c             	sub    esp,0xc
c001ba83:	53                   	push   ebx
c001ba84:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001ba87:	83 c4 10             	add    esp,0x10
c001ba8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba8e:	85 c0                	test   eax,eax
c001ba90:	0f 95 c0             	setne  al
c001ba93:	31 d2                	xor    edx,edx
c001ba95:	0f b6 c0             	movzx  eax,al
c001ba98:	f7 d8                	neg    eax
c001ba9a:	83 d2 00             	adc    edx,0x0
c001ba9d:	83 c4 10             	add    esp,0x10
c001baa0:	f7 da                	neg    edx
c001baa2:	5b                   	pop    ebx
c001baa3:	5e                   	pop    esi
c001baa4:	5f                   	pop    edi
c001baa5:	c3                   	ret    

c001baa6 <sysPipe(regs*)>:
c001baa6:	57                   	push   edi
c001baa7:	56                   	push   esi
c001baa8:	53                   	push   ebx
c001baa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baad:	83 ec 0c             	sub    esp,0xc
c001bab0:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001bab3:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001bab6:	6a 20                	push   0x20
c001bab8:	e8 df 3a ff ff       	call   c000f59c <malloc>
c001babd:	89 c3                	mov    ebx,eax
c001babf:	58                   	pop    eax
c001bac0:	5a                   	pop    edx
c001bac1:	68 00 50 00 00       	push   0x5000
c001bac6:	53                   	push   ebx
c001bac7:	e8 50 44 ff ff       	call   c000ff1c <Pipe::Pipe(int)>
c001bacc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bacf:	e8 b0 52 ff ff       	call   c0010d84 <UnixFile::getFileDescriptor()>
c001bad4:	89 07                	mov    DWORD PTR [edi],eax
c001bad6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bad9:	e8 a6 52 ff ff       	call   c0010d84 <UnixFile::getFileDescriptor()>
c001bade:	83 c4 10             	add    esp,0x10
c001bae1:	89 06                	mov    DWORD PTR [esi],eax
c001bae3:	31 d2                	xor    edx,edx
c001bae5:	5b                   	pop    ebx
c001bae6:	31 c0                	xor    eax,eax
c001bae8:	5e                   	pop    esi
c001bae9:	5f                   	pop    edi
c001baea:	c3                   	ret    

c001baeb <sysGetUnixTime(regs*)>:
c001baeb:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c001baf0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001baf6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bafa:	e9 1b 7a ff ff       	jmp    c001351a <Clock::timeInSecondsLocal()>

c001baff <string_ends_with(char const*, char const*)>:
c001baff:	57                   	push   edi
c001bb00:	56                   	push   esi
c001bb01:	53                   	push   ebx
c001bb02:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bb06:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001bb0a:	83 ec 0c             	sub    esp,0xc
c001bb0d:	53                   	push   ebx
c001bb0e:	e8 59 4c fe ff       	call   c000076c <strlen>
c001bb13:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bb16:	89 c6                	mov    esi,eax
c001bb18:	e8 4f 4c fe ff       	call   c000076c <strlen>
c001bb1d:	83 c4 10             	add    esp,0x10
c001bb20:	39 c6                	cmp    esi,eax
c001bb22:	7d 06                	jge    c001bb2a <string_ends_with(char const*, char const*)+0x2b>
c001bb24:	5b                   	pop    ebx
c001bb25:	31 c0                	xor    eax,eax
c001bb27:	5e                   	pop    esi
c001bb28:	5f                   	pop    edi
c001bb29:	c3                   	ret    
c001bb2a:	83 ec 08             	sub    esp,0x8
c001bb2d:	29 c6                	sub    esi,eax
c001bb2f:	57                   	push   edi
c001bb30:	01 f3                	add    ebx,esi
c001bb32:	53                   	push   ebx
c001bb33:	e8 60 4d fe ff       	call   c0000898 <strcmp>
c001bb38:	83 c4 10             	add    esp,0x10
c001bb3b:	85 c0                	test   eax,eax
c001bb3d:	5b                   	pop    ebx
c001bb3e:	0f 94 c0             	sete   al
c001bb41:	5e                   	pop    esi
c001bb42:	0f b6 c0             	movzx  eax,al
c001bb45:	5f                   	pop    edi
c001bb46:	c3                   	ret    

c001bb47 <sysCallOpen(regs*)>:
c001bb47:	56                   	push   esi
c001bb48:	53                   	push   ebx
c001bb49:	81 ec 04 01 00 00    	sub    esp,0x104
c001bb4f:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001bb56:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001bb59:	85 c9                	test   ecx,ecx
c001bb5b:	0f 84 ad 01 00 00    	je     c001bd0e <sysCallOpen(regs*)+0x1c7>
c001bb61:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001bb64:	85 c0                	test   eax,eax
c001bb66:	0f 84 a2 01 00 00    	je     c001bd0e <sysCallOpen(regs*)+0x1c7>
c001bb6c:	52                   	push   edx
c001bb6d:	68 95 b6 02 c0       	push   0xc002b695
c001bb72:	50                   	push   eax
c001bb73:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001bb77:	56                   	push   esi
c001bb78:	e8 01 6e ff ff       	call   c001297e <Fs::standardiseFiles(char*, char const*, char const*)>
c001bb7d:	89 34 24             	mov    DWORD PTR [esp],esi
c001bb80:	e8 e7 4b fe ff       	call   c000076c <strlen>
c001bb85:	83 c4 10             	add    esp,0x10
c001bb88:	48                   	dec    eax
c001bb89:	74 1d                	je     c001bba8 <sysCallOpen(regs*)+0x61>
c001bb8b:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001bb8e:	eb 0f                	jmp    c001bb9f <sysCallOpen(regs*)+0x58>
c001bb90:	80 fa 3a             	cmp    dl,0x3a
c001bb93:	74 0f                	je     c001bba4 <sysCallOpen(regs*)+0x5d>
c001bb95:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001bb99:	48                   	dec    eax
c001bb9a:	74 0c                	je     c001bba8 <sysCallOpen(regs*)+0x61>
c001bb9c:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001bb9f:	80 fa 2e             	cmp    dl,0x2e
c001bba2:	75 ec                	jne    c001bb90 <sysCallOpen(regs*)+0x49>
c001bba4:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001bba8:	83 ec 08             	sub    esp,0x8
c001bbab:	68 99 b6 02 c0       	push   0xc002b699
c001bbb0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bbb3:	e8 47 ff ff ff       	call   c001baff <string_ends_with(char const*, char const*)>
c001bbb8:	83 c4 10             	add    esp,0x10
c001bbbb:	85 c0                	test   eax,eax
c001bbbd:	74 1d                	je     c001bbdc <sysCallOpen(regs*)+0x95>
c001bbbf:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bbc2:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001bbc8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bbcf:	81 c4 04 01 00 00    	add    esp,0x104
c001bbd5:	31 c0                	xor    eax,eax
c001bbd7:	31 d2                	xor    edx,edx
c001bbd9:	5b                   	pop    ebx
c001bbda:	5e                   	pop    esi
c001bbdb:	c3                   	ret    
c001bbdc:	83 ec 08             	sub    esp,0x8
c001bbdf:	68 9e b6 02 c0       	push   0xc002b69e
c001bbe4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bbe7:	e8 13 ff ff ff       	call   c001baff <string_ends_with(char const*, char const*)>
c001bbec:	83 c4 10             	add    esp,0x10
c001bbef:	85 c0                	test   eax,eax
c001bbf1:	75 cc                	jne    c001bbbf <sysCallOpen(regs*)+0x78>
c001bbf3:	83 ec 08             	sub    esp,0x8
c001bbf6:	68 9a b6 02 c0       	push   0xc002b69a
c001bbfb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bbfe:	e8 95 4c fe ff       	call   c0000898 <strcmp>
c001bc03:	83 c4 10             	add    esp,0x10
c001bc06:	85 c0                	test   eax,eax
c001bc08:	74 b5                	je     c001bbbf <sysCallOpen(regs*)+0x78>
c001bc0a:	83 ec 08             	sub    esp,0x8
c001bc0d:	68 99 b6 02 c0       	push   0xc002b699
c001bc12:	56                   	push   esi
c001bc13:	e8 e7 fe ff ff       	call   c001baff <string_ends_with(char const*, char const*)>
c001bc18:	83 c4 10             	add    esp,0x10
c001bc1b:	85 c0                	test   eax,eax
c001bc1d:	75 a0                	jne    c001bbbf <sysCallOpen(regs*)+0x78>
c001bc1f:	83 ec 08             	sub    esp,0x8
c001bc22:	68 a3 b6 02 c0       	push   0xc002b6a3
c001bc27:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc2a:	e8 d0 fe ff ff       	call   c001baff <string_ends_with(char const*, char const*)>
c001bc2f:	83 c4 10             	add    esp,0x10
c001bc32:	85 c0                	test   eax,eax
c001bc34:	0f 85 e7 00 00 00    	jne    c001bd21 <sysCallOpen(regs*)+0x1da>
c001bc3a:	83 ec 08             	sub    esp,0x8
c001bc3d:	68 a8 b6 02 c0       	push   0xc002b6a8
c001bc42:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc45:	e8 b5 fe ff ff       	call   c001baff <string_ends_with(char const*, char const*)>
c001bc4a:	83 c4 10             	add    esp,0x10
c001bc4d:	85 c0                	test   eax,eax
c001bc4f:	0f 85 cc 00 00 00    	jne    c001bd21 <sysCallOpen(regs*)+0x1da>
c001bc55:	83 ec 08             	sub    esp,0x8
c001bc58:	68 a4 b6 02 c0       	push   0xc002b6a4
c001bc5d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc60:	e8 33 4c fe ff       	call   c0000898 <strcmp>
c001bc65:	83 c4 10             	add    esp,0x10
c001bc68:	85 c0                	test   eax,eax
c001bc6a:	0f 84 b1 00 00 00    	je     c001bd21 <sysCallOpen(regs*)+0x1da>
c001bc70:	83 ec 08             	sub    esp,0x8
c001bc73:	68 a3 b6 02 c0       	push   0xc002b6a3
c001bc78:	56                   	push   esi
c001bc79:	e8 81 fe ff ff       	call   c001baff <string_ends_with(char const*, char const*)>
c001bc7e:	83 c4 10             	add    esp,0x10
c001bc81:	85 c0                	test   eax,eax
c001bc83:	0f 85 98 00 00 00    	jne    c001bd21 <sysCallOpen(regs*)+0x1da>
c001bc89:	83 ec 0c             	sub    esp,0xc
c001bc8c:	68 14 01 00 00       	push   0x114
c001bc91:	e8 06 39 ff ff       	call   c000f59c <malloc>
c001bc96:	83 c4 0c             	add    esp,0xc
c001bc99:	89 c6                	mov    esi,eax
c001bc9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bca0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bca3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bca6:	56                   	push   esi
c001bca7:	e8 7c 6e ff ff       	call   c0012b28 <File::File(char const*, Process*)>
c001bcac:	83 c4 10             	add    esp,0x10
c001bcaf:	85 f6                	test   esi,esi
c001bcb1:	74 5b                	je     c001bd0e <sysCallOpen(regs*)+0x1c7>
c001bcb3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001bcb6:	0f b6 c2             	movzx  eax,dl
c001bcb9:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001bcbc:	89 d0                	mov    eax,edx
c001bcbe:	83 e0 01             	and    eax,0x1
c001bcc1:	f6 c2 02             	test   dl,0x2
c001bcc4:	74 03                	je     c001bcc9 <sysCallOpen(regs*)+0x182>
c001bcc6:	83 c8 02             	or     eax,0x2
c001bcc9:	f6 c2 04             	test   dl,0x4
c001bccc:	74 03                	je     c001bcd1 <sysCallOpen(regs*)+0x18a>
c001bcce:	83 c8 04             	or     eax,0x4
c001bcd1:	f6 c2 08             	test   dl,0x8
c001bcd4:	74 03                	je     c001bcd9 <sysCallOpen(regs*)+0x192>
c001bcd6:	83 c8 0a             	or     eax,0xa
c001bcd9:	83 e2 10             	and    edx,0x10
c001bcdc:	74 03                	je     c001bce1 <sysCallOpen(regs*)+0x19a>
c001bcde:	83 c8 12             	or     eax,0x12
c001bce1:	83 ec 08             	sub    esp,0x8
c001bce4:	50                   	push   eax
c001bce5:	56                   	push   esi
c001bce6:	e8 a1 6e ff ff       	call   c0012b8c <File::open(FileOpenMode)>
c001bceb:	83 c4 10             	add    esp,0x10
c001bcee:	85 c0                	test   eax,eax
c001bcf0:	75 1c                	jne    c001bd0e <sysCallOpen(regs*)+0x1c7>
c001bcf2:	83 ec 0c             	sub    esp,0xc
c001bcf5:	56                   	push   esi
c001bcf6:	e8 89 50 ff ff       	call   c0010d84 <UnixFile::getFileDescriptor()>
c001bcfb:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bcfe:	83 c4 10             	add    esp,0x10
c001bd01:	89 02                	mov    DWORD PTR [edx],eax
c001bd03:	c1 f8 1f             	sar    eax,0x1f
c001bd06:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bd09:	e9 c1 fe ff ff       	jmp    c001bbcf <sysCallOpen(regs*)+0x88>
c001bd0e:	81 c4 04 01 00 00    	add    esp,0x104
c001bd14:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd19:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd1e:	5b                   	pop    ebx
c001bd1f:	5e                   	pop    esi
c001bd20:	c3                   	ret    
c001bd21:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bd24:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001bd2a:	e9 99 fe ff ff       	jmp    c001bbc8 <sysCallOpen(regs*)+0x81>

c001bd2f <Sys::loadSyscalls()>:
c001bd2f:	c7 05 60 02 03 c0 9c af 01 c0 	mov    DWORD PTR ds:0xc0030260,0xc001af9c
c001bd39:	c7 05 64 02 03 c0 94 ab 01 c0 	mov    DWORD PTR ds:0xc0030264,0xc001ab94
c001bd43:	c7 05 68 02 03 c0 82 ad 01 c0 	mov    DWORD PTR ds:0xc0030268,0xc001ad82
c001bd4d:	c7 05 6c 02 03 c0 d2 ae 01 c0 	mov    DWORD PTR ds:0xc003026c,0xc001aed2
c001bd57:	c7 05 70 02 03 c0 1a ad 01 c0 	mov    DWORD PTR ds:0xc0030270,0xc001ad1a
c001bd61:	c7 05 74 02 03 c0 cb ab 01 c0 	mov    DWORD PTR ds:0xc0030274,0xc001abcb
c001bd6b:	c7 05 78 02 03 c0 ac ab 01 c0 	mov    DWORD PTR ds:0xc0030278,0xc001abac
c001bd75:	c7 05 7c 02 03 c0 d7 ad 01 c0 	mov    DWORD PTR ds:0xc003027c,0xc001add7
c001bd7f:	c7 05 84 02 03 c0 65 b4 01 c0 	mov    DWORD PTR ds:0xc0030284,0xc001b465
c001bd89:	c7 05 80 02 03 c0 47 bb 01 c0 	mov    DWORD PTR ds:0xc0030280,0xc001bb47
c001bd93:	c7 05 88 02 03 c0 c5 b4 01 c0 	mov    DWORD PTR ds:0xc0030288,0xc001b4c5
c001bd9d:	c7 05 8c 02 03 c0 a8 b1 01 c0 	mov    DWORD PTR ds:0xc003028c,0xc001b1a8
c001bda7:	c7 05 90 02 03 c0 e2 af 01 c0 	mov    DWORD PTR ds:0xc0030290,0xc001afe2
c001bdb1:	c7 05 94 02 03 c0 e7 af 01 c0 	mov    DWORD PTR ds:0xc0030294,0xc001afe7
c001bdbb:	c7 05 98 02 03 c0 8e b5 01 c0 	mov    DWORD PTR ds:0xc0030298,0xc001b58e
c001bdc5:	c7 05 9c 02 03 c0 3a b5 01 c0 	mov    DWORD PTR ds:0xc003029c,0xc001b53a
c001bdcf:	c7 05 a0 02 03 c0 81 b2 01 c0 	mov    DWORD PTR ds:0xc00302a0,0xc001b281
c001bdd9:	c7 05 a4 02 03 c0 d8 b2 01 c0 	mov    DWORD PTR ds:0xc00302a4,0xc001b2d8
c001bde3:	c7 05 a8 02 03 c0 44 b3 01 c0 	mov    DWORD PTR ds:0xc00302a8,0xc001b344
c001bded:	c7 05 ac 02 03 c0 ec af 01 c0 	mov    DWORD PTR ds:0xc00302ac,0xc001afec
c001bdf7:	c7 05 b0 02 03 c0 fe b5 01 c0 	mov    DWORD PTR ds:0xc00302b0,0xc001b5fe
c001be01:	c7 05 b4 02 03 c0 18 b6 01 c0 	mov    DWORD PTR ds:0xc00302b4,0xc001b618
c001be0b:	c7 05 b8 02 03 c0 18 b6 01 c0 	mov    DWORD PTR ds:0xc00302b8,0xc001b618
c001be15:	c7 05 bc 02 03 c0 4d b6 01 c0 	mov    DWORD PTR ds:0xc00302bc,0xc001b64d
c001be1f:	c7 05 c0 02 03 c0 b1 b6 01 c0 	mov    DWORD PTR ds:0xc00302c0,0xc001b6b1
c001be29:	c7 05 c4 02 03 c0 f6 af 01 c0 	mov    DWORD PTR ds:0xc00302c4,0xc001aff6
c001be33:	c7 05 c8 02 03 c0 15 b7 01 c0 	mov    DWORD PTR ds:0xc00302c8,0xc001b715
c001be3d:	c7 05 cc 02 03 c0 65 b1 01 c0 	mov    DWORD PTR ds:0xc00302cc,0xc001b165
c001be47:	c7 05 d0 02 03 c0 61 b7 01 c0 	mov    DWORD PTR ds:0xc00302d0,0xc001b761
c001be51:	c7 05 d4 02 03 c0 27 b2 01 c0 	mov    DWORD PTR ds:0xc00302d4,0xc001b227
c001be5b:	c7 05 d8 02 03 c0 e4 b7 01 c0 	mov    DWORD PTR ds:0xc00302d8,0xc001b7e4
c001be65:	c7 05 dc 02 03 c0 b6 b3 01 c0 	mov    DWORD PTR ds:0xc00302dc,0xc001b3b6
c001be6f:	c7 05 e0 02 03 c0 0b b8 01 c0 	mov    DWORD PTR ds:0xc00302e0,0xc001b80b
c001be79:	c7 05 e4 02 03 c0 73 b8 01 c0 	mov    DWORD PTR ds:0xc00302e4,0xc001b873
c001be83:	c7 05 e8 02 03 c0 20 b9 01 c0 	mov    DWORD PTR ds:0xc00302e8,0xc001b920
c001be8d:	c7 05 ec 02 03 c0 06 b0 01 c0 	mov    DWORD PTR ds:0xc00302ec,0xc001b006
c001be97:	c7 05 f0 02 03 c0 70 b0 01 c0 	mov    DWORD PTR ds:0xc00302f0,0xc001b070
c001bea1:	c7 05 f4 02 03 c0 b6 b0 01 c0 	mov    DWORD PTR ds:0xc00302f4,0xc001b0b6
c001beab:	c7 05 f8 02 03 c0 34 ba 01 c0 	mov    DWORD PTR ds:0xc00302f8,0xc001ba34
c001beb5:	c7 05 fc 02 03 c0 33 b6 01 c0 	mov    DWORD PTR ds:0xc00302fc,0xc001b633
c001bebf:	c7 05 00 03 03 c0 07 b1 01 c0 	mov    DWORD PTR ds:0xc0030300,0xc001b107
c001bec9:	c7 05 04 03 03 c0 a6 ba 01 c0 	mov    DWORD PTR ds:0xc0030304,0xc001baa6
c001bed3:	c7 05 08 03 03 c0 eb ba 01 c0 	mov    DWORD PTR ds:0xc0030308,0xc001baeb
c001bedd:	c7 05 0c 03 03 c0 72 ac 01 c0 	mov    DWORD PTR ds:0xc003030c,0xc001ac72
c001bee7:	c7 05 10 03 03 c0 f3 ad 01 c0 	mov    DWORD PTR ds:0xc0030310,0xc001adf3
c001bef1:	c7 05 14 03 03 c0 88 ae 01 c0 	mov    DWORD PTR ds:0xc0030314,0xc001ae88
c001befb:	c7 05 18 03 03 c0 5e ab 01 c0 	mov    DWORD PTR ds:0xc0030318,0xc001ab5e
c001bf05:	c7 05 1c 03 03 c0 3a af 01 c0 	mov    DWORD PTR ds:0xc003031c,0xc001af3a
c001bf0f:	c7 05 20 03 03 c0 d7 ab 01 c0 	mov    DWORD PTR ds:0xc0030320,0xc001abd7
c001bf19:	c7 05 24 03 03 c0 ee ab 01 c0 	mov    DWORD PTR ds:0xc0030324,0xc001abee
c001bf23:	c3                   	ret    

c001bf24 <Sys::systemCall(regs*, void*)>:
c001bf24:	53                   	push   ebx
c001bf25:	83 ec 08             	sub    esp,0x8
c001bf28:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf2c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001bf2f:	83 f8 7f             	cmp    eax,0x7f
c001bf32:	77 16                	ja     c001bf4a <Sys::systemCall(regs*, void*)+0x26>
c001bf34:	8b 14 85 60 02 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfda0]
c001bf3b:	85 d2                	test   edx,edx
c001bf3d:	74 0b                	je     c001bf4a <Sys::systemCall(regs*, void*)+0x26>
c001bf3f:	83 ec 0c             	sub    esp,0xc
c001bf42:	53                   	push   ebx
c001bf43:	ff d2                	call   edx
c001bf45:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001bf48:	eb 0d                	jmp    c001bf57 <Sys::systemCall(regs*, void*)+0x33>
c001bf4a:	52                   	push   edx
c001bf4b:	52                   	push   edx
c001bf4c:	50                   	push   eax
c001bf4d:	68 ad b6 02 c0       	push   0xc002b6ad
c001bf52:	e8 72 66 ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c001bf57:	83 c4 10             	add    esp,0x10
c001bf5a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001bf5f:	31 d2                	xor    edx,edx
c001bf61:	83 c4 08             	add    esp,0x8
c001bf64:	5b                   	pop    ebx
c001bf65:	c3                   	ret    

c001bf66 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001bf66:	55                   	push   ebp
c001bf67:	57                   	push   edi
c001bf68:	56                   	push   esi
c001bf69:	53                   	push   ebx
c001bf6a:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001bf70:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001bf77:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001bf7e:	85 c0                	test   eax,eax
c001bf80:	0f 95 c1             	setne  cl
c001bf83:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001bf8b:	0f 94 c2             	sete   dl
c001bf8e:	84 d1                	test   cl,dl
c001bf90:	74 23                	je     c001bfb5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001bf92:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001bf98:	74 1b                	je     c001bfb5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001bf9a:	81 c3 00 10 00 00    	add    ebx,0x1000
c001bfa0:	89 da                	mov    edx,ebx
c001bfa2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001bfa8:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001bfae:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001bfb5:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001bfbc:	05 ff 0f 00 00       	add    eax,0xfff
c001bfc1:	83 ec 0c             	sub    esp,0xc
c001bfc4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bfc8:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001bfce:	c1 e8 0c             	shr    eax,0xc
c001bfd1:	89 fe                	mov    esi,edi
c001bfd3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bfd7:	c1 ee 0c             	shr    esi,0xc
c001bfda:	6a 01                	push   0x1
c001bfdc:	e8 ee 51 ff ff       	call   c00111cf <Virt::allocateKernelVirtualPages(int)>
c001bfe1:	89 c5                	mov    ebp,eax
c001bfe3:	58                   	pop    eax
c001bfe4:	5a                   	pop    edx
c001bfe5:	56                   	push   esi
c001bfe6:	68 c1 b6 02 c0       	push   0xc002b6c1
c001bfeb:	e8 d9 65 ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c001bff0:	59                   	pop    ecx
c001bff1:	58                   	pop    eax
c001bff2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001bff6:	68 d3 b6 02 c0       	push   0xc002b6d3
c001bffb:	e8 c9 65 ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c001c000:	83 c4 10             	add    esp,0x10
c001c003:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001c009:	0f 86 31 01 00 00    	jbe    c001c140 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001c00f:	c1 e6 0c             	shl    esi,0xc
c001c012:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c015:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001c018:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c01c:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001c023:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c026:	01 df                	add    edi,ebx
c001c028:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001c02b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001c02f:	0f 84 08 01 00 00    	je     c001c13d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001c035:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001c03b:	76 05                	jbe    c001c042 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001c03d:	bf 00 10 00 00       	mov    edi,0x1000
c001c042:	83 ec 0c             	sub    esp,0xc
c001c045:	31 d2                	xor    edx,edx
c001c047:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c04e:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c050:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c054:	50                   	push   eax
c001c055:	8d 74 24 30          	lea    esi,[esp+0x30]
c001c059:	56                   	push   esi
c001c05a:	52                   	push   edx
c001c05b:	57                   	push   edi
c001c05c:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c063:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c066:	83 c4 20             	add    esp,0x20
c001c069:	85 c0                	test   eax,eax
c001c06b:	74 0a                	je     c001c077 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001c06d:	53                   	push   ebx
c001c06e:	53                   	push   ebx
c001c06f:	50                   	push   eax
c001c070:	68 e5 b6 02 c0       	push   0xc002b6e5
c001c075:	eb 0f                	jmp    c001c086 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001c077:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001c07b:	74 20                	je     c001c09d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001c07d:	51                   	push   ecx
c001c07e:	51                   	push   ecx
c001c07f:	6a 00                	push   0x0
c001c081:	68 10 b7 02 c0       	push   0xc002b710
c001c086:	e8 3e 65 ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c001c08b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c08e:	e8 82 55 ff ff       	call   c0011615 <Virt::freeKernelVirtualPages(unsigned long)>
c001c093:	83 c4 10             	add    esp,0x10
c001c096:	31 c0                	xor    eax,eax
c001c098:	e9 68 01 00 00       	jmp    c001c205 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001c09d:	fa                   	cli    
c001c09e:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c001c0a4:	e8 97 38 ff ff       	call   c000f940 <Phys::allocatePage()>
c001c0a9:	6a 07                	push   0x7
c001c0ab:	89 c7                	mov    edi,eax
c001c0ad:	55                   	push   ebp
c001c0ae:	50                   	push   eax
c001c0af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0b4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c0b7:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c0bd:	e8 ca 58 ff ff       	call   c001198c <VAS::mapPage(unsigned long, unsigned long, int)>
c001c0c2:	83 c4 0c             	add    esp,0xc
c001c0c5:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c0cc:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c0d2:	6a 00                	push   0x0
c001c0d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0d9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c0dc:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c0e2:	e8 ff 56 ff ff       	call   c00117e6 <VAS::mapOtherVASIn(bool, VAS*)>
c001c0e7:	58                   	pop    eax
c001c0e8:	5a                   	pop    edx
c001c0e9:	68 07 0c 00 00       	push   0xc07
c001c0ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c0f2:	57                   	push   edi
c001c0f3:	89 ef                	mov    edi,ebp
c001c0f5:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c0fc:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c102:	6a 00                	push   0x0
c001c104:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c109:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c10c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c112:	e8 31 5c ff ff       	call   c0011d48 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c117:	b9 00 10 00 00       	mov    ecx,0x1000
c001c11c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c11e:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001c123:	83 c4 20             	add    esp,0x20
c001c126:	48                   	dec    eax
c001c127:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001c12c:	85 c0                	test   eax,eax
c001c12e:	75 01                	jne    c001c131 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c130:	fb                   	sti    
c001c131:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001c138:	e9 df fe ff ff       	jmp    c001c01c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001c13d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001c140:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c148:	0f 86 a9 00 00 00    	jbe    c001c1f7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c14e:	fa                   	cli    
c001c14f:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c001c155:	51                   	push   ecx
c001c156:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c15d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c163:	6a 00                	push   0x0
c001c165:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c16a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c16d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c173:	e8 6e 56 ff ff       	call   c00117e6 <VAS::mapOtherVASIn(bool, VAS*)>
c001c178:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c17c:	c1 e6 0c             	shl    esi,0xc
c001c17f:	01 de                	add    esi,ebx
c001c181:	83 c4 10             	add    esp,0x10
c001c184:	39 de                	cmp    esi,ebx
c001c186:	74 61                	je     c001c1e9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001c188:	e8 b3 37 ff ff       	call   c000f940 <Phys::allocatePage()>
c001c18d:	6a 07                	push   0x7
c001c18f:	89 c7                	mov    edi,eax
c001c191:	55                   	push   ebp
c001c192:	50                   	push   eax
c001c193:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c198:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c19b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c1a1:	e8 e6 57 ff ff       	call   c001198c <VAS::mapPage(unsigned long, unsigned long, int)>
c001c1a6:	58                   	pop    eax
c001c1a7:	5a                   	pop    edx
c001c1a8:	68 07 0c 00 00       	push   0xc07
c001c1ad:	53                   	push   ebx
c001c1ae:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c1b4:	57                   	push   edi
c001c1b5:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c1bc:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c1c2:	6a 00                	push   0x0
c001c1c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1c9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1cc:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c1d2:	e8 71 5b ff ff       	call   c0011d48 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c1d7:	83 c4 1c             	add    esp,0x1c
c001c1da:	68 00 10 00 00       	push   0x1000
c001c1df:	6a 00                	push   0x0
c001c1e1:	55                   	push   ebp
c001c1e2:	e8 69 45 fe ff       	call   c0000750 <memset>
c001c1e7:	eb 98                	jmp    c001c181 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001c1e9:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001c1ee:	48                   	dec    eax
c001c1ef:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001c1f4:	75 01                	jne    c001c1f7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c1f6:	fb                   	sti    
c001c1f7:	83 ec 0c             	sub    esp,0xc
c001c1fa:	55                   	push   ebp
c001c1fb:	e8 15 54 ff ff       	call   c0011615 <Virt::freeKernelVirtualPages(unsigned long)>
c001c200:	83 c4 10             	add    esp,0x10
c001c203:	b0 01                	mov    al,0x1
c001c205:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c20b:	5b                   	pop    ebx
c001c20c:	5e                   	pop    esi
c001c20d:	5f                   	pop    edi
c001c20e:	5d                   	pop    ebp
c001c20f:	c3                   	ret    

c001c210 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c210:	55                   	push   ebp
c001c211:	57                   	push   edi
c001c212:	56                   	push   esi
c001c213:	53                   	push   ebx
c001c214:	83 ec 48             	sub    esp,0x48
c001c217:	68 14 01 00 00       	push   0x114
c001c21c:	e8 7b 33 ff ff       	call   c000f59c <malloc>
c001c221:	83 c4 0c             	add    esp,0xc
c001c224:	89 c6                	mov    esi,eax
c001c226:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c22a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c22e:	50                   	push   eax
c001c22f:	e8 f4 68 ff ff       	call   c0012b28 <File::File(char const*, Process*)>
c001c234:	58                   	pop    eax
c001c235:	5a                   	pop    edx
c001c236:	6a 01                	push   0x1
c001c238:	56                   	push   esi
c001c239:	e8 4e 69 ff ff       	call   c0012b8c <File::open(FileOpenMode)>
c001c23e:	83 c4 10             	add    esp,0x10
c001c241:	85 c0                	test   eax,eax
c001c243:	0f 85 47 01 00 00    	jne    c001c390 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c249:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c251:	83 ec 0c             	sub    esp,0xc
c001c254:	6a 34                	push   0x34
c001c256:	e8 41 33 ff ff       	call   c000f59c <malloc>
c001c25b:	89 c3                	mov    ebx,eax
c001c25d:	58                   	pop    eax
c001c25e:	8b 06                	mov    eax,DWORD PTR [esi]
c001c260:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c264:	57                   	push   edi
c001c265:	53                   	push   ebx
c001c266:	6a 00                	push   0x0
c001c268:	6a 34                	push   0x34
c001c26a:	56                   	push   esi
c001c26b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c26e:	83 c4 20             	add    esp,0x20
c001c271:	85 c0                	test   eax,eax
c001c273:	0f 85 17 01 00 00    	jne    c001c390 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c279:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c27f:	0f 85 0b 01 00 00    	jne    c001c390 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c285:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c288:	85 c0                	test   eax,eax
c001c28a:	0f 84 00 01 00 00    	je     c001c390 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c290:	31 d2                	xor    edx,edx
c001c292:	55                   	push   ebp
c001c293:	52                   	push   edx
c001c294:	50                   	push   eax
c001c295:	56                   	push   esi
c001c296:	e8 af 69 ff ff       	call   c0012c4a <File::seek(unsigned long long)>
c001c29b:	83 c4 10             	add    esp,0x10
c001c29e:	85 c0                	test   eax,eax
c001c2a0:	0f 85 ea 00 00 00    	jne    c001c390 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c2a6:	83 ec 0c             	sub    esp,0xc
c001c2a9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c2ac:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c2b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c2b4:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c2b8:	0f af c2             	imul   eax,edx
c001c2bb:	50                   	push   eax
c001c2bc:	e8 db 32 ff ff       	call   c000f59c <malloc>
c001c2c1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c2c3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c2c7:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c2ca:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c2ce:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c2d2:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c2d6:	0f af c2             	imul   eax,edx
c001c2d9:	99                   	cdq    
c001c2da:	52                   	push   edx
c001c2db:	50                   	push   eax
c001c2dc:	56                   	push   esi
c001c2dd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c2e0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c2e3:	83 c4 20             	add    esp,0x20
c001c2e6:	85 c0                	test   eax,eax
c001c2e8:	0f 84 a2 00 00 00    	je     c001c390 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c2ee:	31 d2                	xor    edx,edx
c001c2f0:	51                   	push   ecx
c001c2f1:	52                   	push   edx
c001c2f2:	50                   	push   eax
c001c2f3:	56                   	push   esi
c001c2f4:	e8 51 69 ff ff       	call   c0012c4a <File::seek(unsigned long long)>
c001c2f9:	83 c4 10             	add    esp,0x10
c001c2fc:	85 c0                	test   eax,eax
c001c2fe:	0f 85 8c 00 00 00    	jne    c001c390 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c304:	83 ec 0c             	sub    esp,0xc
c001c307:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c30b:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c30f:	31 ed                	xor    ebp,ebp
c001c311:	0f af c2             	imul   eax,edx
c001c314:	50                   	push   eax
c001c315:	e8 82 32 ff ff       	call   c000f59c <malloc>
c001c31a:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c31c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c320:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c323:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c327:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c32b:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c32f:	0f af c2             	imul   eax,edx
c001c332:	99                   	cdq    
c001c333:	52                   	push   edx
c001c334:	50                   	push   eax
c001c335:	56                   	push   esi
c001c336:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c339:	83 c4 20             	add    esp,0x20
c001c33c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c344:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c348:	0f 86 80 00 00 00    	jbe    c001c3ce <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c34e:	0f b7 fd             	movzx  edi,bp
c001c351:	c1 e7 05             	shl    edi,0x5
c001c354:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c358:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c35b:	75 6b                	jne    c001c3c8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c35d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c360:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c364:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c367:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c36b:	52                   	push   edx
c001c36c:	31 d2                	xor    edx,edx
c001c36e:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c371:	52                   	push   edx
c001c372:	50                   	push   eax
c001c373:	56                   	push   esi
c001c374:	e8 d1 68 ff ff       	call   c0012c4a <File::seek(unsigned long long)>
c001c379:	83 c4 10             	add    esp,0x10
c001c37c:	85 c0                	test   eax,eax
c001c37e:	74 17                	je     c001c397 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001c380:	83 ec 0c             	sub    esp,0xc
c001c383:	68 3c b7 02 c0       	push   0xc002b73c
c001c388:	e8 3c 62 ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c001c38d:	83 c4 10             	add    esp,0x10
c001c390:	31 c0                	xor    eax,eax
c001c392:	e9 87 00 00 00       	jmp    c001c41e <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001c397:	83 ec 0c             	sub    esp,0xc
c001c39a:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001c39d:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001c3a0:	50                   	push   eax
c001c3a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c3a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c3a9:	56                   	push   esi
c001c3aa:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001c3ae:	e8 b3 fb ff ff       	call   c001bf66 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001c3b3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c3b7:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001c3bb:	83 c4 20             	add    esp,0x20
c001c3be:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c3c2:	73 04                	jae    c001c3c8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c3c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c3c8:	45                   	inc    ebp
c001c3c9:	e9 76 ff ff ff       	jmp    c001c344 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001c3ce:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c3d2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c3d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c3da:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001c3e0:	83 ec 0c             	sub    esp,0xc
c001c3e3:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001c3e9:	25 00 f0 ff ff       	and    eax,0xfffff000
c001c3ee:	05 00 10 00 00       	add    eax,0x1000
c001c3f3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c3f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c3fa:	e8 ad 31 ff ff       	call   c000f5ac <free>
c001c3ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c402:	e8 a5 31 ff ff       	call   c000f5ac <free>
c001c407:	58                   	pop    eax
c001c408:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c40c:	e8 9b 31 ff ff       	call   c000f5ac <free>
c001c411:	89 34 24             	mov    DWORD PTR [esp],esi
c001c414:	e8 d1 67 ff ff       	call   c0012bea <File::close()>
c001c419:	83 c4 10             	add    esp,0x10
c001c41c:	b0 01                	mov    al,0x1
c001c41e:	83 c4 3c             	add    esp,0x3c
c001c421:	5b                   	pop    ebx
c001c422:	5e                   	pop    esi
c001c423:	5f                   	pop    edi
c001c424:	5d                   	pop    ebp
c001c425:	c3                   	ret    

c001c426 <Thr::runtimeReferenceHelper()>:
c001c426:	83 ec 18             	sub    esp,0x18
c001c429:	68 44 b7 02 c0       	push   0xc002b744
c001c42e:	e8 96 61 ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c001c433:	fa                   	cli    
c001c434:	83 c4 10             	add    esp,0x10
c001c437:	eb fe                	jmp    c001c437 <Thr::runtimeReferenceHelper()+0x11>

c001c439 <Thr::getAddressOfKernelSymbol(char const*)>:
c001c439:	57                   	push   edi
c001c43a:	56                   	push   esi
c001c43b:	53                   	push   ebx
c001c43c:	31 db                	xor    ebx,ebx
c001c43e:	39 1d 00 0c 03 c0    	cmp    DWORD PTR ds:0xc0030c00,ebx
c001c444:	7e 3c                	jle    c001c482 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001c446:	8b 34 9d 80 0b 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcf480]
c001c44d:	31 ff                	xor    edi,edi
c001c44f:	39 3c 9d 80 0a 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcf580],edi
c001c456:	7e 27                	jle    c001c47f <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001c458:	50                   	push   eax
c001c459:	50                   	push   eax
c001c45a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c45e:	8b 06                	mov    eax,DWORD PTR [esi]
c001c460:	03 04 9d 00 0b 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcf500]
c001c467:	50                   	push   eax
c001c468:	e8 2b 44 fe ff       	call   c0000898 <strcmp>
c001c46d:	83 c4 10             	add    esp,0x10
c001c470:	85 c0                	test   eax,eax
c001c472:	75 05                	jne    c001c479 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001c474:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c477:	eb 0b                	jmp    c001c484 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001c479:	83 c6 10             	add    esi,0x10
c001c47c:	47                   	inc    edi
c001c47d:	eb d0                	jmp    c001c44f <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001c47f:	43                   	inc    ebx
c001c480:	eb bc                	jmp    c001c43e <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001c482:	31 c0                	xor    eax,eax
c001c484:	5b                   	pop    ebx
c001c485:	5e                   	pop    esi
c001c486:	5f                   	pop    edi
c001c487:	c3                   	ret    

c001c488 <Thr::loadKernelSymbolTable(char const*)>:
c001c488:	55                   	push   ebp
c001c489:	57                   	push   edi
c001c48a:	56                   	push   esi
c001c48b:	53                   	push   ebx
c001c48c:	83 ec 68             	sub    esp,0x68
c001c48f:	8b 35 50 0c 03 c0    	mov    esi,DWORD PTR ds:0xc0030c50
c001c495:	68 14 01 00 00       	push   0x114
c001c49a:	e8 fd 30 ff ff       	call   c000f59c <malloc>
c001c49f:	83 c4 0c             	add    esp,0xc
c001c4a2:	89 c3                	mov    ebx,eax
c001c4a4:	56                   	push   esi
c001c4a5:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001c4a9:	50                   	push   eax
c001c4aa:	e8 79 66 ff ff       	call   c0012b28 <File::File(char const*, Process*)>
c001c4af:	5e                   	pop    esi
c001c4b0:	5f                   	pop    edi
c001c4b1:	6a 01                	push   0x1
c001c4b3:	53                   	push   ebx
c001c4b4:	e8 d3 66 ff ff       	call   c0012b8c <File::open(FileOpenMode)>
c001c4b9:	83 c4 10             	add    esp,0x10
c001c4bc:	85 c0                	test   eax,eax
c001c4be:	74 0a                	je     c001c4ca <Thr::loadKernelSymbolTable(char const*)+0x42>
c001c4c0:	83 ec 0c             	sub    esp,0xc
c001c4c3:	68 66 b7 02 c0       	push   0xc002b766
c001c4c8:	eb 34                	jmp    c001c4fe <Thr::loadKernelSymbolTable(char const*)+0x76>
c001c4ca:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c4d2:	83 ec 0c             	sub    esp,0xc
c001c4d5:	6a 34                	push   0x34
c001c4d7:	e8 c0 30 ff ff       	call   c000f59c <malloc>
c001c4dc:	59                   	pop    ecx
c001c4dd:	89 c7                	mov    edi,eax
c001c4df:	8d 74 24 34          	lea    esi,[esp+0x34]
c001c4e3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c4e5:	56                   	push   esi
c001c4e6:	57                   	push   edi
c001c4e7:	6a 00                	push   0x0
c001c4e9:	6a 34                	push   0x34
c001c4eb:	53                   	push   ebx
c001c4ec:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c4ef:	83 c4 20             	add    esp,0x20
c001c4f2:	85 c0                	test   eax,eax
c001c4f4:	74 17                	je     c001c50d <Thr::loadKernelSymbolTable(char const*)+0x85>
c001c4f6:	83 ec 0c             	sub    esp,0xc
c001c4f9:	68 7d b7 02 c0       	push   0xc002b77d
c001c4fe:	e8 32 d8 ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c001c503:	83 c4 10             	add    esp,0x10
c001c506:	31 c0                	xor    eax,eax
c001c508:	e9 31 02 00 00       	jmp    c001c73e <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001c50d:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c513:	75 e1                	jne    c001c4f6 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c515:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c518:	85 c0                	test   eax,eax
c001c51a:	74 da                	je     c001c4f6 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c51c:	52                   	push   edx
c001c51d:	31 d2                	xor    edx,edx
c001c51f:	52                   	push   edx
c001c520:	50                   	push   eax
c001c521:	53                   	push   ebx
c001c522:	e8 23 67 ff ff       	call   c0012c4a <File::seek(unsigned long long)>
c001c527:	83 c4 10             	add    esp,0x10
c001c52a:	85 c0                	test   eax,eax
c001c52c:	75 c8                	jne    c001c4f6 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c52e:	83 ec 0c             	sub    esp,0xc
c001c531:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c535:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c539:	31 ed                	xor    ebp,ebp
c001c53b:	0f af c2             	imul   eax,edx
c001c53e:	50                   	push   eax
c001c53f:	e8 58 30 ff ff       	call   c000f59c <malloc>
c001c544:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c546:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c54a:	89 34 24             	mov    DWORD PTR [esp],esi
c001c54d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c551:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c555:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c559:	0f af c2             	imul   eax,edx
c001c55c:	99                   	cdq    
c001c55d:	52                   	push   edx
c001c55e:	50                   	push   eax
c001c55f:	53                   	push   ebx
c001c560:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c563:	83 c4 20             	add    esp,0x20
c001c566:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c56e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c576:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c57e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c586:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001c58a:	0f 86 aa 00 00 00    	jbe    c001c63a <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001c590:	0f b7 f5             	movzx  esi,bp
c001c593:	6b f6 28             	imul   esi,esi,0x28
c001c596:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c59a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c59d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c5a1:	50                   	push   eax
c001c5a2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c5a6:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001c5aa:	8b 16                	mov    edx,DWORD PTR [esi]
c001c5ac:	6b c0 28             	imul   eax,eax,0x28
c001c5af:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001c5b3:	89 d0                	mov    eax,edx
c001c5b5:	31 d2                	xor    edx,edx
c001c5b7:	52                   	push   edx
c001c5b8:	50                   	push   eax
c001c5b9:	53                   	push   ebx
c001c5ba:	e8 8b 66 ff ff       	call   c0012c4a <File::seek(unsigned long long)>
c001c5bf:	83 c4 0c             	add    esp,0xc
c001c5c2:	6a 20                	push   0x20
c001c5c4:	6a 00                	push   0x0
c001c5c6:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c5ca:	52                   	push   edx
c001c5cb:	e8 80 41 fe ff       	call   c0000750 <memset>
c001c5d0:	58                   	pop    eax
c001c5d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c5d3:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001c5d7:	51                   	push   ecx
c001c5d8:	8d 54 24 40          	lea    edx,[esp+0x40]
c001c5dc:	52                   	push   edx
c001c5dd:	6a 00                	push   0x0
c001c5df:	6a 1f                	push   0x1f
c001c5e1:	53                   	push   ebx
c001c5e2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c5e5:	83 c4 18             	add    esp,0x18
c001c5e8:	68 94 b7 02 c0       	push   0xc002b794
c001c5ed:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c5f1:	52                   	push   edx
c001c5f2:	e8 a1 42 fe ff       	call   c0000898 <strcmp>
c001c5f7:	83 c4 10             	add    esp,0x10
c001c5fa:	85 c0                	test   eax,eax
c001c5fc:	75 0f                	jne    c001c60d <Thr::loadKernelSymbolTable(char const*)+0x185>
c001c5fe:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c601:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c605:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c609:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c60d:	50                   	push   eax
c001c60e:	50                   	push   eax
c001c60f:	68 9c b7 02 c0       	push   0xc002b79c
c001c614:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001c618:	50                   	push   eax
c001c619:	e8 7a 42 fe ff       	call   c0000898 <strcmp>
c001c61e:	83 c4 10             	add    esp,0x10
c001c621:	85 c0                	test   eax,eax
c001c623:	75 0f                	jne    c001c634 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001c625:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c628:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c62c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c630:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c634:	45                   	inc    ebp
c001c635:	e9 4c ff ff ff       	jmp    c001c586 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001c63a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c63f:	75 10                	jne    c001c651 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001c641:	83 ec 0c             	sub    esp,0xc
c001c644:	68 a4 b7 02 c0       	push   0xc002b7a4
c001c649:	e8 e7 d6 ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c001c64e:	83 c4 10             	add    esp,0x10
c001c651:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001c656:	75 10                	jne    c001c668 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001c658:	83 ec 0c             	sub    esp,0xc
c001c65b:	68 a4 b7 02 c0       	push   0xc002b7a4
c001c660:	e8 d0 d6 ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c001c665:	83 c4 10             	add    esp,0x10
c001c668:	31 d2                	xor    edx,edx
c001c66a:	50                   	push   eax
c001c66b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c66f:	52                   	push   edx
c001c670:	50                   	push   eax
c001c671:	53                   	push   ebx
c001c672:	e8 d3 65 ff ff       	call   c0012c4a <File::seek(unsigned long long)>
c001c677:	5a                   	pop    edx
c001c678:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c67c:	e8 1b 2f ff ff       	call   c000f59c <malloc>
c001c681:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c685:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c689:	31 c9                	xor    ecx,ecx
c001c68b:	5e                   	pop    esi
c001c68c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c68e:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001c692:	55                   	push   ebp
c001c693:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c697:	51                   	push   ecx
c001c698:	52                   	push   edx
c001c699:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001c69d:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001c6a1:	53                   	push   ebx
c001c6a2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c6a5:	83 c4 14             	add    esp,0x14
c001c6a8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c6ac:	e8 eb 2e ff ff       	call   c000f59c <malloc>
c001c6b1:	89 c6                	mov    esi,eax
c001c6b3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c6b5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c6b8:	56                   	push   esi
c001c6b9:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c6bd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c6c1:	51                   	push   ecx
c001c6c2:	52                   	push   edx
c001c6c3:	53                   	push   ebx
c001c6c4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c6c7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c6cb:	8b 15 00 0c 03 c0    	mov    edx,DWORD PTR ds:0xc0030c00
c001c6d1:	83 c4 1c             	add    esp,0x1c
c001c6d4:	c1 e8 04             	shr    eax,0x4
c001c6d7:	89 04 95 80 0a 03 c0 	mov    DWORD PTR [edx*4-0x3ffcf580],eax
c001c6de:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c6e2:	31 d2                	xor    edx,edx
c001c6e4:	52                   	push   edx
c001c6e5:	50                   	push   eax
c001c6e6:	53                   	push   ebx
c001c6e7:	e8 5e 65 ff ff       	call   c0012c4a <File::seek(unsigned long long)>
c001c6ec:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c6ee:	31 d2                	xor    edx,edx
c001c6f0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c6f3:	56                   	push   esi
c001c6f4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c6f8:	52                   	push   edx
c001c6f9:	50                   	push   eax
c001c6fa:	53                   	push   ebx
c001c6fb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c6fe:	83 c4 14             	add    esp,0x14
c001c701:	53                   	push   ebx
c001c702:	e8 e3 64 ff ff       	call   c0012bea <File::close()>
c001c707:	5d                   	pop    ebp
c001c708:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c70c:	e8 9b 2e ff ff       	call   c000f5ac <free>
c001c711:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c714:	e8 93 2e ff ff       	call   c000f5ac <free>
c001c719:	a1 00 0c 03 c0       	mov    eax,ds:0xc0030c00
c001c71e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c722:	8d 50 01             	lea    edx,[eax+0x1]
c001c725:	89 0c 85 80 0b 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf480],ecx
c001c72c:	89 34 85 00 0b 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf500],esi
c001c733:	89 15 00 0c 03 c0    	mov    DWORD PTR ds:0xc0030c00,edx
c001c739:	83 c4 10             	add    esp,0x10
c001c73c:	b0 01                	mov    al,0x1
c001c73e:	83 c4 5c             	add    esp,0x5c
c001c741:	5b                   	pop    ebx
c001c742:	5e                   	pop    esi
c001c743:	5f                   	pop    edi
c001c744:	5d                   	pop    ebp
c001c745:	c3                   	ret    

c001c746 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001c746:	55                   	push   ebp
c001c747:	57                   	push   edi
c001c748:	56                   	push   esi
c001c749:	53                   	push   ebx
c001c74a:	81 ec 68 03 00 00    	sub    esp,0x368
c001c750:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001c757:	8b 1d 50 0c 03 c0    	mov    ebx,DWORD PTR ds:0xc0030c50
c001c75d:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c761:	68 14 01 00 00       	push   0x114
c001c766:	e8 31 2e ff ff       	call   c000f59c <malloc>
c001c76b:	83 c4 0c             	add    esp,0xc
c001c76e:	89 c5                	mov    ebp,eax
c001c770:	53                   	push   ebx
c001c771:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001c778:	50                   	push   eax
c001c779:	e8 aa 63 ff ff       	call   c0012b28 <File::File(char const*, Process*)>
c001c77e:	5e                   	pop    esi
c001c77f:	5f                   	pop    edi
c001c780:	6a 01                	push   0x1
c001c782:	55                   	push   ebp
c001c783:	e8 04 64 ff ff       	call   c0012b8c <File::open(FileOpenMode)>
c001c788:	83 c4 10             	add    esp,0x10
c001c78b:	85 c0                	test   eax,eax
c001c78d:	0f 85 a7 06 00 00    	jne    c001ce3a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c793:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c79b:	83 ec 0c             	sub    esp,0xc
c001c79e:	6a 34                	push   0x34
c001c7a0:	e8 f7 2d ff ff       	call   c000f59c <malloc>
c001c7a5:	5b                   	pop    ebx
c001c7a6:	89 c7                	mov    edi,eax
c001c7a8:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c7ac:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c7af:	53                   	push   ebx
c001c7b0:	57                   	push   edi
c001c7b1:	6a 00                	push   0x0
c001c7b3:	6a 34                	push   0x34
c001c7b5:	55                   	push   ebp
c001c7b6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c7b9:	83 c4 20             	add    esp,0x20
c001c7bc:	85 c0                	test   eax,eax
c001c7be:	0f 85 76 06 00 00    	jne    c001ce3a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c7c4:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c7ca:	0f 85 6a 06 00 00    	jne    c001ce3a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c7d0:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c7d3:	85 c0                	test   eax,eax
c001c7d5:	0f 84 5f 06 00 00    	je     c001ce3a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c7db:	31 d2                	xor    edx,edx
c001c7dd:	51                   	push   ecx
c001c7de:	52                   	push   edx
c001c7df:	50                   	push   eax
c001c7e0:	55                   	push   ebp
c001c7e1:	e8 64 64 ff ff       	call   c0012c4a <File::seek(unsigned long long)>
c001c7e6:	83 c4 10             	add    esp,0x10
c001c7e9:	85 c0                	test   eax,eax
c001c7eb:	0f 85 49 06 00 00    	jne    c001ce3a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c7f1:	83 ec 0c             	sub    esp,0xc
c001c7f4:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001c7f7:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c7fb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c7ff:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c803:	0f af c2             	imul   eax,edx
c001c806:	50                   	push   eax
c001c807:	e8 90 2d ff ff       	call   c000f59c <malloc>
c001c80c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c80f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c813:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c816:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c81a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c81e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c822:	0f af c2             	imul   eax,edx
c001c825:	99                   	cdq    
c001c826:	52                   	push   edx
c001c827:	50                   	push   eax
c001c828:	55                   	push   ebp
c001c829:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c82c:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001c82f:	83 c4 20             	add    esp,0x20
c001c832:	85 c0                	test   eax,eax
c001c834:	0f 84 00 06 00 00    	je     c001ce3a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c83a:	52                   	push   edx
c001c83b:	31 d2                	xor    edx,edx
c001c83d:	52                   	push   edx
c001c83e:	50                   	push   eax
c001c83f:	55                   	push   ebp
c001c840:	e8 05 64 ff ff       	call   c0012c4a <File::seek(unsigned long long)>
c001c845:	83 c4 10             	add    esp,0x10
c001c848:	85 c0                	test   eax,eax
c001c84a:	0f 85 ea 05 00 00    	jne    c001ce3a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c850:	83 ec 0c             	sub    esp,0xc
c001c853:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c857:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c85b:	31 f6                	xor    esi,esi
c001c85d:	0f af c2             	imul   eax,edx
c001c860:	50                   	push   eax
c001c861:	e8 36 2d ff ff       	call   c000f59c <malloc>
c001c866:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c869:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c86d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c870:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c874:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c878:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c87c:	0f af c2             	imul   eax,edx
c001c87f:	99                   	cdq    
c001c880:	52                   	push   edx
c001c881:	50                   	push   eax
c001c882:	55                   	push   ebp
c001c883:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c886:	83 c4 20             	add    esp,0x20
c001c889:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001c88d:	0f 86 8a 00 00 00    	jbe    c001c91d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001c893:	0f b7 de             	movzx  ebx,si
c001c896:	c1 e3 05             	shl    ebx,0x5
c001c899:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001c89d:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001c8a0:	75 75                	jne    c001c917 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001c8a2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c8a5:	31 d2                	xor    edx,edx
c001c8a7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c8ab:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c8ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8b2:	50                   	push   eax
c001c8b3:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001c8b6:	52                   	push   edx
c001c8b7:	50                   	push   eax
c001c8b8:	55                   	push   ebp
c001c8b9:	e8 8c 63 ff ff       	call   c0012c4a <File::seek(unsigned long long)>
c001c8be:	83 c4 10             	add    esp,0x10
c001c8c1:	85 c0                	test   eax,eax
c001c8c3:	0f 85 71 05 00 00    	jne    c001ce3a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c8c9:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001c8d0:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c8d3:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001c8d7:	31 d2                	xor    edx,edx
c001c8d9:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001c8dd:	83 ec 0c             	sub    esp,0xc
c001c8e0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c8e4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c8eb:	50                   	push   eax
c001c8ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c8f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c8f4:	52                   	push   edx
c001c8f5:	50                   	push   eax
c001c8f6:	55                   	push   ebp
c001c8f7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c8fa:	83 c4 1c             	add    esp,0x1c
c001c8fd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c900:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001c903:	50                   	push   eax
c001c904:	6a 00                	push   0x0
c001c906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c90a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001c90e:	50                   	push   eax
c001c90f:	e8 3c 3e fe ff       	call   c0000750 <memset>
c001c914:	83 c4 10             	add    esp,0x10
c001c917:	46                   	inc    esi
c001c918:	e9 6c ff ff ff       	jmp    c001c889 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001c91d:	53                   	push   ebx
c001c91e:	31 db                	xor    ebx,ebx
c001c920:	68 00 01 00 00       	push   0x100
c001c925:	6a 00                	push   0x0
c001c927:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001c92b:	50                   	push   eax
c001c92c:	e8 1f 3e fe ff       	call   c0000750 <memset>
c001c931:	83 c4 0c             	add    esp,0xc
c001c934:	68 00 01 00 00       	push   0x100
c001c939:	6a 00                	push   0x0
c001c93b:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001c942:	50                   	push   eax
c001c943:	e8 08 3e fe ff       	call   c0000750 <memset>
c001c948:	83 c4 10             	add    esp,0x10
c001c94b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c953:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001c95b:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001c963:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c96b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001c973:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001c977:	0f 86 30 01 00 00    	jbe    c001caad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001c97d:	0f b7 f3             	movzx  esi,bx
c001c980:	6b f6 28             	imul   esi,esi,0x28
c001c983:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c987:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c98a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c98e:	52                   	push   edx
c001c98f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c993:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001c997:	8b 06                	mov    eax,DWORD PTR [esi]
c001c999:	6b d2 28             	imul   edx,edx,0x28
c001c99c:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001c9a0:	31 d2                	xor    edx,edx
c001c9a2:	52                   	push   edx
c001c9a3:	50                   	push   eax
c001c9a4:	55                   	push   ebp
c001c9a5:	e8 a0 62 ff ff       	call   c0012c4a <File::seek(unsigned long long)>
c001c9aa:	83 c4 0c             	add    esp,0xc
c001c9ad:	6a 20                	push   0x20
c001c9af:	6a 00                	push   0x0
c001c9b1:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c9b8:	51                   	push   ecx
c001c9b9:	e8 92 3d fe ff       	call   c0000750 <memset>
c001c9be:	59                   	pop    ecx
c001c9bf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c9c2:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c9c6:	52                   	push   edx
c001c9c7:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001c9ce:	51                   	push   ecx
c001c9cf:	6a 00                	push   0x0
c001c9d1:	6a 1f                	push   0x1f
c001c9d3:	55                   	push   ebp
c001c9d4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c9d7:	83 c4 1c             	add    esp,0x1c
c001c9da:	6a 09                	push   0x9
c001c9dc:	68 be b7 02 c0       	push   0xc002b7be
c001c9e1:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c9e8:	51                   	push   ecx
c001c9e9:	e8 5e 3c fe ff       	call   c000064c <memcmp>
c001c9ee:	83 c4 10             	add    esp,0x10
c001c9f1:	85 c0                	test   eax,eax
c001c9f3:	75 21                	jne    c001ca16 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001c9f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9f9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c9fd:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001ca01:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ca05:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ca08:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001ca0f:	89 d0                	mov    eax,edx
c001ca11:	40                   	inc    eax
c001ca12:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ca16:	50                   	push   eax
c001ca17:	6a 09                	push   0x9
c001ca19:	68 c8 b7 02 c0       	push   0xc002b7c8
c001ca1e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ca25:	50                   	push   eax
c001ca26:	e8 21 3c fe ff       	call   c000064c <memcmp>
c001ca2b:	83 c4 10             	add    esp,0x10
c001ca2e:	85 c0                	test   eax,eax
c001ca30:	75 21                	jne    c001ca53 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001ca32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca36:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ca3a:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001ca3e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ca42:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ca45:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001ca4c:	89 d0                	mov    eax,edx
c001ca4e:	40                   	inc    eax
c001ca4f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ca53:	50                   	push   eax
c001ca54:	50                   	push   eax
c001ca55:	68 94 b7 02 c0       	push   0xc002b794
c001ca5a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ca61:	50                   	push   eax
c001ca62:	e8 31 3e fe ff       	call   c0000898 <strcmp>
c001ca67:	83 c4 10             	add    esp,0x10
c001ca6a:	85 c0                	test   eax,eax
c001ca6c:	75 0f                	jne    c001ca7d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001ca6e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ca71:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ca75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ca79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ca7d:	50                   	push   eax
c001ca7e:	50                   	push   eax
c001ca7f:	68 9c b7 02 c0       	push   0xc002b79c
c001ca84:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ca8b:	50                   	push   eax
c001ca8c:	e8 07 3e fe ff       	call   c0000898 <strcmp>
c001ca91:	83 c4 10             	add    esp,0x10
c001ca94:	85 c0                	test   eax,eax
c001ca96:	75 0f                	jne    c001caa7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001ca98:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ca9b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ca9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001caa3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001caa7:	43                   	inc    ebx
c001caa8:	e9 c6 fe ff ff       	jmp    c001c973 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001caad:	31 d2                	xor    edx,edx
c001caaf:	50                   	push   eax
c001cab0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cab4:	52                   	push   edx
c001cab5:	50                   	push   eax
c001cab6:	55                   	push   ebp
c001cab7:	e8 8e 61 ff ff       	call   c0012c4a <File::seek(unsigned long long)>
c001cabc:	58                   	pop    eax
c001cabd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cac1:	e8 d6 2a ff ff       	call   c000f59c <malloc>
c001cac6:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cac9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001cacd:	31 d2                	xor    edx,edx
c001cacf:	58                   	pop    eax
c001cad0:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cad4:	53                   	push   ebx
c001cad5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001cad9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cadd:	52                   	push   edx
c001cade:	50                   	push   eax
c001cadf:	55                   	push   ebp
c001cae0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cae3:	83 c4 14             	add    esp,0x14
c001cae6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001caea:	e8 ad 2a ff ff       	call   c000f59c <malloc>
c001caef:	31 d2                	xor    edx,edx
c001caf1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001caf5:	83 c4 0c             	add    esp,0xc
c001caf8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cafc:	52                   	push   edx
c001cafd:	50                   	push   eax
c001cafe:	55                   	push   ebp
c001caff:	e8 46 61 ff ff       	call   c0012c4a <File::seek(unsigned long long)>
c001cb04:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cb07:	31 d2                	xor    edx,edx
c001cb09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cb0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cb10:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cb14:	52                   	push   edx
c001cb15:	50                   	push   eax
c001cb16:	55                   	push   ebp
c001cb17:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb1a:	83 c4 20             	add    esp,0x20
c001cb1d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cb25:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cb29:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001cb2d:	0f 84 0b 03 00 00    	je     c001ce3e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001cb33:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001cb3a:	31 d2                	xor    edx,edx
c001cb3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cb40:	c1 e8 03             	shr    eax,0x3
c001cb43:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001cb47:	51                   	push   ecx
c001cb48:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cb4c:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001cb50:	52                   	push   edx
c001cb51:	50                   	push   eax
c001cb52:	55                   	push   ebp
c001cb53:	e8 f2 60 ff ff       	call   c0012c4a <File::seek(unsigned long long)>
c001cb58:	5b                   	pop    ebx
c001cb59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb5d:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001cb64:	e8 33 2a ff ff       	call   c000f59c <malloc>
c001cb69:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cb6c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cb70:	31 d2                	xor    edx,edx
c001cb72:	5e                   	pop    esi
c001cb73:	8d 44 24 58          	lea    eax,[esp+0x58]
c001cb77:	50                   	push   eax
c001cb78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb7c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cb80:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001cb87:	52                   	push   edx
c001cb88:	50                   	push   eax
c001cb89:	55                   	push   ebp
c001cb8a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb8d:	83 c4 20             	add    esp,0x20
c001cb90:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001cb98:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001cb9c:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001cba0:	0f 8d 7c 02 00 00    	jge    c001ce22 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001cba6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cbaa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cbae:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001cbb3:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001cbb6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001cbba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cbbe:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001cbc2:	89 d8                	mov    eax,ebx
c001cbc4:	c1 e8 08             	shr    eax,0x8
c001cbc7:	89 c6                	mov    esi,eax
c001cbc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001cbcd:	c1 e6 04             	shl    esi,0x4
c001cbd0:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001cbd4:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001cbd7:	85 d2                	test   edx,edx
c001cbd9:	0f 85 bf 00 00 00    	jne    c001cc9e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cbdf:	83 ec 0c             	sub    esp,0xc
c001cbe2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cbe6:	03 06                	add    eax,DWORD PTR [esi]
c001cbe8:	50                   	push   eax
c001cbe9:	e8 4b f8 ff ff       	call   c001c439 <Thr::getAddressOfKernelSymbol(char const*)>
c001cbee:	83 c4 10             	add    esp,0x10
c001cbf1:	89 c2                	mov    edx,eax
c001cbf3:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001cbf8:	85 c0                	test   eax,eax
c001cbfa:	0f 85 9e 00 00 00    	jne    c001cc9e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cc00:	83 ec 0c             	sub    esp,0xc
c001cc03:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cc07:	03 06                	add    eax,DWORD PTR [esi]
c001cc09:	50                   	push   eax
c001cc0a:	e8 30 19 ff ff       	call   c000e53f <Krnl::resolveCompatibilitySymbol(char*)>
c001cc0f:	83 c4 10             	add    esp,0x10
c001cc12:	89 c2                	mov    edx,eax
c001cc14:	85 c0                	test   eax,eax
c001cc16:	0f 85 82 00 00 00    	jne    c001cc9e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cc1c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001cc20:	50                   	push   eax
c001cc21:	50                   	push   eax
c001cc22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc26:	03 06                	add    eax,DWORD PTR [esi]
c001cc28:	50                   	push   eax
c001cc29:	68 d2 b7 02 c0       	push   0xc002b7d2
c001cc2e:	e8 96 59 ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c001cc33:	58                   	pop    eax
c001cc34:	5a                   	pop    edx
c001cc35:	68 ec b7 02 c0       	push   0xc002b7ec
c001cc3a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cc41:	50                   	push   eax
c001cc42:	e8 c5 3b fe ff       	call   c000080c <strcpy>
c001cc47:	59                   	pop    ecx
c001cc48:	58                   	pop    eax
c001cc49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc4d:	03 06                	add    eax,DWORD PTR [esi]
c001cc4f:	50                   	push   eax
c001cc50:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cc57:	50                   	push   eax
c001cc58:	e8 ef 3c fe ff       	call   c000094c <strcat>
c001cc5d:	58                   	pop    eax
c001cc5e:	5a                   	pop    edx
c001cc5f:	68 82 b8 02 c0       	push   0xc002b882
c001cc64:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cc6b:	50                   	push   eax
c001cc6c:	e8 db 3c fe ff       	call   c000094c <strcat>
c001cc71:	83 c4 10             	add    esp,0x10
c001cc74:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cc79:	0f 84 5d 01 00 00    	je     c001cddc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cc7f:	83 ec 0c             	sub    esp,0xc
c001cc82:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cc89:	50                   	push   eax
c001cc8a:	e8 a6 d0 ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c001cc8f:	83 c4 10             	add    esp,0x10
c001cc92:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001cc96:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001cc9a:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001cc9e:	80 fb 01             	cmp    bl,0x1
c001cca1:	0f 85 88 00 00 00    	jne    c001cd2f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001cca7:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001ccae:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001ccb2:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001ccb6:	01 ce                	add    esi,ecx
c001ccb8:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001ccbe:	0f 94 c0             	sete   al
c001ccc1:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001ccc7:	0f 94 c3             	sete   bl
c001ccca:	09 c3                	or     ebx,eax
c001cccc:	8b 06                	mov    eax,DWORD PTR [esi]
c001ccce:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001ccd3:	74 41                	je     c001cd16 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001ccd5:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001ccd8:	84 db                	test   bl,bl
c001ccda:	75 15                	jne    c001ccf1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001ccdc:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cce0:	66 83 f8 0c          	cmp    ax,0xc
c001cce4:	76 05                	jbe    c001cceb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001cce6:	b8 0c 00 00 00       	mov    eax,0xc
c001cceb:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001ccef:	76 37                	jbe    c001cd28 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001ccf1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001ccf5:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001ccfa:	0f 84 dc 00 00 00    	je     c001cddc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cd00:	83 ec 0c             	sub    esp,0xc
c001cd03:	68 03 b8 02 c0       	push   0xc002b803
c001cd08:	e8 28 d0 ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c001cd0d:	83 c4 10             	add    esp,0x10
c001cd10:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cd14:	eb 12                	jmp    c001cd28 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cd16:	01 c1                	add    ecx,eax
c001cd18:	84 db                	test   bl,bl
c001cd1a:	75 0c                	jne    c001cd28 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cd1c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cd20:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001cd24:	77 02                	ja     c001cd28 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cd26:	01 d1                	add    ecx,edx
c001cd28:	89 0e                	mov    DWORD PTR [esi],ecx
c001cd2a:	e9 ea 00 00 00       	jmp    c001ce19 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001cd2f:	80 fb 02             	cmp    bl,0x2
c001cd32:	75 7c                	jne    c001cdb0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001cd34:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001cd3b:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001cd3f:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001cd43:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001cd49:	74 20                	je     c001cd6b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001cd4b:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001cd51:	74 18                	je     c001cd6b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001cd53:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cd57:	b9 0a 00 00 00       	mov    ecx,0xa
c001cd5c:	66 83 f8 0e          	cmp    ax,0xe
c001cd60:	77 03                	ja     c001cd65 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001cd62:	8d 48 fc             	lea    ecx,[eax-0x4]
c001cd65:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001cd69:	76 1f                	jbe    c001cd8a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001cd6b:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001cd6f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cd74:	74 66                	je     c001cddc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cd76:	83 ec 0c             	sub    esp,0xc
c001cd79:	68 1f b8 02 c0       	push   0xc002b81f
c001cd7e:	e8 b2 cf ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c001cd83:	83 c4 10             	add    esp,0x10
c001cd86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cd8a:	8b 06                	mov    eax,DWORD PTR [esi]
c001cd8c:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001cd91:	74 13                	je     c001cda6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001cd93:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001cd97:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001cd9e:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001cda2:	01 c8                	add    eax,ecx
c001cda4:	eb 04                	jmp    c001cdaa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001cda6:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001cdaa:	01 c2                	add    edx,eax
c001cdac:	89 16                	mov    DWORD PTR [esi],edx
c001cdae:	eb 69                	jmp    c001ce19 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001cdb0:	0f b6 db             	movzx  ebx,bl
c001cdb3:	50                   	push   eax
c001cdb4:	50                   	push   eax
c001cdb5:	53                   	push   ebx
c001cdb6:	68 3b b8 02 c0       	push   0xc002b83b
c001cdbb:	e8 09 58 ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c001cdc0:	83 c4 10             	add    esp,0x10
c001cdc3:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cdc8:	74 12                	je     c001cddc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cdca:	83 ec 0c             	sub    esp,0xc
c001cdcd:	68 46 b8 02 c0       	push   0xc002b846
c001cdd2:	e8 5e cf ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c001cdd7:	83 c4 10             	add    esp,0x10
c001cdda:	eb 3d                	jmp    c001ce19 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001cddc:	83 ec 0c             	sub    esp,0xc
c001cddf:	55                   	push   ebp
c001cde0:	e8 05 5e ff ff       	call   c0012bea <File::close()>
c001cde5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cde8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cdeb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cdee:	59                   	pop    ecx
c001cdef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cdf3:	e8 b4 27 ff ff       	call   c000f5ac <free>
c001cdf8:	5b                   	pop    ebx
c001cdf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cdfd:	e8 aa 27 ff ff       	call   c000f5ac <free>
c001ce02:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ce05:	e8 a2 27 ff ff       	call   c000f5ac <free>
c001ce0a:	5e                   	pop    esi
c001ce0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce0f:	e8 98 27 ff ff       	call   c000f5ac <free>
c001ce14:	83 c4 10             	add    esp,0x10
c001ce17:	eb 21                	jmp    c001ce3a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ce19:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001ce1d:	e9 76 fd ff ff       	jmp    c001cb98 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001ce22:	83 ec 0c             	sub    esp,0xc
c001ce25:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ce29:	e8 7e 27 ff ff       	call   c000f5ac <free>
c001ce2e:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001ce32:	83 c4 10             	add    esp,0x10
c001ce35:	e9 eb fc ff ff       	jmp    c001cb25 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001ce3a:	31 c0                	xor    eax,eax
c001ce3c:	eb 33                	jmp    c001ce71 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001ce3e:	83 ec 0c             	sub    esp,0xc
c001ce41:	55                   	push   ebp
c001ce42:	e8 a3 5d ff ff       	call   c0012bea <File::close()>
c001ce47:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ce4a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ce4d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ce50:	58                   	pop    eax
c001ce51:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ce55:	e8 52 27 ff ff       	call   c000f5ac <free>
c001ce5a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ce5d:	e8 4a 27 ff ff       	call   c000f5ac <free>
c001ce62:	5a                   	pop    edx
c001ce63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce67:	e8 40 27 ff ff       	call   c000f5ac <free>
c001ce6c:	83 c4 10             	add    esp,0x10
c001ce6f:	b0 01                	mov    al,0x1
c001ce71:	81 c4 5c 03 00 00    	add    esp,0x35c
c001ce77:	5b                   	pop    ebx
c001ce78:	5e                   	pop    esi
c001ce79:	5f                   	pop    edi
c001ce7a:	5d                   	pop    ebp
c001ce7b:	c3                   	ret    

c001ce7c <Thr::getDriverBaseFromAddress(unsigned long)>:
c001ce7c:	56                   	push   esi
c001ce7d:	31 d2                	xor    edx,edx
c001ce7f:	53                   	push   ebx
c001ce80:	8b 1d 60 04 03 c0    	mov    ebx,DWORD PTR ds:0xc0030460
c001ce86:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ce8a:	39 d3                	cmp    ebx,edx
c001ce8c:	7e 1b                	jle    c001cea9 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001ce8e:	8b 04 95 80 06 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcf980]
c001ce95:	39 c8                	cmp    eax,ecx
c001ce97:	77 0d                	ja     c001cea6 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001ce99:	8b 34 95 80 04 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcfb80]
c001cea0:	01 c6                	add    esi,eax
c001cea2:	39 ce                	cmp    esi,ecx
c001cea4:	77 05                	ja     c001ceab <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001cea6:	42                   	inc    edx
c001cea7:	eb e1                	jmp    c001ce8a <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001cea9:	31 c0                	xor    eax,eax
c001ceab:	5b                   	pop    ebx
c001ceac:	5e                   	pop    esi
c001cead:	c3                   	ret    

c001ceae <Thr::getDriverNameFromAddress(unsigned long)>:
c001ceae:	53                   	push   ebx
c001ceaf:	31 c0                	xor    eax,eax
c001ceb1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ceb5:	8b 1d 60 04 03 c0    	mov    ebx,DWORD PTR ds:0xc0030460
c001cebb:	39 c3                	cmp    ebx,eax
c001cebd:	7e 22                	jle    c001cee1 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001cebf:	8b 14 85 80 06 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf980]
c001cec6:	39 ca                	cmp    edx,ecx
c001cec8:	77 14                	ja     c001cede <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001ceca:	03 14 85 80 04 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcfb80]
c001ced1:	39 ca                	cmp    edx,ecx
c001ced3:	76 09                	jbe    c001cede <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001ced5:	8b 04 85 80 08 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf780]
c001cedc:	eb 05                	jmp    c001cee3 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001cede:	40                   	inc    eax
c001cedf:	eb da                	jmp    c001cebb <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001cee1:	31 c0                	xor    eax,eax
c001cee3:	5b                   	pop    ebx
c001cee4:	c3                   	ret    

c001cee5 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001cee5:	53                   	push   ebx
c001cee6:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001ceea:	53                   	push   ebx
c001ceeb:	e8 8c ff ff ff       	call   c001ce7c <Thr::getDriverBaseFromAddress(unsigned long)>
c001cef0:	5a                   	pop    edx
c001cef1:	31 d2                	xor    edx,edx
c001cef3:	85 c0                	test   eax,eax
c001cef5:	74 04                	je     c001cefb <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001cef7:	89 da                	mov    edx,ebx
c001cef9:	29 c2                	sub    edx,eax
c001cefb:	89 d0                	mov    eax,edx
c001cefd:	5b                   	pop    ebx
c001cefe:	c3                   	ret    

c001ceff <Thr::loadDLL(char const*, bool)>:
c001ceff:	55                   	push   ebp
c001cf00:	57                   	push   edi
c001cf01:	56                   	push   esi
c001cf02:	53                   	push   ebx
c001cf03:	81 ec 34 01 00 00    	sub    esp,0x134
c001cf09:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001cf10:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001cf17:	56                   	push   esi
c001cf18:	68 5e b8 02 c0       	push   0xc002b85e
c001cf1d:	e8 a7 56 ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c001cf22:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001cf29:	e8 6e 26 ff ff       	call   c000f59c <malloc>
c001cf2e:	83 c4 0c             	add    esp,0xc
c001cf31:	89 c3                	mov    ebx,eax
c001cf33:	ff 35 50 0c 03 c0    	push   DWORD PTR ds:0xc0030c50
c001cf39:	56                   	push   esi
c001cf3a:	50                   	push   eax
c001cf3b:	e8 e8 5b ff ff       	call   c0012b28 <File::File(char const*, Process*)>
c001cf40:	83 c4 10             	add    esp,0x10
c001cf43:	85 db                	test   ebx,ebx
c001cf45:	75 3c                	jne    c001cf83 <Thr::loadDLL(char const*, bool)+0x84>
c001cf47:	89 f8                	mov    eax,edi
c001cf49:	84 c0                	test   al,al
c001cf4b:	0f 84 cf 01 00 00    	je     c001d120 <Thr::loadDLL(char const*, bool)+0x221>
c001cf51:	55                   	push   ebp
c001cf52:	55                   	push   ebp
c001cf53:	68 6f b8 02 c0       	push   0xc002b86f
c001cf58:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001cf5c:	55                   	push   ebp
c001cf5d:	e8 aa 38 fe ff       	call   c000080c <strcpy>
c001cf62:	58                   	pop    eax
c001cf63:	5a                   	pop    edx
c001cf64:	56                   	push   esi
c001cf65:	55                   	push   ebp
c001cf66:	e8 e1 39 fe ff       	call   c000094c <strcat>
c001cf6b:	59                   	pop    ecx
c001cf6c:	58                   	pop    eax
c001cf6d:	68 82 b8 02 c0       	push   0xc002b882
c001cf72:	55                   	push   ebp
c001cf73:	e8 d4 39 fe ff       	call   c000094c <strcat>
c001cf78:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf7b:	e8 b5 cd ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c001cf80:	83 c4 10             	add    esp,0x10
c001cf83:	51                   	push   ecx
c001cf84:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001cf88:	50                   	push   eax
c001cf89:	8d 44 24 20          	lea    eax,[esp+0x20]
c001cf8d:	50                   	push   eax
c001cf8e:	53                   	push   ebx
c001cf8f:	e8 a4 5e ff ff       	call   c0012e38 <File::stat(unsigned long long*, bool*)>
c001cf94:	83 c4 10             	add    esp,0x10
c001cf97:	85 db                	test   ebx,ebx
c001cf99:	74 0c                	je     c001cfa7 <Thr::loadDLL(char const*, bool)+0xa8>
c001cf9b:	83 ec 0c             	sub    esp,0xc
c001cf9e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cfa0:	53                   	push   ebx
c001cfa1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cfa4:	83 c4 10             	add    esp,0x10
c001cfa7:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001cfac:	75 0a                	jne    c001cfb8 <Thr::loadDLL(char const*, bool)+0xb9>
c001cfae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cfb2:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001cfb6:	75 3c                	jne    c001cff4 <Thr::loadDLL(char const*, bool)+0xf5>
c001cfb8:	89 f8                	mov    eax,edi
c001cfba:	84 c0                	test   al,al
c001cfbc:	0f 84 46 01 00 00    	je     c001d108 <Thr::loadDLL(char const*, bool)+0x209>
c001cfc2:	51                   	push   ecx
c001cfc3:	51                   	push   ecx
c001cfc4:	68 6f b8 02 c0       	push   0xc002b86f
c001cfc9:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001cfcd:	53                   	push   ebx
c001cfce:	e8 39 38 fe ff       	call   c000080c <strcpy>
c001cfd3:	5d                   	pop    ebp
c001cfd4:	58                   	pop    eax
c001cfd5:	56                   	push   esi
c001cfd6:	53                   	push   ebx
c001cfd7:	e8 70 39 fe ff       	call   c000094c <strcat>
c001cfdc:	58                   	pop    eax
c001cfdd:	5a                   	pop    edx
c001cfde:	68 82 b8 02 c0       	push   0xc002b882
c001cfe3:	53                   	push   ebx
c001cfe4:	e8 63 39 fe ff       	call   c000094c <strcat>
c001cfe9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cfec:	e8 44 cd ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c001cff1:	83 c4 10             	add    esp,0x10
c001cff4:	52                   	push   edx
c001cff5:	68 03 08 00 00       	push   0x803
c001cffa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cffe:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d002:	05 ff 0f 00 00       	add    eax,0xfff
c001d007:	83 d2 00             	adc    edx,0x0
c001d00a:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d00e:	50                   	push   eax
c001d00f:	ff 35 70 d8 02 c0    	push   DWORD PTR ds:0xc002d870
c001d015:	e8 74 4a ff ff       	call   c0011a8e <VAS::allocatePages(int, int)>
c001d01a:	59                   	pop    ecx
c001d01b:	89 c3                	mov    ebx,eax
c001d01d:	5d                   	pop    ebp
c001d01e:	50                   	push   eax
c001d01f:	68 38 9f 02 c0       	push   0xc0029f38
c001d024:	e8 a0 55 ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c001d029:	89 34 24             	mov    DWORD PTR [esp],esi
c001d02c:	e8 3b 37 fe ff       	call   c000076c <strlen>
c001d031:	8b 2d 60 04 03 c0    	mov    ebp,DWORD PTR ds:0xc0030460
c001d037:	40                   	inc    eax
c001d038:	89 04 24             	mov    DWORD PTR [esp],eax
c001d03b:	e8 5c 25 ff ff       	call   c000f59c <malloc>
c001d040:	89 04 ad 80 08 03 c0 	mov    DWORD PTR [ebp*4-0x3ffcf780],eax
c001d047:	58                   	pop    eax
c001d048:	a1 60 04 03 c0       	mov    eax,ds:0xc0030460
c001d04d:	5a                   	pop    edx
c001d04e:	56                   	push   esi
c001d04f:	ff 34 85 80 08 03 c0 	push   DWORD PTR [eax*4-0x3ffcf780]
c001d056:	e8 b1 37 fe ff       	call   c000080c <strcpy>
c001d05b:	a1 60 04 03 c0       	mov    eax,ds:0xc0030460
c001d060:	8d 50 01             	lea    edx,[eax+0x1]
c001d063:	89 1c 85 80 06 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf980],ebx
c001d06a:	89 15 60 04 03 c0    	mov    DWORD PTR ds:0xc0030460,edx
c001d070:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d074:	83 c4 0c             	add    esp,0xc
c001d077:	89 14 85 80 04 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfb80],edx
c001d07e:	6a 01                	push   0x1
c001d080:	53                   	push   ebx
c001d081:	56                   	push   esi
c001d082:	e8 bf f6 ff ff       	call   c001c746 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d087:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d08b:	83 c4 10             	add    esp,0x10
c001d08e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d093:	0f 85 83 00 00 00    	jne    c001d11c <Thr::loadDLL(char const*, bool)+0x21d>
c001d099:	89 f8                	mov    eax,edi
c001d09b:	84 c0                	test   al,al
c001d09d:	74 6d                	je     c001d10c <Thr::loadDLL(char const*, bool)+0x20d>
c001d09f:	83 ec 0c             	sub    esp,0xc
c001d0a2:	68 84 b8 02 c0       	push   0xc002b884
c001d0a7:	e8 89 cc ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c001d0ac:	83 c4 10             	add    esp,0x10
c001d0af:	eb 5b                	jmp    c001d10c <Thr::loadDLL(char const*, bool)+0x20d>
c001d0b1:	89 ee                	mov    esi,ebp
c001d0b3:	50                   	push   eax
c001d0b4:	c1 e6 0c             	shl    esi,0xc
c001d0b7:	50                   	push   eax
c001d0b8:	01 de                	add    esi,ebx
c001d0ba:	56                   	push   esi
c001d0bb:	ff 35 70 d8 02 c0    	push   DWORD PTR ds:0xc002d870
c001d0c1:	e8 30 45 ff ff       	call   c00115f6 <VAS::getPageTableEntry(unsigned long)>
c001d0c6:	83 c4 10             	add    esp,0x10
c001d0c9:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d0cc:	75 0c                	jne    c001d0da <Thr::loadDLL(char const*, bool)+0x1db>
c001d0ce:	83 ec 0c             	sub    esp,0xc
c001d0d1:	56                   	push   esi
c001d0d2:	e8 0e 28 ff ff       	call   c000f8e5 <Phys::freePage(unsigned long)>
c001d0d7:	83 c4 10             	add    esp,0x10
c001d0da:	45                   	inc    ebp
c001d0db:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d0df:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d0e3:	05 ff 0f 00 00       	add    eax,0xfff
c001d0e8:	bf 00 00 00 00       	mov    edi,0x0
c001d0ed:	83 d2 00             	adc    edx,0x0
c001d0f0:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d0f4:	c1 ea 0c             	shr    edx,0xc
c001d0f7:	39 c5                	cmp    ebp,eax
c001d0f9:	89 d1                	mov    ecx,edx
c001d0fb:	89 f8                	mov    eax,edi
c001d0fd:	19 c8                	sbb    eax,ecx
c001d0ff:	72 b0                	jb     c001d0b1 <Thr::loadDLL(char const*, bool)+0x1b2>
c001d101:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d106:	75 18                	jne    c001d120 <Thr::loadDLL(char const*, bool)+0x221>
c001d108:	31 db                	xor    ebx,ebx
c001d10a:	eb 14                	jmp    c001d120 <Thr::loadDLL(char const*, bool)+0x221>
c001d10c:	83 ec 0c             	sub    esp,0xc
c001d10f:	68 a3 b8 02 c0       	push   0xc002b8a3
c001d114:	e8 1c cc ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c001d119:	83 c4 10             	add    esp,0x10
c001d11c:	31 ed                	xor    ebp,ebp
c001d11e:	eb bb                	jmp    c001d0db <Thr::loadDLL(char const*, bool)+0x1dc>
c001d120:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d126:	89 d8                	mov    eax,ebx
c001d128:	5b                   	pop    ebx
c001d129:	5e                   	pop    esi
c001d12a:	5f                   	pop    edi
c001d12b:	5d                   	pop    ebp
c001d12c:	c3                   	ret    

c001d12d <Thr::executeDLL(unsigned long, void*)>:
c001d12d:	56                   	push   esi
c001d12e:	53                   	push   ebx
c001d12f:	52                   	push   edx
c001d130:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d134:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d138:	85 db                	test   ebx,ebx
c001d13a:	75 10                	jne    c001d14c <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d13c:	83 ec 0c             	sub    esp,0xc
c001d13f:	68 bf b8 02 c0       	push   0xc002b8bf
c001d144:	e8 ec cb ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c001d149:	83 c4 10             	add    esp,0x10
c001d14c:	50                   	push   eax
c001d14d:	50                   	push   eax
c001d14e:	53                   	push   ebx
c001d14f:	68 e9 b8 02 c0       	push   0xc002b8e9
c001d154:	e8 70 54 ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c001d159:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d15d:	89 d8                	mov    eax,ebx
c001d15f:	83 c4 14             	add    esp,0x14
c001d162:	5b                   	pop    ebx
c001d163:	5e                   	pop    esi
c001d164:	ff e0                	jmp    eax

c001d166 <userModeEntryPoint(void*)>:
c001d166:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001d16b:	48                   	dec    eax
c001d16c:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001d171:	75 01                	jne    c001d174 <userModeEntryPoint(void*)+0xe>
c001d173:	fb                   	sti    
c001d174:	fb                   	sti    
c001d175:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d17a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d17d:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d183:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d187:	e9 9e 31 fe ff       	jmp    c000032a <goToUsermode>

c001d18c <changeTSS>:
c001d18c:	83 ec 14             	sub    esp,0x14
c001d18f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d194:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d197:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d19c:	c1 e2 15             	shl    edx,0x15
c001d19f:	29 d0                	sub    eax,edx
c001d1a1:	50                   	push   eax
c001d1a2:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c001d1a7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d1ad:	05 7c 11 00 00       	add    eax,0x117c
c001d1b2:	50                   	push   eax
c001d1b3:	e8 6c 39 ff ff       	call   c0010b24 <TSS::setESP(unsigned long)>
c001d1b8:	83 c4 1c             	add    esp,0x1c
c001d1bb:	c3                   	ret    

c001d1bc <switchToThread(ThreadControlBlock*)>:
c001d1bc:	57                   	push   edi
c001d1bd:	a1 24 0c 03 c0       	mov    eax,ds:0xc0030c24
c001d1c2:	56                   	push   esi
c001d1c3:	85 c0                	test   eax,eax
c001d1c5:	53                   	push   ebx
c001d1c6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d1ca:	0f 85 88 00 00 00    	jne    c001d258 <switchToThread(ThreadControlBlock*)+0x9c>
c001d1d0:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001d1d3:	3c ff                	cmp    al,0xff
c001d1d5:	74 7d                	je     c001d254 <switchToThread(ThreadControlBlock*)+0x98>
c001d1d7:	0f b6 d0             	movzx  edx,al
c001d1da:	b8 84 03 00 00       	mov    eax,0x384
c001d1df:	29 d0                	sub    eax,edx
c001d1e1:	c1 e0 10             	shl    eax,0x10
c001d1e4:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001d1e7:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001d1ea:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c001d1ef:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d1f5:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d1fc:	74 4a                	je     c001d248 <switchToThread(ThreadControlBlock*)+0x8c>
c001d1fe:	0f 31                	rdtsc  
c001d200:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c001d205:	89 c6                	mov    esi,eax
c001d207:	89 d7                	mov    edi,edx
c001d209:	2b 35 58 0c 03 c0    	sub    esi,DWORD PTR ds:0xc0030c58
c001d20f:	89 15 6c 0c 03 c0    	mov    DWORD PTR ds:0xc0030c6c,edx
c001d215:	1b 3d 5c 0c 03 c0    	sbb    edi,DWORD PTR ds:0xc0030c5c
c001d21b:	89 35 60 0c 03 c0    	mov    DWORD PTR ds:0xc0030c60,esi
c001d221:	a3 58 0c 03 c0       	mov    ds:0xc0030c58,eax
c001d226:	89 3d 64 0c 03 c0    	mov    DWORD PTR ds:0xc0030c64,edi
c001d22c:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001d232:	89 15 5c 0c 03 c0    	mov    DWORD PTR ds:0xc0030c5c,edx
c001d238:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d23b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001d23e:	01 c6                	add    esi,eax
c001d240:	11 d7                	adc    edi,edx
c001d242:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001d245:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001d248:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001d24c:	5b                   	pop    ebx
c001d24d:	5e                   	pop    esi
c001d24e:	5f                   	pop    edi
c001d24f:	e9 0e 31 fe ff       	jmp    c0000362 <switchToThreadASM>
c001d254:	31 c0                	xor    eax,eax
c001d256:	eb 8f                	jmp    c001d1e7 <switchToThread(ThreadControlBlock*)+0x2b>
c001d258:	5b                   	pop    ebx
c001d259:	c7 05 20 0c 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0030c20,0x1
c001d263:	5e                   	pop    esi
c001d264:	5f                   	pop    edi
c001d265:	c3                   	ret    

c001d266 <Process::addArgs(char**)>:
c001d266:	57                   	push   edi
c001d267:	56                   	push   esi
c001d268:	53                   	push   ebx
c001d269:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d26d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d271:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d27b:	85 ff                	test   edi,edi
c001d27d:	74 3d                	je     c001d2bc <Process::addArgs(char**)+0x56>
c001d27f:	8b 07                	mov    eax,DWORD PTR [edi]
c001d281:	85 c0                	test   eax,eax
c001d283:	74 37                	je     c001d2bc <Process::addArgs(char**)+0x56>
c001d285:	31 db                	xor    ebx,ebx
c001d287:	83 ec 0c             	sub    esp,0xc
c001d28a:	50                   	push   eax
c001d28b:	e8 dc 34 fe ff       	call   c000076c <strlen>
c001d290:	40                   	inc    eax
c001d291:	89 04 24             	mov    DWORD PTR [esp],eax
c001d294:	e8 03 23 ff ff       	call   c000f59c <malloc>
c001d299:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d2a0:	5a                   	pop    edx
c001d2a1:	59                   	pop    ecx
c001d2a2:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d2a5:	43                   	inc    ebx
c001d2a6:	50                   	push   eax
c001d2a7:	e8 60 35 fe ff       	call   c000080c <strcpy>
c001d2ac:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d2b2:	83 c4 10             	add    esp,0x10
c001d2b5:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d2b8:	85 c0                	test   eax,eax
c001d2ba:	75 cb                	jne    c001d287 <Process::addArgs(char**)+0x21>
c001d2bc:	5b                   	pop    ebx
c001d2bd:	5e                   	pop    esi
c001d2be:	5f                   	pop    edi
c001d2bf:	c3                   	ret    

c001d2c0 <Process::Process(char const*, Process*, char**)>:
c001d2c0:	56                   	push   esi
c001d2c1:	53                   	push   ebx
c001d2c2:	83 ec 14             	sub    esp,0x14
c001d2c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2c9:	05 0c 02 00 00       	add    eax,0x20c
c001d2ce:	bb 07 00 00 00       	mov    ebx,0x7
c001d2d3:	89 c6                	mov    esi,eax
c001d2d5:	85 db                	test   ebx,ebx
c001d2d7:	78 12                	js     c001d2eb <Process::Process(char const*, Process*, char**)+0x2b>
c001d2d9:	83 ec 0c             	sub    esp,0xc
c001d2dc:	56                   	push   esi
c001d2dd:	e8 94 b6 00 00       	call   c0028976 <ThreadControlBlock::ThreadControlBlock()>
c001d2e2:	83 c4 10             	add    esp,0x10
c001d2e5:	83 c6 63             	add    esi,0x63
c001d2e8:	4b                   	dec    ebx
c001d2e9:	eb ea                	jmp    c001d2d5 <Process::Process(char const*, Process*, char**)+0x15>
c001d2eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2ef:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d2f6:	83 ec 0c             	sub    esp,0xc
c001d2f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d2fd:	e8 bc c8 ff ff       	call   c0019bbe <Krnl::newProcessEnv(Process*)>
c001d302:	83 c4 10             	add    esp,0x10
c001d305:	89 c2                	mov    edx,eax
c001d307:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d30b:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d311:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d315:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d31e:	a1 90 cc 02 c0       	mov    eax,ds:0xc002cc90
c001d323:	8d 50 01             	lea    edx,[eax+0x1]
c001d326:	89 15 90 cc 02 c0    	mov    DWORD PTR ds:0xc002cc90,edx
c001d32c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d330:	89 02                	mov    DWORD PTR [edx],eax
c001d332:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001d33a:	83 ec 0c             	sub    esp,0xc
c001d33d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d341:	e8 56 22 ff ff       	call   c000f59c <malloc>
c001d346:	83 c4 10             	add    esp,0x10
c001d349:	89 c3                	mov    ebx,eax
c001d34b:	83 ec 08             	sub    esp,0x8
c001d34e:	6a 00                	push   0x0
c001d350:	53                   	push   ebx
c001d351:	e8 e0 4a ff ff       	call   c0011e36 <VAS::VAS(bool)>
c001d356:	83 c4 10             	add    esp,0x10
c001d359:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d35d:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d363:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d367:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d371:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d375:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d379:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d37f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d383:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d389:	85 c0                	test   eax,eax
c001d38b:	74 42                	je     c001d3cf <Process::Process(char const*, Process*, char**)+0x10f>
c001d38d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d391:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d397:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d39d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3a1:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d3a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3ab:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d3b1:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d3b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3bb:	05 0c 01 00 00       	add    eax,0x10c
c001d3c0:	83 ec 08             	sub    esp,0x8
c001d3c3:	52                   	push   edx
c001d3c4:	50                   	push   eax
c001d3c5:	e8 42 34 fe ff       	call   c000080c <strcpy>
c001d3ca:	83 c4 10             	add    esp,0x10
c001d3cd:	eb 63                	jmp    c001d432 <Process::Process(char const*, Process*, char**)+0x172>
c001d3cf:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001d3d7:	83 ec 0c             	sub    esp,0xc
c001d3da:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d3de:	e8 b9 21 ff ff       	call   c000f59c <malloc>
c001d3e3:	83 c4 10             	add    esp,0x10
c001d3e6:	89 c3                	mov    ebx,eax
c001d3e8:	83 ec 08             	sub    esp,0x8
c001d3eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d3ef:	53                   	push   ebx
c001d3f0:	e8 43 34 ff ff       	call   c0010838 <VgaText::VgaText(char const*)>
c001d3f5:	83 c4 10             	add    esp,0x10
c001d3f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3fc:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d402:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d406:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d40c:	83 ec 0c             	sub    esp,0xc
c001d40f:	50                   	push   eax
c001d410:	e8 e2 2b ff ff       	call   c000fff7 <addToTerminalCycle(VgaText*)>
c001d415:	83 c4 10             	add    esp,0x10
c001d418:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d41c:	05 0c 01 00 00       	add    eax,0x10c
c001d421:	83 ec 08             	sub    esp,0x8
c001d424:	68 08 b9 02 c0       	push   0xc002b908
c001d429:	50                   	push   eax
c001d42a:	e8 dd 33 fe ff       	call   c000080c <strcpy>
c001d42f:	83 c4 10             	add    esp,0x10
c001d432:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d436:	83 c0 0c             	add    eax,0xc
c001d439:	83 ec 08             	sub    esp,0x8
c001d43c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d440:	50                   	push   eax
c001d441:	e8 c6 33 fe ff       	call   c000080c <strcpy>
c001d446:	83 c4 10             	add    esp,0x10
c001d449:	83 ec 08             	sub    esp,0x8
c001d44c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d450:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d454:	e8 0d fe ff ff       	call   c001d266 <Process::addArgs(char**)>
c001d459:	83 c4 10             	add    esp,0x10
c001d45c:	83 ec 08             	sub    esp,0x8
c001d45f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d463:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d467:	e8 a4 ed ff ff       	call   c001c210 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001d46c:	83 c4 10             	add    esp,0x10
c001d46f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d473:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d477:	83 f0 01             	xor    eax,0x1
c001d47a:	88 c2                	mov    dl,al
c001d47c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d480:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001d486:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d48b:	83 ec 08             	sub    esp,0x8
c001d48e:	50                   	push   eax
c001d48f:	68 60 b9 02 c0       	push   0xc002b960
c001d494:	e8 30 51 ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c001d499:	83 c4 10             	add    esp,0x10
c001d49c:	90                   	nop
c001d49d:	83 c4 14             	add    esp,0x14
c001d4a0:	5b                   	pop    ebx
c001d4a1:	5e                   	pop    esi
c001d4a2:	c3                   	ret    
c001d4a3:	90                   	nop

c001d4a4 <Process::Process(bool, char const*, Process*, char**)>:
c001d4a4:	56                   	push   esi
c001d4a5:	53                   	push   ebx
c001d4a6:	83 ec 24             	sub    esp,0x24
c001d4a9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d4ad:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d4b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d4b5:	05 0c 02 00 00       	add    eax,0x20c
c001d4ba:	bb 07 00 00 00       	mov    ebx,0x7
c001d4bf:	89 c6                	mov    esi,eax
c001d4c1:	85 db                	test   ebx,ebx
c001d4c3:	78 12                	js     c001d4d7 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001d4c5:	83 ec 0c             	sub    esp,0xc
c001d4c8:	56                   	push   esi
c001d4c9:	e8 a8 b4 00 00       	call   c0028976 <ThreadControlBlock::ThreadControlBlock()>
c001d4ce:	83 c4 10             	add    esp,0x10
c001d4d1:	83 c6 63             	add    esi,0x63
c001d4d4:	4b                   	dec    ebx
c001d4d5:	eb ea                	jmp    c001d4c1 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001d4d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d4db:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d4e2:	83 ec 0c             	sub    esp,0xc
c001d4e5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d4e9:	e8 d0 c6 ff ff       	call   c0019bbe <Krnl::newProcessEnv(Process*)>
c001d4ee:	83 c4 10             	add    esp,0x10
c001d4f1:	89 c2                	mov    edx,eax
c001d4f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d4f7:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d4fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d501:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d50a:	a1 90 cc 02 c0       	mov    eax,ds:0xc002cc90
c001d50f:	8d 50 01             	lea    edx,[eax+0x1]
c001d512:	89 15 90 cc 02 c0    	mov    DWORD PTR ds:0xc002cc90,edx
c001d518:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d51c:	89 02                	mov    DWORD PTR [edx],eax
c001d51e:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001d526:	83 ec 0c             	sub    esp,0xc
c001d529:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d52d:	e8 6a 20 ff ff       	call   c000f59c <malloc>
c001d532:	83 c4 10             	add    esp,0x10
c001d535:	89 c3                	mov    ebx,eax
c001d537:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d53c:	83 ec 08             	sub    esp,0x8
c001d53f:	50                   	push   eax
c001d540:	53                   	push   ebx
c001d541:	e8 f0 48 ff ff       	call   c0011e36 <VAS::VAS(bool)>
c001d546:	83 c4 10             	add    esp,0x10
c001d549:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d54d:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d553:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d557:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d561:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d565:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d569:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d56f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d573:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d579:	85 c0                	test   eax,eax
c001d57b:	74 42                	je     c001d5bf <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001d57d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d581:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d587:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d58d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d591:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d597:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d59b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d5a1:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d5a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5ab:	05 0c 01 00 00       	add    eax,0x10c
c001d5b0:	83 ec 08             	sub    esp,0x8
c001d5b3:	52                   	push   edx
c001d5b4:	50                   	push   eax
c001d5b5:	e8 52 32 fe ff       	call   c000080c <strcpy>
c001d5ba:	83 c4 10             	add    esp,0x10
c001d5bd:	eb 63                	jmp    c001d622 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001d5bf:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001d5c7:	83 ec 0c             	sub    esp,0xc
c001d5ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d5ce:	e8 c9 1f ff ff       	call   c000f59c <malloc>
c001d5d3:	83 c4 10             	add    esp,0x10
c001d5d6:	89 c3                	mov    ebx,eax
c001d5d8:	83 ec 08             	sub    esp,0x8
c001d5db:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d5df:	53                   	push   ebx
c001d5e0:	e8 53 32 ff ff       	call   c0010838 <VgaText::VgaText(char const*)>
c001d5e5:	83 c4 10             	add    esp,0x10
c001d5e8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5ec:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d5f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5f6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d5fc:	83 ec 0c             	sub    esp,0xc
c001d5ff:	50                   	push   eax
c001d600:	e8 f2 29 ff ff       	call   c000fff7 <addToTerminalCycle(VgaText*)>
c001d605:	83 c4 10             	add    esp,0x10
c001d608:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d60c:	05 0c 01 00 00       	add    eax,0x10c
c001d611:	83 ec 08             	sub    esp,0x8
c001d614:	68 08 b9 02 c0       	push   0xc002b908
c001d619:	50                   	push   eax
c001d61a:	e8 ed 31 fe ff       	call   c000080c <strcpy>
c001d61f:	83 c4 10             	add    esp,0x10
c001d622:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d626:	83 c0 0c             	add    eax,0xc
c001d629:	83 ec 08             	sub    esp,0x8
c001d62c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d630:	50                   	push   eax
c001d631:	e8 d6 31 fe ff       	call   c000080c <strcpy>
c001d636:	83 c4 10             	add    esp,0x10
c001d639:	83 ec 08             	sub    esp,0x8
c001d63c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d640:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d644:	e8 1d fc ff ff       	call   c001d266 <Process::addArgs(char**)>
c001d649:	83 c4 10             	add    esp,0x10
c001d64c:	90                   	nop
c001d64d:	83 c4 24             	add    esp,0x24
c001d650:	5b                   	pop    ebx
c001d651:	5e                   	pop    esi
c001d652:	c3                   	ret    

c001d653 <taskStartupFunction>:
c001d653:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d658:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001d65b:	c3                   	ret    

c001d65c <Semaphore::Semaphore(int)>:
c001d65c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d660:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d664:	89 10                	mov    DWORD PTR [eax],edx
c001d666:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d66a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d671:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d675:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d67c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d680:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d687:	90                   	nop
c001d688:	c3                   	ret    
c001d689:	90                   	nop

c001d68a <Mutex::Mutex()>:
c001d68a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d68e:	6a 01                	push   0x1
c001d690:	50                   	push   eax
c001d691:	e8 c6 ff ff ff       	call   c001d65c <Semaphore::Semaphore(int)>
c001d696:	83 c4 08             	add    esp,0x8
c001d699:	90                   	nop
c001d69a:	c3                   	ret    
c001d69b:	90                   	nop

c001d69c <Process::createThread(void (*)(void*), void*, int)>:
c001d69c:	55                   	push   ebp
c001d69d:	31 c9                	xor    ecx,ecx
c001d69f:	57                   	push   edi
c001d6a0:	56                   	push   esi
c001d6a1:	53                   	push   ebx
c001d6a2:	83 ec 1c             	sub    esp,0x1c
c001d6a5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d6a9:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001d6b0:	89 f2                	mov    edx,esi
c001d6b2:	0f b7 c2             	movzx  eax,dx
c001d6b5:	83 e2 01             	and    edx,0x1
c001d6b8:	74 16                	je     c001d6d0 <Process::createThread(void (*)(void*), void*, int)+0x34>
c001d6ba:	d1 f8                	sar    eax,1
c001d6bc:	41                   	inc    ecx
c001d6bd:	89 c2                	mov    edx,eax
c001d6bf:	83 f9 10             	cmp    ecx,0x10
c001d6c2:	75 ee                	jne    c001d6b2 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001d6c4:	83 c4 1c             	add    esp,0x1c
c001d6c7:	31 db                	xor    ebx,ebx
c001d6c9:	89 d8                	mov    eax,ebx
c001d6cb:	5b                   	pop    ebx
c001d6cc:	5e                   	pop    esi
c001d6cd:	5f                   	pop    edi
c001d6ce:	5d                   	pop    ebp
c001d6cf:	c3                   	ret    
c001d6d0:	b8 01 00 00 00       	mov    eax,0x1
c001d6d5:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001d6d8:	d3 e0                	shl    eax,cl
c001d6da:	09 c6                	or     esi,eax
c001d6dc:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001d6df:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001d6e6:	89 c6                	mov    esi,eax
c001d6e8:	c1 e6 05             	shl    esi,0x5
c001d6eb:	01 f0                	add    eax,esi
c001d6ed:	01 d8                	add    eax,ebx
c001d6ef:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001d6f6:	75 0a                	jne    c001d702 <Process::createThread(void (*)(void*), void*, int)+0x66>
c001d6f8:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001d702:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d708:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001d70c:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001d70f:	01 ca                	add    edx,ecx
c001d711:	83 ec 08             	sub    esp,0x8
c001d714:	89 d0                	mov    eax,edx
c001d716:	c1 e0 05             	shl    eax,0x5
c001d719:	01 d0                	add    eax,edx
c001d71b:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001d71f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d723:	01 d8                	add    eax,ebx
c001d725:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001d72b:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001d731:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001d737:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001d73d:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001d743:	89 cd                	mov    ebp,ecx
c001d745:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001d749:	f7 dd                	neg    ebp
c001d74b:	c1 e5 15             	shl    ebp,0x15
c001d74e:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001d754:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001d75a:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001d764:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001d76a:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001d774:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001d77e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d782:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001d789:	53                   	push   ebx
c001d78a:	68 44 0c 03 c0       	push   0xc0030c44
c001d78f:	e8 9c af 00 00       	call   c0028730 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d794:	89 d8                	mov    eax,ebx
c001d796:	83 c4 10             	add    esp,0x10
c001d799:	83 c4 1c             	add    esp,0x1c
c001d79c:	5b                   	pop    ebx
c001d79d:	5e                   	pop    esi
c001d79e:	5f                   	pop    edi
c001d79f:	5d                   	pop    ebp
c001d7a0:	c3                   	ret    
c001d7a1:	90                   	nop

c001d7a2 <Process::createUserThread()>:
c001d7a2:	83 ec 0c             	sub    esp,0xc
c001d7a5:	68 80 00 00 00       	push   0x80
c001d7aa:	6a 00                	push   0x0
c001d7ac:	68 66 d1 01 c0       	push   0xc001d166
c001d7b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d7b5:	e8 e2 fe ff ff       	call   c001d69c <Process::createThread(void (*)(void*), void*, int)>
c001d7ba:	83 c4 1c             	add    esp,0x1c
c001d7bd:	c3                   	ret    

c001d7be <setupMultitasking(void (*)())>:
c001d7be:	56                   	push   esi
c001d7bf:	53                   	push   ebx
c001d7c0:	51                   	push   ecx
c001d7c1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d7c5:	eb 10                	jmp    c001d7d7 <setupMultitasking(void (*)())+0x19>
c001d7c7:	83 ec 0c             	sub    esp,0xc
c001d7ca:	68 44 0c 03 c0       	push   0xc0030c44
c001d7cf:	e8 ae ae 00 00       	call   c0028682 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d7d4:	83 c4 10             	add    esp,0x10
c001d7d7:	83 ec 0c             	sub    esp,0xc
c001d7da:	68 44 0c 03 c0       	push   0xc0030c44
c001d7df:	e8 7a ae 00 00       	call   c002865e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d7e4:	83 c4 10             	add    esp,0x10
c001d7e7:	84 c0                	test   al,al
c001d7e9:	74 dc                	je     c001d7c7 <setupMultitasking(void (*)())+0x9>
c001d7eb:	83 ec 0c             	sub    esp,0xc
c001d7ee:	68 3f 07 00 00       	push   0x73f
c001d7f3:	e8 a4 1d ff ff       	call   c000f59c <malloc>
c001d7f8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d7ff:	89 c3                	mov    ebx,eax
c001d801:	6a 00                	push   0x0
c001d803:	68 0c b9 02 c0       	push   0xc002b90c
c001d808:	6a 01                	push   0x1
c001d80a:	50                   	push   eax
c001d80b:	e8 94 fc ff ff       	call   c001d4a4 <Process::Process(bool, char const*, Process*, char**)>
c001d810:	83 c4 14             	add    esp,0x14
c001d813:	89 1d 50 0c 03 c0    	mov    DWORD PTR ds:0xc0030c50,ebx
c001d819:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d81f:	e8 e1 2a ff ff       	call   c0010305 <setActiveTerminal(VgaText*)>
c001d824:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001d82c:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001d836:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d83c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d83f:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001d849:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001d84f:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001d855:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001d85f:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001d869:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001d873:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001d879:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001d883:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001d889:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001d893:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001d899:	58                   	pop    eax
c001d89a:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001d8a0:	5a                   	pop    edx
c001d8a1:	68 08 b9 02 c0       	push   0xc002b908
c001d8a6:	50                   	push   eax
c001d8a7:	e8 60 2f fe ff       	call   c000080c <strcpy>
c001d8ac:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001d8b3:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d8b7:	83 c4 14             	add    esp,0x14
c001d8ba:	5b                   	pop    ebx
c001d8bb:	5e                   	pop    esi
c001d8bc:	e9 93 2a fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001d8c1 <schedule()>:
c001d8c1:	a1 24 0c 03 c0       	mov    eax,ds:0xc0030c24
c001d8c6:	85 c0                	test   eax,eax
c001d8c8:	74 0b                	je     c001d8d5 <schedule()+0x14>
c001d8ca:	c7 05 20 0c 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0030c20,0x1
c001d8d4:	c3                   	ret    
c001d8d5:	53                   	push   ebx
c001d8d6:	83 ec 14             	sub    esp,0x14
c001d8d9:	68 44 0c 03 c0       	push   0xc0030c44
c001d8de:	e8 7b ad 00 00       	call   c002865e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d8e3:	83 c4 10             	add    esp,0x10
c001d8e6:	84 c0                	test   al,al
c001d8e8:	75 38                	jne    c001d922 <schedule()+0x61>
c001d8ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d8ef:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d8f2:	4a                   	dec    edx
c001d8f3:	74 32                	je     c001d927 <schedule()+0x66>
c001d8f5:	83 ec 0c             	sub    esp,0xc
c001d8f8:	68 44 0c 03 c0       	push   0xc0030c44
c001d8fd:	e8 78 ad 00 00       	call   c002867a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d902:	c7 04 24 44 0c 03 c0 	mov    DWORD PTR [esp],0xc0030c44
c001d909:	89 c3                	mov    ebx,eax
c001d90b:	e8 72 ad 00 00       	call   c0028682 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d910:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001d917:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d91a:	e8 9d f8 ff ff       	call   c001d1bc <switchToThread(ThreadControlBlock*)>
c001d91f:	83 c4 10             	add    esp,0x10
c001d922:	83 c4 08             	add    esp,0x8
c001d925:	5b                   	pop    ebx
c001d926:	c3                   	ret    
c001d927:	83 ec 08             	sub    esp,0x8
c001d92a:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001d931:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d937:	68 44 0c 03 c0       	push   0xc0030c44
c001d93c:	e8 ef ad 00 00       	call   c0028730 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d941:	83 c4 10             	add    esp,0x10
c001d944:	eb af                	jmp    c001d8f5 <schedule()+0x34>

c001d946 <Semaphore::tryAcquire()>:
c001d946:	53                   	push   ebx
c001d947:	83 ec 08             	sub    esp,0x8
c001d94a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d94e:	fa                   	cli    
c001d94f:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001d954:	8d 50 01             	lea    edx,[eax+0x1]
c001d957:	89 15 28 0c 03 c0    	mov    DWORD PTR ds:0xc0030c28,edx
c001d95d:	8b 15 24 0c 03 c0    	mov    edx,DWORD PTR ds:0xc0030c24
c001d963:	8d 5a 01             	lea    ebx,[edx+0x1]
c001d966:	89 1d 24 0c 03 c0    	mov    DWORD PTR ds:0xc0030c24,ebx
c001d96c:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001d96f:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001d971:	7c 2a                	jl     c001d99d <Semaphore::tryAcquire()+0x57>
c001d973:	89 15 24 0c 03 c0    	mov    DWORD PTR ds:0xc0030c24,edx
c001d979:	85 d2                	test   edx,edx
c001d97b:	75 0a                	jne    c001d987 <Semaphore::tryAcquire()+0x41>
c001d97d:	8b 15 20 0c 03 c0    	mov    edx,DWORD PTR ds:0xc0030c20
c001d983:	85 d2                	test   edx,edx
c001d985:	75 5b                	jne    c001d9e2 <Semaphore::tryAcquire()+0x9c>
c001d987:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001d98c:	85 c0                	test   eax,eax
c001d98e:	74 07                	je     c001d997 <Semaphore::tryAcquire()+0x51>
c001d990:	31 c0                	xor    eax,eax
c001d992:	83 c4 08             	add    esp,0x8
c001d995:	5b                   	pop    ebx
c001d996:	c3                   	ret    
c001d997:	fb                   	sti    
c001d998:	83 c4 08             	add    esp,0x8
c001d99b:	5b                   	pop    ebx
c001d99c:	c3                   	ret    
c001d99d:	43                   	inc    ebx
c001d99e:	89 15 24 0c 03 c0    	mov    DWORD PTR ds:0xc0030c24,edx
c001d9a4:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001d9a7:	85 d2                	test   edx,edx
c001d9a9:	75 1f                	jne    c001d9ca <Semaphore::tryAcquire()+0x84>
c001d9ab:	8b 0d 20 0c 03 c0    	mov    ecx,DWORD PTR ds:0xc0030c20
c001d9b1:	85 c9                	test   ecx,ecx
c001d9b3:	74 15                	je     c001d9ca <Semaphore::tryAcquire()+0x84>
c001d9b5:	c7 05 20 0c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030c20,0x0
c001d9bf:	e8 fd fe ff ff       	call   c001d8c1 <schedule()>
c001d9c4:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001d9c9:	48                   	dec    eax
c001d9ca:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001d9cf:	85 c0                	test   eax,eax
c001d9d1:	75 08                	jne    c001d9db <Semaphore::tryAcquire()+0x95>
c001d9d3:	fb                   	sti    
c001d9d4:	b0 01                	mov    al,0x1
c001d9d6:	83 c4 08             	add    esp,0x8
c001d9d9:	5b                   	pop    ebx
c001d9da:	c3                   	ret    
c001d9db:	b0 01                	mov    al,0x1
c001d9dd:	83 c4 08             	add    esp,0x8
c001d9e0:	5b                   	pop    ebx
c001d9e1:	c3                   	ret    
c001d9e2:	c7 05 20 0c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030c20,0x0
c001d9ec:	e8 d0 fe ff ff       	call   c001d8c1 <schedule()>
c001d9f1:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001d9f6:	48                   	dec    eax
c001d9f7:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001d9fc:	85 c0                	test   eax,eax
c001d9fe:	75 90                	jne    c001d990 <Semaphore::tryAcquire()+0x4a>
c001da00:	eb 95                	jmp    c001d997 <Semaphore::tryAcquire()+0x51>

c001da02 <Semaphore::assertLocked(char const*)>:
c001da02:	83 ec 0c             	sub    esp,0xc
c001da05:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001da09:	fa                   	cli    
c001da0a:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c001da10:	a1 24 0c 03 c0       	mov    eax,ds:0xc0030c24
c001da15:	8d 48 01             	lea    ecx,[eax+0x1]
c001da18:	89 0d 24 0c 03 c0    	mov    DWORD PTR ds:0xc0030c24,ecx
c001da1e:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001da20:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001da23:	7c 24                	jl     c001da49 <Semaphore::assertLocked(char const*)+0x47>
c001da25:	a3 24 0c 03 c0       	mov    ds:0xc0030c24,eax
c001da2a:	85 c0                	test   eax,eax
c001da2c:	75 09                	jne    c001da37 <Semaphore::assertLocked(char const*)+0x35>
c001da2e:	a1 20 0c 03 c0       	mov    eax,ds:0xc0030c20
c001da33:	85 c0                	test   eax,eax
c001da35:	75 29                	jne    c001da60 <Semaphore::assertLocked(char const*)+0x5e>
c001da37:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001da3c:	48                   	dec    eax
c001da3d:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001da42:	75 01                	jne    c001da45 <Semaphore::assertLocked(char const*)+0x43>
c001da44:	fb                   	sti    
c001da45:	83 c4 0c             	add    esp,0xc
c001da48:	c3                   	ret    
c001da49:	83 ec 0c             	sub    esp,0xc
c001da4c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001da50:	e8 e0 c2 ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c001da55:	a1 24 0c 03 c0       	mov    eax,ds:0xc0030c24
c001da5a:	83 c4 10             	add    esp,0x10
c001da5d:	48                   	dec    eax
c001da5e:	eb c5                	jmp    c001da25 <Semaphore::assertLocked(char const*)+0x23>
c001da60:	c7 05 20 0c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030c20,0x0
c001da6a:	e8 52 fe ff ff       	call   c001d8c1 <schedule()>
c001da6f:	eb c6                	jmp    c001da37 <Semaphore::assertLocked(char const*)+0x35>

c001da71 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001da71:	83 ec 0c             	sub    esp,0xc
c001da74:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da79:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001da7d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001da80:	e8 3c fe ff ff       	call   c001d8c1 <schedule()>
c001da85:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001da8a:	48                   	dec    eax
c001da8b:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001da90:	75 01                	jne    c001da93 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x22>
c001da92:	fb                   	sti    
c001da93:	83 c4 0c             	add    esp,0xc
c001da96:	c3                   	ret    

c001da97 <blockTask(TaskState)>:
c001da97:	83 ec 0c             	sub    esp,0xc
c001da9a:	fa                   	cli    
c001da9b:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c001daa1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001daa5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001daaa:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001daad:	e8 0f fe ff ff       	call   c001d8c1 <schedule()>
c001dab2:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001dab7:	48                   	dec    eax
c001dab8:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001dabd:	75 01                	jne    c001dac0 <blockTask(TaskState)+0x29>
c001dabf:	fb                   	sti    
c001dac0:	83 c4 0c             	add    esp,0xc
c001dac3:	c3                   	ret    

c001dac4 <waitTask(int, int*, int)>:
c001dac4:	83 ec 18             	sub    esp,0x18
c001dac7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dacc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dad0:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001dad3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dad7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dadc:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001dadf:	6a 07                	push   0x7
c001dae1:	e8 b1 ff ff ff       	call   c001da97 <blockTask(TaskState)>
c001dae6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001daeb:	83 c4 10             	add    esp,0x10
c001daee:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001daf1:	85 d2                	test   edx,edx
c001daf3:	74 0a                	je     c001daff <waitTask(int, int*, int)+0x3b>
c001daf5:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001daf8:	89 02                	mov    DWORD PTR [edx],eax
c001dafa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001daff:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001db02:	83 c4 0c             	add    esp,0xc
c001db05:	c3                   	ret    

c001db06 <nanoSleepUntil(unsigned long long)>:
c001db06:	83 ec 0c             	sub    esp,0xc
c001db09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db0d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001db11:	3b 05 70 dd 02 c0    	cmp    eax,DWORD PTR ds:0xc002dd70
c001db17:	89 d1                	mov    ecx,edx
c001db19:	1b 0d 74 dd 02 c0    	sbb    ecx,DWORD PTR ds:0xc002dd74
c001db1f:	73 04                	jae    c001db25 <nanoSleepUntil(unsigned long long)+0x1f>
c001db21:	83 c4 0c             	add    esp,0xc
c001db24:	c3                   	ret    
c001db25:	fa                   	cli    
c001db26:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c001db2c:	83 ec 08             	sub    esp,0x8
c001db2f:	ff 05 24 0c 03 c0    	inc    DWORD PTR ds:0xc0030c24
c001db35:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001db3b:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001db3e:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001db41:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001db47:	68 38 0c 03 c0       	push   0xc0030c38
c001db4c:	e8 df ab 00 00       	call   c0028730 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001db51:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001db58:	e8 3a ff ff ff       	call   c001da97 <blockTask(TaskState)>
c001db5d:	a1 24 0c 03 c0       	mov    eax,ds:0xc0030c24
c001db62:	83 c4 10             	add    esp,0x10
c001db65:	48                   	dec    eax
c001db66:	a3 24 0c 03 c0       	mov    ds:0xc0030c24,eax
c001db6b:	85 c0                	test   eax,eax
c001db6d:	75 09                	jne    c001db78 <nanoSleepUntil(unsigned long long)+0x72>
c001db6f:	a1 20 0c 03 c0       	mov    eax,ds:0xc0030c20
c001db74:	85 c0                	test   eax,eax
c001db76:	75 12                	jne    c001db8a <nanoSleepUntil(unsigned long long)+0x84>
c001db78:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001db7d:	48                   	dec    eax
c001db7e:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001db83:	75 9c                	jne    c001db21 <nanoSleepUntil(unsigned long long)+0x1b>
c001db85:	fb                   	sti    
c001db86:	83 c4 0c             	add    esp,0xc
c001db89:	c3                   	ret    
c001db8a:	c7 05 20 0c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030c20,0x0
c001db94:	e8 28 fd ff ff       	call   c001d8c1 <schedule()>
c001db99:	eb dd                	jmp    c001db78 <nanoSleepUntil(unsigned long long)+0x72>

c001db9b <nanoSleep(unsigned long long)>:
c001db9b:	a1 70 dd 02 c0       	mov    eax,ds:0xc002dd70
c001dba0:	8b 15 74 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dd74
c001dba6:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001dbaa:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001dbae:	e9 53 ff ff ff       	jmp    c001db06 <nanoSleepUntil(unsigned long long)>

c001dbb3 <sleep(unsigned long long)>:
c001dbb3:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001dbbb:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001dbc0:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001dbc4:	01 ca                	add    edx,ecx
c001dbc6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dbca:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001dbce:	eb cb                	jmp    c001db9b <nanoSleep(unsigned long long)>

c001dbd0 <Semaphore::acquire()>:
c001dbd0:	83 ec 0c             	sub    esp,0xc
c001dbd3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dbd7:	fa                   	cli    
c001dbd8:	a1 24 0c 03 c0       	mov    eax,ds:0xc0030c24
c001dbdd:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c001dbe3:	8d 48 01             	lea    ecx,[eax+0x1]
c001dbe6:	89 0d 24 0c 03 c0    	mov    DWORD PTR ds:0xc0030c24,ecx
c001dbec:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001dbef:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001dbf1:	7d 28                	jge    c001dc1b <Semaphore::acquire()+0x4b>
c001dbf3:	41                   	inc    ecx
c001dbf4:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001dbf7:	a3 24 0c 03 c0       	mov    ds:0xc0030c24,eax
c001dbfc:	85 c0                	test   eax,eax
c001dbfe:	75 09                	jne    c001dc09 <Semaphore::acquire()+0x39>
c001dc00:	a1 20 0c 03 c0       	mov    eax,ds:0xc0030c20
c001dc05:	85 c0                	test   eax,eax
c001dc07:	75 4e                	jne    c001dc57 <Semaphore::acquire()+0x87>
c001dc09:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001dc0e:	48                   	dec    eax
c001dc0f:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001dc14:	75 01                	jne    c001dc17 <Semaphore::acquire()+0x47>
c001dc16:	fb                   	sti    
c001dc17:	83 c4 0c             	add    esp,0xc
c001dc1a:	c3                   	ret    
c001dc1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc20:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001dc27:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001dc2a:	85 c9                	test   ecx,ecx
c001dc2c:	74 3a                	je     c001dc68 <Semaphore::acquire()+0x98>
c001dc2e:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001dc31:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001dc37:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001dc3a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc3f:	83 ec 0c             	sub    esp,0xc
c001dc42:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001dc45:	6a 05                	push   0x5
c001dc47:	e8 4b fe ff ff       	call   c001da97 <blockTask(TaskState)>
c001dc4c:	a1 24 0c 03 c0       	mov    eax,ds:0xc0030c24
c001dc51:	83 c4 10             	add    esp,0x10
c001dc54:	48                   	dec    eax
c001dc55:	eb a0                	jmp    c001dbf7 <Semaphore::acquire()+0x27>
c001dc57:	c7 05 20 0c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030c20,0x0
c001dc61:	e8 5b fc ff ff       	call   c001d8c1 <schedule()>
c001dc66:	eb a1                	jmp    c001dc09 <Semaphore::acquire()+0x39>
c001dc68:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc6d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001dc70:	eb c8                	jmp    c001dc3a <Semaphore::acquire()+0x6a>

c001dc72 <taskReturned>:
c001dc72:	83 ec 18             	sub    esp,0x18
c001dc75:	68 88 b9 02 c0       	push   0xc002b988
c001dc7a:	e8 b6 c0 ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c001dc7f:	83 c4 10             	add    esp,0x10
c001dc82:	83 ec 0c             	sub    esp,0xc
c001dc85:	6a 02                	push   0x2
c001dc87:	e8 0b fe ff ff       	call   c001da97 <blockTask(TaskState)>
c001dc8c:	fa                   	cli    
c001dc8d:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c001dc93:	e8 29 fc ff ff       	call   c001d8c1 <schedule()>
c001dc98:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001dc9d:	83 c4 10             	add    esp,0x10
c001dca0:	48                   	dec    eax
c001dca1:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001dca6:	85 c0                	test   eax,eax
c001dca8:	75 d8                	jne    c001dc82 <taskReturned+0x10>
c001dcaa:	fb                   	sti    
c001dcab:	eb d5                	jmp    c001dc82 <taskReturned+0x10>

c001dcad <Thr::processFromPID(int)>:
c001dcad:	57                   	push   edi
c001dcae:	56                   	push   esi
c001dcaf:	53                   	push   ebx
c001dcb0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dcb4:	fa                   	cli    
c001dcb5:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c001dcbb:	83 ec 0c             	sub    esp,0xc
c001dcbe:	68 44 0c 03 c0       	push   0xc0030c44
c001dcc3:	e8 b2 a9 00 00       	call   c002867a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dcc8:	83 c4 10             	add    esp,0x10
c001dccb:	89 c7                	mov    edi,eax
c001dccd:	eb 14                	jmp    c001dce3 <Thr::processFromPID(int)+0x36>
c001dccf:	83 ec 0c             	sub    esp,0xc
c001dcd2:	68 44 0c 03 c0       	push   0xc0030c44
c001dcd7:	e8 9e a9 00 00       	call   c002867a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dcdc:	83 c4 10             	add    esp,0x10
c001dcdf:	39 f8                	cmp    eax,edi
c001dce1:	74 49                	je     c001dd2c <Thr::processFromPID(int)+0x7f>
c001dce3:	83 ec 0c             	sub    esp,0xc
c001dce6:	68 44 0c 03 c0       	push   0xc0030c44
c001dceb:	e8 8a a9 00 00       	call   c002867a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dcf0:	c7 04 24 44 0c 03 c0 	mov    DWORD PTR [esp],0xc0030c44
c001dcf7:	89 c3                	mov    ebx,eax
c001dcf9:	e8 84 a9 00 00       	call   c0028682 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dcfe:	58                   	pop    eax
c001dcff:	5a                   	pop    edx
c001dd00:	53                   	push   ebx
c001dd01:	68 44 0c 03 c0       	push   0xc0030c44
c001dd06:	e8 25 aa 00 00       	call   c0028730 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dd0b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dd0e:	83 c4 10             	add    esp,0x10
c001dd11:	39 30                	cmp    DWORD PTR [eax],esi
c001dd13:	75 ba                	jne    c001dccf <Thr::processFromPID(int)+0x22>
c001dd15:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001dd1a:	48                   	dec    eax
c001dd1b:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001dd20:	74 07                	je     c001dd29 <Thr::processFromPID(int)+0x7c>
c001dd22:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dd25:	5b                   	pop    ebx
c001dd26:	5e                   	pop    esi
c001dd27:	5f                   	pop    edi
c001dd28:	c3                   	ret    
c001dd29:	fb                   	sti    
c001dd2a:	eb f6                	jmp    c001dd22 <Thr::processFromPID(int)+0x75>
c001dd2c:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001dd31:	48                   	dec    eax
c001dd32:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001dd37:	75 05                	jne    c001dd3e <Thr::processFromPID(int)+0x91>
c001dd39:	fb                   	sti    
c001dd3a:	5b                   	pop    ebx
c001dd3b:	5e                   	pop    esi
c001dd3c:	5f                   	pop    edi
c001dd3d:	c3                   	ret    
c001dd3e:	5b                   	pop    ebx
c001dd3f:	31 c0                	xor    eax,eax
c001dd41:	5e                   	pop    esi
c001dd42:	5f                   	pop    edi
c001dd43:	c3                   	ret    

c001dd44 <unblockTask(ThreadControlBlock*)>:
c001dd44:	53                   	push   ebx
c001dd45:	83 ec 08             	sub    esp,0x8
c001dd48:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dd4c:	fa                   	cli    
c001dd4d:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c001dd53:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001dd56:	85 c0                	test   eax,eax
c001dd58:	74 5a                	je     c001ddb4 <unblockTask(ThreadControlBlock*)+0x70>
c001dd5a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001dd5d:	48                   	dec    eax
c001dd5e:	74 31                	je     c001dd91 <unblockTask(ThreadControlBlock*)+0x4d>
c001dd60:	83 ec 0c             	sub    esp,0xc
c001dd63:	68 44 0c 03 c0       	push   0xc0030c44
c001dd68:	e8 0d a9 00 00       	call   c002867a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dd6d:	83 c4 10             	add    esp,0x10
c001dd70:	85 c0                	test   eax,eax
c001dd72:	75 17                	jne    c001dd8b <unblockTask(ThreadControlBlock*)+0x47>
c001dd74:	eb 50                	jmp    c001ddc6 <unblockTask(ThreadControlBlock*)+0x82>
c001dd76:	83 ec 08             	sub    esp,0x8
c001dd79:	50                   	push   eax
c001dd7a:	68 44 0c 03 c0       	push   0xc0030c44
c001dd7f:	e8 7e ac 00 00       	call   c0028a02 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001dd84:	83 c4 10             	add    esp,0x10
c001dd87:	85 c0                	test   eax,eax
c001dd89:	74 3b                	je     c001ddc6 <unblockTask(ThreadControlBlock*)+0x82>
c001dd8b:	39 c3                	cmp    ebx,eax
c001dd8d:	75 e7                	jne    c001dd76 <unblockTask(ThreadControlBlock*)+0x32>
c001dd8f:	eb 10                	jmp    c001dda1 <unblockTask(ThreadControlBlock*)+0x5d>
c001dd91:	83 ec 0c             	sub    esp,0xc
c001dd94:	68 2a b9 02 c0       	push   0xc002b92a
c001dd99:	e8 2b 48 ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c001dd9e:	83 c4 10             	add    esp,0x10
c001dda1:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001dda6:	48                   	dec    eax
c001dda7:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001ddac:	75 01                	jne    c001ddaf <unblockTask(ThreadControlBlock*)+0x6b>
c001ddae:	fb                   	sti    
c001ddaf:	83 c4 08             	add    esp,0x8
c001ddb2:	5b                   	pop    ebx
c001ddb3:	c3                   	ret    
c001ddb4:	83 ec 0c             	sub    esp,0xc
c001ddb7:	68 13 b9 02 c0       	push   0xc002b913
c001ddbc:	e8 08 48 ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c001ddc1:	83 c4 10             	add    esp,0x10
c001ddc4:	eb db                	jmp    c001dda1 <unblockTask(ThreadControlBlock*)+0x5d>
c001ddc6:	83 ec 08             	sub    esp,0x8
c001ddc9:	53                   	push   ebx
c001ddca:	68 44 0c 03 c0       	push   0xc0030c44
c001ddcf:	e8 5c a9 00 00       	call   c0028730 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ddd4:	83 c4 10             	add    esp,0x10
c001ddd7:	eb c8                	jmp    c001dda1 <unblockTask(ThreadControlBlock*)+0x5d>

c001ddd9 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001ddd9:	55                   	push   ebp
c001ddda:	57                   	push   edi
c001dddb:	56                   	push   esi
c001dddc:	53                   	push   ebx
c001dddd:	83 ec 1c             	sub    esp,0x1c
c001dde0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dde4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dde7:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001dded:	85 ff                	test   edi,edi
c001ddef:	7e 20                	jle    c001de11 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001ddf1:	31 f6                	xor    esi,esi
c001ddf3:	83 ec 0c             	sub    esp,0xc
c001ddf6:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001ddfd:	46                   	inc    esi
c001ddfe:	e8 a9 17 ff ff       	call   c000f5ac <free>
c001de03:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001de06:	83 c4 10             	add    esp,0x10
c001de09:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001de0f:	7f e2                	jg     c001ddf3 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001de11:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001de1b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001de20:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001de23:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001de26:	d3 c0                	rol    eax,cl
c001de28:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001de2f:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001de32:	89 f7                	mov    edi,esi
c001de34:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001de3c:	0f 85 64 01 00 00    	jne    c001dfa6 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001de42:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001de48:	85 ed                	test   ebp,ebp
c001de4a:	74 1b                	je     c001de67 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001de4c:	83 ec 0c             	sub    esp,0xc
c001de4f:	55                   	push   ebp
c001de50:	e8 85 bc ff ff       	call   c0019ada <EnvVarContainer::~EnvVarContainer()>
c001de55:	59                   	pop    ecx
c001de56:	5e                   	pop    esi
c001de57:	6a 0c                	push   0xc
c001de59:	55                   	push   ebp
c001de5a:	e8 92 46 ff ff       	call   c00124f1 <operator delete(void*, unsigned long)>
c001de5f:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001de62:	83 c4 10             	add    esp,0x10
c001de65:	89 f7                	mov    edi,esi
c001de67:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001de6d:	85 c0                	test   eax,eax
c001de6f:	0f 84 aa 00 00 00    	je     c001df1f <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001de75:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001de78:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001de7c:	31 c9                	xor    ecx,ecx
c001de7e:	eb 10                	jmp    c001de90 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001de80:	41                   	inc    ecx
c001de81:	83 f9 10             	cmp    ecx,0x10
c001de84:	0f 84 95 00 00 00    	je     c001df1f <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001de8a:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001de90:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001de97:	d3 fa                	sar    edx,cl
c001de99:	83 e2 01             	and    edx,0x1
c001de9c:	74 e2                	je     c001de80 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001de9e:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001dea1:	01 ca                	add    edx,ecx
c001dea3:	89 d5                	mov    ebp,edx
c001dea5:	c1 e5 05             	shl    ebp,0x5
c001dea8:	01 ea                	add    edx,ebp
c001deaa:	01 d0                	add    eax,edx
c001deac:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001deb2:	83 fd 07             	cmp    ebp,0x7
c001deb5:	75 c9                	jne    c001de80 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001deb7:	05 40 02 00 00       	add    eax,0x240
c001debc:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001debf:	83 fd ff             	cmp    ebp,0xffffffff
c001dec2:	0f 8c e6 00 00 00    	jl     c001dfae <cleanupTerminatedTask(ThreadControlBlock*)+0x1d5>
c001dec8:	0f 84 97 01 00 00    	je     c001e065 <cleanupTerminatedTask(ThreadControlBlock*)+0x28c>
c001dece:	85 ed                	test   ebp,ebp
c001ded0:	0f 84 7e 01 00 00    	je     c001e054 <cleanupTerminatedTask(ThreadControlBlock*)+0x27b>
c001ded6:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001ded8:	75 a6                	jne    c001de80 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001deda:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001dee0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dee4:	01 d0                	add    eax,edx
c001dee6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001deea:	83 ec 0c             	sub    esp,0xc
c001deed:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001def3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001def6:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001defc:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001df03:	50                   	push   eax
c001df04:	e8 3b fe ff ff       	call   c001dd44 <unblockTask(ThreadControlBlock*)>
c001df09:	83 c4 10             	add    esp,0x10
c001df0c:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001df0f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001df13:	89 f7                	mov    edi,esi
c001df15:	41                   	inc    ecx
c001df16:	83 f9 10             	cmp    ecx,0x10
c001df19:	0f 85 6b ff ff ff    	jne    c001de8a <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001df1f:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001df25:	85 c0                	test   eax,eax
c001df27:	74 5d                	je     c001df86 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001df29:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001df2f:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001df35:	74 4f                	je     c001df86 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001df37:	83 ec 0c             	sub    esp,0xc
c001df3a:	68 44 0c 03 c0       	push   0xc0030c44
c001df3f:	e8 36 a7 00 00       	call   c002867a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001df44:	c7 04 24 44 0c 03 c0 	mov    DWORD PTR [esp],0xc0030c44
c001df4b:	89 c7                	mov    edi,eax
c001df4d:	e8 0c a7 00 00       	call   c002865e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001df52:	83 c4 10             	add    esp,0x10
c001df55:	84 c0                	test   al,al
c001df57:	0f 84 c2 00 00 00    	je     c001e01f <cleanupTerminatedTask(ThreadControlBlock*)+0x246>
c001df5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001df60:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001df66:	85 d2                	test   edx,edx
c001df68:	74 0f                	je     c001df79 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001df6a:	83 ec 0c             	sub    esp,0xc
c001df6d:	8b 02                	mov    eax,DWORD PTR [edx]
c001df6f:	52                   	push   edx
c001df70:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001df73:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001df76:	83 c4 10             	add    esp,0x10
c001df79:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001df83:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001df86:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001df8c:	85 db                	test   ebx,ebx
c001df8e:	74 16                	je     c001dfa6 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001df90:	83 ec 0c             	sub    esp,0xc
c001df93:	53                   	push   ebx
c001df94:	e8 77 38 ff ff       	call   c0011810 <VAS::~VAS()>
c001df99:	58                   	pop    eax
c001df9a:	5a                   	pop    edx
c001df9b:	6a 14                	push   0x14
c001df9d:	53                   	push   ebx
c001df9e:	e8 4e 45 ff ff       	call   c00124f1 <operator delete(void*, unsigned long)>
c001dfa3:	83 c4 10             	add    esp,0x10
c001dfa6:	83 c4 1c             	add    esp,0x1c
c001dfa9:	5b                   	pop    ebx
c001dfaa:	5e                   	pop    esi
c001dfab:	5f                   	pop    edi
c001dfac:	5d                   	pop    ebp
c001dfad:	c3                   	ret    
c001dfae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dfb2:	83 ec 0c             	sub    esp,0xc
c001dfb5:	68 bc b9 02 c0       	push   0xc002b9bc
c001dfba:	e8 76 bd ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c001dfbf:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001dfc2:	83 c4 10             	add    esp,0x10
c001dfc5:	89 f7                	mov    edi,esi
c001dfc7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dfcb:	e9 b0 fe ff ff       	jmp    c001de80 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001dfd0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dfd6:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001dfdc:	75 1c                	jne    c001dffa <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001dfde:	83 ec 0c             	sub    esp,0xc
c001dfe1:	68 24 ba 02 c0       	push   0xc002ba24
c001dfe6:	e8 de 45 ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c001dfeb:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001dff2:	e8 a0 fa ff ff       	call   c001da97 <blockTask(TaskState)>
c001dff7:	83 c4 10             	add    esp,0x10
c001dffa:	83 ec 08             	sub    esp,0x8
c001dffd:	56                   	push   esi
c001dffe:	68 44 0c 03 c0       	push   0xc0030c44
c001e003:	e8 28 a7 00 00       	call   c0028730 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e008:	c7 04 24 44 0c 03 c0 	mov    DWORD PTR [esp],0xc0030c44
c001e00f:	e8 66 a6 00 00       	call   c002867a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e014:	83 c4 10             	add    esp,0x10
c001e017:	39 f8                	cmp    eax,edi
c001e019:	0f 84 3e ff ff ff    	je     c001df5d <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e01f:	83 ec 0c             	sub    esp,0xc
c001e022:	68 44 0c 03 c0       	push   0xc0030c44
c001e027:	e8 4e a6 00 00       	call   c002867a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e02c:	c7 04 24 44 0c 03 c0 	mov    DWORD PTR [esp],0xc0030c44
c001e033:	89 c6                	mov    esi,eax
c001e035:	e8 48 a6 00 00       	call   c0028682 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e03a:	83 c4 10             	add    esp,0x10
c001e03d:	39 f3                	cmp    ebx,esi
c001e03f:	74 b9                	je     c001dffa <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e041:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e044:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e047:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e04d:	75 ab                	jne    c001dffa <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e04f:	e9 7c ff ff ff       	jmp    c001dfd0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e054:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e058:	83 ec 0c             	sub    esp,0xc
c001e05b:	68 f0 b9 02 c0       	push   0xc002b9f0
c001e060:	e9 55 ff ff ff       	jmp    c001dfba <cleanupTerminatedTask(ThreadControlBlock*)+0x1e1>
c001e065:	8b 36                	mov    esi,DWORD PTR [esi]
c001e067:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e06b:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e06e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e071:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e077:	01 d7                	add    edi,edx
c001e079:	89 f8                	mov    eax,edi
c001e07b:	e9 66 fe ff ff       	jmp    c001dee6 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e080 <cleanerTaskFunction(void*)>:
c001e080:	53                   	push   ebx
c001e081:	83 ec 08             	sub    esp,0x8
c001e084:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001e089:	48                   	dec    eax
c001e08a:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001e08f:	75 01                	jne    c001e092 <cleanerTaskFunction(void*)+0x12>
c001e091:	fb                   	sti    
c001e092:	fa                   	cli    
c001e093:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001e098:	80 3d 0c 0c 03 c0 00 	cmp    BYTE PTR ds:0xc0030c0c,0x0
c001e09f:	8d 50 01             	lea    edx,[eax+0x1]
c001e0a2:	89 15 28 0c 03 c0    	mov    DWORD PTR ds:0xc0030c28,edx
c001e0a8:	0f 84 a1 00 00 00    	je     c001e14f <cleanerTaskFunction(void*)+0xcf>
c001e0ae:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001e0b3:	85 c0                	test   eax,eax
c001e0b5:	75 01                	jne    c001e0b8 <cleanerTaskFunction(void*)+0x38>
c001e0b7:	fb                   	sti    
c001e0b8:	c6 05 0c 0c 03 c0 00 	mov    BYTE PTR ds:0xc0030c0c,0x0
c001e0bf:	fa                   	cli    
c001e0c0:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c001e0c6:	ff 05 24 0c 03 c0    	inc    DWORD PTR ds:0xc0030c24
c001e0cc:	fa                   	cli    
c001e0cd:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c001e0d3:	eb 26                	jmp    c001e0fb <cleanerTaskFunction(void*)+0x7b>
c001e0d5:	83 ec 0c             	sub    esp,0xc
c001e0d8:	68 2c 0c 03 c0       	push   0xc0030c2c
c001e0dd:	e8 98 a5 00 00       	call   c002867a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e0e2:	c7 04 24 2c 0c 03 c0 	mov    DWORD PTR [esp],0xc0030c2c
c001e0e9:	89 c3                	mov    ebx,eax
c001e0eb:	e8 92 a5 00 00       	call   c0028682 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e0f0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e0f3:	e8 e1 fc ff ff       	call   c001ddd9 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e0f8:	83 c4 10             	add    esp,0x10
c001e0fb:	83 ec 0c             	sub    esp,0xc
c001e0fe:	68 2c 0c 03 c0       	push   0xc0030c2c
c001e103:	e8 56 a5 00 00       	call   c002865e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e108:	83 c4 10             	add    esp,0x10
c001e10b:	84 c0                	test   al,al
c001e10d:	74 c6                	je     c001e0d5 <cleanerTaskFunction(void*)+0x55>
c001e10f:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001e114:	48                   	dec    eax
c001e115:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001e11a:	75 01                	jne    c001e11d <cleanerTaskFunction(void*)+0x9d>
c001e11c:	fb                   	sti    
c001e11d:	a1 24 0c 03 c0       	mov    eax,ds:0xc0030c24
c001e122:	48                   	dec    eax
c001e123:	a3 24 0c 03 c0       	mov    ds:0xc0030c24,eax
c001e128:	0f 85 56 ff ff ff    	jne    c001e084 <cleanerTaskFunction(void*)+0x4>
c001e12e:	a1 20 0c 03 c0       	mov    eax,ds:0xc0030c20
c001e133:	85 c0                	test   eax,eax
c001e135:	0f 84 49 ff ff ff    	je     c001e084 <cleanerTaskFunction(void*)+0x4>
c001e13b:	c7 05 20 0c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030c20,0x0
c001e145:	e8 77 f7 ff ff       	call   c001d8c1 <schedule()>
c001e14a:	e9 35 ff ff ff       	jmp    c001e084 <cleanerTaskFunction(void*)+0x4>
c001e14f:	83 ec 0c             	sub    esp,0xc
c001e152:	6a 02                	push   0x2
c001e154:	e8 18 f9 ff ff       	call   c001da71 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e159:	83 c4 10             	add    esp,0x10
c001e15c:	e9 57 ff ff ff       	jmp    c001e0b8 <cleanerTaskFunction(void*)+0x38>

c001e161 <terminateTask(int)>:
c001e161:	83 ec 14             	sub    esp,0x14
c001e164:	fa                   	cli    
c001e165:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c001e16b:	ff 05 24 0c 03 c0    	inc    DWORD PTR ds:0xc0030c24
c001e171:	fa                   	cli    
c001e172:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c001e178:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e17c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e181:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e184:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e189:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e18c:	50                   	push   eax
c001e18d:	68 2c 0c 03 c0       	push   0xc0030c2c
c001e192:	e8 99 a5 00 00       	call   c0028730 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e197:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e19c:	83 c4 10             	add    esp,0x10
c001e19f:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e1a6:	a1 08 0c 03 c0       	mov    eax,ds:0xc0030c08
c001e1ab:	85 c0                	test   eax,eax
c001e1ad:	74 53                	je     c001e202 <terminateTask(int)+0xa1>
c001e1af:	83 ec 0c             	sub    esp,0xc
c001e1b2:	c6 05 0c 0c 03 c0 01 	mov    BYTE PTR ds:0xc0030c0c,0x1
c001e1b9:	50                   	push   eax
c001e1ba:	e8 85 fb ff ff       	call   c001dd44 <unblockTask(ThreadControlBlock*)>
c001e1bf:	83 c4 10             	add    esp,0x10
c001e1c2:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001e1c7:	48                   	dec    eax
c001e1c8:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001e1cd:	75 01                	jne    c001e1d0 <terminateTask(int)+0x6f>
c001e1cf:	fb                   	sti    
c001e1d0:	a1 24 0c 03 c0       	mov    eax,ds:0xc0030c24
c001e1d5:	48                   	dec    eax
c001e1d6:	a3 24 0c 03 c0       	mov    ds:0xc0030c24,eax
c001e1db:	75 09                	jne    c001e1e6 <terminateTask(int)+0x85>
c001e1dd:	83 3d 20 0c 03 c0 00 	cmp    DWORD PTR ds:0xc0030c20,0x0
c001e1e4:	75 2e                	jne    c001e214 <terminateTask(int)+0xb3>
c001e1e6:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001e1eb:	48                   	dec    eax
c001e1ec:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001e1f1:	75 01                	jne    c001e1f4 <terminateTask(int)+0x93>
c001e1f3:	fb                   	sti    
c001e1f4:	fa                   	cli    
c001e1f5:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c001e1fb:	e8 c1 f6 ff ff       	call   c001d8c1 <schedule()>
c001e200:	eb e4                	jmp    c001e1e6 <terminateTask(int)+0x85>
c001e202:	83 ec 0c             	sub    esp,0xc
c001e205:	68 41 b9 02 c0       	push   0xc002b941
c001e20a:	e8 ba 43 ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c001e20f:	83 c4 10             	add    esp,0x10
c001e212:	eb ae                	jmp    c001e1c2 <terminateTask(int)+0x61>
c001e214:	c7 05 20 0c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030c20,0x0
c001e21e:	eb db                	jmp    c001e1fb <terminateTask(int)+0x9a>

c001e220 <Thr::terminateFromIRQ(int)>:
c001e220:	83 ec 18             	sub    esp,0x18
c001e223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e227:	e8 35 ff ff ff       	call   c001e161 <terminateTask(int)>

c001e22c <Semaphore::release()>:
c001e22c:	83 ec 0c             	sub    esp,0xc
c001e22f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e233:	fa                   	cli    
c001e234:	a1 24 0c 03 c0       	mov    eax,ds:0xc0030c24
c001e239:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c001e23f:	8d 48 01             	lea    ecx,[eax+0x1]
c001e242:	89 0d 24 0c 03 c0    	mov    DWORD PTR ds:0xc0030c24,ecx
c001e248:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e24b:	85 c9                	test   ecx,ecx
c001e24d:	74 3c                	je     c001e28b <Semaphore::release()+0x5f>
c001e24f:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001e252:	83 ec 0c             	sub    esp,0xc
c001e255:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e258:	51                   	push   ecx
c001e259:	e8 e6 fa ff ff       	call   c001dd44 <unblockTask(ThreadControlBlock*)>
c001e25e:	a1 24 0c 03 c0       	mov    eax,ds:0xc0030c24
c001e263:	83 c4 10             	add    esp,0x10
c001e266:	48                   	dec    eax
c001e267:	a3 24 0c 03 c0       	mov    ds:0xc0030c24,eax
c001e26c:	85 c0                	test   eax,eax
c001e26e:	75 09                	jne    c001e279 <Semaphore::release()+0x4d>
c001e270:	a1 20 0c 03 c0       	mov    eax,ds:0xc0030c20
c001e275:	85 c0                	test   eax,eax
c001e277:	75 17                	jne    c001e290 <Semaphore::release()+0x64>
c001e279:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001e27e:	48                   	dec    eax
c001e27f:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001e284:	75 01                	jne    c001e287 <Semaphore::release()+0x5b>
c001e286:	fb                   	sti    
c001e287:	83 c4 0c             	add    esp,0xc
c001e28a:	c3                   	ret    
c001e28b:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001e28e:	eb d7                	jmp    c001e267 <Semaphore::release()+0x3b>
c001e290:	c7 05 20 0c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030c20,0x0
c001e29a:	e8 22 f6 ff ff       	call   c001d8c1 <schedule()>
c001e29f:	eb d8                	jmp    c001e279 <Semaphore::release()+0x4d>

c001e2a1 <__static_initialization_and_destruction_0(int, int)>:
c001e2a1:	83 ec 0c             	sub    esp,0xc
c001e2a4:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e2a9:	0f 85 88 00 00 00    	jne    c001e337 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e2af:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e2b7:	75 7e                	jne    c001e337 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e2b9:	83 ec 0c             	sub    esp,0xc
c001e2bc:	68 44 0c 03 c0       	push   0xc0030c44
c001e2c1:	e8 fa a6 00 00       	call   c00289c0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e2c6:	83 c4 10             	add    esp,0x10
c001e2c9:	83 ec 04             	sub    esp,0x4
c001e2cc:	68 d8 c4 02 c0       	push   0xc002c4d8
c001e2d1:	68 44 0c 03 c0       	push   0xc0030c44
c001e2d6:	68 74 89 02 c0       	push   0xc0028974
c001e2db:	e8 8b 41 ff ff       	call   c001246b <__cxa_atexit>
c001e2e0:	83 c4 10             	add    esp,0x10
c001e2e3:	83 ec 0c             	sub    esp,0xc
c001e2e6:	68 38 0c 03 c0       	push   0xc0030c38
c001e2eb:	e8 d0 a6 00 00       	call   c00289c0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e2f0:	83 c4 10             	add    esp,0x10
c001e2f3:	83 ec 04             	sub    esp,0x4
c001e2f6:	68 d8 c4 02 c0       	push   0xc002c4d8
c001e2fb:	68 38 0c 03 c0       	push   0xc0030c38
c001e300:	68 74 89 02 c0       	push   0xc0028974
c001e305:	e8 61 41 ff ff       	call   c001246b <__cxa_atexit>
c001e30a:	83 c4 10             	add    esp,0x10
c001e30d:	83 ec 0c             	sub    esp,0xc
c001e310:	68 2c 0c 03 c0       	push   0xc0030c2c
c001e315:	e8 a6 a6 00 00       	call   c00289c0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e31a:	83 c4 10             	add    esp,0x10
c001e31d:	83 ec 04             	sub    esp,0x4
c001e320:	68 d8 c4 02 c0       	push   0xc002c4d8
c001e325:	68 2c 0c 03 c0       	push   0xc0030c2c
c001e32a:	68 74 89 02 c0       	push   0xc0028974
c001e32f:	e8 37 41 ff ff       	call   c001246b <__cxa_atexit>
c001e334:	83 c4 10             	add    esp,0x10
c001e337:	90                   	nop
c001e338:	83 c4 0c             	add    esp,0xc
c001e33b:	c3                   	ret    

c001e33c <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e33c:	83 ec 0c             	sub    esp,0xc
c001e33f:	83 ec 08             	sub    esp,0x8
c001e342:	68 ff ff 00 00       	push   0xffff
c001e347:	6a 01                	push   0x1
c001e349:	e8 53 ff ff ff       	call   c001e2a1 <__static_initialization_and_destruction_0(int, int)>
c001e34e:	83 c4 10             	add    esp,0x10
c001e351:	83 c4 0c             	add    esp,0xc
c001e354:	c3                   	ret    

c001e355 <Vm::inbv(unsigned short)>:
c001e355:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e359:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e35e:	75 06                	jne    c001e366 <Vm::inbv(unsigned short)+0x11>
c001e360:	a0 8c 0c 03 c0       	mov    al,ds:0xc0030c8c
c001e365:	c3                   	ret    
c001e366:	ec                   	in     al,dx
c001e367:	c3                   	ret    

c001e368 <Vm::outbv(unsigned short, unsigned char)>:
c001e368:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e36c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e370:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e375:	75 25                	jne    c001e39c <Vm::outbv(unsigned short, unsigned char)+0x34>
c001e377:	8b 0d 8c 0c 03 c0    	mov    ecx,DWORD PTR ds:0xc0030c8c
c001e37d:	8d 51 01             	lea    edx,[ecx+0x1]
c001e380:	88 81 a0 0c 03 c0    	mov    BYTE PTR [ecx-0x3ffcf360],al
c001e386:	89 15 8c 0c 03 c0    	mov    DWORD PTR ds:0xc0030c8c,edx
c001e38c:	83 fa 20             	cmp    edx,0x20
c001e38f:	75 0c                	jne    c001e39d <Vm::outbv(unsigned short, unsigned char)+0x35>
c001e391:	c7 05 8c 0c 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0030c8c,0x1f
c001e39b:	c3                   	ret    
c001e39c:	ee                   	out    dx,al
c001e39d:	c3                   	ret    

c001e39e <Vm::realToLinear(unsigned short, unsigned short)>:
c001e39e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e3a3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e3a8:	c1 e0 04             	shl    eax,0x4
c001e3ab:	01 d0                	add    eax,edx
c001e3ad:	c3                   	ret    

c001e3ae <Vm::getSegment(unsigned int)>:
c001e3ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e3b2:	c1 e8 10             	shr    eax,0x10
c001e3b5:	c3                   	ret    

c001e3b6 <Vm::getOffset(unsigned int)>:
c001e3b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e3ba:	c3                   	ret    

c001e3bb <Vm::mainloop2()>:
c001e3bb:	83 ec 18             	sub    esp,0x18
c001e3be:	fa                   	cli    
c001e3bf:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c001e3c5:	6a 02                	push   0x2
c001e3c7:	c6 05 85 0c 03 c0 01 	mov    BYTE PTR ds:0xc0030c85,0x1
c001e3ce:	e8 9e f6 ff ff       	call   c001da71 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e3d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e3d8:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e3dc:	52                   	push   edx
c001e3dd:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e3e1:	52                   	push   edx
c001e3e2:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e3e6:	52                   	push   edx
c001e3e7:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e3eb:	50                   	push   eax
c001e3ec:	e8 09 1f fe ff       	call   c00002fa <goToVM86>
c001e3f1:	83 c4 2c             	add    esp,0x2c
c001e3f4:	c3                   	ret    

c001e3f5 <Vm::mainVm8086Loop(void*)>:
c001e3f5:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001e3fa:	48                   	dec    eax
c001e3fb:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001e400:	75 01                	jne    c001e403 <Vm::mainVm8086Loop(void*)+0xe>
c001e402:	fb                   	sti    
c001e403:	eb b6                	jmp    c001e3bb <Vm::mainloop2()>

c001e405 <Vm::mainloop3(unsigned long)>:
c001e405:	83 ec 18             	sub    esp,0x18
c001e408:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e40c:	fa                   	cli    
c001e40d:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c001e413:	6a 02                	push   0x2
c001e415:	c6 05 84 0c 03 c0 01 	mov    BYTE PTR ds:0xc0030c84,0x1
c001e41c:	a3 80 0c 03 c0       	mov    ds:0xc0030c80,eax
c001e421:	e8 4b f6 ff ff       	call   c001da71 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e426:	83 c4 1c             	add    esp,0x1c
c001e429:	eb 90                	jmp    c001e3bb <Vm::mainloop2()>

c001e42b <Vm::initialise8086()>:
c001e42b:	83 ec 0c             	sub    esp,0xc
c001e42e:	68 80 00 00 00       	push   0x80
c001e433:	6a 00                	push   0x0
c001e435:	68 f5 e3 01 c0       	push   0xc001e3f5
c001e43a:	ff 35 50 0c 03 c0    	push   DWORD PTR ds:0xc0030c50
c001e440:	e8 57 f2 ff ff       	call   c001d69c <Process::createThread(void (*)(void*), void*, int)>
c001e445:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001e44c:	a3 88 0c 03 c0       	mov    ds:0xc0030c88,eax
c001e451:	68 00 01 00 00       	push   0x100
c001e456:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c001e45b:	6a 00                	push   0x0
c001e45d:	6a 00                	push   0x0
c001e45f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001e465:	e8 18 38 ff ff       	call   c0011c82 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e46a:	83 c4 2c             	add    esp,0x2c
c001e46d:	c3                   	ret    

c001e46e <Vm::finish8086()>:
c001e46e:	53                   	push   ebx
c001e46f:	83 ec 08             	sub    esp,0x8
c001e472:	fa                   	cli    
c001e473:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c001e479:	80 3d 84 0c 03 c0 00 	cmp    BYTE PTR ds:0xc0030c84,0x0
c001e480:	75 15                	jne    c001e497 <Vm::finish8086()+0x29>
c001e482:	e8 3a f4 ff ff       	call   c001d8c1 <schedule()>
c001e487:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001e48c:	48                   	dec    eax
c001e48d:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001e492:	75 de                	jne    c001e472 <Vm::finish8086()+0x4>
c001e494:	fb                   	sti    
c001e495:	eb db                	jmp    c001e472 <Vm::finish8086()+0x4>
c001e497:	83 ec 0c             	sub    esp,0xc
c001e49a:	8b 1d 80 0c 03 c0    	mov    ebx,DWORD PTR ds:0xc0030c80
c001e4a0:	ff 35 88 0c 03 c0    	push   DWORD PTR ds:0xc0030c88
c001e4a6:	c6 05 84 0c 03 c0 00 	mov    BYTE PTR ds:0xc0030c84,0x0
c001e4ad:	e8 92 f8 ff ff       	call   c001dd44 <unblockTask(ThreadControlBlock*)>
c001e4b2:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001e4b7:	83 c4 10             	add    esp,0x10
c001e4ba:	8d 50 ff             	lea    edx,[eax-0x1]
c001e4bd:	89 15 28 0c 03 c0    	mov    DWORD PTR ds:0xc0030c28,edx
c001e4c3:	85 d2                	test   edx,edx
c001e4c5:	75 01                	jne    c001e4c8 <Vm::finish8086()+0x5a>
c001e4c7:	fb                   	sti    
c001e4c8:	89 d8                	mov    eax,ebx
c001e4ca:	83 c4 08             	add    esp,0x8
c001e4cd:	5b                   	pop    ebx
c001e4ce:	c3                   	ret    

c001e4cf <Vm::getOutput8086(unsigned char*)>:
c001e4cf:	57                   	push   edi
c001e4d0:	8b 0d 8c 0c 03 c0    	mov    ecx,DWORD PTR ds:0xc0030c8c
c001e4d6:	56                   	push   esi
c001e4d7:	be a0 0c 03 c0       	mov    esi,0xc0030ca0
c001e4dc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e4e0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e4e2:	a1 8c 0c 03 c0       	mov    eax,ds:0xc0030c8c
c001e4e7:	5e                   	pop    esi
c001e4e8:	c7 05 8c 0c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030c8c,0x0
c001e4f2:	5f                   	pop    edi
c001e4f3:	c3                   	ret    

c001e4f4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001e4f4:	55                   	push   ebp
c001e4f5:	57                   	push   edi
c001e4f6:	56                   	push   esi
c001e4f7:	53                   	push   ebx
c001e4f8:	83 ec 2c             	sub    esp,0x2c
c001e4fb:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001e4ff:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001e503:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e507:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e50b:	fa                   	cli    
c001e50c:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c001e512:	0f b6 35 85 0c 03 c0 	movzx  esi,BYTE PTR ds:0xc0030c85
c001e519:	89 f0                	mov    eax,esi
c001e51b:	84 c0                	test   al,al
c001e51d:	75 1d                	jne    c001e53c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001e51f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e523:	e8 99 f3 ff ff       	call   c001d8c1 <schedule()>
c001e528:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001e52d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e531:	48                   	dec    eax
c001e532:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001e537:	75 d2                	jne    c001e50b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e539:	fb                   	sti    
c001e53a:	eb cf                	jmp    c001e50b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e53c:	a1 88 0c 03 c0       	mov    eax,ds:0xc0030c88
c001e541:	c7 05 8c 0c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030c8c,0x0
c001e54b:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001e54f:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001e553:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001e557:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001e55b:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001e55f:	50                   	push   eax
c001e560:	6a 20                	push   0x20
c001e562:	6a 00                	push   0x0
c001e564:	68 a0 0c 03 c0       	push   0xc0030ca0
c001e569:	e8 e2 21 fe ff       	call   c0000750 <memset>
c001e56e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001e575:	e8 22 10 ff ff       	call   c000f59c <malloc>
c001e57a:	83 c4 0c             	add    esp,0xc
c001e57d:	89 c3                	mov    ebx,eax
c001e57f:	ff 35 50 0c 03 c0    	push   DWORD PTR ds:0xc0030c50
c001e585:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e589:	50                   	push   eax
c001e58a:	e8 99 45 ff ff       	call   c0012b28 <File::File(char const*, Process*)>
c001e58f:	83 c4 10             	add    esp,0x10
c001e592:	85 db                	test   ebx,ebx
c001e594:	75 0a                	jne    c001e5a0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001e596:	83 ec 0c             	sub    esp,0xc
c001e599:	68 4c ba 02 c0       	push   0xc002ba4c
c001e59e:	eb 3e                	jmp    c001e5de <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e5a0:	50                   	push   eax
c001e5a1:	8d 44 24 17          	lea    eax,[esp+0x17]
c001e5a5:	50                   	push   eax
c001e5a6:	8d 44 24 20          	lea    eax,[esp+0x20]
c001e5aa:	50                   	push   eax
c001e5ab:	53                   	push   ebx
c001e5ac:	e8 87 48 ff ff       	call   c0012e38 <File::stat(unsigned long long*, bool*)>
c001e5b1:	83 c4 10             	add    esp,0x10
c001e5b4:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001e5b9:	74 0a                	je     c001e5c5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001e5bb:	83 ec 0c             	sub    esp,0xc
c001e5be:	68 60 ba 02 c0       	push   0xc002ba60
c001e5c3:	eb 19                	jmp    c001e5de <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e5c5:	51                   	push   ecx
c001e5c6:	51                   	push   ecx
c001e5c7:	6a 01                	push   0x1
c001e5c9:	53                   	push   ebx
c001e5ca:	e8 bd 45 ff ff       	call   c0012b8c <File::open(FileOpenMode)>
c001e5cf:	83 c4 10             	add    esp,0x10
c001e5d2:	85 c0                	test   eax,eax
c001e5d4:	74 24                	je     c001e5fa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001e5d6:	83 ec 0c             	sub    esp,0xc
c001e5d9:	68 79 ba 02 c0       	push   0xc002ba79
c001e5de:	e8 52 b7 ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c001e5e3:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001e5e8:	83 c4 10             	add    esp,0x10
c001e5eb:	48                   	dec    eax
c001e5ec:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001e5f1:	85 c0                	test   eax,eax
c001e5f3:	75 01                	jne    c001e5f6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001e5f5:	fb                   	sti    
c001e5f6:	31 f6                	xor    esi,esi
c001e5f8:	eb 58                	jmp    c001e652 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001e5fa:	0f b7 ed             	movzx  ebp,bp
c001e5fd:	50                   	push   eax
c001e5fe:	0f b7 ff             	movzx  edi,di
c001e601:	50                   	push   eax
c001e602:	55                   	push   ebp
c001e603:	57                   	push   edi
c001e604:	e8 95 fd ff ff       	call   c001e39e <Vm::realToLinear(unsigned short, unsigned short)>
c001e609:	5a                   	pop    edx
c001e60a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001e60c:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001e610:	51                   	push   ecx
c001e611:	50                   	push   eax
c001e612:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e616:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e61a:	53                   	push   ebx
c001e61b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e61e:	83 c4 14             	add    esp,0x14
c001e621:	53                   	push   ebx
c001e622:	e8 c3 45 ff ff       	call   c0012bea <File::close()>
c001e627:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001e62c:	83 c4 10             	add    esp,0x10
c001e62f:	48                   	dec    eax
c001e630:	c6 05 85 0c 03 c0 00 	mov    BYTE PTR ds:0xc0030c85,0x0
c001e637:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001e63c:	85 c0                	test   eax,eax
c001e63e:	75 01                	jne    c001e641 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001e640:	fb                   	sti    
c001e641:	83 ec 0c             	sub    esp,0xc
c001e644:	ff 35 88 0c 03 c0    	push   DWORD PTR ds:0xc0030c88
c001e64a:	e8 f5 f6 ff ff       	call   c001dd44 <unblockTask(ThreadControlBlock*)>
c001e64f:	83 c4 10             	add    esp,0x10
c001e652:	83 c4 2c             	add    esp,0x2c
c001e655:	89 f0                	mov    eax,esi
c001e657:	5b                   	pop    ebx
c001e658:	5e                   	pop    esi
c001e659:	5f                   	pop    edi
c001e65a:	5d                   	pop    ebp
c001e65b:	c3                   	ret    

c001e65c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001e65c:	57                   	push   edi
c001e65d:	56                   	push   esi
c001e65e:	53                   	push   ebx
c001e65f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e663:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e667:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e66b:	83 e8 06             	sub    eax,0x6
c001e66e:	0f b7 c0             	movzx  eax,ax
c001e671:	50                   	push   eax
c001e672:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001e677:	50                   	push   eax
c001e678:	e8 21 fd ff ff       	call   c001e39e <Vm::realToLinear(unsigned short, unsigned short)>
c001e67d:	5a                   	pop    edx
c001e67e:	5e                   	pop    esi
c001e67f:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001e682:	8d 56 fa             	lea    edx,[esi-0x6]
c001e685:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e68b:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001e68e:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001e691:	83 c2 02             	add    edx,0x2
c001e694:	66 89 10             	mov    WORD PTR [eax],dx
c001e697:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001e69a:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001e69e:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001e6a1:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001e6a5:	89 d6                	mov    esi,edx
c001e6a7:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001e6ad:	66 81 e6 ff fd       	and    si,0xfdff
c001e6b2:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001e6b6:	74 07                	je     c001e6bf <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001e6b8:	89 d6                	mov    esi,edx
c001e6ba:	66 81 ce 00 02       	or     si,0x200
c001e6bf:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001e6c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6c8:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e6cc:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001e6d4:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001e6d7:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001e6df:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001e6e2:	5b                   	pop    ebx
c001e6e3:	5e                   	pop    esi
c001e6e4:	5f                   	pop    edi
c001e6e5:	c3                   	ret    

c001e6e6 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001e6e6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e6eb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e6f0:	c1 e0 04             	shl    eax,0x4
c001e6f3:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001e6f6:	c3                   	ret    

c001e6f7 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001e6f7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e6fc:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e701:	c1 e0 04             	shl    eax,0x4
c001e704:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001e708:	c3                   	ret    

c001e709 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001e709:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e70e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e713:	c1 e0 04             	shl    eax,0x4
c001e716:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001e719:	c3                   	ret    

c001e71a <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001e71a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e71f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e724:	c1 e0 04             	shl    eax,0x4
c001e727:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e72b:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001e72e:	c3                   	ret    

c001e72f <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001e72f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e734:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e739:	c1 e0 04             	shl    eax,0x4
c001e73c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e740:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001e744:	c3                   	ret    

c001e745 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001e745:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e74a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e74f:	c1 e0 04             	shl    eax,0x4
c001e752:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e756:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001e759:	c3                   	ret    

c001e75a <Vm::faultHandler(regs*)>:
c001e75a:	55                   	push   ebp
c001e75b:	57                   	push   edi
c001e75c:	56                   	push   esi
c001e75d:	53                   	push   ebx
c001e75e:	83 ec 1c             	sub    esp,0x1c
c001e761:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e765:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001e768:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001e76c:	0f b7 f8             	movzx  edi,ax
c001e76f:	52                   	push   edx
c001e770:	0f b7 c0             	movzx  eax,ax
c001e773:	50                   	push   eax
c001e774:	e8 25 fc ff ff       	call   c001e39e <Vm::realToLinear(unsigned short, unsigned short)>
c001e779:	5a                   	pop    edx
c001e77a:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001e77d:	59                   	pop    ecx
c001e77e:	89 c1                	mov    ecx,eax
c001e780:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e783:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e787:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e78c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e790:	0f b7 c5             	movzx  eax,bp
c001e793:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e797:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001e79b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e79f:	e8 fa fb ff ff       	call   c001e39e <Vm::realToLinear(unsigned short, unsigned short)>
c001e7a4:	5e                   	pop    esi
c001e7a5:	be 06 00 00 00       	mov    esi,0x6
c001e7aa:	5a                   	pop    edx
c001e7ab:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001e7b0:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001e7b5:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001e7b8:	80 fa 9d             	cmp    dl,0x9d
c001e7bb:	0f 84 2c 02 00 00    	je     c001e9ed <Vm::faultHandler(regs*)+0x293>
c001e7c1:	0f 87 91 00 00 00    	ja     c001e858 <Vm::faultHandler(regs*)+0xfe>
c001e7c7:	80 fa 66             	cmp    dl,0x66
c001e7ca:	0f 84 98 01 00 00    	je     c001e968 <Vm::faultHandler(regs*)+0x20e>
c001e7d0:	77 47                	ja     c001e819 <Vm::faultHandler(regs*)+0xbf>
c001e7d2:	80 fa 36             	cmp    dl,0x36
c001e7d5:	0f 84 80 01 00 00    	je     c001e95b <Vm::faultHandler(regs*)+0x201>
c001e7db:	77 1a                	ja     c001e7f7 <Vm::faultHandler(regs*)+0x9d>
c001e7dd:	80 fa 26             	cmp    dl,0x26
c001e7e0:	0f 84 4e 01 00 00    	je     c001e934 <Vm::faultHandler(regs*)+0x1da>
c001e7e6:	80 fa 2e             	cmp    dl,0x2e
c001e7e9:	0f 85 e2 05 00 00    	jne    c001edd1 <Vm::faultHandler(regs*)+0x677>
c001e7ef:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e7f2:	31 f6                	xor    esi,esi
c001e7f4:	41                   	inc    ecx
c001e7f5:	eb be                	jmp    c001e7b5 <Vm::faultHandler(regs*)+0x5b>
c001e7f7:	80 fa 64             	cmp    dl,0x64
c001e7fa:	0f 84 41 01 00 00    	je     c001e941 <Vm::faultHandler(regs*)+0x1e7>
c001e800:	0f 87 48 01 00 00    	ja     c001e94e <Vm::faultHandler(regs*)+0x1f4>
c001e806:	80 fa 3e             	cmp    dl,0x3e
c001e809:	0f 85 c2 05 00 00    	jne    c001edd1 <Vm::faultHandler(regs*)+0x677>
c001e80f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e812:	be 01 00 00 00       	mov    esi,0x1
c001e817:	eb db                	jmp    c001e7f4 <Vm::faultHandler(regs*)+0x9a>
c001e819:	80 fa 6d             	cmp    dl,0x6d
c001e81c:	0f 84 ec 02 00 00    	je     c001eb0e <Vm::faultHandler(regs*)+0x3b4>
c001e822:	77 17                	ja     c001e83b <Vm::faultHandler(regs*)+0xe1>
c001e824:	80 fa 67             	cmp    dl,0x67
c001e827:	0f 84 48 01 00 00    	je     c001e975 <Vm::faultHandler(regs*)+0x21b>
c001e82d:	80 fa 6c             	cmp    dl,0x6c
c001e830:	0f 84 69 02 00 00    	je     c001ea9f <Vm::faultHandler(regs*)+0x345>
c001e836:	e9 96 05 00 00       	jmp    c001edd1 <Vm::faultHandler(regs*)+0x677>
c001e83b:	80 fa 6f             	cmp    dl,0x6f
c001e83e:	0f 84 f4 03 00 00    	je     c001ec38 <Vm::faultHandler(regs*)+0x4de>
c001e844:	0f 82 59 03 00 00    	jb     c001eba3 <Vm::faultHandler(regs*)+0x449>
c001e84a:	80 fa 9c             	cmp    dl,0x9c
c001e84d:	0f 84 2f 01 00 00    	je     c001e982 <Vm::faultHandler(regs*)+0x228>
c001e853:	e9 79 05 00 00       	jmp    c001edd1 <Vm::faultHandler(regs*)+0x677>
c001e858:	80 fa ec             	cmp    dl,0xec
c001e85b:	0f 84 14 05 00 00    	je     c001ed75 <Vm::faultHandler(regs*)+0x61b>
c001e861:	77 7b                	ja     c001e8de <Vm::faultHandler(regs*)+0x184>
c001e863:	80 fa e4             	cmp    dl,0xe4
c001e866:	0f 84 93 04 00 00    	je     c001ecff <Vm::faultHandler(regs*)+0x5a5>
c001e86c:	77 53                	ja     c001e8c1 <Vm::faultHandler(regs*)+0x167>
c001e86e:	80 fa cd             	cmp    dl,0xcd
c001e871:	0f 84 d9 01 00 00    	je     c001ea50 <Vm::faultHandler(regs*)+0x2f6>
c001e877:	80 fa cf             	cmp    dl,0xcf
c001e87a:	0f 85 51 05 00 00    	jne    c001edd1 <Vm::faultHandler(regs*)+0x677>
c001e880:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001e883:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001e886:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001e88a:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001e88d:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001e891:	81 ca 00 02 02 00    	or     edx,0x20200
c001e897:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001e89a:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001e89e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e8a4:	66 c1 e8 09          	shr    ax,0x9
c001e8a8:	83 e0 01             	and    eax,0x1
c001e8ab:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e8ae:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e8b1:	83 c0 06             	add    eax,0x6
c001e8b4:	25 ff ff 00 00       	and    eax,0xffff
c001e8b9:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001e8bc:	e9 0c 05 00 00       	jmp    c001edcd <Vm::faultHandler(regs*)+0x673>
c001e8c1:	80 fa e6             	cmp    dl,0xe6
c001e8c4:	0f 84 7f 04 00 00    	je     c001ed49 <Vm::faultHandler(regs*)+0x5ef>
c001e8ca:	0f 82 4b 04 00 00    	jb     c001ed1b <Vm::faultHandler(regs*)+0x5c1>
c001e8d0:	80 fa e7             	cmp    dl,0xe7
c001e8d3:	0f 84 87 04 00 00    	je     c001ed60 <Vm::faultHandler(regs*)+0x606>
c001e8d9:	e9 f3 04 00 00       	jmp    c001edd1 <Vm::faultHandler(regs*)+0x677>
c001e8de:	80 fa ef             	cmp    dl,0xef
c001e8e1:	0f 84 d1 04 00 00    	je     c001edb8 <Vm::faultHandler(regs*)+0x65e>
c001e8e7:	77 28                	ja     c001e911 <Vm::faultHandler(regs*)+0x1b7>
c001e8e9:	80 fa ed             	cmp    dl,0xed
c001e8ec:	0f 84 9f 04 00 00    	je     c001ed91 <Vm::faultHandler(regs*)+0x637>
c001e8f2:	80 fa ee             	cmp    dl,0xee
c001e8f5:	0f 85 d6 04 00 00    	jne    c001edd1 <Vm::faultHandler(regs*)+0x677>
c001e8fb:	50                   	push   eax
c001e8fc:	50                   	push   eax
c001e8fd:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001e901:	50                   	push   eax
c001e902:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001e906:	50                   	push   eax
c001e907:	e8 5c fa ff ff       	call   c001e368 <Vm::outbv(unsigned short, unsigned char)>
c001e90c:	e9 9f 04 00 00       	jmp    c001edb0 <Vm::faultHandler(regs*)+0x656>
c001e911:	80 fa fa             	cmp    dl,0xfa
c001e914:	0f 84 69 01 00 00    	je     c001ea83 <Vm::faultHandler(regs*)+0x329>
c001e91a:	80 fa fb             	cmp    dl,0xfb
c001e91d:	0f 84 6e 01 00 00    	je     c001ea91 <Vm::faultHandler(regs*)+0x337>
c001e923:	80 fa f3             	cmp    dl,0xf3
c001e926:	0f 85 a5 04 00 00    	jne    c001edd1 <Vm::faultHandler(regs*)+0x677>
c001e92c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e92f:	e9 c0 fe ff ff       	jmp    c001e7f4 <Vm::faultHandler(regs*)+0x9a>
c001e934:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e937:	be 02 00 00 00       	mov    esi,0x2
c001e93c:	e9 b3 fe ff ff       	jmp    c001e7f4 <Vm::faultHandler(regs*)+0x9a>
c001e941:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e944:	be 03 00 00 00       	mov    esi,0x3
c001e949:	e9 a6 fe ff ff       	jmp    c001e7f4 <Vm::faultHandler(regs*)+0x9a>
c001e94e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e951:	be 04 00 00 00       	mov    esi,0x4
c001e956:	e9 99 fe ff ff       	jmp    c001e7f4 <Vm::faultHandler(regs*)+0x9a>
c001e95b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e95e:	be 05 00 00 00       	mov    esi,0x5
c001e963:	e9 8c fe ff ff       	jmp    c001e7f4 <Vm::faultHandler(regs*)+0x9a>
c001e968:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e96b:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001e970:	e9 7f fe ff ff       	jmp    c001e7f4 <Vm::faultHandler(regs*)+0x9a>
c001e975:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e978:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001e97d:	e9 72 fe ff ff       	jmp    c001e7f4 <Vm::faultHandler(regs*)+0x9a>
c001e982:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e985:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001e989:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001e98e:	74 30                	je     c001e9c0 <Vm::faultHandler(regs*)+0x266>
c001e990:	83 e9 04             	sub    ecx,0x4
c001e993:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001e999:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001e99f:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001e9a2:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001e9a5:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e9ab:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001e9af:	0f 84 15 04 00 00    	je     c001edca <Vm::faultHandler(regs*)+0x670>
c001e9b5:	80 ce 02             	or     dh,0x2
c001e9b8:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001e9bb:	e9 0a 04 00 00       	jmp    c001edca <Vm::faultHandler(regs*)+0x670>
c001e9c0:	83 e9 02             	sub    ecx,0x2
c001e9c3:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001e9c9:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001e9cc:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001e9d0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e9d6:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001e9da:	74 05                	je     c001e9e1 <Vm::faultHandler(regs*)+0x287>
c001e9dc:	80 ce 02             	or     dh,0x2
c001e9df:	eb 03                	jmp    c001e9e4 <Vm::faultHandler(regs*)+0x28a>
c001e9e1:	80 e6 fd             	and    dh,0xfd
c001e9e4:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001e9e8:	e9 dd 03 00 00       	jmp    c001edca <Vm::faultHandler(regs*)+0x670>
c001e9ed:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001e9f2:	74 2a                	je     c001ea1e <Vm::faultHandler(regs*)+0x2c4>
c001e9f4:	8b 10                	mov    edx,DWORD PTR [eax]
c001e9f6:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001e9fc:	81 ca 00 02 02 00    	or     edx,0x20200
c001ea02:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001ea05:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea07:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ea0d:	c1 e8 09             	shr    eax,0x9
c001ea10:	83 e0 01             	and    eax,0x1
c001ea13:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ea16:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ea19:	83 c0 04             	add    eax,0x4
c001ea1c:	eb 25                	jmp    c001ea43 <Vm::faultHandler(regs*)+0x2e9>
c001ea1e:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001ea21:	81 ca 00 02 02 00    	or     edx,0x20200
c001ea27:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001ea2a:	66 8b 00             	mov    ax,WORD PTR [eax]
c001ea2d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ea33:	66 c1 e8 09          	shr    ax,0x9
c001ea37:	83 e0 01             	and    eax,0x1
c001ea3a:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ea3d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ea40:	83 c0 02             	add    eax,0x2
c001ea43:	25 ff ff 00 00       	and    eax,0xffff
c001ea48:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001ea4b:	e9 7a 03 00 00       	jmp    c001edca <Vm::faultHandler(regs*)+0x670>
c001ea50:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ea54:	3c ee                	cmp    al,0xee
c001ea56:	75 10                	jne    c001ea68 <Vm::faultHandler(regs*)+0x30e>
c001ea58:	83 ec 0c             	sub    esp,0xc
c001ea5b:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001ea5e:	e8 a2 f9 ff ff       	call   c001e405 <Vm::mainloop3(unsigned long)>
c001ea63:	e9 4b 03 00 00       	jmp    c001edb3 <Vm::faultHandler(regs*)+0x659>
c001ea68:	83 ec 0c             	sub    esp,0xc
c001ea6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ea6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea73:	51                   	push   ecx
c001ea74:	50                   	push   eax
c001ea75:	53                   	push   ebx
c001ea76:	e8 e1 fb ff ff       	call   c001e65c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001ea7b:	83 c4 20             	add    esp,0x20
c001ea7e:	e9 4a 03 00 00       	jmp    c001edcd <Vm::faultHandler(regs*)+0x673>
c001ea83:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea88:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ea8c:	e9 39 03 00 00       	jmp    c001edca <Vm::faultHandler(regs*)+0x670>
c001ea91:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea96:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001ea9a:	e9 2b 03 00 00       	jmp    c001edca <Vm::faultHandler(regs*)+0x670>
c001ea9f:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001eaa2:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001eaa7:	74 2b                	je     c001ead4 <Vm::faultHandler(regs*)+0x37a>
c001eaa9:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001eab0:	76 22                	jbe    c001ead4 <Vm::faultHandler(regs*)+0x37a>
c001eab2:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001eab6:	50                   	push   eax
c001eab7:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001eabb:	50                   	push   eax
c001eabc:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001eac0:	50                   	push   eax
c001eac1:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001eac5:	50                   	push   eax
c001eac6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001eaca:	50                   	push   eax
c001eacb:	6a 6c                	push   0x6c
c001eacd:	6a 6c                	push   0x6c
c001eacf:	e9 b9 01 00 00       	jmp    c001ec8d <Vm::faultHandler(regs*)+0x533>
c001ead4:	83 ec 0c             	sub    esp,0xc
c001ead7:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001eadb:	0f b7 f6             	movzx  esi,si
c001eade:	50                   	push   eax
c001eadf:	e8 71 f8 ff ff       	call   c001e355 <Vm::inbv(unsigned short)>
c001eae4:	83 c4 0c             	add    esp,0xc
c001eae7:	0f b6 c0             	movzx  eax,al
c001eaea:	50                   	push   eax
c001eaeb:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001eaef:	50                   	push   eax
c001eaf0:	56                   	push   esi
c001eaf1:	e8 24 fc ff ff       	call   c001e71a <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001eaf6:	83 c4 10             	add    esp,0x10
c001eaf9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001eafc:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001eb00:	74 03                	je     c001eb05 <Vm::faultHandler(regs*)+0x3ab>
c001eb02:	48                   	dec    eax
c001eb03:	eb 01                	jmp    c001eb06 <Vm::faultHandler(regs*)+0x3ac>
c001eb05:	40                   	inc    eax
c001eb06:	0f b7 c0             	movzx  eax,ax
c001eb09:	e9 8d 00 00 00       	jmp    c001eb9b <Vm::faultHandler(regs*)+0x441>
c001eb0e:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001eb11:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001eb14:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001eb19:	74 29                	je     c001eb44 <Vm::faultHandler(regs*)+0x3ea>
c001eb1b:	3d ff ff 00 00       	cmp    eax,0xffff
c001eb20:	76 22                	jbe    c001eb44 <Vm::faultHandler(regs*)+0x3ea>
c001eb22:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001eb26:	50                   	push   eax
c001eb27:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001eb2b:	50                   	push   eax
c001eb2c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001eb30:	50                   	push   eax
c001eb31:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001eb35:	50                   	push   eax
c001eb36:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001eb3a:	50                   	push   eax
c001eb3b:	6a 6d                	push   0x6d
c001eb3d:	6a 6d                	push   0x6d
c001eb3f:	e9 49 01 00 00       	jmp    c001ec8d <Vm::faultHandler(regs*)+0x533>
c001eb44:	0f b7 c8             	movzx  ecx,ax
c001eb47:	0f b7 f6             	movzx  esi,si
c001eb4a:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001eb4d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eb52:	74 20                	je     c001eb74 <Vm::faultHandler(regs*)+0x41a>
c001eb54:	ed                   	in     eax,dx
c001eb55:	55                   	push   ebp
c001eb56:	50                   	push   eax
c001eb57:	51                   	push   ecx
c001eb58:	56                   	push   esi
c001eb59:	e8 e7 fb ff ff       	call   c001e745 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001eb5e:	83 c4 10             	add    esp,0x10
c001eb61:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001eb64:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001eb68:	74 05                	je     c001eb6f <Vm::faultHandler(regs*)+0x415>
c001eb6a:	83 e8 04             	sub    eax,0x4
c001eb6d:	eb 27                	jmp    c001eb96 <Vm::faultHandler(regs*)+0x43c>
c001eb6f:	83 c0 04             	add    eax,0x4
c001eb72:	eb 22                	jmp    c001eb96 <Vm::faultHandler(regs*)+0x43c>
c001eb74:	66 ed                	in     ax,dx
c001eb76:	0f b7 c0             	movzx  eax,ax
c001eb79:	57                   	push   edi
c001eb7a:	50                   	push   eax
c001eb7b:	51                   	push   ecx
c001eb7c:	56                   	push   esi
c001eb7d:	e8 ad fb ff ff       	call   c001e72f <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001eb82:	83 c4 10             	add    esp,0x10
c001eb85:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001eb88:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001eb8c:	74 05                	je     c001eb93 <Vm::faultHandler(regs*)+0x439>
c001eb8e:	83 e8 02             	sub    eax,0x2
c001eb91:	eb 03                	jmp    c001eb96 <Vm::faultHandler(regs*)+0x43c>
c001eb93:	83 c0 02             	add    eax,0x2
c001eb96:	25 ff ff 00 00       	and    eax,0xffff
c001eb9b:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001eb9e:	e9 27 02 00 00       	jmp    c001edca <Vm::faultHandler(regs*)+0x670>
c001eba3:	8d 46 ff             	lea    eax,[esi-0x1]
c001eba6:	3c 05                	cmp    al,0x5
c001eba8:	77 24                	ja     c001ebce <Vm::faultHandler(regs*)+0x474>
c001ebaa:	0f b6 c0             	movzx  eax,al
c001ebad:	ff 24 85 ec ba 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd4514]
c001ebb4:	0f b7 fd             	movzx  edi,bp
c001ebb7:	eb 15                	jmp    c001ebce <Vm::faultHandler(regs*)+0x474>
c001ebb9:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001ebbd:	eb 0f                	jmp    c001ebce <Vm::faultHandler(regs*)+0x474>
c001ebbf:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001ebc3:	eb 09                	jmp    c001ebce <Vm::faultHandler(regs*)+0x474>
c001ebc5:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001ebc9:	eb 03                	jmp    c001ebce <Vm::faultHandler(regs*)+0x474>
c001ebcb:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001ebce:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ebd1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ebd6:	74 29                	je     c001ec01 <Vm::faultHandler(regs*)+0x4a7>
c001ebd8:	3d ff ff 00 00       	cmp    eax,0xffff
c001ebdd:	76 22                	jbe    c001ec01 <Vm::faultHandler(regs*)+0x4a7>
c001ebdf:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ebe3:	50                   	push   eax
c001ebe4:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ebe8:	50                   	push   eax
c001ebe9:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ebed:	50                   	push   eax
c001ebee:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ebf2:	50                   	push   eax
c001ebf3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ebf7:	50                   	push   eax
c001ebf8:	6a 6e                	push   0x6e
c001ebfa:	6a 6e                	push   0x6e
c001ebfc:	e9 8c 00 00 00       	jmp    c001ec8d <Vm::faultHandler(regs*)+0x533>
c001ec01:	0f b7 c0             	movzx  eax,ax
c001ec04:	52                   	push   edx
c001ec05:	52                   	push   edx
c001ec06:	50                   	push   eax
c001ec07:	57                   	push   edi
c001ec08:	e8 d9 fa ff ff       	call   c001e6e6 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001ec0d:	59                   	pop    ecx
c001ec0e:	0f b6 c0             	movzx  eax,al
c001ec11:	5e                   	pop    esi
c001ec12:	50                   	push   eax
c001ec13:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ec17:	50                   	push   eax
c001ec18:	e8 4b f7 ff ff       	call   c001e368 <Vm::outbv(unsigned short, unsigned char)>
c001ec1d:	83 c4 10             	add    esp,0x10
c001ec20:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ec23:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ec27:	74 03                	je     c001ec2c <Vm::faultHandler(regs*)+0x4d2>
c001ec29:	48                   	dec    eax
c001ec2a:	eb 01                	jmp    c001ec2d <Vm::faultHandler(regs*)+0x4d3>
c001ec2c:	40                   	inc    eax
c001ec2d:	0f b7 c0             	movzx  eax,ax
c001ec30:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001ec33:	e9 92 01 00 00       	jmp    c001edca <Vm::faultHandler(regs*)+0x670>
c001ec38:	8d 46 ff             	lea    eax,[esi-0x1]
c001ec3b:	3c 05                	cmp    al,0x5
c001ec3d:	77 1f                	ja     c001ec5e <Vm::faultHandler(regs*)+0x504>
c001ec3f:	0f b6 c0             	movzx  eax,al
c001ec42:	ff 24 85 04 bb 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd44fc]
c001ec49:	89 ef                	mov    edi,ebp
c001ec4b:	eb 11                	jmp    c001ec5e <Vm::faultHandler(regs*)+0x504>
c001ec4d:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001ec50:	eb 0c                	jmp    c001ec5e <Vm::faultHandler(regs*)+0x504>
c001ec52:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001ec55:	eb 07                	jmp    c001ec5e <Vm::faultHandler(regs*)+0x504>
c001ec57:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001ec5a:	eb 02                	jmp    c001ec5e <Vm::faultHandler(regs*)+0x504>
c001ec5c:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001ec5e:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001ec61:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ec66:	74 37                	je     c001ec9f <Vm::faultHandler(regs*)+0x545>
c001ec68:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001ec6e:	76 2f                	jbe    c001ec9f <Vm::faultHandler(regs*)+0x545>
c001ec70:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ec74:	50                   	push   eax
c001ec75:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ec79:	50                   	push   eax
c001ec7a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ec7e:	50                   	push   eax
c001ec7f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ec83:	50                   	push   eax
c001ec84:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ec88:	50                   	push   eax
c001ec89:	6a 6f                	push   0x6f
c001ec8b:	6a 6f                	push   0x6f
c001ec8d:	68 92 ba 02 c0       	push   0xc002ba92
c001ec92:	e8 32 39 ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c001ec97:	83 c4 20             	add    esp,0x20
c001ec9a:	e9 86 01 00 00       	jmp    c001ee25 <Vm::faultHandler(regs*)+0x6cb>
c001ec9f:	0f b7 d7             	movzx  edx,di
c001eca2:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001eca5:	0f b7 c6             	movzx  eax,si
c001eca8:	81 e1 00 04 00 00    	and    ecx,0x400
c001ecae:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001ecb1:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ecb6:	74 1d                	je     c001ecd5 <Vm::faultHandler(regs*)+0x57b>
c001ecb8:	55                   	push   ebp
c001ecb9:	55                   	push   ebp
c001ecba:	50                   	push   eax
c001ecbb:	52                   	push   edx
c001ecbc:	e8 48 fa ff ff       	call   c001e709 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001ecc1:	83 c4 10             	add    esp,0x10
c001ecc4:	89 fa                	mov    edx,edi
c001ecc6:	ef                   	out    dx,eax
c001ecc7:	85 c9                	test   ecx,ecx
c001ecc9:	74 05                	je     c001ecd0 <Vm::faultHandler(regs*)+0x576>
c001eccb:	83 ee 04             	sub    esi,0x4
c001ecce:	eb 21                	jmp    c001ecf1 <Vm::faultHandler(regs*)+0x597>
c001ecd0:	83 c6 04             	add    esi,0x4
c001ecd3:	eb 1c                	jmp    c001ecf1 <Vm::faultHandler(regs*)+0x597>
c001ecd5:	55                   	push   ebp
c001ecd6:	55                   	push   ebp
c001ecd7:	50                   	push   eax
c001ecd8:	52                   	push   edx
c001ecd9:	e8 19 fa ff ff       	call   c001e6f7 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001ecde:	83 c4 10             	add    esp,0x10
c001ece1:	89 fa                	mov    edx,edi
c001ece3:	66 ef                	out    dx,ax
c001ece5:	85 c9                	test   ecx,ecx
c001ece7:	74 05                	je     c001ecee <Vm::faultHandler(regs*)+0x594>
c001ece9:	83 ee 02             	sub    esi,0x2
c001ecec:	eb 03                	jmp    c001ecf1 <Vm::faultHandler(regs*)+0x597>
c001ecee:	83 c6 02             	add    esi,0x2
c001ecf1:	81 e6 ff ff 00 00    	and    esi,0xffff
c001ecf7:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001ecfa:	e9 cb 00 00 00       	jmp    c001edca <Vm::faultHandler(regs*)+0x670>
c001ecff:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001ed06:	83 ec 0c             	sub    esp,0xc
c001ed09:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ed0d:	50                   	push   eax
c001ed0e:	e8 42 f6 ff ff       	call   c001e355 <Vm::inbv(unsigned short)>
c001ed13:	0f b6 c0             	movzx  eax,al
c001ed16:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001ed19:	eb 3f                	jmp    c001ed5a <Vm::faultHandler(regs*)+0x600>
c001ed1b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ed20:	74 07                	je     c001ed29 <Vm::faultHandler(regs*)+0x5cf>
c001ed22:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ed26:	ed                   	in     eax,dx
c001ed27:	eb 14                	jmp    c001ed3d <Vm::faultHandler(regs*)+0x5e3>
c001ed29:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001ed2c:	66 31 f6             	xor    si,si
c001ed2f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001ed32:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ed36:	66 ed                	in     ax,dx
c001ed38:	0f b7 c0             	movzx  eax,ax
c001ed3b:	09 f0                	or     eax,esi
c001ed3d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001ed40:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ed44:	e9 84 00 00 00       	jmp    c001edcd <Vm::faultHandler(regs*)+0x673>
c001ed49:	52                   	push   edx
c001ed4a:	52                   	push   edx
c001ed4b:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001ed4f:	50                   	push   eax
c001ed50:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ed54:	50                   	push   eax
c001ed55:	e8 0e f6 ff ff       	call   c001e368 <Vm::outbv(unsigned short, unsigned char)>
c001ed5a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ed5e:	eb 53                	jmp    c001edb3 <Vm::faultHandler(regs*)+0x659>
c001ed60:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ed63:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ed67:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ed6c:	74 03                	je     c001ed71 <Vm::faultHandler(regs*)+0x617>
c001ed6e:	ef                   	out    dx,eax
c001ed6f:	eb cf                	jmp    c001ed40 <Vm::faultHandler(regs*)+0x5e6>
c001ed71:	66 ef                	out    dx,ax
c001ed73:	eb cb                	jmp    c001ed40 <Vm::faultHandler(regs*)+0x5e6>
c001ed75:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001ed7c:	83 ec 0c             	sub    esp,0xc
c001ed7f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ed83:	50                   	push   eax
c001ed84:	e8 cc f5 ff ff       	call   c001e355 <Vm::inbv(unsigned short)>
c001ed89:	0f b6 c0             	movzx  eax,al
c001ed8c:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001ed8f:	eb 1f                	jmp    c001edb0 <Vm::faultHandler(regs*)+0x656>
c001ed91:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ed94:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ed99:	74 03                	je     c001ed9e <Vm::faultHandler(regs*)+0x644>
c001ed9b:	ed                   	in     eax,dx
c001ed9c:	eb 0d                	jmp    c001edab <Vm::faultHandler(regs*)+0x651>
c001ed9e:	66 ed                	in     ax,dx
c001eda0:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001eda3:	0f b7 c0             	movzx  eax,ax
c001eda6:	66 31 d2             	xor    dx,dx
c001eda9:	09 d0                	or     eax,edx
c001edab:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001edae:	eb 1a                	jmp    c001edca <Vm::faultHandler(regs*)+0x670>
c001edb0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001edb3:	83 c4 10             	add    esp,0x10
c001edb6:	eb 15                	jmp    c001edcd <Vm::faultHandler(regs*)+0x673>
c001edb8:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001edbb:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001edbe:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001edc3:	74 03                	je     c001edc8 <Vm::faultHandler(regs*)+0x66e>
c001edc5:	ef                   	out    dx,eax
c001edc6:	eb 02                	jmp    c001edca <Vm::faultHandler(regs*)+0x670>
c001edc8:	66 ef                	out    dx,ax
c001edca:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001edcd:	b0 01                	mov    al,0x1
c001edcf:	eb 56                	jmp    c001ee27 <Vm::faultHandler(regs*)+0x6cd>
c001edd1:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001edd5:	50                   	push   eax
c001edd6:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001edda:	50                   	push   eax
c001eddb:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001eddf:	50                   	push   eax
c001ede0:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ede4:	50                   	push   eax
c001ede5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ede9:	50                   	push   eax
c001edea:	52                   	push   edx
c001edeb:	52                   	push   edx
c001edec:	68 bf ba 02 c0       	push   0xc002babf
c001edf1:	e8 d3 37 ff ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c001edf6:	83 c4 20             	add    esp,0x20
c001edf9:	83 ec 0c             	sub    esp,0xc
c001edfc:	6a 60                	push   0x60
c001edfe:	e8 52 f5 ff ff       	call   c001e355 <Vm::inbv(unsigned short)>
c001ee03:	83 c4 10             	add    esp,0x10
c001ee06:	3c 1c                	cmp    al,0x1c
c001ee08:	74 04                	je     c001ee0e <Vm::faultHandler(regs*)+0x6b4>
c001ee0a:	3c 5a                	cmp    al,0x5a
c001ee0c:	75 eb                	jne    c001edf9 <Vm::faultHandler(regs*)+0x69f>
c001ee0e:	3c 5a                	cmp    al,0x5a
c001ee10:	74 04                	je     c001ee16 <Vm::faultHandler(regs*)+0x6bc>
c001ee12:	3c 1c                	cmp    al,0x1c
c001ee14:	75 0f                	jne    c001ee25 <Vm::faultHandler(regs*)+0x6cb>
c001ee16:	83 ec 0c             	sub    esp,0xc
c001ee19:	6a 60                	push   0x60
c001ee1b:	e8 35 f5 ff ff       	call   c001e355 <Vm::inbv(unsigned short)>
c001ee20:	83 c4 10             	add    esp,0x10
c001ee23:	eb e9                	jmp    c001ee0e <Vm::faultHandler(regs*)+0x6b4>
c001ee25:	31 c0                	xor    eax,eax
c001ee27:	83 c4 1c             	add    esp,0x1c
c001ee2a:	5b                   	pop    ebx
c001ee2b:	5e                   	pop    esi
c001ee2c:	5f                   	pop    edi
c001ee2d:	5d                   	pop    ebp
c001ee2e:	c3                   	ret    

c001ee2f <Vm::fpuInternalTo32(unsigned long long)>:
c001ee2f:	57                   	push   edi
c001ee30:	56                   	push   esi
c001ee31:	53                   	push   ebx
c001ee32:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ee36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee3a:	89 d6                	mov    esi,edx
c001ee3c:	89 d7                	mov    edi,edx
c001ee3e:	89 c1                	mov    ecx,eax
c001ee40:	c1 ef 14             	shr    edi,0x14
c001ee43:	89 d3                	mov    ebx,edx
c001ee45:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001ee4b:	31 d2                	xor    edx,edx
c001ee4d:	89 f8                	mov    eax,edi
c001ee4f:	81 e6 00 00 00 80    	and    esi,0x80000000
c001ee55:	bf ff 00 00 00       	mov    edi,0xff
c001ee5a:	05 80 fc ff ff       	add    eax,0xfffffc80
c001ee5f:	83 d2 ff             	adc    edx,0xffffffff
c001ee62:	39 c7                	cmp    edi,eax
c001ee64:	bf 00 00 00 00       	mov    edi,0x0
c001ee69:	19 d7                	sbb    edi,edx
c001ee6b:	72 15                	jb     c001ee82 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001ee6d:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001ee71:	c1 e0 17             	shl    eax,0x17
c001ee74:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001ee7a:	09 f1                	or     ecx,esi
c001ee7c:	09 c1                	or     ecx,eax
c001ee7e:	89 cf                	mov    edi,ecx
c001ee80:	eb 02                	jmp    c001ee84 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001ee82:	31 ff                	xor    edi,edi
c001ee84:	89 f8                	mov    eax,edi
c001ee86:	5b                   	pop    ebx
c001ee87:	5e                   	pop    esi
c001ee88:	5f                   	pop    edi
c001ee89:	c3                   	ret    

c001ee8a <Vm::fpuInternalTo64(unsigned long long)>:
c001ee8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee8e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ee92:	c3                   	ret    

c001ee93 <Vm::fpu32ToInternal(unsigned int)>:
c001ee93:	57                   	push   edi
c001ee94:	31 ff                	xor    edi,edi
c001ee96:	56                   	push   esi
c001ee97:	53                   	push   ebx
c001ee98:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ee9c:	89 cb                	mov    ebx,ecx
c001ee9e:	89 ce                	mov    esi,ecx
c001eea0:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001eea6:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001eeac:	c1 e9 17             	shr    ecx,0x17
c001eeaf:	89 f0                	mov    eax,esi
c001eeb1:	0f b6 d1             	movzx  edx,cl
c001eeb4:	81 c2 80 03 00 00    	add    edx,0x380
c001eeba:	89 d1                	mov    ecx,edx
c001eebc:	89 fa                	mov    edx,edi
c001eebe:	c1 e1 14             	shl    ecx,0x14
c001eec1:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001eec5:	c1 e0 1d             	shl    eax,0x1d
c001eec8:	89 d7                	mov    edi,edx
c001eeca:	89 c6                	mov    esi,eax
c001eecc:	89 ca                	mov    edx,ecx
c001eece:	89 f0                	mov    eax,esi
c001eed0:	09 fa                	or     edx,edi
c001eed2:	09 da                	or     edx,ebx
c001eed4:	5b                   	pop    ebx
c001eed5:	5e                   	pop    esi
c001eed6:	5f                   	pop    edi
c001eed7:	c3                   	ret    

c001eed8 <Vm::fpu64ToInternal(unsigned long long)>:
c001eed8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eedc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001eee0:	c3                   	ret    

c001eee1 <Vm::fpuFloatToLong(unsigned long long)>:
c001eee1:	57                   	push   edi
c001eee2:	31 c0                	xor    eax,eax
c001eee4:	56                   	push   esi
c001eee5:	31 d2                	xor    edx,edx
c001eee7:	53                   	push   ebx
c001eee8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001eeec:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001eef0:	89 d9                	mov    ecx,ebx
c001eef2:	c1 e9 14             	shr    ecx,0x14
c001eef5:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001eefb:	89 cf                	mov    edi,ecx
c001eefd:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001ef03:	78 33                	js     c001ef38 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001ef05:	89 d9                	mov    ecx,ebx
c001ef07:	89 f0                	mov    eax,esi
c001ef09:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001ef0f:	81 c9 00 00 10 00    	or     ecx,0x100000
c001ef15:	89 ca                	mov    edx,ecx
c001ef17:	b9 34 00 00 00       	mov    ecx,0x34
c001ef1c:	29 f9                	sub    ecx,edi
c001ef1e:	0f ad d0             	shrd   eax,edx,cl
c001ef21:	d3 fa                	sar    edx,cl
c001ef23:	f6 c1 20             	test   cl,0x20
c001ef26:	74 05                	je     c001ef2d <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001ef28:	89 d0                	mov    eax,edx
c001ef2a:	c1 fa 1f             	sar    edx,0x1f
c001ef2d:	85 db                	test   ebx,ebx
c001ef2f:	79 07                	jns    c001ef38 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001ef31:	f7 d8                	neg    eax
c001ef33:	83 d2 00             	adc    edx,0x0
c001ef36:	f7 da                	neg    edx
c001ef38:	5b                   	pop    ebx
c001ef39:	5e                   	pop    esi
c001ef3a:	5f                   	pop    edi
c001ef3b:	c3                   	ret    

c001ef3c <Vm::fpuULongToFloat(unsigned long long)>:
c001ef3c:	57                   	push   edi
c001ef3d:	31 c9                	xor    ecx,ecx
c001ef3f:	56                   	push   esi
c001ef40:	53                   	push   ebx
c001ef41:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ef45:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ef49:	0f ba e7 14          	bt     edi,0x14
c001ef4d:	72 07                	jb     c001ef56 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001ef4f:	01 f6                	add    esi,esi
c001ef51:	11 ff                	adc    edi,edi
c001ef53:	41                   	inc    ecx
c001ef54:	eb f3                	jmp    c001ef49 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001ef56:	89 fa                	mov    edx,edi
c001ef58:	89 f0                	mov    eax,esi
c001ef5a:	bb 33 04 00 00       	mov    ebx,0x433
c001ef5f:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001ef65:	29 cb                	sub    ebx,ecx
c001ef67:	89 d9                	mov    ecx,ebx
c001ef69:	5b                   	pop    ebx
c001ef6a:	c1 e1 14             	shl    ecx,0x14
c001ef6d:	5e                   	pop    esi
c001ef6e:	09 ca                	or     edx,ecx
c001ef70:	5f                   	pop    edi
c001ef71:	c3                   	ret    

c001ef72 <Vm::fpuLongToFloat(long long)>:
c001ef72:	56                   	push   esi
c001ef73:	31 c0                	xor    eax,eax
c001ef75:	53                   	push   ebx
c001ef76:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ef7a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ef7e:	39 c8                	cmp    eax,ecx
c001ef80:	19 d8                	sbb    eax,ebx
c001ef82:	7d 04                	jge    c001ef88 <Vm::fpuLongToFloat(long long)+0x16>
c001ef84:	31 f6                	xor    esi,esi
c001ef86:	eb 0c                	jmp    c001ef94 <Vm::fpuLongToFloat(long long)+0x22>
c001ef88:	f7 d9                	neg    ecx
c001ef8a:	be 01 00 00 00       	mov    esi,0x1
c001ef8f:	83 d3 00             	adc    ebx,0x0
c001ef92:	f7 db                	neg    ebx
c001ef94:	31 c0                	xor    eax,eax
c001ef96:	0f ba e3 14          	bt     ebx,0x14
c001ef9a:	72 07                	jb     c001efa3 <Vm::fpuLongToFloat(long long)+0x31>
c001ef9c:	01 c9                	add    ecx,ecx
c001ef9e:	11 db                	adc    ebx,ebx
c001efa0:	40                   	inc    eax
c001efa1:	eb f3                	jmp    c001ef96 <Vm::fpuLongToFloat(long long)+0x24>
c001efa3:	ba 33 04 00 00       	mov    edx,0x433
c001efa8:	29 c2                	sub    edx,eax
c001efaa:	89 c8                	mov    eax,ecx
c001efac:	c1 e2 14             	shl    edx,0x14
c001efaf:	89 d9                	mov    ecx,ebx
c001efb1:	89 f3                	mov    ebx,esi
c001efb3:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001efb9:	09 ca                	or     edx,ecx
c001efbb:	84 db                	test   bl,bl
c001efbd:	74 06                	je     c001efc5 <Vm::fpuLongToFloat(long long)+0x53>
c001efbf:	81 ca 00 00 00 80    	or     edx,0x80000000
c001efc5:	5b                   	pop    ebx
c001efc6:	5e                   	pop    esi
c001efc7:	c3                   	ret    

c001efc8 <Vm::fpuGet0()>:
c001efc8:	31 c0                	xor    eax,eax
c001efca:	31 d2                	xor    edx,edx
c001efcc:	c3                   	ret    

c001efcd <Vm::fpuGet1()>:
c001efcd:	b8 01 00 00 00       	mov    eax,0x1
c001efd2:	31 d2                	xor    edx,edx
c001efd4:	c3                   	ret    

c001efd5 <Vm::fpuGetPi()>:
c001efd5:	b8 03 00 00 00       	mov    eax,0x3
c001efda:	31 d2                	xor    edx,edx
c001efdc:	c3                   	ret    

c001efdd <Vm::fpuGetLog2E()>:
c001efdd:	83 ec 18             	sub    esp,0x18
c001efe0:	68 1c bb 02 c0       	push   0xc002bb1c
c001efe5:	e8 4b ad ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c001efea:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001efef:	31 d2                	xor    edx,edx
c001eff1:	83 c4 1c             	add    esp,0x1c
c001eff4:	c3                   	ret    

c001eff5 <Vm::fpuGetLogE2()>:
c001eff5:	83 ec 18             	sub    esp,0x18
c001eff8:	68 28 bb 02 c0       	push   0xc002bb28
c001effd:	e8 33 ad ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c001f002:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f007:	31 d2                	xor    edx,edx
c001f009:	83 c4 1c             	add    esp,0x1c
c001f00c:	c3                   	ret    

c001f00d <Vm::fpuGetLog210()>:
c001f00d:	83 ec 18             	sub    esp,0x18
c001f010:	68 34 bb 02 c0       	push   0xc002bb34
c001f015:	e8 1b ad ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c001f01a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f01f:	31 d2                	xor    edx,edx
c001f021:	83 c4 1c             	add    esp,0x1c
c001f024:	c3                   	ret    

c001f025 <Vm::fpuGetLog102()>:
c001f025:	83 ec 18             	sub    esp,0x18
c001f028:	68 41 bb 02 c0       	push   0xc002bb41
c001f02d:	e8 03 ad ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c001f032:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f037:	31 d2                	xor    edx,edx
c001f039:	83 c4 1c             	add    esp,0x1c
c001f03c:	c3                   	ret    

c001f03d <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f03d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f041:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f045:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f049:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f04d:	0f 92 c0             	setb   al
c001f050:	c3                   	ret    

c001f051 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f051:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f055:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f059:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f05d:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f061:	09 c2                	or     edx,eax
c001f063:	0f 94 c0             	sete   al
c001f066:	c3                   	ret    

c001f067 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f067:	57                   	push   edi
c001f068:	56                   	push   esi
c001f069:	53                   	push   ebx
c001f06a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f06e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f072:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f076:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f07a:	57                   	push   edi
c001f07b:	56                   	push   esi
c001f07c:	53                   	push   ebx
c001f07d:	51                   	push   ecx
c001f07e:	e8 ce ff ff ff       	call   c001f051 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f083:	83 c4 10             	add    esp,0x10
c001f086:	88 c2                	mov    dl,al
c001f088:	31 c0                	xor    eax,eax
c001f08a:	84 d2                	test   dl,dl
c001f08c:	75 0c                	jne    c001f09a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f08e:	57                   	push   edi
c001f08f:	56                   	push   esi
c001f090:	53                   	push   ebx
c001f091:	51                   	push   ecx
c001f092:	e8 a6 ff ff ff       	call   c001f03d <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f097:	83 c4 10             	add    esp,0x10
c001f09a:	83 e0 01             	and    eax,0x1
c001f09d:	5b                   	pop    ebx
c001f09e:	88 c1                	mov    cl,al
c001f0a0:	83 e2 01             	and    edx,0x1
c001f0a3:	a0 c1 0c 03 c0       	mov    al,ds:0xc0030cc1
c001f0a8:	c1 e2 06             	shl    edx,0x6
c001f0ab:	83 e0 ba             	and    eax,0xffffffba
c001f0ae:	5e                   	pop    esi
c001f0af:	09 c8                	or     eax,ecx
c001f0b1:	5f                   	pop    edi
c001f0b2:	09 d0                	or     eax,edx
c001f0b4:	a2 c1 0c 03 c0       	mov    ds:0xc0030cc1,al
c001f0b9:	c3                   	ret    

c001f0ba <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f0ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f0be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f0c2:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f0c6:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f0ca:	c3                   	ret    

c001f0cb <Vm::fpuAbs(unsigned long long)>:
c001f0cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0cf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f0d3:	c3                   	ret    

c001f0d4 <Vm::fpuChs(unsigned long long)>:
c001f0d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f0dc:	f7 d8                	neg    eax
c001f0de:	83 d2 00             	adc    edx,0x0
c001f0e1:	f7 da                	neg    edx
c001f0e3:	c3                   	ret    

c001f0e4 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f0e4:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f0e8:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f0ed:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f0f1:	eb c7                	jmp    c001f0ba <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f0f3 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f0f3:	53                   	push   ebx
c001f0f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f0f8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f0fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f100:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f104:	0f af ca             	imul   ecx,edx
c001f107:	0f af d8             	imul   ebx,eax
c001f10a:	f7 e2                	mul    edx
c001f10c:	01 d9                	add    ecx,ebx
c001f10e:	5b                   	pop    ebx
c001f10f:	01 ca                	add    edx,ecx
c001f111:	c3                   	ret    

c001f112 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f112:	83 ec 0c             	sub    esp,0xc
c001f115:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f119:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f11d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f121:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f125:	e8 da 74 00 00       	call   c0026604 <__udivdi3>
c001f12a:	83 c4 1c             	add    esp,0x1c
c001f12d:	c3                   	ret    

c001f12e <Vm::fpuSquare(unsigned long long)>:
c001f12e:	50                   	push   eax
c001f12f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f133:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f137:	52                   	push   edx
c001f138:	50                   	push   eax
c001f139:	52                   	push   edx
c001f13a:	50                   	push   eax
c001f13b:	e8 b3 ff ff ff       	call   c001f0f3 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f140:	83 c4 14             	add    esp,0x14
c001f143:	c3                   	ret    

c001f144 <Vm::fpuGetReg(int)>:
c001f144:	83 ec 0c             	sub    esp,0xc
c001f147:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f14c:	76 10                	jbe    c001f15e <Vm::fpuGetReg(int)+0x1a>
c001f14e:	83 ec 0c             	sub    esp,0xc
c001f151:	68 4e bb 02 c0       	push   0xc002bb4e
c001f156:	e8 da ab ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c001f15b:	83 c4 10             	add    esp,0x10
c001f15e:	a0 c1 0c 03 c0       	mov    al,ds:0xc0030cc1
c001f163:	b9 08 00 00 00       	mov    ecx,0x8
c001f168:	c0 e8 03             	shr    al,0x3
c001f16b:	83 e0 07             	and    eax,0x7
c001f16e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f172:	99                   	cdq    
c001f173:	f7 f9                	idiv   ecx
c001f175:	8b 04 d5 c4 0c 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcf33c]
c001f17c:	8b 14 d5 c8 0c 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcf338]
c001f183:	83 c4 0c             	add    esp,0xc
c001f186:	c3                   	ret    

c001f187 <Vm::fpuSetReg(int, unsigned long long)>:
c001f187:	57                   	push   edi
c001f188:	56                   	push   esi
c001f189:	52                   	push   edx
c001f18a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f18e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f192:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f197:	76 10                	jbe    c001f1a9 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f199:	83 ec 0c             	sub    esp,0xc
c001f19c:	68 61 bb 02 c0       	push   0xc002bb61
c001f1a1:	e8 8f ab ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c001f1a6:	83 c4 10             	add    esp,0x10
c001f1a9:	a0 c1 0c 03 c0       	mov    al,ds:0xc0030cc1
c001f1ae:	b9 08 00 00 00       	mov    ecx,0x8
c001f1b3:	c0 e8 03             	shr    al,0x3
c001f1b6:	83 e0 07             	and    eax,0x7
c001f1b9:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f1bd:	99                   	cdq    
c001f1be:	f7 f9                	idiv   ecx
c001f1c0:	89 34 d5 c4 0c 03 c0 	mov    DWORD PTR [edx*8-0x3ffcf33c],esi
c001f1c7:	89 3c d5 c8 0c 03 c0 	mov    DWORD PTR [edx*8-0x3ffcf338],edi
c001f1ce:	58                   	pop    eax
c001f1cf:	5e                   	pop    esi
c001f1d0:	5f                   	pop    edi
c001f1d1:	c3                   	ret    

c001f1d2 <Vm::fpuPush(unsigned long long)>:
c001f1d2:	a0 c1 0c 03 c0       	mov    al,ds:0xc0030cc1
c001f1d7:	c0 e8 03             	shr    al,0x3
c001f1da:	83 e0 07             	and    eax,0x7
c001f1dd:	83 c0 07             	add    eax,0x7
c001f1e0:	88 c2                	mov    dl,al
c001f1e2:	83 e0 07             	and    eax,0x7
c001f1e5:	83 e2 07             	and    edx,0x7
c001f1e8:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f1ef:	8a 15 c1 0c 03 c0    	mov    dl,BYTE PTR ds:0xc0030cc1
c001f1f5:	83 e2 c7             	and    edx,0xffffffc7
c001f1f8:	09 ca                	or     edx,ecx
c001f1fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f1fe:	88 15 c1 0c 03 c0    	mov    BYTE PTR ds:0xc0030cc1,dl
c001f204:	89 0c c5 c8 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf338],ecx
c001f20b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f20f:	89 14 c5 c4 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf33c],edx
c001f216:	a1 04 0d 03 c0       	mov    eax,ds:0xc0030d04
c001f21b:	83 f8 08             	cmp    eax,0x8
c001f21e:	75 08                	jne    c001f228 <Vm::fpuPush(unsigned long long)+0x56>
c001f220:	80 0d c0 0c 03 c0 40 	or     BYTE PTR ds:0xc0030cc0,0x40
c001f227:	c3                   	ret    
c001f228:	40                   	inc    eax
c001f229:	a3 04 0d 03 c0       	mov    ds:0xc0030d04,eax
c001f22e:	c3                   	ret    

c001f22f <Vm::fpuPop()>:
c001f22f:	8a 0d c1 0c 03 c0    	mov    cl,BYTE PTR ds:0xc0030cc1
c001f235:	53                   	push   ebx
c001f236:	c0 e9 03             	shr    cl,0x3
c001f239:	8a 1d c1 0c 03 c0    	mov    bl,BYTE PTR ds:0xc0030cc1
c001f23f:	83 e1 07             	and    ecx,0x7
c001f242:	83 e3 c7             	and    ebx,0xffffffc7
c001f245:	8b 04 cd c4 0c 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcf33c]
c001f24c:	8b 14 cd c8 0c 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcf338]
c001f253:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f25a:	83 e1 38             	and    ecx,0x38
c001f25d:	09 d9                	or     ecx,ebx
c001f25f:	88 0d c1 0c 03 c0    	mov    BYTE PTR ds:0xc0030cc1,cl
c001f265:	8b 0d 04 0d 03 c0    	mov    ecx,DWORD PTR ds:0xc0030d04
c001f26b:	85 c9                	test   ecx,ecx
c001f26d:	74 09                	je     c001f278 <Vm::fpuPop()+0x49>
c001f26f:	49                   	dec    ecx
c001f270:	89 0d 04 0d 03 c0    	mov    DWORD PTR ds:0xc0030d04,ecx
c001f276:	eb 07                	jmp    c001f27f <Vm::fpuPop()+0x50>
c001f278:	80 0d c0 0c 03 c0 40 	or     BYTE PTR ds:0xc0030cc0,0x40
c001f27f:	5b                   	pop    ebx
c001f280:	c3                   	ret    

c001f281 <Vm::x87Handler(regs*)>:
c001f281:	55                   	push   ebp
c001f282:	57                   	push   edi
c001f283:	56                   	push   esi
c001f284:	53                   	push   ebx
c001f285:	83 ec 1c             	sub    esp,0x1c
c001f288:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f28c:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f291:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f294:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f29c:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f2a0:	50                   	push   eax
c001f2a1:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f2a5:	50                   	push   eax
c001f2a6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f2aa:	50                   	push   eax
c001f2ab:	53                   	push   ebx
c001f2ac:	e8 9d a1 ff ff       	call   c001944e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f2b1:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f2b4:	83 c4 10             	add    esp,0x10
c001f2b7:	89 c6                	mov    esi,eax
c001f2b9:	80 fa d9             	cmp    dl,0xd9
c001f2bc:	0f 85 52 01 00 00    	jne    c001f414 <Vm::x87Handler(regs*)+0x193>
c001f2c2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f2c6:	8d 50 20             	lea    edx,[eax+0x20]
c001f2c9:	80 fa 0e             	cmp    dl,0xe
c001f2cc:	0f 87 86 00 00 00    	ja     c001f358 <Vm::x87Handler(regs*)+0xd7>
c001f2d2:	0f b6 d2             	movzx  edx,dl
c001f2d5:	ff 24 95 74 bb 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd448c]
c001f2dc:	e8 e7 fc ff ff       	call   c001efc8 <Vm::fpuGet0()>
c001f2e1:	eb 05                	jmp    c001f2e8 <Vm::x87Handler(regs*)+0x67>
c001f2e3:	e8 e5 fc ff ff       	call   c001efcd <Vm::fpuGet1()>
c001f2e8:	57                   	push   edi
c001f2e9:	57                   	push   edi
c001f2ea:	52                   	push   edx
c001f2eb:	50                   	push   eax
c001f2ec:	e8 e1 fe ff ff       	call   c001f1d2 <Vm::fpuPush(unsigned long long)>
c001f2f1:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f2f5:	83 c4 10             	add    esp,0x10
c001f2f8:	b0 01                	mov    al,0x1
c001f2fa:	e9 e3 09 00 00       	jmp    c001fce2 <Vm::x87Handler(regs*)+0xa61>
c001f2ff:	83 ec 0c             	sub    esp,0xc
c001f302:	6a 00                	push   0x0
c001f304:	e8 3b fe ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001f309:	59                   	pop    ecx
c001f30a:	5e                   	pop    esi
c001f30b:	52                   	push   edx
c001f30c:	50                   	push   eax
c001f30d:	e8 c2 fd ff ff       	call   c001f0d4 <Vm::fpuChs(unsigned long long)>
c001f312:	eb 13                	jmp    c001f327 <Vm::x87Handler(regs*)+0xa6>
c001f314:	83 ec 0c             	sub    esp,0xc
c001f317:	6a 00                	push   0x0
c001f319:	e8 26 fe ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001f31e:	5f                   	pop    edi
c001f31f:	5d                   	pop    ebp
c001f320:	52                   	push   edx
c001f321:	50                   	push   eax
c001f322:	e8 a4 fd ff ff       	call   c001f0cb <Vm::fpuAbs(unsigned long long)>
c001f327:	83 c4 0c             	add    esp,0xc
c001f32a:	52                   	push   edx
c001f32b:	50                   	push   eax
c001f32c:	6a 00                	push   0x0
c001f32e:	e8 54 fe ff ff       	call   c001f187 <Vm::fpuSetReg(int, unsigned long long)>
c001f333:	eb bc                	jmp    c001f2f1 <Vm::x87Handler(regs*)+0x70>
c001f335:	e8 d3 fc ff ff       	call   c001f00d <Vm::fpuGetLog210()>
c001f33a:	eb ac                	jmp    c001f2e8 <Vm::x87Handler(regs*)+0x67>
c001f33c:	e8 9c fc ff ff       	call   c001efdd <Vm::fpuGetLog2E()>
c001f341:	eb a5                	jmp    c001f2e8 <Vm::x87Handler(regs*)+0x67>
c001f343:	e8 8d fc ff ff       	call   c001efd5 <Vm::fpuGetPi()>
c001f348:	eb 9e                	jmp    c001f2e8 <Vm::x87Handler(regs*)+0x67>
c001f34a:	e8 d6 fc ff ff       	call   c001f025 <Vm::fpuGetLog102()>
c001f34f:	eb 97                	jmp    c001f2e8 <Vm::x87Handler(regs*)+0x67>
c001f351:	e8 9f fc ff ff       	call   c001eff5 <Vm::fpuGetLogE2()>
c001f356:	eb 90                	jmp    c001f2e8 <Vm::x87Handler(regs*)+0x67>
c001f358:	8d 50 40             	lea    edx,[eax+0x40]
c001f35b:	80 fa 07             	cmp    dl,0x7
c001f35e:	77 15                	ja     c001f375 <Vm::x87Handler(regs*)+0xf4>
c001f360:	83 ec 0c             	sub    esp,0xc
c001f363:	2d c0 00 00 00       	sub    eax,0xc0
c001f368:	50                   	push   eax
c001f369:	e8 d6 fd ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001f36e:	59                   	pop    ecx
c001f36f:	5e                   	pop    esi
c001f370:	e9 75 ff ff ff       	jmp    c001f2ea <Vm::x87Handler(regs*)+0x69>
c001f375:	8d 50 38             	lea    edx,[eax+0x38]
c001f378:	80 fa 07             	cmp    dl,0x7
c001f37b:	77 3c                	ja     c001f3b9 <Vm::x87Handler(regs*)+0x138>
c001f37d:	83 ec 0c             	sub    esp,0xc
c001f380:	2d c8 00 00 00       	sub    eax,0xc8
c001f385:	50                   	push   eax
c001f386:	e8 b9 fd ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001f38b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f392:	89 c6                	mov    esi,eax
c001f394:	89 d7                	mov    edi,edx
c001f396:	e8 a9 fd ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001f39b:	83 c4 0c             	add    esp,0xc
c001f39e:	52                   	push   edx
c001f39f:	50                   	push   eax
c001f3a0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f3a4:	2d c8 00 00 00       	sub    eax,0xc8
c001f3a9:	50                   	push   eax
c001f3aa:	e8 d8 fd ff ff       	call   c001f187 <Vm::fpuSetReg(int, unsigned long long)>
c001f3af:	83 c4 0c             	add    esp,0xc
c001f3b2:	57                   	push   edi
c001f3b3:	56                   	push   esi
c001f3b4:	e9 73 ff ff ff       	jmp    c001f32c <Vm::x87Handler(regs*)+0xab>
c001f3b9:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f3bd:	84 d2                	test   dl,dl
c001f3bf:	75 0f                	jne    c001f3d0 <Vm::x87Handler(regs*)+0x14f>
c001f3c1:	83 ec 0c             	sub    esp,0xc
c001f3c4:	ff 36                	push   DWORD PTR [esi]
c001f3c6:	e8 c8 fa ff ff       	call   c001ee93 <Vm::fpu32ToInternal(unsigned int)>
c001f3cb:	e9 bf 00 00 00       	jmp    c001f48f <Vm::x87Handler(regs*)+0x20e>
c001f3d0:	80 fa 03             	cmp    dl,0x3
c001f3d3:	75 13                	jne    c001f3e8 <Vm::x87Handler(regs*)+0x167>
c001f3d5:	e8 55 fe ff ff       	call   c001f22f <Vm::fpuPop()>
c001f3da:	55                   	push   ebp
c001f3db:	55                   	push   ebp
c001f3dc:	52                   	push   edx
c001f3dd:	50                   	push   eax
c001f3de:	e8 4c fa ff ff       	call   c001ee2f <Vm::fpuInternalTo32(unsigned long long)>
c001f3e3:	e9 88 00 00 00       	jmp    c001f470 <Vm::x87Handler(regs*)+0x1ef>
c001f3e8:	80 fa 05             	cmp    dl,0x5
c001f3eb:	75 0e                	jne    c001f3fb <Vm::x87Handler(regs*)+0x17a>
c001f3ed:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f3f0:	66 a3 c2 0c 03 c0    	mov    ds:0xc0030cc2,ax
c001f3f6:	e9 df 00 00 00       	jmp    c001f4da <Vm::x87Handler(regs*)+0x259>
c001f3fb:	31 c0                	xor    eax,eax
c001f3fd:	80 fa 07             	cmp    dl,0x7
c001f400:	0f 85 dc 08 00 00    	jne    c001fce2 <Vm::x87Handler(regs*)+0xa61>
c001f406:	66 a1 c2 0c 03 c0    	mov    ax,ds:0xc0030cc2
c001f40c:	66 89 06             	mov    WORD PTR [esi],ax
c001f40f:	e9 c6 00 00 00       	jmp    c001f4da <Vm::x87Handler(regs*)+0x259>
c001f414:	80 fa d8             	cmp    dl,0xd8
c001f417:	0f 84 c9 00 00 00    	je     c001f4e6 <Vm::x87Handler(regs*)+0x265>
c001f41d:	80 fa dc             	cmp    dl,0xdc
c001f420:	0f 84 0d 02 00 00    	je     c001f633 <Vm::x87Handler(regs*)+0x3b2>
c001f426:	80 fa de             	cmp    dl,0xde
c001f429:	0f 84 cd 02 00 00    	je     c001f6fc <Vm::x87Handler(regs*)+0x47b>
c001f42f:	80 fa dd             	cmp    dl,0xdd
c001f432:	0f 84 5f 04 00 00    	je     c001f897 <Vm::x87Handler(regs*)+0x616>
c001f438:	80 fa da             	cmp    dl,0xda
c001f43b:	0f 84 24 05 00 00    	je     c001f965 <Vm::x87Handler(regs*)+0x6e4>
c001f441:	80 fa df             	cmp    dl,0xdf
c001f444:	0f 84 68 05 00 00    	je     c001f9b2 <Vm::x87Handler(regs*)+0x731>
c001f44a:	31 c0                	xor    eax,eax
c001f44c:	80 fa db             	cmp    dl,0xdb
c001f44f:	0f 85 8d 08 00 00    	jne    c001fce2 <Vm::x87Handler(regs*)+0xa61>
c001f455:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f459:	80 fa 03             	cmp    dl,0x3
c001f45c:	0f 85 70 06 00 00    	jne    c001fad2 <Vm::x87Handler(regs*)+0x851>
c001f462:	e8 c8 fd ff ff       	call   c001f22f <Vm::fpuPop()>
c001f467:	55                   	push   ebp
c001f468:	55                   	push   ebp
c001f469:	52                   	push   edx
c001f46a:	50                   	push   eax
c001f46b:	e8 71 fa ff ff       	call   c001eee1 <Vm::fpuFloatToLong(unsigned long long)>
c001f470:	83 c4 10             	add    esp,0x10
c001f473:	89 06                	mov    DWORD PTR [esi],eax
c001f475:	eb 63                	jmp    c001f4da <Vm::x87Handler(regs*)+0x259>
c001f477:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f47b:	84 d2                	test   dl,dl
c001f47d:	0f 85 e6 05 00 00    	jne    c001fa69 <Vm::x87Handler(regs*)+0x7e8>
c001f483:	57                   	push   edi
c001f484:	57                   	push   edi
c001f485:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f488:	ff 36                	push   DWORD PTR [esi]
c001f48a:	e8 49 fa ff ff       	call   c001eed8 <Vm::fpu64ToInternal(unsigned long long)>
c001f48f:	5e                   	pop    esi
c001f490:	5f                   	pop    edi
c001f491:	52                   	push   edx
c001f492:	50                   	push   eax
c001f493:	e8 3a fd ff ff       	call   c001f1d2 <Vm::fpuPush(unsigned long long)>
c001f498:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f49c:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f49f:	e9 51 fe ff ff       	jmp    c001f2f5 <Vm::x87Handler(regs*)+0x74>
c001f4a4:	80 fa 03             	cmp    dl,0x3
c001f4a7:	0f 85 d7 06 00 00    	jne    c001fb84 <Vm::x87Handler(regs*)+0x903>
c001f4ad:	57                   	push   edi
c001f4ae:	57                   	push   edi
c001f4af:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f4b2:	ff 36                	push   DWORD PTR [esi]
c001f4b4:	e8 1f fa ff ff       	call   c001eed8 <Vm::fpu64ToInternal(unsigned long long)>
c001f4b9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f4c0:	89 c6                	mov    esi,eax
c001f4c2:	89 d7                	mov    edi,edx
c001f4c4:	e8 7b fc ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001f4c9:	57                   	push   edi
c001f4ca:	56                   	push   esi
c001f4cb:	52                   	push   edx
c001f4cc:	50                   	push   eax
c001f4cd:	e8 95 fb ff ff       	call   c001f067 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f4d2:	83 c4 20             	add    esp,0x20
c001f4d5:	e8 55 fd ff ff       	call   c001f22f <Vm::fpuPop()>
c001f4da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f4de:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f4e1:	e9 12 fe ff ff       	jmp    c001f2f8 <Vm::x87Handler(regs*)+0x77>
c001f4e6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4ea:	8d 50 40             	lea    edx,[eax+0x40]
c001f4ed:	80 fa 07             	cmp    dl,0x7
c001f4f0:	77 29                	ja     c001f51b <Vm::x87Handler(regs*)+0x29a>
c001f4f2:	83 ec 0c             	sub    esp,0xc
c001f4f5:	2d c0 00 00 00       	sub    eax,0xc0
c001f4fa:	50                   	push   eax
c001f4fb:	e8 44 fc ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001f500:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f507:	89 c6                	mov    esi,eax
c001f509:	89 d7                	mov    edi,edx
c001f50b:	e8 34 fc ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001f510:	57                   	push   edi
c001f511:	56                   	push   esi
c001f512:	52                   	push   edx
c001f513:	50                   	push   eax
c001f514:	e8 a1 fb ff ff       	call   c001f0ba <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f519:	eb 2f                	jmp    c001f54a <Vm::x87Handler(regs*)+0x2c9>
c001f51b:	8d 50 38             	lea    edx,[eax+0x38]
c001f51e:	80 fa 07             	cmp    dl,0x7
c001f521:	77 2f                	ja     c001f552 <Vm::x87Handler(regs*)+0x2d1>
c001f523:	83 ec 0c             	sub    esp,0xc
c001f526:	2d c8 00 00 00       	sub    eax,0xc8
c001f52b:	50                   	push   eax
c001f52c:	e8 13 fc ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001f531:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f538:	89 c6                	mov    esi,eax
c001f53a:	89 d7                	mov    edi,edx
c001f53c:	e8 03 fc ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001f541:	57                   	push   edi
c001f542:	56                   	push   esi
c001f543:	52                   	push   edx
c001f544:	50                   	push   eax
c001f545:	e8 a9 fb ff ff       	call   c001f0f3 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f54a:	83 c4 1c             	add    esp,0x1c
c001f54d:	e9 d8 fd ff ff       	jmp    c001f32a <Vm::x87Handler(regs*)+0xa9>
c001f552:	8d 50 30             	lea    edx,[eax+0x30]
c001f555:	80 fa 07             	cmp    dl,0x7
c001f558:	77 0d                	ja     c001f567 <Vm::x87Handler(regs*)+0x2e6>
c001f55a:	83 ec 0c             	sub    esp,0xc
c001f55d:	2d d0 00 00 00       	sub    eax,0xd0
c001f562:	e9 99 03 00 00       	jmp    c001f900 <Vm::x87Handler(regs*)+0x67f>
c001f567:	8d 50 28             	lea    edx,[eax+0x28]
c001f56a:	80 fa 07             	cmp    dl,0x7
c001f56d:	77 0d                	ja     c001f57c <Vm::x87Handler(regs*)+0x2fb>
c001f56f:	83 ec 0c             	sub    esp,0xc
c001f572:	2d d8 00 00 00       	sub    eax,0xd8
c001f577:	e9 c0 03 00 00       	jmp    c001f93c <Vm::x87Handler(regs*)+0x6bb>
c001f57c:	8d 50 20             	lea    edx,[eax+0x20]
c001f57f:	80 fa 07             	cmp    dl,0x7
c001f582:	77 1b                	ja     c001f59f <Vm::x87Handler(regs*)+0x31e>
c001f584:	83 ec 0c             	sub    esp,0xc
c001f587:	2d e0 00 00 00       	sub    eax,0xe0
c001f58c:	50                   	push   eax
c001f58d:	e8 b2 fb ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001f592:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f599:	89 c6                	mov    esi,eax
c001f59b:	89 d7                	mov    edi,edx
c001f59d:	eb 22                	jmp    c001f5c1 <Vm::x87Handler(regs*)+0x340>
c001f59f:	8d 50 18             	lea    edx,[eax+0x18]
c001f5a2:	80 fa 07             	cmp    dl,0x7
c001f5a5:	77 2d                	ja     c001f5d4 <Vm::x87Handler(regs*)+0x353>
c001f5a7:	83 ec 0c             	sub    esp,0xc
c001f5aa:	6a 00                	push   0x0
c001f5ac:	e8 93 fb ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001f5b1:	89 c6                	mov    esi,eax
c001f5b3:	89 d7                	mov    edi,edx
c001f5b5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f5b9:	2d e8 00 00 00       	sub    eax,0xe8
c001f5be:	89 04 24             	mov    DWORD PTR [esp],eax
c001f5c1:	e8 7e fb ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001f5c6:	57                   	push   edi
c001f5c7:	56                   	push   esi
c001f5c8:	52                   	push   edx
c001f5c9:	50                   	push   eax
c001f5ca:	e8 15 fb ff ff       	call   c001f0e4 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f5cf:	e9 76 ff ff ff       	jmp    c001f54a <Vm::x87Handler(regs*)+0x2c9>
c001f5d4:	8d 50 10             	lea    edx,[eax+0x10]
c001f5d7:	80 fa 07             	cmp    dl,0x7
c001f5da:	77 1b                	ja     c001f5f7 <Vm::x87Handler(regs*)+0x376>
c001f5dc:	83 ec 0c             	sub    esp,0xc
c001f5df:	2d f0 00 00 00       	sub    eax,0xf0
c001f5e4:	50                   	push   eax
c001f5e5:	e8 5a fb ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001f5ea:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f5f1:	89 c6                	mov    esi,eax
c001f5f3:	89 d7                	mov    edi,edx
c001f5f5:	eb 22                	jmp    c001f619 <Vm::x87Handler(regs*)+0x398>
c001f5f7:	3c f7                	cmp    al,0xf7
c001f5f9:	0f 86 d1 03 00 00    	jbe    c001f9d0 <Vm::x87Handler(regs*)+0x74f>
c001f5ff:	83 ec 0c             	sub    esp,0xc
c001f602:	6a 00                	push   0x0
c001f604:	e8 3b fb ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001f609:	89 c6                	mov    esi,eax
c001f60b:	89 d7                	mov    edi,edx
c001f60d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f611:	2d f8 00 00 00       	sub    eax,0xf8
c001f616:	89 04 24             	mov    DWORD PTR [esp],eax
c001f619:	e8 26 fb ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001f61e:	57                   	push   edi
c001f61f:	56                   	push   esi
c001f620:	52                   	push   edx
c001f621:	50                   	push   eax
c001f622:	e8 eb fa ff ff       	call   c001f112 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f627:	83 c4 1c             	add    esp,0x1c
c001f62a:	52                   	push   edx
c001f62b:	50                   	push   eax
c001f62c:	6a 00                	push   0x0
c001f62e:	e9 51 02 00 00       	jmp    c001f884 <Vm::x87Handler(regs*)+0x603>
c001f633:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f637:	8d 50 40             	lea    edx,[eax+0x40]
c001f63a:	80 fa 07             	cmp    dl,0x7
c001f63d:	77 37                	ja     c001f676 <Vm::x87Handler(regs*)+0x3f5>
c001f63f:	83 ec 0c             	sub    esp,0xc
c001f642:	2d c0 00 00 00       	sub    eax,0xc0
c001f647:	50                   	push   eax
c001f648:	e8 f7 fa ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001f64d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f654:	89 c6                	mov    esi,eax
c001f656:	89 d7                	mov    edi,edx
c001f658:	e8 e7 fa ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001f65d:	57                   	push   edi
c001f65e:	56                   	push   esi
c001f65f:	52                   	push   edx
c001f660:	50                   	push   eax
c001f661:	e8 54 fa ff ff       	call   c001f0ba <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f666:	83 c4 1c             	add    esp,0x1c
c001f669:	52                   	push   edx
c001f66a:	50                   	push   eax
c001f66b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f66f:	2d c0 00 00 00       	sub    eax,0xc0
c001f674:	eb 3d                	jmp    c001f6b3 <Vm::x87Handler(regs*)+0x432>
c001f676:	8d 50 38             	lea    edx,[eax+0x38]
c001f679:	80 fa 07             	cmp    dl,0x7
c001f67c:	77 3b                	ja     c001f6b9 <Vm::x87Handler(regs*)+0x438>
c001f67e:	83 ec 0c             	sub    esp,0xc
c001f681:	2d c8 00 00 00       	sub    eax,0xc8
c001f686:	50                   	push   eax
c001f687:	e8 b8 fa ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001f68c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f693:	89 c6                	mov    esi,eax
c001f695:	89 d7                	mov    edi,edx
c001f697:	e8 a8 fa ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001f69c:	57                   	push   edi
c001f69d:	56                   	push   esi
c001f69e:	52                   	push   edx
c001f69f:	50                   	push   eax
c001f6a0:	e8 4e fa ff ff       	call   c001f0f3 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f6a5:	83 c4 1c             	add    esp,0x1c
c001f6a8:	52                   	push   edx
c001f6a9:	50                   	push   eax
c001f6aa:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6ae:	2d c8 00 00 00       	sub    eax,0xc8
c001f6b3:	50                   	push   eax
c001f6b4:	e9 75 fc ff ff       	jmp    c001f32e <Vm::x87Handler(regs*)+0xad>
c001f6b9:	83 c0 18             	add    eax,0x18
c001f6bc:	3c 07                	cmp    al,0x7
c001f6be:	0f 87 3b 04 00 00    	ja     c001faff <Vm::x87Handler(regs*)+0x87e>
c001f6c4:	83 ec 0c             	sub    esp,0xc
c001f6c7:	6a 00                	push   0x0
c001f6c9:	e8 76 fa ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001f6ce:	89 c6                	mov    esi,eax
c001f6d0:	89 d7                	mov    edi,edx
c001f6d2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6d6:	2d e8 00 00 00       	sub    eax,0xe8
c001f6db:	89 04 24             	mov    DWORD PTR [esp],eax
c001f6de:	e8 61 fa ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001f6e3:	57                   	push   edi
c001f6e4:	56                   	push   esi
c001f6e5:	52                   	push   edx
c001f6e6:	50                   	push   eax
c001f6e7:	e8 f8 f9 ff ff       	call   c001f0e4 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f6ec:	83 c4 1c             	add    esp,0x1c
c001f6ef:	52                   	push   edx
c001f6f0:	50                   	push   eax
c001f6f1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6f5:	2d e8 00 00 00       	sub    eax,0xe8
c001f6fa:	eb b7                	jmp    c001f6b3 <Vm::x87Handler(regs*)+0x432>
c001f6fc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f700:	8d 50 40             	lea    edx,[eax+0x40]
c001f703:	80 fa 07             	cmp    dl,0x7
c001f706:	77 3a                	ja     c001f742 <Vm::x87Handler(regs*)+0x4c1>
c001f708:	83 ec 0c             	sub    esp,0xc
c001f70b:	2d c0 00 00 00       	sub    eax,0xc0
c001f710:	50                   	push   eax
c001f711:	e8 2e fa ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001f716:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f71d:	89 c6                	mov    esi,eax
c001f71f:	89 d7                	mov    edi,edx
c001f721:	e8 1e fa ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001f726:	57                   	push   edi
c001f727:	56                   	push   esi
c001f728:	52                   	push   edx
c001f729:	50                   	push   eax
c001f72a:	e8 8b f9 ff ff       	call   c001f0ba <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f72f:	83 c4 1c             	add    esp,0x1c
c001f732:	52                   	push   edx
c001f733:	50                   	push   eax
c001f734:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f738:	2d c0 00 00 00       	sub    eax,0xc0
c001f73d:	e9 9e 01 00 00       	jmp    c001f8e0 <Vm::x87Handler(regs*)+0x65f>
c001f742:	8d 50 20             	lea    edx,[eax+0x20]
c001f745:	80 fa 07             	cmp    dl,0x7
c001f748:	77 3a                	ja     c001f784 <Vm::x87Handler(regs*)+0x503>
c001f74a:	83 ec 0c             	sub    esp,0xc
c001f74d:	2d e0 00 00 00       	sub    eax,0xe0
c001f752:	50                   	push   eax
c001f753:	e8 ec f9 ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001f758:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f75f:	89 c6                	mov    esi,eax
c001f761:	89 d7                	mov    edi,edx
c001f763:	e8 dc f9 ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001f768:	57                   	push   edi
c001f769:	56                   	push   esi
c001f76a:	52                   	push   edx
c001f76b:	50                   	push   eax
c001f76c:	e8 73 f9 ff ff       	call   c001f0e4 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f771:	83 c4 1c             	add    esp,0x1c
c001f774:	52                   	push   edx
c001f775:	50                   	push   eax
c001f776:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f77a:	2d e0 00 00 00       	sub    eax,0xe0
c001f77f:	e9 5c 01 00 00       	jmp    c001f8e0 <Vm::x87Handler(regs*)+0x65f>
c001f784:	8d 50 18             	lea    edx,[eax+0x18]
c001f787:	80 fa 07             	cmp    dl,0x7
c001f78a:	77 3b                	ja     c001f7c7 <Vm::x87Handler(regs*)+0x546>
c001f78c:	83 ec 0c             	sub    esp,0xc
c001f78f:	6a 00                	push   0x0
c001f791:	e8 ae f9 ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001f796:	89 c6                	mov    esi,eax
c001f798:	89 d7                	mov    edi,edx
c001f79a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f79e:	2d e8 00 00 00       	sub    eax,0xe8
c001f7a3:	89 04 24             	mov    DWORD PTR [esp],eax
c001f7a6:	e8 99 f9 ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001f7ab:	57                   	push   edi
c001f7ac:	56                   	push   esi
c001f7ad:	52                   	push   edx
c001f7ae:	50                   	push   eax
c001f7af:	e8 30 f9 ff ff       	call   c001f0e4 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f7b4:	83 c4 1c             	add    esp,0x1c
c001f7b7:	52                   	push   edx
c001f7b8:	50                   	push   eax
c001f7b9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7bd:	2d e8 00 00 00       	sub    eax,0xe8
c001f7c2:	e9 19 01 00 00       	jmp    c001f8e0 <Vm::x87Handler(regs*)+0x65f>
c001f7c7:	8d 50 38             	lea    edx,[eax+0x38]
c001f7ca:	80 fa 07             	cmp    dl,0x7
c001f7cd:	77 37                	ja     c001f806 <Vm::x87Handler(regs*)+0x585>
c001f7cf:	83 ec 0c             	sub    esp,0xc
c001f7d2:	2d c8 00 00 00       	sub    eax,0xc8
c001f7d7:	50                   	push   eax
c001f7d8:	e8 67 f9 ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001f7dd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f7e4:	89 c6                	mov    esi,eax
c001f7e6:	89 d7                	mov    edi,edx
c001f7e8:	e8 57 f9 ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001f7ed:	57                   	push   edi
c001f7ee:	56                   	push   esi
c001f7ef:	52                   	push   edx
c001f7f0:	50                   	push   eax
c001f7f1:	e8 fd f8 ff ff       	call   c001f0f3 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f7f6:	83 c4 1c             	add    esp,0x1c
c001f7f9:	52                   	push   edx
c001f7fa:	50                   	push   eax
c001f7fb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7ff:	2d c8 00 00 00       	sub    eax,0xc8
c001f804:	eb 7d                	jmp    c001f883 <Vm::x87Handler(regs*)+0x602>
c001f806:	3c f7                	cmp    al,0xf7
c001f808:	76 38                	jbe    c001f842 <Vm::x87Handler(regs*)+0x5c1>
c001f80a:	83 ec 0c             	sub    esp,0xc
c001f80d:	6a 00                	push   0x0
c001f80f:	e8 30 f9 ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001f814:	89 c6                	mov    esi,eax
c001f816:	89 d7                	mov    edi,edx
c001f818:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f81c:	2d f8 00 00 00       	sub    eax,0xf8
c001f821:	89 04 24             	mov    DWORD PTR [esp],eax
c001f824:	e8 1b f9 ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001f829:	57                   	push   edi
c001f82a:	56                   	push   esi
c001f82b:	52                   	push   edx
c001f82c:	50                   	push   eax
c001f82d:	e8 e0 f8 ff ff       	call   c001f112 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f832:	83 c4 1c             	add    esp,0x1c
c001f835:	52                   	push   edx
c001f836:	50                   	push   eax
c001f837:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f83b:	2d f8 00 00 00       	sub    eax,0xf8
c001f840:	eb 41                	jmp    c001f883 <Vm::x87Handler(regs*)+0x602>
c001f842:	8d 50 10             	lea    edx,[eax+0x10]
c001f845:	80 fa 07             	cmp    dl,0x7
c001f848:	0f 87 5a 01 00 00    	ja     c001f9a8 <Vm::x87Handler(regs*)+0x727>
c001f84e:	83 ec 0c             	sub    esp,0xc
c001f851:	2d f0 00 00 00       	sub    eax,0xf0
c001f856:	50                   	push   eax
c001f857:	e8 e8 f8 ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001f85c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f863:	89 c6                	mov    esi,eax
c001f865:	89 d7                	mov    edi,edx
c001f867:	e8 d8 f8 ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001f86c:	57                   	push   edi
c001f86d:	56                   	push   esi
c001f86e:	52                   	push   edx
c001f86f:	50                   	push   eax
c001f870:	e8 9d f8 ff ff       	call   c001f112 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f875:	83 c4 1c             	add    esp,0x1c
c001f878:	52                   	push   edx
c001f879:	50                   	push   eax
c001f87a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f87e:	2d f0 00 00 00       	sub    eax,0xf0
c001f883:	50                   	push   eax
c001f884:	e8 fe f8 ff ff       	call   c001f187 <Vm::fpuSetReg(int, unsigned long long)>
c001f889:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f88d:	e8 9d f9 ff ff       	call   c001f22f <Vm::fpuPop()>
c001f892:	e9 5e fa ff ff       	jmp    c001f2f5 <Vm::x87Handler(regs*)+0x74>
c001f897:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f89b:	8d 50 30             	lea    edx,[eax+0x30]
c001f89e:	80 fa 07             	cmp    dl,0x7
c001f8a1:	77 1d                	ja     c001f8c0 <Vm::x87Handler(regs*)+0x63f>
c001f8a3:	83 ec 0c             	sub    esp,0xc
c001f8a6:	6a 00                	push   0x0
c001f8a8:	e8 97 f8 ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001f8ad:	83 c4 0c             	add    esp,0xc
c001f8b0:	52                   	push   edx
c001f8b1:	50                   	push   eax
c001f8b2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8b6:	2d d0 00 00 00       	sub    eax,0xd0
c001f8bb:	e9 f3 fd ff ff       	jmp    c001f6b3 <Vm::x87Handler(regs*)+0x432>
c001f8c0:	8d 50 28             	lea    edx,[eax+0x28]
c001f8c3:	80 fa 07             	cmp    dl,0x7
c001f8c6:	77 28                	ja     c001f8f0 <Vm::x87Handler(regs*)+0x66f>
c001f8c8:	83 ec 0c             	sub    esp,0xc
c001f8cb:	6a 00                	push   0x0
c001f8cd:	e8 72 f8 ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001f8d2:	83 c4 0c             	add    esp,0xc
c001f8d5:	52                   	push   edx
c001f8d6:	50                   	push   eax
c001f8d7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8db:	2d d8 00 00 00       	sub    eax,0xd8
c001f8e0:	50                   	push   eax
c001f8e1:	e8 a1 f8 ff ff       	call   c001f187 <Vm::fpuSetReg(int, unsigned long long)>
c001f8e6:	e8 44 f9 ff ff       	call   c001f22f <Vm::fpuPop()>
c001f8eb:	e9 01 fa ff ff       	jmp    c001f2f1 <Vm::x87Handler(regs*)+0x70>
c001f8f0:	8d 50 20             	lea    edx,[eax+0x20]
c001f8f3:	80 fa 07             	cmp    dl,0x7
c001f8f6:	77 30                	ja     c001f928 <Vm::x87Handler(regs*)+0x6a7>
c001f8f8:	83 ec 0c             	sub    esp,0xc
c001f8fb:	2d e0 00 00 00       	sub    eax,0xe0
c001f900:	50                   	push   eax
c001f901:	e8 3e f8 ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001f906:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f90d:	89 c6                	mov    esi,eax
c001f90f:	89 d7                	mov    edi,edx
c001f911:	e8 2e f8 ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001f916:	57                   	push   edi
c001f917:	56                   	push   esi
c001f918:	52                   	push   edx
c001f919:	50                   	push   eax
c001f91a:	e8 48 f7 ff ff       	call   c001f067 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f91f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f923:	e9 54 02 00 00       	jmp    c001fb7c <Vm::x87Handler(regs*)+0x8fb>
c001f928:	8d 50 18             	lea    edx,[eax+0x18]
c001f92b:	80 fa 07             	cmp    dl,0x7
c001f92e:	0f 87 43 fb ff ff    	ja     c001f477 <Vm::x87Handler(regs*)+0x1f6>
c001f934:	83 ec 0c             	sub    esp,0xc
c001f937:	2d e8 00 00 00       	sub    eax,0xe8
c001f93c:	50                   	push   eax
c001f93d:	e8 02 f8 ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001f942:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f949:	89 c6                	mov    esi,eax
c001f94b:	89 d7                	mov    edi,edx
c001f94d:	e8 f2 f7 ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001f952:	57                   	push   edi
c001f953:	56                   	push   esi
c001f954:	52                   	push   edx
c001f955:	50                   	push   eax
c001f956:	e8 0c f7 ff ff       	call   c001f067 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f95b:	83 c4 20             	add    esp,0x20
c001f95e:	e8 cc f8 ff ff       	call   c001f22f <Vm::fpuPop()>
c001f963:	eb 62                	jmp    c001f9c7 <Vm::x87Handler(regs*)+0x746>
c001f965:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001f969:	0f 85 0f 01 00 00    	jne    c001fa7e <Vm::x87Handler(regs*)+0x7fd>
c001f96f:	83 ec 0c             	sub    esp,0xc
c001f972:	6a 01                	push   0x1
c001f974:	e8 cb f7 ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001f979:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f980:	89 c6                	mov    esi,eax
c001f982:	89 d7                	mov    edi,edx
c001f984:	e8 bb f7 ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001f989:	57                   	push   edi
c001f98a:	56                   	push   esi
c001f98b:	52                   	push   edx
c001f98c:	50                   	push   eax
c001f98d:	e8 d5 f6 ff ff       	call   c001f067 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f992:	83 c4 20             	add    esp,0x20
c001f995:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f999:	e8 91 f8 ff ff       	call   c001f22f <Vm::fpuPop()>
c001f99e:	e8 8c f8 ff ff       	call   c001f22f <Vm::fpuPop()>
c001f9a3:	e9 50 f9 ff ff       	jmp    c001f2f8 <Vm::x87Handler(regs*)+0x77>
c001f9a8:	3c d9                	cmp    al,0xd9
c001f9aa:	0f 85 b5 02 00 00    	jne    c001fc65 <Vm::x87Handler(regs*)+0x9e4>
c001f9b0:	eb bd                	jmp    c001f96f <Vm::x87Handler(regs*)+0x6ee>
c001f9b2:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001f9b6:	0f 85 ea 02 00 00    	jne    c001fca6 <Vm::x87Handler(regs*)+0xa25>
c001f9bc:	0f b7 05 c0 0c 03 c0 	movzx  eax,WORD PTR ds:0xc0030cc0
c001f9c3:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001f9c7:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f9cb:	e9 28 f9 ff ff       	jmp    c001f2f8 <Vm::x87Handler(regs*)+0x77>
c001f9d0:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f9d4:	84 d2                	test   dl,dl
c001f9d6:	75 0f                	jne    c001f9e7 <Vm::x87Handler(regs*)+0x766>
c001f9d8:	83 ec 0c             	sub    esp,0xc
c001f9db:	ff 36                	push   DWORD PTR [esi]
c001f9dd:	e8 b1 f4 ff ff       	call   c001ee93 <Vm::fpu32ToInternal(unsigned int)>
c001f9e2:	e9 2c 01 00 00       	jmp    c001fb13 <Vm::x87Handler(regs*)+0x892>
c001f9e7:	80 fa 01             	cmp    dl,0x1
c001f9ea:	75 0f                	jne    c001f9fb <Vm::x87Handler(regs*)+0x77a>
c001f9ec:	83 ec 0c             	sub    esp,0xc
c001f9ef:	ff 36                	push   DWORD PTR [esi]
c001f9f1:	e8 9d f4 ff ff       	call   c001ee93 <Vm::fpu32ToInternal(unsigned int)>
c001f9f6:	e9 81 02 00 00       	jmp    c001fc7c <Vm::x87Handler(regs*)+0x9fb>
c001f9fb:	80 fa 04             	cmp    dl,0x4
c001f9fe:	75 0f                	jne    c001fa0f <Vm::x87Handler(regs*)+0x78e>
c001fa00:	83 ec 0c             	sub    esp,0xc
c001fa03:	ff 36                	push   DWORD PTR [esi]
c001fa05:	e8 89 f4 ff ff       	call   c001ee93 <Vm::fpu32ToInternal(unsigned int)>
c001fa0a:	e9 86 01 00 00       	jmp    c001fb95 <Vm::x87Handler(regs*)+0x914>
c001fa0f:	80 fa 05             	cmp    dl,0x5
c001fa12:	75 1b                	jne    c001fa2f <Vm::x87Handler(regs*)+0x7ae>
c001fa14:	83 ec 0c             	sub    esp,0xc
c001fa17:	6a 00                	push   0x0
c001fa19:	e8 26 f7 ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001fa1e:	89 c7                	mov    edi,eax
c001fa20:	89 d5                	mov    ebp,edx
c001fa22:	58                   	pop    eax
c001fa23:	ff 36                	push   DWORD PTR [esi]
c001fa25:	e8 69 f4 ff ff       	call   c001ee93 <Vm::fpu32ToInternal(unsigned int)>
c001fa2a:	e9 a3 01 00 00       	jmp    c001fbd2 <Vm::x87Handler(regs*)+0x951>
c001fa2f:	80 fa 06             	cmp    dl,0x6
c001fa32:	75 0f                	jne    c001fa43 <Vm::x87Handler(regs*)+0x7c2>
c001fa34:	83 ec 0c             	sub    esp,0xc
c001fa37:	ff 36                	push   DWORD PTR [esi]
c001fa39:	e8 55 f4 ff ff       	call   c001ee93 <Vm::fpu32ToInternal(unsigned int)>
c001fa3e:	e9 ae 01 00 00       	jmp    c001fbf1 <Vm::x87Handler(regs*)+0x970>
c001fa43:	31 c0                	xor    eax,eax
c001fa45:	80 fa 07             	cmp    dl,0x7
c001fa48:	0f 85 94 02 00 00    	jne    c001fce2 <Vm::x87Handler(regs*)+0xa61>
c001fa4e:	83 ec 0c             	sub    esp,0xc
c001fa51:	6a 00                	push   0x0
c001fa53:	e8 ec f6 ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001fa58:	89 c7                	mov    edi,eax
c001fa5a:	89 d5                	mov    ebp,edx
c001fa5c:	58                   	pop    eax
c001fa5d:	ff 36                	push   DWORD PTR [esi]
c001fa5f:	e8 2f f4 ff ff       	call   c001ee93 <Vm::fpu32ToInternal(unsigned int)>
c001fa64:	e9 cb 01 00 00       	jmp    c001fc34 <Vm::x87Handler(regs*)+0x9b3>
c001fa69:	80 fa 03             	cmp    dl,0x3
c001fa6c:	0f 85 d3 01 00 00    	jne    c001fc45 <Vm::x87Handler(regs*)+0x9c4>
c001fa72:	e8 b8 f7 ff ff       	call   c001f22f <Vm::fpuPop()>
c001fa77:	51                   	push   ecx
c001fa78:	51                   	push   ecx
c001fa79:	e9 de 01 00 00       	jmp    c001fc5c <Vm::x87Handler(regs*)+0x9db>
c001fa7e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fa82:	80 fa 01             	cmp    dl,0x1
c001fa85:	75 09                	jne    c001fa90 <Vm::x87Handler(regs*)+0x80f>
c001fa87:	57                   	push   edi
c001fa88:	57                   	push   edi
c001fa89:	8b 06                	mov    eax,DWORD PTR [esi]
c001fa8b:	e9 e3 01 00 00       	jmp    c001fc73 <Vm::x87Handler(regs*)+0x9f2>
c001fa90:	80 fa 04             	cmp    dl,0x4
c001fa93:	75 12                	jne    c001faa7 <Vm::x87Handler(regs*)+0x826>
c001fa95:	31 d2                	xor    edx,edx
c001fa97:	51                   	push   ecx
c001fa98:	51                   	push   ecx
c001fa99:	8b 06                	mov    eax,DWORD PTR [esi]
c001fa9b:	52                   	push   edx
c001fa9c:	50                   	push   eax
c001fa9d:	e8 d0 f4 ff ff       	call   c001ef72 <Vm::fpuLongToFloat(long long)>
c001faa2:	e9 ee 00 00 00       	jmp    c001fb95 <Vm::x87Handler(regs*)+0x914>
c001faa7:	31 c0                	xor    eax,eax
c001faa9:	80 fa 07             	cmp    dl,0x7
c001faac:	0f 85 30 02 00 00    	jne    c001fce2 <Vm::x87Handler(regs*)+0xa61>
c001fab2:	83 ec 0c             	sub    esp,0xc
c001fab5:	6a 00                	push   0x0
c001fab7:	e8 88 f6 ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001fabc:	89 c7                	mov    edi,eax
c001fabe:	89 d5                	mov    ebp,edx
c001fac0:	58                   	pop    eax
c001fac1:	8b 06                	mov    eax,DWORD PTR [esi]
c001fac3:	5a                   	pop    edx
c001fac4:	31 d2                	xor    edx,edx
c001fac6:	52                   	push   edx
c001fac7:	50                   	push   eax
c001fac8:	e8 a5 f4 ff ff       	call   c001ef72 <Vm::fpuLongToFloat(long long)>
c001facd:	e9 62 01 00 00       	jmp    c001fc34 <Vm::x87Handler(regs*)+0x9b3>
c001fad2:	84 d2                	test   dl,dl
c001fad4:	75 0d                	jne    c001fae3 <Vm::x87Handler(regs*)+0x862>
c001fad6:	31 d2                	xor    edx,edx
c001fad8:	55                   	push   ebp
c001fad9:	55                   	push   ebp
c001fada:	8b 06                	mov    eax,DWORD PTR [esi]
c001fadc:	52                   	push   edx
c001fadd:	50                   	push   eax
c001fade:	e9 d3 01 00 00       	jmp    c001fcb6 <Vm::x87Handler(regs*)+0xa35>
c001fae3:	31 c0                	xor    eax,eax
c001fae5:	80 fa 02             	cmp    dl,0x2
c001fae8:	0f 85 f4 01 00 00    	jne    c001fce2 <Vm::x87Handler(regs*)+0xa61>
c001faee:	83 ec 0c             	sub    esp,0xc
c001faf1:	6a 00                	push   0x0
c001faf3:	e8 4c f6 ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001faf8:	59                   	pop    ecx
c001faf9:	5f                   	pop    edi
c001fafa:	e9 6a f9 ff ff       	jmp    c001f469 <Vm::x87Handler(regs*)+0x1e8>
c001faff:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fb03:	84 d2                	test   dl,dl
c001fb05:	75 2a                	jne    c001fb31 <Vm::x87Handler(regs*)+0x8b0>
c001fb07:	50                   	push   eax
c001fb08:	50                   	push   eax
c001fb09:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb0c:	ff 36                	push   DWORD PTR [esi]
c001fb0e:	e8 c5 f3 ff ff       	call   c001eed8 <Vm::fpu64ToInternal(unsigned long long)>
c001fb13:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb1a:	89 c6                	mov    esi,eax
c001fb1c:	89 d7                	mov    edi,edx
c001fb1e:	e8 21 f6 ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001fb23:	57                   	push   edi
c001fb24:	56                   	push   esi
c001fb25:	52                   	push   edx
c001fb26:	50                   	push   eax
c001fb27:	e8 8e f5 ff ff       	call   c001f0ba <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fb2c:	e9 64 01 00 00       	jmp    c001fc95 <Vm::x87Handler(regs*)+0xa14>
c001fb31:	80 fa 01             	cmp    dl,0x1
c001fb34:	75 11                	jne    c001fb47 <Vm::x87Handler(regs*)+0x8c6>
c001fb36:	50                   	push   eax
c001fb37:	50                   	push   eax
c001fb38:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb3b:	ff 36                	push   DWORD PTR [esi]
c001fb3d:	e8 96 f3 ff ff       	call   c001eed8 <Vm::fpu64ToInternal(unsigned long long)>
c001fb42:	e9 35 01 00 00       	jmp    c001fc7c <Vm::x87Handler(regs*)+0x9fb>
c001fb47:	80 fa 02             	cmp    dl,0x2
c001fb4a:	0f 85 54 f9 ff ff    	jne    c001f4a4 <Vm::x87Handler(regs*)+0x223>
c001fb50:	55                   	push   ebp
c001fb51:	55                   	push   ebp
c001fb52:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb55:	ff 36                	push   DWORD PTR [esi]
c001fb57:	e8 7c f3 ff ff       	call   c001eed8 <Vm::fpu64ToInternal(unsigned long long)>
c001fb5c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb63:	89 c6                	mov    esi,eax
c001fb65:	89 d7                	mov    edi,edx
c001fb67:	e8 d8 f5 ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001fb6c:	57                   	push   edi
c001fb6d:	56                   	push   esi
c001fb6e:	52                   	push   edx
c001fb6f:	50                   	push   eax
c001fb70:	e8 f2 f4 ff ff       	call   c001f067 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fb75:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fb79:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fb7c:	83 c4 20             	add    esp,0x20
c001fb7f:	e9 74 f7 ff ff       	jmp    c001f2f8 <Vm::x87Handler(regs*)+0x77>
c001fb84:	80 fa 04             	cmp    dl,0x4
c001fb87:	75 2a                	jne    c001fbb3 <Vm::x87Handler(regs*)+0x932>
c001fb89:	51                   	push   ecx
c001fb8a:	51                   	push   ecx
c001fb8b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb8e:	ff 36                	push   DWORD PTR [esi]
c001fb90:	e8 43 f3 ff ff       	call   c001eed8 <Vm::fpu64ToInternal(unsigned long long)>
c001fb95:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb9c:	89 c6                	mov    esi,eax
c001fb9e:	89 d7                	mov    edi,edx
c001fba0:	e8 9f f5 ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001fba5:	57                   	push   edi
c001fba6:	56                   	push   esi
c001fba7:	52                   	push   edx
c001fba8:	50                   	push   eax
c001fba9:	e8 36 f5 ff ff       	call   c001f0e4 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fbae:	e9 e2 00 00 00       	jmp    c001fc95 <Vm::x87Handler(regs*)+0xa14>
c001fbb3:	80 fa 05             	cmp    dl,0x5
c001fbb6:	75 28                	jne    c001fbe0 <Vm::x87Handler(regs*)+0x95f>
c001fbb8:	83 ec 0c             	sub    esp,0xc
c001fbbb:	6a 00                	push   0x0
c001fbbd:	e8 82 f5 ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001fbc2:	89 c7                	mov    edi,eax
c001fbc4:	89 d5                	mov    ebp,edx
c001fbc6:	58                   	pop    eax
c001fbc7:	5a                   	pop    edx
c001fbc8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fbcb:	ff 36                	push   DWORD PTR [esi]
c001fbcd:	e8 06 f3 ff ff       	call   c001eed8 <Vm::fpu64ToInternal(unsigned long long)>
c001fbd2:	83 c4 10             	add    esp,0x10
c001fbd5:	55                   	push   ebp
c001fbd6:	57                   	push   edi
c001fbd7:	52                   	push   edx
c001fbd8:	50                   	push   eax
c001fbd9:	e8 06 f5 ff ff       	call   c001f0e4 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fbde:	eb 60                	jmp    c001fc40 <Vm::x87Handler(regs*)+0x9bf>
c001fbe0:	80 fa 06             	cmp    dl,0x6
c001fbe3:	75 2a                	jne    c001fc0f <Vm::x87Handler(regs*)+0x98e>
c001fbe5:	51                   	push   ecx
c001fbe6:	51                   	push   ecx
c001fbe7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fbea:	ff 36                	push   DWORD PTR [esi]
c001fbec:	e8 e7 f2 ff ff       	call   c001eed8 <Vm::fpu64ToInternal(unsigned long long)>
c001fbf1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbf8:	89 c6                	mov    esi,eax
c001fbfa:	89 d7                	mov    edi,edx
c001fbfc:	e8 43 f5 ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001fc01:	57                   	push   edi
c001fc02:	56                   	push   esi
c001fc03:	52                   	push   edx
c001fc04:	50                   	push   eax
c001fc05:	e8 08 f5 ff ff       	call   c001f112 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fc0a:	e9 86 00 00 00       	jmp    c001fc95 <Vm::x87Handler(regs*)+0xa14>
c001fc0f:	31 c0                	xor    eax,eax
c001fc11:	80 fa 07             	cmp    dl,0x7
c001fc14:	0f 85 c8 00 00 00    	jne    c001fce2 <Vm::x87Handler(regs*)+0xa61>
c001fc1a:	83 ec 0c             	sub    esp,0xc
c001fc1d:	6a 00                	push   0x0
c001fc1f:	e8 20 f5 ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001fc24:	89 c7                	mov    edi,eax
c001fc26:	89 d5                	mov    ebp,edx
c001fc28:	58                   	pop    eax
c001fc29:	5a                   	pop    edx
c001fc2a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc2d:	ff 36                	push   DWORD PTR [esi]
c001fc2f:	e8 a4 f2 ff ff       	call   c001eed8 <Vm::fpu64ToInternal(unsigned long long)>
c001fc34:	83 c4 10             	add    esp,0x10
c001fc37:	55                   	push   ebp
c001fc38:	57                   	push   edi
c001fc39:	52                   	push   edx
c001fc3a:	50                   	push   eax
c001fc3b:	e8 d2 f4 ff ff       	call   c001f112 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fc40:	83 c4 0c             	add    esp,0xc
c001fc43:	eb 53                	jmp    c001fc98 <Vm::x87Handler(regs*)+0xa17>
c001fc45:	31 c0                	xor    eax,eax
c001fc47:	80 fa 02             	cmp    dl,0x2
c001fc4a:	0f 85 92 00 00 00    	jne    c001fce2 <Vm::x87Handler(regs*)+0xa61>
c001fc50:	83 ec 0c             	sub    esp,0xc
c001fc53:	6a 00                	push   0x0
c001fc55:	e8 ea f4 ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001fc5a:	59                   	pop    ecx
c001fc5b:	5f                   	pop    edi
c001fc5c:	52                   	push   edx
c001fc5d:	50                   	push   eax
c001fc5e:	e8 27 f2 ff ff       	call   c001ee8a <Vm::fpuInternalTo64(unsigned long long)>
c001fc63:	eb 70                	jmp    c001fcd5 <Vm::x87Handler(regs*)+0xa54>
c001fc65:	31 c0                	xor    eax,eax
c001fc67:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001fc6c:	75 74                	jne    c001fce2 <Vm::x87Handler(regs*)+0xa61>
c001fc6e:	50                   	push   eax
c001fc6f:	50                   	push   eax
c001fc70:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001fc73:	31 d2                	xor    edx,edx
c001fc75:	52                   	push   edx
c001fc76:	50                   	push   eax
c001fc77:	e8 f6 f2 ff ff       	call   c001ef72 <Vm::fpuLongToFloat(long long)>
c001fc7c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc83:	89 c6                	mov    esi,eax
c001fc85:	89 d7                	mov    edi,edx
c001fc87:	e8 b8 f4 ff ff       	call   c001f144 <Vm::fpuGetReg(int)>
c001fc8c:	57                   	push   edi
c001fc8d:	56                   	push   esi
c001fc8e:	52                   	push   edx
c001fc8f:	50                   	push   eax
c001fc90:	e8 5e f4 ff ff       	call   c001f0f3 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fc95:	83 c4 1c             	add    esp,0x1c
c001fc98:	52                   	push   edx
c001fc99:	50                   	push   eax
c001fc9a:	6a 00                	push   0x0
c001fc9c:	e8 e6 f4 ff ff       	call   c001f187 <Vm::fpuSetReg(int, unsigned long long)>
c001fca1:	e9 f2 f7 ff ff       	jmp    c001f498 <Vm::x87Handler(regs*)+0x217>
c001fca6:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fcaa:	80 fa 05             	cmp    dl,0x5
c001fcad:	75 11                	jne    c001fcc0 <Vm::x87Handler(regs*)+0xa3f>
c001fcaf:	55                   	push   ebp
c001fcb0:	55                   	push   ebp
c001fcb1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fcb4:	ff 36                	push   DWORD PTR [esi]
c001fcb6:	e8 81 f2 ff ff       	call   c001ef3c <Vm::fpuULongToFloat(unsigned long long)>
c001fcbb:	e9 cf f7 ff ff       	jmp    c001f48f <Vm::x87Handler(regs*)+0x20e>
c001fcc0:	31 c0                	xor    eax,eax
c001fcc2:	80 fa 07             	cmp    dl,0x7
c001fcc5:	75 1b                	jne    c001fce2 <Vm::x87Handler(regs*)+0xa61>
c001fcc7:	e8 63 f5 ff ff       	call   c001f22f <Vm::fpuPop()>
c001fccc:	51                   	push   ecx
c001fccd:	51                   	push   ecx
c001fcce:	52                   	push   edx
c001fccf:	50                   	push   eax
c001fcd0:	e8 0c f2 ff ff       	call   c001eee1 <Vm::fpuFloatToLong(unsigned long long)>
c001fcd5:	83 c4 10             	add    esp,0x10
c001fcd8:	89 06                	mov    DWORD PTR [esi],eax
c001fcda:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001fcdd:	e9 f8 f7 ff ff       	jmp    c001f4da <Vm::x87Handler(regs*)+0x259>
c001fce2:	83 c4 1c             	add    esp,0x1c
c001fce5:	5b                   	pop    ebx
c001fce6:	5e                   	pop    esi
c001fce7:	5f                   	pop    edi
c001fce8:	5d                   	pop    ebp
c001fce9:	c3                   	ret    

c001fcea <__static_initialization_and_destruction_0(int, int)>:
c001fcea:	83 ec 0c             	sub    esp,0xc
c001fced:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001fcf2:	75 1a                	jne    c001fd0e <__static_initialization_and_destruction_0(int, int)+0x24>
c001fcf4:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001fcfc:	75 10                	jne    c001fd0e <__static_initialization_and_destruction_0(int, int)+0x24>
c001fcfe:	83 ec 0c             	sub    esp,0xc
c001fd01:	68 c0 0c 03 c0       	push   0xc0030cc0
c001fd06:	e8 ff 8c 00 00       	call   c0028a0a <Vm::_FPUState::_FPUState()>
c001fd0b:	83 c4 10             	add    esp,0x10
c001fd0e:	90                   	nop
c001fd0f:	83 c4 0c             	add    esp,0xc
c001fd12:	c3                   	ret    

c001fd13 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001fd13:	83 ec 0c             	sub    esp,0xc
c001fd16:	83 ec 08             	sub    esp,0x8
c001fd19:	68 ff ff 00 00       	push   0xffff
c001fd1e:	6a 01                	push   0x1
c001fd20:	e8 c5 ff ff ff       	call   c001fcea <__static_initialization_and_destruction_0(int, int)>
c001fd25:	83 c4 10             	add    esp,0x10
c001fd28:	83 c4 0c             	add    esp,0xc
c001fd2b:	c3                   	ret    

c001fd2c <FAT::getName()>:
c001fd2c:	b8 b0 bb 02 c0       	mov    eax,0xc002bbb0
c001fd31:	c3                   	ret    

c001fd32 <FAT::tell(void*, unsigned long long*)>:
c001fd32:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fd37:	75 06                	jne    c001fd3f <FAT::tell(void*, unsigned long long*)+0xd>
c001fd39:	b8 04 00 00 00       	mov    eax,0x4
c001fd3e:	c3                   	ret    
c001fd3f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fd44:	75 06                	jne    c001fd4c <FAT::tell(void*, unsigned long long*)+0x1a>
c001fd46:	b8 04 00 00 00       	mov    eax,0x4
c001fd4b:	c3                   	ret    
c001fd4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fd50:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001fd53:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001fd56:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fd5a:	89 01                	mov    DWORD PTR [ecx],eax
c001fd5c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fd5f:	b8 00 00 00 00       	mov    eax,0x0
c001fd64:	c3                   	ret    
c001fd65:	90                   	nop

c001fd66 <FAT::stat(void*, unsigned long long*)>:
c001fd66:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fd6b:	75 06                	jne    c001fd73 <FAT::stat(void*, unsigned long long*)+0xd>
c001fd6d:	b8 04 00 00 00       	mov    eax,0x4
c001fd72:	c3                   	ret    
c001fd73:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fd78:	75 06                	jne    c001fd80 <FAT::stat(void*, unsigned long long*)+0x1a>
c001fd7a:	b8 04 00 00 00       	mov    eax,0x4
c001fd7f:	c3                   	ret    
c001fd80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fd84:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001fd87:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001fd8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fd8e:	89 01                	mov    DWORD PTR [ecx],eax
c001fd90:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fd93:	b8 00 00 00 00       	mov    eax,0x0
c001fd98:	c3                   	ret    
c001fd99:	90                   	nop

c001fd9a <FAT::~FAT()>:
c001fd9a:	83 ec 0c             	sub    esp,0xc
c001fd9d:	ba fc bb 02 c0       	mov    edx,0xc002bbfc
c001fda2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fda6:	89 10                	mov    DWORD PTR [eax],edx
c001fda8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdac:	83 ec 0c             	sub    esp,0xc
c001fdaf:	50                   	push   eax
c001fdb0:	e8 43 2b ff ff       	call   c00128f8 <Filesystem::~Filesystem()>
c001fdb5:	83 c4 10             	add    esp,0x10
c001fdb8:	90                   	nop
c001fdb9:	83 c4 0c             	add    esp,0xc
c001fdbc:	c3                   	ret    
c001fdbd:	90                   	nop

c001fdbe <FAT::~FAT()>:
c001fdbe:	83 ec 0c             	sub    esp,0xc
c001fdc1:	83 ec 0c             	sub    esp,0xc
c001fdc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdc8:	e8 cd ff ff ff       	call   c001fd9a <FAT::~FAT()>
c001fdcd:	83 c4 10             	add    esp,0x10
c001fdd0:	83 ec 08             	sub    esp,0x8
c001fdd3:	6a 08                	push   0x8
c001fdd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdd9:	e8 13 27 ff ff       	call   c00124f1 <operator delete(void*, unsigned long)>
c001fdde:	83 c4 10             	add    esp,0x10
c001fde1:	83 c4 0c             	add    esp,0xc
c001fde4:	c3                   	ret    
c001fde5:	90                   	nop

c001fde6 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001fde6:	83 ec 1c             	sub    esp,0x1c
c001fde9:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001fdf0:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001fdf5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fdf9:	8b 04 85 40 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf2c0]
c001fe00:	83 f8 ff             	cmp    eax,0xffffffff
c001fe03:	75 34                	jne    c001fe39 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001fe05:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001fe09:	88 c2                	mov    dl,al
c001fe0b:	a1 20 0d 03 c0       	mov    eax,ds:0xc0030d20
c001fe10:	01 d0                	add    eax,edx
c001fe12:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001fe16:	8b 15 20 0d 03 c0    	mov    edx,DWORD PTR ds:0xc0030d20
c001fe1c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fe20:	89 14 85 40 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf2c0],edx
c001fe27:	a1 20 0d 03 c0       	mov    eax,ds:0xc0030d20
c001fe2c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001fe30:	89 14 85 c0 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf240],edx
c001fe37:	eb 17                	jmp    c001fe50 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001fe39:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001fe3d:	88 c2                	mov    dl,al
c001fe3f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fe43:	8b 04 85 40 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf2c0]
c001fe4a:	01 d0                	add    eax,edx
c001fe4c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001fe50:	83 ec 04             	sub    esp,0x4
c001fe53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fe57:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fe5b:	8d 44 24 15          	lea    eax,[esp+0x15]
c001fe5f:	50                   	push   eax
c001fe60:	e8 99 6e fe ff       	call   c0006cfe <f_getlabel>
c001fe65:	83 c4 10             	add    esp,0x10
c001fe68:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fe6c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fe71:	75 07                	jne    c001fe7a <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001fe73:	b8 00 00 00 00       	mov    eax,0x0
c001fe78:	eb 05                	jmp    c001fe7f <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001fe7a:	b8 01 00 00 00       	mov    eax,0x1
c001fe7f:	83 c4 1c             	add    esp,0x1c
c001fe82:	c3                   	ret    
c001fe83:	90                   	nop

c001fe84 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001fe84:	57                   	push   edi
c001fe85:	83 ec 58             	sub    esp,0x58
c001fe88:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001fe90:	8d 54 24 10          	lea    edx,[esp+0x10]
c001fe94:	b9 0f 00 00 00       	mov    ecx,0xf
c001fe99:	b8 00 00 00 00       	mov    eax,0x0
c001fe9e:	fc                   	cld    
c001fe9f:	89 d7                	mov    edi,edx
c001fea1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001fea3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fea7:	8b 04 85 40 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf2c0]
c001feae:	83 f8 ff             	cmp    eax,0xffffffff
c001feb1:	75 34                	jne    c001fee7 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001feb3:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001feb7:	88 c2                	mov    dl,al
c001feb9:	a1 20 0d 03 c0       	mov    eax,ds:0xc0030d20
c001febe:	01 d0                	add    eax,edx
c001fec0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fec4:	8b 15 20 0d 03 c0    	mov    edx,DWORD PTR ds:0xc0030d20
c001feca:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fece:	89 14 85 40 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf2c0],edx
c001fed5:	a1 20 0d 03 c0       	mov    eax,ds:0xc0030d20
c001feda:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001fede:	89 14 85 c0 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf240],edx
c001fee5:	eb 17                	jmp    c001fefe <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001fee7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001feeb:	88 c2                	mov    dl,al
c001feed:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fef1:	8b 04 85 40 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf2c0]
c001fef8:	01 d0                	add    eax,edx
c001fefa:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fefe:	83 ec 08             	sub    esp,0x8
c001ff01:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001ff05:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ff09:	50                   	push   eax
c001ff0a:	e8 3d 0a fe ff       	call   c000094c <strcat>
c001ff0f:	83 c4 10             	add    esp,0x10
c001ff12:	83 ec 0c             	sub    esp,0xc
c001ff15:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ff19:	50                   	push   eax
c001ff1a:	e8 cd 6f fe ff       	call   c0006eec <f_setlabel>
c001ff1f:	83 c4 10             	add    esp,0x10
c001ff22:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ff26:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001ff2b:	75 07                	jne    c001ff34 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001ff2d:	b8 00 00 00 00       	mov    eax,0x0
c001ff32:	eb 05                	jmp    c001ff39 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001ff34:	b8 01 00 00 00       	mov    eax,0x1
c001ff39:	83 c4 58             	add    esp,0x58
c001ff3c:	5f                   	pop    edi
c001ff3d:	c3                   	ret    

c001ff3e <FAT::format(LogicalDisk*, int, char const*, int)>:
c001ff3e:	83 ec 2c             	sub    esp,0x2c
c001ff41:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001ff49:	83 ec 08             	sub    esp,0x8
c001ff4c:	68 d4 bb 02 c0       	push   0xc002bbd4
c001ff51:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ff55:	e8 3e 09 fe ff       	call   c0000898 <strcmp>
c001ff5a:	83 c4 10             	add    esp,0x10
c001ff5d:	85 c0                	test   eax,eax
c001ff5f:	0f 94 c0             	sete   al
c001ff62:	84 c0                	test   al,al
c001ff64:	74 0d                	je     c001ff73 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001ff66:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001ff6e:	e9 a6 00 00 00       	jmp    c0020019 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001ff73:	83 ec 08             	sub    esp,0x8
c001ff76:	68 c6 bb 02 c0       	push   0xc002bbc6
c001ff7b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ff7f:	e8 14 09 fe ff       	call   c0000898 <strcmp>
c001ff84:	83 c4 10             	add    esp,0x10
c001ff87:	85 c0                	test   eax,eax
c001ff89:	0f 94 c0             	sete   al
c001ff8c:	84 c0                	test   al,al
c001ff8e:	74 0a                	je     c001ff9a <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001ff90:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001ff98:	eb 7f                	jmp    c0020019 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001ff9a:	83 ec 08             	sub    esp,0x8
c001ff9d:	68 cc bb 02 c0       	push   0xc002bbcc
c001ffa2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ffa6:	e8 ed 08 fe ff       	call   c0000898 <strcmp>
c001ffab:	83 c4 10             	add    esp,0x10
c001ffae:	85 c0                	test   eax,eax
c001ffb0:	0f 94 c0             	sete   al
c001ffb3:	84 c0                	test   al,al
c001ffb5:	74 0a                	je     c001ffc1 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001ffb7:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001ffbf:	eb 58                	jmp    c0020019 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001ffc1:	83 ec 08             	sub    esp,0x8
c001ffc4:	68 6c 91 02 c0       	push   0xc002916c
c001ffc9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ffcd:	e8 c6 08 fe ff       	call   c0000898 <strcmp>
c001ffd2:	83 c4 10             	add    esp,0x10
c001ffd5:	85 c0                	test   eax,eax
c001ffd7:	0f 94 c0             	sete   al
c001ffda:	84 c0                	test   al,al
c001ffdc:	74 0a                	je     c001ffe8 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001ffde:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001ffe6:	eb 31                	jmp    c0020019 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001ffe8:	83 ec 08             	sub    esp,0x8
c001ffeb:	68 d2 bb 02 c0       	push   0xc002bbd2
c001fff0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fff4:	e8 9f 08 fe ff       	call   c0000898 <strcmp>
c001fff9:	83 c4 10             	add    esp,0x10
c001fffc:	85 c0                	test   eax,eax
c001fffe:	0f 94 c0             	sete   al
c0020001:	84 c0                	test   al,al
c0020003:	74 0a                	je     c002000f <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0020005:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c002000d:	eb 0a                	jmp    c0020019 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002000f:	b8 08 00 00 00       	mov    eax,0x8
c0020014:	e9 df 00 00 00       	jmp    c00200f8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c0020019:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020020:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0020025:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020029:	8b 04 85 40 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf2c0]
c0020030:	83 f8 ff             	cmp    eax,0xffffffff
c0020033:	75 34                	jne    c0020069 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020035:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020039:	88 c2                	mov    dl,al
c002003b:	a1 20 0d 03 c0       	mov    eax,ds:0xc0030d20
c0020040:	01 d0                	add    eax,edx
c0020042:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020046:	8b 15 20 0d 03 c0    	mov    edx,DWORD PTR ds:0xc0030d20
c002004c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020050:	89 14 85 40 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf2c0],edx
c0020057:	a1 20 0d 03 c0       	mov    eax,ds:0xc0030d20
c002005c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020060:	89 14 85 c0 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf240],edx
c0020067:	eb 17                	jmp    c0020080 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020069:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002006d:	88 c2                	mov    dl,al
c002006f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020073:	8b 04 85 40 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf2c0]
c002007a:	01 d0                	add    eax,edx
c002007c:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020080:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020084:	88 04 24             	mov    BYTE PTR [esp],al
c0020087:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002008b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002008f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020097:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c002009c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00200a4:	83 ec 0c             	sub    esp,0xc
c00200a7:	68 00 20 00 00       	push   0x2000
c00200ac:	e8 eb f4 fe ff       	call   c000f59c <malloc>
c00200b1:	83 c4 10             	add    esp,0x10
c00200b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00200b8:	68 00 20 00 00       	push   0x2000
c00200bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200c1:	8d 44 24 08          	lea    eax,[esp+0x8]
c00200c5:	50                   	push   eax
c00200c6:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00200ca:	50                   	push   eax
c00200cb:	e8 67 72 fe ff       	call   c0007337 <f_mkfs>
c00200d0:	83 c4 10             	add    esp,0x10
c00200d3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00200d7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00200dc:	75 07                	jne    c00200e5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00200de:	b8 00 00 00 00       	mov    eax,0x0
c00200e3:	eb 13                	jmp    c00200f8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c00200e5:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00200ea:	75 07                	jne    c00200f3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b5>
c00200ec:	b8 09 00 00 00       	mov    eax,0x9
c00200f1:	eb 05                	jmp    c00200f8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c00200f3:	b8 01 00 00 00       	mov    eax,0x1
c00200f8:	83 c4 2c             	add    esp,0x2c
c00200fb:	c3                   	ret    

c00200fc <FAT::tryMount(LogicalDisk*, int)>:
c00200fc:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020102:	a1 20 0d 03 c0       	mov    eax,ds:0xc0030d20
c0020107:	83 f8 14             	cmp    eax,0x14
c002010a:	75 17                	jne    c0020123 <FAT::tryMount(LogicalDisk*, int)+0x27>
c002010c:	83 ec 0c             	sub    esp,0xc
c002010f:	68 d8 bb 02 c0       	push   0xc002bbd8
c0020114:	e8 1c 9c ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c0020119:	83 c4 10             	add    esp,0x10
c002011c:	b0 00                	mov    al,0x0
c002011e:	e9 d7 01 00 00       	jmp    c00202fa <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020123:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c002012a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020130:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020136:	3d 00 02 00 00       	cmp    eax,0x200
c002013b:	74 07                	je     c0020144 <FAT::tryMount(LogicalDisk*, int)+0x48>
c002013d:	b0 00                	mov    al,0x0
c002013f:	e9 b6 01 00 00       	jmp    c00202fa <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020144:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c002014c:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020153:	8b 04 85 40 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf2c0]
c002015a:	83 f8 ff             	cmp    eax,0xffffffff
c002015d:	74 07                	je     c0020166 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c002015f:	b0 01                	mov    al,0x1
c0020161:	e9 94 01 00 00       	jmp    c00202fa <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020166:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020170:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020178:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c002017f:	88 c2                	mov    dl,al
c0020181:	a1 20 0d 03 c0       	mov    eax,ds:0xc0030d20
c0020186:	01 d0                	add    eax,edx
c0020188:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c002018f:	8b 15 20 0d 03 c0    	mov    edx,DWORD PTR ds:0xc0030d20
c0020195:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c002019c:	89 14 85 40 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf2c0],edx
c00201a3:	a1 20 0d 03 c0       	mov    eax,ds:0xc0030d20
c00201a8:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00201af:	89 14 85 c0 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf240],edx
c00201b6:	83 ec 0c             	sub    esp,0xc
c00201b9:	68 54 02 00 00       	push   0x254
c00201be:	e8 d9 f3 fe ff       	call   c000f59c <malloc>
c00201c3:	83 c4 10             	add    esp,0x10
c00201c6:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c00201cd:	83 ec 04             	sub    esp,0x4
c00201d0:	6a 00                	push   0x0
c00201d2:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00201d9:	50                   	push   eax
c00201da:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00201e1:	e8 0f 4d fe ff       	call   c0004ef5 <f_mount>
c00201e6:	83 c4 10             	add    esp,0x10
c00201e9:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00201f0:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c00201f8:	74 19                	je     c0020213 <FAT::tryMount(LogicalDisk*, int)+0x117>
c00201fa:	83 ec 0c             	sub    esp,0xc
c00201fd:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020204:	e8 b3 f3 fe ff       	call   c000f5bc <rfree>
c0020209:	83 c4 10             	add    esp,0x10
c002020c:	b0 00                	mov    al,0x0
c002020e:	e9 e7 00 00 00       	jmp    c00202fa <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020213:	83 ec 04             	sub    esp,0x4
c0020216:	68 00 01 00 00       	push   0x100
c002021b:	6a 00                	push   0x0
c002021d:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020224:	50                   	push   eax
c0020225:	e8 26 05 fe ff       	call   c0000750 <memset>
c002022a:	83 c4 10             	add    esp,0x10
c002022d:	83 ec 08             	sub    esp,0x8
c0020230:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020237:	50                   	push   eax
c0020238:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002023f:	50                   	push   eax
c0020240:	e8 07 07 fe ff       	call   c000094c <strcat>
c0020245:	83 c4 10             	add    esp,0x10
c0020248:	83 ec 08             	sub    esp,0x8
c002024b:	68 e6 bb 02 c0       	push   0xc002bbe6
c0020250:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020257:	50                   	push   eax
c0020258:	e8 ef 06 fe ff       	call   c000094c <strcat>
c002025d:	83 c4 10             	add    esp,0x10
c0020260:	83 ec 04             	sub    esp,0x4
c0020263:	6a 01                	push   0x1
c0020265:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c002026c:	50                   	push   eax
c002026d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020271:	50                   	push   eax
c0020272:	e8 e0 4c fe ff       	call   c0004f57 <f_open>
c0020277:	83 c4 10             	add    esp,0x10
c002027a:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020281:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020288:	85 c0                	test   eax,eax
c002028a:	74 0a                	je     c0020296 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c002028c:	78 2d                	js     c00202bb <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c002028e:	83 e8 04             	sub    eax,0x4
c0020291:	83 f8 01             	cmp    eax,0x1
c0020294:	77 25                	ja     c00202bb <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020296:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c002029e:	83 ec 0c             	sub    esp,0xc
c00202a1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00202a5:	50                   	push   eax
c00202a6:	e8 fe 57 fe ff       	call   c0005aa9 <f_close>
c00202ab:	83 c4 10             	add    esp,0x10
c00202ae:	90                   	nop
c00202af:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c00202b7:	74 3a                	je     c00202f3 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c00202b9:	eb 2d                	jmp    c00202e8 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c00202bb:	83 ec 0c             	sub    esp,0xc
c00202be:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00202c5:	e8 f2 f2 fe ff       	call   c000f5bc <rfree>
c00202ca:	83 c4 10             	add    esp,0x10
c00202cd:	83 ec 04             	sub    esp,0x4
c00202d0:	6a 00                	push   0x0
c00202d2:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00202d9:	50                   	push   eax
c00202da:	6a 00                	push   0x0
c00202dc:	e8 14 4c fe ff       	call   c0004ef5 <f_mount>
c00202e1:	83 c4 10             	add    esp,0x10
c00202e4:	b0 00                	mov    al,0x0
c00202e6:	eb 12                	jmp    c00202fa <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00202e8:	a1 20 0d 03 c0       	mov    eax,ds:0xc0030d20
c00202ed:	40                   	inc    eax
c00202ee:	a3 20 0d 03 c0       	mov    ds:0xc0030d20,eax
c00202f3:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c00202fa:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020300:	c3                   	ret    
c0020301:	90                   	nop

c0020302 <FAT::getFileFirstSector(char const*)>:
c0020302:	53                   	push   ebx
c0020303:	83 ec 28             	sub    esp,0x28
c0020306:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c002030e:	83 ec 0c             	sub    esp,0xc
c0020311:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020315:	e8 82 f2 fe ff       	call   c000f59c <malloc>
c002031a:	83 c4 10             	add    esp,0x10
c002031d:	89 c3                	mov    ebx,eax
c002031f:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0020324:	83 ec 04             	sub    esp,0x4
c0020327:	50                   	push   eax
c0020328:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002032c:	53                   	push   ebx
c002032d:	e8 f6 27 ff ff       	call   c0012b28 <File::File(char const*, Process*)>
c0020332:	83 c4 10             	add    esp,0x10
c0020335:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0020339:	83 ec 08             	sub    esp,0x8
c002033c:	6a 01                	push   0x1
c002033e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020342:	e8 45 28 ff ff       	call   c0012b8c <File::open(FileOpenMode)>
c0020347:	83 c4 10             	add    esp,0x10
c002034a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002034e:	8b 00                	mov    eax,DWORD PTR [eax]
c0020350:	83 c0 0c             	add    eax,0xc
c0020353:	8b 00                	mov    eax,DWORD PTR [eax]
c0020355:	83 ec 0c             	sub    esp,0xc
c0020358:	8d 54 24 14          	lea    edx,[esp+0x14]
c002035c:	52                   	push   edx
c002035d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020361:	52                   	push   edx
c0020362:	6a 00                	push   0x0
c0020364:	6a 04                	push   0x4
c0020366:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c002036a:	ff d0                	call   eax
c002036c:	83 c4 20             	add    esp,0x20
c002036f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020373:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020379:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002037d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020381:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0020384:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020387:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002038b:	83 ec 0c             	sub    esp,0xc
c002038e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020392:	e8 53 28 ff ff       	call   c0012bea <File::close()>
c0020397:	83 c4 10             	add    esp,0x10
c002039a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002039e:	ba 00 00 00 00       	mov    edx,0x0
c00203a3:	83 c4 28             	add    esp,0x28
c00203a6:	5b                   	pop    ebx
c00203a7:	c3                   	ret    

c00203a8 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00203a8:	57                   	push   edi
c00203a9:	56                   	push   esi
c00203aa:	53                   	push   ebx
c00203ab:	81 ec 50 02 00 00    	sub    esp,0x250
c00203b1:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00203b9:	74 0a                	je     c00203c5 <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c00203bb:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00203c3:	75 0a                	jne    c00203cf <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c00203c5:	b8 04 00 00 00       	mov    eax,0x4
c00203ca:	e9 29 01 00 00       	jmp    c00204f8 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c00203cf:	83 ec 08             	sub    esp,0x8
c00203d2:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c00203d9:	50                   	push   eax
c00203da:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00203e1:	e8 cd 5c fe ff       	call   c00060b3 <f_readdir>
c00203e6:	83 c4 10             	add    esp,0x10
c00203e9:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00203f0:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c00203f7:	83 ec 0c             	sub    esp,0xc
c00203fa:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0020401:	83 c0 1a             	add    eax,0x1a
c0020404:	50                   	push   eax
c0020405:	e8 62 03 fe ff       	call   c000076c <strlen>
c002040a:	83 c4 10             	add    esp,0x10
c002040d:	ba 00 00 00 00       	mov    edx,0x0
c0020412:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020416:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002041a:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0020421:	0f b6 c0             	movzx  eax,al
c0020424:	83 e0 10             	and    eax,0x10
c0020427:	74 07                	je     c0020430 <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c0020429:	b8 02 00 00 00       	mov    eax,0x2
c002042e:	eb 05                	jmp    c0020435 <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c0020430:	b8 01 00 00 00       	mov    eax,0x1
c0020435:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020439:	83 ec 08             	sub    esp,0x8
c002043c:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020443:	83 c0 1a             	add    eax,0x1a
c0020446:	50                   	push   eax
c0020447:	8d 44 24 10          	lea    eax,[esp+0x10]
c002044b:	83 c0 10             	add    eax,0x10
c002044e:	50                   	push   eax
c002044f:	e8 b8 03 fe ff       	call   c000080c <strcpy>
c0020454:	83 c4 10             	add    esp,0x10
c0020457:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c002045e:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0020465:	8d 44 24 04          	lea    eax,[esp+0x4]
c0020469:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0020470:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0020477:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c002047e:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0020485:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c002048c:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0020493:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c002049a:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00204a1:	89 c6                	mov    esi,eax
c00204a3:	89 d7                	mov    edi,edx
c00204a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00204a7:	89 c8                	mov    eax,ecx
c00204a9:	89 fa                	mov    edx,edi
c00204ab:	89 f3                	mov    ebx,esi
c00204ad:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00204b4:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00204bb:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00204c2:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00204c9:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00204cf:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00204d6:	84 c0                	test   al,al
c00204d8:	75 07                	jne    c00204e1 <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c00204da:	b8 07 00 00 00       	mov    eax,0x7
c00204df:	eb 17                	jmp    c00204f8 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c00204e1:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c00204e8:	85 c0                	test   eax,eax
c00204ea:	75 07                	jne    c00204f3 <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c00204ec:	b8 00 00 00 00       	mov    eax,0x0
c00204f1:	eb 05                	jmp    c00204f8 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c00204f3:	b8 01 00 00 00       	mov    eax,0x1
c00204f8:	81 c4 50 02 00 00    	add    esp,0x250
c00204fe:	5b                   	pop    ebx
c00204ff:	5e                   	pop    esi
c0020500:	5f                   	pop    edi
c0020501:	c3                   	ret    

c0020502 <FAT::read(void*, unsigned long, void*, int*)>:
c0020502:	83 ec 1c             	sub    esp,0x1c
c0020505:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002050a:	74 07                	je     c0020513 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c002050c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020511:	75 07                	jne    c002051a <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020513:	b8 04 00 00 00       	mov    eax,0x4
c0020518:	eb 3d                	jmp    c0020557 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c002051a:	8d 44 24 08          	lea    eax,[esp+0x8]
c002051e:	50                   	push   eax
c002051f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020523:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020527:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002052b:	e8 63 4e fe ff       	call   c0005393 <f_read>
c0020530:	83 c4 10             	add    esp,0x10
c0020533:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020537:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002053b:	89 c2                	mov    edx,eax
c002053d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020541:	89 10                	mov    DWORD PTR [eax],edx
c0020543:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020547:	85 c0                	test   eax,eax
c0020549:	75 07                	jne    c0020552 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c002054b:	b8 00 00 00 00       	mov    eax,0x0
c0020550:	eb 05                	jmp    c0020557 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020552:	b8 01 00 00 00       	mov    eax,0x1
c0020557:	83 c4 1c             	add    esp,0x1c
c002055a:	c3                   	ret    
c002055b:	90                   	nop

c002055c <FAT::write(void*, unsigned long, void*, int*)>:
c002055c:	83 ec 1c             	sub    esp,0x1c
c002055f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020564:	74 07                	je     c002056d <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020566:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002056b:	75 07                	jne    c0020574 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c002056d:	b8 04 00 00 00       	mov    eax,0x4
c0020572:	eb 3d                	jmp    c00205b1 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020574:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020578:	50                   	push   eax
c0020579:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002057d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020581:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020585:	e8 89 50 fe ff       	call   c0005613 <f_write>
c002058a:	83 c4 10             	add    esp,0x10
c002058d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020591:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020595:	89 c2                	mov    edx,eax
c0020597:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002059b:	89 10                	mov    DWORD PTR [eax],edx
c002059d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00205a1:	85 c0                	test   eax,eax
c00205a3:	75 07                	jne    c00205ac <FAT::write(void*, unsigned long, void*, int*)+0x50>
c00205a5:	b8 00 00 00 00       	mov    eax,0x0
c00205aa:	eb 05                	jmp    c00205b1 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00205ac:	b8 01 00 00 00       	mov    eax,0x1
c00205b1:	83 c4 1c             	add    esp,0x1c
c00205b4:	c3                   	ret    
c00205b5:	90                   	nop

c00205b6 <FAT::close(void*)>:
c00205b6:	83 ec 1c             	sub    esp,0x1c
c00205b9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00205be:	75 07                	jne    c00205c7 <FAT::close(void*)+0x11>
c00205c0:	b8 04 00 00 00       	mov    eax,0x4
c00205c5:	eb 36                	jmp    c00205fd <FAT::close(void*)+0x47>
c00205c7:	83 ec 0c             	sub    esp,0xc
c00205ca:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00205ce:	e8 d6 54 fe ff       	call   c0005aa9 <f_close>
c00205d3:	83 c4 10             	add    esp,0x10
c00205d6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00205da:	83 ec 0c             	sub    esp,0xc
c00205dd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00205e1:	e8 c6 ef fe ff       	call   c000f5ac <free>
c00205e6:	83 c4 10             	add    esp,0x10
c00205e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00205ed:	85 c0                	test   eax,eax
c00205ef:	75 07                	jne    c00205f8 <FAT::close(void*)+0x42>
c00205f1:	b8 00 00 00 00       	mov    eax,0x0
c00205f6:	eb 05                	jmp    c00205fd <FAT::close(void*)+0x47>
c00205f8:	b8 01 00 00 00       	mov    eax,0x1
c00205fd:	83 c4 1c             	add    esp,0x1c
c0020600:	c3                   	ret    
c0020601:	90                   	nop

c0020602 <FAT::closeDir(void*)>:
c0020602:	83 ec 1c             	sub    esp,0x1c
c0020605:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002060a:	75 07                	jne    c0020613 <FAT::closeDir(void*)+0x11>
c002060c:	b8 04 00 00 00       	mov    eax,0x4
c0020611:	eb 36                	jmp    c0020649 <FAT::closeDir(void*)+0x47>
c0020613:	83 ec 0c             	sub    esp,0xc
c0020616:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002061a:	e8 72 5a fe ff       	call   c0006091 <f_closedir>
c002061f:	83 c4 10             	add    esp,0x10
c0020622:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020626:	83 ec 0c             	sub    esp,0xc
c0020629:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002062d:	e8 7a ef fe ff       	call   c000f5ac <free>
c0020632:	83 c4 10             	add    esp,0x10
c0020635:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020639:	85 c0                	test   eax,eax
c002063b:	75 07                	jne    c0020644 <FAT::closeDir(void*)+0x42>
c002063d:	b8 00 00 00 00       	mov    eax,0x0
c0020642:	eb 05                	jmp    c0020649 <FAT::closeDir(void*)+0x47>
c0020644:	b8 01 00 00 00       	mov    eax,0x1
c0020649:	83 c4 1c             	add    esp,0x1c
c002064c:	c3                   	ret    
c002064d:	90                   	nop

c002064e <FAT::seek(void*, unsigned long long)>:
c002064e:	83 ec 2c             	sub    esp,0x2c
c0020651:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020655:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020659:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002065d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020661:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020666:	75 07                	jne    c002066f <FAT::seek(void*, unsigned long long)+0x21>
c0020668:	b8 04 00 00 00       	mov    eax,0x4
c002066d:	eb 2f                	jmp    c002069e <FAT::seek(void*, unsigned long long)+0x50>
c002066f:	83 ec 04             	sub    esp,0x4
c0020672:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020676:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002067a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002067e:	e8 55 54 fe ff       	call   c0005ad8 <f_lseek>
c0020683:	83 c4 10             	add    esp,0x10
c0020686:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002068a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002068e:	85 c0                	test   eax,eax
c0020690:	75 07                	jne    c0020699 <FAT::seek(void*, unsigned long long)+0x4b>
c0020692:	b8 00 00 00 00       	mov    eax,0x0
c0020697:	eb 05                	jmp    c002069e <FAT::seek(void*, unsigned long long)+0x50>
c0020699:	b8 01 00 00 00       	mov    eax,0x1
c002069e:	83 c4 2c             	add    esp,0x2c
c00206a1:	c3                   	ret    

c00206a2 <fatWrapperReadDisk>:
c00206a2:	83 ec 1c             	sub    esp,0x1c
c00206a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00206a9:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00206ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00206b1:	89 04 24             	mov    DWORD PTR [esp],eax
c00206b4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00206b8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00206bc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00206c1:	8b 04 85 00 dd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2300]
c00206c8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00206cc:	83 ec 0c             	sub    esp,0xc
c00206cf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00206d3:	52                   	push   edx
c00206d4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00206d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00206dc:	50                   	push   eax
c00206dd:	e8 3c 58 ff ff       	call   c0015f1e <LogicalDisk::read(unsigned long long, int, void*)>
c00206e2:	83 c4 20             	add    esp,0x20
c00206e5:	83 c4 1c             	add    esp,0x1c
c00206e8:	c3                   	ret    

c00206e9 <fatWrapperWriteDisk>:
c00206e9:	83 ec 1c             	sub    esp,0x1c
c00206ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00206f0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00206f4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00206f8:	89 04 24             	mov    DWORD PTR [esp],eax
c00206fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00206ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020703:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020708:	8b 04 85 00 dd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2300]
c002070f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020713:	83 ec 0c             	sub    esp,0xc
c0020716:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002071a:	52                   	push   edx
c002071b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002071f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020723:	50                   	push   eax
c0020724:	e8 61 58 ff ff       	call   c0015f8a <LogicalDisk::write(unsigned long long, int, void*)>
c0020729:	83 c4 20             	add    esp,0x20
c002072c:	83 c4 1c             	add    esp,0x1c
c002072f:	c3                   	ret    

c0020730 <fatWrapperIoctl>:
c0020730:	53                   	push   ebx
c0020731:	83 ec 28             	sub    esp,0x28
c0020734:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020738:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002073c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020740:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020744:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020749:	75 31                	jne    c002077c <fatWrapperIoctl+0x4c>
c002074b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002074f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020753:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020758:	8b 04 85 00 dd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2300]
c002075f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020765:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002076b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002076f:	66 89 02             	mov    WORD PTR [edx],ax
c0020772:	b8 00 00 00 00       	mov    eax,0x0
c0020777:	e9 b2 00 00 00       	jmp    c002082e <fatWrapperIoctl+0xfe>
c002077c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020781:	75 6a                	jne    c00207ed <fatWrapperIoctl+0xbd>
c0020783:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020787:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002078b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020790:	8b 04 85 00 dd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2300]
c0020797:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002079d:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00207a3:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00207a9:	89 c8                	mov    eax,ecx
c00207ab:	89 da                	mov    edx,ebx
c00207ad:	0f a4 c2 0a          	shld   edx,eax,0xa
c00207b1:	c1 e0 0a             	shl    eax,0xa
c00207b4:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00207b9:	8b 0c 8d 00 dd 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2300]
c00207c0:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00207c6:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00207cc:	89 cb                	mov    ebx,ecx
c00207ce:	c1 fb 1f             	sar    ebx,0x1f
c00207d1:	53                   	push   ebx
c00207d2:	51                   	push   ecx
c00207d3:	52                   	push   edx
c00207d4:	50                   	push   eax
c00207d5:	e8 2a 5e 00 00       	call   c0026604 <__udivdi3>
c00207da:	83 c4 10             	add    esp,0x10
c00207dd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00207e1:	89 01                	mov    DWORD PTR [ecx],eax
c00207e3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00207e6:	b8 00 00 00 00       	mov    eax,0x0
c00207eb:	eb 41                	jmp    c002082e <fatWrapperIoctl+0xfe>
c00207ed:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00207f2:	75 07                	jne    c00207fb <fatWrapperIoctl+0xcb>
c00207f4:	b8 00 00 00 00       	mov    eax,0x0
c00207f9:	eb 33                	jmp    c002082e <fatWrapperIoctl+0xfe>
c00207fb:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020800:	75 19                	jne    c002081b <fatWrapperIoctl+0xeb>
c0020802:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020806:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002080a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002080e:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020814:	b8 00 00 00 00       	mov    eax,0x0
c0020819:	eb 13                	jmp    c002082e <fatWrapperIoctl+0xfe>
c002081b:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020820:	75 07                	jne    c0020829 <fatWrapperIoctl+0xf9>
c0020822:	b8 00 00 00 00       	mov    eax,0x0
c0020827:	eb 05                	jmp    c002082e <fatWrapperIoctl+0xfe>
c0020829:	b8 04 00 00 00       	mov    eax,0x4
c002082e:	83 c4 28             	add    esp,0x28
c0020831:	5b                   	pop    ebx
c0020832:	c3                   	ret    
c0020833:	90                   	nop

c0020834 <FAT::FAT()>:
c0020834:	83 ec 1c             	sub    esp,0x1c
c0020837:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002083b:	83 ec 0c             	sub    esp,0xc
c002083e:	50                   	push   eax
c002083f:	e8 90 20 ff ff       	call   c00128d4 <Filesystem::Filesystem()>
c0020844:	83 c4 10             	add    esp,0x10
c0020847:	ba fc bb 02 c0       	mov    edx,0xc002bbfc
c002084c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020850:	89 10                	mov    DWORD PTR [eax],edx
c0020852:	c7 05 20 0d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030d20,0x0
c002085c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020864:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020869:	7f 15                	jg     c0020880 <FAT::FAT()+0x4c>
c002086b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002086f:	c7 04 85 40 0d 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcf2c0],0xffffffff
c002087a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002087e:	eb e4                	jmp    c0020864 <FAT::FAT()+0x30>
c0020880:	90                   	nop
c0020881:	83 c4 1c             	add    esp,0x1c
c0020884:	c3                   	ret    
c0020885:	90                   	nop

c0020886 <FAT::fixFilepath(char*)>:
c0020886:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002088a:	8a 00                	mov    al,BYTE PTR [eax]
c002088c:	3c 40                	cmp    al,0x40
c002088e:	7e 2c                	jle    c00208bc <FAT::fixFilepath(char*)+0x36>
c0020890:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020894:	8a 00                	mov    al,BYTE PTR [eax]
c0020896:	83 e8 41             	sub    eax,0x41
c0020899:	88 c2                	mov    dl,al
c002089b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002089f:	88 10                	mov    BYTE PTR [eax],dl
c00208a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00208a5:	8a 00                	mov    al,BYTE PTR [eax]
c00208a7:	0f be c0             	movsx  eax,al
c00208aa:	8b 04 85 40 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf2c0]
c00208b1:	83 c0 30             	add    eax,0x30
c00208b4:	88 c2                	mov    dl,al
c00208b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00208ba:	88 10                	mov    BYTE PTR [eax],dl
c00208bc:	90                   	nop
c00208bd:	c3                   	ret    

c00208be <FAT::open(char const*, void**, FileOpenMode)>:
c00208be:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00208c4:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00208cc:	74 0a                	je     c00208d8 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c00208ce:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00208d6:	75 0a                	jne    c00208e2 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c00208d8:	b8 04 00 00 00       	mov    eax,0x4
c00208dd:	e9 fd 00 00 00       	jmp    c00209df <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00208e2:	83 ec 08             	sub    esp,0x8
c00208e5:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00208ec:	8d 44 24 14          	lea    eax,[esp+0x14]
c00208f0:	50                   	push   eax
c00208f1:	e8 16 ff fd ff       	call   c000080c <strcpy>
c00208f6:	83 c4 10             	add    esp,0x10
c00208f9:	83 ec 08             	sub    esp,0x8
c00208fc:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020900:	50                   	push   eax
c0020901:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020908:	e8 79 ff ff ff       	call   c0020886 <FAT::fixFilepath(char*)>
c002090d:	83 c4 10             	add    esp,0x10
c0020910:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020918:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002091f:	83 e0 01             	and    eax,0x1
c0020922:	74 08                	je     c002092c <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0020924:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c002092c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020933:	83 e0 04             	and    eax,0x4
c0020936:	74 10                	je     c0020948 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0020938:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0020940:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020948:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002094f:	83 e0 02             	and    eax,0x2
c0020952:	74 08                	je     c002095c <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0020954:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c002095c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020963:	83 e0 08             	and    eax,0x8
c0020966:	74 08                	je     c0020970 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0020968:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0020970:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020977:	83 e0 10             	and    eax,0x10
c002097a:	74 08                	je     c0020984 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c002097c:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0020984:	83 ec 0c             	sub    esp,0xc
c0020987:	68 50 02 00 00       	push   0x250
c002098c:	e8 0b ec fe ff       	call   c000f59c <malloc>
c0020991:	83 c4 10             	add    esp,0x10
c0020994:	89 c2                	mov    edx,eax
c0020996:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002099d:	89 10                	mov    DWORD PTR [eax],edx
c002099f:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00209a7:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00209ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00209b0:	83 ec 04             	sub    esp,0x4
c00209b3:	52                   	push   edx
c00209b4:	8d 54 24 10          	lea    edx,[esp+0x10]
c00209b8:	52                   	push   edx
c00209b9:	50                   	push   eax
c00209ba:	e8 98 45 fe ff       	call   c0004f57 <f_open>
c00209bf:	83 c4 10             	add    esp,0x10
c00209c2:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00209c9:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00209d1:	74 07                	je     c00209da <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00209d3:	b8 01 00 00 00       	mov    eax,0x1
c00209d8:	eb 05                	jmp    c00209df <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00209da:	b8 00 00 00 00       	mov    eax,0x0
c00209df:	81 c4 1c 01 00 00    	add    esp,0x11c
c00209e5:	c3                   	ret    

c00209e6 <FAT::openDir(char const*, void**)>:
c00209e6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00209ec:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00209f4:	74 0a                	je     c0020a00 <FAT::openDir(char const*, void**)+0x1a>
c00209f6:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00209fe:	75 07                	jne    c0020a07 <FAT::openDir(char const*, void**)+0x21>
c0020a00:	b8 04 00 00 00       	mov    eax,0x4
c0020a05:	eb 7d                	jmp    c0020a84 <FAT::openDir(char const*, void**)+0x9e>
c0020a07:	83 ec 08             	sub    esp,0x8
c0020a0a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020a11:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020a15:	50                   	push   eax
c0020a16:	e8 f1 fd fd ff       	call   c000080c <strcpy>
c0020a1b:	83 c4 10             	add    esp,0x10
c0020a1e:	83 ec 08             	sub    esp,0x8
c0020a21:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020a25:	50                   	push   eax
c0020a26:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020a2d:	e8 54 fe ff ff       	call   c0020886 <FAT::fixFilepath(char*)>
c0020a32:	83 c4 10             	add    esp,0x10
c0020a35:	83 ec 0c             	sub    esp,0xc
c0020a38:	6a 4c                	push   0x4c
c0020a3a:	e8 5d eb fe ff       	call   c000f59c <malloc>
c0020a3f:	83 c4 10             	add    esp,0x10
c0020a42:	89 c2                	mov    edx,eax
c0020a44:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020a4b:	89 10                	mov    DWORD PTR [eax],edx
c0020a4d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020a54:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a56:	83 ec 08             	sub    esp,0x8
c0020a59:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020a5d:	52                   	push   edx
c0020a5e:	50                   	push   eax
c0020a5f:	e8 2b 55 fe ff       	call   c0005f8f <f_opendir>
c0020a64:	83 c4 10             	add    esp,0x10
c0020a67:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020a6e:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0020a76:	74 07                	je     c0020a7f <FAT::openDir(char const*, void**)+0x99>
c0020a78:	b8 01 00 00 00       	mov    eax,0x1
c0020a7d:	eb 05                	jmp    c0020a84 <FAT::openDir(char const*, void**)+0x9e>
c0020a7f:	b8 00 00 00 00       	mov    eax,0x0
c0020a84:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020a8a:	c3                   	ret    
c0020a8b:	90                   	nop

c0020a8c <FAT::stat(char const*, unsigned long long*, bool*)>:
c0020a8c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020a92:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0020a9a:	75 0a                	jne    c0020aa6 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0020a9c:	b8 04 00 00 00       	mov    eax,0x4
c0020aa1:	e9 c9 00 00 00       	jmp    c0020b6f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020aa6:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0020aae:	75 0a                	jne    c0020aba <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0020ab0:	b8 04 00 00 00       	mov    eax,0x4
c0020ab5:	e9 b5 00 00 00       	jmp    c0020b6f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020aba:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0020ac2:	75 0a                	jne    c0020ace <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0020ac4:	b8 04 00 00 00       	mov    eax,0x4
c0020ac9:	e9 a1 00 00 00       	jmp    c0020b6f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020ace:	83 ec 08             	sub    esp,0x8
c0020ad1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020ad8:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020adf:	50                   	push   eax
c0020ae0:	e8 27 fd fd ff       	call   c000080c <strcpy>
c0020ae5:	83 c4 10             	add    esp,0x10
c0020ae8:	83 ec 08             	sub    esp,0x8
c0020aeb:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0020af2:	50                   	push   eax
c0020af3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020afa:	e8 87 fd ff ff       	call   c0020886 <FAT::fixFilepath(char*)>
c0020aff:	83 c4 10             	add    esp,0x10
c0020b02:	83 ec 08             	sub    esp,0x8
c0020b05:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020b09:	50                   	push   eax
c0020b0a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020b11:	50                   	push   eax
c0020b12:	e8 37 56 fe ff       	call   c000614e <f_stat>
c0020b17:	83 c4 10             	add    esp,0x10
c0020b1a:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020b21:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020b28:	85 c0                	test   eax,eax
c0020b2a:	74 07                	je     c0020b33 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0020b2c:	83 f8 04             	cmp    eax,0x4
c0020b2f:	74 32                	je     c0020b63 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0020b31:	eb 37                	jmp    c0020b6a <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0020b33:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020b37:	0f b6 c0             	movzx  eax,al
c0020b3a:	83 e0 10             	and    eax,0x10
c0020b3d:	0f 95 c2             	setne  dl
c0020b40:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0020b47:	88 10                	mov    BYTE PTR [eax],dl
c0020b49:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020b4c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020b50:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0020b57:	89 01                	mov    DWORD PTR [ecx],eax
c0020b59:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020b5c:	b8 00 00 00 00       	mov    eax,0x0
c0020b61:	eb 0c                	jmp    c0020b6f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020b63:	b8 02 00 00 00       	mov    eax,0x2
c0020b68:	eb 05                	jmp    c0020b6f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020b6a:	b8 01 00 00 00       	mov    eax,0x1
c0020b6f:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020b75:	c3                   	ret    

c0020b76 <FAT::unlink(char const*)>:
c0020b76:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020b7c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020b84:	75 07                	jne    c0020b8d <FAT::unlink(char const*)+0x17>
c0020b86:	b8 04 00 00 00       	mov    eax,0x4
c0020b8b:	eb 5c                	jmp    c0020be9 <FAT::unlink(char const*)+0x73>
c0020b8d:	83 ec 08             	sub    esp,0x8
c0020b90:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020b97:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020b9b:	50                   	push   eax
c0020b9c:	e8 6b fc fd ff       	call   c000080c <strcpy>
c0020ba1:	83 c4 10             	add    esp,0x10
c0020ba4:	83 ec 08             	sub    esp,0x8
c0020ba7:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020bab:	50                   	push   eax
c0020bac:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020bb3:	e8 ce fc ff ff       	call   c0020886 <FAT::fixFilepath(char*)>
c0020bb8:	83 c4 10             	add    esp,0x10
c0020bbb:	83 ec 0c             	sub    esp,0xc
c0020bbe:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020bc2:	50                   	push   eax
c0020bc3:	e8 d8 58 fe ff       	call   c00064a0 <f_unlink>
c0020bc8:	83 c4 10             	add    esp,0x10
c0020bcb:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020bd2:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020bd9:	85 c0                	test   eax,eax
c0020bdb:	75 07                	jne    c0020be4 <FAT::unlink(char const*)+0x6e>
c0020bdd:	b8 00 00 00 00       	mov    eax,0x0
c0020be2:	eb 05                	jmp    c0020be9 <FAT::unlink(char const*)+0x73>
c0020be4:	b8 01 00 00 00       	mov    eax,0x1
c0020be9:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020bef:	c3                   	ret    

c0020bf0 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0020bf0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0020bf6:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0020bfd:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0020c04:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020c08:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020c0c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0020c14:	75 0a                	jne    c0020c20 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0020c16:	b8 04 00 00 00       	mov    eax,0x4
c0020c1b:	e9 1c 01 00 00       	jmp    c0020d3c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020c20:	83 ec 08             	sub    esp,0x8
c0020c23:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020c2a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020c2e:	50                   	push   eax
c0020c2f:	e8 d8 fb fd ff       	call   c000080c <strcpy>
c0020c34:	83 c4 10             	add    esp,0x10
c0020c37:	83 ec 08             	sub    esp,0x8
c0020c3a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0020c3e:	50                   	push   eax
c0020c3f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020c46:	e8 3b fc ff ff       	call   c0020886 <FAT::fixFilepath(char*)>
c0020c4b:	83 c4 10             	add    esp,0x10
c0020c4e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0020c56:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0020c5e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020c63:	83 e0 01             	and    eax,0x1
c0020c66:	74 08                	je     c0020c70 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0020c68:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0020c70:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020c75:	83 e0 02             	and    eax,0x2
c0020c78:	74 08                	je     c0020c82 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0020c7a:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0020c82:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020c87:	83 e0 04             	and    eax,0x4
c0020c8a:	74 08                	je     c0020c94 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0020c8c:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0020c94:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020c99:	83 e0 08             	and    eax,0x8
c0020c9c:	74 08                	je     c0020ca6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0020c9e:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0020ca6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020cab:	83 e0 01             	and    eax,0x1
c0020cae:	74 08                	je     c0020cb8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0020cb0:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0020cb8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020cbd:	83 e0 02             	and    eax,0x2
c0020cc0:	74 08                	je     c0020cca <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0020cc2:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0020cca:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ccf:	83 e0 04             	and    eax,0x4
c0020cd2:	74 08                	je     c0020cdc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0020cd4:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0020cdc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ce1:	83 e0 08             	and    eax,0x8
c0020ce4:	74 08                	je     c0020cee <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0020ce6:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0020cee:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0020cf5:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0020cfc:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0020d04:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0020d0c:	83 ec 04             	sub    esp,0x4
c0020d0f:	52                   	push   edx
c0020d10:	50                   	push   eax
c0020d11:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020d15:	50                   	push   eax
c0020d16:	e8 27 5e fe ff       	call   c0006b42 <f_chmod>
c0020d1b:	83 c4 10             	add    esp,0x10
c0020d1e:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0020d25:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0020d2c:	85 c0                	test   eax,eax
c0020d2e:	75 07                	jne    c0020d37 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0020d30:	b8 00 00 00 00       	mov    eax,0x0
c0020d35:	eb 05                	jmp    c0020d3c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020d37:	b8 01 00 00 00       	mov    eax,0x1
c0020d3c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0020d42:	c3                   	ret    
c0020d43:	90                   	nop

c0020d44 <FAT::rename(char const*, char const*)>:
c0020d44:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0020d4a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0020d52:	74 0a                	je     c0020d5e <FAT::rename(char const*, char const*)+0x1a>
c0020d54:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0020d5c:	75 0a                	jne    c0020d68 <FAT::rename(char const*, char const*)+0x24>
c0020d5e:	b8 04 00 00 00       	mov    eax,0x4
c0020d63:	e9 98 00 00 00       	jmp    c0020e00 <FAT::rename(char const*, char const*)+0xbc>
c0020d68:	83 ec 08             	sub    esp,0x8
c0020d6b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020d72:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020d79:	50                   	push   eax
c0020d7a:	e8 8d fa fd ff       	call   c000080c <strcpy>
c0020d7f:	83 c4 10             	add    esp,0x10
c0020d82:	83 ec 08             	sub    esp,0x8
c0020d85:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0020d8c:	50                   	push   eax
c0020d8d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020d94:	e8 ed fa ff ff       	call   c0020886 <FAT::fixFilepath(char*)>
c0020d99:	83 c4 10             	add    esp,0x10
c0020d9c:	83 ec 08             	sub    esp,0x8
c0020d9f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0020da6:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020daa:	50                   	push   eax
c0020dab:	e8 5c fa fd ff       	call   c000080c <strcpy>
c0020db0:	83 c4 10             	add    esp,0x10
c0020db3:	83 ec 08             	sub    esp,0x8
c0020db6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020dba:	50                   	push   eax
c0020dbb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020dc2:	e8 bf fa ff ff       	call   c0020886 <FAT::fixFilepath(char*)>
c0020dc7:	83 c4 10             	add    esp,0x10
c0020dca:	83 ec 08             	sub    esp,0x8
c0020dcd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020dd1:	50                   	push   eax
c0020dd2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020dd9:	50                   	push   eax
c0020dda:	e8 70 5a fe ff       	call   c000684f <f_rename>
c0020ddf:	83 c4 10             	add    esp,0x10
c0020de2:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0020de9:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0020df0:	85 c0                	test   eax,eax
c0020df2:	75 07                	jne    c0020dfb <FAT::rename(char const*, char const*)+0xb7>
c0020df4:	b8 00 00 00 00       	mov    eax,0x0
c0020df9:	eb 05                	jmp    c0020e00 <FAT::rename(char const*, char const*)+0xbc>
c0020dfb:	b8 01 00 00 00       	mov    eax,0x1
c0020e00:	81 c4 1c 02 00 00    	add    esp,0x21c
c0020e06:	c3                   	ret    
c0020e07:	90                   	nop

c0020e08 <FAT::mkdir(char const*)>:
c0020e08:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020e0e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020e16:	75 07                	jne    c0020e1f <FAT::mkdir(char const*)+0x17>
c0020e18:	b8 04 00 00 00       	mov    eax,0x4
c0020e1d:	eb 5c                	jmp    c0020e7b <FAT::mkdir(char const*)+0x73>
c0020e1f:	83 ec 08             	sub    esp,0x8
c0020e22:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020e29:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020e2d:	50                   	push   eax
c0020e2e:	e8 d9 f9 fd ff       	call   c000080c <strcpy>
c0020e33:	83 c4 10             	add    esp,0x10
c0020e36:	83 ec 08             	sub    esp,0x8
c0020e39:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020e3d:	50                   	push   eax
c0020e3e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020e45:	e8 3c fa ff ff       	call   c0020886 <FAT::fixFilepath(char*)>
c0020e4a:	83 c4 10             	add    esp,0x10
c0020e4d:	83 ec 0c             	sub    esp,0xc
c0020e50:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020e54:	50                   	push   eax
c0020e55:	e8 c9 57 fe ff       	call   c0006623 <f_mkdir>
c0020e5a:	83 c4 10             	add    esp,0x10
c0020e5d:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020e64:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020e6b:	85 c0                	test   eax,eax
c0020e6d:	75 07                	jne    c0020e76 <FAT::mkdir(char const*)+0x6e>
c0020e6f:	b8 00 00 00 00       	mov    eax,0x0
c0020e74:	eb 05                	jmp    c0020e7b <FAT::mkdir(char const*)+0x73>
c0020e76:	b8 01 00 00 00       	mov    eax,0x1
c0020e7b:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020e81:	c3                   	ret    

c0020e82 <FAT::exists(char const*)>:
c0020e82:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020e88:	83 ec 08             	sub    esp,0x8
c0020e8b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020e92:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020e96:	50                   	push   eax
c0020e97:	e8 70 f9 fd ff       	call   c000080c <strcpy>
c0020e9c:	83 c4 10             	add    esp,0x10
c0020e9f:	83 ec 08             	sub    esp,0x8
c0020ea2:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020ea6:	50                   	push   eax
c0020ea7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020eae:	e8 d3 f9 ff ff       	call   c0020886 <FAT::fixFilepath(char*)>
c0020eb3:	83 c4 10             	add    esp,0x10
c0020eb6:	83 ec 08             	sub    esp,0x8
c0020eb9:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0020ec0:	50                   	push   eax
c0020ec1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020ec5:	50                   	push   eax
c0020ec6:	e8 83 52 fe ff       	call   c000614e <f_stat>
c0020ecb:	83 c4 10             	add    esp,0x10
c0020ece:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020ed5:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020edc:	85 c0                	test   eax,eax
c0020ede:	75 04                	jne    c0020ee4 <FAT::exists(char const*)+0x62>
c0020ee0:	b0 01                	mov    al,0x1
c0020ee2:	eb 02                	jmp    c0020ee6 <FAT::exists(char const*)+0x64>
c0020ee4:	b0 00                	mov    al,0x0
c0020ee6:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020eec:	c3                   	ret    
c0020eed:	90                   	nop

c0020eee <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0020eee:	b8 08 00 00 00       	mov    eax,0x8
c0020ef3:	c3                   	ret    

c0020ef4 <ISO9660::seek(void*, unsigned long long)>:
c0020ef4:	53                   	push   ebx
c0020ef5:	b8 04 00 00 00       	mov    eax,0x4
c0020efa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020efe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020f02:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020f06:	85 d2                	test   edx,edx
c0020f08:	74 17                	je     c0020f21 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020f0a:	89 c8                	mov    eax,ecx
c0020f0c:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0020f0f:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0020f12:	b8 01 00 00 00       	mov    eax,0x1
c0020f17:	73 08                	jae    c0020f21 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020f19:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0020f1c:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0020f1f:	31 c0                	xor    eax,eax
c0020f21:	5b                   	pop    ebx
c0020f22:	c3                   	ret    
c0020f23:	90                   	nop

c0020f24 <ISO9660::tell(void*, unsigned long long*)>:
c0020f24:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020f28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f2c:	85 d2                	test   edx,edx
c0020f2e:	74 12                	je     c0020f42 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0020f30:	85 c0                	test   eax,eax
c0020f32:	74 0e                	je     c0020f42 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0020f34:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0020f37:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0020f3a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0020f3d:	89 10                	mov    DWORD PTR [eax],edx
c0020f3f:	31 c0                	xor    eax,eax
c0020f41:	c3                   	ret    
c0020f42:	b8 04 00 00 00       	mov    eax,0x4
c0020f47:	c3                   	ret    

c0020f48 <ISO9660::getName()>:
c0020f48:	b8 5c bc 02 c0       	mov    eax,0xc002bc5c
c0020f4d:	c3                   	ret    

c0020f4e <ISO9660::stat(void*, unsigned long long*)>:
c0020f4e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020f52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f56:	85 d2                	test   edx,edx
c0020f58:	74 12                	je     c0020f6c <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020f5a:	85 c0                	test   eax,eax
c0020f5c:	74 0e                	je     c0020f6c <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020f5e:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0020f61:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0020f64:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0020f67:	89 10                	mov    DWORD PTR [eax],edx
c0020f69:	31 c0                	xor    eax,eax
c0020f6b:	c3                   	ret    
c0020f6c:	b8 04 00 00 00       	mov    eax,0x4
c0020f71:	c3                   	ret    

c0020f72 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0020f72:	b8 01 00 00 00       	mov    eax,0x1
c0020f77:	c3                   	ret    

c0020f78 <ISO9660::unlink(char const*)>:
c0020f78:	b8 01 00 00 00       	mov    eax,0x1
c0020f7d:	c3                   	ret    

c0020f7e <ISO9660::write(void*, unsigned long, void*, int*)>:
c0020f7e:	b8 01 00 00 00       	mov    eax,0x1
c0020f83:	c3                   	ret    

c0020f84 <ISO9660::rename(char const*, char const*)>:
c0020f84:	b8 01 00 00 00       	mov    eax,0x1
c0020f89:	c3                   	ret    

c0020f8a <ISO9660::mkdir(char const*)>:
c0020f8a:	b8 01 00 00 00       	mov    eax,0x1
c0020f8f:	c3                   	ret    

c0020f90 <ISO9660::close(void*)>:
c0020f90:	83 ec 0c             	sub    esp,0xc
c0020f93:	b8 04 00 00 00       	mov    eax,0x4
c0020f98:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020f9c:	85 d2                	test   edx,edx
c0020f9e:	74 0e                	je     c0020fae <ISO9660::close(void*)+0x1e>
c0020fa0:	83 ec 0c             	sub    esp,0xc
c0020fa3:	52                   	push   edx
c0020fa4:	e8 03 e6 fe ff       	call   c000f5ac <free>
c0020fa9:	83 c4 10             	add    esp,0x10
c0020fac:	31 c0                	xor    eax,eax
c0020fae:	83 c4 0c             	add    esp,0xc
c0020fb1:	c3                   	ret    

c0020fb2 <ISO9660::closeDir(void*)>:
c0020fb2:	83 ec 0c             	sub    esp,0xc
c0020fb5:	b8 04 00 00 00       	mov    eax,0x4
c0020fba:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020fbe:	85 d2                	test   edx,edx
c0020fc0:	74 0e                	je     c0020fd0 <ISO9660::closeDir(void*)+0x1e>
c0020fc2:	83 ec 0c             	sub    esp,0xc
c0020fc5:	52                   	push   edx
c0020fc6:	e8 e1 e5 fe ff       	call   c000f5ac <free>
c0020fcb:	83 c4 10             	add    esp,0x10
c0020fce:	31 c0                	xor    eax,eax
c0020fd0:	83 c4 0c             	add    esp,0xc
c0020fd3:	c3                   	ret    

c0020fd4 <ISO9660::~ISO9660()>:
c0020fd4:	83 ec 0c             	sub    esp,0xc
c0020fd7:	ba 80 bc 02 c0       	mov    edx,0xc002bc80
c0020fdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020fe0:	89 10                	mov    DWORD PTR [eax],edx
c0020fe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020fe6:	83 ec 0c             	sub    esp,0xc
c0020fe9:	50                   	push   eax
c0020fea:	e8 09 19 ff ff       	call   c00128f8 <Filesystem::~Filesystem()>
c0020fef:	83 c4 10             	add    esp,0x10
c0020ff2:	90                   	nop
c0020ff3:	83 c4 0c             	add    esp,0xc
c0020ff6:	c3                   	ret    
c0020ff7:	90                   	nop

c0020ff8 <ISO9660::~ISO9660()>:
c0020ff8:	83 ec 0c             	sub    esp,0xc
c0020ffb:	83 ec 0c             	sub    esp,0xc
c0020ffe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021002:	e8 cd ff ff ff       	call   c0020fd4 <ISO9660::~ISO9660()>
c0021007:	83 c4 10             	add    esp,0x10
c002100a:	83 ec 08             	sub    esp,0x8
c002100d:	6a 08                	push   0x8
c002100f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021013:	e8 d9 14 ff ff       	call   c00124f1 <operator delete(void*, unsigned long)>
c0021018:	83 c4 10             	add    esp,0x10
c002101b:	83 c4 0c             	add    esp,0xc
c002101e:	c3                   	ret    

c002101f <__memmem(unsigned char*, int, unsigned char*, int)>:
c002101f:	55                   	push   ebp
c0021020:	31 c9                	xor    ecx,ecx
c0021022:	57                   	push   edi
c0021023:	56                   	push   esi
c0021024:	53                   	push   ebx
c0021025:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021029:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c002102d:	89 eb                	mov    ebx,ebp
c002102f:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021033:	39 ce                	cmp    esi,ecx
c0021035:	7e 17                	jle    c002104e <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021037:	31 d2                	xor    edx,edx
c0021039:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c002103d:	7d 13                	jge    c0021052 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c002103f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021043:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021046:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021049:	75 0d                	jne    c0021058 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c002104b:	42                   	inc    edx
c002104c:	eb eb                	jmp    c0021039 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c002104e:	31 c0                	xor    eax,eax
c0021050:	eb 0a                	jmp    c002105c <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021052:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021056:	eb 04                	jmp    c002105c <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021058:	41                   	inc    ecx
c0021059:	43                   	inc    ebx
c002105a:	eb d7                	jmp    c0021033 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c002105c:	5b                   	pop    ebx
c002105d:	5e                   	pop    esi
c002105e:	5f                   	pop    edi
c002105f:	5d                   	pop    ebp
c0021060:	c3                   	ret    

c0021061 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021061:	57                   	push   edi
c0021062:	56                   	push   esi
c0021063:	53                   	push   ebx
c0021064:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021068:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002106c:	39 0d 20 0e 03 c0    	cmp    DWORD PTR ds:0xc0030e20,ecx
c0021072:	75 08                	jne    c002107c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c0021074:	38 05 94 cc 02 c0    	cmp    BYTE PTR ds:0xc002cc94,al
c002107a:	74 2b                	je     c00210a7 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c002107c:	83 ec 0c             	sub    esp,0xc
c002107f:	a2 94 cc 02 c0       	mov    ds:0xc002cc94,al
c0021084:	68 40 0e 03 c0       	push   0xc0030e40
c0021089:	0f be c0             	movsx  eax,al
c002108c:	6a 01                	push   0x1
c002108e:	89 0d 20 0e 03 c0    	mov    DWORD PTR ds:0xc0030e20,ecx
c0021094:	31 db                	xor    ebx,ebx
c0021096:	53                   	push   ebx
c0021097:	51                   	push   ecx
c0021098:	ff 34 85 fc db 02 c0 	push   DWORD PTR [eax*4-0x3ffd2404]
c002109f:	e8 7a 4e ff ff       	call   c0015f1e <LogicalDisk::read(unsigned long long, int, void*)>
c00210a4:	83 c4 20             	add    esp,0x20
c00210a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00210ab:	be 40 0e 03 c0       	mov    esi,0xc0030e40
c00210b0:	b9 00 08 00 00       	mov    ecx,0x800
c00210b5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00210b7:	5b                   	pop    ebx
c00210b8:	5e                   	pop    esi
c00210b9:	5f                   	pop    edi
c00210ba:	c3                   	ret    
c00210bb:	90                   	nop

c00210bc <ISO9660::tryMount(LogicalDisk*, int)>:
c00210bc:	81 ec 10 08 00 00    	sub    esp,0x810
c00210c2:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00210c9:	83 c0 41             	add    eax,0x41
c00210cc:	0f be c0             	movsx  eax,al
c00210cf:	50                   	push   eax
c00210d0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00210d4:	50                   	push   eax
c00210d5:	6a 10                	push   0x10
c00210d7:	e8 85 ff ff ff       	call   c0021061 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00210dc:	83 c4 10             	add    esp,0x10
c00210df:	31 c0                	xor    eax,eax
c00210e1:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00210e6:	75 1d                	jne    c0021105 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00210e8:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00210ed:	75 16                	jne    c0021105 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00210ef:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00210f4:	75 0f                	jne    c0021105 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00210f6:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00210fb:	75 08                	jne    c0021105 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00210fd:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021102:	0f 94 c0             	sete   al
c0021105:	81 c4 0c 08 00 00    	add    esp,0x80c
c002110b:	c3                   	ret    

c002110c <ISO9660::read(void*, unsigned long, void*, int*)>:
c002110c:	55                   	push   ebp
c002110d:	57                   	push   edi
c002110e:	56                   	push   esi
c002110f:	53                   	push   ebx
c0021110:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021116:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c002111d:	85 ed                	test   ebp,ebp
c002111f:	0f 84 da 01 00 00    	je     c00212ff <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021125:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c002112d:	0f 84 cc 01 00 00    	je     c00212ff <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021133:	b8 01 00 00 00       	mov    eax,0x1
c0021138:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c002113c:	0f 85 c2 01 00 00    	jne    c0021304 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021142:	31 d2                	xor    edx,edx
c0021144:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c002114b:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002114e:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0021151:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0021154:	89 04 24             	mov    DWORD PTR [esp],eax
c0021157:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002115b:	01 c8                	add    eax,ecx
c002115d:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021160:	11 da                	adc    edx,ebx
c0021162:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0021166:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002116a:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c002116e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021172:	19 d7                	sbb    edi,edx
c0021174:	72 11                	jb     c0021187 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c0021176:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021179:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c002117d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021181:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021185:	eb 0c                	jmp    c0021193 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021187:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c002118b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002118f:	29 ce                	sub    esi,ecx
c0021191:	19 df                	sbb    edi,ebx
c0021193:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021196:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021199:	0f a4 c2 0b          	shld   edx,eax,0xb
c002119d:	c1 e0 0b             	shl    eax,0xb
c00211a0:	01 c8                	add    eax,ecx
c00211a2:	11 da                	adc    edx,ebx
c00211a4:	89 04 24             	mov    DWORD PTR [esp],eax
c00211a7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00211ab:	51                   	push   ecx
c00211ac:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00211b0:	50                   	push   eax
c00211b1:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c00211b5:	53                   	push   ebx
c00211b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00211ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00211be:	0f ac d0 0b          	shrd   eax,edx,0xb
c00211c2:	50                   	push   eax
c00211c3:	e8 99 fe ff ff       	call   c0021061 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00211c8:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00211cb:	b8 00 08 00 00       	mov    eax,0x800
c00211d0:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00211d6:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c00211da:	29 d0                	sub    eax,edx
c00211dc:	83 c4 10             	add    esp,0x10
c00211df:	89 f9                	mov    ecx,edi
c00211e1:	39 c6                	cmp    esi,eax
c00211e3:	83 d9 00             	sbb    ecx,0x0
c00211e6:	7d 1b                	jge    c0021203 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c00211e8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00211ed:	75 12                	jne    c0021201 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c00211ef:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00211f6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00211fc:	e9 fa 00 00 00       	jmp    c00212fb <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021201:	89 f0                	mov    eax,esi
c0021203:	01 d3                	add    ebx,edx
c0021205:	31 d2                	xor    edx,edx
c0021207:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c002120b:	39 c2                	cmp    edx,eax
c002120d:	7d 14                	jge    c0021223 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c002120f:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021216:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002121a:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c002121d:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021220:	42                   	inc    edx
c0021221:	eb e8                	jmp    c002120b <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c0021223:	89 c2                	mov    edx,eax
c0021225:	85 c0                	test   eax,eax
c0021227:	79 02                	jns    c002122b <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c0021229:	31 d2                	xor    edx,edx
c002122b:	01 c2                	add    edx,eax
c002122d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0021230:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c0021237:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c002123b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c002123f:	99                   	cdq    
c0021240:	01 c1                	add    ecx,eax
c0021242:	11 d3                	adc    ebx,edx
c0021244:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021248:	29 c6                	sub    esi,eax
c002124a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c002124e:	19 d7                	sbb    edi,edx
c0021250:	89 34 24             	mov    DWORD PTR [esp],esi
c0021253:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021257:	b8 ff 07 00 00       	mov    eax,0x7ff
c002125c:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c002125f:	b8 00 00 00 00       	mov    eax,0x0
c0021264:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021268:	7d 43                	jge    c00212ad <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c002126a:	52                   	push   edx
c002126b:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002126f:	50                   	push   eax
c0021270:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021274:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021278:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002127c:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021280:	50                   	push   eax
c0021281:	e8 db fd ff ff       	call   c0021061 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021286:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c002128e:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021293:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c002129b:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c00212a3:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00212a8:	83 c4 10             	add    esp,0x10
c00212ab:	eb aa                	jmp    c0021257 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c00212ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00212b1:	0b 04 24             	or     eax,DWORD PTR [esp]
c00212b4:	74 2a                	je     c00212e0 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c00212b6:	50                   	push   eax
c00212b7:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00212bb:	50                   	push   eax
c00212bc:	8d 74 24 28          	lea    esi,[esp+0x28]
c00212c0:	56                   	push   esi
c00212c1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00212c5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00212c9:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c00212cd:	51                   	push   ecx
c00212ce:	e8 8e fd ff ff       	call   c0021061 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00212d3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00212d7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00212db:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00212dd:	83 c4 10             	add    esp,0x10
c00212e0:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00212e7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00212eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00212ef:	89 18                	mov    DWORD PTR [eax],ebx
c00212f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00212f5:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00212f8:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00212fb:	31 c0                	xor    eax,eax
c00212fd:	eb 05                	jmp    c0021304 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c00212ff:	b8 04 00 00 00       	mov    eax,0x4
c0021304:	81 c4 2c 08 00 00    	add    esp,0x82c
c002130a:	5b                   	pop    ebx
c002130b:	5e                   	pop    esi
c002130c:	5f                   	pop    edi
c002130d:	5d                   	pop    ebp
c002130e:	c3                   	ret    
c002130f:	90                   	nop

c0021310 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021310:	55                   	push   ebp
c0021311:	57                   	push   edi
c0021312:	56                   	push   esi
c0021313:	53                   	push   ebx
c0021314:	81 ec 5c 09 00 00    	sub    esp,0x95c
c002131a:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c0021321:	85 ed                	test   ebp,ebp
c0021323:	0f 84 51 02 00 00    	je     c002157a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021329:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021331:	0f 84 43 02 00 00    	je     c002157a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021337:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002133a:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c002133d:	75 0a                	jne    c0021349 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c002133f:	b8 07 00 00 00       	mov    eax,0x7
c0021344:	e9 36 02 00 00       	jmp    c002157f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021349:	50                   	push   eax
c002134a:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002134e:	50                   	push   eax
c002134f:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021356:	53                   	push   ebx
c0021357:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002135a:	c1 e0 0b             	shl    eax,0xb
c002135d:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c0021360:	c1 e8 0b             	shr    eax,0xb
c0021363:	50                   	push   eax
c0021364:	e8 f8 fc ff ff       	call   c0021061 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021369:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002136c:	83 c4 10             	add    esp,0x10
c002136f:	89 c1                	mov    ecx,eax
c0021371:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0021374:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002137a:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c002137d:	84 db                	test   bl,bl
c002137f:	0f 85 8b 00 00 00    	jne    c0021410 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c0021385:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c002138b:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002138e:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0021394:	29 c6                	sub    esi,eax
c0021396:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c002139a:	89 f3                	mov    ebx,esi
c002139c:	89 f1                	mov    ecx,esi
c002139e:	c1 fb 1f             	sar    ebx,0x1f
c00213a1:	01 f0                	add    eax,esi
c00213a3:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00213a6:	11 da                	adc    edx,ebx
c00213a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00213ab:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00213af:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00213b2:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00213b5:	89 d8                	mov    eax,ebx
c00213b7:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c00213bb:	ba 00 00 00 00       	mov    edx,0x0
c00213c0:	19 f8                	sbb    eax,edi
c00213c2:	b8 00 00 00 00       	mov    eax,0x0
c00213c7:	73 08                	jae    c00213d1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c00213c9:	89 f0                	mov    eax,esi
c00213cb:	89 fa                	mov    edx,edi
c00213cd:	29 c8                	sub    eax,ecx
c00213cf:	19 da                	sbb    edx,ebx
c00213d1:	89 d7                	mov    edi,edx
c00213d3:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c00213d6:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00213d9:	09 c7                	or     edi,eax
c00213db:	0f 84 5e ff ff ff    	je     c002133f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c00213e1:	57                   	push   edi
c00213e2:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00213e6:	50                   	push   eax
c00213e7:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00213ee:	53                   	push   ebx
c00213ef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00213f2:	c1 e0 0b             	shl    eax,0xb
c00213f5:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00213f9:	c1 e8 0b             	shr    eax,0xb
c00213fc:	50                   	push   eax
c00213fd:	e8 5f fc ff ff       	call   c0021061 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021402:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021405:	83 c4 10             	add    esp,0x10
c0021408:	25 ff 07 00 00       	and    eax,0x7ff
c002140d:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021410:	31 ff                	xor    edi,edi
c0021412:	56                   	push   esi
c0021413:	6a 28                	push   0x28
c0021415:	6a 00                	push   0x0
c0021417:	8d 44 24 24          	lea    eax,[esp+0x24]
c002141b:	50                   	push   eax
c002141c:	e8 2f f3 fd ff       	call   c0000750 <memset>
c0021421:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021424:	25 ff 07 00 00       	and    eax,0x7ff
c0021429:	89 c6                	mov    esi,eax
c002142b:	83 c6 21             	add    esi,0x21
c002142e:	83 d7 00             	adc    edi,0x0
c0021431:	83 c4 10             	add    esp,0x10
c0021434:	31 c9                	xor    ecx,ecx
c0021436:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c002143d:	83 f9 28             	cmp    ecx,0x28
c0021440:	88 04 24             	mov    BYTE PTR [esp],al
c0021443:	0f 94 c2             	sete   dl
c0021446:	88 d0                	mov    al,dl
c0021448:	ba ff 07 00 00       	mov    edx,0x7ff
c002144d:	39 f2                	cmp    edx,esi
c002144f:	ba 00 00 00 00       	mov    edx,0x0
c0021454:	19 fa                	sbb    edx,edi
c0021456:	0f 92 c2             	setb   dl
c0021459:	09 c2                	or     edx,eax
c002145b:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c002145f:	0f 94 c0             	sete   al
c0021462:	08 d0                	or     al,dl
c0021464:	75 16                	jne    c002147c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021466:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c002146a:	74 10                	je     c002147c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c002146c:	8a 04 24             	mov    al,BYTE PTR [esp]
c002146f:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021473:	41                   	inc    ecx
c0021474:	83 c6 01             	add    esi,0x1
c0021477:	83 d7 00             	adc    edi,0x0
c002147a:	eb ba                	jmp    c0021436 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c002147c:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021483:	83 ec 0c             	sub    esp,0xc
c0021486:	8d 74 24 24          	lea    esi,[esp+0x24]
c002148a:	56                   	push   esi
c002148b:	e8 dc f2 fd ff       	call   c000076c <strlen>
c0021490:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c0021497:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c002149b:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00214a3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00214a6:	5a                   	pop    edx
c00214a7:	25 ff 07 00 00       	and    eax,0x7ff
c00214ac:	59                   	pop    ecx
c00214ad:	01 f8                	add    eax,edi
c00214af:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c00214b5:	83 e0 02             	and    eax,0x2
c00214b8:	3c 01                	cmp    al,0x1
c00214ba:	19 c0                	sbb    eax,eax
c00214bc:	83 c0 02             	add    eax,0x2
c00214bf:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00214c3:	56                   	push   esi
c00214c4:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00214c8:	50                   	push   eax
c00214c9:	e8 3e f3 fd ff       	call   c000080c <strcpy>
c00214ce:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c00214d2:	83 c4 10             	add    esp,0x10
c00214d5:	84 c0                	test   al,al
c00214d7:	75 21                	jne    c00214fa <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c00214d9:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c00214e1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00214e9:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c00214f1:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c00214f8:	eb 28                	jmp    c0021522 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c00214fa:	fe c8                	dec    al
c00214fc:	75 24                	jne    c0021522 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c00214fe:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021506:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c002150e:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021516:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c002151d:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021522:	8d 74 24 40          	lea    esi,[esp+0x40]
c0021526:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c002152d:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c0021534:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021536:	0f b6 f3             	movzx  esi,bl
c0021539:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c0021540:	31 db                	xor    ebx,ebx
c0021542:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021548:	89 df                	mov    edi,ebx
c002154a:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c002154d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021550:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c0021553:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021556:	39 c6                	cmp    esi,eax
c0021558:	19 d7                	sbb    edi,edx
c002155a:	72 10                	jb     c002156c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c002155c:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0021563:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c002156a:	eb 0a                	jmp    c0021576 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c002156c:	29 f0                	sub    eax,esi
c002156e:	19 da                	sbb    edx,ebx
c0021570:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021573:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021576:	31 c0                	xor    eax,eax
c0021578:	eb 05                	jmp    c002157f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c002157a:	b8 04 00 00 00       	mov    eax,0x4
c002157f:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021585:	5b                   	pop    ebx
c0021586:	5e                   	pop    esi
c0021587:	5f                   	pop    edi
c0021588:	5d                   	pop    ebp
c0021589:	c3                   	ret    

c002158a <readRoot(unsigned int*, unsigned int*, char)>:
c002158a:	57                   	push   edi
c002158b:	56                   	push   esi
c002158c:	81 ec 38 08 00 00    	sub    esp,0x838
c0021592:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c002159a:	50                   	push   eax
c002159b:	8d 44 24 38          	lea    eax,[esp+0x38]
c002159f:	50                   	push   eax
c00215a0:	6a 10                	push   0x10
c00215a2:	e8 ba fa ff ff       	call   c0021061 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00215a7:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c00215ae:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c00215b2:	b9 22 00 00 00       	mov    ecx,0x22
c00215b7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00215b9:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00215c0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00215c4:	89 10                	mov    DWORD PTR [eax],edx
c00215c6:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c00215cd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00215d1:	89 10                	mov    DWORD PTR [eax],edx
c00215d3:	81 c4 44 08 00 00    	add    esp,0x844
c00215d9:	b0 01                	mov    al,0x1
c00215db:	5e                   	pop    esi
c00215dc:	5f                   	pop    edi
c00215dd:	c3                   	ret    

c00215de <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c00215de:	55                   	push   ebp
c00215df:	57                   	push   edi
c00215e0:	56                   	push   esi
c00215e1:	53                   	push   ebx
c00215e2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00215e8:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c00215ef:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c00215f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00215fa:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c00215fe:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021602:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021606:	75 03                	jne    c002160b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021608:	83 c3 02             	add    ebx,0x2
c002160b:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c002160e:	75 03                	jne    c0021613 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021610:	43                   	inc    ebx
c0021611:	eb f8                	jmp    c002160b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021613:	51                   	push   ecx
c0021614:	68 00 01 00 00       	push   0x100
c0021619:	6a 00                	push   0x0
c002161b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002161f:	50                   	push   eax
c0021620:	e8 2b f1 fd ff       	call   c0000750 <memset>
c0021625:	83 c4 10             	add    esp,0x10
c0021628:	31 d2                	xor    edx,edx
c002162a:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002162d:	84 c0                	test   al,al
c002162f:	74 21                	je     c0021652 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021631:	3c 2f                	cmp    al,0x2f
c0021633:	75 0b                	jne    c0021640 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021635:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021639:	bd 01 00 00 00       	mov    ebp,0x1
c002163e:	eb 14                	jmp    c0021654 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021640:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021643:	80 f9 19             	cmp    cl,0x19
c0021646:	77 03                	ja     c002164b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021648:	83 e8 20             	sub    eax,0x20
c002164b:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c002164f:	42                   	inc    edx
c0021650:	eb d8                	jmp    c002162a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021652:	31 ed                	xor    ebp,ebp
c0021654:	83 ec 0c             	sub    esp,0xc
c0021657:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c002165e:	e8 39 df fe ff       	call   c000f59c <malloc>
c0021663:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c002166a:	89 c6                	mov    esi,eax
c002166c:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021672:	c1 ef 0b             	shr    edi,0xb
c0021675:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c002167c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021680:	83 c4 10             	add    esp,0x10
c0021683:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021688:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002168c:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021693:	74 28                	je     c00216bd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021695:	52                   	push   edx
c0021696:	57                   	push   edi
c0021697:	50                   	push   eax
c0021698:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002169c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00216a3:	e8 b9 f9 ff ff       	call   c0021061 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00216a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00216ac:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c00216b3:	05 00 08 00 00       	add    eax,0x800
c00216b8:	83 c4 10             	add    esp,0x10
c00216bb:	eb cb                	jmp    c0021688 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c00216bd:	83 ec 0c             	sub    esp,0xc
c00216c0:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00216c4:	57                   	push   edi
c00216c5:	e8 a2 f0 fd ff       	call   c000076c <strlen>
c00216ca:	50                   	push   eax
c00216cb:	57                   	push   edi
c00216cc:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00216d3:	56                   	push   esi
c00216d4:	e8 46 f9 ff ff       	call   c002101f <__memmem(unsigned char*, int, unsigned char*, int)>
c00216d9:	83 c4 20             	add    esp,0x20
c00216dc:	85 c0                	test   eax,eax
c00216de:	75 13                	jne    c00216f3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c00216e0:	83 ec 0c             	sub    esp,0xc
c00216e3:	56                   	push   esi
c00216e4:	e8 c3 de fe ff       	call   c000f5ac <free>
c00216e9:	83 c4 10             	add    esp,0x10
c00216ec:	31 c0                	xor    eax,eax
c00216ee:	e9 b3 00 00 00       	jmp    c00217a6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00216f3:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c00216f7:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c00216fb:	c1 e7 08             	shl    edi,0x8
c00216fe:	c1 e2 10             	shl    edx,0x10
c0021701:	09 d7                	or     edi,edx
c0021703:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021707:	09 d7                	or     edi,edx
c0021709:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c002170d:	c1 e2 18             	shl    edx,0x18
c0021710:	09 d7                	or     edi,edx
c0021712:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021716:	89 d1                	mov    ecx,edx
c0021718:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c002171c:	c1 e1 08             	shl    ecx,0x8
c002171f:	c1 e2 10             	shl    edx,0x10
c0021722:	09 ca                	or     edx,ecx
c0021724:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021728:	09 ca                	or     edx,ecx
c002172a:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c002172e:	c1 e1 18             	shl    ecx,0x18
c0021731:	09 ca                	or     edx,ecx
c0021733:	89 e9                	mov    ecx,ebp
c0021735:	84 c9                	test   cl,cl
c0021737:	74 3c                	je     c0021775 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021739:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002173d:	83 ec 0c             	sub    esp,0xc
c0021740:	56                   	push   esi
c0021741:	e8 66 de fe ff       	call   c000f5ac <free>
c0021746:	83 c4 0c             	add    esp,0xc
c0021749:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021750:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021755:	50                   	push   eax
c0021756:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002175d:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021764:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021768:	52                   	push   edx
c0021769:	57                   	push   edi
c002176a:	53                   	push   ebx
c002176b:	e8 6e fe ff ff       	call   c00215de <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021770:	83 c4 20             	add    esp,0x20
c0021773:	eb 31                	jmp    c00217a6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021775:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021778:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c002177f:	d0 e8                	shr    al,1
c0021781:	89 3b                	mov    DWORD PTR [ebx],edi
c0021783:	83 e0 01             	and    eax,0x1
c0021786:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c002178d:	83 ec 0c             	sub    esp,0xc
c0021790:	89 13                	mov    DWORD PTR [ebx],edx
c0021792:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021799:	89 03                	mov    DWORD PTR [ebx],eax
c002179b:	56                   	push   esi
c002179c:	e8 0b de fe ff       	call   c000f5ac <free>
c00217a1:	83 c4 10             	add    esp,0x10
c00217a4:	b0 01                	mov    al,0x1
c00217a6:	81 c4 1c 01 00 00    	add    esp,0x11c
c00217ac:	5b                   	pop    ebx
c00217ad:	5e                   	pop    esi
c00217ae:	5f                   	pop    edi
c00217af:	5d                   	pop    ebp
c00217b0:	c3                   	ret    

c00217b1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c00217b1:	55                   	push   ebp
c00217b2:	57                   	push   edi
c00217b3:	56                   	push   esi
c00217b4:	53                   	push   ebx
c00217b5:	83 ec 20             	sub    esp,0x20
c00217b8:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00217bc:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00217c0:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00217c4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00217cc:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00217d4:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c00217d9:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c00217df:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c00217e5:	57                   	push   edi
c00217e6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00217ea:	50                   	push   eax
c00217eb:	8d 44 24 14          	lea    eax,[esp+0x14]
c00217ef:	50                   	push   eax
c00217f0:	e8 95 fd ff ff       	call   c002158a <readRoot(unsigned int*, unsigned int*, char)>
c00217f5:	5a                   	pop    edx
c00217f6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00217fa:	e8 6d ef fd ff       	call   c000076c <strlen>
c00217ff:	83 c4 10             	add    esp,0x10
c0021802:	83 f8 03             	cmp    eax,0x3
c0021805:	77 17                	ja     c002181e <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021807:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002180b:	89 03                	mov    DWORD PTR [ebx],eax
c002180d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021811:	89 06                	mov    DWORD PTR [esi],eax
c0021813:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c002181a:	b0 01                	mov    al,0x1
c002181c:	eb 19                	jmp    c0021837 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c002181e:	50                   	push   eax
c002181f:	55                   	push   ebp
c0021820:	57                   	push   edi
c0021821:	56                   	push   esi
c0021822:	53                   	push   ebx
c0021823:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021827:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002182b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002182f:	e8 aa fd ff ff       	call   c00215de <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021834:	83 c4 20             	add    esp,0x20
c0021837:	83 c4 1c             	add    esp,0x1c
c002183a:	5b                   	pop    ebx
c002183b:	5e                   	pop    esi
c002183c:	5f                   	pop    edi
c002183d:	5d                   	pop    ebp
c002183e:	c3                   	ret    
c002183f:	90                   	nop

c0021840 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021840:	57                   	push   edi
c0021841:	56                   	push   esi
c0021842:	53                   	push   ebx
c0021843:	83 ec 10             	sub    esp,0x10
c0021846:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002184a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002184e:	85 ff                	test   edi,edi
c0021850:	0f 84 8b 00 00 00    	je     c00218e1 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0021856:	85 f6                	test   esi,esi
c0021858:	0f 84 83 00 00 00    	je     c00218e1 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c002185e:	b8 03 00 00 00       	mov    eax,0x3
c0021863:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021868:	75 7c                	jne    c00218e6 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c002186a:	83 ec 0c             	sub    esp,0xc
c002186d:	6a 1c                	push   0x1c
c002186f:	e8 28 dd fe ff       	call   c000f59c <malloc>
c0021874:	89 07                	mov    DWORD PTR [edi],eax
c0021876:	89 c3                	mov    ebx,eax
c0021878:	58                   	pop    eax
c0021879:	8d 44 24 18          	lea    eax,[esp+0x18]
c002187d:	50                   	push   eax
c002187e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021881:	50                   	push   eax
c0021882:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021886:	50                   	push   eax
c0021887:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002188b:	50                   	push   eax
c002188c:	56                   	push   esi
c002188d:	e8 1f ff ff ff       	call   c00217b1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021892:	83 c4 20             	add    esp,0x20
c0021895:	84 c0                	test   al,al
c0021897:	74 07                	je     c00218a0 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c0021899:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002189e:	74 0b                	je     c00218ab <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c00218a0:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00218a4:	b8 01 00 00 00       	mov    eax,0x1
c00218a9:	eb 3b                	jmp    c00218e6 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c00218ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218af:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00218b3:	89 03                	mov    DWORD PTR [ebx],eax
c00218b5:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00218bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00218c0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00218c7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00218ce:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00218d1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00218d8:	8a 06                	mov    al,BYTE PTR [esi]
c00218da:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00218dd:	31 c0                	xor    eax,eax
c00218df:	eb 05                	jmp    c00218e6 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c00218e1:	b8 04 00 00 00       	mov    eax,0x4
c00218e6:	83 c4 10             	add    esp,0x10
c00218e9:	5b                   	pop    ebx
c00218ea:	5e                   	pop    esi
c00218eb:	5f                   	pop    edi
c00218ec:	c3                   	ret    
c00218ed:	90                   	nop

c00218ee <ISO9660::exists(char const*)>:
c00218ee:	83 ec 28             	sub    esp,0x28
c00218f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00218f5:	8d 54 24 18          	lea    edx,[esp+0x18]
c00218f9:	52                   	push   edx
c00218fa:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00218fd:	52                   	push   edx
c00218fe:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021902:	52                   	push   edx
c0021903:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021907:	52                   	push   edx
c0021908:	50                   	push   eax
c0021909:	e8 a3 fe ff ff       	call   c00217b1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002190e:	83 c4 3c             	add    esp,0x3c
c0021911:	c3                   	ret    

c0021912 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0021912:	56                   	push   esi
c0021913:	53                   	push   ebx
c0021914:	83 ec 14             	sub    esp,0x14
c0021917:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002191b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002191f:	85 db                	test   ebx,ebx
c0021921:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021925:	0f 94 c2             	sete   dl
c0021928:	85 f6                	test   esi,esi
c002192a:	0f 94 c0             	sete   al
c002192d:	08 c2                	or     dl,al
c002192f:	75 68                	jne    c0021999 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021931:	85 c9                	test   ecx,ecx
c0021933:	74 64                	je     c0021999 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021935:	83 ec 0c             	sub    esp,0xc
c0021938:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002193b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002193f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021945:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002194c:	50                   	push   eax
c002194d:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0021950:	50                   	push   eax
c0021951:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021955:	50                   	push   eax
c0021956:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002195a:	50                   	push   eax
c002195b:	51                   	push   ecx
c002195c:	e8 50 fe ff ff       	call   c00217b1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021961:	83 c4 20             	add    esp,0x20
c0021964:	ba 01 00 00 00       	mov    edx,0x1
c0021969:	84 c0                	test   al,al
c002196b:	74 31                	je     c002199e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002196d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021971:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021978:	89 03                	mov    DWORD PTR [ebx],eax
c002197a:	ba 00 00 00 00       	mov    edx,0x0
c002197f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021983:	85 c0                	test   eax,eax
c0021985:	0f 95 06             	setne  BYTE PTR [esi]
c0021988:	74 14                	je     c002199e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002198a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021990:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021997:	eb 05                	jmp    c002199e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021999:	ba 04 00 00 00       	mov    edx,0x4
c002199e:	83 c4 14             	add    esp,0x14
c00219a1:	89 d0                	mov    eax,edx
c00219a3:	5b                   	pop    ebx
c00219a4:	5e                   	pop    esi
c00219a5:	c3                   	ret    

c00219a6 <ISO9660::openDir(char const*, void**)>:
c00219a6:	57                   	push   edi
c00219a7:	56                   	push   esi
c00219a8:	53                   	push   ebx
c00219a9:	83 ec 10             	sub    esp,0x10
c00219ac:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00219b0:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00219b4:	85 ff                	test   edi,edi
c00219b6:	74 7b                	je     c0021a33 <ISO9660::openDir(char const*, void**)+0x8d>
c00219b8:	85 f6                	test   esi,esi
c00219ba:	74 77                	je     c0021a33 <ISO9660::openDir(char const*, void**)+0x8d>
c00219bc:	83 ec 0c             	sub    esp,0xc
c00219bf:	6a 1c                	push   0x1c
c00219c1:	e8 d6 db fe ff       	call   c000f59c <malloc>
c00219c6:	89 07                	mov    DWORD PTR [edi],eax
c00219c8:	89 c3                	mov    ebx,eax
c00219ca:	58                   	pop    eax
c00219cb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00219cf:	50                   	push   eax
c00219d0:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00219d3:	50                   	push   eax
c00219d4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00219d8:	50                   	push   eax
c00219d9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00219dd:	50                   	push   eax
c00219de:	56                   	push   esi
c00219df:	e8 cd fd ff ff       	call   c00217b1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00219e4:	83 c4 20             	add    esp,0x20
c00219e7:	84 c0                	test   al,al
c00219e9:	74 07                	je     c00219f2 <ISO9660::openDir(char const*, void**)+0x4c>
c00219eb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00219f0:	75 0b                	jne    c00219fd <ISO9660::openDir(char const*, void**)+0x57>
c00219f2:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00219f6:	b8 01 00 00 00       	mov    eax,0x1
c00219fb:	eb 3b                	jmp    c0021a38 <ISO9660::openDir(char const*, void**)+0x92>
c00219fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a01:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021a05:	89 03                	mov    DWORD PTR [ebx],eax
c0021a07:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021a0e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a12:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021a19:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021a20:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021a23:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021a2a:	8a 06                	mov    al,BYTE PTR [esi]
c0021a2c:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021a2f:	31 c0                	xor    eax,eax
c0021a31:	eb 05                	jmp    c0021a38 <ISO9660::openDir(char const*, void**)+0x92>
c0021a33:	b8 04 00 00 00       	mov    eax,0x4
c0021a38:	83 c4 10             	add    esp,0x10
c0021a3b:	5b                   	pop    ebx
c0021a3c:	5e                   	pop    esi
c0021a3d:	5f                   	pop    edi
c0021a3e:	c3                   	ret    
c0021a3f:	90                   	nop

c0021a40 <ISO9660::ISO9660()>:
c0021a40:	83 ec 0c             	sub    esp,0xc
c0021a43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a47:	83 ec 0c             	sub    esp,0xc
c0021a4a:	50                   	push   eax
c0021a4b:	e8 84 0e ff ff       	call   c00128d4 <Filesystem::Filesystem()>
c0021a50:	83 c4 10             	add    esp,0x10
c0021a53:	ba 80 bc 02 c0       	mov    edx,0xc002bc80
c0021a58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a5c:	89 10                	mov    DWORD PTR [eax],edx
c0021a5e:	90                   	nop
c0021a5f:	83 c4 0c             	add    esp,0xc
c0021a62:	c3                   	ret    
c0021a63:	90                   	nop

c0021a64 <SoundChannel::SoundChannel(int, int, int, int)>:
c0021a64:	83 ec 1c             	sub    esp,0x1c
c0021a67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021a6b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021a6f:	89 10                	mov    DWORD PTR [eax],edx
c0021a71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021a75:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021a79:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021a7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021a80:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021a84:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021a87:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0021a8c:	75 23                	jne    c0021ab1 <SoundChannel::SoundChannel(int, int, int, int)+0x4d>
c0021a8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021a92:	8b 10                	mov    edx,DWORD PTR [eax]
c0021a94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021a98:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021a9b:	0f af c2             	imul   eax,edx
c0021a9e:	85 c0                	test   eax,eax
c0021aa0:	79 03                	jns    c0021aa5 <SoundChannel::SoundChannel(int, int, int, int)+0x41>
c0021aa2:	83 c0 03             	add    eax,0x3
c0021aa5:	c1 f8 02             	sar    eax,0x2
c0021aa8:	05 a0 0f 00 00       	add    eax,0xfa0
c0021aad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021ab1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ab5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021ab9:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0021abc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ac0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0021ac7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021acb:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0021ad2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ad6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021ad9:	c1 e0 02             	shl    eax,0x2
c0021adc:	83 ec 0c             	sub    esp,0xc
c0021adf:	50                   	push   eax
c0021ae0:	e8 b7 da fe ff       	call   c000f59c <malloc>
c0021ae5:	83 c4 10             	add    esp,0x10
c0021ae8:	89 c2                	mov    edx,eax
c0021aea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021aee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0021af1:	83 ec 04             	sub    esp,0x4
c0021af4:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021af8:	50                   	push   eax
c0021af9:	6a 01                	push   0x1
c0021afb:	6a 04                	push   0x4
c0021afd:	e8 63 70 fe ff       	call   c0008b65 <src_new>
c0021b02:	83 c4 10             	add    esp,0x10
c0021b05:	89 c2                	mov    edx,eax
c0021b07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b0b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0021b0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b12:	85 c0                	test   eax,eax
c0021b14:	74 10                	je     c0021b26 <SoundChannel::SoundChannel(int, int, int, int)+0xc2>
c0021b16:	83 ec 0c             	sub    esp,0xc
c0021b19:	68 e0 bc 02 c0       	push   0xc002bce0
c0021b1e:	e8 12 82 ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c0021b23:	83 c4 10             	add    esp,0x10
c0021b26:	a0 40 1a 03 c0       	mov    al,ds:0xc0031a40
c0021b2b:	83 f0 01             	xor    eax,0x1
c0021b2e:	84 c0                	test   al,al
c0021b30:	74 57                	je     c0021b89 <SoundChannel::SoundChannel(int, int, int, int)+0x125>
c0021b32:	a1 fc bc 02 c0       	mov    eax,ds:0xc002bcfc
c0021b37:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021b3b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021b43:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0021b4b:	7f 35                	jg     c0021b82 <SoundChannel::SoundChannel(int, int, int, int)+0x11e>
c0021b4d:	83 ec 0c             	sub    esp,0xc
c0021b50:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021b54:	e8 d6 53 00 00       	call   c0026f2f <__floatsisf>
c0021b59:	83 c4 10             	add    esp,0x10
c0021b5c:	8b 15 fc bc 02 c0    	mov    edx,DWORD PTR ds:0xc002bcfc
c0021b62:	83 ec 08             	sub    esp,0x8
c0021b65:	52                   	push   edx
c0021b66:	50                   	push   eax
c0021b67:	e8 d5 4f 00 00       	call   c0026b41 <__mulsf3>
c0021b6c:	83 c4 10             	add    esp,0x10
c0021b6f:	89 c2                	mov    edx,eax
c0021b71:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021b75:	89 14 85 40 16 03 c0 	mov    DWORD PTR [eax*4-0x3ffce9c0],edx
c0021b7c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021b80:	eb c1                	jmp    c0021b43 <SoundChannel::SoundChannel(int, int, int, int)+0xdf>
c0021b82:	c6 05 40 1a 03 c0 01 	mov    BYTE PTR ds:0xc0031a40,0x1
c0021b89:	90                   	nop
c0021b8a:	83 c4 1c             	add    esp,0x1c
c0021b8d:	c3                   	ret    

c0021b8e <SoundChannel::~SoundChannel()>:
c0021b8e:	83 ec 0c             	sub    esp,0xc
c0021b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b95:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0021b98:	83 ec 0c             	sub    esp,0xc
c0021b9b:	50                   	push   eax
c0021b9c:	e8 0b da fe ff       	call   c000f5ac <free>
c0021ba1:	83 c4 10             	add    esp,0x10
c0021ba4:	90                   	nop
c0021ba5:	83 c4 0c             	add    esp,0xc
c0021ba8:	c3                   	ret    
c0021ba9:	90                   	nop

c0021baa <SoundChannel::getSampleRate()>:
c0021baa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021bae:	8b 00                	mov    eax,DWORD PTR [eax]
c0021bb0:	c3                   	ret    
c0021bb1:	90                   	nop

c0021bb2 <SoundChannel::getBits()>:
c0021bb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021bb6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021bb9:	c3                   	ret    

c0021bba <SoundChannel::getBufferUsed()>:
c0021bba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021bbe:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0021bc1:	c3                   	ret    

c0021bc2 <SoundChannel::getBufferSize()>:
c0021bc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021bc6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021bc9:	c3                   	ret    

c0021bca <SoundChannel::unbuffer(float*, int, int)>:
c0021bca:	56                   	push   esi
c0021bcb:	53                   	push   ebx
c0021bcc:	83 ec 40             	sub    esp,0x40
c0021bcf:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0021bd3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0021bd6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021bda:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0021bdd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021be1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021be5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021be9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021bed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021bf1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0021bf5:	e8 35 53 00 00       	call   c0026f2f <__floatsisf>
c0021bfa:	5a                   	pop    edx
c0021bfb:	89 c6                	mov    esi,eax
c0021bfd:	ff 33                	push   DWORD PTR [ebx]
c0021bff:	e8 2b 53 00 00       	call   c0026f2f <__floatsisf>
c0021c04:	59                   	pop    ecx
c0021c05:	5a                   	pop    edx
c0021c06:	50                   	push   eax
c0021c07:	56                   	push   esi
c0021c08:	e8 f7 50 00 00       	call   c0026d04 <__divsf3>
c0021c0d:	89 04 24             	mov    DWORD PTR [esp],eax
c0021c10:	e8 ea 65 00 00       	call   c00281ff <__extendsfdf2>
c0021c15:	59                   	pop    ecx
c0021c16:	5e                   	pop    esi
c0021c17:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021c1b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0021c1f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0021c27:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021c2b:	50                   	push   eax
c0021c2c:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0021c2f:	e8 26 6b fe ff       	call   c000875a <src_process>
c0021c34:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021c38:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0021c3b:	83 c4 0c             	add    esp,0xc
c0021c3e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0021c41:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0021c44:	29 d0                	sub    eax,edx
c0021c46:	c1 e0 02             	shl    eax,0x2
c0021c49:	50                   	push   eax
c0021c4a:	8d 04 91             	lea    eax,[ecx+edx*4]
c0021c4d:	50                   	push   eax
c0021c4e:	51                   	push   ecx
c0021c4f:	e8 34 ea fd ff       	call   c0000688 <memmove>
c0021c54:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021c58:	83 c4 44             	add    esp,0x44
c0021c5b:	5b                   	pop    ebx
c0021c5c:	5e                   	pop    esi
c0021c5d:	c3                   	ret    

c0021c5e <SoundChannel::buffer16(short*, int)>:
c0021c5e:	55                   	push   ebp
c0021c5f:	57                   	push   edi
c0021c60:	56                   	push   esi
c0021c61:	53                   	push   ebx
c0021c62:	83 ec 1c             	sub    esp,0x1c
c0021c65:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0021c69:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021c6c:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021c6f:	0f 84 d2 00 00 00    	je     c0021d47 <SoundChannel::buffer16(short*, int)+0xe9>
c0021c75:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0021c79:	85 ed                	test   ebp,ebp
c0021c7b:	0f 8e c6 00 00 00    	jle    c0021d47 <SoundChannel::buffer16(short*, int)+0xe9>
c0021c81:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021c85:	bd 00 00 00 38       	mov    ebp,0x38000000
c0021c8a:	83 ec 0c             	sub    esp,0xc
c0021c8d:	0f bf 00             	movsx  eax,WORD PTR [eax]
c0021c90:	50                   	push   eax
c0021c91:	e8 99 52 00 00       	call   c0026f2f <__floatsisf>
c0021c96:	59                   	pop    ecx
c0021c97:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021c9a:	5f                   	pop    edi
c0021c9b:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021c9e:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021ca1:	55                   	push   ebp
c0021ca2:	50                   	push   eax
c0021ca3:	e8 99 4e 00 00       	call   c0026b41 <__mulsf3>
c0021ca8:	83 c4 10             	add    esp,0x10
c0021cab:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021cae:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021cb1:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021cb4:	0f 84 99 00 00 00    	je     c0021d53 <SoundChannel::buffer16(short*, int)+0xf5>
c0021cba:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c0021cbf:	74 78                	je     c0021d39 <SoundChannel::buffer16(short*, int)+0xdb>
c0021cc1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021cc5:	83 ec 0c             	sub    esp,0xc
c0021cc8:	0f bf 40 02          	movsx  eax,WORD PTR [eax+0x2]
c0021ccc:	50                   	push   eax
c0021ccd:	e8 5d 52 00 00       	call   c0026f2f <__floatsisf>
c0021cd2:	5f                   	pop    edi
c0021cd3:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021cd6:	5a                   	pop    edx
c0021cd7:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021cda:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021cdd:	55                   	push   ebp
c0021cde:	50                   	push   eax
c0021cdf:	e8 5d 4e 00 00       	call   c0026b41 <__mulsf3>
c0021ce4:	83 c4 10             	add    esp,0x10
c0021ce7:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021cea:	be 02 00 00 00       	mov    esi,0x2
c0021cef:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021cf2:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021cf5:	74 46                	je     c0021d3d <SoundChannel::buffer16(short*, int)+0xdf>
c0021cf7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0021cfb:	eb 36                	jmp    c0021d33 <SoundChannel::buffer16(short*, int)+0xd5>
c0021cfd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021d01:	83 ec 0c             	sub    esp,0xc
c0021d04:	0f bf 04 70          	movsx  eax,WORD PTR [eax+esi*2]
c0021d08:	46                   	inc    esi
c0021d09:	50                   	push   eax
c0021d0a:	e8 20 52 00 00       	call   c0026f2f <__floatsisf>
c0021d0f:	5a                   	pop    edx
c0021d10:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0021d13:	59                   	pop    ecx
c0021d14:	8d 4f 01             	lea    ecx,[edi+0x1]
c0021d17:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021d1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021d1e:	50                   	push   eax
c0021d1f:	e8 1d 4e 00 00       	call   c0026b41 <__mulsf3>
c0021d24:	83 c4 10             	add    esp,0x10
c0021d27:	89 44 bd 00          	mov    DWORD PTR [ebp+edi*4+0x0],eax
c0021d2b:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021d2e:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021d31:	74 0a                	je     c0021d3d <SoundChannel::buffer16(short*, int)+0xdf>
c0021d33:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
c0021d37:	75 c4                	jne    c0021cfd <SoundChannel::buffer16(short*, int)+0x9f>
c0021d39:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0021d3d:	83 c4 1c             	add    esp,0x1c
c0021d40:	89 f0                	mov    eax,esi
c0021d42:	5b                   	pop    ebx
c0021d43:	5e                   	pop    esi
c0021d44:	5f                   	pop    edi
c0021d45:	5d                   	pop    ebp
c0021d46:	c3                   	ret    
c0021d47:	83 c4 1c             	add    esp,0x1c
c0021d4a:	31 f6                	xor    esi,esi
c0021d4c:	5b                   	pop    ebx
c0021d4d:	89 f0                	mov    eax,esi
c0021d4f:	5e                   	pop    esi
c0021d50:	5f                   	pop    edi
c0021d51:	5d                   	pop    ebp
c0021d52:	c3                   	ret    
c0021d53:	be 01 00 00 00       	mov    esi,0x1
c0021d58:	eb e3                	jmp    c0021d3d <SoundChannel::buffer16(short*, int)+0xdf>

c0021d5a <SoundChannel::buffer8(unsigned char*, int)>:
c0021d5a:	55                   	push   ebp
c0021d5b:	57                   	push   edi
c0021d5c:	56                   	push   esi
c0021d5d:	53                   	push   ebx
c0021d5e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021d62:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0021d66:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021d69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021d6d:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021d70:	74 7a                	je     c0021dec <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021d72:	85 ff                	test   edi,edi
c0021d74:	7e 76                	jle    c0021dec <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021d76:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0021d7a:	8d 70 01             	lea    esi,[eax+0x1]
c0021d7d:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021d80:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021d83:	8b 1c 9d 40 16 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce9c0]
c0021d8a:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021d8d:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021d90:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021d93:	74 5e                	je     c0021df3 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0021d95:	83 ff 01             	cmp    edi,0x1
c0021d98:	74 4b                	je     c0021de5 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0021d9a:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0021d9e:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021da1:	8d 70 01             	lea    esi,[eax+0x1]
c0021da4:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021da7:	8b 1c 9d 40 16 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce9c0]
c0021dae:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021db1:	b8 02 00 00 00       	mov    eax,0x2
c0021db6:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021db9:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021dbc:	75 23                	jne    c0021de1 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0021dbe:	eb 27                	jmp    c0021de7 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021dc0:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0021dc5:	8d 71 01             	lea    esi,[ecx+0x1]
c0021dc8:	40                   	inc    eax
c0021dc9:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021dcc:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0021dcf:	8b 1c 9d 40 16 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce9c0]
c0021dd6:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0021dd9:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021ddc:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021ddf:	74 06                	je     c0021de7 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021de1:	39 c7                	cmp    edi,eax
c0021de3:	75 db                	jne    c0021dc0 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0021de5:	89 f8                	mov    eax,edi
c0021de7:	5b                   	pop    ebx
c0021de8:	5e                   	pop    esi
c0021de9:	5f                   	pop    edi
c0021dea:	5d                   	pop    ebp
c0021deb:	c3                   	ret    
c0021dec:	5b                   	pop    ebx
c0021ded:	31 c0                	xor    eax,eax
c0021def:	5e                   	pop    esi
c0021df0:	5f                   	pop    edi
c0021df1:	5d                   	pop    ebp
c0021df2:	c3                   	ret    
c0021df3:	b8 01 00 00 00       	mov    eax,0x1
c0021df8:	eb ed                	jmp    c0021de7 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0021dfa <SoundDevice::SoundDevice(char const*)>:
c0021dfa:	83 ec 1c             	sub    esp,0x1c
c0021dfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e01:	83 ec 08             	sub    esp,0x8
c0021e04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021e08:	50                   	push   eax
c0021e09:	e8 f8 1d ff ff       	call   c0013c06 <Device::Device(char const*)>
c0021e0e:	83 c4 10             	add    esp,0x10
c0021e11:	ba 08 bd 02 c0       	mov    edx,0xc002bd08
c0021e16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e1a:	89 10                	mov    DWORD PTR [eax],edx
c0021e1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e20:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0021e2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e2e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0021e38:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021e40:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021e45:	7f 19                	jg     c0021e60 <SoundDevice::SoundDevice(char const*)+0x66>
c0021e47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e4b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021e4f:	83 c2 54             	add    edx,0x54
c0021e52:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0021e5a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021e5e:	eb e0                	jmp    c0021e40 <SoundDevice::SoundDevice(char const*)+0x46>
c0021e60:	90                   	nop
c0021e61:	83 c4 1c             	add    esp,0x1c
c0021e64:	c3                   	ret    
c0021e65:	90                   	nop

c0021e66 <SoundDevice::~SoundDevice()>:
c0021e66:	53                   	push   ebx
c0021e67:	83 ec 18             	sub    esp,0x18
c0021e6a:	ba 08 bd 02 c0       	mov    edx,0xc002bd08
c0021e6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e73:	89 10                	mov    DWORD PTR [eax],edx
c0021e75:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021e7d:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021e82:	7f 46                	jg     c0021eca <SoundDevice::~SoundDevice()+0x64>
c0021e84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e88:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021e8c:	83 c2 54             	add    edx,0x54
c0021e8f:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0021e93:	85 c0                	test   eax,eax
c0021e95:	74 2d                	je     c0021ec4 <SoundDevice::~SoundDevice()+0x5e>
c0021e97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e9b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021e9f:	83 c2 54             	add    edx,0x54
c0021ea2:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0021ea6:	85 db                	test   ebx,ebx
c0021ea8:	74 1a                	je     c0021ec4 <SoundDevice::~SoundDevice()+0x5e>
c0021eaa:	83 ec 0c             	sub    esp,0xc
c0021ead:	53                   	push   ebx
c0021eae:	e8 db fc ff ff       	call   c0021b8e <SoundChannel::~SoundChannel()>
c0021eb3:	83 c4 10             	add    esp,0x10
c0021eb6:	83 ec 08             	sub    esp,0x8
c0021eb9:	6a 2c                	push   0x2c
c0021ebb:	53                   	push   ebx
c0021ebc:	e8 30 06 ff ff       	call   c00124f1 <operator delete(void*, unsigned long)>
c0021ec1:	83 c4 10             	add    esp,0x10
c0021ec4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021ec8:	eb b3                	jmp    c0021e7d <SoundDevice::~SoundDevice()+0x17>
c0021eca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ece:	83 ec 0c             	sub    esp,0xc
c0021ed1:	50                   	push   eax
c0021ed2:	e8 f9 19 ff ff       	call   c00138d0 <Device::~Device()>
c0021ed7:	83 c4 10             	add    esp,0x10
c0021eda:	90                   	nop
c0021edb:	83 c4 18             	add    esp,0x18
c0021ede:	5b                   	pop    ebx
c0021edf:	c3                   	ret    

c0021ee0 <SoundDevice::~SoundDevice()>:
c0021ee0:	83 ec 0c             	sub    esp,0xc
c0021ee3:	83 ec 0c             	sub    esp,0xc
c0021ee6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021eea:	e8 77 ff ff ff       	call   c0021e66 <SoundDevice::~SoundDevice()>
c0021eef:	83 c4 10             	add    esp,0x10
c0021ef2:	83 ec 08             	sub    esp,0x8
c0021ef5:	68 e4 01 00 00       	push   0x1e4
c0021efa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021efe:	e8 ee 05 ff ff       	call   c00124f1 <operator delete(void*, unsigned long)>
c0021f03:	83 c4 10             	add    esp,0x10
c0021f06:	83 c4 0c             	add    esp,0xc
c0021f09:	c3                   	ret    

c0021f0a <SoundDevice::getFreeChannelNum()>:
c0021f0a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021f0e:	31 c0                	xor    eax,eax
c0021f10:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0021f18:	74 09                	je     c0021f23 <SoundDevice::getFreeChannelNum()+0x19>
c0021f1a:	40                   	inc    eax
c0021f1b:	83 f8 20             	cmp    eax,0x20
c0021f1e:	75 f0                	jne    c0021f10 <SoundDevice::getFreeChannelNum()+0x6>
c0021f20:	83 c8 ff             	or     eax,0xffffffff
c0021f23:	c3                   	ret    

c0021f24 <SoundDevice::addChannel(SoundChannel*)>:
c0021f24:	56                   	push   esi
c0021f25:	53                   	push   ebx
c0021f26:	51                   	push   ecx
c0021f27:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021f2b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021f2f:	53                   	push   ebx
c0021f30:	e8 d5 ff ff ff       	call   c0021f0a <SoundDevice::getFreeChannelNum()>
c0021f35:	5a                   	pop    edx
c0021f36:	83 f8 ff             	cmp    eax,0xffffffff
c0021f39:	74 51                	je     c0021f8c <SoundDevice::addChannel(SoundChannel*)+0x68>
c0021f3b:	85 f6                	test   esi,esi
c0021f3d:	74 4d                	je     c0021f8c <SoundDevice::addChannel(SoundChannel*)+0x68>
c0021f3f:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0021f46:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0021f4d:	75 30                	jne    c0021f7f <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0021f4f:	83 ec 0c             	sub    esp,0xc
c0021f52:	56                   	push   esi
c0021f53:	e8 52 fc ff ff       	call   c0021baa <SoundChannel::getSampleRate()>
c0021f58:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0021f5e:	89 34 24             	mov    DWORD PTR [esp],esi
c0021f61:	e8 4c fc ff ff       	call   c0021bb2 <SoundChannel::getBits()>
c0021f66:	83 c4 0c             	add    esp,0xc
c0021f69:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0021f6f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0021f71:	50                   	push   eax
c0021f72:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0021f78:	53                   	push   ebx
c0021f79:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0021f7c:	83 c4 10             	add    esp,0x10
c0021f7f:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0021f85:	b8 01 00 00 00       	mov    eax,0x1
c0021f8a:	eb 03                	jmp    c0021f8f <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0021f8c:	83 c8 ff             	or     eax,0xffffffff
c0021f8f:	5a                   	pop    edx
c0021f90:	5b                   	pop    ebx
c0021f91:	5e                   	pop    esi
c0021f92:	c3                   	ret    
c0021f93:	90                   	nop

c0021f94 <SoundDevice::removeChannel(int)>:
c0021f94:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021f98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f9c:	83 fa 1f             	cmp    edx,0x1f
c0021f9f:	77 23                	ja     c0021fc4 <SoundDevice::removeChannel(int)+0x30>
c0021fa1:	8d 14 90             	lea    edx,[eax+edx*4]
c0021fa4:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0021fab:	74 17                	je     c0021fc4 <SoundDevice::removeChannel(int)+0x30>
c0021fad:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0021fb7:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0021fbd:	75 05                	jne    c0021fc4 <SoundDevice::removeChannel(int)+0x30>
c0021fbf:	8b 00                	mov    eax,DWORD PTR [eax]
c0021fc1:	ff 60 28             	jmp    DWORD PTR [eax+0x28]
c0021fc4:	c3                   	ret    
c0021fc5:	90                   	nop

c0021fc6 <SoundDevice::floatTo16(float*, short*, int)>:
c0021fc6:	57                   	push   edi
c0021fc7:	56                   	push   esi
c0021fc8:	53                   	push   ebx
c0021fc9:	31 db                	xor    ebx,ebx
c0021fcb:	83 ec 10             	sub    esp,0x10
c0021fce:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0021fd2:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0021fd6:	0f 8d d0 00 00 00    	jge    c00220ac <SoundDevice::floatTo16(float*, short*, int)+0xe6>
c0021fdc:	83 ec 0c             	sub    esp,0xc
c0021fdf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021fe3:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0021fe6:	e8 14 62 00 00       	call   c00281ff <__extendsfdf2>
c0021feb:	83 c4 10             	add    esp,0x10
c0021fee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021ff2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021ff6:	68 00 00 f0 3f       	push   0x3ff00000
c0021ffb:	6a 00                	push   0x0
c0021ffd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022001:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022005:	e8 81 51 00 00       	call   c002718b <__adddf3>
c002200a:	83 c4 10             	add    esp,0x10
c002200d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022011:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022015:	68 00 00 e0 3f       	push   0x3fe00000
c002201a:	6a 00                	push   0x0
c002201c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022020:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022024:	e8 df 57 00 00       	call   c0027808 <__muldf3>
c0022029:	83 c4 10             	add    esp,0x10
c002202c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022030:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022034:	68 c0 ff df 40       	push   0x40dfffc0
c0022039:	6a 00                	push   0x0
c002203b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002203f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022043:	e8 c0 57 00 00       	call   c0027808 <__muldf3>
c0022048:	59                   	pop    ecx
c0022049:	5f                   	pop    edi
c002204a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002204e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022052:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022056:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002205a:	e8 7c 60 00 00       	call   c00280db <__truncdfsf2>
c002205f:	5a                   	pop    edx
c0022060:	89 c7                	mov    edi,eax
c0022062:	59                   	pop    ecx
c0022063:	68 00 fe ff 46       	push   0x46fffe00
c0022068:	50                   	push   eax
c0022069:	e8 17 51 00 00       	call   c0027185 <__gesf2>
c002206e:	83 c4 10             	add    esp,0x10
c0022071:	85 c0                	test   eax,eax
c0022073:	78 08                	js     c002207d <SoundDevice::floatTo16(float*, short*, int)+0xb7>
c0022075:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c002207b:	eb 29                	jmp    c00220a6 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c002207d:	50                   	push   eax
c002207e:	50                   	push   eax
c002207f:	6a 00                	push   0x0
c0022081:	57                   	push   edi
c0022082:	e8 02 51 00 00       	call   c0027189 <__lesf2>
c0022087:	83 c4 10             	add    esp,0x10
c002208a:	85 c0                	test   eax,eax
c002208c:	7f 08                	jg     c0022096 <SoundDevice::floatTo16(float*, short*, int)+0xd0>
c002208e:	66 c7 04 5e 00 00    	mov    WORD PTR [esi+ebx*2],0x0
c0022094:	eb 10                	jmp    c00220a6 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0022096:	83 ec 0c             	sub    esp,0xc
c0022099:	57                   	push   edi
c002209a:	e8 fd 61 00 00       	call   c002829c <lrintf>
c002209f:	83 c4 10             	add    esp,0x10
c00220a2:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c00220a6:	43                   	inc    ebx
c00220a7:	e9 26 ff ff ff       	jmp    c0021fd2 <SoundDevice::floatTo16(float*, short*, int)+0xc>
c00220ac:	83 c4 10             	add    esp,0x10
c00220af:	5b                   	pop    ebx
c00220b0:	5e                   	pop    esi
c00220b1:	5f                   	pop    edi
c00220b2:	c3                   	ret    
c00220b3:	90                   	nop

c00220b4 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c00220b4:	57                   	push   edi
c00220b5:	56                   	push   esi
c00220b6:	53                   	push   ebx
c00220b7:	31 db                	xor    ebx,ebx
c00220b9:	83 ec 10             	sub    esp,0x10
c00220bc:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00220c0:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00220c4:	0f 8d cb 00 00 00    	jge    c0022195 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c00220ca:	83 ec 0c             	sub    esp,0xc
c00220cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00220d1:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00220d4:	e8 26 61 00 00       	call   c00281ff <__extendsfdf2>
c00220d9:	83 c4 10             	add    esp,0x10
c00220dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00220e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00220e4:	68 00 00 f0 3f       	push   0x3ff00000
c00220e9:	6a 00                	push   0x0
c00220eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00220ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00220f3:	e8 93 50 00 00       	call   c002718b <__adddf3>
c00220f8:	83 c4 10             	add    esp,0x10
c00220fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00220ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022103:	68 00 00 e0 3f       	push   0x3fe00000
c0022108:	6a 00                	push   0x0
c002210a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002210e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022112:	e8 f1 56 00 00       	call   c0027808 <__muldf3>
c0022117:	83 c4 10             	add    esp,0x10
c002211a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002211e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022122:	68 00 00 60 40       	push   0x40600000
c0022127:	6a 00                	push   0x0
c0022129:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002212d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022131:	e8 d2 56 00 00       	call   c0027808 <__muldf3>
c0022136:	59                   	pop    ecx
c0022137:	5f                   	pop    edi
c0022138:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002213c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022140:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022144:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022148:	e8 8e 5f 00 00       	call   c00280db <__truncdfsf2>
c002214d:	5a                   	pop    edx
c002214e:	89 c7                	mov    edi,eax
c0022150:	59                   	pop    ecx
c0022151:	68 00 00 fe 42       	push   0x42fe0000
c0022156:	50                   	push   eax
c0022157:	e8 29 50 00 00       	call   c0027185 <__gesf2>
c002215c:	83 c4 10             	add    esp,0x10
c002215f:	85 c0                	test   eax,eax
c0022161:	78 06                	js     c0022169 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022163:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022167:	eb 26                	jmp    c002218f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022169:	50                   	push   eax
c002216a:	50                   	push   eax
c002216b:	6a 00                	push   0x0
c002216d:	57                   	push   edi
c002216e:	e8 16 50 00 00       	call   c0027189 <__lesf2>
c0022173:	83 c4 10             	add    esp,0x10
c0022176:	85 c0                	test   eax,eax
c0022178:	7f 06                	jg     c0022180 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c002217a:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c002217e:	eb 0f                	jmp    c002218f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022180:	83 ec 0c             	sub    esp,0xc
c0022183:	57                   	push   edi
c0022184:	e8 13 61 00 00       	call   c002829c <lrintf>
c0022189:	83 c4 10             	add    esp,0x10
c002218c:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c002218f:	43                   	inc    ebx
c0022190:	e9 2b ff ff ff       	jmp    c00220c0 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022195:	83 c4 10             	add    esp,0x10
c0022198:	5b                   	pop    ebx
c0022199:	5e                   	pop    esi
c002219a:	5f                   	pop    edi
c002219b:	c3                   	ret    

c002219c <SoundDevice::getAudio(int, float*, float*)>:
c002219c:	55                   	push   ebp
c002219d:	31 ed                	xor    ebp,ebp
c002219f:	57                   	push   edi
c00221a0:	56                   	push   esi
c00221a1:	31 f6                	xor    esi,esi
c00221a3:	53                   	push   ebx
c00221a4:	83 ec 20             	sub    esp,0x20
c00221a7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00221ab:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00221af:	c1 e0 02             	shl    eax,0x2
c00221b2:	50                   	push   eax
c00221b3:	6a 00                	push   0x0
c00221b5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00221b9:	e8 92 e5 fd ff       	call   c0000750 <memset>
c00221be:	83 c4 10             	add    esp,0x10
c00221c1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00221c9:	8b 8c b3 5c 01 00 00 	mov    ecx,DWORD PTR [ebx+esi*4+0x15c]
c00221d0:	85 c9                	test   ecx,ecx
c00221d2:	74 52                	je     c0022226 <SoundDevice::getAudio(int, float*, float*)+0x8a>
c00221d4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00221d8:	99                   	cdq    
c00221d9:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c00221df:	50                   	push   eax
c00221e0:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00221e6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00221ea:	51                   	push   ecx
c00221eb:	e8 da f9 ff ff       	call   c0021bca <SoundChannel::unbuffer(float*, int, int)>
c00221f0:	31 d2                	xor    edx,edx
c00221f2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00221f6:	83 c4 10             	add    esp,0x10
c00221f9:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c00221fd:	7d 1e                	jge    c002221d <SoundDevice::getAudio(int, float*, float*)+0x81>
c00221ff:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0022203:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022207:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c002220a:	89 cf                	mov    edi,ecx
c002220c:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c0022212:	0f af ca             	imul   ecx,edx
c0022215:	42                   	inc    edx
c0022216:	01 e9                	add    ecx,ebp
c0022218:	89 3c 88             	mov    DWORD PTR [eax+ecx*4],edi
c002221b:	eb dc                	jmp    c00221f9 <SoundDevice::getAudio(int, float*, float*)+0x5d>
c002221d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0022221:	45                   	inc    ebp
c0022222:	01 7c 24 0c          	add    DWORD PTR [esp+0xc],edi
c0022226:	46                   	inc    esi
c0022227:	83 fe 20             	cmp    esi,0x20
c002222a:	75 9d                	jne    c00221c9 <SoundDevice::getAudio(int, float*, float*)+0x2d>
c002222c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022230:	83 c4 1c             	add    esp,0x1c
c0022233:	5b                   	pop    ebx
c0022234:	5e                   	pop    esi
c0022235:	5f                   	pop    edi
c0022236:	5d                   	pop    ebp
c0022237:	c3                   	ret    

c0022238 <PCI::open(int, int, void*)>:
c0022238:	83 ec 18             	sub    esp,0x18
c002223b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002223f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0022243:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022249:	8b 10                	mov    edx,DWORD PTR [eax]
c002224b:	50                   	push   eax
c002224c:	ff 52 18             	call   DWORD PTR [edx+0x18]
c002224f:	31 c0                	xor    eax,eax
c0022251:	83 c4 1c             	add    esp,0x1c
c0022254:	c3                   	ret    
c0022255:	90                   	nop

c0022256 <PCI::close(int, int, void*)>:
c0022256:	31 c0                	xor    eax,eax
c0022258:	c3                   	ret    
c0022259:	90                   	nop

c002225a <PCI::PCI()>:
c002225a:	83 ec 0c             	sub    esp,0xc
c002225d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022261:	83 ec 08             	sub    esp,0x8
c0022264:	68 38 bd 02 c0       	push   0xc002bd38
c0022269:	50                   	push   eax
c002226a:	e8 fb 0f ff ff       	call   c001326a <Bus::Bus(char const*)>
c002226f:	83 c4 10             	add    esp,0x10
c0022272:	ba 24 be 02 c0       	mov    edx,0xc002be24
c0022277:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002227b:	89 10                	mov    DWORD PTR [eax],edx
c002227d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022281:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c002228b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002228f:	a3 44 1a 03 c0       	mov    ds:0xc0031a44,eax
c0022294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022298:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002229e:	0f b6 d0             	movzx  edx,al
c00222a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222a5:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00222ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222b0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00222b6:	0f b6 d0             	movzx  edx,al
c00222b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222bd:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00222c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222c6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00222cc:	8d 50 01             	lea    edx,[eax+0x1]
c00222cf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00222d3:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00222d9:	0f b6 d0             	movzx  edx,al
c00222dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222e0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00222e4:	83 c9 c0             	or     ecx,0xffffffc0
c00222e7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00222eb:	90                   	nop
c00222ec:	83 c4 0c             	add    esp,0xc
c00222ef:	c3                   	ret    

c00222f0 <PCI::readBAR8(unsigned int, int)>:
c00222f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00222f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00222f8:	f6 c2 01             	test   dl,0x1
c00222fb:	74 07                	je     c0022304 <PCI::readBAR8(unsigned int, int)+0x14>
c00222fd:	83 e2 fc             	and    edx,0xfffffffc
c0022300:	01 c2                	add    edx,eax
c0022302:	ec                   	in     al,dx
c0022303:	c3                   	ret    
c0022304:	83 e2 f0             	and    edx,0xfffffff0
c0022307:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c002230a:	c3                   	ret    
c002230b:	90                   	nop

c002230c <PCI::readBAR16(unsigned int, int)>:
c002230c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022310:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022314:	f6 c2 01             	test   dl,0x1
c0022317:	74 08                	je     c0022321 <PCI::readBAR16(unsigned int, int)+0x15>
c0022319:	83 e2 fc             	and    edx,0xfffffffc
c002231c:	01 c2                	add    edx,eax
c002231e:	66 ed                	in     ax,dx
c0022320:	c3                   	ret    
c0022321:	83 e2 f0             	and    edx,0xfffffff0
c0022324:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0022328:	c3                   	ret    
c0022329:	90                   	nop

c002232a <PCI::readBAR32(unsigned int, int)>:
c002232a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002232e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022332:	f6 c2 01             	test   dl,0x1
c0022335:	74 07                	je     c002233e <PCI::readBAR32(unsigned int, int)+0x14>
c0022337:	83 e2 fc             	and    edx,0xfffffffc
c002233a:	01 c2                	add    edx,eax
c002233c:	ed                   	in     eax,dx
c002233d:	c3                   	ret    
c002233e:	83 e2 f0             	and    edx,0xfffffff0
c0022341:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0022344:	c3                   	ret    
c0022345:	90                   	nop

c0022346 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0022346:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002234a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002234e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022352:	f6 c2 01             	test   dl,0x1
c0022355:	74 07                	je     c002235e <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0022357:	83 e2 fc             	and    edx,0xfffffffc
c002235a:	01 ca                	add    edx,ecx
c002235c:	ee                   	out    dx,al
c002235d:	c3                   	ret    
c002235e:	83 e2 f0             	and    edx,0xfffffff0
c0022361:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0022364:	c3                   	ret    
c0022365:	90                   	nop

c0022366 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0022366:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002236a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002236e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022372:	f6 c2 01             	test   dl,0x1
c0022375:	74 08                	je     c002237f <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0022377:	83 e2 fc             	and    edx,0xfffffffc
c002237a:	01 ca                	add    edx,ecx
c002237c:	66 ef                	out    dx,ax
c002237e:	c3                   	ret    
c002237f:	83 e2 f0             	and    edx,0xfffffff0
c0022382:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0022386:	c3                   	ret    
c0022387:	90                   	nop

c0022388 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0022388:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002238c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022390:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022394:	f6 c2 01             	test   dl,0x1
c0022397:	74 07                	je     c00223a0 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0022399:	83 e2 fc             	and    edx,0xfffffffc
c002239c:	01 ca                	add    edx,ecx
c002239e:	ef                   	out    dx,eax
c002239f:	c3                   	ret    
c00223a0:	83 e2 f0             	and    edx,0xfffffff0
c00223a3:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c00223a6:	c3                   	ret    
c00223a7:	90                   	nop

c00223a8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00223a8:	55                   	push   ebp
c00223a9:	57                   	push   edi
c00223aa:	56                   	push   esi
c00223ab:	53                   	push   ebx
c00223ac:	83 ec 0c             	sub    esp,0xc
c00223af:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00223b3:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00223b7:	89 f0                	mov    eax,esi
c00223b9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00223bd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00223c1:	3c 07                	cmp    al,0x7
c00223c3:	76 10                	jbe    c00223d5 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c00223c5:	83 ec 0c             	sub    esp,0xc
c00223c8:	68 40 bd 02 c0       	push   0xc002bd40
c00223cd:	e8 63 79 ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c00223d2:	83 c4 10             	add    esp,0x10
c00223d5:	80 fb 0f             	cmp    bl,0xf
c00223d8:	76 10                	jbe    c00223ea <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c00223da:	83 ec 0c             	sub    esp,0xc
c00223dd:	68 70 bd 02 c0       	push   0xc002bd70
c00223e2:	e8 4e 79 ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c00223e7:	83 c4 10             	add    esp,0x10
c00223ea:	8d 04 36             	lea    eax,[esi+esi*1]
c00223ed:	ba f8 0c 00 00       	mov    edx,0xcf8
c00223f2:	83 c8 f0             	or     eax,0xfffffff0
c00223f5:	ee                   	out    dx,al
c00223f6:	ba fa 0c 00 00       	mov    edx,0xcfa
c00223fb:	89 e8                	mov    eax,ebp
c00223fd:	ee                   	out    dx,al
c00223fe:	83 c4 0c             	add    esp,0xc
c0022401:	89 d8                	mov    eax,ebx
c0022403:	66 81 e7 fc 00       	and    di,0xfc
c0022408:	5b                   	pop    ebx
c0022409:	c1 e0 08             	shl    eax,0x8
c002240c:	5e                   	pop    esi
c002240d:	09 f8                	or     eax,edi
c002240f:	5f                   	pop    edi
c0022410:	66 0d 00 c0          	or     ax,0xc000
c0022414:	5d                   	pop    ebp
c0022415:	c3                   	ret    

c0022416 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022416:	57                   	push   edi
c0022417:	56                   	push   esi
c0022418:	53                   	push   ebx
c0022419:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002241d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022421:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0022427:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002242b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002242f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022433:	83 ff 01             	cmp    edi,0x1
c0022436:	75 3e                	jne    c0022476 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0022438:	89 de                	mov    esi,ebx
c002243a:	0f b6 c0             	movzx  eax,al
c002243d:	81 e6 fc 00 00 00    	and    esi,0xfc
c0022443:	c1 e0 10             	shl    eax,0x10
c0022446:	0f b6 c9             	movzx  ecx,cl
c0022449:	09 f0                	or     eax,esi
c002244b:	c1 e1 08             	shl    ecx,0x8
c002244e:	0f b6 d2             	movzx  edx,dl
c0022451:	09 c8                	or     eax,ecx
c0022453:	c1 e2 0b             	shl    edx,0xb
c0022456:	09 d0                	or     eax,edx
c0022458:	ba f8 0c 00 00       	mov    edx,0xcf8
c002245d:	0d 00 00 00 80       	or     eax,0x80000000
c0022462:	ef                   	out    dx,eax
c0022463:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022468:	ed                   	in     eax,dx
c0022469:	83 e3 02             	and    ebx,0x2
c002246c:	0f b6 cb             	movzx  ecx,bl
c002246f:	c1 e1 03             	shl    ecx,0x3
c0022472:	d3 e8                	shr    eax,cl
c0022474:	eb 43                	jmp    c00224b9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022476:	83 ff 02             	cmp    edi,0x2
c0022479:	75 2c                	jne    c00224a7 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c002247b:	83 ec 0c             	sub    esp,0xc
c002247e:	0f b6 c9             	movzx  ecx,cl
c0022481:	0f b6 d2             	movzx  edx,dl
c0022484:	0f b6 fb             	movzx  edi,bl
c0022487:	0f b6 c0             	movzx  eax,al
c002248a:	57                   	push   edi
c002248b:	51                   	push   ecx
c002248c:	52                   	push   edx
c002248d:	50                   	push   eax
c002248e:	56                   	push   esi
c002248f:	e8 14 ff ff ff       	call   c00223a8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022494:	89 c2                	mov    edx,eax
c0022496:	ed                   	in     eax,dx
c0022497:	83 e3 02             	and    ebx,0x2
c002249a:	83 c4 20             	add    esp,0x20
c002249d:	0f b6 cb             	movzx  ecx,bl
c00224a0:	c1 e1 03             	shl    ecx,0x3
c00224a3:	d3 e8                	shr    eax,cl
c00224a5:	eb 12                	jmp    c00224b9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00224a7:	83 ec 0c             	sub    esp,0xc
c00224aa:	68 a0 bd 02 c0       	push   0xc002bda0
c00224af:	e8 81 78 ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c00224b4:	83 c4 10             	add    esp,0x10
c00224b7:	31 c0                	xor    eax,eax
c00224b9:	5b                   	pop    ebx
c00224ba:	5e                   	pop    esi
c00224bb:	5f                   	pop    edi
c00224bc:	c3                   	ret    
c00224bd:	90                   	nop

c00224be <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00224be:	83 ec 18             	sub    esp,0x18
c00224c1:	6a 00                	push   0x0
c00224c3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00224c8:	50                   	push   eax
c00224c9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00224ce:	50                   	push   eax
c00224cf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00224d4:	50                   	push   eax
c00224d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00224d9:	e8 38 ff ff ff       	call   c0022416 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00224de:	83 c4 2c             	add    esp,0x2c
c00224e1:	c3                   	ret    

c00224e2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00224e2:	83 ec 18             	sub    esp,0x18
c00224e5:	6a 0e                	push   0xe
c00224e7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00224ec:	50                   	push   eax
c00224ed:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00224f2:	50                   	push   eax
c00224f3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00224f8:	50                   	push   eax
c00224f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00224fd:	e8 14 ff ff ff       	call   c0022416 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022502:	83 c4 2c             	add    esp,0x2c
c0022505:	0f b6 c0             	movzx  eax,al
c0022508:	c3                   	ret    
c0022509:	90                   	nop

c002250a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c002250a:	55                   	push   ebp
c002250b:	57                   	push   edi
c002250c:	56                   	push   esi
c002250d:	53                   	push   ebx
c002250e:	83 ec 18             	sub    esp,0x18
c0022511:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0022516:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c002251b:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0022520:	6a 0a                	push   0xa
c0022522:	56                   	push   esi
c0022523:	55                   	push   ebp
c0022524:	57                   	push   edi
c0022525:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022529:	e8 e8 fe ff ff       	call   c0022416 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002252e:	83 c4 14             	add    esp,0x14
c0022531:	89 c3                	mov    ebx,eax
c0022533:	6a 0a                	push   0xa
c0022535:	0f b6 db             	movzx  ebx,bl
c0022538:	56                   	push   esi
c0022539:	55                   	push   ebp
c002253a:	57                   	push   edi
c002253b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002253f:	e8 d2 fe ff ff       	call   c0022416 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022544:	83 c4 2c             	add    esp,0x2c
c0022547:	25 00 ff 00 00       	and    eax,0xff00
c002254c:	09 d8                	or     eax,ebx
c002254e:	5b                   	pop    ebx
c002254f:	5e                   	pop    esi
c0022550:	5f                   	pop    edi
c0022551:	5d                   	pop    ebp
c0022552:	c3                   	ret    
c0022553:	90                   	nop

c0022554 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022554:	83 ec 18             	sub    esp,0x18
c0022557:	6a 08                	push   0x8
c0022559:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002255e:	50                   	push   eax
c002255f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022564:	50                   	push   eax
c0022565:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002256a:	50                   	push   eax
c002256b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002256f:	e8 a2 fe ff ff       	call   c0022416 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022574:	83 c4 2c             	add    esp,0x2c
c0022577:	0f b6 c4             	movzx  eax,ah
c002257a:	c3                   	ret    
c002257b:	90                   	nop

c002257c <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c002257c:	83 ec 18             	sub    esp,0x18
c002257f:	6a 08                	push   0x8
c0022581:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022586:	50                   	push   eax
c0022587:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002258c:	50                   	push   eax
c002258d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022592:	50                   	push   eax
c0022593:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022597:	e8 7a fe ff ff       	call   c0022416 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002259c:	83 c4 2c             	add    esp,0x2c
c002259f:	c3                   	ret    

c00225a0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00225a0:	83 ec 18             	sub    esp,0x18
c00225a3:	6a 3c                	push   0x3c
c00225a5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225aa:	50                   	push   eax
c00225ab:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225b0:	50                   	push   eax
c00225b1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225b6:	50                   	push   eax
c00225b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00225bb:	e8 56 fe ff ff       	call   c0022416 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00225c0:	83 c4 2c             	add    esp,0x2c
c00225c3:	c3                   	ret    

c00225c4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00225c4:	83 ec 18             	sub    esp,0x18
c00225c7:	6a 18                	push   0x18
c00225c9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225ce:	50                   	push   eax
c00225cf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225d4:	50                   	push   eax
c00225d5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225da:	50                   	push   eax
c00225db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00225df:	e8 32 fe ff ff       	call   c0022416 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00225e4:	83 c4 2c             	add    esp,0x2c
c00225e7:	0f b6 c4             	movzx  eax,ah
c00225ea:	c3                   	ret    
c00225eb:	90                   	nop

c00225ec <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00225ec:	55                   	push   ebp
c00225ed:	57                   	push   edi
c00225ee:	56                   	push   esi
c00225ef:	53                   	push   ebx
c00225f0:	83 ec 28             	sub    esp,0x28
c00225f3:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00225f7:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c00225fc:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0022601:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0022606:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c002260d:	8d 43 12             	lea    eax,[ebx+0x12]
c0022610:	83 c3 10             	add    ebx,0x10
c0022613:	0f b6 c0             	movzx  eax,al
c0022616:	0f b6 db             	movzx  ebx,bl
c0022619:	50                   	push   eax
c002261a:	51                   	push   ecx
c002261b:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c002261f:	57                   	push   edi
c0022620:	55                   	push   ebp
c0022621:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022625:	e8 ec fd ff ff       	call   c0022416 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002262a:	83 c4 14             	add    esp,0x14
c002262d:	89 c6                	mov    esi,eax
c002262f:	53                   	push   ebx
c0022630:	c1 e6 10             	shl    esi,0x10
c0022633:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022637:	51                   	push   ecx
c0022638:	57                   	push   edi
c0022639:	55                   	push   ebp
c002263a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002263e:	e8 d3 fd ff ff       	call   c0022416 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022643:	83 c4 3c             	add    esp,0x3c
c0022646:	0f b7 c0             	movzx  eax,ax
c0022649:	5b                   	pop    ebx
c002264a:	09 f0                	or     eax,esi
c002264c:	5e                   	pop    esi
c002264d:	5f                   	pop    edi
c002264e:	5d                   	pop    ebp
c002264f:	c3                   	ret    

c0022650 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022650:	55                   	push   ebp
c0022651:	57                   	push   edi
c0022652:	56                   	push   esi
c0022653:	53                   	push   ebx
c0022654:	83 ec 0c             	sub    esp,0xc
c0022657:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002265b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002265f:	89 f5                	mov    ebp,esi
c0022661:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0022667:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002266b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002266f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022673:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022677:	83 f9 01             	cmp    ecx,0x1
c002267a:	75 5d                	jne    c00226d9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c002267c:	0f b6 c8             	movzx  ecx,al
c002267f:	0f b6 d2             	movzx  edx,dl
c0022682:	c1 e1 10             	shl    ecx,0x10
c0022685:	c1 e2 0b             	shl    edx,0xb
c0022688:	89 f0                	mov    eax,esi
c002268a:	25 fc 00 00 00       	and    eax,0xfc
c002268f:	09 c1                	or     ecx,eax
c0022691:	89 e8                	mov    eax,ebp
c0022693:	0f b6 c0             	movzx  eax,al
c0022696:	c1 e0 08             	shl    eax,0x8
c0022699:	09 c1                	or     ecx,eax
c002269b:	09 d1                	or     ecx,edx
c002269d:	ba f8 0c 00 00       	mov    edx,0xcf8
c00226a2:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00226a8:	89 c8                	mov    eax,ecx
c00226aa:	ef                   	out    dx,eax
c00226ab:	ba fc 0c 00 00       	mov    edx,0xcfc
c00226b0:	ed                   	in     eax,dx
c00226b1:	0f b7 db             	movzx  ebx,bx
c00226b4:	83 e6 02             	and    esi,0x2
c00226b7:	74 0a                	je     c00226c3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c00226b9:	0f b7 d0             	movzx  edx,ax
c00226bc:	c1 e3 10             	shl    ebx,0x10
c00226bf:	09 d3                	or     ebx,edx
c00226c1:	eb 05                	jmp    c00226c8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c00226c3:	66 31 c0             	xor    ax,ax
c00226c6:	09 c3                	or     ebx,eax
c00226c8:	ba f8 0c 00 00       	mov    edx,0xcf8
c00226cd:	89 c8                	mov    eax,ecx
c00226cf:	ef                   	out    dx,eax
c00226d0:	ba fc 0c 00 00       	mov    edx,0xcfc
c00226d5:	89 d8                	mov    eax,ebx
c00226d7:	eb 41                	jmp    c002271a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00226d9:	83 f9 02             	cmp    ecx,0x2
c00226dc:	75 45                	jne    c0022723 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c00226de:	83 ec 0c             	sub    esp,0xc
c00226e1:	0f b6 d2             	movzx  edx,dl
c00226e4:	89 f1                	mov    ecx,esi
c00226e6:	0f b6 c0             	movzx  eax,al
c00226e9:	0f b6 f1             	movzx  esi,cl
c00226ec:	89 e9                	mov    ecx,ebp
c00226ee:	56                   	push   esi
c00226ef:	0f b6 c9             	movzx  ecx,cl
c00226f2:	51                   	push   ecx
c00226f3:	52                   	push   edx
c00226f4:	50                   	push   eax
c00226f5:	57                   	push   edi
c00226f6:	e8 ad fc ff ff       	call   c00223a8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00226fb:	89 c2                	mov    edx,eax
c00226fd:	ed                   	in     eax,dx
c00226fe:	83 c4 20             	add    esp,0x20
c0022701:	0f b7 db             	movzx  ebx,bx
c0022704:	f6 c2 02             	test   dl,0x2
c0022707:	74 0c                	je     c0022715 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0022709:	0f b7 c8             	movzx  ecx,ax
c002270c:	89 d8                	mov    eax,ebx
c002270e:	c1 e0 10             	shl    eax,0x10
c0022711:	09 c8                	or     eax,ecx
c0022713:	eb 05                	jmp    c002271a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0022715:	66 31 c0             	xor    ax,ax
c0022718:	09 d8                	or     eax,ebx
c002271a:	ef                   	out    dx,eax
c002271b:	83 c4 0c             	add    esp,0xc
c002271e:	5b                   	pop    ebx
c002271f:	5e                   	pop    esi
c0022720:	5f                   	pop    edi
c0022721:	5d                   	pop    ebp
c0022722:	c3                   	ret    
c0022723:	c7 44 24 20 a0 bd 02 c0 	mov    DWORD PTR [esp+0x20],0xc002bda0
c002272b:	83 c4 0c             	add    esp,0xc
c002272e:	5b                   	pop    ebx
c002272f:	5e                   	pop    esi
c0022730:	5f                   	pop    edi
c0022731:	5d                   	pop    ebp
c0022732:	e9 fe 75 ff ff       	jmp    c0019d35 <Krnl::panic(char const*)>
c0022737:	90                   	nop

c0022738 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0022738:	55                   	push   ebp
c0022739:	57                   	push   edi
c002273a:	56                   	push   esi
c002273b:	53                   	push   ebx
c002273c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0022742:	80 3d 50 1a 03 c0 00 	cmp    BYTE PTR ds:0xc0031a50,0x0
c0022749:	0f 85 84 00 00 00    	jne    c00227d3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c002274f:	83 ec 0c             	sub    esp,0xc
c0022752:	68 14 01 00 00       	push   0x114
c0022757:	e8 40 ce fe ff       	call   c000f59c <malloc>
c002275c:	83 c4 0c             	add    esp,0xc
c002275f:	89 c3                	mov    ebx,eax
c0022761:	ff 35 50 0c 03 c0    	push   DWORD PTR ds:0xc0030c50
c0022767:	68 a6 bd 02 c0       	push   0xc002bda6
c002276c:	50                   	push   eax
c002276d:	e8 b6 03 ff ff       	call   c0012b28 <File::File(char const*, Process*)>
c0022772:	5a                   	pop    edx
c0022773:	59                   	pop    ecx
c0022774:	6a 01                	push   0x1
c0022776:	53                   	push   ebx
c0022777:	e8 10 04 ff ff       	call   c0012b8c <File::open(FileOpenMode)>
c002277c:	83 c4 0c             	add    esp,0xc
c002277f:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0022783:	50                   	push   eax
c0022784:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022788:	50                   	push   eax
c0022789:	53                   	push   ebx
c002278a:	e8 a9 06 ff ff       	call   c0012e38 <File::stat(unsigned long long*, bool*)>
c002278f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022793:	40                   	inc    eax
c0022794:	89 04 24             	mov    DWORD PTR [esp],eax
c0022797:	e8 00 ce fe ff       	call   c000f59c <malloc>
c002279c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00227a0:	a3 4c 1a 03 c0       	mov    ds:0xc0031a4c,eax
c00227a5:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c00227a9:	5e                   	pop    esi
c00227aa:	8b 13                	mov    edx,DWORD PTR [ebx]
c00227ac:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c00227b0:	51                   	push   ecx
c00227b1:	50                   	push   eax
c00227b2:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00227b6:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00227ba:	53                   	push   ebx
c00227bb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00227be:	83 c4 14             	add    esp,0x14
c00227c1:	53                   	push   ebx
c00227c2:	e8 23 04 ff ff       	call   c0012bea <File::close()>
c00227c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00227cb:	83 c4 10             	add    esp,0x10
c00227ce:	a3 48 1a 03 c0       	mov    ds:0xc0031a48,eax
c00227d3:	a1 48 1a 03 c0       	mov    eax,ds:0xc0031a48
c00227d8:	8b 15 4c 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a4c
c00227de:	89 04 24             	mov    DWORD PTR [esp],eax
c00227e1:	31 ff                	xor    edi,edi
c00227e3:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c00227eb:	31 f6                	xor    esi,esi
c00227ed:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00227f2:	31 db                	xor    ebx,ebx
c00227f4:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c00227fc:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0022801:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0022808:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c002280c:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0022813:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0022817:	39 3c 24             	cmp    DWORD PTR [esp],edi
c002281a:	0f 8e 6b 01 00 00    	jle    c002298b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0022820:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0022823:	d4 40                	aam    0x40
c0022825:	d5 39                	aad    0x39
c0022827:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002282b:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c002282f:	d4 40                	aam    0x40
c0022831:	d5 39                	aad    0x39
c0022833:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0022837:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c002283b:	d4 40                	aam    0x40
c002283d:	d5 39                	aad    0x39
c002283f:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0022843:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0022847:	d4 40                	aam    0x40
c0022849:	d5 39                	aad    0x39
c002284b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002284f:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0022853:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0022857:	3c 56                	cmp    al,0x56
c0022859:	74 45                	je     c00228a0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c002285b:	d4 40                	aam    0x40
c002285d:	d5 39                	aad    0x39
c002285f:	8d 48 d0             	lea    ecx,[eax-0x30]
c0022862:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0022866:	0f b6 c9             	movzx  ecx,cl
c0022869:	c1 e1 04             	shl    ecx,0x4
c002286c:	d4 40                	aam    0x40
c002286e:	d5 39                	aad    0x39
c0022870:	8d 58 d0             	lea    ebx,[eax-0x30]
c0022873:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0022877:	0f b6 db             	movzx  ebx,bl
c002287a:	09 cb                	or     ebx,ecx
c002287c:	c1 e3 04             	shl    ebx,0x4
c002287f:	d4 40                	aam    0x40
c0022881:	d5 39                	aad    0x39
c0022883:	8d 48 d0             	lea    ecx,[eax-0x30]
c0022886:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c002288a:	0f b6 c9             	movzx  ecx,cl
c002288d:	09 cb                	or     ebx,ecx
c002288f:	c1 e3 04             	shl    ebx,0x4
c0022892:	89 d9                	mov    ecx,ebx
c0022894:	d4 40                	aam    0x40
c0022896:	d5 39                	aad    0x39
c0022898:	8d 58 d0             	lea    ebx,[eax-0x30]
c002289b:	0f b6 db             	movzx  ebx,bl
c002289e:	09 cb                	or     ebx,ecx
c00228a0:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c00228a4:	80 f9 44             	cmp    cl,0x44
c00228a7:	74 47                	je     c00228f0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c00228a9:	88 c8                	mov    al,cl
c00228ab:	d4 40                	aam    0x40
c00228ad:	d5 39                	aad    0x39
c00228af:	83 e8 30             	sub    eax,0x30
c00228b2:	0f b6 e8             	movzx  ebp,al
c00228b5:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c00228b9:	c1 e5 04             	shl    ebp,0x4
c00228bc:	d4 40                	aam    0x40
c00228be:	d5 39                	aad    0x39
c00228c0:	83 e8 30             	sub    eax,0x30
c00228c3:	0f b6 f0             	movzx  esi,al
c00228c6:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c00228ca:	09 ee                	or     esi,ebp
c00228cc:	c1 e6 04             	shl    esi,0x4
c00228cf:	d4 40                	aam    0x40
c00228d1:	d5 39                	aad    0x39
c00228d3:	83 e8 30             	sub    eax,0x30
c00228d6:	0f b6 e8             	movzx  ebp,al
c00228d9:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c00228dd:	09 ee                	or     esi,ebp
c00228df:	c1 e6 04             	shl    esi,0x4
c00228e2:	89 f5                	mov    ebp,esi
c00228e4:	d4 40                	aam    0x40
c00228e6:	d5 39                	aad    0x39
c00228e8:	83 e8 30             	sub    eax,0x30
c00228eb:	0f b6 f0             	movzx  esi,al
c00228ee:	09 ee                	or     esi,ebp
c00228f0:	83 c7 10             	add    edi,0x10
c00228f3:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c00228f7:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c00228fa:	3c 0a                	cmp    al,0xa
c00228fc:	74 09                	je     c0022907 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c00228fe:	45                   	inc    ebp
c00228ff:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0022902:	75 16                	jne    c002291a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0022904:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0022907:	3c 0a                	cmp    al,0xa
c0022909:	0f 94 c0             	sete   al
c002290c:	0f b6 c0             	movzx  eax,al
c002290f:	01 c7                	add    edi,eax
c0022911:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0022916:	75 0c                	jne    c0022924 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0022918:	eb 15                	jmp    c002292f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c002291a:	47                   	inc    edi
c002291b:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c002291e:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0022922:	eb d3                	jmp    c00228f7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0022924:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0022929:	0f 85 e8 fe ff ff    	jne    c0022817 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c002292f:	80 f9 44             	cmp    cl,0x44
c0022932:	74 0b                	je     c002293f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0022934:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0022939:	0f 85 d8 fe ff ff    	jne    c0022817 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c002293f:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0022943:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0022947:	c1 e1 04             	shl    ecx,0x4
c002294a:	83 e8 30             	sub    eax,0x30
c002294d:	09 c8                	or     eax,ecx
c002294f:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0022953:	0f 85 be fe ff ff    	jne    c0022817 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022959:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c002295d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022961:	c1 e1 04             	shl    ecx,0x4
c0022964:	83 e8 30             	sub    eax,0x30
c0022967:	09 c8                	or     eax,ecx
c0022969:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c002296d:	0f 85 a4 fe ff ff    	jne    c0022817 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022973:	50                   	push   eax
c0022974:	50                   	push   eax
c0022975:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022979:	50                   	push   eax
c002297a:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0022981:	e8 86 de fd ff       	call   c000080c <strcpy>
c0022986:	83 c4 10             	add    esp,0x10
c0022989:	eb 15                	jmp    c00229a0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c002298b:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0022992:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c002299d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00229a0:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c00229a7:	81 c4 2c 01 00 00    	add    esp,0x12c
c00229ad:	5b                   	pop    ebx
c00229ae:	5e                   	pop    esi
c00229af:	5f                   	pop    edi
c00229b0:	5d                   	pop    ebp
c00229b1:	c3                   	ret    

c00229b2 <PCI::checkBus(unsigned char)>:
c00229b2:	56                   	push   esi
c00229b3:	53                   	push   ebx
c00229b4:	31 db                	xor    ebx,ebx
c00229b6:	51                   	push   ecx
c00229b7:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00229bc:	52                   	push   edx
c00229bd:	53                   	push   ebx
c00229be:	43                   	inc    ebx
c00229bf:	56                   	push   esi
c00229c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00229c4:	e8 37 03 00 00       	call   c0022d00 <PCI::checkDevice(unsigned char, unsigned char)>
c00229c9:	83 c4 10             	add    esp,0x10
c00229cc:	83 fb 20             	cmp    ebx,0x20
c00229cf:	75 eb                	jne    c00229bc <PCI::checkBus(unsigned char)+0xa>
c00229d1:	58                   	pop    eax
c00229d2:	5b                   	pop    ebx
c00229d3:	5e                   	pop    esi
c00229d4:	c3                   	ret    
c00229d5:	90                   	nop

c00229d6 <PCI::foundDevice(PCIDeviceInfo)>:
c00229d6:	55                   	push   ebp
c00229d7:	57                   	push   edi
c00229d8:	56                   	push   esi
c00229d9:	53                   	push   ebx
c00229da:	83 ec 1c             	sub    esp,0x1c
c00229dd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00229e1:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c00229e7:	0f 84 52 01 00 00    	je     c0022b3f <PCI::foundDevice(PCIDeviceInfo)+0x169>
c00229ed:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00229f1:	66 81 f9 06 04       	cmp    cx,0x406
c00229f6:	75 2c                	jne    c0022a24 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c00229f8:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c00229fd:	50                   	push   eax
c00229fe:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022a03:	50                   	push   eax
c0022a04:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022a09:	50                   	push   eax
c0022a0a:	56                   	push   esi
c0022a0b:	e8 b4 fb ff ff       	call   c00225c4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022a10:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022a14:	0f b6 c0             	movzx  eax,al
c0022a17:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022a1b:	83 c4 2c             	add    esp,0x2c
c0022a1e:	5b                   	pop    ebx
c0022a1f:	5e                   	pop    esi
c0022a20:	5f                   	pop    edi
c0022a21:	5d                   	pop    ebp
c0022a22:	eb 8e                	jmp    c00229b2 <PCI::checkBus(unsigned char)>
c0022a24:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022a28:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022a2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022a32:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022a36:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022a3a:	88 d3                	mov    bl,dl
c0022a3c:	85 c0                	test   eax,eax
c0022a3e:	74 33                	je     c0022a73 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022a40:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022a43:	85 d2                	test   edx,edx
c0022a45:	74 28                	je     c0022a6f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022a47:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022a4d:	31 ef                	xor    edi,ebp
c0022a4f:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022a55:	75 18                	jne    c0022a6f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022a57:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022a5b:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022a61:	75 0c                	jne    c0022a6f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022a63:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022a69:	0f 84 d0 00 00 00    	je     c0022b3f <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022a6f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022a71:	eb c9                	jmp    c0022a3c <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022a73:	66 81 f9 01 06       	cmp    cx,0x601
c0022a78:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022a7c:	75 19                	jne    c0022a97 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022a7e:	83 ec 0c             	sub    esp,0xc
c0022a81:	68 64 01 00 00       	push   0x164
c0022a86:	e8 11 cb fe ff       	call   c000f59c <malloc>
c0022a8b:	89 c5                	mov    ebp,eax
c0022a8d:	89 04 24             	mov    DWORD PTR [esp],eax
c0022a90:	e8 85 0e 00 00       	call   c002391a <SATABus::SATABus()>
c0022a95:	eb 1e                	jmp    c0022ab5 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022a97:	66 81 f9 01 01       	cmp    cx,0x101
c0022a9c:	75 60                	jne    c0022afe <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022a9e:	83 ec 0c             	sub    esp,0xc
c0022aa1:	68 70 02 00 00       	push   0x270
c0022aa6:	e8 f1 ca fe ff       	call   c000f59c <malloc>
c0022aab:	89 c5                	mov    ebp,eax
c0022aad:	89 04 24             	mov    DWORD PTR [esp],eax
c0022ab0:	e8 0f 03 00 00       	call   c0022dc4 <IDE::IDE()>
c0022ab5:	58                   	pop    eax
c0022ab6:	5a                   	pop    edx
c0022ab7:	55                   	push   ebp
c0022ab8:	56                   	push   esi
c0022ab9:	e8 44 0f ff ff       	call   c0013a02 <Device::addChild(Device*)>
c0022abe:	83 ec 1c             	sub    esp,0x1c
c0022ac1:	b9 09 00 00 00       	mov    ecx,0x9
c0022ac6:	fc                   	cld    
c0022ac7:	89 e7                	mov    edi,esp
c0022ac9:	89 de                	mov    esi,ebx
c0022acb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022acd:	55                   	push   ebp
c0022ace:	e8 41 0e ff ff       	call   c0013914 <Device::preOpenPCI(PCIDeviceInfo)>
c0022ad3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022ad6:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022ada:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022ae2:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022aea:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022af2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022af5:	83 c4 4c             	add    esp,0x4c
c0022af8:	5b                   	pop    ebx
c0022af9:	5e                   	pop    esi
c0022afa:	5f                   	pop    edi
c0022afb:	5d                   	pop    ebp
c0022afc:	ff e0                	jmp    eax
c0022afe:	83 ec 0c             	sub    esp,0xc
c0022b01:	68 58 01 00 00       	push   0x158
c0022b06:	e8 91 ca fe ff       	call   c000f59c <malloc>
c0022b0b:	89 c5                	mov    ebp,eax
c0022b0d:	58                   	pop    eax
c0022b0e:	5a                   	pop    edx
c0022b0f:	68 bf bd 02 c0       	push   0xc002bdbf
c0022b14:	55                   	push   ebp
c0022b15:	e8 f2 11 ff ff       	call   c0013d0c <DriverlessDevice::DriverlessDevice(char const*)>
c0022b1a:	59                   	pop    ecx
c0022b1b:	5f                   	pop    edi
c0022b1c:	55                   	push   ebp
c0022b1d:	56                   	push   esi
c0022b1e:	e8 df 0e ff ff       	call   c0013a02 <Device::addChild(Device*)>
c0022b23:	b9 09 00 00 00       	mov    ecx,0x9
c0022b28:	fc                   	cld    
c0022b29:	89 df                	mov    edi,ebx
c0022b2b:	89 de                	mov    esi,ebx
c0022b2d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022b2f:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022b33:	83 c4 2c             	add    esp,0x2c
c0022b36:	5b                   	pop    ebx
c0022b37:	5e                   	pop    esi
c0022b38:	5f                   	pop    edi
c0022b39:	5d                   	pop    ebp
c0022b3a:	e9 d5 0d ff ff       	jmp    c0013914 <Device::preOpenPCI(PCIDeviceInfo)>
c0022b3f:	83 c4 1c             	add    esp,0x1c
c0022b42:	5b                   	pop    ebx
c0022b43:	5e                   	pop    esi
c0022b44:	5f                   	pop    edi
c0022b45:	5d                   	pop    ebp
c0022b46:	c3                   	ret    
c0022b47:	90                   	nop

c0022b48 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022b48:	55                   	push   ebp
c0022b49:	57                   	push   edi
c0022b4a:	56                   	push   esi
c0022b4b:	53                   	push   ebx
c0022b4c:	83 ec 68             	sub    esp,0x68
c0022b4f:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0022b53:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0022b5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022b5e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0022b65:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c0022b6a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022b6e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0022b75:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0022b7a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022b7e:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c0022b83:	6a 0c                	push   0xc
c0022b85:	57                   	push   edi
c0022b86:	53                   	push   ebx
c0022b87:	56                   	push   esi
c0022b88:	55                   	push   ebp
c0022b89:	e8 88 f8 ff ff       	call   c0022416 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b8e:	83 c4 20             	add    esp,0x20
c0022b91:	57                   	push   edi
c0022b92:	53                   	push   ebx
c0022b93:	56                   	push   esi
c0022b94:	55                   	push   ebp
c0022b95:	e8 70 f9 ff ff       	call   c002250a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022b9a:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c0022b9f:	57                   	push   edi
c0022ba0:	53                   	push   ebx
c0022ba1:	56                   	push   esi
c0022ba2:	55                   	push   ebp
c0022ba3:	e8 f8 f9 ff ff       	call   c00225a0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022ba8:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0022bac:	83 c4 14             	add    esp,0x14
c0022baf:	6a 3c                	push   0x3c
c0022bb1:	57                   	push   edi
c0022bb2:	53                   	push   ebx
c0022bb3:	56                   	push   esi
c0022bb4:	55                   	push   ebp
c0022bb5:	e8 5c f8 ff ff       	call   c0022416 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022bba:	0f b6 c4             	movzx  eax,ah
c0022bbd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0022bc1:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0022bc5:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0022bc9:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0022bce:	83 c4 20             	add    esp,0x20
c0022bd1:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022bd7:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022bde:	74 7c                	je     c0022c5c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022be0:	31 c0                	xor    eax,eax
c0022be2:	8b 15 08 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d708
c0022be8:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022bee:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c0022bf4:	7e 66                	jle    c0022c5c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022bf6:	8d 14 c2             	lea    edx,[edx+eax*8]
c0022bf9:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022c00:	39 cb                	cmp    ebx,ecx
c0022c02:	75 55                	jne    c0022c59 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022c04:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022c0b:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0022c0f:	75 48                	jne    c0022c59 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022c11:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022c15:	83 ec 0c             	sub    esp,0xc
c0022c18:	68 d9 bd 02 c0       	push   0xc002bdd9
c0022c1d:	e8 a7 f9 fe ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c0022c22:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022c26:	8b 15 08 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d708
c0022c2c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0022c30:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022c36:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c0022c3e:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c0022c42:	52                   	push   edx
c0022c43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022c47:	53                   	push   ebx
c0022c48:	68 fe bd 02 c0       	push   0xc002bdfe
c0022c4d:	e8 77 f9 fe ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c0022c52:	83 c4 20             	add    esp,0x20
c0022c55:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022c59:	40                   	inc    eax
c0022c5a:	eb 86                	jmp    c0022be2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c0022c5c:	31 d2                	xor    edx,edx
c0022c5e:	83 ec 0c             	sub    esp,0xc
c0022c61:	57                   	push   edi
c0022c62:	53                   	push   ebx
c0022c63:	56                   	push   esi
c0022c64:	52                   	push   edx
c0022c65:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0022c69:	55                   	push   ebp
c0022c6a:	e8 7d f9 ff ff       	call   c00225ec <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c6f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022c73:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022c77:	42                   	inc    edx
c0022c78:	83 c4 20             	add    esp,0x20
c0022c7b:	83 fa 06             	cmp    edx,0x6
c0022c7e:	75 de                	jne    c0022c5e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c0022c80:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0022c85:	83 ec 0c             	sub    esp,0xc
c0022c88:	86 e0                	xchg   al,ah
c0022c8a:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0022c8f:	6a 02                	push   0x2
c0022c91:	57                   	push   edi
c0022c92:	53                   	push   ebx
c0022c93:	56                   	push   esi
c0022c94:	55                   	push   ebp
c0022c95:	e8 7c f7 ff ff       	call   c0022416 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c9a:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0022c9f:	83 c4 20             	add    esp,0x20
c0022ca2:	57                   	push   edi
c0022ca3:	53                   	push   ebx
c0022ca4:	56                   	push   esi
c0022ca5:	55                   	push   ebp
c0022ca6:	e8 a9 f8 ff ff       	call   c0022554 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022cab:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022caf:	57                   	push   edi
c0022cb0:	53                   	push   ebx
c0022cb1:	56                   	push   esi
c0022cb2:	55                   	push   ebp
c0022cb3:	e8 06 f8 ff ff       	call   c00224be <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022cb8:	b9 09 00 00 00       	mov    ecx,0x9
c0022cbd:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0022cc2:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0022cc6:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0022cca:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0022cce:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0022cd2:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022cd6:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0022cda:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0022cde:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0022ce2:	83 ec 0c             	sub    esp,0xc
c0022ce5:	fc                   	cld    
c0022ce6:	89 e7                	mov    edi,esp
c0022ce8:	8d 74 24 58          	lea    esi,[esp+0x58]
c0022cec:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022cee:	55                   	push   ebp
c0022cef:	e8 e2 fc ff ff       	call   c00229d6 <PCI::foundDevice(PCIDeviceInfo)>
c0022cf4:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022cfa:	5b                   	pop    ebx
c0022cfb:	5e                   	pop    esi
c0022cfc:	5f                   	pop    edi
c0022cfd:	5d                   	pop    ebp
c0022cfe:	c3                   	ret    
c0022cff:	90                   	nop

c0022d00 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022d00:	55                   	push   ebp
c0022d01:	57                   	push   edi
c0022d02:	56                   	push   esi
c0022d03:	53                   	push   ebx
c0022d04:	83 ec 0c             	sub    esp,0xc
c0022d07:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022d0b:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022d10:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022d15:	6a 00                	push   0x0
c0022d17:	56                   	push   esi
c0022d18:	57                   	push   edi
c0022d19:	55                   	push   ebp
c0022d1a:	e8 9f f7 ff ff       	call   c00224be <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022d1f:	6a 00                	push   0x0
c0022d21:	56                   	push   esi
c0022d22:	57                   	push   edi
c0022d23:	55                   	push   ebp
c0022d24:	e8 1f fe ff ff       	call   c0022b48 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022d29:	83 c4 20             	add    esp,0x20
c0022d2c:	6a 00                	push   0x0
c0022d2e:	56                   	push   esi
c0022d2f:	57                   	push   edi
c0022d30:	55                   	push   ebp
c0022d31:	e8 ac f7 ff ff       	call   c00224e2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022d36:	83 c4 10             	add    esp,0x10
c0022d39:	84 c0                	test   al,al
c0022d3b:	79 27                	jns    c0022d64 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022d3d:	bb 01 00 00 00       	mov    ebx,0x1
c0022d42:	53                   	push   ebx
c0022d43:	56                   	push   esi
c0022d44:	57                   	push   edi
c0022d45:	55                   	push   ebp
c0022d46:	e8 73 f7 ff ff       	call   c00224be <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022d4b:	83 c4 10             	add    esp,0x10
c0022d4e:	66 40                	inc    ax
c0022d50:	74 0c                	je     c0022d5e <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022d52:	53                   	push   ebx
c0022d53:	56                   	push   esi
c0022d54:	57                   	push   edi
c0022d55:	55                   	push   ebp
c0022d56:	e8 ed fd ff ff       	call   c0022b48 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022d5b:	83 c4 10             	add    esp,0x10
c0022d5e:	43                   	inc    ebx
c0022d5f:	83 fb 08             	cmp    ebx,0x8
c0022d62:	75 de                	jne    c0022d42 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022d64:	83 c4 0c             	add    esp,0xc
c0022d67:	5b                   	pop    ebx
c0022d68:	5e                   	pop    esi
c0022d69:	5f                   	pop    edi
c0022d6a:	5d                   	pop    ebp
c0022d6b:	c3                   	ret    

c0022d6c <PCI::detect()>:
c0022d6c:	56                   	push   esi
c0022d6d:	53                   	push   ebx
c0022d6e:	53                   	push   ebx
c0022d6f:	31 db                	xor    ebx,ebx
c0022d71:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022d75:	6a 00                	push   0x0
c0022d77:	6a 00                	push   0x0
c0022d79:	6a 00                	push   0x0
c0022d7b:	56                   	push   esi
c0022d7c:	e8 61 f7 ff ff       	call   c00224e2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022d81:	83 c4 10             	add    esp,0x10
c0022d84:	a8 80                	test   al,0x80
c0022d86:	75 21                	jne    c0022da9 <PCI::detect()+0x3d>
c0022d88:	51                   	push   ecx
c0022d89:	51                   	push   ecx
c0022d8a:	6a 00                	push   0x0
c0022d8c:	56                   	push   esi
c0022d8d:	e8 20 fc ff ff       	call   c00229b2 <PCI::checkBus(unsigned char)>
c0022d92:	83 c4 10             	add    esp,0x10
c0022d95:	eb 24                	jmp    c0022dbb <PCI::detect()+0x4f>
c0022d97:	52                   	push   edx
c0022d98:	52                   	push   edx
c0022d99:	53                   	push   ebx
c0022d9a:	43                   	inc    ebx
c0022d9b:	56                   	push   esi
c0022d9c:	e8 11 fc ff ff       	call   c00229b2 <PCI::checkBus(unsigned char)>
c0022da1:	83 c4 10             	add    esp,0x10
c0022da4:	83 fb 08             	cmp    ebx,0x8
c0022da7:	74 12                	je     c0022dbb <PCI::detect()+0x4f>
c0022da9:	53                   	push   ebx
c0022daa:	6a 00                	push   0x0
c0022dac:	6a 00                	push   0x0
c0022dae:	56                   	push   esi
c0022daf:	e8 0a f7 ff ff       	call   c00224be <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022db4:	83 c4 10             	add    esp,0x10
c0022db7:	66 40                	inc    ax
c0022db9:	74 dc                	je     c0022d97 <PCI::detect()+0x2b>
c0022dbb:	58                   	pop    eax
c0022dbc:	5b                   	pop    ebx
c0022dbd:	5e                   	pop    esi
c0022dbe:	c3                   	ret    
c0022dbf:	90                   	nop

c0022dc0 <IDE::close(int, int, void*)>:
c0022dc0:	83 c8 ff             	or     eax,0xffffffff
c0022dc3:	c3                   	ret    

c0022dc4 <IDE::IDE()>:
c0022dc4:	83 ec 0c             	sub    esp,0xc
c0022dc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022dcb:	83 ec 08             	sub    esp,0x8
c0022dce:	68 48 be 02 c0       	push   0xc002be48
c0022dd3:	50                   	push   eax
c0022dd4:	e8 d7 0f ff ff       	call   c0013db0 <HardDiskController::HardDiskController(char const*)>
c0022dd9:	83 c4 10             	add    esp,0x10
c0022ddc:	ba d8 be 02 c0       	mov    edx,0xc002bed8
c0022de1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022de5:	89 10                	mov    DWORD PTR [eax],edx
c0022de7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022deb:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022df2:	90                   	nop
c0022df3:	83 c4 0c             	add    esp,0xc
c0022df6:	c3                   	ret    
c0022df7:	90                   	nop

c0022df8 <IDE::prepareInterrupt(unsigned char)>:
c0022df8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022dfd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022e01:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022e09:	c3                   	ret    

c0022e0a <selectDrive(unsigned char, unsigned char)>:
c0022e0a:	c3                   	ret    
c0022e0b:	90                   	nop

c0022e0c <IDE::getBase(unsigned char)>:
c0022e0c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022e11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022e15:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022e1d:	c3                   	ret    

c0022e1e <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022e1e:	55                   	push   ebp
c0022e1f:	57                   	push   edi
c0022e20:	56                   	push   esi
c0022e21:	53                   	push   ebx
c0022e22:	83 ec 1c             	sub    esp,0x1c
c0022e25:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022e29:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022e2d:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022e30:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022e34:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022e38:	80 f9 03             	cmp    cl,0x3
c0022e3b:	77 51                	ja     c0022e8e <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0022e3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022e41:	0f b6 f2             	movzx  esi,dl
c0022e44:	0f b6 db             	movzx  ebx,bl
c0022e47:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022e4a:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0022e4e:	83 ca 80             	or     edx,0xffffff80
c0022e51:	0f b6 d2             	movzx  edx,dl
c0022e54:	52                   	push   edx
c0022e55:	6a 0c                	push   0xc
c0022e57:	56                   	push   esi
c0022e58:	57                   	push   edi
c0022e59:	e8 c0 ff ff ff       	call   c0022e1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022e5e:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0022e63:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022e67:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0022e6b:	ee                   	out    dx,al
c0022e6c:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0022e71:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0022e75:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0022e79:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022e7d:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022e85:	83 c4 2c             	add    esp,0x2c
c0022e88:	5b                   	pop    ebx
c0022e89:	5e                   	pop    esi
c0022e8a:	5f                   	pop    edi
c0022e8b:	5d                   	pop    ebp
c0022e8c:	eb 90                	jmp    c0022e1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022e8e:	80 fb 07             	cmp    bl,0x7
c0022e91:	77 12                	ja     c0022ea5 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0022e93:	0f b6 d2             	movzx  edx,dl
c0022e96:	0f b6 db             	movzx  ebx,bl
c0022e99:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0022ea1:	89 da                	mov    edx,ebx
c0022ea3:	eb 2f                	jmp    c0022ed4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022ea5:	80 fb 0d             	cmp    bl,0xd
c0022ea8:	77 13                	ja     c0022ebd <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0022eaa:	0f b6 d2             	movzx  edx,dl
c0022ead:	0f b6 db             	movzx  ebx,bl
c0022eb0:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0022eb7:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0022ebb:	eb 17                	jmp    c0022ed4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022ebd:	80 fb 15             	cmp    bl,0x15
c0022ec0:	77 13                	ja     c0022ed5 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0022ec2:	0f b6 d2             	movzx  edx,dl
c0022ec5:	0f b6 db             	movzx  ebx,bl
c0022ec8:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0022ed0:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0022ed4:	ee                   	out    dx,al
c0022ed5:	83 c4 1c             	add    esp,0x1c
c0022ed8:	5b                   	pop    ebx
c0022ed9:	5e                   	pop    esi
c0022eda:	5f                   	pop    edi
c0022edb:	5d                   	pop    ebp
c0022edc:	c3                   	ret    
c0022edd:	90                   	nop

c0022ede <IDE::read(unsigned char, unsigned char)>:
c0022ede:	55                   	push   ebp
c0022edf:	57                   	push   edi
c0022ee0:	56                   	push   esi
c0022ee1:	53                   	push   ebx
c0022ee2:	83 ec 1c             	sub    esp,0x1c
c0022ee5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022ee9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022eed:	8d 43 f8             	lea    eax,[ebx-0x8]
c0022ef0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022ef4:	3c 03                	cmp    al,0x3
c0022ef6:	77 43                	ja     c0022f3b <IDE::read(unsigned char, unsigned char)+0x5d>
c0022ef8:	0f b6 f2             	movzx  esi,dl
c0022efb:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022efe:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0022f02:	83 c8 80             	or     eax,0xffffff80
c0022f05:	0f b6 c0             	movzx  eax,al
c0022f08:	50                   	push   eax
c0022f09:	6a 0c                	push   0xc
c0022f0b:	56                   	push   esi
c0022f0c:	57                   	push   edi
c0022f0d:	e8 0c ff ff ff       	call   c0022e1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f12:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0022f17:	0f b6 c3             	movzx  eax,bl
c0022f1a:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0022f1e:	ec                   	in     al,dx
c0022f1f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022f23:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0022f28:	52                   	push   edx
c0022f29:	6a 0c                	push   0xc
c0022f2b:	56                   	push   esi
c0022f2c:	57                   	push   edi
c0022f2d:	e8 ec fe ff ff       	call   c0022e1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f32:	83 c4 20             	add    esp,0x20
c0022f35:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022f39:	eb 49                	jmp    c0022f84 <IDE::read(unsigned char, unsigned char)+0xa6>
c0022f3b:	80 fb 07             	cmp    bl,0x7
c0022f3e:	77 12                	ja     c0022f52 <IDE::read(unsigned char, unsigned char)+0x74>
c0022f40:	0f b6 d2             	movzx  edx,dl
c0022f43:	0f b6 c3             	movzx  eax,bl
c0022f46:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0022f4e:	89 c2                	mov    edx,eax
c0022f50:	eb 31                	jmp    c0022f83 <IDE::read(unsigned char, unsigned char)+0xa5>
c0022f52:	80 fb 0d             	cmp    bl,0xd
c0022f55:	77 13                	ja     c0022f6a <IDE::read(unsigned char, unsigned char)+0x8c>
c0022f57:	0f b6 d2             	movzx  edx,dl
c0022f5a:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0022f61:	0f b6 d3             	movzx  edx,bl
c0022f64:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0022f68:	eb 19                	jmp    c0022f83 <IDE::read(unsigned char, unsigned char)+0xa5>
c0022f6a:	31 c0                	xor    eax,eax
c0022f6c:	80 fb 15             	cmp    bl,0x15
c0022f6f:	77 13                	ja     c0022f84 <IDE::read(unsigned char, unsigned char)+0xa6>
c0022f71:	0f b6 d2             	movzx  edx,dl
c0022f74:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0022f7c:	0f b6 d3             	movzx  edx,bl
c0022f7f:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0022f83:	ec                   	in     al,dx
c0022f84:	83 c4 1c             	add    esp,0x1c
c0022f87:	5b                   	pop    ebx
c0022f88:	5e                   	pop    esi
c0022f89:	5f                   	pop    edi
c0022f8a:	5d                   	pop    ebp
c0022f8b:	c3                   	ret    

c0022f8c <IDE::waitInterrupt(unsigned char)>:
c0022f8c:	55                   	push   ebp
c0022f8d:	57                   	push   edi
c0022f8e:	56                   	push   esi
c0022f8f:	53                   	push   ebx
c0022f90:	31 db                	xor    ebx,ebx
c0022f92:	83 ec 0c             	sub    esp,0xc
c0022f95:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0022f99:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0022f9e:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0022fa6:	89 e8                	mov    eax,ebp
c0022fa8:	84 c0                	test   al,al
c0022faa:	75 34                	jne    c0022fe0 <IDE::waitInterrupt(unsigned char)+0x54>
c0022fac:	52                   	push   edx
c0022fad:	6a 0c                	push   0xc
c0022faf:	56                   	push   esi
c0022fb0:	57                   	push   edi
c0022fb1:	e8 28 ff ff ff       	call   c0022ede <IDE::read(unsigned char, unsigned char)>
c0022fb6:	83 c4 10             	add    esp,0x10
c0022fb9:	a8 01                	test   al,0x1
c0022fbb:	75 2b                	jne    c0022fe8 <IDE::waitInterrupt(unsigned char)+0x5c>
c0022fbd:	f6 c3 04             	test   bl,0x4
c0022fc0:	75 16                	jne    c0022fd8 <IDE::waitInterrupt(unsigned char)+0x4c>
c0022fc2:	83 fb 32             	cmp    ebx,0x32
c0022fc5:	7e 11                	jle    c0022fd8 <IDE::waitInterrupt(unsigned char)+0x4c>
c0022fc7:	50                   	push   eax
c0022fc8:	50                   	push   eax
c0022fc9:	6a 00                	push   0x0
c0022fcb:	68 80 96 98 00       	push   0x989680
c0022fd0:	e8 c6 ab ff ff       	call   c001db9b <nanoSleep(unsigned long long)>
c0022fd5:	83 c4 10             	add    esp,0x10
c0022fd8:	83 fb 3c             	cmp    ebx,0x3c
c0022fdb:	74 0b                	je     c0022fe8 <IDE::waitInterrupt(unsigned char)+0x5c>
c0022fdd:	43                   	inc    ebx
c0022fde:	eb be                	jmp    c0022f9e <IDE::waitInterrupt(unsigned char)+0x12>
c0022fe0:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0022fe8:	83 c4 0c             	add    esp,0xc
c0022feb:	89 e8                	mov    eax,ebp
c0022fed:	5b                   	pop    ebx
c0022fee:	5e                   	pop    esi
c0022fef:	5f                   	pop    edi
c0022ff0:	5d                   	pop    ebp
c0022ff1:	c3                   	ret    

c0022ff2 <ideChannel0IRQHandler(regs*, void*)>:
c0022ff2:	83 ec 10             	sub    esp,0x10
c0022ff5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022ff9:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023000:	6a 07                	push   0x7
c0023002:	6a 00                	push   0x0
c0023004:	50                   	push   eax
c0023005:	e8 d4 fe ff ff       	call   c0022ede <IDE::read(unsigned char, unsigned char)>
c002300a:	83 c4 1c             	add    esp,0x1c
c002300d:	c3                   	ret    

c002300e <ideChannel1IRQHandler(regs*, void*)>:
c002300e:	83 ec 10             	sub    esp,0x10
c0023011:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023015:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c002301c:	6a 07                	push   0x7
c002301e:	6a 01                	push   0x1
c0023020:	50                   	push   eax
c0023021:	e8 b8 fe ff ff       	call   c0022ede <IDE::read(unsigned char, unsigned char)>
c0023026:	83 c4 1c             	add    esp,0x1c
c0023029:	c3                   	ret    

c002302a <IDE::enableIRQs(unsigned char, bool)>:
c002302a:	57                   	push   edi
c002302b:	56                   	push   esi
c002302c:	be 04 00 00 00       	mov    esi,0x4
c0023031:	53                   	push   ebx
c0023032:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023037:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002303b:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023040:	0f 94 c0             	sete   al
c0023043:	d1 e0                	shl    eax,1
c0023045:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c002304c:	0f b6 c0             	movzx  eax,al
c002304f:	50                   	push   eax
c0023050:	6a 0c                	push   0xc
c0023052:	57                   	push   edi
c0023053:	53                   	push   ebx
c0023054:	e8 c5 fd ff ff       	call   c0022e1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023059:	83 c4 10             	add    esp,0x10
c002305c:	50                   	push   eax
c002305d:	6a 0c                	push   0xc
c002305f:	57                   	push   edi
c0023060:	53                   	push   ebx
c0023061:	e8 78 fe ff ff       	call   c0022ede <IDE::read(unsigned char, unsigned char)>
c0023066:	83 c4 10             	add    esp,0x10
c0023069:	4e                   	dec    esi
c002306a:	75 f0                	jne    c002305c <IDE::enableIRQs(unsigned char, bool)+0x32>
c002306c:	5b                   	pop    ebx
c002306d:	5e                   	pop    esi
c002306e:	5f                   	pop    edi
c002306f:	c3                   	ret    

c0023070 <IDE::open(int, int, void*)>:
c0023070:	55                   	push   ebp
c0023071:	57                   	push   edi
c0023072:	56                   	push   esi
c0023073:	53                   	push   ebx
c0023074:	83 ec 1c             	sub    esp,0x1c
c0023077:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002307b:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023084:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c002308d:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023094:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c002309b:	0f 85 b0 02 00 00    	jne    c0023351 <IDE::open(int, int, void*)+0x2e1>
c00230a1:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00230a7:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00230ab:	83 e0 7f             	and    eax,0x7f
c00230ae:	3c 05                	cmp    al,0x5
c00230b0:	74 04                	je     c00230b6 <IDE::open(int, int, void*)+0x46>
c00230b2:	3c 0f                	cmp    al,0xf
c00230b4:	75 32                	jne    c00230e8 <IDE::open(int, int, void*)+0x78>
c00230b6:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00230bc:	83 e0 fc             	and    eax,0xfffffffc
c00230bf:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00230c6:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00230cc:	83 e0 fc             	and    eax,0xfffffffc
c00230cf:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00230d6:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00230dc:	83 e0 fc             	and    eax,0xfffffffc
c00230df:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00230e6:	eb 14                	jmp    c00230fc <IDE::open(int, int, void*)+0x8c>
c00230e8:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00230f2:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00230fc:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023103:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002310a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002310e:	89 c6                	mov    esi,eax
c0023110:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023115:	c1 e6 10             	shl    esi,0x10
c0023118:	89 e8                	mov    eax,ebp
c002311a:	89 fa                	mov    edx,edi
c002311c:	c1 e0 0b             	shl    eax,0xb
c002311f:	09 f0                	or     eax,esi
c0023121:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023128:	c1 e6 08             	shl    esi,0x8
c002312b:	09 c6                	or     esi,eax
c002312d:	89 f0                	mov    eax,esi
c002312f:	0d 08 00 00 80       	or     eax,0x80000008
c0023134:	ef                   	out    dx,eax
c0023135:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c002313a:	89 ca                	mov    edx,ecx
c002313c:	ed                   	in     eax,dx
c002313d:	c1 e8 10             	shr    eax,0x10
c0023140:	3d ff ff 00 00       	cmp    eax,0xffff
c0023145:	0f 84 f5 00 00 00    	je     c0023240 <IDE::open(int, int, void*)+0x1d0>
c002314b:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023151:	89 fa                	mov    edx,edi
c0023153:	89 f0                	mov    eax,esi
c0023155:	ef                   	out    dx,eax
c0023156:	b0 fe                	mov    al,0xfe
c0023158:	89 ca                	mov    edx,ecx
c002315a:	ee                   	out    dx,al
c002315b:	89 f0                	mov    eax,esi
c002315d:	89 fa                	mov    edx,edi
c002315f:	ef                   	out    dx,eax
c0023160:	89 ca                	mov    edx,ecx
c0023162:	ed                   	in     eax,dx
c0023163:	3c fe                	cmp    al,0xfe
c0023165:	0f 85 a9 00 00 00    	jne    c0023214 <IDE::open(int, int, void*)+0x1a4>
c002316b:	8b 15 08 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d708
c0023171:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023178:	74 33                	je     c00231ad <IDE::open(int, int, void*)+0x13d>
c002317a:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023180:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023184:	40                   	inc    eax
c0023185:	83 ec 0c             	sub    esp,0xc
c0023188:	0f b6 c0             	movzx  eax,al
c002318b:	50                   	push   eax
c002318c:	55                   	push   ebp
c002318d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023191:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023197:	51                   	push   ecx
c0023198:	e8 51 48 ff ff       	call   c00179ee <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c002319d:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00231a2:	83 c4 1c             	add    esp,0x1c
c00231a5:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00231ab:	eb 0a                	jmp    c00231b7 <IDE::open(int, int, void*)+0x147>
c00231ad:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00231b7:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00231be:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00231c5:	c1 e1 10             	shl    ecx,0x10
c00231c8:	c1 e0 08             	shl    eax,0x8
c00231cb:	bf f8 0c 00 00       	mov    edi,0xcf8
c00231d0:	09 c1                	or     ecx,eax
c00231d2:	89 fa                	mov    edx,edi
c00231d4:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00231db:	c1 e0 0b             	shl    eax,0xb
c00231de:	09 c1                	or     ecx,eax
c00231e0:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00231e6:	89 c8                	mov    eax,ecx
c00231e8:	ef                   	out    dx,eax
c00231e9:	be fc 0c 00 00       	mov    esi,0xcfc
c00231ee:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00231f4:	89 f2                	mov    edx,esi
c00231f6:	ee                   	out    dx,al
c00231f7:	89 c8                	mov    eax,ecx
c00231f9:	89 fa                	mov    edx,edi
c00231fb:	ef                   	out    dx,eax
c00231fc:	89 f2                	mov    edx,esi
c00231fe:	ed                   	in     eax,dx
c00231ff:	0f b6 c0             	movzx  eax,al
c0023202:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023208:	74 46                	je     c0023250 <IDE::open(int, int, void*)+0x1e0>
c002320a:	83 ec 0c             	sub    esp,0xc
c002320d:	68 60 be 02 c0       	push   0xc002be60
c0023212:	eb 34                	jmp    c0023248 <IDE::open(int, int, void*)+0x1d8>
c0023214:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c002321d:	75 17                	jne    c0023236 <IDE::open(int, int, void*)+0x1c6>
c002321f:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023224:	74 07                	je     c002322d <IDE::open(int, int, void*)+0x1bd>
c0023226:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c002322b:	75 09                	jne    c0023236 <IDE::open(int, int, void*)+0x1c6>
c002322d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023234:	eb 1a                	jmp    c0023250 <IDE::open(int, int, void*)+0x1e0>
c0023236:	83 ec 0c             	sub    esp,0xc
c0023239:	68 68 be 02 c0       	push   0xc002be68
c002323e:	eb 08                	jmp    c0023248 <IDE::open(int, int, void*)+0x1d8>
c0023240:	83 ec 0c             	sub    esp,0xc
c0023243:	68 99 be 02 c0       	push   0xc002be99
c0023248:	e8 e8 6a ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c002324d:	83 c4 10             	add    esp,0x10
c0023250:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023257:	79 1a                	jns    c0023273 <IDE::open(int, int, void*)+0x203>
c0023259:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c002325f:	83 e0 fc             	and    eax,0xfffffffc
c0023262:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023269:	83 c0 08             	add    eax,0x8
c002326c:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023273:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023279:	89 c2                	mov    edx,eax
c002327b:	83 e2 0f             	and    edx,0xf
c002327e:	66 83 fa 08          	cmp    dx,0x8
c0023282:	75 0a                	jne    c002328e <IDE::open(int, int, void*)+0x21e>
c0023284:	83 e8 02             	sub    eax,0x2
c0023287:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002328e:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023294:	89 c2                	mov    edx,eax
c0023296:	83 e2 0f             	and    edx,0xf
c0023299:	66 83 fa 08          	cmp    dx,0x8
c002329d:	75 0a                	jne    c00232a9 <IDE::open(int, int, void*)+0x239>
c002329f:	83 e8 02             	sub    eax,0x2
c00232a2:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00232a9:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00232b0:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00232b7:	89 d0                	mov    eax,edx
c00232b9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00232bc:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00232c0:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00232c4:	8d 4a 01             	lea    ecx,[edx+0x1]
c00232c7:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00232cc:	0f b6 c9             	movzx  ecx,cl
c00232cf:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00232d6:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00232d9:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00232dd:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00232e1:	8d 50 02             	lea    edx,[eax+0x2]
c00232e4:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00232e9:	0f b6 d2             	movzx  edx,dl
c00232ec:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00232f2:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00232f5:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00232f9:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00232fd:	8d 48 03             	lea    ecx,[eax+0x3]
c0023300:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023305:	0f b6 c9             	movzx  ecx,cl
c0023308:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c002330e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023311:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023315:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023319:	8d 50 04             	lea    edx,[eax+0x4]
c002331c:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023322:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023327:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c002332e:	66 85 f6             	test   si,si
c0023331:	74 5b                	je     c002338e <IDE::open(int, int, void*)+0x31e>
c0023333:	0f b6 d2             	movzx  edx,dl
c0023336:	83 c0 05             	add    eax,0x5
c0023339:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002333c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023340:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023344:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c002334a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002334f:	eb 3d                	jmp    c002338e <IDE::open(int, int, void*)+0x31e>
c0023351:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c0023357:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002335e:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023365:	66 05 06 02          	add    ax,0x206
c0023369:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023370:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c0023377:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002337e:	66 05 06 02          	add    ax,0x206
c0023382:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023389:	e9 e5 fe ff ff       	jmp    c0023273 <IDE::open(int, int, void*)+0x203>
c002338e:	50                   	push   eax
c002338f:	50                   	push   eax
c0023390:	6a 00                	push   0x0
c0023392:	53                   	push   ebx
c0023393:	e8 60 fa ff ff       	call   c0022df8 <IDE::prepareInterrupt(unsigned char)>
c0023398:	5a                   	pop    edx
c0023399:	59                   	pop    ecx
c002339a:	6a 01                	push   0x1
c002339c:	53                   	push   ebx
c002339d:	e8 56 fa ff ff       	call   c0022df8 <IDE::prepareInterrupt(unsigned char)>
c00233a2:	83 c4 0c             	add    esp,0xc
c00233a5:	6a 00                	push   0x0
c00233a7:	6a 00                	push   0x0
c00233a9:	53                   	push   ebx
c00233aa:	e8 7b fc ff ff       	call   c002302a <IDE::enableIRQs(unsigned char, bool)>
c00233af:	83 c4 0c             	add    esp,0xc
c00233b2:	6a 00                	push   0x0
c00233b4:	6a 01                	push   0x1
c00233b6:	53                   	push   ebx
c00233b7:	e8 6e fc ff ff       	call   c002302a <IDE::enableIRQs(unsigned char, bool)>
c00233bc:	83 c4 10             	add    esp,0x10
c00233bf:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00233c6:	74 34                	je     c00233fc <IDE::open(int, int, void*)+0x38c>
c00233c8:	83 ec 0c             	sub    esp,0xc
c00233cb:	53                   	push   ebx
c00233cc:	6a 01                	push   0x1
c00233ce:	68 f2 2f 02 c0       	push   0xc0022ff2
c00233d3:	6a 0e                	push   0xe
c00233d5:	53                   	push   ebx
c00233d6:	e8 9f 05 ff ff       	call   c001397a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00233db:	83 c4 14             	add    esp,0x14
c00233de:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00233e4:	53                   	push   ebx
c00233e5:	6a 01                	push   0x1
c00233e7:	68 0e 30 02 c0       	push   0xc002300e
c00233ec:	6a 0f                	push   0xf
c00233ee:	53                   	push   ebx
c00233ef:	e8 86 05 ff ff       	call   c001397a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00233f4:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00233fa:	eb 38                	jmp    c0023434 <IDE::open(int, int, void*)+0x3c4>
c00233fc:	83 ec 0c             	sub    esp,0xc
c00233ff:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023409:	53                   	push   ebx
c002340a:	6a 00                	push   0x0
c002340c:	68 f2 2f 02 c0       	push   0xc0022ff2
c0023411:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023417:	53                   	push   ebx
c0023418:	e8 5d 05 ff ff       	call   c001397a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002341d:	83 c4 14             	add    esp,0x14
c0023420:	53                   	push   ebx
c0023421:	6a 00                	push   0x0
c0023423:	68 0e 30 02 c0       	push   0xc002300e
c0023428:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c002342e:	53                   	push   ebx
c002342f:	e8 46 05 ff ff       	call   c001397a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023434:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023436:	83 c4 20             	add    esp,0x20
c0023439:	83 ec 0c             	sub    esp,0xc
c002343c:	53                   	push   ebx
c002343d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023440:	83 c4 0c             	add    esp,0xc
c0023443:	6a 07                	push   0x7
c0023445:	6a 00                	push   0x0
c0023447:	53                   	push   ebx
c0023448:	e8 91 fa ff ff       	call   c0022ede <IDE::read(unsigned char, unsigned char)>
c002344d:	83 c4 0c             	add    esp,0xc
c0023450:	6a 07                	push   0x7
c0023452:	6a 01                	push   0x1
c0023454:	53                   	push   ebx
c0023455:	e8 84 fa ff ff       	call   c0022ede <IDE::read(unsigned char, unsigned char)>
c002345a:	83 c4 0c             	add    esp,0xc
c002345d:	6a 01                	push   0x1
c002345f:	6a 00                	push   0x0
c0023461:	53                   	push   ebx
c0023462:	e8 c3 fb ff ff       	call   c002302a <IDE::enableIRQs(unsigned char, bool)>
c0023467:	83 c4 0c             	add    esp,0xc
c002346a:	6a 01                	push   0x1
c002346c:	6a 01                	push   0x1
c002346e:	53                   	push   ebx
c002346f:	e8 b6 fb ff ff       	call   c002302a <IDE::enableIRQs(unsigned char, bool)>
c0023474:	83 c4 2c             	add    esp,0x2c
c0023477:	31 c0                	xor    eax,eax
c0023479:	5b                   	pop    ebx
c002347a:	5e                   	pop    esi
c002347b:	5f                   	pop    edi
c002347c:	5d                   	pop    ebp
c002347d:	c3                   	ret    

c002347e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c002347e:	55                   	push   ebp
c002347f:	57                   	push   edi
c0023480:	56                   	push   esi
c0023481:	53                   	push   ebx
c0023482:	83 ec 1c             	sub    esp,0x1c
c0023485:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023489:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002348d:	8d 50 f8             	lea    edx,[eax-0x8]
c0023490:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023494:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023498:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002349c:	80 fa 03             	cmp    dl,0x3
c002349f:	77 5d                	ja     c00234fe <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00234a1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00234a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00234a9:	0f b6 db             	movzx  ebx,bl
c00234ac:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00234af:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00234b3:	83 ca 80             	or     edx,0xffffff80
c00234b6:	0f b6 d2             	movzx  edx,dl
c00234b9:	52                   	push   edx
c00234ba:	6a 0c                	push   0xc
c00234bc:	53                   	push   ebx
c00234bd:	56                   	push   esi
c00234be:	e8 5b f9 ff ff       	call   c0022e1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00234c3:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00234c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00234cc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00234d0:	0f b6 c0             	movzx  eax,al
c00234d3:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00234d7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00234d9:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00234de:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00234e2:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00234e6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00234ea:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00234f2:	83 c4 2c             	add    esp,0x2c
c00234f5:	5b                   	pop    ebx
c00234f6:	5e                   	pop    esi
c00234f7:	5f                   	pop    edi
c00234f8:	5d                   	pop    ebp
c00234f9:	e9 20 f9 ff ff       	jmp    c0022e1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00234fe:	3c 07                	cmp    al,0x7
c0023500:	77 10                	ja     c0023512 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023502:	0f b6 db             	movzx  ebx,bl
c0023505:	0f b6 d0             	movzx  edx,al
c0023508:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023510:	eb 2d                	jmp    c002353f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023512:	3c 0d                	cmp    al,0xd
c0023514:	77 13                	ja     c0023529 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023516:	0f b6 db             	movzx  ebx,bl
c0023519:	0f b6 c0             	movzx  eax,al
c002351c:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023523:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023527:	eb 16                	jmp    c002353f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023529:	3c 15                	cmp    al,0x15
c002352b:	77 14                	ja     c0023541 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c002352d:	0f b6 db             	movzx  ebx,bl
c0023530:	0f b6 c0             	movzx  eax,al
c0023533:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c002353b:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c002353f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023541:	83 c4 1c             	add    esp,0x1c
c0023544:	5b                   	pop    ebx
c0023545:	5e                   	pop    esi
c0023546:	5f                   	pop    edi
c0023547:	5d                   	pop    ebp
c0023548:	c3                   	ret    
c0023549:	90                   	nop

c002354a <IDE::detect()>:
c002354a:	55                   	push   ebp
c002354b:	57                   	push   edi
c002354c:	56                   	push   esi
c002354d:	53                   	push   ebx
c002354e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023554:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c002355b:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023562:	0f 85 9d 02 00 00    	jne    c0023805 <IDE::detect()+0x2bb>
c0023568:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c002356f:	31 f6                	xor    esi,esi
c0023571:	31 ed                	xor    ebp,ebp
c0023573:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002357b:	89 e8                	mov    eax,ebp
c002357d:	c1 e0 06             	shl    eax,0x6
c0023580:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023588:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002358c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0023590:	c1 e0 04             	shl    eax,0x4
c0023593:	83 c8 a0             	or     eax,0xffffffa0
c0023596:	0f b6 c0             	movzx  eax,al
c0023599:	50                   	push   eax
c002359a:	6a 06                	push   0x6
c002359c:	56                   	push   esi
c002359d:	53                   	push   ebx
c002359e:	e8 7b f8 ff ff       	call   c0022e1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00235a3:	83 c4 0c             	add    esp,0xc
c00235a6:	6a 0c                	push   0xc
c00235a8:	56                   	push   esi
c00235a9:	53                   	push   ebx
c00235aa:	e8 2f f9 ff ff       	call   c0022ede <IDE::read(unsigned char, unsigned char)>
c00235af:	83 c4 0c             	add    esp,0xc
c00235b2:	6a 0c                	push   0xc
c00235b4:	56                   	push   esi
c00235b5:	53                   	push   ebx
c00235b6:	e8 23 f9 ff ff       	call   c0022ede <IDE::read(unsigned char, unsigned char)>
c00235bb:	83 c4 0c             	add    esp,0xc
c00235be:	6a 0c                	push   0xc
c00235c0:	56                   	push   esi
c00235c1:	53                   	push   ebx
c00235c2:	e8 17 f9 ff ff       	call   c0022ede <IDE::read(unsigned char, unsigned char)>
c00235c7:	83 c4 0c             	add    esp,0xc
c00235ca:	6a 0c                	push   0xc
c00235cc:	56                   	push   esi
c00235cd:	53                   	push   ebx
c00235ce:	e8 0b f9 ff ff       	call   c0022ede <IDE::read(unsigned char, unsigned char)>
c00235d3:	68 ec 00 00 00       	push   0xec
c00235d8:	6a 07                	push   0x7
c00235da:	56                   	push   esi
c00235db:	53                   	push   ebx
c00235dc:	e8 3d f8 ff ff       	call   c0022e1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00235e1:	83 c4 1c             	add    esp,0x1c
c00235e4:	6a 0c                	push   0xc
c00235e6:	56                   	push   esi
c00235e7:	53                   	push   ebx
c00235e8:	e8 f1 f8 ff ff       	call   c0022ede <IDE::read(unsigned char, unsigned char)>
c00235ed:	83 c4 0c             	add    esp,0xc
c00235f0:	6a 0c                	push   0xc
c00235f2:	56                   	push   esi
c00235f3:	53                   	push   ebx
c00235f4:	e8 e5 f8 ff ff       	call   c0022ede <IDE::read(unsigned char, unsigned char)>
c00235f9:	83 c4 0c             	add    esp,0xc
c00235fc:	6a 0c                	push   0xc
c00235fe:	56                   	push   esi
c00235ff:	53                   	push   ebx
c0023600:	e8 d9 f8 ff ff       	call   c0022ede <IDE::read(unsigned char, unsigned char)>
c0023605:	83 c4 0c             	add    esp,0xc
c0023608:	6a 0c                	push   0xc
c002360a:	56                   	push   esi
c002360b:	53                   	push   ebx
c002360c:	e8 cd f8 ff ff       	call   c0022ede <IDE::read(unsigned char, unsigned char)>
c0023611:	83 c4 0c             	add    esp,0xc
c0023614:	6a 0c                	push   0xc
c0023616:	56                   	push   esi
c0023617:	53                   	push   ebx
c0023618:	e8 c1 f8 ff ff       	call   c0022ede <IDE::read(unsigned char, unsigned char)>
c002361d:	83 c4 10             	add    esp,0x10
c0023620:	84 c0                	test   al,al
c0023622:	0f 84 63 01 00 00    	je     c002378b <IDE::detect()+0x241>
c0023628:	31 ff                	xor    edi,edi
c002362a:	50                   	push   eax
c002362b:	6a 0c                	push   0xc
c002362d:	56                   	push   esi
c002362e:	53                   	push   ebx
c002362f:	e8 aa f8 ff ff       	call   c0022ede <IDE::read(unsigned char, unsigned char)>
c0023634:	83 c4 10             	add    esp,0x10
c0023637:	a8 01                	test   al,0x1
c0023639:	0f 85 6d 01 00 00    	jne    c00237ac <IDE::detect()+0x262>
c002363f:	84 c0                	test   al,al
c0023641:	78 04                	js     c0023647 <IDE::detect()+0xfd>
c0023643:	a8 08                	test   al,0x8
c0023645:	75 27                	jne    c002366e <IDE::detect()+0x124>
c0023647:	47                   	inc    edi
c0023648:	81 ff 17 01 00 00    	cmp    edi,0x117
c002364e:	7e da                	jle    c002362a <IDE::detect()+0xe0>
c0023650:	50                   	push   eax
c0023651:	50                   	push   eax
c0023652:	6a 00                	push   0x0
c0023654:	68 40 4b 4c 00       	push   0x4c4b40
c0023659:	e8 3d a5 ff ff       	call   c001db9b <nanoSleep(unsigned long long)>
c002365e:	83 c4 10             	add    esp,0x10
c0023661:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0023667:	75 c1                	jne    c002362a <IDE::detect()+0xe0>
c0023669:	e9 3e 01 00 00       	jmp    c00237ac <IDE::detect()+0x262>
c002366e:	31 c9                	xor    ecx,ecx
c0023670:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0023674:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023678:	83 ec 0c             	sub    esp,0xc
c002367b:	68 80 00 00 00       	push   0x80
c0023680:	57                   	push   edi
c0023681:	6a 00                	push   0x0
c0023683:	56                   	push   esi
c0023684:	53                   	push   ebx
c0023685:	e8 f4 fd ff ff       	call   c002347e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c002368a:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c002368f:	89 e8                	mov    eax,ebp
c0023691:	89 d1                	mov    ecx,edx
c0023693:	c1 e0 06             	shl    eax,0x6
c0023696:	01 d8                	add    eax,ebx
c0023698:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002369f:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00236a6:	89 f2                	mov    edx,esi
c00236a8:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00236ae:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00236b2:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00236b8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00236bc:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00236c3:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00236cb:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00236d2:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00236da:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00236e0:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00236e7:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00236ed:	8d 54 24 58          	lea    edx,[esp+0x58]
c00236f1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00236f5:	83 c4 20             	add    esp,0x20
c00236f8:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00236fb:	83 c0 02             	add    eax,0x2
c00236fe:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0023704:	83 c7 02             	add    edi,0x2
c0023707:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c002370a:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0023710:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0023714:	75 e2                	jne    c00236f8 <IDE::detect()+0x1ae>
c0023716:	89 e8                	mov    eax,ebp
c0023718:	c1 e0 06             	shl    eax,0x6
c002371b:	01 d8                	add    eax,ebx
c002371d:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0023723:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c002372a:	66 c1 ea 09          	shr    dx,0x9
c002372e:	83 e2 01             	and    edx,0x1
c0023731:	84 c9                	test   cl,cl
c0023733:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023739:	75 22                	jne    c002375d <IDE::detect()+0x213>
c002373b:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c0023742:	74 46                	je     c002378a <IDE::detect()+0x240>
c0023744:	83 ec 0c             	sub    esp,0xc
c0023747:	68 7c 01 00 00       	push   0x17c
c002374c:	e8 4b be fe ff       	call   c000f59c <malloc>
c0023751:	89 c7                	mov    edi,eax
c0023753:	89 04 24             	mov    DWORD PTR [esp],eax
c0023756:	e8 15 05 00 00       	call   c0023c70 <ATA::ATA()>
c002375b:	eb 17                	jmp    c0023774 <IDE::detect()+0x22a>
c002375d:	83 ec 0c             	sub    esp,0xc
c0023760:	68 80 01 00 00       	push   0x180
c0023765:	e8 32 be fe ff       	call   c000f59c <malloc>
c002376a:	89 c7                	mov    edi,eax
c002376c:	89 04 24             	mov    DWORD PTR [esp],eax
c002376f:	e8 04 0b 00 00       	call   c0024278 <ATAPI::ATAPI()>
c0023774:	5a                   	pop    edx
c0023775:	59                   	pop    ecx
c0023776:	57                   	push   edi
c0023777:	53                   	push   ebx
c0023778:	e8 85 02 ff ff       	call   c0013a02 <Device::addChild(Device*)>
c002377d:	8b 07                	mov    eax,DWORD PTR [edi]
c002377f:	53                   	push   ebx
c0023780:	55                   	push   ebp
c0023781:	6a 00                	push   0x0
c0023783:	57                   	push   edi
c0023784:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023787:	83 c4 20             	add    esp,0x20
c002378a:	45                   	inc    ebp
c002378b:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0023790:	74 0d                	je     c002379f <IDE::detect()+0x255>
c0023792:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c002379a:	e9 dc fd ff ff       	jmp    c002357b <IDE::detect()+0x31>
c002379f:	4e                   	dec    esi
c00237a0:	74 63                	je     c0023805 <IDE::detect()+0x2bb>
c00237a2:	be 01 00 00 00       	mov    esi,0x1
c00237a7:	e9 c7 fd ff ff       	jmp    c0023573 <IDE::detect()+0x29>
c00237ac:	50                   	push   eax
c00237ad:	6a 04                	push   0x4
c00237af:	56                   	push   esi
c00237b0:	53                   	push   ebx
c00237b1:	e8 28 f7 ff ff       	call   c0022ede <IDE::read(unsigned char, unsigned char)>
c00237b6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00237ba:	83 c4 0c             	add    esp,0xc
c00237bd:	6a 05                	push   0x5
c00237bf:	56                   	push   esi
c00237c0:	53                   	push   ebx
c00237c1:	e8 18 f7 ff ff       	call   c0022ede <IDE::read(unsigned char, unsigned char)>
c00237c6:	83 c4 10             	add    esp,0x10
c00237c9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00237cd:	80 fa 14             	cmp    dl,0x14
c00237d0:	75 04                	jne    c00237d6 <IDE::detect()+0x28c>
c00237d2:	3c eb                	cmp    al,0xeb
c00237d4:	eb 07                	jmp    c00237dd <IDE::detect()+0x293>
c00237d6:	3c 96                	cmp    al,0x96
c00237d8:	75 b1                	jne    c002378b <IDE::detect()+0x241>
c00237da:	80 fa 69             	cmp    dl,0x69
c00237dd:	75 ac                	jne    c002378b <IDE::detect()+0x241>
c00237df:	68 a1 00 00 00       	push   0xa1
c00237e4:	6a 07                	push   0x7
c00237e6:	56                   	push   esi
c00237e7:	53                   	push   ebx
c00237e8:	e8 31 f6 ff ff       	call   c0022e1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00237ed:	5f                   	pop    edi
c00237ee:	58                   	pop    eax
c00237ef:	6a 00                	push   0x0
c00237f1:	68 40 42 0f 00       	push   0xf4240
c00237f6:	e8 a0 a3 ff ff       	call   c001db9b <nanoSleep(unsigned long long)>
c00237fb:	83 c4 10             	add    esp,0x10
c00237fe:	b1 01                	mov    cl,0x1
c0023800:	e9 6b fe ff ff       	jmp    c0023670 <IDE::detect()+0x126>
c0023805:	81 c4 1c 02 00 00    	add    esp,0x21c
c002380b:	5b                   	pop    ebx
c002380c:	5e                   	pop    esi
c002380d:	5f                   	pop    edi
c002380e:	5d                   	pop    ebp
c002380f:	c3                   	ret    

c0023810 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023810:	55                   	push   ebp
c0023811:	57                   	push   edi
c0023812:	56                   	push   esi
c0023813:	53                   	push   ebx
c0023814:	83 ec 1c             	sub    esp,0x1c
c0023817:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002381b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002381f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023823:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023827:	88 c3                	mov    bl,al
c0023829:	84 c0                	test   al,al
c002382b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002382f:	0f 84 81 00 00 00    	je     c00238b6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023835:	83 ec 0c             	sub    esp,0xc
c0023838:	68 c3 be 02 c0       	push   0xc002bec3
c002383d:	e8 87 ed fe ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c0023842:	83 c4 10             	add    esp,0x10
c0023845:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023849:	3c 01                	cmp    al,0x1
c002384b:	74 63                	je     c00238b0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c002384d:	3c 02                	cmp    al,0x2
c002384f:	75 53                	jne    c00238a4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0023851:	d1 e6                	shl    esi,1
c0023853:	09 ee                	or     esi,ebp
c0023855:	50                   	push   eax
c0023856:	89 f0                	mov    eax,esi
c0023858:	6a 01                	push   0x1
c002385a:	0f b6 f0             	movzx  esi,al
c002385d:	c1 e6 06             	shl    esi,0x6
c0023860:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023868:	50                   	push   eax
c0023869:	57                   	push   edi
c002386a:	e8 6f f6 ff ff       	call   c0022ede <IDE::read(unsigned char, unsigned char)>
c002386f:	83 c4 10             	add    esp,0x10
c0023872:	a8 01                	test   al,0x1
c0023874:	74 02                	je     c0023878 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0023876:	b3 07                	mov    bl,0x7
c0023878:	a8 02                	test   al,0x2
c002387a:	74 02                	je     c002387e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c002387c:	b3 03                	mov    bl,0x3
c002387e:	a8 04                	test   al,0x4
c0023880:	74 02                	je     c0023884 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0023882:	b3 14                	mov    bl,0x14
c0023884:	a8 08                	test   al,0x8
c0023886:	74 02                	je     c002388a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0023888:	b3 03                	mov    bl,0x3
c002388a:	a8 10                	test   al,0x10
c002388c:	74 02                	je     c0023890 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c002388e:	b3 15                	mov    bl,0x15
c0023890:	a8 20                	test   al,0x20
c0023892:	74 02                	je     c0023896 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0023894:	b3 03                	mov    bl,0x3
c0023896:	a8 40                	test   al,0x40
c0023898:	74 02                	je     c002389c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c002389a:	b3 16                	mov    bl,0x16
c002389c:	84 c0                	test   al,al
c002389e:	79 16                	jns    c00238b6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00238a0:	b3 0d                	mov    bl,0xd
c00238a2:	eb 12                	jmp    c00238b6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00238a4:	3c 03                	cmp    al,0x3
c00238a6:	74 0c                	je     c00238b4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c00238a8:	3c 04                	cmp    al,0x4
c00238aa:	75 0a                	jne    c00238b6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00238ac:	b3 08                	mov    bl,0x8
c00238ae:	eb 06                	jmp    c00238b6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00238b0:	b3 13                	mov    bl,0x13
c00238b2:	eb 02                	jmp    c00238b6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00238b4:	b3 17                	mov    bl,0x17
c00238b6:	83 c4 1c             	add    esp,0x1c
c00238b9:	88 d8                	mov    al,bl
c00238bb:	5b                   	pop    ebx
c00238bc:	5e                   	pop    esi
c00238bd:	5f                   	pop    edi
c00238be:	5d                   	pop    ebp
c00238bf:	c3                   	ret    

c00238c0 <IDE::polling(unsigned char, unsigned int)>:
c00238c0:	57                   	push   edi
c00238c1:	56                   	push   esi
c00238c2:	53                   	push   ebx
c00238c3:	bb 04 00 00 00       	mov    ebx,0x4
c00238c8:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00238cc:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00238d1:	52                   	push   edx
c00238d2:	6a 0c                	push   0xc
c00238d4:	56                   	push   esi
c00238d5:	57                   	push   edi
c00238d6:	e8 03 f6 ff ff       	call   c0022ede <IDE::read(unsigned char, unsigned char)>
c00238db:	83 c4 10             	add    esp,0x10
c00238de:	4b                   	dec    ebx
c00238df:	75 f0                	jne    c00238d1 <IDE::polling(unsigned char, unsigned int)+0x11>
c00238e1:	bb a0 86 01 00       	mov    ebx,0x186a0
c00238e6:	50                   	push   eax
c00238e7:	6a 0c                	push   0xc
c00238e9:	56                   	push   esi
c00238ea:	57                   	push   edi
c00238eb:	e8 ee f5 ff ff       	call   c0022ede <IDE::read(unsigned char, unsigned char)>
c00238f0:	83 c4 10             	add    esp,0x10
c00238f3:	a8 01                	test   al,0x1
c00238f5:	75 17                	jne    c002390e <IDE::polling(unsigned char, unsigned int)+0x4e>
c00238f7:	a8 20                	test   al,0x20
c00238f9:	75 0f                	jne    c002390a <IDE::polling(unsigned char, unsigned int)+0x4a>
c00238fb:	4b                   	dec    ebx
c00238fc:	74 10                	je     c002390e <IDE::polling(unsigned char, unsigned int)+0x4e>
c00238fe:	84 c0                	test   al,al
c0023900:	78 e4                	js     c00238e6 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023902:	a8 08                	test   al,0x8
c0023904:	74 e0                	je     c00238e6 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023906:	31 c0                	xor    eax,eax
c0023908:	eb 06                	jmp    c0023910 <IDE::polling(unsigned char, unsigned int)+0x50>
c002390a:	b0 01                	mov    al,0x1
c002390c:	eb 02                	jmp    c0023910 <IDE::polling(unsigned char, unsigned int)+0x50>
c002390e:	b0 02                	mov    al,0x2
c0023910:	5b                   	pop    ebx
c0023911:	5e                   	pop    esi
c0023912:	5f                   	pop    edi
c0023913:	c3                   	ret    

c0023914 <SATABus::close(int, int, void*)>:
c0023914:	31 c0                	xor    eax,eax
c0023916:	c3                   	ret    
c0023917:	90                   	nop

c0023918 <SATABus::detect()>:
c0023918:	c3                   	ret    
c0023919:	90                   	nop

c002391a <SATABus::SATABus()>:
c002391a:	83 ec 0c             	sub    esp,0xc
c002391d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023921:	83 ec 08             	sub    esp,0x8
c0023924:	68 fc be 02 c0       	push   0xc002befc
c0023929:	50                   	push   eax
c002392a:	e8 81 04 ff ff       	call   c0013db0 <HardDiskController::HardDiskController(char const*)>
c002392f:	83 c4 10             	add    esp,0x10
c0023932:	ba 50 bf 02 c0       	mov    edx,0xc002bf50
c0023937:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002393b:	89 10                	mov    DWORD PTR [eax],edx
c002393d:	83 ec 0c             	sub    esp,0xc
c0023940:	6a 50                	push   0x50
c0023942:	e8 d0 c0 fe ff       	call   c000fa17 <Phys::allocateContiguousPages(int)>
c0023947:	83 c4 10             	add    esp,0x10
c002394a:	89 c2                	mov    edx,eax
c002394c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023950:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023956:	83 ec 0c             	sub    esp,0xc
c0023959:	6a 50                	push   0x50
c002395b:	e8 6f d8 fe ff       	call   c00111cf <Virt::allocateKernelVirtualPages(int)>
c0023960:	83 c4 10             	add    esp,0x10
c0023963:	89 c2                	mov    edx,eax
c0023965:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023969:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002396f:	a1 70 d8 02 c0       	mov    eax,ds:0xc002d870
c0023974:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023978:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c002397e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023982:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023988:	83 ec 0c             	sub    esp,0xc
c002398b:	6a 03                	push   0x3
c002398d:	6a 50                	push   0x50
c002398f:	51                   	push   ecx
c0023990:	52                   	push   edx
c0023991:	50                   	push   eax
c0023992:	e8 eb e2 fe ff       	call   c0011c82 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023997:	83 c4 20             	add    esp,0x20
c002399a:	90                   	nop
c002399b:	83 c4 0c             	add    esp,0xc
c002399e:	c3                   	ret    
c002399f:	90                   	nop

c00239a0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c00239a0:	83 ec 0c             	sub    esp,0xc
c00239a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00239a7:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00239aa:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00239ad:	09 c2                	or     edx,eax
c00239af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00239b3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00239b9:	8b 08                	mov    ecx,DWORD PTR [eax]
c00239bb:	31 c0                	xor    eax,eax
c00239bd:	c1 e9 08             	shr    ecx,0x8
c00239c0:	83 e1 0f             	and    ecx,0xf
c00239c3:	39 c8                	cmp    eax,ecx
c00239c5:	74 0a                	je     c00239d1 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c00239c7:	f6 c2 01             	test   dl,0x1
c00239ca:	74 18                	je     c00239e4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c00239cc:	d1 ea                	shr    edx,1
c00239ce:	40                   	inc    eax
c00239cf:	eb f2                	jmp    c00239c3 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c00239d1:	83 ec 0c             	sub    esp,0xc
c00239d4:	68 20 bf 02 c0       	push   0xc002bf20
c00239d9:	e8 57 63 ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c00239de:	83 c4 10             	add    esp,0x10
c00239e1:	83 c8 ff             	or     eax,0xffffffff
c00239e4:	83 c4 0c             	add    esp,0xc
c00239e7:	c3                   	ret    

c00239e8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c00239e8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00239ec:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00239ef:	89 c2                	mov    edx,eax
c00239f1:	c1 ea 08             	shr    edx,0x8
c00239f4:	83 e2 0f             	and    edx,0xf
c00239f7:	fe ca                	dec    dl
c00239f9:	75 31                	jne    c0023a2c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00239fb:	83 e0 0f             	and    eax,0xf
c00239fe:	3c 03                	cmp    al,0x3
c0023a00:	75 2a                	jne    c0023a2c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023a02:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023a05:	b8 02 00 00 00       	mov    eax,0x2
c0023a0a:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023a10:	74 1c                	je     c0023a2e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023a12:	b8 04 00 00 00       	mov    eax,0x4
c0023a17:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023a1d:	74 0f                	je     c0023a2e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023a1f:	31 c0                	xor    eax,eax
c0023a21:	83 fa 03             	cmp    edx,0x3
c0023a24:	0f 94 c0             	sete   al
c0023a27:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023a2b:	c3                   	ret    
c0023a2c:	31 c0                	xor    eax,eax
c0023a2e:	c3                   	ret    
c0023a2f:	90                   	nop

c0023a30 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023a30:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023a34:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023a37:	0f ba e2 0f          	bt     edx,0xf
c0023a3b:	72 f7                	jb     c0023a34 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023a3d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023a40:	83 ca 10             	or     edx,0x10
c0023a43:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023a46:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023a49:	83 ca 01             	or     edx,0x1
c0023a4c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023a4f:	c3                   	ret    

c0023a50 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023a50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023a54:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023a57:	83 e2 fe             	and    edx,0xfffffffe
c0023a5a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023a5d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023a60:	83 e2 ef             	and    edx,0xffffffef
c0023a63:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023a66:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023a69:	0f ba e2 0e          	bt     edx,0xe
c0023a6d:	72 f7                	jb     c0023a66 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023a6f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023a72:	0f ba e2 0f          	bt     edx,0xf
c0023a76:	72 ee                	jb     c0023a66 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023a78:	c3                   	ret    
c0023a79:	90                   	nop

c0023a7a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023a7a:	55                   	push   ebp
c0023a7b:	57                   	push   edi
c0023a7c:	56                   	push   esi
c0023a7d:	53                   	push   ebx
c0023a7e:	83 ec 1c             	sub    esp,0x1c
c0023a81:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023a85:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023a89:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023a8d:	53                   	push   ebx
c0023a8e:	89 fd                	mov    ebp,edi
c0023a90:	56                   	push   esi
c0023a91:	c1 e5 0a             	shl    ebp,0xa
c0023a94:	e8 b7 ff ff ff       	call   c0023a50 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023a99:	83 ec 0c             	sub    esp,0xc
c0023a9c:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023aa2:	01 e8                	add    eax,ebp
c0023aa4:	89 03                	mov    DWORD PTR [ebx],eax
c0023aa6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023aa8:	68 00 04 00 00       	push   0x400
c0023aad:	6a 00                	push   0x0
c0023aaf:	50                   	push   eax
c0023ab0:	e8 9b cc fd ff       	call   c0000750 <memset>
c0023ab5:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023abb:	89 fa                	mov    edx,edi
c0023abd:	01 e8                	add    eax,ebp
c0023abf:	c1 e7 0d             	shl    edi,0xd
c0023ac2:	89 03                	mov    DWORD PTR [ebx],eax
c0023ac4:	c1 e2 08             	shl    edx,0x8
c0023ac7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023ace:	81 c2 00 80 00 00    	add    edx,0x8000
c0023ad4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023ad8:	89 d0                	mov    eax,edx
c0023ada:	83 c4 1c             	add    esp,0x1c
c0023add:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023ae3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023ae6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023ae9:	68 00 01 00 00       	push   0x100
c0023aee:	6a 00                	push   0x0
c0023af0:	50                   	push   eax
c0023af1:	e8 5a cc fd ff       	call   c0000750 <memset>
c0023af6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023afa:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023b00:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023b06:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023b0a:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023b0d:	83 c4 10             	add    esp,0x10
c0023b10:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023b17:	31 ff                	xor    edi,edi
c0023b19:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023b1f:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023b25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023b29:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023b2f:	83 c5 20             	add    ebp,0x20
c0023b32:	01 f8                	add    eax,edi
c0023b34:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023b37:	52                   	push   edx
c0023b38:	68 00 01 00 00       	push   0x100
c0023b3d:	6a 00                	push   0x0
c0023b3f:	50                   	push   eax
c0023b40:	e8 0b cc fd ff       	call   c0000750 <memset>
c0023b45:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023b49:	83 c4 10             	add    esp,0x10
c0023b4c:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023b52:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023b59:	01 f8                	add    eax,edi
c0023b5b:	81 c7 00 01 00 00    	add    edi,0x100
c0023b61:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023b64:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023b6a:	75 b3                	jne    c0023b1f <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023b6c:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023b70:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023b74:	83 c4 1c             	add    esp,0x1c
c0023b77:	5b                   	pop    ebx
c0023b78:	5e                   	pop    esi
c0023b79:	5f                   	pop    edi
c0023b7a:	5d                   	pop    ebp
c0023b7b:	e9 b0 fe ff ff       	jmp    c0023a30 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023b80 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023b80:	55                   	push   ebp
c0023b81:	57                   	push   edi
c0023b82:	56                   	push   esi
c0023b83:	53                   	push   ebx
c0023b84:	31 db                	xor    ebx,ebx
c0023b86:	83 ec 0c             	sub    esp,0xc
c0023b89:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023b8d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023b91:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023b94:	f7 c7 01 00 00 00    	test   edi,0x1
c0023b9a:	74 7a                	je     c0023c16 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023b9c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0023ba0:	89 d8                	mov    eax,ebx
c0023ba2:	c1 e0 07             	shl    eax,0x7
c0023ba5:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0023bac:	55                   	push   ebp
c0023bad:	56                   	push   esi
c0023bae:	e8 35 fe ff ff       	call   c00239e8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023bb3:	5a                   	pop    edx
c0023bb4:	83 f8 01             	cmp    eax,0x1
c0023bb7:	59                   	pop    ecx
c0023bb8:	75 21                	jne    c0023bdb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0023bba:	50                   	push   eax
c0023bbb:	53                   	push   ebx
c0023bbc:	55                   	push   ebp
c0023bbd:	56                   	push   esi
c0023bbe:	e8 b7 fe ff ff       	call   c0023a7a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023bc3:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023bca:	e8 cd b9 fe ff       	call   c000f59c <malloc>
c0023bcf:	89 c5                	mov    ebp,eax
c0023bd1:	89 04 24             	mov    DWORD PTR [esp],eax
c0023bd4:	e8 03 0d 00 00       	call   c00248dc <SATA::SATA()>
c0023bd9:	eb 24                	jmp    c0023bff <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0023bdb:	83 f8 04             	cmp    eax,0x4
c0023bde:	75 36                	jne    c0023c16 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023be0:	51                   	push   ecx
c0023be1:	53                   	push   ebx
c0023be2:	55                   	push   ebp
c0023be3:	56                   	push   esi
c0023be4:	e8 91 fe ff ff       	call   c0023a7a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023be9:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023bf0:	e8 a7 b9 fe ff       	call   c000f59c <malloc>
c0023bf5:	89 c5                	mov    ebp,eax
c0023bf7:	89 04 24             	mov    DWORD PTR [esp],eax
c0023bfa:	e8 53 10 00 00       	call   c0024c52 <SATAPI::SATAPI()>
c0023bff:	58                   	pop    eax
c0023c00:	5a                   	pop    edx
c0023c01:	55                   	push   ebp
c0023c02:	56                   	push   esi
c0023c03:	e8 fa fd fe ff       	call   c0013a02 <Device::addChild(Device*)>
c0023c08:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0023c0b:	56                   	push   esi
c0023c0c:	6a 00                	push   0x0
c0023c0e:	53                   	push   ebx
c0023c0f:	55                   	push   ebp
c0023c10:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0023c13:	83 c4 20             	add    esp,0x20
c0023c16:	d1 ef                	shr    edi,1
c0023c18:	43                   	inc    ebx
c0023c19:	83 fb 20             	cmp    ebx,0x20
c0023c1c:	0f 85 72 ff ff ff    	jne    c0023b94 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023c22:	83 c4 0c             	add    esp,0xc
c0023c25:	5b                   	pop    ebx
c0023c26:	5e                   	pop    esi
c0023c27:	5f                   	pop    edi
c0023c28:	5d                   	pop    ebp
c0023c29:	c3                   	ret    

c0023c2a <SATABus::open(int, int, void*)>:
c0023c2a:	83 ec 14             	sub    esp,0x14
c0023c2d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023c31:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023c37:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023c3d:	52                   	push   edx
c0023c3e:	50                   	push   eax
c0023c3f:	e8 3c ff ff ff       	call   c0023b80 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023c44:	31 c0                	xor    eax,eax
c0023c46:	83 c4 1c             	add    esp,0x1c
c0023c49:	c3                   	ret    

c0023c4a <ATA::close(int, int, void*)>:
c0023c4a:	83 ec 0c             	sub    esp,0xc
c0023c4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c51:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023c57:	85 c0                	test   eax,eax
c0023c59:	74 0c                	je     c0023c67 <ATA::close(int, int, void*)+0x1d>
c0023c5b:	83 ec 0c             	sub    esp,0xc
c0023c5e:	8b 10                	mov    edx,DWORD PTR [eax]
c0023c60:	50                   	push   eax
c0023c61:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023c64:	83 c4 10             	add    esp,0x10
c0023c67:	31 c0                	xor    eax,eax
c0023c69:	83 c4 0c             	add    esp,0xc
c0023c6c:	c3                   	ret    
c0023c6d:	90                   	nop

c0023c6e <ATA::powerSaving(PowerSavingLevel)>:
c0023c6e:	c3                   	ret    
c0023c6f:	90                   	nop

c0023c70 <ATA::ATA()>:
c0023c70:	83 ec 0c             	sub    esp,0xc
c0023c73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c77:	83 ec 04             	sub    esp,0x4
c0023c7a:	68 00 02 00 00       	push   0x200
c0023c7f:	68 19 c0 02 c0       	push   0xc002c019
c0023c84:	50                   	push   eax
c0023c85:	e8 ae 01 ff ff       	call   c0013e38 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023c8a:	83 c4 10             	add    esp,0x10
c0023c8d:	ba 9c bf 02 c0       	mov    edx,0xc002bf9c
c0023c92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c96:	89 10                	mov    DWORD PTR [eax],edx
c0023c98:	90                   	nop
c0023c99:	83 c4 0c             	add    esp,0xc
c0023c9c:	c3                   	ret    
c0023c9d:	90                   	nop

c0023c9e <ATA::flush(bool)>:
c0023c9e:	53                   	push   ebx
c0023c9f:	83 ec 08             	sub    esp,0x8
c0023ca2:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023ca7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023cab:	19 c0                	sbb    eax,eax
c0023cad:	83 e0 fd             	and    eax,0xfffffffd
c0023cb0:	05 ea 00 00 00       	add    eax,0xea
c0023cb5:	50                   	push   eax
c0023cb6:	6a 07                	push   0x7
c0023cb8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023cbf:	50                   	push   eax
c0023cc0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023cc6:	e8 53 f1 ff ff       	call   c0022e1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ccb:	83 c4 0c             	add    esp,0xc
c0023cce:	6a 00                	push   0x0
c0023cd0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023cd7:	50                   	push   eax
c0023cd8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023cde:	e8 dd fb ff ff       	call   c00238c0 <IDE::polling(unsigned char, unsigned int)>
c0023ce3:	83 c4 18             	add    esp,0x18
c0023ce6:	5b                   	pop    ebx
c0023ce7:	c3                   	ret    

c0023ce8 <ATA::readyForCommand()>:
c0023ce8:	56                   	push   esi
c0023ce9:	53                   	push   ebx
c0023cea:	31 db                	xor    ebx,ebx
c0023cec:	50                   	push   eax
c0023ced:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023cf1:	50                   	push   eax
c0023cf2:	6a 0c                	push   0xc
c0023cf4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023cfb:	50                   	push   eax
c0023cfc:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023d02:	e8 d7 f1 ff ff       	call   c0022ede <IDE::read(unsigned char, unsigned char)>
c0023d07:	83 c4 10             	add    esp,0x10
c0023d0a:	a8 88                	test   al,0x88
c0023d0c:	74 23                	je     c0023d31 <ATA::readyForCommand()+0x49>
c0023d0e:	43                   	inc    ebx
c0023d0f:	83 fb 63             	cmp    ebx,0x63
c0023d12:	7e dd                	jle    c0023cf1 <ATA::readyForCommand()+0x9>
c0023d14:	51                   	push   ecx
c0023d15:	51                   	push   ecx
c0023d16:	6a 00                	push   0x0
c0023d18:	68 40 42 0f 00       	push   0xf4240
c0023d1d:	e8 79 9e ff ff       	call   c001db9b <nanoSleep(unsigned long long)>
c0023d22:	83 c4 10             	add    esp,0x10
c0023d25:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023d2b:	75 c4                	jne    c0023cf1 <ATA::readyForCommand()+0x9>
c0023d2d:	31 c0                	xor    eax,eax
c0023d2f:	eb 02                	jmp    c0023d33 <ATA::readyForCommand()+0x4b>
c0023d31:	b0 01                	mov    al,0x1
c0023d33:	5a                   	pop    edx
c0023d34:	5b                   	pop    ebx
c0023d35:	5e                   	pop    esi
c0023d36:	c3                   	ret    
c0023d37:	90                   	nop

c0023d38 <ATA::access(unsigned long long, int, void*, bool)>:
c0023d38:	55                   	push   ebp
c0023d39:	57                   	push   edi
c0023d3a:	56                   	push   esi
c0023d3b:	53                   	push   ebx
c0023d3c:	83 ec 2c             	sub    esp,0x2c
c0023d3f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0023d43:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0023d47:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023d4b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023d4f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0023d53:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023d57:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023d5b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023d61:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023d65:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023d6b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023d6f:	c1 e0 06             	shl    eax,0x6
c0023d72:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0023d7a:	74 5d                	je     c0023dd9 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0023d7c:	89 fa                	mov    edx,edi
c0023d7e:	89 f0                	mov    eax,esi
c0023d80:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0023d84:	c1 ea 1c             	shr    edx,0x1c
c0023d87:	89 d1                	mov    ecx,edx
c0023d89:	09 c1                	or     ecx,eax
c0023d8b:	74 25                	je     c0023db2 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0023d8d:	31 ed                	xor    ebp,ebp
c0023d8f:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0023d96:	89 fa                	mov    edx,edi
c0023d98:	89 f0                	mov    eax,esi
c0023d9a:	0f ad d0             	shrd   eax,edx,cl
c0023d9d:	d3 ea                	shr    edx,cl
c0023d9f:	f6 c1 20             	test   cl,0x20
c0023da2:	74 02                	je     c0023da6 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0023da4:	89 d0                	mov    eax,edx
c0023da6:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0023daa:	45                   	inc    ebp
c0023dab:	83 fd 06             	cmp    ebp,0x6
c0023dae:	75 df                	jne    c0023d8f <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0023db0:	eb 76                	jmp    c0023e28 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0023db2:	89 f0                	mov    eax,esi
c0023db4:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0023db9:	89 fa                	mov    edx,edi
c0023dbb:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023dc2:	0f ac d0 10          	shrd   eax,edx,0x10
c0023dc6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023dcb:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0023dcf:	c1 ee 18             	shr    esi,0x18
c0023dd2:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0023dd7:	eb 56                	jmp    c0023e2f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023dd9:	6a 00                	push   0x0
c0023ddb:	6a 3f                	push   0x3f
c0023ddd:	57                   	push   edi
c0023dde:	56                   	push   esi
c0023ddf:	e8 20 29 00 00       	call   c0026704 <__umoddi3>
c0023de4:	83 c4 10             	add    esp,0x10
c0023de7:	40                   	inc    eax
c0023de8:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0023dec:	6a 00                	push   0x0
c0023dee:	68 f0 03 00 00       	push   0x3f0
c0023df3:	57                   	push   edi
c0023df4:	56                   	push   esi
c0023df5:	e8 0a 28 00 00       	call   c0026604 <__udivdi3>
c0023dfa:	83 c4 10             	add    esp,0x10
c0023dfd:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0023e02:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023e09:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023e0e:	6a 00                	push   0x0
c0023e10:	6a 3f                	push   0x3f
c0023e12:	57                   	push   edi
c0023e13:	56                   	push   esi
c0023e14:	e8 eb 27 00 00       	call   c0026604 <__udivdi3>
c0023e19:	83 c4 10             	add    esp,0x10
c0023e1c:	89 c6                	mov    esi,eax
c0023e1e:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0023e23:	83 e6 0f             	and    esi,0xf
c0023e26:	eb 07                	jmp    c0023e2f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023e28:	31 f6                	xor    esi,esi
c0023e2a:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0023e2f:	bf 01 00 00 00       	mov    edi,0x1
c0023e34:	50                   	push   eax
c0023e35:	6a 00                	push   0x0
c0023e37:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e3e:	50                   	push   eax
c0023e3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023e43:	e8 e2 f1 ff ff       	call   c002302a <IDE::enableIRQs(unsigned char, bool)>
c0023e48:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023e4b:	e8 98 fe ff ff       	call   c0023ce8 <ATA::readyForCommand()>
c0023e50:	83 c4 10             	add    esp,0x10
c0023e53:	84 c0                	test   al,al
c0023e55:	0f 84 5a 02 00 00    	je     c00240b5 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0023e5b:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0023e61:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023e67:	c1 e0 04             	shl    eax,0x4
c0023e6a:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0023e71:	09 c6                	or     esi,eax
c0023e73:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0023e78:	75 05                	jne    c0023e7f <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0023e7a:	83 ce a0             	or     esi,0xffffffa0
c0023e7d:	eb 03                	jmp    c0023e82 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0023e7f:	83 ce e0             	or     esi,0xffffffe0
c0023e82:	89 f0                	mov    eax,esi
c0023e84:	0f b6 f0             	movzx  esi,al
c0023e87:	56                   	push   esi
c0023e88:	6a 06                	push   0x6
c0023e8a:	51                   	push   ecx
c0023e8b:	52                   	push   edx
c0023e8c:	e8 8d ef ff ff       	call   c0022e1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e91:	83 c4 10             	add    esp,0x10
c0023e94:	6a 00                	push   0x0
c0023e96:	6a 01                	push   0x1
c0023e98:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e9f:	50                   	push   eax
c0023ea0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ea6:	e8 73 ef ff ff       	call   c0022e1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023eab:	83 c4 10             	add    esp,0x10
c0023eae:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023eb3:	75 6e                	jne    c0023f23 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0023eb5:	6a 00                	push   0x0
c0023eb7:	6a 08                	push   0x8
c0023eb9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ec0:	50                   	push   eax
c0023ec1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ec7:	e8 52 ef ff ff       	call   c0022e1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ecc:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0023ed1:	50                   	push   eax
c0023ed2:	6a 09                	push   0x9
c0023ed4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023edb:	50                   	push   eax
c0023edc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ee2:	e8 37 ef ff ff       	call   c0022e1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ee7:	83 c4 20             	add    esp,0x20
c0023eea:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0023eef:	50                   	push   eax
c0023ef0:	6a 0a                	push   0xa
c0023ef2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ef9:	50                   	push   eax
c0023efa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f00:	e8 19 ef ff ff       	call   c0022e1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f05:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0023f0a:	50                   	push   eax
c0023f0b:	6a 0b                	push   0xb
c0023f0d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f14:	50                   	push   eax
c0023f15:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f1b:	e8 fe ee ff ff       	call   c0022e1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f20:	83 c4 20             	add    esp,0x20
c0023f23:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0023f28:	50                   	push   eax
c0023f29:	6a 02                	push   0x2
c0023f2b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f32:	50                   	push   eax
c0023f33:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f39:	e8 e0 ee ff ff       	call   c0022e1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f3e:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0023f43:	50                   	push   eax
c0023f44:	6a 03                	push   0x3
c0023f46:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f4d:	50                   	push   eax
c0023f4e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f54:	e8 c5 ee ff ff       	call   c0022e1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f59:	83 c4 20             	add    esp,0x20
c0023f5c:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0023f61:	50                   	push   eax
c0023f62:	6a 04                	push   0x4
c0023f64:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f6b:	50                   	push   eax
c0023f6c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f72:	e8 a7 ee ff ff       	call   c0022e1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f77:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023f7c:	50                   	push   eax
c0023f7d:	6a 05                	push   0x5
c0023f7f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f86:	50                   	push   eax
c0023f87:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f8d:	e8 8c ee ff ff       	call   c0022e1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f92:	83 c4 20             	add    esp,0x20
c0023f95:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023f9a:	0f 94 c0             	sete   al
c0023f9d:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0023fa2:	74 09                	je     c0023fad <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0023fa4:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0023fab:	eb 07                	jmp    c0023fb4 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0023fad:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0023fb4:	0f b6 c0             	movzx  eax,al
c0023fb7:	50                   	push   eax
c0023fb8:	6a 07                	push   0x7
c0023fba:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fc1:	50                   	push   eax
c0023fc2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fc8:	e8 51 ee ff ff       	call   c0022e1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fcd:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0023fd1:	83 c4 10             	add    esp,0x10
c0023fd4:	85 f6                	test   esi,esi
c0023fd6:	0f 84 ba 00 00 00    	je     c0024096 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0023fdc:	50                   	push   eax
c0023fdd:	6a 01                	push   0x1
c0023fdf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fe6:	50                   	push   eax
c0023fe7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fed:	e8 ce f8 ff ff       	call   c00238c0 <IDE::polling(unsigned char, unsigned int)>
c0023ff2:	83 c4 10             	add    esp,0x10
c0023ff5:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0023ffb:	84 c0                	test   al,al
c0023ffd:	74 2c                	je     c002402b <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0023fff:	0f b6 f8             	movzx  edi,al
c0024002:	0f b6 d2             	movzx  edx,dl
c0024005:	57                   	push   edi
c0024006:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c002400d:	50                   	push   eax
c002400e:	52                   	push   edx
c002400f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024015:	e8 f6 f7 ff ff       	call   c0023810 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002401a:	c7 04 24 74 bf 02 c0 	mov    DWORD PTR [esp],0xc002bf74
c0024021:	e8 a3 e5 fe ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c0024026:	e9 87 00 00 00       	jmp    c00240b2 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c002402b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024030:	74 33                	je     c0024065 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024032:	31 ed                	xor    ebp,ebp
c0024034:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024038:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c002403c:	50                   	push   eax
c002403d:	50                   	push   eax
c002403e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024045:	50                   	push   eax
c0024046:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002404c:	e8 bb ed ff ff       	call   c0022e0c <IDE::getBase(unsigned char)>
c0024051:	89 c2                	mov    edx,eax
c0024053:	89 f8                	mov    eax,edi
c0024055:	66 ef                	out    dx,ax
c0024057:	45                   	inc    ebp
c0024058:	83 c4 10             	add    esp,0x10
c002405b:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024061:	75 d1                	jne    c0024034 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024063:	eb 23                	jmp    c0024088 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024065:	0f b6 d2             	movzx  edx,dl
c0024068:	51                   	push   ecx
c0024069:	51                   	push   ecx
c002406a:	52                   	push   edx
c002406b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024071:	e8 96 ed ff ff       	call   c0022e0c <IDE::getBase(unsigned char)>
c0024076:	b9 00 01 00 00       	mov    ecx,0x100
c002407b:	89 c2                	mov    edx,eax
c002407d:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024081:	fc                   	cld    
c0024082:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024085:	83 c4 10             	add    esp,0x10
c0024088:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024090:	4e                   	dec    esi
c0024091:	e9 3e ff ff ff       	jmp    c0023fd4 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024096:	31 ff                	xor    edi,edi
c0024098:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002409d:	74 16                	je     c00240b5 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c002409f:	50                   	push   eax
c00240a0:	50                   	push   eax
c00240a1:	31 c0                	xor    eax,eax
c00240a3:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00240a8:	0f 94 c0             	sete   al
c00240ab:	50                   	push   eax
c00240ac:	53                   	push   ebx
c00240ad:	e8 ec fb ff ff       	call   c0023c9e <ATA::flush(bool)>
c00240b2:	83 c4 10             	add    esp,0x10
c00240b5:	83 c4 2c             	add    esp,0x2c
c00240b8:	89 f8                	mov    eax,edi
c00240ba:	5b                   	pop    ebx
c00240bb:	5e                   	pop    esi
c00240bc:	5f                   	pop    edi
c00240bd:	5d                   	pop    ebp
c00240be:	c3                   	ret    
c00240bf:	90                   	nop

c00240c0 <ATA::read(unsigned long long, int, void*)>:
c00240c0:	57                   	push   edi
c00240c1:	b8 04 00 00 00       	mov    eax,0x4
c00240c6:	56                   	push   esi
c00240c7:	53                   	push   ebx
c00240c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00240cc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00240d0:	8d 7a ff             	lea    edi,[edx-0x1]
c00240d3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00240d7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00240db:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00240e1:	77 25                	ja     c0024108 <ATA::read(unsigned long long, int, void*)+0x48>
c00240e3:	b8 06 00 00 00       	mov    eax,0x6
c00240e8:	85 f6                	test   esi,esi
c00240ea:	74 1c                	je     c0024108 <ATA::read(unsigned long long, int, void*)+0x48>
c00240ec:	50                   	push   eax
c00240ed:	50                   	push   eax
c00240ee:	6a 00                	push   0x0
c00240f0:	56                   	push   esi
c00240f1:	52                   	push   edx
c00240f2:	53                   	push   ebx
c00240f3:	51                   	push   ecx
c00240f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00240f8:	e8 3b fc ff ff       	call   c0023d38 <ATA::access(unsigned long long, int, void*, bool)>
c00240fd:	83 c4 20             	add    esp,0x20
c0024100:	85 c0                	test   eax,eax
c0024102:	0f 95 c0             	setne  al
c0024105:	0f b6 c0             	movzx  eax,al
c0024108:	5b                   	pop    ebx
c0024109:	5e                   	pop    esi
c002410a:	5f                   	pop    edi
c002410b:	c3                   	ret    

c002410c <ATA::write(unsigned long long, int, void*)>:
c002410c:	57                   	push   edi
c002410d:	b8 04 00 00 00       	mov    eax,0x4
c0024112:	56                   	push   esi
c0024113:	53                   	push   ebx
c0024114:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024118:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002411c:	8d 7a ff             	lea    edi,[edx-0x1]
c002411f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024123:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024127:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002412d:	77 25                	ja     c0024154 <ATA::write(unsigned long long, int, void*)+0x48>
c002412f:	b8 06 00 00 00       	mov    eax,0x6
c0024134:	85 f6                	test   esi,esi
c0024136:	74 1c                	je     c0024154 <ATA::write(unsigned long long, int, void*)+0x48>
c0024138:	50                   	push   eax
c0024139:	50                   	push   eax
c002413a:	6a 01                	push   0x1
c002413c:	56                   	push   esi
c002413d:	52                   	push   edx
c002413e:	53                   	push   ebx
c002413f:	51                   	push   ecx
c0024140:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024144:	e8 ef fb ff ff       	call   c0023d38 <ATA::access(unsigned long long, int, void*, bool)>
c0024149:	83 c4 20             	add    esp,0x20
c002414c:	85 c0                	test   eax,eax
c002414e:	0f 95 c0             	setne  al
c0024151:	0f b6 c0             	movzx  eax,al
c0024154:	5b                   	pop    ebx
c0024155:	5e                   	pop    esi
c0024156:	5f                   	pop    edi
c0024157:	c3                   	ret    

c0024158 <ATA::detectCHS()>:
c0024158:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002415c:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024162:	c1 e0 06             	shl    eax,0x6
c0024165:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002416b:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024175:	c7 44 24 04 7f bf 02 c0 	mov    DWORD PTR [esp+0x4],0xc002bf7f
c002417d:	e9 b3 5b ff ff       	jmp    c0019d35 <Krnl::panic(char const*)>

c0024182 <ATA::open(int, int, void*)>:
c0024182:	53                   	push   ebx
c0024183:	83 ec 08             	sub    esp,0x8
c0024186:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002418a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002418e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024192:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024198:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002419e:	c1 e0 06             	shl    eax,0x6
c00241a1:	01 d0                	add    eax,edx
c00241a3:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00241aa:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00241b0:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00241b7:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00241c1:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00241c7:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00241ce:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00241d5:	75 0c                	jne    c00241e3 <ATA::open(int, int, void*)+0x61>
c00241d7:	83 ec 0c             	sub    esp,0xc
c00241da:	53                   	push   ebx
c00241db:	e8 78 ff ff ff       	call   c0024158 <ATA::detectCHS()>
c00241e0:	83 c4 10             	add    esp,0x10
c00241e3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00241e9:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00241ef:	c1 e0 06             	shl    eax,0x6
c00241f2:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00241f9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024203:	d1 e8                	shr    eax,1
c0024205:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002420b:	6a 04                	push   0x4
c002420d:	6a 0c                	push   0xc
c002420f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024216:	50                   	push   eax
c0024217:	52                   	push   edx
c0024218:	e8 01 ec ff ff       	call   c0022e1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002421d:	90                   	nop
c002421e:	90                   	nop
c002421f:	6a 00                	push   0x0
c0024221:	6a 0c                	push   0xc
c0024223:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002422a:	50                   	push   eax
c002422b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024231:	e8 e8 eb ff ff       	call   c0022e1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024236:	83 c4 14             	add    esp,0x14
c0024239:	53                   	push   ebx
c002423a:	e8 61 fc fe ff       	call   c0013ea0 <PhysicalDisk::startCache()>
c002423f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024242:	e8 db 1e ff ff       	call   c0016122 <createPartitionsForDisk(PhysicalDisk*)>
c0024247:	31 c0                	xor    eax,eax
c0024249:	83 c4 18             	add    esp,0x18
c002424c:	5b                   	pop    ebx
c002424d:	c3                   	ret    

c002424e <ATAPI::write(unsigned long long, int, void*)>:
c002424e:	b8 03 00 00 00       	mov    eax,0x3
c0024253:	c3                   	ret    

c0024254 <ATAPI::close(int, int, void*)>:
c0024254:	83 ec 0c             	sub    esp,0xc
c0024257:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002425b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024261:	85 c0                	test   eax,eax
c0024263:	74 0c                	je     c0024271 <ATAPI::close(int, int, void*)+0x1d>
c0024265:	83 ec 0c             	sub    esp,0xc
c0024268:	8b 10                	mov    edx,DWORD PTR [eax]
c002426a:	50                   	push   eax
c002426b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002426e:	83 c4 10             	add    esp,0x10
c0024271:	31 c0                	xor    eax,eax
c0024273:	83 c4 0c             	add    esp,0xc
c0024276:	c3                   	ret    
c0024277:	90                   	nop

c0024278 <ATAPI::ATAPI()>:
c0024278:	83 ec 0c             	sub    esp,0xc
c002427b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002427f:	83 ec 04             	sub    esp,0x4
c0024282:	68 00 08 00 00       	push   0x800
c0024287:	68 b9 c0 02 c0       	push   0xc002c0b9
c002428c:	50                   	push   eax
c002428d:	e8 a6 fb fe ff       	call   c0013e38 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024292:	83 c4 10             	add    esp,0x10
c0024295:	ba d4 bf 02 c0       	mov    edx,0xc002bfd4
c002429a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002429e:	89 10                	mov    DWORD PTR [eax],edx
c00242a0:	90                   	nop
c00242a1:	83 c4 0c             	add    esp,0xc
c00242a4:	c3                   	ret    
c00242a5:	90                   	nop

c00242a6 <ATAPI::readyForCommand()>:
c00242a6:	56                   	push   esi
c00242a7:	53                   	push   ebx
c00242a8:	31 db                	xor    ebx,ebx
c00242aa:	50                   	push   eax
c00242ab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00242af:	50                   	push   eax
c00242b0:	6a 0c                	push   0xc
c00242b2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00242b9:	50                   	push   eax
c00242ba:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00242c0:	e8 19 ec ff ff       	call   c0022ede <IDE::read(unsigned char, unsigned char)>
c00242c5:	83 c4 10             	add    esp,0x10
c00242c8:	a8 88                	test   al,0x88
c00242ca:	74 23                	je     c00242ef <ATAPI::readyForCommand()+0x49>
c00242cc:	43                   	inc    ebx
c00242cd:	83 fb 63             	cmp    ebx,0x63
c00242d0:	7e dd                	jle    c00242af <ATAPI::readyForCommand()+0x9>
c00242d2:	51                   	push   ecx
c00242d3:	51                   	push   ecx
c00242d4:	6a 00                	push   0x0
c00242d6:	68 40 42 0f 00       	push   0xf4240
c00242db:	e8 bb 98 ff ff       	call   c001db9b <nanoSleep(unsigned long long)>
c00242e0:	83 c4 10             	add    esp,0x10
c00242e3:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00242e9:	75 c4                	jne    c00242af <ATAPI::readyForCommand()+0x9>
c00242eb:	31 c0                	xor    eax,eax
c00242ed:	eb 02                	jmp    c00242f1 <ATAPI::readyForCommand()+0x4b>
c00242ef:	b0 01                	mov    al,0x1
c00242f1:	5a                   	pop    edx
c00242f2:	5b                   	pop    ebx
c00242f3:	5e                   	pop    esi
c00242f4:	c3                   	ret    
c00242f5:	90                   	nop

c00242f6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00242f6:	55                   	push   ebp
c00242f7:	57                   	push   edi
c00242f8:	56                   	push   esi
c00242f9:	53                   	push   ebx
c00242fa:	83 ec 20             	sub    esp,0x20
c00242fd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024301:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024305:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024309:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002430d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024311:	6a 01                	push   0x1
c0024313:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002431a:	50                   	push   eax
c002431b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024321:	e8 04 ed ff ff       	call   c002302a <IDE::enableIRQs(unsigned char, bool)>
c0024326:	5e                   	pop    esi
c0024327:	58                   	pop    eax
c0024328:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002432f:	50                   	push   eax
c0024330:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024336:	e8 bd ea ff ff       	call   c0022df8 <IDE::prepareInterrupt(unsigned char)>
c002433b:	89 3c 24             	mov    DWORD PTR [esp],edi
c002433e:	e8 63 ff ff ff       	call   c00242a6 <ATAPI::readyForCommand()>
c0024343:	83 c4 10             	add    esp,0x10
c0024346:	84 c0                	test   al,al
c0024348:	75 0a                	jne    c0024354 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c002434a:	bb 01 00 00 00       	mov    ebx,0x1
c002434f:	e9 57 02 00 00       	jmp    c00245ab <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024354:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c002435a:	c1 e0 04             	shl    eax,0x4
c002435d:	0f b6 c0             	movzx  eax,al
c0024360:	50                   	push   eax
c0024361:	6a 06                	push   0x6
c0024363:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002436a:	50                   	push   eax
c002436b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024371:	e8 a8 ea ff ff       	call   c0022e1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024376:	6a 00                	push   0x0
c0024378:	6a 01                	push   0x1
c002437a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024381:	50                   	push   eax
c0024382:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024388:	e8 91 ea ff ff       	call   c0022e1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002438d:	83 c4 20             	add    esp,0x20
c0024390:	0f b6 c3             	movzx  eax,bl
c0024393:	0f b6 df             	movzx  ebx,bh
c0024396:	50                   	push   eax
c0024397:	6a 04                	push   0x4
c0024399:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00243a0:	50                   	push   eax
c00243a1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00243a7:	e8 72 ea ff ff       	call   c0022e1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243ac:	53                   	push   ebx
c00243ad:	6a 05                	push   0x5
c00243af:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00243b6:	50                   	push   eax
c00243b7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00243bd:	e8 5c ea ff ff       	call   c0022e1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243c2:	83 c4 20             	add    esp,0x20
c00243c5:	68 a0 00 00 00       	push   0xa0
c00243ca:	6a 07                	push   0x7
c00243cc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00243d3:	50                   	push   eax
c00243d4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00243da:	e8 3f ea ff ff       	call   c0022e1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243df:	83 c4 0c             	add    esp,0xc
c00243e2:	6a 01                	push   0x1
c00243e4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00243eb:	50                   	push   eax
c00243ec:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00243f2:	e8 c9 f4 ff ff       	call   c00238c0 <IDE::polling(unsigned char, unsigned int)>
c00243f7:	83 c4 10             	add    esp,0x10
c00243fa:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024400:	84 c0                	test   al,al
c0024402:	74 23                	je     c0024427 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024404:	0f b6 d8             	movzx  ebx,al
c0024407:	0f b6 d2             	movzx  edx,dl
c002440a:	53                   	push   ebx
c002440b:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024412:	50                   	push   eax
c0024413:	52                   	push   edx
c0024414:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002441a:	e8 f1 f3 ff ff       	call   c0023810 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002441f:	83 c4 10             	add    esp,0x10
c0024422:	e9 84 01 00 00       	jmp    c00245ab <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024427:	0f b6 d2             	movzx  edx,dl
c002442a:	53                   	push   ebx
c002442b:	53                   	push   ebx
c002442c:	52                   	push   edx
c002442d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024433:	e8 d4 e9 ff ff       	call   c0022e0c <IDE::getBase(unsigned char)>
c0024438:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002443c:	b9 06 00 00 00       	mov    ecx,0x6
c0024441:	89 c2                	mov    edx,eax
c0024443:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024446:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002444a:	83 c4 10             	add    esp,0x10
c002444d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024453:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002445a:	85 db                	test   ebx,ebx
c002445c:	0f 84 ec 00 00 00    	je     c002454e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024462:	51                   	push   ecx
c0024463:	51                   	push   ecx
c0024464:	52                   	push   edx
c0024465:	50                   	push   eax
c0024466:	e8 21 eb ff ff       	call   c0022f8c <IDE::waitInterrupt(unsigned char)>
c002446b:	83 c4 10             	add    esp,0x10
c002446e:	84 c0                	test   al,al
c0024470:	0f 84 d4 fe ff ff    	je     c002434a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024476:	56                   	push   esi
c0024477:	56                   	push   esi
c0024478:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002447f:	50                   	push   eax
c0024480:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024486:	e8 6d e9 ff ff       	call   c0022df8 <IDE::prepareInterrupt(unsigned char)>
c002448b:	83 c4 0c             	add    esp,0xc
c002448e:	6a 04                	push   0x4
c0024490:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024497:	50                   	push   eax
c0024498:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002449e:	e8 3b ea ff ff       	call   c0022ede <IDE::read(unsigned char, unsigned char)>
c00244a3:	83 c4 0c             	add    esp,0xc
c00244a6:	89 c6                	mov    esi,eax
c00244a8:	6a 05                	push   0x5
c00244aa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244b1:	50                   	push   eax
c00244b2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244b8:	e8 21 ea ff ff       	call   c0022ede <IDE::read(unsigned char, unsigned char)>
c00244bd:	89 f1                	mov    ecx,esi
c00244bf:	0f b6 c0             	movzx  eax,al
c00244c2:	0f b6 f1             	movzx  esi,cl
c00244c5:	c1 e0 08             	shl    eax,0x8
c00244c8:	09 c6                	or     esi,eax
c00244ca:	d1 fe                	sar    esi,1
c00244cc:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00244d0:	83 c4 10             	add    esp,0x10
c00244d3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00244d8:	74 41                	je     c002451b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00244da:	31 c9                	xor    ecx,ecx
c00244dc:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00244e2:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00244e9:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00244ed:	75 0a                	jne    c00244f9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00244ef:	01 c9                	add    ecx,ecx
c00244f1:	01 cd                	add    ebp,ecx
c00244f3:	4b                   	dec    ebx
c00244f4:	e9 54 ff ff ff       	jmp    c002444d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00244f9:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00244fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0024502:	51                   	push   ecx
c0024503:	51                   	push   ecx
c0024504:	52                   	push   edx
c0024505:	50                   	push   eax
c0024506:	e8 01 e9 ff ff       	call   c0022e0c <IDE::getBase(unsigned char)>
c002450b:	89 c2                	mov    edx,eax
c002450d:	89 f0                	mov    eax,esi
c002450f:	66 ef                	out    dx,ax
c0024511:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024515:	83 c4 10             	add    esp,0x10
c0024518:	41                   	inc    ecx
c0024519:	eb c1                	jmp    c00244dc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c002451b:	31 f6                	xor    esi,esi
c002451d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024523:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002452a:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c002452e:	75 06                	jne    c0024536 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024530:	01 f6                	add    esi,esi
c0024532:	01 f5                	add    ebp,esi
c0024534:	eb bd                	jmp    c00244f3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0024536:	51                   	push   ecx
c0024537:	51                   	push   ecx
c0024538:	52                   	push   edx
c0024539:	50                   	push   eax
c002453a:	e8 cd e8 ff ff       	call   c0022e0c <IDE::getBase(unsigned char)>
c002453f:	89 c2                	mov    edx,eax
c0024541:	66 ed                	in     ax,dx
c0024543:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0024548:	83 c4 10             	add    esp,0x10
c002454b:	46                   	inc    esi
c002454c:	eb cf                	jmp    c002451d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c002454e:	51                   	push   ecx
c002454f:	51                   	push   ecx
c0024550:	52                   	push   edx
c0024551:	50                   	push   eax
c0024552:	e8 35 ea ff ff       	call   c0022f8c <IDE::waitInterrupt(unsigned char)>
c0024557:	83 c4 10             	add    esp,0x10
c002455a:	84 c0                	test   al,al
c002455c:	0f 84 e8 fd ff ff    	je     c002434a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024562:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024567:	52                   	push   edx
c0024568:	52                   	push   edx
c0024569:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024570:	50                   	push   eax
c0024571:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024577:	e8 7c e8 ff ff       	call   c0022df8 <IDE::prepareInterrupt(unsigned char)>
c002457c:	83 c4 10             	add    esp,0x10
c002457f:	50                   	push   eax
c0024580:	50                   	push   eax
c0024581:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024588:	50                   	push   eax
c0024589:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002458f:	e8 78 e8 ff ff       	call   c0022e0c <IDE::getBase(unsigned char)>
c0024594:	8d 50 07             	lea    edx,[eax+0x7]
c0024597:	ec                   	in     al,dx
c0024598:	83 c4 10             	add    esp,0x10
c002459b:	a8 88                	test   al,0x88
c002459d:	74 0a                	je     c00245a9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c002459f:	4b                   	dec    ebx
c00245a0:	75 dd                	jne    c002457f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00245a2:	bb 02 00 00 00       	mov    ebx,0x2
c00245a7:	eb 02                	jmp    c00245ab <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00245a9:	31 db                	xor    ebx,ebx
c00245ab:	83 c4 1c             	add    esp,0x1c
c00245ae:	89 d8                	mov    eax,ebx
c00245b0:	5b                   	pop    ebx
c00245b1:	5e                   	pop    esi
c00245b2:	5f                   	pop    edi
c00245b3:	5d                   	pop    ebp
c00245b4:	c3                   	ret    
c00245b5:	90                   	nop

c00245b6 <ATAPI::diskRemoved()>:
c00245b6:	83 ec 18             	sub    esp,0x18
c00245b9:	68 c5 c0 02 c0       	push   0xc002c0c5
c00245be:	e8 06 e0 fe ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c00245c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00245c7:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c00245ce:	83 c4 1c             	add    esp,0x1c
c00245d1:	c3                   	ret    

c00245d2 <ATAPI::eject()>:
c00245d2:	57                   	push   edi
c00245d3:	b9 03 00 00 00       	mov    ecx,0x3
c00245d8:	53                   	push   ebx
c00245d9:	83 ec 14             	sub    esp,0x14
c00245dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00245e0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00245e4:	fc                   	cld    
c00245e5:	31 c0                	xor    eax,eax
c00245e7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00245e9:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00245ee:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00245f3:	50                   	push   eax
c00245f4:	50                   	push   eax
c00245f5:	6a 00                	push   0x0
c00245f7:	6a 00                	push   0x0
c00245f9:	6a 00                	push   0x0
c00245fb:	6a 02                	push   0x2
c00245fd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024601:	50                   	push   eax
c0024602:	53                   	push   ebx
c0024603:	e8 ee fc ff ff       	call   c00242f6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024608:	83 c4 14             	add    esp,0x14
c002460b:	53                   	push   ebx
c002460c:	e8 a5 ff ff ff       	call   c00245b6 <ATAPI::diskRemoved()>
c0024611:	83 c4 24             	add    esp,0x24
c0024614:	31 c0                	xor    eax,eax
c0024616:	5b                   	pop    ebx
c0024617:	5f                   	pop    edi
c0024618:	c3                   	ret    
c0024619:	90                   	nop

c002461a <ATAPI::diskInserted()>:
c002461a:	53                   	push   ebx
c002461b:	83 ec 14             	sub    esp,0x14
c002461e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024622:	68 dc c0 02 c0       	push   0xc002c0dc
c0024627:	e8 9d df fe ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c002462c:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024633:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024636:	e8 65 f8 fe ff       	call   c0013ea0 <PhysicalDisk::startCache()>
c002463b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002463f:	83 c4 18             	add    esp,0x18
c0024642:	5b                   	pop    ebx
c0024643:	e9 da 1a ff ff       	jmp    c0016122 <createPartitionsForDisk(PhysicalDisk*)>

c0024648 <ATAPI::detectMedia()>:
c0024648:	56                   	push   esi
c0024649:	53                   	push   ebx
c002464a:	83 ec 28             	sub    esp,0x28
c002464d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024651:	6a 0c                	push   0xc
c0024653:	6a 00                	push   0x0
c0024655:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024659:	56                   	push   esi
c002465a:	e8 f1 c0 fd ff       	call   c0000750 <memset>
c002465f:	58                   	pop    eax
c0024660:	5a                   	pop    edx
c0024661:	6a 00                	push   0x0
c0024663:	6a 00                	push   0x0
c0024665:	6a 00                	push   0x0
c0024667:	6a 00                	push   0x0
c0024669:	56                   	push   esi
c002466a:	53                   	push   ebx
c002466b:	e8 86 fc ff ff       	call   c00242f6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024670:	83 c4 1c             	add    esp,0x1c
c0024673:	6a 0c                	push   0xc
c0024675:	6a 00                	push   0x0
c0024677:	56                   	push   esi
c0024678:	e8 d3 c0 fd ff       	call   c0000750 <memset>
c002467d:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024682:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024687:	59                   	pop    ecx
c0024688:	58                   	pop    eax
c0024689:	6a 01                	push   0x1
c002468b:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002468f:	50                   	push   eax
c0024690:	6a 00                	push   0x0
c0024692:	6a 12                	push   0x12
c0024694:	56                   	push   esi
c0024695:	53                   	push   ebx
c0024696:	e8 5b fc ff ff       	call   c00242f6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002469b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002469f:	83 c4 20             	add    esp,0x20
c00246a2:	83 e0 7f             	and    eax,0x7f
c00246a5:	3c 70                	cmp    al,0x70
c00246a7:	74 15                	je     c00246be <ATAPI::detectMedia()+0x76>
c00246a9:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00246b0:	75 0c                	jne    c00246be <ATAPI::detectMedia()+0x76>
c00246b2:	83 ec 0c             	sub    esp,0xc
c00246b5:	53                   	push   ebx
c00246b6:	e8 5f ff ff ff       	call   c002461a <ATAPI::diskInserted()>
c00246bb:	83 c4 10             	add    esp,0x10
c00246be:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00246c2:	83 e0 0f             	and    eax,0xf
c00246c5:	3c 02                	cmp    al,0x2
c00246c7:	75 1b                	jne    c00246e4 <ATAPI::detectMedia()+0x9c>
c00246c9:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00246ce:	75 2d                	jne    c00246fd <ATAPI::detectMedia()+0xb5>
c00246d0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00246d7:	74 24                	je     c00246fd <ATAPI::detectMedia()+0xb5>
c00246d9:	83 ec 0c             	sub    esp,0xc
c00246dc:	53                   	push   ebx
c00246dd:	e8 d4 fe ff ff       	call   c00245b6 <ATAPI::diskRemoved()>
c00246e2:	eb 16                	jmp    c00246fa <ATAPI::detectMedia()+0xb2>
c00246e4:	84 c0                	test   al,al
c00246e6:	75 15                	jne    c00246fd <ATAPI::detectMedia()+0xb5>
c00246e8:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00246ef:	75 0c                	jne    c00246fd <ATAPI::detectMedia()+0xb5>
c00246f1:	83 ec 0c             	sub    esp,0xc
c00246f4:	53                   	push   ebx
c00246f5:	e8 20 ff ff ff       	call   c002461a <ATAPI::diskInserted()>
c00246fa:	83 c4 10             	add    esp,0x10
c00246fd:	83 c4 24             	add    esp,0x24
c0024700:	5b                   	pop    ebx
c0024701:	5e                   	pop    esi
c0024702:	c3                   	ret    
c0024703:	90                   	nop

c0024704 <ATAPI::open(int, int, void*)>:
c0024704:	53                   	push   ebx
c0024705:	83 ec 08             	sub    esp,0x8
c0024708:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002470c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024710:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024714:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002471a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024720:	c1 e0 06             	shl    eax,0x6
c0024723:	01 d0                	add    eax,edx
c0024725:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c002472c:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024732:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024739:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024743:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024749:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024750:	6a 04                	push   0x4
c0024752:	6a 0c                	push   0xc
c0024754:	51                   	push   ecx
c0024755:	52                   	push   edx
c0024756:	e8 c3 e6 ff ff       	call   c0022e1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002475b:	90                   	nop
c002475c:	90                   	nop
c002475d:	6a 00                	push   0x0
c002475f:	6a 0c                	push   0xc
c0024761:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024768:	50                   	push   eax
c0024769:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002476f:	e8 aa e6 ff ff       	call   c0022e1e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024774:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002477b:	83 c4 14             	add    esp,0x14
c002477e:	53                   	push   ebx
c002477f:	e8 c4 fe ff ff       	call   c0024648 <ATAPI::detectMedia()>
c0024784:	31 c0                	xor    eax,eax
c0024786:	83 c4 18             	add    esp,0x18
c0024789:	5b                   	pop    ebx
c002478a:	c3                   	ret    
c002478b:	90                   	nop

c002478c <ATAPI::read(unsigned long long, int, void*)>:
c002478c:	55                   	push   ebp
c002478d:	57                   	push   edi
c002478e:	56                   	push   esi
c002478f:	53                   	push   ebx
c0024790:	83 ec 1c             	sub    esp,0x1c
c0024793:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024797:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002479b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002479f:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00247a6:	74 41                	je     c00247e9 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c00247a8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00247ac:	b9 03 00 00 00       	mov    ecx,0x3
c00247b1:	fc                   	cld    
c00247b2:	31 c0                	xor    eax,eax
c00247b4:	86 fb                	xchg   bl,bh
c00247b6:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00247b8:	c1 c3 10             	rol    ebx,0x10
c00247bb:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00247c0:	89 e8                	mov    eax,ebp
c00247c2:	86 fb                	xchg   bl,bh
c00247c4:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00247c8:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c00247cc:	50                   	push   eax
c00247cd:	50                   	push   eax
c00247ce:	55                   	push   ebp
c00247cf:	c1 e5 0b             	shl    ebp,0xb
c00247d2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00247d6:	6a 00                	push   0x0
c00247d8:	55                   	push   ebp
c00247d9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00247dd:	50                   	push   eax
c00247de:	56                   	push   esi
c00247df:	e8 12 fb ff ff       	call   c00242f6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00247e4:	83 c4 20             	add    esp,0x20
c00247e7:	eb 1a                	jmp    c0024803 <ATAPI::read(unsigned long long, int, void*)+0x77>
c00247e9:	83 ec 0c             	sub    esp,0xc
c00247ec:	56                   	push   esi
c00247ed:	e8 56 fe ff ff       	call   c0024648 <ATAPI::detectMedia()>
c00247f2:	83 c4 10             	add    esp,0x10
c00247f5:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00247fc:	75 aa                	jne    c00247a8 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c00247fe:	b8 02 00 00 00       	mov    eax,0x2
c0024803:	83 c4 1c             	add    esp,0x1c
c0024806:	5b                   	pop    ebx
c0024807:	5e                   	pop    esi
c0024808:	5f                   	pop    edi
c0024809:	5d                   	pop    ebp
c002480a:	c3                   	ret    
c002480b:	90                   	nop

c002480c <SATA::close(int, int, void*)>:
c002480c:	83 ec 0c             	sub    esp,0xc
c002480f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024813:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024819:	85 c0                	test   eax,eax
c002481b:	74 0c                	je     c0024829 <SATA::close(int, int, void*)+0x1d>
c002481d:	83 ec 0c             	sub    esp,0xc
c0024820:	8b 10                	mov    edx,DWORD PTR [eax]
c0024822:	50                   	push   eax
c0024823:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024826:	83 c4 10             	add    esp,0x10
c0024829:	31 c0                	xor    eax,eax
c002482b:	83 c4 0c             	add    esp,0xc
c002482e:	c3                   	ret    
c002482f:	90                   	nop

c0024830 <SATA::powerSaving(PowerSavingLevel)>:
c0024830:	c3                   	ret    
c0024831:	90                   	nop

c0024832 <SATA::open(int, int, void*)>:
c0024832:	56                   	push   esi
c0024833:	53                   	push   ebx
c0024834:	50                   	push   eax
c0024835:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024839:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002483d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024847:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002484d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024857:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002485b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024865:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002486b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024872:	e8 c9 b0 fe ff       	call   c000f940 <Phys::allocatePage()>
c0024877:	89 c6                	mov    esi,eax
c0024879:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002487f:	81 c6 00 10 00 00    	add    esi,0x1000
c0024885:	e8 b6 b0 fe ff       	call   c000f940 <Phys::allocatePage()>
c002488a:	39 c6                	cmp    esi,eax
c002488c:	74 10                	je     c002489e <SATA::open(int, int, void*)+0x6c>
c002488e:	83 ec 0c             	sub    esp,0xc
c0024891:	68 04 c0 02 c0       	push   0xc002c004
c0024896:	e8 9a 54 ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c002489b:	83 c4 10             	add    esp,0x10
c002489e:	83 ec 0c             	sub    esp,0xc
c00248a1:	6a 02                	push   0x2
c00248a3:	e8 27 c9 fe ff       	call   c00111cf <Virt::allocateKernelVirtualPages(int)>
c00248a8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00248ae:	6a 03                	push   0x3
c00248b0:	50                   	push   eax
c00248b1:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00248b7:	ff 35 70 d8 02 c0    	push   DWORD PTR ds:0xc002d870
c00248bd:	e8 ca d0 fe ff       	call   c001198c <VAS::mapPage(unsigned long, unsigned long, int)>
c00248c2:	83 c4 14             	add    esp,0x14
c00248c5:	53                   	push   ebx
c00248c6:	e8 d5 f5 fe ff       	call   c0013ea0 <PhysicalDisk::startCache()>
c00248cb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00248ce:	e8 4f 18 ff ff       	call   c0016122 <createPartitionsForDisk(PhysicalDisk*)>
c00248d3:	83 c4 14             	add    esp,0x14
c00248d6:	31 c0                	xor    eax,eax
c00248d8:	5b                   	pop    ebx
c00248d9:	5e                   	pop    esi
c00248da:	c3                   	ret    
c00248db:	90                   	nop

c00248dc <SATA::SATA()>:
c00248dc:	83 ec 0c             	sub    esp,0xc
c00248df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248e3:	83 ec 04             	sub    esp,0x4
c00248e6:	68 00 02 00 00       	push   0x200
c00248eb:	68 18 c0 02 c0       	push   0xc002c018
c00248f0:	50                   	push   eax
c00248f1:	e8 42 f5 fe ff       	call   c0013e38 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00248f6:	83 c4 10             	add    esp,0x10
c00248f9:	ba 88 c0 02 c0       	mov    edx,0xc002c088
c00248fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024902:	89 10                	mov    DWORD PTR [eax],edx
c0024904:	90                   	nop
c0024905:	83 c4 0c             	add    esp,0xc
c0024908:	c3                   	ret    
c0024909:	90                   	nop

c002490a <SATA::access(unsigned long long, int, void*, bool)>:
c002490a:	55                   	push   ebp
c002490b:	57                   	push   edi
c002490c:	56                   	push   esi
c002490d:	53                   	push   ebx
c002490e:	83 ec 2c             	sub    esp,0x2c
c0024911:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024915:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024919:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002491d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024921:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024925:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c002492a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002492e:	7e 10                	jle    c0024940 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024930:	83 ec 0c             	sub    esp,0xc
c0024933:	68 28 c0 02 c0       	push   0xc002c028
c0024938:	e8 f8 53 ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c002493d:	83 c4 10             	add    esp,0x10
c0024940:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024946:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c002494c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024952:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024956:	89 d0                	mov    eax,edx
c0024958:	c1 e0 07             	shl    eax,0x7
c002495b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002495f:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024969:	51                   	push   ecx
c002496a:	8d 42 02             	lea    eax,[edx+0x2]
c002496d:	51                   	push   ecx
c002496e:	c1 e0 07             	shl    eax,0x7
c0024971:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0024975:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024979:	50                   	push   eax
c002497a:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0024980:	e8 1b f0 ff ff       	call   c00239a0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024985:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024989:	83 c4 10             	add    esp,0x10
c002498c:	b8 01 00 00 00       	mov    eax,0x1
c0024991:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0024996:	0f 84 cb 01 00 00    	je     c0024b67 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c002499c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00249a0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00249a4:	c1 e0 09             	shl    eax,0x9
c00249a7:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00249ac:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00249b0:	74 0e                	je     c00249c0 <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c00249b2:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c00249b8:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00249bc:	89 c1                	mov    ecx,eax
c00249be:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00249c0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00249c4:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c00249ca:	8d 42 02             	lea    eax,[edx+0x2]
c00249cd:	c1 e0 07             	shl    eax,0x7
c00249d0:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00249d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00249d6:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00249dc:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00249e2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00249e6:	c1 e1 05             	shl    ecx,0x5
c00249e9:	01 c8                	add    eax,ecx
c00249eb:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00249ef:	83 e1 01             	and    ecx,0x1
c00249f2:	89 ce                	mov    esi,ecx
c00249f4:	8a 08                	mov    cl,BYTE PTR [eax]
c00249f6:	c1 e6 06             	shl    esi,0x6
c00249f9:	83 e1 bf             	and    ecx,0xffffffbf
c00249fc:	09 f1                	or     ecx,esi
c00249fe:	88 08                	mov    BYTE PTR [eax],cl
c0024a00:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024a02:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024a08:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024a0e:	89 08                	mov    DWORD PTR [eax],ecx
c0024a10:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0024a16:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0024a1c:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0024a22:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0024a25:	50                   	push   eax
c0024a26:	68 90 00 00 00       	push   0x90
c0024a2b:	6a 00                	push   0x0
c0024a2d:	56                   	push   esi
c0024a2e:	e8 1d bd fd ff       	call   c0000750 <memset>
c0024a33:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024a39:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0024a3d:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0024a43:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0024a47:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024a4b:	83 c4 10             	add    esp,0x10
c0024a4e:	48                   	dec    eax
c0024a4f:	25 ff ff 3f 00       	and    eax,0x3fffff
c0024a54:	89 c1                	mov    ecx,eax
c0024a56:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0024a5c:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024a61:	09 c8                	or     eax,ecx
c0024a63:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0024a69:	66 8b 06             	mov    ax,WORD PTR [esi]
c0024a6c:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0024a73:	66 25 00 7f          	and    ax,0x7f00
c0024a77:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024a7b:	66 0d 27 80          	or     ax,0x8027
c0024a7f:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0024a84:	66 89 06             	mov    WORD PTR [esi],ax
c0024a87:	19 c0                	sbb    eax,eax
c0024a89:	83 e0 f0             	and    eax,0xfffffff0
c0024a8c:	83 c0 35             	add    eax,0x35
c0024a8f:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0024a92:	89 e8                	mov    eax,ebp
c0024a94:	c1 e8 10             	shr    eax,0x10
c0024a97:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0024a9a:	89 e8                	mov    eax,ebp
c0024a9c:	c1 e8 18             	shr    eax,0x18
c0024a9f:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0024aa2:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0024aa6:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0024aa9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024aad:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0024ab0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024ab4:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0024ab8:	89 d6                	mov    esi,edx
c0024aba:	31 c0                	xor    eax,eax
c0024abc:	c1 e6 07             	shl    esi,0x7
c0024abf:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0024ac3:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0024ac9:	80 e1 88             	and    cl,0x88
c0024acc:	74 0a                	je     c0024ad8 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c0024ace:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024ad3:	74 0a                	je     c0024adf <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c0024ad5:	40                   	inc    eax
c0024ad6:	eb eb                	jmp    c0024ac3 <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c0024ad8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024add:	75 0a                	jne    c0024ae9 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0024adf:	83 ec 0c             	sub    esp,0xc
c0024ae2:	68 61 c0 02 c0       	push   0xc002c061
c0024ae7:	eb 56                	jmp    c0024b3f <SATA::access(unsigned long long, int, void*, bool)+0x235>
c0024ae9:	b8 01 00 00 00       	mov    eax,0x1
c0024aee:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024af2:	c1 e2 07             	shl    edx,0x7
c0024af5:	d3 e0                	shl    eax,cl
c0024af7:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0024afb:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0024b01:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0024b07:	85 c8                	test   eax,ecx
c0024b09:	74 20                	je     c0024b2b <SATA::access(unsigned long long, int, void*, bool)+0x221>
c0024b0b:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0024b11:	0f ba e1 1e          	bt     ecx,0x1e
c0024b15:	73 ea                	jae    c0024b01 <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c0024b17:	83 ec 0c             	sub    esp,0xc
c0024b1a:	68 6f c0 02 c0       	push   0xc002c06f
c0024b1f:	e8 11 52 ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c0024b24:	83 c4 10             	add    esp,0x10
c0024b27:	31 c0                	xor    eax,eax
c0024b29:	eb 3c                	jmp    c0024b67 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024b2b:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0024b31:	0f ba e0 1e          	bt     eax,0x1e
c0024b35:	73 17                	jae    c0024b4e <SATA::access(unsigned long long, int, void*, bool)+0x244>
c0024b37:	83 ec 0c             	sub    esp,0xc
c0024b3a:	68 6f c0 02 c0       	push   0xc002c06f
c0024b3f:	e8 f1 51 ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c0024b44:	83 c4 10             	add    esp,0x10
c0024b47:	b8 01 00 00 00       	mov    eax,0x1
c0024b4c:	eb 19                	jmp    c0024b67 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024b4e:	31 c0                	xor    eax,eax
c0024b50:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024b55:	75 10                	jne    c0024b67 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024b57:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0024b5d:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0024b61:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024b65:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024b67:	83 c4 2c             	add    esp,0x2c
c0024b6a:	5b                   	pop    ebx
c0024b6b:	5e                   	pop    esi
c0024b6c:	5f                   	pop    edi
c0024b6d:	5d                   	pop    ebp
c0024b6e:	c3                   	ret    
c0024b6f:	90                   	nop

c0024b70 <SATA::read(unsigned long long, int, void*)>:
c0024b70:	57                   	push   edi
c0024b71:	b8 04 00 00 00       	mov    eax,0x4
c0024b76:	56                   	push   esi
c0024b77:	53                   	push   ebx
c0024b78:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024b7c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024b80:	8d 7a ff             	lea    edi,[edx-0x1]
c0024b83:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024b87:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024b8b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024b91:	77 25                	ja     c0024bb8 <SATA::read(unsigned long long, int, void*)+0x48>
c0024b93:	b8 06 00 00 00       	mov    eax,0x6
c0024b98:	85 f6                	test   esi,esi
c0024b9a:	74 1c                	je     c0024bb8 <SATA::read(unsigned long long, int, void*)+0x48>
c0024b9c:	50                   	push   eax
c0024b9d:	50                   	push   eax
c0024b9e:	6a 00                	push   0x0
c0024ba0:	56                   	push   esi
c0024ba1:	52                   	push   edx
c0024ba2:	53                   	push   ebx
c0024ba3:	51                   	push   ecx
c0024ba4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024ba8:	e8 5d fd ff ff       	call   c002490a <SATA::access(unsigned long long, int, void*, bool)>
c0024bad:	83 c4 20             	add    esp,0x20
c0024bb0:	85 c0                	test   eax,eax
c0024bb2:	0f 95 c0             	setne  al
c0024bb5:	0f b6 c0             	movzx  eax,al
c0024bb8:	5b                   	pop    ebx
c0024bb9:	5e                   	pop    esi
c0024bba:	5f                   	pop    edi
c0024bbb:	c3                   	ret    

c0024bbc <SATA::write(unsigned long long, int, void*)>:
c0024bbc:	55                   	push   ebp
c0024bbd:	b8 04 00 00 00       	mov    eax,0x4
c0024bc2:	57                   	push   edi
c0024bc3:	56                   	push   esi
c0024bc4:	53                   	push   ebx
c0024bc5:	83 ec 0c             	sub    esp,0xc
c0024bc8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024bcc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024bd0:	8d 73 ff             	lea    esi,[ebx-0x1]
c0024bd3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024bd7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0024bdb:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024be1:	77 3d                	ja     c0024c20 <SATA::write(unsigned long long, int, void*)+0x64>
c0024be3:	b8 06 00 00 00       	mov    eax,0x6
c0024be8:	85 ed                	test   ebp,ebp
c0024bea:	74 34                	je     c0024c20 <SATA::write(unsigned long long, int, void*)+0x64>
c0024bec:	c1 e3 09             	shl    ebx,0x9
c0024bef:	01 eb                	add    ebx,ebp
c0024bf1:	89 d6                	mov    esi,edx
c0024bf3:	89 cf                	mov    edi,ecx
c0024bf5:	83 c6 01             	add    esi,0x1
c0024bf8:	83 d7 00             	adc    edi,0x0
c0024bfb:	50                   	push   eax
c0024bfc:	50                   	push   eax
c0024bfd:	6a 01                	push   0x1
c0024bff:	55                   	push   ebp
c0024c00:	81 c5 00 02 00 00    	add    ebp,0x200
c0024c06:	6a 01                	push   0x1
c0024c08:	51                   	push   ecx
c0024c09:	52                   	push   edx
c0024c0a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024c0e:	e8 f7 fc ff ff       	call   c002490a <SATA::access(unsigned long long, int, void*, bool)>
c0024c13:	83 c4 20             	add    esp,0x20
c0024c16:	89 f2                	mov    edx,esi
c0024c18:	89 f9                	mov    ecx,edi
c0024c1a:	39 dd                	cmp    ebp,ebx
c0024c1c:	75 d3                	jne    c0024bf1 <SATA::write(unsigned long long, int, void*)+0x35>
c0024c1e:	31 c0                	xor    eax,eax
c0024c20:	83 c4 0c             	add    esp,0xc
c0024c23:	5b                   	pop    ebx
c0024c24:	5e                   	pop    esi
c0024c25:	5f                   	pop    edi
c0024c26:	5d                   	pop    ebp
c0024c27:	c3                   	ret    

c0024c28 <SATAPI::write(unsigned long long, int, void*)>:
c0024c28:	b8 03 00 00 00       	mov    eax,0x3
c0024c2d:	c3                   	ret    

c0024c2e <SATAPI::close(int, int, void*)>:
c0024c2e:	83 ec 0c             	sub    esp,0xc
c0024c31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c35:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024c3b:	85 c0                	test   eax,eax
c0024c3d:	74 0c                	je     c0024c4b <SATAPI::close(int, int, void*)+0x1d>
c0024c3f:	83 ec 0c             	sub    esp,0xc
c0024c42:	8b 10                	mov    edx,DWORD PTR [eax]
c0024c44:	50                   	push   eax
c0024c45:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024c48:	83 c4 10             	add    esp,0x10
c0024c4b:	31 c0                	xor    eax,eax
c0024c4d:	83 c4 0c             	add    esp,0xc
c0024c50:	c3                   	ret    
c0024c51:	90                   	nop

c0024c52 <SATAPI::SATAPI()>:
c0024c52:	83 ec 0c             	sub    esp,0xc
c0024c55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c59:	83 ec 04             	sub    esp,0x4
c0024c5c:	68 00 08 00 00       	push   0x800
c0024c61:	68 b8 c0 02 c0       	push   0xc002c0b8
c0024c66:	50                   	push   eax
c0024c67:	e8 cc f1 fe ff       	call   c0013e38 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024c6c:	83 c4 10             	add    esp,0x10
c0024c6f:	ba 64 c1 02 c0       	mov    edx,0xc002c164
c0024c74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c78:	89 10                	mov    DWORD PTR [eax],edx
c0024c7a:	90                   	nop
c0024c7b:	83 c4 0c             	add    esp,0xc
c0024c7e:	c3                   	ret    
c0024c7f:	90                   	nop

c0024c80 <SATAPI::diskRemoved()>:
c0024c80:	83 ec 18             	sub    esp,0x18
c0024c83:	68 c4 c0 02 c0       	push   0xc002c0c4
c0024c88:	e8 3c d9 fe ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c0024c8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c91:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0024c98:	83 c4 1c             	add    esp,0x1c
c0024c9b:	c3                   	ret    

c0024c9c <SATAPI::diskInserted()>:
c0024c9c:	53                   	push   ebx
c0024c9d:	83 ec 14             	sub    esp,0x14
c0024ca0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024ca4:	68 db c0 02 c0       	push   0xc002c0db
c0024ca9:	e8 1b d9 fe ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c0024cae:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0024cb5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024cb8:	e8 e3 f1 fe ff       	call   c0013ea0 <PhysicalDisk::startCache()>
c0024cbd:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024cc1:	83 c4 18             	add    esp,0x18
c0024cc4:	5b                   	pop    ebx
c0024cc5:	e9 58 14 ff ff       	jmp    c0016122 <createPartitionsForDisk(PhysicalDisk*)>

c0024cca <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0024cca:	55                   	push   ebp
c0024ccb:	57                   	push   edi
c0024ccc:	56                   	push   esi
c0024ccd:	53                   	push   ebx
c0024cce:	83 ec 34             	sub    esp,0x34
c0024cd1:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0024cd5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024cd9:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0024cdd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024ce1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0024ce5:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024ceb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024cf1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024cf5:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0024cfb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024cff:	c1 e0 07             	shl    eax,0x7
c0024d02:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024d06:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024d0a:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024d14:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024d18:	8d 58 02             	lea    ebx,[eax+0x2]
c0024d1b:	c1 e3 07             	shl    ebx,0x7
c0024d1e:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0024d22:	53                   	push   ebx
c0024d23:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024d29:	e8 72 ec ff ff       	call   c00239a0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024d2e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024d32:	83 c4 10             	add    esp,0x10
c0024d35:	b8 01 00 00 00       	mov    eax,0x1
c0024d3a:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0024d3f:	0f 84 85 01 00 00    	je     c0024eca <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0024d45:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024d4b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024d4d:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024d53:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024d59:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024d5d:	c1 e1 05             	shl    ecx,0x5
c0024d60:	01 c8                	add    eax,ecx
c0024d62:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024d64:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0024d6a:	81 c9 25 00 01 00    	or     ecx,0x10025
c0024d70:	89 08                	mov    DWORD PTR [eax],ecx
c0024d72:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024d78:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024d7e:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024d84:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024d87:	8d 7b 40             	lea    edi,[ebx+0x40]
c0024d8a:	50                   	push   eax
c0024d8b:	68 90 00 00 00       	push   0x90
c0024d90:	6a 00                	push   0x0
c0024d92:	53                   	push   ebx
c0024d93:	e8 b8 b9 fd ff       	call   c0000750 <memset>
c0024d98:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0024d9c:	b9 0c 00 00 00       	mov    ecx,0xc
c0024da1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024da3:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0024da9:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0024dad:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024db3:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024db7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024dbb:	48                   	dec    eax
c0024dbc:	25 ff ff 3f 00       	and    eax,0x3fffff
c0024dc1:	89 c1                	mov    ecx,eax
c0024dc3:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024dc9:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024dce:	09 c8                	or     eax,ecx
c0024dd0:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024dd6:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024dd9:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024de0:	66 25 00 7f          	and    ax,0x7f00
c0024de4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0024de8:	66 0d 27 80          	or     ax,0x8027
c0024dec:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0024df0:	66 89 03             	mov    WORD PTR [ebx],ax
c0024df3:	89 d0                	mov    eax,edx
c0024df5:	c1 ea 18             	shr    edx,0x18
c0024df8:	c1 e8 10             	shr    eax,0x10
c0024dfb:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0024dfe:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024e01:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0024e05:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024e08:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024e0c:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024e0f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0024e13:	83 c4 10             	add    esp,0x10
c0024e16:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024e1a:	31 c0                	xor    eax,eax
c0024e1c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0024e20:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c0024e26:	80 e2 88             	and    dl,0x88
c0024e29:	74 0a                	je     c0024e35 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0024e2b:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e30:	74 0a                	je     c0024e3c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0024e32:	40                   	inc    eax
c0024e33:	eb eb                	jmp    c0024e20 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c0024e35:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e3a:	75 0f                	jne    c0024e4b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0024e3c:	83 ec 0c             	sub    esp,0xc
c0024e3f:	68 61 c0 02 c0       	push   0xc002c061
c0024e44:	e8 ec 4e ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c0024e49:	eb 3f                	jmp    c0024e8a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0024e4b:	ba 01 00 00 00       	mov    edx,0x1
c0024e50:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024e54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024e58:	d3 e2                	shl    edx,cl
c0024e5a:	c1 e0 07             	shl    eax,0x7
c0024e5d:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c0024e63:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024e67:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0024e6d:	85 ca                	test   edx,ecx
c0024e6f:	74 23                	je     c0024e94 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0024e71:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0024e77:	0f ba e1 1e          	bt     ecx,0x1e
c0024e7b:	73 ea                	jae    c0024e67 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0024e7d:	83 ec 0c             	sub    esp,0xc
c0024e80:	68 f3 c0 02 c0       	push   0xc002c0f3
c0024e85:	e8 3f d7 fe ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c0024e8a:	83 c4 10             	add    esp,0x10
c0024e8d:	b8 01 00 00 00       	mov    eax,0x1
c0024e92:	eb 36                	jmp    c0024eca <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0024e94:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0024e9a:	0f ba e0 1e          	bt     eax,0x1e
c0024e9e:	73 0a                	jae    c0024eaa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c0024ea0:	83 ec 0c             	sub    esp,0xc
c0024ea3:	68 06 c1 02 c0       	push   0xc002c106
c0024ea8:	eb db                	jmp    c0024e85 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0024eaa:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0024eaf:	74 17                	je     c0024ec8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0024eb1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0024eb6:	74 10                	je     c0024ec8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0024eb8:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c0024ebe:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0024ec2:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0024ec6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024ec8:	31 c0                	xor    eax,eax
c0024eca:	83 c4 2c             	add    esp,0x2c
c0024ecd:	5b                   	pop    ebx
c0024ece:	5e                   	pop    esi
c0024ecf:	5f                   	pop    edi
c0024ed0:	5d                   	pop    ebp
c0024ed1:	c3                   	ret    

c0024ed2 <SATAPI::eject()>:
c0024ed2:	57                   	push   edi
c0024ed3:	b9 03 00 00 00       	mov    ecx,0x3
c0024ed8:	53                   	push   ebx
c0024ed9:	83 ec 14             	sub    esp,0x14
c0024edc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024ee0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024ee4:	fc                   	cld    
c0024ee5:	31 c0                	xor    eax,eax
c0024ee7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024ee9:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024eee:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024ef3:	50                   	push   eax
c0024ef4:	6a 00                	push   0x0
c0024ef6:	6a 00                	push   0x0
c0024ef8:	6a 00                	push   0x0
c0024efa:	6a 00                	push   0x0
c0024efc:	6a 02                	push   0x2
c0024efe:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024f02:	50                   	push   eax
c0024f03:	53                   	push   ebx
c0024f04:	e8 c1 fd ff ff       	call   c0024cca <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024f09:	83 c4 14             	add    esp,0x14
c0024f0c:	53                   	push   ebx
c0024f0d:	e8 6e fd ff ff       	call   c0024c80 <SATAPI::diskRemoved()>
c0024f12:	83 c4 24             	add    esp,0x24
c0024f15:	31 c0                	xor    eax,eax
c0024f17:	5b                   	pop    ebx
c0024f18:	5f                   	pop    edi
c0024f19:	c3                   	ret    

c0024f1a <SATAPI::detectMedia()>:
c0024f1a:	56                   	push   esi
c0024f1b:	53                   	push   ebx
c0024f1c:	83 ec 28             	sub    esp,0x28
c0024f1f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024f23:	6a 0c                	push   0xc
c0024f25:	6a 00                	push   0x0
c0024f27:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024f2b:	56                   	push   esi
c0024f2c:	e8 1f b8 fd ff       	call   c0000750 <memset>
c0024f31:	83 c4 0c             	add    esp,0xc
c0024f34:	6a 00                	push   0x0
c0024f36:	6a 00                	push   0x0
c0024f38:	6a 00                	push   0x0
c0024f3a:	6a 00                	push   0x0
c0024f3c:	6a 00                	push   0x0
c0024f3e:	56                   	push   esi
c0024f3f:	53                   	push   ebx
c0024f40:	e8 85 fd ff ff       	call   c0024cca <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024f45:	83 c4 1c             	add    esp,0x1c
c0024f48:	6a 0c                	push   0xc
c0024f4a:	6a 00                	push   0x0
c0024f4c:	56                   	push   esi
c0024f4d:	e8 fe b7 fd ff       	call   c0000750 <memset>
c0024f52:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024f57:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024f5c:	83 c4 0c             	add    esp,0xc
c0024f5f:	6a 01                	push   0x1
c0024f61:	8d 44 24 16          	lea    eax,[esp+0x16]
c0024f65:	50                   	push   eax
c0024f66:	6a 00                	push   0x0
c0024f68:	6a 00                	push   0x0
c0024f6a:	6a 12                	push   0x12
c0024f6c:	56                   	push   esi
c0024f6d:	53                   	push   ebx
c0024f6e:	e8 57 fd ff ff       	call   c0024cca <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024f73:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024f77:	83 c4 20             	add    esp,0x20
c0024f7a:	83 e0 7f             	and    eax,0x7f
c0024f7d:	3c 70                	cmp    al,0x70
c0024f7f:	74 15                	je     c0024f96 <SATAPI::detectMedia()+0x7c>
c0024f81:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024f88:	75 0c                	jne    c0024f96 <SATAPI::detectMedia()+0x7c>
c0024f8a:	83 ec 0c             	sub    esp,0xc
c0024f8d:	53                   	push   ebx
c0024f8e:	e8 09 fd ff ff       	call   c0024c9c <SATAPI::diskInserted()>
c0024f93:	83 c4 10             	add    esp,0x10
c0024f96:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024f9a:	83 e0 0f             	and    eax,0xf
c0024f9d:	3c 02                	cmp    al,0x2
c0024f9f:	75 1b                	jne    c0024fbc <SATAPI::detectMedia()+0xa2>
c0024fa1:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024fa6:	75 2d                	jne    c0024fd5 <SATAPI::detectMedia()+0xbb>
c0024fa8:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024faf:	74 24                	je     c0024fd5 <SATAPI::detectMedia()+0xbb>
c0024fb1:	83 ec 0c             	sub    esp,0xc
c0024fb4:	53                   	push   ebx
c0024fb5:	e8 c6 fc ff ff       	call   c0024c80 <SATAPI::diskRemoved()>
c0024fba:	eb 16                	jmp    c0024fd2 <SATAPI::detectMedia()+0xb8>
c0024fbc:	84 c0                	test   al,al
c0024fbe:	75 15                	jne    c0024fd5 <SATAPI::detectMedia()+0xbb>
c0024fc0:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024fc7:	75 0c                	jne    c0024fd5 <SATAPI::detectMedia()+0xbb>
c0024fc9:	83 ec 0c             	sub    esp,0xc
c0024fcc:	53                   	push   ebx
c0024fcd:	e8 ca fc ff ff       	call   c0024c9c <SATAPI::diskInserted()>
c0024fd2:	83 c4 10             	add    esp,0x10
c0024fd5:	83 c4 24             	add    esp,0x24
c0024fd8:	5b                   	pop    ebx
c0024fd9:	5e                   	pop    esi
c0024fda:	c3                   	ret    
c0024fdb:	90                   	nop

c0024fdc <SATAPI::open(int, int, void*)>:
c0024fdc:	56                   	push   esi
c0024fdd:	53                   	push   ebx
c0024fde:	50                   	push   eax
c0024fdf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024fe3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024fe7:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024ff1:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024ff7:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025001:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025005:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002500f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025015:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002501c:	e8 1f a9 fe ff       	call   c000f940 <Phys::allocatePage()>
c0025021:	89 c6                	mov    esi,eax
c0025023:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025029:	81 c6 00 10 00 00    	add    esi,0x1000
c002502f:	e8 0c a9 fe ff       	call   c000f940 <Phys::allocatePage()>
c0025034:	39 c6                	cmp    esi,eax
c0025036:	74 10                	je     c0025048 <SATAPI::open(int, int, void*)+0x6c>
c0025038:	83 ec 0c             	sub    esp,0xc
c002503b:	68 1b c1 02 c0       	push   0xc002c11b
c0025040:	e8 f0 4c ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c0025045:	83 c4 10             	add    esp,0x10
c0025048:	83 ec 0c             	sub    esp,0xc
c002504b:	6a 02                	push   0x2
c002504d:	e8 7d c1 fe ff       	call   c00111cf <Virt::allocateKernelVirtualPages(int)>
c0025052:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025058:	6a 03                	push   0x3
c002505a:	50                   	push   eax
c002505b:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025061:	ff 35 70 d8 02 c0    	push   DWORD PTR ds:0xc002d870
c0025067:	e8 20 c9 fe ff       	call   c001198c <VAS::mapPage(unsigned long, unsigned long, int)>
c002506c:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025073:	83 c4 14             	add    esp,0x14
c0025076:	53                   	push   ebx
c0025077:	e8 9e fe ff ff       	call   c0024f1a <SATAPI::detectMedia()>
c002507c:	83 c4 14             	add    esp,0x14
c002507f:	31 c0                	xor    eax,eax
c0025081:	5b                   	pop    ebx
c0025082:	5e                   	pop    esi
c0025083:	c3                   	ret    

c0025084 <SATAPI::read(unsigned long long, int, void*)>:
c0025084:	55                   	push   ebp
c0025085:	57                   	push   edi
c0025086:	56                   	push   esi
c0025087:	53                   	push   ebx
c0025088:	83 ec 1c             	sub    esp,0x1c
c002508b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002508f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025093:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025097:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002509e:	74 19                	je     c00250b9 <SATAPI::read(unsigned long long, int, void*)+0x35>
c00250a0:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c00250a5:	7e 2e                	jle    c00250d5 <SATAPI::read(unsigned long long, int, void*)+0x51>
c00250a7:	83 ec 0c             	sub    esp,0xc
c00250aa:	68 31 c1 02 c0       	push   0xc002c131
c00250af:	e8 81 4c ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c00250b4:	83 c4 10             	add    esp,0x10
c00250b7:	eb 1c                	jmp    c00250d5 <SATAPI::read(unsigned long long, int, void*)+0x51>
c00250b9:	83 ec 0c             	sub    esp,0xc
c00250bc:	55                   	push   ebp
c00250bd:	e8 58 fe ff ff       	call   c0024f1a <SATAPI::detectMedia()>
c00250c2:	83 c4 10             	add    esp,0x10
c00250c5:	b8 02 00 00 00       	mov    eax,0x2
c00250ca:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00250d1:	75 cd                	jne    c00250a0 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c00250d3:	eb 49                	jmp    c002511e <SATAPI::read(unsigned long long, int, void*)+0x9a>
c00250d5:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00250d9:	b9 03 00 00 00       	mov    ecx,0x3
c00250de:	fc                   	cld    
c00250df:	31 c0                	xor    eax,eax
c00250e1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00250e3:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00250e8:	89 d8                	mov    eax,ebx
c00250ea:	86 e0                	xchg   al,ah
c00250ec:	c1 c0 10             	rol    eax,0x10
c00250ef:	86 e0                	xchg   al,ah
c00250f1:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c00250f5:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c00250f9:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00250fd:	50                   	push   eax
c00250fe:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025102:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025106:	56                   	push   esi
c0025107:	53                   	push   ebx
c0025108:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002510c:	c1 e0 0b             	shl    eax,0xb
c002510f:	50                   	push   eax
c0025110:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025114:	50                   	push   eax
c0025115:	55                   	push   ebp
c0025116:	e8 af fb ff ff       	call   c0024cca <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002511b:	83 c4 20             	add    esp,0x20
c002511e:	83 c4 1c             	add    esp,0x1c
c0025121:	5b                   	pop    ebx
c0025122:	5e                   	pop    esi
c0025123:	5f                   	pop    edi
c0025124:	5d                   	pop    ebp
c0025125:	c3                   	ret    

c0025126 <AVX::open(int, int, void*)>:
c0025126:	83 ec 0c             	sub    esp,0xc
c0025129:	e8 3a 11 00 00       	call   c0026268 <avxInit>
c002512e:	b8 00 00 00 00       	mov    eax,0x0
c0025133:	83 c4 0c             	add    esp,0xc
c0025136:	c3                   	ret    
c0025137:	90                   	nop

c0025138 <AVX::close(int, int, void*)>:
c0025138:	83 ec 0c             	sub    esp,0xc
c002513b:	e8 29 11 00 00       	call   c0026269 <avxClose>
c0025140:	b8 00 00 00 00       	mov    eax,0x0
c0025145:	83 c4 0c             	add    esp,0xc
c0025148:	c3                   	ret    
c0025149:	90                   	nop

c002514a <AVX::available()>:
c002514a:	83 ec 0c             	sub    esp,0xc
c002514d:	e8 0e 11 00 00       	call   c0026260 <avxDetect>
c0025152:	85 c0                	test   eax,eax
c0025154:	0f 95 c0             	setne  al
c0025157:	83 c4 0c             	add    esp,0xc
c002515a:	c3                   	ret    
c002515b:	90                   	nop

c002515c <AVX::save(void*)>:
c002515c:	83 ec 0c             	sub    esp,0xc
c002515f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025163:	83 ec 0c             	sub    esp,0xc
c0025166:	50                   	push   eax
c0025167:	e8 fa 10 00 00       	call   c0026266 <avxSave>
c002516c:	83 c4 10             	add    esp,0x10
c002516f:	90                   	nop
c0025170:	83 c4 0c             	add    esp,0xc
c0025173:	c3                   	ret    

c0025174 <AVX::load(void*)>:
c0025174:	83 ec 0c             	sub    esp,0xc
c0025177:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002517b:	83 ec 0c             	sub    esp,0xc
c002517e:	50                   	push   eax
c002517f:	e8 e3 10 00 00       	call   c0026267 <avxLoad>
c0025184:	83 c4 10             	add    esp,0x10
c0025187:	90                   	nop
c0025188:	83 c4 0c             	add    esp,0xc
c002518b:	c3                   	ret    

c002518c <AVX::AVX()>:
c002518c:	83 ec 0c             	sub    esp,0xc
c002518f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025193:	83 ec 08             	sub    esp,0x8
c0025196:	68 94 c1 02 c0       	push   0xc002c194
c002519b:	50                   	push   eax
c002519c:	e8 75 ed fe ff       	call   c0013f16 <FPU::FPU(char const*)>
c00251a1:	83 c4 10             	add    esp,0x10
c00251a4:	ba a4 c1 02 c0       	mov    edx,0xc002c1a4
c00251a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251ad:	89 10                	mov    DWORD PTR [eax],edx
c00251af:	90                   	nop
c00251b0:	83 c4 0c             	add    esp,0xc
c00251b3:	c3                   	ret    

c00251b4 <MMX::available()>:
c00251b4:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c00251b9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00251bf:	83 e0 20             	and    eax,0x20
c00251c2:	84 c0                	test   al,al
c00251c4:	0f 95 c0             	setne  al
c00251c7:	c3                   	ret    

c00251c8 <MMX::open(int, int, void*)>:
c00251c8:	83 ec 0c             	sub    esp,0xc
c00251cb:	e8 22 11 00 00       	call   c00262f2 <x87Init>
c00251d0:	b8 00 00 00 00       	mov    eax,0x0
c00251d5:	83 c4 0c             	add    esp,0xc
c00251d8:	c3                   	ret    
c00251d9:	90                   	nop

c00251da <MMX::close(int, int, void*)>:
c00251da:	83 ec 0c             	sub    esp,0xc
c00251dd:	e8 2a 11 00 00       	call   c002630c <x87Close>
c00251e2:	b8 00 00 00 00       	mov    eax,0x0
c00251e7:	83 c4 0c             	add    esp,0xc
c00251ea:	c3                   	ret    
c00251eb:	90                   	nop

c00251ec <MMX::save(void*)>:
c00251ec:	83 ec 0c             	sub    esp,0xc
c00251ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00251f3:	83 ec 0c             	sub    esp,0xc
c00251f6:	50                   	push   eax
c00251f7:	e8 e5 10 00 00       	call   c00262e1 <x87Save>
c00251fc:	83 c4 10             	add    esp,0x10
c00251ff:	90                   	nop
c0025200:	83 c4 0c             	add    esp,0xc
c0025203:	c3                   	ret    

c0025204 <MMX::load(void*)>:
c0025204:	83 ec 0c             	sub    esp,0xc
c0025207:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002520b:	83 ec 0c             	sub    esp,0xc
c002520e:	50                   	push   eax
c002520f:	e8 d6 10 00 00       	call   c00262ea <x87Load>
c0025214:	83 c4 10             	add    esp,0x10
c0025217:	90                   	nop
c0025218:	83 c4 0c             	add    esp,0xc
c002521b:	c3                   	ret    

c002521c <MMX::MMX()>:
c002521c:	83 ec 0c             	sub    esp,0xc
c002521f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025223:	83 ec 08             	sub    esp,0x8
c0025226:	68 d4 c1 02 c0       	push   0xc002c1d4
c002522b:	50                   	push   eax
c002522c:	e8 e5 ec fe ff       	call   c0013f16 <FPU::FPU(char const*)>
c0025231:	83 c4 10             	add    esp,0x10
c0025234:	ba e4 c1 02 c0       	mov    edx,0xc002c1e4
c0025239:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002523d:	89 10                	mov    DWORD PTR [eax],edx
c002523f:	90                   	nop
c0025240:	83 c4 0c             	add    esp,0xc
c0025243:	c3                   	ret    

c0025244 <SSE::open(int, int, void*)>:
c0025244:	83 ec 0c             	sub    esp,0xc
c0025247:	e8 58 10 00 00       	call   c00262a4 <sseInit>
c002524c:	b8 00 00 00 00       	mov    eax,0x0
c0025251:	83 c4 0c             	add    esp,0xc
c0025254:	c3                   	ret    
c0025255:	90                   	nop

c0025256 <SSE::close(int, int, void*)>:
c0025256:	83 ec 0c             	sub    esp,0xc
c0025259:	e8 56 10 00 00       	call   c00262b4 <sseClose>
c002525e:	b8 00 00 00 00       	mov    eax,0x0
c0025263:	83 c4 0c             	add    esp,0xc
c0025266:	c3                   	ret    
c0025267:	90                   	nop

c0025268 <SSE::available()>:
c0025268:	83 ec 1c             	sub    esp,0x1c
c002526b:	e8 10 10 00 00       	call   c0026280 <absolutelyNoChanceInHell>
c0025270:	85 c0                	test   eax,eax
c0025272:	0f 95 c0             	setne  al
c0025275:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025279:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002527d:	83 c4 1c             	add    esp,0x1c
c0025280:	c3                   	ret    
c0025281:	90                   	nop

c0025282 <SSE::save(void*)>:
c0025282:	83 ec 0c             	sub    esp,0xc
c0025285:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025289:	83 ec 0c             	sub    esp,0xc
c002528c:	50                   	push   eax
c002528d:	e8 06 10 00 00       	call   c0026298 <sseSave>
c0025292:	83 c4 10             	add    esp,0x10
c0025295:	90                   	nop
c0025296:	83 c4 0c             	add    esp,0xc
c0025299:	c3                   	ret    

c002529a <SSE::load(void*)>:
c002529a:	83 ec 0c             	sub    esp,0xc
c002529d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00252a1:	83 ec 0c             	sub    esp,0xc
c00252a4:	50                   	push   eax
c00252a5:	e8 f4 0f 00 00       	call   c002629e <sseLoad>
c00252aa:	83 c4 10             	add    esp,0x10
c00252ad:	90                   	nop
c00252ae:	83 c4 0c             	add    esp,0xc
c00252b1:	c3                   	ret    

c00252b2 <SSE::SSE()>:
c00252b2:	83 ec 0c             	sub    esp,0xc
c00252b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252b9:	83 ec 08             	sub    esp,0x8
c00252bc:	68 14 c2 02 c0       	push   0xc002c214
c00252c1:	50                   	push   eax
c00252c2:	e8 4f ec fe ff       	call   c0013f16 <FPU::FPU(char const*)>
c00252c7:	83 c4 10             	add    esp,0x10
c00252ca:	ba 24 c2 02 c0       	mov    edx,0xc002c224
c00252cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252d3:	89 10                	mov    DWORD PTR [eax],edx
c00252d5:	90                   	nop
c00252d6:	83 c4 0c             	add    esp,0xc
c00252d9:	c3                   	ret    

c00252da <x87::open(int, int, void*)>:
c00252da:	83 ec 0c             	sub    esp,0xc
c00252dd:	e8 10 10 00 00       	call   c00262f2 <x87Init>
c00252e2:	b8 00 00 00 00       	mov    eax,0x0
c00252e7:	83 c4 0c             	add    esp,0xc
c00252ea:	c3                   	ret    
c00252eb:	90                   	nop

c00252ec <x87::close(int, int, void*)>:
c00252ec:	83 ec 0c             	sub    esp,0xc
c00252ef:	e8 18 10 00 00       	call   c002630c <x87Close>
c00252f4:	b8 00 00 00 00       	mov    eax,0x0
c00252f9:	83 c4 0c             	add    esp,0xc
c00252fc:	c3                   	ret    
c00252fd:	90                   	nop

c00252fe <x87::available()>:
c00252fe:	83 ec 0c             	sub    esp,0xc
c0025301:	e8 c0 0f 00 00       	call   c00262c6 <x87Detect>
c0025306:	85 c0                	test   eax,eax
c0025308:	0f 95 c0             	setne  al
c002530b:	83 c4 0c             	add    esp,0xc
c002530e:	c3                   	ret    
c002530f:	90                   	nop

c0025310 <x87::save(void*)>:
c0025310:	83 ec 0c             	sub    esp,0xc
c0025313:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025317:	83 ec 0c             	sub    esp,0xc
c002531a:	50                   	push   eax
c002531b:	e8 c1 0f 00 00       	call   c00262e1 <x87Save>
c0025320:	83 c4 10             	add    esp,0x10
c0025323:	90                   	nop
c0025324:	83 c4 0c             	add    esp,0xc
c0025327:	c3                   	ret    

c0025328 <x87::load(void*)>:
c0025328:	83 ec 0c             	sub    esp,0xc
c002532b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002532f:	83 ec 0c             	sub    esp,0xc
c0025332:	50                   	push   eax
c0025333:	e8 b2 0f 00 00       	call   c00262ea <x87Load>
c0025338:	83 c4 10             	add    esp,0x10
c002533b:	90                   	nop
c002533c:	83 c4 0c             	add    esp,0xc
c002533f:	c3                   	ret    

c0025340 <x87::x87()>:
c0025340:	83 ec 0c             	sub    esp,0xc
c0025343:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025347:	83 ec 08             	sub    esp,0x8
c002534a:	68 54 c2 02 c0       	push   0xc002c254
c002534f:	50                   	push   eax
c0025350:	e8 c1 eb fe ff       	call   c0013f16 <FPU::FPU(char const*)>
c0025355:	83 c4 10             	add    esp,0x10
c0025358:	ba 64 c2 02 c0       	mov    edx,0xc002c264
c002535d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025361:	89 10                	mov    DWORD PTR [eax],edx
c0025363:	90                   	nop
c0025364:	83 c4 0c             	add    esp,0xc
c0025367:	c3                   	ret    

c0025368 <APIC::disable()>:
c0025368:	90                   	nop
c0025369:	c3                   	ret    

c002536a <APIC::close(int, int, void*)>:
c002536a:	55                   	push   ebp
c002536b:	89 e5                	mov    ebp,esp
c002536d:	83 ec 08             	sub    esp,0x8
c0025370:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025373:	8b 00                	mov    eax,DWORD PTR [eax]
c0025375:	83 c0 3c             	add    eax,0x3c
c0025378:	8b 00                	mov    eax,DWORD PTR [eax]
c002537a:	83 ec 0c             	sub    esp,0xc
c002537d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025380:	ff d0                	call   eax
c0025382:	83 c4 10             	add    esp,0x10
c0025385:	b8 00 00 00 00       	mov    eax,0x0
c002538a:	c9                   	leave  
c002538b:	c3                   	ret    

c002538c <IOAPIC::close(int, int, void*)>:
c002538c:	b8 00 00 00 00       	mov    eax,0x0
c0025391:	c3                   	ret    

c0025392 <APIC::io_wait()>:
c0025392:	eb 00                	jmp    c0025394 <APIC::io_wait()+0x2>
c0025394:	eb 00                	jmp    c0025396 <APIC::io_wait()+0x4>
c0025396:	90                   	nop
c0025397:	c3                   	ret    

c0025398 <APIC::getBase()>:
c0025398:	55                   	push   ebp
c0025399:	89 e5                	mov    ebp,esp
c002539b:	83 ec 18             	sub    esp,0x18
c002539e:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c00253a3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00253a9:	83 e0 08             	and    eax,0x8
c00253ac:	84 c0                	test   al,al
c00253ae:	75 07                	jne    c00253b7 <APIC::getBase()+0x1f>
c00253b0:	b8 00 00 00 00       	mov    eax,0x0
c00253b5:	eb 21                	jmp    c00253d8 <APIC::getBase()+0x40>
c00253b7:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c00253bc:	83 ec 08             	sub    esp,0x8
c00253bf:	6a 1b                	push   0x1b
c00253c1:	50                   	push   eax
c00253c2:	e8 79 97 fe ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c00253c7:	83 c4 10             	add    esp,0x10
c00253ca:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00253cd:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00253d0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00253d3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00253d8:	c9                   	leave  
c00253d9:	c3                   	ret    

c00253da <APIC::eoi(unsigned char)>:
c00253da:	55                   	push   ebp
c00253db:	89 e5                	mov    ebp,esp
c00253dd:	83 ec 28             	sub    esp,0x28
c00253e0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00253e3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00253e6:	83 ec 0c             	sub    esp,0xc
c00253e9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00253ec:	e8 a7 ff ff ff       	call   c0025398 <APIC::getBase()>
c00253f1:	83 c4 10             	add    esp,0x10
c00253f4:	05 b0 00 00 00       	add    eax,0xb0
c00253f9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00253fc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00253ff:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025405:	90                   	nop
c0025406:	c9                   	leave  
c0025407:	c3                   	ret    

c0025408 <APIC::open(int, int, void*)>:
c0025408:	55                   	push   ebp
c0025409:	89 e5                	mov    ebp,esp
c002540b:	57                   	push   edi
c002540c:	56                   	push   esi
c002540d:	53                   	push   ebx
c002540e:	83 ec 2c             	sub    esp,0x2c
c0025411:	83 ec 0c             	sub    esp,0xc
c0025414:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025417:	e8 7c ff ff ff       	call   c0025398 <APIC::getBase()>
c002541c:	83 c4 10             	add    esp,0x10
c002541f:	89 c2                	mov    edx,eax
c0025421:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025424:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002542a:	0f b6 f8             	movzx  edi,al
c002542d:	89 d0                	mov    eax,edx
c002542f:	ba 00 00 00 00       	mov    edx,0x0
c0025434:	89 c1                	mov    ecx,eax
c0025436:	80 e5 ff             	and    ch,0xff
c0025439:	89 cb                	mov    ebx,ecx
c002543b:	0f b6 f2             	movzx  esi,dl
c002543e:	89 d8                	mov    eax,ebx
c0025440:	89 f2                	mov    edx,esi
c0025442:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025445:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025448:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002544c:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025450:	83 e0 00             	and    eax,0x0
c0025453:	09 d0                	or     eax,edx
c0025455:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025459:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002545c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025462:	8d 50 01             	lea    edx,[eax+0x1]
c0025465:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025468:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002546e:	0f b6 d0             	movzx  edx,al
c0025471:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025474:	83 c2 08             	add    edx,0x8
c0025477:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002547b:	0f b6 c9             	movzx  ecx,cl
c002547e:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025484:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025488:	83 ec 0c             	sub    esp,0xc
c002548b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002548e:	e8 05 ff ff ff       	call   c0025398 <APIC::getBase()>
c0025493:	83 c4 10             	add    esp,0x10
c0025496:	05 f0 00 00 00       	add    eax,0xf0
c002549b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002549e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00254a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00254a3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00254a6:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c00254ad:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00254b4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00254b7:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00254ba:	89 10                	mov    DWORD PTR [eax],edx
c00254bc:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00254c3:	a1 d0 ff 02 c0       	mov    eax,ds:0xc002ffd0
c00254c8:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00254cb:	7d 7c                	jge    c0025549 <APIC::open(int, int, void*)+0x141>
c00254cd:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00254d0:	8b 04 85 e0 ff 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0020]
c00254d7:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00254da:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00254dd:	8b 04 85 e0 ff 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0020]
c00254e4:	c1 e8 08             	shr    eax,0x8
c00254e7:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00254eb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00254ee:	8b 04 85 e0 ff 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0020]
c00254f5:	c1 e8 18             	shr    eax,0x18
c00254f8:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00254fb:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00254ff:	75 40                	jne    c0025541 <APIC::open(int, int, void*)+0x139>
c0025501:	83 ec 0c             	sub    esp,0xc
c0025504:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025507:	e8 8c fe ff ff       	call   c0025398 <APIC::getBase()>
c002550c:	83 c4 10             	add    esp,0x10
c002550f:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0025513:	75 07                	jne    c002551c <APIC::open(int, int, void*)+0x114>
c0025515:	ba 60 03 00 00       	mov    edx,0x360
c002551a:	eb 05                	jmp    c0025521 <APIC::open(int, int, void*)+0x119>
c002551c:	ba 50 03 00 00       	mov    edx,0x350
c0025521:	01 d0                	add    eax,edx
c0025523:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025526:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025529:	8b 00                	mov    eax,DWORD PTR [eax]
c002552b:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002552e:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0025535:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025539:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002553c:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002553f:	89 10                	mov    DWORD PTR [eax],edx
c0025541:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0025544:	e9 7a ff ff ff       	jmp    c00254c3 <APIC::open(int, int, void*)+0xbb>
c0025549:	b8 00 00 00 00       	mov    eax,0x0
c002554e:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025551:	5b                   	pop    ebx
c0025552:	5e                   	pop    esi
c0025553:	5f                   	pop    edi
c0025554:	5d                   	pop    ebp
c0025555:	c3                   	ret    

c0025556 <IOAPIC::IOAPIC()>:
c0025556:	83 ec 0c             	sub    esp,0xc
c0025559:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002555d:	83 ec 08             	sub    esp,0x8
c0025560:	68 94 c2 02 c0       	push   0xc002c294
c0025565:	50                   	push   eax
c0025566:	e8 9b e6 fe ff       	call   c0013c06 <Device::Device(char const*)>
c002556b:	83 c4 10             	add    esp,0x10
c002556e:	ba bc c3 02 c0       	mov    edx,0xc002c3bc
c0025573:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025577:	89 10                	mov    DWORD PTR [eax],edx
c0025579:	90                   	nop
c002557a:	83 c4 0c             	add    esp,0xc
c002557d:	c3                   	ret    

c002557e <APIC::APIC()>:
c002557e:	53                   	push   ebx
c002557f:	83 ec 18             	sub    esp,0x18
c0025582:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025586:	83 ec 08             	sub    esp,0x8
c0025589:	68 9c c2 02 c0       	push   0xc002c29c
c002558e:	50                   	push   eax
c002558f:	e8 dc ed fe ff       	call   c0014370 <InterruptController::InterruptController(char const*)>
c0025594:	83 c4 10             	add    esp,0x10
c0025597:	ba 74 c3 02 c0       	mov    edx,0xc002c374
c002559c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00255a0:	89 10                	mov    DWORD PTR [eax],edx
c00255a2:	a0 a0 1a 03 c0       	mov    al,ds:0xc0031aa0
c00255a7:	83 f0 01             	xor    eax,0x1
c00255aa:	84 c0                	test   al,al
c00255ac:	0f 84 a1 00 00 00    	je     c0025653 <APIC::APIC()+0xd5>
c00255b2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00255b7:	a0 80 00 03 c0       	mov    al,ds:0xc0030080
c00255bc:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00255c0:	0f 83 86 00 00 00    	jae    c002564c <APIC::APIC()+0xce>
c00255c6:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00255ce:	83 ec 0c             	sub    esp,0xc
c00255d1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00255d5:	e8 c2 9f fe ff       	call   c000f59c <malloc>
c00255da:	83 c4 10             	add    esp,0x10
c00255dd:	89 c3                	mov    ebx,eax
c00255df:	83 ec 0c             	sub    esp,0xc
c00255e2:	53                   	push   ebx
c00255e3:	e8 6e ff ff ff       	call   c0025556 <IOAPIC::IOAPIC()>
c00255e8:	83 c4 10             	add    esp,0x10
c00255eb:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00255ef:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00255f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00255f8:	89 14 85 80 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce580],edx
c00255ff:	a1 60 1a 03 c0       	mov    eax,ds:0xc0031a60
c0025604:	40                   	inc    eax
c0025605:	a3 60 1a 03 c0       	mov    ds:0xc0031a60,eax
c002560a:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c002560f:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025615:	83 ec 08             	sub    esp,0x8
c0025618:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002561c:	50                   	push   eax
c002561d:	e8 e0 e3 fe ff       	call   c0013a02 <Device::addChild(Device*)>
c0025622:	83 c4 10             	add    esp,0x10
c0025625:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025629:	8b 00                	mov    eax,DWORD PTR [eax]
c002562b:	83 c0 08             	add    eax,0x8
c002562e:	8b 00                	mov    eax,DWORD PTR [eax]
c0025630:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025635:	6a 00                	push   0x0
c0025637:	6a 00                	push   0x0
c0025639:	52                   	push   edx
c002563a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002563e:	ff d0                	call   eax
c0025640:	83 c4 10             	add    esp,0x10
c0025643:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025647:	e9 6b ff ff ff       	jmp    c00255b7 <APIC::APIC()+0x39>
c002564c:	c6 05 a0 1a 03 c0 01 	mov    BYTE PTR ds:0xc0031aa0,0x1
c0025653:	90                   	nop
c0025654:	83 c4 18             	add    esp,0x18
c0025657:	5b                   	pop    ebx
c0025658:	c3                   	ret    
c0025659:	90                   	nop

c002565a <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002565a:	55                   	push   ebp
c002565b:	89 e5                	mov    ebp,esp
c002565d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025660:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025666:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025669:	72 1d                	jb     c0025688 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002566b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002566e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025674:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025677:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002567d:	01 d0                	add    eax,edx
c002567f:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025682:	73 04                	jae    c0025688 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025684:	b0 01                	mov    al,0x1
c0025686:	eb 02                	jmp    c002568a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025688:	b0 00                	mov    al,0x0
c002568a:	5d                   	pop    ebp
c002568b:	c3                   	ret    

c002568c <IOAPIC::read(int)>:
c002568c:	55                   	push   ebp
c002568d:	89 e5                	mov    ebp,esp
c002568f:	83 ec 10             	sub    esp,0x10
c0025692:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025695:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002569b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002569e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00256a1:	0f b6 d0             	movzx  edx,al
c00256a4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00256a7:	89 10                	mov    DWORD PTR [eax],edx
c00256a9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00256ac:	83 c0 10             	add    eax,0x10
c00256af:	8b 00                	mov    eax,DWORD PTR [eax]
c00256b1:	c9                   	leave  
c00256b2:	c3                   	ret    
c00256b3:	90                   	nop

c00256b4 <IOAPIC::open(int, int, void*)>:
c00256b4:	55                   	push   ebp
c00256b5:	89 e5                	mov    ebp,esp
c00256b7:	57                   	push   edi
c00256b8:	56                   	push   esi
c00256b9:	53                   	push   ebx
c00256ba:	83 ec 0c             	sub    esp,0xc
c00256bd:	83 ec 0c             	sub    esp,0xc
c00256c0:	68 c7 c2 02 c0       	push   0xc002c2c7
c00256c5:	e8 ff ce fe ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c00256ca:	83 c4 10             	add    esp,0x10
c00256cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256d0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00256d3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00256d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256dc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00256e2:	8b 14 85 c0 00 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcff40]
c00256e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256ec:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00256f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256f5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00256fb:	8b 14 85 40 01 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfec0]
c0025702:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025705:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002570b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002570e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025714:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025717:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002571d:	0f b6 f8             	movzx  edi,al
c0025720:	89 d0                	mov    eax,edx
c0025722:	ba 00 00 00 00       	mov    edx,0x0
c0025727:	89 c1                	mov    ecx,eax
c0025729:	80 e5 ff             	and    ch,0xff
c002572c:	89 cb                	mov    ebx,ecx
c002572e:	0f b6 f2             	movzx  esi,dl
c0025731:	89 d8                	mov    eax,ebx
c0025733:	89 f2                	mov    edx,esi
c0025735:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025738:	8d 5f 08             	lea    ebx,[edi+0x8]
c002573b:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002573f:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025743:	83 e0 00             	and    eax,0x0
c0025746:	09 d0                	or     eax,edx
c0025748:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002574c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002574f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025755:	8d 50 01             	lea    edx,[eax+0x1]
c0025758:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002575b:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025761:	0f b6 d0             	movzx  edx,al
c0025764:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025767:	83 c2 08             	add    edx,0x8
c002576a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002576e:	0f b6 c9             	movzx  ecx,cl
c0025771:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025777:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002577b:	83 ec 08             	sub    esp,0x8
c002577e:	6a 01                	push   0x1
c0025780:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025783:	e8 04 ff ff ff       	call   c002568c <IOAPIC::read(int)>
c0025788:	83 c4 10             	add    esp,0x10
c002578b:	c1 f8 10             	sar    eax,0x10
c002578e:	0f b6 c0             	movzx  eax,al
c0025791:	8d 50 01             	lea    edx,[eax+0x1]
c0025794:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025797:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c002579d:	b8 00 00 00 00       	mov    eax,0x0
c00257a2:	8d 65 f4             	lea    esp,[ebp-0xc]
c00257a5:	5b                   	pop    ebx
c00257a6:	5e                   	pop    esi
c00257a7:	5f                   	pop    edi
c00257a8:	5d                   	pop    ebp
c00257a9:	c3                   	ret    

c00257aa <IOAPIC::write(int, int)>:
c00257aa:	55                   	push   ebp
c00257ab:	89 e5                	mov    ebp,esp
c00257ad:	83 ec 10             	sub    esp,0x10
c00257b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257b3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00257b9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00257bc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00257bf:	0f b6 d0             	movzx  edx,al
c00257c2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00257c5:	89 10                	mov    DWORD PTR [eax],edx
c00257c7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00257ca:	8d 50 10             	lea    edx,[eax+0x10]
c00257cd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00257d0:	89 02                	mov    DWORD PTR [edx],eax
c00257d2:	90                   	nop
c00257d3:	c9                   	leave  
c00257d4:	c3                   	ret    
c00257d5:	90                   	nop

c00257d6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00257d6:	55                   	push   ebp
c00257d7:	89 e5                	mov    ebp,esp
c00257d9:	53                   	push   ebx
c00257da:	83 ec 2c             	sub    esp,0x2c
c00257dd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00257e0:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00257e3:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00257e6:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00257e9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00257ec:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00257ef:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00257f2:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00257f5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00257f8:	88 d8                	mov    al,bl
c00257fa:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00257fd:	88 c8                	mov    al,cl
c00257ff:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025802:	88 d0                	mov    al,dl
c0025804:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025807:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002580b:	83 c0 08             	add    eax,0x8
c002580e:	01 c0                	add    eax,eax
c0025810:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025813:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025817:	83 c0 08             	add    eax,0x8
c002581a:	01 c0                	add    eax,eax
c002581c:	40                   	inc    eax
c002581d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025820:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025823:	50                   	push   eax
c0025824:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025827:	e8 60 fe ff ff       	call   c002568c <IOAPIC::read(int)>
c002582c:	83 c4 08             	add    esp,0x8
c002582f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025832:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025839:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002583c:	c1 e0 18             	shl    eax,0x18
c002583f:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025842:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025845:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025848:	52                   	push   edx
c0025849:	50                   	push   eax
c002584a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002584d:	e8 58 ff ff ff       	call   c00257aa <IOAPIC::write(int, int)>
c0025852:	83 c4 0c             	add    esp,0xc
c0025855:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025858:	50                   	push   eax
c0025859:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002585c:	e8 2b fe ff ff       	call   c002568c <IOAPIC::read(int)>
c0025861:	83 c4 08             	add    esp,0x8
c0025864:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025867:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002586e:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025875:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c002587c:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025880:	74 09                	je     c002588b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025882:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025889:	eb 07                	jmp    c0025892 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c002588b:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025892:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025896:	74 09                	je     c00258a1 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025898:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c002589f:	eb 07                	jmp    c00258a8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00258a1:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00258a8:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00258af:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00258b3:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00258b6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00258b9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00258bc:	52                   	push   edx
c00258bd:	50                   	push   eax
c00258be:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258c1:	e8 e4 fe ff ff       	call   c00257aa <IOAPIC::write(int, int)>
c00258c6:	83 c4 0c             	add    esp,0xc
c00258c9:	90                   	nop
c00258ca:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00258cd:	c9                   	leave  
c00258ce:	c3                   	ret    
c00258cf:	90                   	nop

c00258d0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00258d0:	55                   	push   ebp
c00258d1:	89 e5                	mov    ebp,esp
c00258d3:	57                   	push   edi
c00258d4:	56                   	push   esi
c00258d5:	53                   	push   ebx
c00258d6:	83 ec 2c             	sub    esp,0x2c
c00258d9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00258dc:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00258df:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00258e3:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c00258e7:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00258eb:	74 5a                	je     c0025947 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00258ed:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00258f1:	7f 44                	jg     c0025937 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c00258f3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00258f6:	05 60 c9 02 c0       	add    eax,0xc002c960
c00258fb:	8a 00                	mov    al,BYTE PTR [eax]
c00258fd:	0f b6 c0             	movzx  eax,al
c0025900:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025903:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025906:	66 8b 84 00 60 00 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcffa0]
c002590e:	0f b7 c0             	movzx  eax,ax
c0025911:	83 e0 02             	and    eax,0x2
c0025914:	85 c0                	test   eax,eax
c0025916:	74 04                	je     c002591c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025918:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c002591c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002591f:	66 8b 84 00 60 00 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcffa0]
c0025927:	0f b7 c0             	movzx  eax,ax
c002592a:	83 e0 08             	and    eax,0x8
c002592d:	85 c0                	test   eax,eax
c002592f:	74 16                	je     c0025947 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025931:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025935:	eb 10                	jmp    c0025947 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025937:	83 ec 0c             	sub    esp,0xc
c002593a:	68 d8 c2 02 c0       	push   0xc002c2d8
c002593f:	e8 f1 43 ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c0025944:	83 c4 10             	add    esp,0x10
c0025947:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c002594b:	a1 60 1a 03 c0       	mov    eax,ds:0xc0031a60
c0025950:	83 ec 08             	sub    esp,0x8
c0025953:	50                   	push   eax
c0025954:	68 10 c3 02 c0       	push   0xc002c310
c0025959:	e8 6b cc fe ff       	call   c00125c9 <Dbg::kprintf(char const*, ...)>
c002595e:	83 c4 10             	add    esp,0x10
c0025961:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025968:	a1 60 1a 03 c0       	mov    eax,ds:0xc0031a60
c002596d:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025970:	7d 67                	jge    c00259d9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025972:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025975:	8b 04 85 80 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce580]
c002597c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002597f:	83 ec 08             	sub    esp,0x8
c0025982:	52                   	push   edx
c0025983:	50                   	push   eax
c0025984:	e8 d1 fc ff ff       	call   c002565a <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025989:	83 c4 10             	add    esp,0x10
c002598c:	84 c0                	test   al,al
c002598e:	74 44                	je     c00259d4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025990:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025993:	8b 1c 85 80 1a 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffce580]
c002599a:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c002599e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00259a1:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c00259a5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00259a8:	83 c0 20             	add    eax,0x20
c00259ab:	0f b6 f0             	movzx  esi,al
c00259ae:	b8 00 00 00 00       	mov    eax,0x0
c00259b3:	99                   	cdq    
c00259b4:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00259b7:	0f b6 c9             	movzx  ecx,cl
c00259ba:	83 ec 04             	sub    esp,0x4
c00259bd:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00259c0:	57                   	push   edi
c00259c1:	56                   	push   esi
c00259c2:	52                   	push   edx
c00259c3:	50                   	push   eax
c00259c4:	51                   	push   ecx
c00259c5:	53                   	push   ebx
c00259c6:	e8 0b fe ff ff       	call   c00257d6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c00259cb:	83 c4 20             	add    esp,0x20
c00259ce:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c00259d2:	eb 05                	jmp    c00259d9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00259d4:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c00259d7:	eb 8f                	jmp    c0025968 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c00259d9:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c00259dc:	83 f0 01             	xor    eax,0x1
c00259df:	84 c0                	test   al,al
c00259e1:	74 10                	je     c00259f3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c00259e3:	83 ec 0c             	sub    esp,0xc
c00259e6:	68 27 c3 02 c0       	push   0xc002c327
c00259eb:	e8 45 43 ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c00259f0:	83 c4 10             	add    esp,0x10
c00259f3:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c00259f7:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c00259fe:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025a02:	7f 65                	jg     c0025a69 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025a04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a07:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025a0a:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025a11:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025a14:	01 ca                	add    edx,ecx
c0025a16:	83 c2 54             	add    edx,0x54
c0025a19:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025a1d:	85 c0                	test   eax,eax
c0025a1f:	75 43                	jne    c0025a64 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025a21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a24:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025a27:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025a2e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025a31:	01 ca                	add    edx,ecx
c0025a33:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025a36:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025a39:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025a3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a40:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025a43:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025a4a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025a4d:	01 ca                	add    edx,ecx
c0025a4f:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025a55:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025a58:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025a5c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a5f:	83 e8 20             	sub    eax,0x20
c0025a62:	eb 1a                	jmp    c0025a7e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025a64:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025a67:	eb 95                	jmp    c00259fe <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025a69:	83 ec 0c             	sub    esp,0xc
c0025a6c:	68 34 c3 02 c0       	push   0xc002c334
c0025a71:	e8 bf 42 ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c0025a76:	83 c4 10             	add    esp,0x10
c0025a79:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025a7e:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025a81:	5b                   	pop    ebx
c0025a82:	5e                   	pop    esi
c0025a83:	5f                   	pop    edi
c0025a84:	5d                   	pop    ebp
c0025a85:	c3                   	ret    

c0025a86 <PIC::disable()>:
c0025a86:	55                   	push   ebp
c0025a87:	89 e5                	mov    ebp,esp
c0025a89:	83 ec 10             	sub    esp,0x10
c0025a8c:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025a92:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025a96:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025a99:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025a9d:	ee                   	out    dx,al
c0025a9e:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025aa4:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025aa8:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025aab:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025aaf:	ee                   	out    dx,al
c0025ab0:	90                   	nop
c0025ab1:	c9                   	leave  
c0025ab2:	c3                   	ret    
c0025ab3:	90                   	nop

c0025ab4 <PIC::close(int, int, void*)>:
c0025ab4:	55                   	push   ebp
c0025ab5:	89 e5                	mov    ebp,esp
c0025ab7:	83 ec 08             	sub    esp,0x8
c0025aba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025abd:	8b 00                	mov    eax,DWORD PTR [eax]
c0025abf:	83 c0 3c             	add    eax,0x3c
c0025ac2:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ac4:	83 ec 0c             	sub    esp,0xc
c0025ac7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025aca:	ff d0                	call   eax
c0025acc:	83 c4 10             	add    esp,0x10
c0025acf:	b8 00 00 00 00       	mov    eax,0x0
c0025ad4:	c9                   	leave  
c0025ad5:	c3                   	ret    

c0025ad6 <PIC::PIC()>:
c0025ad6:	83 ec 0c             	sub    esp,0xc
c0025ad9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025add:	83 ec 08             	sub    esp,0x8
c0025ae0:	68 e0 c3 02 c0       	push   0xc002c3e0
c0025ae5:	50                   	push   eax
c0025ae6:	e8 85 e8 fe ff       	call   c0014370 <InterruptController::InterruptController(char const*)>
c0025aeb:	83 c4 10             	add    esp,0x10
c0025aee:	ba 0c c4 02 c0       	mov    edx,0xc002c40c
c0025af3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025af7:	89 10                	mov    DWORD PTR [eax],edx
c0025af9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025afd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025b03:	0f b6 d0             	movzx  edx,al
c0025b06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b0a:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025b11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b15:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025b1b:	0f b6 d0             	movzx  edx,al
c0025b1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b22:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025b27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b2b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025b31:	8d 50 01             	lea    edx,[eax+0x1]
c0025b34:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025b38:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025b3e:	0f b6 d0             	movzx  edx,al
c0025b41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b45:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025b49:	83 e1 3f             	and    ecx,0x3f
c0025b4c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025b50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b54:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025b5a:	0f b6 d0             	movzx  edx,al
c0025b5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b61:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025b68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b6c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025b72:	0f b6 d0             	movzx  edx,al
c0025b75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b79:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025b7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b82:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025b88:	8d 50 01             	lea    edx,[eax+0x1]
c0025b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025b8f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025b95:	0f b6 d0             	movzx  edx,al
c0025b98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b9c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025ba0:	83 e1 3f             	and    ecx,0x3f
c0025ba3:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025ba7:	90                   	nop
c0025ba8:	83 c4 0c             	add    esp,0xc
c0025bab:	c3                   	ret    

c0025bac <PIC::ioWait()>:
c0025bac:	eb 00                	jmp    c0025bae <PIC::ioWait()+0x2>
c0025bae:	eb 00                	jmp    c0025bb0 <PIC::ioWait()+0x4>
c0025bb0:	90                   	nop
c0025bb1:	c3                   	ret    

c0025bb2 <PIC::getIRQReg(int)>:
c0025bb2:	55                   	push   ebp
c0025bb3:	89 e5                	mov    ebp,esp
c0025bb5:	83 ec 10             	sub    esp,0x10
c0025bb8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025bbb:	0f b6 c0             	movzx  eax,al
c0025bbe:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025bc4:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025bc7:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025bca:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025bce:	ee                   	out    dx,al
c0025bcf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025bd2:	0f b6 c0             	movzx  eax,al
c0025bd5:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025bdb:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025bde:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025be1:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025be5:	ee                   	out    dx,al
c0025be6:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025bec:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025bf0:	89 c2                	mov    edx,eax
c0025bf2:	ec                   	in     al,dx
c0025bf3:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025bf6:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025bf9:	0f b6 c0             	movzx  eax,al
c0025bfc:	c1 e0 08             	shl    eax,0x8
c0025bff:	89 c1                	mov    ecx,eax
c0025c01:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025c07:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025c0b:	89 c2                	mov    edx,eax
c0025c0d:	ec                   	in     al,dx
c0025c0e:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025c11:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025c14:	0f b6 c0             	movzx  eax,al
c0025c17:	09 c8                	or     eax,ecx
c0025c19:	c9                   	leave  
c0025c1a:	c3                   	ret    
c0025c1b:	90                   	nop

c0025c1c <PIC::eoi(unsigned char)>:
c0025c1c:	55                   	push   ebp
c0025c1d:	89 e5                	mov    ebp,esp
c0025c1f:	83 ec 14             	sub    esp,0x14
c0025c22:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c25:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025c28:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025c2c:	75 1e                	jne    c0025c4c <PIC::eoi(unsigned char)+0x30>
c0025c2e:	6a 0b                	push   0xb
c0025c30:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c33:	e8 7a ff ff ff       	call   c0025bb2 <PIC::getIRQReg(int)>
c0025c38:	83 c4 08             	add    esp,0x8
c0025c3b:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025c3f:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025c43:	25 80 00 00 00       	and    eax,0x80
c0025c48:	85 c0                	test   eax,eax
c0025c4a:	74 5f                	je     c0025cab <PIC::eoi(unsigned char)+0x8f>
c0025c4c:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0025c50:	75 2d                	jne    c0025c7f <PIC::eoi(unsigned char)+0x63>
c0025c52:	6a 0b                	push   0xb
c0025c54:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c57:	e8 56 ff ff ff       	call   c0025bb2 <PIC::getIRQReg(int)>
c0025c5c:	83 c4 08             	add    esp,0x8
c0025c5f:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0025c63:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025c66:	66 85 c0             	test   ax,ax
c0025c69:	78 14                	js     c0025c7f <PIC::eoi(unsigned char)+0x63>
c0025c6b:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0025c71:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0025c75:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025c78:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025c7c:	ee                   	out    dx,al
c0025c7d:	eb 2d                	jmp    c0025cac <PIC::eoi(unsigned char)+0x90>
c0025c7f:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025c83:	76 12                	jbe    c0025c97 <PIC::eoi(unsigned char)+0x7b>
c0025c85:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025c8b:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0025c8f:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025c92:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025c96:	ee                   	out    dx,al
c0025c97:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025c9d:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0025ca1:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025ca4:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025ca8:	ee                   	out    dx,al
c0025ca9:	eb 01                	jmp    c0025cac <PIC::eoi(unsigned char)+0x90>
c0025cab:	90                   	nop
c0025cac:	c9                   	leave  
c0025cad:	c3                   	ret    

c0025cae <PIC::remap()>:
c0025cae:	55                   	push   ebp
c0025caf:	89 e5                	mov    ebp,esp
c0025cb1:	83 ec 48             	sub    esp,0x48
c0025cb4:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0025cbb:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0025cc2:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0025cc8:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0025ccb:	89 c2                	mov    edx,eax
c0025ccd:	ec                   	in     al,dx
c0025cce:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0025cd1:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0025cd4:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0025cd7:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0025cdd:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0025ce0:	89 c2                	mov    edx,eax
c0025ce2:	ec                   	in     al,dx
c0025ce3:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0025ce6:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0025ce9:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0025cec:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0025cf2:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0025cf6:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0025cf9:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0025cfc:	ee                   	out    dx,al
c0025cfd:	83 ec 0c             	sub    esp,0xc
c0025d00:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d03:	e8 a4 fe ff ff       	call   c0025bac <PIC::ioWait()>
c0025d08:	83 c4 10             	add    esp,0x10
c0025d0b:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0025d11:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0025d15:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0025d18:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025d1b:	ee                   	out    dx,al
c0025d1c:	83 ec 0c             	sub    esp,0xc
c0025d1f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d22:	e8 85 fe ff ff       	call   c0025bac <PIC::ioWait()>
c0025d27:	83 c4 10             	add    esp,0x10
c0025d2a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025d2d:	0f b6 c0             	movzx  eax,al
c0025d30:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0025d36:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0025d39:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0025d3c:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0025d3f:	ee                   	out    dx,al
c0025d40:	83 ec 0c             	sub    esp,0xc
c0025d43:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d46:	e8 61 fe ff ff       	call   c0025bac <PIC::ioWait()>
c0025d4b:	83 c4 10             	add    esp,0x10
c0025d4e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025d51:	0f b6 c0             	movzx  eax,al
c0025d54:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0025d5a:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0025d5d:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0025d60:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0025d63:	ee                   	out    dx,al
c0025d64:	83 ec 0c             	sub    esp,0xc
c0025d67:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d6a:	e8 3d fe ff ff       	call   c0025bac <PIC::ioWait()>
c0025d6f:	83 c4 10             	add    esp,0x10
c0025d72:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0025d78:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0025d7c:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0025d7f:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0025d82:	ee                   	out    dx,al
c0025d83:	83 ec 0c             	sub    esp,0xc
c0025d86:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d89:	e8 1e fe ff ff       	call   c0025bac <PIC::ioWait()>
c0025d8e:	83 c4 10             	add    esp,0x10
c0025d91:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0025d97:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0025d9b:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0025d9e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025da1:	ee                   	out    dx,al
c0025da2:	83 ec 0c             	sub    esp,0xc
c0025da5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025da8:	e8 ff fd ff ff       	call   c0025bac <PIC::ioWait()>
c0025dad:	83 c4 10             	add    esp,0x10
c0025db0:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0025db6:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0025dba:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0025dbd:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0025dc0:	ee                   	out    dx,al
c0025dc1:	83 ec 0c             	sub    esp,0xc
c0025dc4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025dc7:	e8 e0 fd ff ff       	call   c0025bac <PIC::ioWait()>
c0025dcc:	83 c4 10             	add    esp,0x10
c0025dcf:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0025dd5:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0025dd9:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0025ddc:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025ddf:	ee                   	out    dx,al
c0025de0:	83 ec 0c             	sub    esp,0xc
c0025de3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025de6:	e8 c1 fd ff ff       	call   c0025bac <PIC::ioWait()>
c0025deb:	83 c4 10             	add    esp,0x10
c0025dee:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0025df2:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0025df8:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0025dfb:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0025dfe:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025e01:	ee                   	out    dx,al
c0025e02:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0025e06:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0025e0c:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0025e0f:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0025e12:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0025e15:	ee                   	out    dx,al
c0025e16:	90                   	nop
c0025e17:	c9                   	leave  
c0025e18:	c3                   	ret    
c0025e19:	90                   	nop

c0025e1a <PIC::open(int, int, void*)>:
c0025e1a:	55                   	push   ebp
c0025e1b:	89 e5                	mov    ebp,esp
c0025e1d:	83 ec 18             	sub    esp,0x18
c0025e20:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0025e26:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0025e2a:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025e2d:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025e31:	ee                   	out    dx,al
c0025e32:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0025e38:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0025e3c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025e3f:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025e43:	ee                   	out    dx,al
c0025e44:	83 ec 0c             	sub    esp,0xc
c0025e47:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e4a:	e8 5f fe ff ff       	call   c0025cae <PIC::remap()>
c0025e4f:	83 c4 10             	add    esp,0x10
c0025e52:	b8 00 00 00 00       	mov    eax,0x0
c0025e57:	c9                   	leave  
c0025e58:	c3                   	ret    
c0025e59:	90                   	nop

c0025e5a <APICTimer::close(int, int, void*)>:
c0025e5a:	b8 00 00 00 00       	mov    eax,0x0
c0025e5f:	c3                   	ret    

c0025e60 <apicTimerHandler(regs*, void*)>:
c0025e60:	83 ec 0c             	sub    esp,0xc
c0025e63:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025e67:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e69:	99                   	cdq    
c0025e6a:	52                   	push   edx
c0025e6b:	50                   	push   eax
c0025e6c:	6a 00                	push   0x0
c0025e6e:	68 00 ca 9a 3b       	push   0x3b9aca00
c0025e73:	e8 8c 07 00 00       	call   c0026604 <__udivdi3>
c0025e78:	83 c4 10             	add    esp,0x10
c0025e7b:	83 ec 08             	sub    esp,0x8
c0025e7e:	52                   	push   edx
c0025e7f:	50                   	push   eax
c0025e80:	e8 42 06 ff ff       	call   c00164c7 <timerHandler(unsigned long long)>
c0025e85:	83 c4 10             	add    esp,0x10
c0025e88:	90                   	nop
c0025e89:	83 c4 0c             	add    esp,0xc
c0025e8c:	c3                   	ret    
c0025e8d:	90                   	nop

c0025e8e <APICTimer::write(int)>:
c0025e8e:	53                   	push   ebx
c0025e8f:	83 ec 28             	sub    esp,0x28
c0025e92:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025e96:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0025e9a:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025ea0:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0025ea5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025eab:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025eb1:	83 ec 0c             	sub    esp,0xc
c0025eb4:	50                   	push   eax
c0025eb5:	e8 de f4 ff ff       	call   c0025398 <APIC::getBase()>
c0025eba:	83 c4 10             	add    esp,0x10
c0025ebd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025ec1:	a1 70 dd 02 c0       	mov    eax,ds:0xc002dd70
c0025ec6:	8b 15 74 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dd74
c0025ecc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025ed0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0025ed4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025ed8:	05 e0 03 00 00       	add    eax,0x3e0
c0025edd:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025ee3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025ee7:	05 80 03 00 00       	add    eax,0x380
c0025eec:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0025ef2:	fb                   	sti    
c0025ef3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ef7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025efb:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0025f00:	83 d2 00             	adc    edx,0x0
c0025f03:	89 c1                	mov    ecx,eax
c0025f05:	89 d3                	mov    ebx,edx
c0025f07:	a1 70 dd 02 c0       	mov    eax,ds:0xc002dd70
c0025f0c:	8b 15 74 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dd74
c0025f12:	39 c8                	cmp    eax,ecx
c0025f14:	89 d0                	mov    eax,edx
c0025f16:	19 d8                	sbb    eax,ebx
c0025f18:	73 02                	jae    c0025f1c <APICTimer::write(int)+0x8e>
c0025f1a:	eb d7                	jmp    c0025ef3 <APICTimer::write(int)+0x65>
c0025f1c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025f20:	05 20 03 00 00       	add    eax,0x320
c0025f25:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0025f2b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025f2f:	05 90 03 00 00       	add    eax,0x390
c0025f34:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f36:	f7 d0                	not    eax
c0025f38:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025f3c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025f40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025f44:	ba 00 00 00 00       	mov    edx,0x0
c0025f49:	f7 f3                	div    ebx
c0025f4b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025f4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025f53:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025f59:	0d 00 00 02 00       	or     eax,0x20000
c0025f5e:	89 c2                	mov    edx,eax
c0025f60:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025f64:	05 20 03 00 00       	add    eax,0x320
c0025f69:	89 10                	mov    DWORD PTR [eax],edx
c0025f6b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025f6f:	05 e0 03 00 00       	add    eax,0x3e0
c0025f74:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025f7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025f7e:	05 80 03 00 00       	add    eax,0x380
c0025f83:	89 c2                	mov    edx,eax
c0025f85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025f89:	89 02                	mov    DWORD PTR [edx],eax
c0025f8b:	90                   	nop
c0025f8c:	83 c4 28             	add    esp,0x28
c0025f8f:	5b                   	pop    ebx
c0025f90:	c3                   	ret    
c0025f91:	90                   	nop

c0025f92 <APICTimer::open(int, int, void*)>:
c0025f92:	57                   	push   edi
c0025f93:	56                   	push   esi
c0025f94:	53                   	push   ebx
c0025f95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f99:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f9b:	83 c0 24             	add    eax,0x24
c0025f9e:	8b 00                	mov    eax,DWORD PTR [eax]
c0025fa0:	83 ec 08             	sub    esp,0x8
c0025fa3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025fa7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025fab:	ff d0                	call   eax
c0025fad:	83 c4 10             	add    esp,0x10
c0025fb0:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0025fb5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025fbb:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025fc1:	83 ec 0c             	sub    esp,0xc
c0025fc4:	50                   	push   eax
c0025fc5:	e8 ce f3 ff ff       	call   c0025398 <APIC::getBase()>
c0025fca:	83 c4 10             	add    esp,0x10
c0025fcd:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0025fd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fd7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025fdd:	0f b6 f8             	movzx  edi,al
c0025fe0:	89 d0                	mov    eax,edx
c0025fe2:	ba 00 00 00 00       	mov    edx,0x0
c0025fe7:	89 c1                	mov    ecx,eax
c0025fe9:	80 e5 ff             	and    ch,0xff
c0025fec:	89 cb                	mov    ebx,ecx
c0025fee:	0f b6 f2             	movzx  esi,dl
c0025ff1:	89 d8                	mov    eax,ebx
c0025ff3:	89 f2                	mov    edx,esi
c0025ff5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025ff9:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025ffc:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026000:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026004:	83 e0 00             	and    eax,0x0
c0026007:	09 d0                	or     eax,edx
c0026009:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002600d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026011:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026017:	8d 50 01             	lea    edx,[eax+0x1]
c002601a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002601e:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026024:	0f b6 d0             	movzx  edx,al
c0026027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002602b:	83 c2 08             	add    edx,0x8
c002602e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026032:	0f b6 c9             	movzx  ecx,cl
c0026035:	81 c9 00 00 01 00    	or     ecx,0x10000
c002603b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002603f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026043:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026047:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002604d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026051:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026055:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002605b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002605f:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026065:	83 ec 0c             	sub    esp,0xc
c0026068:	51                   	push   ecx
c0026069:	6a 01                	push   0x1
c002606b:	68 60 5e 02 c0       	push   0xc0025e60
c0026070:	52                   	push   edx
c0026071:	50                   	push   eax
c0026072:	e8 03 d9 fe ff       	call   c001397a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026077:	83 c4 20             	add    esp,0x20
c002607a:	89 c2                	mov    edx,eax
c002607c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026080:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026086:	b8 00 00 00 00       	mov    eax,0x0
c002608b:	5b                   	pop    ebx
c002608c:	5e                   	pop    esi
c002608d:	5f                   	pop    edi
c002608e:	c3                   	ret    
c002608f:	90                   	nop

c0026090 <APICTimer::APICTimer()>:
c0026090:	83 ec 0c             	sub    esp,0xc
c0026093:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026097:	83 ec 08             	sub    esp,0x8
c002609a:	68 4c c4 02 c0       	push   0xc002c44c
c002609f:	50                   	push   eax
c00260a0:	e8 93 03 ff ff       	call   c0016438 <Timer::Timer(char const*)>
c00260a5:	83 c4 10             	add    esp,0x10
c00260a8:	ba 60 c4 02 c0       	mov    edx,0xc002c460
c00260ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260b1:	89 10                	mov    DWORD PTR [eax],edx
c00260b3:	90                   	nop
c00260b4:	83 c4 0c             	add    esp,0xc
c00260b7:	c3                   	ret    

c00260b8 <PIT::write(int)>:
c00260b8:	83 ec 10             	sub    esp,0x10
c00260bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00260bf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00260c3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00260c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00260cd:	a3 a4 1a 03 c0       	mov    ds:0xc0031aa4,eax
c00260d2:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00260d7:	99                   	cdq    
c00260d8:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00260dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00260e0:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00260e7:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00260ec:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00260f0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00260f5:	ee                   	out    dx,al
c00260f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00260fa:	0f b6 c0             	movzx  eax,al
c00260fd:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026104:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026108:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002610c:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026111:	ee                   	out    dx,al
c0026112:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026116:	c1 f8 08             	sar    eax,0x8
c0026119:	0f b6 c0             	movzx  eax,al
c002611c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026123:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026127:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002612b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026130:	ee                   	out    dx,al
c0026131:	90                   	nop
c0026132:	83 c4 10             	add    esp,0x10
c0026135:	c3                   	ret    

c0026136 <pitHandler(regs*, void*)>:
c0026136:	83 ec 0c             	sub    esp,0xc
c0026139:	a1 a4 1a 03 c0       	mov    eax,ds:0xc0031aa4
c002613e:	99                   	cdq    
c002613f:	52                   	push   edx
c0026140:	50                   	push   eax
c0026141:	6a 00                	push   0x0
c0026143:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026148:	e8 b7 04 00 00       	call   c0026604 <__udivdi3>
c002614d:	83 c4 10             	add    esp,0x10
c0026150:	83 ec 08             	sub    esp,0x8
c0026153:	52                   	push   edx
c0026154:	50                   	push   eax
c0026155:	e8 6d 03 ff ff       	call   c00164c7 <timerHandler(unsigned long long)>
c002615a:	83 c4 10             	add    esp,0x10
c002615d:	90                   	nop
c002615e:	83 c4 0c             	add    esp,0xc
c0026161:	c3                   	ret    

c0026162 <PIT::open(int, int, void*)>:
c0026162:	83 ec 0c             	sub    esp,0xc
c0026165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026169:	8b 00                	mov    eax,DWORD PTR [eax]
c002616b:	83 c0 24             	add    eax,0x24
c002616e:	8b 00                	mov    eax,DWORD PTR [eax]
c0026170:	83 ec 08             	sub    esp,0x8
c0026173:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026177:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002617b:	ff d0                	call   eax
c002617d:	83 c4 10             	add    esp,0x10
c0026180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026184:	83 ec 0c             	sub    esp,0xc
c0026187:	6a 00                	push   0x0
c0026189:	6a 01                	push   0x1
c002618b:	68 36 61 02 c0       	push   0xc0026136
c0026190:	6a 00                	push   0x0
c0026192:	50                   	push   eax
c0026193:	e8 e2 d7 fe ff       	call   c001397a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026198:	83 c4 20             	add    esp,0x20
c002619b:	89 c2                	mov    edx,eax
c002619d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261a1:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00261a7:	b8 00 00 00 00       	mov    eax,0x0
c00261ac:	83 c4 0c             	add    esp,0xc
c00261af:	c3                   	ret    

c00261b0 <PIT::close(int, int, void*)>:
c00261b0:	83 ec 0c             	sub    esp,0xc
c00261b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261b7:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00261c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261c5:	6a 01                	push   0x1
c00261c7:	68 36 61 02 c0       	push   0xc0026136
c00261cc:	6a 00                	push   0x0
c00261ce:	50                   	push   eax
c00261cf:	e8 f0 d7 fe ff       	call   c00139c4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00261d4:	83 c4 10             	add    esp,0x10
c00261d7:	b8 00 00 00 00       	mov    eax,0x0
c00261dc:	83 c4 0c             	add    esp,0xc
c00261df:	c3                   	ret    

c00261e0 <PIT::PIT()>:
c00261e0:	83 ec 0c             	sub    esp,0xc
c00261e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261e7:	83 ec 08             	sub    esp,0x8
c00261ea:	68 88 c4 02 c0       	push   0xc002c488
c00261ef:	50                   	push   eax
c00261f0:	e8 43 02 ff ff       	call   c0016438 <Timer::Timer(char const*)>
c00261f5:	83 c4 10             	add    esp,0x10
c00261f8:	ba b0 c4 02 c0       	mov    edx,0xc002c4b0
c00261fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026201:	89 10                	mov    DWORD PTR [eax],edx
c0026203:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026207:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002620d:	0f b6 d0             	movzx  edx,al
c0026210:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026214:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c002621b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002621f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026225:	0f b6 d0             	movzx  edx,al
c0026228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002622c:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026231:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026235:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002623b:	8d 50 01             	lea    edx,[eax+0x1]
c002623e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026242:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026248:	0f b6 d0             	movzx  edx,al
c002624b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002624f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026253:	83 e1 3f             	and    ecx,0x3f
c0026256:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002625a:	90                   	nop
c002625b:	83 c4 0c             	add    esp,0xc
c002625e:	c3                   	ret    
c002625f:	90                   	nop

c0026260 <avxDetect>:
c0026260:	b8 00 00 00 00       	mov    eax,0x0
c0026265:	c3                   	ret    

c0026266 <avxSave>:
c0026266:	c3                   	ret    

c0026267 <avxLoad>:
c0026267:	c3                   	ret    

c0026268 <avxInit>:
c0026268:	c3                   	ret    

c0026269 <avxClose>:
c0026269:	c3                   	ret    

c002626a <wouldSheSayYes>:
c002626a:	c3                   	ret    
c002626b:	49                   	dec    ecx
c002626c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026270:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026274:	75 20                	jne    c0026296 <sseDetect.noSSE+0x1>
c0026276:	4e                   	dec    esi
c0026277:	79 61                	jns    c00262da <x87Detect+0x14>
c0026279:	68 2e 2e 2e 00       	push   0x2e2e2e
c002627e:	66 90                	xchg   ax,ax

c0026280 <absolutelyNoChanceInHell>:
c0026280:	b8 01 00 00 00       	mov    eax,0x1
c0026285:	0f a2                	cpuid  
c0026287:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002628d:	74 06                	je     c0026295 <sseDetect.noSSE>
c002628f:	b8 01 00 00 00       	mov    eax,0x1
c0026294:	c3                   	ret    

c0026295 <sseDetect.noSSE>:
c0026295:	31 c0                	xor    eax,eax
c0026297:	c3                   	ret    

c0026298 <sseSave>:
c0026298:	0f ae 44 24 04       	fxsave [esp+0x4]
c002629d:	c3                   	ret    

c002629e <sseLoad>:
c002629e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c00262a3:	c3                   	ret    

c00262a4 <sseInit>:
c00262a4:	e8 49 00 00 00       	call   c00262f2 <x87Init>
c00262a9:	0f 20 e0             	mov    eax,cr4
c00262ac:	66 0d 00 06          	or     ax,0x600
c00262b0:	0f 22 e0             	mov    cr4,eax
c00262b3:	c3                   	ret    

c00262b4 <sseClose>:
c00262b4:	c3                   	ret    
c00262b5:	66 90                	xchg   ax,ax
c00262b7:	66 90                	xchg   ax,ax
c00262b9:	66 90                	xchg   ax,ax
c00262bb:	66 90                	xchg   ax,ax
c00262bd:	66 90                	xchg   ax,ax
c00262bf:	90                   	nop

c00262c0 <value_37F>:
c00262c0:	7f 03                	jg     c00262c5 <value_37A+0x1>

c00262c2 <value_37E>:
c00262c2:	7e 03                	jle    c00262c7 <x87Detect+0x1>

c00262c4 <value_37A>:
c00262c4:	7a 03                	jp     c00262c9 <x87Detect+0x3>

c00262c6 <x87Detect>:
c00262c6:	b8 01 00 00 00       	mov    eax,0x1
c00262cb:	0f a2                	cpuid  
c00262cd:	f7 c2 01 00 00 00    	test   edx,0x1
c00262d3:	74 06                	je     c00262db <x87Detect.nox87>
c00262d5:	b8 01 00 00 00       	mov    eax,0x1
c00262da:	c3                   	ret    

c00262db <x87Detect.nox87>:
c00262db:	b8 00 00 00 00       	mov    eax,0x0
c00262e0:	c3                   	ret    

c00262e1 <x87Save>:
c00262e1:	55                   	push   ebp
c00262e2:	89 e5                	mov    ebp,esp
c00262e4:	9b dd 75 08          	fsave  [ebp+0x8]
c00262e8:	c9                   	leave  
c00262e9:	c3                   	ret    

c00262ea <x87Load>:
c00262ea:	55                   	push   ebp
c00262eb:	89 e5                	mov    ebp,esp
c00262ed:	dd 65 08             	frstor [ebp+0x8]
c00262f0:	c9                   	leave  
c00262f1:	c3                   	ret    

c00262f2 <x87Init>:
c00262f2:	9b db e3             	finit  
c00262f5:	0f 20 c0             	mov    eax,cr0
c00262f8:	66 25 fb ff          	and    ax,0xfffb
c00262fc:	66 0d 22 00          	or     ax,0x22
c0026300:	0f 22 c0             	mov    cr0,eax
c0026303:	0f 06                	clts   
c0026305:	d9 2d c4 62 02 c0    	fldcw  WORD PTR ds:0xc00262c4
c002630b:	c3                   	ret    

c002630c <x87Close>:
c002630c:	c3                   	ret    
c002630d:	66 90                	xchg   ax,ax
c002630f:	90                   	nop

c0026310 <__do_global_ctors_aux>:
c0026310:	a1 04 8f 02 c0       	mov    eax,ds:0xc0028f04
c0026315:	83 f8 ff             	cmp    eax,0xffffffff
c0026318:	74 1a                	je     c0026334 <__do_global_ctors_aux+0x24>
c002631a:	55                   	push   ebp
c002631b:	89 e5                	mov    ebp,esp
c002631d:	53                   	push   ebx
c002631e:	52                   	push   edx
c002631f:	bb 04 8f 02 c0       	mov    ebx,0xc0028f04
c0026324:	ff d0                	call   eax
c0026326:	83 eb 04             	sub    ebx,0x4
c0026329:	8b 03                	mov    eax,DWORD PTR [ebx]
c002632b:	83 f8 ff             	cmp    eax,0xffffffff
c002632e:	75 f4                	jne    c0026324 <__do_global_ctors_aux+0x14>
c0026330:	58                   	pop    eax
c0026331:	5b                   	pop    ebx
c0026332:	5d                   	pop    ebp
c0026333:	c3                   	ret    
c0026334:	c3                   	ret    
c0026335:	66 90                	xchg   ax,ax
c0026337:	90                   	nop

c0026338 <__divdi3>:
c0026338:	55                   	push   ebp
c0026339:	57                   	push   edi
c002633a:	56                   	push   esi
c002633b:	53                   	push   ebx
c002633c:	83 ec 1c             	sub    esp,0x1c
c002633f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0026343:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026347:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002634a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002634e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0026352:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026356:	85 db                	test   ebx,ebx
c0026358:	0f 88 8e 00 00 00    	js     c00263ec <__divdi3+0xb4>
c002635e:	89 dd                	mov    ebp,ebx
c0026360:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026368:	89 d3                	mov    ebx,edx
c002636a:	85 d2                	test   edx,edx
c002636c:	79 0d                	jns    c002637b <__divdi3+0x43>
c002636e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0026372:	f7 d8                	neg    eax
c0026374:	83 d2 00             	adc    edx,0x0
c0026377:	f7 da                	neg    edx
c0026379:	89 d3                	mov    ebx,edx
c002637b:	89 c7                	mov    edi,eax
c002637d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026380:	85 db                	test   ebx,ebx
c0026382:	75 48                	jne    c00263cc <__divdi3+0x94>
c0026384:	39 ef                	cmp    edi,ebp
c0026386:	76 24                	jbe    c00263ac <__divdi3+0x74>
c0026388:	89 ea                	mov    edx,ebp
c002638a:	f7 f7                	div    edi
c002638c:	89 c1                	mov    ecx,eax
c002638e:	31 f6                	xor    esi,esi
c0026390:	89 c8                	mov    eax,ecx
c0026392:	89 f2                	mov    edx,esi
c0026394:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026398:	85 c9                	test   ecx,ecx
c002639a:	74 07                	je     c00263a3 <__divdi3+0x6b>
c002639c:	f7 d8                	neg    eax
c002639e:	83 d2 00             	adc    edx,0x0
c00263a1:	f7 da                	neg    edx
c00263a3:	83 c4 1c             	add    esp,0x1c
c00263a6:	5b                   	pop    ebx
c00263a7:	5e                   	pop    esi
c00263a8:	5f                   	pop    edi
c00263a9:	5d                   	pop    ebp
c00263aa:	c3                   	ret    
c00263ab:	90                   	nop
c00263ac:	85 ff                	test   edi,edi
c00263ae:	75 0b                	jne    c00263bb <__divdi3+0x83>
c00263b0:	b8 01 00 00 00       	mov    eax,0x1
c00263b5:	31 d2                	xor    edx,edx
c00263b7:	f7 f3                	div    ebx
c00263b9:	89 c7                	mov    edi,eax
c00263bb:	31 d2                	xor    edx,edx
c00263bd:	89 e8                	mov    eax,ebp
c00263bf:	f7 f7                	div    edi
c00263c1:	89 c6                	mov    esi,eax
c00263c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00263c6:	f7 f7                	div    edi
c00263c8:	89 c1                	mov    ecx,eax
c00263ca:	eb c4                	jmp    c0026390 <__divdi3+0x58>
c00263cc:	39 eb                	cmp    ebx,ebp
c00263ce:	77 3c                	ja     c002640c <__divdi3+0xd4>
c00263d0:	0f bd f3             	bsr    esi,ebx
c00263d3:	83 f6 1f             	xor    esi,0x1f
c00263d6:	75 40                	jne    c0026418 <__divdi3+0xe0>
c00263d8:	39 eb                	cmp    ebx,ebp
c00263da:	72 09                	jb     c00263e5 <__divdi3+0xad>
c00263dc:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00263df:	0f 87 97 00 00 00    	ja     c002647c <__divdi3+0x144>
c00263e5:	b9 01 00 00 00       	mov    ecx,0x1
c00263ea:	eb a4                	jmp    c0026390 <__divdi3+0x58>
c00263ec:	f7 d9                	neg    ecx
c00263ee:	83 d3 00             	adc    ebx,0x0
c00263f1:	f7 db                	neg    ebx
c00263f3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00263f6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00263fa:	89 dd                	mov    ebp,ebx
c00263fc:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0026404:	e9 5f ff ff ff       	jmp    c0026368 <__divdi3+0x30>
c0026409:	8d 76 00             	lea    esi,[esi+0x0]
c002640c:	31 f6                	xor    esi,esi
c002640e:	31 c9                	xor    ecx,ecx
c0026410:	e9 7b ff ff ff       	jmp    c0026390 <__divdi3+0x58>
c0026415:	8d 76 00             	lea    esi,[esi+0x0]
c0026418:	b8 20 00 00 00       	mov    eax,0x20
c002641d:	29 f0                	sub    eax,esi
c002641f:	89 f1                	mov    ecx,esi
c0026421:	d3 e3                	shl    ebx,cl
c0026423:	89 fa                	mov    edx,edi
c0026425:	88 c1                	mov    cl,al
c0026427:	d3 ea                	shr    edx,cl
c0026429:	09 da                	or     edx,ebx
c002642b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002642f:	89 f1                	mov    ecx,esi
c0026431:	d3 e7                	shl    edi,cl
c0026433:	89 eb                	mov    ebx,ebp
c0026435:	88 c1                	mov    cl,al
c0026437:	d3 eb                	shr    ebx,cl
c0026439:	89 f1                	mov    ecx,esi
c002643b:	d3 e5                	shl    ebp,cl
c002643d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026440:	88 c1                	mov    cl,al
c0026442:	d3 ea                	shr    edx,cl
c0026444:	09 d5                	or     ebp,edx
c0026446:	89 e8                	mov    eax,ebp
c0026448:	89 da                	mov    edx,ebx
c002644a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002644e:	89 d3                	mov    ebx,edx
c0026450:	89 c5                	mov    ebp,eax
c0026452:	f7 e7                	mul    edi
c0026454:	39 d3                	cmp    ebx,edx
c0026456:	72 18                	jb     c0026470 <__divdi3+0x138>
c0026458:	74 0a                	je     c0026464 <__divdi3+0x12c>
c002645a:	89 e9                	mov    ecx,ebp
c002645c:	31 f6                	xor    esi,esi
c002645e:	e9 2d ff ff ff       	jmp    c0026390 <__divdi3+0x58>
c0026463:	90                   	nop
c0026464:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0026467:	89 f1                	mov    ecx,esi
c0026469:	d3 e7                	shl    edi,cl
c002646b:	39 c7                	cmp    edi,eax
c002646d:	73 eb                	jae    c002645a <__divdi3+0x122>
c002646f:	90                   	nop
c0026470:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0026473:	31 f6                	xor    esi,esi
c0026475:	e9 16 ff ff ff       	jmp    c0026390 <__divdi3+0x58>
c002647a:	66 90                	xchg   ax,ax
c002647c:	31 c9                	xor    ecx,ecx
c002647e:	e9 0d ff ff ff       	jmp    c0026390 <__divdi3+0x58>
c0026483:	90                   	nop

c0026484 <__moddi3>:
c0026484:	55                   	push   ebp
c0026485:	57                   	push   edi
c0026486:	56                   	push   esi
c0026487:	53                   	push   ebx
c0026488:	83 ec 2c             	sub    esp,0x2c
c002648b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002648f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0026493:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0026497:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002649b:	85 db                	test   ebx,ebx
c002649d:	0f 88 85 00 00 00    	js     c0026528 <__moddi3+0xa4>
c00264a3:	89 de                	mov    esi,ebx
c00264a5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00264ad:	89 d7                	mov    edi,edx
c00264af:	85 d2                	test   edx,edx
c00264b1:	79 09                	jns    c00264bc <__moddi3+0x38>
c00264b3:	f7 d8                	neg    eax
c00264b5:	83 d2 00             	adc    edx,0x0
c00264b8:	f7 da                	neg    edx
c00264ba:	89 d7                	mov    edi,edx
c00264bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00264c0:	89 cd                	mov    ebp,ecx
c00264c2:	85 ff                	test   edi,edi
c00264c4:	75 52                	jne    c0026518 <__moddi3+0x94>
c00264c6:	89 c3                	mov    ebx,eax
c00264c8:	39 f0                	cmp    eax,esi
c00264ca:	76 24                	jbe    c00264f0 <__moddi3+0x6c>
c00264cc:	89 c8                	mov    eax,ecx
c00264ce:	89 f2                	mov    edx,esi
c00264d0:	f7 f3                	div    ebx
c00264d2:	89 d6                	mov    esi,edx
c00264d4:	89 f0                	mov    eax,esi
c00264d6:	31 d2                	xor    edx,edx
c00264d8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00264dc:	85 c9                	test   ecx,ecx
c00264de:	74 07                	je     c00264e7 <__moddi3+0x63>
c00264e0:	f7 d8                	neg    eax
c00264e2:	83 d2 00             	adc    edx,0x0
c00264e5:	f7 da                	neg    edx
c00264e7:	83 c4 2c             	add    esp,0x2c
c00264ea:	5b                   	pop    ebx
c00264eb:	5e                   	pop    esi
c00264ec:	5f                   	pop    edi
c00264ed:	5d                   	pop    ebp
c00264ee:	c3                   	ret    
c00264ef:	90                   	nop
c00264f0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00264f4:	85 db                	test   ebx,ebx
c00264f6:	75 0d                	jne    c0026505 <__moddi3+0x81>
c00264f8:	b8 01 00 00 00       	mov    eax,0x1
c00264fd:	31 d2                	xor    edx,edx
c00264ff:	f7 f7                	div    edi
c0026501:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026505:	89 f0                	mov    eax,esi
c0026507:	31 d2                	xor    edx,edx
c0026509:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002650d:	f7 f7                	div    edi
c002650f:	89 e8                	mov    eax,ebp
c0026511:	f7 f7                	div    edi
c0026513:	89 d6                	mov    esi,edx
c0026515:	eb bd                	jmp    c00264d4 <__moddi3+0x50>
c0026517:	90                   	nop
c0026518:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002651c:	39 f7                	cmp    edi,esi
c002651e:	76 20                	jbe    c0026540 <__moddi3+0xbc>
c0026520:	89 c8                	mov    eax,ecx
c0026522:	89 f2                	mov    edx,esi
c0026524:	eb b2                	jmp    c00264d8 <__moddi3+0x54>
c0026526:	66 90                	xchg   ax,ax
c0026528:	f7 d9                	neg    ecx
c002652a:	83 d3 00             	adc    ebx,0x0
c002652d:	f7 db                	neg    ebx
c002652f:	89 de                	mov    esi,ebx
c0026531:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026539:	e9 6f ff ff ff       	jmp    c00264ad <__moddi3+0x29>
c002653e:	66 90                	xchg   ax,ax
c0026540:	0f bd c7             	bsr    eax,edi
c0026543:	83 f0 1f             	xor    eax,0x1f
c0026546:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002654a:	75 24                	jne    c0026570 <__moddi3+0xec>
c002654c:	39 f7                	cmp    edi,esi
c002654e:	72 06                	jb     c0026556 <__moddi3+0xd2>
c0026550:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0026554:	77 0c                	ja     c0026562 <__moddi3+0xde>
c0026556:	89 e9                	mov    ecx,ebp
c0026558:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002655c:	19 fe                	sbb    esi,edi
c002655e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026562:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026566:	89 f2                	mov    edx,esi
c0026568:	e9 6b ff ff ff       	jmp    c00264d8 <__moddi3+0x54>
c002656d:	8d 76 00             	lea    esi,[esi+0x0]
c0026570:	b8 20 00 00 00       	mov    eax,0x20
c0026575:	89 c2                	mov    edx,eax
c0026577:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002657b:	29 da                	sub    edx,ebx
c002657d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026581:	88 d9                	mov    cl,bl
c0026583:	d3 e7                	shl    edi,cl
c0026585:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026589:	88 d1                	mov    cl,dl
c002658b:	d3 e8                	shr    eax,cl
c002658d:	09 c7                	or     edi,eax
c002658f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0026593:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026597:	89 d8                	mov    eax,ebx
c0026599:	88 d9                	mov    cl,bl
c002659b:	d3 e7                	shl    edi,cl
c002659d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00265a1:	89 f3                	mov    ebx,esi
c00265a3:	88 d1                	mov    cl,dl
c00265a5:	d3 eb                	shr    ebx,cl
c00265a7:	89 c7                	mov    edi,eax
c00265a9:	88 c1                	mov    cl,al
c00265ab:	d3 e6                	shl    esi,cl
c00265ad:	89 e8                	mov    eax,ebp
c00265af:	88 d1                	mov    cl,dl
c00265b1:	d3 e8                	shr    eax,cl
c00265b3:	09 f0                	or     eax,esi
c00265b5:	89 f9                	mov    ecx,edi
c00265b7:	d3 e5                	shl    ebp,cl
c00265b9:	89 da                	mov    edx,ebx
c00265bb:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00265bf:	89 d3                	mov    ebx,edx
c00265c1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00265c5:	89 c6                	mov    esi,eax
c00265c7:	89 d1                	mov    ecx,edx
c00265c9:	39 d3                	cmp    ebx,edx
c00265cb:	72 27                	jb     c00265f4 <__moddi3+0x170>
c00265cd:	74 21                	je     c00265f0 <__moddi3+0x16c>
c00265cf:	29 f5                	sub    ebp,esi
c00265d1:	19 cb                	sbb    ebx,ecx
c00265d3:	89 de                	mov    esi,ebx
c00265d5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00265d9:	d3 e6                	shl    esi,cl
c00265db:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00265df:	89 f9                	mov    ecx,edi
c00265e1:	d3 ed                	shr    ebp,cl
c00265e3:	09 ee                	or     esi,ebp
c00265e5:	89 f0                	mov    eax,esi
c00265e7:	d3 eb                	shr    ebx,cl
c00265e9:	89 da                	mov    edx,ebx
c00265eb:	e9 e8 fe ff ff       	jmp    c00264d8 <__moddi3+0x54>
c00265f0:	39 c5                	cmp    ebp,eax
c00265f2:	73 db                	jae    c00265cf <__moddi3+0x14b>
c00265f4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00265f8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00265fc:	89 d1                	mov    ecx,edx
c00265fe:	89 c6                	mov    esi,eax
c0026600:	eb cd                	jmp    c00265cf <__moddi3+0x14b>
c0026602:	66 90                	xchg   ax,ax

c0026604 <__udivdi3>:
c0026604:	55                   	push   ebp
c0026605:	57                   	push   edi
c0026606:	56                   	push   esi
c0026607:	53                   	push   ebx
c0026608:	83 ec 1c             	sub    esp,0x1c
c002660b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002660f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026613:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026617:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002661b:	85 d2                	test   edx,edx
c002661d:	75 41                	jne    c0026660 <__udivdi3+0x5c>
c002661f:	39 f7                	cmp    edi,esi
c0026621:	76 15                	jbe    c0026638 <__udivdi3+0x34>
c0026623:	89 e8                	mov    eax,ebp
c0026625:	89 f2                	mov    edx,esi
c0026627:	f7 f7                	div    edi
c0026629:	31 db                	xor    ebx,ebx
c002662b:	89 da                	mov    edx,ebx
c002662d:	83 c4 1c             	add    esp,0x1c
c0026630:	5b                   	pop    ebx
c0026631:	5e                   	pop    esi
c0026632:	5f                   	pop    edi
c0026633:	5d                   	pop    ebp
c0026634:	c3                   	ret    
c0026635:	8d 76 00             	lea    esi,[esi+0x0]
c0026638:	89 f9                	mov    ecx,edi
c002663a:	85 ff                	test   edi,edi
c002663c:	75 0b                	jne    c0026649 <__udivdi3+0x45>
c002663e:	b8 01 00 00 00       	mov    eax,0x1
c0026643:	31 d2                	xor    edx,edx
c0026645:	f7 f7                	div    edi
c0026647:	89 c1                	mov    ecx,eax
c0026649:	31 d2                	xor    edx,edx
c002664b:	89 f0                	mov    eax,esi
c002664d:	f7 f1                	div    ecx
c002664f:	89 c3                	mov    ebx,eax
c0026651:	89 e8                	mov    eax,ebp
c0026653:	f7 f1                	div    ecx
c0026655:	89 da                	mov    edx,ebx
c0026657:	83 c4 1c             	add    esp,0x1c
c002665a:	5b                   	pop    ebx
c002665b:	5e                   	pop    esi
c002665c:	5f                   	pop    edi
c002665d:	5d                   	pop    ebp
c002665e:	c3                   	ret    
c002665f:	90                   	nop
c0026660:	39 f2                	cmp    edx,esi
c0026662:	77 1c                	ja     c0026680 <__udivdi3+0x7c>
c0026664:	0f bd da             	bsr    ebx,edx
c0026667:	83 f3 1f             	xor    ebx,0x1f
c002666a:	75 24                	jne    c0026690 <__udivdi3+0x8c>
c002666c:	39 f2                	cmp    edx,esi
c002666e:	72 08                	jb     c0026678 <__udivdi3+0x74>
c0026670:	39 ef                	cmp    edi,ebp
c0026672:	0f 87 84 00 00 00    	ja     c00266fc <__udivdi3+0xf8>
c0026678:	b8 01 00 00 00       	mov    eax,0x1
c002667d:	eb ac                	jmp    c002662b <__udivdi3+0x27>
c002667f:	90                   	nop
c0026680:	31 db                	xor    ebx,ebx
c0026682:	31 c0                	xor    eax,eax
c0026684:	89 da                	mov    edx,ebx
c0026686:	83 c4 1c             	add    esp,0x1c
c0026689:	5b                   	pop    ebx
c002668a:	5e                   	pop    esi
c002668b:	5f                   	pop    edi
c002668c:	5d                   	pop    ebp
c002668d:	c3                   	ret    
c002668e:	66 90                	xchg   ax,ax
c0026690:	b8 20 00 00 00       	mov    eax,0x20
c0026695:	29 d8                	sub    eax,ebx
c0026697:	88 d9                	mov    cl,bl
c0026699:	d3 e2                	shl    edx,cl
c002669b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002669f:	89 fa                	mov    edx,edi
c00266a1:	88 c1                	mov    cl,al
c00266a3:	d3 ea                	shr    edx,cl
c00266a5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00266a9:	09 d1                	or     ecx,edx
c00266ab:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00266af:	88 d9                	mov    cl,bl
c00266b1:	d3 e7                	shl    edi,cl
c00266b3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00266b7:	89 f7                	mov    edi,esi
c00266b9:	88 c1                	mov    cl,al
c00266bb:	d3 ef                	shr    edi,cl
c00266bd:	88 d9                	mov    cl,bl
c00266bf:	d3 e6                	shl    esi,cl
c00266c1:	89 ea                	mov    edx,ebp
c00266c3:	88 c1                	mov    cl,al
c00266c5:	d3 ea                	shr    edx,cl
c00266c7:	09 d6                	or     esi,edx
c00266c9:	89 f0                	mov    eax,esi
c00266cb:	89 fa                	mov    edx,edi
c00266cd:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00266d1:	89 d7                	mov    edi,edx
c00266d3:	89 c6                	mov    esi,eax
c00266d5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00266d9:	39 d7                	cmp    edi,edx
c00266db:	72 13                	jb     c00266f0 <__udivdi3+0xec>
c00266dd:	74 09                	je     c00266e8 <__udivdi3+0xe4>
c00266df:	89 f0                	mov    eax,esi
c00266e1:	31 db                	xor    ebx,ebx
c00266e3:	e9 43 ff ff ff       	jmp    c002662b <__udivdi3+0x27>
c00266e8:	88 d9                	mov    cl,bl
c00266ea:	d3 e5                	shl    ebp,cl
c00266ec:	39 c5                	cmp    ebp,eax
c00266ee:	73 ef                	jae    c00266df <__udivdi3+0xdb>
c00266f0:	8d 46 ff             	lea    eax,[esi-0x1]
c00266f3:	31 db                	xor    ebx,ebx
c00266f5:	e9 31 ff ff ff       	jmp    c002662b <__udivdi3+0x27>
c00266fa:	66 90                	xchg   ax,ax
c00266fc:	31 c0                	xor    eax,eax
c00266fe:	e9 28 ff ff ff       	jmp    c002662b <__udivdi3+0x27>
c0026703:	90                   	nop

c0026704 <__umoddi3>:
c0026704:	55                   	push   ebp
c0026705:	57                   	push   edi
c0026706:	56                   	push   esi
c0026707:	53                   	push   ebx
c0026708:	83 ec 1c             	sub    esp,0x1c
c002670b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002670f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026713:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026717:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002671b:	89 da                	mov    edx,ebx
c002671d:	85 c0                	test   eax,eax
c002671f:	75 37                	jne    c0026758 <__umoddi3+0x54>
c0026721:	39 df                	cmp    edi,ebx
c0026723:	76 13                	jbe    c0026738 <__umoddi3+0x34>
c0026725:	89 f0                	mov    eax,esi
c0026727:	f7 f7                	div    edi
c0026729:	89 d0                	mov    eax,edx
c002672b:	31 d2                	xor    edx,edx
c002672d:	83 c4 1c             	add    esp,0x1c
c0026730:	5b                   	pop    ebx
c0026731:	5e                   	pop    esi
c0026732:	5f                   	pop    edi
c0026733:	5d                   	pop    ebp
c0026734:	c3                   	ret    
c0026735:	8d 76 00             	lea    esi,[esi+0x0]
c0026738:	89 fd                	mov    ebp,edi
c002673a:	85 ff                	test   edi,edi
c002673c:	75 0b                	jne    c0026749 <__umoddi3+0x45>
c002673e:	b8 01 00 00 00       	mov    eax,0x1
c0026743:	31 d2                	xor    edx,edx
c0026745:	f7 f7                	div    edi
c0026747:	89 c5                	mov    ebp,eax
c0026749:	89 d8                	mov    eax,ebx
c002674b:	31 d2                	xor    edx,edx
c002674d:	f7 f5                	div    ebp
c002674f:	89 f0                	mov    eax,esi
c0026751:	f7 f5                	div    ebp
c0026753:	89 d0                	mov    eax,edx
c0026755:	eb d4                	jmp    c002672b <__umoddi3+0x27>
c0026757:	90                   	nop
c0026758:	89 f1                	mov    ecx,esi
c002675a:	39 d8                	cmp    eax,ebx
c002675c:	76 0a                	jbe    c0026768 <__umoddi3+0x64>
c002675e:	89 f0                	mov    eax,esi
c0026760:	83 c4 1c             	add    esp,0x1c
c0026763:	5b                   	pop    ebx
c0026764:	5e                   	pop    esi
c0026765:	5f                   	pop    edi
c0026766:	5d                   	pop    ebp
c0026767:	c3                   	ret    
c0026768:	0f bd e8             	bsr    ebp,eax
c002676b:	83 f5 1f             	xor    ebp,0x1f
c002676e:	75 1c                	jne    c002678c <__umoddi3+0x88>
c0026770:	39 d8                	cmp    eax,ebx
c0026772:	72 04                	jb     c0026778 <__umoddi3+0x74>
c0026774:	39 f7                	cmp    edi,esi
c0026776:	77 08                	ja     c0026780 <__umoddi3+0x7c>
c0026778:	89 da                	mov    edx,ebx
c002677a:	29 fe                	sub    esi,edi
c002677c:	19 c2                	sbb    edx,eax
c002677e:	89 f1                	mov    ecx,esi
c0026780:	89 c8                	mov    eax,ecx
c0026782:	83 c4 1c             	add    esp,0x1c
c0026785:	5b                   	pop    ebx
c0026786:	5e                   	pop    esi
c0026787:	5f                   	pop    edi
c0026788:	5d                   	pop    ebp
c0026789:	c3                   	ret    
c002678a:	66 90                	xchg   ax,ax
c002678c:	ba 20 00 00 00       	mov    edx,0x20
c0026791:	29 ea                	sub    edx,ebp
c0026793:	89 e9                	mov    ecx,ebp
c0026795:	d3 e0                	shl    eax,cl
c0026797:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002679b:	89 f8                	mov    eax,edi
c002679d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00267a1:	88 d1                	mov    cl,dl
c00267a3:	d3 e8                	shr    eax,cl
c00267a5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00267a9:	09 c1                	or     ecx,eax
c00267ab:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00267af:	89 e9                	mov    ecx,ebp
c00267b1:	d3 e7                	shl    edi,cl
c00267b3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00267b7:	89 d8                	mov    eax,ebx
c00267b9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00267bd:	88 d1                	mov    cl,dl
c00267bf:	d3 e8                	shr    eax,cl
c00267c1:	89 c7                	mov    edi,eax
c00267c3:	89 e9                	mov    ecx,ebp
c00267c5:	d3 e3                	shl    ebx,cl
c00267c7:	89 f0                	mov    eax,esi
c00267c9:	88 d1                	mov    cl,dl
c00267cb:	d3 e8                	shr    eax,cl
c00267cd:	09 d8                	or     eax,ebx
c00267cf:	89 e9                	mov    ecx,ebp
c00267d1:	d3 e6                	shl    esi,cl
c00267d3:	89 f3                	mov    ebx,esi
c00267d5:	89 fa                	mov    edx,edi
c00267d7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00267db:	89 d1                	mov    ecx,edx
c00267dd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00267e1:	89 c6                	mov    esi,eax
c00267e3:	89 d7                	mov    edi,edx
c00267e5:	39 d1                	cmp    ecx,edx
c00267e7:	72 27                	jb     c0026810 <__umoddi3+0x10c>
c00267e9:	74 21                	je     c002680c <__umoddi3+0x108>
c00267eb:	89 ca                	mov    edx,ecx
c00267ed:	29 f3                	sub    ebx,esi
c00267ef:	19 fa                	sbb    edx,edi
c00267f1:	89 d0                	mov    eax,edx
c00267f3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00267f7:	d3 e0                	shl    eax,cl
c00267f9:	89 e9                	mov    ecx,ebp
c00267fb:	d3 eb                	shr    ebx,cl
c00267fd:	09 d8                	or     eax,ebx
c00267ff:	d3 ea                	shr    edx,cl
c0026801:	83 c4 1c             	add    esp,0x1c
c0026804:	5b                   	pop    ebx
c0026805:	5e                   	pop    esi
c0026806:	5f                   	pop    edi
c0026807:	5d                   	pop    ebp
c0026808:	c3                   	ret    
c0026809:	8d 76 00             	lea    esi,[esi+0x0]
c002680c:	39 c3                	cmp    ebx,eax
c002680e:	73 db                	jae    c00267eb <__umoddi3+0xe7>
c0026810:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026814:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026818:	89 d7                	mov    edi,edx
c002681a:	89 c6                	mov    esi,eax
c002681c:	eb cd                	jmp    c00267eb <__umoddi3+0xe7>

c002681e <__addsf3>:
c002681e:	55                   	push   ebp
c002681f:	89 e5                	mov    ebp,esp
c0026821:	57                   	push   edi
c0026822:	56                   	push   esi
c0026823:	53                   	push   ebx
c0026824:	83 ec 08             	sub    esp,0x8
c0026827:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002682a:	89 fa                	mov    edx,edi
c002682c:	89 f8                	mov    eax,edi
c002682e:	c1 f8 17             	sar    eax,0x17
c0026831:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026834:	c1 e2 08             	shl    edx,0x8
c0026837:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002683d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026840:	89 de                	mov    esi,ebx
c0026842:	c1 fe 17             	sar    esi,0x17
c0026845:	c1 e3 08             	shl    ebx,0x8
c0026848:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002684e:	31 f0                	xor    eax,esi
c0026850:	0f 88 3b 01 00 00    	js     c0026991 <__addsf3+0x173>
c0026856:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026859:	29 f1                	sub    ecx,esi
c002685b:	85 c9                	test   ecx,ecx
c002685d:	7e 54                	jle    c00268b3 <__addsf3+0x95>
c002685f:	89 f0                	mov    eax,esi
c0026861:	84 c0                	test   al,al
c0026863:	75 10                	jne    c0026875 <__addsf3+0x57>
c0026865:	85 db                	test   ebx,ebx
c0026867:	0f 84 aa 02 00 00    	je     c0026b17 <__addsf3+0x2f9>
c002686d:	49                   	dec    ecx
c002686e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026871:	74 38                	je     c00268ab <__addsf3+0x8d>
c0026873:	eb 13                	jmp    c0026888 <__addsf3+0x6a>
c0026875:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026878:	f7 d0                	not    eax
c002687a:	84 c0                	test   al,al
c002687c:	0f 84 95 02 00 00    	je     c0026b17 <__addsf3+0x2f9>
c0026882:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026888:	83 f9 1f             	cmp    ecx,0x1f
c002688b:	0f 8f 86 02 00 00    	jg     c0026b17 <__addsf3+0x2f9>
c0026891:	89 de                	mov    esi,ebx
c0026893:	d3 ee                	shr    esi,cl
c0026895:	b8 20 00 00 00       	mov    eax,0x20
c002689a:	29 c8                	sub    eax,ecx
c002689c:	89 c1                	mov    ecx,eax
c002689e:	d3 e3                	shl    ebx,cl
c00268a0:	31 c0                	xor    eax,eax
c00268a2:	85 db                	test   ebx,ebx
c00268a4:	0f 95 c0             	setne  al
c00268a7:	09 f0                	or     eax,esi
c00268a9:	01 d0                	add    eax,edx
c00268ab:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00268ae:	e9 b6 00 00 00       	jmp    c0026969 <__addsf3+0x14b>
c00268b3:	74 5c                	je     c0026911 <__addsf3+0xf3>
c00268b5:	89 f1                	mov    ecx,esi
c00268b7:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c00268ba:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00268bd:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00268c1:	75 14                	jne    c00268d7 <__addsf3+0xb9>
c00268c3:	85 d2                	test   edx,edx
c00268c5:	0f 84 4c 02 00 00    	je     c0026b17 <__addsf3+0x2f9>
c00268cb:	49                   	dec    ecx
c00268cc:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00268cf:	0f 84 94 00 00 00    	je     c0026969 <__addsf3+0x14b>
c00268d5:	eb 12                	jmp    c00268e9 <__addsf3+0xcb>
c00268d7:	89 f0                	mov    eax,esi
c00268d9:	f7 d0                	not    eax
c00268db:	84 c0                	test   al,al
c00268dd:	0f 84 34 02 00 00    	je     c0026b17 <__addsf3+0x2f9>
c00268e3:	81 ca 00 00 00 80    	or     edx,0x80000000
c00268e9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00268ec:	83 f9 1f             	cmp    ecx,0x1f
c00268ef:	0f 8f 22 02 00 00    	jg     c0026b17 <__addsf3+0x2f9>
c00268f5:	89 d7                	mov    edi,edx
c00268f7:	d3 ef                	shr    edi,cl
c00268f9:	b8 20 00 00 00       	mov    eax,0x20
c00268fe:	29 c8                	sub    eax,ecx
c0026900:	89 c1                	mov    ecx,eax
c0026902:	d3 e2                	shl    edx,cl
c0026904:	31 c0                	xor    eax,eax
c0026906:	85 d2                	test   edx,edx
c0026908:	0f 95 c0             	setne  al
c002690b:	09 f8                	or     eax,edi
c002690d:	01 d8                	add    eax,ebx
c002690f:	eb 58                	jmp    c0026969 <__addsf3+0x14b>
c0026911:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026914:	8d 70 01             	lea    esi,[eax+0x1]
c0026917:	f7 c6 fe 00 00 00    	test   esi,0xfe
c002691d:	75 32                	jne    c0026951 <__addsf3+0x133>
c002691f:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026923:	75 1f                	jne    c0026944 <__addsf3+0x126>
c0026925:	85 d2                	test   edx,edx
c0026927:	0f 84 e0 01 00 00    	je     c0026b0d <__addsf3+0x2ef>
c002692d:	85 db                	test   ebx,ebx
c002692f:	0f 84 e2 01 00 00    	je     c0026b17 <__addsf3+0x2f9>
c0026935:	89 d0                	mov    eax,edx
c0026937:	01 d8                	add    eax,ebx
c0026939:	0f 89 a9 01 00 00    	jns    c0026ae8 <__addsf3+0x2ca>
c002693f:	e9 9d 01 00 00       	jmp    c0026ae1 <__addsf3+0x2c3>
c0026944:	85 d2                	test   edx,edx
c0026946:	0f 85 cb 01 00 00    	jne    c0026b17 <__addsf3+0x2f9>
c002694c:	e9 bc 01 00 00       	jmp    c0026b0d <__addsf3+0x2ef>
c0026951:	31 c0                	xor    eax,eax
c0026953:	89 f1                	mov    ecx,esi
c0026955:	f7 d1                	not    ecx
c0026957:	84 c9                	test   cl,cl
c0026959:	0f 84 90 01 00 00    	je     c0026aef <__addsf3+0x2d1>
c002695f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026962:	d1 e8                	shr    eax,1
c0026964:	e9 86 01 00 00       	jmp    c0026aef <__addsf3+0x2d1>
c0026969:	85 c0                	test   eax,eax
c002696b:	0f 89 7e 01 00 00    	jns    c0026aef <__addsf3+0x2d1>
c0026971:	46                   	inc    esi
c0026972:	89 f2                	mov    edx,esi
c0026974:	f7 d2                	not    edx
c0026976:	84 d2                	test   dl,dl
c0026978:	0f 84 6f 01 00 00    	je     c0026aed <__addsf3+0x2cf>
c002697e:	89 c2                	mov    edx,eax
c0026980:	83 e2 01             	and    edx,0x1
c0026983:	d1 e8                	shr    eax,1
c0026985:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002698a:	09 d0                	or     eax,edx
c002698c:	e9 5e 01 00 00       	jmp    c0026aef <__addsf3+0x2d1>
c0026991:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026995:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026998:	89 f0                	mov    eax,esi
c002699a:	0f b6 c0             	movzx  eax,al
c002699d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00269a0:	29 c1                	sub    ecx,eax
c00269a2:	85 c9                	test   ecx,ecx
c00269a4:	7e 55                	jle    c00269fb <__addsf3+0x1dd>
c00269a6:	85 c0                	test   eax,eax
c00269a8:	75 11                	jne    c00269bb <__addsf3+0x19d>
c00269aa:	85 db                	test   ebx,ebx
c00269ac:	0f 84 65 01 00 00    	je     c0026b17 <__addsf3+0x2f9>
c00269b2:	49                   	dec    ecx
c00269b3:	75 19                	jne    c00269ce <__addsf3+0x1b0>
c00269b5:	89 d0                	mov    eax,edx
c00269b7:	29 d8                	sub    eax,ebx
c00269b9:	eb 38                	jmp    c00269f3 <__addsf3+0x1d5>
c00269bb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00269be:	f7 d0                	not    eax
c00269c0:	84 c0                	test   al,al
c00269c2:	0f 84 4f 01 00 00    	je     c0026b17 <__addsf3+0x2f9>
c00269c8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00269ce:	83 f9 1f             	cmp    ecx,0x1f
c00269d1:	0f 8f 40 01 00 00    	jg     c0026b17 <__addsf3+0x2f9>
c00269d7:	89 de                	mov    esi,ebx
c00269d9:	d3 ee                	shr    esi,cl
c00269db:	b8 20 00 00 00       	mov    eax,0x20
c00269e0:	29 c8                	sub    eax,ecx
c00269e2:	89 c1                	mov    ecx,eax
c00269e4:	d3 e3                	shl    ebx,cl
c00269e6:	31 c0                	xor    eax,eax
c00269e8:	85 db                	test   ebx,ebx
c00269ea:	0f 95 c0             	setne  al
c00269ed:	09 f0                	or     eax,esi
c00269ef:	29 c2                	sub    edx,eax
c00269f1:	89 d0                	mov    eax,edx
c00269f3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00269f6:	e9 af 00 00 00       	jmp    c0026aaa <__addsf3+0x28c>
c00269fb:	74 5c                	je     c0026a59 <__addsf3+0x23b>
c00269fd:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026a00:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026a03:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026a07:	75 14                	jne    c0026a1d <__addsf3+0x1ff>
c0026a09:	85 d2                	test   edx,edx
c0026a0b:	0f 84 06 01 00 00    	je     c0026b17 <__addsf3+0x2f9>
c0026a11:	48                   	dec    eax
c0026a12:	75 1b                	jne    c0026a2f <__addsf3+0x211>
c0026a14:	89 d8                	mov    eax,ebx
c0026a16:	29 d0                	sub    eax,edx
c0026a18:	e9 8d 00 00 00       	jmp    c0026aaa <__addsf3+0x28c>
c0026a1d:	89 f1                	mov    ecx,esi
c0026a1f:	f7 d1                	not    ecx
c0026a21:	84 c9                	test   cl,cl
c0026a23:	0f 84 ee 00 00 00    	je     c0026b17 <__addsf3+0x2f9>
c0026a29:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026a2f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026a32:	83 f8 1f             	cmp    eax,0x1f
c0026a35:	0f 8f dc 00 00 00    	jg     c0026b17 <__addsf3+0x2f9>
c0026a3b:	89 d7                	mov    edi,edx
c0026a3d:	88 c1                	mov    cl,al
c0026a3f:	d3 ef                	shr    edi,cl
c0026a41:	b9 20 00 00 00       	mov    ecx,0x20
c0026a46:	29 c1                	sub    ecx,eax
c0026a48:	d3 e2                	shl    edx,cl
c0026a4a:	31 c0                	xor    eax,eax
c0026a4c:	85 d2                	test   edx,edx
c0026a4e:	0f 95 c0             	setne  al
c0026a51:	09 f8                	or     eax,edi
c0026a53:	29 c3                	sub    ebx,eax
c0026a55:	89 d8                	mov    eax,ebx
c0026a57:	eb 51                	jmp    c0026aaa <__addsf3+0x28c>
c0026a59:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026a5c:	40                   	inc    eax
c0026a5d:	a8 fe                	test   al,0xfe
c0026a5f:	75 3d                	jne    c0026a9e <__addsf3+0x280>
c0026a61:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026a65:	0f 85 a7 00 00 00    	jne    c0026b12 <__addsf3+0x2f4>
c0026a6b:	85 d2                	test   edx,edx
c0026a6d:	75 12                	jne    c0026a81 <__addsf3+0x263>
c0026a6f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026a72:	85 db                	test   ebx,ebx
c0026a74:	0f 85 9d 00 00 00    	jne    c0026b17 <__addsf3+0x2f9>
c0026a7a:	31 ff                	xor    edi,edi
c0026a7c:	e9 96 00 00 00       	jmp    c0026b17 <__addsf3+0x2f9>
c0026a81:	85 db                	test   ebx,ebx
c0026a83:	0f 84 8e 00 00 00    	je     c0026b17 <__addsf3+0x2f9>
c0026a89:	89 d0                	mov    eax,edx
c0026a8b:	29 d8                	sub    eax,ebx
c0026a8d:	79 06                	jns    c0026a95 <__addsf3+0x277>
c0026a8f:	89 d8                	mov    eax,ebx
c0026a91:	29 d0                	sub    eax,edx
c0026a93:	eb 5a                	jmp    c0026aef <__addsf3+0x2d1>
c0026a95:	bf 00 00 00 00       	mov    edi,0x0
c0026a9a:	74 7b                	je     c0026b17 <__addsf3+0x2f9>
c0026a9c:	eb 4a                	jmp    c0026ae8 <__addsf3+0x2ca>
c0026a9e:	89 d0                	mov    eax,edx
c0026aa0:	29 d8                	sub    eax,ebx
c0026aa2:	79 12                	jns    c0026ab6 <__addsf3+0x298>
c0026aa4:	89 d8                	mov    eax,ebx
c0026aa6:	29 d0                	sub    eax,edx
c0026aa8:	eb 09                	jmp    c0026ab3 <__addsf3+0x295>
c0026aaa:	85 c0                	test   eax,eax
c0026aac:	79 41                	jns    c0026aef <__addsf3+0x2d1>
c0026aae:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026ab3:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026ab6:	31 f6                	xor    esi,esi
c0026ab8:	85 c0                	test   eax,eax
c0026aba:	74 33                	je     c0026aef <__addsf3+0x2d1>
c0026abc:	0f bd c8             	bsr    ecx,eax
c0026abf:	83 f1 1f             	xor    ecx,0x1f
c0026ac2:	d3 e0                	shl    eax,cl
c0026ac4:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026ac8:	39 ca                	cmp    edx,ecx
c0026aca:	7f 10                	jg     c0026adc <__addsf3+0x2be>
c0026acc:	29 d1                	sub    ecx,edx
c0026ace:	41                   	inc    ecx
c0026acf:	d3 e8                	shr    eax,cl
c0026ad1:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026ad4:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026ada:	eb 13                	jmp    c0026aef <__addsf3+0x2d1>
c0026adc:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026adf:	29 ce                	sub    esi,ecx
c0026ae1:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026ae6:	eb 07                	jmp    c0026aef <__addsf3+0x2d1>
c0026ae8:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026aeb:	eb 02                	jmp    c0026aef <__addsf3+0x2d1>
c0026aed:	31 c0                	xor    eax,eax
c0026aef:	89 c2                	mov    edx,eax
c0026af1:	c1 ea 08             	shr    edx,0x8
c0026af4:	a8 7f                	test   al,0x7f
c0026af6:	0f 95 c1             	setne  cl
c0026af9:	09 d1                	or     ecx,edx
c0026afb:	83 e1 01             	and    ecx,0x1
c0026afe:	c1 e8 07             	shr    eax,0x7
c0026b01:	21 c8                	and    eax,ecx
c0026b03:	c1 e6 17             	shl    esi,0x17
c0026b06:	09 d6                	or     esi,edx
c0026b08:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026b0b:	eb 0a                	jmp    c0026b17 <__addsf3+0x2f9>
c0026b0d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026b10:	eb 05                	jmp    c0026b17 <__addsf3+0x2f9>
c0026b12:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026b17:	89 f8                	mov    eax,edi
c0026b19:	5a                   	pop    edx
c0026b1a:	59                   	pop    ecx
c0026b1b:	5b                   	pop    ebx
c0026b1c:	5e                   	pop    esi
c0026b1d:	5f                   	pop    edi
c0026b1e:	5d                   	pop    ebp
c0026b1f:	c3                   	ret    

c0026b20 <__subsf3>:
c0026b20:	55                   	push   ebp
c0026b21:	89 e5                	mov    ebp,esp
c0026b23:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026b26:	05 00 00 00 80       	add    eax,0x80000000
c0026b2b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026b2e:	5d                   	pop    ebp
c0026b2f:	e9 ea fc ff ff       	jmp    c002681e <__addsf3>

c0026b34 <__negsf2>:
c0026b34:	55                   	push   ebp
c0026b35:	89 e5                	mov    ebp,esp
c0026b37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026b3a:	05 00 00 00 80       	add    eax,0x80000000
c0026b3f:	5d                   	pop    ebp
c0026b40:	c3                   	ret    

c0026b41 <__mulsf3>:
c0026b41:	55                   	push   ebp
c0026b42:	89 e5                	mov    ebp,esp
c0026b44:	57                   	push   edi
c0026b45:	56                   	push   esi
c0026b46:	53                   	push   ebx
c0026b47:	83 ec 1c             	sub    esp,0x1c
c0026b4a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026b4d:	89 f0                	mov    eax,esi
c0026b4f:	89 f1                	mov    ecx,esi
c0026b51:	c1 f9 17             	sar    ecx,0x17
c0026b54:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026b57:	c1 e0 08             	shl    eax,0x8
c0026b5a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026b5f:	89 c1                	mov    ecx,eax
c0026b61:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026b64:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026b67:	89 c7                	mov    edi,eax
c0026b69:	c1 ff 17             	sar    edi,0x17
c0026b6c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026b70:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026b73:	89 f8                	mov    eax,edi
c0026b75:	0f b6 c0             	movzx  eax,al
c0026b78:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026b7b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026b7f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026b82:	42                   	inc    edx
c0026b83:	80 e2 fe             	and    dl,0xfe
c0026b86:	75 7b                	jne    c0026c03 <__mulsf3+0xc2>
c0026b88:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026b8c:	74 54                	je     c0026be2 <__mulsf3+0xa1>
c0026b8e:	85 c9                	test   ecx,ecx
c0026b90:	0f 85 64 01 00 00    	jne    c0026cfa <__mulsf3+0x1b9>
c0026b96:	8d 57 01             	lea    edx,[edi+0x1]
c0026b99:	80 e2 fe             	and    dl,0xfe
c0026b9c:	75 1f                	jne    c0026bbd <__mulsf3+0x7c>
c0026b9e:	85 c0                	test   eax,eax
c0026ba0:	b8 00 00 00 00       	mov    eax,0x0
c0026ba5:	74 29                	je     c0026bd0 <__mulsf3+0x8f>
c0026ba7:	53                   	push   ebx
c0026ba8:	53                   	push   ebx
c0026ba9:	50                   	push   eax
c0026baa:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026bad:	e8 96 05 00 00       	call   c0027148 <__nesf2>
c0026bb2:	83 c4 10             	add    esp,0x10
c0026bb5:	85 c0                	test   eax,eax
c0026bb7:	0f 85 3a 01 00 00    	jne    c0026cf7 <__mulsf3+0x1b6>
c0026bbd:	85 ff                	test   edi,edi
c0026bbf:	0f 89 35 01 00 00    	jns    c0026cfa <__mulsf3+0x1b9>
c0026bc5:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026bcb:	e9 2a 01 00 00       	jmp    c0026cfa <__mulsf3+0x1b9>
c0026bd0:	51                   	push   ecx
c0026bd1:	51                   	push   ecx
c0026bd2:	50                   	push   eax
c0026bd3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026bd6:	e8 6d 05 00 00       	call   c0027148 <__nesf2>
c0026bdb:	83 c4 10             	add    esp,0x10
c0026bde:	85 c0                	test   eax,eax
c0026be0:	eb 15                	jmp    c0026bf7 <__mulsf3+0xb6>
c0026be2:	85 c9                	test   ecx,ecx
c0026be4:	74 0b                	je     c0026bf1 <__mulsf3+0xb0>
c0026be6:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026be9:	01 c9                	add    ecx,ecx
c0026beb:	78 16                	js     c0026c03 <__mulsf3+0xc2>
c0026bed:	89 d3                	mov    ebx,edx
c0026bef:	eb f5                	jmp    c0026be6 <__mulsf3+0xa5>
c0026bf1:	89 f8                	mov    eax,edi
c0026bf3:	f7 d0                	not    eax
c0026bf5:	84 c0                	test   al,al
c0026bf7:	75 c4                	jne    c0026bbd <__mulsf3+0x7c>
c0026bf9:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026bfe:	e9 f7 00 00 00       	jmp    c0026cfa <__mulsf3+0x1b9>
c0026c03:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026c06:	c1 e6 08             	shl    esi,0x8
c0026c09:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026c0f:	8d 57 01             	lea    edx,[edi+0x1]
c0026c12:	80 e2 fe             	and    dl,0xfe
c0026c15:	75 63                	jne    c0026c7a <__mulsf3+0x139>
c0026c17:	85 c0                	test   eax,eax
c0026c19:	74 2f                	je     c0026c4a <__mulsf3+0x109>
c0026c1b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026c1f:	0f 89 d2 00 00 00    	jns    c0026cf7 <__mulsf3+0x1b6>
c0026c25:	52                   	push   edx
c0026c26:	52                   	push   edx
c0026c27:	6a 00                	push   0x0
c0026c29:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026c2c:	e8 dc 04 00 00       	call   c002710d <__eqsf2>
c0026c31:	83 c4 10             	add    esp,0x10
c0026c34:	85 c0                	test   eax,eax
c0026c36:	0f 85 bb 00 00 00    	jne    c0026cf7 <__mulsf3+0x1b6>
c0026c3c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026c3f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026c45:	e9 b0 00 00 00       	jmp    c0026cfa <__mulsf3+0x1b9>
c0026c4a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026c4d:	50                   	push   eax
c0026c4e:	50                   	push   eax
c0026c4f:	6a 00                	push   0x0
c0026c51:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026c54:	e8 b4 04 00 00       	call   c002710d <__eqsf2>
c0026c59:	83 c4 10             	add    esp,0x10
c0026c5c:	85 c0                	test   eax,eax
c0026c5e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026c61:	75 0c                	jne    c0026c6f <__mulsf3+0x12e>
c0026c63:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026c67:	0f 89 8a 00 00 00    	jns    c0026cf7 <__mulsf3+0x1b6>
c0026c6d:	eb cd                	jmp    c0026c3c <__mulsf3+0xfb>
c0026c6f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026c72:	01 f6                	add    esi,esi
c0026c74:	78 04                	js     c0026c7a <__mulsf3+0x139>
c0026c76:	89 c3                	mov    ebx,eax
c0026c78:	eb f5                	jmp    c0026c6f <__mulsf3+0x12e>
c0026c7a:	89 c8                	mov    eax,ecx
c0026c7c:	0d 00 00 00 80       	or     eax,0x80000000
c0026c81:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026c87:	f7 e6                	mul    esi
c0026c89:	85 c0                	test   eax,eax
c0026c8b:	0f 95 c0             	setne  al
c0026c8e:	0f b6 c0             	movzx  eax,al
c0026c91:	09 c2                	or     edx,eax
c0026c93:	78 03                	js     c0026c98 <__mulsf3+0x157>
c0026c95:	01 d2                	add    edx,edx
c0026c97:	4b                   	dec    ebx
c0026c98:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0026c9e:	7f 22                	jg     c0026cc2 <__mulsf3+0x181>
c0026ca0:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026ca6:	85 db                	test   ebx,ebx
c0026ca8:	7f 23                	jg     c0026ccd <__mulsf3+0x18c>
c0026caa:	83 fb e9             	cmp    ebx,0xffffffe9
c0026cad:	7c 1a                	jl     c0026cc9 <__mulsf3+0x188>
c0026caf:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026cb5:	b9 01 00 00 00       	mov    ecx,0x1
c0026cba:	29 d9                	sub    ecx,ebx
c0026cbc:	d3 ea                	shr    edx,cl
c0026cbe:	31 db                	xor    ebx,ebx
c0026cc0:	eb 0b                	jmp    c0026ccd <__mulsf3+0x18c>
c0026cc2:	bb ff 00 00 00       	mov    ebx,0xff
c0026cc7:	eb 02                	jmp    c0026ccb <__mulsf3+0x18a>
c0026cc9:	31 db                	xor    ebx,ebx
c0026ccb:	31 d2                	xor    edx,edx
c0026ccd:	89 d0                	mov    eax,edx
c0026ccf:	c1 e8 08             	shr    eax,0x8
c0026cd2:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026cd5:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026cdb:	09 fb                	or     ebx,edi
c0026cdd:	c1 e3 17             	shl    ebx,0x17
c0026ce0:	09 c3                	or     ebx,eax
c0026ce2:	f6 c2 7f             	test   dl,0x7f
c0026ce5:	0f 95 c1             	setne  cl
c0026ce8:	09 c8                	or     eax,ecx
c0026cea:	83 e0 01             	and    eax,0x1
c0026ced:	c1 ea 07             	shr    edx,0x7
c0026cf0:	21 c2                	and    edx,eax
c0026cf2:	8d 34 13             	lea    esi,[ebx+edx*1]
c0026cf5:	eb 03                	jmp    c0026cfa <__mulsf3+0x1b9>
c0026cf7:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0026cfa:	89 f0                	mov    eax,esi
c0026cfc:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026cff:	5b                   	pop    ebx
c0026d00:	5e                   	pop    esi
c0026d01:	5f                   	pop    edi
c0026d02:	5d                   	pop    ebp
c0026d03:	c3                   	ret    

c0026d04 <__divsf3>:
c0026d04:	55                   	push   ebp
c0026d05:	89 e5                	mov    ebp,esp
c0026d07:	57                   	push   edi
c0026d08:	56                   	push   esi
c0026d09:	53                   	push   ebx
c0026d0a:	83 ec 1c             	sub    esp,0x1c
c0026d0d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026d10:	89 d8                	mov    eax,ebx
c0026d12:	89 d9                	mov    ecx,ebx
c0026d14:	c1 f9 17             	sar    ecx,0x17
c0026d17:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026d1a:	c1 e0 08             	shl    eax,0x8
c0026d1d:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026d22:	89 c1                	mov    ecx,eax
c0026d24:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026d27:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026d2a:	89 c7                	mov    edi,eax
c0026d2c:	c1 ff 17             	sar    edi,0x17
c0026d2f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026d33:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026d36:	89 f8                	mov    eax,edi
c0026d38:	0f b6 c0             	movzx  eax,al
c0026d3b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026d3e:	29 c6                	sub    esi,eax
c0026d40:	83 c6 7f             	add    esi,0x7f
c0026d43:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026d46:	42                   	inc    edx
c0026d47:	80 e2 fe             	and    dl,0xfe
c0026d4a:	0f 85 9c 00 00 00    	jne    c0026dec <__divsf3+0xe8>
c0026d50:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026d54:	74 33                	je     c0026d89 <__divsf3+0x85>
c0026d56:	85 c9                	test   ecx,ecx
c0026d58:	0f 85 c7 01 00 00    	jne    c0026f25 <__divsf3+0x221>
c0026d5e:	8d 57 01             	lea    edx,[edi+0x1]
c0026d61:	80 e2 fe             	and    dl,0xfe
c0026d64:	75 2f                	jne    c0026d95 <__divsf3+0x91>
c0026d66:	85 c0                	test   eax,eax
c0026d68:	74 2b                	je     c0026d95 <__divsf3+0x91>
c0026d6a:	51                   	push   ecx
c0026d6b:	51                   	push   ecx
c0026d6c:	6a 00                	push   0x0
c0026d6e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d71:	e8 d2 03 00 00       	call   c0027148 <__nesf2>
c0026d76:	83 c4 10             	add    esp,0x10
c0026d79:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026d7c:	85 c0                	test   eax,eax
c0026d7e:	0f 85 a1 01 00 00    	jne    c0026f25 <__divsf3+0x221>
c0026d84:	e9 92 01 00 00       	jmp    c0026f1b <__divsf3+0x217>
c0026d89:	85 c9                	test   ecx,ecx
c0026d8b:	75 1b                	jne    c0026da8 <__divsf3+0xa4>
c0026d8d:	8d 57 01             	lea    edx,[edi+0x1]
c0026d90:	80 e2 fe             	and    dl,0xfe
c0026d93:	74 1e                	je     c0026db3 <__divsf3+0xaf>
c0026d95:	85 ff                	test   edi,edi
c0026d97:	0f 89 88 01 00 00    	jns    c0026f25 <__divsf3+0x221>
c0026d9d:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0026da3:	e9 7d 01 00 00       	jmp    c0026f25 <__divsf3+0x221>
c0026da8:	8d 56 ff             	lea    edx,[esi-0x1]
c0026dab:	01 c9                	add    ecx,ecx
c0026dad:	78 3d                	js     c0026dec <__divsf3+0xe8>
c0026daf:	89 d6                	mov    esi,edx
c0026db1:	eb f5                	jmp    c0026da8 <__divsf3+0xa4>
c0026db3:	85 c0                	test   eax,eax
c0026db5:	b8 00 00 00 00       	mov    eax,0x0
c0026dba:	74 18                	je     c0026dd4 <__divsf3+0xd0>
c0026dbc:	52                   	push   edx
c0026dbd:	52                   	push   edx
c0026dbe:	50                   	push   eax
c0026dbf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026dc2:	e8 81 03 00 00       	call   c0027148 <__nesf2>
c0026dc7:	83 c4 10             	add    esp,0x10
c0026dca:	85 c0                	test   eax,eax
c0026dcc:	0f 85 50 01 00 00    	jne    c0026f22 <__divsf3+0x21e>
c0026dd2:	eb c1                	jmp    c0026d95 <__divsf3+0x91>
c0026dd4:	56                   	push   esi
c0026dd5:	56                   	push   esi
c0026dd6:	50                   	push   eax
c0026dd7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026dda:	e8 69 03 00 00       	call   c0027148 <__nesf2>
c0026ddf:	83 c4 10             	add    esp,0x10
c0026de2:	85 c0                	test   eax,eax
c0026de4:	0f 84 31 01 00 00    	je     c0026f1b <__divsf3+0x217>
c0026dea:	eb a9                	jmp    c0026d95 <__divsf3+0x91>
c0026dec:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0026def:	c1 e3 08             	shl    ebx,0x8
c0026df2:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026df8:	8d 57 01             	lea    edx,[edi+0x1]
c0026dfb:	80 e2 fe             	and    dl,0xfe
c0026dfe:	75 71                	jne    c0026e71 <__divsf3+0x16d>
c0026e00:	85 c0                	test   eax,eax
c0026e02:	ba 00 00 00 00       	mov    edx,0x0
c0026e07:	74 2f                	je     c0026e38 <__divsf3+0x134>
c0026e09:	51                   	push   ecx
c0026e0a:	51                   	push   ecx
c0026e0b:	52                   	push   edx
c0026e0c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e0f:	e8 f9 02 00 00       	call   c002710d <__eqsf2>
c0026e14:	83 c4 10             	add    esp,0x10
c0026e17:	85 c0                	test   eax,eax
c0026e19:	0f 85 03 01 00 00    	jne    c0026f22 <__divsf3+0x21e>
c0026e1f:	31 d2                	xor    edx,edx
c0026e21:	89 d3                	mov    ebx,edx
c0026e23:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026e26:	31 f8                	xor    eax,edi
c0026e28:	0f 89 f7 00 00 00    	jns    c0026f25 <__divsf3+0x221>
c0026e2e:	bb 00 00 00 80       	mov    ebx,0x80000000
c0026e33:	e9 ed 00 00 00       	jmp    c0026f25 <__divsf3+0x221>
c0026e38:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026e3b:	50                   	push   eax
c0026e3c:	50                   	push   eax
c0026e3d:	52                   	push   edx
c0026e3e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e41:	e8 c7 02 00 00       	call   c002710d <__eqsf2>
c0026e46:	83 c4 10             	add    esp,0x10
c0026e49:	85 c0                	test   eax,eax
c0026e4b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026e4e:	75 16                	jne    c0026e66 <__divsf3+0x162>
c0026e50:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026e53:	31 fb                	xor    ebx,edi
c0026e55:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0026e5b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0026e61:	e9 bf 00 00 00       	jmp    c0026f25 <__divsf3+0x221>
c0026e66:	8d 46 01             	lea    eax,[esi+0x1]
c0026e69:	01 db                	add    ebx,ebx
c0026e6b:	78 04                	js     c0026e71 <__divsf3+0x16d>
c0026e6d:	89 c6                	mov    esi,eax
c0026e6f:	eb f5                	jmp    c0026e66 <__divsf3+0x162>
c0026e71:	89 c8                	mov    eax,ecx
c0026e73:	0d 00 00 00 80       	or     eax,0x80000000
c0026e78:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026e7e:	31 d2                	xor    edx,edx
c0026e80:	39 d8                	cmp    eax,ebx
c0026e82:	72 07                	jb     c0026e8b <__divsf3+0x187>
c0026e84:	29 d8                	sub    eax,ebx
c0026e86:	ba 01 00 00 00       	mov    edx,0x1
c0026e8b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0026e92:	01 d2                	add    edx,edx
c0026e94:	89 c1                	mov    ecx,eax
c0026e96:	01 c0                	add    eax,eax
c0026e98:	85 c9                	test   ecx,ecx
c0026e9a:	78 04                	js     c0026ea0 <__divsf3+0x19c>
c0026e9c:	39 c3                	cmp    ebx,eax
c0026e9e:	77 05                	ja     c0026ea5 <__divsf3+0x1a1>
c0026ea0:	29 d8                	sub    eax,ebx
c0026ea2:	83 ca 01             	or     edx,0x1
c0026ea5:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0026ea8:	75 e8                	jne    c0026e92 <__divsf3+0x18e>
c0026eaa:	85 c0                	test   eax,eax
c0026eac:	0f 95 c0             	setne  al
c0026eaf:	0f b6 c0             	movzx  eax,al
c0026eb2:	c1 e2 06             	shl    edx,0x6
c0026eb5:	09 c2                	or     edx,eax
c0026eb7:	78 03                	js     c0026ebc <__divsf3+0x1b8>
c0026eb9:	01 d2                	add    edx,edx
c0026ebb:	4e                   	dec    esi
c0026ebc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0026ec2:	7f 22                	jg     c0026ee6 <__divsf3+0x1e2>
c0026ec4:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026eca:	85 f6                	test   esi,esi
c0026ecc:	7f 23                	jg     c0026ef1 <__divsf3+0x1ed>
c0026ece:	83 fe e9             	cmp    esi,0xffffffe9
c0026ed1:	7c 1a                	jl     c0026eed <__divsf3+0x1e9>
c0026ed3:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026ed9:	b9 01 00 00 00       	mov    ecx,0x1
c0026ede:	29 f1                	sub    ecx,esi
c0026ee0:	d3 ea                	shr    edx,cl
c0026ee2:	31 f6                	xor    esi,esi
c0026ee4:	eb 0b                	jmp    c0026ef1 <__divsf3+0x1ed>
c0026ee6:	be ff 00 00 00       	mov    esi,0xff
c0026eeb:	eb 02                	jmp    c0026eef <__divsf3+0x1eb>
c0026eed:	31 f6                	xor    esi,esi
c0026eef:	31 d2                	xor    edx,edx
c0026ef1:	89 d0                	mov    eax,edx
c0026ef3:	c1 e8 08             	shr    eax,0x8
c0026ef6:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026ef9:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026eff:	09 fe                	or     esi,edi
c0026f01:	c1 e6 17             	shl    esi,0x17
c0026f04:	09 c6                	or     esi,eax
c0026f06:	f6 c2 7f             	test   dl,0x7f
c0026f09:	0f 95 c1             	setne  cl
c0026f0c:	09 c8                	or     eax,ecx
c0026f0e:	83 e0 01             	and    eax,0x1
c0026f11:	c1 ea 07             	shr    edx,0x7
c0026f14:	21 c2                	and    edx,eax
c0026f16:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0026f19:	eb 0a                	jmp    c0026f25 <__divsf3+0x221>
c0026f1b:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0026f20:	eb 03                	jmp    c0026f25 <__divsf3+0x221>
c0026f22:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026f25:	89 d8                	mov    eax,ebx
c0026f27:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026f2a:	5b                   	pop    ebx
c0026f2b:	5e                   	pop    esi
c0026f2c:	5f                   	pop    edi
c0026f2d:	5d                   	pop    ebp
c0026f2e:	c3                   	ret    

c0026f2f <__floatsisf>:
c0026f2f:	55                   	push   ebp
c0026f30:	89 e5                	mov    ebp,esp
c0026f32:	53                   	push   ebx
c0026f33:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026f36:	85 d2                	test   edx,edx
c0026f38:	7e 2b                	jle    c0026f65 <__floatsisf+0x36>
c0026f3a:	0f bd ca             	bsr    ecx,edx
c0026f3d:	83 f1 1f             	xor    ecx,0x1f
c0026f40:	d3 e2                	shl    edx,cl
c0026f42:	89 d0                	mov    eax,edx
c0026f44:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026f49:	89 c3                	mov    ebx,eax
c0026f4b:	c1 eb 08             	shr    ebx,0x8
c0026f4e:	80 e2 7f             	and    dl,0x7f
c0026f51:	0f 95 c2             	setne  dl
c0026f54:	09 da                	or     edx,ebx
c0026f56:	83 e2 01             	and    edx,0x1
c0026f59:	c1 e8 07             	shr    eax,0x7
c0026f5c:	21 c2                	and    edx,eax
c0026f5e:	b8 9e 00 00 00       	mov    eax,0x9e
c0026f63:	eb 32                	jmp    c0026f97 <__floatsisf+0x68>
c0026f65:	b8 00 00 00 00       	mov    eax,0x0
c0026f6a:	74 34                	je     c0026fa0 <__floatsisf+0x71>
c0026f6c:	f7 da                	neg    edx
c0026f6e:	0f bd ca             	bsr    ecx,edx
c0026f71:	83 f1 1f             	xor    ecx,0x1f
c0026f74:	d3 e2                	shl    edx,cl
c0026f76:	89 d0                	mov    eax,edx
c0026f78:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026f7d:	89 c3                	mov    ebx,eax
c0026f7f:	c1 eb 08             	shr    ebx,0x8
c0026f82:	80 e2 7f             	and    dl,0x7f
c0026f85:	0f 95 c2             	setne  dl
c0026f88:	09 da                	or     edx,ebx
c0026f8a:	83 e2 01             	and    edx,0x1
c0026f8d:	c1 e8 07             	shr    eax,0x7
c0026f90:	21 c2                	and    edx,eax
c0026f92:	b8 9e 01 00 00       	mov    eax,0x19e
c0026f97:	29 c8                	sub    eax,ecx
c0026f99:	c1 e0 17             	shl    eax,0x17
c0026f9c:	09 d8                	or     eax,ebx
c0026f9e:	01 d0                	add    eax,edx
c0026fa0:	5b                   	pop    ebx
c0026fa1:	5d                   	pop    ebp
c0026fa2:	c3                   	ret    

c0026fa3 <__floatunsisf>:
c0026fa3:	55                   	push   ebp
c0026fa4:	89 e5                	mov    ebp,esp
c0026fa6:	53                   	push   ebx
c0026fa7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026faa:	31 c0                	xor    eax,eax
c0026fac:	85 d2                	test   edx,edx
c0026fae:	74 32                	je     c0026fe2 <__floatunsisf+0x3f>
c0026fb0:	0f bd ca             	bsr    ecx,edx
c0026fb3:	83 f1 1f             	xor    ecx,0x1f
c0026fb6:	d3 e2                	shl    edx,cl
c0026fb8:	89 d0                	mov    eax,edx
c0026fba:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026fbf:	89 c3                	mov    ebx,eax
c0026fc1:	c1 eb 08             	shr    ebx,0x8
c0026fc4:	80 e2 7f             	and    dl,0x7f
c0026fc7:	0f 95 c2             	setne  dl
c0026fca:	09 da                	or     edx,ebx
c0026fcc:	83 e2 01             	and    edx,0x1
c0026fcf:	c1 e8 07             	shr    eax,0x7
c0026fd2:	21 c2                	and    edx,eax
c0026fd4:	b8 9e 00 00 00       	mov    eax,0x9e
c0026fd9:	29 c8                	sub    eax,ecx
c0026fdb:	c1 e0 17             	shl    eax,0x17
c0026fde:	09 d8                	or     eax,ebx
c0026fe0:	01 d0                	add    eax,edx
c0026fe2:	5b                   	pop    ebx
c0026fe3:	5d                   	pop    ebp
c0026fe4:	c3                   	ret    

c0026fe5 <__fixsfsi>:
c0026fe5:	55                   	push   ebp
c0026fe6:	89 e5                	mov    ebp,esp
c0026fe8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026feb:	89 d1                	mov    ecx,edx
c0026fed:	c1 e1 08             	shl    ecx,0x8
c0026ff0:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0026ff6:	c1 fa 17             	sar    edx,0x17
c0026ff9:	78 1c                	js     c0027017 <__fixsfsi+0x32>
c0026ffb:	83 ea 7f             	sub    edx,0x7f
c0026ffe:	31 c0                	xor    eax,eax
c0027000:	83 fa 1e             	cmp    edx,0x1e
c0027003:	77 40                	ja     c0027045 <__fixsfsi+0x60>
c0027005:	89 c8                	mov    eax,ecx
c0027007:	0d 00 00 00 80       	or     eax,0x80000000
c002700c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027011:	29 d1                	sub    ecx,edx
c0027013:	d3 e8                	shr    eax,cl
c0027015:	eb 2e                	jmp    c0027045 <__fixsfsi+0x60>
c0027017:	31 c0                	xor    eax,eax
c0027019:	81 c2 81 00 00 00    	add    edx,0x81
c002701f:	78 24                	js     c0027045 <__fixsfsi+0x60>
c0027021:	83 fa 1e             	cmp    edx,0x1e
c0027024:	7e 09                	jle    c002702f <__fixsfsi+0x4a>
c0027026:	83 fa 1f             	cmp    edx,0x1f
c0027029:	75 18                	jne    c0027043 <__fixsfsi+0x5e>
c002702b:	85 c9                	test   ecx,ecx
c002702d:	75 14                	jne    c0027043 <__fixsfsi+0x5e>
c002702f:	89 c8                	mov    eax,ecx
c0027031:	0d 00 00 00 80       	or     eax,0x80000000
c0027036:	b9 1f 00 00 00       	mov    ecx,0x1f
c002703b:	29 d1                	sub    ecx,edx
c002703d:	d3 e8                	shr    eax,cl
c002703f:	f7 d8                	neg    eax
c0027041:	eb 02                	jmp    c0027045 <__fixsfsi+0x60>
c0027043:	31 c0                	xor    eax,eax
c0027045:	5d                   	pop    ebp
c0027046:	c3                   	ret    

c0027047 <__fixunssfsi>:
c0027047:	55                   	push   ebp
c0027048:	89 e5                	mov    ebp,esp
c002704a:	53                   	push   ebx
c002704b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002704e:	89 d3                	mov    ebx,edx
c0027050:	c1 fb 17             	sar    ebx,0x17
c0027053:	83 eb 7f             	sub    ebx,0x7f
c0027056:	31 c0                	xor    eax,eax
c0027058:	83 fb 1f             	cmp    ebx,0x1f
c002705b:	77 18                	ja     c0027075 <__fixunssfsi+0x2e>
c002705d:	89 d0                	mov    eax,edx
c002705f:	c1 e0 08             	shl    eax,0x8
c0027062:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027067:	0d 00 00 00 80       	or     eax,0x80000000
c002706c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027071:	29 d9                	sub    ecx,ebx
c0027073:	d3 e8                	shr    eax,cl
c0027075:	5b                   	pop    ebx
c0027076:	5d                   	pop    ebp
c0027077:	c3                   	ret    

c0027078 <__cmpsf2>:
c0027078:	55                   	push   ebp
c0027079:	89 e5                	mov    ebp,esp
c002707b:	57                   	push   edi
c002707c:	56                   	push   esi
c002707d:	53                   	push   ebx
c002707e:	83 ec 24             	sub    esp,0x24
c0027081:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027084:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027087:	e8 4f 10 00 00       	call   c00280db <__truncdfsf2>
c002708c:	5a                   	pop    edx
c002708d:	59                   	pop    ecx
c002708e:	89 c3                	mov    ebx,eax
c0027090:	c1 e8 17             	shr    eax,0x17
c0027093:	0f b6 f0             	movzx  esi,al
c0027096:	89 d8                	mov    eax,ebx
c0027098:	c1 e8 1f             	shr    eax,0x1f
c002709b:	31 c6                	xor    esi,eax
c002709d:	c1 e3 08             	shl    ebx,0x8
c00270a0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00270a3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00270a6:	e8 30 10 00 00       	call   c00280db <__truncdfsf2>
c00270ab:	83 c4 10             	add    esp,0x10
c00270ae:	89 c1                	mov    ecx,eax
c00270b0:	c1 e9 17             	shr    ecx,0x17
c00270b3:	0f b6 c9             	movzx  ecx,cl
c00270b6:	89 c7                	mov    edi,eax
c00270b8:	c1 ef 1f             	shr    edi,0x1f
c00270bb:	89 ca                	mov    edx,ecx
c00270bd:	31 fa                	xor    edx,edi
c00270bf:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00270c2:	c1 e0 08             	shl    eax,0x8
c00270c5:	89 c2                	mov    edx,eax
c00270c7:	89 d8                	mov    eax,ebx
c00270c9:	09 d0                	or     eax,edx
c00270cb:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00270d0:	09 f0                	or     eax,esi
c00270d2:	75 08                	jne    c00270dc <__cmpsf2+0x64>
c00270d4:	31 c0                	xor    eax,eax
c00270d6:	39 f9                	cmp    ecx,edi
c00270d8:	75 0c                	jne    c00270e6 <__cmpsf2+0x6e>
c00270da:	eb 29                	jmp    c0027105 <__cmpsf2+0x8d>
c00270dc:	b8 01 00 00 00       	mov    eax,0x1
c00270e1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00270e4:	7f 1f                	jg     c0027105 <__cmpsf2+0x8d>
c00270e6:	83 c8 ff             	or     eax,0xffffffff
c00270e9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00270ec:	7c 17                	jl     c0027105 <__cmpsf2+0x8d>
c00270ee:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00270f4:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00270fa:	b8 01 00 00 00       	mov    eax,0x1
c00270ff:	39 d3                	cmp    ebx,edx
c0027101:	77 02                	ja     c0027105 <__cmpsf2+0x8d>
c0027103:	19 c0                	sbb    eax,eax
c0027105:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027108:	5b                   	pop    ebx
c0027109:	5e                   	pop    esi
c002710a:	5f                   	pop    edi
c002710b:	5d                   	pop    ebp
c002710c:	c3                   	ret    

c002710d <__eqsf2>:
c002710d:	55                   	push   ebp
c002710e:	89 e5                	mov    ebp,esp
c0027110:	83 ec 24             	sub    esp,0x24
c0027113:	6a 01                	push   0x1
c0027115:	83 ec 0c             	sub    esp,0xc
c0027118:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002711b:	e8 df 10 00 00       	call   c00281ff <__extendsfdf2>
c0027120:	83 c4 10             	add    esp,0x10
c0027123:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027126:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027129:	52                   	push   edx
c002712a:	50                   	push   eax
c002712b:	50                   	push   eax
c002712c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002712f:	e8 cb 10 00 00       	call   c00281ff <__extendsfdf2>
c0027134:	59                   	pop    ecx
c0027135:	59                   	pop    ecx
c0027136:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027139:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002713c:	52                   	push   edx
c002713d:	50                   	push   eax
c002713e:	e8 35 ff ff ff       	call   c0027078 <__cmpsf2>
c0027143:	83 c4 20             	add    esp,0x20
c0027146:	c9                   	leave  
c0027147:	c3                   	ret    

c0027148 <__nesf2>:
c0027148:	eb c3                	jmp    c002710d <__eqsf2>

c002714a <__gtsf2>:
c002714a:	55                   	push   ebp
c002714b:	89 e5                	mov    ebp,esp
c002714d:	83 ec 24             	sub    esp,0x24
c0027150:	6a ff                	push   0xffffffff
c0027152:	83 ec 0c             	sub    esp,0xc
c0027155:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027158:	e8 a2 10 00 00       	call   c00281ff <__extendsfdf2>
c002715d:	83 c4 10             	add    esp,0x10
c0027160:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027163:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027166:	52                   	push   edx
c0027167:	50                   	push   eax
c0027168:	50                   	push   eax
c0027169:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002716c:	e8 8e 10 00 00       	call   c00281ff <__extendsfdf2>
c0027171:	59                   	pop    ecx
c0027172:	59                   	pop    ecx
c0027173:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027176:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027179:	52                   	push   edx
c002717a:	50                   	push   eax
c002717b:	e8 f8 fe ff ff       	call   c0027078 <__cmpsf2>
c0027180:	83 c4 20             	add    esp,0x20
c0027183:	c9                   	leave  
c0027184:	c3                   	ret    

c0027185 <__gesf2>:
c0027185:	eb c3                	jmp    c002714a <__gtsf2>

c0027187 <__ltsf2>:
c0027187:	eb 84                	jmp    c002710d <__eqsf2>

c0027189 <__lesf2>:
c0027189:	eb 82                	jmp    c002710d <__eqsf2>

c002718b <__adddf3>:
c002718b:	55                   	push   ebp
c002718c:	89 e5                	mov    ebp,esp
c002718e:	57                   	push   edi
c002718f:	56                   	push   esi
c0027190:	53                   	push   ebx
c0027191:	83 ec 24             	sub    esp,0x24
c0027194:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027197:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002719a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002719d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00271a0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00271a3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00271a6:	89 c8                	mov    eax,ecx
c00271a8:	89 ce                	mov    esi,ecx
c00271aa:	c1 fe 14             	sar    esi,0x14
c00271ad:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c00271b0:	89 fb                	mov    ebx,edi
c00271b2:	89 fa                	mov    edx,edi
c00271b4:	c1 e2 0b             	shl    edx,0xb
c00271b7:	c1 e0 0b             	shl    eax,0xb
c00271ba:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00271bf:	c1 eb 15             	shr    ebx,0x15
c00271c2:	09 d8                	or     eax,ebx
c00271c4:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00271c7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00271ca:	c1 fe 14             	sar    esi,0x14
c00271cd:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00271d0:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00271d3:	89 f3                	mov    ebx,esi
c00271d5:	c1 e3 0b             	shl    ebx,0xb
c00271d8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00271db:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00271de:	c1 e3 0b             	shl    ebx,0xb
c00271e1:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c00271e7:	c1 ee 15             	shr    esi,0x15
c00271ea:	09 f3                	or     ebx,esi
c00271ec:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c00271ef:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00271f2:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c00271f5:	0f 88 5f 02 00 00    	js     c002745a <__adddf3+0x2cf>
c00271fb:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00271fe:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027201:	85 db                	test   ebx,ebx
c0027203:	0f 8e c7 00 00 00    	jle    c00272d0 <__adddf3+0x145>
c0027209:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027210:	75 1a                	jne    c002722c <__adddf3+0xa1>
c0027212:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027215:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027218:	0f 84 b2 05 00 00    	je     c00277d0 <__adddf3+0x645>
c002721e:	4b                   	dec    ebx
c002721f:	75 23                	jne    c0027244 <__adddf3+0xb9>
c0027221:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027224:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027227:	e9 99 00 00 00       	jmp    c00272c5 <__adddf3+0x13a>
c002722c:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002722f:	f7 d6                	not    esi
c0027231:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027237:	0f 84 93 05 00 00    	je     c00277d0 <__adddf3+0x645>
c002723d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027244:	83 fb 1f             	cmp    ebx,0x1f
c0027247:	7e 42                	jle    c002728b <__adddf3+0x100>
c0027249:	83 fb 3f             	cmp    ebx,0x3f
c002724c:	0f 8f 7e 05 00 00    	jg     c00277d0 <__adddf3+0x645>
c0027252:	83 e3 1f             	and    ebx,0x1f
c0027255:	89 d9                	mov    ecx,ebx
c0027257:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c002725a:	d3 ef                	shr    edi,cl
c002725c:	31 db                	xor    ebx,ebx
c002725e:	85 c9                	test   ecx,ecx
c0027260:	74 15                	je     c0027277 <__adddf3+0xec>
c0027262:	be 20 00 00 00       	mov    esi,0x20
c0027267:	29 ce                	sub    esi,ecx
c0027269:	89 f1                	mov    ecx,esi
c002726b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002726e:	d3 e6                	shl    esi,cl
c0027270:	31 db                	xor    ebx,ebx
c0027272:	85 f6                	test   esi,esi
c0027274:	0f 95 c3             	setne  bl
c0027277:	31 c9                	xor    ecx,ecx
c0027279:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002727d:	0f 95 c1             	setne  cl
c0027280:	09 cf                	or     edi,ecx
c0027282:	09 fb                	or     ebx,edi
c0027284:	01 da                	add    edx,ebx
c0027286:	83 d0 00             	adc    eax,0x0
c0027289:	eb 3a                	jmp    c00272c5 <__adddf3+0x13a>
c002728b:	bf 20 00 00 00       	mov    edi,0x20
c0027290:	29 df                	sub    edi,ebx
c0027292:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027295:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027298:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002729b:	d3 e6                	shl    esi,cl
c002729d:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00272a0:	88 d9                	mov    cl,bl
c00272a2:	d3 ef                	shr    edi,cl
c00272a4:	09 fe                	or     esi,edi
c00272a6:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00272a9:	88 d9                	mov    cl,bl
c00272ab:	d3 ef                	shr    edi,cl
c00272ad:	89 fb                	mov    ebx,edi
c00272af:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00272b2:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00272b5:	d3 e7                	shl    edi,cl
c00272b7:	85 ff                	test   edi,edi
c00272b9:	0f 95 c1             	setne  cl
c00272bc:	0f b6 c9             	movzx  ecx,cl
c00272bf:	09 ce                	or     esi,ecx
c00272c1:	01 f2                	add    edx,esi
c00272c3:	11 d8                	adc    eax,ebx
c00272c5:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00272c8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00272cb:	e9 52 01 00 00       	jmp    c0027422 <__adddf3+0x297>
c00272d0:	0f 84 d5 00 00 00    	je     c00273ab <__adddf3+0x220>
c00272d6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00272d9:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c00272dc:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00272df:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00272e2:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00272e9:	75 20                	jne    c002730b <__adddf3+0x180>
c00272eb:	89 d6                	mov    esi,edx
c00272ed:	09 c6                	or     esi,eax
c00272ef:	0f 84 db 04 00 00    	je     c00277d0 <__adddf3+0x645>
c00272f5:	4b                   	dec    ebx
c00272f6:	75 29                	jne    c0027321 <__adddf3+0x196>
c00272f8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00272fb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00272fe:	01 d1                	add    ecx,edx
c0027300:	11 c6                	adc    esi,eax
c0027302:	89 f0                	mov    eax,esi
c0027304:	89 ca                	mov    edx,ecx
c0027306:	e9 17 01 00 00       	jmp    c0027422 <__adddf3+0x297>
c002730b:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002730e:	f7 d6                	not    esi
c0027310:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027316:	0f 84 b4 04 00 00    	je     c00277d0 <__adddf3+0x645>
c002731c:	0d 00 00 00 80       	or     eax,0x80000000
c0027321:	83 fb 1f             	cmp    ebx,0x1f
c0027324:	7e 48                	jle    c002736e <__adddf3+0x1e3>
c0027326:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027329:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002732c:	83 fb 3f             	cmp    ebx,0x3f
c002732f:	0f 8f 9b 04 00 00    	jg     c00277d0 <__adddf3+0x645>
c0027335:	83 e3 1f             	and    ebx,0x1f
c0027338:	89 d9                	mov    ecx,ebx
c002733a:	89 c7                	mov    edi,eax
c002733c:	d3 ef                	shr    edi,cl
c002733e:	31 db                	xor    ebx,ebx
c0027340:	85 c9                	test   ecx,ecx
c0027342:	74 12                	je     c0027356 <__adddf3+0x1cb>
c0027344:	be 20 00 00 00       	mov    esi,0x20
c0027349:	29 ce                	sub    esi,ecx
c002734b:	89 f1                	mov    ecx,esi
c002734d:	d3 e0                	shl    eax,cl
c002734f:	31 db                	xor    ebx,ebx
c0027351:	85 c0                	test   eax,eax
c0027353:	0f 95 c3             	setne  bl
c0027356:	31 c0                	xor    eax,eax
c0027358:	85 d2                	test   edx,edx
c002735a:	0f 95 c0             	setne  al
c002735d:	09 c7                	or     edi,eax
c002735f:	09 fb                	or     ebx,edi
c0027361:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027364:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027367:	01 da                	add    edx,ebx
c0027369:	83 d6 00             	adc    esi,0x0
c002736c:	eb 39                	jmp    c00273a7 <__adddf3+0x21c>
c002736e:	be 20 00 00 00       	mov    esi,0x20
c0027373:	29 de                	sub    esi,ebx
c0027375:	89 c7                	mov    edi,eax
c0027377:	89 f1                	mov    ecx,esi
c0027379:	d3 e7                	shl    edi,cl
c002737b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002737e:	89 d7                	mov    edi,edx
c0027380:	88 d9                	mov    cl,bl
c0027382:	d3 ef                	shr    edi,cl
c0027384:	89 f9                	mov    ecx,edi
c0027386:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027389:	09 cf                	or     edi,ecx
c002738b:	88 d9                	mov    cl,bl
c002738d:	d3 e8                	shr    eax,cl
c002738f:	89 f1                	mov    ecx,esi
c0027391:	d3 e2                	shl    edx,cl
c0027393:	85 d2                	test   edx,edx
c0027395:	0f 95 c2             	setne  dl
c0027398:	0f b6 d2             	movzx  edx,dl
c002739b:	09 d7                	or     edi,edx
c002739d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00273a0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00273a3:	01 fa                	add    edx,edi
c00273a5:	11 c6                	adc    esi,eax
c00273a7:	89 f0                	mov    eax,esi
c00273a9:	eb 77                	jmp    c0027422 <__adddf3+0x297>
c00273ab:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00273ae:	46                   	inc    esi
c00273af:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00273b2:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00273b8:	75 41                	jne    c00273fb <__adddf3+0x270>
c00273ba:	89 d3                	mov    ebx,edx
c00273bc:	09 c3                	or     ebx,eax
c00273be:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00273c5:	75 27                	jne    c00273ee <__adddf3+0x263>
c00273c7:	85 db                	test   ebx,ebx
c00273c9:	0f 84 fb 03 00 00    	je     c00277ca <__adddf3+0x63f>
c00273cf:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00273d2:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00273d5:	0f 84 f5 03 00 00    	je     c00277d0 <__adddf3+0x645>
c00273db:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00273de:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00273e1:	85 c0                	test   eax,eax
c00273e3:	0f 89 91 03 00 00    	jns    c002777a <__adddf3+0x5ef>
c00273e9:	e9 85 03 00 00       	jmp    c0027773 <__adddf3+0x5e8>
c00273ee:	85 db                	test   ebx,ebx
c00273f0:	0f 85 da 03 00 00    	jne    c00277d0 <__adddf3+0x645>
c00273f6:	e9 cf 03 00 00       	jmp    c00277ca <__adddf3+0x63f>
c00273fb:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00273fe:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027401:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027404:	f7 d1                	not    ecx
c0027406:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002740c:	0f 84 70 03 00 00    	je     c0027782 <__adddf3+0x5f7>
c0027412:	d1 ea                	shr    edx,1
c0027414:	89 c1                	mov    ecx,eax
c0027416:	c1 e1 1f             	shl    ecx,0x1f
c0027419:	09 ca                	or     edx,ecx
c002741b:	d1 e8                	shr    eax,1
c002741d:	e9 6f 03 00 00       	jmp    c0027791 <__adddf3+0x606>
c0027422:	85 c0                	test   eax,eax
c0027424:	0f 89 67 03 00 00    	jns    c0027791 <__adddf3+0x606>
c002742a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c002742d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027430:	f7 d1                	not    ecx
c0027432:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027438:	0f 84 44 03 00 00    	je     c0027782 <__adddf3+0x5f7>
c002743e:	89 d1                	mov    ecx,edx
c0027440:	d1 e9                	shr    ecx,1
c0027442:	83 e2 01             	and    edx,0x1
c0027445:	09 ca                	or     edx,ecx
c0027447:	89 c1                	mov    ecx,eax
c0027449:	c1 e1 1f             	shl    ecx,0x1f
c002744c:	09 ca                	or     edx,ecx
c002744e:	d1 e8                	shr    eax,1
c0027450:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0027455:	e9 37 03 00 00       	jmp    c0027791 <__adddf3+0x606>
c002745a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002745d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027463:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0027466:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027469:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002746f:	29 de                	sub    esi,ebx
c0027471:	85 f6                	test   esi,esi
c0027473:	0f 8e bd 00 00 00    	jle    c0027536 <__adddf3+0x3ab>
c0027479:	85 db                	test   ebx,ebx
c002747b:	75 17                	jne    c0027494 <__adddf3+0x309>
c002747d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027480:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027483:	0f 84 47 03 00 00    	je     c00277d0 <__adddf3+0x645>
c0027489:	4e                   	dec    esi
c002748a:	75 20                	jne    c00274ac <__adddf3+0x321>
c002748c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002748f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027492:	eb 5b                	jmp    c00274ef <__adddf3+0x364>
c0027494:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027497:	f7 d3                	not    ebx
c0027499:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002749f:	0f 84 2b 03 00 00    	je     c00277d0 <__adddf3+0x645>
c00274a5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00274ac:	83 fe 1f             	cmp    esi,0x1f
c00274af:	7e 49                	jle    c00274fa <__adddf3+0x36f>
c00274b1:	83 fe 3f             	cmp    esi,0x3f
c00274b4:	0f 8f 16 03 00 00    	jg     c00277d0 <__adddf3+0x645>
c00274ba:	83 e6 1f             	and    esi,0x1f
c00274bd:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00274c0:	89 f1                	mov    ecx,esi
c00274c2:	d3 ef                	shr    edi,cl
c00274c4:	31 db                	xor    ebx,ebx
c00274c6:	85 f6                	test   esi,esi
c00274c8:	74 13                	je     c00274dd <__adddf3+0x352>
c00274ca:	b9 20 00 00 00       	mov    ecx,0x20
c00274cf:	29 f1                	sub    ecx,esi
c00274d1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00274d4:	d3 e6                	shl    esi,cl
c00274d6:	31 db                	xor    ebx,ebx
c00274d8:	85 f6                	test   esi,esi
c00274da:	0f 95 c3             	setne  bl
c00274dd:	31 c9                	xor    ecx,ecx
c00274df:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00274e3:	0f 95 c1             	setne  cl
c00274e6:	09 cf                	or     edi,ecx
c00274e8:	09 fb                	or     ebx,edi
c00274ea:	29 da                	sub    edx,ebx
c00274ec:	83 d8 00             	sbb    eax,0x0
c00274ef:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00274f2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00274f5:	e9 aa 01 00 00       	jmp    c00276a4 <__adddf3+0x519>
c00274fa:	bf 20 00 00 00       	mov    edi,0x20
c00274ff:	29 f7                	sub    edi,esi
c0027501:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027504:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027507:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002750a:	d3 e3                	shl    ebx,cl
c002750c:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002750f:	89 f1                	mov    ecx,esi
c0027511:	d3 ef                	shr    edi,cl
c0027513:	09 fb                	or     ebx,edi
c0027515:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027518:	89 f1                	mov    ecx,esi
c002751a:	d3 ef                	shr    edi,cl
c002751c:	89 fe                	mov    esi,edi
c002751e:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027521:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027524:	d3 e7                	shl    edi,cl
c0027526:	85 ff                	test   edi,edi
c0027528:	0f 95 c1             	setne  cl
c002752b:	0f b6 c9             	movzx  ecx,cl
c002752e:	09 cb                	or     ebx,ecx
c0027530:	29 da                	sub    edx,ebx
c0027532:	19 f0                	sbb    eax,esi
c0027534:	eb b9                	jmp    c00274ef <__adddf3+0x364>
c0027536:	0f 84 cd 00 00 00    	je     c0027609 <__adddf3+0x47e>
c002753c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c002753f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027542:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027545:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027549:	75 1b                	jne    c0027566 <__adddf3+0x3db>
c002754b:	89 d6                	mov    esi,edx
c002754d:	09 c6                	or     esi,eax
c002754f:	0f 84 7b 02 00 00    	je     c00277d0 <__adddf3+0x645>
c0027555:	4b                   	dec    ebx
c0027556:	75 24                	jne    c002757c <__adddf3+0x3f1>
c0027558:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002755b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002755e:	29 d1                	sub    ecx,edx
c0027560:	19 c6                	sbb    esi,eax
c0027562:	89 ca                	mov    edx,ecx
c0027564:	eb 61                	jmp    c00275c7 <__adddf3+0x43c>
c0027566:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027569:	f7 d6                	not    esi
c002756b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027571:	0f 84 59 02 00 00    	je     c00277d0 <__adddf3+0x645>
c0027577:	0d 00 00 00 80       	or     eax,0x80000000
c002757c:	83 fb 1f             	cmp    ebx,0x1f
c002757f:	7e 4d                	jle    c00275ce <__adddf3+0x443>
c0027581:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027584:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027587:	83 fb 3f             	cmp    ebx,0x3f
c002758a:	0f 8f 40 02 00 00    	jg     c00277d0 <__adddf3+0x645>
c0027590:	83 e3 1f             	and    ebx,0x1f
c0027593:	89 d9                	mov    ecx,ebx
c0027595:	89 c7                	mov    edi,eax
c0027597:	d3 ef                	shr    edi,cl
c0027599:	31 db                	xor    ebx,ebx
c002759b:	85 c9                	test   ecx,ecx
c002759d:	74 12                	je     c00275b1 <__adddf3+0x426>
c002759f:	be 20 00 00 00       	mov    esi,0x20
c00275a4:	29 ce                	sub    esi,ecx
c00275a6:	89 f1                	mov    ecx,esi
c00275a8:	d3 e0                	shl    eax,cl
c00275aa:	31 db                	xor    ebx,ebx
c00275ac:	85 c0                	test   eax,eax
c00275ae:	0f 95 c3             	setne  bl
c00275b1:	31 c0                	xor    eax,eax
c00275b3:	85 d2                	test   edx,edx
c00275b5:	0f 95 c0             	setne  al
c00275b8:	09 c7                	or     edi,eax
c00275ba:	09 fb                	or     ebx,edi
c00275bc:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00275bf:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00275c2:	29 da                	sub    edx,ebx
c00275c4:	83 de 00             	sbb    esi,0x0
c00275c7:	89 f0                	mov    eax,esi
c00275c9:	e9 d6 00 00 00       	jmp    c00276a4 <__adddf3+0x519>
c00275ce:	be 20 00 00 00       	mov    esi,0x20
c00275d3:	29 de                	sub    esi,ebx
c00275d5:	89 c7                	mov    edi,eax
c00275d7:	89 f1                	mov    ecx,esi
c00275d9:	d3 e7                	shl    edi,cl
c00275db:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00275de:	89 d7                	mov    edi,edx
c00275e0:	88 d9                	mov    cl,bl
c00275e2:	d3 ef                	shr    edi,cl
c00275e4:	89 f9                	mov    ecx,edi
c00275e6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00275e9:	09 cf                	or     edi,ecx
c00275eb:	88 d9                	mov    cl,bl
c00275ed:	d3 e8                	shr    eax,cl
c00275ef:	89 f1                	mov    ecx,esi
c00275f1:	d3 e2                	shl    edx,cl
c00275f3:	85 d2                	test   edx,edx
c00275f5:	0f 95 c2             	setne  dl
c00275f8:	0f b6 d2             	movzx  edx,dl
c00275fb:	09 d7                	or     edi,edx
c00275fd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027600:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027603:	29 fa                	sub    edx,edi
c0027605:	19 c6                	sbb    esi,eax
c0027607:	eb be                	jmp    c00275c7 <__adddf3+0x43c>
c0027609:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002760c:	8d 5e 01             	lea    ebx,[esi+0x1]
c002760f:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027615:	75 6a                	jne    c0027681 <__adddf3+0x4f6>
c0027617:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002761b:	75 58                	jne    c0027675 <__adddf3+0x4ea>
c002761d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027620:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027623:	89 d6                	mov    esi,edx
c0027625:	09 c6                	or     esi,eax
c0027627:	75 17                	jne    c0027640 <__adddf3+0x4b5>
c0027629:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002762c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002762f:	85 db                	test   ebx,ebx
c0027631:	0f 85 99 01 00 00    	jne    c00277d0 <__adddf3+0x645>
c0027637:	31 ff                	xor    edi,edi
c0027639:	31 c9                	xor    ecx,ecx
c002763b:	e9 90 01 00 00       	jmp    c00277d0 <__adddf3+0x645>
c0027640:	85 db                	test   ebx,ebx
c0027642:	0f 84 88 01 00 00    	je     c00277d0 <__adddf3+0x645>
c0027648:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002764b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002764e:	85 c0                	test   eax,eax
c0027650:	79 10                	jns    c0027662 <__adddf3+0x4d7>
c0027652:	31 c9                	xor    ecx,ecx
c0027654:	f7 da                	neg    edx
c0027656:	0f 95 c1             	setne  cl
c0027659:	01 c8                	add    eax,ecx
c002765b:	f7 d8                	neg    eax
c002765d:	e9 2f 01 00 00       	jmp    c0027791 <__adddf3+0x606>
c0027662:	31 ff                	xor    edi,edi
c0027664:	31 c9                	xor    ecx,ecx
c0027666:	89 c3                	mov    ebx,eax
c0027668:	09 d3                	or     ebx,edx
c002766a:	0f 84 60 01 00 00    	je     c00277d0 <__adddf3+0x645>
c0027670:	e9 05 01 00 00       	jmp    c002777a <__adddf3+0x5ef>
c0027675:	31 ff                	xor    edi,edi
c0027677:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002767c:	e9 4f 01 00 00       	jmp    c00277d0 <__adddf3+0x645>
c0027681:	89 c1                	mov    ecx,eax
c0027683:	89 d0                	mov    eax,edx
c0027685:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027688:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c002768b:	89 ca                	mov    edx,ecx
c002768d:	85 c9                	test   ecx,ecx
c002768f:	79 2c                	jns    c00276bd <__adddf3+0x532>
c0027691:	31 c9                	xor    ecx,ecx
c0027693:	f7 d8                	neg    eax
c0027695:	0f 95 c1             	setne  cl
c0027698:	01 ca                	add    edx,ecx
c002769a:	f7 da                	neg    edx
c002769c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002769f:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00276a2:	eb 19                	jmp    c00276bd <__adddf3+0x532>
c00276a4:	85 c0                	test   eax,eax
c00276a6:	0f 89 e5 00 00 00    	jns    c0027791 <__adddf3+0x606>
c00276ac:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00276b1:	89 c1                	mov    ecx,eax
c00276b3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00276b6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00276b9:	89 d0                	mov    eax,edx
c00276bb:	89 ca                	mov    edx,ecx
c00276bd:	85 d2                	test   edx,edx
c00276bf:	74 59                	je     c002771a <__adddf3+0x58f>
c00276c1:	0f bd da             	bsr    ebx,edx
c00276c4:	83 f3 1f             	xor    ebx,0x1f
c00276c7:	88 d9                	mov    cl,bl
c00276c9:	d3 e2                	shl    edx,cl
c00276cb:	bf 20 00 00 00       	mov    edi,0x20
c00276d0:	89 f9                	mov    ecx,edi
c00276d2:	29 d9                	sub    ecx,ebx
c00276d4:	89 c6                	mov    esi,eax
c00276d6:	d3 ee                	shr    esi,cl
c00276d8:	09 d6                	or     esi,edx
c00276da:	88 d9                	mov    cl,bl
c00276dc:	d3 e0                	shl    eax,cl
c00276de:	89 c2                	mov    edx,eax
c00276e0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00276e3:	25 ff 07 00 00       	and    eax,0x7ff
c00276e8:	39 d8                	cmp    eax,ebx
c00276ea:	7f 22                	jg     c002770e <__adddf3+0x583>
c00276ec:	29 c3                	sub    ebx,eax
c00276ee:	43                   	inc    ebx
c00276ef:	88 d9                	mov    cl,bl
c00276f1:	d3 ea                	shr    edx,cl
c00276f3:	29 df                	sub    edi,ebx
c00276f5:	89 f9                	mov    ecx,edi
c00276f7:	89 f0                	mov    eax,esi
c00276f9:	d3 e0                	shl    eax,cl
c00276fb:	09 c2                	or     edx,eax
c00276fd:	89 f0                	mov    eax,esi
c00276ff:	88 d9                	mov    cl,bl
c0027701:	d3 e8                	shr    eax,cl
c0027703:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027706:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c002770c:	eb 6f                	jmp    c002777d <__adddf3+0x5f2>
c002770e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027711:	29 d8                	sub    eax,ebx
c0027713:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027716:	89 f0                	mov    eax,esi
c0027718:	eb 59                	jmp    c0027773 <__adddf3+0x5e8>
c002771a:	85 c0                	test   eax,eax
c002771c:	74 6a                	je     c0027788 <__adddf3+0x5fd>
c002771e:	0f bd c8             	bsr    ecx,eax
c0027721:	83 f1 1f             	xor    ecx,0x1f
c0027724:	d3 e0                	shl    eax,cl
c0027726:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027729:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002772f:	83 c1 20             	add    ecx,0x20
c0027732:	39 cb                	cmp    ebx,ecx
c0027734:	7f 35                	jg     c002776b <__adddf3+0x5e0>
c0027736:	29 d9                	sub    ecx,ebx
c0027738:	8d 71 01             	lea    esi,[ecx+0x1]
c002773b:	83 fe 1f             	cmp    esi,0x1f
c002773e:	7e 09                	jle    c0027749 <__adddf3+0x5be>
c0027740:	83 e9 1f             	sub    ecx,0x1f
c0027743:	d3 e8                	shr    eax,cl
c0027745:	89 c3                	mov    ebx,eax
c0027747:	eb 11                	jmp    c002775a <__adddf3+0x5cf>
c0027749:	b9 20 00 00 00       	mov    ecx,0x20
c002774e:	29 f1                	sub    ecx,esi
c0027750:	89 c3                	mov    ebx,eax
c0027752:	d3 e3                	shl    ebx,cl
c0027754:	89 f1                	mov    ecx,esi
c0027756:	d3 e8                	shr    eax,cl
c0027758:	89 c2                	mov    edx,eax
c002775a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002775d:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027762:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027765:	89 d0                	mov    eax,edx
c0027767:	89 da                	mov    edx,ebx
c0027769:	eb 26                	jmp    c0027791 <__adddf3+0x606>
c002776b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002776e:	29 cf                	sub    edi,ecx
c0027770:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027773:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027778:	eb 17                	jmp    c0027791 <__adddf3+0x606>
c002777a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002777d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027780:	eb 0f                	jmp    c0027791 <__adddf3+0x606>
c0027782:	31 d2                	xor    edx,edx
c0027784:	31 c0                	xor    eax,eax
c0027786:	eb 09                	jmp    c0027791 <__adddf3+0x606>
c0027788:	89 c2                	mov    edx,eax
c002778a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027791:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027794:	c1 e1 14             	shl    ecx,0x14
c0027797:	89 c3                	mov    ebx,eax
c0027799:	c1 eb 0b             	shr    ebx,0xb
c002779c:	09 d9                	or     ecx,ebx
c002779e:	89 d3                	mov    ebx,edx
c00277a0:	c1 eb 0b             	shr    ebx,0xb
c00277a3:	c1 e0 15             	shl    eax,0x15
c00277a6:	09 d8                	or     eax,ebx
c00277a8:	89 c7                	mov    edi,eax
c00277aa:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c00277b0:	0f 95 c0             	setne  al
c00277b3:	89 c6                	mov    esi,eax
c00277b5:	09 f3                	or     ebx,esi
c00277b7:	83 e3 01             	and    ebx,0x1
c00277ba:	c1 ea 0a             	shr    edx,0xa
c00277bd:	21 da                	and    edx,ebx
c00277bf:	89 f8                	mov    eax,edi
c00277c1:	01 d0                	add    eax,edx
c00277c3:	83 d1 00             	adc    ecx,0x0
c00277c6:	89 c7                	mov    edi,eax
c00277c8:	eb 06                	jmp    c00277d0 <__adddf3+0x645>
c00277ca:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00277cd:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00277d0:	89 f8                	mov    eax,edi
c00277d2:	89 ca                	mov    edx,ecx
c00277d4:	83 c4 24             	add    esp,0x24
c00277d7:	5b                   	pop    ebx
c00277d8:	5e                   	pop    esi
c00277d9:	5f                   	pop    edi
c00277da:	5d                   	pop    ebp
c00277db:	c3                   	ret    

c00277dc <__subdf3>:
c00277dc:	55                   	push   ebp
c00277dd:	89 e5                	mov    ebp,esp
c00277df:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00277e2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00277e5:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00277eb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00277ee:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00277f1:	5d                   	pop    ebp
c00277f2:	e9 94 f9 ff ff       	jmp    c002718b <__adddf3>

c00277f7 <__negdf2>:
c00277f7:	55                   	push   ebp
c00277f8:	89 e5                	mov    ebp,esp
c00277fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00277fd:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027800:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027806:	5d                   	pop    ebp
c0027807:	c3                   	ret    

c0027808 <__muldf3>:
c0027808:	55                   	push   ebp
c0027809:	89 e5                	mov    ebp,esp
c002780b:	57                   	push   edi
c002780c:	56                   	push   esi
c002780d:	53                   	push   ebx
c002780e:	83 ec 24             	sub    esp,0x24
c0027811:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027814:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027817:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002781a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002781d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027820:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027823:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027826:	89 c8                	mov    eax,ecx
c0027828:	c1 f8 14             	sar    eax,0x14
c002782b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002782e:	89 f8                	mov    eax,edi
c0027830:	89 fb                	mov    ebx,edi
c0027832:	c1 e3 0b             	shl    ebx,0xb
c0027835:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027838:	c1 e1 0b             	shl    ecx,0xb
c002783b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027841:	c1 e8 15             	shr    eax,0x15
c0027844:	09 c1                	or     ecx,eax
c0027846:	89 d6                	mov    esi,edx
c0027848:	89 d0                	mov    eax,edx
c002784a:	c1 f8 14             	sar    eax,0x14
c002784d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027850:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027853:	89 c3                	mov    ebx,eax
c0027855:	c1 e3 0b             	shl    ebx,0xb
c0027858:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002785b:	c1 e6 0b             	shl    esi,0xb
c002785e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027864:	c1 e8 15             	shr    eax,0x15
c0027867:	09 c6                	or     esi,eax
c0027869:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002786c:	25 ff 07 00 00       	and    eax,0x7ff
c0027871:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027874:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027877:	25 ff 07 00 00       	and    eax,0x7ff
c002787c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002787f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027882:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027885:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c002788c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002788f:	40                   	inc    eax
c0027890:	a9 fe 07 00 00       	test   eax,0x7fe
c0027895:	0f 85 8d 00 00 00    	jne    c0027928 <__muldf3+0x120>
c002789b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002789e:	09 c8                	or     eax,ecx
c00278a0:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c00278a4:	74 44                	je     c00278ea <__muldf3+0xe2>
c00278a6:	85 c0                	test   eax,eax
c00278a8:	0f 85 31 02 00 00    	jne    c0027adf <__muldf3+0x2d7>
c00278ae:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00278b1:	40                   	inc    eax
c00278b2:	a9 fe 07 00 00       	test   eax,0x7fe
c00278b7:	75 13                	jne    c00278cc <__muldf3+0xc4>
c00278b9:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00278bc:	09 f1                	or     ecx,esi
c00278be:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00278c2:	74 22                	je     c00278e6 <__muldf3+0xde>
c00278c4:	85 c9                	test   ecx,ecx
c00278c6:	0f 85 0d 02 00 00    	jne    c0027ad9 <__muldf3+0x2d1>
c00278cc:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c00278d0:	0f 89 09 02 00 00    	jns    c0027adf <__muldf3+0x2d7>
c00278d6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00278d9:	05 00 00 00 80       	add    eax,0x80000000
c00278de:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00278e1:	e9 f9 01 00 00       	jmp    c0027adf <__muldf3+0x2d7>
c00278e6:	85 c9                	test   ecx,ecx
c00278e8:	eb 2e                	jmp    c0027918 <__muldf3+0x110>
c00278ea:	85 c0                	test   eax,eax
c00278ec:	74 20                	je     c002790e <__muldf3+0x106>
c00278ee:	8d 04 09             	lea    eax,[ecx+ecx*1]
c00278f1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00278f4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00278f7:	c1 ef 1f             	shr    edi,0x1f
c00278fa:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c00278fd:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027900:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027903:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027906:	09 f9                	or     ecx,edi
c0027908:	78 1e                	js     c0027928 <__muldf3+0x120>
c002790a:	89 c3                	mov    ebx,eax
c002790c:	eb e0                	jmp    c00278ee <__muldf3+0xe6>
c002790e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027911:	f7 d0                	not    eax
c0027913:	a9 ff 07 00 00       	test   eax,0x7ff
c0027918:	75 b2                	jne    c00278cc <__muldf3+0xc4>
c002791a:	31 ff                	xor    edi,edi
c002791c:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027923:	e9 b7 01 00 00       	jmp    c0027adf <__muldf3+0x2d7>
c0027928:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002792b:	40                   	inc    eax
c002792c:	a9 fe 07 00 00       	test   eax,0x7fe
c0027931:	75 57                	jne    c002798a <__muldf3+0x182>
c0027933:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027936:	09 f0                	or     eax,esi
c0027938:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002793c:	74 23                	je     c0027961 <__muldf3+0x159>
c002793e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027942:	0f 89 91 01 00 00    	jns    c0027ad9 <__muldf3+0x2d1>
c0027948:	85 c0                	test   eax,eax
c002794a:	0f 85 89 01 00 00    	jne    c0027ad9 <__muldf3+0x2d1>
c0027950:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027953:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027959:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002795c:	e9 7e 01 00 00       	jmp    c0027adf <__muldf3+0x2d7>
c0027961:	85 c0                	test   eax,eax
c0027963:	75 0c                	jne    c0027971 <__muldf3+0x169>
c0027965:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027969:	0f 89 6a 01 00 00    	jns    c0027ad9 <__muldf3+0x2d1>
c002796f:	eb df                	jmp    c0027950 <__muldf3+0x148>
c0027971:	01 f6                	add    esi,esi
c0027973:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027976:	c1 ea 1f             	shr    edx,0x1f
c0027979:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002797c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c002797f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027982:	09 d6                	or     esi,edx
c0027984:	78 04                	js     c002798a <__muldf3+0x182>
c0027986:	89 c3                	mov    ebx,eax
c0027988:	eb e7                	jmp    c0027971 <__muldf3+0x169>
c002798a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027990:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027996:	89 c8                	mov    eax,ecx
c0027998:	f7 e6                	mul    esi
c002799a:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c002799d:	89 c7                	mov    edi,eax
c002799f:	89 c8                	mov    eax,ecx
c00279a1:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00279a4:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00279a7:	89 c1                	mov    ecx,eax
c00279a9:	89 f0                	mov    eax,esi
c00279ab:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c00279ae:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c00279b1:	89 c6                	mov    esi,eax
c00279b3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00279b6:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00279b9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00279bc:	31 c0                	xor    eax,eax
c00279be:	01 f1                	add    ecx,esi
c00279c0:	0f 92 c0             	setb   al
c00279c3:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c00279c6:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00279c9:	83 d6 00             	adc    esi,0x0
c00279cc:	01 c7                	add    edi,eax
c00279ce:	83 d6 00             	adc    esi,0x0
c00279d1:	01 ca                	add    edx,ecx
c00279d3:	0f 92 c1             	setb   cl
c00279d6:	0f b6 c9             	movzx  ecx,cl
c00279d9:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c00279dc:	83 d6 00             	adc    esi,0x0
c00279df:	01 cf                	add    edi,ecx
c00279e1:	83 d6 00             	adc    esi,0x0
c00279e4:	31 c9                	xor    ecx,ecx
c00279e6:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c00279e9:	0f 95 c1             	setne  cl
c00279ec:	09 cf                	or     edi,ecx
c00279ee:	85 f6                	test   esi,esi
c00279f0:	78 0c                	js     c00279fe <__muldf3+0x1f6>
c00279f2:	01 f6                	add    esi,esi
c00279f4:	89 f8                	mov    eax,edi
c00279f6:	c1 e8 1f             	shr    eax,0x1f
c00279f9:	09 c6                	or     esi,eax
c00279fb:	01 ff                	add    edi,edi
c00279fd:	4b                   	dec    ebx
c00279fe:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027a04:	0f 8f 85 00 00 00    	jg     c0027a8f <__muldf3+0x287>
c0027a0a:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027a10:	85 db                	test   ebx,ebx
c0027a12:	0f 8f 84 00 00 00    	jg     c0027a9c <__muldf3+0x294>
c0027a18:	83 fb cc             	cmp    ebx,0xffffffcc
c0027a1b:	7c 79                	jl     c0027a96 <__muldf3+0x28e>
c0027a1d:	ba 01 00 00 00       	mov    edx,0x1
c0027a22:	29 da                	sub    edx,ebx
c0027a24:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027a2a:	83 fa 1f             	cmp    edx,0x1f
c0027a2d:	7e 30                	jle    c0027a5f <__muldf3+0x257>
c0027a2f:	83 fa 20             	cmp    edx,0x20
c0027a32:	75 0b                	jne    c0027a3f <__muldf3+0x237>
c0027a34:	31 c0                	xor    eax,eax
c0027a36:	85 ff                	test   edi,edi
c0027a38:	0f 95 c0             	setne  al
c0027a3b:	89 c7                	mov    edi,eax
c0027a3d:	eb 1a                	jmp    c0027a59 <__muldf3+0x251>
c0027a3f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027a42:	89 f0                	mov    eax,esi
c0027a44:	d3 e0                	shl    eax,cl
c0027a46:	09 f8                	or     eax,edi
c0027a48:	0f 95 c0             	setne  al
c0027a4b:	0f b6 c0             	movzx  eax,al
c0027a4e:	89 c7                	mov    edi,eax
c0027a50:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027a55:	29 d9                	sub    ecx,ebx
c0027a57:	d3 ee                	shr    esi,cl
c0027a59:	09 f7                	or     edi,esi
c0027a5b:	31 db                	xor    ebx,ebx
c0027a5d:	eb 3b                	jmp    c0027a9a <__muldf3+0x292>
c0027a5f:	83 c3 1f             	add    ebx,0x1f
c0027a62:	89 f0                	mov    eax,esi
c0027a64:	88 d9                	mov    cl,bl
c0027a66:	d3 e0                	shl    eax,cl
c0027a68:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027a6b:	89 f8                	mov    eax,edi
c0027a6d:	88 d1                	mov    cl,dl
c0027a6f:	d3 e8                	shr    eax,cl
c0027a71:	89 c1                	mov    ecx,eax
c0027a73:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027a76:	09 c8                	or     eax,ecx
c0027a78:	88 d9                	mov    cl,bl
c0027a7a:	d3 e7                	shl    edi,cl
c0027a7c:	31 db                	xor    ebx,ebx
c0027a7e:	85 ff                	test   edi,edi
c0027a80:	0f 95 c3             	setne  bl
c0027a83:	89 df                	mov    edi,ebx
c0027a85:	09 c7                	or     edi,eax
c0027a87:	88 d1                	mov    cl,dl
c0027a89:	d3 ee                	shr    esi,cl
c0027a8b:	31 db                	xor    ebx,ebx
c0027a8d:	eb 0d                	jmp    c0027a9c <__muldf3+0x294>
c0027a8f:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027a94:	eb 02                	jmp    c0027a98 <__muldf3+0x290>
c0027a96:	31 db                	xor    ebx,ebx
c0027a98:	31 ff                	xor    edi,edi
c0027a9a:	31 f6                	xor    esi,esi
c0027a9c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027a9f:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027aa2:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027aa7:	09 c3                	or     ebx,eax
c0027aa9:	c1 e3 14             	shl    ebx,0x14
c0027aac:	89 f0                	mov    eax,esi
c0027aae:	c1 e8 0b             	shr    eax,0xb
c0027ab1:	09 c3                	or     ebx,eax
c0027ab3:	89 f8                	mov    eax,edi
c0027ab5:	c1 e8 0b             	shr    eax,0xb
c0027ab8:	c1 e6 15             	shl    esi,0x15
c0027abb:	09 c6                	or     esi,eax
c0027abd:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027ac3:	0f 95 c1             	setne  cl
c0027ac6:	09 c8                	or     eax,ecx
c0027ac8:	83 e0 01             	and    eax,0x1
c0027acb:	c1 ef 0a             	shr    edi,0xa
c0027ace:	21 c7                	and    edi,eax
c0027ad0:	01 f7                	add    edi,esi
c0027ad2:	83 d3 00             	adc    ebx,0x0
c0027ad5:	89 da                	mov    edx,ebx
c0027ad7:	eb 03                	jmp    c0027adc <__muldf3+0x2d4>
c0027ad9:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027adc:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027adf:	89 f8                	mov    eax,edi
c0027ae1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027ae4:	83 c4 24             	add    esp,0x24
c0027ae7:	5b                   	pop    ebx
c0027ae8:	5e                   	pop    esi
c0027ae9:	5f                   	pop    edi
c0027aea:	5d                   	pop    ebp
c0027aeb:	c3                   	ret    

c0027aec <__divdf3>:
c0027aec:	55                   	push   ebp
c0027aed:	89 e5                	mov    ebp,esp
c0027aef:	57                   	push   edi
c0027af0:	56                   	push   esi
c0027af1:	53                   	push   ebx
c0027af2:	83 ec 2c             	sub    esp,0x2c
c0027af5:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027af8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027afb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027afe:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027b01:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027b04:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027b07:	89 ce                	mov    esi,ecx
c0027b09:	89 c8                	mov    eax,ecx
c0027b0b:	c1 f8 14             	sar    eax,0x14
c0027b0e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027b11:	89 f8                	mov    eax,edi
c0027b13:	89 fb                	mov    ebx,edi
c0027b15:	c1 e3 0b             	shl    ebx,0xb
c0027b18:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027b1b:	c1 e6 0b             	shl    esi,0xb
c0027b1e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027b24:	c1 e8 15             	shr    eax,0x15
c0027b27:	09 c6                	or     esi,eax
c0027b29:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027b2c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027b2f:	89 c2                	mov    edx,eax
c0027b31:	c1 fa 14             	sar    edx,0x14
c0027b34:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027b37:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027b3a:	89 de                	mov    esi,ebx
c0027b3c:	c1 e6 0b             	shl    esi,0xb
c0027b3f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027b42:	c1 e0 0b             	shl    eax,0xb
c0027b45:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027b4a:	c1 eb 15             	shr    ebx,0x15
c0027b4d:	09 d8                	or     eax,ebx
c0027b4f:	89 c2                	mov    edx,eax
c0027b51:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027b54:	25 ff 07 00 00       	and    eax,0x7ff
c0027b59:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027b5c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027b5f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027b65:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027b68:	29 d8                	sub    eax,ebx
c0027b6a:	05 ff 03 00 00       	add    eax,0x3ff
c0027b6f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027b72:	46                   	inc    esi
c0027b73:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027b79:	0f 85 a5 00 00 00    	jne    c0027c24 <__divdf3+0x138>
c0027b7f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027b82:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027b85:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027b89:	74 2a                	je     c0027bb5 <__divdf3+0xc9>
c0027b8b:	85 f6                	test   esi,esi
c0027b8d:	0f 85 cc 02 00 00    	jne    c0027e5f <__divdf3+0x373>
c0027b93:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b96:	40                   	inc    eax
c0027b97:	a9 fe 07 00 00       	test   eax,0x7fe
c0027b9c:	75 26                	jne    c0027bc4 <__divdf3+0xd8>
c0027b9e:	85 db                	test   ebx,ebx
c0027ba0:	74 22                	je     c0027bc4 <__divdf3+0xd8>
c0027ba2:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027ba5:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027ba8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027bab:	09 d0                	or     eax,edx
c0027bad:	0f 85 ac 02 00 00    	jne    c0027e5f <__divdf3+0x373>
c0027bb3:	eb 63                	jmp    c0027c18 <__divdf3+0x12c>
c0027bb5:	85 f6                	test   esi,esi
c0027bb7:	75 22                	jne    c0027bdb <__divdf3+0xef>
c0027bb9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027bbc:	40                   	inc    eax
c0027bbd:	a9 fe 07 00 00       	test   eax,0x7fe
c0027bc2:	74 36                	je     c0027bfa <__divdf3+0x10e>
c0027bc4:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027bc8:	0f 89 91 02 00 00    	jns    c0027e5f <__divdf3+0x373>
c0027bce:	89 f8                	mov    eax,edi
c0027bd0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027bd6:	e9 80 02 00 00       	jmp    c0027e5b <__divdf3+0x36f>
c0027bdb:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027bde:	01 f6                	add    esi,esi
c0027be0:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027be3:	c1 ef 1f             	shr    edi,0x1f
c0027be6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027be9:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027bec:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027bef:	09 f7                	or     edi,esi
c0027bf1:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027bf4:	78 2e                	js     c0027c24 <__divdf3+0x138>
c0027bf6:	89 c8                	mov    eax,ecx
c0027bf8:	eb e1                	jmp    c0027bdb <__divdf3+0xef>
c0027bfa:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027bfd:	09 d0                	or     eax,edx
c0027bff:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027c03:	74 0f                	je     c0027c14 <__divdf3+0x128>
c0027c05:	85 c0                	test   eax,eax
c0027c07:	74 bb                	je     c0027bc4 <__divdf3+0xd8>
c0027c09:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027c0c:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027c0f:	e9 4b 02 00 00       	jmp    c0027e5f <__divdf3+0x373>
c0027c14:	85 c0                	test   eax,eax
c0027c16:	75 ac                	jne    c0027bc4 <__divdf3+0xd8>
c0027c18:	31 ff                	xor    edi,edi
c0027c1a:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027c1f:	e9 3b 02 00 00       	jmp    c0027e5f <__divdf3+0x373>
c0027c24:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027c27:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027c2a:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027c30:	75 6b                	jne    c0027c9d <__divdf3+0x1b1>
c0027c32:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027c35:	09 d6                	or     esi,edx
c0027c37:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027c3b:	74 28                	je     c0027c65 <__divdf3+0x179>
c0027c3d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027c40:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027c43:	85 f6                	test   esi,esi
c0027c45:	0f 85 14 02 00 00    	jne    c0027e5f <__divdf3+0x373>
c0027c4b:	31 ff                	xor    edi,edi
c0027c4d:	31 c9                	xor    ecx,ecx
c0027c4f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c52:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027c55:	0f 89 04 02 00 00    	jns    c0027e5f <__divdf3+0x373>
c0027c5b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0027c60:	e9 fa 01 00 00       	jmp    c0027e5f <__divdf3+0x373>
c0027c65:	85 f6                	test   esi,esi
c0027c67:	75 1b                	jne    c0027c84 <__divdf3+0x198>
c0027c69:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c6c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027c6f:	25 00 00 00 80       	and    eax,0x80000000
c0027c74:	31 c9                	xor    ecx,ecx
c0027c76:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0027c7b:	89 cf                	mov    edi,ecx
c0027c7d:	89 c1                	mov    ecx,eax
c0027c7f:	e9 db 01 00 00       	jmp    c0027e5f <__divdf3+0x373>
c0027c84:	01 d2                	add    edx,edx
c0027c86:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027c89:	c1 eb 1f             	shr    ebx,0x1f
c0027c8c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027c8f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0027c92:	8d 48 01             	lea    ecx,[eax+0x1]
c0027c95:	09 da                	or     edx,ebx
c0027c97:	78 04                	js     c0027c9d <__divdf3+0x1b1>
c0027c99:	89 c8                	mov    eax,ecx
c0027c9b:	eb e7                	jmp    c0027c84 <__divdf3+0x198>
c0027c9d:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027ca0:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027ca6:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027cac:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0027caf:	39 d6                	cmp    esi,edx
c0027cb1:	77 0d                	ja     c0027cc0 <__divdf3+0x1d4>
c0027cb3:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0027cb6:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0027cb9:	72 1b                	jb     c0027cd6 <__divdf3+0x1ea>
c0027cbb:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0027cbe:	75 16                	jne    c0027cd6 <__divdf3+0x1ea>
c0027cc0:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027cc3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027cc6:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0027cc9:	83 de 00             	sbb    esi,0x0
c0027ccc:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0027ccf:	ba 01 00 00 00       	mov    edx,0x1
c0027cd4:	eb 02                	jmp    c0027cd8 <__divdf3+0x1ec>
c0027cd6:	31 d2                	xor    edx,edx
c0027cd8:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0027cdf:	31 ff                	xor    edi,edi
c0027ce1:	01 ff                	add    edi,edi
c0027ce3:	89 d1                	mov    ecx,edx
c0027ce5:	c1 e9 1f             	shr    ecx,0x1f
c0027ce8:	09 cf                	or     edi,ecx
c0027cea:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0027ced:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0027cf0:	89 da                	mov    edx,ebx
c0027cf2:	89 f3                	mov    ebx,esi
c0027cf4:	8d 34 36             	lea    esi,[esi+esi*1]
c0027cf7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027cfa:	c1 e9 1f             	shr    ecx,0x1f
c0027cfd:	09 ce                	or     esi,ecx
c0027cff:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027d02:	01 c9                	add    ecx,ecx
c0027d04:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0027d07:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027d0a:	85 db                	test   ebx,ebx
c0027d0c:	78 29                	js     c0027d37 <__divdf3+0x24b>
c0027d0e:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0027d11:	72 07                	jb     c0027d1a <__divdf3+0x22e>
c0027d13:	75 3c                	jne    c0027d51 <__divdf3+0x265>
c0027d15:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027d18:	77 37                	ja     c0027d51 <__divdf3+0x265>
c0027d1a:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027d1d:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0027d20:	31 d2                	xor    edx,edx
c0027d22:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0027d25:	0f 97 c2             	seta   dl
c0027d28:	29 d6                	sub    esi,edx
c0027d2a:	89 d9                	mov    ecx,ebx
c0027d2c:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0027d2f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027d32:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0027d35:	eb 17                	jmp    c0027d4e <__divdf3+0x262>
c0027d37:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027d3a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027d3d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027d40:	0f 97 c1             	seta   cl
c0027d43:	0f b6 c9             	movzx  ecx,cl
c0027d46:	29 ce                	sub    esi,ecx
c0027d48:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0027d4b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0027d4e:	83 ca 01             	or     edx,0x1
c0027d51:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0027d54:	75 8b                	jne    c0027ce1 <__divdf3+0x1f5>
c0027d56:	c1 e7 09             	shl    edi,0x9
c0027d59:	89 d1                	mov    ecx,edx
c0027d5b:	c1 e9 17             	shr    ecx,0x17
c0027d5e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027d61:	09 f3                	or     ebx,esi
c0027d63:	0f 95 c3             	setne  bl
c0027d66:	0f b6 db             	movzx  ebx,bl
c0027d69:	c1 e2 09             	shl    edx,0x9
c0027d6c:	09 d3                	or     ebx,edx
c0027d6e:	89 ca                	mov    edx,ecx
c0027d70:	09 fa                	or     edx,edi
c0027d72:	78 0c                	js     c0027d80 <__divdf3+0x294>
c0027d74:	01 d2                	add    edx,edx
c0027d76:	89 d9                	mov    ecx,ebx
c0027d78:	c1 e9 1f             	shr    ecx,0x1f
c0027d7b:	09 ca                	or     edx,ecx
c0027d7d:	01 db                	add    ebx,ebx
c0027d7f:	48                   	dec    eax
c0027d80:	3d fe 07 00 00       	cmp    eax,0x7fe
c0027d85:	0f 8f 83 00 00 00    	jg     c0027e0e <__divdf3+0x322>
c0027d8b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027d91:	85 c0                	test   eax,eax
c0027d93:	0f 8f 82 00 00 00    	jg     c0027e1b <__divdf3+0x32f>
c0027d99:	83 f8 cc             	cmp    eax,0xffffffcc
c0027d9c:	7c 77                	jl     c0027e15 <__divdf3+0x329>
c0027d9e:	be 01 00 00 00       	mov    esi,0x1
c0027da3:	29 c6                	sub    esi,eax
c0027da5:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027dab:	83 fe 1f             	cmp    esi,0x1f
c0027dae:	7e 2f                	jle    c0027ddf <__divdf3+0x2f3>
c0027db0:	83 fe 20             	cmp    esi,0x20
c0027db3:	75 0a                	jne    c0027dbf <__divdf3+0x2d3>
c0027db5:	85 db                	test   ebx,ebx
c0027db7:	0f 95 c3             	setne  bl
c0027dba:	0f b6 db             	movzx  ebx,bl
c0027dbd:	eb 1a                	jmp    c0027dd9 <__divdf3+0x2ed>
c0027dbf:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0027dc2:	89 d7                	mov    edi,edx
c0027dc4:	d3 e7                	shl    edi,cl
c0027dc6:	89 f9                	mov    ecx,edi
c0027dc8:	09 d9                	or     ecx,ebx
c0027dca:	0f 95 c3             	setne  bl
c0027dcd:	0f b6 db             	movzx  ebx,bl
c0027dd0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027dd5:	29 c1                	sub    ecx,eax
c0027dd7:	d3 ea                	shr    edx,cl
c0027dd9:	09 d3                	or     ebx,edx
c0027ddb:	31 c0                	xor    eax,eax
c0027ddd:	eb 3a                	jmp    c0027e19 <__divdf3+0x32d>
c0027ddf:	83 c0 1f             	add    eax,0x1f
c0027de2:	89 d7                	mov    edi,edx
c0027de4:	88 c1                	mov    cl,al
c0027de6:	d3 e7                	shl    edi,cl
c0027de8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027deb:	89 df                	mov    edi,ebx
c0027ded:	89 f1                	mov    ecx,esi
c0027def:	d3 ef                	shr    edi,cl
c0027df1:	89 f9                	mov    ecx,edi
c0027df3:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027df6:	09 cf                	or     edi,ecx
c0027df8:	88 c1                	mov    cl,al
c0027dfa:	d3 e3                	shl    ebx,cl
c0027dfc:	85 db                	test   ebx,ebx
c0027dfe:	0f 95 c3             	setne  bl
c0027e01:	0f b6 db             	movzx  ebx,bl
c0027e04:	09 fb                	or     ebx,edi
c0027e06:	89 f1                	mov    ecx,esi
c0027e08:	d3 ea                	shr    edx,cl
c0027e0a:	31 c0                	xor    eax,eax
c0027e0c:	eb 0d                	jmp    c0027e1b <__divdf3+0x32f>
c0027e0e:	b8 ff 07 00 00       	mov    eax,0x7ff
c0027e13:	eb 02                	jmp    c0027e17 <__divdf3+0x32b>
c0027e15:	31 c0                	xor    eax,eax
c0027e17:	31 db                	xor    ebx,ebx
c0027e19:	31 d2                	xor    edx,edx
c0027e1b:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0027e1e:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0027e21:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0027e27:	09 c8                	or     eax,ecx
c0027e29:	c1 e0 14             	shl    eax,0x14
c0027e2c:	89 d1                	mov    ecx,edx
c0027e2e:	c1 e9 0b             	shr    ecx,0xb
c0027e31:	09 c8                	or     eax,ecx
c0027e33:	89 c6                	mov    esi,eax
c0027e35:	89 d9                	mov    ecx,ebx
c0027e37:	c1 e9 0b             	shr    ecx,0xb
c0027e3a:	c1 e2 15             	shl    edx,0x15
c0027e3d:	09 ca                	or     edx,ecx
c0027e3f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0027e45:	0f 95 c0             	setne  al
c0027e48:	09 c1                	or     ecx,eax
c0027e4a:	83 e1 01             	and    ecx,0x1
c0027e4d:	c1 eb 0a             	shr    ebx,0xa
c0027e50:	21 cb                	and    ebx,ecx
c0027e52:	01 d3                	add    ebx,edx
c0027e54:	89 d8                	mov    eax,ebx
c0027e56:	83 d6 00             	adc    esi,0x0
c0027e59:	89 f2                	mov    edx,esi
c0027e5b:	89 c7                	mov    edi,eax
c0027e5d:	89 d1                	mov    ecx,edx
c0027e5f:	89 f8                	mov    eax,edi
c0027e61:	89 ca                	mov    edx,ecx
c0027e63:	83 c4 2c             	add    esp,0x2c
c0027e66:	5b                   	pop    ebx
c0027e67:	5e                   	pop    esi
c0027e68:	5f                   	pop    edi
c0027e69:	5d                   	pop    ebp
c0027e6a:	c3                   	ret    

c0027e6b <__floatsidf>:
c0027e6b:	55                   	push   ebp
c0027e6c:	89 e5                	mov    ebp,esp
c0027e6e:	56                   	push   esi
c0027e6f:	53                   	push   ebx
c0027e70:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027e73:	85 db                	test   ebx,ebx
c0027e75:	7e 15                	jle    c0027e8c <__floatsidf+0x21>
c0027e77:	0f bd cb             	bsr    ecx,ebx
c0027e7a:	83 f1 1f             	xor    ecx,0x1f
c0027e7d:	d3 e3                	shl    ebx,cl
c0027e7f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027e85:	b8 1e 04 00 00       	mov    eax,0x41e
c0027e8a:	eb 21                	jmp    c0027ead <__floatsidf+0x42>
c0027e8c:	b8 00 00 00 00       	mov    eax,0x0
c0027e91:	ba 00 00 00 00       	mov    edx,0x0
c0027e96:	74 2a                	je     c0027ec2 <__floatsidf+0x57>
c0027e98:	f7 db                	neg    ebx
c0027e9a:	0f bd cb             	bsr    ecx,ebx
c0027e9d:	83 f1 1f             	xor    ecx,0x1f
c0027ea0:	d3 e3                	shl    ebx,cl
c0027ea2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027ea8:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0027ead:	29 c8                	sub    eax,ecx
c0027eaf:	c1 e0 14             	shl    eax,0x14
c0027eb2:	89 c1                	mov    ecx,eax
c0027eb4:	89 de                	mov    esi,ebx
c0027eb6:	c1 ee 0b             	shr    esi,0xb
c0027eb9:	09 f1                	or     ecx,esi
c0027ebb:	89 ca                	mov    edx,ecx
c0027ebd:	c1 e3 15             	shl    ebx,0x15
c0027ec0:	89 d8                	mov    eax,ebx
c0027ec2:	5b                   	pop    ebx
c0027ec3:	5e                   	pop    esi
c0027ec4:	5d                   	pop    ebp
c0027ec5:	c3                   	ret    

c0027ec6 <__floatunsidf>:
c0027ec6:	55                   	push   ebp
c0027ec7:	89 e5                	mov    ebp,esp
c0027ec9:	56                   	push   esi
c0027eca:	53                   	push   ebx
c0027ecb:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027ece:	85 db                	test   ebx,ebx
c0027ed0:	74 2a                	je     c0027efc <__floatunsidf+0x36>
c0027ed2:	0f bd cb             	bsr    ecx,ebx
c0027ed5:	83 f1 1f             	xor    ecx,0x1f
c0027ed8:	d3 e3                	shl    ebx,cl
c0027eda:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027ee0:	b8 1e 04 00 00       	mov    eax,0x41e
c0027ee5:	29 c8                	sub    eax,ecx
c0027ee7:	c1 e0 14             	shl    eax,0x14
c0027eea:	89 c1                	mov    ecx,eax
c0027eec:	89 de                	mov    esi,ebx
c0027eee:	c1 ee 0b             	shr    esi,0xb
c0027ef1:	09 f1                	or     ecx,esi
c0027ef3:	89 ca                	mov    edx,ecx
c0027ef5:	c1 e3 15             	shl    ebx,0x15
c0027ef8:	89 d8                	mov    eax,ebx
c0027efa:	eb 04                	jmp    c0027f00 <__floatunsidf+0x3a>
c0027efc:	31 c0                	xor    eax,eax
c0027efe:	31 d2                	xor    edx,edx
c0027f00:	5b                   	pop    ebx
c0027f01:	5e                   	pop    esi
c0027f02:	5d                   	pop    ebp
c0027f03:	c3                   	ret    

c0027f04 <__fixdfsi>:
c0027f04:	55                   	push   ebp
c0027f05:	89 e5                	mov    ebp,esp
c0027f07:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027f0a:	89 d1                	mov    ecx,edx
c0027f0c:	c1 e1 0b             	shl    ecx,0xb
c0027f0f:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027f15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027f18:	c1 e8 15             	shr    eax,0x15
c0027f1b:	09 c1                	or     ecx,eax
c0027f1d:	c1 fa 14             	sar    edx,0x14
c0027f20:	78 1f                	js     c0027f41 <__fixdfsi+0x3d>
c0027f22:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0027f28:	31 c0                	xor    eax,eax
c0027f2a:	83 fa 1e             	cmp    edx,0x1e
c0027f2d:	77 40                	ja     c0027f6f <__fixdfsi+0x6b>
c0027f2f:	89 c8                	mov    eax,ecx
c0027f31:	0d 00 00 00 80       	or     eax,0x80000000
c0027f36:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027f3b:	29 d1                	sub    ecx,edx
c0027f3d:	d3 e8                	shr    eax,cl
c0027f3f:	eb 2e                	jmp    c0027f6f <__fixdfsi+0x6b>
c0027f41:	31 c0                	xor    eax,eax
c0027f43:	81 c2 01 04 00 00    	add    edx,0x401
c0027f49:	78 24                	js     c0027f6f <__fixdfsi+0x6b>
c0027f4b:	83 fa 1e             	cmp    edx,0x1e
c0027f4e:	7e 09                	jle    c0027f59 <__fixdfsi+0x55>
c0027f50:	83 fa 1f             	cmp    edx,0x1f
c0027f53:	75 18                	jne    c0027f6d <__fixdfsi+0x69>
c0027f55:	85 c9                	test   ecx,ecx
c0027f57:	75 14                	jne    c0027f6d <__fixdfsi+0x69>
c0027f59:	89 c8                	mov    eax,ecx
c0027f5b:	0d 00 00 00 80       	or     eax,0x80000000
c0027f60:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027f65:	29 d1                	sub    ecx,edx
c0027f67:	d3 e8                	shr    eax,cl
c0027f69:	f7 d8                	neg    eax
c0027f6b:	eb 02                	jmp    c0027f6f <__fixdfsi+0x6b>
c0027f6d:	31 c0                	xor    eax,eax
c0027f6f:	5d                   	pop    ebp
c0027f70:	c3                   	ret    

c0027f71 <__fixunsdfsi>:
c0027f71:	55                   	push   ebp
c0027f72:	89 e5                	mov    ebp,esp
c0027f74:	53                   	push   ebx
c0027f75:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0027f78:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027f7b:	89 d3                	mov    ebx,edx
c0027f7d:	c1 fb 14             	sar    ebx,0x14
c0027f80:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0027f86:	31 c0                	xor    eax,eax
c0027f88:	83 fb 1f             	cmp    ebx,0x1f
c0027f8b:	77 1d                	ja     c0027faa <__fixunsdfsi+0x39>
c0027f8d:	89 d0                	mov    eax,edx
c0027f8f:	c1 e0 0b             	shl    eax,0xb
c0027f92:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027f97:	c1 e9 15             	shr    ecx,0x15
c0027f9a:	09 c8                	or     eax,ecx
c0027f9c:	0d 00 00 00 80       	or     eax,0x80000000
c0027fa1:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027fa6:	29 d9                	sub    ecx,ebx
c0027fa8:	d3 e8                	shr    eax,cl
c0027faa:	5b                   	pop    ebx
c0027fab:	5d                   	pop    ebp
c0027fac:	c3                   	ret    

c0027fad <__cmpdf2>:
c0027fad:	55                   	push   ebp
c0027fae:	89 e5                	mov    ebp,esp
c0027fb0:	57                   	push   edi
c0027fb1:	56                   	push   esi
c0027fb2:	53                   	push   ebx
c0027fb3:	83 ec 0c             	sub    esp,0xc
c0027fb6:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0027fb9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027fbc:	89 ca                	mov    edx,ecx
c0027fbe:	c1 ea 14             	shr    edx,0x14
c0027fc1:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0027fc7:	89 cb                	mov    ebx,ecx
c0027fc9:	c1 fb 1f             	sar    ebx,0x1f
c0027fcc:	31 da                	xor    edx,ebx
c0027fce:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027fd1:	89 df                	mov    edi,ebx
c0027fd3:	c1 e7 0b             	shl    edi,0xb
c0027fd6:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027fd9:	c1 e1 0b             	shl    ecx,0xb
c0027fdc:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027fe2:	c1 eb 15             	shr    ebx,0x15
c0027fe5:	09 d9                	or     ecx,ebx
c0027fe7:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0027fea:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027fed:	89 ce                	mov    esi,ecx
c0027fef:	c1 ee 14             	shr    esi,0x14
c0027ff2:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027ff8:	89 cb                	mov    ebx,ecx
c0027ffa:	c1 fb 1f             	sar    ebx,0x1f
c0027ffd:	31 de                	xor    esi,ebx
c0027fff:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0028002:	89 df                	mov    edi,ebx
c0028004:	c1 e7 0b             	shl    edi,0xb
c0028007:	c1 e1 0b             	shl    ecx,0xb
c002800a:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028010:	c1 eb 15             	shr    ebx,0x15
c0028013:	09 d9                	or     ecx,ebx
c0028015:	89 d3                	mov    ebx,edx
c0028017:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002801d:	43                   	inc    ebx
c002801e:	83 fb 01             	cmp    ebx,0x1
c0028021:	77 08                	ja     c002802b <__cmpdf2+0x7e>
c0028023:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028026:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028029:	75 68                	jne    c0028093 <__cmpdf2+0xe6>
c002802b:	89 f3                	mov    ebx,esi
c002802d:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028033:	43                   	inc    ebx
c0028034:	83 fb 01             	cmp    ebx,0x1
c0028037:	77 06                	ja     c002803f <__cmpdf2+0x92>
c0028039:	89 fb                	mov    ebx,edi
c002803b:	09 cb                	or     ebx,ecx
c002803d:	75 54                	jne    c0028093 <__cmpdf2+0xe6>
c002803f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028042:	09 f8                	or     eax,edi
c0028044:	09 c8                	or     eax,ecx
c0028046:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028049:	75 12                	jne    c002805d <__cmpdf2+0xb0>
c002804b:	8d 42 01             	lea    eax,[edx+0x1]
c002804e:	83 f8 01             	cmp    eax,0x1
c0028051:	77 0a                	ja     c002805d <__cmpdf2+0xb0>
c0028053:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028056:	31 c0                	xor    eax,eax
c0028058:	83 fb 01             	cmp    ebx,0x1
c002805b:	76 36                	jbe    c0028093 <__cmpdf2+0xe6>
c002805d:	b8 01 00 00 00       	mov    eax,0x1
c0028062:	39 f2                	cmp    edx,esi
c0028064:	7f 2d                	jg     c0028093 <__cmpdf2+0xe6>
c0028066:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002806b:	7c 26                	jl     c0028093 <__cmpdf2+0xe6>
c002806d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028070:	77 07                	ja     c0028079 <__cmpdf2+0xcc>
c0028072:	72 16                	jb     c002808a <__cmpdf2+0xdd>
c0028074:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028077:	76 0a                	jbe    c0028083 <__cmpdf2+0xd6>
c0028079:	89 d0                	mov    eax,edx
c002807b:	c1 f8 1f             	sar    eax,0x1f
c002807e:	83 c8 01             	or     eax,0x1
c0028081:	eb 10                	jmp    c0028093 <__cmpdf2+0xe6>
c0028083:	b8 00 00 00 00       	mov    eax,0x0
c0028088:	73 09                	jae    c0028093 <__cmpdf2+0xe6>
c002808a:	89 d0                	mov    eax,edx
c002808c:	c1 f8 1f             	sar    eax,0x1f
c002808f:	83 e0 02             	and    eax,0x2
c0028092:	48                   	dec    eax
c0028093:	83 c4 0c             	add    esp,0xc
c0028096:	5b                   	pop    ebx
c0028097:	5e                   	pop    esi
c0028098:	5f                   	pop    edi
c0028099:	5d                   	pop    ebp
c002809a:	c3                   	ret    

c002809b <__eqdf2>:
c002809b:	55                   	push   ebp
c002809c:	89 e5                	mov    ebp,esp
c002809e:	50                   	push   eax
c002809f:	6a 01                	push   0x1
c00280a1:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00280a4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00280a7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00280aa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00280ad:	e8 fb fe ff ff       	call   c0027fad <__cmpdf2>
c00280b2:	83 c4 18             	add    esp,0x18
c00280b5:	c9                   	leave  
c00280b6:	c3                   	ret    

c00280b7 <__nedf2>:
c00280b7:	eb e2                	jmp    c002809b <__eqdf2>

c00280b9 <__gtdf2>:
c00280b9:	55                   	push   ebp
c00280ba:	89 e5                	mov    ebp,esp
c00280bc:	50                   	push   eax
c00280bd:	6a ff                	push   0xffffffff
c00280bf:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00280c2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00280c5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00280c8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00280cb:	e8 dd fe ff ff       	call   c0027fad <__cmpdf2>
c00280d0:	83 c4 18             	add    esp,0x18
c00280d3:	c9                   	leave  
c00280d4:	c3                   	ret    

c00280d5 <__gedf2>:
c00280d5:	eb e2                	jmp    c00280b9 <__gtdf2>

c00280d7 <__ltdf2>:
c00280d7:	eb c2                	jmp    c002809b <__eqdf2>

c00280d9 <__ledf2>:
c00280d9:	eb c0                	jmp    c002809b <__eqdf2>

c00280db <__truncdfsf2>:
c00280db:	55                   	push   ebp
c00280dc:	89 e5                	mov    ebp,esp
c00280de:	57                   	push   edi
c00280df:	56                   	push   esi
c00280e0:	53                   	push   ebx
c00280e1:	83 ec 0c             	sub    esp,0xc
c00280e4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00280e7:	89 d1                	mov    ecx,edx
c00280e9:	c1 f9 14             	sar    ecx,0x14
c00280ec:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00280ef:	89 df                	mov    edi,ebx
c00280f1:	c1 e7 0b             	shl    edi,0xb
c00280f4:	89 d0                	mov    eax,edx
c00280f6:	c1 e0 0b             	shl    eax,0xb
c00280f9:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00280fe:	c1 eb 15             	shr    ebx,0x15
c0028101:	09 d8                	or     eax,ebx
c0028103:	89 cb                	mov    ebx,ecx
c0028105:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002810b:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028111:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028117:	0f 86 9e 00 00 00    	jbe    c00281bb <__truncdfsf2+0xe0>
c002811d:	85 db                	test   ebx,ebx
c002811f:	75 0a                	jne    c002812b <__truncdfsf2+0x50>
c0028121:	c1 fa 17             	sar    edx,0x17
c0028124:	30 d2                	xor    dl,dl
c0028126:	e9 84 00 00 00       	jmp    c00281af <__truncdfsf2+0xd4>
c002812b:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028131:	83 fe 83             	cmp    esi,0xffffff83
c0028134:	7d 4b                	jge    c0028181 <__truncdfsf2+0xa6>
c0028136:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c002813b:	29 f1                	sub    ecx,esi
c002813d:	83 f9 1f             	cmp    ecx,0x1f
c0028140:	7f 6b                	jg     c00281ad <__truncdfsf2+0xd2>
c0028142:	0d 00 00 00 80       	or     eax,0x80000000
c0028147:	89 c3                	mov    ebx,eax
c0028149:	d3 eb                	shr    ebx,cl
c002814b:	be 01 00 00 00       	mov    esi,0x1
c0028150:	d3 e6                	shl    esi,cl
c0028152:	4e                   	dec    esi
c0028153:	21 f0                	and    eax,esi
c0028155:	09 f8                	or     eax,edi
c0028157:	0f 95 c0             	setne  al
c002815a:	0f b6 c0             	movzx  eax,al
c002815d:	09 c3                	or     ebx,eax
c002815f:	89 d9                	mov    ecx,ebx
c0028161:	c1 e9 08             	shr    ecx,0x8
c0028164:	f6 c3 7f             	test   bl,0x7f
c0028167:	0f 95 c0             	setne  al
c002816a:	09 c8                	or     eax,ecx
c002816c:	83 e0 01             	and    eax,0x1
c002816f:	c1 eb 07             	shr    ebx,0x7
c0028172:	21 c3                	and    ebx,eax
c0028174:	81 e2 00 00 00 80    	and    edx,0x80000000
c002817a:	09 d1                	or     ecx,edx
c002817c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c002817f:	eb 76                	jmp    c00281f7 <__truncdfsf2+0x11c>
c0028181:	83 c6 80             	add    esi,0xffffff80
c0028184:	7e 1d                	jle    c00281a3 <__truncdfsf2+0xc8>
c0028186:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c002818c:	75 0b                	jne    c0028199 <__truncdfsf2+0xbe>
c002818e:	09 f8                	or     eax,edi
c0028190:	74 09                	je     c002819b <__truncdfsf2+0xc0>
c0028192:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0028197:	eb 02                	jmp    c002819b <__truncdfsf2+0xc0>
c0028199:	31 c0                	xor    eax,eax
c002819b:	c1 fa 17             	sar    edx,0x17
c002819e:	80 ca ff             	or     dl,0xff
c00281a1:	eb 0e                	jmp    c00281b1 <__truncdfsf2+0xd6>
c00281a3:	c1 fa 1f             	sar    edx,0x1f
c00281a6:	c1 e2 08             	shl    edx,0x8
c00281a9:	09 ca                	or     edx,ecx
c00281ab:	eb 04                	jmp    c00281b1 <__truncdfsf2+0xd6>
c00281ad:	31 d2                	xor    edx,edx
c00281af:	31 c0                	xor    eax,eax
c00281b1:	c1 e2 17             	shl    edx,0x17
c00281b4:	c1 e8 08             	shr    eax,0x8
c00281b7:	09 d0                	or     eax,edx
c00281b9:	eb 3c                	jmp    c00281f7 <__truncdfsf2+0x11c>
c00281bb:	81 e9 80 03 00 00    	sub    ecx,0x380
c00281c1:	89 ca                	mov    edx,ecx
c00281c3:	c1 fa 0b             	sar    edx,0xb
c00281c6:	c1 e2 08             	shl    edx,0x8
c00281c9:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00281cc:	31 db                	xor    ebx,ebx
c00281ce:	85 ff                	test   edi,edi
c00281d0:	0f 95 c3             	setne  bl
c00281d3:	09 d8                	or     eax,ebx
c00281d5:	89 c3                	mov    ebx,eax
c00281d7:	c1 eb 08             	shr    ebx,0x8
c00281da:	a8 7f                	test   al,0x7f
c00281dc:	0f 95 c2             	setne  dl
c00281df:	89 d6                	mov    esi,edx
c00281e1:	09 de                	or     esi,ebx
c00281e3:	83 e6 01             	and    esi,0x1
c00281e6:	c1 e8 07             	shr    eax,0x7
c00281e9:	21 f0                	and    eax,esi
c00281eb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00281ee:	09 ca                	or     edx,ecx
c00281f0:	c1 e2 17             	shl    edx,0x17
c00281f3:	09 da                	or     edx,ebx
c00281f5:	01 d0                	add    eax,edx
c00281f7:	83 c4 0c             	add    esp,0xc
c00281fa:	5b                   	pop    ebx
c00281fb:	5e                   	pop    esi
c00281fc:	5f                   	pop    edi
c00281fd:	5d                   	pop    ebp
c00281fe:	c3                   	ret    

c00281ff <__extendsfdf2>:
c00281ff:	55                   	push   ebp
c0028200:	89 e5                	mov    ebp,esp
c0028202:	57                   	push   edi
c0028203:	56                   	push   esi
c0028204:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028207:	89 d1                	mov    ecx,edx
c0028209:	c1 f9 17             	sar    ecx,0x17
c002820c:	c1 e2 08             	shl    edx,0x8
c002820f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0028215:	89 c8                	mov    eax,ecx
c0028217:	80 e4 f8             	and    ah,0xf8
c002821a:	8d 71 01             	lea    esi,[ecx+0x1]
c002821d:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028223:	75 27                	jne    c002824c <__extendsfdf2+0x4d>
c0028225:	81 e1 ff 00 00 00    	and    ecx,0xff
c002822b:	75 18                	jne    c0028245 <__extendsfdf2+0x46>
c002822d:	85 d2                	test   edx,edx
c002822f:	74 20                	je     c0028251 <__extendsfdf2+0x52>
c0028231:	41                   	inc    ecx
c0028232:	01 d2                	add    edx,edx
c0028234:	79 fb                	jns    c0028231 <__extendsfdf2+0x32>
c0028236:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002823c:	29 c8                	sub    eax,ecx
c002823e:	05 81 03 00 00       	add    eax,0x381
c0028243:	eb 0c                	jmp    c0028251 <__extendsfdf2+0x52>
c0028245:	05 00 07 00 00       	add    eax,0x700
c002824a:	eb 05                	jmp    c0028251 <__extendsfdf2+0x52>
c002824c:	05 80 03 00 00       	add    eax,0x380
c0028251:	c1 e0 14             	shl    eax,0x14
c0028254:	89 c1                	mov    ecx,eax
c0028256:	89 d0                	mov    eax,edx
c0028258:	c1 e8 0b             	shr    eax,0xb
c002825b:	09 c1                	or     ecx,eax
c002825d:	c1 e2 15             	shl    edx,0x15
c0028260:	89 d0                	mov    eax,edx
c0028262:	89 ca                	mov    edx,ecx
c0028264:	5e                   	pop    esi
c0028265:	5f                   	pop    edi
c0028266:	5d                   	pop    ebp
c0028267:	c3                   	ret    
c0028268:	66 90                	xchg   ax,ax
c002826a:	66 90                	xchg   ax,ax
c002826c:	66 90                	xchg   ax,ax
c002826e:	66 90                	xchg   ax,ax

c0028270 <fabs>:
c0028270:	83 ec 0c             	sub    esp,0xc
c0028273:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028277:	89 04 24             	mov    DWORD PTR [esp],eax
c002827a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002827e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028283:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028287:	dd 04 24             	fld    QWORD PTR [esp]
c002828a:	83 c4 0c             	add    esp,0xc
c002828d:	c3                   	ret    
c002828e:	66 90                	xchg   ax,ax

c0028290 <lrint>:
c0028290:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028294:	83 ec 04             	sub    esp,0x4
c0028297:	db 1c 24             	fistp  DWORD PTR [esp]
c002829a:	58                   	pop    eax
c002829b:	c3                   	ret    

c002829c <lrintf>:
c002829c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c00282a0:	83 ec 04             	sub    esp,0x4
c00282a3:	db 1c 24             	fistp  DWORD PTR [esp]
c00282a6:	58                   	pop    eax
c00282a7:	c3                   	ret    

Disassembly of section .init:

c00282a8 <_init>:
c00282a8:	55                   	push   ebp
c00282a9:	89 e5                	mov    ebp,esp
c00282ab:	e8 68 7e fd ff       	call   c0000118 <frame_dummy>
c00282b0:	e8 5b e0 ff ff       	call   c0026310 <__do_global_ctors_aux>
c00282b5:	5d                   	pop    ebp
c00282b6:	c3                   	ret    

Disassembly of section .fini:

c00282b7 <_fini>:
c00282b7:	55                   	push   ebp
c00282b8:	89 e5                	mov    ebp,esp
c00282ba:	e8 e9 7d fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00282bf:	5d                   	pop    ebp
c00282c0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00282c2 <Computer::~Computer()>:
c00282c2:	83 ec 0c             	sub    esp,0xc
c00282c5:	ba 3c 9e 02 c0       	mov    edx,0xc0029e3c
c00282ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282ce:	89 10                	mov    DWORD PTR [eax],edx
c00282d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282d4:	83 ec 0c             	sub    esp,0xc
c00282d7:	50                   	push   eax
c00282d8:	e8 f3 b5 fe ff       	call   c00138d0 <Device::~Device()>
c00282dd:	83 c4 10             	add    esp,0x10
c00282e0:	90                   	nop
c00282e1:	83 c4 0c             	add    esp,0xc
c00282e4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00282e6 <Computer::~Computer()>:
c00282e6:	83 ec 0c             	sub    esp,0xc
c00282e9:	83 ec 0c             	sub    esp,0xc
c00282ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00282f0:	e8 cd ff ff ff       	call   c00282c2 <Computer::~Computer()>
c00282f5:	83 c4 10             	add    esp,0x10
c00282f8:	83 ec 08             	sub    esp,0x8
c00282fb:	68 ec 01 00 00       	push   0x1ec
c0028300:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028304:	e8 e8 a1 fe ff       	call   c00124f1 <operator delete(void*, unsigned long)>
c0028309:	83 c4 10             	add    esp,0x10
c002830c:	83 c4 0c             	add    esp,0xc
c002830f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028310 <idleCommon()>:
c0028310:	83 ec 0c             	sub    esp,0xc
c0028313:	fa                   	cli    
c0028314:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c002831a:	e8 a2 55 ff ff       	call   c001d8c1 <schedule()>
c002831f:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c0028324:	48                   	dec    eax
c0028325:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c002832a:	75 01                	jne    c002832d <idleCommon()+0x1d>
c002832c:	fb                   	sti    
c002832d:	83 c4 0c             	add    esp,0xc
c0028330:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028332 <LinkedList<UnixFile>::~LinkedList()>:
c0028332:	90                   	nop
c0028333:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028334 <LinkedList<UnixFile>::LinkedList()>:
c0028334:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028338:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002833e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028342:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028349:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002834d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028354:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028358:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002835e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028362:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028369:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002836d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028374:	90                   	nop
c0028375:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028376 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028376:	83 ec 0c             	sub    esp,0xc
c0028379:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002837e:	75 10                	jne    c0028390 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0028380:	83 ec 0c             	sub    esp,0xc
c0028383:	68 4c a0 02 c0       	push   0xc002a04c
c0028388:	e8 a8 19 ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c002838d:	83 c4 10             	add    esp,0x10
c0028390:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028394:	8b 00                	mov    eax,DWORD PTR [eax]
c0028396:	85 c0                	test   eax,eax
c0028398:	74 34                	je     c00283ce <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002839a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002839e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00283a1:	85 c0                	test   eax,eax
c00283a3:	74 29                	je     c00283ce <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00283a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283a9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00283ac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00283b0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00283b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283b7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00283bb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00283be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00283c5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00283cc:	eb 65                	jmp    c0028433 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00283ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00283d4:	85 c0                	test   eax,eax
c00283d6:	75 4b                	jne    c0028423 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00283d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00283df:	85 c0                	test   eax,eax
c00283e1:	75 40                	jne    c0028423 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00283e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283e7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00283eb:	89 10                	mov    DWORD PTR [eax],edx
c00283ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283f1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00283f5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00283f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00283ff:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028406:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002840a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002840d:	85 c0                	test   eax,eax
c002840f:	74 22                	je     c0028433 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028411:	83 ec 0c             	sub    esp,0xc
c0028414:	68 6e a0 02 c0       	push   0xc002a06e
c0028419:	e8 17 19 ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c002841e:	83 c4 10             	add    esp,0x10
c0028421:	eb 10                	jmp    c0028433 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028423:	83 ec 0c             	sub    esp,0xc
c0028426:	68 78 a0 02 c0       	push   0xc002a078
c002842b:	e8 05 19 ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c0028430:	83 c4 10             	add    esp,0x10
c0028433:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028437:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002843a:	8d 50 01             	lea    edx,[eax+0x1]
c002843d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028441:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028444:	90                   	nop
c0028445:	83 c4 0c             	add    esp,0xc
c0028448:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002844a <LinkedList<UnixFile>::getFirstElement()>:
c002844a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002844e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028450:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0028452 <LinkedList<UnixFile>::removeFirst()>:
c0028452:	83 ec 0c             	sub    esp,0xc
c0028455:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028459:	8b 00                	mov    eax,DWORD PTR [eax]
c002845b:	85 c0                	test   eax,eax
c002845d:	75 12                	jne    c0028471 <LinkedList<UnixFile>::removeFirst()+0x1f>
c002845f:	83 ec 0c             	sub    esp,0xc
c0028462:	68 84 a0 02 c0       	push   0xc002a084
c0028467:	e8 c9 18 ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c002846c:	83 c4 10             	add    esp,0x10
c002846f:	eb 7e                	jmp    c00284ef <LinkedList<UnixFile>::removeFirst()+0x9d>
c0028471:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028475:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028478:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002847b:	85 c0                	test   eax,eax
c002847d:	74 10                	je     c002848f <LinkedList<UnixFile>::removeFirst()+0x3d>
c002847f:	83 ec 0c             	sub    esp,0xc
c0028482:	68 cf a0 02 c0       	push   0xc002a0cf
c0028487:	e8 a9 18 ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c002848c:	83 c4 10             	add    esp,0x10
c002848f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028493:	8b 00                	mov    eax,DWORD PTR [eax]
c0028495:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028498:	85 c0                	test   eax,eax
c002849a:	75 33                	jne    c00284cf <LinkedList<UnixFile>::removeFirst()+0x7d>
c002849c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284a0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00284a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284aa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00284b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284b5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00284b8:	83 f8 01             	cmp    eax,0x1
c00284bb:	74 21                	je     c00284de <LinkedList<UnixFile>::removeFirst()+0x8c>
c00284bd:	83 ec 0c             	sub    esp,0xc
c00284c0:	68 a8 a0 02 c0       	push   0xc002a0a8
c00284c5:	e8 6b 18 ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c00284ca:	83 c4 10             	add    esp,0x10
c00284cd:	eb 0f                	jmp    c00284de <LinkedList<UnixFile>::removeFirst()+0x8c>
c00284cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00284d5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00284d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284dc:	89 10                	mov    DWORD PTR [eax],edx
c00284de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284e2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00284e5:	8d 50 ff             	lea    edx,[eax-0x1]
c00284e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284ec:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00284ef:	83 c4 0c             	add    esp,0xc
c00284f2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00284f4 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00284f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00284f8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00284fb:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00284fc <DriverlessDevice::~DriverlessDevice()>:
c00284fc:	ba 3c a8 02 c0       	mov    edx,0xc002a83c
c0028501:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028505:	89 10                	mov    DWORD PTR [eax],edx
c0028507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002850b:	50                   	push   eax
c002850c:	e8 bf b3 fe ff       	call   c00138d0 <Device::~Device()>
c0028511:	83 c4 04             	add    esp,0x4
c0028514:	90                   	nop
c0028515:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028516 <DriverlessDevice::~DriverlessDevice()>:
c0028516:	83 ec 0c             	sub    esp,0xc
c0028519:	83 ec 0c             	sub    esp,0xc
c002851c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028520:	e8 d7 ff ff ff       	call   c00284fc <DriverlessDevice::~DriverlessDevice()>
c0028525:	83 c4 10             	add    esp,0x10
c0028528:	83 ec 08             	sub    esp,0x8
c002852b:	68 58 01 00 00       	push   0x158
c0028530:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028534:	e8 b8 9f fe ff       	call   c00124f1 <operator delete(void*, unsigned long)>
c0028539:	83 c4 10             	add    esp,0x10
c002853c:	83 c4 0c             	add    esp,0xc
c002853f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0028540 <LinkedList<Device>::addElement(Device*)>:
c0028540:	83 ec 0c             	sub    esp,0xc
c0028543:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028548:	75 10                	jne    c002855a <LinkedList<Device>::addElement(Device*)+0x1a>
c002854a:	83 ec 0c             	sub    esp,0xc
c002854d:	68 4c a0 02 c0       	push   0xc002a04c
c0028552:	e8 de 17 ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c0028557:	83 c4 10             	add    esp,0x10
c002855a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002855e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028560:	85 c0                	test   eax,eax
c0028562:	74 3a                	je     c002859e <LinkedList<Device>::addElement(Device*)+0x5e>
c0028564:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028568:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002856b:	85 c0                	test   eax,eax
c002856d:	74 2f                	je     c002859e <LinkedList<Device>::addElement(Device*)+0x5e>
c002856f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028573:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028576:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002857a:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0028580:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028584:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028588:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002858b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002858f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028592:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002859c:	eb 68                	jmp    c0028606 <LinkedList<Device>::addElement(Device*)+0xc6>
c002859e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00285a4:	85 c0                	test   eax,eax
c00285a6:	75 4e                	jne    c00285f6 <LinkedList<Device>::addElement(Device*)+0xb6>
c00285a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00285af:	85 c0                	test   eax,eax
c00285b1:	75 43                	jne    c00285f6 <LinkedList<Device>::addElement(Device*)+0xb6>
c00285b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285b7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00285bb:	89 10                	mov    DWORD PTR [eax],edx
c00285bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285c1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00285c5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00285c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00285cf:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00285d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285dd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00285e0:	85 c0                	test   eax,eax
c00285e2:	74 22                	je     c0028606 <LinkedList<Device>::addElement(Device*)+0xc6>
c00285e4:	83 ec 0c             	sub    esp,0xc
c00285e7:	68 6e a0 02 c0       	push   0xc002a06e
c00285ec:	e8 44 17 ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c00285f1:	83 c4 10             	add    esp,0x10
c00285f4:	eb 10                	jmp    c0028606 <LinkedList<Device>::addElement(Device*)+0xc6>
c00285f6:	83 ec 0c             	sub    esp,0xc
c00285f9:	68 78 a0 02 c0       	push   0xc002a078
c00285fe:	e8 32 17 ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c0028603:	83 c4 10             	add    esp,0x10
c0028606:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002860a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002860d:	8d 50 01             	lea    edx,[eax+0x1]
c0028610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028614:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028617:	90                   	nop
c0028618:	83 c4 0c             	add    esp,0xc
c002861b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c002861c <LinkedList<Device>::LinkedList()>:
c002861c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028620:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028626:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002862a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028631:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028635:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002863c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028640:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028646:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002864a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028651:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028655:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002865c:	90                   	nop
c002865d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002865e <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002865e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028662:	8b 00                	mov    eax,DWORD PTR [eax]
c0028664:	85 c0                	test   eax,eax
c0028666:	75 0e                	jne    c0028676 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028668:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002866c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002866f:	85 c0                	test   eax,eax
c0028671:	75 03                	jne    c0028676 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028673:	b0 01                	mov    al,0x1
c0028675:	c3                   	ret    
c0028676:	b0 00                	mov    al,0x0
c0028678:	90                   	nop
c0028679:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002867a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002867a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002867e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028680:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028682 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028682:	83 ec 0c             	sub    esp,0xc
c0028685:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028689:	8b 00                	mov    eax,DWORD PTR [eax]
c002868b:	85 c0                	test   eax,eax
c002868d:	75 15                	jne    c00286a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002868f:	83 ec 0c             	sub    esp,0xc
c0028692:	68 84 a0 02 c0       	push   0xc002a084
c0028697:	e8 99 16 ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c002869c:	83 c4 10             	add    esp,0x10
c002869f:	e9 88 00 00 00       	jmp    c002872c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00286a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286ab:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00286ae:	85 c0                	test   eax,eax
c00286b0:	0f 95 c0             	setne  al
c00286b3:	84 c0                	test   al,al
c00286b5:	74 10                	je     c00286c7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c00286b7:	83 ec 0c             	sub    esp,0xc
c00286ba:	68 cf a0 02 c0       	push   0xc002a0cf
c00286bf:	e8 71 16 ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c00286c4:	83 c4 10             	add    esp,0x10
c00286c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00286cd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00286d0:	85 c0                	test   eax,eax
c00286d2:	0f 94 c0             	sete   al
c00286d5:	84 c0                	test   al,al
c00286d7:	74 33                	je     c002870c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00286d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286dd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00286e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286e7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00286ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286f2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00286f5:	83 f8 01             	cmp    eax,0x1
c00286f8:	74 21                	je     c002871b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00286fa:	83 ec 0c             	sub    esp,0xc
c00286fd:	68 a8 a0 02 c0       	push   0xc002a0a8
c0028702:	e8 2e 16 ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c0028707:	83 c4 10             	add    esp,0x10
c002870a:	eb 0f                	jmp    c002871b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002870c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028710:	8b 00                	mov    eax,DWORD PTR [eax]
c0028712:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028715:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028719:	89 10                	mov    DWORD PTR [eax],edx
c002871b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002871f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028722:	8d 50 ff             	lea    edx,[eax-0x1]
c0028725:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028729:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002872c:	83 c4 0c             	add    esp,0xc
c002872f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028730 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028730:	83 ec 0c             	sub    esp,0xc
c0028733:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028738:	75 10                	jne    c002874a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002873a:	83 ec 0c             	sub    esp,0xc
c002873d:	68 4c a0 02 c0       	push   0xc002a04c
c0028742:	e8 ee 15 ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c0028747:	83 c4 10             	add    esp,0x10
c002874a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002874e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028750:	85 c0                	test   eax,eax
c0028752:	74 34                	je     c0028788 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028754:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028758:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002875b:	85 c0                	test   eax,eax
c002875d:	74 29                	je     c0028788 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002875f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028763:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028766:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002876a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002876d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028771:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028775:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002877c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002877f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028786:	eb 65                	jmp    c00287ed <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002878c:	8b 00                	mov    eax,DWORD PTR [eax]
c002878e:	85 c0                	test   eax,eax
c0028790:	75 4b                	jne    c00287dd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028796:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028799:	85 c0                	test   eax,eax
c002879b:	75 40                	jne    c00287dd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c002879d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287a5:	89 10                	mov    DWORD PTR [eax],edx
c00287a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287af:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00287b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287b9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00287c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287c4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287c7:	85 c0                	test   eax,eax
c00287c9:	74 22                	je     c00287ed <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00287cb:	83 ec 0c             	sub    esp,0xc
c00287ce:	68 6e a0 02 c0       	push   0xc002a06e
c00287d3:	e8 5d 15 ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c00287d8:	83 c4 10             	add    esp,0x10
c00287db:	eb 10                	jmp    c00287ed <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00287dd:	83 ec 0c             	sub    esp,0xc
c00287e0:	68 78 a0 02 c0       	push   0xc002a078
c00287e5:	e8 4b 15 ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c00287ea:	83 c4 10             	add    esp,0x10
c00287ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287f1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287f4:	8d 50 01             	lea    edx,[eax+0x1]
c00287f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287fb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00287fe:	90                   	nop
c00287ff:	83 c4 0c             	add    esp,0xc
c0028802:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028804 <ACPI::~ACPI()>:
c0028804:	83 ec 0c             	sub    esp,0xc
c0028807:	ba a8 b0 02 c0       	mov    edx,0xc002b0a8
c002880c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028810:	89 10                	mov    DWORD PTR [eax],edx
c0028812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028816:	83 ec 0c             	sub    esp,0xc
c0028819:	50                   	push   eax
c002881a:	e8 b1 b0 fe ff       	call   c00138d0 <Device::~Device()>
c002881f:	83 c4 10             	add    esp,0x10
c0028822:	90                   	nop
c0028823:	83 c4 0c             	add    esp,0xc
c0028826:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028828 <ACPI::~ACPI()>:
c0028828:	83 ec 0c             	sub    esp,0xc
c002882b:	83 ec 0c             	sub    esp,0xc
c002882e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028832:	e8 cd ff ff ff       	call   c0028804 <ACPI::~ACPI()>
c0028837:	83 c4 10             	add    esp,0x10
c002883a:	83 ec 08             	sub    esp,0x8
c002883d:	68 64 12 00 00       	push   0x1264
c0028842:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028846:	e8 a6 9c fe ff       	call   c00124f1 <operator delete(void*, unsigned long)>
c002884b:	83 c4 10             	add    esp,0x10
c002884e:	83 c4 0c             	add    esp,0xc
c0028851:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0028852 <LinkedList<Device>::~LinkedList()>:
c0028852:	90                   	nop
c0028853:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0028854 <LinkedList<Device>::isEmpty()>:
c0028854:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028858:	8b 00                	mov    eax,DWORD PTR [eax]
c002885a:	85 c0                	test   eax,eax
c002885c:	75 0e                	jne    c002886c <LinkedList<Device>::isEmpty()+0x18>
c002885e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028862:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028865:	85 c0                	test   eax,eax
c0028867:	75 03                	jne    c002886c <LinkedList<Device>::isEmpty()+0x18>
c0028869:	b0 01                	mov    al,0x1
c002886b:	c3                   	ret    
c002886c:	b0 00                	mov    al,0x0
c002886e:	90                   	nop
c002886f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0028870 <LinkedList<Device>::getFirstElement()>:
c0028870:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028874:	8b 00                	mov    eax,DWORD PTR [eax]
c0028876:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0028878 <LinkedList<Device>::removeFirst()>:
c0028878:	83 ec 0c             	sub    esp,0xc
c002887b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002887f:	8b 00                	mov    eax,DWORD PTR [eax]
c0028881:	85 c0                	test   eax,eax
c0028883:	75 15                	jne    c002889a <LinkedList<Device>::removeFirst()+0x22>
c0028885:	83 ec 0c             	sub    esp,0xc
c0028888:	68 84 a0 02 c0       	push   0xc002a084
c002888d:	e8 a3 14 ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c0028892:	83 c4 10             	add    esp,0x10
c0028895:	e9 87 00 00 00       	jmp    c0028921 <LinkedList<Device>::removeFirst()+0xa9>
c002889a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002889e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288a1:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00288a7:	85 c0                	test   eax,eax
c00288a9:	74 10                	je     c00288bb <LinkedList<Device>::removeFirst()+0x43>
c00288ab:	83 ec 0c             	sub    esp,0xc
c00288ae:	68 cf a0 02 c0       	push   0xc002a0cf
c00288b3:	e8 7d 14 ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c00288b8:	83 c4 10             	add    esp,0x10
c00288bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00288c1:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00288c7:	85 c0                	test   eax,eax
c00288c9:	75 33                	jne    c00288fe <LinkedList<Device>::removeFirst()+0x86>
c00288cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288cf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00288d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288d9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00288e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288e4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288e7:	83 f8 01             	cmp    eax,0x1
c00288ea:	74 24                	je     c0028910 <LinkedList<Device>::removeFirst()+0x98>
c00288ec:	83 ec 0c             	sub    esp,0xc
c00288ef:	68 a8 a0 02 c0       	push   0xc002a0a8
c00288f4:	e8 3c 14 ff ff       	call   c0019d35 <Krnl::panic(char const*)>
c00288f9:	83 c4 10             	add    esp,0x10
c00288fc:	eb 12                	jmp    c0028910 <LinkedList<Device>::removeFirst()+0x98>
c00288fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028902:	8b 00                	mov    eax,DWORD PTR [eax]
c0028904:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002890a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002890e:	89 10                	mov    DWORD PTR [eax],edx
c0028910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028914:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028917:	8d 50 ff             	lea    edx,[eax-0x1]
c002891a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002891e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028921:	83 c4 0c             	add    esp,0xc
c0028924:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028926 <CPU::~CPU()>:
c0028926:	83 ec 0c             	sub    esp,0xc
c0028929:	ba f8 b2 02 c0       	mov    edx,0xc002b2f8
c002892e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028932:	89 10                	mov    DWORD PTR [eax],edx
c0028934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028938:	83 ec 0c             	sub    esp,0xc
c002893b:	50                   	push   eax
c002893c:	e8 8f af fe ff       	call   c00138d0 <Device::~Device()>
c0028941:	83 c4 10             	add    esp,0x10
c0028944:	90                   	nop
c0028945:	83 c4 0c             	add    esp,0xc
c0028948:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c002894a <CPU::~CPU()>:
c002894a:	83 ec 0c             	sub    esp,0xc
c002894d:	83 ec 0c             	sub    esp,0xc
c0028950:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028954:	e8 cd ff ff ff       	call   c0028926 <CPU::~CPU()>
c0028959:	83 c4 10             	add    esp,0x10
c002895c:	83 ec 08             	sub    esp,0x8
c002895f:	68 98 11 00 00       	push   0x1198
c0028964:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028968:	e8 84 9b fe ff       	call   c00124f1 <operator delete(void*, unsigned long)>
c002896d:	83 c4 10             	add    esp,0x10
c0028970:	83 c4 0c             	add    esp,0xc
c0028973:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028974 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028974:	90                   	nop
c0028975:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028976 <ThreadControlBlock::ThreadControlBlock()>:
c0028976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002897a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028981:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028985:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002898c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028990:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028997:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002899b:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00289a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289a6:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c00289ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289b1:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00289b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289b9:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c00289bd:	90                   	nop
c00289be:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00289c0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00289c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289c4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00289ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289ce:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00289d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289d9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00289e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289e4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00289ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289ee:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00289f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289f9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028a00:	90                   	nop
c0028a01:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028a02 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028a02:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028a06:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028a09:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028a0a <Vm::_FPUState::_FPUState()>:
c0028a0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a0e:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028a15:	90                   	nop
c0028a16:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028a18 <PCI::~PCI()>:
c0028a18:	83 ec 0c             	sub    esp,0xc
c0028a1b:	ba 24 be 02 c0       	mov    edx,0xc002be24
c0028a20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a24:	89 10                	mov    DWORD PTR [eax],edx
c0028a26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a2a:	83 ec 0c             	sub    esp,0xc
c0028a2d:	50                   	push   eax
c0028a2e:	e8 6d a8 fe ff       	call   c00132a0 <Bus::~Bus()>
c0028a33:	83 c4 10             	add    esp,0x10
c0028a36:	90                   	nop
c0028a37:	83 c4 0c             	add    esp,0xc
c0028a3a:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028a3c <PCI::~PCI()>:
c0028a3c:	83 ec 0c             	sub    esp,0xc
c0028a3f:	83 ec 0c             	sub    esp,0xc
c0028a42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a46:	e8 cd ff ff ff       	call   c0028a18 <PCI::~PCI()>
c0028a4b:	83 c4 10             	add    esp,0x10
c0028a4e:	83 ec 08             	sub    esp,0x8
c0028a51:	68 5c 01 00 00       	push   0x15c
c0028a56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a5a:	e8 92 9a fe ff       	call   c00124f1 <operator delete(void*, unsigned long)>
c0028a5f:	83 c4 10             	add    esp,0x10
c0028a62:	83 c4 0c             	add    esp,0xc
c0028a65:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028a66 <IDE::~IDE()>:
c0028a66:	83 ec 0c             	sub    esp,0xc
c0028a69:	ba d8 be 02 c0       	mov    edx,0xc002bed8
c0028a6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a72:	89 10                	mov    DWORD PTR [eax],edx
c0028a74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a78:	83 ec 0c             	sub    esp,0xc
c0028a7b:	50                   	push   eax
c0028a7c:	e8 65 b3 fe ff       	call   c0013de6 <HardDiskController::~HardDiskController()>
c0028a81:	83 c4 10             	add    esp,0x10
c0028a84:	90                   	nop
c0028a85:	83 c4 0c             	add    esp,0xc
c0028a88:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028a8a <IDE::~IDE()>:
c0028a8a:	83 ec 0c             	sub    esp,0xc
c0028a8d:	83 ec 0c             	sub    esp,0xc
c0028a90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a94:	e8 cd ff ff ff       	call   c0028a66 <IDE::~IDE()>
c0028a99:	83 c4 10             	add    esp,0x10
c0028a9c:	83 ec 08             	sub    esp,0x8
c0028a9f:	68 70 02 00 00       	push   0x270
c0028aa4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028aa8:	e8 44 9a fe ff       	call   c00124f1 <operator delete(void*, unsigned long)>
c0028aad:	83 c4 10             	add    esp,0x10
c0028ab0:	83 c4 0c             	add    esp,0xc
c0028ab3:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028ab4 <SATABus::~SATABus()>:
c0028ab4:	83 ec 0c             	sub    esp,0xc
c0028ab7:	ba 50 bf 02 c0       	mov    edx,0xc002bf50
c0028abc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ac0:	89 10                	mov    DWORD PTR [eax],edx
c0028ac2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ac6:	83 ec 0c             	sub    esp,0xc
c0028ac9:	50                   	push   eax
c0028aca:	e8 17 b3 fe ff       	call   c0013de6 <HardDiskController::~HardDiskController()>
c0028acf:	83 c4 10             	add    esp,0x10
c0028ad2:	90                   	nop
c0028ad3:	83 c4 0c             	add    esp,0xc
c0028ad6:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028ad8 <SATABus::~SATABus()>:
c0028ad8:	83 ec 0c             	sub    esp,0xc
c0028adb:	83 ec 0c             	sub    esp,0xc
c0028ade:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ae2:	e8 cd ff ff ff       	call   c0028ab4 <SATABus::~SATABus()>
c0028ae7:	83 c4 10             	add    esp,0x10
c0028aea:	83 ec 08             	sub    esp,0x8
c0028aed:	68 64 01 00 00       	push   0x164
c0028af2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028af6:	e8 f6 99 fe ff       	call   c00124f1 <operator delete(void*, unsigned long)>
c0028afb:	83 c4 10             	add    esp,0x10
c0028afe:	83 c4 0c             	add    esp,0xc
c0028b01:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028b02 <ATA::~ATA()>:
c0028b02:	83 ec 0c             	sub    esp,0xc
c0028b05:	ba 9c bf 02 c0       	mov    edx,0xc002bf9c
c0028b0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b0e:	89 10                	mov    DWORD PTR [eax],edx
c0028b10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b14:	83 ec 0c             	sub    esp,0xc
c0028b17:	50                   	push   eax
c0028b18:	e8 ab b3 fe ff       	call   c0013ec8 <PhysicalDisk::~PhysicalDisk()>
c0028b1d:	83 c4 10             	add    esp,0x10
c0028b20:	90                   	nop
c0028b21:	83 c4 0c             	add    esp,0xc
c0028b24:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028b26 <ATA::~ATA()>:
c0028b26:	83 ec 0c             	sub    esp,0xc
c0028b29:	83 ec 0c             	sub    esp,0xc
c0028b2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b30:	e8 cd ff ff ff       	call   c0028b02 <ATA::~ATA()>
c0028b35:	83 c4 10             	add    esp,0x10
c0028b38:	83 ec 08             	sub    esp,0x8
c0028b3b:	68 7c 01 00 00       	push   0x17c
c0028b40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b44:	e8 a8 99 fe ff       	call   c00124f1 <operator delete(void*, unsigned long)>
c0028b49:	83 c4 10             	add    esp,0x10
c0028b4c:	83 c4 0c             	add    esp,0xc
c0028b4f:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028b50 <ATAPI::~ATAPI()>:
c0028b50:	83 ec 0c             	sub    esp,0xc
c0028b53:	ba d4 bf 02 c0       	mov    edx,0xc002bfd4
c0028b58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b5c:	89 10                	mov    DWORD PTR [eax],edx
c0028b5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b62:	83 ec 0c             	sub    esp,0xc
c0028b65:	50                   	push   eax
c0028b66:	e8 5d b3 fe ff       	call   c0013ec8 <PhysicalDisk::~PhysicalDisk()>
c0028b6b:	83 c4 10             	add    esp,0x10
c0028b6e:	90                   	nop
c0028b6f:	83 c4 0c             	add    esp,0xc
c0028b72:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028b74 <ATAPI::~ATAPI()>:
c0028b74:	83 ec 0c             	sub    esp,0xc
c0028b77:	83 ec 0c             	sub    esp,0xc
c0028b7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b7e:	e8 cd ff ff ff       	call   c0028b50 <ATAPI::~ATAPI()>
c0028b83:	83 c4 10             	add    esp,0x10
c0028b86:	83 ec 08             	sub    esp,0x8
c0028b89:	68 80 01 00 00       	push   0x180
c0028b8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b92:	e8 5a 99 fe ff       	call   c00124f1 <operator delete(void*, unsigned long)>
c0028b97:	83 c4 10             	add    esp,0x10
c0028b9a:	83 c4 0c             	add    esp,0xc
c0028b9d:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028b9e <SATA::~SATA()>:
c0028b9e:	83 ec 0c             	sub    esp,0xc
c0028ba1:	ba 88 c0 02 c0       	mov    edx,0xc002c088
c0028ba6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028baa:	89 10                	mov    DWORD PTR [eax],edx
c0028bac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bb0:	83 ec 0c             	sub    esp,0xc
c0028bb3:	50                   	push   eax
c0028bb4:	e8 0f b3 fe ff       	call   c0013ec8 <PhysicalDisk::~PhysicalDisk()>
c0028bb9:	83 c4 10             	add    esp,0x10
c0028bbc:	90                   	nop
c0028bbd:	83 c4 0c             	add    esp,0xc
c0028bc0:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028bc2 <SATA::~SATA()>:
c0028bc2:	83 ec 0c             	sub    esp,0xc
c0028bc5:	83 ec 0c             	sub    esp,0xc
c0028bc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bcc:	e8 cd ff ff ff       	call   c0028b9e <SATA::~SATA()>
c0028bd1:	83 c4 10             	add    esp,0x10
c0028bd4:	83 ec 08             	sub    esp,0x8
c0028bd7:	68 7c 01 00 00       	push   0x17c
c0028bdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028be0:	e8 0c 99 fe ff       	call   c00124f1 <operator delete(void*, unsigned long)>
c0028be5:	83 c4 10             	add    esp,0x10
c0028be8:	83 c4 0c             	add    esp,0xc
c0028beb:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028bec <SATAPI::~SATAPI()>:
c0028bec:	83 ec 0c             	sub    esp,0xc
c0028bef:	ba 64 c1 02 c0       	mov    edx,0xc002c164
c0028bf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bf8:	89 10                	mov    DWORD PTR [eax],edx
c0028bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bfe:	83 ec 0c             	sub    esp,0xc
c0028c01:	50                   	push   eax
c0028c02:	e8 c1 b2 fe ff       	call   c0013ec8 <PhysicalDisk::~PhysicalDisk()>
c0028c07:	83 c4 10             	add    esp,0x10
c0028c0a:	90                   	nop
c0028c0b:	83 c4 0c             	add    esp,0xc
c0028c0e:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028c10 <SATAPI::~SATAPI()>:
c0028c10:	83 ec 0c             	sub    esp,0xc
c0028c13:	83 ec 0c             	sub    esp,0xc
c0028c16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c1a:	e8 cd ff ff ff       	call   c0028bec <SATAPI::~SATAPI()>
c0028c1f:	83 c4 10             	add    esp,0x10
c0028c22:	83 ec 08             	sub    esp,0x8
c0028c25:	68 80 01 00 00       	push   0x180
c0028c2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c2e:	e8 be 98 fe ff       	call   c00124f1 <operator delete(void*, unsigned long)>
c0028c33:	83 c4 10             	add    esp,0x10
c0028c36:	83 c4 0c             	add    esp,0xc
c0028c39:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028c3a <AVX::~AVX()>:
c0028c3a:	83 ec 0c             	sub    esp,0xc
c0028c3d:	ba a4 c1 02 c0       	mov    edx,0xc002c1a4
c0028c42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c46:	89 10                	mov    DWORD PTR [eax],edx
c0028c48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c4c:	83 ec 0c             	sub    esp,0xc
c0028c4f:	50                   	push   eax
c0028c50:	e8 f7 b2 fe ff       	call   c0013f4c <FPU::~FPU()>
c0028c55:	83 c4 10             	add    esp,0x10
c0028c58:	90                   	nop
c0028c59:	83 c4 0c             	add    esp,0xc
c0028c5c:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028c5e <AVX::~AVX()>:
c0028c5e:	83 ec 0c             	sub    esp,0xc
c0028c61:	83 ec 0c             	sub    esp,0xc
c0028c64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c68:	e8 cd ff ff ff       	call   c0028c3a <AVX::~AVX()>
c0028c6d:	83 c4 10             	add    esp,0x10
c0028c70:	83 ec 08             	sub    esp,0x8
c0028c73:	68 58 01 00 00       	push   0x158
c0028c78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c7c:	e8 70 98 fe ff       	call   c00124f1 <operator delete(void*, unsigned long)>
c0028c81:	83 c4 10             	add    esp,0x10
c0028c84:	83 c4 0c             	add    esp,0xc
c0028c87:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028c88 <MMX::~MMX()>:
c0028c88:	83 ec 0c             	sub    esp,0xc
c0028c8b:	ba e4 c1 02 c0       	mov    edx,0xc002c1e4
c0028c90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c94:	89 10                	mov    DWORD PTR [eax],edx
c0028c96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c9a:	83 ec 0c             	sub    esp,0xc
c0028c9d:	50                   	push   eax
c0028c9e:	e8 a9 b2 fe ff       	call   c0013f4c <FPU::~FPU()>
c0028ca3:	83 c4 10             	add    esp,0x10
c0028ca6:	90                   	nop
c0028ca7:	83 c4 0c             	add    esp,0xc
c0028caa:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028cac <MMX::~MMX()>:
c0028cac:	83 ec 0c             	sub    esp,0xc
c0028caf:	83 ec 0c             	sub    esp,0xc
c0028cb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cb6:	e8 cd ff ff ff       	call   c0028c88 <MMX::~MMX()>
c0028cbb:	83 c4 10             	add    esp,0x10
c0028cbe:	83 ec 08             	sub    esp,0x8
c0028cc1:	68 58 01 00 00       	push   0x158
c0028cc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cca:	e8 22 98 fe ff       	call   c00124f1 <operator delete(void*, unsigned long)>
c0028ccf:	83 c4 10             	add    esp,0x10
c0028cd2:	83 c4 0c             	add    esp,0xc
c0028cd5:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028cd6 <SSE::~SSE()>:
c0028cd6:	83 ec 0c             	sub    esp,0xc
c0028cd9:	ba 24 c2 02 c0       	mov    edx,0xc002c224
c0028cde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ce2:	89 10                	mov    DWORD PTR [eax],edx
c0028ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ce8:	83 ec 0c             	sub    esp,0xc
c0028ceb:	50                   	push   eax
c0028cec:	e8 5b b2 fe ff       	call   c0013f4c <FPU::~FPU()>
c0028cf1:	83 c4 10             	add    esp,0x10
c0028cf4:	90                   	nop
c0028cf5:	83 c4 0c             	add    esp,0xc
c0028cf8:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028cfa <SSE::~SSE()>:
c0028cfa:	83 ec 0c             	sub    esp,0xc
c0028cfd:	83 ec 0c             	sub    esp,0xc
c0028d00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d04:	e8 cd ff ff ff       	call   c0028cd6 <SSE::~SSE()>
c0028d09:	83 c4 10             	add    esp,0x10
c0028d0c:	83 ec 08             	sub    esp,0x8
c0028d0f:	68 58 01 00 00       	push   0x158
c0028d14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d18:	e8 d4 97 fe ff       	call   c00124f1 <operator delete(void*, unsigned long)>
c0028d1d:	83 c4 10             	add    esp,0x10
c0028d20:	83 c4 0c             	add    esp,0xc
c0028d23:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0028d24 <x87::~x87()>:
c0028d24:	83 ec 0c             	sub    esp,0xc
c0028d27:	ba 64 c2 02 c0       	mov    edx,0xc002c264
c0028d2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d30:	89 10                	mov    DWORD PTR [eax],edx
c0028d32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d36:	83 ec 0c             	sub    esp,0xc
c0028d39:	50                   	push   eax
c0028d3a:	e8 0d b2 fe ff       	call   c0013f4c <FPU::~FPU()>
c0028d3f:	83 c4 10             	add    esp,0x10
c0028d42:	90                   	nop
c0028d43:	83 c4 0c             	add    esp,0xc
c0028d46:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0028d48 <x87::~x87()>:
c0028d48:	83 ec 0c             	sub    esp,0xc
c0028d4b:	83 ec 0c             	sub    esp,0xc
c0028d4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d52:	e8 cd ff ff ff       	call   c0028d24 <x87::~x87()>
c0028d57:	83 c4 10             	add    esp,0x10
c0028d5a:	83 ec 08             	sub    esp,0x8
c0028d5d:	68 58 01 00 00       	push   0x158
c0028d62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d66:	e8 86 97 fe ff       	call   c00124f1 <operator delete(void*, unsigned long)>
c0028d6b:	83 c4 10             	add    esp,0x10
c0028d6e:	83 c4 0c             	add    esp,0xc
c0028d71:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0028d72 <IOAPIC::~IOAPIC()>:
c0028d72:	83 ec 0c             	sub    esp,0xc
c0028d75:	ba bc c3 02 c0       	mov    edx,0xc002c3bc
c0028d7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d7e:	89 10                	mov    DWORD PTR [eax],edx
c0028d80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d84:	83 ec 0c             	sub    esp,0xc
c0028d87:	50                   	push   eax
c0028d88:	e8 43 ab fe ff       	call   c00138d0 <Device::~Device()>
c0028d8d:	83 c4 10             	add    esp,0x10
c0028d90:	90                   	nop
c0028d91:	83 c4 0c             	add    esp,0xc
c0028d94:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0028d96 <IOAPIC::~IOAPIC()>:
c0028d96:	83 ec 0c             	sub    esp,0xc
c0028d99:	83 ec 0c             	sub    esp,0xc
c0028d9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028da0:	e8 cd ff ff ff       	call   c0028d72 <IOAPIC::~IOAPIC()>
c0028da5:	83 c4 10             	add    esp,0x10
c0028da8:	83 ec 08             	sub    esp,0x8
c0028dab:	68 68 01 00 00       	push   0x168
c0028db0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028db4:	e8 38 97 fe ff       	call   c00124f1 <operator delete(void*, unsigned long)>
c0028db9:	83 c4 10             	add    esp,0x10
c0028dbc:	83 c4 0c             	add    esp,0xc
c0028dbf:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0028dc0 <APIC::~APIC()>:
c0028dc0:	83 ec 0c             	sub    esp,0xc
c0028dc3:	ba 74 c3 02 c0       	mov    edx,0xc002c374
c0028dc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dcc:	89 10                	mov    DWORD PTR [eax],edx
c0028dce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dd2:	83 ec 0c             	sub    esp,0xc
c0028dd5:	50                   	push   eax
c0028dd6:	e8 3b b6 fe ff       	call   c0014416 <InterruptController::~InterruptController()>
c0028ddb:	83 c4 10             	add    esp,0x10
c0028dde:	90                   	nop
c0028ddf:	83 c4 0c             	add    esp,0xc
c0028de2:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0028de4 <APIC::~APIC()>:
c0028de4:	83 ec 0c             	sub    esp,0xc
c0028de7:	83 ec 0c             	sub    esp,0xc
c0028dea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dee:	e8 cd ff ff ff       	call   c0028dc0 <APIC::~APIC()>
c0028df3:	83 c4 10             	add    esp,0x10
c0028df6:	83 ec 08             	sub    esp,0x8
c0028df9:	68 58 21 00 00       	push   0x2158
c0028dfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e02:	e8 ea 96 fe ff       	call   c00124f1 <operator delete(void*, unsigned long)>
c0028e07:	83 c4 10             	add    esp,0x10
c0028e0a:	83 c4 0c             	add    esp,0xc
c0028e0d:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0028e0e <PIC::~PIC()>:
c0028e0e:	83 ec 0c             	sub    esp,0xc
c0028e11:	ba 0c c4 02 c0       	mov    edx,0xc002c40c
c0028e16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e1a:	89 10                	mov    DWORD PTR [eax],edx
c0028e1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e20:	83 ec 0c             	sub    esp,0xc
c0028e23:	50                   	push   eax
c0028e24:	e8 ed b5 fe ff       	call   c0014416 <InterruptController::~InterruptController()>
c0028e29:	83 c4 10             	add    esp,0x10
c0028e2c:	90                   	nop
c0028e2d:	83 c4 0c             	add    esp,0xc
c0028e30:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0028e32 <PIC::~PIC()>:
c0028e32:	83 ec 0c             	sub    esp,0xc
c0028e35:	83 ec 0c             	sub    esp,0xc
c0028e38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e3c:	e8 cd ff ff ff       	call   c0028e0e <PIC::~PIC()>
c0028e41:	83 c4 10             	add    esp,0x10
c0028e44:	83 ec 08             	sub    esp,0x8
c0028e47:	68 58 21 00 00       	push   0x2158
c0028e4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e50:	e8 9c 96 fe ff       	call   c00124f1 <operator delete(void*, unsigned long)>
c0028e55:	83 c4 10             	add    esp,0x10
c0028e58:	83 c4 0c             	add    esp,0xc
c0028e5b:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0028e5c <APICTimer::~APICTimer()>:
c0028e5c:	83 ec 0c             	sub    esp,0xc
c0028e5f:	ba 60 c4 02 c0       	mov    edx,0xc002c460
c0028e64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e68:	89 10                	mov    DWORD PTR [eax],edx
c0028e6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e6e:	83 ec 0c             	sub    esp,0xc
c0028e71:	50                   	push   eax
c0028e72:	e8 f7 d5 fe ff       	call   c001646e <Timer::~Timer()>
c0028e77:	83 c4 10             	add    esp,0x10
c0028e7a:	90                   	nop
c0028e7b:	83 c4 0c             	add    esp,0xc
c0028e7e:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0028e80 <APICTimer::~APICTimer()>:
c0028e80:	83 ec 0c             	sub    esp,0xc
c0028e83:	83 ec 0c             	sub    esp,0xc
c0028e86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e8a:	e8 cd ff ff ff       	call   c0028e5c <APICTimer::~APICTimer()>
c0028e8f:	83 c4 10             	add    esp,0x10
c0028e92:	83 ec 08             	sub    esp,0x8
c0028e95:	68 60 01 00 00       	push   0x160
c0028e9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e9e:	e8 4e 96 fe ff       	call   c00124f1 <operator delete(void*, unsigned long)>
c0028ea3:	83 c4 10             	add    esp,0x10
c0028ea6:	83 c4 0c             	add    esp,0xc
c0028ea9:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0028eaa <PIT::~PIT()>:
c0028eaa:	83 ec 0c             	sub    esp,0xc
c0028ead:	ba b0 c4 02 c0       	mov    edx,0xc002c4b0
c0028eb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eb6:	89 10                	mov    DWORD PTR [eax],edx
c0028eb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ebc:	83 ec 0c             	sub    esp,0xc
c0028ebf:	50                   	push   eax
c0028ec0:	e8 a9 d5 fe ff       	call   c001646e <Timer::~Timer()>
c0028ec5:	83 c4 10             	add    esp,0x10
c0028ec8:	90                   	nop
c0028ec9:	83 c4 0c             	add    esp,0xc
c0028ecc:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0028ece <PIT::~PIT()>:
c0028ece:	83 ec 0c             	sub    esp,0xc
c0028ed1:	83 ec 0c             	sub    esp,0xc
c0028ed4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ed8:	e8 cd ff ff ff       	call   c0028eaa <PIT::~PIT()>
c0028edd:	83 c4 10             	add    esp,0x10
c0028ee0:	83 ec 08             	sub    esp,0x8
c0028ee3:	68 5c 01 00 00       	push   0x15c
c0028ee8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028eec:	e8 00 96 fe ff       	call   c00124f1 <operator delete(void*, unsigned long)>
c0028ef1:	83 c4 10             	add    esp,0x10
c0028ef4:	83 c4 0c             	add    esp,0xc
c0028ef7:	c3                   	ret    
