
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 13 78 00 00       	call   c0007833 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 34 fd 01 c0       	mov    eax,0xc001fd34
c0000025:	3d 34 fd 01 c0       	cmp    eax,0xc001fd34
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 34 fd 01 c0       	push   0xc001fd34
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 34 fd 01 c0       	mov    eax,0xc001fd34
c0000051:	2d 34 fd 01 c0       	sub    eax,0xc001fd34
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 34 fd 01 c0       	push   0xc001fd34
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d 60 ff 01 c0 00 	cmp    BYTE PTR ds:0xc001ff60,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb e8 ce 01 c0       	mov    ebx,0xc001cee8
c0000097:	81 eb e4 ce 01 c0    	sub    ebx,0xc001cee4
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be e4 ce 01 c0       	mov    esi,0xc001cee4
c00000a6:	a1 64 ff 01 c0       	mov    eax,ds:0xc001ff64
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 64 ff 01 c0       	mov    ds:0xc001ff64,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 64 ff 01 c0       	mov    eax,ds:0xc001ff64
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 34 fd 01 c0       	push   0xc001fd34
c00000d8:	e8 23 ff ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 60 ff 01 c0 01 	mov    BYTE PTR ds:0xc001ff60,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 68 ff 01 c0       	push   0xc001ff68
c0000108:	68 34 fd 01 c0       	push   0xc001fd34
c000010d:	e8 ee fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000297:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000029a:	0f 20 d9             	mov    ecx,cr3
c000029d:	39 c8                	cmp    eax,ecx
c000029f:	74 03                	je     c00002a4 <commonThreadSwitch.doneVAS>
c00002a1:	0f 22 d8             	mov    cr3,eax

c00002a4 <commonThreadSwitch.doneVAS>:
c00002a4:	85 d2                	test   edx,edx
c00002a6:	75 11                	jne    c00002b9 <commonThreadSwitch.firstTime>
c00002a8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002ab:	e8 8c 2d 01 00       	call   c001303c <changeTSS>
c00002b0:	5d                   	pop    ebp
c00002b1:	5f                   	pop    edi
c00002b2:	5e                   	pop    esi
c00002b3:	5a                   	pop    edx
c00002b4:	59                   	pop    ecx
c00002b5:	5b                   	pop    ebx
c00002b6:	58                   	pop    eax
c00002b7:	9d                   	popf   
c00002b8:	c3                   	ret    

c00002b9 <commonThreadSwitch.firstTime>:
c00002b9:	fa                   	cli    
c00002ba:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002bd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002c2:	60                   	pusha  
c00002c3:	e8 30 a0 00 00       	call   c000a2f8 <mapVASFirstTime>
c00002c8:	61                   	popa   
c00002c9:	89 c4                	mov    esp,eax
c00002cb:	56                   	push   esi
c00002cc:	52                   	push   edx
c00002cd:	e8 6a 2d 01 00       	call   c001303c <changeTSS>
c00002d2:	5a                   	pop    edx
c00002d3:	5e                   	pop    esi
c00002d4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002db:	5d                   	pop    ebp
c00002dc:	5f                   	pop    edi
c00002dd:	5e                   	pop    esi
c00002de:	59                   	pop    ecx
c00002df:	59                   	pop    ecx
c00002e0:	5b                   	pop    ebx
c00002e1:	58                   	pop    eax
c00002e2:	81 c4 04 00 00 00    	add    esp,0x4
c00002e8:	6a 02                	push   0x2
c00002ea:	9d                   	popf   
c00002eb:	52                   	push   edx
c00002ec:	e8 bb 33 01 00       	call   c00136ac <taskStartupFunction>
c00002f1:	5a                   	pop    edx
c00002f2:	50                   	push   eax
c00002f3:	ff d2                	call   edx
c00002f5:	e8 0a 3a 01 00       	call   c0013d04 <taskReturned>
c00002fa:	e9 fb ff ff ff       	jmp    c00002fa <commonThreadSwitch.firstTime+0x41>

c00002ff <asmQuickAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmQuickAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 02                	jb     c000030e <asmQuickAcquireLock.spin_with_pause>
c000030c:	fa                   	cli    
c000030d:	c3                   	ret    

c000030e <asmQuickAcquireLock.spin_with_pause>:
c000030e:	f3 90                	pause  
c0000310:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000316:	75 f6                	jne    c000030e <asmQuickAcquireLock.spin_with_pause>
c0000318:	e9 e8 ff ff ff       	jmp    c0000305 <asmQuickAcquireLock.retry>

c000031d <asmQuickReleaseLock>:
c000031d:	55                   	push   ebp
c000031e:	89 e5                	mov    ebp,esp
c0000320:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000327:	5d                   	pop    ebp
c0000328:	c3                   	ret    

c0000329 <asmAcquireLock>:
c0000329:	55                   	push   ebp
c000032a:	89 e5                	mov    ebp,esp
c000032c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032f <asmAcquireLock.retry>:
c000032f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000334:	72 05                	jb     c000033b <asmAcquireLock.spin_with_pause>
c0000336:	9c                   	pushf  
c0000337:	58                   	pop    eax
c0000338:	fa                   	cli    
c0000339:	5d                   	pop    ebp
c000033a:	c3                   	ret    

c000033b <asmAcquireLock.spin_with_pause>:
c000033b:	f3 90                	pause  
c000033d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000343:	75 f6                	jne    c000033b <asmAcquireLock.spin_with_pause>
c0000345:	e9 e5 ff ff ff       	jmp    c000032f <asmAcquireLock.retry>

c000034a <asmReleaseLock>:
c000034a:	55                   	push   ebp
c000034b:	89 e5                	mov    ebp,esp
c000034d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000350:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000353:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000359:	52                   	push   edx
c000035a:	9d                   	popf   
c000035b:	5d                   	pop    ebp
c000035c:	c3                   	ret    

c000035d <loadGDT>:
c000035d:	0f 01 15 60 0d 02 c0 	lgdtd  ds:0xc0020d60
c0000364:	66 b8 10 00          	mov    ax,0x10
c0000368:	66 8e d8             	mov    ds,ax
c000036b:	66 8e c0             	mov    es,ax
c000036e:	66 8e e0             	mov    fs,ax
c0000371:	66 8e e8             	mov    gs,ax
c0000374:	66 8e d0             	mov    ss,ax
c0000377:	e9 00 00 00 00       	jmp    c000037c <flush2>

c000037c <flush2>:
c000037c:	c3                   	ret    

c000037d <memcpy>:
c000037d:	e9 cc fd 00 00       	jmp    c001014e <__not_memcpy>
c0000382:	66 90                	xchg   ax,ax
c0000384:	66 90                	xchg   ax,ax
c0000386:	66 90                	xchg   ax,ax
c0000388:	66 90                	xchg   ax,ax
c000038a:	66 90                	xchg   ax,ax
c000038c:	66 90                	xchg   ax,ax
c000038e:	66 90                	xchg   ax,ax

c0000390 <memcmp>:
c0000390:	56                   	push   esi
c0000391:	53                   	push   ebx
c0000392:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000396:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000039a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000039e:	85 f6                	test   esi,esi
c00003a0:	74 1c                	je     c00003be <memcmp+0x2e>
c00003a2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003a6:	38 cb                	cmp    bl,cl
c00003a8:	75 26                	jne    c00003d0 <memcmp+0x40>
c00003aa:	01 c6                	add    esi,eax
c00003ac:	eb 0a                	jmp    c00003b8 <memcmp+0x28>
c00003ae:	66 90                	xchg   ax,ax
c00003b0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003b2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003b4:	38 d9                	cmp    cl,bl
c00003b6:	75 18                	jne    c00003d0 <memcmp+0x40>
c00003b8:	40                   	inc    eax
c00003b9:	42                   	inc    edx
c00003ba:	39 f0                	cmp    eax,esi
c00003bc:	75 f2                	jne    c00003b0 <memcmp+0x20>
c00003be:	31 c0                	xor    eax,eax
c00003c0:	5b                   	pop    ebx
c00003c1:	5e                   	pop    esi
c00003c2:	c3                   	ret    
c00003c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003d0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003d6:	31 c0                	xor    eax,eax
c00003d8:	88 c8                	mov    al,cl
c00003da:	29 d8                	sub    eax,ebx
c00003dc:	5b                   	pop    ebx
c00003dd:	5e                   	pop    esi
c00003de:	c3                   	ret    
c00003df:	90                   	nop

c00003e0 <memmove>:
c00003e0:	55                   	push   ebp
c00003e1:	57                   	push   edi
c00003e2:	56                   	push   esi
c00003e3:	53                   	push   ebx
c00003e4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003e8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003f0:	39 dd                	cmp    ebp,ebx
c00003f2:	0f 83 98 00 00 00    	jae    c0000490 <memmove+0xb0>
c00003f8:	85 d2                	test   edx,edx
c00003fa:	0f 84 7c 00 00 00    	je     c000047c <memmove+0x9c>
c0000400:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000403:	8d 75 04             	lea    esi,[ebp+0x4]
c0000406:	39 cd                	cmp    ebp,ecx
c0000408:	0f 93 c1             	setae  cl
c000040b:	39 f3                	cmp    ebx,esi
c000040d:	0f 93 c0             	setae  al
c0000410:	89 c6                	mov    esi,eax
c0000412:	09 ce                	or     esi,ecx
c0000414:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000417:	89 f0                	mov    eax,esi
c0000419:	83 f9 0c             	cmp    ecx,0xc
c000041c:	0f 97 c1             	seta   cl
c000041f:	84 c8                	test   al,cl
c0000421:	0f 84 89 00 00 00    	je     c00004b0 <memmove+0xd0>
c0000427:	89 e9                	mov    ecx,ebp
c0000429:	09 d9                	or     ecx,ebx
c000042b:	83 e1 03             	and    ecx,0x3
c000042e:	0f 85 7c 00 00 00    	jne    c00004b0 <memmove+0xd0>
c0000434:	89 d7                	mov    edi,edx
c0000436:	89 d9                	mov    ecx,ebx
c0000438:	83 e7 fc             	and    edi,0xfffffffc
c000043b:	89 ee                	mov    esi,ebp
c000043d:	01 df                	add    edi,ebx
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x60>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0x9c>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0x9c>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0x9c>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0x9c>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0x9c>
c0000496:	4b                   	dec    ebx
c0000497:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	4a                   	dec    edx
c00004a7:	75 f7                	jne    c00004a0 <memmove+0xc0>
c00004a9:	5b                   	pop    ebx
c00004aa:	89 e8                	mov    eax,ebp
c00004ac:	5e                   	pop    esi
c00004ad:	5f                   	pop    edi
c00004ae:	5d                   	pop    ebp
c00004af:	c3                   	ret    
c00004b0:	01 ea                	add    edx,ebp
c00004b2:	89 e9                	mov    ecx,ebp
c00004b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004c0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004c2:	41                   	inc    ecx
c00004c3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004c6:	43                   	inc    ebx
c00004c7:	39 d1                	cmp    ecx,edx
c00004c9:	75 f5                	jne    c00004c0 <memmove+0xe0>
c00004cb:	eb af                	jmp    c000047c <memmove+0x9c>
c00004cd:	8d 76 00             	lea    esi,[esi+0x0]

c00004d0 <memset>:
c00004d0:	57                   	push   edi
c00004d1:	53                   	push   ebx
c00004d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004d6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004da:	85 d2                	test   edx,edx
c00004dc:	74 1f                	je     c00004fd <memset+0x2d>
c00004de:	31 c0                	xor    eax,eax
c00004e0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00004e4:	88 c4                	mov    ah,al
c00004e6:	89 c1                	mov    ecx,eax
c00004e8:	c1 e1 10             	shl    ecx,0x10
c00004eb:	09 c8                	or     eax,ecx
c00004ed:	83 fa 04             	cmp    edx,0x4
c00004f0:	73 1e                	jae    c0000510 <memset+0x40>
c00004f2:	85 d2                	test   edx,edx
c00004f4:	74 07                	je     c00004fd <memset+0x2d>
c00004f6:	88 03                	mov    BYTE PTR [ebx],al
c00004f8:	f6 c2 02             	test   dl,0x2
c00004fb:	75 30                	jne    c000052d <memset+0x5d>
c00004fd:	89 d8                	mov    eax,ebx
c00004ff:	5b                   	pop    ebx
c0000500:	5f                   	pop    edi
c0000501:	c3                   	ret    
c0000502:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000509:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000510:	89 03                	mov    DWORD PTR [ebx],eax
c0000512:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000515:	89 d9                	mov    ecx,ebx
c0000517:	83 e7 fc             	and    edi,0xfffffffc
c000051a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000051e:	29 f9                	sub    ecx,edi
c0000520:	01 d1                	add    ecx,edx
c0000522:	c1 e9 02             	shr    ecx,0x2
c0000525:	fc                   	cld    
c0000526:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000528:	89 d8                	mov    eax,ebx
c000052a:	5b                   	pop    ebx
c000052b:	5f                   	pop    edi
c000052c:	c3                   	ret    
c000052d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000532:	eb c9                	jmp    c00004fd <memset+0x2d>
c0000534:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000053a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000540 <strlen>:
c0000540:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000544:	31 c0                	xor    eax,eax
c0000546:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000549:	74 15                	je     c0000560 <strlen+0x20>
c000054b:	90                   	nop
c000054c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000550:	40                   	inc    eax
c0000551:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000555:	75 f9                	jne    c0000550 <strlen+0x10>
c0000557:	c3                   	ret    
c0000558:	90                   	nop
c0000559:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000560:	c3                   	ret    
c0000561:	eb 0d                	jmp    c0000570 <strpbrk>
c0000563:	90                   	nop
c0000564:	90                   	nop
c0000565:	90                   	nop
c0000566:	90                   	nop
c0000567:	90                   	nop
c0000568:	90                   	nop
c0000569:	90                   	nop
c000056a:	90                   	nop
c000056b:	90                   	nop
c000056c:	90                   	nop
c000056d:	90                   	nop
c000056e:	90                   	nop
c000056f:	90                   	nop

c0000570 <strpbrk>:
c0000570:	57                   	push   edi
c0000571:	56                   	push   esi
c0000572:	53                   	push   ebx
c0000573:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000577:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000057b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000057d:	84 db                	test   bl,bl
c000057f:	74 21                	je     c00005a2 <strpbrk+0x32>
c0000581:	8a 07                	mov    al,BYTE PTR [edi]
c0000583:	84 c0                	test   al,al
c0000585:	74 14                	je     c000059b <strpbrk+0x2b>
c0000587:	38 d8                	cmp    al,bl
c0000589:	74 19                	je     c00005a4 <strpbrk+0x34>
c000058b:	89 fa                	mov    edx,edi
c000058d:	eb 05                	jmp    c0000594 <strpbrk+0x24>
c000058f:	90                   	nop
c0000590:	38 d9                	cmp    cl,bl
c0000592:	74 10                	je     c00005a4 <strpbrk+0x34>
c0000594:	42                   	inc    edx
c0000595:	8a 0a                	mov    cl,BYTE PTR [edx]
c0000597:	84 c9                	test   cl,cl
c0000599:	75 f5                	jne    c0000590 <strpbrk+0x20>
c000059b:	46                   	inc    esi
c000059c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059e:	84 db                	test   bl,bl
c00005a0:	75 e1                	jne    c0000583 <strpbrk+0x13>
c00005a2:	31 f6                	xor    esi,esi
c00005a4:	89 f0                	mov    eax,esi
c00005a6:	5b                   	pop    ebx
c00005a7:	5e                   	pop    esi
c00005a8:	5f                   	pop    edi
c00005a9:	c3                   	ret    
c00005aa:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005b0 <strtok>:
c00005b0:	56                   	push   esi
c00005b1:	53                   	push   ebx
c00005b2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005ba:	85 db                	test   ebx,ebx
c00005bc:	75 07                	jne    c00005c5 <strtok+0x15>
c00005be:	eb 30                	jmp    c00005f0 <strtok+0x40>
c00005c0:	43                   	inc    ebx
c00005c1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005c5:	56                   	push   esi
c00005c6:	53                   	push   ebx
c00005c7:	e8 a4 ff ff ff       	call   c0000570 <strpbrk>
c00005cc:	5a                   	pop    edx
c00005cd:	a3 80 ff 01 c0       	mov    ds:0xc001ff80,eax
c00005d2:	59                   	pop    ecx
c00005d3:	39 d8                	cmp    eax,ebx
c00005d5:	74 e9                	je     c00005c0 <strtok+0x10>
c00005d7:	85 c0                	test   eax,eax
c00005d9:	74 1f                	je     c00005fa <strtok+0x4a>
c00005db:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005de:	8d 50 01             	lea    edx,[eax+0x1]
c00005e1:	89 d8                	mov    eax,ebx
c00005e3:	89 15 80 ff 01 c0    	mov    DWORD PTR ds:0xc001ff80,edx
c00005e9:	5b                   	pop    ebx
c00005ea:	5e                   	pop    esi
c00005eb:	c3                   	ret    
c00005ec:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00005f0:	8b 1d 80 ff 01 c0    	mov    ebx,DWORD PTR ds:0xc001ff80
c00005f6:	85 db                	test   ebx,ebx
c00005f8:	75 cb                	jne    c00005c5 <strtok+0x15>
c00005fa:	31 c0                	xor    eax,eax
c00005fc:	5b                   	pop    ebx
c00005fd:	5e                   	pop    esi
c00005fe:	c3                   	ret    
c00005ff:	90                   	nop

c0000600 <strcpy>:
c0000600:	53                   	push   ebx
c0000601:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000605:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000609:	89 c3                	mov    ebx,eax
c000060b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000060d:	84 d2                	test   dl,dl
c000060f:	74 19                	je     c000062a <strcpy+0x2a>
c0000611:	eb 0d                	jmp    c0000620 <strcpy+0x20>
c0000613:	90                   	nop
c0000614:	90                   	nop
c0000615:	90                   	nop
c0000616:	90                   	nop
c0000617:	90                   	nop
c0000618:	90                   	nop
c0000619:	90                   	nop
c000061a:	90                   	nop
c000061b:	90                   	nop
c000061c:	90                   	nop
c000061d:	90                   	nop
c000061e:	90                   	nop
c000061f:	90                   	nop
c0000620:	88 13                	mov    BYTE PTR [ebx],dl
c0000622:	41                   	inc    ecx
c0000623:	43                   	inc    ebx
c0000624:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000626:	84 d2                	test   dl,dl
c0000628:	75 f6                	jne    c0000620 <strcpy+0x20>
c000062a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000062d:	5b                   	pop    ebx
c000062e:	c3                   	ret    
c000062f:	90                   	nop

c0000630 <strncpy>:
c0000630:	57                   	push   edi
c0000631:	56                   	push   esi
c0000632:	53                   	push   ebx
c0000633:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000637:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000063b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000063f:	85 ff                	test   edi,edi
c0000641:	74 3e                	je     c0000681 <strncpy+0x51>
c0000643:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000645:	8d 47 ff             	lea    eax,[edi-0x1]
c0000648:	8d 4a 01             	lea    ecx,[edx+0x1]
c000064b:	88 1a                	mov    BYTE PTR [edx],bl
c000064d:	84 db                	test   bl,bl
c000064f:	74 3f                	je     c0000690 <strncpy+0x60>
c0000651:	85 c0                	test   eax,eax
c0000653:	74 2c                	je     c0000681 <strncpy+0x51>
c0000655:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000658:	8d 47 fe             	lea    eax,[edi-0x2]
c000065b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000065e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000661:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000664:	84 db                	test   bl,bl
c0000666:	75 15                	jne    c000067d <strncpy+0x4d>
c0000668:	eb 26                	jmp    c0000690 <strncpy+0x60>
c000066a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000670:	47                   	inc    edi
c0000671:	41                   	inc    ecx
c0000672:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000675:	48                   	dec    eax
c0000676:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000679:	84 db                	test   bl,bl
c000067b:	74 13                	je     c0000690 <strncpy+0x60>
c000067d:	85 c0                	test   eax,eax
c000067f:	75 ef                	jne    c0000670 <strncpy+0x40>
c0000681:	5b                   	pop    ebx
c0000682:	89 d0                	mov    eax,edx
c0000684:	5e                   	pop    esi
c0000685:	5f                   	pop    edi
c0000686:	c3                   	ret    
c0000687:	89 f6                	mov    esi,esi
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000690:	85 c0                	test   eax,eax
c0000692:	74 ed                	je     c0000681 <strncpy+0x51>
c0000694:	83 f8 04             	cmp    eax,0x4
c0000697:	73 17                	jae    c00006b0 <strncpy+0x80>
c0000699:	85 c0                	test   eax,eax
c000069b:	74 e4                	je     c0000681 <strncpy+0x51>
c000069d:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006a0:	a8 02                	test   al,0x2
c00006a2:	74 dd                	je     c0000681 <strncpy+0x51>
c00006a4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006ab:	eb d4                	jmp    c0000681 <strncpy+0x51>
c00006ad:	8d 76 00             	lea    esi,[esi+0x0]
c00006b0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006b6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006b9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006c1:	83 e7 fc             	and    edi,0xfffffffc
c00006c4:	29 f9                	sub    ecx,edi
c00006c6:	01 c1                	add    ecx,eax
c00006c8:	c1 e9 02             	shr    ecx,0x2
c00006cb:	fc                   	cld    
c00006cc:	31 c0                	xor    eax,eax
c00006ce:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006d0:	89 d0                	mov    eax,edx
c00006d2:	5b                   	pop    ebx
c00006d3:	5e                   	pop    esi
c00006d4:	5f                   	pop    edi
c00006d5:	c3                   	ret    
c00006d6:	8d 76 00             	lea    esi,[esi+0x0]
c00006d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00006e0 <strcmp>:
c00006e0:	56                   	push   esi
c00006e1:	53                   	push   ebx
c00006e2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00006e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00006ea:	8a 16                	mov    dl,BYTE PTR [esi]
c00006ec:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00006ee:	38 d1                	cmp    cl,dl
c00006f0:	75 1d                	jne    c000070f <strcmp+0x2f>
c00006f2:	84 c9                	test   cl,cl
c00006f4:	74 2a                	je     c0000720 <strcmp+0x40>
c00006f6:	b8 01 00 00 00       	mov    eax,0x1
c00006fb:	eb 08                	jmp    c0000705 <strcmp+0x25>
c00006fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000700:	40                   	inc    eax
c0000701:	84 d2                	test   dl,dl
c0000703:	74 1b                	je     c0000720 <strcmp+0x40>
c0000705:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000708:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000070b:	38 ca                	cmp    dl,cl
c000070d:	74 f1                	je     c0000700 <strcmp+0x20>
c000070f:	31 c0                	xor    eax,eax
c0000711:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000717:	88 d0                	mov    al,dl
c0000719:	5b                   	pop    ebx
c000071a:	29 c8                	sub    eax,ecx
c000071c:	5e                   	pop    esi
c000071d:	c3                   	ret    
c000071e:	66 90                	xchg   ax,ax
c0000720:	31 c0                	xor    eax,eax
c0000722:	5b                   	pop    ebx
c0000723:	5e                   	pop    esi
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000730 <strchr>:
c0000730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000734:	8a 10                	mov    dl,BYTE PTR [eax]
c0000736:	84 d2                	test   dl,dl
c0000738:	74 21                	je     c000075b <strchr+0x2b>
c000073a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000073e:	38 ca                	cmp    dl,cl
c0000740:	75 12                	jne    c0000754 <strchr+0x24>
c0000742:	eb 1a                	jmp    c000075e <strchr+0x2e>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000750:	38 ca                	cmp    dl,cl
c0000752:	74 09                	je     c000075d <strchr+0x2d>
c0000754:	40                   	inc    eax
c0000755:	8a 10                	mov    dl,BYTE PTR [eax]
c0000757:	84 d2                	test   dl,dl
c0000759:	75 f5                	jne    c0000750 <strchr+0x20>
c000075b:	31 c0                	xor    eax,eax
c000075d:	c3                   	ret    
c000075e:	c3                   	ret    
c000075f:	90                   	nop

c0000760 <strncmp>:
c0000760:	57                   	push   edi
c0000761:	56                   	push   esi
c0000762:	53                   	push   ebx
c0000763:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000767:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000076f:	85 ff                	test   edi,edi
c0000771:	74 2f                	je     c00007a2 <strncmp+0x42>
c0000773:	8a 16                	mov    dl,BYTE PTR [esi]
c0000775:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000777:	38 d1                	cmp    cl,dl
c0000779:	75 35                	jne    c00007b0 <strncmp+0x50>
c000077b:	8d 46 01             	lea    eax,[esi+0x1]
c000077e:	84 c9                	test   cl,cl
c0000780:	74 20                	je     c00007a2 <strncmp+0x42>
c0000782:	01 fe                	add    esi,edi
c0000784:	eb 17                	jmp    c000079d <strncmp+0x3d>
c0000786:	8d 76 00             	lea    esi,[esi+0x0]
c0000789:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000790:	8a 10                	mov    dl,BYTE PTR [eax]
c0000792:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000794:	38 ca                	cmp    dl,cl
c0000796:	75 18                	jne    c00007b0 <strncmp+0x50>
c0000798:	40                   	inc    eax
c0000799:	84 d2                	test   dl,dl
c000079b:	74 05                	je     c00007a2 <strncmp+0x42>
c000079d:	43                   	inc    ebx
c000079e:	39 c6                	cmp    esi,eax
c00007a0:	75 ee                	jne    c0000790 <strncmp+0x30>
c00007a2:	5b                   	pop    ebx
c00007a3:	31 c0                	xor    eax,eax
c00007a5:	5e                   	pop    esi
c00007a6:	5f                   	pop    edi
c00007a7:	c3                   	ret    
c00007a8:	90                   	nop
c00007a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007b0:	5b                   	pop    ebx
c00007b1:	31 c0                	xor    eax,eax
c00007b3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007b9:	88 d0                	mov    al,dl
c00007bb:	5e                   	pop    esi
c00007bc:	29 c8                	sub    eax,ecx
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    

c00007c0 <strcat>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	89 c3                	mov    ebx,eax
c00007cc:	eb 04                	jmp    c00007d2 <strcat+0x12>
c00007ce:	66 90                	xchg   ax,ax
c00007d0:	89 d3                	mov    ebx,edx
c00007d2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007d5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007d9:	75 f5                	jne    c00007d0 <strcat+0x10>
c00007db:	31 d2                	xor    edx,edx
c00007dd:	8d 76 00             	lea    esi,[esi+0x0]
c00007e0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00007e3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00007e6:	42                   	inc    edx
c00007e7:	84 c9                	test   cl,cl
c00007e9:	75 f5                	jne    c00007e0 <strcat+0x20>
c00007eb:	5b                   	pop    ebx
c00007ec:	5e                   	pop    esi
c00007ed:	c3                   	ret    
c00007ee:	66 90                	xchg   ax,ax

c00007f0 <strncat>:
c00007f0:	56                   	push   esi
c00007f1:	53                   	push   ebx
c00007f2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00007fe:	85 f6                	test   esi,esi
c0000800:	74 2e                	je     c0000830 <strncat+0x40>
c0000802:	89 c2                	mov    edx,eax
c0000804:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000080a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000810:	42                   	inc    edx
c0000811:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000815:	75 f9                	jne    c0000810 <strncat+0x20>
c0000817:	01 ce                	add    esi,ecx
c0000819:	eb 0a                	jmp    c0000825 <strncat+0x35>
c000081b:	90                   	nop
c000081c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000820:	39 f1                	cmp    ecx,esi
c0000822:	74 1c                	je     c0000840 <strncat+0x50>
c0000824:	42                   	inc    edx
c0000825:	41                   	inc    ecx
c0000826:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000829:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000082c:	84 db                	test   bl,bl
c000082e:	75 f0                	jne    c0000820 <strncat+0x30>
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000839:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000840:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000843:	5b                   	pop    ebx
c0000844:	5e                   	pop    esi
c0000845:	c3                   	ret    
c0000846:	8d 76 00             	lea    esi,[esi+0x0]
c0000849:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000850 <strstr>:
c0000850:	57                   	push   edi
c0000851:	56                   	push   esi
c0000852:	53                   	push   ebx
c0000853:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000857:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000085b:	57                   	push   edi
c000085c:	e8 df fc ff ff       	call   c0000540 <strlen>
c0000861:	59                   	pop    ecx
c0000862:	85 c0                	test   eax,eax
c0000864:	74 3a                	je     c00008a0 <strstr+0x50>
c0000866:	89 c6                	mov    esi,eax
c0000868:	eb 16                	jmp    c0000880 <strstr+0x30>
c000086a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000870:	56                   	push   esi
c0000871:	57                   	push   edi
c0000872:	53                   	push   ebx
c0000873:	e8 18 fb ff ff       	call   c0000390 <memcmp>
c0000878:	83 c4 0c             	add    esp,0xc
c000087b:	85 c0                	test   eax,eax
c000087d:	74 21                	je     c00008a0 <strstr+0x50>
c000087f:	43                   	inc    ebx
c0000880:	53                   	push   ebx
c0000881:	e8 ba fc ff ff       	call   c0000540 <strlen>
c0000886:	5a                   	pop    edx
c0000887:	39 f0                	cmp    eax,esi
c0000889:	73 e5                	jae    c0000870 <strstr+0x20>
c000088b:	5b                   	pop    ebx
c000088c:	31 c0                	xor    eax,eax
c000088e:	5e                   	pop    esi
c000088f:	5f                   	pop    edi
c0000890:	c3                   	ret    
c0000891:	eb 0d                	jmp    c00008a0 <strstr+0x50>
c0000893:	90                   	nop
c0000894:	90                   	nop
c0000895:	90                   	nop
c0000896:	90                   	nop
c0000897:	90                   	nop
c0000898:	90                   	nop
c0000899:	90                   	nop
c000089a:	90                   	nop
c000089b:	90                   	nop
c000089c:	90                   	nop
c000089d:	90                   	nop
c000089e:	90                   	nop
c000089f:	90                   	nop
c00008a0:	89 d8                	mov    eax,ebx
c00008a2:	5b                   	pop    ebx
c00008a3:	5e                   	pop    esi
c00008a4:	5f                   	pop    edi
c00008a5:	c3                   	ret    
c00008a6:	8d 76 00             	lea    esi,[esi+0x0]
c00008a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008b0 <toupper>:
c00008b0:	31 d2                	xor    edx,edx
c00008b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008b6:	88 c2                	mov    dl,al
c00008b8:	f6 82 00 cf 01 c0 02 	test   BYTE PTR [edx-0x3ffe3100],0x2
c00008bf:	74 03                	je     c00008c4 <toupper+0x14>
c00008c1:	83 e8 20             	sub    eax,0x20
c00008c4:	c3                   	ret    
c00008c5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <tolower>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 00 cf 01 c0 01 	test   BYTE PTR [edx-0x3ffe3100],0x1
c00008df:	74 03                	je     c00008e4 <tolower+0x14>
c00008e1:	83 c0 20             	add    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <simple_strtoul>:
c00008f0:	55                   	push   ebp
c00008f1:	57                   	push   edi
c00008f2:	56                   	push   esi
c00008f3:	53                   	push   ebx
c00008f4:	83 ec 08             	sub    esp,0x8
c00008f7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008fb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008ff:	90                   	nop
c0000900:	31 d2                	xor    edx,edx
c0000902:	8a 01                	mov    al,BYTE PTR [ecx]
c0000904:	88 c2                	mov    dl,al
c0000906:	f6 82 00 cf 01 c0 08 	test   BYTE PTR [edx-0x3ffe3100],0x8
c000090d:	75 04                	jne    c0000913 <simple_strtoul+0x23>
c000090f:	3c 09                	cmp    al,0x9
c0000911:	75 0d                	jne    c0000920 <simple_strtoul+0x30>
c0000913:	41                   	inc    ecx
c0000914:	eb ea                	jmp    c0000900 <simple_strtoul+0x10>
c0000916:	8d 76 00             	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	3c 2d                	cmp    al,0x2d
c0000922:	0f 84 48 01 00 00    	je     c0000a70 <simple_strtoul+0x180>
c0000928:	3c 2b                	cmp    al,0x2b
c000092a:	0f 84 e0 00 00 00    	je     c0000a10 <simple_strtoul+0x120>
c0000930:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000938:	85 f6                	test   esi,esi
c000093a:	0f 85 e1 00 00 00    	jne    c0000a21 <simple_strtoul+0x131>
c0000940:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000943:	80 fa 30             	cmp    dl,0x30
c0000946:	0f 84 75 01 00 00    	je     c0000ac1 <simple_strtoul+0x1d1>
c000094c:	be 0a 00 00 00       	mov    esi,0xa
c0000951:	84 d2                	test   dl,dl
c0000953:	0f 84 9f 01 00 00    	je     c0000af8 <simple_strtoul+0x208>
c0000959:	31 ed                	xor    ebp,ebp
c000095b:	31 ff                	xor    edi,edi
c000095d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000964:	eb 35                	jmp    c000099b <simple_strtoul+0xab>
c0000966:	8d 76 00             	lea    esi,[esi+0x0]
c0000969:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000970:	83 eb 30             	sub    ebx,0x30
c0000973:	39 f3                	cmp    ebx,esi
c0000975:	73 59                	jae    c00009d0 <simple_strtoul+0xe0>
c0000977:	31 d2                	xor    edx,edx
c0000979:	89 d8                	mov    eax,ebx
c000097b:	f7 d0                	not    eax
c000097d:	f7 f6                	div    esi
c000097f:	39 f8                	cmp    eax,edi
c0000981:	0f 82 c9 00 00 00    	jb     c0000a50 <simple_strtoul+0x160>
c0000987:	0f af fe             	imul   edi,esi
c000098a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000991:	01 df                	add    edi,ebx
c0000993:	41                   	inc    ecx
c0000994:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000997:	84 d2                	test   dl,dl
c0000999:	74 35                	je     c00009d0 <simple_strtoul+0xe0>
c000099b:	31 db                	xor    ebx,ebx
c000099d:	88 d3                	mov    bl,dl
c000099f:	f6 83 00 cf 01 c0 04 	test   BYTE PTR [ebx-0x3ffe3100],0x4
c00009a6:	75 c8                	jne    c0000970 <simple_strtoul+0x80>
c00009a8:	52                   	push   edx
c00009a9:	e8 02 ff ff ff       	call   c00008b0 <toupper>
c00009ae:	31 d2                	xor    edx,edx
c00009b0:	5b                   	pop    ebx
c00009b1:	88 c2                	mov    dl,al
c00009b3:	f6 82 00 cf 01 c0 01 	test   BYTE PTR [edx-0x3ffe3100],0x1
c00009ba:	74 14                	je     c00009d0 <simple_strtoul+0xe0>
c00009bc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009bf:	39 f3                	cmp    ebx,esi
c00009c1:	72 b4                	jb     c0000977 <simple_strtoul+0x87>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009d4:	85 c0                	test   eax,eax
c00009d6:	74 18                	je     c00009f0 <simple_strtoul+0x100>
c00009d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009db:	09 f8                	or     eax,edi
c00009dd:	0f 85 7d 00 00 00    	jne    c0000a60 <simple_strtoul+0x170>
c00009e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009e7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00009eb:	31 ff                	xor    edi,edi
c00009ed:	89 30                	mov    DWORD PTR [eax],esi
c00009ef:	90                   	nop
c00009f0:	4d                   	dec    ebp
c00009f1:	75 05                	jne    c00009f8 <simple_strtoul+0x108>
c00009f3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00009f8:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009fd:	75 02                	jne    c0000a01 <simple_strtoul+0x111>
c00009ff:	f7 df                	neg    edi
c0000a01:	83 c4 08             	add    esp,0x8
c0000a04:	89 f8                	mov    eax,edi
c0000a06:	5b                   	pop    ebx
c0000a07:	5e                   	pop    esi
c0000a08:	5f                   	pop    edi
c0000a09:	5d                   	pop    ebp
c0000a0a:	c3                   	ret    
c0000a0b:	90                   	nop
c0000a0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a10:	41                   	inc    ecx
c0000a11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a19:	85 f6                	test   esi,esi
c0000a1b:	0f 84 1f ff ff ff    	je     c0000940 <simple_strtoul+0x50>
c0000a21:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a24:	83 f8 22             	cmp    eax,0x22
c0000a27:	77 7b                	ja     c0000aa4 <simple_strtoul+0x1b4>
c0000a29:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a2c:	83 fe 08             	cmp    esi,0x8
c0000a2f:	0f 84 b3 00 00 00    	je     c0000ae8 <simple_strtoul+0x1f8>
c0000a35:	83 fe 10             	cmp    esi,0x10
c0000a38:	0f 85 13 ff ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000a3e:	80 fa 30             	cmp    dl,0x30
c0000a41:	74 3b                	je     c0000a7e <simple_strtoul+0x18e>
c0000a43:	be 10 00 00 00       	mov    esi,0x10
c0000a48:	e9 04 ff ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a50:	bd 01 00 00 00       	mov    ebp,0x1
c0000a55:	31 ff                	xor    edi,edi
c0000a57:	e9 37 ff ff ff       	jmp    c0000993 <simple_strtoul+0xa3>
c0000a5c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	89 08                	mov    DWORD PTR [eax],ecx
c0000a66:	eb 88                	jmp    c00009f0 <simple_strtoul+0x100>
c0000a68:	90                   	nop
c0000a69:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a70:	41                   	inc    ecx
c0000a71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a79:	e9 ba fe ff ff       	jmp    c0000938 <simple_strtoul+0x48>
c0000a7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000a82:	88 04 24             	mov    BYTE PTR [esp],al
c0000a85:	50                   	push   eax
c0000a86:	e8 45 fe ff ff       	call   c00008d0 <tolower>
c0000a8b:	5e                   	pop    esi
c0000a8c:	83 f8 78             	cmp    eax,0x78
c0000a8f:	0f 84 88 00 00 00    	je     c0000b1d <simple_strtoul+0x22d>
c0000a95:	41                   	inc    ecx
c0000a96:	be 10 00 00 00       	mov    esi,0x10
c0000a9b:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000a9f:	e9 ad fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000aa4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000aa8:	85 ff                	test   edi,edi
c0000aaa:	74 5e                	je     c0000b0a <simple_strtoul+0x21a>
c0000aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab0:	85 c9                	test   ecx,ecx
c0000ab2:	75 50                	jne    c0000b04 <simple_strtoul+0x214>
c0000ab4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aba:	31 ff                	xor    edi,edi
c0000abc:	e9 37 ff ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000ac1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ac5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ac8:	50                   	push   eax
c0000ac9:	e8 02 fe ff ff       	call   c00008d0 <tolower>
c0000ace:	5d                   	pop    ebp
c0000acf:	83 f8 78             	cmp    eax,0x78
c0000ad2:	74 3d                	je     c0000b11 <simple_strtoul+0x221>
c0000ad4:	41                   	inc    ecx
c0000ad5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000ad9:	80 fa 30             	cmp    dl,0x30
c0000adc:	74 13                	je     c0000af1 <simple_strtoul+0x201>
c0000ade:	be 08 00 00 00       	mov    esi,0x8
c0000ae3:	e9 69 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000ae8:	80 fa 30             	cmp    dl,0x30
c0000aeb:	0f 85 60 fe ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000af1:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000af5:	41                   	inc    ecx
c0000af6:	eb e6                	jmp    c0000ade <simple_strtoul+0x1ee>
c0000af8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000afc:	85 d2                	test   edx,edx
c0000afe:	74 0a                	je     c0000b0a <simple_strtoul+0x21a>
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b08:	89 30                	mov    DWORD PTR [eax],esi
c0000b0a:	31 ff                	xor    edi,edi
c0000b0c:	e9 e7 fe ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000b11:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b15:	83 c1 02             	add    ecx,0x2
c0000b18:	e9 21 ff ff ff       	jmp    c0000a3e <simple_strtoul+0x14e>
c0000b1d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b21:	be 10 00 00 00       	mov    esi,0x10
c0000b26:	83 c1 02             	add    ecx,0x2
c0000b29:	e9 23 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>

c0000b2e <largebin_index>:
c0000b2e:	89 c2                	mov    edx,eax
c0000b30:	c1 ea 08             	shr    edx,0x8
c0000b33:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b39:	77 10                	ja     c0000b4b <largebin_index+0x1d>
c0000b3b:	0f bd d2             	bsr    edx,edx
c0000b3e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b41:	d3 e8                	shr    eax,cl
c0000b43:	83 e0 03             	and    eax,0x3
c0000b46:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b4a:	c3                   	ret    
c0000b4b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b50:	c3                   	ret    

c0000b51 <malloc_init_state>:
c0000b51:	53                   	push   ebx
c0000b52:	8d 50 34             	lea    edx,[eax+0x34]
c0000b55:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b5b:	89 d1                	mov    ecx,edx
c0000b5d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b60:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b63:	83 c2 08             	add    edx,0x8
c0000b66:	39 da                	cmp    edx,ebx
c0000b68:	75 f3                	jne    c0000b5d <malloc_init_state+0xc>
c0000b6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b6c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b76:	83 e2 03             	and    edx,0x3
c0000b79:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000b83:	83 ca 48             	or     edx,0x48
c0000b86:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000b90:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000b9a:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ba1:	89 10                	mov    DWORD PTR [eax],edx
c0000ba3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ba6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bb0:	5b                   	pop    ebx
c0000bb1:	c3                   	ret    

c0000bb2 <malloc_consolidate>:
c0000bb2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bb4:	85 d2                	test   edx,edx
c0000bb6:	0f 84 d8 00 00 00    	je     c0000c94 <malloc_consolidate+0xe2>
c0000bbc:	55                   	push   ebp
c0000bbd:	83 e2 fd             	and    edx,0xfffffffd
c0000bc0:	57                   	push   edi
c0000bc1:	89 c5                	mov    ebp,eax
c0000bc3:	56                   	push   esi
c0000bc4:	8d 78 34             	lea    edi,[eax+0x34]
c0000bc7:	53                   	push   ebx
c0000bc8:	83 ec 10             	sub    esp,0x10
c0000bcb:	89 10                	mov    DWORD PTR [eax],edx
c0000bcd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bd1:	c1 ea 03             	shr    edx,0x3
c0000bd4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bd8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bdc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bdf:	85 d2                	test   edx,edx
c0000be1:	0f 84 98 00 00 00    	je     c0000c7f <malloc_consolidate+0xcd>
c0000be7:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000bee:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000bf1:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000bf4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000bf8:	89 f9                	mov    ecx,edi
c0000bfa:	83 e1 fe             	and    ecx,0xfffffffe
c0000bfd:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c00:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c03:	83 e3 fc             	and    ebx,0xfffffffc
c0000c06:	83 e7 01             	and    edi,0x1
c0000c09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c0c:	75 14                	jne    c0000c22 <malloc_consolidate+0x70>
c0000c0e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c10:	29 fa                	sub    edx,edi
c0000c12:	01 f9                	add    ecx,edi
c0000c14:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c17:	89 fb                	mov    ebx,edi
c0000c19:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c1c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c1f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c22:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c25:	74 40                	je     c0000c67 <malloc_consolidate+0xb5>
c0000c27:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c2a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c2d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c31:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c34:	83 e7 01             	and    edi,0x1
c0000c37:	75 0e                	jne    c0000c47 <malloc_consolidate+0x95>
c0000c39:	01 d9                	add    ecx,ebx
c0000c3b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c3e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c41:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c44:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c47:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c4a:	89 ce                	mov    esi,ecx
c0000c4c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c4f:	83 ce 01             	or     esi,0x1
c0000c52:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c55:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c58:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c5b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c5f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c62:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c65:	eb 0c                	jmp    c0000c73 <malloc_consolidate+0xc1>
c0000c67:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c6a:	83 c9 01             	or     ecx,0x1
c0000c6d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c70:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c77:	85 d2                	test   edx,edx
c0000c79:	0f 85 6f ff ff ff    	jne    c0000bee <malloc_consolidate+0x3c>
c0000c7f:	83 c5 04             	add    ebp,0x4
c0000c82:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000c86:	0f 85 50 ff ff ff    	jne    c0000bdc <malloc_consolidate+0x2a>
c0000c8c:	83 c4 10             	add    esp,0x10
c0000c8f:	5b                   	pop    ebx
c0000c90:	5e                   	pop    esi
c0000c91:	5f                   	pop    edi
c0000c92:	5d                   	pop    ebp
c0000c93:	c3                   	ret    
c0000c94:	e9 b8 fe ff ff       	jmp    c0000b51 <malloc_init_state>

c0000c99 <dlfree>:
c0000c99:	57                   	push   edi
c0000c9a:	56                   	push   esi
c0000c9b:	53                   	push   ebx
c0000c9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ca0:	85 db                	test   ebx,ebx
c0000ca2:	0f 84 e2 00 00 00    	je     c0000d8a <dlfree+0xf1>
c0000ca8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cab:	8b 0d a0 ff 01 c0    	mov    ecx,DWORD PTR ds:0xc001ffa0
c0000cb1:	89 f0                	mov    eax,esi
c0000cb3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cb6:	83 e0 fc             	and    eax,0xfffffffc
c0000cb9:	39 c1                	cmp    ecx,eax
c0000cbb:	72 24                	jb     c0000ce1 <dlfree+0x48>
c0000cbd:	83 c9 03             	or     ecx,0x3
c0000cc0:	c1 e8 03             	shr    eax,0x3
c0000cc3:	89 0d a0 ff 01 c0    	mov    DWORD PTR ds:0xc001ffa0,ecx
c0000cc9:	83 e8 02             	sub    eax,0x2
c0000ccc:	8b 0c 85 a4 ff 01 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffe005c]
c0000cd3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cd5:	89 14 85 a4 ff 01 c0 	mov    DWORD PTR [eax*4-0x3ffe005c],edx
c0000cdc:	e9 a9 00 00 00       	jmp    c0000d8a <dlfree+0xf1>
c0000ce1:	83 e6 02             	and    esi,0x2
c0000ce4:	0f 85 a0 00 00 00    	jne    c0000d8a <dlfree+0xf1>
c0000cea:	83 c9 01             	or     ecx,0x1
c0000ced:	8d 34 02             	lea    esi,[edx+eax*1]
c0000cf0:	89 0d a0 ff 01 c0    	mov    DWORD PTR ds:0xc001ffa0,ecx
c0000cf6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000cf9:	83 e1 fc             	and    ecx,0xfffffffc
c0000cfc:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d00:	75 13                	jne    c0000d15 <dlfree+0x7c>
c0000d02:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d05:	29 da                	sub    edx,ebx
c0000d07:	01 d8                	add    eax,ebx
c0000d09:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d0c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d0f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d12:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d15:	39 35 cc ff 01 c0    	cmp    DWORD PTR ds:0xc001ffcc,esi
c0000d1b:	74 40                	je     c0000d5d <dlfree+0xc4>
c0000d1d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d21:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d24:	80 e3 01             	and    bl,0x1
c0000d27:	75 0e                	jne    c0000d37 <dlfree+0x9e>
c0000d29:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d2c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d2f:	01 c8                	add    eax,ecx
c0000d31:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d34:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d37:	8b 0d dc ff 01 c0    	mov    ecx,DWORD PTR ds:0xc001ffdc
c0000d3d:	c7 42 0c d4 ff 01 c0 	mov    DWORD PTR [edx+0xc],0xc001ffd4
c0000d44:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d47:	89 15 dc ff 01 c0    	mov    DWORD PTR ds:0xc001ffdc,edx
c0000d4d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d50:	89 c1                	mov    ecx,eax
c0000d52:	83 c9 01             	or     ecx,0x1
c0000d55:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d58:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d5b:	eb 10                	jmp    c0000d6d <dlfree+0xd4>
c0000d5d:	01 c8                	add    eax,ecx
c0000d5f:	89 c1                	mov    ecx,eax
c0000d61:	83 c9 01             	or     ecx,0x1
c0000d64:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d67:	89 15 cc ff 01 c0    	mov    DWORD PTR ds:0xc001ffcc,edx
c0000d6d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d72:	76 16                	jbe    c0000d8a <dlfree+0xf1>
c0000d74:	f6 05 a0 ff 01 c0 02 	test   BYTE PTR ds:0xc001ffa0,0x2
c0000d7b:	74 0d                	je     c0000d8a <dlfree+0xf1>
c0000d7d:	5b                   	pop    ebx
c0000d7e:	b8 a0 ff 01 c0       	mov    eax,0xc001ffa0
c0000d83:	5e                   	pop    esi
c0000d84:	5f                   	pop    edi
c0000d85:	e9 28 fe ff ff       	jmp    c0000bb2 <malloc_consolidate>
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	c3                   	ret    

c0000d8e <sYSMALLOc>:
c0000d8e:	55                   	push   ebp
c0000d8f:	57                   	push   edi
c0000d90:	56                   	push   esi
c0000d91:	53                   	push   ebx
c0000d92:	89 d3                	mov    ebx,edx
c0000d94:	83 ec 2c             	sub    esp,0x2c
c0000d97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000d9b:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000da1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000da4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dab:	74 1f                	je     c0000dcc <sYSMALLOc+0x3e>
c0000dad:	89 d8                	mov    eax,ebx
c0000daf:	e8 fe fd ff ff       	call   c0000bb2 <malloc_consolidate>
c0000db4:	83 ec 0c             	sub    esp,0xc
c0000db7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dbb:	83 e8 07             	sub    eax,0x7
c0000dbe:	50                   	push   eax
c0000dbf:	e8 30 02 00 00       	call   c0000ff4 <dlmalloc>
c0000dc4:	83 c4 10             	add    esp,0x10
c0000dc7:	e9 20 02 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000dcc:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dcf:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000dd5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000dd8:	83 e0 fc             	and    eax,0xfffffffc
c0000ddb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ddf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000de3:	83 c0 10             	add    eax,0x10
c0000de6:	01 c1                	add    ecx,eax
c0000de8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000dec:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000df3:	74 04                	je     c0000df9 <sYSMALLOc+0x6b>
c0000df5:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000df9:	f7 da                	neg    edx
c0000dfb:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000dff:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e03:	21 d1                	and    ecx,edx
c0000e05:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e09:	7f 07                	jg     c0000e12 <sYSMALLOc+0x84>
c0000e0b:	31 c0                	xor    eax,eax
c0000e0d:	e9 da 01 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000e12:	83 ec 0c             	sub    esp,0xc
c0000e15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e19:	e8 72 68 00 00       	call   c0007690 <sbrk>
c0000e1e:	83 c4 10             	add    esp,0x10
c0000e21:	89 c6                	mov    esi,eax
c0000e23:	83 f8 ff             	cmp    eax,0xffffffff
c0000e26:	74 e3                	je     c0000e0b <sYSMALLOc+0x7d>
c0000e28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e2c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e30:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e33:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e39:	39 f1                	cmp    ecx,esi
c0000e3b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e41:	75 13                	jne    c0000e56 <sYSMALLOc+0xc8>
c0000e43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e47:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e4b:	83 c8 01             	or     eax,0x1
c0000e4e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e51:	e9 3e 01 00 00       	jmp    c0000f94 <sYSMALLOc+0x206>
c0000e56:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e5c:	88 d0                	mov    al,dl
c0000e5e:	83 e0 01             	and    eax,0x1
c0000e61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e66:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e6a:	0f 95 c0             	setne  al
c0000e6d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e71:	39 f1                	cmp    ecx,esi
c0000e73:	76 12                	jbe    c0000e87 <sYSMALLOc+0xf9>
c0000e75:	84 c0                	test   al,al
c0000e77:	74 0e                	je     c0000e87 <sYSMALLOc+0xf9>
c0000e79:	83 e2 fe             	and    edx,0xfffffffe
c0000e7c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000e82:	e9 83 00 00 00       	jmp    c0000f0a <sYSMALLOc+0x17c>
c0000e87:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000e8c:	74 7c                	je     c0000f0a <sYSMALLOc+0x17c>
c0000e8e:	84 c0                	test   al,al
c0000e90:	74 0c                	je     c0000e9e <sYSMALLOc+0x110>
c0000e92:	89 f0                	mov    eax,esi
c0000e94:	29 c8                	sub    eax,ecx
c0000e96:	01 e8                	add    eax,ebp
c0000e98:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000e9e:	89 f2                	mov    edx,esi
c0000ea0:	83 e2 07             	and    edx,0x7
c0000ea3:	74 0c                	je     c0000eb1 <sYSMALLOc+0x123>
c0000ea5:	b8 08 00 00 00       	mov    eax,0x8
c0000eaa:	29 d0                	sub    eax,edx
c0000eac:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000eaf:	eb 04                	jmp    c0000eb5 <sYSMALLOc+0x127>
c0000eb1:	89 f5                	mov    ebp,esi
c0000eb3:	31 c0                	xor    eax,eax
c0000eb5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000eb9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ebd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ec1:	01 c1                	add    ecx,eax
c0000ec3:	83 ec 0c             	sub    esp,0xc
c0000ec6:	01 f1                	add    ecx,esi
c0000ec8:	01 ca                	add    edx,ecx
c0000eca:	29 c8                	sub    eax,ecx
c0000ecc:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	52                   	push   edx
c0000ed3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ed7:	e8 b4 67 00 00       	call   c0007690 <sbrk>
c0000edc:	83 c4 10             	add    esp,0x10
c0000edf:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee6:	75 0f                	jne    c0000ef7 <sYSMALLOc+0x169>
c0000ee8:	83 ec 0c             	sub    esp,0xc
c0000eeb:	6a 00                	push   0x0
c0000eed:	e8 9e 67 00 00       	call   c0007690 <sbrk>
c0000ef2:	83 c4 10             	add    esp,0x10
c0000ef5:	eb 30                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000ef7:	39 c6                	cmp    esi,eax
c0000ef9:	76 33                	jbe    c0000f2e <sYSMALLOc+0x1a0>
c0000efb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eff:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f06:	01 f0                	add    eax,esi
c0000f08:	eb 1d                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000f0a:	83 ec 0c             	sub    esp,0xc
c0000f0d:	89 f5                	mov    ebp,esi
c0000f0f:	6a 00                	push   0x0
c0000f11:	e8 7a 67 00 00       	call   c0007690 <sbrk>
c0000f16:	89 c2                	mov    edx,eax
c0000f18:	29 f2                	sub    edx,esi
c0000f1a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f1e:	83 c4 10             	add    esp,0x10
c0000f21:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f27:	31 d2                	xor    edx,edx
c0000f29:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2c:	74 66                	je     c0000f94 <sYSMALLOc+0x206>
c0000f2e:	29 e8                	sub    eax,ebp
c0000f30:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f33:	01 d0                	add    eax,edx
c0000f35:	83 c8 01             	or     eax,0x1
c0000f38:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f3b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f41:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f46:	74 4c                	je     c0000f94 <sYSMALLOc+0x206>
c0000f48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4c:	83 e8 0c             	sub    eax,0xc
c0000f4f:	83 e0 f8             	and    eax,0xfffffff8
c0000f52:	89 c2                	mov    edx,eax
c0000f54:	83 ca 01             	or     edx,0x1
c0000f57:	83 f8 0f             	cmp    eax,0xf
c0000f5a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f5d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f65:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f6d:	76 25                	jbe    c0000f94 <sYSMALLOc+0x206>
c0000f6f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f75:	83 ec 0c             	sub    esp,0xc
c0000f78:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000f82:	83 c7 08             	add    edi,0x8
c0000f85:	57                   	push   edi
c0000f86:	e8 0e fd ff ff       	call   c0000c99 <dlfree>
c0000f8b:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000f91:	83 c4 10             	add    esp,0x10
c0000f94:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000f9a:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fa0:	73 06                	jae    c0000fa8 <sYSMALLOc+0x21a>
c0000fa2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fa8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fae:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fb4:	73 06                	jae    c0000fbc <sYSMALLOc+0x22e>
c0000fb6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fbc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fbf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fc2:	83 e2 fc             	and    edx,0xfffffffc
c0000fc5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fc9:	0f 82 3c fe ff ff    	jb     c0000e0b <sYSMALLOc+0x7d>
c0000fcf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000fd3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000fd6:	29 fa                	sub    edx,edi
c0000fd8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000fdb:	83 ca 01             	or     edx,0x1
c0000fde:	89 fb                	mov    ebx,edi
c0000fe0:	83 c0 08             	add    eax,0x8
c0000fe3:	83 cb 01             	or     ebx,0x1
c0000fe6:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000fe9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000fec:	83 c4 2c             	add    esp,0x2c
c0000fef:	5b                   	pop    ebx
c0000ff0:	5e                   	pop    esi
c0000ff1:	5f                   	pop    edi
c0000ff2:	5d                   	pop    ebp
c0000ff3:	c3                   	ret    

c0000ff4 <dlmalloc>:
c0000ff4:	55                   	push   ebp
c0000ff5:	57                   	push   edi
c0000ff6:	56                   	push   esi
c0000ff7:	53                   	push   ebx
c0000ff8:	83 ec 1c             	sub    esp,0x1c
c0000ffb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000fff:	83 f8 df             	cmp    eax,0xffffffdf
c0001002:	0f 87 70 03 00 00    	ja     c0001378 <dlmalloc+0x384>
c0001008:	83 c0 0b             	add    eax,0xb
c000100b:	be 10 00 00 00       	mov    esi,0x10
c0001010:	83 f8 0f             	cmp    eax,0xf
c0001013:	76 05                	jbe    c000101a <dlmalloc+0x26>
c0001015:	83 e0 f8             	and    eax,0xfffffff8
c0001018:	89 c6                	mov    esi,eax
c000101a:	8b 3d a0 ff 01 c0    	mov    edi,DWORD PTR ds:0xc001ffa0
c0001020:	f7 c7 01 00 00 00    	test   edi,0x1
c0001026:	75 17                	jne    c000103f <dlmalloc+0x4b>
c0001028:	85 ff                	test   edi,edi
c000102a:	0f 85 05 03 00 00    	jne    c0001335 <dlmalloc+0x341>
c0001030:	b8 a0 ff 01 c0       	mov    eax,0xc001ffa0
c0001035:	e8 78 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c000103a:	e9 f6 02 00 00       	jmp    c0001335 <dlmalloc+0x341>
c000103f:	39 f7                	cmp    edi,esi
c0001041:	72 1f                	jb     c0001062 <dlmalloc+0x6e>
c0001043:	89 f2                	mov    edx,esi
c0001045:	c1 ea 03             	shr    edx,0x3
c0001048:	83 ea 02             	sub    edx,0x2
c000104b:	8b 04 95 a4 ff 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe005c]
c0001052:	85 c0                	test   eax,eax
c0001054:	74 0c                	je     c0001062 <dlmalloc+0x6e>
c0001056:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001059:	89 0c 95 a4 ff 01 c0 	mov    DWORD PTR [edx*4-0x3ffe005c],ecx
c0001060:	eb 30                	jmp    c0001092 <dlmalloc+0x9e>
c0001062:	89 f0                	mov    eax,esi
c0001064:	81 fe ff 00 00 00    	cmp    esi,0xff
c000106a:	77 2e                	ja     c000109a <dlmalloc+0xa6>
c000106c:	c1 e8 03             	shr    eax,0x3
c000106f:	8d 14 c5 d4 ff 01 c0 	lea    edx,[eax*8-0x3ffe002c]
c0001076:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000107a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000107d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001080:	39 c3                	cmp    ebx,eax
c0001082:	74 2e                	je     c00010b2 <dlmalloc+0xbe>
c0001084:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001087:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000108c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000108f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001092:	83 c0 08             	add    eax,0x8
c0001095:	e9 e0 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c000109a:	e8 8f fa ff ff       	call   c0000b2e <largebin_index>
c000109f:	83 e7 02             	and    edi,0x2
c00010a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a6:	74 0a                	je     c00010b2 <dlmalloc+0xbe>
c00010a8:	b8 a0 ff 01 c0       	mov    eax,0xc001ffa0
c00010ad:	e8 00 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c00010b2:	8d 46 10             	lea    eax,[esi+0x10]
c00010b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010b9:	8b 1d e0 ff 01 c0    	mov    ebx,DWORD PTR ds:0xc001ffe0
c00010bf:	81 fb d4 ff 01 c0    	cmp    ebx,0xc001ffd4
c00010c5:	0f 84 13 01 00 00    	je     c00011de <dlmalloc+0x1ea>
c00010cb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ce:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010d1:	83 e7 fc             	and    edi,0xfffffffc
c00010d4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010da:	77 4c                	ja     c0001128 <dlmalloc+0x134>
c00010dc:	3d d4 ff 01 c0       	cmp    eax,0xc001ffd4
c00010e1:	75 45                	jne    c0001128 <dlmalloc+0x134>
c00010e3:	39 1d d0 ff 01 c0    	cmp    DWORD PTR ds:0xc001ffd0,ebx
c00010e9:	75 3d                	jne    c0001128 <dlmalloc+0x134>
c00010eb:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00010ef:	73 37                	jae    c0001128 <dlmalloc+0x134>
c00010f1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00010f4:	89 fa                	mov    edx,edi
c00010f6:	a3 dc ff 01 c0       	mov    ds:0xc001ffdc,eax
c00010fb:	a3 e0 ff 01 c0       	mov    ds:0xc001ffe0,eax
c0001100:	a3 d0 ff 01 c0       	mov    ds:0xc001ffd0,eax
c0001105:	29 f2                	sub    edx,esi
c0001107:	c7 40 08 d4 ff 01 c0 	mov    DWORD PTR [eax+0x8],0xc001ffd4
c000110e:	c7 40 0c d4 ff 01 c0 	mov    DWORD PTR [eax+0xc],0xc001ffd4
c0001115:	83 ce 01             	or     esi,0x1
c0001118:	89 d1                	mov    ecx,edx
c000111a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000111d:	83 c9 01             	or     ecx,0x1
c0001120:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001123:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001126:	eb 15                	jmp    c000113d <dlmalloc+0x149>
c0001128:	a3 e0 ff 01 c0       	mov    ds:0xc001ffe0,eax
c000112d:	39 fe                	cmp    esi,edi
c000112f:	c7 40 08 d4 ff 01 c0 	mov    DWORD PTR [eax+0x8],0xc001ffd4
c0001136:	75 0d                	jne    c0001145 <dlmalloc+0x151>
c0001138:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000113d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001140:	e9 35 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001145:	89 f8                	mov    eax,edi
c0001147:	81 ff ff 00 00 00    	cmp    edi,0xff
c000114d:	77 19                	ja     c0001168 <dlmalloc+0x174>
c000114f:	c1 e8 03             	shr    eax,0x3
c0001152:	8d 14 00             	lea    edx,[eax+eax*1]
c0001155:	83 c2 0d             	add    edx,0xd
c0001158:	8d 2c 95 98 ff 01 c0 	lea    ebp,[edx*4-0x3ffe0068]
c000115f:	8b 14 95 a0 ff 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0060]
c0001166:	eb 46                	jmp    c00011ae <dlmalloc+0x1ba>
c0001168:	e8 c1 f9 ff ff       	call   c0000b2e <largebin_index>
c000116d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001170:	83 c2 0d             	add    edx,0xd
c0001173:	8d 0c 95 a0 ff 01 c0 	lea    ecx,[edx*4-0x3ffe0060]
c000117a:	8b 14 95 a0 ff 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0060]
c0001181:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001184:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001188:	89 d5                	mov    ebp,edx
c000118a:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000118e:	74 1e                	je     c00011ae <dlmalloc+0x1ba>
c0001190:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001193:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001196:	77 12                	ja     c00011aa <dlmalloc+0x1b6>
c0001198:	83 cf 01             	or     edi,0x1
c000119b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000119e:	76 05                	jbe    c00011a5 <dlmalloc+0x1b1>
c00011a0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011a3:	eb f6                	jmp    c000119b <dlmalloc+0x1a7>
c00011a5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011a8:	eb 04                	jmp    c00011ae <dlmalloc+0x1ba>
c00011aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ae:	89 c7                	mov    edi,eax
c00011b0:	88 c1                	mov    cl,al
c00011b2:	c1 ff 05             	sar    edi,0x5
c00011b5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011b9:	bf 01 00 00 00       	mov    edi,0x1
c00011be:	d3 e7                	shl    edi,cl
c00011c0:	89 f8                	mov    eax,edi
c00011c2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011c6:	09 04 bd d4 02 02 c0 	or     DWORD PTR [edi*4-0x3ffdfd2c],eax
c00011cd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011d0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011d3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011d6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011d9:	e9 db fe ff ff       	jmp    c00010b9 <dlmalloc+0xc5>
c00011de:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011e4:	76 78                	jbe    c000125e <dlmalloc+0x26a>
c00011e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00011ea:	8d 04 c5 d4 ff 01 c0 	lea    eax,[eax*8-0x3ffe002c]
c00011f1:	8d 48 f8             	lea    ecx,[eax-0x8]
c00011f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00011f7:	39 ca                	cmp    edx,ecx
c00011f9:	74 63                	je     c000125e <dlmalloc+0x26a>
c00011fb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00011fe:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001201:	83 e3 fc             	and    ebx,0xfffffffc
c0001204:	39 de                	cmp    esi,ebx
c0001206:	77 52                	ja     c000125a <dlmalloc+0x266>
c0001208:	89 df                	mov    edi,ebx
c000120a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000120d:	29 f7                	sub    edi,esi
c000120f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001212:	01 d3                	add    ebx,edx
c0001214:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001217:	83 ff 0f             	cmp    edi,0xf
c000121a:	8d 42 08             	lea    eax,[edx+0x8]
c000121d:	77 09                	ja     c0001228 <dlmalloc+0x234>
c000121f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001223:	e9 52 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001228:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000122b:	83 ce 01             	or     esi,0x1
c000122e:	89 0d dc ff 01 c0    	mov    DWORD PTR ds:0xc001ffdc,ecx
c0001234:	89 0d e0 ff 01 c0    	mov    DWORD PTR ds:0xc001ffe0,ecx
c000123a:	c7 41 08 d4 ff 01 c0 	mov    DWORD PTR [ecx+0x8],0xc001ffd4
c0001241:	c7 41 0c d4 ff 01 c0 	mov    DWORD PTR [ecx+0xc],0xc001ffd4
c0001248:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000124b:	89 fa                	mov    edx,edi
c000124d:	83 ca 01             	or     edx,0x1
c0001250:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001253:	89 3b                	mov    DWORD PTR [ebx],edi
c0001255:	e9 20 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c000125a:	89 c2                	mov    edx,eax
c000125c:	eb 99                	jmp    c00011f7 <dlmalloc+0x203>
c000125e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001262:	b8 01 00 00 00       	mov    eax,0x1
c0001267:	41                   	inc    ecx
c0001268:	89 cb                	mov    ebx,ecx
c000126a:	8d 14 cd cc ff 01 c0 	lea    edx,[ecx*8-0x3ffe0034]
c0001271:	c1 eb 05             	shr    ebx,0x5
c0001274:	d3 e0                	shl    eax,cl
c0001276:	8b 3c 9d d4 02 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdfd2c]
c000127d:	39 f8                	cmp    eax,edi
c000127f:	77 04                	ja     c0001285 <dlmalloc+0x291>
c0001281:	85 c0                	test   eax,eax
c0001283:	75 26                	jne    c00012ab <dlmalloc+0x2b7>
c0001285:	43                   	inc    ebx
c0001286:	83 fb 02             	cmp    ebx,0x2
c0001289:	0f 87 a6 00 00 00    	ja     c0001335 <dlmalloc+0x341>
c000128f:	8b 3c 9d d4 02 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdfd2c]
c0001296:	85 ff                	test   edi,edi
c0001298:	74 eb                	je     c0001285 <dlmalloc+0x291>
c000129a:	89 d8                	mov    eax,ebx
c000129c:	c1 e0 06             	shl    eax,0x6
c000129f:	8d 14 85 cc ff 01 c0 	lea    edx,[eax*4-0x3ffe0034]
c00012a6:	b8 01 00 00 00       	mov    eax,0x1
c00012ab:	85 f8                	test   eax,edi
c00012ad:	75 07                	jne    c00012b6 <dlmalloc+0x2c2>
c00012af:	83 c2 08             	add    edx,0x8
c00012b2:	01 c0                	add    eax,eax
c00012b4:	eb f5                	jmp    c00012ab <dlmalloc+0x2b7>
c00012b6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012b9:	39 ca                	cmp    edx,ecx
c00012bb:	75 14                	jne    c00012d1 <dlmalloc+0x2dd>
c00012bd:	89 c1                	mov    ecx,eax
c00012bf:	83 c2 08             	add    edx,0x8
c00012c2:	f7 d1                	not    ecx
c00012c4:	01 c0                	add    eax,eax
c00012c6:	21 cf                	and    edi,ecx
c00012c8:	89 3c 9d d4 02 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdfd2c],edi
c00012cf:	eb ac                	jmp    c000127d <dlmalloc+0x289>
c00012d1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012d4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012d7:	83 e0 fc             	and    eax,0xfffffffc
c00012da:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012dd:	89 c3                	mov    ebx,eax
c00012df:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00012e2:	29 f3                	sub    ebx,esi
c00012e4:	8d 14 01             	lea    edx,[ecx+eax*1]
c00012e7:	83 fb 0f             	cmp    ebx,0xf
c00012ea:	8d 41 08             	lea    eax,[ecx+0x8]
c00012ed:	77 09                	ja     c00012f8 <dlmalloc+0x304>
c00012ef:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00012f3:	e9 82 00 00 00       	jmp    c000137a <dlmalloc+0x386>
c00012f8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00012fb:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001301:	89 3d dc ff 01 c0    	mov    DWORD PTR ds:0xc001ffdc,edi
c0001307:	89 3d e0 ff 01 c0    	mov    DWORD PTR ds:0xc001ffe0,edi
c000130d:	c7 47 08 d4 ff 01 c0 	mov    DWORD PTR [edi+0x8],0xc001ffd4
c0001314:	c7 47 0c d4 ff 01 c0 	mov    DWORD PTR [edi+0xc],0xc001ffd4
c000131b:	77 06                	ja     c0001323 <dlmalloc+0x32f>
c000131d:	89 3d d0 ff 01 c0    	mov    DWORD PTR ds:0xc001ffd0,edi
c0001323:	83 ce 01             	or     esi,0x1
c0001326:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001329:	89 d9                	mov    ecx,ebx
c000132b:	83 c9 01             	or     ecx,0x1
c000132e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001331:	89 1a                	mov    DWORD PTR [edx],ebx
c0001333:	eb 45                	jmp    c000137a <dlmalloc+0x386>
c0001335:	a1 cc ff 01 c0       	mov    eax,ds:0xc001ffcc
c000133a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000133d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001340:	83 e2 fc             	and    edx,0xfffffffc
c0001343:	39 d1                	cmp    ecx,edx
c0001345:	77 1e                	ja     c0001365 <dlmalloc+0x371>
c0001347:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000134a:	89 f3                	mov    ebx,esi
c000134c:	89 0d cc ff 01 c0    	mov    DWORD PTR ds:0xc001ffcc,ecx
c0001352:	83 cb 01             	or     ebx,0x1
c0001355:	29 f2                	sub    edx,esi
c0001357:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000135a:	83 ca 01             	or     edx,0x1
c000135d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001360:	e9 2d fd ff ff       	jmp    c0001092 <dlmalloc+0x9e>
c0001365:	83 c4 1c             	add    esp,0x1c
c0001368:	89 f0                	mov    eax,esi
c000136a:	5b                   	pop    ebx
c000136b:	ba a0 ff 01 c0       	mov    edx,0xc001ffa0
c0001370:	5e                   	pop    esi
c0001371:	5f                   	pop    edi
c0001372:	5d                   	pop    ebp
c0001373:	e9 16 fa ff ff       	jmp    c0000d8e <sYSMALLOc>
c0001378:	31 c0                	xor    eax,eax
c000137a:	83 c4 1c             	add    esp,0x1c
c000137d:	5b                   	pop    ebx
c000137e:	5e                   	pop    esi
c000137f:	5f                   	pop    edi
c0001380:	5d                   	pop    ebp
c0001381:	c3                   	ret    

c0001382 <iALLOc>:
c0001382:	55                   	push   ebp
c0001383:	89 c5                	mov    ebp,eax
c0001385:	57                   	push   edi
c0001386:	56                   	push   esi
c0001387:	53                   	push   ebx
c0001388:	83 ec 2c             	sub    esp,0x2c
c000138b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000138f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001393:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001397:	83 3d a0 ff 01 c0 00 	cmp    DWORD PTR ds:0xc001ffa0,0x0
c000139e:	75 12                	jne    c00013b2 <iALLOc+0x30>
c00013a0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013a4:	b8 a0 ff 01 c0       	mov    eax,0xc001ffa0
c00013a9:	e8 04 f8 ff ff       	call   c0000bb2 <malloc_consolidate>
c00013ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013b2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013b7:	74 12                	je     c00013cb <iALLOc+0x49>
c00013b9:	85 ed                	test   ebp,ebp
c00013bb:	0f 84 64 01 00 00    	je     c0001525 <iALLOc+0x1a3>
c00013c1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013c9:	eb 33                	jmp    c00013fe <iALLOc+0x7c>
c00013cb:	85 ed                	test   ebp,ebp
c00013cd:	75 14                	jne    c00013e3 <iALLOc+0x61>
c00013cf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013d7:	83 c4 2c             	add    esp,0x2c
c00013da:	5b                   	pop    ebx
c00013db:	5e                   	pop    esi
c00013dc:	5f                   	pop    edi
c00013dd:	5d                   	pop    ebp
c00013de:	e9 11 fc ff ff       	jmp    c0000ff4 <dlmalloc>
c00013e3:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00013ea:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00013f2:	83 f8 0f             	cmp    eax,0xf
c00013f5:	76 07                	jbe    c00013fe <iALLOc+0x7c>
c00013f7:	83 e0 f8             	and    eax,0xfffffff8
c00013fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00013fe:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001403:	75 09                	jne    c000140e <iALLOc+0x8c>
c0001405:	89 d0                	mov    eax,edx
c0001407:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000140a:	31 f6                	xor    esi,esi
c000140c:	eb 3b                	jmp    c0001449 <iALLOc+0xc7>
c000140e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001410:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001418:	83 c0 0b             	add    eax,0xb
c000141b:	83 f8 0f             	cmp    eax,0xf
c000141e:	76 07                	jbe    c0001427 <iALLOc+0xa5>
c0001420:	83 e0 f8             	and    eax,0xfffffff8
c0001423:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001427:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000142b:	0f af f5             	imul   esi,ebp
c000142e:	eb 25                	jmp    c0001455 <iALLOc+0xd3>
c0001430:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001432:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001435:	bb 10 00 00 00       	mov    ebx,0x10
c000143a:	83 f9 0f             	cmp    ecx,0xf
c000143d:	76 05                	jbe    c0001444 <iALLOc+0xc2>
c000143f:	83 e1 f8             	and    ecx,0xfffffff8
c0001442:	89 cb                	mov    ebx,ecx
c0001444:	01 de                	add    esi,ebx
c0001446:	83 c0 04             	add    eax,0x4
c0001449:	39 c7                	cmp    edi,eax
c000144b:	75 e3                	jne    c0001430 <iALLOc+0xae>
c000144d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001455:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001459:	8b 1d f4 02 02 c0    	mov    ebx,DWORD PTR ds:0xc00202f4
c000145f:	83 ec 0c             	sub    esp,0xc
c0001462:	c7 05 f4 02 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00202f4,0x0
c000146c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001470:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001474:	50                   	push   eax
c0001475:	e8 7a fb ff ff       	call   c0000ff4 <dlmalloc>
c000147a:	83 c4 10             	add    esp,0x10
c000147d:	89 1d f4 02 02 c0    	mov    DWORD PTR ds:0xc00202f4,ebx
c0001483:	85 c0                	test   eax,eax
c0001485:	0f 84 92 00 00 00    	je     c000151d <iALLOc+0x19b>
c000148b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000148e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001491:	83 e3 fc             	and    ebx,0xfffffffc
c0001494:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001498:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000149d:	74 1e                	je     c00014bd <iALLOc+0x13b>
c000149f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014a3:	89 d9                	mov    ecx,ebx
c00014a5:	52                   	push   edx
c00014a6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014aa:	83 e9 04             	sub    ecx,0x4
c00014ad:	51                   	push   ecx
c00014ae:	6a 00                	push   0x0
c00014b0:	50                   	push   eax
c00014b1:	e8 1a f0 ff ff       	call   c00004d0 <memset>
c00014b6:	83 c4 10             	add    esp,0x10
c00014b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014bd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014c2:	75 14                	jne    c00014d8 <iALLOc+0x156>
c00014c4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014c7:	29 f3                	sub    ebx,esi
c00014c9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014cc:	83 cb 01             	or     ebx,0x1
c00014cf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014d3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014d6:	89 f3                	mov    ebx,esi
c00014d8:	31 c0                	xor    eax,eax
c00014da:	4d                   	dec    ebp
c00014db:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014de:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00014e2:	39 c5                	cmp    ebp,eax
c00014e4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00014e7:	74 2c                	je     c0001515 <iALLOc+0x193>
c00014e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00014ed:	85 c9                	test   ecx,ecx
c00014ef:	75 15                	jne    c0001506 <iALLOc+0x184>
c00014f1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00014f4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00014f7:	b9 10 00 00 00       	mov    ecx,0x10
c00014fc:	83 fe 0f             	cmp    esi,0xf
c00014ff:	76 05                	jbe    c0001506 <iALLOc+0x184>
c0001501:	83 e6 f8             	and    esi,0xfffffff8
c0001504:	89 f1                	mov    ecx,esi
c0001506:	89 ce                	mov    esi,ecx
c0001508:	29 cb                	sub    ebx,ecx
c000150a:	83 ce 01             	or     esi,0x1
c000150d:	40                   	inc    eax
c000150e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001511:	01 cf                	add    edi,ecx
c0001513:	eb c6                	jmp    c00014db <iALLOc+0x159>
c0001515:	83 cb 01             	or     ebx,0x1
c0001518:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000151b:	eb 08                	jmp    c0001525 <iALLOc+0x1a3>
c000151d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001525:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001529:	83 c4 2c             	add    esp,0x2c
c000152c:	5b                   	pop    ebx
c000152d:	5e                   	pop    esi
c000152e:	5f                   	pop    edi
c000152f:	5d                   	pop    ebp
c0001530:	c3                   	ret    

c0001531 <dlrealloc>:
c0001531:	55                   	push   ebp
c0001532:	57                   	push   edi
c0001533:	56                   	push   esi
c0001534:	53                   	push   ebx
c0001535:	83 ec 1c             	sub    esp,0x1c
c0001538:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000153c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001540:	85 db                	test   ebx,ebx
c0001542:	75 10                	jne    c0001554 <dlrealloc+0x23>
c0001544:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001548:	83 c4 1c             	add    esp,0x1c
c000154b:	5b                   	pop    ebx
c000154c:	5e                   	pop    esi
c000154d:	5f                   	pop    edi
c000154e:	5d                   	pop    ebp
c000154f:	e9 a0 fa ff ff       	jmp    c0000ff4 <dlmalloc>
c0001554:	83 f8 df             	cmp    eax,0xffffffdf
c0001557:	76 07                	jbe    c0001560 <dlrealloc+0x2f>
c0001559:	31 db                	xor    ebx,ebx
c000155b:	e9 6a 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c0001560:	83 c0 0b             	add    eax,0xb
c0001563:	bd 10 00 00 00       	mov    ebp,0x10
c0001568:	83 f8 0f             	cmp    eax,0xf
c000156b:	76 05                	jbe    c0001572 <dlrealloc+0x41>
c000156d:	83 e0 f8             	and    eax,0xfffffff8
c0001570:	89 c5                	mov    ebp,eax
c0001572:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001575:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001578:	89 c6                	mov    esi,eax
c000157a:	83 e6 fc             	and    esi,0xfffffffc
c000157d:	a8 02                	test   al,0x2
c000157f:	75 d8                	jne    c0001559 <dlrealloc+0x28>
c0001581:	39 f5                	cmp    ebp,esi
c0001583:	0f 86 04 01 00 00    	jbe    c000168d <dlrealloc+0x15c>
c0001589:	8d 14 37             	lea    edx,[edi+esi*1]
c000158c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000158f:	39 15 cc ff 01 c0    	cmp    DWORD PTR ds:0xc001ffcc,edx
c0001595:	75 33                	jne    c00015ca <dlrealloc+0x99>
c0001597:	83 e1 fc             	and    ecx,0xfffffffc
c000159a:	01 f1                	add    ecx,esi
c000159c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015a0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015a3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015a7:	77 49                	ja     c00015f2 <dlrealloc+0xc1>
c00015a9:	01 ef                	add    edi,ebp
c00015ab:	83 e0 01             	and    eax,0x1
c00015ae:	09 e8                	or     eax,ebp
c00015b0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015b3:	89 3d cc ff 01 c0    	mov    DWORD PTR ds:0xc001ffcc,edi
c00015b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015bd:	29 e8                	sub    eax,ebp
c00015bf:	83 c8 01             	or     eax,0x1
c00015c2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015c5:	e9 00 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c00015ca:	89 c8                	mov    eax,ecx
c00015cc:	83 e0 fe             	and    eax,0xfffffffe
c00015cf:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015d4:	75 1c                	jne    c00015f2 <dlrealloc+0xc1>
c00015d6:	83 e1 fc             	and    ecx,0xfffffffc
c00015d9:	01 f1                	add    ecx,esi
c00015db:	39 cd                	cmp    ebp,ecx
c00015dd:	77 13                	ja     c00015f2 <dlrealloc+0xc1>
c00015df:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00015e2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00015e5:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00015e8:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00015eb:	89 ce                	mov    esi,ecx
c00015ed:	e9 9b 00 00 00       	jmp    c000168d <dlrealloc+0x15c>
c00015f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00015f6:	8d 45 f9             	lea    eax,[ebp-0x7]
c00015f9:	83 ec 0c             	sub    esp,0xc
c00015fc:	50                   	push   eax
c00015fd:	e8 f2 f9 ff ff       	call   c0000ff4 <dlmalloc>
c0001602:	83 c4 10             	add    esp,0x10
c0001605:	85 c0                	test   eax,eax
c0001607:	0f 84 4c ff ff ff    	je     c0001559 <dlrealloc+0x28>
c000160d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001610:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001614:	39 ca                	cmp    edx,ecx
c0001616:	75 0a                	jne    c0001622 <dlrealloc+0xf1>
c0001618:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000161b:	83 e0 fc             	and    eax,0xfffffffc
c000161e:	01 c6                	add    esi,eax
c0001620:	eb 6b                	jmp    c000168d <dlrealloc+0x15c>
c0001622:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001625:	83 f9 27             	cmp    ecx,0x27
c0001628:	76 08                	jbe    c0001632 <dlrealloc+0x101>
c000162a:	89 de                	mov    esi,ebx
c000162c:	89 c7                	mov    edi,eax
c000162e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001630:	eb 43                	jmp    c0001675 <dlrealloc+0x144>
c0001632:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001634:	83 f9 13             	cmp    ecx,0x13
c0001637:	89 10                	mov    DWORD PTR [eax],edx
c0001639:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000163c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000163f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001642:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001645:	76 2e                	jbe    c0001675 <dlrealloc+0x144>
c0001647:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000164a:	83 f9 1b             	cmp    ecx,0x1b
c000164d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001650:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001653:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001656:	76 1d                	jbe    c0001675 <dlrealloc+0x144>
c0001658:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000165b:	83 f9 23             	cmp    ecx,0x23
c000165e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001661:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001664:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001667:	76 0c                	jbe    c0001675 <dlrealloc+0x144>
c0001669:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000166c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000166f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001672:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001675:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001679:	83 ec 0c             	sub    esp,0xc
c000167c:	53                   	push   ebx
c000167d:	e8 17 f6 ff ff       	call   c0000c99 <dlfree>
c0001682:	83 c4 10             	add    esp,0x10
c0001685:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001689:	89 c3                	mov    ebx,eax
c000168b:	eb 3d                	jmp    c00016ca <dlrealloc+0x199>
c000168d:	89 f2                	mov    edx,esi
c000168f:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001692:	29 ea                	sub    edx,ebp
c0001694:	83 e1 01             	and    ecx,0x1
c0001697:	8d 04 37             	lea    eax,[edi+esi*1]
c000169a:	83 fa 0f             	cmp    edx,0xf
c000169d:	77 0b                	ja     c00016aa <dlrealloc+0x179>
c000169f:	09 ce                	or     esi,ecx
c00016a1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016a4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016a8:	eb 20                	jmp    c00016ca <dlrealloc+0x199>
c00016aa:	01 ef                	add    edi,ebp
c00016ac:	83 ec 0c             	sub    esp,0xc
c00016af:	09 cd                	or     ebp,ecx
c00016b1:	83 ca 01             	or     edx,0x1
c00016b4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016b7:	83 c7 08             	add    edi,0x8
c00016ba:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016bd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c1:	57                   	push   edi
c00016c2:	e8 d2 f5 ff ff       	call   c0000c99 <dlfree>
c00016c7:	83 c4 10             	add    esp,0x10
c00016ca:	83 c4 1c             	add    esp,0x1c
c00016cd:	89 d8                	mov    eax,ebx
c00016cf:	5b                   	pop    ebx
c00016d0:	5e                   	pop    esi
c00016d1:	5f                   	pop    edi
c00016d2:	5d                   	pop    ebp
c00016d3:	c3                   	ret    

c00016d4 <dlmemalign>:
c00016d4:	55                   	push   ebp
c00016d5:	57                   	push   edi
c00016d6:	56                   	push   esi
c00016d7:	53                   	push   ebx
c00016d8:	83 ec 0c             	sub    esp,0xc
c00016db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00016e3:	83 fa 08             	cmp    edx,0x8
c00016e6:	77 10                	ja     c00016f8 <dlmemalign+0x24>
c00016e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00016ec:	83 c4 0c             	add    esp,0xc
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	e9 fc f8 ff ff       	jmp    c0000ff4 <dlmalloc>
c00016f8:	bf 10 00 00 00       	mov    edi,0x10
c00016fd:	83 fa 0f             	cmp    edx,0xf
c0001700:	76 13                	jbe    c0001715 <dlmemalign+0x41>
c0001702:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001705:	85 d1                	test   ecx,edx
c0001707:	75 04                	jne    c000170d <dlmemalign+0x39>
c0001709:	89 d7                	mov    edi,edx
c000170b:	eb 08                	jmp    c0001715 <dlmemalign+0x41>
c000170d:	39 d7                	cmp    edi,edx
c000170f:	73 04                	jae    c0001715 <dlmemalign+0x41>
c0001711:	01 ff                	add    edi,edi
c0001713:	eb f8                	jmp    c000170d <dlmemalign+0x39>
c0001715:	83 f8 df             	cmp    eax,0xffffffdf
c0001718:	76 07                	jbe    c0001721 <dlmemalign+0x4d>
c000171a:	31 c0                	xor    eax,eax
c000171c:	e9 ce 00 00 00       	jmp    c00017ef <dlmemalign+0x11b>
c0001721:	83 c0 0b             	add    eax,0xb
c0001724:	bd 10 00 00 00       	mov    ebp,0x10
c0001729:	83 f8 0f             	cmp    eax,0xf
c000172c:	76 05                	jbe    c0001733 <dlmemalign+0x5f>
c000172e:	83 e0 f8             	and    eax,0xfffffff8
c0001731:	89 c5                	mov    ebp,eax
c0001733:	83 ec 0c             	sub    esp,0xc
c0001736:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000173a:	50                   	push   eax
c000173b:	e8 b4 f8 ff ff       	call   c0000ff4 <dlmalloc>
c0001740:	83 c4 10             	add    esp,0x10
c0001743:	89 c1                	mov    ecx,eax
c0001745:	85 c0                	test   eax,eax
c0001747:	74 d1                	je     c000171a <dlmemalign+0x46>
c0001749:	31 d2                	xor    edx,edx
c000174b:	8d 70 f8             	lea    esi,[eax-0x8]
c000174e:	f7 f7                	div    edi
c0001750:	85 d2                	test   edx,edx
c0001752:	74 62                	je     c00017b6 <dlmemalign+0xe2>
c0001754:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001758:	89 f8                	mov    eax,edi
c000175a:	f7 d8                	neg    eax
c000175c:	21 c3                	and    ebx,eax
c000175e:	83 eb 08             	sub    ebx,0x8
c0001761:	89 d8                	mov    eax,ebx
c0001763:	29 f0                	sub    eax,esi
c0001765:	83 f8 0f             	cmp    eax,0xf
c0001768:	77 02                	ja     c000176c <dlmemalign+0x98>
c000176a:	01 fb                	add    ebx,edi
c000176c:	89 d8                	mov    eax,ebx
c000176e:	29 f0                	sub    eax,esi
c0001770:	89 c6                	mov    esi,eax
c0001772:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001775:	89 c2                	mov    edx,eax
c0001777:	83 e2 fc             	and    edx,0xfffffffc
c000177a:	29 f2                	sub    edx,esi
c000177c:	a8 02                	test   al,0x2
c000177e:	74 10                	je     c0001790 <dlmemalign+0xbc>
c0001780:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001783:	83 ca 02             	or     edx,0x2
c0001786:	8d 43 08             	lea    eax,[ebx+0x8]
c0001789:	89 33                	mov    DWORD PTR [ebx],esi
c000178b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000178e:	eb 5f                	jmp    c00017ef <dlmemalign+0x11b>
c0001790:	83 ec 0c             	sub    esp,0xc
c0001793:	89 d0                	mov    eax,edx
c0001795:	83 c8 01             	or     eax,0x1
c0001798:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000179b:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017a0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a3:	83 e0 01             	and    eax,0x1
c00017a6:	09 f0                	or     eax,esi
c00017a8:	89 de                	mov    esi,ebx
c00017aa:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017ad:	51                   	push   ecx
c00017ae:	e8 e6 f4 ff ff       	call   c0000c99 <dlfree>
c00017b3:	83 c4 10             	add    esp,0x10
c00017b6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017b9:	a8 02                	test   al,0x2
c00017bb:	75 2f                	jne    c00017ec <dlmemalign+0x118>
c00017bd:	83 e0 fc             	and    eax,0xfffffffc
c00017c0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017c3:	39 c2                	cmp    edx,eax
c00017c5:	73 25                	jae    c00017ec <dlmemalign+0x118>
c00017c7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ca:	83 ec 0c             	sub    esp,0xc
c00017cd:	29 e8                	sub    eax,ebp
c00017cf:	83 c2 08             	add    edx,0x8
c00017d2:	83 c8 01             	or     eax,0x1
c00017d5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017d8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017db:	83 e0 01             	and    eax,0x1
c00017de:	09 c5                	or     ebp,eax
c00017e0:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00017e3:	52                   	push   edx
c00017e4:	e8 b0 f4 ff ff       	call   c0000c99 <dlfree>
c00017e9:	83 c4 10             	add    esp,0x10
c00017ec:	8d 46 08             	lea    eax,[esi+0x8]
c00017ef:	83 c4 0c             	add    esp,0xc
c00017f2:	5b                   	pop    ebx
c00017f3:	5e                   	pop    esi
c00017f4:	5f                   	pop    edi
c00017f5:	5d                   	pop    ebp
c00017f6:	c3                   	ret    

c00017f7 <dlcalloc>:
c00017f7:	53                   	push   ebx
c00017f8:	83 ec 14             	sub    esp,0x14
c00017fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00017ff:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001804:	50                   	push   eax
c0001805:	e8 ea f7 ff ff       	call   c0000ff4 <dlmalloc>
c000180a:	83 c4 10             	add    esp,0x10
c000180d:	89 c3                	mov    ebx,eax
c000180f:	85 c0                	test   eax,eax
c0001811:	74 77                	je     c000188a <dlcalloc+0x93>
c0001813:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001816:	89 d0                	mov    eax,edx
c0001818:	83 e0 fc             	and    eax,0xfffffffc
c000181b:	80 e2 02             	and    dl,0x2
c000181e:	75 5a                	jne    c000187a <dlcalloc+0x83>
c0001820:	83 e8 04             	sub    eax,0x4
c0001823:	83 f8 27             	cmp    eax,0x27
c0001826:	76 03                	jbe    c000182b <dlcalloc+0x34>
c0001828:	51                   	push   ecx
c0001829:	eb 53                	jmp    c000187e <dlcalloc+0x87>
c000182b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001831:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001838:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000183f:	83 f8 13             	cmp    eax,0x13
c0001842:	76 46                	jbe    c000188a <dlcalloc+0x93>
c0001844:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000184b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001852:	83 f8 1b             	cmp    eax,0x1b
c0001855:	76 33                	jbe    c000188a <dlcalloc+0x93>
c0001857:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000185e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001865:	83 f8 23             	cmp    eax,0x23
c0001868:	76 20                	jbe    c000188a <dlcalloc+0x93>
c000186a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001871:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001878:	eb 10                	jmp    c000188a <dlcalloc+0x93>
c000187a:	83 e8 08             	sub    eax,0x8
c000187d:	52                   	push   edx
c000187e:	50                   	push   eax
c000187f:	6a 00                	push   0x0
c0001881:	53                   	push   ebx
c0001882:	e8 49 ec ff ff       	call   c00004d0 <memset>
c0001887:	83 c4 10             	add    esp,0x10
c000188a:	89 d8                	mov    eax,ebx
c000188c:	83 c4 08             	add    esp,0x8
c000188f:	5b                   	pop    ebx
c0001890:	c3                   	ret    

c0001891 <dlcfree>:
c0001891:	e9 03 f4 ff ff       	jmp    c0000c99 <dlfree>

c0001896 <dlindependent_calloc>:
c0001896:	83 ec 28             	sub    esp,0x28
c0001899:	b9 03 00 00 00       	mov    ecx,0x3
c000189e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018aa:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018b2:	e8 cb fa ff ff       	call   c0001382 <iALLOc>
c00018b7:	83 c4 2c             	add    esp,0x2c
c00018ba:	c3                   	ret    

c00018bb <dlindependent_comalloc>:
c00018bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018c3:	31 c9                	xor    ecx,ecx
c00018c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018cd:	e9 b0 fa ff ff       	jmp    c0001382 <iALLOc>

c00018d2 <dlvalloc>:
c00018d2:	83 ec 0c             	sub    esp,0xc
c00018d5:	83 3d a0 ff 01 c0 00 	cmp    DWORD PTR ds:0xc001ffa0,0x0
c00018dc:	75 0a                	jne    c00018e8 <dlvalloc+0x16>
c00018de:	b8 a0 ff 01 c0       	mov    eax,0xc001ffa0
c00018e3:	e8 ca f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c00018e8:	50                   	push   eax
c00018e9:	50                   	push   eax
c00018ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00018ee:	ff 35 fc 02 02 c0    	push   DWORD PTR ds:0xc00202fc
c00018f4:	e8 db fd ff ff       	call   c00016d4 <dlmemalign>
c00018f9:	83 c4 1c             	add    esp,0x1c
c00018fc:	c3                   	ret    

c00018fd <dlpvalloc>:
c00018fd:	83 ec 0c             	sub    esp,0xc
c0001900:	83 3d a0 ff 01 c0 00 	cmp    DWORD PTR ds:0xc001ffa0,0x0
c0001907:	75 0a                	jne    c0001913 <dlpvalloc+0x16>
c0001909:	b8 a0 ff 01 c0       	mov    eax,0xc001ffa0
c000190e:	e8 9f f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001913:	a1 fc 02 02 c0       	mov    eax,ds:0xc00202fc
c0001918:	89 c1                	mov    ecx,eax
c000191a:	52                   	push   edx
c000191b:	f7 d9                	neg    ecx
c000191d:	52                   	push   edx
c000191e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001922:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001926:	21 ca                	and    edx,ecx
c0001928:	52                   	push   edx
c0001929:	50                   	push   eax
c000192a:	e8 a5 fd ff ff       	call   c00016d4 <dlmemalign>
c000192f:	83 c4 1c             	add    esp,0x1c
c0001932:	c3                   	ret    

c0001933 <dlmalloc_trim>:
c0001933:	b8 a0 ff 01 c0       	mov    eax,0xc001ffa0
c0001938:	e8 75 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000193d:	31 c0                	xor    eax,eax
c000193f:	c3                   	ret    

c0001940 <dlmalloc_usable_size>:
c0001940:	53                   	push   ebx
c0001941:	31 c0                	xor    eax,eax
c0001943:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001947:	85 c9                	test   ecx,ecx
c0001949:	74 24                	je     c000196f <dlmalloc_usable_size+0x2f>
c000194b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000194e:	f6 c2 02             	test   dl,0x2
c0001951:	74 08                	je     c000195b <dlmalloc_usable_size+0x1b>
c0001953:	83 e2 fc             	and    edx,0xfffffffc
c0001956:	8d 42 f8             	lea    eax,[edx-0x8]
c0001959:	eb 14                	jmp    c000196f <dlmalloc_usable_size+0x2f>
c000195b:	89 d3                	mov    ebx,edx
c000195d:	31 c0                	xor    eax,eax
c000195f:	83 e3 fe             	and    ebx,0xfffffffe
c0001962:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001967:	74 06                	je     c000196f <dlmalloc_usable_size+0x2f>
c0001969:	83 e2 fc             	and    edx,0xfffffffc
c000196c:	8d 42 fc             	lea    eax,[edx-0x4]
c000196f:	5b                   	pop    ebx
c0001970:	c3                   	ret    

c0001971 <dlmallinfo>:
c0001971:	55                   	push   ebp
c0001972:	57                   	push   edi
c0001973:	56                   	push   esi
c0001974:	53                   	push   ebx
c0001975:	83 ec 08             	sub    esp,0x8
c0001978:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000197c:	83 3d cc ff 01 c0 00 	cmp    DWORD PTR ds:0xc001ffcc,0x0
c0001983:	75 0a                	jne    c000198f <dlmallinfo+0x1e>
c0001985:	b8 a0 ff 01 c0       	mov    eax,0xc001ffa0
c000198a:	e8 23 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000198f:	a1 cc ff 01 c0       	mov    eax,ds:0xc001ffcc
c0001994:	31 ed                	xor    ebp,ebp
c0001996:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001999:	31 c9                	xor    ecx,ecx
c000199b:	83 e0 fc             	and    eax,0xfffffffc
c000199e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019a2:	31 c0                	xor    eax,eax
c00019a4:	8b 14 85 a4 ff 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe005c]
c00019ab:	85 d2                	test   edx,edx
c00019ad:	74 0e                	je     c00019bd <dlmallinfo+0x4c>
c00019af:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019b2:	45                   	inc    ebp
c00019b3:	83 e6 fc             	and    esi,0xfffffffc
c00019b6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019b9:	01 f1                	add    ecx,esi
c00019bb:	eb ee                	jmp    c00019ab <dlmallinfo+0x3a>
c00019bd:	40                   	inc    eax
c00019be:	83 f8 0a             	cmp    eax,0xa
c00019c1:	75 e1                	jne    c00019a4 <dlmallinfo+0x33>
c00019c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019c7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ce:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019d1:	b8 d4 ff 01 c0       	mov    eax,0xc001ffd4
c00019d6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019d9:	39 f0                	cmp    eax,esi
c00019db:	74 10                	je     c00019ed <dlmallinfo+0x7c>
c00019dd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00019e0:	ff 04 24             	inc    DWORD PTR [esp]
c00019e3:	83 e7 fc             	and    edi,0xfffffffc
c00019e6:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00019e9:	01 fa                	add    edx,edi
c00019eb:	eb ec                	jmp    c00019d9 <dlmallinfo+0x68>
c00019ed:	83 c0 08             	add    eax,0x8
c00019f0:	3d cc 02 02 c0       	cmp    eax,0xc00202cc
c00019f5:	75 df                	jne    c00019d6 <dlmallinfo+0x65>
c00019f7:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00019fa:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00019fd:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a00:	a1 08 03 02 c0       	mov    eax,ds:0xc0020308
c0001a05:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a08:	89 03                	mov    DWORD PTR [ebx],eax
c0001a0a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a0d:	8b 35 f0 02 02 c0    	mov    esi,DWORD PTR ds:0xc00202f0
c0001a13:	29 d0                	sub    eax,edx
c0001a15:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a18:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a1b:	8b 35 04 03 02 c0    	mov    esi,DWORD PTR ds:0xc0020304
c0001a21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a25:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a28:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a2b:	8b 35 14 03 02 c0    	mov    esi,DWORD PTR ds:0xc0020314
c0001a31:	89 d8                	mov    eax,ebx
c0001a33:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a36:	83 c4 08             	add    esp,0x8
c0001a39:	5b                   	pop    ebx
c0001a3a:	5e                   	pop    esi
c0001a3b:	5f                   	pop    edi
c0001a3c:	5d                   	pop    ebp
c0001a3d:	c2 04 00             	ret    0x4

c0001a40 <dlmalloc_stats>:
c0001a40:	83 ec 30             	sub    esp,0x30
c0001a43:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a47:	50                   	push   eax
c0001a48:	e8 24 ff ff ff       	call   c0001971 <dlmallinfo>
c0001a4d:	83 c4 30             	add    esp,0x30
c0001a50:	c3                   	ret    

c0001a51 <dlmallopt>:
c0001a51:	56                   	push   esi
c0001a52:	b8 a0 ff 01 c0       	mov    eax,0xc001ffa0
c0001a57:	53                   	push   ebx
c0001a58:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a60:	e8 4d f1 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001a65:	8d 46 04             	lea    eax,[esi+0x4]
c0001a68:	83 f8 05             	cmp    eax,0x5
c0001a6b:	77 67                	ja     c0001ad4 <dlmallopt+0x83>
c0001a6d:	ff 24 85 04 d0 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe2ffc]
c0001a74:	83 fb 50             	cmp    ebx,0x50
c0001a77:	77 5b                	ja     c0001ad4 <dlmallopt+0x83>
c0001a79:	ba 08 00 00 00       	mov    edx,0x8
c0001a7e:	85 db                	test   ebx,ebx
c0001a80:	74 12                	je     c0001a94 <dlmallopt+0x43>
c0001a82:	83 c3 0b             	add    ebx,0xb
c0001a85:	ba 10 00 00 00       	mov    edx,0x10
c0001a8a:	83 fb 0f             	cmp    ebx,0xf
c0001a8d:	76 05                	jbe    c0001a94 <dlmallopt+0x43>
c0001a8f:	89 da                	mov    edx,ebx
c0001a91:	83 e2 f8             	and    edx,0xfffffff8
c0001a94:	a1 a0 ff 01 c0       	mov    eax,ds:0xc001ffa0
c0001a99:	83 e0 03             	and    eax,0x3
c0001a9c:	09 d0                	or     eax,edx
c0001a9e:	a3 a0 ff 01 c0       	mov    ds:0xc001ffa0,eax
c0001aa3:	eb 31                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aa5:	89 1d e4 02 02 c0    	mov    DWORD PTR ds:0xc00202e4,ebx
c0001aab:	eb 06                	jmp    c0001ab3 <dlmallopt+0x62>
c0001aad:	89 1d e8 02 02 c0    	mov    DWORD PTR ds:0xc00202e8,ebx
c0001ab3:	be 01 00 00 00       	mov    esi,0x1
c0001ab8:	eb 1c                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aba:	89 1d ec 02 02 c0    	mov    DWORD PTR ds:0xc00202ec,ebx
c0001ac0:	eb f1                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ac2:	31 f6                	xor    esi,esi
c0001ac4:	85 db                	test   ebx,ebx
c0001ac6:	75 0e                	jne    c0001ad6 <dlmallopt+0x85>
c0001ac8:	c7 05 f4 02 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00202f4,0x0
c0001ad2:	eb df                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ad4:	31 f6                	xor    esi,esi
c0001ad6:	89 f0                	mov    eax,esi
c0001ad8:	5b                   	pop    ebx
c0001ad9:	5e                   	pop    esi
c0001ada:	c3                   	ret    
c0001adb:	90                   	nop

c0001adc <isblank>:
c0001adc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ae1:	74 09                	je     c0001aec <isblank+0x10>
c0001ae3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ae8:	75 0a                	jne    c0001af4 <isblank+0x18>
c0001aea:	66 90                	xchg   ax,ax
c0001aec:	b8 01 00 00 00       	mov    eax,0x1
c0001af1:	c3                   	ret    
c0001af2:	66 90                	xchg   ax,ax
c0001af4:	b8 00 00 00 00       	mov    eax,0x0
c0001af9:	c3                   	ret    
c0001afa:	66 90                	xchg   ax,ax

c0001afc <iscntrl>:
c0001afc:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b01:	7e 09                	jle    c0001b0c <iscntrl+0x10>
c0001b03:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b08:	75 0a                	jne    c0001b14 <iscntrl+0x18>
c0001b0a:	66 90                	xchg   ax,ax
c0001b0c:	b8 01 00 00 00       	mov    eax,0x1
c0001b11:	c3                   	ret    
c0001b12:	66 90                	xchg   ax,ax
c0001b14:	b8 00 00 00 00       	mov    eax,0x0
c0001b19:	c3                   	ret    
c0001b1a:	66 90                	xchg   ax,ax

c0001b1c <isdigit>:
c0001b1c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b21:	7e 0d                	jle    c0001b30 <isdigit+0x14>
c0001b23:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b28:	7f 06                	jg     c0001b30 <isdigit+0x14>
c0001b2a:	b8 01 00 00 00       	mov    eax,0x1
c0001b2f:	c3                   	ret    
c0001b30:	b8 00 00 00 00       	mov    eax,0x0
c0001b35:	c3                   	ret    
c0001b36:	66 90                	xchg   ax,ax

c0001b38 <islower>:
c0001b38:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b3d:	7e 0d                	jle    c0001b4c <islower+0x14>
c0001b3f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b44:	7f 06                	jg     c0001b4c <islower+0x14>
c0001b46:	b8 01 00 00 00       	mov    eax,0x1
c0001b4b:	c3                   	ret    
c0001b4c:	b8 00 00 00 00       	mov    eax,0x0
c0001b51:	c3                   	ret    
c0001b52:	66 90                	xchg   ax,ax

c0001b54 <isspace>:
c0001b54:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b59:	7c 19                	jl     c0001b74 <isspace+0x20>
c0001b5b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b60:	7e 0a                	jle    c0001b6c <isspace+0x18>
c0001b62:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b67:	75 0b                	jne    c0001b74 <isspace+0x20>
c0001b69:	8d 76 00             	lea    esi,[esi+0x0]
c0001b6c:	b8 01 00 00 00       	mov    eax,0x1
c0001b71:	c3                   	ret    
c0001b72:	66 90                	xchg   ax,ax
c0001b74:	b8 00 00 00 00       	mov    eax,0x0
c0001b79:	c3                   	ret    
c0001b7a:	66 90                	xchg   ax,ax

c0001b7c <isupper>:
c0001b7c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001b81:	7e 0d                	jle    c0001b90 <isupper+0x14>
c0001b83:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001b88:	7f 06                	jg     c0001b90 <isupper+0x14>
c0001b8a:	b8 01 00 00 00       	mov    eax,0x1
c0001b8f:	c3                   	ret    
c0001b90:	b8 00 00 00 00       	mov    eax,0x0
c0001b95:	c3                   	ret    
c0001b96:	66 90                	xchg   ax,ax

c0001b98 <isalpha>:
c0001b98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001b9c:	e8 db ff ff ff       	call   c0001b7c <isupper>
c0001ba1:	83 c4 04             	add    esp,0x4
c0001ba4:	85 c0                	test   eax,eax
c0001ba6:	75 10                	jne    c0001bb8 <isalpha+0x20>
c0001ba8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bac:	e8 87 ff ff ff       	call   c0001b38 <islower>
c0001bb1:	83 c4 04             	add    esp,0x4
c0001bb4:	85 c0                	test   eax,eax
c0001bb6:	74 08                	je     c0001bc0 <isalpha+0x28>
c0001bb8:	b8 01 00 00 00       	mov    eax,0x1
c0001bbd:	c3                   	ret    
c0001bbe:	66 90                	xchg   ax,ax
c0001bc0:	b8 00 00 00 00       	mov    eax,0x0
c0001bc5:	c3                   	ret    
c0001bc6:	66 90                	xchg   ax,ax

c0001bc8 <isalnum>:
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 c7 ff ff ff       	call   c0001b98 <isalpha>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	75 10                	jne    c0001be8 <isalnum+0x20>
c0001bd8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bdc:	e8 3b ff ff ff       	call   c0001b1c <isdigit>
c0001be1:	83 c4 04             	add    esp,0x4
c0001be4:	85 c0                	test   eax,eax
c0001be6:	74 08                	je     c0001bf0 <isalnum+0x28>
c0001be8:	b8 01 00 00 00       	mov    eax,0x1
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax
c0001bf0:	b8 00 00 00 00       	mov    eax,0x0
c0001bf5:	c3                   	ret    
c0001bf6:	66 90                	xchg   ax,ax

c0001bf8 <ispunct>:
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 c7 ff ff ff       	call   c0001bc8 <isalnum>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	75 28                	jne    c0001c30 <ispunct+0x38>
c0001c08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c0c:	e8 43 ff ff ff       	call   c0001b54 <isspace>
c0001c11:	83 c4 04             	add    esp,0x4
c0001c14:	85 c0                	test   eax,eax
c0001c16:	75 18                	jne    c0001c30 <ispunct+0x38>
c0001c18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c1c:	e8 db fe ff ff       	call   c0001afc <iscntrl>
c0001c21:	83 c4 04             	add    esp,0x4
c0001c24:	85 c0                	test   eax,eax
c0001c26:	75 08                	jne    c0001c30 <ispunct+0x38>
c0001c28:	b8 01 00 00 00       	mov    eax,0x1
c0001c2d:	c3                   	ret    
c0001c2e:	66 90                	xchg   ax,ax
c0001c30:	b8 00 00 00 00       	mov    eax,0x0
c0001c35:	c3                   	ret    
c0001c36:	66 90                	xchg   ax,ax

c0001c38 <isgraph>:
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 87 ff ff ff       	call   c0001bc8 <isalnum>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	75 10                	jne    c0001c58 <isgraph+0x20>
c0001c48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c4c:	e8 a7 ff ff ff       	call   c0001bf8 <ispunct>
c0001c51:	83 c4 04             	add    esp,0x4
c0001c54:	85 c0                	test   eax,eax
c0001c56:	74 08                	je     c0001c60 <isgraph+0x28>
c0001c58:	b8 01 00 00 00       	mov    eax,0x1
c0001c5d:	c3                   	ret    
c0001c5e:	66 90                	xchg   ax,ax
c0001c60:	b8 00 00 00 00       	mov    eax,0x0
c0001c65:	c3                   	ret    
c0001c66:	66 90                	xchg   ax,ax

c0001c68 <isprint>:
c0001c68:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c6c:	e8 c7 ff ff ff       	call   c0001c38 <isgraph>
c0001c71:	83 c4 04             	add    esp,0x4
c0001c74:	85 c0                	test   eax,eax
c0001c76:	75 08                	jne    c0001c80 <isprint+0x18>
c0001c78:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c7d:	75 09                	jne    c0001c88 <isprint+0x20>
c0001c7f:	90                   	nop
c0001c80:	b8 01 00 00 00       	mov    eax,0x1
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax
c0001c88:	b8 00 00 00 00       	mov    eax,0x0
c0001c8d:	c3                   	ret    
c0001c8e:	66 90                	xchg   ax,ax

c0001c90 <isxdigit>:
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 83 fe ff ff       	call   c0001b1c <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	75 20                	jne    c0001cc0 <isxdigit+0x30>
c0001ca0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ca5:	7e 09                	jle    c0001cb0 <isxdigit+0x20>
c0001ca7:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001cac:	7e 12                	jle    c0001cc0 <isxdigit+0x30>
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cb5:	7e 11                	jle    c0001cc8 <isxdigit+0x38>
c0001cb7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cbc:	7f 0a                	jg     c0001cc8 <isxdigit+0x38>
c0001cbe:	66 90                	xchg   ax,ax
c0001cc0:	b8 01 00 00 00       	mov    eax,0x1
c0001cc5:	c3                   	ret    
c0001cc6:	66 90                	xchg   ax,ax
c0001cc8:	b8 00 00 00 00       	mov    eax,0x0
c0001ccd:	c3                   	ret    

c0001cce <disk_status>:
c0001cce:	31 c0                	xor    eax,eax
c0001cd0:	c3                   	ret    

c0001cd1 <disk_initialize>:
c0001cd1:	31 c0                	xor    eax,eax
c0001cd3:	c3                   	ret    

c0001cd4 <disk_read>:
c0001cd4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cd9:	0f b6 04 85 60 41 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdbea0]
c0001ce1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ce5:	e9 aa 53 01 00       	jmp    c0017094 <fatWrapperReadDisk>

c0001cea <disk_write>:
c0001cea:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cef:	0f b6 04 85 60 41 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdbea0]
c0001cf7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001cfb:	e9 d8 53 01 00       	jmp    c00170d8 <fatWrapperWriteDisk>

c0001d00 <disk_ioctl>:
c0001d00:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d09:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d0e:	0f b6 04 85 60 41 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdbea0]
c0001d16:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d1a:	e9 fd 53 01 00       	jmp    c001711c <fatWrapperIoctl>

c0001d1f <ld_word>:
c0001d1f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d23:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d26:	c1 e2 08             	shl    edx,0x8
c0001d29:	09 d0                	or     eax,edx
c0001d2b:	c3                   	ret    

c0001d2c <ld_dword>:
c0001d2c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d30:	89 d1                	mov    ecx,edx
c0001d32:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d36:	c1 e1 08             	shl    ecx,0x8
c0001d39:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d3c:	09 ca                	or     edx,ecx
c0001d3e:	c1 e2 08             	shl    edx,0x8
c0001d41:	09 d0                	or     eax,edx
c0001d43:	c3                   	ret    

c0001d44 <st_word>:
c0001d44:	66 89 10             	mov    WORD PTR [eax],dx
c0001d47:	c3                   	ret    

c0001d48 <st_dword>:
c0001d48:	89 10                	mov    DWORD PTR [eax],edx
c0001d4a:	c3                   	ret    

c0001d4b <mem_cpy>:
c0001d4b:	85 c9                	test   ecx,ecx
c0001d4d:	74 10                	je     c0001d5f <mem_cpy+0x14>
c0001d4f:	57                   	push   edi
c0001d50:	01 c1                	add    ecx,eax
c0001d52:	56                   	push   esi
c0001d53:	89 c7                	mov    edi,eax
c0001d55:	89 d6                	mov    esi,edx
c0001d57:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d58:	39 f9                	cmp    ecx,edi
c0001d5a:	75 fb                	jne    c0001d57 <mem_cpy+0xc>
c0001d5c:	5e                   	pop    esi
c0001d5d:	5f                   	pop    edi
c0001d5e:	c3                   	ret    
c0001d5f:	c3                   	ret    

c0001d60 <mem_set>:
c0001d60:	01 c1                	add    ecx,eax
c0001d62:	40                   	inc    eax
c0001d63:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d66:	39 c8                	cmp    eax,ecx
c0001d68:	75 f8                	jne    c0001d62 <mem_set+0x2>
c0001d6a:	c3                   	ret    

c0001d6b <mem_cmp>:
c0001d6b:	57                   	push   edi
c0001d6c:	56                   	push   esi
c0001d6d:	89 c6                	mov    esi,eax
c0001d6f:	53                   	push   ebx
c0001d70:	46                   	inc    esi
c0001d71:	42                   	inc    edx
c0001d72:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d76:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d7a:	29 fb                	sub    ebx,edi
c0001d7c:	89 cf                	mov    edi,ecx
c0001d7e:	29 f7                	sub    edi,esi
c0001d80:	01 c7                	add    edi,eax
c0001d82:	74 04                	je     c0001d88 <mem_cmp+0x1d>
c0001d84:	85 db                	test   ebx,ebx
c0001d86:	74 e8                	je     c0001d70 <mem_cmp+0x5>
c0001d88:	89 d8                	mov    eax,ebx
c0001d8a:	5b                   	pop    ebx
c0001d8b:	5e                   	pop    esi
c0001d8c:	5f                   	pop    edi
c0001d8d:	c3                   	ret    

c0001d8e <chk_chr>:
c0001d8e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d91:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d94:	74 07                	je     c0001d9d <chk_chr+0xf>
c0001d96:	39 d1                	cmp    ecx,edx
c0001d98:	74 03                	je     c0001d9d <chk_chr+0xf>
c0001d9a:	40                   	inc    eax
c0001d9b:	eb f1                	jmp    c0001d8e <chk_chr>
c0001d9d:	89 c8                	mov    eax,ecx
c0001d9f:	c3                   	ret    

c0001da0 <dbc_1st>:
c0001da0:	31 c0                	xor    eax,eax
c0001da2:	c3                   	ret    

c0001da3 <dbc_2nd>:
c0001da3:	31 c0                	xor    eax,eax
c0001da5:	c3                   	ret    

c0001da6 <tchar2uni>:
c0001da6:	57                   	push   edi
c0001da7:	89 c7                	mov    edi,eax
c0001da9:	56                   	push   esi
c0001daa:	53                   	push   ebx
c0001dab:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001dad:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001daf:	8d 73 01             	lea    esi,[ebx+0x1]
c0001db2:	84 c9                	test   cl,cl
c0001db4:	78 0a                	js     c0001dc0 <tchar2uni+0x1a>
c0001db6:	0f b6 d1             	movzx  edx,cl
c0001db9:	89 f3                	mov    ebx,esi
c0001dbb:	e9 9f 00 00 00       	jmp    c0001e5f <tchar2uni+0xb9>
c0001dc0:	88 ca                	mov    dl,cl
c0001dc2:	83 e2 e0             	and    edx,0xffffffe0
c0001dc5:	80 fa c0             	cmp    dl,0xc0
c0001dc8:	75 0c                	jne    c0001dd6 <tchar2uni+0x30>
c0001dca:	89 ca                	mov    edx,ecx
c0001dcc:	b9 01 00 00 00       	mov    ecx,0x1
c0001dd1:	83 e2 1f             	and    edx,0x1f
c0001dd4:	eb 2e                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dd6:	88 ca                	mov    dl,cl
c0001dd8:	83 e2 f0             	and    edx,0xfffffff0
c0001ddb:	80 fa e0             	cmp    dl,0xe0
c0001dde:	75 0c                	jne    c0001dec <tchar2uni+0x46>
c0001de0:	89 ca                	mov    edx,ecx
c0001de2:	b9 02 00 00 00       	mov    ecx,0x2
c0001de7:	83 e2 0f             	and    edx,0xf
c0001dea:	eb 18                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dec:	88 ca                	mov    dl,cl
c0001dee:	83 e2 f8             	and    edx,0xfffffff8
c0001df1:	88 d0                	mov    al,dl
c0001df3:	83 ca ff             	or     edx,0xffffffff
c0001df6:	3c f0                	cmp    al,0xf0
c0001df8:	75 6c                	jne    c0001e66 <tchar2uni+0xc0>
c0001dfa:	89 ca                	mov    edx,ecx
c0001dfc:	b9 03 00 00 00       	mov    ecx,0x3
c0001e01:	83 e2 07             	and    edx,0x7
c0001e04:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e08:	46                   	inc    esi
c0001e09:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e0c:	88 c8                	mov    al,cl
c0001e0e:	83 e0 c0             	and    eax,0xffffffc0
c0001e11:	3c 80                	cmp    al,0x80
c0001e13:	75 4e                	jne    c0001e63 <tchar2uni+0xbd>
c0001e15:	c1 e2 06             	shl    edx,0x6
c0001e18:	83 e1 3f             	and    ecx,0x3f
c0001e1b:	09 ca                	or     edx,ecx
c0001e1d:	39 de                	cmp    esi,ebx
c0001e1f:	75 e7                	jne    c0001e08 <tchar2uni+0x62>
c0001e21:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e24:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e2a:	77 37                	ja     c0001e63 <tchar2uni+0xbd>
c0001e2c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e32:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e38:	76 29                	jbe    c0001e63 <tchar2uni+0xbd>
c0001e3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e40:	76 1d                	jbe    c0001e5f <tchar2uni+0xb9>
c0001e42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e4e:	c1 e1 06             	shl    ecx,0x6
c0001e51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e57:	09 ca                	or     edx,ecx
c0001e59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e5f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e61:	eb 03                	jmp    c0001e66 <tchar2uni+0xc0>
c0001e63:	83 ca ff             	or     edx,0xffffffff
c0001e66:	5b                   	pop    ebx
c0001e67:	89 d0                	mov    eax,edx
c0001e69:	5e                   	pop    esi
c0001e6a:	5f                   	pop    edi
c0001e6b:	c3                   	ret    

c0001e6c <put_utf>:
c0001e6c:	53                   	push   ebx
c0001e6d:	83 f8 7f             	cmp    eax,0x7f
c0001e70:	89 c3                	mov    ebx,eax
c0001e72:	b0 00                	mov    al,0x0
c0001e74:	77 11                	ja     c0001e87 <put_utf+0x1b>
c0001e76:	85 c9                	test   ecx,ecx
c0001e78:	0f 84 e5 00 00 00    	je     c0001f63 <put_utf+0xf7>
c0001e7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001e80:	b0 01                	mov    al,0x1
c0001e82:	e9 dc 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001e87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e8d:	77 23                	ja     c0001eb2 <put_utf+0x46>
c0001e8f:	83 f9 01             	cmp    ecx,0x1
c0001e92:	0f 86 cb 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001e98:	89 d8                	mov    eax,ebx
c0001e9a:	83 e3 3f             	and    ebx,0x3f
c0001e9d:	c1 e8 06             	shr    eax,0x6
c0001ea0:	83 cb 80             	or     ebx,0xffffff80
c0001ea3:	83 c8 c0             	or     eax,0xffffffc0
c0001ea6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001ea9:	88 02                	mov    BYTE PTR [edx],al
c0001eab:	b0 02                	mov    al,0x2
c0001ead:	e9 b1 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001eb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001eb8:	77 40                	ja     c0001efa <put_utf+0x8e>
c0001eba:	83 f9 02             	cmp    ecx,0x2
c0001ebd:	0f 86 a0 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ec3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ec9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001ecf:	0f 86 8e 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ed5:	89 d8                	mov    eax,ebx
c0001ed7:	c1 e8 0c             	shr    eax,0xc
c0001eda:	83 c8 e0             	or     eax,0xffffffe0
c0001edd:	88 02                	mov    BYTE PTR [edx],al
c0001edf:	89 d8                	mov    eax,ebx
c0001ee1:	83 e3 3f             	and    ebx,0x3f
c0001ee4:	c1 e8 06             	shr    eax,0x6
c0001ee7:	83 cb 80             	or     ebx,0xffffff80
c0001eea:	83 e0 3f             	and    eax,0x3f
c0001eed:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ef0:	83 c8 80             	or     eax,0xffffff80
c0001ef3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ef6:	b0 03                	mov    al,0x3
c0001ef8:	eb 69                	jmp    c0001f63 <put_utf+0xf7>
c0001efa:	83 f9 03             	cmp    ecx,0x3
c0001efd:	76 64                	jbe    c0001f63 <put_utf+0xf7>
c0001eff:	89 d9                	mov    ecx,ebx
c0001f01:	0f b7 c3             	movzx  eax,bx
c0001f04:	66 31 c9             	xor    cx,cx
c0001f07:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f0d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f13:	c1 e9 06             	shr    ecx,0x6
c0001f16:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f1c:	77 43                	ja     c0001f61 <put_utf+0xf5>
c0001f1e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f24:	77 3b                	ja     c0001f61 <put_utf+0xf5>
c0001f26:	09 cb                	or     ebx,ecx
c0001f28:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f2e:	89 d8                	mov    eax,ebx
c0001f30:	c1 e8 12             	shr    eax,0x12
c0001f33:	83 c8 f0             	or     eax,0xfffffff0
c0001f36:	88 02                	mov    BYTE PTR [edx],al
c0001f38:	89 d8                	mov    eax,ebx
c0001f3a:	c1 e8 0c             	shr    eax,0xc
c0001f3d:	83 e0 3f             	and    eax,0x3f
c0001f40:	83 c8 80             	or     eax,0xffffff80
c0001f43:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f46:	89 d8                	mov    eax,ebx
c0001f48:	83 e3 3f             	and    ebx,0x3f
c0001f4b:	c1 e8 06             	shr    eax,0x6
c0001f4e:	83 cb 80             	or     ebx,0xffffff80
c0001f51:	83 e0 3f             	and    eax,0x3f
c0001f54:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f57:	83 c8 80             	or     eax,0xffffff80
c0001f5a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f5d:	b0 04                	mov    al,0x4
c0001f5f:	eb 02                	jmp    c0001f63 <put_utf+0xf7>
c0001f61:	31 c0                	xor    eax,eax
c0001f63:	5b                   	pop    ebx
c0001f64:	c3                   	ret    

c0001f65 <clst2sect>:
c0001f65:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f68:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f6b:	83 ea 02             	sub    edx,0x2
c0001f6e:	39 ca                	cmp    edx,ecx
c0001f70:	76 0d                	jbe    c0001f7f <clst2sect+0x1a>
c0001f72:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f76:	0f af d1             	imul   edx,ecx
c0001f79:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f7c:	89 d0                	mov    eax,edx
c0001f7e:	c3                   	ret    
c0001f7f:	31 c0                	xor    eax,eax
c0001f81:	c3                   	ret    

c0001f82 <pick_lfn>:
c0001f82:	55                   	push   ebp
c0001f83:	57                   	push   edi
c0001f84:	56                   	push   esi
c0001f85:	89 d6                	mov    esi,edx
c0001f87:	53                   	push   ebx
c0001f88:	89 c3                	mov    ebx,eax
c0001f8a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f8d:	e8 8d fd ff ff       	call   c0001d1f <ld_word>
c0001f92:	66 85 c0             	test   ax,ax
c0001f95:	74 04                	je     c0001f9b <pick_lfn+0x19>
c0001f97:	31 c0                	xor    eax,eax
c0001f99:	eb 5c                	jmp    c0001ff7 <pick_lfn+0x75>
c0001f9b:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f9e:	bd 01 00 00 00       	mov    ebp,0x1
c0001fa3:	83 e1 bf             	and    ecx,0xffffffbf
c0001fa6:	31 ff                	xor    edi,edi
c0001fa8:	49                   	dec    ecx
c0001fa9:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fac:	0f b6 87 60 d1 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe2ea0]
c0001fb3:	01 f0                	add    eax,esi
c0001fb5:	e8 65 fd ff ff       	call   c0001d1f <ld_word>
c0001fba:	66 85 ed             	test   bp,bp
c0001fbd:	74 11                	je     c0001fd0 <pick_lfn+0x4e>
c0001fbf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fc5:	77 d0                	ja     c0001f97 <pick_lfn+0x15>
c0001fc7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fcb:	89 c5                	mov    ebp,eax
c0001fcd:	41                   	inc    ecx
c0001fce:	eb 04                	jmp    c0001fd4 <pick_lfn+0x52>
c0001fd0:	66 40                	inc    ax
c0001fd2:	75 c3                	jne    c0001f97 <pick_lfn+0x15>
c0001fd4:	47                   	inc    edi
c0001fd5:	83 ff 0d             	cmp    edi,0xd
c0001fd8:	75 d2                	jne    c0001fac <pick_lfn+0x2a>
c0001fda:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fdd:	74 13                	je     c0001ff2 <pick_lfn+0x70>
c0001fdf:	66 85 ed             	test   bp,bp
c0001fe2:	74 0e                	je     c0001ff2 <pick_lfn+0x70>
c0001fe4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fea:	77 ab                	ja     c0001f97 <pick_lfn+0x15>
c0001fec:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ff2:	b8 01 00 00 00       	mov    eax,0x1
c0001ff7:	5b                   	pop    ebx
c0001ff8:	5e                   	pop    esi
c0001ff9:	5f                   	pop    edi
c0001ffa:	5d                   	pop    ebp
c0001ffb:	c3                   	ret    

c0001ffc <put_lfn>:
c0001ffc:	55                   	push   ebp
c0001ffd:	31 ed                	xor    ebp,ebp
c0001fff:	57                   	push   edi
c0002000:	89 d7                	mov    edi,edx
c0002002:	56                   	push   esi
c0002003:	31 f6                	xor    esi,esi
c0002005:	53                   	push   ebx
c0002006:	83 ec 08             	sub    esp,0x8
c0002009:	89 04 24             	mov    DWORD PTR [esp],eax
c000200c:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002010:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002014:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000201a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000201d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002020:	31 d2                	xor    edx,edx
c0002022:	e8 1d fd ff ff       	call   c0001d44 <st_word>
c0002027:	0f b6 d9             	movzx  ebx,cl
c000202a:	4b                   	dec    ebx
c000202b:	6b db 0d             	imul   ebx,ebx,0xd
c000202e:	66 83 fe ff          	cmp    si,0xffff
c0002032:	74 08                	je     c000203c <put_lfn+0x40>
c0002034:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002037:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000203b:	43                   	inc    ebx
c000203c:	0f b6 85 60 d1 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe2ea0]
c0002043:	0f b7 d6             	movzx  edx,si
c0002046:	01 f8                	add    eax,edi
c0002048:	e8 f7 fc ff ff       	call   c0001d44 <st_word>
c000204d:	66 85 f6             	test   si,si
c0002050:	75 03                	jne    c0002055 <put_lfn+0x59>
c0002052:	83 ce ff             	or     esi,0xffffffff
c0002055:	45                   	inc    ebp
c0002056:	83 fd 0d             	cmp    ebp,0xd
c0002059:	75 d3                	jne    c000202e <put_lfn+0x32>
c000205b:	66 46                	inc    si
c000205d:	74 0a                	je     c0002069 <put_lfn+0x6d>
c000205f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002062:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002067:	75 09                	jne    c0002072 <put_lfn+0x76>
c0002069:	88 c8                	mov    al,cl
c000206b:	83 c8 40             	or     eax,0x40
c000206e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002072:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002076:	88 07                	mov    BYTE PTR [edi],al
c0002078:	83 c4 08             	add    esp,0x8
c000207b:	5b                   	pop    ebx
c000207c:	5e                   	pop    esi
c000207d:	5f                   	pop    edi
c000207e:	5d                   	pop    ebp
c000207f:	c3                   	ret    

c0002080 <gen_numname>:
c0002080:	57                   	push   edi
c0002081:	89 cf                	mov    edi,ecx
c0002083:	56                   	push   esi
c0002084:	b9 0b 00 00 00       	mov    ecx,0xb
c0002089:	53                   	push   ebx
c000208a:	89 c6                	mov    esi,eax
c000208c:	83 ec 10             	sub    esp,0x10
c000208f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002093:	e8 b3 fc ff ff       	call   c0001d4b <mem_cpy>
c0002098:	83 fb 05             	cmp    ebx,0x5
c000209b:	76 2d                	jbe    c00020ca <gen_numname+0x4a>
c000209d:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020a0:	66 85 c0             	test   ax,ax
c00020a3:	74 25                	je     c00020ca <gen_numname+0x4a>
c00020a5:	83 c7 02             	add    edi,0x2
c00020a8:	ba 10 00 00 00       	mov    edx,0x10
c00020ad:	01 db                	add    ebx,ebx
c00020af:	89 c1                	mov    ecx,eax
c00020b1:	66 d1 e8             	shr    ax,1
c00020b4:	83 e1 01             	and    ecx,0x1
c00020b7:	01 cb                	add    ebx,ecx
c00020b9:	0f ba e3 10          	bt     ebx,0x10
c00020bd:	73 06                	jae    c00020c5 <gen_numname+0x45>
c00020bf:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020c5:	4a                   	dec    edx
c00020c6:	75 e5                	jne    c00020ad <gen_numname+0x2d>
c00020c8:	eb d3                	jmp    c000209d <gen_numname+0x1d>
c00020ca:	b8 07 00 00 00       	mov    eax,0x7
c00020cf:	88 d9                	mov    cl,bl
c00020d1:	83 e1 0f             	and    ecx,0xf
c00020d4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020d7:	80 fa 39             	cmp    dl,0x39
c00020da:	76 03                	jbe    c00020df <gen_numname+0x5f>
c00020dc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020df:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020e2:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020e6:	89 da                	mov    edx,ebx
c00020e8:	c1 ea 04             	shr    edx,0x4
c00020eb:	83 fb 0f             	cmp    ebx,0xf
c00020ee:	76 06                	jbe    c00020f6 <gen_numname+0x76>
c00020f0:	89 c8                	mov    eax,ecx
c00020f2:	89 d3                	mov    ebx,edx
c00020f4:	eb d9                	jmp    c00020cf <gen_numname+0x4f>
c00020f6:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020fb:	31 d2                	xor    edx,edx
c00020fd:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002100:	8d 04 16             	lea    eax,[esi+edx*1]
c0002103:	39 ca                	cmp    edx,ecx
c0002105:	73 18                	jae    c000211f <gen_numname+0x9f>
c0002107:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000210a:	3c 20                	cmp    al,0x20
c000210c:	74 11                	je     c000211f <gen_numname+0x9f>
c000210e:	e8 8d fc ff ff       	call   c0001da0 <dbc_1st>
c0002113:	85 c0                	test   eax,eax
c0002115:	74 05                	je     c000211c <gen_numname+0x9c>
c0002117:	39 d3                	cmp    ebx,edx
c0002119:	74 04                	je     c000211f <gen_numname+0x9f>
c000211b:	42                   	inc    edx
c000211c:	42                   	inc    edx
c000211d:	eb e1                	jmp    c0002100 <gen_numname+0x80>
c000211f:	b0 20                	mov    al,0x20
c0002121:	83 f9 07             	cmp    ecx,0x7
c0002124:	77 05                	ja     c000212b <gen_numname+0xab>
c0002126:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000212a:	41                   	inc    ecx
c000212b:	42                   	inc    edx
c000212c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002130:	83 fa 07             	cmp    edx,0x7
c0002133:	76 ea                	jbe    c000211f <gen_numname+0x9f>
c0002135:	83 c4 10             	add    esp,0x10
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	c3                   	ret    

c000213c <sum_sfn>:
c000213c:	31 c9                	xor    ecx,ecx
c000213e:	31 d2                	xor    edx,edx
c0002140:	d0 ca                	ror    dl,1
c0002142:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002145:	41                   	inc    ecx
c0002146:	83 f9 0b             	cmp    ecx,0xb
c0002149:	75 f5                	jne    c0002140 <sum_sfn+0x4>
c000214b:	88 d0                	mov    al,dl
c000214d:	c3                   	ret    

c000214e <get_ldnumber>:
c000214e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002150:	85 d2                	test   edx,edx
c0002152:	74 14                	je     c0002168 <get_ldnumber+0x1a>
c0002154:	56                   	push   esi
c0002155:	53                   	push   ebx
c0002156:	89 d3                	mov    ebx,edx
c0002158:	43                   	inc    ebx
c0002159:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000215c:	80 f9 1f             	cmp    cl,0x1f
c000215f:	76 0d                	jbe    c000216e <get_ldnumber+0x20>
c0002161:	80 f9 3a             	cmp    cl,0x3a
c0002164:	75 f2                	jne    c0002158 <get_ldnumber+0xa>
c0002166:	eb 0a                	jmp    c0002172 <get_ldnumber+0x24>
c0002168:	83 c9 ff             	or     ecx,0xffffffff
c000216b:	89 c8                	mov    eax,ecx
c000216d:	c3                   	ret    
c000216e:	31 c9                	xor    ecx,ecx
c0002170:	eb 24                	jmp    c0002196 <get_ldnumber+0x48>
c0002172:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002175:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002178:	80 f9 09             	cmp    cl,0x9
c000217b:	77 16                	ja     c0002193 <get_ldnumber+0x45>
c000217d:	83 c2 02             	add    edx,0x2
c0002180:	83 c9 ff             	or     ecx,0xffffffff
c0002183:	39 d3                	cmp    ebx,edx
c0002185:	75 0f                	jne    c0002196 <get_ldnumber+0x48>
c0002187:	89 f2                	mov    edx,esi
c0002189:	89 18                	mov    DWORD PTR [eax],ebx
c000218b:	0f be ca             	movsx  ecx,dl
c000218e:	83 e9 30             	sub    ecx,0x30
c0002191:	eb 03                	jmp    c0002196 <get_ldnumber+0x48>
c0002193:	83 c9 ff             	or     ecx,0xffffffff
c0002196:	89 c8                	mov    eax,ecx
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	c3                   	ret    

c000219b <validate>:
c000219b:	56                   	push   esi
c000219c:	53                   	push   ebx
c000219d:	89 d6                	mov    esi,edx
c000219f:	51                   	push   ecx
c00021a0:	85 c0                	test   eax,eax
c00021a2:	75 09                	jne    c00021ad <validate+0x12>
c00021a4:	b8 09 00 00 00       	mov    eax,0x9
c00021a9:	31 c9                	xor    ecx,ecx
c00021ab:	eb 2f                	jmp    c00021dc <validate+0x41>
c00021ad:	89 c3                	mov    ebx,eax
c00021af:	8b 00                	mov    eax,DWORD PTR [eax]
c00021b1:	85 c0                	test   eax,eax
c00021b3:	74 ef                	je     c00021a4 <validate+0x9>
c00021b5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021b8:	74 ea                	je     c00021a4 <validate+0x9>
c00021ba:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021be:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021c2:	75 e0                	jne    c00021a4 <validate+0x9>
c00021c4:	83 ec 0c             	sub    esp,0xc
c00021c7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021cb:	50                   	push   eax
c00021cc:	e8 fd fa ff ff       	call   c0001cce <disk_status>
c00021d1:	83 c4 10             	add    esp,0x10
c00021d4:	a8 01                	test   al,0x1
c00021d6:	75 cc                	jne    c00021a4 <validate+0x9>
c00021d8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021da:	31 c0                	xor    eax,eax
c00021dc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021de:	5a                   	pop    edx
c00021df:	5b                   	pop    ebx
c00021e0:	5e                   	pop    esi
c00021e1:	c3                   	ret    

c00021e2 <sync_window>:
c00021e2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021e6:	74 58                	je     c0002240 <sync_window+0x5e>
c00021e8:	56                   	push   esi
c00021e9:	53                   	push   ebx
c00021ea:	8d 70 34             	lea    esi,[eax+0x34]
c00021ed:	51                   	push   ecx
c00021ee:	89 c3                	mov    ebx,eax
c00021f0:	6a 01                	push   0x1
c00021f2:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00021f5:	56                   	push   esi
c00021f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021fa:	50                   	push   eax
c00021fb:	e8 ea fa ff ff       	call   c0001cea <disk_write>
c0002200:	83 c4 10             	add    esp,0x10
c0002203:	ba 01 00 00 00       	mov    edx,0x1
c0002208:	85 c0                	test   eax,eax
c000220a:	75 2e                	jne    c000223a <sync_window+0x58>
c000220c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000220f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002212:	89 c1                	mov    ecx,eax
c0002214:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002218:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000221b:	39 d1                	cmp    ecx,edx
c000221d:	73 19                	jae    c0002238 <sync_window+0x56>
c000221f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002223:	75 13                	jne    c0002238 <sync_window+0x56>
c0002225:	6a 01                	push   0x1
c0002227:	01 d0                	add    eax,edx
c0002229:	50                   	push   eax
c000222a:	56                   	push   esi
c000222b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000222f:	50                   	push   eax
c0002230:	e8 b5 fa ff ff       	call   c0001cea <disk_write>
c0002235:	83 c4 10             	add    esp,0x10
c0002238:	31 d2                	xor    edx,edx
c000223a:	89 d0                	mov    eax,edx
c000223c:	5a                   	pop    edx
c000223d:	5b                   	pop    ebx
c000223e:	5e                   	pop    esi
c000223f:	c3                   	ret    
c0002240:	31 d2                	xor    edx,edx
c0002242:	89 d0                	mov    eax,edx
c0002244:	c3                   	ret    

c0002245 <move_window>:
c0002245:	57                   	push   edi
c0002246:	56                   	push   esi
c0002247:	31 f6                	xor    esi,esi
c0002249:	53                   	push   ebx
c000224a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000224d:	74 32                	je     c0002281 <move_window+0x3c>
c000224f:	89 c3                	mov    ebx,eax
c0002251:	89 d7                	mov    edi,edx
c0002253:	e8 8a ff ff ff       	call   c00021e2 <sync_window>
c0002258:	89 c6                	mov    esi,eax
c000225a:	85 c0                	test   eax,eax
c000225c:	75 23                	jne    c0002281 <move_window+0x3c>
c000225e:	6a 01                	push   0x1
c0002260:	8d 43 34             	lea    eax,[ebx+0x34]
c0002263:	57                   	push   edi
c0002264:	50                   	push   eax
c0002265:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002269:	50                   	push   eax
c000226a:	e8 65 fa ff ff       	call   c0001cd4 <disk_read>
c000226f:	83 c4 10             	add    esp,0x10
c0002272:	85 c0                	test   eax,eax
c0002274:	74 08                	je     c000227e <move_window+0x39>
c0002276:	be 01 00 00 00       	mov    esi,0x1
c000227b:	83 cf ff             	or     edi,0xffffffff
c000227e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002281:	89 f0                	mov    eax,esi
c0002283:	5b                   	pop    ebx
c0002284:	5e                   	pop    esi
c0002285:	5f                   	pop    edi
c0002286:	c3                   	ret    

c0002287 <check_fs>:
c0002287:	53                   	push   ebx
c0002288:	89 c3                	mov    ebx,eax
c000228a:	83 ec 08             	sub    esp,0x8
c000228d:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002291:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002298:	e8 a8 ff ff ff       	call   c0002245 <move_window>
c000229d:	ba 04 00 00 00       	mov    edx,0x4
c00022a2:	85 c0                	test   eax,eax
c00022a4:	75 68                	jne    c000230e <check_fs+0x87>
c00022a6:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00022ac:	e8 6e fa ff ff       	call   c0001d1f <ld_word>
c00022b1:	ba 03 00 00 00       	mov    edx,0x3
c00022b6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022ba:	75 52                	jne    c000230e <check_fs+0x87>
c00022bc:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022bf:	8d 50 18             	lea    edx,[eax+0x18]
c00022c2:	80 fa 01             	cmp    dl,0x1
c00022c5:	76 09                	jbe    c00022d0 <check_fs+0x49>
c00022c7:	ba 02 00 00 00       	mov    edx,0x2
c00022cc:	3c eb                	cmp    al,0xeb
c00022ce:	75 3e                	jne    c000230e <check_fs+0x87>
c00022d0:	ba 48 f2 01 c0       	mov    edx,0xc001f248
c00022d5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022d8:	b9 03 00 00 00       	mov    ecx,0x3
c00022dd:	e8 89 fa ff ff       	call   c0001d6b <mem_cmp>
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	85 c0                	test   eax,eax
c00022e6:	74 26                	je     c000230e <check_fs+0x87>
c00022e8:	ba 1c d0 01 c0       	mov    edx,0xc001d01c
c00022ed:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00022f3:	b9 05 00 00 00       	mov    ecx,0x5
c00022f8:	e8 6e fa ff ff       	call   c0001d6b <mem_cmp>
c00022fd:	31 d2                	xor    edx,edx
c00022ff:	85 c0                	test   eax,eax
c0002301:	74 0b                	je     c000230e <check_fs+0x87>
c0002303:	31 d2                	xor    edx,edx
c0002305:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002309:	0f 95 c2             	setne  dl
c000230c:	01 d2                	add    edx,edx
c000230e:	89 d0                	mov    eax,edx
c0002310:	83 c4 08             	add    esp,0x8
c0002313:	5b                   	pop    ebx
c0002314:	c3                   	ret    

c0002315 <find_volume>:
c0002315:	55                   	push   ebp
c0002316:	57                   	push   edi
c0002317:	56                   	push   esi
c0002318:	89 c6                	mov    esi,eax
c000231a:	53                   	push   ebx
c000231b:	89 d3                	mov    ebx,edx
c000231d:	83 ec 2c             	sub    esp,0x2c
c0002320:	31 d2                	xor    edx,edx
c0002322:	e8 60 ff ff ff       	call   c0002287 <check_fs>
c0002327:	83 f8 02             	cmp    eax,0x2
c000232a:	74 06                	je     c0002332 <find_volume+0x1d>
c000232c:	77 62                	ja     c0002390 <find_volume+0x7b>
c000232e:	85 db                	test   ebx,ebx
c0002330:	74 5e                	je     c0002390 <find_volume+0x7b>
c0002332:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002336:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000233c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002342:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002346:	89 cf                	mov    edi,ecx
c0002348:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000234c:	89 e8                	mov    eax,ebp
c000234e:	83 c5 10             	add    ebp,0x10
c0002351:	e8 d6 f9 ff ff       	call   c0001d2c <ld_dword>
c0002356:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000235a:	89 01                	mov    DWORD PTR [ecx],eax
c000235c:	83 c1 04             	add    ecx,0x4
c000235f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002363:	75 e3                	jne    c0002348 <find_volume+0x33>
c0002365:	31 ed                	xor    ebp,ebp
c0002367:	85 db                	test   ebx,ebx
c0002369:	74 03                	je     c000236e <find_volume+0x59>
c000236b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000236e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002371:	b8 03 00 00 00       	mov    eax,0x3
c0002376:	85 d2                	test   edx,edx
c0002378:	74 0c                	je     c0002386 <find_volume+0x71>
c000237a:	89 f0                	mov    eax,esi
c000237c:	e8 06 ff ff ff       	call   c0002287 <check_fs>
c0002381:	83 f8 01             	cmp    eax,0x1
c0002384:	76 0a                	jbe    c0002390 <find_volume+0x7b>
c0002386:	85 db                	test   ebx,ebx
c0002388:	75 06                	jne    c0002390 <find_volume+0x7b>
c000238a:	45                   	inc    ebp
c000238b:	83 fd 03             	cmp    ebp,0x3
c000238e:	76 de                	jbe    c000236e <find_volume+0x59>
c0002390:	83 c4 2c             	add    esp,0x2c
c0002393:	5b                   	pop    ebx
c0002394:	5e                   	pop    esi
c0002395:	5f                   	pop    edi
c0002396:	5d                   	pop    ebp
c0002397:	c3                   	ret    

c0002398 <mount_volume>:
c0002398:	55                   	push   ebp
c0002399:	89 d5                	mov    ebp,edx
c000239b:	57                   	push   edi
c000239c:	89 cf                	mov    edi,ecx
c000239e:	56                   	push   esi
c000239f:	53                   	push   ebx
c00023a0:	bb 0b 00 00 00       	mov    ebx,0xb
c00023a5:	83 ec 2c             	sub    esp,0x2c
c00023a8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00023ae:	e8 9b fd ff ff       	call   c000214e <get_ldnumber>
c00023b3:	85 c0                	test   eax,eax
c00023b5:	0f 88 d6 02 00 00    	js     c0002691 <mount_volume+0x2f9>
c00023bb:	8b 34 85 40 03 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdfcc0]
c00023c2:	89 c2                	mov    edx,eax
c00023c4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023c9:	85 f6                	test   esi,esi
c00023cb:	0f 84 c0 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c00023d1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023d4:	83 e7 fe             	and    edi,0xfffffffe
c00023d7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023da:	74 3a                	je     c0002416 <mount_volume+0x7e>
c00023dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023e0:	83 ec 0c             	sub    esp,0xc
c00023e3:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00023e7:	50                   	push   eax
c00023e8:	e8 e1 f8 ff ff       	call   c0001cce <disk_status>
c00023ed:	83 c4 10             	add    esp,0x10
c00023f0:	a8 01                	test   al,0x1
c00023f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00023f6:	75 1e                	jne    c0002416 <mount_volume+0x7e>
c00023f8:	31 db                	xor    ebx,ebx
c00023fa:	89 f9                	mov    ecx,edi
c00023fc:	84 c9                	test   cl,cl
c00023fe:	0f 84 8d 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002404:	a8 04                	test   al,0x4
c0002406:	0f 84 85 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c000240c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002411:	e9 7b 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002416:	83 ec 0c             	sub    esp,0xc
c0002419:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000241c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000241f:	0f b6 c2             	movzx  eax,dl
c0002422:	bb 03 00 00 00       	mov    ebx,0x3
c0002427:	50                   	push   eax
c0002428:	e8 a4 f8 ff ff       	call   c0001cd1 <disk_initialize>
c000242d:	83 c4 10             	add    esp,0x10
c0002430:	a8 01                	test   al,0x1
c0002432:	0f 85 59 02 00 00    	jne    c0002691 <mount_volume+0x2f9>
c0002438:	89 f9                	mov    ecx,edi
c000243a:	84 c9                	test   cl,cl
c000243c:	74 04                	je     c0002442 <mount_volume+0xaa>
c000243e:	a8 04                	test   al,0x4
c0002440:	75 ca                	jne    c000240c <mount_volume+0x74>
c0002442:	31 d2                	xor    edx,edx
c0002444:	89 f0                	mov    eax,esi
c0002446:	bb 01 00 00 00       	mov    ebx,0x1
c000244b:	e8 c5 fe ff ff       	call   c0002315 <find_volume>
c0002450:	83 f8 04             	cmp    eax,0x4
c0002453:	0f 84 38 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002459:	83 f8 01             	cmp    eax,0x1
c000245c:	76 0a                	jbe    c0002468 <mount_volume+0xd0>
c000245e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002463:	e9 29 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002468:	8d 46 3f             	lea    eax,[esi+0x3f]
c000246b:	e8 af f8 ff ff       	call   c0001d1f <ld_word>
c0002470:	66 3d 00 02          	cmp    ax,0x200
c0002474:	75 e8                	jne    c000245e <mount_volume+0xc6>
c0002476:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002479:	e8 a1 f8 ff ff       	call   c0001d1f <ld_word>
c000247e:	0f b7 c0             	movzx  eax,ax
c0002481:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002485:	85 c0                	test   eax,eax
c0002487:	75 0c                	jne    c0002495 <mount_volume+0xfd>
c0002489:	8d 46 58             	lea    eax,[esi+0x58]
c000248c:	e8 9b f8 ff ff       	call   c0001d2c <ld_dword>
c0002491:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002495:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002498:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c000249b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000249f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00024a3:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00024a6:	89 e8                	mov    eax,ebp
c00024a8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00024ab:	8d 45 ff             	lea    eax,[ebp-0x1]
c00024ae:	3c 01                	cmp    al,0x1
c00024b0:	77 ac                	ja     c000245e <mount_volume+0xc6>
c00024b2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024b6:	89 c3                	mov    ebx,eax
c00024b8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024bc:	66 85 c0             	test   ax,ax
c00024bf:	74 9d                	je     c000245e <mount_volume+0xc6>
c00024c1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024c4:	85 d8                	test   eax,ebx
c00024c6:	75 96                	jne    c000245e <mount_volume+0xc6>
c00024c8:	8d 46 45             	lea    eax,[esi+0x45]
c00024cb:	e8 4f f8 ff ff       	call   c0001d1f <ld_word>
c00024d0:	89 c7                	mov    edi,eax
c00024d2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024d6:	a8 0f                	test   al,0xf
c00024d8:	75 84                	jne    c000245e <mount_volume+0xc6>
c00024da:	8d 46 47             	lea    eax,[esi+0x47]
c00024dd:	e8 3d f8 ff ff       	call   c0001d1f <ld_word>
c00024e2:	0f b7 d0             	movzx  edx,ax
c00024e5:	85 d2                	test   edx,edx
c00024e7:	75 0a                	jne    c00024f3 <mount_volume+0x15b>
c00024e9:	8d 46 54             	lea    eax,[esi+0x54]
c00024ec:	e8 3b f8 ff ff       	call   c0001d2c <ld_dword>
c00024f1:	89 c2                	mov    edx,eax
c00024f3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f7:	8d 46 42             	lea    eax,[esi+0x42]
c00024fa:	e8 20 f8 ff ff       	call   c0001d1f <ld_word>
c00024ff:	66 85 c0             	test   ax,ax
c0002502:	0f 84 56 ff ff ff    	je     c000245e <mount_volume+0xc6>
c0002508:	89 e9                	mov    ecx,ebp
c000250a:	0f b7 c0             	movzx  eax,ax
c000250d:	0f b6 e9             	movzx  ebp,cl
c0002510:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002514:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002518:	89 f8                	mov    eax,edi
c000251a:	0f af cd             	imul   ecx,ebp
c000251d:	66 c1 e8 04          	shr    ax,0x4
c0002521:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002525:	0f b7 c0             	movzx  eax,ax
c0002528:	01 c8                	add    eax,ecx
c000252a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000252e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002532:	39 c2                	cmp    edx,eax
c0002534:	0f 82 24 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000253a:	29 c2                	sub    edx,eax
c000253c:	89 d5                	mov    ebp,edx
c000253e:	89 d0                	mov    eax,edx
c0002540:	31 d2                	xor    edx,edx
c0002542:	f7 f3                	div    ebx
c0002544:	39 dd                	cmp    ebp,ebx
c0002546:	0f 82 12 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000254c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002551:	0f 87 07 ff ff ff    	ja     c000245e <mount_volume+0xc6>
c0002557:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000255c:	0f 86 1f 01 00 00    	jbe    c0002681 <mount_volume+0x2e9>
c0002562:	bb 03 00 00 00       	mov    ebx,0x3
c0002567:	8d 68 02             	lea    ebp,[eax+0x2]
c000256a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000256e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002572:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002576:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002579:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000257c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002580:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002583:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002587:	83 fb 03             	cmp    ebx,0x3
c000258a:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000258d:	75 21                	jne    c00025b0 <mount_volume+0x218>
c000258f:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002592:	e8 88 f7 ff ff       	call   c0001d1f <ld_word>
c0002597:	66 09 c7             	or     di,ax
c000259a:	0f 85 be fe ff ff    	jne    c000245e <mount_volume+0xc6>
c00025a0:	8d 46 60             	lea    eax,[esi+0x60]
c00025a3:	c1 e5 02             	shl    ebp,0x2
c00025a6:	e8 81 f7 ff ff       	call   c0001d2c <ld_dword>
c00025ab:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025ae:	eb 22                	jmp    c00025d2 <mount_volume+0x23a>
c00025b0:	66 85 ff             	test   di,di
c00025b3:	0f 84 a5 fe ff ff    	je     c000245e <mount_volume+0xc6>
c00025b9:	01 c8                	add    eax,ecx
c00025bb:	83 fb 02             	cmp    ebx,0x2
c00025be:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025c1:	75 04                	jne    c00025c7 <mount_volume+0x22f>
c00025c3:	01 ed                	add    ebp,ebp
c00025c5:	eb 0b                	jmp    c00025d2 <mount_volume+0x23a>
c00025c7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025cb:	83 e5 01             	and    ebp,0x1
c00025ce:	d1 e8                	shr    eax,1
c00025d0:	01 c5                	add    ebp,eax
c00025d2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025d8:	c1 ed 09             	shr    ebp,0x9
c00025db:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025df:	0f 87 79 fe ff ff    	ja     c000245e <mount_volume+0xc6>
c00025e5:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00025ec:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00025f3:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00025f7:	83 fb 03             	cmp    ebx,0x3
c00025fa:	75 6e                	jne    c000266a <mount_volume+0x2d2>
c00025fc:	8d 46 64             	lea    eax,[esi+0x64]
c00025ff:	e8 1b f7 ff ff       	call   c0001d1f <ld_word>
c0002604:	66 48                	dec    ax
c0002606:	75 62                	jne    c000266a <mount_volume+0x2d2>
c0002608:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000260c:	89 f0                	mov    eax,esi
c000260e:	42                   	inc    edx
c000260f:	e8 31 fc ff ff       	call   c0002245 <move_window>
c0002614:	85 c0                	test   eax,eax
c0002616:	75 52                	jne    c000266a <mount_volume+0x2d2>
c0002618:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000261c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002622:	e8 f8 f6 ff ff       	call   c0001d1f <ld_word>
c0002627:	66 3d 55 aa          	cmp    ax,0xaa55
c000262b:	75 3d                	jne    c000266a <mount_volume+0x2d2>
c000262d:	8d 46 34             	lea    eax,[esi+0x34]
c0002630:	e8 f7 f6 ff ff       	call   c0001d2c <ld_dword>
c0002635:	3d 52 52 61 41       	cmp    eax,0x41615252
c000263a:	75 2e                	jne    c000266a <mount_volume+0x2d2>
c000263c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002642:	e8 e5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002647:	3d 72 72 41 61       	cmp    eax,0x61417272
c000264c:	75 1c                	jne    c000266a <mount_volume+0x2d2>
c000264e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002654:	e8 d3 f6 ff ff       	call   c0001d2c <ld_dword>
c0002659:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000265c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002662:	e8 c5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002667:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000266a:	66 a1 20 03 02 c0    	mov    ax,ds:0xc0020320
c0002670:	88 1e                	mov    BYTE PTR [esi],bl
c0002672:	40                   	inc    eax
c0002673:	31 db                	xor    ebx,ebx
c0002675:	66 a3 20 03 02 c0    	mov    ds:0xc0020320,ax
c000267b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000267f:	eb 10                	jmp    c0002691 <mount_volume+0x2f9>
c0002681:	31 db                	xor    ebx,ebx
c0002683:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002688:	0f 97 c3             	seta   bl
c000268b:	43                   	inc    ebx
c000268c:	e9 d6 fe ff ff       	jmp    c0002567 <mount_volume+0x1cf>
c0002691:	83 c4 2c             	add    esp,0x2c
c0002694:	89 d8                	mov    eax,ebx
c0002696:	5b                   	pop    ebx
c0002697:	5e                   	pop    esi
c0002698:	5f                   	pop    edi
c0002699:	5d                   	pop    ebp
c000269a:	c3                   	ret    

c000269b <put_fat>:
c000269b:	55                   	push   ebp
c000269c:	bd 02 00 00 00       	mov    ebp,0x2
c00026a1:	57                   	push   edi
c00026a2:	56                   	push   esi
c00026a3:	53                   	push   ebx
c00026a4:	83 ec 1c             	sub    esp,0x1c
c00026a7:	83 fa 01             	cmp    edx,0x1
c00026aa:	0f 86 31 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026b3:	0f 86 28 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b9:	89 c6                	mov    esi,eax
c00026bb:	89 cf                	mov    edi,ecx
c00026bd:	8a 00                	mov    al,BYTE PTR [eax]
c00026bf:	89 d3                	mov    ebx,edx
c00026c1:	3c 02                	cmp    al,0x2
c00026c3:	0f 84 ac 00 00 00    	je     c0002775 <put_fat+0xda>
c00026c9:	3c 03                	cmp    al,0x3
c00026cb:	0f 84 d1 00 00 00    	je     c00027a2 <put_fat+0x107>
c00026d1:	fe c8                	dec    al
c00026d3:	0f 85 08 01 00 00    	jne    c00027e1 <put_fat+0x146>
c00026d9:	89 d1                	mov    ecx,edx
c00026db:	89 f0                	mov    eax,esi
c00026dd:	d1 e9                	shr    ecx,1
c00026df:	01 d1                	add    ecx,edx
c00026e1:	89 ca                	mov    edx,ecx
c00026e3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00026e7:	c1 ea 09             	shr    edx,0x9
c00026ea:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00026ed:	e8 53 fb ff ff       	call   c0002245 <move_window>
c00026f2:	89 c5                	mov    ebp,eax
c00026f4:	85 c0                	test   eax,eax
c00026f6:	0f 85 e5 00 00 00    	jne    c00027e1 <put_fat+0x146>
c00026fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002700:	8d 46 34             	lea    eax,[esi+0x34]
c0002703:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002707:	8d 41 01             	lea    eax,[ecx+0x1]
c000270a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002710:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002714:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002718:	89 f8                	mov    eax,edi
c000271a:	83 e3 01             	and    ebx,0x1
c000271d:	74 0c                	je     c000272b <put_fat+0x90>
c000271f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002721:	89 f8                	mov    eax,edi
c0002723:	83 e2 0f             	and    edx,0xf
c0002726:	c1 e0 04             	shl    eax,0x4
c0002729:	09 d0                	or     eax,edx
c000272b:	88 01                	mov    BYTE PTR [ecx],al
c000272d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002731:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002735:	c1 ea 09             	shr    edx,0x9
c0002738:	89 f0                	mov    eax,esi
c000273a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000273d:	e8 03 fb ff ff       	call   c0002245 <move_window>
c0002742:	89 c5                	mov    ebp,eax
c0002744:	85 c0                	test   eax,eax
c0002746:	0f 85 95 00 00 00    	jne    c00027e1 <put_fat+0x146>
c000274c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002750:	25 ff 01 00 00       	and    eax,0x1ff
c0002755:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002759:	85 db                	test   ebx,ebx
c000275b:	74 07                	je     c0002764 <put_fat+0xc9>
c000275d:	c1 ef 04             	shr    edi,0x4
c0002760:	89 f9                	mov    ecx,edi
c0002762:	eb 0d                	jmp    c0002771 <put_fat+0xd6>
c0002764:	8a 08                	mov    cl,BYTE PTR [eax]
c0002766:	c1 ef 08             	shr    edi,0x8
c0002769:	83 e1 f0             	and    ecx,0xfffffff0
c000276c:	83 e7 0f             	and    edi,0xf
c000276f:	09 f9                	or     ecx,edi
c0002771:	88 08                	mov    BYTE PTR [eax],cl
c0002773:	eb 27                	jmp    c000279c <put_fat+0x101>
c0002775:	c1 ea 08             	shr    edx,0x8
c0002778:	89 f0                	mov    eax,esi
c000277a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000277d:	e8 c3 fa ff ff       	call   c0002245 <move_window>
c0002782:	89 c5                	mov    ebp,eax
c0002784:	85 c0                	test   eax,eax
c0002786:	75 59                	jne    c00027e1 <put_fat+0x146>
c0002788:	01 db                	add    ebx,ebx
c000278a:	0f b7 d7             	movzx  edx,di
c000278d:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002793:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002797:	e8 a8 f5 ff ff       	call   c0001d44 <st_word>
c000279c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00027a0:	eb 3f                	jmp    c00027e1 <put_fat+0x146>
c00027a2:	c1 ea 07             	shr    edx,0x7
c00027a5:	89 f0                	mov    eax,esi
c00027a7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027aa:	e8 96 fa ff ff       	call   c0002245 <move_window>
c00027af:	89 c5                	mov    ebp,eax
c00027b1:	85 c0                	test   eax,eax
c00027b3:	75 2c                	jne    c00027e1 <put_fat+0x146>
c00027b5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027bb:	c1 e3 02             	shl    ebx,0x2
c00027be:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027c4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027c8:	89 d8                	mov    eax,ebx
c00027ca:	e8 5d f5 ff ff       	call   c0001d2c <ld_dword>
c00027cf:	25 00 00 00 f0       	and    eax,0xf0000000
c00027d4:	09 f8                	or     eax,edi
c00027d6:	89 c2                	mov    edx,eax
c00027d8:	89 d8                	mov    eax,ebx
c00027da:	e8 69 f5 ff ff       	call   c0001d48 <st_dword>
c00027df:	eb bb                	jmp    c000279c <put_fat+0x101>
c00027e1:	83 c4 1c             	add    esp,0x1c
c00027e4:	89 e8                	mov    eax,ebp
c00027e6:	5b                   	pop    ebx
c00027e7:	5e                   	pop    esi
c00027e8:	5f                   	pop    edi
c00027e9:	5d                   	pop    ebp
c00027ea:	c3                   	ret    

c00027eb <dir_clear>:
c00027eb:	55                   	push   ebp
c00027ec:	57                   	push   edi
c00027ed:	56                   	push   esi
c00027ee:	89 c6                	mov    esi,eax
c00027f0:	53                   	push   ebx
c00027f1:	83 ec 1c             	sub    esp,0x1c
c00027f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027f8:	e8 e5 f9 ff ff       	call   c00021e2 <sync_window>
c00027fd:	85 c0                	test   eax,eax
c00027ff:	0f 85 c0 00 00 00    	jne    c00028c5 <dir_clear+0xda>
c0002805:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002809:	89 f0                	mov    eax,esi
c000280b:	e8 55 f7 ff ff       	call   c0001f65 <clst2sect>
c0002810:	31 d2                	xor    edx,edx
c0002812:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002815:	89 c5                	mov    ebp,eax
c0002817:	b9 00 02 00 00       	mov    ecx,0x200
c000281c:	8d 46 34             	lea    eax,[esi+0x34]
c000281f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002823:	e8 38 f5 ff ff       	call   c0001d60 <mem_set>
c0002828:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000282c:	c1 e3 09             	shl    ebx,0x9
c000282f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002835:	76 1b                	jbe    c0002852 <dir_clear+0x67>
c0002837:	bb 00 80 00 00       	mov    ebx,0x8000
c000283c:	eb 14                	jmp    c0002852 <dir_clear+0x67>
c000283e:	83 ec 0c             	sub    esp,0xc
c0002841:	53                   	push   ebx
c0002842:	e8 25 32 00 00       	call   c0005a6c <ff_memalloc>
c0002847:	83 c4 10             	add    esp,0x10
c000284a:	89 c7                	mov    edi,eax
c000284c:	85 c0                	test   eax,eax
c000284e:	75 7c                	jne    c00028cc <dir_clear+0xe1>
c0002850:	d1 eb                	shr    ebx,1
c0002852:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002858:	77 e4                	ja     c000283e <dir_clear+0x53>
c000285a:	31 db                	xor    ebx,ebx
c000285c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002860:	39 d8                	cmp    eax,ebx
c0002862:	76 53                	jbe    c00028b7 <dir_clear+0xcc>
c0002864:	6a 01                	push   0x1
c0002866:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002869:	50                   	push   eax
c000286a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000286e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002872:	50                   	push   eax
c0002873:	e8 72 f4 ff ff       	call   c0001cea <disk_write>
c0002878:	83 c4 10             	add    esp,0x10
c000287b:	85 c0                	test   eax,eax
c000287d:	75 38                	jne    c00028b7 <dir_clear+0xcc>
c000287f:	43                   	inc    ebx
c0002880:	eb da                	jmp    c000285c <dir_clear+0x71>
c0002882:	52                   	push   edx
c0002883:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002886:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000288a:	50                   	push   eax
c000288b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000288f:	57                   	push   edi
c0002890:	50                   	push   eax
c0002891:	e8 54 f4 ff ff       	call   c0001cea <disk_write>
c0002896:	83 c4 10             	add    esp,0x10
c0002899:	85 c0                	test   eax,eax
c000289b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000289f:	75 0a                	jne    c00028ab <dir_clear+0xc0>
c00028a1:	01 d3                	add    ebx,edx
c00028a3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028a7:	39 d8                	cmp    eax,ebx
c00028a9:	77 d7                	ja     c0002882 <dir_clear+0x97>
c00028ab:	83 ec 0c             	sub    esp,0xc
c00028ae:	57                   	push   edi
c00028af:	e8 d0 31 00 00       	call   c0005a84 <ff_memfree>
c00028b4:	83 c4 10             	add    esp,0x10
c00028b7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028bb:	39 d8                	cmp    eax,ebx
c00028bd:	0f 95 c0             	setne  al
c00028c0:	0f b6 c0             	movzx  eax,al
c00028c3:	eb 19                	jmp    c00028de <dir_clear+0xf3>
c00028c5:	b8 01 00 00 00       	mov    eax,0x1
c00028ca:	eb 12                	jmp    c00028de <dir_clear+0xf3>
c00028cc:	89 d9                	mov    ecx,ebx
c00028ce:	31 d2                	xor    edx,edx
c00028d0:	e8 8b f4 ff ff       	call   c0001d60 <mem_set>
c00028d5:	89 da                	mov    edx,ebx
c00028d7:	31 db                	xor    ebx,ebx
c00028d9:	c1 ea 09             	shr    edx,0x9
c00028dc:	eb c5                	jmp    c00028a3 <dir_clear+0xb8>
c00028de:	83 c4 1c             	add    esp,0x1c
c00028e1:	5b                   	pop    ebx
c00028e2:	5e                   	pop    esi
c00028e3:	5f                   	pop    edi
c00028e4:	5d                   	pop    ebp
c00028e5:	c3                   	ret    

c00028e6 <create_name>:
c00028e6:	55                   	push   ebp
c00028e7:	89 d5                	mov    ebp,edx
c00028e9:	57                   	push   edi
c00028ea:	89 c7                	mov    edi,eax
c00028ec:	56                   	push   esi
c00028ed:	31 f6                	xor    esi,esi
c00028ef:	53                   	push   ebx
c00028f0:	83 ec 3c             	sub    esp,0x3c
c00028f3:	8b 02                	mov    eax,DWORD PTR [edx]
c00028f5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00028f9:	8b 07                	mov    eax,DWORD PTR [edi]
c00028fb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00028fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002902:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002906:	e8 9b f4 ff ff       	call   c0001da6 <tchar2uni>
c000290b:	89 c3                	mov    ebx,eax
c000290d:	83 f8 ff             	cmp    eax,0xffffffff
c0002910:	75 0a                	jne    c000291c <create_name+0x36>
c0002912:	b8 06 00 00 00       	mov    eax,0x6
c0002917:	e9 9e 02 00 00       	jmp    c0002bba <create_name+0x2d4>
c000291c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002921:	76 0c                	jbe    c000292f <create_name+0x49>
c0002923:	c1 e8 10             	shr    eax,0x10
c0002926:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000292a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000292e:	46                   	inc    esi
c000292f:	66 83 fb 1f          	cmp    bx,0x1f
c0002933:	76 4f                	jbe    c0002984 <create_name+0x9e>
c0002935:	66 83 fb 5c          	cmp    bx,0x5c
c0002939:	74 35                	je     c0002970 <create_name+0x8a>
c000293b:	66 83 fb 2f          	cmp    bx,0x2f
c000293f:	74 2f                	je     c0002970 <create_name+0x8a>
c0002941:	66 83 fb 7f          	cmp    bx,0x7f
c0002945:	77 11                	ja     c0002958 <create_name+0x72>
c0002947:	0f b7 d3             	movzx  edx,bx
c000294a:	b8 22 d0 01 c0       	mov    eax,0xc001d022
c000294f:	e8 3a f4 ff ff       	call   c0001d8e <chk_chr>
c0002954:	85 c0                	test   eax,eax
c0002956:	75 ba                	jne    c0002912 <create_name+0x2c>
c0002958:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000295e:	77 b2                	ja     c0002912 <create_name+0x2c>
c0002960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002964:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002968:	46                   	inc    esi
c0002969:	eb 97                	jmp    c0002902 <create_name+0x1c>
c000296b:	40                   	inc    eax
c000296c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002970:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002974:	8a 10                	mov    dl,BYTE PTR [eax]
c0002976:	80 fa 2f             	cmp    dl,0x2f
c0002979:	74 f0                	je     c000296b <create_name+0x85>
c000297b:	80 fa 5c             	cmp    dl,0x5c
c000297e:	74 eb                	je     c000296b <create_name+0x85>
c0002980:	31 db                	xor    ebx,ebx
c0002982:	eb 02                	jmp    c0002986 <create_name+0xa0>
c0002984:	b3 04                	mov    bl,0x4
c0002986:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000298a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000298d:	85 f6                	test   esi,esi
c000298f:	74 18                	je     c00029a9 <create_name+0xc3>
c0002991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002995:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c000299a:	66 83 f8 20          	cmp    ax,0x20
c000299e:	74 06                	je     c00029a6 <create_name+0xc0>
c00029a0:	66 83 f8 2e          	cmp    ax,0x2e
c00029a4:	75 03                	jne    c00029a9 <create_name+0xc3>
c00029a6:	4e                   	dec    esi
c00029a7:	eb e4                	jmp    c000298d <create_name+0xa7>
c00029a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ad:	31 ed                	xor    ebp,ebp
c00029af:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029b5:	85 f6                	test   esi,esi
c00029b7:	0f 84 55 ff ff ff    	je     c0002912 <create_name+0x2c>
c00029bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029c1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029c4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029c8:	66 83 f8 20          	cmp    ax,0x20
c00029cc:	75 04                	jne    c00029d2 <create_name+0xec>
c00029ce:	89 d5                	mov    ebp,edx
c00029d0:	eb eb                	jmp    c00029bd <create_name+0xd7>
c00029d2:	85 ed                	test   ebp,ebp
c00029d4:	75 06                	jne    c00029dc <create_name+0xf6>
c00029d6:	66 83 f8 2e          	cmp    ax,0x2e
c00029da:	75 08                	jne    c00029e4 <create_name+0xfe>
c00029dc:	83 cb 03             	or     ebx,0x3
c00029df:	eb 03                	jmp    c00029e4 <create_name+0xfe>
c00029e1:	4e                   	dec    esi
c00029e2:	74 0c                	je     c00029f0 <create_name+0x10a>
c00029e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029e8:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c00029ee:	75 f1                	jne    c00029e1 <create_name+0xfb>
c00029f0:	b9 0b 00 00 00       	mov    ecx,0xb
c00029f5:	8d 47 20             	lea    eax,[edi+0x20]
c00029f8:	ba 20 00 00 00       	mov    edx,0x20
c00029fd:	e8 5e f3 ff ff       	call   c0001d60 <mem_set>
c0002a02:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002a0a:	31 c9                	xor    ecx,ecx
c0002a0c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a11:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a1c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a20:	66 85 ed             	test   bp,bp
c0002a23:	0f 84 30 01 00 00    	je     c0002b59 <create_name+0x273>
c0002a29:	66 83 fd 20          	cmp    bp,0x20
c0002a2d:	74 10                	je     c0002a3f <create_name+0x159>
c0002a2f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a33:	75 13                	jne    c0002a48 <create_name+0x162>
c0002a35:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a39:	0f 84 6b 01 00 00    	je     c0002baa <create_name+0x2c4>
c0002a3f:	83 cb 03             	or     ebx,0x3
c0002a42:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a46:	eb c9                	jmp    c0002a11 <create_name+0x12b>
c0002a48:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a4c:	73 0b                	jae    c0002a59 <create_name+0x173>
c0002a4e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a52:	75 47                	jne    c0002a9b <create_name+0x1b5>
c0002a54:	e9 51 01 00 00       	jmp    c0002baa <create_name+0x2c4>
c0002a59:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a5e:	75 10                	jne    c0002a70 <create_name+0x18a>
c0002a60:	83 cb 03             	or     ebx,0x3
c0002a63:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a6b:	e9 e9 00 00 00       	jmp    c0002b59 <create_name+0x273>
c0002a70:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a74:	74 0d                	je     c0002a83 <create_name+0x19d>
c0002a76:	83 cb 03             	or     ebx,0x3
c0002a79:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a7d:	0f 87 d6 00 00 00    	ja     c0002b59 <create_name+0x273>
c0002a83:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002a88:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002a8c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a94:	b9 08 00 00 00       	mov    ecx,0x8
c0002a99:	eb a7                	jmp    c0002a42 <create_name+0x15c>
c0002a9b:	66 83 fd 7f          	cmp    bp,0x7f
c0002a9f:	76 68                	jbe    c0002b09 <create_name+0x223>
c0002aa1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002aa5:	88 da                	mov    dl,bl
c0002aa7:	83 ca 02             	or     edx,0x2
c0002aaa:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002aae:	50                   	push   eax
c0002aaf:	50                   	push   eax
c0002ab0:	68 b5 01 00 00       	push   0x1b5
c0002ab5:	55                   	push   ebp
c0002ab6:	e8 e1 2f 00 00       	call   c0005a9c <ff_uni2oem>
c0002abb:	83 c4 10             	add    esp,0x10
c0002abe:	89 c5                	mov    ebp,eax
c0002ac0:	a8 80                	test   al,0x80
c0002ac2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ac6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aca:	74 0c                	je     c0002ad8 <create_name+0x1f2>
c0002acc:	83 e5 7f             	and    ebp,0x7f
c0002acf:	0f b6 ad e0 d0 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe2f20]
c0002ad6:	eb 2a                	jmp    c0002b02 <create_name+0x21c>
c0002ad8:	66 3d ff 00          	cmp    ax,0xff
c0002adc:	76 24                	jbe    c0002b02 <create_name+0x21c>
c0002ade:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ae2:	48                   	dec    eax
c0002ae3:	39 c8                	cmp    eax,ecx
c0002ae5:	77 0c                	ja     c0002af3 <create_name+0x20d>
c0002ae7:	83 cb 03             	or     ebx,0x3
c0002aea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002aee:	e9 4f ff ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002af3:	89 e8                	mov    eax,ebp
c0002af5:	88 d3                	mov    bl,dl
c0002af7:	66 c1 e8 08          	shr    ax,0x8
c0002afb:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002aff:	41                   	inc    ecx
c0002b00:	eb 4b                	jmp    c0002b4d <create_name+0x267>
c0002b02:	88 d3                	mov    bl,dl
c0002b04:	66 85 ed             	test   bp,bp
c0002b07:	74 19                	je     c0002b22 <create_name+0x23c>
c0002b09:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b0d:	0f b7 d5             	movzx  edx,bp
c0002b10:	b8 2b d0 01 c0       	mov    eax,0xc001d02b
c0002b15:	e8 74 f2 ff ff       	call   c0001d8e <chk_chr>
c0002b1a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b1e:	85 c0                	test   eax,eax
c0002b20:	74 0a                	je     c0002b2c <create_name+0x246>
c0002b22:	83 cb 03             	or     ebx,0x3
c0002b25:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b2a:	eb 21                	jmp    c0002b4d <create_name+0x267>
c0002b2c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b2f:	66 83 f8 19          	cmp    ax,0x19
c0002b33:	77 07                	ja     c0002b3c <create_name+0x256>
c0002b35:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b3a:	eb 11                	jmp    c0002b4d <create_name+0x267>
c0002b3c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b3f:	66 83 f8 19          	cmp    ax,0x19
c0002b43:	77 08                	ja     c0002b4d <create_name+0x267>
c0002b45:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b4a:	83 ed 20             	sub    ebp,0x20
c0002b4d:	89 e8                	mov    eax,ebp
c0002b4f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b53:	41                   	inc    ecx
c0002b54:	e9 e9 fe ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002b59:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b5d:	75 04                	jne    c0002b63 <create_name+0x27d>
c0002b5f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b63:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b68:	75 05                	jne    c0002b6f <create_name+0x289>
c0002b6a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b6f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b73:	83 e0 0c             	and    eax,0xc
c0002b76:	3c 0c                	cmp    al,0xc
c0002b78:	74 0b                	je     c0002b85 <create_name+0x29f>
c0002b7a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b7e:	83 e0 03             	and    eax,0x3
c0002b81:	3c 03                	cmp    al,0x3
c0002b83:	75 05                	jne    c0002b8a <create_name+0x2a4>
c0002b85:	83 cb 02             	or     ebx,0x2
c0002b88:	eb 19                	jmp    c0002ba3 <create_name+0x2bd>
c0002b8a:	f6 c3 02             	test   bl,0x2
c0002b8d:	75 14                	jne    c0002ba3 <create_name+0x2bd>
c0002b8f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002b94:	74 03                	je     c0002b99 <create_name+0x2b3>
c0002b96:	83 cb 10             	or     ebx,0x10
c0002b99:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002b9e:	74 03                	je     c0002ba3 <create_name+0x2bd>
c0002ba0:	83 cb 08             	or     ebx,0x8
c0002ba3:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002ba6:	31 c0                	xor    eax,eax
c0002ba8:	eb 10                	jmp    c0002bba <create_name+0x2d4>
c0002baa:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002baf:	0f 85 ce fe ff ff    	jne    c0002a83 <create_name+0x19d>
c0002bb5:	e9 a6 fe ff ff       	jmp    c0002a60 <create_name+0x17a>
c0002bba:	83 c4 3c             	add    esp,0x3c
c0002bbd:	5b                   	pop    ebx
c0002bbe:	5e                   	pop    esi
c0002bbf:	5f                   	pop    edi
c0002bc0:	5d                   	pop    ebp
c0002bc1:	c3                   	ret    

c0002bc2 <cmp_lfn>:
c0002bc2:	55                   	push   ebp
c0002bc3:	57                   	push   edi
c0002bc4:	89 d7                	mov    edi,edx
c0002bc6:	56                   	push   esi
c0002bc7:	53                   	push   ebx
c0002bc8:	83 ec 1c             	sub    esp,0x1c
c0002bcb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bcf:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bd2:	e8 48 f1 ff ff       	call   c0001d1f <ld_word>
c0002bd7:	66 85 c0             	test   ax,ax
c0002bda:	74 07                	je     c0002be3 <cmp_lfn+0x21>
c0002bdc:	31 c0                	xor    eax,eax
c0002bde:	e9 9a 00 00 00       	jmp    c0002c7d <cmp_lfn+0xbb>
c0002be3:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002be5:	bd 01 00 00 00       	mov    ebp,0x1
c0002bea:	83 e3 3f             	and    ebx,0x3f
c0002bed:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002bf5:	4b                   	dec    ebx
c0002bf6:	6b db 0d             	imul   ebx,ebx,0xd
c0002bf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bfd:	0f b6 80 60 d1 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe2ea0]
c0002c04:	01 f8                	add    eax,edi
c0002c06:	e8 14 f1 ff ff       	call   c0001d1f <ld_word>
c0002c0b:	66 85 ed             	test   bp,bp
c0002c0e:	89 c6                	mov    esi,eax
c0002c10:	74 3c                	je     c0002c4e <cmp_lfn+0x8c>
c0002c12:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c18:	77 c2                	ja     c0002bdc <cmp_lfn+0x1a>
c0002c1a:	83 ec 0c             	sub    esp,0xc
c0002c1d:	0f b7 c0             	movzx  eax,ax
c0002c20:	50                   	push   eax
c0002c21:	e8 8e 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c26:	89 c5                	mov    ebp,eax
c0002c28:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c2b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c33:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c37:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c3a:	e8 75 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c3f:	83 c4 10             	add    esp,0x10
c0002c42:	39 c5                	cmp    ebp,eax
c0002c44:	75 96                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c46:	89 f5                	mov    ebp,esi
c0002c48:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c4c:	eb 04                	jmp    c0002c52 <cmp_lfn+0x90>
c0002c4e:	66 46                	inc    si
c0002c50:	75 8a                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c52:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c56:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c5b:	75 9c                	jne    c0002bf9 <cmp_lfn+0x37>
c0002c5d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c60:	74 16                	je     c0002c78 <cmp_lfn+0xb6>
c0002c62:	66 85 ed             	test   bp,bp
c0002c65:	74 11                	je     c0002c78 <cmp_lfn+0xb6>
c0002c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c6b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c70:	0f 94 c0             	sete   al
c0002c73:	0f b6 c0             	movzx  eax,al
c0002c76:	eb 05                	jmp    c0002c7d <cmp_lfn+0xbb>
c0002c78:	b8 01 00 00 00       	mov    eax,0x1
c0002c7d:	83 c4 1c             	add    esp,0x1c
c0002c80:	5b                   	pop    ebx
c0002c81:	5e                   	pop    esi
c0002c82:	5f                   	pop    edi
c0002c83:	5d                   	pop    ebp
c0002c84:	c3                   	ret    

c0002c85 <sync_fs>:
c0002c85:	56                   	push   esi
c0002c86:	53                   	push   ebx
c0002c87:	53                   	push   ebx
c0002c88:	89 c3                	mov    ebx,eax
c0002c8a:	e8 53 f5 ff ff       	call   c00021e2 <sync_window>
c0002c8f:	85 c0                	test   eax,eax
c0002c91:	0f 85 9a 00 00 00    	jne    c0002d31 <sync_fs+0xac>
c0002c97:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002c9a:	75 7b                	jne    c0002d17 <sync_fs+0x92>
c0002c9c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002ca0:	75 75                	jne    c0002d17 <sync_fs+0x92>
c0002ca2:	b9 00 02 00 00       	mov    ecx,0x200
c0002ca7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002caa:	31 d2                	xor    edx,edx
c0002cac:	89 f0                	mov    eax,esi
c0002cae:	e8 ad f0 ff ff       	call   c0001d60 <mem_set>
c0002cb3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002cb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cbe:	e8 81 f0 ff ff       	call   c0001d44 <st_word>
c0002cc3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002cc8:	89 f0                	mov    eax,esi
c0002cca:	e8 79 f0 ff ff       	call   c0001d48 <st_dword>
c0002ccf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cd5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cda:	e8 69 f0 ff ff       	call   c0001d48 <st_dword>
c0002cdf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002ce2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002ce8:	e8 5b f0 ff ff       	call   c0001d48 <st_dword>
c0002ced:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002cf0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002cf6:	e8 4d f0 ff ff       	call   c0001d48 <st_dword>
c0002cfb:	6a 01                	push   0x1
c0002cfd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002d00:	40                   	inc    eax
c0002d01:	50                   	push   eax
c0002d02:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002d05:	56                   	push   esi
c0002d06:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d0a:	50                   	push   eax
c0002d0b:	e8 da ef ff ff       	call   c0001cea <disk_write>
c0002d10:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d14:	83 c4 10             	add    esp,0x10
c0002d17:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d1b:	51                   	push   ecx
c0002d1c:	6a 00                	push   0x0
c0002d1e:	6a 00                	push   0x0
c0002d20:	50                   	push   eax
c0002d21:	e8 da ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d26:	83 c4 10             	add    esp,0x10
c0002d29:	85 c0                	test   eax,eax
c0002d2b:	0f 95 c0             	setne  al
c0002d2e:	0f b6 c0             	movzx  eax,al
c0002d31:	5a                   	pop    edx
c0002d32:	5b                   	pop    ebx
c0002d33:	5e                   	pop    esi
c0002d34:	c3                   	ret    

c0002d35 <create_partition>:
c0002d35:	55                   	push   ebp
c0002d36:	0f b6 c0             	movzx  eax,al
c0002d39:	57                   	push   edi
c0002d3a:	56                   	push   esi
c0002d3b:	53                   	push   ebx
c0002d3c:	83 ec 40             	sub    esp,0x40
c0002d3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d47:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d4b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d4f:	50                   	push   eax
c0002d50:	6a 01                	push   0x1
c0002d52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d56:	e8 a5 ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d5b:	83 c4 10             	add    esp,0x10
c0002d5e:	85 c0                	test   eax,eax
c0002d60:	0f 85 69 01 00 00    	jne    c0002ecf <create_partition+0x19a>
c0002d66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d6a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d73:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d78:	31 d2                	xor    edx,edx
c0002d7a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d83:	f7 f3                	div    ebx
c0002d85:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002d8a:	76 0c                	jbe    c0002d98 <create_partition+0x63>
c0002d8c:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002d90:	49                   	dec    ecx
c0002d91:	75 e5                	jne    c0002d78 <create_partition+0x43>
c0002d93:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002d98:	b9 00 02 00 00       	mov    ecx,0x200
c0002d9d:	31 d2                	xor    edx,edx
c0002d9f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002da3:	e8 b8 ef ff ff       	call   c0001d60 <mem_set>
c0002da8:	b9 64 00 00 00       	mov    ecx,0x64
c0002dad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002db1:	31 d2                	xor    edx,edx
c0002db3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002dbb:	f7 f1                	div    ecx
c0002dbd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002dc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002dc6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dca:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002dd0:	85 c9                	test   ecx,ecx
c0002dd2:	75 34                	jne    c0002e08 <create_partition+0xd3>
c0002dd4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dd8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ddd:	05 fe 01 00 00       	add    eax,0x1fe
c0002de2:	e8 5d ef ff ff       	call   c0001d44 <st_word>
c0002de7:	6a 01                	push   0x1
c0002de9:	6a 00                	push   0x0
c0002deb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002def:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002df3:	e8 f2 ee ff ff       	call   c0001cea <disk_write>
c0002df8:	83 c4 10             	add    esp,0x10
c0002dfb:	85 c0                	test   eax,eax
c0002dfd:	0f 95 c0             	setne  al
c0002e00:	0f b6 c0             	movzx  eax,al
c0002e03:	e9 cc 00 00 00       	jmp    c0002ed4 <create_partition+0x19f>
c0002e08:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002e0c:	76 c6                	jbe    c0002dd4 <create_partition+0x9f>
c0002e0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e12:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e16:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e19:	83 fe 64             	cmp    esi,0x64
c0002e1c:	77 0d                	ja     c0002e2b <create_partition+0xf6>
c0002e1e:	74 07                	je     c0002e27 <create_partition+0xf2>
c0002e20:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e25:	eb 04                	jmp    c0002e2b <create_partition+0xf6>
c0002e27:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e2b:	31 c0                	xor    eax,eax
c0002e2d:	89 f2                	mov    edx,esi
c0002e2f:	01 ca                	add    edx,ecx
c0002e31:	0f 92 c0             	setb   al
c0002e34:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e38:	77 04                	ja     c0002e3e <create_partition+0x109>
c0002e3a:	85 c0                	test   eax,eax
c0002e3c:	74 08                	je     c0002e46 <create_partition+0x111>
c0002e3e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e42:	29 ce                	sub    esi,ecx
c0002e44:	eb 04                	jmp    c0002e4a <create_partition+0x115>
c0002e46:	85 f6                	test   esi,esi
c0002e48:	74 8a                	je     c0002dd4 <create_partition+0x9f>
c0002e4a:	89 ca                	mov    edx,ecx
c0002e4c:	89 d8                	mov    eax,ebx
c0002e4e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e53:	e8 f0 ee ff ff       	call   c0001d48 <st_dword>
c0002e58:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e5b:	89 f2                	mov    edx,esi
c0002e5d:	83 c3 10             	add    ebx,0x10
c0002e60:	e8 e3 ee ff ff       	call   c0001d48 <st_dword>
c0002e65:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e6a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e6e:	31 d2                	xor    edx,edx
c0002e70:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e73:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e77:	89 c8                	mov    eax,ecx
c0002e79:	01 f1                	add    ecx,esi
c0002e7b:	f7 f5                	div    ebp
c0002e7d:	89 d5                	mov    ebp,edx
c0002e7f:	31 d2                	xor    edx,edx
c0002e81:	45                   	inc    ebp
c0002e82:	f7 f7                	div    edi
c0002e84:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002e87:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002e8a:	89 c2                	mov    edx,eax
c0002e8c:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002e8f:	c1 ea 02             	shr    edx,0x2
c0002e92:	83 e2 c0             	and    edx,0xffffffc0
c0002e95:	09 ea                	or     edx,ebp
c0002e97:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e9c:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	f7 f5                	div    ebp
c0002ea3:	89 d6                	mov    esi,edx
c0002ea5:	31 d2                	xor    edx,edx
c0002ea7:	46                   	inc    esi
c0002ea8:	f7 f7                	div    edi
c0002eaa:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002ead:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002eb0:	89 c7                	mov    edi,eax
c0002eb2:	c1 ef 02             	shr    edi,0x2
c0002eb5:	83 e7 c0             	and    edi,0xffffffc0
c0002eb8:	09 fe                	or     esi,edi
c0002eba:	89 f2                	mov    edx,esi
c0002ebc:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002ebf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002ec4:	0f 85 06 ff ff ff    	jne    c0002dd0 <create_partition+0x9b>
c0002eca:	e9 05 ff ff ff       	jmp    c0002dd4 <create_partition+0x9f>
c0002ecf:	b8 01 00 00 00       	mov    eax,0x1
c0002ed4:	83 c4 3c             	add    esp,0x3c
c0002ed7:	5b                   	pop    ebx
c0002ed8:	5e                   	pop    esi
c0002ed9:	5f                   	pop    edi
c0002eda:	5d                   	pop    ebp
c0002edb:	c3                   	ret    

c0002edc <get_fileinfo>:
c0002edc:	55                   	push   ebp
c0002edd:	57                   	push   edi
c0002ede:	56                   	push   esi
c0002edf:	53                   	push   ebx
c0002ee0:	83 ec 1c             	sub    esp,0x1c
c0002ee3:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ee5:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002ee9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002eed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002ef1:	0f 84 c1 01 00 00    	je     c00030b8 <get_fileinfo+0x1dc>
c0002ef7:	89 d3                	mov    ebx,edx
c0002ef9:	89 c6                	mov    esi,eax
c0002efb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002eff:	74 6a                	je     c0002f6b <get_fileinfo+0x8f>
c0002f01:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002f09:	31 ed                	xor    ebp,ebp
c0002f0b:	31 ff                	xor    edi,edi
c0002f0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f11:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f15:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f18:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f1c:	66 85 d2             	test   dx,dx
c0002f1f:	74 3e                	je     c0002f5f <get_fileinfo+0x83>
c0002f21:	66 85 ed             	test   bp,bp
c0002f24:	75 0c                	jne    c0002f32 <get_fileinfo+0x56>
c0002f26:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f2c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f30:	76 22                	jbe    c0002f54 <get_fileinfo+0x78>
c0002f32:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f37:	89 e8                	mov    eax,ebp
c0002f39:	29 f9                	sub    ecx,edi
c0002f3b:	c1 e0 10             	shl    eax,0x10
c0002f3e:	09 d0                	or     eax,edx
c0002f40:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f44:	e8 23 ef ff ff       	call   c0001e6c <put_utf>
c0002f49:	84 c0                	test   al,al
c0002f4b:	74 10                	je     c0002f5d <get_fileinfo+0x81>
c0002f4d:	0f b6 c0             	movzx  eax,al
c0002f50:	31 d2                	xor    edx,edx
c0002f52:	01 c7                	add    edi,eax
c0002f54:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f59:	89 d5                	mov    ebp,edx
c0002f5b:	eb b0                	jmp    c0002f0d <get_fileinfo+0x31>
c0002f5d:	31 ff                	xor    edi,edi
c0002f5f:	66 85 ed             	test   bp,bp
c0002f62:	74 02                	je     c0002f66 <get_fileinfo+0x8a>
c0002f64:	31 ff                	xor    edi,edi
c0002f66:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f6b:	31 ff                	xor    edi,edi
c0002f6d:	31 c9                	xor    ecx,ecx
c0002f6f:	83 f9 0a             	cmp    ecx,0xa
c0002f72:	0f 87 ad 00 00 00    	ja     c0003025 <get_fileinfo+0x149>
c0002f78:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f7b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f7e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002f82:	66 83 fa 20          	cmp    dx,0x20
c0002f86:	0f 84 92 00 00 00    	je     c000301e <get_fileinfo+0x142>
c0002f8c:	66 83 fa 05          	cmp    dx,0x5
c0002f90:	75 05                	jne    c0002f97 <get_fileinfo+0xbb>
c0002f92:	ba e5 00 00 00       	mov    edx,0xe5
c0002f97:	83 ff 0b             	cmp    edi,0xb
c0002f9a:	77 0b                	ja     c0002fa7 <get_fileinfo+0xcb>
c0002f9c:	83 fd 09             	cmp    ebp,0x9
c0002f9f:	75 06                	jne    c0002fa7 <get_fileinfo+0xcb>
c0002fa1:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002fa6:	47                   	inc    edi
c0002fa7:	0f b7 c2             	movzx  eax,dx
c0002faa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002fae:	e8 ed ed ff ff       	call   c0001da0 <dbc_1st>
c0002fb3:	85 c0                	test   eax,eax
c0002fb5:	74 2f                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fb7:	83 fd 08             	cmp    ebp,0x8
c0002fba:	74 2a                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fbc:	83 fd 0b             	cmp    ebp,0xb
c0002fbf:	74 25                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fc1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fc4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fc8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fcc:	e8 d2 ed ff ff       	call   c0001da3 <dbc_2nd>
c0002fd1:	85 c0                	test   eax,eax
c0002fd3:	74 11                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002fd9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002fde:	c1 e2 08             	shl    edx,0x8
c0002fe1:	8d 69 02             	lea    ebp,[ecx+0x2]
c0002fe4:	09 c2                	or     edx,eax
c0002fe6:	0f b7 d2             	movzx  edx,dx
c0002fe9:	50                   	push   eax
c0002fea:	50                   	push   eax
c0002feb:	68 b5 01 00 00       	push   0x1b5
c0002ff0:	52                   	push   edx
c0002ff1:	e8 46 2b 00 00       	call   c0005b3c <ff_oem2uni>
c0002ff6:	83 c4 10             	add    esp,0x10
c0002ff9:	66 85 c0             	test   ax,ax
c0002ffc:	75 04                	jne    c0003002 <get_fileinfo+0x126>
c0002ffe:	31 ff                	xor    edi,edi
c0003000:	eb 23                	jmp    c0003025 <get_fileinfo+0x149>
c0003002:	b9 0c 00 00 00       	mov    ecx,0xc
c0003007:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000300b:	29 f9                	sub    ecx,edi
c000300d:	0f b7 c0             	movzx  eax,ax
c0003010:	e8 57 ee ff ff       	call   c0001e6c <put_utf>
c0003015:	84 c0                	test   al,al
c0003017:	74 e5                	je     c0002ffe <get_fileinfo+0x122>
c0003019:	0f b6 c0             	movzx  eax,al
c000301c:	01 c7                	add    edi,eax
c000301e:	89 e9                	mov    ecx,ebp
c0003020:	e9 4a ff ff ff       	jmp    c0002f6f <get_fileinfo+0x93>
c0003025:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000302a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000302e:	75 54                	jne    c0003084 <get_fileinfo+0x1a8>
c0003030:	85 ff                	test   edi,edi
c0003032:	75 0b                	jne    c000303f <get_fileinfo+0x163>
c0003034:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003038:	ba 01 00 00 00       	mov    edx,0x1
c000303d:	eb 33                	jmp    c0003072 <get_fileinfo+0x196>
c000303f:	b1 08                	mov    cl,0x8
c0003041:	31 d2                	xor    edx,edx
c0003043:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003049:	84 c0                	test   al,al
c000304b:	74 25                	je     c0003072 <get_fileinfo+0x196>
c000304d:	66 83 f8 2e          	cmp    ax,0x2e
c0003051:	74 16                	je     c0003069 <get_fileinfo+0x18d>
c0003053:	8d 78 bf             	lea    edi,[eax-0x41]
c0003056:	66 83 ff 19          	cmp    di,0x19
c000305a:	77 0f                	ja     c000306b <get_fileinfo+0x18f>
c000305c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000305f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003062:	74 07                	je     c000306b <get_fileinfo+0x18f>
c0003064:	83 c0 20             	add    eax,0x20
c0003067:	eb 02                	jmp    c000306b <get_fileinfo+0x18f>
c0003069:	b1 10                	mov    cl,0x10
c000306b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000306f:	42                   	inc    edx
c0003070:	eb d1                	jmp    c0003043 <get_fileinfo+0x167>
c0003072:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003077:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000307a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000307e:	75 04                	jne    c0003084 <get_fileinfo+0x1a8>
c0003080:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003084:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003087:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000308a:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c000308d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003090:	83 c0 1c             	add    eax,0x1c
c0003093:	e8 94 ec ff ff       	call   c0001d2c <ld_dword>
c0003098:	89 03                	mov    DWORD PTR [ebx],eax
c000309a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309d:	83 c0 16             	add    eax,0x16
c00030a0:	e8 7a ec ff ff       	call   c0001d1f <ld_word>
c00030a5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00030a9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030ac:	83 c0 18             	add    eax,0x18
c00030af:	e8 6b ec ff ff       	call   c0001d1f <ld_word>
c00030b4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030b8:	83 c4 1c             	add    esp,0x1c
c00030bb:	5b                   	pop    ebx
c00030bc:	5e                   	pop    esi
c00030bd:	5f                   	pop    edi
c00030be:	5d                   	pop    ebp
c00030bf:	c3                   	ret    

c00030c0 <ld_clust.isra.0>:
c00030c0:	56                   	push   esi
c00030c1:	89 c6                	mov    esi,eax
c00030c3:	53                   	push   ebx
c00030c4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030c7:	89 d3                	mov    ebx,edx
c00030c9:	e8 51 ec ff ff       	call   c0001d1f <ld_word>
c00030ce:	0f b7 c8             	movzx  ecx,ax
c00030d1:	89 f0                	mov    eax,esi
c00030d3:	3c 03                	cmp    al,0x3
c00030d5:	75 0d                	jne    c00030e4 <ld_clust.isra.0+0x24>
c00030d7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030da:	e8 40 ec ff ff       	call   c0001d1f <ld_word>
c00030df:	c1 e0 10             	shl    eax,0x10
c00030e2:	09 c1                	or     ecx,eax
c00030e4:	89 c8                	mov    eax,ecx
c00030e6:	5b                   	pop    ebx
c00030e7:	5e                   	pop    esi
c00030e8:	c3                   	ret    

c00030e9 <st_clust.isra.1>:
c00030e9:	56                   	push   esi
c00030ea:	89 c6                	mov    esi,eax
c00030ec:	53                   	push   ebx
c00030ed:	89 d3                	mov    ebx,edx
c00030ef:	0f b7 d1             	movzx  edx,cx
c00030f2:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00030f5:	e8 4a ec ff ff       	call   c0001d44 <st_word>
c00030fa:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00030fd:	75 0f                	jne    c000310e <st_clust.isra.1+0x25>
c00030ff:	c1 e9 10             	shr    ecx,0x10
c0003102:	8d 43 14             	lea    eax,[ebx+0x14]
c0003105:	89 ca                	mov    edx,ecx
c0003107:	5b                   	pop    ebx
c0003108:	5e                   	pop    esi
c0003109:	e9 36 ec ff ff       	jmp    c0001d44 <st_word>
c000310e:	5b                   	pop    ebx
c000310f:	5e                   	pop    esi
c0003110:	c3                   	ret    

c0003111 <get_fat.isra.2>:
c0003111:	b9 01 00 00 00       	mov    ecx,0x1
c0003116:	83 fa 01             	cmp    edx,0x1
c0003119:	0f 86 f1 00 00 00    	jbe    c0003210 <get_fat.isra.2+0xff>
c000311f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003122:	0f 83 e8 00 00 00    	jae    c0003210 <get_fat.isra.2+0xff>
c0003128:	55                   	push   ebp
c0003129:	57                   	push   edi
c000312a:	89 c7                	mov    edi,eax
c000312c:	56                   	push   esi
c000312d:	89 d6                	mov    esi,edx
c000312f:	53                   	push   ebx
c0003130:	83 ec 0c             	sub    esp,0xc
c0003133:	8a 00                	mov    al,BYTE PTR [eax]
c0003135:	3c 02                	cmp    al,0x2
c0003137:	74 78                	je     c00031b1 <get_fat.isra.2+0xa0>
c0003139:	3c 03                	cmp    al,0x3
c000313b:	0f 84 97 00 00 00    	je     c00031d8 <get_fat.isra.2+0xc7>
c0003141:	fe c8                	dec    al
c0003143:	0f 85 bd 00 00 00    	jne    c0003206 <get_fat.isra.2+0xf5>
c0003149:	89 d3                	mov    ebx,edx
c000314b:	89 f8                	mov    eax,edi
c000314d:	d1 eb                	shr    ebx,1
c000314f:	01 d3                	add    ebx,edx
c0003151:	89 da                	mov    edx,ebx
c0003153:	c1 ea 09             	shr    edx,0x9
c0003156:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003159:	e8 e7 f0 ff ff       	call   c0002245 <move_window>
c000315e:	85 c0                	test   eax,eax
c0003160:	74 08                	je     c000316a <get_fat.isra.2+0x59>
c0003162:	83 c9 ff             	or     ecx,0xffffffff
c0003165:	e9 9c 00 00 00       	jmp    c0003206 <get_fat.isra.2+0xf5>
c000316a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000316d:	89 f8                	mov    eax,edi
c000316f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003175:	89 ea                	mov    edx,ebp
c0003177:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000317b:	c1 ea 09             	shr    edx,0x9
c000317e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003181:	e8 bf f0 ff ff       	call   c0002245 <move_window>
c0003186:	85 c0                	test   eax,eax
c0003188:	75 d8                	jne    c0003162 <get_fat.isra.2+0x51>
c000318a:	0f b6 c3             	movzx  eax,bl
c000318d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003193:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003198:	c1 e3 08             	shl    ebx,0x8
c000319b:	09 c3                	or     ebx,eax
c000319d:	89 d9                	mov    ecx,ebx
c000319f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00031a5:	83 e6 01             	and    esi,0x1
c00031a8:	74 5c                	je     c0003206 <get_fat.isra.2+0xf5>
c00031aa:	89 d9                	mov    ecx,ebx
c00031ac:	c1 e9 04             	shr    ecx,0x4
c00031af:	eb 55                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031b1:	c1 ea 08             	shr    edx,0x8
c00031b4:	89 f8                	mov    eax,edi
c00031b6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031b9:	e8 87 f0 ff ff       	call   c0002245 <move_window>
c00031be:	85 c0                	test   eax,eax
c00031c0:	75 a0                	jne    c0003162 <get_fat.isra.2+0x51>
c00031c2:	01 f6                	add    esi,esi
c00031c4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ca:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ce:	e8 4c eb ff ff       	call   c0001d1f <ld_word>
c00031d3:	0f b7 c8             	movzx  ecx,ax
c00031d6:	eb 2e                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031d8:	c1 ea 07             	shr    edx,0x7
c00031db:	89 f8                	mov    eax,edi
c00031dd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031e0:	e8 60 f0 ff ff       	call   c0002245 <move_window>
c00031e5:	85 c0                	test   eax,eax
c00031e7:	0f 85 75 ff ff ff    	jne    c0003162 <get_fat.isra.2+0x51>
c00031ed:	c1 e6 02             	shl    esi,0x2
c00031f0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031f6:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031fa:	e8 2d eb ff ff       	call   c0001d2c <ld_dword>
c00031ff:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003204:	89 c1                	mov    ecx,eax
c0003206:	83 c4 0c             	add    esp,0xc
c0003209:	89 c8                	mov    eax,ecx
c000320b:	5b                   	pop    ebx
c000320c:	5e                   	pop    esi
c000320d:	5f                   	pop    edi
c000320e:	5d                   	pop    ebp
c000320f:	c3                   	ret    
c0003210:	89 c8                	mov    eax,ecx
c0003212:	c3                   	ret    

c0003213 <dir_sdi>:
c0003213:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003219:	0f 87 b6 00 00 00    	ja     c00032d5 <dir_sdi+0xc2>
c000321f:	55                   	push   ebp
c0003220:	57                   	push   edi
c0003221:	56                   	push   esi
c0003222:	53                   	push   ebx
c0003223:	89 d3                	mov    ebx,edx
c0003225:	83 ec 1c             	sub    esp,0x1c
c0003228:	f6 c2 1f             	test   dl,0x1f
c000322b:	74 0a                	je     c0003237 <dir_sdi+0x24>
c000322d:	b8 02 00 00 00       	mov    eax,0x2
c0003232:	e9 96 00 00 00       	jmp    c00032cd <dir_sdi+0xba>
c0003237:	89 c6                	mov    esi,eax
c0003239:	8b 38                	mov    edi,DWORD PTR [eax]
c000323b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000323e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003241:	85 c9                	test   ecx,ecx
c0003243:	75 23                	jne    c0003268 <dir_sdi+0x55>
c0003245:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003248:	76 07                	jbe    c0003251 <dir_sdi+0x3e>
c000324a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000324d:	85 c0                	test   eax,eax
c000324f:	75 15                	jne    c0003266 <dir_sdi+0x53>
c0003251:	89 da                	mov    edx,ebx
c0003253:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003257:	c1 ea 05             	shr    edx,0x5
c000325a:	39 c2                	cmp    edx,eax
c000325c:	73 cf                	jae    c000322d <dir_sdi+0x1a>
c000325e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003261:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003264:	eb 3d                	jmp    c00032a3 <dir_sdi+0x90>
c0003266:	89 c1                	mov    ecx,eax
c0003268:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000326c:	c1 e5 09             	shl    ebp,0x9
c000326f:	89 ca                	mov    edx,ecx
c0003271:	39 eb                	cmp    ebx,ebp
c0003273:	72 1c                	jb     c0003291 <dir_sdi+0x7e>
c0003275:	8b 06                	mov    eax,DWORD PTR [esi]
c0003277:	e8 95 fe ff ff       	call   c0003111 <get_fat.isra.2>
c000327c:	89 c1                	mov    ecx,eax
c000327e:	83 f8 ff             	cmp    eax,0xffffffff
c0003281:	74 45                	je     c00032c8 <dir_sdi+0xb5>
c0003283:	83 f8 01             	cmp    eax,0x1
c0003286:	76 a5                	jbe    c000322d <dir_sdi+0x1a>
c0003288:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c000328b:	76 a0                	jbe    c000322d <dir_sdi+0x1a>
c000328d:	29 eb                	sub    ebx,ebp
c000328f:	eb de                	jmp    c000326f <dir_sdi+0x5c>
c0003291:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003295:	89 f8                	mov    eax,edi
c0003297:	e8 c9 ec ff ff       	call   c0001f65 <clst2sect>
c000329c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00032a0:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032a3:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00032a6:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00032a9:	85 d2                	test   edx,edx
c00032ab:	74 80                	je     c000322d <dir_sdi+0x1a>
c00032ad:	89 d8                	mov    eax,ebx
c00032af:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032b5:	c1 e8 09             	shr    eax,0x9
c00032b8:	01 d0                	add    eax,edx
c00032ba:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032bd:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032c4:	31 c0                	xor    eax,eax
c00032c6:	eb 05                	jmp    c00032cd <dir_sdi+0xba>
c00032c8:	b8 01 00 00 00       	mov    eax,0x1
c00032cd:	83 c4 1c             	add    esp,0x1c
c00032d0:	5b                   	pop    ebx
c00032d1:	5e                   	pop    esi
c00032d2:	5f                   	pop    edi
c00032d3:	5d                   	pop    ebp
c00032d4:	c3                   	ret    
c00032d5:	b8 02 00 00 00       	mov    eax,0x2
c00032da:	c3                   	ret    

c00032db <create_chain>:
c00032db:	55                   	push   ebp
c00032dc:	89 c5                	mov    ebp,eax
c00032de:	57                   	push   edi
c00032df:	89 d7                	mov    edi,edx
c00032e1:	56                   	push   esi
c00032e2:	53                   	push   ebx
c00032e3:	83 ec 1c             	sub    esp,0x1c
c00032e6:	85 d2                	test   edx,edx
c00032e8:	8b 30                	mov    esi,DWORD PTR [eax]
c00032ea:	75 0e                	jne    c00032fa <create_chain+0x1f>
c00032ec:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00032ef:	85 c9                	test   ecx,ecx
c00032f1:	74 34                	je     c0003327 <create_chain+0x4c>
c00032f3:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00032f6:	77 34                	ja     c000332c <create_chain+0x51>
c00032f8:	eb 2d                	jmp    c0003327 <create_chain+0x4c>
c00032fa:	89 f0                	mov    eax,esi
c00032fc:	e8 10 fe ff ff       	call   c0003111 <get_fat.isra.2>
c0003301:	89 c3                	mov    ebx,eax
c0003303:	83 f8 01             	cmp    eax,0x1
c0003306:	77 0a                	ja     c0003312 <create_chain+0x37>
c0003308:	bb 01 00 00 00       	mov    ebx,0x1
c000330d:	e9 f9 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003312:	83 f8 ff             	cmp    eax,0xffffffff
c0003315:	0f 84 ed 00 00 00    	je     c0003408 <create_chain+0x12d>
c000331b:	89 f9                	mov    ecx,edi
c000331d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003320:	76 0a                	jbe    c000332c <create_chain+0x51>
c0003322:	e9 e4 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003327:	b9 01 00 00 00       	mov    ecx,0x1
c000332c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003330:	75 07                	jne    c0003339 <create_chain+0x5e>
c0003332:	31 db                	xor    ebx,ebx
c0003334:	e9 d2 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003339:	39 f9                	cmp    ecx,edi
c000333b:	75 46                	jne    c0003383 <create_chain+0xa8>
c000333d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003340:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003343:	77 05                	ja     c000334a <create_chain+0x6f>
c0003345:	bb 02 00 00 00       	mov    ebx,0x2
c000334a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000334e:	89 da                	mov    edx,ebx
c0003350:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003353:	e8 b9 fd ff ff       	call   c0003111 <get_fat.isra.2>
c0003358:	83 f8 01             	cmp    eax,0x1
c000335b:	74 ab                	je     c0003308 <create_chain+0x2d>
c000335d:	83 f8 ff             	cmp    eax,0xffffffff
c0003360:	0f 84 a2 00 00 00    	je     c0003408 <create_chain+0x12d>
c0003366:	85 c0                	test   eax,eax
c0003368:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000336c:	74 11                	je     c000337f <create_chain+0xa4>
c000336e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003371:	83 f8 01             	cmp    eax,0x1
c0003374:	76 0d                	jbe    c0003383 <create_chain+0xa8>
c0003376:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003379:	73 08                	jae    c0003383 <create_chain+0xa8>
c000337b:	89 c1                	mov    ecx,eax
c000337d:	eb 04                	jmp    c0003383 <create_chain+0xa8>
c000337f:	85 db                	test   ebx,ebx
c0003381:	75 3d                	jne    c00033c0 <create_chain+0xe5>
c0003383:	89 cb                	mov    ebx,ecx
c0003385:	43                   	inc    ebx
c0003386:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003389:	77 0a                	ja     c0003395 <create_chain+0xba>
c000338b:	83 f9 01             	cmp    ecx,0x1
c000338e:	76 a2                	jbe    c0003332 <create_chain+0x57>
c0003390:	bb 02 00 00 00       	mov    ebx,0x2
c0003395:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003399:	89 da                	mov    edx,ebx
c000339b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000339e:	e8 6e fd ff ff       	call   c0003111 <get_fat.isra.2>
c00033a3:	85 c0                	test   eax,eax
c00033a5:	74 19                	je     c00033c0 <create_chain+0xe5>
c00033a7:	83 f8 01             	cmp    eax,0x1
c00033aa:	0f 84 58 ff ff ff    	je     c0003308 <create_chain+0x2d>
c00033b0:	40                   	inc    eax
c00033b1:	74 55                	je     c0003408 <create_chain+0x12d>
c00033b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033b7:	39 cb                	cmp    ebx,ecx
c00033b9:	75 ca                	jne    c0003385 <create_chain+0xaa>
c00033bb:	e9 72 ff ff ff       	jmp    c0003332 <create_chain+0x57>
c00033c0:	83 c9 ff             	or     ecx,0xffffffff
c00033c3:	89 da                	mov    edx,ebx
c00033c5:	89 f0                	mov    eax,esi
c00033c7:	e8 cf f2 ff ff       	call   c000269b <put_fat>
c00033cc:	85 c0                	test   eax,eax
c00033ce:	75 31                	jne    c0003401 <create_chain+0x126>
c00033d0:	85 ff                	test   edi,edi
c00033d2:	75 16                	jne    c00033ea <create_chain+0x10f>
c00033d4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033d7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033da:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033dd:	8d 57 fe             	lea    edx,[edi-0x2]
c00033e0:	39 d0                	cmp    eax,edx
c00033e2:	77 17                	ja     c00033fb <create_chain+0x120>
c00033e4:	48                   	dec    eax
c00033e5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00033e8:	eb 11                	jmp    c00033fb <create_chain+0x120>
c00033ea:	89 d9                	mov    ecx,ebx
c00033ec:	89 fa                	mov    edx,edi
c00033ee:	89 f0                	mov    eax,esi
c00033f0:	e8 a6 f2 ff ff       	call   c000269b <put_fat>
c00033f5:	85 c0                	test   eax,eax
c00033f7:	74 db                	je     c00033d4 <create_chain+0xf9>
c00033f9:	eb 06                	jmp    c0003401 <create_chain+0x126>
c00033fb:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c00033ff:	eb 0a                	jmp    c000340b <create_chain+0x130>
c0003401:	48                   	dec    eax
c0003402:	0f 85 00 ff ff ff    	jne    c0003308 <create_chain+0x2d>
c0003408:	83 cb ff             	or     ebx,0xffffffff
c000340b:	83 c4 1c             	add    esp,0x1c
c000340e:	89 d8                	mov    eax,ebx
c0003410:	5b                   	pop    ebx
c0003411:	5e                   	pop    esi
c0003412:	5f                   	pop    edi
c0003413:	5d                   	pop    ebp
c0003414:	c3                   	ret    

c0003415 <remove_chain>:
c0003415:	55                   	push   ebp
c0003416:	57                   	push   edi
c0003417:	56                   	push   esi
c0003418:	89 d6                	mov    esi,edx
c000341a:	53                   	push   ebx
c000341b:	83 ec 0c             	sub    esp,0xc
c000341e:	83 fa 01             	cmp    edx,0x1
c0003421:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003423:	76 65                	jbe    c000348a <remove_chain+0x75>
c0003425:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003428:	76 60                	jbe    c000348a <remove_chain+0x75>
c000342a:	89 c5                	mov    ebp,eax
c000342c:	89 ca                	mov    edx,ecx
c000342e:	85 c9                	test   ecx,ecx
c0003430:	74 0e                	je     c0003440 <remove_chain+0x2b>
c0003432:	83 c9 ff             	or     ecx,0xffffffff
c0003435:	89 d8                	mov    eax,ebx
c0003437:	e8 5f f2 ff ff       	call   c000269b <put_fat>
c000343c:	85 c0                	test   eax,eax
c000343e:	75 56                	jne    c0003496 <remove_chain+0x81>
c0003440:	89 f2                	mov    edx,esi
c0003442:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003445:	e8 c7 fc ff ff       	call   c0003111 <get_fat.isra.2>
c000344a:	89 c7                	mov    edi,eax
c000344c:	85 c0                	test   eax,eax
c000344e:	75 04                	jne    c0003454 <remove_chain+0x3f>
c0003450:	31 c0                	xor    eax,eax
c0003452:	eb 42                	jmp    c0003496 <remove_chain+0x81>
c0003454:	83 f8 01             	cmp    eax,0x1
c0003457:	74 31                	je     c000348a <remove_chain+0x75>
c0003459:	83 f8 ff             	cmp    eax,0xffffffff
c000345c:	74 33                	je     c0003491 <remove_chain+0x7c>
c000345e:	31 c9                	xor    ecx,ecx
c0003460:	89 f2                	mov    edx,esi
c0003462:	89 d8                	mov    eax,ebx
c0003464:	e8 32 f2 ff ff       	call   c000269b <put_fat>
c0003469:	85 c0                	test   eax,eax
c000346b:	75 29                	jne    c0003496 <remove_chain+0x81>
c000346d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003470:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003473:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003476:	39 c8                	cmp    eax,ecx
c0003478:	73 08                	jae    c0003482 <remove_chain+0x6d>
c000347a:	40                   	inc    eax
c000347b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000347f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003482:	89 fe                	mov    esi,edi
c0003484:	39 fa                	cmp    edx,edi
c0003486:	77 b8                	ja     c0003440 <remove_chain+0x2b>
c0003488:	eb c6                	jmp    c0003450 <remove_chain+0x3b>
c000348a:	b8 02 00 00 00       	mov    eax,0x2
c000348f:	eb 05                	jmp    c0003496 <remove_chain+0x81>
c0003491:	b8 01 00 00 00       	mov    eax,0x1
c0003496:	83 c4 0c             	add    esp,0xc
c0003499:	5b                   	pop    ebx
c000349a:	5e                   	pop    esi
c000349b:	5f                   	pop    edi
c000349c:	5d                   	pop    ebp
c000349d:	c3                   	ret    

c000349e <dir_next>:
c000349e:	55                   	push   ebp
c000349f:	57                   	push   edi
c00034a0:	56                   	push   esi
c00034a1:	53                   	push   ebx
c00034a2:	83 ec 1c             	sub    esp,0x1c
c00034a5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00034a8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034aa:	83 c7 20             	add    edi,0x20
c00034ad:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034b3:	76 07                	jbe    c00034bc <dir_next+0x1e>
c00034b5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034bc:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034bf:	b9 04 00 00 00       	mov    ecx,0x4
c00034c4:	85 f6                	test   esi,esi
c00034c6:	0f 84 cd 00 00 00    	je     c0003599 <dir_next+0xfb>
c00034cc:	89 c3                	mov    ebx,eax
c00034ce:	89 d1                	mov    ecx,edx
c00034d0:	89 f8                	mov    eax,edi
c00034d2:	25 ff 01 00 00       	and    eax,0x1ff
c00034d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034db:	0f 85 a8 00 00 00    	jne    c0003589 <dir_next+0xeb>
c00034e1:	46                   	inc    esi
c00034e2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00034e5:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00034e8:	85 d2                	test   edx,edx
c00034ea:	75 22                	jne    c000350e <dir_next+0x70>
c00034ec:	89 fa                	mov    edx,edi
c00034ee:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034f2:	c1 ea 05             	shr    edx,0x5
c00034f5:	39 c2                	cmp    edx,eax
c00034f7:	0f 82 8c 00 00 00    	jb     c0003589 <dir_next+0xeb>
c00034fd:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003504:	b9 04 00 00 00       	mov    ecx,0x4
c0003509:	e9 8b 00 00 00       	jmp    c0003599 <dir_next+0xfb>
c000350e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003512:	89 fe                	mov    esi,edi
c0003514:	48                   	dec    eax
c0003515:	c1 ee 09             	shr    esi,0x9
c0003518:	85 f0                	test   eax,esi
c000351a:	75 6d                	jne    c0003589 <dir_next+0xeb>
c000351c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003520:	89 e8                	mov    eax,ebp
c0003522:	e8 ea fb ff ff       	call   c0003111 <get_fat.isra.2>
c0003527:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000352b:	89 c6                	mov    esi,eax
c000352d:	83 f8 01             	cmp    eax,0x1
c0003530:	77 07                	ja     c0003539 <dir_next+0x9b>
c0003532:	b9 02 00 00 00       	mov    ecx,0x2
c0003537:	eb 60                	jmp    c0003599 <dir_next+0xfb>
c0003539:	83 f8 ff             	cmp    eax,0xffffffff
c000353c:	75 07                	jne    c0003545 <dir_next+0xa7>
c000353e:	b9 01 00 00 00       	mov    ecx,0x1
c0003543:	eb 54                	jmp    c0003599 <dir_next+0xfb>
c0003545:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003548:	77 30                	ja     c000357a <dir_next+0xdc>
c000354a:	85 c9                	test   ecx,ecx
c000354c:	74 af                	je     c00034fd <dir_next+0x5f>
c000354e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003551:	89 d8                	mov    eax,ebx
c0003553:	e8 83 fd ff ff       	call   c00032db <create_chain>
c0003558:	b9 07 00 00 00       	mov    ecx,0x7
c000355d:	89 c6                	mov    esi,eax
c000355f:	85 c0                	test   eax,eax
c0003561:	74 36                	je     c0003599 <dir_next+0xfb>
c0003563:	83 f8 01             	cmp    eax,0x1
c0003566:	74 ca                	je     c0003532 <dir_next+0x94>
c0003568:	83 f8 ff             	cmp    eax,0xffffffff
c000356b:	74 d1                	je     c000353e <dir_next+0xa0>
c000356d:	89 c2                	mov    edx,eax
c000356f:	89 e8                	mov    eax,ebp
c0003571:	e8 75 f2 ff ff       	call   c00027eb <dir_clear>
c0003576:	85 c0                	test   eax,eax
c0003578:	75 c4                	jne    c000353e <dir_next+0xa0>
c000357a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000357d:	89 f2                	mov    edx,esi
c000357f:	89 e8                	mov    eax,ebp
c0003581:	e8 df e9 ff ff       	call   c0001f65 <clst2sect>
c0003586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003589:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000358d:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003590:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003594:	31 c9                	xor    ecx,ecx
c0003596:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003599:	83 c4 1c             	add    esp,0x1c
c000359c:	89 c8                	mov    eax,ecx
c000359e:	5b                   	pop    ebx
c000359f:	5e                   	pop    esi
c00035a0:	5f                   	pop    edi
c00035a1:	5d                   	pop    ebp
c00035a2:	c3                   	ret    

c00035a3 <dir_alloc>:
c00035a3:	55                   	push   ebp
c00035a4:	89 c5                	mov    ebp,eax
c00035a6:	57                   	push   edi
c00035a7:	89 d7                	mov    edi,edx
c00035a9:	56                   	push   esi
c00035aa:	31 d2                	xor    edx,edx
c00035ac:	53                   	push   ebx
c00035ad:	83 ec 0c             	sub    esp,0xc
c00035b0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035b2:	e8 5c fc ff ff       	call   c0003213 <dir_sdi>
c00035b7:	85 c0                	test   eax,eax
c00035b9:	75 37                	jne    c00035f2 <dir_alloc+0x4f>
c00035bb:	31 db                	xor    ebx,ebx
c00035bd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035c0:	89 f0                	mov    eax,esi
c00035c2:	e8 7e ec ff ff       	call   c0002245 <move_window>
c00035c7:	85 c0                	test   eax,eax
c00035c9:	75 27                	jne    c00035f2 <dir_alloc+0x4f>
c00035cb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035ce:	8a 12                	mov    dl,BYTE PTR [edx]
c00035d0:	84 d2                	test   dl,dl
c00035d2:	74 05                	je     c00035d9 <dir_alloc+0x36>
c00035d4:	80 fa e5             	cmp    dl,0xe5
c00035d7:	75 07                	jne    c00035e0 <dir_alloc+0x3d>
c00035d9:	43                   	inc    ebx
c00035da:	39 fb                	cmp    ebx,edi
c00035dc:	75 04                	jne    c00035e2 <dir_alloc+0x3f>
c00035de:	eb 1c                	jmp    c00035fc <dir_alloc+0x59>
c00035e0:	31 db                	xor    ebx,ebx
c00035e2:	ba 01 00 00 00       	mov    edx,0x1
c00035e7:	89 e8                	mov    eax,ebp
c00035e9:	e8 b0 fe ff ff       	call   c000349e <dir_next>
c00035ee:	85 c0                	test   eax,eax
c00035f0:	74 cb                	je     c00035bd <dir_alloc+0x1a>
c00035f2:	83 f8 04             	cmp    eax,0x4
c00035f5:	75 05                	jne    c00035fc <dir_alloc+0x59>
c00035f7:	b8 07 00 00 00       	mov    eax,0x7
c00035fc:	83 c4 0c             	add    esp,0xc
c00035ff:	5b                   	pop    ebx
c0003600:	5e                   	pop    esi
c0003601:	5f                   	pop    edi
c0003602:	5d                   	pop    ebp
c0003603:	c3                   	ret    

c0003604 <dir_read>:
c0003604:	55                   	push   ebp
c0003605:	57                   	push   edi
c0003606:	bf ff ff ff ff       	mov    edi,0xffffffff
c000360b:	56                   	push   esi
c000360c:	be 04 00 00 00       	mov    esi,0x4
c0003611:	53                   	push   ebx
c0003612:	89 c3                	mov    ebx,eax
c0003614:	83 ec 1c             	sub    esp,0x1c
c0003617:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003622:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003625:	85 d2                	test   edx,edx
c0003627:	0f 84 d8 00 00 00    	je     c0003705 <dir_read+0x101>
c000362d:	89 e8                	mov    eax,ebp
c000362f:	e8 11 ec ff ff       	call   c0002245 <move_window>
c0003634:	89 c6                	mov    esi,eax
c0003636:	85 c0                	test   eax,eax
c0003638:	0f 85 d2 00 00 00    	jne    c0003710 <dir_read+0x10c>
c000363e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003641:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003643:	84 c9                	test   cl,cl
c0003645:	0f 84 c0 00 00 00    	je     c000370b <dir_read+0x107>
c000364b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000364e:	83 e0 3f             	and    eax,0x3f
c0003651:	80 f9 2e             	cmp    cl,0x2e
c0003654:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003658:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000365b:	0f 84 8a 00 00 00    	je     c00036eb <dir_read+0xe7>
c0003661:	80 f9 e5             	cmp    cl,0xe5
c0003664:	0f 84 81 00 00 00    	je     c00036eb <dir_read+0xe7>
c000366a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000366e:	83 e0 1f             	and    eax,0x1f
c0003671:	83 f8 08             	cmp    eax,0x8
c0003674:	0f 94 c0             	sete   al
c0003677:	0f b6 c0             	movzx  eax,al
c000367a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000367e:	75 6b                	jne    c00036eb <dir_read+0xe7>
c0003680:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003685:	75 44                	jne    c00036cb <dir_read+0xc7>
c0003687:	f6 c1 40             	test   cl,0x40
c000368a:	74 12                	je     c000369e <dir_read+0x9a>
c000368c:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000368f:	83 e1 bf             	and    ecx,0xffffffbf
c0003692:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003696:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003699:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000369c:	eb 06                	jmp    c00036a4 <dir_read+0xa0>
c000369e:	89 f8                	mov    eax,edi
c00036a0:	38 c8                	cmp    al,cl
c00036a2:	75 47                	jne    c00036eb <dir_read+0xe7>
c00036a4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00036a8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036ad:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036b0:	75 3e                	jne    c00036f0 <dir_read+0xec>
c00036b2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036b9:	e8 c4 e8 ff ff       	call   c0001f82 <pick_lfn>
c00036be:	85 c0                	test   eax,eax
c00036c0:	74 2e                	je     c00036f0 <dir_read+0xec>
c00036c2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036c6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036c9:	eb 25                	jmp    c00036f0 <dir_read+0xec>
c00036cb:	89 f8                	mov    eax,edi
c00036cd:	84 c0                	test   al,al
c00036cf:	75 11                	jne    c00036e2 <dir_read+0xde>
c00036d1:	89 d0                	mov    eax,edx
c00036d3:	e8 64 ea ff ff       	call   c000213c <sum_sfn>
c00036d8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036dc:	75 04                	jne    c00036e2 <dir_read+0xde>
c00036de:	31 f6                	xor    esi,esi
c00036e0:	eb 35                	jmp    c0003717 <dir_read+0x113>
c00036e2:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00036e9:	eb 2c                	jmp    c0003717 <dir_read+0x113>
c00036eb:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036f0:	31 d2                	xor    edx,edx
c00036f2:	89 d8                	mov    eax,ebx
c00036f4:	e8 a5 fd ff ff       	call   c000349e <dir_next>
c00036f9:	89 c6                	mov    esi,eax
c00036fb:	85 c0                	test   eax,eax
c00036fd:	0f 84 1f ff ff ff    	je     c0003622 <dir_read+0x1e>
c0003703:	eb 0b                	jmp    c0003710 <dir_read+0x10c>
c0003705:	85 f6                	test   esi,esi
c0003707:	74 d5                	je     c00036de <dir_read+0xda>
c0003709:	eb 05                	jmp    c0003710 <dir_read+0x10c>
c000370b:	be 04 00 00 00       	mov    esi,0x4
c0003710:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003717:	83 c4 1c             	add    esp,0x1c
c000371a:	89 f0                	mov    eax,esi
c000371c:	5b                   	pop    ebx
c000371d:	5e                   	pop    esi
c000371e:	5f                   	pop    edi
c000371f:	5d                   	pop    ebp
c0003720:	c3                   	ret    

c0003721 <dir_remove>:
c0003721:	57                   	push   edi
c0003722:	56                   	push   esi
c0003723:	53                   	push   ebx
c0003724:	89 c3                	mov    ebx,eax
c0003726:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003729:	8b 30                	mov    esi,DWORD PTR [eax]
c000372b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000372e:	83 fa ff             	cmp    edx,0xffffffff
c0003731:	74 09                	je     c000373c <dir_remove+0x1b>
c0003733:	e8 db fa ff ff       	call   c0003213 <dir_sdi>
c0003738:	85 c0                	test   eax,eax
c000373a:	75 34                	jne    c0003770 <dir_remove+0x4f>
c000373c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000373f:	89 f0                	mov    eax,esi
c0003741:	e8 ff ea ff ff       	call   c0002245 <move_window>
c0003746:	85 c0                	test   eax,eax
c0003748:	75 1c                	jne    c0003766 <dir_remove+0x45>
c000374a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000374d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003750:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003754:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003757:	73 17                	jae    c0003770 <dir_remove+0x4f>
c0003759:	31 d2                	xor    edx,edx
c000375b:	89 d8                	mov    eax,ebx
c000375d:	e8 3c fd ff ff       	call   c000349e <dir_next>
c0003762:	85 c0                	test   eax,eax
c0003764:	74 d6                	je     c000373c <dir_remove+0x1b>
c0003766:	83 f8 04             	cmp    eax,0x4
c0003769:	75 05                	jne    c0003770 <dir_remove+0x4f>
c000376b:	b8 02 00 00 00       	mov    eax,0x2
c0003770:	5b                   	pop    ebx
c0003771:	5e                   	pop    esi
c0003772:	5f                   	pop    edi
c0003773:	c3                   	ret    

c0003774 <dir_find>:
c0003774:	55                   	push   ebp
c0003775:	31 d2                	xor    edx,edx
c0003777:	57                   	push   edi
c0003778:	56                   	push   esi
c0003779:	53                   	push   ebx
c000377a:	89 c3                	mov    ebx,eax
c000377c:	83 ec 1c             	sub    esp,0x1c
c000377f:	8b 00                	mov    eax,DWORD PTR [eax]
c0003781:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003785:	89 d8                	mov    eax,ebx
c0003787:	e8 87 fa ff ff       	call   c0003213 <dir_sdi>
c000378c:	89 c6                	mov    esi,eax
c000378e:	85 c0                	test   eax,eax
c0003790:	0f 85 02 01 00 00    	jne    c0003898 <dir_find+0x124>
c0003796:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c000379d:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037a2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037a7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037ae:	e8 92 ea ff ff       	call   c0002245 <move_window>
c00037b3:	89 c6                	mov    esi,eax
c00037b5:	85 c0                	test   eax,eax
c00037b7:	0f 85 db 00 00 00    	jne    c0003898 <dir_find+0x124>
c00037bd:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037c0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037c3:	84 c9                	test   cl,cl
c00037c5:	0f 84 c8 00 00 00    	je     c0003893 <dir_find+0x11f>
c00037cb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037ce:	88 d0                	mov    al,dl
c00037d0:	83 e0 3f             	and    eax,0x3f
c00037d3:	80 f9 e5             	cmp    cl,0xe5
c00037d6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037d9:	0f 84 93 00 00 00    	je     c0003872 <dir_find+0xfe>
c00037df:	80 e2 08             	and    dl,0x8
c00037e2:	74 0a                	je     c00037ee <dir_find+0x7a>
c00037e4:	3c 0f                	cmp    al,0xf
c00037e6:	0f 85 86 00 00 00    	jne    c0003872 <dir_find+0xfe>
c00037ec:	eb 04                	jmp    c00037f2 <dir_find+0x7e>
c00037ee:	3c 0f                	cmp    al,0xf
c00037f0:	75 54                	jne    c0003846 <dir_find+0xd2>
c00037f2:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c00037f6:	0f 85 82 00 00 00    	jne    c000387e <dir_find+0x10a>
c00037fc:	f6 c1 40             	test   cl,0x40
c00037ff:	74 12                	je     c0003813 <dir_find+0x9f>
c0003801:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003804:	83 e1 bf             	and    ecx,0xffffffbf
c0003807:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000380b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000380e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003811:	eb 06                	jmp    c0003819 <dir_find+0xa5>
c0003813:	89 f8                	mov    eax,edi
c0003815:	38 c8                	cmp    al,cl
c0003817:	75 60                	jne    c0003879 <dir_find+0x105>
c0003819:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000381d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003822:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003825:	75 57                	jne    c000387e <dir_find+0x10a>
c0003827:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000382b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000382f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003832:	89 ea                	mov    edx,ebp
c0003834:	e8 89 f3 ff ff       	call   c0002bc2 <cmp_lfn>
c0003839:	85 c0                	test   eax,eax
c000383b:	74 41                	je     c000387e <dir_find+0x10a>
c000383d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003841:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003844:	eb 38                	jmp    c000387e <dir_find+0x10a>
c0003846:	89 f8                	mov    eax,edi
c0003848:	84 c0                	test   al,al
c000384a:	75 0d                	jne    c0003859 <dir_find+0xe5>
c000384c:	89 e8                	mov    eax,ebp
c000384e:	e8 e9 e8 ff ff       	call   c000213c <sum_sfn>
c0003853:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003857:	74 3f                	je     c0003898 <dir_find+0x124>
c0003859:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000385d:	75 13                	jne    c0003872 <dir_find+0xfe>
c000385f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003862:	b9 0b 00 00 00       	mov    ecx,0xb
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 fd e4 ff ff       	call   c0001d6b <mem_cmp>
c000386e:	85 c0                	test   eax,eax
c0003870:	74 26                	je     c0003898 <dir_find+0x124>
c0003872:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003879:	bf ff ff ff ff       	mov    edi,0xffffffff
c000387e:	31 d2                	xor    edx,edx
c0003880:	89 d8                	mov    eax,ebx
c0003882:	e8 17 fc ff ff       	call   c000349e <dir_next>
c0003887:	89 c6                	mov    esi,eax
c0003889:	85 c0                	test   eax,eax
c000388b:	0f 84 16 ff ff ff    	je     c00037a7 <dir_find+0x33>
c0003891:	eb 05                	jmp    c0003898 <dir_find+0x124>
c0003893:	be 04 00 00 00       	mov    esi,0x4
c0003898:	83 c4 1c             	add    esp,0x1c
c000389b:	89 f0                	mov    eax,esi
c000389d:	5b                   	pop    ebx
c000389e:	5e                   	pop    esi
c000389f:	5f                   	pop    edi
c00038a0:	5d                   	pop    ebp
c00038a1:	c3                   	ret    

c00038a2 <follow_path>:
c00038a2:	56                   	push   esi
c00038a3:	53                   	push   ebx
c00038a4:	89 c3                	mov    ebx,eax
c00038a6:	83 ec 14             	sub    esp,0x14
c00038a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038ad:	8b 30                	mov    esi,DWORD PTR [eax]
c00038af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038b3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038b5:	80 fa 5c             	cmp    dl,0x5c
c00038b8:	75 07                	jne    c00038c1 <follow_path+0x1f>
c00038ba:	40                   	inc    eax
c00038bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038bf:	eb ee                	jmp    c00038af <follow_path+0xd>
c00038c1:	80 fa 2f             	cmp    dl,0x2f
c00038c4:	74 f4                	je     c00038ba <follow_path+0x18>
c00038c6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038cd:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038d0:	77 3e                	ja     c0003910 <follow_path+0x6e>
c00038d2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038d6:	31 d2                	xor    edx,edx
c00038d8:	89 d8                	mov    eax,ebx
c00038da:	e8 34 f9 ff ff       	call   c0003213 <dir_sdi>
c00038df:	eb 4f                	jmp    c0003930 <follow_path+0x8e>
c00038e1:	89 d8                	mov    eax,ebx
c00038e3:	e8 8c fe ff ff       	call   c0003774 <dir_find>
c00038e8:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c00038eb:	85 c0                	test   eax,eax
c00038ed:	75 32                	jne    c0003921 <follow_path+0x7f>
c00038ef:	80 e2 04             	and    dl,0x4
c00038f2:	75 3c                	jne    c0003930 <follow_path+0x8e>
c00038f4:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00038f8:	74 31                	je     c000392b <follow_path+0x89>
c00038fa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00038fd:	25 ff 01 00 00       	and    eax,0x1ff
c0003902:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003906:	8a 06                	mov    al,BYTE PTR [esi]
c0003908:	e8 b3 f7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000390d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003910:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003914:	89 d8                	mov    eax,ebx
c0003916:	e8 cb ef ff ff       	call   c00028e6 <create_name>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c2                	je     c00038e1 <follow_path+0x3f>
c000391f:	eb 0f                	jmp    c0003930 <follow_path+0x8e>
c0003921:	83 f8 04             	cmp    eax,0x4
c0003924:	75 0a                	jne    c0003930 <follow_path+0x8e>
c0003926:	80 e2 04             	and    dl,0x4
c0003929:	75 05                	jne    c0003930 <follow_path+0x8e>
c000392b:	b8 05 00 00 00       	mov    eax,0x5
c0003930:	83 c4 14             	add    esp,0x14
c0003933:	5b                   	pop    ebx
c0003934:	5e                   	pop    esi
c0003935:	c3                   	ret    

c0003936 <dir_register>:
c0003936:	55                   	push   ebp
c0003937:	57                   	push   edi
c0003938:	56                   	push   esi
c0003939:	be 06 00 00 00       	mov    esi,0x6
c000393e:	53                   	push   ebx
c000393f:	83 ec 2c             	sub    esp,0x2c
c0003942:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003946:	0f 85 65 01 00 00    	jne    c0003ab1 <dir_register+0x17b>
c000394c:	8b 38                	mov    edi,DWORD PTR [eax]
c000394e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003956:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003959:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000395d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003962:	74 06                	je     c000396a <dir_register+0x34>
c0003964:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003968:	eb ef                	jmp    c0003959 <dir_register+0x23>
c000396a:	89 c3                	mov    ebx,eax
c000396c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003971:	8d 40 20             	lea    eax,[eax+0x20]
c0003974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003978:	89 c2                	mov    edx,eax
c000397a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000397e:	e8 c8 e3 ff ff       	call   c0001d4b <mem_cpy>
c0003983:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003988:	74 48                	je     c00039d2 <dir_register+0x9c>
c000398a:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c000398e:	bd 01 00 00 00       	mov    ebp,0x1
c0003993:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003996:	55                   	push   ebp
c0003997:	8d 54 24 18          	lea    edx,[esp+0x18]
c000399b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000399f:	e8 dc e6 ff ff       	call   c0002080 <gen_numname>
c00039a4:	58                   	pop    eax
c00039a5:	89 d8                	mov    eax,ebx
c00039a7:	e8 c8 fd ff ff       	call   c0003774 <dir_find>
c00039ac:	89 c6                	mov    esi,eax
c00039ae:	85 c0                	test   eax,eax
c00039b0:	75 10                	jne    c00039c2 <dir_register+0x8c>
c00039b2:	45                   	inc    ebp
c00039b3:	83 fd 64             	cmp    ebp,0x64
c00039b6:	75 db                	jne    c0003993 <dir_register+0x5d>
c00039b8:	be 07 00 00 00       	mov    esi,0x7
c00039bd:	e9 ef 00 00 00       	jmp    c0003ab1 <dir_register+0x17b>
c00039c2:	83 f8 04             	cmp    eax,0x4
c00039c5:	0f 85 e6 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c00039cb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039cf:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039d2:	bd 01 00 00 00       	mov    ebp,0x1
c00039d7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039dc:	74 13                	je     c00039f1 <dir_register+0xbb>
c00039de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039e2:	b9 0d 00 00 00       	mov    ecx,0xd
c00039e7:	83 c0 0c             	add    eax,0xc
c00039ea:	31 d2                	xor    edx,edx
c00039ec:	f7 f1                	div    ecx
c00039ee:	8d 68 01             	lea    ebp,[eax+0x1]
c00039f1:	89 ea                	mov    edx,ebp
c00039f3:	89 d8                	mov    eax,ebx
c00039f5:	e8 a9 fb ff ff       	call   c00035a3 <dir_alloc>
c00039fa:	89 c6                	mov    esi,eax
c00039fc:	85 c0                	test   eax,eax
c00039fe:	0f 85 ad 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a04:	4d                   	dec    ebp
c0003a05:	74 6a                	je     c0003a71 <dir_register+0x13b>
c0003a07:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003a0a:	89 e8                	mov    eax,ebp
c0003a0c:	c1 e0 05             	shl    eax,0x5
c0003a0f:	29 c2                	sub    edx,eax
c0003a11:	89 d8                	mov    eax,ebx
c0003a13:	e8 fb f7 ff ff       	call   c0003213 <dir_sdi>
c0003a18:	89 c6                	mov    esi,eax
c0003a1a:	85 c0                	test   eax,eax
c0003a1c:	0f 85 8f 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a26:	e8 11 e7 ff ff       	call   c000213c <sum_sfn>
c0003a2b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a2f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a32:	89 f8                	mov    eax,edi
c0003a34:	e8 0c e8 ff ff       	call   c0002245 <move_window>
c0003a39:	89 c6                	mov    esi,eax
c0003a3b:	85 c0                	test   eax,eax
c0003a3d:	75 72                	jne    c0003ab1 <dir_register+0x17b>
c0003a3f:	83 ec 0c             	sub    esp,0xc
c0003a42:	89 e8                	mov    eax,ebp
c0003a44:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a49:	0f b6 c8             	movzx  ecx,al
c0003a4c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a4f:	52                   	push   edx
c0003a50:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a53:	e8 a4 e5 ff ff       	call   c0001ffc <put_lfn>
c0003a58:	31 d2                	xor    edx,edx
c0003a5a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a5e:	89 d8                	mov    eax,ebx
c0003a60:	e8 39 fa ff ff       	call   c000349e <dir_next>
c0003a65:	83 c4 10             	add    esp,0x10
c0003a68:	89 c6                	mov    esi,eax
c0003a6a:	85 c0                	test   eax,eax
c0003a6c:	75 43                	jne    c0003ab1 <dir_register+0x17b>
c0003a6e:	4d                   	dec    ebp
c0003a6f:	75 be                	jne    c0003a2f <dir_register+0xf9>
c0003a71:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a74:	89 f8                	mov    eax,edi
c0003a76:	e8 ca e7 ff ff       	call   c0002245 <move_window>
c0003a7b:	89 c6                	mov    esi,eax
c0003a7d:	85 c0                	test   eax,eax
c0003a7f:	75 30                	jne    c0003ab1 <dir_register+0x17b>
c0003a81:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a84:	b9 20 00 00 00       	mov    ecx,0x20
c0003a89:	31 d2                	xor    edx,edx
c0003a8b:	e8 d0 e2 ff ff       	call   c0001d60 <mem_set>
c0003a90:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a93:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003a97:	b9 0b 00 00 00       	mov    ecx,0xb
c0003a9c:	e8 aa e2 ff ff       	call   c0001d4b <mem_cpy>
c0003aa1:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003aa4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003aa7:	83 e0 18             	and    eax,0x18
c0003aaa:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003aad:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ab1:	83 c4 2c             	add    esp,0x2c
c0003ab4:	89 f0                	mov    eax,esi
c0003ab6:	5b                   	pop    ebx
c0003ab7:	5e                   	pop    esi
c0003ab8:	5f                   	pop    edi
c0003ab9:	5d                   	pop    ebp
c0003aba:	c3                   	ret    

c0003abb <f_mount>:
c0003abb:	53                   	push   ebx
c0003abc:	83 ec 18             	sub    esp,0x18
c0003abf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ac3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ac7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003acb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003acf:	e8 7a e6 ff ff       	call   c000214e <get_ldnumber>
c0003ad4:	89 c2                	mov    edx,eax
c0003ad6:	b8 0b 00 00 00       	mov    eax,0xb
c0003adb:	85 d2                	test   edx,edx
c0003add:	78 39                	js     c0003b18 <f_mount+0x5d>
c0003adf:	8b 04 95 40 03 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdfcc0]
c0003ae6:	85 c0                	test   eax,eax
c0003ae8:	74 03                	je     c0003aed <f_mount+0x32>
c0003aea:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003aed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003af1:	85 c0                	test   eax,eax
c0003af3:	74 03                	je     c0003af8 <f_mount+0x3d>
c0003af5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003af8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003afc:	89 04 95 40 03 02 c0 	mov    DWORD PTR [edx*4-0x3ffdfcc0],eax
c0003b03:	31 c0                	xor    eax,eax
c0003b05:	84 db                	test   bl,bl
c0003b07:	74 0f                	je     c0003b18 <f_mount+0x5d>
c0003b09:	31 c9                	xor    ecx,ecx
c0003b0b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003b0f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b13:	e8 80 e8 ff ff       	call   c0002398 <mount_volume>
c0003b18:	83 c4 18             	add    esp,0x18
c0003b1b:	5b                   	pop    ebx
c0003b1c:	c3                   	ret    

c0003b1d <f_open>:
c0003b1d:	55                   	push   ebp
c0003b1e:	b8 09 00 00 00       	mov    eax,0x9
c0003b23:	57                   	push   edi
c0003b24:	56                   	push   esi
c0003b25:	53                   	push   ebx
c0003b26:	83 ec 5c             	sub    esp,0x5c
c0003b29:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b2d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b31:	85 db                	test   ebx,ebx
c0003b33:	0f 84 a7 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b39:	89 fe                	mov    esi,edi
c0003b3b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b3f:	83 e6 3f             	and    esi,0x3f
c0003b42:	89 f0                	mov    eax,esi
c0003b44:	0f b6 c8             	movzx  ecx,al
c0003b47:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b4b:	e8 48 e8 ff ff       	call   c0002398 <mount_volume>
c0003b50:	85 c0                	test   eax,eax
c0003b52:	0f 85 82 02 00 00    	jne    c0003dda <f_open+0x2bd>
c0003b58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b5c:	83 ec 0c             	sub    esp,0xc
c0003b5f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b63:	68 00 02 00 00       	push   0x200
c0003b68:	e8 ff 1e 00 00       	call   c0005a6c <ff_memalloc>
c0003b6d:	83 c4 10             	add    esp,0x10
c0003b70:	89 c5                	mov    ebp,eax
c0003b72:	b8 11 00 00 00       	mov    eax,0x11
c0003b77:	85 ed                	test   ebp,ebp
c0003b79:	0f 84 61 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b83:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003b87:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003b8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003b8e:	e8 0f fd ff ff       	call   c00038a2 <follow_path>
c0003b93:	85 c0                	test   eax,eax
c0003b95:	75 0c                	jne    c0003ba3 <f_open+0x86>
c0003b97:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003b9c:	79 05                	jns    c0003ba3 <f_open+0x86>
c0003b9e:	b8 06 00 00 00       	mov    eax,0x6
c0003ba3:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003ba9:	0f 84 de 00 00 00    	je     c0003c8d <f_open+0x170>
c0003baf:	85 c0                	test   eax,eax
c0003bb1:	74 1e                	je     c0003bd1 <f_open+0xb4>
c0003bb3:	83 f8 04             	cmp    eax,0x4
c0003bb6:	0f 85 06 02 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bbc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bc0:	83 ce 08             	or     esi,0x8
c0003bc3:	e8 6e fd ff ff       	call   c0003936 <dir_register>
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	74 2f                	je     c0003bfb <f_open+0xde>
c0003bcc:	e9 f1 01 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003bd1:	b8 07 00 00 00       	mov    eax,0x7
c0003bd6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bdb:	0f 85 e1 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003be1:	b8 08 00 00 00       	mov    eax,0x8
c0003be6:	f7 c7 04 00 00 00    	test   edi,0x4
c0003bec:	0f 85 d0 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bf2:	83 e7 08             	and    edi,0x8
c0003bf5:	0f 84 bf 00 00 00    	je     c0003cba <f_open+0x19d>
c0003bfb:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003bff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c03:	89 ca                	mov    edx,ecx
c0003c05:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003c09:	8a 00                	mov    al,BYTE PTR [eax]
c0003c0b:	e8 b0 f4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003c10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c14:	89 c7                	mov    edi,eax
c0003c16:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c1b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c1e:	e8 25 e1 ff ff       	call   c0001d48 <st_dword>
c0003c23:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c27:	31 c9                	xor    ecx,ecx
c0003c29:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c35:	e8 af f4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0003c3a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c3e:	31 d2                	xor    edx,edx
c0003c40:	83 c0 1c             	add    eax,0x1c
c0003c43:	e8 00 e1 ff ff       	call   c0001d48 <st_dword>
c0003c48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c4c:	85 ff                	test   edi,edi
c0003c4e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c52:	74 66                	je     c0003cba <f_open+0x19d>
c0003c54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c58:	31 c9                	xor    ecx,ecx
c0003c5a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c5d:	89 fa                	mov    edx,edi
c0003c5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c63:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c67:	e8 a9 f7 ff ff       	call   c0003415 <remove_chain>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	0f 85 4e 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c78:	4f                   	dec    edi
c0003c79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c7d:	e8 c3 e5 ff ff       	call   c0002245 <move_window>
c0003c82:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003c86:	85 c0                	test   eax,eax
c0003c88:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003c8b:	eb 27                	jmp    c0003cb4 <f_open+0x197>
c0003c8d:	85 c0                	test   eax,eax
c0003c8f:	0f 85 2d 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c95:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003c99:	b8 04 00 00 00       	mov    eax,0x4
c0003c9e:	f6 c2 10             	test   dl,0x10
c0003ca1:	0f 85 1b 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003ca7:	83 e7 02             	and    edi,0x2
c0003caa:	74 0e                	je     c0003cba <f_open+0x19d>
c0003cac:	b8 07 00 00 00       	mov    eax,0x7
c0003cb1:	80 e2 01             	and    dl,0x1
c0003cb4:	0f 85 08 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003cba:	f7 c6 08 00 00 00    	test   esi,0x8
c0003cc0:	74 03                	je     c0003cc5 <f_open+0x1a8>
c0003cc2:	83 ce 40             	or     esi,0x40
c0003cc5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003cc9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ccd:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cd0:	89 fa                	mov    edx,edi
c0003cd2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cd6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cd9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003cdc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cde:	e8 dd f3 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003ce3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003ce6:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003ce9:	e8 3e e0 ff ff       	call   c0001d2c <ld_dword>
c0003cee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cf2:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003cf5:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003cf7:	31 d2                	xor    edx,edx
c0003cf9:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003cfd:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003d01:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003d05:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003d0c:	89 f0                	mov    eax,esi
c0003d0e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d15:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d18:	b9 00 02 00 00       	mov    ecx,0x200
c0003d1d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d24:	e8 37 e0 ff ff       	call   c0001d60 <mem_set>
c0003d29:	83 e6 20             	and    esi,0x20
c0003d2c:	75 07                	jne    c0003d35 <f_open+0x218>
c0003d2e:	31 c0                	xor    eax,eax
c0003d30:	e9 8d 00 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003d35:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d38:	85 ff                	test   edi,edi
c0003d3a:	74 f2                	je     c0003d2e <f_open+0x211>
c0003d3c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d43:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d46:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d4a:	c1 e6 09             	shl    esi,0x9
c0003d4d:	39 fe                	cmp    esi,edi
c0003d4f:	73 1c                	jae    c0003d6d <f_open+0x250>
c0003d51:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d53:	29 f7                	sub    edi,esi
c0003d55:	e8 b7 f3 ff ff       	call   c0003111 <get_fat.isra.2>
c0003d5a:	89 c2                	mov    edx,eax
c0003d5c:	83 f8 01             	cmp    eax,0x1
c0003d5f:	76 10                	jbe    c0003d71 <f_open+0x254>
c0003d61:	83 f8 ff             	cmp    eax,0xffffffff
c0003d64:	75 e7                	jne    c0003d4d <f_open+0x230>
c0003d66:	b8 01 00 00 00       	mov    eax,0x1
c0003d6b:	eb 09                	jmp    c0003d76 <f_open+0x259>
c0003d6d:	31 c0                	xor    eax,eax
c0003d6f:	eb 05                	jmp    c0003d76 <f_open+0x259>
c0003d71:	b8 02 00 00 00       	mov    eax,0x2
c0003d76:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d79:	85 c0                	test   eax,eax
c0003d7b:	75 45                	jne    c0003dc2 <f_open+0x2a5>
c0003d7d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003d83:	74 a9                	je     c0003d2e <f_open+0x211>
c0003d85:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003d89:	89 f0                	mov    eax,esi
c0003d8b:	e8 d5 e1 ff ff       	call   c0001f65 <clst2sect>
c0003d90:	89 c2                	mov    edx,eax
c0003d92:	b8 02 00 00 00       	mov    eax,0x2
c0003d97:	85 d2                	test   edx,edx
c0003d99:	74 27                	je     c0003dc2 <f_open+0x2a5>
c0003d9b:	89 f9                	mov    ecx,edi
c0003d9d:	c1 e9 09             	shr    ecx,0x9
c0003da0:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003da3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003da6:	6a 01                	push   0x1
c0003da8:	50                   	push   eax
c0003da9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003dad:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003db1:	50                   	push   eax
c0003db2:	e8 1d df ff ff       	call   c0001cd4 <disk_read>
c0003db7:	83 c4 10             	add    esp,0x10
c0003dba:	85 c0                	test   eax,eax
c0003dbc:	0f 95 c0             	setne  al
c0003dbf:	0f b6 c0             	movzx  eax,al
c0003dc2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003dc6:	83 ec 0c             	sub    esp,0xc
c0003dc9:	55                   	push   ebp
c0003dca:	e8 b5 1c 00 00       	call   c0005a84 <ff_memfree>
c0003dcf:	83 c4 10             	add    esp,0x10
c0003dd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 06                	je     c0003de0 <f_open+0x2c3>
c0003dda:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003de0:	83 c4 5c             	add    esp,0x5c
c0003de3:	5b                   	pop    ebx
c0003de4:	5e                   	pop    esi
c0003de5:	5f                   	pop    edi
c0003de6:	5d                   	pop    ebp
c0003de7:	c3                   	ret    

c0003de8 <f_read>:
c0003de8:	55                   	push   ebp
c0003de9:	57                   	push   edi
c0003dea:	56                   	push   esi
c0003deb:	53                   	push   ebx
c0003dec:	83 ec 2c             	sub    esp,0x2c
c0003def:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003df3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003df7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003dfd:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003e01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e05:	89 d8                	mov    eax,ebx
c0003e07:	e8 8f e3 ff ff       	call   c000219b <validate>
c0003e0c:	89 c5                	mov    ebp,eax
c0003e0e:	85 c0                	test   eax,eax
c0003e10:	0f 85 c7 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e16:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e1a:	85 ed                	test   ebp,ebp
c0003e1c:	0f 85 bb 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e22:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e26:	0f 84 ac 01 00 00    	je     c0003fd8 <f_read+0x1f0>
c0003e2c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e2f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e32:	89 c7                	mov    edi,eax
c0003e34:	39 f0                	cmp    eax,esi
c0003e36:	0f 86 ad 00 00 00    	jbe    c0003ee9 <f_read+0x101>
c0003e3c:	89 f7                	mov    edi,esi
c0003e3e:	e9 a6 00 00 00       	jmp    c0003ee9 <f_read+0x101>
c0003e43:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e46:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e4c:	0f 85 5b 01 00 00    	jne    c0003fad <f_read+0x1c5>
c0003e52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e56:	89 d1                	mov    ecx,edx
c0003e58:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e5c:	c1 e9 09             	shr    ecx,0x9
c0003e5f:	48                   	dec    eax
c0003e60:	21 c8                	and    eax,ecx
c0003e62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e66:	0f 84 8a 00 00 00    	je     c0003ef6 <f_read+0x10e>
c0003e6c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e73:	89 c8                	mov    eax,ecx
c0003e75:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e79:	e8 e7 e0 ff ff       	call   c0001f65 <clst2sect>
c0003e7e:	85 c0                	test   eax,eax
c0003e80:	0f 84 88 00 00 00    	je     c0003f0e <f_read+0x126>
c0003e86:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003e8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003e8e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003e92:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003e98:	0f 86 bd 00 00 00    	jbe    c0003f5b <f_read+0x173>
c0003e9e:	89 fe                	mov    esi,edi
c0003ea0:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003ea4:	c1 ee 09             	shr    esi,0x9
c0003ea7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003eab:	01 f2                	add    edx,esi
c0003ead:	39 c2                	cmp    edx,eax
c0003eaf:	76 06                	jbe    c0003eb7 <f_read+0xcf>
c0003eb1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003eb5:	89 c6                	mov    esi,eax
c0003eb7:	56                   	push   esi
c0003eb8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003ebc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ec0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ec4:	50                   	push   eax
c0003ec5:	e8 0a de ff ff       	call   c0001cd4 <disk_read>
c0003eca:	83 c4 10             	add    esp,0x10
c0003ecd:	85 c0                	test   eax,eax
c0003ecf:	75 50                	jne    c0003f21 <f_read+0x139>
c0003ed1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ed5:	78 60                	js     c0003f37 <f_read+0x14f>
c0003ed7:	c1 e6 09             	shl    esi,0x9
c0003eda:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ede:	29 f7                	sub    edi,esi
c0003ee0:	01 30                	add    DWORD PTR [eax],esi
c0003ee2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003ee6:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003ee9:	85 ff                	test   edi,edi
c0003eeb:	0f 85 52 ff ff ff    	jne    c0003e43 <f_read+0x5b>
c0003ef1:	e9 e7 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003ef6:	85 d2                	test   edx,edx
c0003ef8:	75 05                	jne    c0003eff <f_read+0x117>
c0003efa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003efd:	eb 0a                	jmp    c0003f09 <f_read+0x121>
c0003eff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f04:	e8 08 f2 ff ff       	call   c0003111 <get_fat.isra.2>
c0003f09:	83 f8 01             	cmp    eax,0x1
c0003f0c:	77 0e                	ja     c0003f1c <f_read+0x134>
c0003f0e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f12:	bd 02 00 00 00       	mov    ebp,0x2
c0003f17:	e9 c1 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f1c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f1f:	75 0e                	jne    c0003f2f <f_read+0x147>
c0003f21:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f25:	bd 01 00 00 00       	mov    ebp,0x1
c0003f2a:	e9 ae 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f2f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f32:	e9 35 ff ff ff       	jmp    c0003e6c <f_read+0x84>
c0003f37:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f3a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f3e:	39 f0                	cmp    eax,esi
c0003f40:	73 95                	jae    c0003ed7 <f_read+0xef>
c0003f42:	c1 e0 09             	shl    eax,0x9
c0003f45:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f48:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f4c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f51:	e8 f5 dd ff ff       	call   c0001d4b <mem_cpy>
c0003f56:	e9 7c ff ff ff       	jmp    c0003ed7 <f_read+0xef>
c0003f5b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f5e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f62:	74 42                	je     c0003fa6 <f_read+0x1be>
c0003f64:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f67:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f6b:	79 19                	jns    c0003f86 <f_read+0x19e>
c0003f6d:	6a 01                	push   0x1
c0003f6f:	50                   	push   eax
c0003f70:	56                   	push   esi
c0003f71:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f75:	50                   	push   eax
c0003f76:	e8 6f dd ff ff       	call   c0001cea <disk_write>
c0003f7b:	83 c4 10             	add    esp,0x10
c0003f7e:	85 c0                	test   eax,eax
c0003f80:	75 9f                	jne    c0003f21 <f_read+0x139>
c0003f82:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003f86:	6a 01                	push   0x1
c0003f88:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003f8c:	56                   	push   esi
c0003f8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003f91:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003f95:	50                   	push   eax
c0003f96:	e8 39 dd ff ff       	call   c0001cd4 <disk_read>
c0003f9b:	83 c4 10             	add    esp,0x10
c0003f9e:	85 c0                	test   eax,eax
c0003fa0:	0f 85 7b ff ff ff    	jne    c0003f21 <f_read+0x139>
c0003fa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003faa:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003fad:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fb0:	ba 00 02 00 00       	mov    edx,0x200
c0003fb5:	25 ff 01 00 00       	and    eax,0x1ff
c0003fba:	89 fe                	mov    esi,edi
c0003fbc:	29 c2                	sub    edx,eax
c0003fbe:	39 d7                	cmp    edi,edx
c0003fc0:	76 02                	jbe    c0003fc4 <f_read+0x1dc>
c0003fc2:	89 d6                	mov    esi,edx
c0003fc4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fc8:	89 f1                	mov    ecx,esi
c0003fca:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fce:	e8 78 dd ff ff       	call   c0001d4b <mem_cpy>
c0003fd3:	e9 02 ff ff ff       	jmp    c0003eda <f_read+0xf2>
c0003fd8:	bd 07 00 00 00       	mov    ebp,0x7
c0003fdd:	83 c4 2c             	add    esp,0x2c
c0003fe0:	89 e8                	mov    eax,ebp
c0003fe2:	5b                   	pop    ebx
c0003fe3:	5e                   	pop    esi
c0003fe4:	5f                   	pop    edi
c0003fe5:	5d                   	pop    ebp
c0003fe6:	c3                   	ret    

c0003fe7 <f_write>:
c0003fe7:	55                   	push   ebp
c0003fe8:	57                   	push   edi
c0003fe9:	56                   	push   esi
c0003fea:	53                   	push   ebx
c0003feb:	83 ec 2c             	sub    esp,0x2c
c0003fee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ff2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003ff6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004000:	89 d8                	mov    eax,ebx
c0004002:	e8 94 e1 ff ff       	call   c000219b <validate>
c0004007:	89 c5                	mov    ebp,eax
c0004009:	85 c0                	test   eax,eax
c000400b:	0f 85 00 02 00 00    	jne    c0004211 <f_write+0x22a>
c0004011:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004015:	85 ed                	test   ebp,ebp
c0004017:	0f 85 f4 01 00 00    	jne    c0004211 <f_write+0x22a>
c000401d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004021:	0f 84 e5 01 00 00    	je     c000420c <f_write+0x225>
c0004027:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000402a:	89 c7                	mov    edi,eax
c000402c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004030:	0f 83 ea 00 00 00    	jae    c0004120 <f_write+0x139>
c0004036:	f7 d0                	not    eax
c0004038:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000403c:	e9 df 00 00 00       	jmp    c0004120 <f_write+0x139>
c0004041:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004044:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000404a:	0f 85 8b 01 00 00    	jne    c00041db <f_write+0x1f4>
c0004050:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004054:	89 d1                	mov    ecx,edx
c0004056:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000405a:	c1 e9 09             	shr    ecx,0x9
c000405d:	48                   	dec    eax
c000405e:	21 c8                	and    eax,ecx
c0004060:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004064:	0f 84 c3 00 00 00    	je     c000412d <f_write+0x146>
c000406a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000406e:	0f 88 18 01 00 00    	js     c000418c <f_write+0x1a5>
c0004074:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004078:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000407b:	89 c8                	mov    eax,ecx
c000407d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004081:	e8 df de ff ff       	call   c0001f65 <clst2sect>
c0004086:	85 c0                	test   eax,eax
c0004088:	0f 84 c8 00 00 00    	je     c0004156 <f_write+0x16f>
c000408e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0004092:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004096:	01 c7                	add    edi,eax
c0004098:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00040a0:	0f 86 0d 01 00 00    	jbe    c00041b3 <f_write+0x1cc>
c00040a6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00040aa:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040ae:	c1 ee 09             	shr    esi,0x9
c00040b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040b5:	01 f2                	add    edx,esi
c00040b7:	39 c2                	cmp    edx,eax
c00040b9:	76 06                	jbe    c00040c1 <f_write+0xda>
c00040bb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040bf:	89 c6                	mov    esi,eax
c00040c1:	56                   	push   esi
c00040c2:	57                   	push   edi
c00040c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040cb:	50                   	push   eax
c00040cc:	e8 19 dc ff ff       	call   c0001cea <disk_write>
c00040d1:	83 c4 10             	add    esp,0x10
c00040d4:	85 c0                	test   eax,eax
c00040d6:	0f 85 8d 00 00 00    	jne    c0004169 <f_write+0x182>
c00040dc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040df:	29 fa                	sub    edx,edi
c00040e1:	39 f2                	cmp    edx,esi
c00040e3:	73 18                	jae    c00040fd <f_write+0x116>
c00040e5:	c1 e2 09             	shl    edx,0x9
c00040e8:	8d 43 28             	lea    eax,[ebx+0x28]
c00040eb:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c00040ef:	b9 00 02 00 00       	mov    ecx,0x200
c00040f4:	e8 52 dc ff ff       	call   c0001d4b <mem_cpy>
c00040f9:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00040fd:	c1 e6 09             	shl    esi,0x9
c0004100:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004104:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004108:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000410c:	01 30                	add    DWORD PTR [eax],esi
c000410e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004111:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004114:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004117:	39 f0                	cmp    eax,esi
c0004119:	73 02                	jae    c000411d <f_write+0x136>
c000411b:	89 f0                	mov    eax,esi
c000411d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004120:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004125:	0f 85 16 ff ff ff    	jne    c0004041 <f_write+0x5a>
c000412b:	eb 1b                	jmp    c0004148 <f_write+0x161>
c000412d:	85 d2                	test   edx,edx
c000412f:	75 09                	jne    c000413a <f_write+0x153>
c0004131:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004134:	85 c0                	test   eax,eax
c0004136:	75 19                	jne    c0004151 <f_write+0x16a>
c0004138:	eb 03                	jmp    c000413d <f_write+0x156>
c000413a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000413d:	89 d8                	mov    eax,ebx
c000413f:	e8 97 f1 ff ff       	call   c00032db <create_chain>
c0004144:	85 c0                	test   eax,eax
c0004146:	75 09                	jne    c0004151 <f_write+0x16a>
c0004148:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000414c:	e9 c0 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004151:	83 f8 01             	cmp    eax,0x1
c0004154:	75 0e                	jne    c0004164 <f_write+0x17d>
c0004156:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000415a:	bd 02 00 00 00       	mov    ebp,0x2
c000415f:	e9 ad 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004164:	83 f8 ff             	cmp    eax,0xffffffff
c0004167:	75 0e                	jne    c0004177 <f_write+0x190>
c0004169:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000416d:	bd 01 00 00 00       	mov    ebp,0x1
c0004172:	e9 9a 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004177:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000417a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000417e:	0f 85 e6 fe ff ff    	jne    c000406a <f_write+0x83>
c0004184:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004187:	e9 de fe ff ff       	jmp    c000406a <f_write+0x83>
c000418c:	6a 01                	push   0x1
c000418e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004191:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004194:	50                   	push   eax
c0004195:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004199:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000419d:	50                   	push   eax
c000419e:	e8 47 db ff ff       	call   c0001cea <disk_write>
c00041a3:	83 c4 10             	add    esp,0x10
c00041a6:	85 c0                	test   eax,eax
c00041a8:	75 bf                	jne    c0004169 <f_write+0x182>
c00041aa:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00041ae:	e9 c1 fe ff ff       	jmp    c0004074 <f_write+0x8d>
c00041b3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041b6:	74 20                	je     c00041d8 <f_write+0x1f1>
c00041b8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041bb:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041be:	76 18                	jbe    c00041d8 <f_write+0x1f1>
c00041c0:	6a 01                	push   0x1
c00041c2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041c5:	57                   	push   edi
c00041c6:	50                   	push   eax
c00041c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041cb:	50                   	push   eax
c00041cc:	e8 03 db ff ff       	call   c0001cd4 <disk_read>
c00041d1:	83 c4 10             	add    esp,0x10
c00041d4:	85 c0                	test   eax,eax
c00041d6:	75 91                	jne    c0004169 <f_write+0x182>
c00041d8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041db:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041de:	ba 00 02 00 00       	mov    edx,0x200
c00041e3:	25 ff 01 00 00       	and    eax,0x1ff
c00041e8:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041ec:	29 c2                	sub    edx,eax
c00041ee:	39 d6                	cmp    esi,edx
c00041f0:	76 02                	jbe    c00041f4 <f_write+0x20d>
c00041f2:	89 d6                	mov    esi,edx
c00041f4:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c00041f8:	89 f1                	mov    ecx,esi
c00041fa:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00041fe:	e8 48 db ff ff       	call   c0001d4b <mem_cpy>
c0004203:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004207:	e9 f4 fe ff ff       	jmp    c0004100 <f_write+0x119>
c000420c:	bd 07 00 00 00       	mov    ebp,0x7
c0004211:	83 c4 2c             	add    esp,0x2c
c0004214:	89 e8                	mov    eax,ebp
c0004216:	5b                   	pop    ebx
c0004217:	5e                   	pop    esi
c0004218:	5f                   	pop    edi
c0004219:	5d                   	pop    ebp
c000421a:	c3                   	ret    

c000421b <f_sync>:
c000421b:	56                   	push   esi
c000421c:	53                   	push   ebx
c000421d:	83 ec 14             	sub    esp,0x14
c0004220:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004224:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 6c df ff ff       	call   c000219b <validate>
c000422f:	85 c0                	test   eax,eax
c0004231:	0f 85 93 00 00 00    	jne    c00042ca <f_sync+0xaf>
c0004237:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000423a:	f6 c2 40             	test   dl,0x40
c000423d:	0f 84 87 00 00 00    	je     c00042ca <f_sync+0xaf>
c0004243:	84 d2                	test   dl,dl
c0004245:	79 29                	jns    c0004270 <f_sync+0x55>
c0004247:	6a 01                	push   0x1
c0004249:	8d 43 28             	lea    eax,[ebx+0x28]
c000424c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000424f:	50                   	push   eax
c0004250:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004254:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004258:	50                   	push   eax
c0004259:	e8 8c da ff ff       	call   c0001cea <disk_write>
c000425e:	83 c4 10             	add    esp,0x10
c0004261:	89 c2                	mov    edx,eax
c0004263:	b8 01 00 00 00       	mov    eax,0x1
c0004268:	85 d2                	test   edx,edx
c000426a:	75 5e                	jne    c00042ca <f_sync+0xaf>
c000426c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004270:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004273:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004277:	e8 c9 df ff ff       	call   c0002245 <move_window>
c000427c:	85 c0                	test   eax,eax
c000427e:	75 4a                	jne    c00042ca <f_sync+0xaf>
c0004280:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0004283:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0004287:	89 f2                	mov    edx,esi
c0004289:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000428c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000428e:	e8 56 ee ff ff       	call   c00030e9 <st_clust.isra.1>
c0004293:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004296:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004299:	e8 aa da ff ff       	call   c0001d48 <st_dword>
c000429e:	8d 46 16             	lea    eax,[esi+0x16]
c00042a1:	ba 00 00 21 50       	mov    edx,0x50210000
c00042a6:	e8 9d da ff ff       	call   c0001d48 <st_dword>
c00042ab:	8d 46 12             	lea    eax,[esi+0x12]
c00042ae:	31 d2                	xor    edx,edx
c00042b0:	e8 8f da ff ff       	call   c0001d44 <st_word>
c00042b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042b9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042c1:	e8 bf e9 ff ff       	call   c0002c85 <sync_fs>
c00042c6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ca:	83 c4 14             	add    esp,0x14
c00042cd:	5b                   	pop    ebx
c00042ce:	5e                   	pop    esi
c00042cf:	c3                   	ret    

c00042d0 <f_close>:
c00042d0:	53                   	push   ebx
c00042d1:	83 ec 24             	sub    esp,0x24
c00042d4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042d8:	53                   	push   ebx
c00042d9:	e8 3d ff ff ff       	call   c000421b <f_sync>
c00042de:	83 c4 10             	add    esp,0x10
c00042e1:	85 c0                	test   eax,eax
c00042e3:	75 15                	jne    c00042fa <f_close+0x2a>
c00042e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00042e9:	89 d8                	mov    eax,ebx
c00042eb:	e8 ab de ff ff       	call   c000219b <validate>
c00042f0:	85 c0                	test   eax,eax
c00042f2:	75 06                	jne    c00042fa <f_close+0x2a>
c00042f4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00042fa:	83 c4 18             	add    esp,0x18
c00042fd:	5b                   	pop    ebx
c00042fe:	c3                   	ret    

c00042ff <f_lseek>:
c00042ff:	55                   	push   ebp
c0004300:	57                   	push   edi
c0004301:	56                   	push   esi
c0004302:	53                   	push   ebx
c0004303:	83 ec 2c             	sub    esp,0x2c
c0004306:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000430a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000430e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004312:	89 d8                	mov    eax,ebx
c0004314:	e8 82 de ff ff       	call   c000219b <validate>
c0004319:	89 c5                	mov    ebp,eax
c000431b:	85 c0                	test   eax,eax
c000431d:	0f 85 79 01 00 00    	jne    c000449c <f_lseek+0x19d>
c0004323:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004327:	85 ed                	test   ebp,ebp
c0004329:	0f 85 6d 01 00 00    	jne    c000449c <f_lseek+0x19d>
c000432f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004332:	39 f0                	cmp    eax,esi
c0004334:	73 08                	jae    c000433e <f_lseek+0x3f>
c0004336:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433a:	75 02                	jne    c000433e <f_lseek+0x3f>
c000433c:	89 c6                	mov    esi,eax
c000433e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004341:	85 f6                	test   esi,esi
c0004343:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000434a:	75 07                	jne    c0004353 <f_lseek+0x54>
c000434c:	31 f6                	xor    esi,esi
c000434e:	e9 e2 00 00 00       	jmp    c0004435 <f_lseek+0x136>
c0004353:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004357:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000435b:	c1 e7 09             	shl    edi,0x9
c000435e:	85 c9                	test   ecx,ecx
c0004360:	74 28                	je     c000438a <f_lseek+0x8b>
c0004362:	49                   	dec    ecx
c0004363:	31 d2                	xor    edx,edx
c0004365:	8d 46 ff             	lea    eax,[esi-0x1]
c0004368:	f7 f7                	div    edi
c000436a:	31 d2                	xor    edx,edx
c000436c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004370:	89 c8                	mov    eax,ecx
c0004372:	f7 f7                	div    edi
c0004374:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004378:	72 10                	jb     c000438a <f_lseek+0x8b>
c000437a:	89 f8                	mov    eax,edi
c000437c:	f7 d8                	neg    eax
c000437e:	21 c1                	and    ecx,eax
c0004380:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004383:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004386:	29 ce                	sub    esi,ecx
c0004388:	eb 3c                	jmp    c00043c6 <f_lseek+0xc7>
c000438a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000438d:	85 c0                	test   eax,eax
c000438f:	75 32                	jne    c00043c3 <f_lseek+0xc4>
c0004391:	31 d2                	xor    edx,edx
c0004393:	89 d8                	mov    eax,ebx
c0004395:	e8 41 ef ff ff       	call   c00032db <create_chain>
c000439a:	83 f8 01             	cmp    eax,0x1
c000439d:	75 0e                	jne    c00043ad <f_lseek+0xae>
c000439f:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00043a3:	bd 02 00 00 00       	mov    ebp,0x2
c00043a8:	e9 ef 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043ad:	83 f8 ff             	cmp    eax,0xffffffff
c00043b0:	75 0e                	jne    c00043c0 <f_lseek+0xc1>
c00043b2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043b6:	bd 01 00 00 00       	mov    ebp,0x1
c00043bb:	e9 dc 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043c0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043c6:	85 c0                	test   eax,eax
c00043c8:	74 82                	je     c000434c <f_lseek+0x4d>
c00043ca:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043cd:	39 fe                	cmp    esi,edi
c00043cf:	76 3d                	jbe    c000440e <f_lseek+0x10f>
c00043d1:	01 fa                	add    edx,edi
c00043d3:	29 fe                	sub    esi,edi
c00043d5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043d8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043dc:	89 c2                	mov    edx,eax
c00043de:	74 0d                	je     c00043ed <f_lseek+0xee>
c00043e0:	89 d8                	mov    eax,ebx
c00043e2:	e8 f4 ee ff ff       	call   c00032db <create_chain>
c00043e7:	85 c0                	test   eax,eax
c00043e9:	75 09                	jne    c00043f4 <f_lseek+0xf5>
c00043eb:	eb 1f                	jmp    c000440c <f_lseek+0x10d>
c00043ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043ef:	e8 1d ed ff ff       	call   c0003111 <get_fat.isra.2>
c00043f4:	83 f8 ff             	cmp    eax,0xffffffff
c00043f7:	74 b9                	je     c00043b2 <f_lseek+0xb3>
c00043f9:	83 f8 01             	cmp    eax,0x1
c00043fc:	76 a1                	jbe    c000439f <f_lseek+0xa0>
c00043fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004402:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004405:	76 98                	jbe    c000439f <f_lseek+0xa0>
c0004407:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000440a:	eb be                	jmp    c00043ca <f_lseek+0xcb>
c000440c:	31 f6                	xor    esi,esi
c000440e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004411:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004417:	0f 84 2f ff ff ff    	je     c000434c <f_lseek+0x4d>
c000441d:	89 c2                	mov    edx,eax
c000441f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004423:	e8 3d db ff ff       	call   c0001f65 <clst2sect>
c0004428:	85 c0                	test   eax,eax
c000442a:	0f 84 6f ff ff ff    	je     c000439f <f_lseek+0xa0>
c0004430:	c1 ee 09             	shr    esi,0x9
c0004433:	01 c6                	add    esi,eax
c0004435:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004438:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000443b:	76 07                	jbe    c0004444 <f_lseek+0x145>
c000443d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004440:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004444:	a9 ff 01 00 00       	test   eax,0x1ff
c0004449:	74 51                	je     c000449c <f_lseek+0x19d>
c000444b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000444e:	39 f0                	cmp    eax,esi
c0004450:	74 4a                	je     c000449c <f_lseek+0x19d>
c0004452:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004455:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004459:	79 21                	jns    c000447c <f_lseek+0x17d>
c000445b:	6a 01                	push   0x1
c000445d:	50                   	push   eax
c000445e:	57                   	push   edi
c000445f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004463:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004467:	50                   	push   eax
c0004468:	e8 7d d8 ff ff       	call   c0001cea <disk_write>
c000446d:	83 c4 10             	add    esp,0x10
c0004470:	85 c0                	test   eax,eax
c0004472:	0f 85 3a ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004478:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000447c:	6a 01                	push   0x1
c000447e:	56                   	push   esi
c000447f:	57                   	push   edi
c0004480:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004484:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004488:	50                   	push   eax
c0004489:	e8 46 d8 ff ff       	call   c0001cd4 <disk_read>
c000448e:	83 c4 10             	add    esp,0x10
c0004491:	85 c0                	test   eax,eax
c0004493:	0f 85 19 ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004499:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000449c:	83 c4 2c             	add    esp,0x2c
c000449f:	89 e8                	mov    eax,ebp
c00044a1:	5b                   	pop    ebx
c00044a2:	5e                   	pop    esi
c00044a3:	5f                   	pop    edi
c00044a4:	5d                   	pop    ebp
c00044a5:	c3                   	ret    

c00044a6 <f_opendir>:
c00044a6:	56                   	push   esi
c00044a7:	b8 09 00 00 00       	mov    eax,0x9
c00044ac:	53                   	push   ebx
c00044ad:	83 ec 24             	sub    esp,0x24
c00044b0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044b4:	85 db                	test   ebx,ebx
c00044b6:	0f 84 af 00 00 00    	je     c000456b <f_opendir+0xc5>
c00044bc:	31 c9                	xor    ecx,ecx
c00044be:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044c2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044c6:	e8 cd de ff ff       	call   c0002398 <mount_volume>
c00044cb:	85 c0                	test   eax,eax
c00044cd:	0f 85 92 00 00 00    	jne    c0004565 <f_opendir+0xbf>
c00044d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d7:	83 ec 0c             	sub    esp,0xc
c00044da:	89 03                	mov    DWORD PTR [ebx],eax
c00044dc:	68 00 02 00 00       	push   0x200
c00044e1:	e8 86 15 00 00       	call   c0005a6c <ff_memalloc>
c00044e6:	83 c4 10             	add    esp,0x10
c00044e9:	89 c6                	mov    esi,eax
c00044eb:	b8 11 00 00 00       	mov    eax,0x11
c00044f0:	85 f6                	test   esi,esi
c00044f2:	74 77                	je     c000456b <f_opendir+0xc5>
c00044f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044f8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00044fc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00044ff:	89 d8                	mov    eax,ebx
c0004501:	e8 9c f3 ff ff       	call   c00038a2 <follow_path>
c0004506:	85 c0                	test   eax,eax
c0004508:	75 37                	jne    c0004541 <f_opendir+0x9b>
c000450a:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000450e:	78 1c                	js     c000452c <f_opendir+0x86>
c0004510:	b8 05 00 00 00       	mov    eax,0x5
c0004515:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004519:	74 26                	je     c0004541 <f_opendir+0x9b>
c000451b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000451e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004522:	8a 00                	mov    al,BYTE PTR [eax]
c0004524:	e8 97 eb ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004529:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000452c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004530:	31 d2                	xor    edx,edx
c0004532:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004536:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000453a:	89 d8                	mov    eax,ebx
c000453c:	e8 d2 ec ff ff       	call   c0003213 <dir_sdi>
c0004541:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004545:	83 ec 0c             	sub    esp,0xc
c0004548:	56                   	push   esi
c0004549:	e8 36 15 00 00       	call   c0005a84 <ff_memfree>
c000454e:	83 c4 10             	add    esp,0x10
c0004551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004555:	83 f8 04             	cmp    eax,0x4
c0004558:	74 06                	je     c0004560 <f_opendir+0xba>
c000455a:	85 c0                	test   eax,eax
c000455c:	74 0d                	je     c000456b <f_opendir+0xc5>
c000455e:	eb 05                	jmp    c0004565 <f_opendir+0xbf>
c0004560:	b8 05 00 00 00       	mov    eax,0x5
c0004565:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000456b:	83 c4 24             	add    esp,0x24
c000456e:	5b                   	pop    ebx
c000456f:	5e                   	pop    esi
c0004570:	c3                   	ret    

c0004571 <f_closedir>:
c0004571:	53                   	push   ebx
c0004572:	83 ec 18             	sub    esp,0x18
c0004575:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004579:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000457d:	89 d8                	mov    eax,ebx
c000457f:	e8 17 dc ff ff       	call   c000219b <validate>
c0004584:	85 c0                	test   eax,eax
c0004586:	75 06                	jne    c000458e <f_closedir+0x1d>
c0004588:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000458e:	83 c4 18             	add    esp,0x18
c0004591:	5b                   	pop    ebx
c0004592:	c3                   	ret    

c0004593 <f_readdir>:
c0004593:	57                   	push   edi
c0004594:	56                   	push   esi
c0004595:	53                   	push   ebx
c0004596:	83 ec 20             	sub    esp,0x20
c0004599:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000459d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00045a1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00045a5:	89 d8                	mov    eax,ebx
c00045a7:	e8 ef db ff ff       	call   c000219b <validate>
c00045ac:	85 c0                	test   eax,eax
c00045ae:	75 6e                	jne    c000461e <f_readdir+0x8b>
c00045b0:	85 ff                	test   edi,edi
c00045b2:	75 0b                	jne    c00045bf <f_readdir+0x2c>
c00045b4:	31 d2                	xor    edx,edx
c00045b6:	89 d8                	mov    eax,ebx
c00045b8:	e8 56 ec ff ff       	call   c0003213 <dir_sdi>
c00045bd:	eb 5f                	jmp    c000461e <f_readdir+0x8b>
c00045bf:	83 ec 0c             	sub    esp,0xc
c00045c2:	68 00 02 00 00       	push   0x200
c00045c7:	e8 a0 14 00 00       	call   c0005a6c <ff_memalloc>
c00045cc:	83 c4 10             	add    esp,0x10
c00045cf:	89 c6                	mov    esi,eax
c00045d1:	b8 11 00 00 00       	mov    eax,0x11
c00045d6:	85 f6                	test   esi,esi
c00045d8:	74 44                	je     c000461e <f_readdir+0x8b>
c00045da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045de:	31 d2                	xor    edx,edx
c00045e0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00045e3:	89 d8                	mov    eax,ebx
c00045e5:	e8 1a f0 ff ff       	call   c0003604 <dir_read>
c00045ea:	a9 fb ff ff ff       	test   eax,0xfffffffb
c00045ef:	75 19                	jne    c000460a <f_readdir+0x77>
c00045f1:	89 fa                	mov    edx,edi
c00045f3:	89 d8                	mov    eax,ebx
c00045f5:	e8 e2 e8 ff ff       	call   c0002edc <get_fileinfo>
c00045fa:	31 d2                	xor    edx,edx
c00045fc:	89 d8                	mov    eax,ebx
c00045fe:	e8 9b ee ff ff       	call   c000349e <dir_next>
c0004603:	83 f8 04             	cmp    eax,0x4
c0004606:	75 02                	jne    c000460a <f_readdir+0x77>
c0004608:	31 c0                	xor    eax,eax
c000460a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000460e:	83 ec 0c             	sub    esp,0xc
c0004611:	56                   	push   esi
c0004612:	e8 6d 14 00 00       	call   c0005a84 <ff_memfree>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461e:	83 c4 20             	add    esp,0x20
c0004621:	5b                   	pop    ebx
c0004622:	5e                   	pop    esi
c0004623:	5f                   	pop    edi
c0004624:	c3                   	ret    

c0004625 <f_stat>:
c0004625:	57                   	push   edi
c0004626:	31 c9                	xor    ecx,ecx
c0004628:	56                   	push   esi
c0004629:	53                   	push   ebx
c000462a:	83 ec 30             	sub    esp,0x30
c000462d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004631:	89 e2                	mov    edx,esp
c0004633:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004637:	e8 5c dd ff ff       	call   c0002398 <mount_volume>
c000463c:	89 c3                	mov    ebx,eax
c000463e:	85 c0                	test   eax,eax
c0004640:	75 59                	jne    c000469b <f_stat+0x76>
c0004642:	83 ec 0c             	sub    esp,0xc
c0004645:	bb 11 00 00 00       	mov    ebx,0x11
c000464a:	68 00 02 00 00       	push   0x200
c000464f:	e8 18 14 00 00       	call   c0005a6c <ff_memalloc>
c0004654:	83 c4 10             	add    esp,0x10
c0004657:	89 c6                	mov    esi,eax
c0004659:	85 c0                	test   eax,eax
c000465b:	74 3e                	je     c000469b <f_stat+0x76>
c000465d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004660:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004664:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004667:	89 e0                	mov    eax,esp
c0004669:	e8 34 f2 ff ff       	call   c00038a2 <follow_path>
c000466e:	89 c3                	mov    ebx,eax
c0004670:	85 c0                	test   eax,eax
c0004672:	75 1b                	jne    c000468f <f_stat+0x6a>
c0004674:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004679:	78 0f                	js     c000468a <f_stat+0x65>
c000467b:	85 ff                	test   edi,edi
c000467d:	74 10                	je     c000468f <f_stat+0x6a>
c000467f:	89 fa                	mov    edx,edi
c0004681:	89 e0                	mov    eax,esp
c0004683:	e8 54 e8 ff ff       	call   c0002edc <get_fileinfo>
c0004688:	eb 05                	jmp    c000468f <f_stat+0x6a>
c000468a:	bb 06 00 00 00       	mov    ebx,0x6
c000468f:	83 ec 0c             	sub    esp,0xc
c0004692:	56                   	push   esi
c0004693:	e8 ec 13 00 00       	call   c0005a84 <ff_memfree>
c0004698:	83 c4 10             	add    esp,0x10
c000469b:	83 c4 30             	add    esp,0x30
c000469e:	89 d8                	mov    eax,ebx
c00046a0:	5b                   	pop    ebx
c00046a1:	5e                   	pop    esi
c00046a2:	5f                   	pop    edi
c00046a3:	c3                   	ret    

c00046a4 <f_getfree>:
c00046a4:	55                   	push   ebp
c00046a5:	31 c9                	xor    ecx,ecx
c00046a7:	57                   	push   edi
c00046a8:	56                   	push   esi
c00046a9:	53                   	push   ebx
c00046aa:	83 ec 2c             	sub    esp,0x2c
c00046ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046b1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046b5:	e8 de dc ff ff       	call   c0002398 <mount_volume>
c00046ba:	89 c7                	mov    edi,eax
c00046bc:	85 c0                	test   eax,eax
c00046be:	0f 85 d8 00 00 00    	jne    c000479c <f_getfree+0xf8>
c00046c4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046cc:	89 30                	mov    DWORD PTR [eax],esi
c00046ce:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046d1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046d4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046d7:	39 d0                	cmp    eax,edx
c00046d9:	77 0b                	ja     c00046e6 <f_getfree+0x42>
c00046db:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046df:	89 01                	mov    DWORD PTR [ecx],eax
c00046e1:	e9 b6 00 00 00       	jmp    c000479c <f_getfree+0xf8>
c00046e6:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c00046e9:	75 29                	jne    c0004714 <f_getfree+0x70>
c00046eb:	bd 02 00 00 00       	mov    ebp,0x2
c00046f0:	31 db                	xor    ebx,ebx
c00046f2:	89 ea                	mov    edx,ebp
c00046f4:	89 f0                	mov    eax,esi
c00046f6:	e8 16 ea ff ff       	call   c0003111 <get_fat.isra.2>
c00046fb:	83 f8 ff             	cmp    eax,0xffffffff
c00046fe:	74 7b                	je     c000477b <f_getfree+0xd7>
c0004700:	83 f8 01             	cmp    eax,0x1
c0004703:	74 7d                	je     c0004782 <f_getfree+0xde>
c0004705:	83 d3 00             	adc    ebx,0x0
c0004708:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000470c:	45                   	inc    ebp
c000470d:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004710:	77 e0                	ja     c00046f2 <f_getfree+0x4e>
c0004712:	eb 77                	jmp    c000478b <f_getfree+0xe7>
c0004714:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004717:	31 db                	xor    ebx,ebx
c0004719:	31 f6                	xor    esi,esi
c000471b:	85 f6                	test   esi,esi
c000471d:	75 18                	jne    c0004737 <f_getfree+0x93>
c000471f:	8d 42 01             	lea    eax,[edx+0x1]
c0004722:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004726:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000472a:	e8 16 db ff ff       	call   c0002245 <move_window>
c000472f:	85 c0                	test   eax,eax
c0004731:	75 56                	jne    c0004789 <f_getfree+0xe5>
c0004733:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004737:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000473b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000473f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004743:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004746:	75 11                	jne    c0004759 <f_getfree+0xb5>
c0004748:	e8 d2 d5 ff ff       	call   c0001d1f <ld_word>
c000474d:	66 83 f8 01          	cmp    ax,0x1
c0004751:	83 d3 00             	adc    ebx,0x0
c0004754:	83 c6 02             	add    esi,0x2
c0004757:	eb 13                	jmp    c000476c <f_getfree+0xc8>
c0004759:	e8 ce d5 ff ff       	call   c0001d2c <ld_dword>
c000475e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004763:	83 f8 01             	cmp    eax,0x1
c0004766:	83 d3 00             	adc    ebx,0x0
c0004769:	83 c6 04             	add    esi,0x4
c000476c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004772:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004776:	4d                   	dec    ebp
c0004777:	75 a2                	jne    c000471b <f_getfree+0x77>
c0004779:	eb 10                	jmp    c000478b <f_getfree+0xe7>
c000477b:	bf 01 00 00 00       	mov    edi,0x1
c0004780:	eb 09                	jmp    c000478b <f_getfree+0xe7>
c0004782:	bf 02 00 00 00       	mov    edi,0x2
c0004787:	eb 02                	jmp    c000478b <f_getfree+0xe7>
c0004789:	89 c7                	mov    edi,eax
c000478b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000478f:	89 18                	mov    DWORD PTR [eax],ebx
c0004791:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004795:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004798:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000479c:	83 c4 2c             	add    esp,0x2c
c000479f:	89 f8                	mov    eax,edi
c00047a1:	5b                   	pop    ebx
c00047a2:	5e                   	pop    esi
c00047a3:	5f                   	pop    edi
c00047a4:	5d                   	pop    ebp
c00047a5:	c3                   	ret    

c00047a6 <f_truncate>:
c00047a6:	56                   	push   esi
c00047a7:	53                   	push   ebx
c00047a8:	83 ec 14             	sub    esp,0x14
c00047ab:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047af:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047b3:	89 d8                	mov    eax,ebx
c00047b5:	e8 e1 d9 ff ff       	call   c000219b <validate>
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	0f 85 be 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047c4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047c8:	85 f6                	test   esi,esi
c00047ca:	0f 85 b2 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047d0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047d4:	0f 84 a3 00 00 00    	je     c000487d <f_truncate+0xd7>
c00047da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047dd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00047e0:	0f 83 9c 00 00 00    	jae    c0004882 <f_truncate+0xdc>
c00047e6:	85 c0                	test   eax,eax
c00047e8:	75 15                	jne    c00047ff <f_truncate+0x59>
c00047ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00047ed:	31 c9                	xor    ecx,ecx
c00047ef:	89 d8                	mov    eax,ebx
c00047f1:	e8 1f ec ff ff       	call   c0003415 <remove_chain>
c00047f6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00047fd:	eb 35                	jmp    c0004834 <f_truncate+0x8e>
c00047ff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004802:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004804:	e8 08 e9 ff ff       	call   c0003111 <get_fat.isra.2>
c0004809:	89 c2                	mov    edx,eax
c000480b:	b8 01 00 00 00       	mov    eax,0x1
c0004810:	83 fa ff             	cmp    edx,0xffffffff
c0004813:	74 1f                	je     c0004834 <f_truncate+0x8e>
c0004815:	b8 02 00 00 00       	mov    eax,0x2
c000481a:	83 fa 01             	cmp    edx,0x1
c000481d:	74 15                	je     c0004834 <f_truncate+0x8e>
c000481f:	31 c0                	xor    eax,eax
c0004821:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004825:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004828:	76 0a                	jbe    c0004834 <f_truncate+0x8e>
c000482a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000482d:	89 d8                	mov    eax,ebx
c000482f:	e8 e1 eb ff ff       	call   c0003415 <remove_chain>
c0004834:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004837:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000483a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000483d:	83 ca 40             	or     edx,0x40
c0004840:	85 c0                	test   eax,eax
c0004842:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004845:	75 2f                	jne    c0004876 <f_truncate+0xd0>
c0004847:	84 d2                	test   dl,dl
c0004849:	79 37                	jns    c0004882 <f_truncate+0xdc>
c000484b:	6a 01                	push   0x1
c000484d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004850:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004853:	50                   	push   eax
c0004854:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004858:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000485c:	50                   	push   eax
c000485d:	e8 88 d4 ff ff       	call   c0001cea <disk_write>
c0004862:	83 c4 10             	add    esp,0x10
c0004865:	85 c0                	test   eax,eax
c0004867:	75 08                	jne    c0004871 <f_truncate+0xcb>
c0004869:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000486d:	31 f6                	xor    esi,esi
c000486f:	eb 11                	jmp    c0004882 <f_truncate+0xdc>
c0004871:	b8 01 00 00 00       	mov    eax,0x1
c0004876:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004879:	89 c6                	mov    esi,eax
c000487b:	eb 05                	jmp    c0004882 <f_truncate+0xdc>
c000487d:	be 07 00 00 00       	mov    esi,0x7
c0004882:	89 f0                	mov    eax,esi
c0004884:	83 c4 14             	add    esp,0x14
c0004887:	5b                   	pop    ebx
c0004888:	5e                   	pop    esi
c0004889:	c3                   	ret    

c000488a <f_unlink>:
c000488a:	55                   	push   ebp
c000488b:	b9 02 00 00 00       	mov    ecx,0x2
c0004890:	57                   	push   edi
c0004891:	56                   	push   esi
c0004892:	53                   	push   ebx
c0004893:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004899:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000489d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00048a4:	e8 ef da ff ff       	call   c0002398 <mount_volume>
c00048a9:	85 c0                	test   eax,eax
c00048ab:	0f 85 f0 00 00 00    	jne    c00049a1 <f_unlink+0x117>
c00048b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b5:	83 ec 0c             	sub    esp,0xc
c00048b8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048bc:	68 00 02 00 00       	push   0x200
c00048c1:	e8 a6 11 00 00       	call   c0005a6c <ff_memalloc>
c00048c6:	83 c4 10             	add    esp,0x10
c00048c9:	89 c3                	mov    ebx,eax
c00048cb:	b8 11 00 00 00       	mov    eax,0x11
c00048d0:	85 db                	test   ebx,ebx
c00048d2:	0f 84 c9 00 00 00    	je     c00049a1 <f_unlink+0x117>
c00048d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048dc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c00048e3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00048e6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00048ea:	e8 b3 ef ff ff       	call   c00038a2 <follow_path>
c00048ef:	85 c0                	test   eax,eax
c00048f1:	0f 85 96 00 00 00    	jne    c000498d <f_unlink+0x103>
c00048f7:	b8 06 00 00 00       	mov    eax,0x6
c00048fc:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004901:	0f 88 86 00 00 00    	js     c000498d <f_unlink+0x103>
c0004907:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c000490c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004912:	74 07                	je     c000491b <f_unlink+0x91>
c0004914:	b8 07 00 00 00       	mov    eax,0x7
c0004919:	eb 72                	jmp    c000498d <f_unlink+0x103>
c000491b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000491f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004923:	8a 07                	mov    al,BYTE PTR [edi]
c0004925:	e8 96 e7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000492a:	83 e5 10             	and    ebp,0x10
c000492d:	89 c6                	mov    esi,eax
c000492f:	75 0f                	jne    c0004940 <f_unlink+0xb6>
c0004931:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004935:	e8 e7 ed ff ff       	call   c0003721 <dir_remove>
c000493a:	85 c0                	test   eax,eax
c000493c:	74 2f                	je     c000496d <f_unlink+0xe3>
c000493e:	eb 4d                	jmp    c000498d <f_unlink+0x103>
c0004940:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004944:	31 d2                	xor    edx,edx
c0004946:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000494a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000494e:	e8 c0 e8 ff ff       	call   c0003213 <dir_sdi>
c0004953:	85 c0                	test   eax,eax
c0004955:	75 36                	jne    c000498d <f_unlink+0x103>
c0004957:	31 d2                	xor    edx,edx
c0004959:	8d 44 24 50          	lea    eax,[esp+0x50]
c000495d:	e8 a2 ec ff ff       	call   c0003604 <dir_read>
c0004962:	85 c0                	test   eax,eax
c0004964:	74 ae                	je     c0004914 <f_unlink+0x8a>
c0004966:	83 f8 04             	cmp    eax,0x4
c0004969:	75 22                	jne    c000498d <f_unlink+0x103>
c000496b:	eb c4                	jmp    c0004931 <f_unlink+0xa7>
c000496d:	85 f6                	test   esi,esi
c000496f:	75 0b                	jne    c000497c <f_unlink+0xf2>
c0004971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004975:	e8 0b e3 ff ff       	call   c0002c85 <sync_fs>
c000497a:	eb 11                	jmp    c000498d <f_unlink+0x103>
c000497c:	31 c9                	xor    ecx,ecx
c000497e:	89 f2                	mov    edx,esi
c0004980:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004984:	e8 8c ea ff ff       	call   c0003415 <remove_chain>
c0004989:	85 c0                	test   eax,eax
c000498b:	74 e4                	je     c0004971 <f_unlink+0xe7>
c000498d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004991:	83 ec 0c             	sub    esp,0xc
c0004994:	53                   	push   ebx
c0004995:	e8 ea 10 00 00       	call   c0005a84 <ff_memfree>
c000499a:	83 c4 10             	add    esp,0x10
c000499d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049a1:	81 c4 8c 00 00 00    	add    esp,0x8c
c00049a7:	5b                   	pop    ebx
c00049a8:	5e                   	pop    esi
c00049a9:	5f                   	pop    edi
c00049aa:	5d                   	pop    ebp
c00049ab:	c3                   	ret    

c00049ac <f_mkdir>:
c00049ac:	57                   	push   edi
c00049ad:	b9 02 00 00 00       	mov    ecx,0x2
c00049b2:	56                   	push   esi
c00049b3:	53                   	push   ebx
c00049b4:	83 ec 50             	sub    esp,0x50
c00049b7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049bb:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049bf:	e8 d4 d9 ff ff       	call   c0002398 <mount_volume>
c00049c4:	89 c3                	mov    ebx,eax
c00049c6:	85 c0                	test   eax,eax
c00049c8:	0f 85 70 01 00 00    	jne    c0004b3e <f_mkdir+0x192>
c00049ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049d2:	bb 11 00 00 00       	mov    ebx,0x11
c00049d7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	68 00 02 00 00       	push   0x200
c00049e3:	e8 84 10 00 00       	call   c0005a6c <ff_memalloc>
c00049e8:	83 c4 10             	add    esp,0x10
c00049eb:	89 c7                	mov    edi,eax
c00049ed:	85 c0                	test   eax,eax
c00049ef:	0f 84 49 01 00 00    	je     c0004b3e <f_mkdir+0x192>
c00049f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049f9:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00049fd:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004a00:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a04:	e8 99 ee ff ff       	call   c00038a2 <follow_path>
c0004a09:	89 c3                	mov    ebx,eax
c0004a0b:	85 c0                	test   eax,eax
c0004a0d:	74 3e                	je     c0004a4d <f_mkdir+0xa1>
c0004a0f:	83 f8 04             	cmp    eax,0x4
c0004a12:	75 3e                	jne    c0004a52 <f_mkdir+0xa6>
c0004a14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a18:	31 d2                	xor    edx,edx
c0004a1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a1e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a22:	e8 b4 e8 ff ff       	call   c00032db <create_chain>
c0004a27:	89 c6                	mov    esi,eax
c0004a29:	85 c0                	test   eax,eax
c0004a2b:	74 0c                	je     c0004a39 <f_mkdir+0x8d>
c0004a2d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a32:	83 f8 01             	cmp    eax,0x1
c0004a35:	74 07                	je     c0004a3e <f_mkdir+0x92>
c0004a37:	eb 2a                	jmp    c0004a63 <f_mkdir+0xb7>
c0004a39:	bb 07 00 00 00       	mov    ebx,0x7
c0004a3e:	31 c9                	xor    ecx,ecx
c0004a40:	89 f2                	mov    edx,esi
c0004a42:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a46:	e8 ca e9 ff ff       	call   c0003415 <remove_chain>
c0004a4b:	eb 05                	jmp    c0004a52 <f_mkdir+0xa6>
c0004a4d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a52:	83 ec 0c             	sub    esp,0xc
c0004a55:	57                   	push   edi
c0004a56:	e8 29 10 00 00       	call   c0005a84 <ff_memfree>
c0004a5b:	83 c4 10             	add    esp,0x10
c0004a5e:	e9 db 00 00 00       	jmp    c0004b3e <f_mkdir+0x192>
c0004a63:	bb 01 00 00 00       	mov    ebx,0x1
c0004a68:	83 f8 ff             	cmp    eax,0xffffffff
c0004a6b:	74 d1                	je     c0004a3e <f_mkdir+0x92>
c0004a6d:	89 f2                	mov    edx,esi
c0004a6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a73:	e8 73 dd ff ff       	call   c00027eb <dir_clear>
c0004a78:	89 c3                	mov    ebx,eax
c0004a7a:	85 c0                	test   eax,eax
c0004a7c:	75 c0                	jne    c0004a3e <f_mkdir+0x92>
c0004a7e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004a83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a87:	ba 20 00 00 00       	mov    edx,0x20
c0004a8c:	83 c0 34             	add    eax,0x34
c0004a8f:	e8 cc d2 ff ff       	call   c0001d60 <mem_set>
c0004a94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a98:	ba 00 00 21 50       	mov    edx,0x50210000
c0004a9d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004aa1:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004aa5:	83 c0 4a             	add    eax,0x4a
c0004aa8:	e8 9b d2 ff ff       	call   c0001d48 <st_dword>
c0004aad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ab1:	89 f1                	mov    ecx,esi
c0004ab3:	8d 50 34             	lea    edx,[eax+0x34]
c0004ab6:	e8 2e e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004abb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004abf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ac4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ac7:	83 c0 54             	add    eax,0x54
c0004aca:	e8 7c d2 ff ff       	call   c0001d4b <mem_cpy>
c0004acf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004ad7:	8d 50 54             	lea    edx,[eax+0x54]
c0004ada:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004ade:	e8 06 e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004ae3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ae7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004aeb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aef:	e8 42 ee ff ff       	call   c0003936 <dir_register>
c0004af4:	89 c3                	mov    ebx,eax
c0004af6:	85 c0                	test   eax,eax
c0004af8:	0f 85 40 ff ff ff    	jne    c0004a3e <f_mkdir+0x92>
c0004afe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b02:	ba 00 00 21 50       	mov    edx,0x50210000
c0004b07:	83 c0 16             	add    eax,0x16
c0004b0a:	e8 39 d2 ff ff       	call   c0001d48 <st_dword>
c0004b0f:	89 f1                	mov    ecx,esi
c0004b11:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b19:	e8 cb e5 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004b1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b22:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b2a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b32:	e8 4e e1 ff ff       	call   c0002c85 <sync_fs>
c0004b37:	89 c3                	mov    ebx,eax
c0004b39:	e9 14 ff ff ff       	jmp    c0004a52 <f_mkdir+0xa6>
c0004b3e:	83 c4 50             	add    esp,0x50
c0004b41:	89 d8                	mov    eax,ebx
c0004b43:	5b                   	pop    ebx
c0004b44:	5e                   	pop    esi
c0004b45:	5f                   	pop    edi
c0004b46:	c3                   	ret    

c0004b47 <f_rename>:
c0004b47:	57                   	push   edi
c0004b48:	56                   	push   esi
c0004b49:	53                   	push   ebx
c0004b4a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b50:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b57:	e8 f2 d5 ff ff       	call   c000214e <get_ldnumber>
c0004b5c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b65:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b6c:	e8 27 d8 ff ff       	call   c0002398 <mount_volume>
c0004b71:	85 c0                	test   eax,eax
c0004b73:	0f 85 7a 01 00 00    	jne    c0004cf3 <f_rename+0x1ac>
c0004b79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b7d:	83 ec 0c             	sub    esp,0xc
c0004b80:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004b84:	68 00 02 00 00       	push   0x200
c0004b89:	e8 de 0e 00 00       	call   c0005a6c <ff_memalloc>
c0004b8e:	83 c4 10             	add    esp,0x10
c0004b91:	89 c6                	mov    esi,eax
c0004b93:	b8 11 00 00 00       	mov    eax,0x11
c0004b98:	85 f6                	test   esi,esi
c0004b9a:	0f 84 53 01 00 00    	je     c0004cf3 <f_rename+0x1ac>
c0004ba0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ba4:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004bab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004bae:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004bb2:	e8 eb ec ff ff       	call   c00038a2 <follow_path>
c0004bb7:	85 c0                	test   eax,eax
c0004bb9:	0f 85 20 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bbf:	b8 06 00 00 00       	mov    eax,0x6
c0004bc4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004bc9:	0f 85 10 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0004bd4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bd8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bdc:	e8 6a d1 ff ff       	call   c0001d4b <mem_cpy>
c0004be1:	b9 30 00 00 00       	mov    ecx,0x30
c0004be6:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004bea:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bee:	e8 58 d1 ff ff       	call   c0001d4b <mem_cpy>
c0004bf3:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004bfa:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bfe:	e8 9f ec ff ff       	call   c00038a2 <follow_path>
c0004c03:	85 c0                	test   eax,eax
c0004c05:	75 20                	jne    c0004c27 <f_rename+0xe0>
c0004c07:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004c0b:	b8 08 00 00 00       	mov    eax,0x8
c0004c10:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c14:	0f 85 c5 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c1a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c1e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c25:	eb 03                	jmp    c0004c2a <f_rename+0xe3>
c0004c27:	83 f8 04             	cmp    eax,0x4
c0004c2a:	0f 85 af 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c30:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c34:	e8 fd ec ff ff       	call   c0003936 <dir_register>
c0004c39:	85 c0                	test   eax,eax
c0004c3b:	0f 85 9e 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c41:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c48:	b9 13 00 00 00       	mov    ecx,0x13
c0004c4d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c50:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c54:	e8 f2 d0 ff ff       	call   c0001d4b <mem_cpy>
c0004c59:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c5d:	a8 10                	test   al,0x10
c0004c5f:	75 03                	jne    c0004c64 <f_rename+0x11d>
c0004c61:	83 c8 20             	or     eax,0x20
c0004c64:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c6b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c6f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c73:	74 54                	je     c0004cc9 <f_rename+0x182>
c0004c75:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c79:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c7d:	74 4a                	je     c0004cc9 <f_rename+0x182>
c0004c7f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c83:	89 da                	mov    edx,ebx
c0004c85:	8a 07                	mov    al,BYTE PTR [edi]
c0004c87:	e8 34 e4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004c8c:	89 c2                	mov    edx,eax
c0004c8e:	89 f8                	mov    eax,edi
c0004c90:	e8 d0 d2 ff ff       	call   c0001f65 <clst2sect>
c0004c95:	89 c2                	mov    edx,eax
c0004c97:	b8 02 00 00 00       	mov    eax,0x2
c0004c9c:	85 d2                	test   edx,edx
c0004c9e:	74 3f                	je     c0004cdf <f_rename+0x198>
c0004ca0:	89 f8                	mov    eax,edi
c0004ca2:	e8 9e d5 ff ff       	call   c0002245 <move_window>
c0004ca7:	85 c0                	test   eax,eax
c0004ca9:	75 34                	jne    c0004cdf <f_rename+0x198>
c0004cab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004caf:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004cb3:	75 14                	jne    c0004cc9 <f_rename+0x182>
c0004cb5:	8d 50 54             	lea    edx,[eax+0x54]
c0004cb8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cbc:	e8 28 e4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004cc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cc5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ccd:	e8 4f ea ff ff       	call   c0003721 <dir_remove>
c0004cd2:	85 c0                	test   eax,eax
c0004cd4:	75 09                	jne    c0004cdf <f_rename+0x198>
c0004cd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cda:	e8 a6 df ff ff       	call   c0002c85 <sync_fs>
c0004cdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ce3:	83 ec 0c             	sub    esp,0xc
c0004ce6:	56                   	push   esi
c0004ce7:	e8 98 0d 00 00       	call   c0005a84 <ff_memfree>
c0004cec:	83 c4 10             	add    esp,0x10
c0004cef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cf3:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004cf9:	5b                   	pop    ebx
c0004cfa:	5e                   	pop    esi
c0004cfb:	5f                   	pop    edi
c0004cfc:	c3                   	ret    

c0004cfd <f_chmod>:
c0004cfd:	57                   	push   edi
c0004cfe:	b9 02 00 00 00       	mov    ecx,0x2
c0004d03:	56                   	push   esi
c0004d04:	53                   	push   ebx
c0004d05:	83 ec 50             	sub    esp,0x50
c0004d08:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004d0c:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 7b d6 ff ff       	call   c0002398 <mount_volume>
c0004d1d:	85 c0                	test   eax,eax
c0004d1f:	75 7e                	jne    c0004d9f <f_chmod+0xa2>
c0004d21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d25:	83 ec 0c             	sub    esp,0xc
c0004d28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d2c:	68 00 02 00 00       	push   0x200
c0004d31:	e8 36 0d 00 00       	call   c0005a6c <ff_memalloc>
c0004d36:	83 c4 10             	add    esp,0x10
c0004d39:	89 c6                	mov    esi,eax
c0004d3b:	b8 11 00 00 00       	mov    eax,0x11
c0004d40:	85 f6                	test   esi,esi
c0004d42:	74 5b                	je     c0004d9f <f_chmod+0xa2>
c0004d44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d48:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d4c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d4f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d53:	e8 4a eb ff ff       	call   c00038a2 <follow_path>
c0004d58:	85 c0                	test   eax,eax
c0004d5a:	75 2f                	jne    c0004d8b <f_chmod+0x8e>
c0004d5c:	b8 06 00 00 00       	mov    eax,0x6
c0004d61:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d66:	75 23                	jne    c0004d8b <f_chmod+0x8e>
c0004d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d6c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d6f:	21 fb                	and    ebx,edi
c0004d71:	83 e3 27             	and    ebx,0x27
c0004d74:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d77:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d7e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d86:	e8 fa de ff ff       	call   c0002c85 <sync_fs>
c0004d8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d8f:	83 ec 0c             	sub    esp,0xc
c0004d92:	56                   	push   esi
c0004d93:	e8 ec 0c 00 00       	call   c0005a84 <ff_memfree>
c0004d98:	83 c4 10             	add    esp,0x10
c0004d9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d9f:	83 c4 50             	add    esp,0x50
c0004da2:	5b                   	pop    ebx
c0004da3:	5e                   	pop    esi
c0004da4:	5f                   	pop    edi
c0004da5:	c3                   	ret    

c0004da6 <f_utime>:
c0004da6:	56                   	push   esi
c0004da7:	b9 02 00 00 00       	mov    ecx,0x2
c0004dac:	53                   	push   ebx
c0004dad:	83 ec 54             	sub    esp,0x54
c0004db0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004db4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004db8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004dbc:	e8 d7 d5 ff ff       	call   c0002398 <mount_volume>
c0004dc1:	85 c0                	test   eax,eax
c0004dc3:	0f 85 85 00 00 00    	jne    c0004e4e <f_utime+0xa8>
c0004dc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dcd:	83 ec 0c             	sub    esp,0xc
c0004dd0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004dd4:	68 00 02 00 00       	push   0x200
c0004dd9:	e8 8e 0c 00 00       	call   c0005a6c <ff_memalloc>
c0004dde:	83 c4 10             	add    esp,0x10
c0004de1:	89 c3                	mov    ebx,eax
c0004de3:	b8 11 00 00 00       	mov    eax,0x11
c0004de8:	85 db                	test   ebx,ebx
c0004dea:	74 62                	je     c0004e4e <f_utime+0xa8>
c0004dec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004df0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004df4:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004df7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004dfb:	e8 a2 ea ff ff       	call   c00038a2 <follow_path>
c0004e00:	85 c0                	test   eax,eax
c0004e02:	75 36                	jne    c0004e3a <f_utime+0x94>
c0004e04:	b8 06 00 00 00       	mov    eax,0x6
c0004e09:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004e0e:	75 2a                	jne    c0004e3a <f_utime+0x94>
c0004e10:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e14:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e18:	c1 e2 10             	shl    edx,0x10
c0004e1b:	09 c2                	or     edx,eax
c0004e1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e21:	83 c0 16             	add    eax,0x16
c0004e24:	e8 1f cf ff ff       	call   c0001d48 <st_dword>
c0004e29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e2d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e35:	e8 4b de ff ff       	call   c0002c85 <sync_fs>
c0004e3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e3e:	83 ec 0c             	sub    esp,0xc
c0004e41:	53                   	push   ebx
c0004e42:	e8 3d 0c 00 00       	call   c0005a84 <ff_memfree>
c0004e47:	83 c4 10             	add    esp,0x10
c0004e4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e4e:	83 c4 54             	add    esp,0x54
c0004e51:	5b                   	pop    ebx
c0004e52:	5e                   	pop    esi
c0004e53:	c3                   	ret    

c0004e54 <f_getlabel>:
c0004e54:	55                   	push   ebp
c0004e55:	31 c9                	xor    ecx,ecx
c0004e57:	57                   	push   edi
c0004e58:	56                   	push   esi
c0004e59:	53                   	push   ebx
c0004e5a:	83 ec 5c             	sub    esp,0x5c
c0004e5d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e65:	e8 2e d5 ff ff       	call   c0002398 <mount_volume>
c0004e6a:	89 c6                	mov    esi,eax
c0004e6c:	85 c0                	test   eax,eax
c0004e6e:	0f 85 27 01 00 00    	jne    c0004f9b <f_getlabel+0x147>
c0004e74:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e79:	0f 84 d1 00 00 00    	je     c0004f50 <f_getlabel+0xfc>
c0004e7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e83:	31 d2                	xor    edx,edx
c0004e85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e89:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004e91:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e95:	e8 79 e3 ff ff       	call   c0003213 <dir_sdi>
c0004e9a:	85 c0                	test   eax,eax
c0004e9c:	0f 85 a2 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004ea2:	ba 01 00 00 00       	mov    edx,0x1
c0004ea7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eab:	e8 54 e7 ff ff       	call   c0003604 <dir_read>
c0004eb0:	85 c0                	test   eax,eax
c0004eb2:	0f 85 8c 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004eb8:	31 db                	xor    ebx,ebx
c0004eba:	31 c9                	xor    ecx,ecx
c0004ebc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ec0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004ec3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004ec8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004ecd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ed1:	e8 ca ce ff ff       	call   c0001da0 <dbc_1st>
c0004ed6:	85 c0                	test   eax,eax
c0004ed8:	74 16                	je     c0004ef0 <f_getlabel+0x9c>
c0004eda:	83 ff 0b             	cmp    edi,0xb
c0004edd:	74 11                	je     c0004ef0 <f_getlabel+0x9c>
c0004edf:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004ee4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ee8:	8d 79 02             	lea    edi,[ecx+0x2]
c0004eeb:	c1 e0 08             	shl    eax,0x8
c0004eee:	09 c2                	or     edx,eax
c0004ef0:	0f b7 d2             	movzx  edx,dx
c0004ef3:	50                   	push   eax
c0004ef4:	50                   	push   eax
c0004ef5:	68 b5 01 00 00       	push   0x1b5
c0004efa:	52                   	push   edx
c0004efb:	e8 3c 0c 00 00       	call   c0005b3c <ff_oem2uni>
c0004f00:	83 c4 10             	add    esp,0x10
c0004f03:	66 85 c0             	test   ax,ax
c0004f06:	74 25                	je     c0004f2d <f_getlabel+0xd9>
c0004f08:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004f0c:	0f b7 c0             	movzx  eax,ax
c0004f0f:	01 da                	add    edx,ebx
c0004f11:	b9 04 00 00 00       	mov    ecx,0x4
c0004f16:	e8 51 cf ff ff       	call   c0001e6c <put_utf>
c0004f1b:	84 c0                	test   al,al
c0004f1d:	74 0e                	je     c0004f2d <f_getlabel+0xd9>
c0004f1f:	0f b6 c0             	movzx  eax,al
c0004f22:	01 c3                	add    ebx,eax
c0004f24:	83 ff 0b             	cmp    edi,0xb
c0004f27:	74 06                	je     c0004f2f <f_getlabel+0xdb>
c0004f29:	89 f9                	mov    ecx,edi
c0004f2b:	eb 8f                	jmp    c0004ebc <f_getlabel+0x68>
c0004f2d:	31 db                	xor    ebx,ebx
c0004f2f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f33:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f36:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f3a:	74 14                	je     c0004f50 <f_getlabel+0xfc>
c0004f3c:	4b                   	dec    ebx
c0004f3d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f40:	74 f1                	je     c0004f33 <f_getlabel+0xdf>
c0004f42:	eb 0c                	jmp    c0004f50 <f_getlabel+0xfc>
c0004f44:	83 f8 04             	cmp    eax,0x4
c0004f47:	75 50                	jne    c0004f99 <f_getlabel+0x145>
c0004f49:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f4d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f50:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f55:	74 44                	je     c0004f9b <f_getlabel+0x147>
c0004f57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f5b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f5e:	e8 e2 d2 ff ff       	call   c0002245 <move_window>
c0004f63:	89 c6                	mov    esi,eax
c0004f65:	85 c0                	test   eax,eax
c0004f67:	75 32                	jne    c0004f9b <f_getlabel+0x147>
c0004f69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f6d:	b8 43 00 00 00       	mov    eax,0x43
c0004f72:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f74:	80 f9 03             	cmp    cl,0x3
c0004f77:	74 0f                	je     c0004f88 <f_getlabel+0x134>
c0004f79:	31 c0                	xor    eax,eax
c0004f7b:	80 f9 04             	cmp    cl,0x4
c0004f7e:	0f 94 c0             	sete   al
c0004f81:	48                   	dec    eax
c0004f82:	83 e0 c3             	and    eax,0xffffffc3
c0004f85:	83 c0 64             	add    eax,0x64
c0004f88:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004f8c:	e8 9b cd ff ff       	call   c0001d2c <ld_dword>
c0004f91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004f95:	89 07                	mov    DWORD PTR [edi],eax
c0004f97:	eb 02                	jmp    c0004f9b <f_getlabel+0x147>
c0004f99:	89 c6                	mov    esi,eax
c0004f9b:	83 c4 5c             	add    esp,0x5c
c0004f9e:	89 f0                	mov    eax,esi
c0004fa0:	5b                   	pop    ebx
c0004fa1:	5e                   	pop    esi
c0004fa2:	5f                   	pop    edi
c0004fa3:	5d                   	pop    ebp
c0004fa4:	c3                   	ret    

c0004fa5 <f_setlabel>:
c0004fa5:	56                   	push   esi
c0004fa6:	b9 02 00 00 00       	mov    ecx,0x2
c0004fab:	53                   	push   ebx
c0004fac:	83 ec 54             	sub    esp,0x54
c0004faf:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fb3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fb7:	e8 dc d3 ff ff       	call   c0002398 <mount_volume>
c0004fbc:	89 c6                	mov    esi,eax
c0004fbe:	85 c0                	test   eax,eax
c0004fc0:	0f 85 67 01 00 00    	jne    c000512d <f_setlabel+0x188>
c0004fc6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004fcb:	ba 20 00 00 00       	mov    edx,0x20
c0004fd0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004fd4:	31 db                	xor    ebx,ebx
c0004fd6:	e8 85 cd ff ff       	call   c0001d60 <mem_set>
c0004fdb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fdf:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004fe2:	76 5b                	jbe    c000503f <f_setlabel+0x9a>
c0004fe4:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fe8:	e8 b9 cd ff ff       	call   c0001da6 <tchar2uni>
c0004fed:	3d ff ff 00 00       	cmp    eax,0xffff
c0004ff2:	76 0a                	jbe    c0004ffe <f_setlabel+0x59>
c0004ff4:	be 06 00 00 00       	mov    esi,0x6
c0004ff9:	e9 2f 01 00 00       	jmp    c000512d <f_setlabel+0x188>
c0004ffe:	83 ec 0c             	sub    esp,0xc
c0005001:	50                   	push   eax
c0005002:	e8 ad 0b 00 00       	call   c0005bb4 <ff_wtoupper>
c0005007:	5a                   	pop    edx
c0005008:	59                   	pop    ecx
c0005009:	68 b5 01 00 00       	push   0x1b5
c000500e:	50                   	push   eax
c000500f:	e8 88 0a 00 00       	call   c0005a9c <ff_uni2oem>
c0005014:	83 c4 10             	add    esp,0x10
c0005017:	89 c6                	mov    esi,eax
c0005019:	66 85 c0             	test   ax,ax
c000501c:	74 d6                	je     c0004ff4 <f_setlabel+0x4f>
c000501e:	0f b7 d0             	movzx  edx,ax
c0005021:	b8 b0 d0 01 c0       	mov    eax,0xc001d0b0
c0005026:	e8 63 cd ff ff       	call   c0001d8e <chk_chr>
c000502b:	85 c0                	test   eax,eax
c000502d:	75 c5                	jne    c0004ff4 <f_setlabel+0x4f>
c000502f:	66 81 fe ff 00       	cmp    si,0xff
c0005034:	0f 87 c9 00 00 00    	ja     c0005103 <f_setlabel+0x15e>
c000503a:	e9 e4 00 00 00       	jmp    c0005123 <f_setlabel+0x17e>
c000503f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005044:	74 ae                	je     c0004ff4 <f_setlabel+0x4f>
c0005046:	85 db                	test   ebx,ebx
c0005048:	74 0e                	je     c0005058 <f_setlabel+0xb3>
c000504a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000504d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005052:	75 04                	jne    c0005058 <f_setlabel+0xb3>
c0005054:	89 c3                	mov    ebx,eax
c0005056:	eb ee                	jmp    c0005046 <f_setlabel+0xa1>
c0005058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000505c:	31 d2                	xor    edx,edx
c000505e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005062:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000506a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000506e:	e8 a0 e1 ff ff       	call   c0003213 <dir_sdi>
c0005073:	89 c6                	mov    esi,eax
c0005075:	85 c0                	test   eax,eax
c0005077:	0f 85 b0 00 00 00    	jne    c000512d <f_setlabel+0x188>
c000507d:	ba 01 00 00 00       	mov    edx,0x1
c0005082:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005086:	e8 79 e5 ff ff       	call   c0003604 <dir_read>
c000508b:	85 c0                	test   eax,eax
c000508d:	75 18                	jne    c00050a7 <f_setlabel+0x102>
c000508f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005093:	85 db                	test   ebx,ebx
c0005095:	74 0b                	je     c00050a2 <f_setlabel+0xfd>
c0005097:	b9 0b 00 00 00       	mov    ecx,0xb
c000509c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050a0:	eb 47                	jmp    c00050e9 <f_setlabel+0x144>
c00050a2:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00050a5:	eb 47                	jmp    c00050ee <f_setlabel+0x149>
c00050a7:	83 f8 04             	cmp    eax,0x4
c00050aa:	75 53                	jne    c00050ff <f_setlabel+0x15a>
c00050ac:	85 db                	test   ebx,ebx
c00050ae:	74 7d                	je     c000512d <f_setlabel+0x188>
c00050b0:	ba 01 00 00 00       	mov    edx,0x1
c00050b5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b9:	e8 e5 e4 ff ff       	call   c00035a3 <dir_alloc>
c00050be:	89 c6                	mov    esi,eax
c00050c0:	85 c0                	test   eax,eax
c00050c2:	75 69                	jne    c000512d <f_setlabel+0x188>
c00050c4:	b9 20 00 00 00       	mov    ecx,0x20
c00050c9:	31 d2                	xor    edx,edx
c00050cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cf:	e8 8c cc ff ff       	call   c0001d60 <mem_set>
c00050d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050d8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050dd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00050e1:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	e8 5d cc ff ff       	call   c0001d4b <mem_cpy>
c00050ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050f2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050fa:	e8 86 db ff ff       	call   c0002c85 <sync_fs>
c00050ff:	89 c6                	mov    esi,eax
c0005101:	eb 2a                	jmp    c000512d <f_setlabel+0x188>
c0005103:	83 fb 09             	cmp    ebx,0x9
c0005106:	0f 87 e8 fe ff ff    	ja     c0004ff4 <f_setlabel+0x4f>
c000510c:	89 f0                	mov    eax,esi
c000510e:	66 c1 e8 08          	shr    ax,0x8
c0005112:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005116:	43                   	inc    ebx
c0005117:	89 f0                	mov    eax,esi
c0005119:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000511d:	43                   	inc    ebx
c000511e:	e9 b8 fe ff ff       	jmp    c0004fdb <f_setlabel+0x36>
c0005123:	83 fb 0a             	cmp    ebx,0xa
c0005126:	76 ef                	jbe    c0005117 <f_setlabel+0x172>
c0005128:	e9 c7 fe ff ff       	jmp    c0004ff4 <f_setlabel+0x4f>
c000512d:	89 f0                	mov    eax,esi
c000512f:	83 c4 54             	add    esp,0x54
c0005132:	5b                   	pop    ebx
c0005133:	5e                   	pop    esi
c0005134:	c3                   	ret    

c0005135 <f_expand>:
c0005135:	55                   	push   ebp
c0005136:	57                   	push   edi
c0005137:	56                   	push   esi
c0005138:	53                   	push   ebx
c0005139:	83 ec 2c             	sub    esp,0x2c
c000513c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005140:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005144:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005148:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000514c:	89 d8                	mov    eax,ebx
c000514e:	e8 48 d0 ff ff       	call   c000219b <validate>
c0005153:	89 c6                	mov    esi,eax
c0005155:	85 c0                	test   eax,eax
c0005157:	0f 85 2e 01 00 00    	jne    c000528b <f_expand+0x156>
c000515d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005161:	85 f6                	test   esi,esi
c0005163:	0f 85 22 01 00 00    	jne    c000528b <f_expand+0x156>
c0005169:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000516e:	75 0a                	jne    c000517a <f_expand+0x45>
c0005170:	be 07 00 00 00       	mov    esi,0x7
c0005175:	e9 11 01 00 00       	jmp    c000528b <f_expand+0x156>
c000517a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000517e:	75 f0                	jne    c0005170 <f_expand+0x3b>
c0005180:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005184:	74 ea                	je     c0005170 <f_expand+0x3b>
c0005186:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c000518a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000518e:	c1 e1 09             	shl    ecx,0x9
c0005191:	8d 41 ff             	lea    eax,[ecx-0x1]
c0005194:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005198:	0f 95 c0             	setne  al
c000519b:	31 d2                	xor    edx,edx
c000519d:	0f b6 c0             	movzx  eax,al
c00051a0:	89 c7                	mov    edi,eax
c00051a2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00051a6:	f7 f1                	div    ecx
c00051a8:	01 f8                	add    eax,edi
c00051aa:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00051ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051b1:	83 ff 01             	cmp    edi,0x1
c00051b4:	76 05                	jbe    c00051bb <f_expand+0x86>
c00051b6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051b9:	77 05                	ja     c00051c0 <f_expand+0x8b>
c00051bb:	bf 02 00 00 00       	mov    edi,0x2
c00051c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051c3:	89 fd                	mov    ebp,edi
c00051c5:	31 c9                	xor    ecx,ecx
c00051c7:	89 ea                	mov    edx,ebp
c00051c9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051cf:	45                   	inc    ebp
c00051d0:	e8 3c df ff ff       	call   c0003111 <get_fat.isra.2>
c00051d5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051dd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00051e0:	77 05                	ja     c00051e7 <f_expand+0xb2>
c00051e2:	bd 02 00 00 00       	mov    ebp,0x2
c00051e7:	83 f8 01             	cmp    eax,0x1
c00051ea:	74 20                	je     c000520c <f_expand+0xd7>
c00051ec:	83 f8 ff             	cmp    eax,0xffffffff
c00051ef:	74 22                	je     c0005213 <f_expand+0xde>
c00051f1:	85 c0                	test   eax,eax
c00051f3:	75 09                	jne    c00051fe <f_expand+0xc9>
c00051f5:	41                   	inc    ecx
c00051f6:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00051fa:	75 07                	jne    c0005203 <f_expand+0xce>
c00051fc:	eb 1c                	jmp    c000521a <f_expand+0xe5>
c00051fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005201:	31 c9                	xor    ecx,ecx
c0005203:	39 fd                	cmp    ebp,edi
c0005205:	75 c0                	jne    c00051c7 <f_expand+0x92>
c0005207:	e9 64 ff ff ff       	jmp    c0005170 <f_expand+0x3b>
c000520c:	be 02 00 00 00       	mov    esi,0x2
c0005211:	eb 78                	jmp    c000528b <f_expand+0x156>
c0005213:	be 01 00 00 00       	mov    esi,0x1
c0005218:	eb 71                	jmp    c000528b <f_expand+0x156>
c000521a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000521f:	74 2b                	je     c000524c <f_expand+0x117>
c0005221:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005224:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005228:	85 ed                	test   ebp,ebp
c000522a:	74 24                	je     c0005250 <f_expand+0x11b>
c000522c:	83 c9 ff             	or     ecx,0xffffffff
c000522f:	83 fd 01             	cmp    ebp,0x1
c0005232:	74 03                	je     c0005237 <f_expand+0x102>
c0005234:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005237:	89 fa                	mov    edx,edi
c0005239:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000523d:	e8 59 d4 ff ff       	call   c000269b <put_fat>
c0005242:	85 c0                	test   eax,eax
c0005244:	75 43                	jne    c0005289 <f_expand+0x154>
c0005246:	89 f8                	mov    eax,edi
c0005248:	4d                   	dec    ebp
c0005249:	47                   	inc    edi
c000524a:	eb dc                	jmp    c0005228 <f_expand+0xf3>
c000524c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000524f:	48                   	dec    eax
c0005250:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005254:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005259:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000525c:	74 2d                	je     c000528b <f_expand+0x156>
c000525e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005262:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005265:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005268:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000526c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000526f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005272:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005275:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005278:	39 c8                	cmp    eax,ecx
c000527a:	77 0f                	ja     c000528b <f_expand+0x156>
c000527c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005280:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c0005284:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005287:	eb 02                	jmp    c000528b <f_expand+0x156>
c0005289:	89 c6                	mov    esi,eax
c000528b:	83 c4 2c             	add    esp,0x2c
c000528e:	89 f0                	mov    eax,esi
c0005290:	5b                   	pop    ebx
c0005291:	5e                   	pop    esi
c0005292:	5f                   	pop    edi
c0005293:	5d                   	pop    ebp
c0005294:	c3                   	ret    

c0005295 <f_mkfs>:
c0005295:	55                   	push   ebp
c0005296:	57                   	push   edi
c0005297:	bf 0b 00 00 00       	mov    edi,0xb
c000529c:	56                   	push   esi
c000529d:	53                   	push   ebx
c000529e:	83 ec 4c             	sub    esp,0x4c
c00052a1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00052a5:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00052a9:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052ad:	e8 9c ce ff ff       	call   c000214e <get_ldnumber>
c00052b2:	85 c0                	test   eax,eax
c00052b4:	0f 88 a6 07 00 00    	js     c0005a60 <f_mkfs+0x7cb>
c00052ba:	8b 14 85 40 03 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdfcc0]
c00052c1:	85 d2                	test   edx,edx
c00052c3:	74 03                	je     c00052c8 <f_mkfs+0x33>
c00052c5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052c8:	85 db                	test   ebx,ebx
c00052ca:	75 05                	jne    c00052d1 <f_mkfs+0x3c>
c00052cc:	bb a0 d0 01 c0       	mov    ebx,0xc001d0a0
c00052d1:	83 ec 0c             	sub    esp,0xc
c00052d4:	0f b6 c0             	movzx  eax,al
c00052d7:	bf 03 00 00 00       	mov    edi,0x3
c00052dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00052e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00052e4:	e8 e8 c9 ff ff       	call   c0001cd1 <disk_initialize>
c00052e9:	83 c4 10             	add    esp,0x10
c00052ec:	a8 01                	test   al,0x1
c00052ee:	0f 85 6c 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c00052f4:	bf 0a 00 00 00       	mov    edi,0xa
c00052f9:	a8 04                	test   al,0x4
c00052fb:	0f 85 5f 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c0005301:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005304:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005308:	85 c0                	test   eax,eax
c000530a:	75 20                	jne    c000532c <f_mkfs+0x97>
c000530c:	51                   	push   ecx
c000530d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005311:	50                   	push   eax
c0005312:	6a 03                	push   0x3
c0005314:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005318:	e8 e3 c9 ff ff       	call   c0001d00 <disk_ioctl>
c000531d:	83 c4 10             	add    esp,0x10
c0005320:	85 c0                	test   eax,eax
c0005322:	74 08                	je     c000532c <f_mkfs+0x97>
c0005324:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000532c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005330:	8d 42 ff             	lea    eax,[edx-0x1]
c0005333:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005338:	77 04                	ja     c000533e <f_mkfs+0xa9>
c000533a:	85 c2                	test   edx,eax
c000533c:	74 08                	je     c0005346 <f_mkfs+0xb1>
c000533e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005346:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005349:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000534d:	48                   	dec    eax
c000534e:	3c 01                	cmp    al,0x1
c0005350:	76 05                	jbe    c0005357 <f_mkfs+0xc2>
c0005352:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005357:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000535a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000535e:	48                   	dec    eax
c000535f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005364:	77 07                	ja     c000536d <f_mkfs+0xd8>
c0005366:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000536b:	74 08                	je     c0005375 <f_mkfs+0xe0>
c000536d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005375:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005378:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000537e:	77 07                	ja     c0005387 <f_mkfs+0xf2>
c0005380:	8d 47 ff             	lea    eax,[edi-0x1]
c0005383:	85 f8                	test   eax,edi
c0005385:	74 02                	je     c0005389 <f_mkfs+0xf4>
c0005387:	31 ff                	xor    edi,edi
c0005389:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c0005391:	77 0a                	ja     c000539d <f_mkfs+0x108>
c0005393:	bf 11 00 00 00       	mov    edi,0x11
c0005398:	e9 c3 06 00 00       	jmp    c0005a60 <f_mkfs+0x7cb>
c000539d:	8a 1b                	mov    bl,BYTE PTR [ebx]
c000539f:	89 ee                	mov    esi,ebp
c00053a1:	85 ed                	test   ebp,ebp
c00053a3:	75 1b                	jne    c00053c0 <f_mkfs+0x12b>
c00053a5:	83 ec 0c             	sub    esp,0xc
c00053a8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00053ac:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053b1:	50                   	push   eax
c00053b2:	e8 b5 06 00 00       	call   c0005a6c <ff_memalloc>
c00053b7:	83 c4 10             	add    esp,0x10
c00053ba:	89 c6                	mov    esi,eax
c00053bc:	85 c0                	test   eax,eax
c00053be:	74 d3                	je     c0005393 <f_mkfs+0xfe>
c00053c0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053c8:	52                   	push   edx
c00053c9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053cd:	50                   	push   eax
c00053ce:	6a 01                	push   0x1
c00053d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053d4:	e8 27 c9 ff ff       	call   c0001d00 <disk_ioctl>
c00053d9:	83 c4 10             	add    esp,0x10
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 25 06 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00053e4:	88 d8                	mov    al,bl
c00053e6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00053ee:	24 08                	and    al,0x8
c00053f0:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c00053f4:	75 18                	jne    c000540e <f_mkfs+0x179>
c00053f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00053fa:	83 f8 3f             	cmp    eax,0x3f
c00053fd:	76 0f                	jbe    c000540e <f_mkfs+0x179>
c00053ff:	83 e8 3f             	sub    eax,0x3f
c0005402:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c000540a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000540e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005412:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005416:	83 f8 7f             	cmp    eax,0x7f
c0005419:	0f 86 52 02 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000541f:	b9 80 00 00 00       	mov    ecx,0x80
c0005424:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000542a:	77 05                	ja     c0005431 <f_mkfs+0x19c>
c000542c:	89 f9                	mov    ecx,edi
c000542e:	c1 e9 09             	shr    ecx,0x9
c0005431:	88 d8                	mov    al,bl
c0005433:	83 e0 01             	and    eax,0x1
c0005436:	80 e3 02             	and    bl,0x2
c0005439:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000543d:	74 0a                	je     c0005449 <f_mkfs+0x1b4>
c000543f:	84 c0                	test   al,al
c0005441:	0f 84 4c 01 00 00    	je     c0005593 <f_mkfs+0x2fe>
c0005447:	eb 38                	jmp    c0005481 <f_mkfs+0x1ec>
c0005449:	bf 13 00 00 00       	mov    edi,0x13
c000544e:	84 c0                	test   al,al
c0005450:	75 2f                	jne    c0005481 <f_mkfs+0x1ec>
c0005452:	e9 c9 05 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c0005457:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000545c:	0f 85 08 02 00 00    	jne    c000566a <f_mkfs+0x3d5>
c0005462:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005467:	0f 86 e1 01 00 00    	jbe    c000564e <f_mkfs+0x3b9>
c000546d:	85 c9                	test   ecx,ecx
c000546f:	0f 85 bd 05 00 00    	jne    c0005a32 <f_mkfs+0x79d>
c0005475:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005478:	83 f9 40             	cmp    ecx,0x40
c000547b:	0f 87 c1 05 00 00    	ja     c0005a42 <f_mkfs+0x7ad>
c0005481:	89 cf                	mov    edi,ecx
c0005483:	85 c9                	test   ecx,ecx
c0005485:	75 1d                	jne    c00054a4 <f_mkfs+0x20f>
c0005487:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000548b:	ba 80 d0 01 c0       	mov    edx,0xc001d080
c0005490:	c1 eb 0c             	shr    ebx,0xc
c0005493:	bf 01 00 00 00       	mov    edi,0x1
c0005498:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000549b:	66 85 c0             	test   ax,ax
c000549e:	0f 85 5f 01 00 00    	jne    c0005603 <f_mkfs+0x36e>
c00054a4:	31 d2                	xor    edx,edx
c00054a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00054aa:	f7 f7                	div    edi
c00054ac:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054b1:	0f 86 5e 01 00 00    	jbe    c0005615 <f_mkfs+0x380>
c00054b7:	83 c0 02             	add    eax,0x2
c00054ba:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054bf:	01 c0                	add    eax,eax
c00054c1:	05 ff 01 00 00       	add    eax,0x1ff
c00054c6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054ce:	c1 e8 09             	shr    eax,0x9
c00054d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054d9:	c1 e0 05             	shl    eax,0x5
c00054dc:	c1 e8 09             	shr    eax,0x9
c00054df:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00054e3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00054e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00054ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00054f0:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c00054f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00054f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00054fc:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005501:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005505:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005509:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000550d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005511:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005515:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005519:	f7 d8                	neg    eax
c000551b:	21 c3                	and    ebx,eax
c000551d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005521:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005526:	0f 85 fc 00 00 00    	jne    c0005628 <f_mkfs+0x393>
c000552c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005530:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005534:	89 f8                	mov    eax,edi
c0005536:	c1 e0 04             	shl    eax,0x4
c0005539:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000553d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005541:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005545:	0f 82 26 01 00 00    	jb     c0005671 <f_mkfs+0x3dc>
c000554b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000554f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005553:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005557:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000555c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005560:	29 d0                	sub    eax,edx
c0005562:	31 d2                	xor    edx,edx
c0005564:	f7 f7                	div    edi
c0005566:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000556b:	89 c3                	mov    ebx,eax
c000556d:	0f 85 e4 fe ff ff    	jne    c0005457 <f_mkfs+0x1c2>
c0005573:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005578:	0f 87 02 01 00 00    	ja     c0005680 <f_mkfs+0x3eb>
c000557e:	85 c9                	test   ecx,ecx
c0005580:	0f 85 eb 00 00 00    	jne    c0005671 <f_mkfs+0x3dc>
c0005586:	83 ff 01             	cmp    edi,0x1
c0005589:	0f 86 e2 00 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000558f:	89 f9                	mov    ecx,edi
c0005591:	d1 e9                	shr    ecx,1
c0005593:	89 cb                	mov    ebx,ecx
c0005595:	85 c9                	test   ecx,ecx
c0005597:	75 26                	jne    c00055bf <f_mkfs+0x32a>
c0005599:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000559d:	ba 90 d0 01 c0       	mov    edx,0xc001d090
c00055a2:	c1 eb 11             	shr    ebx,0x11
c00055a5:	b9 01 00 00 00       	mov    ecx,0x1
c00055aa:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00055ad:	66 85 c0             	test   ax,ax
c00055b0:	74 0b                	je     c00055bd <f_mkfs+0x328>
c00055b2:	83 c2 02             	add    edx,0x2
c00055b5:	39 d8                	cmp    eax,ebx
c00055b7:	77 04                	ja     c00055bd <f_mkfs+0x328>
c00055b9:	01 c9                	add    ecx,ecx
c00055bb:	eb ed                	jmp    c00055aa <f_mkfs+0x315>
c00055bd:	31 db                	xor    ebx,ebx
c00055bf:	31 d2                	xor    edx,edx
c00055c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055c5:	f7 f1                	div    ecx
c00055c7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055ce:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055d3:	c1 ea 09             	shr    edx,0x9
c00055d6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055db:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055df:	0f 87 8c 00 00 00    	ja     c0005671 <f_mkfs+0x3dc>
c00055e5:	89 cf                	mov    edi,ecx
c00055e7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00055ef:	89 d9                	mov    ecx,ebx
c00055f1:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c00055f9:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c00055fe:	e9 e0 fe ff ff       	jmp    c00054e3 <f_mkfs+0x24e>
c0005603:	83 c2 02             	add    edx,0x2
c0005606:	39 d8                	cmp    eax,ebx
c0005608:	0f 87 96 fe ff ff    	ja     c00054a4 <f_mkfs+0x20f>
c000560e:	01 ff                	add    edi,edi
c0005610:	e9 83 fe ff ff       	jmp    c0005498 <f_mkfs+0x203>
c0005615:	8d 04 40             	lea    eax,[eax+eax*2]
c0005618:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000561d:	40                   	inc    eax
c000561e:	d1 e8                	shr    eax,1
c0005620:	83 c0 03             	add    eax,0x3
c0005623:	e9 99 fe ff ff       	jmp    c00054c1 <f_mkfs+0x22c>
c0005628:	31 d2                	xor    edx,edx
c000562a:	89 d8                	mov    eax,ebx
c000562c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005630:	85 d2                	test   edx,edx
c0005632:	74 09                	je     c000563d <f_mkfs+0x3a8>
c0005634:	4b                   	dec    ebx
c0005635:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005639:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000563d:	89 d8                	mov    eax,ebx
c000563f:	31 d2                	xor    edx,edx
c0005641:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005645:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005649:	e9 e6 fe ff ff       	jmp    c0005534 <f_mkfs+0x29f>
c000564e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005653:	77 2b                	ja     c0005680 <f_mkfs+0x3eb>
c0005655:	85 c9                	test   ecx,ecx
c0005657:	75 18                	jne    c0005671 <f_mkfs+0x3dc>
c0005659:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000565c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005662:	0f 86 19 fe ff ff    	jbe    c0005481 <f_mkfs+0x1ec>
c0005668:	eb 07                	jmp    c0005671 <f_mkfs+0x3dc>
c000566a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000566f:	76 0a                	jbe    c000567b <f_mkfs+0x3e6>
c0005671:	bf 0e 00 00 00       	mov    edi,0xe
c0005676:	e9 a5 03 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c000567b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005680:	31 d2                	xor    edx,edx
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	89 f0                	mov    eax,esi
c0005689:	e8 d2 c6 ff ff       	call   c0001d60 <mem_set>
c000568e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005693:	ba 32 d0 01 c0       	mov    edx,0xc001d032
c0005698:	89 f0                	mov    eax,esi
c000569a:	e8 ac c6 ff ff       	call   c0001d4b <mem_cpy>
c000569f:	8d 46 0b             	lea    eax,[esi+0xb]
c00056a2:	ba 00 02 00 00       	mov    edx,0x200
c00056a7:	e8 98 c6 ff ff       	call   c0001d44 <st_word>
c00056ac:	89 f8                	mov    eax,edi
c00056ae:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056b3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056b6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056b9:	e8 86 c6 ff ff       	call   c0001d44 <st_word>
c00056be:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056c2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056c7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ca:	75 08                	jne    c00056d4 <f_mkfs+0x43f>
c00056cc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056d8:	8d 46 11             	lea    eax,[esi+0x11]
c00056db:	e8 64 c6 ff ff       	call   c0001d44 <st_word>
c00056e0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e4:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00056ea:	77 0a                	ja     c00056f6 <f_mkfs+0x461>
c00056ec:	8d 46 13             	lea    eax,[esi+0x13]
c00056ef:	e8 50 c6 ff ff       	call   c0001d44 <st_word>
c00056f4:	eb 08                	jmp    c00056fe <f_mkfs+0x469>
c00056f6:	8d 46 20             	lea    eax,[esi+0x20]
c00056f9:	e8 4a c6 ff ff       	call   c0001d48 <st_dword>
c00056fe:	8d 46 18             	lea    eax,[esi+0x18]
c0005701:	ba 3f 00 00 00       	mov    edx,0x3f
c0005706:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c000570a:	e8 35 c6 ff ff       	call   c0001d44 <st_word>
c000570f:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005712:	ba ff 00 00 00       	mov    edx,0xff
c0005717:	e8 28 c6 ff ff       	call   c0001d44 <st_word>
c000571c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000571f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005723:	e8 20 c6 ff ff       	call   c0001d48 <st_dword>
c0005728:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000572d:	75 57                	jne    c0005786 <f_mkfs+0x4f1>
c000572f:	8d 46 43             	lea    eax,[esi+0x43]
c0005732:	ba 00 00 21 50       	mov    edx,0x50210000
c0005737:	e8 0c c6 ff ff       	call   c0001d48 <st_dword>
c000573c:	8d 46 24             	lea    eax,[esi+0x24]
c000573f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005743:	e8 00 c6 ff ff       	call   c0001d48 <st_dword>
c0005748:	8d 46 2c             	lea    eax,[esi+0x2c]
c000574b:	ba 02 00 00 00       	mov    edx,0x2
c0005750:	e8 f3 c5 ff ff       	call   c0001d48 <st_dword>
c0005755:	8d 46 30             	lea    eax,[esi+0x30]
c0005758:	ba 01 00 00 00       	mov    edx,0x1
c000575d:	e8 e2 c5 ff ff       	call   c0001d44 <st_word>
c0005762:	8d 46 32             	lea    eax,[esi+0x32]
c0005765:	ba 06 00 00 00       	mov    edx,0x6
c000576a:	e8 d5 c5 ff ff       	call   c0001d44 <st_word>
c000576f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005773:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005777:	8d 46 47             	lea    eax,[esi+0x47]
c000577a:	b9 13 00 00 00       	mov    ecx,0x13
c000577f:	ba 3e d0 01 c0       	mov    edx,0xc001d03e
c0005784:	eb 2f                	jmp    c00057b5 <f_mkfs+0x520>
c0005786:	8d 46 27             	lea    eax,[esi+0x27]
c0005789:	ba 00 00 21 50       	mov    edx,0x50210000
c000578e:	e8 b5 c5 ff ff       	call   c0001d48 <st_dword>
c0005793:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c0005798:	8d 46 16             	lea    eax,[esi+0x16]
c000579b:	e8 a4 c5 ff ff       	call   c0001d44 <st_word>
c00057a0:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00057a4:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00057a8:	8d 46 2b             	lea    eax,[esi+0x2b]
c00057ab:	b9 13 00 00 00       	mov    ecx,0x13
c00057b0:	ba 52 d0 01 c0       	mov    edx,0xc001d052
c00057b5:	e8 91 c5 ff ff       	call   c0001d4b <mem_cpy>
c00057ba:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057c0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057c9:	e8 76 c5 ff ff       	call   c0001d44 <st_word>
c00057ce:	6a 01                	push   0x1
c00057d0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057d4:	56                   	push   esi
c00057d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057d9:	e8 0c c5 ff ff       	call   c0001cea <disk_write>
c00057de:	83 c4 10             	add    esp,0x10
c00057e1:	85 c0                	test   eax,eax
c00057e3:	0f 85 20 02 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00057e9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00057ee:	0f 85 98 00 00 00    	jne    c000588c <f_mkfs+0x5f7>
c00057f4:	6a 01                	push   0x1
c00057f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057fa:	83 c0 06             	add    eax,0x6
c00057fd:	50                   	push   eax
c00057fe:	56                   	push   esi
c00057ff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005803:	e8 e2 c4 ff ff       	call   c0001cea <disk_write>
c0005808:	b9 00 02 00 00       	mov    ecx,0x200
c000580d:	31 d2                	xor    edx,edx
c000580f:	89 f0                	mov    eax,esi
c0005811:	e8 4a c5 ff ff       	call   c0001d60 <mem_set>
c0005816:	ba 52 52 61 41       	mov    edx,0x41615252
c000581b:	89 f0                	mov    eax,esi
c000581d:	e8 26 c5 ff ff       	call   c0001d48 <st_dword>
c0005822:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005828:	ba 72 72 41 61       	mov    edx,0x61417272
c000582d:	e8 16 c5 ff ff       	call   c0001d48 <st_dword>
c0005832:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005835:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000583b:	e8 08 c5 ff ff       	call   c0001d48 <st_dword>
c0005840:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005846:	ba 02 00 00 00       	mov    edx,0x2
c000584b:	e8 f8 c4 ff ff       	call   c0001d48 <st_dword>
c0005850:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005855:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000585b:	e8 e4 c4 ff ff       	call   c0001d44 <st_word>
c0005860:	6a 01                	push   0x1
c0005862:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005866:	83 c0 07             	add    eax,0x7
c0005869:	50                   	push   eax
c000586a:	56                   	push   esi
c000586b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000586f:	e8 76 c4 ff ff       	call   c0001cea <disk_write>
c0005874:	83 c4 20             	add    esp,0x20
c0005877:	6a 01                	push   0x1
c0005879:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000587d:	40                   	inc    eax
c000587e:	50                   	push   eax
c000587f:	56                   	push   esi
c0005880:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005884:	e8 61 c4 ff ff       	call   c0001cea <disk_write>
c0005889:	83 c4 10             	add    esp,0x10
c000588c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005890:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0005894:	c1 e8 09             	shr    eax,0x9
c0005897:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000589d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058a1:	31 d2                	xor    edx,edx
c00058a3:	31 db                	xor    ebx,ebx
c00058a5:	89 f0                	mov    eax,esi
c00058a7:	e8 b4 c4 ff ff       	call   c0001d60 <mem_set>
c00058ac:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058b1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058b9:	0f 94 c3             	sete   bl
c00058bc:	4b                   	dec    ebx
c00058bd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058c3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058c9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058ce:	75 21                	jne    c00058f1 <f_mkfs+0x65c>
c00058d0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058d5:	89 f0                	mov    eax,esi
c00058d7:	e8 6c c4 ff ff       	call   c0001d48 <st_dword>
c00058dc:	8d 46 04             	lea    eax,[esi+0x4]
c00058df:	83 ca ff             	or     edx,0xffffffff
c00058e2:	e8 61 c4 ff ff       	call   c0001d48 <st_dword>
c00058e7:	8d 46 08             	lea    eax,[esi+0x8]
c00058ea:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00058ef:	eb 04                	jmp    c00058f5 <f_mkfs+0x660>
c00058f1:	89 da                	mov    edx,ebx
c00058f3:	89 f0                	mov    eax,esi
c00058f5:	e8 4e c4 ff ff       	call   c0001d48 <st_dword>
c00058fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005902:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005906:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000590a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000590e:	76 08                	jbe    c0005918 <f_mkfs+0x683>
c0005910:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005914:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005918:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000591c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005920:	56                   	push   esi
c0005921:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005925:	e8 c0 c3 ff ff       	call   c0001cea <disk_write>
c000592a:	83 c4 10             	add    esp,0x10
c000592d:	85 c0                	test   eax,eax
c000592f:	0f 85 d4 00 00 00    	jne    c0005a09 <f_mkfs+0x774>
c0005935:	b9 00 02 00 00       	mov    ecx,0x200
c000593a:	31 d2                	xor    edx,edx
c000593c:	89 f0                	mov    eax,esi
c000593e:	e8 1d c4 ff ff       	call   c0001d60 <mem_set>
c0005943:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005947:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000594b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000594f:	75 b1                	jne    c0005902 <f_mkfs+0x66d>
c0005951:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005955:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000595d:	40                   	inc    eax
c000595e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005962:	0f 87 61 ff ff ff    	ja     c00058c9 <f_mkfs+0x634>
c0005968:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000596d:	74 04                	je     c0005973 <f_mkfs+0x6de>
c000596f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005973:	89 fb                	mov    ebx,edi
c0005975:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005979:	76 04                	jbe    c000597f <f_mkfs+0x6ea>
c000597b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000597f:	53                   	push   ebx
c0005980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005984:	56                   	push   esi
c0005985:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005989:	e8 5c c3 ff ff       	call   c0001cea <disk_write>
c000598e:	83 c4 10             	add    esp,0x10
c0005991:	85 c0                	test   eax,eax
c0005993:	75 74                	jne    c0005a09 <f_mkfs+0x774>
c0005995:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005999:	29 df                	sub    edi,ebx
c000599b:	75 d6                	jne    c0005973 <f_mkfs+0x6de>
c000599d:	b1 0c                	mov    cl,0xc
c000599f:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059a4:	74 18                	je     c00059be <f_mkfs+0x729>
c00059a6:	b1 06                	mov    cl,0x6
c00059a8:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059b0:	77 0c                	ja     c00059be <f_mkfs+0x729>
c00059b2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059b7:	0f 94 c1             	sete   cl
c00059ba:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059be:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059c3:	75 2d                	jne    c00059f2 <f_mkfs+0x75d>
c00059c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059c9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059d1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059d5:	0f b6 c9             	movzx  ecx,cl
c00059d8:	83 ec 0c             	sub    esp,0xc
c00059db:	56                   	push   esi
c00059dc:	8d 54 24 48          	lea    edx,[esp+0x48]
c00059e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059e4:	e8 4c d3 ff ff       	call   c0002d35 <create_partition>
c00059e9:	83 c4 10             	add    esp,0x10
c00059ec:	89 c7                	mov    edi,eax
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 2e                	jne    c0005a20 <f_mkfs+0x78b>
c00059f2:	31 ff                	xor    edi,edi
c00059f4:	50                   	push   eax
c00059f5:	6a 00                	push   0x0
c00059f7:	6a 00                	push   0x0
c00059f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059fd:	e8 fe c2 ff ff       	call   c0001d00 <disk_ioctl>
c0005a02:	83 c4 10             	add    esp,0x10
c0005a05:	85 c0                	test   eax,eax
c0005a07:	74 17                	je     c0005a20 <f_mkfs+0x78b>
c0005a09:	85 ed                	test   ebp,ebp
c0005a0b:	75 0c                	jne    c0005a19 <f_mkfs+0x784>
c0005a0d:	83 ec 0c             	sub    esp,0xc
c0005a10:	56                   	push   esi
c0005a11:	e8 6e 00 00 00       	call   c0005a84 <ff_memfree>
c0005a16:	83 c4 10             	add    esp,0x10
c0005a19:	bf 01 00 00 00       	mov    edi,0x1
c0005a1e:	eb 40                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a20:	85 ed                	test   ebp,ebp
c0005a22:	75 3c                	jne    c0005a60 <f_mkfs+0x7cb>
c0005a24:	83 ec 0c             	sub    esp,0xc
c0005a27:	56                   	push   esi
c0005a28:	e8 57 00 00 00       	call   c0005a84 <ff_memfree>
c0005a2d:	83 c4 10             	add    esp,0x10
c0005a30:	eb 2e                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a32:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a37:	0f 85 56 fb ff ff    	jne    c0005593 <f_mkfs+0x2fe>
c0005a3d:	e9 2f fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a42:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a47:	0f 85 4c fb ff ff    	jne    c0005599 <f_mkfs+0x304>
c0005a4d:	89 cf                	mov    edi,ecx
c0005a4f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a55:	0f 86 49 fa ff ff    	jbe    c00054a4 <f_mkfs+0x20f>
c0005a5b:	e9 11 fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a60:	83 c4 4c             	add    esp,0x4c
c0005a63:	89 f8                	mov    eax,edi
c0005a65:	5b                   	pop    ebx
c0005a66:	5e                   	pop    esi
c0005a67:	5f                   	pop    edi
c0005a68:	5d                   	pop    ebp
c0005a69:	c3                   	ret    
c0005a6a:	66 90                	xchg   ax,ax

c0005a6c <ff_memalloc>:
c0005a6c:	83 ec 0c             	sub    esp,0xc
c0005a6f:	83 ec 0c             	sub    esp,0xc
c0005a72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a76:	e8 3e 1d 00 00       	call   c00077b9 <malloc>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	83 c4 0c             	add    esp,0xc
c0005a81:	c3                   	ret    
c0005a82:	66 90                	xchg   ax,ax

c0005a84 <ff_memfree>:
c0005a84:	83 ec 0c             	sub    esp,0xc
c0005a87:	83 ec 0c             	sub    esp,0xc
c0005a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a8e:	e8 56 1d 00 00       	call   c00077e9 <free>
c0005a93:	83 c4 10             	add    esp,0x10
c0005a96:	90                   	nop
c0005a97:	83 c4 0c             	add    esp,0xc
c0005a9a:	c3                   	ret    
c0005a9b:	90                   	nop

c0005a9c <ff_uni2oem>:
c0005a9c:	83 ec 14             	sub    esp,0x14
c0005a9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005aa3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005aa7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005aae:	c7 44 24 0c 80 d4 01 c0 	mov    DWORD PTR [esp+0xc],0xc001d480
c0005ab6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005abb:	77 0b                	ja     c0005ac8 <ff_uni2oem+0x2c>
c0005abd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ac1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ac6:	eb 68                	jmp    c0005b30 <ff_uni2oem+0x94>
c0005ac8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005ad0:	77 5e                	ja     c0005b30 <ff_uni2oem+0x94>
c0005ad2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005ad8:	75 56                	jne    c0005b30 <ff_uni2oem+0x94>
c0005ada:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ae1:	eb 0d                	jmp    c0005af0 <ff_uni2oem+0x54>
c0005ae3:	90                   	nop
c0005ae4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ae9:	40                   	inc    eax
c0005aea:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005aef:	90                   	nop
c0005af0:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005af6:	77 24                	ja     c0005b1c <ff_uni2oem+0x80>
c0005af8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005afd:	25 ff ff 00 00       	and    eax,0xffff
c0005b02:	01 c0                	add    eax,eax
c0005b04:	89 c2                	mov    edx,eax
c0005b06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b0a:	01 d0                	add    eax,edx
c0005b0c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b0f:	25 ff ff 00 00       	and    eax,0xffff
c0005b14:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b18:	75 ca                	jne    c0005ae4 <ff_uni2oem+0x48>
c0005b1a:	66 90                	xchg   ax,ax
c0005b1c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b21:	83 e8 80             	sub    eax,0xffffff80
c0005b24:	25 ff 00 00 00       	and    eax,0xff
c0005b29:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b2e:	66 90                	xchg   ax,ax
c0005b30:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b35:	83 c4 14             	add    esp,0x14
c0005b38:	c3                   	ret    
c0005b39:	8d 76 00             	lea    esi,[esi+0x0]

c0005b3c <ff_oem2uni>:
c0005b3c:	83 ec 18             	sub    esp,0x18
c0005b3f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b47:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b4c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b50:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b57:	c7 44 24 10 80 d4 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d480
c0005b5f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b65:	77 0d                	ja     c0005b74 <ff_oem2uni+0x38>
c0005b67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b6b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b70:	eb 36                	jmp    c0005ba8 <ff_oem2uni+0x6c>
c0005b72:	66 90                	xchg   ax,ax
c0005b74:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b7a:	75 2c                	jne    c0005ba8 <ff_oem2uni+0x6c>
c0005b7c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005b83:	77 23                	ja     c0005ba8 <ff_oem2uni+0x6c>
c0005b85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b89:	25 ff ff 00 00       	and    eax,0xffff
c0005b8e:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005b93:	01 c0                	add    eax,eax
c0005b95:	89 c2                	mov    edx,eax
c0005b97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005b9b:	01 d0                	add    eax,edx
c0005b9d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ba0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ba8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005bad:	83 c4 18             	add    esp,0x18
c0005bb0:	c3                   	ret    
c0005bb1:	8d 76 00             	lea    esi,[esi+0x0]

c0005bb4 <ff_wtoupper>:
c0005bb4:	83 ec 10             	sub    esp,0x10
c0005bb7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005bbf:	0f 87 77 01 00 00    	ja     c0005d3c <ff_wtoupper+0x188>
c0005bc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005bc9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bce:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bd5:	77 09                	ja     c0005be0 <ff_wtoupper+0x2c>
c0005bd7:	b8 80 d2 01 c0       	mov    eax,0xc001d280
c0005bdc:	eb 0a                	jmp    c0005be8 <ff_wtoupper+0x34>
c0005bde:	66 90                	xchg   ax,ax
c0005be0:	b8 c0 d1 01 c0       	mov    eax,0xc001d1c0
c0005be5:	8d 76 00             	lea    esi,[esi+0x0]
c0005be8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005bec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005bf0:	8d 50 02             	lea    edx,[eax+0x2]
c0005bf3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005bf7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bfa:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005bff:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005c05:	0f 84 21 01 00 00    	je     c0005d2c <ff_wtoupper+0x178>
c0005c0b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c10:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c15:	0f 82 11 01 00 00    	jb     c0005d2c <ff_wtoupper+0x178>
c0005c1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c1f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c26:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c29:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c2e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c33:	66 c1 e8 08          	shr    ax,0x8
c0005c37:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c3c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c43:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c48:	31 d2                	xor    edx,edx
c0005c4a:	66 89 c2             	mov    dx,ax
c0005c4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c51:	31 c9                	xor    ecx,ecx
c0005c53:	66 89 c1             	mov    cx,ax
c0005c56:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c5b:	25 ff ff 00 00       	and    eax,0xffff
c0005c60:	01 c8                	add    eax,ecx
c0005c62:	39 c2                	cmp    edx,eax
c0005c64:	0f 8d 9a 00 00 00    	jge    c0005d04 <ff_wtoupper+0x150>
c0005c6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c6e:	25 ff ff 00 00       	and    eax,0xffff
c0005c73:	83 f8 08             	cmp    eax,0x8
c0005c76:	0f 87 ac 00 00 00    	ja     c0005d28 <ff_wtoupper+0x174>
c0005c7c:	8b 04 85 80 d1 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe2e80]
c0005c83:	ff e0                	jmp    eax
c0005c85:	8d 76 00             	lea    esi,[esi+0x0]
c0005c88:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c8d:	31 d2                	xor    edx,edx
c0005c8f:	66 89 c2             	mov    dx,ax
c0005c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c96:	25 ff ff 00 00       	and    eax,0xffff
c0005c9b:	29 c2                	sub    edx,eax
c0005c9d:	89 d0                	mov    eax,edx
c0005c9f:	01 c0                	add    eax,eax
c0005ca1:	89 c2                	mov    edx,eax
c0005ca3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ca7:	01 d0                	add    eax,edx
c0005ca9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cac:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005cb1:	eb 4d                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cb3:	90                   	nop
c0005cb4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cb9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cbd:	83 e0 01             	and    eax,0x1
c0005cc0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005cc5:	eb 39                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cc7:	90                   	nop
c0005cc8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cce:	eb 30                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cd6:	eb 28                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cde:	eb 20                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005ce6:	eb 18                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005cee:	eb 10                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf0:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005cf6:	eb 08                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf8:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005cff:	90                   	nop
c0005d00:	eb 26                	jmp    c0005d28 <ff_wtoupper+0x174>
c0005d02:	66 90                	xchg   ax,ax
c0005d04:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005d0a:	0f 85 dc fe ff ff    	jne    c0005bec <ff_wtoupper+0x38>
c0005d10:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d15:	25 ff ff 00 00       	and    eax,0xffff
c0005d1a:	01 c0                	add    eax,eax
c0005d1c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d20:	e9 c7 fe ff ff       	jmp    c0005bec <ff_wtoupper+0x38>
c0005d25:	8d 76 00             	lea    esi,[esi+0x0]
c0005d28:	90                   	nop
c0005d29:	8d 76 00             	lea    esi,[esi+0x0]
c0005d2c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d31:	25 ff ff 00 00       	and    eax,0xffff
c0005d36:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d3a:	66 90                	xchg   ax,ax
c0005d3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d40:	83 c4 10             	add    esp,0x10
c0005d43:	c3                   	ret    

c0005d44 <utf2ucs>:
c0005d44:	57                   	push   edi
c0005d45:	31 c9                	xor    ecx,ecx
c0005d47:	56                   	push   esi
c0005d48:	89 d7                	mov    edi,edx
c0005d4a:	53                   	push   ebx
c0005d4b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005d4f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005d53:	89 de                	mov    esi,ebx
c0005d55:	c1 fe 08             	sar    esi,0x8
c0005d58:	89 f2                	mov    edx,esi
c0005d5a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005d5d:	41                   	inc    ecx
c0005d5e:	85 db                	test   ebx,ebx
c0005d60:	75 e9                	jne    c0005d4b <utf2ucs+0x7>
c0005d62:	5b                   	pop    ebx
c0005d63:	5e                   	pop    esi
c0005d64:	5f                   	pop    edi
c0005d65:	c3                   	ret    

c0005d66 <ucs2utfn>:
c0005d66:	83 e1 fe             	and    ecx,0xfffffffe
c0005d69:	01 d1                	add    ecx,edx
c0005d6b:	39 d1                	cmp    ecx,edx
c0005d6d:	75 04                	jne    c0005d73 <ucs2utfn+0xd>
c0005d6f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005d72:	c3                   	ret    
c0005d73:	57                   	push   edi
c0005d74:	56                   	push   esi
c0005d75:	53                   	push   ebx
c0005d76:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005d79:	83 c2 02             	add    edx,0x2
c0005d7c:	89 de                	mov    esi,ebx
c0005d7e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005d82:	c1 e6 08             	shl    esi,0x8
c0005d85:	09 f3                	or     ebx,esi
c0005d87:	83 fb 3b             	cmp    ebx,0x3b
c0005d8a:	74 51                	je     c0005ddd <ucs2utfn+0x77>
c0005d8c:	83 fb 7f             	cmp    ebx,0x7f
c0005d8f:	7f 05                	jg     c0005d96 <ucs2utfn+0x30>
c0005d91:	88 18                	mov    BYTE PTR [eax],bl
c0005d93:	40                   	inc    eax
c0005d94:	eb 43                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005d96:	89 de                	mov    esi,ebx
c0005d98:	89 df                	mov    edi,ebx
c0005d9a:	c1 fe 06             	sar    esi,0x6
c0005d9d:	83 e7 3f             	and    edi,0x3f
c0005da0:	83 cf 80             	or     edi,0xffffff80
c0005da3:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005da9:	7f 12                	jg     c0005dbd <ucs2utfn+0x57>
c0005dab:	89 f3                	mov    ebx,esi
c0005dad:	83 c0 02             	add    eax,0x2
c0005db0:	83 cb c0             	or     ebx,0xffffffc0
c0005db3:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005db6:	89 fb                	mov    ebx,edi
c0005db8:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dbb:	eb 1c                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005dbd:	c1 fb 0c             	sar    ebx,0xc
c0005dc0:	83 e6 3f             	and    esi,0x3f
c0005dc3:	83 cb e0             	or     ebx,0xffffffe0
c0005dc6:	83 c0 03             	add    eax,0x3
c0005dc9:	88 58 fd             	mov    BYTE PTR [eax-0x3],bl
c0005dcc:	89 f3                	mov    ebx,esi
c0005dce:	83 cb 80             	or     ebx,0xffffff80
c0005dd1:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005dd4:	89 fb                	mov    ebx,edi
c0005dd6:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dd9:	39 d1                	cmp    ecx,edx
c0005ddb:	75 99                	jne    c0005d76 <ucs2utfn+0x10>
c0005ddd:	5b                   	pop    ebx
c0005dde:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005de1:	5e                   	pop    esi
c0005de2:	5f                   	pop    edi
c0005de3:	c3                   	ret    

c0005de4 <isjoliet>:
c0005de4:	31 d2                	xor    edx,edx
c0005de6:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005de9:	75 22                	jne    c0005e0d <isjoliet+0x29>
c0005deb:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005def:	75 1c                	jne    c0005e0d <isjoliet+0x29>
c0005df1:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005df4:	ba 02 00 00 00       	mov    edx,0x2
c0005df9:	3c 43                	cmp    al,0x43
c0005dfb:	74 10                	je     c0005e0d <isjoliet+0x29>
c0005dfd:	ba 03 00 00 00       	mov    edx,0x3
c0005e02:	3c 45                	cmp    al,0x45
c0005e04:	74 07                	je     c0005e0d <isjoliet+0x29>
c0005e06:	31 d2                	xor    edx,edx
c0005e08:	3c 40                	cmp    al,0x40
c0005e0a:	0f 94 c2             	sete   dl
c0005e0d:	89 d0                	mov    eax,edx
c0005e0f:	c3                   	ret    

c0005e10 <htohl_32>:
c0005e10:	8b 00                	mov    eax,DWORD PTR [eax]
c0005e12:	c3                   	ret    

c0005e13 <iso_733>:
c0005e13:	eb fb                	jmp    c0005e10 <htohl_32>

c0005e15 <bclear_cache>:
c0005e15:	31 c0                	xor    eax,eax
c0005e17:	8b 14 85 c0 fe 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0140]
c0005e1e:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e24:	8b 14 85 20 ff 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe00e0]
c0005e2b:	40                   	inc    eax
c0005e2c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e32:	83 f8 10             	cmp    eax,0x10
c0005e35:	75 e0                	jne    c0005e17 <bclear_cache+0x2>
c0005e37:	c3                   	ret    

c0005e38 <bgrad_cache>:
c0005e38:	83 fa 0e             	cmp    edx,0xe
c0005e3b:	77 16                	ja     c0005e53 <bgrad_cache+0x1b>
c0005e3d:	53                   	push   ebx
c0005e3e:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005e41:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0005e45:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0005e48:	42                   	inc    edx
c0005e49:	83 fa 0f             	cmp    edx,0xf
c0005e4c:	75 f3                	jne    c0005e41 <bgrad_cache+0x9>
c0005e4e:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0005e51:	5b                   	pop    ebx
c0005e52:	c3                   	ret    
c0005e53:	c3                   	ret    

c0005e54 <bclear>:
c0005e54:	eb bf                	jmp    c0005e15 <bclear_cache>

c0005e56 <iso_break_all>:
c0005e56:	31 c0                	xor    eax,eax
c0005e58:	c7 80 70 04 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdfb90],0x1
c0005e62:	05 94 00 00 00       	add    eax,0x94
c0005e67:	3d 40 09 00 00       	cmp    eax,0x940
c0005e6c:	75 ea                	jne    c0005e58 <iso_break_all+0x2>
c0005e6e:	c3                   	ret    

c0005e6f <ucscompare>:
c0005e6f:	55                   	push   ebp
c0005e70:	57                   	push   edi
c0005e71:	89 c7                	mov    edi,eax
c0005e73:	56                   	push   esi
c0005e74:	89 d6                	mov    esi,edx
c0005e76:	53                   	push   ebx
c0005e77:	31 d2                	xor    edx,edx
c0005e79:	83 ec 1c             	sub    esp,0x1c
c0005e7c:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0005e80:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0005e85:	c1 e3 08             	shl    ebx,0x8
c0005e88:	09 c3                	or     ebx,eax
c0005e8a:	39 ca                	cmp    edx,ecx
c0005e8c:	7d 42                	jge    c0005ed0 <ucscompare+0x61>
c0005e8e:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0005e92:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0005e97:	c1 e0 08             	shl    eax,0x8
c0005e9a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e9e:	09 e8                	or     eax,ebp
c0005ea0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005ea4:	83 f8 3b             	cmp    eax,0x3b
c0005ea7:	74 27                	je     c0005ed0 <ucscompare+0x61>
c0005ea9:	83 ec 0c             	sub    esp,0xc
c0005eac:	50                   	push   eax
c0005ead:	e8 1e aa ff ff       	call   c00008d0 <tolower>
c0005eb2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0005eb5:	89 c5                	mov    ebp,eax
c0005eb7:	e8 14 aa ff ff       	call   c00008d0 <tolower>
c0005ebc:	83 c4 10             	add    esp,0x10
c0005ebf:	39 c5                	cmp    ebp,eax
c0005ec1:	75 20                	jne    c0005ee3 <ucscompare+0x74>
c0005ec3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005ec7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005ecb:	83 c2 02             	add    edx,0x2
c0005ece:	eb ac                	jmp    c0005e7c <ucscompare+0xd>
c0005ed0:	85 db                	test   ebx,ebx
c0005ed2:	0f 95 c2             	setne  dl
c0005ed5:	31 c0                	xor    eax,eax
c0005ed7:	83 fb 2f             	cmp    ebx,0x2f
c0005eda:	0f 95 c0             	setne  al
c0005edd:	21 d0                	and    eax,edx
c0005edf:	f7 d8                	neg    eax
c0005ee1:	eb 03                	jmp    c0005ee6 <ucscompare+0x77>
c0005ee3:	83 c8 ff             	or     eax,0xffffffff
c0005ee6:	83 c4 1c             	add    esp,0x1c
c0005ee9:	5b                   	pop    ebx
c0005eea:	5e                   	pop    esi
c0005eeb:	5f                   	pop    edi
c0005eec:	5d                   	pop    ebp
c0005eed:	c3                   	ret    

c0005eee <fncompare>:
c0005eee:	55                   	push   ebp
c0005eef:	57                   	push   edi
c0005ef0:	89 c7                	mov    edi,eax
c0005ef2:	56                   	push   esi
c0005ef3:	89 ce                	mov    esi,ecx
c0005ef5:	53                   	push   ebx
c0005ef6:	31 db                	xor    ebx,ebx
c0005ef8:	83 ec 1c             	sub    esp,0x1c
c0005efb:	39 d3                	cmp    ebx,edx
c0005efd:	7d 43                	jge    c0005f42 <fncompare+0x54>
c0005eff:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0005f03:	3c 3b                	cmp    al,0x3b
c0005f05:	74 3b                	je     c0005f42 <fncompare+0x54>
c0005f07:	3c 2e                	cmp    al,0x2e
c0005f09:	75 0e                	jne    c0005f19 <fncompare+0x2b>
c0005f0b:	8d 4a ff             	lea    ecx,[edx-0x1]
c0005f0e:	39 d9                	cmp    ecx,ebx
c0005f10:	74 30                	je     c0005f42 <fncompare+0x54>
c0005f12:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0005f17:	74 29                	je     c0005f42 <fncompare+0x54>
c0005f19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f1d:	83 ec 0c             	sub    esp,0xc
c0005f20:	50                   	push   eax
c0005f21:	e8 aa a9 ff ff       	call   c00008d0 <tolower>
c0005f26:	89 c5                	mov    ebp,eax
c0005f28:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0005f2c:	89 04 24             	mov    DWORD PTR [esp],eax
c0005f2f:	e8 9c a9 ff ff       	call   c00008d0 <tolower>
c0005f34:	83 c4 10             	add    esp,0x10
c0005f37:	39 c5                	cmp    ebp,eax
c0005f39:	75 1d                	jne    c0005f58 <fncompare+0x6a>
c0005f3b:	43                   	inc    ebx
c0005f3c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005f40:	eb b9                	jmp    c0005efb <fncompare+0xd>
c0005f42:	8a 14 1e             	mov    dl,BYTE PTR [esi+ebx*1]
c0005f45:	84 d2                	test   dl,dl
c0005f47:	0f 95 c1             	setne  cl
c0005f4a:	31 c0                	xor    eax,eax
c0005f4c:	80 fa 2f             	cmp    dl,0x2f
c0005f4f:	0f 95 c0             	setne  al
c0005f52:	21 c8                	and    eax,ecx
c0005f54:	f7 d8                	neg    eax
c0005f56:	eb 03                	jmp    c0005f5b <fncompare+0x6d>
c0005f58:	83 c8 ff             	or     eax,0xffffffff
c0005f5b:	83 c4 1c             	add    esp,0x1c
c0005f5e:	5b                   	pop    ebx
c0005f5f:	5e                   	pop    esi
c0005f60:	5f                   	pop    edi
c0005f61:	5d                   	pop    ebp
c0005f62:	c3                   	ret    

c0005f63 <isoReadDiscSector>:
c0005f63:	83 ec 0c             	sub    esp,0xc
c0005f66:	0f be 05 00 ff 01 c0 	movsx  eax,BYTE PTR ds:0xc001ff00
c0005f6d:	50                   	push   eax
c0005f6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f7a:	e8 f1 19 01 00       	call   c0017970 <isoReadDiscSectorHelper>
c0005f7f:	83 c4 1c             	add    esp,0x1c
c0005f82:	c3                   	ret    

c0005f83 <bread_cache>:
c0005f83:	55                   	push   ebp
c0005f84:	57                   	push   edi
c0005f85:	89 d7                	mov    edi,edx
c0005f87:	56                   	push   esi
c0005f88:	ba 0f 00 00 00       	mov    edx,0xf
c0005f8d:	53                   	push   ebx
c0005f8e:	89 c6                	mov    esi,eax
c0005f90:	83 ec 0c             	sub    esp,0xc
c0005f93:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0005f96:	39 38                	cmp    DWORD PTR [eax],edi
c0005f98:	74 3c                	je     c0005fd6 <bread_cache+0x53>
c0005f9a:	4a                   	dec    edx
c0005f9b:	83 fa ff             	cmp    edx,0xffffffff
c0005f9e:	75 f3                	jne    c0005f93 <bread_cache+0x10>
c0005fa0:	31 db                	xor    ebx,ebx
c0005fa2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0005fa5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c0005fa8:	74 08                	je     c0005fb2 <bread_cache+0x2f>
c0005faa:	43                   	inc    ebx
c0005fab:	83 fb 10             	cmp    ebx,0x10
c0005fae:	75 f2                	jne    c0005fa2 <bread_cache+0x1f>
c0005fb0:	31 db                	xor    ebx,ebx
c0005fb2:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c0005fb5:	50                   	push   eax
c0005fb6:	6a 01                	push   0x1
c0005fb8:	57                   	push   edi
c0005fb9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fbc:	83 c0 04             	add    eax,0x4
c0005fbf:	50                   	push   eax
c0005fc0:	e8 9e ff ff ff       	call   c0005f63 <isoReadDiscSector>
c0005fc5:	83 c4 10             	add    esp,0x10
c0005fc8:	83 c9 ff             	or     ecx,0xffffffff
c0005fcb:	85 c0                	test   eax,eax
c0005fcd:	78 13                	js     c0005fe2 <bread_cache+0x5f>
c0005fcf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fd2:	89 da                	mov    edx,ebx
c0005fd4:	89 38                	mov    DWORD PTR [eax],edi
c0005fd6:	89 f0                	mov    eax,esi
c0005fd8:	e8 5b fe ff ff       	call   c0005e38 <bgrad_cache>
c0005fdd:	b9 0f 00 00 00       	mov    ecx,0xf
c0005fe2:	83 c4 0c             	add    esp,0xc
c0005fe5:	89 c8                	mov    eax,ecx
c0005fe7:	5b                   	pop    ebx
c0005fe8:	5e                   	pop    esi
c0005fe9:	5f                   	pop    edi
c0005fea:	5d                   	pop    ebp
c0005feb:	c3                   	ret    

c0005fec <biread>:
c0005fec:	89 c2                	mov    edx,eax
c0005fee:	b8 20 ff 01 c0       	mov    eax,0xc001ff20
c0005ff3:	eb 8e                	jmp    c0005f83 <bread_cache>

c0005ff5 <bdread>:
c0005ff5:	89 c2                	mov    edx,eax
c0005ff7:	b8 c0 fe 01 c0       	mov    eax,0xc001fec0
c0005ffc:	eb 85                	jmp    c0005f83 <bread_cache>

c0005ffe <strnicmp>:
c0005ffe:	55                   	push   ebp
c0005fff:	57                   	push   edi
c0006000:	56                   	push   esi
c0006001:	31 f6                	xor    esi,esi
c0006003:	53                   	push   ebx
c0006004:	83 ec 0c             	sub    esp,0xc
c0006007:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000600b:	3b 74 24 28          	cmp    esi,DWORD PTR [esp+0x28]
c000600f:	74 42                	je     c0006053 <strnicmp+0x55>
c0006011:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006015:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
c0006019:	84 c0                	test   al,al
c000601b:	74 36                	je     c0006053 <strnicmp+0x55>
c000601d:	8a 14 33             	mov    dl,BYTE PTR [ebx+esi*1]
c0006020:	84 d2                	test   dl,dl
c0006022:	74 2f                	je     c0006053 <strnicmp+0x55>
c0006024:	38 d0                	cmp    al,dl
c0006026:	8d 6e 01             	lea    ebp,[esi+0x1]
c0006029:	75 04                	jne    c000602f <strnicmp+0x31>
c000602b:	89 ee                	mov    esi,ebp
c000602d:	eb dc                	jmp    c000600b <strnicmp+0xd>
c000602f:	83 ec 0c             	sub    esp,0xc
c0006032:	50                   	push   eax
c0006033:	e8 98 a8 ff ff       	call   c00008d0 <tolower>
c0006038:	89 c7                	mov    edi,eax
c000603a:	0f be 04 33          	movsx  eax,BYTE PTR [ebx+esi*1]
c000603e:	89 ee                	mov    esi,ebp
c0006040:	89 04 24             	mov    DWORD PTR [esp],eax
c0006043:	e8 88 a8 ff ff       	call   c00008d0 <tolower>
c0006048:	83 c4 10             	add    esp,0x10
c000604b:	29 c7                	sub    edi,eax
c000604d:	89 f8                	mov    eax,edi
c000604f:	74 ba                	je     c000600b <strnicmp+0xd>
c0006051:	eb 02                	jmp    c0006055 <strnicmp+0x57>
c0006053:	31 c0                	xor    eax,eax
c0006055:	83 c4 0c             	add    esp,0xc
c0006058:	5b                   	pop    ebx
c0006059:	5e                   	pop    esi
c000605a:	5f                   	pop    edi
c000605b:	5d                   	pop    ebp
c000605c:	c3                   	ret    

c000605d <find_object>:
c000605d:	55                   	push   ebp
c000605e:	89 c5                	mov    ebp,eax
c0006060:	57                   	push   edi
c0006061:	56                   	push   esi
c0006062:	53                   	push   ebx
c0006063:	89 d3                	mov    ebx,edx
c0006065:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000606b:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006072:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006076:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000607a:	83 3d 54 0d 02 c0 00 	cmp    DWORD PTR ds:0xc0020d54,0x0
c0006081:	74 0b                	je     c000608e <find_object+0x31>
c0006083:	89 ea                	mov    edx,ebp
c0006085:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006089:	e8 b6 fc ff ff       	call   c0005d44 <utf2ucs>
c000608e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006091:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006095:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000609a:	7e 11                	jle    c00060ad <find_object+0x50>
c000609c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060a0:	e8 47 ff ff ff       	call   c0005fec <biread>
c00060a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060a9:	85 c0                	test   eax,eax
c00060ab:	79 07                	jns    c00060b4 <find_object+0x57>
c00060ad:	31 db                	xor    ebx,ebx
c00060af:	e9 5b 01 00 00       	jmp    c000620f <find_object+0x1b2>
c00060b4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00060bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060c0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00060c4:	8b 04 85 20 ff 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe00e0]
c00060cb:	8d 5c 38 04          	lea    ebx,[eax+edi*1+0x4]
c00060cf:	8a 03                	mov    al,BYTE PTR [ebx]
c00060d1:	84 c0                	test   al,al
c00060d3:	75 0e                	jne    c00060e3 <find_object+0x86>
c00060d5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00060d9:	81 6c 24 10 00 08 00 00 	sub    DWORD PTR [esp+0x10],0x800
c00060e1:	eb b2                	jmp    c0006095 <find_object+0x38>
c00060e3:	8b 35 54 0d 02 c0    	mov    esi,DWORD PTR ds:0xc0020d54
c00060e9:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00060ed:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00060f1:	89 ca                	mov    edx,ecx
c00060f3:	85 f6                	test   esi,esi
c00060f5:	74 2b                	je     c0006122 <find_object+0xc5>
c00060f7:	8d 43 21             	lea    eax,[ebx+0x21]
c00060fa:	8d 54 24 20          	lea    edx,[esp+0x20]
c00060fe:	e8 6c fd ff ff       	call   c0005e6f <ucscompare>
c0006103:	85 c0                	test   eax,eax
c0006105:	0f 84 c1 00 00 00    	je     c00061cc <find_object+0x16f>
c000610b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000610e:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006112:	81 7c 24 0c ff 07 00 00 	cmp    DWORD PTR [esp+0xc],0x7ff
c000611a:	0f 8e dc 00 00 00    	jle    c00061fc <find_object+0x19f>
c0006120:	eb b3                	jmp    c00060d5 <find_object+0x78>
c0006122:	0f b6 f0             	movzx  esi,al
c0006125:	8d 7c 0b 21          	lea    edi,[ebx+ecx*1+0x21]
c0006129:	29 ce                	sub    esi,ecx
c000612b:	80 e2 01             	and    dl,0x1
c000612e:	74 05                	je     c0006135 <find_object+0xd8>
c0006130:	83 ee 21             	sub    esi,0x21
c0006133:	eb 55                	jmp    c000618a <find_object+0x12d>
c0006135:	47                   	inc    edi
c0006136:	83 ee 22             	sub    esi,0x22
c0006139:	eb 4f                	jmp    c000618a <find_object+0x12d>
c000613b:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c000613e:	48                   	dec    eax
c000613f:	3c 01                	cmp    al,0x1
c0006141:	77 4c                	ja     c000618f <find_object+0x132>
c0006143:	50                   	push   eax
c0006144:	6a 02                	push   0x2
c0006146:	68 80 d5 01 c0       	push   0xc001d580
c000614b:	57                   	push   edi
c000614c:	e8 0f a6 ff ff       	call   c0000760 <strncmp>
c0006151:	83 c4 10             	add    esp,0x10
c0006154:	85 c0                	test   eax,eax
c0006156:	75 2a                	jne    c0006182 <find_object+0x125>
c0006158:	0f be 57 02          	movsx  edx,BYTE PTR [edi+0x2]
c000615c:	8d 42 fb             	lea    eax,[edx-0x5]
c000615f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006163:	50                   	push   eax
c0006164:	8d 47 05             	lea    eax,[edi+0x5]
c0006167:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000616b:	50                   	push   eax
c000616c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006170:	50                   	push   eax
c0006171:	e8 ba a4 ff ff       	call   c0000630 <strncpy>
c0006176:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000617a:	c6 44 04 30 00       	mov    BYTE PTR [esp+eax*1+0x30],0x0
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006186:	29 c6                	sub    esi,eax
c0006188:	01 c7                	add    edi,eax
c000618a:	83 fe 03             	cmp    esi,0x3
c000618d:	7f ac                	jg     c000613b <find_object+0xde>
c000618f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0006194:	7e 40                	jle    c00061d6 <find_object+0x179>
c0006196:	51                   	push   ecx
c0006197:	51                   	push   ecx
c0006198:	6a 2f                	push   0x2f
c000619a:	55                   	push   ebp
c000619b:	e8 90 a5 ff ff       	call   c0000730 <strchr>
c00061a0:	83 c4 10             	add    esp,0x10
c00061a3:	85 c0                	test   eax,eax
c00061a5:	74 04                	je     c00061ab <find_object+0x14e>
c00061a7:	29 e8                	sub    eax,ebp
c00061a9:	eb 0c                	jmp    c00061b7 <find_object+0x15a>
c00061ab:	83 ec 0c             	sub    esp,0xc
c00061ae:	55                   	push   ebp
c00061af:	e8 8c a3 ff ff       	call   c0000540 <strlen>
c00061b4:	83 c4 10             	add    esp,0x10
c00061b7:	52                   	push   edx
c00061b8:	50                   	push   eax
c00061b9:	55                   	push   ebp
c00061ba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00061be:	50                   	push   eax
c00061bf:	e8 3a fe ff ff       	call   c0005ffe <strnicmp>
c00061c4:	83 c4 10             	add    esp,0x10
c00061c7:	e9 37 ff ff ff       	jmp    c0006103 <find_object+0xa6>
c00061cc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061d0:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c00061d4:	eb 1e                	jmp    c00061f4 <find_object+0x197>
c00061d6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00061da:	8d 43 21             	lea    eax,[ebx+0x21]
c00061dd:	89 e9                	mov    ecx,ebp
c00061df:	e8 0a fd ff ff       	call   c0005eee <fncompare>
c00061e4:	85 c0                	test   eax,eax
c00061e6:	0f 85 1f ff ff ff    	jne    c000610b <find_object+0xae>
c00061ec:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061f0:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00061f4:	0f 85 11 ff ff ff    	jne    c000610b <find_object+0xae>
c00061fa:	eb 13                	jmp    c000620f <find_object+0x1b2>
c00061fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006200:	39 4c 24 10          	cmp    DWORD PTR [esp+0x10],ecx
c0006204:	0f 8f b2 fe ff ff    	jg     c00060bc <find_object+0x5f>
c000620a:	e9 c6 fe ff ff       	jmp    c00060d5 <find_object+0x78>
c000620f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006215:	89 d8                	mov    eax,ebx
c0006217:	5b                   	pop    ebx
c0006218:	5e                   	pop    esi
c0006219:	5f                   	pop    edi
c000621a:	5d                   	pop    ebp
c000621b:	c3                   	ret    

c000621c <find_object_path>:
c000621c:	55                   	push   ebp
c000621d:	57                   	push   edi
c000621e:	89 d7                	mov    edi,edx
c0006220:	56                   	push   esi
c0006221:	89 c6                	mov    esi,eax
c0006223:	53                   	push   ebx
c0006224:	89 cb                	mov    ebx,ecx
c0006226:	83 ec 0c             	sub    esp,0xc
c0006229:	50                   	push   eax
c000622a:	50                   	push   eax
c000622b:	6a 2f                	push   0x2f
c000622d:	56                   	push   esi
c000622e:	e8 fd a4 ff ff       	call   c0000730 <strchr>
c0006233:	83 c4 10             	add    esp,0x10
c0006236:	89 c5                	mov    ebp,eax
c0006238:	85 c0                	test   eax,eax
c000623a:	74 3a                	je     c0006276 <find_object_path+0x5a>
c000623c:	39 ee                	cmp    esi,ebp
c000623e:	74 31                	je     c0006271 <find_object_path+0x55>
c0006240:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006243:	e8 cb fb ff ff       	call   c0005e13 <iso_733>
c0006248:	89 c2                	mov    edx,eax
c000624a:	8d 43 02             	lea    eax,[ebx+0x2]
c000624d:	e8 c1 fb ff ff       	call   c0005e13 <iso_733>
c0006252:	83 ec 0c             	sub    esp,0xc
c0006255:	89 c1                	mov    ecx,eax
c0006257:	52                   	push   edx
c0006258:	89 f0                	mov    eax,esi
c000625a:	ba 01 00 00 00       	mov    edx,0x1
c000625f:	e8 f9 fd ff ff       	call   c000605d <find_object>
c0006264:	83 c4 10             	add    esp,0x10
c0006267:	89 c3                	mov    ebx,eax
c0006269:	85 c0                	test   eax,eax
c000626b:	75 04                	jne    c0006271 <find_object_path+0x55>
c000626d:	31 db                	xor    ebx,ebx
c000626f:	eb 36                	jmp    c00062a7 <find_object_path+0x8b>
c0006271:	8d 75 01             	lea    esi,[ebp+0x1]
c0006274:	eb b3                	jmp    c0006229 <find_object_path+0xd>
c0006276:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006279:	74 28                	je     c00062a3 <find_object_path+0x87>
c000627b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000627e:	e8 90 fb ff ff       	call   c0005e13 <iso_733>
c0006283:	89 c2                	mov    edx,eax
c0006285:	8d 43 02             	lea    eax,[ebx+0x2]
c0006288:	e8 86 fb ff ff       	call   c0005e13 <iso_733>
c000628d:	83 ec 0c             	sub    esp,0xc
c0006290:	89 c1                	mov    ecx,eax
c0006292:	52                   	push   edx
c0006293:	89 f0                	mov    eax,esi
c0006295:	89 fa                	mov    edx,edi
c0006297:	e8 c1 fd ff ff       	call   c000605d <find_object>
c000629c:	83 c4 10             	add    esp,0x10
c000629f:	89 c3                	mov    ebx,eax
c00062a1:	eb 04                	jmp    c00062a7 <find_object_path+0x8b>
c00062a3:	85 ff                	test   edi,edi
c00062a5:	74 c6                	je     c000626d <find_object_path+0x51>
c00062a7:	83 c4 0c             	add    esp,0xc
c00062aa:	89 d8                	mov    eax,ebx
c00062ac:	5b                   	pop    ebx
c00062ad:	5e                   	pop    esi
c00062ae:	5f                   	pop    edi
c00062af:	5d                   	pop    ebp
c00062b0:	c3                   	ret    

c00062b1 <stricmp>:
c00062b1:	57                   	push   edi
c00062b2:	56                   	push   esi
c00062b3:	31 f6                	xor    esi,esi
c00062b5:	53                   	push   ebx
c00062b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062ba:	83 ec 0c             	sub    esp,0xc
c00062bd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00062c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062c5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00062c9:	50                   	push   eax
c00062ca:	e8 e1 a5 ff ff       	call   c00008b0 <toupper>
c00062cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00062d2:	e8 f9 a5 ff ff       	call   c00008d0 <tolower>
c00062d7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00062da:	89 c3                	mov    ebx,eax
c00062dc:	e8 cf a5 ff ff       	call   c00008b0 <toupper>
c00062e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00062e4:	e8 e7 a5 ff ff       	call   c00008d0 <tolower>
c00062e9:	83 c4 10             	add    esp,0x10
c00062ec:	39 c3                	cmp    ebx,eax
c00062ee:	75 05                	jne    c00062f5 <stricmp+0x44>
c00062f0:	46                   	inc    esi
c00062f1:	85 db                	test   ebx,ebx
c00062f3:	75 c1                	jne    c00062b6 <stricmp+0x5>
c00062f5:	29 c3                	sub    ebx,eax
c00062f7:	89 d8                	mov    eax,ebx
c00062f9:	5b                   	pop    ebx
c00062fa:	5e                   	pop    esi
c00062fb:	5f                   	pop    edi
c00062fc:	c3                   	ret    

c00062fd <iso_open>:
c00062fd:	57                   	push   edi
c00062fe:	31 c0                	xor    eax,eax
c0006300:	56                   	push   esi
c0006301:	b9 20 0d 02 c0       	mov    ecx,0xc0020d20
c0006306:	53                   	push   ebx
c0006307:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000630c:	0f 95 c0             	setne  al
c000630f:	89 c2                	mov    edx,eax
c0006311:	89 c6                	mov    esi,eax
c0006313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006317:	e8 00 ff ff ff       	call   c000621c <find_object_path>
c000631c:	83 ca ff             	or     edx,0xffffffff
c000631f:	85 c0                	test   eax,eax
c0006321:	74 5e                	je     c0006381 <iso_open+0x84>
c0006323:	89 c1                	mov    ecx,eax
c0006325:	31 d2                	xor    edx,edx
c0006327:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000632d:	83 bf e0 03 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdfc20],0x0
c0006334:	75 42                	jne    c0006378 <iso_open+0x7b>
c0006336:	8d 41 02             	lea    eax,[ecx+0x2]
c0006339:	c7 87 e0 03 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdfc20],0xffffffff
c0006343:	e8 cb fa ff ff       	call   c0005e13 <iso_733>
c0006348:	89 b7 e4 03 02 c0    	mov    DWORD PTR [edi-0x3ffdfc1c],esi
c000634e:	89 87 e0 03 02 c0    	mov    DWORD PTR [edi-0x3ffdfc20],eax
c0006354:	c7 87 e8 03 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdfc18],0x0
c000635e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006361:	e8 ad fa ff ff       	call   c0005e13 <iso_733>
c0006366:	c7 87 70 04 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdfb90],0x0
c0006370:	89 87 ec 03 02 c0    	mov    DWORD PTR [edi-0x3ffdfc14],eax
c0006376:	eb 09                	jmp    c0006381 <iso_open+0x84>
c0006378:	42                   	inc    edx
c0006379:	83 fa 10             	cmp    edx,0x10
c000637c:	75 a9                	jne    c0006327 <iso_open+0x2a>
c000637e:	83 ca ff             	or     edx,0xffffffff
c0006381:	5b                   	pop    ebx
c0006382:	89 d0                	mov    eax,edx
c0006384:	5e                   	pop    esi
c0006385:	5f                   	pop    edi
c0006386:	c3                   	ret    

c0006387 <iso_close>:
c0006387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000638b:	83 f8 0f             	cmp    eax,0xf
c000638e:	7f 10                	jg     c00063a0 <iso_close+0x19>
c0006390:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c0006396:	c7 80 e0 03 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfc20],0x0
c00063a0:	e9 70 fa ff ff       	jmp    c0005e15 <bclear_cache>

c00063a5 <iso_read>:
c00063a5:	55                   	push   ebp
c00063a6:	57                   	push   edi
c00063a7:	56                   	push   esi
c00063a8:	53                   	push   ebx
c00063a9:	83 ec 1c             	sub    esp,0x1c
c00063ac:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00063b0:	83 fd 0f             	cmp    ebp,0xf
c00063b3:	7e 0a                	jle    c00063bf <iso_read+0x1a>
c00063b5:	83 c8 ff             	or     eax,0xffffffff
c00063b8:	89 c2                	mov    edx,eax
c00063ba:	e9 f4 00 00 00       	jmp    c00064b3 <iso_read+0x10e>
c00063bf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00063c5:	83 bd e0 03 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdfc20],0x0
c00063cc:	74 e7                	je     c00063b5 <iso_read+0x10>
c00063ce:	8b 95 70 04 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdfb90]
c00063d4:	85 d2                	test   edx,edx
c00063d6:	75 dd                	jne    c00063b5 <iso_read+0x10>
c00063d8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00063dd:	0f 84 cd 00 00 00    	je     c00064b0 <iso_read+0x10b>
c00063e3:	8b 85 e8 03 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdfc18]
c00063e9:	8b 8d ec 03 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffdfc14]
c00063ef:	29 c1                	sub    ecx,eax
c00063f1:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00063f5:	76 04                	jbe    c00063fb <iso_read+0x56>
c00063f7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00063fb:	85 c9                	test   ecx,ecx
c00063fd:	0f 84 ad 00 00 00    	je     c00064b0 <iso_read+0x10b>
c0006403:	89 c6                	mov    esi,eax
c0006405:	bb 00 08 00 00       	mov    ebx,0x800
c000640a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006410:	c1 e8 0b             	shr    eax,0xb
c0006413:	29 f3                	sub    ebx,esi
c0006415:	03 85 e0 03 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdfc20]
c000641b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006421:	7e 3f                	jle    c0006462 <iso_read+0xbd>
c0006423:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006429:	75 37                	jne    c0006462 <iso_read+0xbd>
c000642b:	be 20 00 00 00       	mov    esi,0x20
c0006430:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006436:	7f 05                	jg     c000643d <iso_read+0x98>
c0006438:	89 ce                	mov    esi,ecx
c000643a:	c1 fe 0b             	sar    esi,0xb
c000643d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006441:	89 f3                	mov    ebx,esi
c0006443:	c1 e3 0b             	shl    ebx,0xb
c0006446:	52                   	push   edx
c0006447:	56                   	push   esi
c0006448:	50                   	push   eax
c0006449:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000644d:	e8 11 fb ff ff       	call   c0005f63 <isoReadDiscSector>
c0006452:	83 c4 10             	add    esp,0x10
c0006455:	85 c0                	test   eax,eax
c0006457:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000645b:	7f 3e                	jg     c000649b <iso_read+0xf6>
c000645d:	e9 53 ff ff ff       	jmp    c00063b5 <iso_read+0x10>
c0006462:	39 cb                	cmp    ebx,ecx
c0006464:	7e 02                	jle    c0006468 <iso_read+0xc3>
c0006466:	89 cb                	mov    ebx,ecx
c0006468:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000646c:	e8 84 fb ff ff       	call   c0005ff5 <bdread>
c0006471:	85 c0                	test   eax,eax
c0006473:	0f 88 3c ff ff ff    	js     c00063b5 <iso_read+0x10>
c0006479:	8b 0c 85 c0 fe 01 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffe0140]
c0006480:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006484:	8b 85 e8 03 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdfc18]
c000648a:	25 ff 07 00 00       	and    eax,0x7ff
c000648f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c0006493:	89 d9                	mov    ecx,ebx
c0006495:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006497:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000649b:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c000649f:	01 9d e8 03 02 c0    	add    DWORD PTR [ebp-0x3ffdfc18],ebx
c00064a5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00064a9:	01 da                	add    edx,ebx
c00064ab:	e9 28 ff ff ff       	jmp    c00063d8 <iso_read+0x33>
c00064b0:	89 d0                	mov    eax,edx
c00064b2:	99                   	cdq    
c00064b3:	83 c4 1c             	add    esp,0x1c
c00064b6:	5b                   	pop    ebx
c00064b7:	5e                   	pop    esi
c00064b8:	5f                   	pop    edi
c00064b9:	5d                   	pop    ebp
c00064ba:	c3                   	ret    

c00064bb <iso_seek>:
c00064bb:	55                   	push   ebp
c00064bc:	83 c8 ff             	or     eax,0xffffffff
c00064bf:	57                   	push   edi
c00064c0:	89 c2                	mov    edx,eax
c00064c2:	56                   	push   esi
c00064c3:	53                   	push   ebx
c00064c4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00064c8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00064cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00064d0:	83 fe 0f             	cmp    esi,0xf
c00064d3:	7f 65                	jg     c000653a <iso_seek+0x7f>
c00064d5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00064db:	8d 8d e0 03 02 c0    	lea    ecx,[ebp-0x3ffdfc20]
c00064e1:	83 bd e0 03 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdfc20],0x0
c00064e8:	74 50                	je     c000653a <iso_seek+0x7f>
c00064ea:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00064f1:	75 47                	jne    c000653a <iso_seek+0x7f>
c00064f3:	83 fb 01             	cmp    ebx,0x1
c00064f6:	74 0e                	je     c0006506 <iso_seek+0x4b>
c00064f8:	83 fb 02             	cmp    ebx,0x2
c00064fb:	74 0e                	je     c000650b <iso_seek+0x50>
c00064fd:	85 db                	test   ebx,ebx
c00064ff:	75 39                	jne    c000653a <iso_seek+0x7f>
c0006501:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006504:	eb 0d                	jmp    c0006513 <iso_seek+0x58>
c0006506:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006509:	eb 08                	jmp    c0006513 <iso_seek+0x58>
c000650b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000650e:	01 f8                	add    eax,edi
c0006510:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006513:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006519:	8b 88 ec 03 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdfc14]
c000651f:	05 e0 03 02 c0       	add    eax,0xc00203e0
c0006524:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006527:	76 03                	jbe    c000652c <iso_seek+0x71>
c0006529:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000652c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006532:	8b 82 e8 03 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdfc18]
c0006538:	31 d2                	xor    edx,edx
c000653a:	5b                   	pop    ebx
c000653b:	5e                   	pop    esi
c000653c:	5f                   	pop    edi
c000653d:	5d                   	pop    ebp
c000653e:	c3                   	ret    

c000653f <iso_tell>:
c000653f:	83 c8 ff             	or     eax,0xffffffff
c0006542:	53                   	push   ebx
c0006543:	89 c2                	mov    edx,eax
c0006545:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006549:	83 f9 0f             	cmp    ecx,0xf
c000654c:	7f 20                	jg     c000656e <iso_tell+0x2f>
c000654e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006554:	83 bb e0 03 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdfc20],0x0
c000655b:	74 11                	je     c000656e <iso_tell+0x2f>
c000655d:	83 bb 70 04 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdfb90],0x0
c0006564:	75 08                	jne    c000656e <iso_tell+0x2f>
c0006566:	8b 83 e8 03 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdfc18]
c000656c:	31 d2                	xor    edx,edx
c000656e:	5b                   	pop    ebx
c000656f:	c3                   	ret    

c0006570 <iso_total>:
c0006570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006574:	83 c8 ff             	or     eax,0xffffffff
c0006577:	83 fa 0f             	cmp    edx,0xf
c000657a:	7f 1e                	jg     c000659a <iso_total+0x2a>
c000657c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006582:	83 ba e0 03 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdfc20],0x0
c0006589:	74 0f                	je     c000659a <iso_total+0x2a>
c000658b:	83 ba 70 04 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdfb90],0x0
c0006592:	75 06                	jne    c000659a <iso_total+0x2a>
c0006594:	8b 82 ec 03 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdfc14]
c000659a:	c3                   	ret    

c000659b <fn_postprocess>:
c000659b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000659f:	89 d0                	mov    eax,edx
c00065a1:	8a 08                	mov    cl,BYTE PTR [eax]
c00065a3:	80 f9 3b             	cmp    cl,0x3b
c00065a6:	74 07                	je     c00065af <fn_postprocess+0x14>
c00065a8:	84 c9                	test   cl,cl
c00065aa:	74 03                	je     c00065af <fn_postprocess+0x14>
c00065ac:	40                   	inc    eax
c00065ad:	eb f2                	jmp    c00065a1 <fn_postprocess+0x6>
c00065af:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00065b2:	39 d0                	cmp    eax,edx
c00065b4:	76 0a                	jbe    c00065c0 <fn_postprocess+0x25>
c00065b6:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00065ba:	75 04                	jne    c00065c0 <fn_postprocess+0x25>
c00065bc:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00065c0:	c3                   	ret    

c00065c1 <iso_readdir>:
c00065c1:	55                   	push   ebp
c00065c2:	57                   	push   edi
c00065c3:	56                   	push   esi
c00065c4:	53                   	push   ebx
c00065c5:	83 ec 1c             	sub    esp,0x1c
c00065c8:	83 7c 24 30 0f       	cmp    DWORD PTR [esp+0x30],0xf
c00065cd:	7e 07                	jle    c00065d6 <iso_readdir+0x15>
c00065cf:	31 c0                	xor    eax,eax
c00065d1:	e9 d4 01 00 00       	jmp    c00067aa <iso_readdir+0x1e9>
c00065d6:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00065de:	8d b0 e0 03 02 c0    	lea    esi,[eax-0x3ffdfc20]
c00065e4:	83 b8 e0 03 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdfc20],0x0
c00065eb:	74 e2                	je     c00065cf <iso_readdir+0xe>
c00065ed:	83 7e 04 00          	cmp    DWORD PTR [esi+0x4],0x0
c00065f1:	74 dc                	je     c00065cf <iso_readdir+0xe>
c00065f3:	83 be 90 00 00 00 00 	cmp    DWORD PTR [esi+0x90],0x0
c00065fa:	75 d3                	jne    c00065cf <iso_readdir+0xe>
c00065fc:	31 db                	xor    ebx,ebx
c00065fe:	83 c8 ff             	or     eax,0xffffffff
c0006601:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0006604:	3b 56 0c             	cmp    edx,DWORD PTR [esi+0xc]
c0006607:	73 3c                	jae    c0006645 <iso_readdir+0x84>
c0006609:	c1 ea 0b             	shr    edx,0xb
c000660c:	8b 06                	mov    eax,DWORD PTR [esi]
c000660e:	01 d0                	add    eax,edx
c0006610:	e8 d7 f9 ff ff       	call   c0005fec <biread>
c0006615:	85 c0                	test   eax,eax
c0006617:	78 b6                	js     c00065cf <iso_readdir+0xe>
c0006619:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000661c:	8b 1c 85 20 ff 01 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffe00e0]
c0006623:	89 d1                	mov    ecx,edx
c0006625:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c000662b:	8d 5c 0b 04          	lea    ebx,[ebx+ecx*1+0x4]
c000662f:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c0006632:	75 11                	jne    c0006645 <iso_readdir+0x84>
c0006634:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c000663a:	81 c2 00 08 00 00    	add    edx,0x800
c0006640:	89 56 08             	mov    DWORD PTR [esi+0x8],edx
c0006643:	eb bc                	jmp    c0006601 <iso_readdir+0x40>
c0006645:	69 54 24 30 94 00 00 00 	imul   edx,DWORD PTR [esp+0x30],0x94
c000664d:	8b b2 e8 03 02 c0    	mov    esi,DWORD PTR [edx-0x3ffdfc18]
c0006653:	81 c2 e0 03 02 c0    	add    edx,0xc00203e0
c0006659:	3b 72 0c             	cmp    esi,DWORD PTR [edx+0xc]
c000665c:	0f 83 6d ff ff ff    	jae    c00065cf <iso_readdir+0xe>
c0006662:	80 7b 21 00          	cmp    BYTE PTR [ebx+0x21],0x0
c0006666:	75 38                	jne    c00066a0 <iso_readdir+0xdf>
c0006668:	80 7b 20 01          	cmp    BYTE PTR [ebx+0x20],0x1
c000666c:	75 32                	jne    c00066a0 <iso_readdir+0xdf>
c000666e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0006671:	8b 1c 85 20 ff 01 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffe00e0]
c0006678:	01 f1                	add    ecx,esi
c000667a:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c000667d:	89 c8                	mov    eax,ecx
c000667f:	25 ff 07 00 00       	and    eax,0x7ff
c0006684:	0f b6 44 03 04       	movzx  eax,BYTE PTR [ebx+eax*1+0x4]
c0006689:	01 c8                	add    eax,ecx
c000668b:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000668e:	25 ff 07 00 00       	and    eax,0x7ff
c0006693:	8d 5c 03 04          	lea    ebx,[ebx+eax*1+0x4]
c0006697:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c000669a:	0f 84 2f ff ff ff    	je     c00065cf <iso_readdir+0xe>
c00066a0:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00066a8:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00066ac:	8d 53 21             	lea    edx,[ebx+0x21]
c00066af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00066b3:	8d a8 f8 03 02 c0    	lea    ebp,[eax-0x3ffdfc08]
c00066b9:	83 3d 54 0d 02 c0 00 	cmp    DWORD PTR ds:0xc0020d54,0x0
c00066c0:	74 0c                	je     c00066ce <iso_readdir+0x10d>
c00066c2:	89 e8                	mov    eax,ebp
c00066c4:	e8 9d f6 ff ff       	call   c0005d66 <ucs2utfn>
c00066c9:	e9 9e 00 00 00       	jmp    c000676c <iso_readdir+0x1ab>
c00066ce:	56                   	push   esi
c00066cf:	51                   	push   ecx
c00066d0:	52                   	push   edx
c00066d1:	55                   	push   ebp
c00066d2:	e8 59 9f ff ff       	call   c0000630 <strncpy>
c00066d7:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066db:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066df:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00066e2:	c6 84 07 f8 03 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffdfc08],0x0
c00066ea:	e8 ac fe ff ff       	call   c000659b <fn_postprocess>
c00066ef:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066f3:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00066f6:	83 c4 10             	add    esp,0x10
c00066f9:	29 c6                	sub    esi,eax
c00066fb:	8d 7c 03 21          	lea    edi,[ebx+eax*1+0x21]
c00066ff:	f6 43 20 01          	test   BYTE PTR [ebx+0x20],0x1
c0006703:	74 05                	je     c000670a <iso_readdir+0x149>
c0006705:	83 ee 21             	sub    esi,0x21
c0006708:	eb 04                	jmp    c000670e <iso_readdir+0x14d>
c000670a:	47                   	inc    edi
c000670b:	83 ee 22             	sub    esi,0x22
c000670e:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c0006716:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000671a:	83 fe 03             	cmp    esi,0x3
c000671d:	7e 4d                	jle    c000676c <iso_readdir+0x1ab>
c000671f:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006722:	48                   	dec    eax
c0006723:	3c 01                	cmp    al,0x1
c0006725:	77 45                	ja     c000676c <iso_readdir+0x1ab>
c0006727:	52                   	push   edx
c0006728:	6a 02                	push   0x2
c000672a:	68 80 d5 01 c0       	push   0xc001d580
c000672f:	57                   	push   edi
c0006730:	e8 2b a0 ff ff       	call   c0000760 <strncmp>
c0006735:	83 c4 10             	add    esp,0x10
c0006738:	85 c0                	test   eax,eax
c000673a:	75 26                	jne    c0006762 <iso_readdir+0x1a1>
c000673c:	50                   	push   eax
c000673d:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006741:	83 e8 05             	sub    eax,0x5
c0006744:	50                   	push   eax
c0006745:	8d 47 05             	lea    eax,[edi+0x5]
c0006748:	50                   	push   eax
c0006749:	55                   	push   ebp
c000674a:	e8 e1 9e ff ff       	call   c0000630 <strncpy>
c000674f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006753:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006757:	83 c4 10             	add    esp,0x10
c000675a:	c6 84 08 f3 03 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdfc0d],0x0
c0006762:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006766:	29 c6                	sub    esi,eax
c0006768:	01 c7                	add    edi,eax
c000676a:	eb ae                	jmp    c000671a <iso_readdir+0x159>
c000676c:	83 c8 ff             	or     eax,0xffffffff
c000676f:	f6 43 19 02          	test   BYTE PTR [ebx+0x19],0x2
c0006773:	89 c2                	mov    edx,eax
c0006775:	75 0a                	jne    c0006781 <iso_readdir+0x1c0>
c0006777:	8d 43 0a             	lea    eax,[ebx+0xa]
c000677a:	e8 94 f6 ff ff       	call   c0005e13 <iso_733>
c000677f:	31 d2                	xor    edx,edx
c0006781:	69 4c 24 30 94 00 00 00 	imul   ecx,DWORD PTR [esp+0x30],0x94
c0006789:	89 81 f0 03 02 c0    	mov    DWORD PTR [ecx-0x3ffdfc10],eax
c000678f:	89 91 f4 03 02 c0    	mov    DWORD PTR [ecx-0x3ffdfc0c],edx
c0006795:	81 c1 e0 03 02 c0    	add    ecx,0xc00203e0
c000679b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000679e:	01 41 08             	add    DWORD PTR [ecx+0x8],eax
c00067a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a5:	05 f0 03 02 c0       	add    eax,0xc00203f0
c00067aa:	83 c4 1c             	add    esp,0x1c
c00067ad:	5b                   	pop    ebx
c00067ae:	5e                   	pop    esi
c00067af:	5f                   	pop    edi
c00067b0:	5d                   	pop    ebp
c00067b1:	c3                   	ret    

c00067b2 <iso_reset>:
c00067b2:	e8 9f f6 ff ff       	call   c0005e56 <iso_break_all>
c00067b7:	e8 98 f6 ff ff       	call   c0005e54 <bclear>
c00067bc:	31 c0                	xor    eax,eax
c00067be:	c3                   	ret    

c00067bf <init_percd>:
c00067bf:	57                   	push   edi
c00067c0:	56                   	push   esi
c00067c1:	53                   	push   ebx
c00067c2:	bb 01 00 00 00       	mov    ebx,0x1
c00067c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00067cb:	a2 00 ff 01 c0       	mov    ds:0xc001ff00,al
c00067d0:	e8 dd ff ff ff       	call   c00067b2 <iso_reset>
c00067d5:	c7 05 54 0d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020d54,0x0
c00067df:	a1 4c 0d 02 c0       	mov    eax,ds:0xc0020d4c
c00067e4:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c00067e8:	e8 ff f7 ff ff       	call   c0005fec <biread>
c00067ed:	89 c6                	mov    esi,eax
c00067ef:	85 c0                	test   eax,eax
c00067f1:	0f 88 ba 00 00 00    	js     c00068b1 <init_percd+0xf2>
c00067f7:	8b 04 85 20 ff 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe00e0]
c00067fe:	83 c0 04             	add    eax,0x4
c0006801:	52                   	push   edx
c0006802:	6a 06                	push   0x6
c0006804:	68 83 d5 01 c0       	push   0xc001d583
c0006809:	50                   	push   eax
c000680a:	e8 81 9b ff ff       	call   c0000390 <memcmp>
c000680f:	83 c4 10             	add    esp,0x10
c0006812:	85 c0                	test   eax,eax
c0006814:	74 08                	je     c000681e <init_percd+0x5f>
c0006816:	43                   	inc    ebx
c0006817:	83 fb 04             	cmp    ebx,0x4
c000681a:	75 c3                	jne    c00067df <init_percd+0x20>
c000681c:	eb 1a                	jmp    c0006838 <init_percd+0x79>
c000681e:	8b 04 b5 20 ff 01 c0 	mov    eax,DWORD PTR [esi*4-0x3ffe00e0]
c0006825:	83 c0 5c             	add    eax,0x5c
c0006828:	e8 b7 f5 ff ff       	call   c0005de4 <isjoliet>
c000682d:	a3 54 0d 02 c0       	mov    ds:0xc0020d54,eax
c0006832:	85 c0                	test   eax,eax
c0006834:	74 e0                	je     c0006816 <init_percd+0x57>
c0006836:	eb 3e                	jmp    c0006876 <init_percd+0xb7>
c0006838:	83 3d 54 0d 02 c0 00 	cmp    DWORD PTR ds:0xc0020d54,0x0
c000683f:	75 35                	jne    c0006876 <init_percd+0xb7>
c0006841:	a1 4c 0d 02 c0       	mov    eax,ds:0xc0020d4c
c0006846:	83 c0 10             	add    eax,0x10
c0006849:	e8 9e f7 ff ff       	call   c0005fec <biread>
c000684e:	89 c6                	mov    esi,eax
c0006850:	85 c0                	test   eax,eax
c0006852:	78 5f                	js     c00068b3 <init_percd+0xf4>
c0006854:	83 cb ff             	or     ebx,0xffffffff
c0006857:	50                   	push   eax
c0006858:	8b 04 b5 20 ff 01 c0 	mov    eax,DWORD PTR [esi*4-0x3ffe00e0]
c000685f:	6a 06                	push   0x6
c0006861:	83 c0 04             	add    eax,0x4
c0006864:	68 8a d5 01 c0       	push   0xc001d58a
c0006869:	50                   	push   eax
c000686a:	e8 21 9b ff ff       	call   c0000390 <memcmp>
c000686f:	83 c4 10             	add    esp,0x10
c0006872:	85 c0                	test   eax,eax
c0006874:	75 3d                	jne    c00068b3 <init_percd+0xf4>
c0006876:	8b 34 b5 20 ff 01 c0 	mov    esi,DWORD PTR [esi*4-0x3ffe00e0]
c000687d:	bf 20 0d 02 c0       	mov    edi,0xc0020d20
c0006882:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006888:	b9 22 00 00 00       	mov    ecx,0x22
c000688d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000688f:	b8 22 0d 02 c0       	mov    eax,0xc0020d22
c0006894:	31 db                	xor    ebx,ebx
c0006896:	e8 78 f5 ff ff       	call   c0005e13 <iso_733>
c000689b:	a3 48 0d 02 c0       	mov    ds:0xc0020d48,eax
c00068a0:	b8 2a 0d 02 c0       	mov    eax,0xc0020d2a
c00068a5:	e8 69 f5 ff ff       	call   c0005e13 <iso_733>
c00068aa:	a3 44 0d 02 c0       	mov    ds:0xc0020d44,eax
c00068af:	eb 02                	jmp    c00068b3 <init_percd+0xf4>
c00068b1:	89 c3                	mov    ebx,eax
c00068b3:	89 d8                	mov    eax,ebx
c00068b5:	5b                   	pop    ebx
c00068b6:	5e                   	pop    esi
c00068b7:	5f                   	pop    edi
c00068b8:	c3                   	ret    

c00068b9 <iso_ioctl>:
c00068b9:	e8 f4 fe ff ff       	call   c00067b2 <iso_reset>
c00068be:	31 c0                	xor    eax,eax
c00068c0:	c3                   	ret    

c00068c1 <fs_iso9660_init>:
c00068c1:	53                   	push   ebx
c00068c2:	31 db                	xor    ebx,ebx
c00068c4:	83 ec 0c             	sub    esp,0xc
c00068c7:	68 40 09 00 00       	push   0x940
c00068cc:	6a 00                	push   0x0
c00068ce:	68 e0 03 02 c0       	push   0xc00203e0
c00068d3:	e8 f8 9b ff ff       	call   c00004d0 <memset>
c00068d8:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068df:	c7 05 e0 03 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc00203e0,0xffffffff
c00068e9:	e8 cb 0e 00 00       	call   c00077b9 <malloc>
c00068ee:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068f5:	a3 50 0d 02 c0       	mov    ds:0xc0020d50,eax
c00068fa:	e8 ba 0e 00 00       	call   c00077b9 <malloc>
c00068ff:	83 c4 10             	add    esp,0x10
c0006902:	a3 c0 03 02 c0       	mov    ds:0xc00203c0,eax
c0006907:	83 ec 0c             	sub    esp,0xc
c000690a:	68 04 08 00 00       	push   0x804
c000690f:	e8 a5 0e 00 00       	call   c00077b9 <malloc>
c0006914:	89 04 9d 20 ff 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe00e0],eax
c000691b:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006921:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006928:	e8 8c 0e 00 00       	call   c00077b9 <malloc>
c000692d:	83 c4 10             	add    esp,0x10
c0006930:	89 04 9d c0 fe 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe0140],eax
c0006937:	43                   	inc    ebx
c0006938:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c000693e:	83 fb 10             	cmp    ebx,0x10
c0006941:	75 c4                	jne    c0006907 <fs_iso9660_init+0x46>
c0006943:	31 c0                	xor    eax,eax
c0006945:	83 c4 08             	add    esp,0x8
c0006948:	5b                   	pop    ebx
c0006949:	c3                   	ret    

c000694a <fs_iso9660_shutdown>:
c000694a:	53                   	push   ebx
c000694b:	31 db                	xor    ebx,ebx
c000694d:	83 ec 08             	sub    esp,0x8
c0006950:	83 ec 0c             	sub    esp,0xc
c0006953:	ff 34 9d 20 ff 01 c0 	push   DWORD PTR [ebx*4-0x3ffe00e0]
c000695a:	e8 8a 0e 00 00       	call   c00077e9 <free>
c000695f:	58                   	pop    eax
c0006960:	ff 34 9d c0 fe 01 c0 	push   DWORD PTR [ebx*4-0x3ffe0140]
c0006967:	43                   	inc    ebx
c0006968:	e8 7c 0e 00 00       	call   c00077e9 <free>
c000696d:	83 c4 10             	add    esp,0x10
c0006970:	83 fb 10             	cmp    ebx,0x10
c0006973:	75 db                	jne    c0006950 <fs_iso9660_shutdown+0x6>
c0006975:	a1 50 0d 02 c0       	mov    eax,ds:0xc0020d50
c000697a:	85 c0                	test   eax,eax
c000697c:	74 0c                	je     c000698a <fs_iso9660_shutdown+0x40>
c000697e:	83 ec 0c             	sub    esp,0xc
c0006981:	50                   	push   eax
c0006982:	e8 62 0e 00 00       	call   c00077e9 <free>
c0006987:	83 c4 10             	add    esp,0x10
c000698a:	a1 c0 03 02 c0       	mov    eax,ds:0xc00203c0
c000698f:	85 c0                	test   eax,eax
c0006991:	74 0c                	je     c000699f <fs_iso9660_shutdown+0x55>
c0006993:	83 ec 0c             	sub    esp,0xc
c0006996:	50                   	push   eax
c0006997:	e8 4d 0e 00 00       	call   c00077e9 <free>
c000699c:	83 c4 10             	add    esp,0x10
c000699f:	c7 05 c0 03 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00203c0,0x0
c00069a9:	c7 05 50 0d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020d50,0x0
c00069b3:	31 c0                	xor    eax,eax
c00069b5:	83 c4 08             	add    esp,0x8
c00069b8:	5b                   	pop    ebx
c00069b9:	c3                   	ret    

c00069ba <Computer::close(int, int, void*)>:
c00069ba:	57                   	push   edi
c00069bb:	56                   	push   esi
c00069bc:	53                   	push   ebx
c00069bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00069c1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00069c5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00069c9:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069cf:	83 ec 0c             	sub    esp,0xc
c00069d2:	50                   	push   eax
c00069d3:	e8 7e 50 00 00       	call   c000ba56 <Device::closeAll()>
c00069d8:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069de:	83 c4 10             	add    esp,0x10
c00069e1:	8b 10                	mov    edx,DWORD PTR [eax]
c00069e3:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c00069e7:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c00069ef:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00069f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00069f7:	5b                   	pop    ebx
c00069f8:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00069fb:	5e                   	pop    esi
c00069fc:	5f                   	pop    edi
c00069fd:	ff e0                	jmp    eax

c00069ff <Krnl::firstTask()>:
c00069ff:	53                   	push   ebx
c0006a00:	83 ec 14             	sub    esp,0x14
c0006a03:	fb                   	sti    
c0006a04:	68 91 d5 01 c0       	push   0xc001d591
c0006a09:	e8 dd 90 00 00       	call   c000faeb <KeSetBootMessage(char const*)>
c0006a0e:	c7 04 24 e8 07 00 00 	mov    DWORD PTR [esp],0x7e8
c0006a15:	e8 9f 0d 00 00       	call   c00077b9 <malloc>
c0006a1a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006a21:	89 c3                	mov    ebx,eax
c0006a23:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c0006a28:	50                   	push   eax
c0006a29:	68 aa d5 01 c0       	push   0xc001d5aa
c0006a2e:	6a 01                	push   0x1
c0006a30:	53                   	push   ebx
c0006a31:	e8 fe c9 00 00       	call   c0013434 <Process::Process(bool, char const*, Process*, char**)>
c0006a36:	83 c4 20             	add    esp,0x20
c0006a39:	68 ff 00 00 00       	push   0xff
c0006a3e:	6a 00                	push   0x0
c0006a40:	68 0f 72 00 c0       	push   0xc000720f
c0006a45:	53                   	push   ebx
c0006a46:	e8 b1 cc 00 00       	call   c00136fc <Process::createThread(void (*)(void*), void*, int)>
c0006a4b:	8b 15 30 40 02 c0    	mov    edx,DWORD PTR ds:0xc0024030
c0006a51:	6a 7a                	push   0x7a
c0006a53:	6a 00                	push   0x0
c0006a55:	68 50 41 01 c0       	push   0xc0014150
c0006a5a:	52                   	push   edx
c0006a5b:	e8 9c cc 00 00       	call   c00136fc <Process::createThread(void (*)(void*), void*, int)>
c0006a60:	83 c4 14             	add    esp,0x14
c0006a63:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c0006a68:	68 a8 d6 01 c0       	push   0xc001d6a8
c0006a6d:	c6 05 5d 0d 02 c0 01 	mov    BYTE PTR ds:0xc0020d5d,0x1
c0006a74:	e8 72 90 00 00       	call   c000faeb <KeSetBootMessage(char const*)>
c0006a79:	e8 b1 da 00 00       	call   c001452f <Vm::initialise8086()>
c0006a7e:	e8 17 3e 00 00       	call   c000a89a <Fs::initVFS()>
c0006a83:	c7 04 24 b7 d5 01 c0 	mov    DWORD PTR [esp],0xc001d5b7
c0006a8a:	e8 5c 90 00 00       	call   c000faeb <KeSetBootMessage(char const*)>
c0006a8f:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c0006a94:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006a9a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006a9c:	6a 00                	push   0x0
c0006a9e:	6a 00                	push   0x0
c0006aa0:	6a 00                	push   0x0
c0006aa2:	50                   	push   eax
c0006aa3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006aa6:	83 c4 14             	add    esp,0x14
c0006aa9:	68 a8 d6 01 c0       	push   0xc001d6a8
c0006aae:	e8 38 90 00 00       	call   c000faeb <KeSetBootMessage(char const*)>
c0006ab3:	e8 0e 95 00 00       	call   c000ffc6 <Krnl::loadSystemEnv()>
c0006ab8:	e8 6b 97 00 00       	call   c0010228 <Krnl::setupPowerManager()>
c0006abd:	83 c4 0c             	add    esp,0xc
c0006ac0:	6a 3a                	push   0x3a
c0006ac2:	68 d1 d5 01 c0       	push   0xc001d5d1
c0006ac7:	68 da d5 01 c0       	push   0xc001d5da
c0006acc:	e8 51 ae 00 00       	call   c0011922 <Reg::readIntWithDefault(char*, char*, int)>
c0006ad1:	89 04 24             	mov    DWORD PTR [esp],eax
c0006ad4:	e8 cf 48 00 00       	call   c000b3a8 <User::loadClockSettings(int)>
c0006ad9:	c7 04 24 cc d6 01 c0 	mov    DWORD PTR [esp],0xc001d6cc
c0006ae0:	e8 06 90 00 00       	call   c000faeb <KeSetBootMessage(char const*)>
c0006ae5:	59                   	pop    ecx
c0006ae6:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c0006aeb:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006af1:	53                   	push   ebx
c0006af2:	e8 5d 4f 00 00       	call   c000ba54 <Device::loadDriversForAll()>
c0006af7:	c7 04 24 e2 d5 01 c0 	mov    DWORD PTR [esp],0xc001d5e2
c0006afe:	e8 e8 8f 00 00       	call   c000faeb <KeSetBootMessage(char const*)>
c0006b03:	58                   	pop    eax
c0006b04:	8b 1d 58 0d 02 c0    	mov    ebx,DWORD PTR ds:0xc0020d58
c0006b0a:	5a                   	pop    edx
c0006b0b:	6a 01                	push   0x1
c0006b0d:	68 f3 d5 01 c0       	push   0xc001d5f3
c0006b12:	e8 92 c2 00 00       	call   c0012da9 <Thr::loadDLL(char const*, bool)>
c0006b17:	59                   	pop    ecx
c0006b18:	5a                   	pop    edx
c0006b19:	53                   	push   ebx
c0006b1a:	50                   	push   eax
c0006b1b:	e8 ba c4 00 00       	call   c0012fda <Thr::executeDLL(unsigned long, void*)>
c0006b20:	83 c4 10             	add    esp,0x10
c0006b23:	83 ec 0c             	sub    esp,0xc
c0006b26:	6a 02                	push   0x2
c0006b28:	e8 eb cf 00 00       	call   c0013b18 <blockTask(TaskState)>
c0006b2d:	83 c4 10             	add    esp,0x10
c0006b30:	eb f1                	jmp    c0006b23 <Krnl::firstTask()+0x124>

c0006b32 <Computer::Computer()>:
c0006b32:	83 ec 0c             	sub    esp,0xc
c0006b35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b39:	83 ec 08             	sub    esp,0x8
c0006b3c:	68 0f d6 01 c0       	push   0xc001d60f
c0006b41:	50                   	push   eax
c0006b42:	e8 89 4f 00 00       	call   c000bad0 <Device::Device(char const*)>
c0006b47:	83 c4 10             	add    esp,0x10
c0006b4a:	ba 18 d7 01 c0       	mov    edx,0xc001d718
c0006b4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b53:	89 10                	mov    DWORD PTR [eax],edx
c0006b55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b59:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006b63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b67:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006b71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b75:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006b7b:	83 ca 04             	or     edx,0x4
c0006b7e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b88:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006b8e:	31 d2                	xor    edx,edx
c0006b90:	88 c2                	mov    dl,al
c0006b92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b96:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006ba7:	31 d2                	xor    edx,edx
c0006ba9:	88 c2                	mov    dl,al
c0006bab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006baf:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006bb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006bbe:	8d 50 01             	lea    edx,[eax+0x1]
c0006bc1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006bc5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0006bcb:	31 d2                	xor    edx,edx
c0006bcd:	88 c2                	mov    dl,al
c0006bcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bd3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006bd7:	83 e1 3f             	and    ecx,0x3f
c0006bda:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006bde:	90                   	nop
c0006bdf:	83 c4 0c             	add    esp,0xc
c0006be2:	c3                   	ret    
c0006be3:	90                   	nop

c0006be4 <Computer::setBootMessage(char const*)>:
c0006be4:	c3                   	ret    
c0006be5:	90                   	nop

c0006be6 <Computer::detectFeatures()>:
c0006be6:	55                   	push   ebp
c0006be7:	57                   	push   edi
c0006be8:	56                   	push   esi
c0006be9:	53                   	push   ebx
c0006bea:	83 ec 1c             	sub    esp,0x1c
c0006bed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006bf1:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0006bfb:	e8 f9 95 ff ff       	call   c00001f9 <detectCPUID>
c0006c00:	85 c0                	test   eax,eax
c0006c02:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c08:	0f 95 c2             	setne  dl
c0006c0b:	83 e0 fd             	and    eax,0xfffffffd
c0006c0e:	01 d2                	add    edx,edx
c0006c10:	09 d0                	or     eax,edx
c0006c12:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c18:	a8 02                	test   al,0x2
c0006c1a:	75 46                	jne    c0006c62 <Computer::detectFeatures()+0x7c>
c0006c1c:	f6 05 71 0d 02 c0 04 	test   BYTE PTR ds:0xc0020d71,0x4
c0006c23:	74 07                	je     c0006c2c <Computer::detectFeatures()+0x46>
c0006c25:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0006c2c:	e8 b5 52 01 00       	call   c001bee6 <x87Detect>
c0006c31:	83 e0 01             	and    eax,0x1
c0006c34:	c1 e0 04             	shl    eax,0x4
c0006c37:	88 c2                	mov    dl,al
c0006c39:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c3f:	83 e0 ef             	and    eax,0xffffffef
c0006c42:	09 d0                	or     eax,edx
c0006c44:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c4a:	a8 10                	test   al,0x10
c0006c4c:	0f 85 2a 01 00 00    	jne    c0006d7c <Computer::detectFeatures()+0x196>
c0006c52:	84 c0                	test   al,al
c0006c54:	0f 88 45 01 00 00    	js     c0006d9f <Computer::detectFeatures()+0x1b9>
c0006c5a:	83 c4 1c             	add    esp,0x1c
c0006c5d:	5b                   	pop    ebx
c0006c5e:	5e                   	pop    esi
c0006c5f:	5f                   	pop    edi
c0006c60:	5d                   	pop    ebp
c0006c61:	c3                   	ret    
c0006c62:	83 ec 0c             	sub    esp,0xc
c0006c65:	6a 20                	push   0x20
c0006c67:	e8 ac 83 00 00       	call   c000f018 <CPU::cpuidCheckEDX(unsigned int)>
c0006c6c:	83 e0 01             	and    eax,0x1
c0006c6f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006c76:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c7c:	83 e0 f7             	and    eax,0xfffffff7
c0006c7f:	09 d0                	or     eax,edx
c0006c81:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c87:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006c8e:	e8 85 83 00 00       	call   c000f018 <CPU::cpuidCheckEDX(unsigned int)>
c0006c93:	83 e0 01             	and    eax,0x1
c0006c96:	88 c2                	mov    dl,al
c0006c98:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006c9e:	83 e0 fe             	and    eax,0xfffffffe
c0006ca1:	09 d0                	or     eax,edx
c0006ca3:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ca9:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006cb0:	e8 63 83 00 00       	call   c000f018 <CPU::cpuidCheckEDX(unsigned int)>
c0006cb5:	c1 e0 07             	shl    eax,0x7
c0006cb8:	88 c2                	mov    dl,al
c0006cba:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006cc0:	83 e0 7f             	and    eax,0x7f
c0006cc3:	09 d0                	or     eax,edx
c0006cc5:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ccb:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006cd2:	e8 41 83 00 00       	call   c000f018 <CPU::cpuidCheckEDX(unsigned int)>
c0006cd7:	83 c4 10             	add    esp,0x10
c0006cda:	83 e0 01             	and    eax,0x1
c0006cdd:	c1 e0 05             	shl    eax,0x5
c0006ce0:	88 c2                	mov    dl,al
c0006ce2:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ce8:	83 e0 df             	and    eax,0xffffffdf
c0006ceb:	09 d0                	or     eax,edx
c0006ced:	f7 05 70 0d 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0020d70,0x401
c0006cf7:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006cfd:	0f 84 c2 00 00 00    	je     c0006dc5 <Computer::detectFeatures()+0x1df>
c0006d03:	83 e0 fe             	and    eax,0xfffffffe
c0006d06:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d0c:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d12:	88 c2                	mov    dl,al
c0006d14:	83 e2 09             	and    edx,0x9
c0006d17:	fe ca                	dec    dl
c0006d19:	75 09                	jne    c0006d24 <Computer::detectFeatures()+0x13e>
c0006d1b:	83 e0 fe             	and    eax,0xfffffffe
c0006d1e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d24:	83 ec 0c             	sub    esp,0xc
c0006d27:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006d2b:	50                   	push   eax
c0006d2c:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006d30:	55                   	push   ebp
c0006d31:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006d35:	57                   	push   edi
c0006d36:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006d3a:	56                   	push   esi
c0006d3b:	68 00 00 00 80       	push   0x80000000
c0006d40:	e8 4f 82 00 00       	call   c000ef94 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d45:	83 c4 20             	add    esp,0x20
c0006d48:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0006d4f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006d53:	0f 86 c3 fe ff ff    	jbe    c0006c1c <Computer::detectFeatures()+0x36>
c0006d59:	83 ec 0c             	sub    esp,0xc
c0006d5c:	50                   	push   eax
c0006d5d:	55                   	push   ebp
c0006d5e:	57                   	push   edi
c0006d5f:	56                   	push   esi
c0006d60:	68 01 00 00 80       	push   0x80000001
c0006d65:	e8 2a 82 00 00       	call   c000ef94 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d6a:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0006d74:	83 c4 20             	add    esp,0x20
c0006d77:	e9 a0 fe ff ff       	jmp    c0006c1c <Computer::detectFeatures()+0x36>
c0006d7c:	e8 1f 51 01 00       	call   c001bea0 <absolutelyNoChanceInHell>
c0006d81:	88 c2                	mov    dl,al
c0006d83:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d89:	c1 e2 07             	shl    edx,0x7
c0006d8c:	83 e0 7f             	and    eax,0x7f
c0006d8f:	09 d0                	or     eax,edx
c0006d91:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d97:	84 c0                	test   al,al
c0006d99:	0f 89 bb fe ff ff    	jns    c0006c5a <Computer::detectFeatures()+0x74>
c0006d9f:	e8 7c 4e 01 00       	call   c001bc20 <avxDetect>
c0006da4:	83 e0 01             	and    eax,0x1
c0006da7:	c1 e0 05             	shl    eax,0x5
c0006daa:	88 c2                	mov    dl,al
c0006dac:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006db2:	83 e0 df             	and    eax,0xffffffdf
c0006db5:	09 d0                	or     eax,edx
c0006db7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006dbd:	83 c4 1c             	add    esp,0x1c
c0006dc0:	5b                   	pop    ebx
c0006dc1:	5e                   	pop    esi
c0006dc2:	5f                   	pop    edi
c0006dc3:	5d                   	pop    ebp
c0006dc4:	c3                   	ret    
c0006dc5:	83 ec 0c             	sub    esp,0xc
c0006dc8:	68 00 02 00 00       	push   0x200
c0006dcd:	e8 46 82 00 00       	call   c000f018 <CPU::cpuidCheckEDX(unsigned int)>
c0006dd2:	83 c4 10             	add    esp,0x10
c0006dd5:	83 e0 01             	and    eax,0x1
c0006dd8:	88 c2                	mov    dl,al
c0006dda:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006de0:	83 e0 fe             	and    eax,0xfffffffe
c0006de3:	09 d0                	or     eax,edx
c0006de5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006deb:	e9 1c ff ff ff       	jmp    c0006d0c <Computer::detectFeatures()+0x126>

c0006df0 <Computer::displayFeatures()>:
c0006df0:	c3                   	ret    
c0006df1:	90                   	nop

c0006df2 <Computer::rdmsr(unsigned int)>:
c0006df2:	83 ec 0c             	sub    esp,0xc
c0006df5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006df9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e00:	74 0a                	je     c0006e0c <Computer::rdmsr(unsigned int)+0x1a>
c0006e02:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e06:	0f 32                	rdmsr  
c0006e08:	83 c4 0c             	add    esp,0xc
c0006e0b:	c3                   	ret    
c0006e0c:	83 ec 0c             	sub    esp,0xc
c0006e0f:	68 18 d6 01 c0       	push   0xc001d618
c0006e14:	e8 4a 93 00 00       	call   c0010163 <KePanic(char const*)>
c0006e19:	83 c4 10             	add    esp,0x10
c0006e1c:	eb e4                	jmp    c0006e02 <Computer::rdmsr(unsigned int)+0x10>

c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>:
c0006e1e:	57                   	push   edi
c0006e1f:	56                   	push   esi
c0006e20:	52                   	push   edx
c0006e21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e25:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0006e29:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006e2d:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e34:	74 0e                	je     c0006e44 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0006e36:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e3a:	89 f0                	mov    eax,esi
c0006e3c:	89 fa                	mov    edx,edi
c0006e3e:	0f 30                	wrmsr  
c0006e40:	58                   	pop    eax
c0006e41:	5e                   	pop    esi
c0006e42:	5f                   	pop    edi
c0006e43:	c3                   	ret    
c0006e44:	83 ec 0c             	sub    esp,0xc
c0006e47:	68 1e d6 01 c0       	push   0xc001d61e
c0006e4c:	e8 12 93 00 00       	call   c0010163 <KePanic(char const*)>
c0006e51:	83 c4 10             	add    esp,0x10
c0006e54:	eb e0                	jmp    c0006e36 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0006e56 <Computer::shutdown()>:
c0006e56:	83 ec 0c             	sub    esp,0xc
c0006e59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5d:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e5f:	6a 00                	push   0x0
c0006e61:	6a 00                	push   0x0
c0006e63:	6a 00                	push   0x0
c0006e65:	50                   	push   eax
c0006e66:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e69:	83 c4 1c             	add    esp,0x1c
c0006e6c:	c3                   	ret    
c0006e6d:	90                   	nop

c0006e6e <Computer::restart()>:
c0006e6e:	83 ec 0c             	sub    esp,0xc
c0006e71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e75:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e77:	6a 00                	push   0x0
c0006e79:	6a 00                	push   0x0
c0006e7b:	6a 01                	push   0x1
c0006e7d:	50                   	push   eax
c0006e7e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e81:	83 c4 1c             	add    esp,0x1c
c0006e84:	c3                   	ret    
c0006e85:	90                   	nop

c0006e86 <Computer::sleep()>:
c0006e86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e8a:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006e90:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006e94:	e9 f7 7b 00 00       	jmp    c000ea90 <ACPI::sleep()>
c0006e99:	90                   	nop

c0006e9a <Computer::nmiEnabled()>:
c0006e9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e9e:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0006ea4:	c3                   	ret    
c0006ea5:	90                   	nop

c0006ea6 <Computer::readCMOS(unsigned char)>:
c0006ea6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006eaa:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006eb1:	19 c0                	sbb    eax,eax
c0006eb3:	83 e0 80             	and    eax,0xffffff80
c0006eb6:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006eba:	e6 70                	out    0x70,al
c0006ebc:	e4 71                	in     al,0x71
c0006ebe:	c3                   	ret    
c0006ebf:	90                   	nop

c0006ec0 <Computer::enableNMI(bool)>:
c0006ec0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006ec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006ec8:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0006ece:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0006ed6:	eb ce                	jmp    c0006ea6 <Computer::readCMOS(unsigned char)>

c0006ed8 <Computer::open(int, int, void*)>:
c0006ed8:	56                   	push   esi
c0006ed9:	53                   	push   ebx
c0006eda:	83 ec 10             	sub    esp,0x10
c0006edd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006ee1:	f6 05 70 0d 02 c0 04 	test   BYTE PTR ds:0xc0020d70,0x4
c0006ee8:	68 24 d6 01 c0       	push   0xc001d624
c0006eed:	0f 94 05 a0 f9 01 c0 	sete   BYTE PTR ds:0xc001f9a0
c0006ef4:	e8 f2 8b 00 00       	call   c000faeb <KeSetBootMessage(char const*)>
c0006ef9:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0006f00:	e8 b4 08 00 00       	call   c00077b9 <malloc>
c0006f05:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f08:	89 c6                	mov    esi,eax
c0006f0a:	e8 19 77 00 00       	call   c000e628 <ACPI::ACPI()>
c0006f0f:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0006f15:	58                   	pop    eax
c0006f16:	5a                   	pop    edx
c0006f17:	56                   	push   esi
c0006f18:	53                   	push   ebx
c0006f19:	e8 1a 4a 00 00       	call   c000b938 <Device::addChild(Device*)>
c0006f1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006f21:	e8 c0 fc ff ff       	call   c0006be6 <Computer::detectFeatures()>
c0006f26:	59                   	pop    ecx
c0006f27:	5e                   	pop    esi
c0006f28:	6a 01                	push   0x1
c0006f2a:	53                   	push   ebx
c0006f2b:	e8 90 ff ff ff       	call   c0006ec0 <Computer::enableNMI(bool)>
c0006f30:	c7 04 24 3c d6 01 c0 	mov    DWORD PTR [esp],0xc001d63c
c0006f37:	e8 af 8b 00 00       	call   c000faeb <KeSetBootMessage(char const*)>
c0006f3c:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0006f43:	e8 71 08 00 00       	call   c00077b9 <malloc>
c0006f48:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	e8 7e 81 00 00       	call   c000f0d0 <CPU::CPU()>
c0006f52:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0006f58:	58                   	pop    eax
c0006f59:	5a                   	pop    edx
c0006f5a:	56                   	push   esi
c0006f5b:	53                   	push   ebx
c0006f5c:	e8 d7 49 00 00       	call   c000b938 <Device::addChild(Device*)>
c0006f61:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0006f67:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0006f6b:	8b 10                	mov    edx,DWORD PTR [eax]
c0006f6d:	51                   	push   ecx
c0006f6e:	6a 00                	push   0x0
c0006f70:	6a 00                	push   0x0
c0006f72:	50                   	push   eax
c0006f73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006f76:	83 c4 14             	add    esp,0x14
c0006f79:	68 ec d6 01 c0       	push   0xc001d6ec
c0006f7e:	e8 68 8b 00 00       	call   c000faeb <KeSetBootMessage(char const*)>
c0006f83:	e8 de e6 00 00       	call   c0015666 <HalInitialiseCoprocessor()>
c0006f88:	c7 04 24 56 d6 01 c0 	mov    DWORD PTR [esp],0xc001d656
c0006f8f:	e8 57 8b 00 00       	call   c000faeb <KeSetBootMessage(char const*)>
c0006f94:	c7 04 24 ff 69 00 c0 	mov    DWORD PTR [esp],0xc00069ff
c0006f9b:	e8 74 c8 00 00       	call   c0013814 <setupMultitasking(void (*)())>
c0006fa0:	83 c4 14             	add    esp,0x14
c0006fa3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006fa8:	5b                   	pop    ebx
c0006fa9:	5e                   	pop    esi
c0006faa:	c3                   	ret    
c0006fab:	90                   	nop

c0006fac <Computer::disableNMI()>:
c0006fac:	6a 00                	push   0x0
c0006fae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006fb2:	50                   	push   eax
c0006fb3:	e8 08 ff ff ff       	call   c0006ec0 <Computer::enableNMI(bool)>
c0006fb8:	5a                   	pop    edx
c0006fb9:	59                   	pop    ecx
c0006fba:	c3                   	ret    
c0006fbb:	90                   	nop

c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>:
c0006fbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006fc0:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006fc7:	19 c0                	sbb    eax,eax
c0006fc9:	83 e0 80             	and    eax,0xffffff80
c0006fcc:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006fd0:	e6 70                	out    0x70,al
c0006fd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006fd6:	e6 71                	out    0x71,al
c0006fd8:	c3                   	ret    
c0006fd9:	90                   	nop

c0006fda <Computer::handleNMI()>:
c0006fda:	56                   	push   esi
c0006fdb:	53                   	push   ebx
c0006fdc:	83 ec 10             	sub    esp,0x10
c0006fdf:	e4 92                	in     al,0x92
c0006fe1:	89 c6                	mov    esi,eax
c0006fe3:	e4 61                	in     al,0x61
c0006fe5:	68 71 d6 01 c0       	push   0xc001d671
c0006fea:	88 c3                	mov    bl,al
c0006fec:	e8 07 35 00 00       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c0006ff1:	83 c4 10             	add    esp,0x10
c0006ff4:	83 e6 10             	and    esi,0x10
c0006ff7:	75 0d                	jne    c0007006 <Computer::handleNMI()+0x2c>
c0006ff9:	f6 c3 40             	test   bl,0x40
c0006ffc:	75 1d                	jne    c000701b <Computer::handleNMI()+0x41>
c0006ffe:	84 db                	test   bl,bl
c0007000:	78 2d                	js     c000702f <Computer::handleNMI()+0x55>
c0007002:	58                   	pop    eax
c0007003:	5b                   	pop    ebx
c0007004:	5e                   	pop    esi
c0007005:	c3                   	ret    
c0007006:	83 ec 0c             	sub    esp,0xc
c0007009:	68 82 d6 01 c0       	push   0xc001d682
c000700e:	e8 50 91 00 00       	call   c0010163 <KePanic(char const*)>
c0007013:	83 c4 10             	add    esp,0x10
c0007016:	f6 c3 40             	test   bl,0x40
c0007019:	74 e3                	je     c0006ffe <Computer::handleNMI()+0x24>
c000701b:	83 ec 0c             	sub    esp,0xc
c000701e:	68 8f d6 01 c0       	push   0xc001d68f
c0007023:	e8 3b 91 00 00       	call   c0010163 <KePanic(char const*)>
c0007028:	83 c4 10             	add    esp,0x10
c000702b:	84 db                	test   bl,bl
c000702d:	79 d3                	jns    c0007002 <Computer::handleNMI()+0x28>
c000702f:	c7 44 24 10 99 d6 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d699
c0007037:	5a                   	pop    edx
c0007038:	5b                   	pop    ebx
c0007039:	5e                   	pop    esi
c000703a:	e9 24 91 00 00       	jmp    c0010163 <KePanic(char const*)>
c000703f:	90                   	nop

c0007040 <GDTEntry::setBase(unsigned int)>:
c0007040:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007044:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007048:	89 c1                	mov    ecx,eax
c000704a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000704e:	c1 e9 10             	shr    ecx,0x10
c0007051:	c1 e8 18             	shr    eax,0x18
c0007054:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007057:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000705a:	c3                   	ret    
c000705b:	90                   	nop

c000705c <GDTEntry::setLimit(unsigned int)>:
c000705c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007060:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007064:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007067:	66 89 01             	mov    WORD PTR [ecx],ax
c000706a:	83 e2 f0             	and    edx,0xfffffff0
c000706d:	c1 e8 10             	shr    eax,0x10
c0007070:	83 e0 0f             	and    eax,0xf
c0007073:	09 d0                	or     eax,edx
c0007075:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007078:	c3                   	ret    
c0007079:	90                   	nop

c000707a <GDT::GDT()>:
c000707a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000707e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007088:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000708e:	90                   	nop
c000708f:	c3                   	ret    

c0007090 <GDT::addEntry(GDTEntry)>:
c0007090:	53                   	push   ebx
c0007091:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007095:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007099:	8b 02                	mov    eax,DWORD PTR [edx]
c000709b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000709f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00070a3:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00070a7:	8d 48 01             	lea    ecx,[eax+0x1]
c00070aa:	c1 e0 03             	shl    eax,0x3
c00070ad:	89 0a                	mov    DWORD PTR [edx],ecx
c00070af:	5b                   	pop    ebx
c00070b0:	c3                   	ret    
c00070b1:	90                   	nop

c00070b2 <GDT::getNumberOfEntries()>:
c00070b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00070b8:	c3                   	ret    
c00070b9:	90                   	nop

c00070ba <GDT::flush()>:
c00070ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070be:	8b 10                	mov    edx,DWORD PTR [eax]
c00070c0:	83 c0 04             	add    eax,0x4
c00070c3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00070ca:	a3 62 0d 02 c0       	mov    ds:0xc0020d62,eax
c00070cf:	66 89 15 60 0d 02 c0 	mov    WORD PTR ds:0xc0020d60,dx
c00070d6:	e9 82 92 ff ff       	jmp    c000035d <loadGDT>
c00070db:	90                   	nop

c00070dc <GDT::setup()>:
c00070dc:	57                   	push   edi
c00070dd:	56                   	push   esi
c00070de:	53                   	push   ebx
c00070df:	83 ec 30             	sub    esp,0x30
c00070e2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00070e6:	6a 00                	push   0x0
c00070e8:	8d 74 24 14          	lea    esi,[esp+0x14]
c00070ec:	56                   	push   esi
c00070ed:	e8 4e ff ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c00070f2:	6a 00                	push   0x0
c00070f4:	56                   	push   esi
c00070f5:	e8 62 ff ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c00070fa:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007102:	6a 00                	push   0x0
c0007104:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0007108:	56                   	push   esi
c0007109:	e8 32 ff ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c000710e:	68 ff ff ff 00       	push   0xffffff
c0007113:	56                   	push   esi
c0007114:	e8 43 ff ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c0007119:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000711d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007121:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007125:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007129:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000712e:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007133:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007137:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000713b:	89 f8                	mov    eax,edi
c000713d:	89 fa                	mov    edx,edi
c000713f:	80 e4 f7             	and    ah,0xf7
c0007142:	80 ce 60             	or     dh,0x60
c0007145:	89 c7                	mov    edi,eax
c0007147:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000714b:	80 cc 60             	or     ah,0x60
c000714e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007152:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007156:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000715a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000715e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007162:	83 c4 20             	add    esp,0x20
c0007165:	6a 00                	push   0x0
c0007167:	8d 44 24 24          	lea    eax,[esp+0x24]
c000716b:	50                   	push   eax
c000716c:	e8 cf fe ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c0007171:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007175:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007179:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c000717e:	6a 00                	push   0x0
c0007180:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007184:	50                   	push   eax
c0007185:	e8 b6 fe ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c000718a:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c000718f:	83 c4 0c             	add    esp,0xc
c0007192:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007196:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000719a:	53                   	push   ebx
c000719b:	e8 f0 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071a0:	83 c4 0c             	add    esp,0xc
c00071a3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071ab:	53                   	push   ebx
c00071ac:	e8 df fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071b1:	83 c4 0c             	add    esp,0xc
c00071b4:	57                   	push   edi
c00071b5:	56                   	push   esi
c00071b6:	53                   	push   ebx
c00071b7:	e8 d4 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071bc:	83 c4 0c             	add    esp,0xc
c00071bf:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071c3:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071c7:	53                   	push   ebx
c00071c8:	e8 c3 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071cd:	83 c4 0c             	add    esp,0xc
c00071d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071d8:	53                   	push   ebx
c00071d9:	e8 b2 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071de:	83 c4 0c             	add    esp,0xc
c00071e1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071e5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071e9:	53                   	push   ebx
c00071ea:	e8 a1 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071ef:	83 c4 0c             	add    esp,0xc
c00071f2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00071f6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00071fa:	53                   	push   ebx
c00071fb:	e8 90 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c0007200:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007203:	e8 b2 fe ff ff       	call   c00070ba <GDT::flush()>
c0007208:	83 c4 40             	add    esp,0x40
c000720b:	5b                   	pop    ebx
c000720c:	5e                   	pop    esi
c000720d:	5f                   	pop    edi
c000720e:	c3                   	ret    

c000720f <idleFunction(void*)>:
c000720f:	83 ec 0c             	sub    esp,0xc
c0007212:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0007217:	48                   	dec    eax
c0007218:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c000721d:	75 01                	jne    c0007220 <idleFunction(void*)+0x11>
c000721f:	fb                   	sti    
c0007220:	e8 1b e1 00 00       	call   c0015340 <HalSystemIdle()>
c0007225:	e8 78 52 01 00       	call   c001c4a2 <idleCommon()>
c000722a:	eb f4                	jmp    c0007220 <idleFunction(void*)+0x11>

c000722c <IDTEntry::IDTEntry(bool)>:
c000722c:	83 ec 04             	sub    esp,0x4
c000722f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007233:	88 04 24             	mov    BYTE PTR [esp],al
c0007236:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000723a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007240:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007244:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007248:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000724c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000724f:	83 e2 f0             	and    edx,0xfffffff0
c0007252:	83 ca 0e             	or     edx,0xe
c0007255:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007258:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000725c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000725f:	83 e2 ef             	and    edx,0xffffffef
c0007262:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007265:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0007269:	74 05                	je     c0007270 <IDTEntry::IDTEntry(bool)+0x44>
c000726b:	b2 03                	mov    dl,0x3
c000726d:	eb 05                	jmp    c0007274 <IDTEntry::IDTEntry(bool)+0x48>
c000726f:	90                   	nop
c0007270:	b2 00                	mov    dl,0x0
c0007272:	66 90                	xchg   ax,ax
c0007274:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007278:	83 e2 03             	and    edx,0x3
c000727b:	88 d1                	mov    cl,dl
c000727d:	c1 e1 05             	shl    ecx,0x5
c0007280:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007283:	83 e2 9f             	and    edx,0xffffff9f
c0007286:	09 ca                	or     edx,ecx
c0007288:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000728b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000728f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007292:	83 ca 80             	or     edx,0xffffff80
c0007295:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007298:	90                   	nop
c0007299:	83 c4 04             	add    esp,0x4
c000729c:	c3                   	ret    
c000729d:	90                   	nop

c000729e <IDTEntry::setOffset(unsigned int)>:
c000729e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00072a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a6:	66 89 02             	mov    WORD PTR [edx],ax
c00072a9:	c1 e8 10             	shr    eax,0x10
c00072ac:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00072b0:	c3                   	ret    
c00072b1:	90                   	nop
c00072b2:	66 90                	xchg   ax,ax

c00072b4 <IDT::IDT()>:
c00072b4:	90                   	nop
c00072b5:	c3                   	ret    

c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00072b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00072ba:	83 c0 30             	add    eax,0x30
c00072bd:	c3                   	ret    

c00072be <IDT::addEntry(IDTEntry, int)>:
c00072be:	53                   	push   ebx
c00072bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00072c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00072cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00072cf:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00072d2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00072d6:	5b                   	pop    ebx
c00072d7:	c3                   	ret    

c00072d8 <IDT::addEntry(int, void (*)(), bool)>:
c00072d8:	53                   	push   ebx
c00072d9:	83 ec 10             	sub    esp,0x10
c00072dc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00072e1:	50                   	push   eax
c00072e2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00072e6:	53                   	push   ebx
c00072e7:	e8 40 ff ff ff       	call   c000722c <IDTEntry::IDTEntry(bool)>
c00072ec:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00072f0:	53                   	push   ebx
c00072f1:	e8 a8 ff ff ff       	call   c000729e <IDTEntry::setOffset(unsigned int)>
c00072f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00072fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072fe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007302:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007306:	e8 b3 ff ff ff       	call   c00072be <IDT::addEntry(IDTEntry, int)>
c000730b:	83 c4 30             	add    esp,0x30
c000730e:	5b                   	pop    ebx
c000730f:	c3                   	ret    

c0007310 <IDT::flush()>:
c0007310:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007314:	66 c7 05 68 0d 02 c0 ff 07 	mov    WORD PTR ds:0xc0020d68,0x7ff
c000731d:	a3 6a 0d 02 c0       	mov    ds:0xc0020d6a,eax
c0007322:	0f 01 1d 68 0d 02 c0 	lidtd  ds:0xc0020d68
c0007329:	c3                   	ret    

c000732a <IDT::setup()>:
c000732a:	57                   	push   edi
c000732b:	56                   	push   esi
c000732c:	53                   	push   ebx
c000732d:	83 ec 10             	sub    esp,0x10
c0007330:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007334:	6a 00                	push   0x0
c0007336:	68 b0 bc 01 c0       	push   0xc001bcb0
c000733b:	6a 00                	push   0x0
c000733d:	53                   	push   ebx
c000733e:	e8 95 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007343:	6a 00                	push   0x0
c0007345:	68 c0 bc 01 c0       	push   0xc001bcc0
c000734a:	6a 01                	push   0x1
c000734c:	53                   	push   ebx
c000734d:	e8 86 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007352:	83 c4 20             	add    esp,0x20
c0007355:	6a 00                	push   0x0
c0007357:	68 ca bc 01 c0       	push   0xc001bcca
c000735c:	6a 02                	push   0x2
c000735e:	53                   	push   ebx
c000735f:	e8 74 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007364:	6a 00                	push   0x0
c0007366:	68 d4 bc 01 c0       	push   0xc001bcd4
c000736b:	6a 03                	push   0x3
c000736d:	53                   	push   ebx
c000736e:	e8 65 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007373:	83 c4 20             	add    esp,0x20
c0007376:	6a 00                	push   0x0
c0007378:	68 de bc 01 c0       	push   0xc001bcde
c000737d:	6a 04                	push   0x4
c000737f:	53                   	push   ebx
c0007380:	e8 53 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007385:	6a 00                	push   0x0
c0007387:	68 e8 bc 01 c0       	push   0xc001bce8
c000738c:	6a 05                	push   0x5
c000738e:	53                   	push   ebx
c000738f:	e8 44 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007394:	83 c4 20             	add    esp,0x20
c0007397:	6a 00                	push   0x0
c0007399:	68 f2 bc 01 c0       	push   0xc001bcf2
c000739e:	6a 06                	push   0x6
c00073a0:	53                   	push   ebx
c00073a1:	e8 32 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073a6:	6a 00                	push   0x0
c00073a8:	68 fc bc 01 c0       	push   0xc001bcfc
c00073ad:	6a 07                	push   0x7
c00073af:	53                   	push   ebx
c00073b0:	e8 23 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073b5:	83 c4 20             	add    esp,0x20
c00073b8:	6a 00                	push   0x0
c00073ba:	68 06 bd 01 c0       	push   0xc001bd06
c00073bf:	6a 08                	push   0x8
c00073c1:	53                   	push   ebx
c00073c2:	e8 11 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073c7:	6a 00                	push   0x0
c00073c9:	68 0e bd 01 c0       	push   0xc001bd0e
c00073ce:	6a 09                	push   0x9
c00073d0:	53                   	push   ebx
c00073d1:	e8 02 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073d6:	83 c4 20             	add    esp,0x20
c00073d9:	6a 00                	push   0x0
c00073db:	68 18 bd 01 c0       	push   0xc001bd18
c00073e0:	6a 0a                	push   0xa
c00073e2:	53                   	push   ebx
c00073e3:	e8 f0 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073e8:	6a 00                	push   0x0
c00073ea:	68 20 bd 01 c0       	push   0xc001bd20
c00073ef:	6a 0b                	push   0xb
c00073f1:	53                   	push   ebx
c00073f2:	e8 e1 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073f7:	83 c4 20             	add    esp,0x20
c00073fa:	6a 00                	push   0x0
c00073fc:	68 28 bd 01 c0       	push   0xc001bd28
c0007401:	6a 0c                	push   0xc
c0007403:	53                   	push   ebx
c0007404:	e8 cf fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007409:	6a 00                	push   0x0
c000740b:	68 30 bd 01 c0       	push   0xc001bd30
c0007410:	6a 0d                	push   0xd
c0007412:	53                   	push   ebx
c0007413:	e8 c0 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007418:	83 c4 20             	add    esp,0x20
c000741b:	6a 00                	push   0x0
c000741d:	68 38 bd 01 c0       	push   0xc001bd38
c0007422:	6a 0e                	push   0xe
c0007424:	53                   	push   ebx
c0007425:	e8 ae fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000742a:	6a 00                	push   0x0
c000742c:	68 40 bd 01 c0       	push   0xc001bd40
c0007431:	6a 0f                	push   0xf
c0007433:	53                   	push   ebx
c0007434:	e8 9f fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007439:	83 c4 20             	add    esp,0x20
c000743c:	6a 00                	push   0x0
c000743e:	68 4a bd 01 c0       	push   0xc001bd4a
c0007443:	6a 10                	push   0x10
c0007445:	53                   	push   ebx
c0007446:	e8 8d fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000744b:	6a 00                	push   0x0
c000744d:	68 54 bd 01 c0       	push   0xc001bd54
c0007452:	6a 11                	push   0x11
c0007454:	53                   	push   ebx
c0007455:	e8 7e fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000745a:	83 c4 20             	add    esp,0x20
c000745d:	6a 00                	push   0x0
c000745f:	68 5e bd 01 c0       	push   0xc001bd5e
c0007464:	6a 12                	push   0x12
c0007466:	53                   	push   ebx
c0007467:	e8 6c fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000746c:	6a 01                	push   0x1
c000746e:	68 f8 bd 01 c0       	push   0xc001bdf8
c0007473:	6a 60                	push   0x60
c0007475:	53                   	push   ebx
c0007476:	e8 5d fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000747b:	83 c4 20             	add    esp,0x20
c000747e:	6a 00                	push   0x0
c0007480:	68 ff bd 01 c0       	push   0xc001bdff
c0007485:	6a 20                	push   0x20
c0007487:	53                   	push   ebx
c0007488:	e8 4b fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000748d:	6a 00                	push   0x0
c000748f:	68 ea bd 01 c0       	push   0xc001bdea
c0007494:	6a 21                	push   0x21
c0007496:	53                   	push   ebx
c0007497:	e8 3c fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000749c:	83 c4 20             	add    esp,0x20
c000749f:	6a 00                	push   0x0
c00074a1:	68 f1 bd 01 c0       	push   0xc001bdf1
c00074a6:	6a 22                	push   0x22
c00074a8:	53                   	push   ebx
c00074a9:	e8 2a fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074ae:	6a 00                	push   0x0
c00074b0:	68 68 bd 01 c0       	push   0xc001bd68
c00074b5:	6a 23                	push   0x23
c00074b7:	53                   	push   ebx
c00074b8:	e8 1b fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074bd:	83 c4 20             	add    esp,0x20
c00074c0:	6a 00                	push   0x0
c00074c2:	68 72 bd 01 c0       	push   0xc001bd72
c00074c7:	6a 24                	push   0x24
c00074c9:	53                   	push   ebx
c00074ca:	e8 09 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074cf:	6a 00                	push   0x0
c00074d1:	68 7c bd 01 c0       	push   0xc001bd7c
c00074d6:	6a 25                	push   0x25
c00074d8:	53                   	push   ebx
c00074d9:	e8 fa fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074de:	83 c4 20             	add    esp,0x20
c00074e1:	6a 00                	push   0x0
c00074e3:	68 86 bd 01 c0       	push   0xc001bd86
c00074e8:	6a 26                	push   0x26
c00074ea:	53                   	push   ebx
c00074eb:	e8 e8 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074f0:	6a 00                	push   0x0
c00074f2:	68 90 bd 01 c0       	push   0xc001bd90
c00074f7:	6a 27                	push   0x27
c00074f9:	53                   	push   ebx
c00074fa:	e8 d9 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074ff:	83 c4 20             	add    esp,0x20
c0007502:	6a 00                	push   0x0
c0007504:	68 9a bd 01 c0       	push   0xc001bd9a
c0007509:	6a 28                	push   0x28
c000750b:	53                   	push   ebx
c000750c:	e8 c7 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007511:	6a 00                	push   0x0
c0007513:	68 a4 bd 01 c0       	push   0xc001bda4
c0007518:	6a 29                	push   0x29
c000751a:	53                   	push   ebx
c000751b:	e8 b8 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007520:	83 c4 20             	add    esp,0x20
c0007523:	6a 00                	push   0x0
c0007525:	68 ae bd 01 c0       	push   0xc001bdae
c000752a:	6a 2a                	push   0x2a
c000752c:	53                   	push   ebx
c000752d:	e8 a6 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007532:	6a 00                	push   0x0
c0007534:	68 b8 bd 01 c0       	push   0xc001bdb8
c0007539:	6a 2b                	push   0x2b
c000753b:	53                   	push   ebx
c000753c:	e8 97 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007541:	83 c4 20             	add    esp,0x20
c0007544:	6a 00                	push   0x0
c0007546:	68 c2 bd 01 c0       	push   0xc001bdc2
c000754b:	6a 2c                	push   0x2c
c000754d:	53                   	push   ebx
c000754e:	e8 85 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007553:	6a 00                	push   0x0
c0007555:	68 cc bd 01 c0       	push   0xc001bdcc
c000755a:	6a 2d                	push   0x2d
c000755c:	53                   	push   ebx
c000755d:	e8 76 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007562:	83 c4 20             	add    esp,0x20
c0007565:	6a 00                	push   0x0
c0007567:	68 d6 bd 01 c0       	push   0xc001bdd6
c000756c:	6a 2e                	push   0x2e
c000756e:	53                   	push   ebx
c000756f:	e8 64 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007574:	6a 00                	push   0x0
c0007576:	68 e0 bd 01 c0       	push   0xc001bde0
c000757b:	6a 2f                	push   0x2f
c000757d:	53                   	push   ebx
c000757e:	e8 55 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007583:	83 c4 20             	add    esp,0x20
c0007586:	6a 00                	push   0x0
c0007588:	68 36 be 01 c0       	push   0xc001be36
c000758d:	6a 30                	push   0x30
c000758f:	53                   	push   ebx
c0007590:	e8 43 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007595:	6a 00                	push   0x0
c0007597:	68 40 be 01 c0       	push   0xc001be40
c000759c:	6a 31                	push   0x31
c000759e:	53                   	push   ebx
c000759f:	e8 34 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075a4:	83 c4 20             	add    esp,0x20
c00075a7:	6a 00                	push   0x0
c00075a9:	68 4a be 01 c0       	push   0xc001be4a
c00075ae:	6a 32                	push   0x32
c00075b0:	53                   	push   ebx
c00075b1:	e8 22 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075b6:	6a 00                	push   0x0
c00075b8:	68 54 be 01 c0       	push   0xc001be54
c00075bd:	6a 33                	push   0x33
c00075bf:	53                   	push   ebx
c00075c0:	e8 13 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075c5:	83 c4 20             	add    esp,0x20
c00075c8:	6a 00                	push   0x0
c00075ca:	68 5e be 01 c0       	push   0xc001be5e
c00075cf:	6a 34                	push   0x34
c00075d1:	53                   	push   ebx
c00075d2:	e8 01 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075d7:	6a 00                	push   0x0
c00075d9:	68 68 be 01 c0       	push   0xc001be68
c00075de:	6a 35                	push   0x35
c00075e0:	53                   	push   ebx
c00075e1:	e8 f2 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075e6:	83 c4 20             	add    esp,0x20
c00075e9:	6a 00                	push   0x0
c00075eb:	68 72 be 01 c0       	push   0xc001be72
c00075f0:	6a 36                	push   0x36
c00075f2:	53                   	push   ebx
c00075f3:	e8 e0 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075f8:	6a 00                	push   0x0
c00075fa:	68 7c be 01 c0       	push   0xc001be7c
c00075ff:	6a 37                	push   0x37
c0007601:	53                   	push   ebx
c0007602:	e8 d1 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007607:	83 c4 1c             	add    esp,0x1c
c000760a:	6a 03                	push   0x3
c000760c:	6a 02                	push   0x2
c000760e:	ff 35 50 0e 02 c0    	push   DWORD PTR ds:0xc0020e50
c0007614:	e8 25 24 00 00       	call   c0009a3e <VAS::allocatePages(int, int)>
c0007619:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007620:	89 c6                	mov    esi,eax
c0007622:	e8 92 01 00 00       	call   c00077b9 <malloc>
c0007627:	81 c6 00 20 00 00    	add    esi,0x2000
c000762d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007630:	89 c7                	mov    edi,eax
c0007632:	e8 b1 15 00 00       	call   c0008be8 <TSS::TSS()>
c0007637:	83 c4 0c             	add    esp,0xc
c000763a:	68 06 bd 01 c0       	push   0xc001bd06
c000763f:	56                   	push   esi
c0007640:	57                   	push   edi
c0007641:	e8 e6 15 00 00       	call   c0008c2c <TSS::setup(unsigned long, unsigned long)>
c0007646:	89 c6                	mov    esi,eax
c0007648:	58                   	pop    eax
c0007649:	5a                   	pop    edx
c000764a:	6a 00                	push   0x0
c000764c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007650:	50                   	push   eax
c0007651:	e8 d6 fb ff ff       	call   c000722c <IDTEntry::IDTEntry(bool)>
c0007656:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000765a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000765f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007666:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000766c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007670:	80 ce 05             	or     dh,0x5
c0007673:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007676:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000767a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000767e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007681:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007684:	e8 87 fc ff ff       	call   c0007310 <IDT::flush()>
c0007689:	83 c4 20             	add    esp,0x20
c000768c:	5b                   	pop    ebx
c000768d:	5e                   	pop    esi
c000768e:	5f                   	pop    edi
c000768f:	c3                   	ret    

c0007690 <sbrk>:
c0007690:	55                   	push   ebp
c0007691:	57                   	push   edi
c0007692:	56                   	push   esi
c0007693:	53                   	push   ebx
c0007694:	83 ec 1c             	sub    esp,0x1c
c0007697:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000769b:	85 c0                	test   eax,eax
c000769d:	74 5f                	je     c00076fe <sbrk+0x6e>
c000769f:	78 64                	js     c0007705 <sbrk+0x75>
c00076a1:	8b 15 98 f9 01 c0    	mov    edx,DWORD PTR ds:0xc001f998
c00076a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00076ab:	05 ff 0f 00 00       	add    eax,0xfff
c00076b0:	89 c5                	mov    ebp,eax
c00076b2:	78 69                	js     c000771d <sbrk+0x8d>
c00076b4:	c1 fd 0c             	sar    ebp,0xc
c00076b7:	bb 00 00 00 00       	mov    ebx,0x0
c00076bc:	8b 35 50 0e 02 c0    	mov    esi,DWORD PTR ds:0xc0020e50
c00076c2:	8b 3d 98 f9 01 c0    	mov    edi,DWORD PTR ds:0xc001f998
c00076c8:	e8 e8 03 00 00       	call   c0007ab5 <Phys::allocatePage()>
c00076cd:	68 01 04 00 00       	push   0x401
c00076d2:	57                   	push   edi
c00076d3:	50                   	push   eax
c00076d4:	56                   	push   esi
c00076d5:	e8 60 22 00 00       	call   c000993a <VAS::mapPage(unsigned long, unsigned long, int)>
c00076da:	81 05 98 f9 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001f998,0x1000
c00076e4:	43                   	inc    ebx
c00076e5:	83 c4 10             	add    esp,0x10
c00076e8:	39 dd                	cmp    ebp,ebx
c00076ea:	75 d0                	jne    c00076bc <sbrk+0x2c>
c00076ec:	0f 20 d8             	mov    eax,cr3
c00076ef:	0f 22 d8             	mov    cr3,eax
c00076f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00076f6:	83 c4 1c             	add    esp,0x1c
c00076f9:	5b                   	pop    ebx
c00076fa:	5e                   	pop    esi
c00076fb:	5f                   	pop    edi
c00076fc:	5d                   	pop    ebp
c00076fd:	c3                   	ret    
c00076fe:	a1 98 f9 01 c0       	mov    eax,ds:0xc001f998
c0007703:	eb f1                	jmp    c00076f6 <sbrk+0x66>
c0007705:	83 ec 08             	sub    esp,0x8
c0007708:	50                   	push   eax
c0007709:	68 3c d7 01 c0       	push   0xc001d73c
c000770e:	e8 e5 2d 00 00       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c0007713:	83 c4 10             	add    esp,0x10
c0007716:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000771b:	eb d9                	jmp    c00076f6 <sbrk+0x66>
c000771d:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007723:	eb 8f                	jmp    c00076b4 <sbrk+0x24>

c0007725 <mmap>:
c0007725:	83 ec 18             	sub    esp,0x18
c0007728:	68 6c d7 01 c0       	push   0xc001d76c
c000772d:	e8 31 8a 00 00       	call   c0010163 <KePanic(char const*)>
c0007732:	b8 00 00 00 00       	mov    eax,0x0
c0007737:	83 c4 1c             	add    esp,0x1c
c000773a:	c3                   	ret    

c000773b <munmap>:
c000773b:	83 ec 18             	sub    esp,0x18
c000773e:	68 71 d7 01 c0       	push   0xc001d771
c0007743:	e8 1b 8a 00 00       	call   c0010163 <KePanic(char const*)>
c0007748:	b8 00 00 00 00       	mov    eax,0x0
c000774d:	83 c4 1c             	add    esp,0x1c
c0007750:	c3                   	ret    

c0007751 <liballoc_lock()>:
c0007751:	fa                   	cli    
c0007752:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c0007758:	b8 00 00 00 00       	mov    eax,0x0
c000775d:	c3                   	ret    

c000775e <liballoc_unlock()>:
c000775e:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0007763:	48                   	dec    eax
c0007764:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0007769:	75 01                	jne    c000776c <liballoc_unlock()+0xe>
c000776b:	fb                   	sti    
c000776c:	b8 00 00 00 00       	mov    eax,0x0
c0007771:	c3                   	ret    

c0007772 <liballoc_alloc(int)>:
c0007772:	83 ec 10             	sub    esp,0x10
c0007775:	6a 01                	push   0x1
c0007777:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000777b:	ff 35 50 0e 02 c0    	push   DWORD PTR ds:0xc0020e50
c0007781:	e8 b8 22 00 00       	call   c0009a3e <VAS::allocatePages(int, int)>
c0007786:	83 c4 1c             	add    esp,0x1c
c0007789:	c3                   	ret    

c000778a <liballoc_free(void*, int)>:
c000778a:	83 ec 14             	sub    esp,0x14
c000778d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007791:	ff 35 50 0e 02 c0    	push   DWORD PTR ds:0xc0020e50
c0007797:	e8 5e 1f 00 00       	call   c00096fa <VAS::freeAllocatedPages(unsigned long)>
c000779c:	b8 00 00 00 00       	mov    eax,0x0
c00077a1:	83 c4 1c             	add    esp,0x1c
c00077a4:	c3                   	ret    

c00077a5 <realloc>:
c00077a5:	83 ec 14             	sub    esp,0x14
c00077a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077b0:	e8 7c 9d ff ff       	call   c0001531 <dlrealloc>
c00077b5:	83 c4 1c             	add    esp,0x1c
c00077b8:	c3                   	ret    

c00077b9 <malloc>:
c00077b9:	53                   	push   ebx
c00077ba:	83 ec 10             	sub    esp,0x10
c00077bd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00077c1:	53                   	push   ebx
c00077c2:	68 78 d7 01 c0       	push   0xc001d778
c00077c7:	e8 2c 2d 00 00       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c00077cc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00077cf:	e8 20 98 ff ff       	call   c0000ff4 <dlmalloc>
c00077d4:	89 c3                	mov    ebx,eax
c00077d6:	c7 04 24 85 d7 01 c0 	mov    DWORD PTR [esp],0xc001d785
c00077dd:	e8 16 2d 00 00       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c00077e2:	89 d8                	mov    eax,ebx
c00077e4:	83 c4 18             	add    esp,0x18
c00077e7:	5b                   	pop    ebx
c00077e8:	c3                   	ret    

c00077e9 <free>:
c00077e9:	83 ec 18             	sub    esp,0x18
c00077ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077f0:	e8 a4 94 ff ff       	call   c0000c99 <dlfree>
c00077f5:	83 c4 1c             	add    esp,0x1c
c00077f8:	c3                   	ret    

c00077f9 <rfree>:
c00077f9:	83 ec 18             	sub    esp,0x18
c00077fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007800:	e8 94 94 ff ff       	call   c0000c99 <dlfree>
c0007805:	83 c4 1c             	add    esp,0x1c
c0007808:	c3                   	ret    

c0007809 <calloc>:
c0007809:	56                   	push   esi
c000780a:	53                   	push   ebx
c000780b:	83 ec 10             	sub    esp,0x10
c000780e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007812:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007817:	53                   	push   ebx
c0007818:	e8 9c ff ff ff       	call   c00077b9 <malloc>
c000781d:	89 c6                	mov    esi,eax
c000781f:	83 c4 0c             	add    esp,0xc
c0007822:	53                   	push   ebx
c0007823:	6a 00                	push   0x0
c0007825:	50                   	push   eax
c0007826:	e8 a5 8c ff ff       	call   c00004d0 <memset>
c000782b:	89 f0                	mov    eax,esi
c000782d:	83 c4 14             	add    esp,0x14
c0007830:	5b                   	pop    ebx
c0007831:	5e                   	pop    esi
c0007832:	c3                   	ret    

c0007833 <KeEntryPoint>:
c0007833:	57                   	push   edi
c0007834:	bf f9 03 00 00       	mov    edi,0x3f9
c0007839:	56                   	push   esi
c000783a:	89 fa                	mov    edx,edi
c000783c:	53                   	push   ebx
c000783d:	31 f6                	xor    esi,esi
c000783f:	83 ec 2c             	sub    esp,0x2c
c0007842:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007847:	a3 70 0d 02 c0       	mov    ds:0xc0020d70,eax
c000784c:	89 f0                	mov    eax,esi
c000784e:	ee                   	out    dx,al
c000784f:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007854:	b0 80                	mov    al,0x80
c0007856:	89 da                	mov    edx,ebx
c0007858:	ee                   	out    dx,al
c0007859:	b1 03                	mov    cl,0x3
c000785b:	ba f8 03 00 00       	mov    edx,0x3f8
c0007860:	88 c8                	mov    al,cl
c0007862:	ee                   	out    dx,al
c0007863:	89 f0                	mov    eax,esi
c0007865:	89 fa                	mov    edx,edi
c0007867:	ee                   	out    dx,al
c0007868:	88 c8                	mov    al,cl
c000786a:	89 da                	mov    edx,ebx
c000786c:	ee                   	out    dx,al
c000786d:	b0 c7                	mov    al,0xc7
c000786f:	ba fa 03 00 00       	mov    edx,0x3fa
c0007874:	ee                   	out    dx,al
c0007875:	b0 0b                	mov    al,0xb
c0007877:	ba fc 03 00 00       	mov    edx,0x3fc
c000787c:	ee                   	out    dx,al
c000787d:	68 94 d7 01 c0       	push   0xc001d794
c0007882:	e8 71 2c 00 00       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c0007887:	e8 f1 81 00 00       	call   c000fa7d <KeDisplaySplashScreen()>
c000788c:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007891:	05 ff 0f 00 00       	add    eax,0xfff
c0007896:	25 00 f0 ff ff       	and    eax,0xfffff000
c000789b:	89 04 24             	mov    DWORD PTR [esp],eax
c000789e:	e8 64 03 00 00       	call   c0007c07 <Phys::physicalMemorySetup(unsigned int)>
c00078a3:	e8 bc 1b 00 00       	call   c0009464 <Virt::virtualMemorySetup()>
c00078a8:	58                   	pop    eax
c00078a9:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c00078ad:	53                   	push   ebx
c00078ae:	e8 6d 1c 00 00       	call   c0009520 <VAS::VAS()>
c00078b3:	89 1d 50 0e 02 c0    	mov    DWORD PTR ds:0xc0020e50,ebx
c00078b9:	e8 7c 4b 01 00       	call   c001c43a <_init>
c00078be:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c00078c5:	e8 ef fe ff ff       	call   c00077b9 <malloc>
c00078ca:	89 04 24             	mov    DWORD PTR [esp],eax
c00078cd:	89 c6                	mov    esi,eax
c00078cf:	e8 5e f2 ff ff       	call   c0006b32 <Computer::Computer()>
c00078d4:	6a 00                	push   0x0
c00078d6:	89 35 58 0d 02 c0    	mov    DWORD PTR ds:0xc0020d58,esi
c00078dc:	6a 00                	push   0x0
c00078de:	6a 00                	push   0x0
c00078e0:	56                   	push   esi
c00078e1:	e8 f2 f5 ff ff       	call   c0006ed8 <Computer::open(int, int, void*)>
c00078e6:	83 c4 14             	add    esp,0x14
c00078e9:	53                   	push   ebx
c00078ea:	e8 e7 1e 00 00       	call   c00097d6 <VAS::~VAS()>
c00078ef:	83 c4 30             	add    esp,0x30
c00078f2:	5b                   	pop    ebx
c00078f3:	5e                   	pop    esi
c00078f4:	5f                   	pop    edi
c00078f5:	c3                   	ret    

c00078f6 <Phys::allocateDMA(unsigned long)>:
c00078f6:	55                   	push   ebp
c00078f7:	31 ed                	xor    ebp,ebp
c00078f9:	57                   	push   edi
c00078fa:	56                   	push   esi
c00078fb:	53                   	push   ebx
c00078fc:	31 db                	xor    ebx,ebx
c00078fe:	83 ec 1c             	sub    esp,0x1c
c0007901:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007905:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000790d:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0007913:	31 c0                	xor    eax,eax
c0007915:	c1 ef 0c             	shr    edi,0xc
c0007918:	eb 19                	jmp    c0007933 <Phys::allocateDMA(unsigned long)+0x3d>
c000791a:	85 c0                	test   eax,eax
c000791c:	75 06                	jne    c0007924 <Phys::allocateDMA(unsigned long)+0x2e>
c000791e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007922:	89 dd                	mov    ebp,ebx
c0007924:	8d 70 01             	lea    esi,[eax+0x1]
c0007927:	39 f7                	cmp    edi,esi
c0007929:	74 33                	je     c000795e <Phys::allocateDMA(unsigned long)+0x68>
c000792b:	89 f0                	mov    eax,esi
c000792d:	43                   	inc    ebx
c000792e:	83 fb 0f             	cmp    ebx,0xf
c0007931:	7f 11                	jg     c0007944 <Phys::allocateDMA(unsigned long)+0x4e>
c0007933:	80 bb 8c 0d 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdf274],0x0
c000793a:	74 de                	je     c000791a <Phys::allocateDMA(unsigned long)+0x24>
c000793c:	31 c0                	xor    eax,eax
c000793e:	43                   	inc    ebx
c000793f:	83 fb 0f             	cmp    ebx,0xf
c0007942:	7e ef                	jle    c0007933 <Phys::allocateDMA(unsigned long)+0x3d>
c0007944:	83 ec 0c             	sub    esp,0xc
c0007947:	68 ac d7 01 c0       	push   0xc001d7ac
c000794c:	e8 12 88 00 00       	call   c0010163 <KePanic(char const*)>
c0007951:	83 c4 10             	add    esp,0x10
c0007954:	31 c0                	xor    eax,eax
c0007956:	83 c4 1c             	add    esp,0x1c
c0007959:	5b                   	pop    ebx
c000795a:	5e                   	pop    esi
c000795b:	5f                   	pop    edi
c000795c:	5d                   	pop    ebp
c000795d:	c3                   	ret    
c000795e:	89 e9                	mov    ecx,ebp
c0007960:	c1 f9 04             	sar    ecx,0x4
c0007963:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007967:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000796b:	89 ca                	mov    edx,ecx
c000796d:	4a                   	dec    edx
c000796e:	79 03                	jns    c0007973 <Phys::allocateDMA(unsigned long)+0x7d>
c0007970:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007973:	c1 fa 04             	sar    edx,0x4
c0007976:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000797a:	74 08                	je     c0007984 <Phys::allocateDMA(unsigned long)+0x8e>
c000797c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007980:	31 c0                	xor    eax,eax
c0007982:	eb ba                	jmp    c000793e <Phys::allocateDMA(unsigned long)+0x48>
c0007984:	85 f6                	test   esi,esi
c0007986:	74 15                	je     c000799d <Phys::allocateDMA(unsigned long)+0xa7>
c0007988:	8d 95 8c 0d 02 c0    	lea    edx,[ebp-0x3ffdf274]
c000798e:	8d 84 05 8d 0d 02 c0 	lea    eax,[ebp+eax*1-0x3ffdf273]
c0007995:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007998:	42                   	inc    edx
c0007999:	39 d0                	cmp    eax,edx
c000799b:	75 f8                	jne    c0007995 <Phys::allocateDMA(unsigned long)+0x9f>
c000799d:	01 3d 84 0d 02 c0    	add    DWORD PTR ds:0xc0020d84,edi
c00079a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079a7:	85 c0                	test   eax,eax
c00079a9:	74 17                	je     c00079c2 <Phys::allocateDMA(unsigned long)+0xcc>
c00079ab:	83 ec 0c             	sub    esp,0xc
c00079ae:	68 ac d7 01 c0       	push   0xc001d7ac
c00079b3:	e8 ab 87 00 00       	call   c0010163 <KePanic(char const*)>
c00079b8:	83 c4 10             	add    esp,0x10
c00079bb:	89 f0                	mov    eax,esi
c00079bd:	e9 6b ff ff ff       	jmp    c000792d <Phys::allocateDMA(unsigned long)+0x37>
c00079c2:	c1 e5 0c             	shl    ebp,0xc
c00079c5:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c00079cb:	eb 89                	jmp    c0007956 <Phys::allocateDMA(unsigned long)+0x60>

c00079cd <Phys::freeDMA(unsigned long, unsigned long)>:
c00079cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079d1:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c00079d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00079db:	c1 ea 0c             	shr    edx,0xc
c00079de:	05 00 00 ff 3d       	add    eax,0x3dff0000
c00079e3:	29 15 84 0d 02 c0    	sub    DWORD PTR ds:0xc0020d84,edx
c00079e9:	c1 e8 0c             	shr    eax,0xc
c00079ec:	85 d2                	test   edx,edx
c00079ee:	74 0f                	je     c00079ff <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c00079f0:	05 8c 0d 02 c0       	add    eax,0xc0020d8c
c00079f5:	01 c2                	add    edx,eax
c00079f7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00079fa:	40                   	inc    eax
c00079fb:	39 d0                	cmp    eax,edx
c00079fd:	75 f8                	jne    c00079f7 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c00079ff:	c3                   	ret    

c0007a00 <Phys::setPageState(unsigned long, bool)>:
c0007a00:	56                   	push   esi
c0007a01:	ba 01 00 00 00       	mov    edx,0x1
c0007a06:	53                   	push   ebx
c0007a07:	8b 35 9c f9 01 c0    	mov    esi,DWORD PTR ds:0xc001f99c
c0007a0d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007a11:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007a15:	89 c8                	mov    eax,ecx
c0007a17:	83 e1 07             	and    ecx,0x7
c0007a1a:	c1 e8 03             	shr    eax,0x3
c0007a1d:	d3 e3                	shl    ebx,cl
c0007a1f:	01 c6                	add    esi,eax
c0007a21:	d3 e2                	shl    edx,cl
c0007a23:	f7 d2                	not    edx
c0007a25:	20 16                	and    BYTE PTR [esi],dl
c0007a27:	03 05 9c f9 01 c0    	add    eax,DWORD PTR ds:0xc001f99c
c0007a2d:	08 18                	or     BYTE PTR [eax],bl
c0007a2f:	5b                   	pop    ebx
c0007a30:	5e                   	pop    esi
c0007a31:	c3                   	ret    

c0007a32 <Phys::getPageState(unsigned long)>:
c0007a32:	53                   	push   ebx
c0007a33:	8b 15 9c f9 01 c0    	mov    edx,DWORD PTR ds:0xc001f99c
c0007a39:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007a3d:	31 db                	xor    ebx,ebx
c0007a3f:	89 c8                	mov    eax,ecx
c0007a41:	83 e1 07             	and    ecx,0x7
c0007a44:	c1 e8 03             	shr    eax,0x3
c0007a47:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c0007a4a:	89 d8                	mov    eax,ebx
c0007a4c:	5b                   	pop    ebx
c0007a4d:	d3 f8                	sar    eax,cl
c0007a4f:	83 e0 01             	and    eax,0x1
c0007a52:	c3                   	ret    

c0007a53 <Phys::freePage(unsigned long)>:
c0007a53:	53                   	push   ebx
c0007a54:	83 ec 08             	sub    esp,0x8
c0007a57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007a5b:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007a61:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007a67:	76 3a                	jbe    c0007aa3 <Phys::freePage(unsigned long)+0x50>
c0007a69:	c1 e8 0c             	shr    eax,0xc
c0007a6c:	50                   	push   eax
c0007a6d:	89 c3                	mov    ebx,eax
c0007a6f:	e8 be ff ff ff       	call   c0007a32 <Phys::getPageState(unsigned long)>
c0007a74:	5a                   	pop    edx
c0007a75:	84 c0                	test   al,al
c0007a77:	74 19                	je     c0007a92 <Phys::freePage(unsigned long)+0x3f>
c0007a79:	83 ec 08             	sub    esp,0x8
c0007a7c:	ff 0d 84 0d 02 c0    	dec    DWORD PTR ds:0xc0020d84
c0007a82:	6a 00                	push   0x0
c0007a84:	53                   	push   ebx
c0007a85:	e8 76 ff ff ff       	call   c0007a00 <Phys::setPageState(unsigned long, bool)>
c0007a8a:	83 c4 10             	add    esp,0x10
c0007a8d:	83 c4 08             	add    esp,0x8
c0007a90:	5b                   	pop    ebx
c0007a91:	c3                   	ret    
c0007a92:	c7 44 24 10 51 d8 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d851
c0007a9a:	83 c4 08             	add    esp,0x8
c0007a9d:	5b                   	pop    ebx
c0007a9e:	e9 c0 86 00 00       	jmp    c0010163 <KePanic(char const*)>
c0007aa3:	68 00 10 00 00       	push   0x1000
c0007aa8:	50                   	push   eax
c0007aa9:	e8 1f ff ff ff       	call   c00079cd <Phys::freeDMA(unsigned long, unsigned long)>
c0007aae:	59                   	pop    ecx
c0007aaf:	5b                   	pop    ebx
c0007ab0:	83 c4 08             	add    esp,0x8
c0007ab3:	5b                   	pop    ebx
c0007ab4:	c3                   	ret    

c0007ab5 <Phys::allocatePage()>:
c0007ab5:	56                   	push   esi
c0007ab6:	53                   	push   ebx
c0007ab7:	83 ec 14             	sub    esp,0x14
c0007aba:	8b 35 78 0d 02 c0    	mov    esi,DWORD PTR ds:0xc0020d78
c0007ac0:	89 f3                	mov    ebx,esi
c0007ac2:	eb 0a                	jmp    c0007ace <Phys::allocatePage()+0x19>
c0007ac4:	89 1d 78 0d 02 c0    	mov    DWORD PTR ds:0xc0020d78,ebx
c0007aca:	39 de                	cmp    esi,ebx
c0007acc:	74 24                	je     c0007af2 <Phys::allocatePage()+0x3d>
c0007ace:	53                   	push   ebx
c0007acf:	e8 5e ff ff ff       	call   c0007a32 <Phys::getPageState(unsigned long)>
c0007ad4:	5a                   	pop    edx
c0007ad5:	84 c0                	test   al,al
c0007ad7:	74 5f                	je     c0007b38 <Phys::allocatePage()+0x83>
c0007ad9:	43                   	inc    ebx
c0007ada:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007ae0:	75 e2                	jne    c0007ac4 <Phys::allocatePage()+0xf>
c0007ae2:	31 db                	xor    ebx,ebx
c0007ae4:	c7 05 78 0d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020d78,0x0
c0007aee:	39 de                	cmp    esi,ebx
c0007af0:	75 dc                	jne    c0007ace <Phys::allocatePage()+0x19>
c0007af2:	83 ec 0c             	sub    esp,0xc
c0007af5:	80 35 9c 0d 02 c0 01 	xor    BYTE PTR ds:0xc0020d9c,0x1
c0007afc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007b01:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007b04:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007b0a:	50                   	push   eax
c0007b0b:	e8 08 27 00 00       	call   c000a218 <VAS::scanForEviction()>
c0007b10:	83 c4 10             	add    esp,0x10
c0007b13:	85 c0                	test   eax,eax
c0007b15:	75 3f                	jne    c0007b56 <Phys::allocatePage()+0xa1>
c0007b17:	83 ec 0c             	sub    esp,0xc
c0007b1a:	68 d4 d7 01 c0       	push   0xc001d7d4
c0007b1f:	e8 3f 86 00 00       	call   c0010163 <KePanic(char const*)>
c0007b24:	83 c4 10             	add    esp,0x10
c0007b27:	8b 1d 78 0d 02 c0    	mov    ebx,DWORD PTR ds:0xc0020d78
c0007b2d:	53                   	push   ebx
c0007b2e:	e8 ff fe ff ff       	call   c0007a32 <Phys::getPageState(unsigned long)>
c0007b33:	5a                   	pop    edx
c0007b34:	84 c0                	test   al,al
c0007b36:	75 a1                	jne    c0007ad9 <Phys::allocatePage()+0x24>
c0007b38:	6a 01                	push   0x1
c0007b3a:	53                   	push   ebx
c0007b3b:	e8 c0 fe ff ff       	call   c0007a00 <Phys::setPageState(unsigned long, bool)>
c0007b40:	a1 78 0d 02 c0       	mov    eax,ds:0xc0020d78
c0007b45:	5a                   	pop    edx
c0007b46:	ff 05 84 0d 02 c0    	inc    DWORD PTR ds:0xc0020d84
c0007b4c:	c1 e0 0c             	shl    eax,0xc
c0007b4f:	59                   	pop    ecx
c0007b50:	83 c4 14             	add    esp,0x14
c0007b53:	5b                   	pop    ebx
c0007b54:	5e                   	pop    esi
c0007b55:	c3                   	ret    
c0007b56:	83 ec 08             	sub    esp,0x8
c0007b59:	89 c2                	mov    edx,eax
c0007b5b:	6a 01                	push   0x1
c0007b5d:	c1 ea 0c             	shr    edx,0xc
c0007b60:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b64:	52                   	push   edx
c0007b65:	e8 96 fe ff ff       	call   c0007a00 <Phys::setPageState(unsigned long, bool)>
c0007b6a:	83 c4 10             	add    esp,0x10
c0007b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b71:	eb dd                	jmp    c0007b50 <Phys::allocatePage()+0x9b>

c0007b73 <Phys::allocateContiguousPages(int)>:
c0007b73:	57                   	push   edi
c0007b74:	56                   	push   esi
c0007b75:	53                   	push   ebx
c0007b76:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b7a:	fa                   	cli    
c0007b7b:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c0007b81:	31 db                	xor    ebx,ebx
c0007b83:	85 db                	test   ebx,ebx
c0007b85:	75 11                	jne    c0007b98 <Phys::allocateContiguousPages(int)+0x25>
c0007b87:	e8 29 ff ff ff       	call   c0007ab5 <Phys::allocatePage()>
c0007b8c:	83 fe 01             	cmp    esi,0x1
c0007b8f:	89 c7                	mov    edi,eax
c0007b91:	74 21                	je     c0007bb4 <Phys::allocateContiguousPages(int)+0x41>
c0007b93:	bb 01 00 00 00       	mov    ebx,0x1
c0007b98:	e8 18 ff ff ff       	call   c0007ab5 <Phys::allocatePage()>
c0007b9d:	89 da                	mov    edx,ebx
c0007b9f:	c1 e2 0c             	shl    edx,0xc
c0007ba2:	01 fa                	add    edx,edi
c0007ba4:	39 c2                	cmp    edx,eax
c0007ba6:	74 20                	je     c0007bc8 <Phys::allocateContiguousPages(int)+0x55>
c0007ba8:	bb 01 00 00 00       	mov    ebx,0x1
c0007bad:	89 c7                	mov    edi,eax
c0007baf:	83 fe 01             	cmp    esi,0x1
c0007bb2:	75 e4                	jne    c0007b98 <Phys::allocateContiguousPages(int)+0x25>
c0007bb4:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0007bb9:	48                   	dec    eax
c0007bba:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0007bbf:	75 01                	jne    c0007bc2 <Phys::allocateContiguousPages(int)+0x4f>
c0007bc1:	fb                   	sti    
c0007bc2:	89 f8                	mov    eax,edi
c0007bc4:	5b                   	pop    ebx
c0007bc5:	5e                   	pop    esi
c0007bc6:	5f                   	pop    edi
c0007bc7:	c3                   	ret    
c0007bc8:	43                   	inc    ebx
c0007bc9:	39 f3                	cmp    ebx,esi
c0007bcb:	75 b6                	jne    c0007b83 <Phys::allocateContiguousPages(int)+0x10>
c0007bcd:	eb e5                	jmp    c0007bb4 <Phys::allocateContiguousPages(int)+0x41>

c0007bcf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007bcf:	56                   	push   esi
c0007bd0:	53                   	push   ebx
c0007bd1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007bd5:	39 1d 7c 0d 02 c0    	cmp    DWORD PTR ds:0xc0020d7c,ebx
c0007bdb:	73 06                	jae    c0007be3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007bdd:	89 1d 7c 0d 02 c0    	mov    DWORD PTR ds:0xc0020d7c,ebx
c0007be3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007be7:	c1 eb 0c             	shr    ebx,0xc
c0007bea:	c1 e8 0c             	shr    eax,0xc
c0007bed:	39 d8                	cmp    eax,ebx
c0007bef:	73 13                	jae    c0007c04 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007bf1:	6a 00                	push   0x0
c0007bf3:	8d 70 01             	lea    esi,[eax+0x1]
c0007bf6:	50                   	push   eax
c0007bf7:	e8 04 fe ff ff       	call   c0007a00 <Phys::setPageState(unsigned long, bool)>
c0007bfc:	5a                   	pop    edx
c0007bfd:	89 f0                	mov    eax,esi
c0007bff:	59                   	pop    ecx
c0007c00:	39 f3                	cmp    ebx,esi
c0007c02:	75 ed                	jne    c0007bf1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007c04:	5b                   	pop    ebx
c0007c05:	5e                   	pop    esi
c0007c06:	c3                   	ret    

c0007c07 <Phys::physicalMemorySetup(unsigned int)>:
c0007c07:	55                   	push   ebp
c0007c08:	57                   	push   edi
c0007c09:	56                   	push   esi
c0007c0a:	53                   	push   ebx
c0007c0b:	31 db                	xor    ebx,ebx
c0007c0d:	83 ec 40             	sub    esp,0x40
c0007c10:	6a 10                	push   0x10
c0007c12:	6a 00                	push   0x0
c0007c14:	68 8c 0d 02 c0       	push   0xc0020d8c
c0007c19:	e8 b2 88 ff ff       	call   c00004d0 <memset>
c0007c1e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007c22:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007c27:	05 00 10 00 00       	add    eax,0x1000
c0007c2c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007c30:	5a                   	pop    edx
c0007c31:	59                   	pop    ecx
c0007c32:	50                   	push   eax
c0007c33:	68 67 d8 01 c0       	push   0xc001d867
c0007c38:	e8 bb 28 00 00       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c0007c3d:	83 c4 10             	add    esp,0x10
c0007c40:	83 ec 08             	sub    esp,0x8
c0007c43:	6a 01                	push   0x1
c0007c45:	53                   	push   ebx
c0007c46:	43                   	inc    ebx
c0007c47:	e8 b4 fd ff ff       	call   c0007a00 <Phys::setPageState(unsigned long, bool)>
c0007c4c:	83 c4 10             	add    esp,0x10
c0007c4f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007c55:	75 e9                	jne    c0007c40 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007c57:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c0007c5d:	66 85 c0             	test   ax,ax
c0007c60:	0f 84 97 01 00 00    	je     c0007dfd <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0007c66:	89 c7                	mov    edi,eax
c0007c68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007c70:	81 e7 ff ff 00 00    	and    edi,0xffff
c0007c76:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007c7b:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007c7f:	eb 15                	jmp    c0007c96 <Phys::physicalMemorySetup(unsigned int)+0x8f>
c0007c81:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0007c85:	83 c3 18             	add    ebx,0x18
c0007c88:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007c8c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007c90:	0f 84 77 01 00 00    	je     c0007e0d <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007c96:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007c99:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007c9c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007c9f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007ca3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007ca7:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007ca9:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007cac:	01 f0                	add    eax,esi
c0007cae:	55                   	push   ebp
c0007caf:	11 fa                	adc    edx,edi
c0007cb1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007cb5:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007cb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007cbd:	50                   	push   eax
c0007cbe:	56                   	push   esi
c0007cbf:	68 04 d8 01 c0       	push   0xc001d804
c0007cc4:	e8 2f 28 00 00       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c0007cc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007ccd:	83 c4 10             	add    esp,0x10
c0007cd0:	09 f8                	or     eax,edi
c0007cd2:	0f 85 35 01 00 00    	jne    c0007e0d <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007cd8:	4d                   	dec    ebp
c0007cd9:	75 a6                	jne    c0007c81 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007cdb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0007cdf:	ba 00 00 08 00       	mov    edx,0x80000
c0007ce4:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0007ce8:	39 f2                	cmp    edx,esi
c0007cea:	89 c1                	mov    ecx,eax
c0007cec:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007cf4:	19 f9                	sbb    ecx,edi
c0007cf6:	0f 82 a7 00 00 00    	jb     c0007da3 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cfc:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007d00:	89 c1                	mov    ecx,eax
c0007d02:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0007d06:	0f 83 97 00 00 00    	jae    c0007da3 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007d0c:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007d11:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d15:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007d19:	39 fa                	cmp    edx,edi
c0007d1b:	19 e8                	sbb    eax,ebp
c0007d1d:	0f 82 9a 01 00 00    	jb     c0007ebd <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c0007d23:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d27:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007d2b:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0007d31:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007d36:	83 d5 ff             	adc    ebp,0xffffffff
c0007d39:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0007d3d:	31 c0                	xor    eax,eax
c0007d3f:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0007d43:	39 fa                	cmp    edx,edi
c0007d45:	89 c1                	mov    ecx,eax
c0007d47:	19 e9                	sbb    ecx,ebp
c0007d49:	0f 83 32 ff ff ff    	jae    c0007c81 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d4f:	be 00 00 08 00       	mov    esi,0x80000
c0007d54:	51                   	push   ecx
c0007d55:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007d59:	57                   	push   edi
c0007d5a:	56                   	push   esi
c0007d5b:	68 28 d8 01 c0       	push   0xc001d828
c0007d60:	e8 93 27 00 00       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c0007d65:	5d                   	pop    ebp
c0007d66:	58                   	pop    eax
c0007d67:	57                   	push   edi
c0007d68:	56                   	push   esi
c0007d69:	e8 61 fe ff ff       	call   c0007bcf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0007d6e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007d72:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007d76:	83 c4 0c             	add    esp,0xc
c0007d79:	0f ac d0 0c          	shrd   eax,edx,0xc
c0007d7d:	03 05 88 0d 02 c0    	add    eax,DWORD PTR ds:0xc0020d88
c0007d83:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0007d8a:	a3 88 0d 02 c0       	mov    ds:0xc0020d88,eax
c0007d8f:	52                   	push   edx
c0007d90:	50                   	push   eax
c0007d91:	68 8d d8 01 c0       	push   0xc001d88d
c0007d96:	e8 5d 27 00 00       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c0007d9b:	83 c4 10             	add    esp,0x10
c0007d9e:	e9 de fe ff ff       	jmp    c0007c81 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007da3:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0007da7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007dab:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007daf:	39 ea                	cmp    edx,ebp
c0007db1:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0007db5:	0f 82 c6 fe ff ff    	jb     c0007c81 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007dbb:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007dc0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0007dc4:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0007dc8:	0f 83 b3 fe ff ff    	jae    c0007c81 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007dce:	39 ee                	cmp    esi,ebp
c0007dd0:	89 f8                	mov    eax,edi
c0007dd2:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0007dd6:	0f 83 78 ff ff ff    	jae    c0007d54 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007ddc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007de0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007de4:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0007de8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0007dec:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0007df0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007df4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007df8:	e9 57 ff ff ff       	jmp    c0007d54 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007dfd:	83 ec 0c             	sub    esp,0xc
c0007e00:	68 7f d8 01 c0       	push   0xc001d87f
c0007e05:	e8 59 83 00 00       	call   c0010163 <KePanic(char const*)>
c0007e0a:	83 c4 10             	add    esp,0x10
c0007e0d:	83 ec 08             	sub    esp,0x8
c0007e10:	bb 60 00 00 00       	mov    ebx,0x60
c0007e15:	6a 00                	push   0x0
c0007e17:	6a 06                	push   0x6
c0007e19:	e8 e2 fb ff ff       	call   c0007a00 <Phys::setPageState(unsigned long, bool)>
c0007e1e:	58                   	pop    eax
c0007e1f:	5a                   	pop    edx
c0007e20:	6a 00                	push   0x0
c0007e22:	6a 07                	push   0x7
c0007e24:	e8 d7 fb ff ff       	call   c0007a00 <Phys::setPageState(unsigned long, bool)>
c0007e29:	83 05 88 0d 02 c0 02 	add    DWORD PTR ds:0xc0020d88,0x2
c0007e30:	83 c4 10             	add    esp,0x10
c0007e33:	83 ec 08             	sub    esp,0x8
c0007e36:	6a 00                	push   0x0
c0007e38:	53                   	push   ebx
c0007e39:	43                   	inc    ebx
c0007e3a:	e8 c1 fb ff ff       	call   c0007a00 <Phys::setPageState(unsigned long, bool)>
c0007e3f:	83 c4 10             	add    esp,0x10
c0007e42:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0007e48:	75 e9                	jne    c0007e33 <Phys::physicalMemorySetup(unsigned int)+0x22c>
c0007e4a:	a1 88 0d 02 c0       	mov    eax,ds:0xc0020d88
c0007e4f:	bb 40 01 00 00       	mov    ebx,0x140
c0007e54:	83 c0 20             	add    eax,0x20
c0007e57:	a3 88 0d 02 c0       	mov    ds:0xc0020d88,eax
c0007e5c:	eb 22                	jmp    c0007e80 <Phys::physicalMemorySetup(unsigned int)+0x279>
c0007e5e:	83 ec 08             	sub    esp,0x8
c0007e61:	6a 00                	push   0x0
c0007e63:	53                   	push   ebx
c0007e64:	43                   	inc    ebx
c0007e65:	e8 96 fb ff ff       	call   c0007a00 <Phys::setPageState(unsigned long, bool)>
c0007e6a:	a1 88 0d 02 c0       	mov    eax,ds:0xc0020d88
c0007e6f:	83 c4 10             	add    esp,0x10
c0007e72:	40                   	inc    eax
c0007e73:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0007e79:	a3 88 0d 02 c0       	mov    ds:0xc0020d88,eax
c0007e7e:	74 07                	je     c0007e87 <Phys::physicalMemorySetup(unsigned int)+0x280>
c0007e80:	3d ff 03 00 00       	cmp    eax,0x3ff
c0007e85:	7e d7                	jle    c0007e5e <Phys::physicalMemorySetup(unsigned int)+0x257>
c0007e87:	bb d0 01 00 00       	mov    ebx,0x1d0
c0007e8c:	3d ff 07 00 00       	cmp    eax,0x7ff
c0007e91:	7f 22                	jg     c0007eb5 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0007e93:	83 ec 08             	sub    esp,0x8
c0007e96:	6a 00                	push   0x0
c0007e98:	53                   	push   ebx
c0007e99:	43                   	inc    ebx
c0007e9a:	e8 61 fb ff ff       	call   c0007a00 <Phys::setPageState(unsigned long, bool)>
c0007e9f:	a1 88 0d 02 c0       	mov    eax,ds:0xc0020d88
c0007ea4:	83 c4 10             	add    esp,0x10
c0007ea7:	40                   	inc    eax
c0007ea8:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0007eae:	a3 88 0d 02 c0       	mov    ds:0xc0020d88,eax
c0007eb3:	75 d7                	jne    c0007e8c <Phys::physicalMemorySetup(unsigned int)+0x285>
c0007eb5:	83 c4 3c             	add    esp,0x3c
c0007eb8:	5b                   	pop    ebx
c0007eb9:	5e                   	pop    esi
c0007eba:	5f                   	pop    edi
c0007ebb:	5d                   	pop    ebp
c0007ebc:	c3                   	ret    
c0007ebd:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0007ec5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007ecd:	e9 51 fe ff ff       	jmp    c0007d23 <Phys::physicalMemorySetup(unsigned int)+0x11c>

c0007ed2 <Pipe::isAtty()>:
c0007ed2:	31 c0                	xor    eax,eax
c0007ed4:	c3                   	ret    
c0007ed5:	90                   	nop

c0007ed6 <Pipe::~Pipe()>:
c0007ed6:	83 ec 0c             	sub    esp,0xc
c0007ed9:	ba ec d8 01 c0       	mov    edx,0xc001d8ec
c0007ede:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ee2:	89 10                	mov    DWORD PTR [eax],edx
c0007ee4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ee8:	83 ec 0c             	sub    esp,0xc
c0007eeb:	50                   	push   eax
c0007eec:	e8 53 11 00 00       	call   c0009044 <UnixFile::~UnixFile()>
c0007ef1:	83 c4 10             	add    esp,0x10
c0007ef4:	90                   	nop
c0007ef5:	83 c4 0c             	add    esp,0xc
c0007ef8:	c3                   	ret    
c0007ef9:	90                   	nop

c0007efa <Pipe::~Pipe()>:
c0007efa:	83 ec 0c             	sub    esp,0xc
c0007efd:	83 ec 0c             	sub    esp,0xc
c0007f00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f04:	e8 cd ff ff ff       	call   c0007ed6 <Pipe::~Pipe()>
c0007f09:	83 c4 10             	add    esp,0x10
c0007f0c:	83 ec 08             	sub    esp,0x8
c0007f0f:	6a 20                	push   0x20
c0007f11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f15:	e8 e8 24 00 00       	call   c000a402 <operator delete(void*, unsigned long)>
c0007f1a:	83 c4 10             	add    esp,0x10
c0007f1d:	83 c4 0c             	add    esp,0xc
c0007f20:	c3                   	ret    
c0007f21:	90                   	nop

c0007f22 <Pipe::write(unsigned long long, void*, int*)>:
c0007f22:	55                   	push   ebp
c0007f23:	57                   	push   edi
c0007f24:	56                   	push   esi
c0007f25:	53                   	push   ebx
c0007f26:	83 ec 1c             	sub    esp,0x1c
c0007f29:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0007f2d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007f31:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0007f34:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f38:	89 04 24             	mov    DWORD PTR [esp],eax
c0007f3b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007f3f:	89 d8                	mov    eax,ebx
c0007f41:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0007f44:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f48:	89 d6                	mov    esi,edx
c0007f4a:	89 d7                	mov    edi,edx
c0007f4c:	c1 ff 1f             	sar    edi,0x1f
c0007f4f:	03 34 24             	add    esi,DWORD PTR [esp]
c0007f52:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0007f56:	c1 f8 1f             	sar    eax,0x1f
c0007f59:	39 f3                	cmp    ebx,esi
c0007f5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007f5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f63:	19 f8                	sbb    eax,edi
c0007f65:	b8 01 00 00 00       	mov    eax,0x1
c0007f6a:	72 6e                	jb     c0007fda <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0007f6c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0007f6f:	01 d0                	add    eax,edx
c0007f71:	99                   	cdq    
c0007f72:	f7 fb                	idiv   ebx
c0007f74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007f78:	29 d3                	sub    ebx,edx
c0007f7a:	89 d7                	mov    edi,edx
c0007f7c:	89 de                	mov    esi,ebx
c0007f7e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007f81:	c1 fb 1f             	sar    ebx,0x1f
c0007f84:	39 f2                	cmp    edx,esi
c0007f86:	19 d8                	sbb    eax,ebx
c0007f88:	b8 00 00 00 00       	mov    eax,0x0
c0007f8d:	72 04                	jb     c0007f93 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0007f8f:	89 d0                	mov    eax,edx
c0007f91:	29 f0                	sub    eax,esi
c0007f93:	89 d3                	mov    ebx,edx
c0007f95:	29 c3                	sub    ebx,eax
c0007f97:	74 0b                	je     c0007fa4 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0007f99:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0007f9c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0007fa0:	89 d9                	mov    ecx,ebx
c0007fa2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007fa4:	85 c0                	test   eax,eax
c0007fa6:	74 0d                	je     c0007fb5 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0007fa8:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0007fac:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0007faf:	89 de                	mov    esi,ebx
c0007fb1:	89 c1                	mov    ecx,eax
c0007fb3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007fb5:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0007fb8:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0007fbd:	75 10                	jne    c0007fcf <Pipe::write(unsigned long long, void*, int*)+0xad>
c0007fbf:	83 ec 0c             	sub    esp,0xc
c0007fc2:	68 a9 d8 01 c0       	push   0xc001d8a9
c0007fc7:	e8 97 81 00 00       	call   c0010163 <KePanic(char const*)>
c0007fcc:	83 c4 10             	add    esp,0x10
c0007fcf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007fd3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007fd6:	89 08                	mov    DWORD PTR [eax],ecx
c0007fd8:	31 c0                	xor    eax,eax
c0007fda:	83 c4 1c             	add    esp,0x1c
c0007fdd:	5b                   	pop    ebx
c0007fde:	5e                   	pop    esi
c0007fdf:	5f                   	pop    edi
c0007fe0:	5d                   	pop    ebp
c0007fe1:	c3                   	ret    

c0007fe2 <Pipe::read(unsigned long long, void*, int*)>:
c0007fe2:	55                   	push   ebp
c0007fe3:	57                   	push   edi
c0007fe4:	56                   	push   esi
c0007fe5:	53                   	push   ebx
c0007fe6:	83 ec 1c             	sub    esp,0x1c
c0007fe9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0007fed:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0007ff1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007ff5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0007ff8:	89 c8                	mov    eax,ecx
c0007ffa:	99                   	cdq    
c0007ffb:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0007fff:	74 24                	je     c0008025 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008001:	39 f9                	cmp    ecx,edi
c0008003:	89 d1                	mov    ecx,edx
c0008005:	19 f1                	sbb    ecx,esi
c0008007:	73 1c                	jae    c0008025 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008009:	fa                   	cli    
c000800a:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c0008010:	e8 07 b9 00 00       	call   c001391c <schedule()>
c0008015:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c000801a:	48                   	dec    eax
c000801b:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0008020:	75 d3                	jne    c0007ff5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008022:	fb                   	sti    
c0008023:	eb d0                	jmp    c0007ff5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008025:	39 f8                	cmp    eax,edi
c0008027:	89 d1                	mov    ecx,edx
c0008029:	89 3c 24             	mov    DWORD PTR [esp],edi
c000802c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0008030:	19 f1                	sbb    ecx,esi
c0008032:	73 07                	jae    c000803b <Pipe::read(unsigned long long, void*, int*)+0x59>
c0008034:	89 04 24             	mov    DWORD PTR [esp],eax
c0008037:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000803b:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000803e:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0008041:	29 f7                	sub    edi,esi
c0008043:	89 f8                	mov    eax,edi
c0008045:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008049:	99                   	cdq    
c000804a:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000804d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008051:	19 d0                	sbb    eax,edx
c0008053:	73 07                	jae    c000805c <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0008055:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008058:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000805c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000805f:	89 ea                	mov    edx,ebp
c0008061:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0008065:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000806a:	74 0d                	je     c0008079 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000806c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000806f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0008073:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008077:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008079:	85 d2                	test   edx,edx
c000807b:	74 11                	je     c000808e <Pipe::read(unsigned long long, void*, int*)+0xac>
c000807d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008081:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0008084:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008088:	89 d1                	mov    ecx,edx
c000808a:	89 c7                	mov    edi,eax
c000808c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000808e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008091:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0008094:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008097:	99                   	cdq    
c0008098:	89 f7                	mov    edi,esi
c000809a:	03 04 24             	add    eax,DWORD PTR [esp]
c000809d:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00080a1:	c1 ff 1f             	sar    edi,0x1f
c00080a4:	57                   	push   edi
c00080a5:	56                   	push   esi
c00080a6:	52                   	push   edx
c00080a7:	50                   	push   eax
c00080a8:	e8 73 42 01 00       	call   c001c320 <__umoddi3>
c00080ad:	83 c4 10             	add    esp,0x10
c00080b0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00080b3:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00080b8:	75 10                	jne    c00080ca <Pipe::read(unsigned long long, void*, int*)+0xe8>
c00080ba:	83 ec 0c             	sub    esp,0xc
c00080bd:	68 c6 d8 01 c0       	push   0xc001d8c6
c00080c2:	e8 9c 80 00 00       	call   c0010163 <KePanic(char const*)>
c00080c7:	83 c4 10             	add    esp,0x10
c00080ca:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00080ce:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00080d1:	89 10                	mov    DWORD PTR [eax],edx
c00080d3:	83 c4 1c             	add    esp,0x1c
c00080d6:	31 c0                	xor    eax,eax
c00080d8:	5b                   	pop    ebx
c00080d9:	5e                   	pop    esi
c00080da:	5f                   	pop    edi
c00080db:	5d                   	pop    ebp
c00080dc:	c3                   	ret    
c00080dd:	90                   	nop

c00080de <Pipe::Pipe(int)>:
c00080de:	83 ec 0c             	sub    esp,0xc
c00080e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080e5:	83 ec 08             	sub    esp,0x8
c00080e8:	6a 00                	push   0x0
c00080ea:	50                   	push   eax
c00080eb:	e8 72 0d 00 00       	call   c0008e62 <UnixFile::UnixFile(int)>
c00080f0:	83 c4 10             	add    esp,0x10
c00080f3:	ba ec d8 01 c0       	mov    edx,0xc001d8ec
c00080f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080fc:	89 10                	mov    DWORD PTR [eax],edx
c00080fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008102:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008106:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008109:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000810d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0008114:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008118:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000811f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008123:	83 ec 0c             	sub    esp,0xc
c0008126:	50                   	push   eax
c0008127:	e8 8d f6 ff ff       	call   c00077b9 <malloc>
c000812c:	83 c4 10             	add    esp,0x10
c000812f:	89 c2                	mov    edx,eax
c0008131:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008135:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000813c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0008140:	90                   	nop
c0008141:	83 c4 0c             	add    esp,0xc
c0008144:	c3                   	ret    
c0008145:	90                   	nop

c0008146 <VgaText::isAtty()>:
c0008146:	b0 01                	mov    al,0x1
c0008148:	c3                   	ret    
c0008149:	90                   	nop

c000814a <VgaText::~VgaText()>:
c000814a:	83 ec 0c             	sub    esp,0xc
c000814d:	ba 80 d9 01 c0       	mov    edx,0xc001d980
c0008152:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008156:	89 10                	mov    DWORD PTR [eax],edx
c0008158:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000815c:	83 ec 0c             	sub    esp,0xc
c000815f:	50                   	push   eax
c0008160:	e8 df 0e 00 00       	call   c0009044 <UnixFile::~UnixFile()>
c0008165:	83 c4 10             	add    esp,0x10
c0008168:	90                   	nop
c0008169:	83 c4 0c             	add    esp,0xc
c000816c:	c3                   	ret    
c000816d:	90                   	nop

c000816e <VgaText::~VgaText()>:
c000816e:	83 ec 0c             	sub    esp,0xc
c0008171:	83 ec 0c             	sub    esp,0xc
c0008174:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008178:	e8 cd ff ff ff       	call   c000814a <VgaText::~VgaText()>
c000817d:	83 c4 10             	add    esp,0x10
c0008180:	83 ec 08             	sub    esp,0x8
c0008183:	68 34 01 00 00       	push   0x134
c0008188:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000818c:	e8 71 22 00 00       	call   c000a402 <operator delete(void*, unsigned long)>
c0008191:	83 c4 10             	add    esp,0x10
c0008194:	83 c4 0c             	add    esp,0xc
c0008197:	c3                   	ret    

c0008198 <VgaText::read(unsigned long long, void*, int*)>:
c0008198:	83 ec 10             	sub    esp,0x10
c000819b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000819f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081a7:	e8 ac 45 00 00       	call   c000c758 <readKeyboard(VgaText*, char*, unsigned long)>
c00081ac:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00081b0:	89 02                	mov    DWORD PTR [edx],eax
c00081b2:	31 c0                	xor    eax,eax
c00081b4:	83 c4 1c             	add    esp,0x1c
c00081b7:	c3                   	ret    

c00081b8 <setTerminalScrollLock(bool)>:
c00081b8:	c3                   	ret    

c00081b9 <doTerminalCycle()>:
c00081b9:	c3                   	ret    

c00081ba <addToTerminalCycle(VgaText*)>:
c00081ba:	c3                   	ret    

c00081bb <scrollTerminalScrollLock(int)>:
c00081bb:	c3                   	ret    

c00081bc <VgaText::updateTitle()>:
c00081bc:	c3                   	ret    
c00081bd:	90                   	nop

c00081be <VgaText::load()>:
c00081be:	c3                   	ret    
c00081bf:	90                   	nop

c00081c0 <VgaText::updateCursor()>:
c00081c0:	83 ec 14             	sub    esp,0x14
c00081c3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00081c7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00081ca:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00081cd:	e8 26 e3 00 00       	call   c00164f8 <HalConsoleCursorUpdate(int, int)>
c00081d2:	83 c4 1c             	add    esp,0x1c
c00081d5:	c3                   	ret    

c00081d6 <VgaText::doANSI_SGR(int)>:
c00081d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00081da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00081de:	85 d2                	test   edx,edx
c00081e0:	75 0b                	jne    c00081ed <VgaText::doANSI_SGR(int)+0x17>
c00081e2:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00081e5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00081e8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00081eb:	eb 59                	jmp    c0008246 <VgaText::doANSI_SGR(int)+0x70>
c00081ed:	83 fa 07             	cmp    edx,0x7
c00081f0:	75 0b                	jne    c00081fd <VgaText::doANSI_SGR(int)+0x27>
c00081f2:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00081f5:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00081f8:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00081fb:	eb 49                	jmp    c0008246 <VgaText::doANSI_SGR(int)+0x70>
c00081fd:	83 fa 1b             	cmp    edx,0x1b
c0008200:	74 e0                	je     c00081e2 <VgaText::doANSI_SGR(int)+0xc>
c0008202:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008205:	83 f9 07             	cmp    ecx,0x7
c0008208:	77 09                	ja     c0008213 <VgaText::doANSI_SGR(int)+0x3d>
c000820a:	8b 14 8d c0 f9 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0640]
c0008211:	eb 20                	jmp    c0008233 <VgaText::doANSI_SGR(int)+0x5d>
c0008213:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008216:	83 f9 07             	cmp    ecx,0x7
c0008219:	77 09                	ja     c0008224 <VgaText::doANSI_SGR(int)+0x4e>
c000821b:	8b 14 8d c0 f9 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0640]
c0008222:	eb 22                	jmp    c0008246 <VgaText::doANSI_SGR(int)+0x70>
c0008224:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008227:	83 f9 07             	cmp    ecx,0x7
c000822a:	77 0b                	ja     c0008237 <VgaText::doANSI_SGR(int)+0x61>
c000822c:	8b 14 95 78 f8 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0788]
c0008233:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008236:	c3                   	ret    
c0008237:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000823a:	83 f9 07             	cmp    ecx,0x7
c000823d:	77 0a                	ja     c0008249 <VgaText::doANSI_SGR(int)+0x73>
c000823f:	8b 14 95 50 f8 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe07b0]
c0008246:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008249:	c3                   	ret    

c000824a <VgaText::setDefaultBgColour(VgaColour)>:
c000824a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000824e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008252:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0008255:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008258:	c3                   	ret    
c0008259:	90                   	nop

c000825a <VgaText::setDefaultFgColour(VgaColour)>:
c000825a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000825e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008262:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0008265:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008268:	c3                   	ret    
c0008269:	90                   	nop

c000826a <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000826a:	53                   	push   ebx
c000826b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000826f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008273:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008277:	51                   	push   ecx
c0008278:	e8 cd ff ff ff       	call   c000824a <VgaText::setDefaultBgColour(VgaColour)>
c000827d:	58                   	pop    eax
c000827e:	5a                   	pop    edx
c000827f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0008283:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008287:	5b                   	pop    ebx
c0008288:	eb d0                	jmp    c000825a <VgaText::setDefaultFgColour(VgaColour)>

c000828a <VgaText::setTitleTextColour(VgaColour)>:
c000828a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000828e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008292:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008295:	c3                   	ret    

c0008296 <VgaText::setTitleColour(VgaColour)>:
c0008296:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000829a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000829e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00082a1:	c3                   	ret    

c00082a2 <VgaText::setTitle(char*)>:
c00082a2:	c3                   	ret    
c00082a3:	90                   	nop

c00082a4 <VgaText::combineColours(unsigned char, unsigned char)>:
c00082a4:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00082a8:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00082ad:	83 e0 0f             	and    eax,0xf
c00082b0:	c1 e2 04             	shl    edx,0x4
c00082b3:	09 d0                	or     eax,edx
c00082b5:	c3                   	ret    

c00082b6 <VgaText::scrollScreen()>:
c00082b6:	55                   	push   ebp
c00082b7:	b9 01 00 00 00       	mov    ecx,0x1
c00082bc:	57                   	push   edi
c00082bd:	56                   	push   esi
c00082be:	53                   	push   ebx
c00082bf:	83 ec 0c             	sub    esp,0xc
c00082c2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00082c6:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00082cc:	31 ff                	xor    edi,edi
c00082ce:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00082d1:	83 f9 18             	cmp    ecx,0x18
c00082d4:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00082d7:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c00082de:	75 27                	jne    c0008307 <VgaText::scrollScreen()+0x51>
c00082e0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00082e3:	01 f5                	add    ebp,esi
c00082e5:	f7 c7 01 00 00 00    	test   edi,0x1
c00082eb:	74 16                	je     c0008303 <VgaText::scrollScreen()+0x4d>
c00082ed:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00082f1:	50                   	push   eax
c00082f2:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00082f6:	50                   	push   eax
c00082f7:	e8 a8 ff ff ff       	call   c00082a4 <VgaText::combineColours(unsigned char, unsigned char)>
c00082fc:	5a                   	pop    edx
c00082fd:	5a                   	pop    edx
c00082fe:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0008301:	eb 04                	jmp    c0008307 <VgaText::scrollScreen()+0x51>
c0008303:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c0008307:	47                   	inc    edi
c0008308:	46                   	inc    esi
c0008309:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000830f:	75 bd                	jne    c00082ce <VgaText::scrollScreen()+0x18>
c0008311:	41                   	inc    ecx
c0008312:	83 f9 19             	cmp    ecx,0x19
c0008315:	75 af                	jne    c00082c6 <VgaText::scrollScreen()+0x10>
c0008317:	39 1d a4 0d 02 c0    	cmp    DWORD PTR ds:0xc0020da4,ebx
c000831d:	75 1f                	jne    c000833e <VgaText::scrollScreen()+0x88>
c000831f:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008323:	74 05                	je     c000832a <VgaText::scrollScreen()+0x74>
c0008325:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008328:	eb 14                	jmp    c000833e <VgaText::scrollScreen()+0x88>
c000832a:	50                   	push   eax
c000832b:	50                   	push   eax
c000832c:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008330:	50                   	push   eax
c0008331:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008335:	50                   	push   eax
c0008336:	e8 49 e0 00 00       	call   c0016384 <HalConsoleScroll(int, int)>
c000833b:	83 c4 10             	add    esp,0x10
c000833e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008342:	83 c4 0c             	add    esp,0xc
c0008345:	5b                   	pop    ebx
c0008346:	5e                   	pop    esi
c0008347:	5f                   	pop    edi
c0008348:	5d                   	pop    ebp
c0008349:	e9 72 fe ff ff       	jmp    c00081c0 <VgaText::updateCursor()>

c000834e <VgaText::combineCharAndColour(char, unsigned char)>:
c000834e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008353:	c1 e0 08             	shl    eax,0x8
c0008356:	89 c2                	mov    edx,eax
c0008358:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000835d:	09 d0                	or     eax,edx
c000835f:	c3                   	ret    

c0008360 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0008360:	55                   	push   ebp
c0008361:	57                   	push   edi
c0008362:	56                   	push   esi
c0008363:	53                   	push   ebx
c0008364:	83 ec 1c             	sub    esp,0x1c
c0008367:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000836b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000836f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0008373:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008377:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000837b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000837f:	0f b6 c3             	movzx  eax,bl
c0008382:	50                   	push   eax
c0008383:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0008388:	50                   	push   eax
c0008389:	e8 16 ff ff ff       	call   c00082a4 <VgaText::combineColours(unsigned char, unsigned char)>
c000838e:	5a                   	pop    edx
c000838f:	0f b6 c0             	movzx  eax,al
c0008392:	59                   	pop    ecx
c0008393:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0008398:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000839c:	50                   	push   eax
c000839d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00083a1:	e8 a8 ff ff ff       	call   c000834e <VgaText::combineCharAndColour(char, unsigned char)>
c00083a6:	5a                   	pop    edx
c00083a7:	66 6b d7 50          	imul   dx,di,0x50
c00083ab:	59                   	pop    ecx
c00083ac:	01 f2                	add    edx,esi
c00083ae:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00083b1:	0f b7 d2             	movzx  edx,dx
c00083b4:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00083b8:	39 2d a4 0d 02 c0    	cmp    DWORD PTR ds:0xc0020da4,ebp
c00083be:	75 28                	jne    c00083e8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c00083c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083c4:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00083c8:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00083cc:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00083d0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00083d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00083d8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00083dc:	83 c4 1c             	add    esp,0x1c
c00083df:	5b                   	pop    ebx
c00083e0:	5e                   	pop    esi
c00083e1:	5f                   	pop    edi
c00083e2:	5d                   	pop    ebp
c00083e3:	e9 a4 e0 00 00       	jmp    c001648c <HalConsoleWriteCharacter(char, int, int, int, int)>
c00083e8:	83 c4 1c             	add    esp,0x1c
c00083eb:	5b                   	pop    ebx
c00083ec:	5e                   	pop    esi
c00083ed:	5f                   	pop    edi
c00083ee:	5d                   	pop    ebp
c00083ef:	c3                   	ret    

c00083f0 <VgaText::getCursorX()>:
c00083f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083f4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00083f7:	c3                   	ret    

c00083f8 <VgaText::getCursorY()>:
c00083f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083fc:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00083ff:	c3                   	ret    

c0008400 <VgaText::setCursor(int, int)>:
c0008400:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008404:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008408:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000840b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000840f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008412:	e9 a9 fd ff ff       	jmp    c00081c0 <VgaText::updateCursor()>

c0008417 <setActiveTerminal(VgaText*)>:
c0008417:	53                   	push   ebx
c0008418:	83 ec 08             	sub    esp,0x8
c000841b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000841f:	85 db                	test   ebx,ebx
c0008421:	75 11                	jne    c0008434 <setActiveTerminal(VgaText*)+0x1d>
c0008423:	c7 44 24 10 00 d9 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d900
c000842b:	83 c4 08             	add    esp,0x8
c000842e:	5b                   	pop    ebx
c000842f:	e9 2f 7d 00 00       	jmp    c0010163 <KePanic(char const*)>
c0008434:	a1 a4 0d 02 c0       	mov    eax,ds:0xc0020da4
c0008439:	85 c0                	test   eax,eax
c000843b:	74 0c                	je     c0008449 <setActiveTerminal(VgaText*)+0x32>
c000843d:	83 ec 0c             	sub    esp,0xc
c0008440:	50                   	push   eax
c0008441:	e8 7a fd ff ff       	call   c00081c0 <VgaText::updateCursor()>
c0008446:	83 c4 10             	add    esp,0x10
c0008449:	89 1d a4 0d 02 c0    	mov    DWORD PTR ds:0xc0020da4,ebx
c000844f:	50                   	push   eax
c0008450:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008453:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008456:	53                   	push   ebx
c0008457:	e8 a4 ff ff ff       	call   c0008400 <VgaText::setCursor(int, int)>
c000845c:	83 c4 18             	add    esp,0x18
c000845f:	5b                   	pop    ebx
c0008460:	c3                   	ret    
c0008461:	90                   	nop

c0008462 <VgaText::clearScreen()>:
c0008462:	57                   	push   edi
c0008463:	56                   	push   esi
c0008464:	31 f6                	xor    esi,esi
c0008466:	53                   	push   ebx
c0008467:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000846b:	52                   	push   edx
c000846c:	6a 00                	push   0x0
c000846e:	6a 00                	push   0x0
c0008470:	53                   	push   ebx
c0008471:	e8 8a ff ff ff       	call   c0008400 <VgaText::setCursor(int, int)>
c0008476:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000847d:	83 c4 10             	add    esp,0x10
c0008480:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0008483:	7e 20                	jle    c00084a5 <VgaText::clearScreen()+0x43>
c0008485:	31 ff                	xor    edi,edi
c0008487:	50                   	push   eax
c0008488:	50                   	push   eax
c0008489:	56                   	push   esi
c000848a:	57                   	push   edi
c000848b:	47                   	inc    edi
c000848c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000848f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008492:	6a 20                	push   0x20
c0008494:	53                   	push   ebx
c0008495:	e8 c6 fe ff ff       	call   c0008360 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000849a:	83 c4 20             	add    esp,0x20
c000849d:	83 ff 50             	cmp    edi,0x50
c00084a0:	75 e5                	jne    c0008487 <VgaText::clearScreen()+0x25>
c00084a2:	46                   	inc    esi
c00084a3:	eb db                	jmp    c0008480 <VgaText::clearScreen()+0x1e>
c00084a5:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00084ac:	5b                   	pop    ebx
c00084ad:	5e                   	pop    esi
c00084ae:	5f                   	pop    edi
c00084af:	c3                   	ret    

c00084b0 <VgaText::setCursorX(int)>:
c00084b0:	83 ec 10             	sub    esp,0x10
c00084b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084b7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00084ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084be:	50                   	push   eax
c00084bf:	e8 3c ff ff ff       	call   c0008400 <VgaText::setCursor(int, int)>
c00084c4:	83 c4 1c             	add    esp,0x1c
c00084c7:	c3                   	ret    

c00084c8 <VgaText::setCursorY(int)>:
c00084c8:	83 ec 10             	sub    esp,0x10
c00084cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084d3:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00084d6:	50                   	push   eax
c00084d7:	e8 24 ff ff ff       	call   c0008400 <VgaText::setCursor(int, int)>
c00084dc:	83 c4 1c             	add    esp,0x1c
c00084df:	c3                   	ret    

c00084e0 <VgaText::incrementCursor(bool)>:
c00084e0:	56                   	push   esi
c00084e1:	53                   	push   ebx
c00084e2:	51                   	push   ecx
c00084e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084e7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00084eb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00084ee:	40                   	inc    eax
c00084ef:	83 f8 50             	cmp    eax,0x50
c00084f2:	74 05                	je     c00084f9 <VgaText::incrementCursor(bool)+0x19>
c00084f4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00084f7:	eb 24                	jmp    c000851d <VgaText::incrementCursor(bool)+0x3d>
c00084f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00084fc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008503:	8d 50 01             	lea    edx,[eax+0x1]
c0008506:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008509:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000850c:	75 0f                	jne    c000851d <VgaText::incrementCursor(bool)+0x3d>
c000850e:	83 ec 0c             	sub    esp,0xc
c0008511:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008514:	53                   	push   ebx
c0008515:	e8 9c fd ff ff       	call   c00082b6 <VgaText::scrollScreen()>
c000851a:	83 c4 10             	add    esp,0x10
c000851d:	89 f0                	mov    eax,esi
c000851f:	84 c0                	test   al,al
c0008521:	74 0c                	je     c000852f <VgaText::incrementCursor(bool)+0x4f>
c0008523:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008527:	5a                   	pop    edx
c0008528:	5b                   	pop    ebx
c0008529:	5e                   	pop    esi
c000852a:	e9 91 fc ff ff       	jmp    c00081c0 <VgaText::updateCursor()>
c000852f:	58                   	pop    eax
c0008530:	5b                   	pop    ebx
c0008531:	5e                   	pop    esi
c0008532:	c3                   	ret    
c0008533:	90                   	nop

c0008534 <VgaText::decrementCursor(bool)>:
c0008534:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008538:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000853c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000853f:	85 c0                	test   eax,eax
c0008541:	74 04                	je     c0008547 <VgaText::decrementCursor(bool)+0x13>
c0008543:	48                   	dec    eax
c0008544:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008547:	84 c9                	test   cl,cl
c0008549:	74 09                	je     c0008554 <VgaText::decrementCursor(bool)+0x20>
c000854b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000854f:	e9 6c fc ff ff       	jmp    c00081c0 <VgaText::updateCursor()>
c0008554:	c3                   	ret    
c0008555:	90                   	nop

c0008556 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008556:	53                   	push   ebx
c0008557:	83 ec 08             	sub    esp,0x8
c000855a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000855e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008562:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008566:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000856a:	3c 07                	cmp    al,0x7
c000856c:	75 21                	jne    c000858f <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c000856e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008576:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c000857e:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0008586:	83 c4 08             	add    esp,0x8
c0008589:	5b                   	pop    ebx
c000858a:	e9 c0 2d 00 00       	jmp    c000b34f <Krnl::beep(int, int, bool)>
c000858f:	3c 0d                	cmp    al,0xd
c0008591:	75 09                	jne    c000859c <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0008593:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000859a:	eb 2c                	jmp    c00085c8 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c000859c:	3c 0a                	cmp    al,0xa
c000859e:	75 31                	jne    c00085d1 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c00085a0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00085a3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00085aa:	8d 50 01             	lea    edx,[eax+0x1]
c00085ad:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00085b0:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00085b3:	75 0f                	jne    c00085c4 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c00085b5:	83 ec 0c             	sub    esp,0xc
c00085b8:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00085bb:	53                   	push   ebx
c00085bc:	e8 f5 fc ff ff       	call   c00082b6 <VgaText::scrollScreen()>
c00085c1:	83 c4 10             	add    esp,0x10
c00085c4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00085c8:	83 c4 08             	add    esp,0x8
c00085cb:	5b                   	pop    ebx
c00085cc:	e9 ef fb ff ff       	jmp    c00081c0 <VgaText::updateCursor()>
c00085d1:	3c 08                	cmp    al,0x8
c00085d3:	75 25                	jne    c00085fa <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c00085d5:	50                   	push   eax
c00085d6:	50                   	push   eax
c00085d7:	6a 01                	push   0x1
c00085d9:	53                   	push   ebx
c00085da:	e8 55 ff ff ff       	call   c0008534 <VgaText::decrementCursor(bool)>
c00085df:	5a                   	pop    edx
c00085e0:	59                   	pop    ecx
c00085e1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085e4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085e7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00085ea:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00085ed:	6a 20                	push   0x20
c00085ef:	53                   	push   ebx
c00085f0:	e8 6b fd ff ff       	call   c0008360 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085f5:	83 c4 28             	add    esp,0x28
c00085f8:	5b                   	pop    ebx
c00085f9:	c3                   	ret    
c00085fa:	83 ec 08             	sub    esp,0x8
c00085fd:	0f be c0             	movsx  eax,al
c0008600:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008603:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008606:	51                   	push   ecx
c0008607:	52                   	push   edx
c0008608:	50                   	push   eax
c0008609:	53                   	push   ebx
c000860a:	e8 51 fd ff ff       	call   c0008360 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000860f:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008613:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000861b:	83 c4 28             	add    esp,0x28
c000861e:	5b                   	pop    ebx
c000861f:	e9 bc fe ff ff       	jmp    c00084e0 <VgaText::incrementCursor(bool)>

c0008624 <VgaText::putchar(char)>:
c0008624:	56                   	push   esi
c0008625:	53                   	push   ebx
c0008626:	83 ec 14             	sub    esp,0x14
c0008629:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000862d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008631:	3c 5b                	cmp    al,0x5b
c0008633:	75 18                	jne    c000864d <VgaText::putchar(char)+0x29>
c0008635:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008639:	74 1f                	je     c000865a <VgaText::putchar(char)+0x36>
c000863b:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008641:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008648:	e9 bd 00 00 00       	jmp    c000870a <VgaText::putchar(char)+0xe6>
c000864d:	3c 1b                	cmp    al,0x1b
c000864f:	75 09                	jne    c000865a <VgaText::putchar(char)+0x36>
c0008651:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008655:	e9 b0 00 00 00       	jmp    c000870a <VgaText::putchar(char)+0xe6>
c000865a:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000865d:	84 c9                	test   cl,cl
c000865f:	0f 84 92 00 00 00    	je     c00086f7 <VgaText::putchar(char)+0xd3>
c0008665:	8d 50 c0             	lea    edx,[eax-0x40]
c0008668:	80 fa 3e             	cmp    dl,0x3e
c000866b:	77 76                	ja     c00086e3 <VgaText::putchar(char)+0xbf>
c000866d:	3c 6d                	cmp    al,0x6d
c000866f:	75 47                	jne    c00086b8 <VgaText::putchar(char)+0x94>
c0008671:	31 f6                	xor    esi,esi
c0008673:	31 d2                	xor    edx,edx
c0008675:	31 c0                	xor    eax,eax
c0008677:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000867a:	7e 2d                	jle    c00086a9 <VgaText::putchar(char)+0x85>
c000867c:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008681:	80 fa 3b             	cmp    dl,0x3b
c0008684:	75 17                	jne    c000869d <VgaText::putchar(char)+0x79>
c0008686:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000868a:	50                   	push   eax
c000868b:	53                   	push   ebx
c000868c:	e8 45 fb ff ff       	call   c00081d6 <VgaText::doANSI_SGR(int)>
c0008691:	59                   	pop    ecx
c0008692:	31 d2                	xor    edx,edx
c0008694:	58                   	pop    eax
c0008695:	31 c0                	xor    eax,eax
c0008697:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000869b:	eb 09                	jmp    c00086a6 <VgaText::putchar(char)+0x82>
c000869d:	6b c0 0a             	imul   eax,eax,0xa
c00086a0:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00086a4:	88 ca                	mov    dl,cl
c00086a6:	46                   	inc    esi
c00086a7:	eb ce                	jmp    c0008677 <VgaText::putchar(char)+0x53>
c00086a9:	84 d2                	test   dl,dl
c00086ab:	74 2e                	je     c00086db <VgaText::putchar(char)+0xb7>
c00086ad:	50                   	push   eax
c00086ae:	53                   	push   ebx
c00086af:	e8 22 fb ff ff       	call   c00081d6 <VgaText::doANSI_SGR(int)>
c00086b4:	58                   	pop    eax
c00086b5:	5a                   	pop    edx
c00086b6:	eb 23                	jmp    c00086db <VgaText::putchar(char)+0xb7>
c00086b8:	3c 4a                	cmp    al,0x4a
c00086ba:	75 1f                	jne    c00086db <VgaText::putchar(char)+0xb7>
c00086bc:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00086c0:	75 19                	jne    c00086db <VgaText::putchar(char)+0xb7>
c00086c2:	83 ec 0c             	sub    esp,0xc
c00086c5:	53                   	push   ebx
c00086c6:	e8 97 fd ff ff       	call   c0008462 <VgaText::clearScreen()>
c00086cb:	83 c4 0c             	add    esp,0xc
c00086ce:	6a 00                	push   0x0
c00086d0:	6a 00                	push   0x0
c00086d2:	53                   	push   ebx
c00086d3:	e8 28 fd ff ff       	call   c0008400 <VgaText::setCursor(int, int)>
c00086d8:	83 c4 10             	add    esp,0x10
c00086db:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00086e1:	eb 27                	jmp    c000870a <VgaText::putchar(char)+0xe6>
c00086e3:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c00086e6:	83 fa 0e             	cmp    edx,0xe
c00086e9:	7f 1f                	jg     c000870a <VgaText::putchar(char)+0xe6>
c00086eb:	8d 4a 01             	lea    ecx,[edx+0x1]
c00086ee:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00086f1:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00086f5:	eb 13                	jmp    c000870a <VgaText::putchar(char)+0xe6>
c00086f7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00086fa:	0f be c0             	movsx  eax,al
c00086fd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008700:	50                   	push   eax
c0008701:	53                   	push   ebx
c0008702:	e8 4f fe ff ff       	call   c0008556 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008707:	83 c4 10             	add    esp,0x10
c000870a:	83 c4 14             	add    esp,0x14
c000870d:	5b                   	pop    ebx
c000870e:	5e                   	pop    esi
c000870f:	c3                   	ret    

c0008710 <VgaText::putx(unsigned int)>:
c0008710:	57                   	push   edi
c0008711:	b9 11 00 00 00       	mov    ecx,0x11
c0008716:	56                   	push   esi
c0008717:	be 0e d9 01 c0       	mov    esi,0xc001d90e
c000871c:	53                   	push   ebx
c000871d:	83 ec 20             	sub    esp,0x20
c0008720:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008724:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008728:	fc                   	cld    
c0008729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000872b:	be 08 00 00 00       	mov    esi,0x8
c0008730:	50                   	push   eax
c0008731:	50                   	push   eax
c0008732:	89 d8                	mov    eax,ebx
c0008734:	c1 e3 04             	shl    ebx,0x4
c0008737:	c1 e8 1c             	shr    eax,0x1c
c000873a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000873f:	50                   	push   eax
c0008740:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008744:	e8 db fe ff ff       	call   c0008624 <VgaText::putchar(char)>
c0008749:	83 c4 10             	add    esp,0x10
c000874c:	4e                   	dec    esi
c000874d:	75 e1                	jne    c0008730 <VgaText::putx(unsigned int)+0x20>
c000874f:	83 c4 20             	add    esp,0x20
c0008752:	5b                   	pop    ebx
c0008753:	5e                   	pop    esi
c0008754:	5f                   	pop    edi
c0008755:	c3                   	ret    

c0008756 <VgaText::puts(char const*)>:
c0008756:	53                   	push   ebx
c0008757:	83 ec 08             	sub    esp,0x8
c000875a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000875e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008761:	84 c0                	test   al,al
c0008763:	74 12                	je     c0008777 <VgaText::puts(char const*)+0x21>
c0008765:	43                   	inc    ebx
c0008766:	51                   	push   ecx
c0008767:	51                   	push   ecx
c0008768:	50                   	push   eax
c0008769:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000876d:	e8 b2 fe ff ff       	call   c0008624 <VgaText::putchar(char)>
c0008772:	83 c4 10             	add    esp,0x10
c0008775:	eb e7                	jmp    c000875e <VgaText::puts(char const*)+0x8>
c0008777:	83 c4 08             	add    esp,0x8
c000877a:	5b                   	pop    ebx
c000877b:	c3                   	ret    

c000877c <VgaText::write(unsigned long long, void*, int*)>:
c000877c:	55                   	push   ebp
c000877d:	57                   	push   edi
c000877e:	56                   	push   esi
c000877f:	53                   	push   ebx
c0008780:	83 ec 0c             	sub    esp,0xc
c0008783:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008787:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000878b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000878f:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008796:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008799:	39 eb                	cmp    ebx,ebp
c000879b:	74 13                	je     c00087b0 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000879d:	43                   	inc    ebx
c000879e:	50                   	push   eax
c000879f:	50                   	push   eax
c00087a0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00087a4:	50                   	push   eax
c00087a5:	56                   	push   esi
c00087a6:	e8 79 fe ff ff       	call   c0008624 <VgaText::putchar(char)>
c00087ab:	83 c4 10             	add    esp,0x10
c00087ae:	eb e9                	jmp    c0008799 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00087b0:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c00087b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00087bb:	89 38                	mov    DWORD PTR [eax],edi
c00087bd:	83 c4 0c             	add    esp,0xc
c00087c0:	31 c0                	xor    eax,eax
c00087c2:	5b                   	pop    ebx
c00087c3:	5e                   	pop    esi
c00087c4:	5f                   	pop    edi
c00087c5:	5d                   	pop    ebp
c00087c6:	c3                   	ret    
c00087c7:	90                   	nop

c00087c8 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00087c8:	55                   	push   ebp
c00087c9:	57                   	push   edi
c00087ca:	56                   	push   esi
c00087cb:	53                   	push   ebx
c00087cc:	83 ec 0c             	sub    esp,0xc
c00087cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00087d3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087d8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087df:	50                   	push   eax
c00087e0:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087e5:	50                   	push   eax
c00087e6:	e8 b9 fa ff ff       	call   c00082a4 <VgaText::combineColours(unsigned char, unsigned char)>
c00087eb:	5a                   	pop    edx
c00087ec:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00087f1:	59                   	pop    ecx
c00087f2:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00087f5:	89 c5                	mov    ebp,eax
c00087f7:	0f b7 f6             	movzx  esi,si
c00087fa:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00087fe:	01 f6                	add    esi,esi
c0008800:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008803:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008806:	84 c0                	test   al,al
c0008808:	0f 84 f4 00 00 00    	je     c0008902 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c000880e:	3c 0d                	cmp    al,0xd
c0008810:	75 0c                	jne    c000881e <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c0008812:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008819:	e9 de 00 00 00       	jmp    c00088fc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c000881e:	3c 0a                	cmp    al,0xa
c0008820:	75 45                	jne    c0008867 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0008822:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008825:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000882c:	8d 48 01             	lea    ecx,[eax+0x1]
c000882f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008832:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008835:	75 0f                	jne    c0008846 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0008837:	83 ec 0c             	sub    esp,0xc
c000883a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000883d:	53                   	push   ebx
c000883e:	e8 73 fa ff ff       	call   c00082b6 <VgaText::scrollScreen()>
c0008843:	83 c4 10             	add    esp,0x10
c0008846:	83 ec 0c             	sub    esp,0xc
c0008849:	53                   	push   ebx
c000884a:	e8 71 f9 ff ff       	call   c00081c0 <VgaText::updateCursor()>
c000884f:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008854:	83 c4 10             	add    esp,0x10
c0008857:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000885a:	0f b7 f6             	movzx  esi,si
c000885d:	01 f6                	add    esi,esi
c000885f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008862:	e9 95 00 00 00       	jmp    c00088fc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008867:	3c 08                	cmp    al,0x8
c0008869:	75 35                	jne    c00088a0 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c000886b:	51                   	push   ecx
c000886c:	51                   	push   ecx
c000886d:	6a 01                	push   0x1
c000886f:	53                   	push   ebx
c0008870:	e8 bf fc ff ff       	call   c0008534 <VgaText::decrementCursor(bool)>
c0008875:	5e                   	pop    esi
c0008876:	58                   	pop    eax
c0008877:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000887a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000887d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008880:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008883:	6a 20                	push   0x20
c0008885:	53                   	push   ebx
c0008886:	e8 d5 fa ff ff       	call   c0008360 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000888b:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008890:	83 c4 20             	add    esp,0x20
c0008893:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008896:	0f b7 f6             	movzx  esi,si
c0008899:	01 f6                	add    esi,esi
c000889b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000889e:	eb 5c                	jmp    c00088fc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00088a0:	52                   	push   edx
c00088a1:	52                   	push   edx
c00088a2:	89 ea                	mov    edx,ebp
c00088a4:	0f b6 ca             	movzx  ecx,dl
c00088a7:	51                   	push   ecx
c00088a8:	50                   	push   eax
c00088a9:	e8 a0 fa ff ff       	call   c000834e <VgaText::combineCharAndColour(char, unsigned char)>
c00088ae:	83 c4 10             	add    esp,0x10
c00088b1:	66 89 06             	mov    WORD PTR [esi],ax
c00088b4:	39 1d a4 0d 02 c0    	cmp    DWORD PTR ds:0xc0020da4,ebx
c00088ba:	75 1d                	jne    c00088d9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c00088bc:	83 ec 0c             	sub    esp,0xc
c00088bf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00088c2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00088c5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088c9:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088cd:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00088d0:	50                   	push   eax
c00088d1:	e8 b6 db 00 00       	call   c001648c <HalConsoleWriteCharacter(char, int, int, int, int)>
c00088d6:	83 c4 20             	add    esp,0x20
c00088d9:	83 c6 02             	add    esi,0x2
c00088dc:	50                   	push   eax
c00088dd:	50                   	push   eax
c00088de:	6a 00                	push   0x0
c00088e0:	53                   	push   ebx
c00088e1:	e8 fa fb ff ff       	call   c00084e0 <VgaText::incrementCursor(bool)>
c00088e6:	83 c4 10             	add    esp,0x10
c00088e9:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c00088ed:	75 0d                	jne    c00088fc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00088ef:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00088f4:	0f b7 f6             	movzx  esi,si
c00088f7:	01 f6                	add    esi,esi
c00088f9:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00088fc:	47                   	inc    edi
c00088fd:	e9 01 ff ff ff       	jmp    c0008803 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008902:	83 ec 0c             	sub    esp,0xc
c0008905:	53                   	push   ebx
c0008906:	e8 b5 f8 ff ff       	call   c00081c0 <VgaText::updateCursor()>
c000890b:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008912:	83 c4 1c             	add    esp,0x1c
c0008915:	5b                   	pop    ebx
c0008916:	5e                   	pop    esi
c0008917:	5f                   	pop    edi
c0008918:	5d                   	pop    ebp
c0008919:	c3                   	ret    

c000891a <VgaText::VgaText(char const*)>:
c000891a:	56                   	push   esi
c000891b:	53                   	push   ebx
c000891c:	83 ec 04             	sub    esp,0x4
c000891f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008923:	83 ec 08             	sub    esp,0x8
c0008926:	6a 00                	push   0x0
c0008928:	50                   	push   eax
c0008929:	e8 34 05 00 00       	call   c0008e62 <UnixFile::UnixFile(int)>
c000892e:	83 c4 10             	add    esp,0x10
c0008931:	ba 80 d9 01 c0       	mov    edx,0xc001d980
c0008936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000893a:	89 10                	mov    DWORD PTR [eax],edx
c000893c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008940:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008947:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000894b:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008956:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000895a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000895e:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008966:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000896d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008971:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008978:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000897c:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008983:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008987:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000898e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008992:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008999:	83 ec 0c             	sub    esp,0xc
c000899c:	6a 01                	push   0x1
c000899e:	e8 02 09 00 00       	call   c00092a5 <Virt::allocateKernelVirtualPages(int)>
c00089a3:	83 c4 10             	add    esp,0x10
c00089a6:	89 c2                	mov    edx,eax
c00089a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089ac:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00089af:	8b 1d 50 0e 02 c0    	mov    ebx,DWORD PTR ds:0xc0020e50
c00089b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089b9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00089bc:	89 c6                	mov    esi,eax
c00089be:	e8 f2 f0 ff ff       	call   c0007ab5 <Phys::allocatePage()>
c00089c3:	68 05 0c 00 00       	push   0xc05
c00089c8:	56                   	push   esi
c00089c9:	50                   	push   eax
c00089ca:	53                   	push   ebx
c00089cb:	e8 6a 0f 00 00       	call   c000993a <VAS::mapPage(unsigned long, unsigned long, int)>
c00089d0:	83 c4 10             	add    esp,0x10
c00089d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089d7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00089da:	83 ec 04             	sub    esp,0x4
c00089dd:	68 a0 0f 00 00       	push   0xfa0
c00089e2:	6a 00                	push   0x0
c00089e4:	50                   	push   eax
c00089e5:	e8 e6 7a ff ff       	call   c00004d0 <memset>
c00089ea:	83 c4 10             	add    esp,0x10
c00089ed:	83 ec 04             	sub    esp,0x4
c00089f0:	6a 00                	push   0x0
c00089f2:	6a 07                	push   0x7
c00089f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089f8:	e8 6d f8 ff ff       	call   c000826a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00089fd:	83 c4 10             	add    esp,0x10
c0008a00:	83 ec 04             	sub    esp,0x4
c0008a03:	6a 00                	push   0x0
c0008a05:	6a 00                	push   0x0
c0008a07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a0b:	e8 f0 f9 ff ff       	call   c0008400 <VgaText::setCursor(int, int)>
c0008a10:	83 c4 10             	add    esp,0x10
c0008a13:	83 ec 0c             	sub    esp,0xc
c0008a16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a1a:	e8 43 fa ff ff       	call   c0008462 <VgaText::clearScreen()>
c0008a1f:	83 c4 10             	add    esp,0x10
c0008a22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a26:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008a2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a2e:	05 82 00 00 00       	add    eax,0x82
c0008a33:	83 ec 04             	sub    esp,0x4
c0008a36:	6a 30                	push   0x30
c0008a38:	6a 00                	push   0x0
c0008a3a:	50                   	push   eax
c0008a3b:	e8 90 7a ff ff       	call   c00004d0 <memset>
c0008a40:	83 c4 10             	add    esp,0x10
c0008a43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a47:	05 b2 00 00 00       	add    eax,0xb2
c0008a4c:	83 ec 04             	sub    esp,0x4
c0008a4f:	68 80 00 00 00       	push   0x80
c0008a54:	6a 00                	push   0x0
c0008a56:	50                   	push   eax
c0008a57:	e8 74 7a ff ff       	call   c00004d0 <memset>
c0008a5c:	83 c4 10             	add    esp,0x10
c0008a5f:	90                   	nop
c0008a60:	83 c4 04             	add    esp,0x4
c0008a63:	5b                   	pop    ebx
c0008a64:	5e                   	pop    esi
c0008a65:	c3                   	ret    

c0008a66 <VgaText::receiveKey(unsigned char)>:
c0008a66:	57                   	push   edi
c0008a67:	56                   	push   esi
c0008a68:	53                   	push   ebx
c0008a69:	83 ec 10             	sub    esp,0x10
c0008a6c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008a70:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008a74:	89 f0                	mov    eax,esi
c0008a76:	84 c0                	test   al,al
c0008a78:	0f 84 3b 01 00 00    	je     c0008bb9 <VgaText::receiveKey(unsigned char)+0x153>
c0008a7e:	8d bb 82 00 00 00    	lea    edi,[ebx+0x82]
c0008a84:	3c 08                	cmp    al,0x8
c0008a86:	75 68                	jne    c0008af0 <VgaText::receiveKey(unsigned char)+0x8a>
c0008a88:	83 ec 0c             	sub    esp,0xc
c0008a8b:	57                   	push   edi
c0008a8c:	e8 af 7a ff ff       	call   c0000540 <strlen>
c0008a91:	83 c4 10             	add    esp,0x10
c0008a94:	85 c0                	test   eax,eax
c0008a96:	0f 84 be 00 00 00    	je     c0008b5a <VgaText::receiveKey(unsigned char)+0xf4>
c0008a9c:	50                   	push   eax
c0008a9d:	50                   	push   eax
c0008a9e:	6a 08                	push   0x8
c0008aa0:	53                   	push   ebx
c0008aa1:	e8 7e fb ff ff       	call   c0008624 <VgaText::putchar(char)>
c0008aa6:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008aa9:	e8 92 7a ff ff       	call   c0000540 <strlen>
c0008aae:	83 c4 10             	add    esp,0x10
c0008ab1:	8a 84 03 81 00 00 00 	mov    al,BYTE PTR [ebx+eax*1+0x81]
c0008ab8:	3c 0d                	cmp    al,0xd
c0008aba:	0f 95 c1             	setne  cl
c0008abd:	3c 18                	cmp    al,0x18
c0008abf:	0f 9e c2             	setle  dl
c0008ac2:	84 d1                	test   cl,dl
c0008ac4:	74 17                	je     c0008add <VgaText::receiveKey(unsigned char)+0x77>
c0008ac6:	83 e8 08             	sub    eax,0x8
c0008ac9:	3c 02                	cmp    al,0x2
c0008acb:	76 10                	jbe    c0008add <VgaText::receiveKey(unsigned char)+0x77>
c0008acd:	50                   	push   eax
c0008ace:	50                   	push   eax
c0008acf:	68 1f d9 01 c0       	push   0xc001d91f
c0008ad4:	53                   	push   ebx
c0008ad5:	e8 7c fc ff ff       	call   c0008756 <VgaText::puts(char const*)>
c0008ada:	83 c4 10             	add    esp,0x10
c0008add:	83 ec 0c             	sub    esp,0xc
c0008ae0:	57                   	push   edi
c0008ae1:	e8 5a 7a ff ff       	call   c0000540 <strlen>
c0008ae6:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008aee:	eb 67                	jmp    c0008b57 <VgaText::receiveKey(unsigned char)+0xf1>
c0008af0:	3c 18                	cmp    al,0x18
c0008af2:	0f 96 c2             	setbe  dl
c0008af5:	3c 0d                	cmp    al,0xd
c0008af7:	0f 95 c0             	setne  al
c0008afa:	84 c2                	test   dl,al
c0008afc:	74 30                	je     c0008b2e <VgaText::receiveKey(unsigned char)+0xc8>
c0008afe:	8d 46 f7             	lea    eax,[esi-0x9]
c0008b01:	3c 01                	cmp    al,0x1
c0008b03:	76 29                	jbe    c0008b2e <VgaText::receiveKey(unsigned char)+0xc8>
c0008b05:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008b08:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008b0b:	68 25 d9 01 c0       	push   0xc001d925
c0008b10:	53                   	push   ebx
c0008b11:	e8 b2 fc ff ff       	call   c00087c8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008b16:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008b19:	8d 46 40             	lea    eax,[esi+0x40]
c0008b1c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008b1f:	0f b6 c0             	movzx  eax,al
c0008b22:	50                   	push   eax
c0008b23:	53                   	push   ebx
c0008b24:	e8 2d fa ff ff       	call   c0008556 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008b29:	83 c4 20             	add    esp,0x20
c0008b2c:	eb 11                	jmp    c0008b3f <VgaText::receiveKey(unsigned char)+0xd9>
c0008b2e:	89 f0                	mov    eax,esi
c0008b30:	51                   	push   ecx
c0008b31:	0f be c0             	movsx  eax,al
c0008b34:	51                   	push   ecx
c0008b35:	50                   	push   eax
c0008b36:	53                   	push   ebx
c0008b37:	e8 e8 fa ff ff       	call   c0008624 <VgaText::putchar(char)>
c0008b3c:	83 c4 10             	add    esp,0x10
c0008b3f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008b44:	89 f0                	mov    eax,esi
c0008b46:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0008b4a:	52                   	push   edx
c0008b4b:	52                   	push   edx
c0008b4c:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008b50:	50                   	push   eax
c0008b51:	57                   	push   edi
c0008b52:	e8 69 7c ff ff       	call   c00007c0 <strcat>
c0008b57:	83 c4 10             	add    esp,0x10
c0008b5a:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008b61:	75 06                	jne    c0008b69 <VgaText::receiveKey(unsigned char)+0x103>
c0008b63:	89 f0                	mov    eax,esi
c0008b65:	3c 0a                	cmp    al,0xa
c0008b67:	75 50                	jne    c0008bb9 <VgaText::receiveKey(unsigned char)+0x153>
c0008b69:	83 ec 0c             	sub    esp,0xc
c0008b6c:	81 c3 b2 00 00 00    	add    ebx,0xb2
c0008b72:	53                   	push   ebx
c0008b73:	e8 c8 79 ff ff       	call   c0000540 <strlen>
c0008b78:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008b7b:	89 c6                	mov    esi,eax
c0008b7d:	e8 be 79 ff ff       	call   c0000540 <strlen>
c0008b82:	83 c4 10             	add    esp,0x10
c0008b85:	8d 44 06 04          	lea    eax,[esi+eax*1+0x4]
c0008b89:	3d 80 00 00 00       	cmp    eax,0x80
c0008b8e:	76 10                	jbe    c0008ba0 <VgaText::receiveKey(unsigned char)+0x13a>
c0008b90:	83 ec 0c             	sub    esp,0xc
c0008b93:	68 2b d9 01 c0       	push   0xc001d92b
c0008b98:	e8 c6 75 00 00       	call   c0010163 <KePanic(char const*)>
c0008b9d:	83 c4 10             	add    esp,0x10
c0008ba0:	50                   	push   eax
c0008ba1:	50                   	push   eax
c0008ba2:	57                   	push   edi
c0008ba3:	53                   	push   ebx
c0008ba4:	e8 17 7c ff ff       	call   c00007c0 <strcat>
c0008ba9:	83 c4 0c             	add    esp,0xc
c0008bac:	6a 30                	push   0x30
c0008bae:	6a 00                	push   0x0
c0008bb0:	57                   	push   edi
c0008bb1:	e8 1a 79 ff ff       	call   c00004d0 <memset>
c0008bb6:	83 c4 10             	add    esp,0x10
c0008bb9:	83 c4 10             	add    esp,0x10
c0008bbc:	5b                   	pop    ebx
c0008bbd:	5e                   	pop    esi
c0008bbe:	5f                   	pop    edi
c0008bbf:	c3                   	ret    

c0008bc0 <VgaText::doUpdate()>:
c0008bc0:	c3                   	ret    

c0008bc1 <newTerminal(char*)>:
c0008bc1:	83 ec 28             	sub    esp,0x28
c0008bc4:	68 34 01 00 00       	push   0x134
c0008bc9:	e8 eb eb ff ff       	call   c00077b9 <malloc>
c0008bce:	5a                   	pop    edx
c0008bcf:	59                   	pop    ecx
c0008bd0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008bd4:	50                   	push   eax
c0008bd5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008bd9:	e8 3c fd ff ff       	call   c000891a <VgaText::VgaText(char const*)>
c0008bde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008be2:	83 c4 2c             	add    esp,0x2c
c0008be5:	c3                   	ret    
c0008be6:	66 90                	xchg   ax,ax

c0008be8 <TSS::TSS()>:
c0008be8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008bec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008bf3:	90                   	nop
c0008bf4:	c3                   	ret    
c0008bf5:	90                   	nop
c0008bf6:	66 90                	xchg   ax,ax

c0008bf8 <TSS::setESP(unsigned long)>:
c0008bf8:	55                   	push   ebp
c0008bf9:	89 e5                	mov    ebp,esp
c0008bfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bfe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c01:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008c04:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c07:	90                   	nop
c0008c08:	5d                   	pop    ebp
c0008c09:	c3                   	ret    
c0008c0a:	66 90                	xchg   ax,ax

c0008c0c <TSS::flush()>:
c0008c0c:	55                   	push   ebp
c0008c0d:	89 e5                	mov    ebp,esp
c0008c0f:	83 ec 10             	sub    esp,0x10
c0008c12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c15:	8b 00                	mov    eax,DWORD PTR [eax]
c0008c17:	83 c8 03             	or     eax,0x3
c0008c1a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008c1e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008c22:	66 89 d0             	mov    ax,dx
c0008c25:	0f 00 d8             	ltr    ax
c0008c28:	90                   	nop
c0008c29:	c9                   	leave  
c0008c2a:	c3                   	ret    
c0008c2b:	90                   	nop

c0008c2c <TSS::setup(unsigned long, unsigned long)>:
c0008c2c:	55                   	push   ebp
c0008c2d:	89 e5                	mov    ebp,esp
c0008c2f:	83 ec 18             	sub    esp,0x18
c0008c32:	83 ec 0c             	sub    esp,0xc
c0008c35:	6a 68                	push   0x68
c0008c37:	e8 7d eb ff ff       	call   c00077b9 <malloc>
c0008c3c:	83 c4 10             	add    esp,0x10
c0008c3f:	89 c2                	mov    edx,eax
c0008c41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c44:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c4d:	83 ec 04             	sub    esp,0x4
c0008c50:	6a 68                	push   0x68
c0008c52:	6a 00                	push   0x0
c0008c54:	50                   	push   eax
c0008c55:	e8 76 78 ff ff       	call   c00004d0 <memset>
c0008c5a:	83 c4 10             	add    esp,0x10
c0008c5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c60:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c63:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008c69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c6c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c6f:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008c75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c7b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008c7e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c87:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008c8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c90:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c93:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008c99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c9f:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008ca5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ca8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cab:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008cb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cb4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cb7:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008cbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cc0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cc3:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0008cc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ccc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ccf:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0008cd2:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0008cd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cd8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cdb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008cde:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008ce1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ce4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ce7:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0008cee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cf1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cf4:	0f 20 da             	mov    edx,cr3
c0008cf7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0008cfa:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0008cfd:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0008d00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d03:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d06:	83 ec 08             	sub    esp,0x8
c0008d09:	50                   	push   eax
c0008d0a:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008d0d:	50                   	push   eax
c0008d0e:	e8 2d e3 ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c0008d13:	83 c4 10             	add    esp,0x10
c0008d16:	83 ec 08             	sub    esp,0x8
c0008d19:	6a 68                	push   0x68
c0008d1b:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008d1e:	50                   	push   eax
c0008d1f:	e8 38 e3 ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c0008d24:	83 c4 10             	add    esp,0x10
c0008d27:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0008d2b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008d2e:	83 e0 0f             	and    eax,0xf
c0008d31:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008d34:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008d37:	83 c8 40             	or     eax,0x40
c0008d3a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008d3d:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c0008d42:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008d48:	05 78 01 00 00       	add    eax,0x178
c0008d4d:	83 ec 04             	sub    esp,0x4
c0008d50:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0008d53:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0008d56:	50                   	push   eax
c0008d57:	e8 34 e3 ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c0008d5c:	83 c4 10             	add    esp,0x10
c0008d5f:	89 c2                	mov    edx,eax
c0008d61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d64:	89 10                	mov    DWORD PTR [eax],edx
c0008d66:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c0008d6b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008d71:	05 78 01 00 00       	add    eax,0x178
c0008d76:	83 ec 0c             	sub    esp,0xc
c0008d79:	50                   	push   eax
c0008d7a:	e8 3b e3 ff ff       	call   c00070ba <GDT::flush()>
c0008d7f:	83 c4 10             	add    esp,0x10
c0008d82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d85:	8b 00                	mov    eax,DWORD PTR [eax]
c0008d87:	c9                   	leave  
c0008d88:	c3                   	ret    
c0008d89:	90                   	nop

c0008d8a <ReservedFilename::read(unsigned long long, void*, int*)>:
c0008d8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008d8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008d92:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d95:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008d9a:	75 08                	jne    c0008da4 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0008d9c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008da2:	eb 38                	jmp    c0008ddc <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0008da4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008da9:	75 17                	jne    c0008dc2 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0008dab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008db0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008db3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008db9:	8b 10                	mov    edx,DWORD PTR [eax]
c0008dbb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008dbf:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0008dc2:	89 c1                	mov    ecx,eax
c0008dc4:	83 e1 fd             	and    ecx,0xfffffffd
c0008dc7:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0008dcd:	74 cd                	je     c0008d9c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008dcf:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008dd4:	83 e0 ef             	and    eax,0xffffffef
c0008dd7:	83 f8 08             	cmp    eax,0x8
c0008dda:	76 c0                	jbe    c0008d9c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008ddc:	31 c0                	xor    eax,eax
c0008dde:	c3                   	ret    
c0008ddf:	90                   	nop

c0008de0 <ReservedFilename::isAtty()>:
c0008de0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008de4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008de7:	31 c0                	xor    eax,eax
c0008de9:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0008def:	74 09                	je     c0008dfa <ReservedFilename::isAtty()+0x1a>
c0008df1:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0008df7:	0f 94 c0             	sete   al
c0008dfa:	c3                   	ret    
c0008dfb:	90                   	nop

c0008dfc <ReservedFilename::write(unsigned long long, void*, int*)>:
c0008dfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e00:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008e04:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008e07:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008e0b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008e10:	75 08                	jne    c0008e1a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0008e12:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008e18:	eb 3d                	jmp    c0008e57 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008e1a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008e1f:	75 17                	jne    c0008e38 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0008e21:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008e26:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008e29:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008e2f:	8b 10                	mov    edx,DWORD PTR [eax]
c0008e31:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008e35:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0008e38:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0008e3d:	75 04                	jne    c0008e43 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0008e3f:	89 0a                	mov    DWORD PTR [edx],ecx
c0008e41:	eb 14                	jmp    c0008e57 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008e43:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0008e48:	74 c8                	je     c0008e12 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008e4a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008e4f:	83 e0 ef             	and    eax,0xffffffef
c0008e52:	83 f8 08             	cmp    eax,0x8
c0008e55:	76 bb                	jbe    c0008e12 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008e57:	31 c0                	xor    eax,eax
c0008e59:	c3                   	ret    

c0008e5a <UnixFile::getFileDescriptor()>:
c0008e5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008e61:	c3                   	ret    

c0008e62 <UnixFile::UnixFile(int)>:
c0008e62:	53                   	push   ebx
c0008e63:	83 ec 28             	sub    esp,0x28
c0008e66:	ba 48 da 01 c0       	mov    edx,0xc001da48
c0008e6b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008e6f:	89 10                	mov    DWORD PTR [eax],edx
c0008e71:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0008e79:	0f 8f 8c 01 00 00    	jg     c000900b <UnixFile::UnixFile(int)+0x1a9>
c0008e7f:	a1 00 fa 01 c0       	mov    eax,ds:0xc001fa00
c0008e84:	8d 50 01             	lea    edx,[eax+0x1]
c0008e87:	89 15 00 fa 01 c0    	mov    DWORD PTR ds:0xc001fa00,edx
c0008e8d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008e91:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008e94:	83 ec 08             	sub    esp,0x8
c0008e97:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008e9b:	68 38 0e 02 c0       	push   0xc0020e38
c0008ea0:	e8 63 36 01 00       	call   c001c508 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0008ea5:	83 c4 10             	add    esp,0x10
c0008ea8:	a0 34 0e 02 c0       	mov    al,ds:0xc0020e34
c0008ead:	83 f0 01             	xor    eax,0x1
c0008eb0:	84 c0                	test   al,al
c0008eb2:	0f 84 54 01 00 00    	je     c000900c <UnixFile::UnixFile(int)+0x1aa>
c0008eb8:	c6 05 34 0e 02 c0 01 	mov    BYTE PTR ds:0xc0020e34,0x1
c0008ebf:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0008ec7:	83 ec 0c             	sub    esp,0xc
c0008eca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008ece:	e8 e6 e8 ff ff       	call   c00077b9 <malloc>
c0008ed3:	83 c4 10             	add    esp,0x10
c0008ed6:	89 c3                	mov    ebx,eax
c0008ed8:	83 ec 08             	sub    esp,0x8
c0008edb:	68 03 ff ff 0f       	push   0xfffff03
c0008ee0:	53                   	push   ebx
c0008ee1:	e8 2c 01 00 00       	call   c0009012 <ReservedFilename::ReservedFilename(int)>
c0008ee6:	83 c4 10             	add    esp,0x10
c0008ee9:	89 1d 2c 0e 02 c0    	mov    DWORD PTR ds:0xc0020e2c,ebx
c0008eef:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0008ef7:	83 ec 0c             	sub    esp,0xc
c0008efa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008efe:	e8 b6 e8 ff ff       	call   c00077b9 <malloc>
c0008f03:	83 c4 10             	add    esp,0x10
c0008f06:	89 c3                	mov    ebx,eax
c0008f08:	83 ec 08             	sub    esp,0x8
c0008f0b:	68 01 ff ff 0f       	push   0xfffff01
c0008f10:	53                   	push   ebx
c0008f11:	e8 fc 00 00 00       	call   c0009012 <ReservedFilename::ReservedFilename(int)>
c0008f16:	83 c4 10             	add    esp,0x10
c0008f19:	89 1d 30 0e 02 c0    	mov    DWORD PTR ds:0xc0020e30,ebx
c0008f1f:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0008f27:	83 ec 0c             	sub    esp,0xc
c0008f2a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008f2e:	e8 86 e8 ff ff       	call   c00077b9 <malloc>
c0008f33:	83 c4 10             	add    esp,0x10
c0008f36:	89 c3                	mov    ebx,eax
c0008f38:	83 ec 08             	sub    esp,0x8
c0008f3b:	68 00 ff ff 0f       	push   0xfffff00
c0008f40:	53                   	push   ebx
c0008f41:	e8 cc 00 00 00       	call   c0009012 <ReservedFilename::ReservedFilename(int)>
c0008f46:	83 c4 10             	add    esp,0x10
c0008f49:	89 1d 24 0e 02 c0    	mov    DWORD PTR ds:0xc0020e24,ebx
c0008f4f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0008f57:	83 ec 0c             	sub    esp,0xc
c0008f5a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008f5e:	e8 56 e8 ff ff       	call   c00077b9 <malloc>
c0008f63:	83 c4 10             	add    esp,0x10
c0008f66:	89 c3                	mov    ebx,eax
c0008f68:	83 ec 08             	sub    esp,0x8
c0008f6b:	68 02 ff ff 0f       	push   0xfffff02
c0008f70:	53                   	push   ebx
c0008f71:	e8 9c 00 00 00       	call   c0009012 <ReservedFilename::ReservedFilename(int)>
c0008f76:	83 c4 10             	add    esp,0x10
c0008f79:	89 1d 28 0e 02 c0    	mov    DWORD PTR ds:0xc0020e28,ebx
c0008f7f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0008f87:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0008f8c:	7f 7e                	jg     c000900c <UnixFile::UnixFile(int)+0x1aa>
c0008f8e:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0008f96:	83 ec 0c             	sub    esp,0xc
c0008f99:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008f9d:	e8 17 e8 ff ff       	call   c00077b9 <malloc>
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	89 c3                	mov    ebx,eax
c0008fa7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fab:	05 10 ff ff 0f       	add    eax,0xfffff10
c0008fb0:	83 ec 08             	sub    esp,0x8
c0008fb3:	50                   	push   eax
c0008fb4:	53                   	push   ebx
c0008fb5:	e8 58 00 00 00       	call   c0009012 <ReservedFilename::ReservedFilename(int)>
c0008fba:	83 c4 10             	add    esp,0x10
c0008fbd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fc1:	89 1c 85 00 0e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf200],ebx
c0008fc8:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0008fd0:	83 ec 0c             	sub    esp,0xc
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 dd e7 ff ff       	call   c00077b9 <malloc>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	89 c3                	mov    ebx,eax
c0008fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fe5:	05 20 ff ff 0f       	add    eax,0xfffff20
c0008fea:	83 ec 08             	sub    esp,0x8
c0008fed:	50                   	push   eax
c0008fee:	53                   	push   ebx
c0008fef:	e8 1e 00 00 00       	call   c0009012 <ReservedFilename::ReservedFilename(int)>
c0008ff4:	83 c4 10             	add    esp,0x10
c0008ff7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008ffb:	89 1c 85 c0 0d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf240],ebx
c0009002:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009006:	e9 7c ff ff ff       	jmp    c0008f87 <UnixFile::UnixFile(int)+0x125>
c000900b:	90                   	nop
c000900c:	83 c4 28             	add    esp,0x28
c000900f:	5b                   	pop    ebx
c0009010:	c3                   	ret    
c0009011:	90                   	nop

c0009012 <ReservedFilename::ReservedFilename(int)>:
c0009012:	83 ec 0c             	sub    esp,0xc
c0009015:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009019:	83 ec 08             	sub    esp,0x8
c000901c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009020:	50                   	push   eax
c0009021:	e8 3c fe ff ff       	call   c0008e62 <UnixFile::UnixFile(int)>
c0009026:	83 c4 10             	add    esp,0x10
c0009029:	ba 64 da 01 c0       	mov    edx,0xc001da64
c000902e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009032:	89 10                	mov    DWORD PTR [eax],edx
c0009034:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009038:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000903c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000903f:	90                   	nop
c0009040:	83 c4 0c             	add    esp,0xc
c0009043:	c3                   	ret    

c0009044 <UnixFile::~UnixFile()>:
c0009044:	83 ec 1c             	sub    esp,0x1c
c0009047:	ba 48 da 01 c0       	mov    edx,0xc001da48
c000904c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009050:	89 10                	mov    DWORD PTR [eax],edx
c0009052:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009056:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009059:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000905e:	7f 73                	jg     c00090d3 <UnixFile::~UnixFile()+0x8f>
c0009060:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009068:	83 ec 0c             	sub    esp,0xc
c000906b:	68 38 0e 02 c0       	push   0xc0020e38
c0009070:	e8 67 35 01 00       	call   c001c5dc <LinkedList<UnixFile>::getFirstElement()>
c0009075:	83 c4 10             	add    esp,0x10
c0009078:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000907c:	83 ec 0c             	sub    esp,0xc
c000907f:	68 38 0e 02 c0       	push   0xc0020e38
c0009084:	e8 5b 35 01 00       	call   c001c5e4 <LinkedList<UnixFile>::removeFirst()>
c0009089:	83 c4 10             	add    esp,0x10
c000908c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009090:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009094:	74 40                	je     c00090d6 <UnixFile::~UnixFile()+0x92>
c0009096:	83 ec 08             	sub    esp,0x8
c0009099:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000909d:	68 38 0e 02 c0       	push   0xc0020e38
c00090a2:	e8 61 34 01 00       	call   c001c508 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00090a7:	83 c4 10             	add    esp,0x10
c00090aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00090ae:	8d 50 01             	lea    edx,[eax+0x1]
c00090b1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090b5:	3d 20 a1 07 00       	cmp    eax,0x7a120
c00090ba:	0f 94 c0             	sete   al
c00090bd:	84 c0                	test   al,al
c00090bf:	74 a7                	je     c0009068 <UnixFile::~UnixFile()+0x24>
c00090c1:	83 ec 0c             	sub    esp,0xc
c00090c4:	68 20 da 01 c0       	push   0xc001da20
c00090c9:	e8 95 70 00 00       	call   c0010163 <KePanic(char const*)>
c00090ce:	83 c4 10             	add    esp,0x10
c00090d1:	eb 95                	jmp    c0009068 <UnixFile::~UnixFile()+0x24>
c00090d3:	90                   	nop
c00090d4:	eb 01                	jmp    c00090d7 <UnixFile::~UnixFile()+0x93>
c00090d6:	90                   	nop
c00090d7:	90                   	nop
c00090d8:	83 c4 1c             	add    esp,0x1c
c00090db:	c3                   	ret    

c00090dc <UnixFile::~UnixFile()>:
c00090dc:	83 ec 0c             	sub    esp,0xc
c00090df:	83 ec 0c             	sub    esp,0xc
c00090e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090e6:	e8 59 ff ff ff       	call   c0009044 <UnixFile::~UnixFile()>
c00090eb:	83 c4 10             	add    esp,0x10
c00090ee:	83 ec 08             	sub    esp,0x8
c00090f1:	6a 0c                	push   0xc
c00090f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090f7:	e8 06 13 00 00       	call   c000a402 <operator delete(void*, unsigned long)>
c00090fc:	83 c4 10             	add    esp,0x10
c00090ff:	83 c4 0c             	add    esp,0xc
c0009102:	c3                   	ret    
c0009103:	90                   	nop

c0009104 <ReservedFilename::~ReservedFilename()>:
c0009104:	83 ec 0c             	sub    esp,0xc
c0009107:	ba 64 da 01 c0       	mov    edx,0xc001da64
c000910c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009110:	89 10                	mov    DWORD PTR [eax],edx
c0009112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009116:	83 ec 0c             	sub    esp,0xc
c0009119:	50                   	push   eax
c000911a:	e8 25 ff ff ff       	call   c0009044 <UnixFile::~UnixFile()>
c000911f:	83 c4 10             	add    esp,0x10
c0009122:	90                   	nop
c0009123:	83 c4 0c             	add    esp,0xc
c0009126:	c3                   	ret    
c0009127:	90                   	nop

c0009128 <ReservedFilename::~ReservedFilename()>:
c0009128:	83 ec 0c             	sub    esp,0xc
c000912b:	83 ec 0c             	sub    esp,0xc
c000912e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009132:	e8 cd ff ff ff       	call   c0009104 <ReservedFilename::~ReservedFilename()>
c0009137:	83 c4 10             	add    esp,0x10
c000913a:	83 ec 08             	sub    esp,0x8
c000913d:	6a 0c                	push   0xc
c000913f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009143:	e8 ba 12 00 00       	call   c000a402 <operator delete(void*, unsigned long)>
c0009148:	83 c4 10             	add    esp,0x10
c000914b:	83 c4 0c             	add    esp,0xc
c000914e:	c3                   	ret    

c000914f <getFromFileDescriptor(int)>:
c000914f:	53                   	push   ebx
c0009150:	83 ec 08             	sub    esp,0x8
c0009153:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009157:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000915d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0009163:	7f 2c                	jg     c0009191 <getFromFileDescriptor(int)+0x42>
c0009165:	83 ec 0c             	sub    esp,0xc
c0009168:	68 38 0e 02 c0       	push   0xc0020e38
c000916d:	e8 6a 34 01 00       	call   c001c5dc <LinkedList<UnixFile>::getFirstElement()>
c0009172:	83 c4 10             	add    esp,0x10
c0009175:	85 c0                	test   eax,eax
c0009177:	75 04                	jne    c000917d <getFromFileDescriptor(int)+0x2e>
c0009179:	31 c0                	xor    eax,eax
c000917b:	eb 6e                	jmp    c00091eb <getFromFileDescriptor(int)+0x9c>
c000917d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0009180:	74 69                	je     c00091eb <getFromFileDescriptor(int)+0x9c>
c0009182:	52                   	push   edx
c0009183:	52                   	push   edx
c0009184:	50                   	push   eax
c0009185:	68 38 0e 02 c0       	push   0xc0020e38
c000918a:	e8 f7 34 01 00       	call   c001c686 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000918f:	eb e1                	jmp    c0009172 <getFromFileDescriptor(int)+0x23>
c0009191:	a1 2c 0e 02 c0       	mov    eax,ds:0xc0020e2c
c0009196:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000919c:	74 4d                	je     c00091eb <getFromFileDescriptor(int)+0x9c>
c000919e:	a1 30 0e 02 c0       	mov    eax,ds:0xc0020e30
c00091a3:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00091a9:	74 40                	je     c00091eb <getFromFileDescriptor(int)+0x9c>
c00091ab:	a1 28 0e 02 c0       	mov    eax,ds:0xc0020e28
c00091b0:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00091b6:	74 33                	je     c00091eb <getFromFileDescriptor(int)+0x9c>
c00091b8:	a1 24 0e 02 c0       	mov    eax,ds:0xc0020e24
c00091bd:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00091c3:	74 26                	je     c00091eb <getFromFileDescriptor(int)+0x9c>
c00091c5:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00091cb:	83 f8 08             	cmp    eax,0x8
c00091ce:	77 09                	ja     c00091d9 <getFromFileDescriptor(int)+0x8a>
c00091d0:	8b 04 85 00 0e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf200]
c00091d7:	eb 12                	jmp    c00091eb <getFromFileDescriptor(int)+0x9c>
c00091d9:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00091df:	83 fb 08             	cmp    ebx,0x8
c00091e2:	77 95                	ja     c0009179 <getFromFileDescriptor(int)+0x2a>
c00091e4:	8b 04 9d c0 0d 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdf240]
c00091eb:	83 c4 08             	add    esp,0x8
c00091ee:	5b                   	pop    ebx
c00091ef:	c3                   	ret    

c00091f0 <__static_initialization_and_destruction_0(int, int)>:
c00091f0:	83 ec 0c             	sub    esp,0xc
c00091f3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00091f8:	75 34                	jne    c000922e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00091fa:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0009202:	75 2a                	jne    c000922e <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009204:	83 ec 0c             	sub    esp,0xc
c0009207:	68 38 0e 02 c0       	push   0xc0020e38
c000920c:	e8 b5 32 01 00       	call   c001c4c6 <LinkedList<UnixFile>::LinkedList()>
c0009211:	83 c4 10             	add    esp,0x10
c0009214:	83 ec 04             	sub    esp,0x4
c0009217:	68 94 f9 01 c0       	push   0xc001f994
c000921c:	68 38 0e 02 c0       	push   0xc0020e38
c0009221:	68 c4 c4 01 c0       	push   0xc001c4c4
c0009226:	e8 87 11 00 00       	call   c000a3b2 <__cxa_atexit>
c000922b:	83 c4 10             	add    esp,0x10
c000922e:	90                   	nop
c000922f:	83 c4 0c             	add    esp,0xc
c0009232:	c3                   	ret    

c0009233 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009233:	83 ec 0c             	sub    esp,0xc
c0009236:	83 ec 08             	sub    esp,0x8
c0009239:	68 ff ff 00 00       	push   0xffff
c000923e:	6a 01                	push   0x1
c0009240:	e8 ab ff ff ff       	call   c00091f0 <__static_initialization_and_destruction_0(int, int)>
c0009245:	83 c4 10             	add    esp,0x10
c0009248:	83 c4 0c             	add    esp,0xc
c000924b:	c3                   	ret    

c000924c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000924c:	53                   	push   ebx
c000924d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009251:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009255:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000925b:	89 c8                	mov    eax,ecx
c000925d:	d1 e8                	shr    eax,1
c000925f:	03 05 08 fa 01 c0    	add    eax,DWORD PTR ds:0xc001fa08
c0009265:	83 e1 01             	and    ecx,0x1
c0009268:	8a 10                	mov    dl,BYTE PTR [eax]
c000926a:	75 09                	jne    c0009275 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000926c:	83 e2 f0             	and    edx,0xfffffff0
c000926f:	09 da                	or     edx,ebx
c0009271:	88 10                	mov    BYTE PTR [eax],dl
c0009273:	5b                   	pop    ebx
c0009274:	c3                   	ret    
c0009275:	c1 e3 04             	shl    ebx,0x4
c0009278:	83 e2 0f             	and    edx,0xf
c000927b:	09 da                	or     edx,ebx
c000927d:	88 10                	mov    BYTE PTR [eax],dl
c000927f:	5b                   	pop    ebx
c0009280:	c3                   	ret    

c0009281 <Virt::getPageState(unsigned long)>:
c0009281:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009285:	8b 0d 08 fa 01 c0    	mov    ecx,DWORD PTR ds:0xc001fa08
c000928b:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0009291:	89 d0                	mov    eax,edx
c0009293:	d1 e8                	shr    eax,1
c0009295:	83 e2 01             	and    edx,0x1
c0009298:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000929b:	75 04                	jne    c00092a1 <Virt::getPageState(unsigned long)+0x20>
c000929d:	83 e0 0f             	and    eax,0xf
c00092a0:	c3                   	ret    
c00092a1:	c0 e8 04             	shr    al,0x4
c00092a4:	c3                   	ret    

c00092a5 <Virt::allocateKernelVirtualPages(int)>:
c00092a5:	55                   	push   ebp
c00092a6:	31 ed                	xor    ebp,ebp
c00092a8:	57                   	push   edi
c00092a9:	56                   	push   esi
c00092aa:	53                   	push   ebx
c00092ab:	31 db                	xor    ebx,ebx
c00092ad:	83 ec 1c             	sub    esp,0x1c
c00092b0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00092b4:	8b 3d 04 fa 01 c0    	mov    edi,DWORD PTR ds:0xc001fa04
c00092ba:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00092bf:	57                   	push   edi
c00092c0:	e8 bc ff ff ff       	call   c0009281 <Virt::getPageState(unsigned long)>
c00092c5:	5a                   	pop    edx
c00092c6:	84 c0                	test   al,al
c00092c8:	75 3a                	jne    c0009304 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00092ca:	85 db                	test   ebx,ebx
c00092cc:	75 02                	jne    c00092d0 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00092ce:	89 fd                	mov    ebp,edi
c00092d0:	43                   	inc    ebx
c00092d1:	39 f3                	cmp    ebx,esi
c00092d3:	74 5a                	je     c000932f <Virt::allocateKernelVirtualPages(int)+0x8a>
c00092d5:	47                   	inc    edi
c00092d6:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00092dc:	76 31                	jbe    c000930f <Virt::allocateKernelVirtualPages(int)+0x6a>
c00092de:	c7 05 04 fa 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001fa04,0xc8000
c00092e8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00092ed:	75 28                	jne    c0009317 <Virt::allocateKernelVirtualPages(int)+0x72>
c00092ef:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00092f4:	bf 00 80 0c 00       	mov    edi,0xc8000
c00092f9:	57                   	push   edi
c00092fa:	e8 82 ff ff ff       	call   c0009281 <Virt::getPageState(unsigned long)>
c00092ff:	5a                   	pop    edx
c0009300:	84 c0                	test   al,al
c0009302:	74 c6                	je     c00092ca <Virt::allocateKernelVirtualPages(int)+0x25>
c0009304:	31 db                	xor    ebx,ebx
c0009306:	47                   	inc    edi
c0009307:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000930d:	77 cf                	ja     c00092de <Virt::allocateKernelVirtualPages(int)+0x39>
c000930f:	89 3d 04 fa 01 c0    	mov    DWORD PTR ds:0xc001fa04,edi
c0009315:	eb a8                	jmp    c00092bf <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009317:	83 ec 0c             	sub    esp,0xc
c000931a:	68 78 da 01 c0       	push   0xc001da78
c000931f:	e8 3f 6e 00 00       	call   c0010163 <KePanic(char const*)>
c0009324:	8b 3d 04 fa 01 c0    	mov    edi,DWORD PTR ds:0xc001fa04
c000932a:	83 c4 10             	add    esp,0x10
c000932d:	eb 90                	jmp    c00092bf <Virt::allocateKernelVirtualPages(int)+0x1a>
c000932f:	89 2d 04 fa 01 c0    	mov    DWORD PTR ds:0xc001fa04,ebp
c0009335:	4b                   	dec    ebx
c0009336:	74 5f                	je     c0009397 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0009338:	85 f6                	test   esi,esi
c000933a:	74 3d                	je     c0009379 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000933c:	89 e8                	mov    eax,ebp
c000933e:	31 db                	xor    ebx,ebx
c0009340:	8d 7e ff             	lea    edi,[esi-0x1]
c0009343:	eb 14                	jmp    c0009359 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0009345:	6a 01                	push   0x1
c0009347:	43                   	inc    ebx
c0009348:	50                   	push   eax
c0009349:	e8 fe fe ff ff       	call   c000924c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000934e:	58                   	pop    eax
c000934f:	39 f3                	cmp    ebx,esi
c0009351:	5a                   	pop    edx
c0009352:	74 25                	je     c0009379 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009354:	a1 04 fa 01 c0       	mov    eax,ds:0xc001fa04
c0009359:	8d 50 01             	lea    edx,[eax+0x1]
c000935c:	85 db                	test   ebx,ebx
c000935e:	89 15 04 fa 01 c0    	mov    DWORD PTR ds:0xc001fa04,edx
c0009364:	74 20                	je     c0009386 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0009366:	39 df                	cmp    edi,ebx
c0009368:	75 db                	jne    c0009345 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000936a:	6a 03                	push   0x3
c000936c:	43                   	inc    ebx
c000936d:	50                   	push   eax
c000936e:	e8 d9 fe ff ff       	call   c000924c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009373:	59                   	pop    ecx
c0009374:	39 f3                	cmp    ebx,esi
c0009376:	58                   	pop    eax
c0009377:	75 db                	jne    c0009354 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009379:	83 c4 1c             	add    esp,0x1c
c000937c:	89 e8                	mov    eax,ebp
c000937e:	5b                   	pop    ebx
c000937f:	c1 e0 0c             	shl    eax,0xc
c0009382:	5e                   	pop    esi
c0009383:	5f                   	pop    edi
c0009384:	5d                   	pop    ebp
c0009385:	c3                   	ret    
c0009386:	6a 02                	push   0x2
c0009388:	bb 01 00 00 00       	mov    ebx,0x1
c000938d:	50                   	push   eax
c000938e:	e8 b9 fe ff ff       	call   c000924c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009393:	58                   	pop    eax
c0009394:	5a                   	pop    edx
c0009395:	eb bd                	jmp    c0009354 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009397:	6a 04                	push   0x4
c0009399:	8d 45 01             	lea    eax,[ebp+0x1]
c000939c:	55                   	push   ebp
c000939d:	a3 04 fa 01 c0       	mov    ds:0xc001fa04,eax
c00093a2:	e8 a5 fe ff ff       	call   c000924c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00093a7:	59                   	pop    ecx
c00093a8:	89 e8                	mov    eax,ebp
c00093aa:	5b                   	pop    ebx
c00093ab:	c1 e0 0c             	shl    eax,0xc
c00093ae:	83 c4 1c             	add    esp,0x1c
c00093b1:	5b                   	pop    ebx
c00093b2:	5e                   	pop    esi
c00093b3:	5f                   	pop    edi
c00093b4:	5d                   	pop    ebp
c00093b5:	c3                   	ret    

c00093b6 <Virt::freeSwapfilePage(unsigned long)>:
c00093b6:	53                   	push   ebx
c00093b7:	8b 15 4c 0e 02 c0    	mov    edx,DWORD PTR ds:0xc0020e4c
c00093bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00093c1:	b8 01 00 00 00       	mov    eax,0x1
c00093c6:	89 cb                	mov    ebx,ecx
c00093c8:	d3 e0                	shl    eax,cl
c00093ca:	c1 eb 05             	shr    ebx,0x5
c00093cd:	f7 d0                	not    eax
c00093cf:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c00093d2:	5b                   	pop    ebx
c00093d3:	c3                   	ret    

c00093d4 <Virt::swapIDToSector(unsigned long)>:
c00093d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00093d8:	0f af 05 0c fa 01 c0 	imul   eax,DWORD PTR ds:0xc001fa0c
c00093df:	03 05 14 fa 01 c0    	add    eax,DWORD PTR ds:0xc001fa14
c00093e5:	c3                   	ret    

c00093e6 <Virt::allocateSwapfilePage()>:
c00093e6:	55                   	push   ebp
c00093e7:	31 d2                	xor    edx,edx
c00093e9:	57                   	push   edi
c00093ea:	56                   	push   esi
c00093eb:	53                   	push   ebx
c00093ec:	83 ec 0c             	sub    esp,0xc
c00093ef:	8b 0d 0c fa 01 c0    	mov    ecx,DWORD PTR ds:0xc001fa0c
c00093f5:	a1 10 fa 01 c0       	mov    eax,ds:0xc001fa10
c00093fa:	f7 f1                	div    ecx
c00093fc:	39 0d 10 fa 01 c0    	cmp    DWORD PTR ds:0xc001fa10,ecx
c0009402:	72 2d                	jb     c0009431 <Virt::allocateSwapfilePage()+0x4b>
c0009404:	8b 35 4c 0e 02 c0    	mov    esi,DWORD PTR ds:0xc0020e4c
c000940a:	8b 16                	mov    edx,DWORD PTR [esi]
c000940c:	f6 c2 01             	test   dl,0x1
c000940f:	74 3c                	je     c000944d <Virt::allocateSwapfilePage()+0x67>
c0009411:	31 c9                	xor    ecx,ecx
c0009413:	bf 01 00 00 00       	mov    edi,0x1
c0009418:	eb 12                	jmp    c000942c <Virt::allocateSwapfilePage()+0x46>
c000941a:	89 fd                	mov    ebp,edi
c000941c:	89 ca                	mov    edx,ecx
c000941e:	d3 e5                	shl    ebp,cl
c0009420:	c1 ea 05             	shr    edx,0x5
c0009423:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009426:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009428:	85 ea                	test   edx,ebp
c000942a:	74 2a                	je     c0009456 <Virt::allocateSwapfilePage()+0x70>
c000942c:	41                   	inc    ecx
c000942d:	39 c8                	cmp    eax,ecx
c000942f:	77 e9                	ja     c000941a <Virt::allocateSwapfilePage()+0x34>
c0009431:	83 ec 0c             	sub    esp,0xc
c0009434:	68 df db 01 c0       	push   0xc001dbdf
c0009439:	e8 25 6d 00 00       	call   c0010163 <KePanic(char const*)>
c000943e:	83 c4 10             	add    esp,0x10
c0009441:	31 c9                	xor    ecx,ecx
c0009443:	83 c4 0c             	add    esp,0xc
c0009446:	89 c8                	mov    eax,ecx
c0009448:	5b                   	pop    ebx
c0009449:	5e                   	pop    esi
c000944a:	5f                   	pop    edi
c000944b:	5d                   	pop    ebp
c000944c:	c3                   	ret    
c000944d:	89 f3                	mov    ebx,esi
c000944f:	bd 01 00 00 00       	mov    ebp,0x1
c0009454:	31 c9                	xor    ecx,ecx
c0009456:	09 ea                	or     edx,ebp
c0009458:	89 c8                	mov    eax,ecx
c000945a:	89 13                	mov    DWORD PTR [ebx],edx
c000945c:	83 c4 0c             	add    esp,0xc
c000945f:	5b                   	pop    ebx
c0009460:	5e                   	pop    esi
c0009461:	5f                   	pop    edi
c0009462:	5d                   	pop    ebp
c0009463:	c3                   	ret    

c0009464 <Virt::virtualMemorySetup()>:
c0009464:	53                   	push   ebx
c0009465:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000946a:	6a 0f                	push   0xf
c000946c:	53                   	push   ebx
c000946d:	43                   	inc    ebx
c000946e:	e8 d9 fd ff ff       	call   c000924c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009473:	58                   	pop    eax
c0009474:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000947a:	5a                   	pop    edx
c000947b:	75 ed                	jne    c000946a <Virt::virtualMemorySetup()+0x6>
c000947d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009482:	6a 00                	push   0x0
c0009484:	53                   	push   ebx
c0009485:	43                   	inc    ebx
c0009486:	e8 c1 fd ff ff       	call   c000924c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000948b:	59                   	pop    ecx
c000948c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009492:	58                   	pop    eax
c0009493:	75 ed                	jne    c0009482 <Virt::virtualMemorySetup()+0x1e>
c0009495:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000949a:	6a 0f                	push   0xf
c000949c:	53                   	push   ebx
c000949d:	43                   	inc    ebx
c000949e:	e8 a9 fd ff ff       	call   c000924c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00094a3:	58                   	pop    eax
c00094a4:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00094aa:	5a                   	pop    edx
c00094ab:	75 ed                	jne    c000949a <Virt::virtualMemorySetup()+0x36>
c00094ad:	5b                   	pop    ebx
c00094ae:	c3                   	ret    

c00094af <Virt::setupPageSwapping(int)>:
c00094af:	53                   	push   ebx
c00094b0:	83 ec 0c             	sub    esp,0xc
c00094b3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00094b7:	a1 c8 32 02 c0       	mov    eax,ds:0xc00232c8
c00094bc:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00094c2:	8b 10                	mov    edx,DWORD PTR [eax]
c00094c4:	53                   	push   ebx
c00094c5:	c1 e3 0b             	shl    ebx,0xb
c00094c8:	68 f6 db 01 c0       	push   0xc001dbf6
c00094cd:	50                   	push   eax
c00094ce:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00094d1:	89 1d 10 fa 01 c0    	mov    DWORD PTR ds:0xc001fa10,ebx
c00094d7:	c6 05 18 fa 01 c0 43 	mov    BYTE PTR ds:0xc001fa18,0x43
c00094de:	c1 eb 08             	shr    ebx,0x8
c00094e1:	a3 14 fa 01 c0       	mov    ds:0xc001fa14,eax
c00094e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00094e9:	c7 05 0c fa 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001fa0c,0x8
c00094f3:	e8 c1 e2 ff ff       	call   c00077b9 <malloc>
c00094f8:	83 c4 0c             	add    esp,0xc
c00094fb:	89 c1                	mov    ecx,eax
c00094fd:	a3 4c 0e 02 c0       	mov    ds:0xc0020e4c,eax
c0009502:	31 d2                	xor    edx,edx
c0009504:	a1 10 fa 01 c0       	mov    eax,ds:0xc001fa10
c0009509:	f7 35 0c fa 01 c0    	div    DWORD PTR ds:0xc001fa0c
c000950f:	c1 e8 05             	shr    eax,0x5
c0009512:	50                   	push   eax
c0009513:	6a 00                	push   0x0
c0009515:	51                   	push   ecx
c0009516:	e8 b5 6f ff ff       	call   c00004d0 <memset>
c000951b:	83 c4 18             	add    esp,0x18
c000951e:	5b                   	pop    ebx
c000951f:	c3                   	ret    

c0009520 <VAS::VAS()>:
c0009520:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009524:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000952b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000952f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009536:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000953a:	a3 50 0e 02 c0       	mov    ds:0xc0020e50,eax
c000953f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009543:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009547:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000954b:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000954e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009552:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009559:	90                   	nop
c000955a:	c3                   	ret    
c000955b:	90                   	nop

c000955c <VAS::VAS(VAS*)>:
c000955c:	83 ec 0c             	sub    esp,0xc
c000955f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009563:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000956a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000956e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009575:	83 ec 0c             	sub    esp,0xc
c0009578:	68 98 da 01 c0       	push   0xc001da98
c000957d:	e8 e1 6b 00 00       	call   c0010163 <KePanic(char const*)>
c0009582:	83 c4 10             	add    esp,0x10
c0009585:	90                   	nop
c0009586:	83 c4 0c             	add    esp,0xc
c0009589:	c3                   	ret    

c000958a <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000958a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000958e:	89 c2                	mov    edx,eax
c0009590:	c1 e8 0a             	shr    eax,0xa
c0009593:	c1 ea 16             	shr    edx,0x16
c0009596:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000959b:	19 c9                	sbb    ecx,ecx
c000959d:	c1 e2 0c             	shl    edx,0xc
c00095a0:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00095a6:	25 fc 0f 00 00       	and    eax,0xffc
c00095ab:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00095b2:	01 d0                	add    eax,edx
c00095b4:	c3                   	ret    
c00095b5:	90                   	nop

c00095b6 <VAS::getPageTableEntry(unsigned long)>:
c00095b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00095ba:	89 ca                	mov    edx,ecx
c00095bc:	c1 e9 0a             	shr    ecx,0xa
c00095bf:	c1 ea 16             	shr    edx,0x16
c00095c2:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00095c8:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00095ce:	c1 e0 0c             	shl    eax,0xc
c00095d1:	8d 04 08             	lea    eax,[eax+ecx*1]
c00095d4:	c3                   	ret    

c00095d5 <Virt::freeKernelVirtualPages(unsigned long)>:
c00095d5:	57                   	push   edi
c00095d6:	56                   	push   esi
c00095d7:	be 01 00 00 00       	mov    esi,0x1
c00095dc:	53                   	push   ebx
c00095dd:	83 ec 10             	sub    esp,0x10
c00095e0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00095e4:	c1 eb 0c             	shr    ebx,0xc
c00095e7:	eb 3f                	jmp    c0009628 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c00095e9:	83 ec 08             	sub    esp,0x8
c00095ec:	a1 50 0e 02 c0       	mov    eax,ds:0xc0020e50
c00095f1:	57                   	push   edi
c00095f2:	50                   	push   eax
c00095f3:	e8 be ff ff ff       	call   c00095b6 <VAS::getPageTableEntry(unsigned long)>
c00095f8:	83 c4 10             	add    esp,0x10
c00095fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00095fd:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009601:	f6 c4 04             	test   ah,0x4
c0009604:	75 60                	jne    c0009666 <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c0009606:	80 fa 04             	cmp    dl,0x4
c0009609:	74 79                	je     c0009684 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c000960b:	80 fa 02             	cmp    dl,0x2
c000960e:	0f 84 89 00 00 00    	je     c000969d <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c0009614:	80 fa 03             	cmp    dl,0x3
c0009617:	0f 84 ae 00 00 00    	je     c00096cb <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c000961d:	fe ca                	dec    dl
c000961f:	0f 84 93 00 00 00    	je     c00096b8 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009625:	43                   	inc    ebx
c0009626:	31 f6                	xor    esi,esi
c0009628:	53                   	push   ebx
c0009629:	89 df                	mov    edi,ebx
c000962b:	e8 51 fc ff ff       	call   c0009281 <Virt::getPageState(unsigned long)>
c0009630:	c1 e7 0c             	shl    edi,0xc
c0009633:	5a                   	pop    edx
c0009634:	84 c0                	test   al,al
c0009636:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000963a:	75 ad                	jne    c00095e9 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000963c:	83 ec 0c             	sub    esp,0xc
c000963f:	68 0d dc 01 c0       	push   0xc001dc0d
c0009644:	e8 1a 6b 00 00       	call   c0010163 <KePanic(char const*)>
c0009649:	5a                   	pop    edx
c000964a:	59                   	pop    ecx
c000964b:	57                   	push   edi
c000964c:	8b 3d 50 0e 02 c0    	mov    edi,DWORD PTR ds:0xc0020e50
c0009652:	57                   	push   edi
c0009653:	e8 5e ff ff ff       	call   c00095b6 <VAS::getPageTableEntry(unsigned long)>
c0009658:	83 c4 10             	add    esp,0x10
c000965b:	8b 00                	mov    eax,DWORD PTR [eax]
c000965d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009661:	f6 c4 04             	test   ah,0x4
c0009664:	74 bf                	je     c0009625 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009666:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000966a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000966f:	83 ec 0c             	sub    esp,0xc
c0009672:	50                   	push   eax
c0009673:	e8 db e3 ff ff       	call   c0007a53 <Phys::freePage(unsigned long)>
c0009678:	83 c4 10             	add    esp,0x10
c000967b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000967f:	80 fa 04             	cmp    dl,0x4
c0009682:	75 87                	jne    c000960b <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0009684:	89 f0                	mov    eax,esi
c0009686:	84 c0                	test   al,al
c0009688:	75 47                	jne    c00096d1 <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c000968a:	c7 44 24 20 bc da 01 c0 	mov    DWORD PTR [esp+0x20],0xc001dabc
c0009692:	83 c4 10             	add    esp,0x10
c0009695:	5b                   	pop    ebx
c0009696:	5e                   	pop    esi
c0009697:	5f                   	pop    edi
c0009698:	e9 c6 6a 00 00       	jmp    c0010163 <KePanic(char const*)>
c000969d:	89 f0                	mov    eax,esi
c000969f:	84 c0                	test   al,al
c00096a1:	75 15                	jne    c00096b8 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c00096a3:	83 ec 0c             	sub    esp,0xc
c00096a6:	68 29 dc 01 c0       	push   0xc001dc29
c00096ab:	e8 b3 6a 00 00       	call   c0010163 <KePanic(char const*)>
c00096b0:	83 c4 10             	add    esp,0x10
c00096b3:	e9 6d ff ff ff       	jmp    c0009625 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00096b8:	83 ec 08             	sub    esp,0x8
c00096bb:	6a 00                	push   0x0
c00096bd:	53                   	push   ebx
c00096be:	e8 89 fb ff ff       	call   c000924c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096c3:	83 c4 10             	add    esp,0x10
c00096c6:	e9 5a ff ff ff       	jmp    c0009625 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00096cb:	89 f0                	mov    eax,esi
c00096cd:	84 c0                	test   al,al
c00096cf:	75 15                	jne    c00096e6 <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c00096d1:	83 ec 08             	sub    esp,0x8
c00096d4:	6a 00                	push   0x0
c00096d6:	53                   	push   ebx
c00096d7:	e8 70 fb ff ff       	call   c000924c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096dc:	83 c4 10             	add    esp,0x10
c00096df:	83 c4 10             	add    esp,0x10
c00096e2:	5b                   	pop    ebx
c00096e3:	5e                   	pop    esi
c00096e4:	5f                   	pop    edi
c00096e5:	c3                   	ret    
c00096e6:	c7 44 24 20 45 dc 01 c0 	mov    DWORD PTR [esp+0x20],0xc001dc45
c00096ee:	83 c4 10             	add    esp,0x10
c00096f1:	5b                   	pop    ebx
c00096f2:	5e                   	pop    esi
c00096f3:	5f                   	pop    edi
c00096f4:	e9 6a 6a 00 00       	jmp    c0010163 <KePanic(char const*)>
c00096f9:	90                   	nop

c00096fa <VAS::freeAllocatedPages(unsigned long)>:
c00096fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00096fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009702:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009706:	74 09                	je     c0009711 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009708:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000970c:	e9 c4 fe ff ff       	jmp    c00095d5 <Virt::freeKernelVirtualPages(unsigned long)>
c0009711:	c7 44 24 04 e0 da 01 c0 	mov    DWORD PTR [esp+0x4],0xc001dae0
c0009719:	e9 da 0d 00 00       	jmp    c000a4f8 <Dbg::kprintf(char const*, ...)>

c000971e <VAS::virtualToPhysical(unsigned long)>:
c000971e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009722:	50                   	push   eax
c0009723:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009727:	52                   	push   edx
c0009728:	e8 89 fe ff ff       	call   c00095b6 <VAS::getPageTableEntry(unsigned long)>
c000972d:	59                   	pop    ecx
c000972e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009730:	5a                   	pop    edx
c0009731:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009736:	c3                   	ret    
c0009737:	90                   	nop

c0009738 <VAS::reflagRange(unsigned long, int, int, int)>:
c0009738:	55                   	push   ebp
c0009739:	57                   	push   edi
c000973a:	56                   	push   esi
c000973b:	53                   	push   ebx
c000973c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009740:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009744:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009748:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000974c:	85 db                	test   ebx,ebx
c000974e:	7e 22                	jle    c0009772 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0009750:	c1 e3 0c             	shl    ebx,0xc
c0009753:	01 f3                	add    ebx,esi
c0009755:	56                   	push   esi
c0009756:	81 c6 00 10 00 00    	add    esi,0x1000
c000975c:	55                   	push   ebp
c000975d:	e8 54 fe ff ff       	call   c00095b6 <VAS::getPageTableEntry(unsigned long)>
c0009762:	5a                   	pop    edx
c0009763:	59                   	pop    ecx
c0009764:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009766:	21 f9                	and    ecx,edi
c0009768:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000976c:	39 f3                	cmp    ebx,esi
c000976e:	89 08                	mov    DWORD PTR [eax],ecx
c0009770:	75 e3                	jne    c0009755 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0009772:	5b                   	pop    ebx
c0009773:	5e                   	pop    esi
c0009774:	5f                   	pop    edi
c0009775:	5d                   	pop    ebp
c0009776:	c3                   	ret    
c0009777:	90                   	nop

c0009778 <VAS::setToWriteCombining(unsigned long, int)>:
c0009778:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c000977d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009783:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c000978a:	75 01                	jne    c000978d <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000978c:	c3                   	ret    
c000978d:	68 80 00 00 00       	push   0x80
c0009792:	6a ff                	push   0xffffffff
c0009794:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009798:	50                   	push   eax
c0009799:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000979d:	52                   	push   edx
c000979e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00097a2:	51                   	push   ecx
c00097a3:	e8 90 ff ff ff       	call   c0009738 <VAS::reflagRange(unsigned long, int, int, int)>
c00097a8:	83 c4 14             	add    esp,0x14
c00097ab:	c3                   	ret    

c00097ac <VAS::mapOtherVASIn(bool, VAS*)>:
c00097ac:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00097b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00097b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00097b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097bc:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00097bf:	19 c0                	sbb    eax,eax
c00097c1:	83 ca 03             	or     edx,0x3
c00097c4:	83 e0 fc             	and    eax,0xfffffffc
c00097c7:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00097ce:	0f 20 d8             	mov    eax,cr3
c00097d1:	0f 22 d8             	mov    cr3,eax
c00097d4:	c3                   	ret    
c00097d5:	90                   	nop

c00097d6 <VAS::~VAS()>:
c00097d6:	83 ec 2c             	sub    esp,0x2c
c00097d9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00097e1:	fa                   	cli    
c00097e2:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c00097e7:	40                   	inc    eax
c00097e8:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c00097ed:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00097f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00097f4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00097f7:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00097fd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009801:	6a 01                	push   0x1
c0009803:	50                   	push   eax
c0009804:	e8 a3 ff ff ff       	call   c00097ac <VAS::mapOtherVASIn(bool, VAS*)>
c0009809:	83 c4 0c             	add    esp,0xc
c000980c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009814:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000981c:	0f 8f d4 00 00 00    	jg     c00098f6 <VAS::~VAS()+0x120>
c0009822:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009826:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009829:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000982d:	c1 e2 02             	shl    edx,0x2
c0009830:	01 d0                	add    eax,edx
c0009832:	8b 00                	mov    eax,DWORD PTR [eax]
c0009834:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000983c:	83 e0 01             	and    eax,0x1
c000983f:	0f 84 a8 00 00 00    	je     c00098ed <VAS::~VAS()+0x117>
c0009845:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000984d:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009855:	7f 72                	jg     c00098c9 <VAS::~VAS()+0xf3>
c0009857:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000985b:	c1 e0 0a             	shl    eax,0xa
c000985e:	89 c2                	mov    edx,eax
c0009860:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009864:	01 d0                	add    eax,edx
c0009866:	c1 e0 0c             	shl    eax,0xc
c0009869:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000986d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009872:	8b 00                	mov    eax,DWORD PTR [eax]
c0009874:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009877:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000987d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009881:	6a 01                	push   0x1
c0009883:	50                   	push   eax
c0009884:	e8 01 fd ff ff       	call   c000958a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009889:	83 c4 0c             	add    esp,0xc
c000988c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009890:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009894:	8b 00                	mov    eax,DWORD PTR [eax]
c0009896:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000989a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000989e:	25 01 04 00 00       	and    eax,0x401
c00098a3:	3d 01 04 00 00       	cmp    eax,0x401
c00098a8:	75 19                	jne    c00098c3 <VAS::~VAS()+0xed>
c00098aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00098ae:	25 00 f0 ff ff       	and    eax,0xfffff000
c00098b3:	83 ec 0c             	sub    esp,0xc
c00098b6:	50                   	push   eax
c00098b7:	e8 97 e1 ff ff       	call   c0007a53 <Phys::freePage(unsigned long)>
c00098bc:	83 c4 10             	add    esp,0x10
c00098bf:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00098c3:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00098c7:	eb 84                	jmp    c000984d <VAS::~VAS()+0x77>
c00098c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098cd:	25 00 04 00 00       	and    eax,0x400
c00098d2:	74 19                	je     c00098ed <VAS::~VAS()+0x117>
c00098d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098d8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00098dd:	83 ec 0c             	sub    esp,0xc
c00098e0:	50                   	push   eax
c00098e1:	e8 6d e1 ff ff       	call   c0007a53 <Phys::freePage(unsigned long)>
c00098e6:	83 c4 10             	add    esp,0x10
c00098e9:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00098ed:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00098f1:	e9 1e ff ff ff       	jmp    c0009814 <VAS::~VAS()+0x3e>
c00098f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00098fa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00098fd:	83 ec 0c             	sub    esp,0xc
c0009900:	50                   	push   eax
c0009901:	e8 cf fc ff ff       	call   c00095d5 <Virt::freeKernelVirtualPages(unsigned long)>
c0009906:	83 c4 10             	add    esp,0x10
c0009909:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000990d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009910:	83 ec 0c             	sub    esp,0xc
c0009913:	50                   	push   eax
c0009914:	e8 3a e1 ff ff       	call   c0007a53 <Phys::freePage(unsigned long)>
c0009919:	83 c4 10             	add    esp,0x10
c000991c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009920:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0009925:	48                   	dec    eax
c0009926:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c000992b:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0009930:	85 c0                	test   eax,eax
c0009932:	75 01                	jne    c0009935 <VAS::~VAS()+0x15f>
c0009934:	fb                   	sti    
c0009935:	90                   	nop
c0009936:	83 c4 2c             	add    esp,0x2c
c0009939:	c3                   	ret    

c000993a <VAS::mapPage(unsigned long, unsigned long, int)>:
c000993a:	55                   	push   ebp
c000993b:	57                   	push   edi
c000993c:	56                   	push   esi
c000993d:	53                   	push   ebx
c000993e:	83 ec 1c             	sub    esp,0x1c
c0009941:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009945:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009949:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000994f:	77 0b                	ja     c000995c <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c0009951:	0f 20 d8             	mov    eax,cr3
c0009954:	0f 20 d8             	mov    eax,cr3
c0009957:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000995a:	75 47                	jne    c00099a3 <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c000995c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009960:	09 d8                	or     eax,ebx
c0009962:	a9 ff 0f 00 00       	test   eax,0xfff
c0009967:	75 57                	jne    c00099c0 <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c0009969:	89 de                	mov    esi,ebx
c000996b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000996e:	c1 ee 16             	shr    esi,0x16
c0009971:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009978:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000997c:	74 54                	je     c00099d2 <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c000997e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009982:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009988:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000998c:	c1 e6 0c             	shl    esi,0xc
c000998f:	c1 eb 0a             	shr    ebx,0xa
c0009992:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009998:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000999b:	83 c4 1c             	add    esp,0x1c
c000999e:	5b                   	pop    ebx
c000999f:	5e                   	pop    esi
c00099a0:	5f                   	pop    edi
c00099a1:	5d                   	pop    ebp
c00099a2:	c3                   	ret    
c00099a3:	83 ec 0c             	sub    esp,0xc
c00099a6:	68 04 db 01 c0       	push   0xc001db04
c00099ab:	e8 48 0b 00 00       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c00099b0:	83 c4 10             	add    esp,0x10
c00099b3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00099b7:	09 d8                	or     eax,ebx
c00099b9:	a9 ff 0f 00 00       	test   eax,0xfff
c00099be:	74 a9                	je     c0009969 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c00099c0:	83 ec 0c             	sub    esp,0xc
c00099c3:	68 6c db 01 c0       	push   0xc001db6c
c00099c8:	e8 96 67 00 00       	call   c0010163 <KePanic(char const*)>
c00099cd:	83 c4 10             	add    esp,0x10
c00099d0:	eb 97                	jmp    c0009969 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c00099d2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00099d6:	e8 da e0 ff ff       	call   c0007ab5 <Phys::allocatePage()>
c00099db:	83 ec 0c             	sub    esp,0xc
c00099de:	89 c5                	mov    ebp,eax
c00099e0:	8b 0d 50 0e 02 c0    	mov    ecx,DWORD PTR ds:0xc0020e50
c00099e6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00099ea:	6a 01                	push   0x1
c00099ec:	e8 b4 f8 ff ff       	call   c00092a5 <Virt::allocateKernelVirtualPages(int)>
c00099f1:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00099f8:	6a 01                	push   0x1
c00099fa:	50                   	push   eax
c00099fb:	55                   	push   ebp
c00099fc:	81 cd 07 04 00 00    	or     ebp,0x407
c0009a02:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009a06:	51                   	push   ecx
c0009a07:	e8 28 02 00 00       	call   c0009c34 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009a0c:	83 c4 1c             	add    esp,0x1c
c0009a0f:	68 00 10 00 00       	push   0x1000
c0009a14:	6a 00                	push   0x0
c0009a16:	50                   	push   eax
c0009a17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a1b:	e8 b0 6a ff ff       	call   c00004d0 <memset>
c0009a20:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009a24:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a27:	e8 a9 fb ff ff       	call   c00095d5 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a2c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009a30:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009a33:	83 c4 10             	add    esp,0x10
c0009a36:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009a39:	e9 40 ff ff ff       	jmp    c000997e <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c0009a3e <VAS::allocatePages(int, int)>:
c0009a3e:	55                   	push   ebp
c0009a3f:	57                   	push   edi
c0009a40:	56                   	push   esi
c0009a41:	53                   	push   ebx
c0009a42:	83 ec 1c             	sub    esp,0x1c
c0009a45:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009a49:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c0009a4e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009a54:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009a5a:	83 e0 01             	and    eax,0x1
c0009a5d:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0009a61:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009a65:	0f 85 cc 00 00 00    	jne    c0009b37 <VAS::allocatePages(int, int)+0xf9>
c0009a6b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a72:	85 c0                	test   eax,eax
c0009a74:	0f 84 a1 00 00 00    	je     c0009b1b <VAS::allocatePages(int, int)+0xdd>
c0009a7a:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009a7e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a82:	c1 e6 0c             	shl    esi,0xc
c0009a85:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0009a89:	85 c0                	test   eax,eax
c0009a8b:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0009a8e:	7e 33                	jle    c0009ac3 <VAS::allocatePages(int, int)+0x85>
c0009a90:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0009a94:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009a98:	81 cd 00 04 00 00    	or     ebp,0x400
c0009a9e:	e8 12 e0 ff ff       	call   c0007ab5 <Phys::allocatePage()>
c0009aa3:	55                   	push   ebp
c0009aa4:	53                   	push   ebx
c0009aa5:	50                   	push   eax
c0009aa6:	57                   	push   edi
c0009aa7:	e8 8e fe ff ff       	call   c000993a <VAS::mapPage(unsigned long, unsigned long, int)>
c0009aac:	83 c4 10             	add    esp,0x10
c0009aaf:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009ab4:	74 03                	je     c0009ab9 <VAS::allocatePages(int, int)+0x7b>
c0009ab6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009ab9:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009abf:	39 de                	cmp    esi,ebx
c0009ac1:	75 db                	jne    c0009a9e <VAS::allocatePages(int, int)+0x60>
c0009ac3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009ac8:	75 12                	jne    c0009adc <VAS::allocatePages(int, int)+0x9e>
c0009aca:	0f 20 d8             	mov    eax,cr3
c0009acd:	0f 22 d8             	mov    cr3,eax
c0009ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ad4:	83 c4 1c             	add    esp,0x1c
c0009ad7:	5b                   	pop    ebx
c0009ad8:	5e                   	pop    esi
c0009ad9:	5f                   	pop    edi
c0009ada:	5d                   	pop    ebp
c0009adb:	c3                   	ret    
c0009adc:	c1 ee 0a             	shr    esi,0xa
c0009adf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009ae3:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009ae9:	c1 eb 0a             	shr    ebx,0xa
c0009aec:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009af2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009af8:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009afe:	39 c3                	cmp    ebx,eax
c0009b00:	77 ce                	ja     c0009ad0 <VAS::allocatePages(int, int)+0x92>
c0009b02:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009b05:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009b0b:	39 d8                	cmp    eax,ebx
c0009b0d:	73 f3                	jae    c0009b02 <VAS::allocatePages(int, int)+0xc4>
c0009b0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b13:	83 c4 1c             	add    esp,0x1c
c0009b16:	5b                   	pop    ebx
c0009b17:	5e                   	pop    esi
c0009b18:	5f                   	pop    edi
c0009b19:	5d                   	pop    ebp
c0009b1a:	c3                   	ret    
c0009b1b:	83 ec 0c             	sub    esp,0xc
c0009b1e:	68 90 db 01 c0       	push   0xc001db90
c0009b23:	e8 3b 66 00 00       	call   c0010163 <KePanic(char const*)>
c0009b28:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009b2b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009b2f:	83 c4 10             	add    esp,0x10
c0009b32:	e9 43 ff ff ff       	jmp    c0009a7a <VAS::allocatePages(int, int)+0x3c>
c0009b37:	83 ec 0c             	sub    esp,0xc
c0009b3a:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0009b3e:	51                   	push   ecx
c0009b3f:	e8 61 f7 ff ff       	call   c00092a5 <Virt::allocateKernelVirtualPages(int)>
c0009b44:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009b48:	83 c4 10             	add    esp,0x10
c0009b4b:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009b50:	0f 87 9b 00 00 00    	ja     c0009bf1 <VAS::allocatePages(int, int)+0x1b3>
c0009b56:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009b5a:	85 d2                	test   edx,edx
c0009b5c:	7e 3c                	jle    c0009b9a <VAS::allocatePages(int, int)+0x15c>
c0009b5e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009b62:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009b66:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009b6a:	c1 e5 0c             	shl    ebp,0xc
c0009b6d:	81 ce 00 04 00 00    	or     esi,0x400
c0009b73:	01 dd                	add    ebp,ebx
c0009b75:	e8 3b df ff ff       	call   c0007ab5 <Phys::allocatePage()>
c0009b7a:	56                   	push   esi
c0009b7b:	53                   	push   ebx
c0009b7c:	50                   	push   eax
c0009b7d:	57                   	push   edi
c0009b7e:	e8 b7 fd ff ff       	call   c000993a <VAS::mapPage(unsigned long, unsigned long, int)>
c0009b83:	83 c4 10             	add    esp,0x10
c0009b86:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b8b:	74 03                	je     c0009b90 <VAS::allocatePages(int, int)+0x152>
c0009b8d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009b90:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009b96:	39 dd                	cmp    ebp,ebx
c0009b98:	75 db                	jne    c0009b75 <VAS::allocatePages(int, int)+0x137>
c0009b9a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b9f:	0f 84 25 ff ff ff    	je     c0009aca <VAS::allocatePages(int, int)+0x8c>
c0009ba5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009ba9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009bad:	89 d3                	mov    ebx,edx
c0009baf:	c1 e0 0c             	shl    eax,0xc
c0009bb2:	c1 eb 0a             	shr    ebx,0xa
c0009bb5:	01 d0                	add    eax,edx
c0009bb7:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009bbd:	c1 e8 0a             	shr    eax,0xa
c0009bc0:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009bc6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009bcb:	2d 00 00 40 00       	sub    eax,0x400000
c0009bd0:	39 c3                	cmp    ebx,eax
c0009bd2:	0f 87 f8 fe ff ff    	ja     c0009ad0 <VAS::allocatePages(int, int)+0x92>
c0009bd8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009bdb:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009be1:	39 d8                	cmp    eax,ebx
c0009be3:	73 f3                	jae    c0009bd8 <VAS::allocatePages(int, int)+0x19a>
c0009be5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009be9:	83 c4 1c             	add    esp,0x1c
c0009bec:	5b                   	pop    ebx
c0009bed:	5e                   	pop    esi
c0009bee:	5f                   	pop    edi
c0009bef:	5d                   	pop    ebp
c0009bf0:	c3                   	ret    
c0009bf1:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c0009bf6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009bfc:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009c03:	0f 84 4d ff ff ff    	je     c0009b56 <VAS::allocatePages(int, int)+0x118>
c0009c09:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0009c11:	e9 40 ff ff ff       	jmp    c0009b56 <VAS::allocatePages(int, int)+0x118>

c0009c16 <VAS::setCPUSpecific(unsigned long)>:
c0009c16:	83 ec 0c             	sub    esp,0xc
c0009c19:	6a 05                	push   0x5
c0009c1b:	68 00 00 40 c2       	push   0xc2400000
c0009c20:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009c24:	50                   	push   eax
c0009c25:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009c29:	52                   	push   edx
c0009c2a:	e8 0b fd ff ff       	call   c000993a <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c2f:	83 c4 1c             	add    esp,0x1c
c0009c32:	c3                   	ret    
c0009c33:	90                   	nop

c0009c34 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009c34:	55                   	push   ebp
c0009c35:	57                   	push   edi
c0009c36:	56                   	push   esi
c0009c37:	53                   	push   ebx
c0009c38:	83 ec 1c             	sub    esp,0x1c
c0009c3b:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c0009c40:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009c44:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009c4a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009c4e:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009c54:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009c58:	83 e0 01             	and    eax,0x1
c0009c5b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009c5f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c63:	85 c0                	test   eax,eax
c0009c65:	7e 39                	jle    c0009ca0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0009c67:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c6b:	89 f3                	mov    ebx,esi
c0009c6d:	c1 e0 0c             	shl    eax,0xc
c0009c70:	01 f0                	add    eax,esi
c0009c72:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c76:	55                   	push   ebp
c0009c77:	53                   	push   ebx
c0009c78:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c7c:	29 f0                	sub    eax,esi
c0009c7e:	01 d8                	add    eax,ebx
c0009c80:	50                   	push   eax
c0009c81:	57                   	push   edi
c0009c82:	e8 b3 fc ff ff       	call   c000993a <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c87:	83 c4 10             	add    esp,0x10
c0009c8a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c8f:	74 03                	je     c0009c94 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0009c91:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009c94:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009c9a:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0009c9e:	75 d6                	jne    c0009c76 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0009ca0:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009ca5:	75 10                	jne    c0009cb7 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0009ca7:	0f 20 d8             	mov    eax,cr3
c0009caa:	0f 22 d8             	mov    cr3,eax
c0009cad:	83 c4 1c             	add    esp,0x1c
c0009cb0:	89 f0                	mov    eax,esi
c0009cb2:	5b                   	pop    ebx
c0009cb3:	5e                   	pop    esi
c0009cb4:	5f                   	pop    edi
c0009cb5:	5d                   	pop    ebp
c0009cb6:	c3                   	ret    
c0009cb7:	89 f3                	mov    ebx,esi
c0009cb9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009cbd:	c1 eb 0a             	shr    ebx,0xa
c0009cc0:	c1 e0 0c             	shl    eax,0xc
c0009cc3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009cc9:	01 f0                	add    eax,esi
c0009ccb:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009cd1:	c1 e8 0a             	shr    eax,0xa
c0009cd4:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cd9:	2d 00 00 40 00       	sub    eax,0x400000
c0009cde:	39 c3                	cmp    ebx,eax
c0009ce0:	77 cb                	ja     c0009cad <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0009ce2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009ce5:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ceb:	39 d8                	cmp    eax,ebx
c0009ced:	73 f3                	jae    c0009ce2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0009cef:	83 c4 1c             	add    esp,0x1c
c0009cf2:	89 f0                	mov    eax,esi
c0009cf4:	5b                   	pop    ebx
c0009cf5:	5e                   	pop    esi
c0009cf6:	5f                   	pop    edi
c0009cf7:	5d                   	pop    ebp
c0009cf8:	c3                   	ret    
c0009cf9:	90                   	nop

c0009cfa <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009cfa:	55                   	push   ebp
c0009cfb:	57                   	push   edi
c0009cfc:	56                   	push   esi
c0009cfd:	53                   	push   ebx
c0009cfe:	83 ec 1c             	sub    esp,0x1c
c0009d01:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009d05:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d09:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0009d0d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009d11:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d16:	75 4a                	jne    c0009d62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0009d18:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009d1c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d1f:	c1 eb 16             	shr    ebx,0x16
c0009d22:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0009d29:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0009d2d:	74 4d                	je     c0009d7c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0009d2f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009d33:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009d37:	c1 e8 0a             	shr    eax,0xa
c0009d3a:	80 fa 01             	cmp    dl,0x1
c0009d3d:	19 d2                	sbb    edx,edx
c0009d3f:	c1 e3 0c             	shl    ebx,0xc
c0009d42:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0009d46:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009d4c:	25 fc 0f 00 00       	and    eax,0xffc
c0009d51:	01 d8                	add    eax,ebx
c0009d53:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009d5a:	83 c4 1c             	add    esp,0x1c
c0009d5d:	5b                   	pop    ebx
c0009d5e:	5e                   	pop    esi
c0009d5f:	5f                   	pop    edi
c0009d60:	5d                   	pop    ebp
c0009d61:	c3                   	ret    
c0009d62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d66:	83 ec 0c             	sub    esp,0xc
c0009d69:	68 bc db 01 c0       	push   0xc001dbbc
c0009d6e:	e8 f0 63 00 00       	call   c0010163 <KePanic(char const*)>
c0009d73:	83 c4 10             	add    esp,0x10
c0009d76:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009d7a:	eb 9c                	jmp    c0009d18 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0009d7c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d80:	e8 30 dd ff ff       	call   c0007ab5 <Phys::allocatePage()>
c0009d85:	83 ec 0c             	sub    esp,0xc
c0009d88:	89 c5                	mov    ebp,eax
c0009d8a:	8b 0d 50 0e 02 c0    	mov    ecx,DWORD PTR ds:0xc0020e50
c0009d90:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009d94:	6a 01                	push   0x1
c0009d96:	e8 0a f5 ff ff       	call   c00092a5 <Virt::allocateKernelVirtualPages(int)>
c0009d9b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009da2:	6a 01                	push   0x1
c0009da4:	50                   	push   eax
c0009da5:	55                   	push   ebp
c0009da6:	81 cd 07 04 00 00    	or     ebp,0x407
c0009dac:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009db0:	51                   	push   ecx
c0009db1:	e8 7e fe ff ff       	call   c0009c34 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009db6:	83 c4 1c             	add    esp,0x1c
c0009db9:	68 00 10 00 00       	push   0x1000
c0009dbe:	6a 00                	push   0x0
c0009dc0:	50                   	push   eax
c0009dc1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dc5:	e8 06 67 ff ff       	call   c00004d0 <memset>
c0009dca:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009dce:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009dd1:	e8 ff f7 ff ff       	call   c00095d5 <Virt::freeKernelVirtualPages(unsigned long)>
c0009dd6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009dd9:	83 c4 10             	add    esp,0x10
c0009ddc:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0009ddf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009de3:	e9 47 ff ff ff       	jmp    c0009d2f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0009de8 <VAS::VAS(bool)>:
c0009de8:	53                   	push   ebx
c0009de9:	83 ec 28             	sub    esp,0x28
c0009dec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009df0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009df4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009df8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009dff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e03:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009e0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e0e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009e12:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009e15:	e8 9b dc ff ff       	call   c0007ab5 <Phys::allocatePage()>
c0009e1a:	89 c2                	mov    edx,eax
c0009e1c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e20:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0009e23:	8b 1d 50 0e 02 c0    	mov    ebx,DWORD PTR ds:0xc0020e50
c0009e29:	83 ec 0c             	sub    esp,0xc
c0009e2c:	6a 01                	push   0x1
c0009e2e:	e8 72 f4 ff ff       	call   c00092a5 <Virt::allocateKernelVirtualPages(int)>
c0009e33:	83 c4 10             	add    esp,0x10
c0009e36:	89 c2                	mov    edx,eax
c0009e38:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e3c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009e3f:	83 ec 0c             	sub    esp,0xc
c0009e42:	6a 03                	push   0x3
c0009e44:	6a 01                	push   0x1
c0009e46:	52                   	push   edx
c0009e47:	50                   	push   eax
c0009e48:	53                   	push   ebx
c0009e49:	e8 e6 fd ff ff       	call   c0009c34 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009e4e:	83 c4 20             	add    esp,0x20
c0009e51:	89 c2                	mov    edx,eax
c0009e53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e57:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009e5a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009e62:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0009e6a:	7f 1c                	jg     c0009e88 <VAS::VAS(bool)+0xa0>
c0009e6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e70:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009e73:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e77:	c1 e2 02             	shl    edx,0x2
c0009e7a:	01 d0                	add    eax,edx
c0009e7c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009e82:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009e86:	eb da                	jmp    c0009e62 <VAS::VAS(bool)+0x7a>
c0009e88:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0009e90:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0009e98:	7f 7a                	jg     c0009f14 <VAS::VAS(bool)+0x12c>
c0009e9a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e9e:	2d 00 02 00 00       	sub    eax,0x200
c0009ea3:	c1 e0 0c             	shl    eax,0xc
c0009ea6:	83 c8 03             	or     eax,0x3
c0009ea9:	89 c2                	mov    edx,eax
c0009eab:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c0009eb0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009eb6:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009ebc:	83 e0 10             	and    eax,0x10
c0009ebf:	84 c0                	test   al,al
c0009ec1:	74 07                	je     c0009eca <VAS::VAS(bool)+0xe2>
c0009ec3:	b8 00 01 00 00       	mov    eax,0x100
c0009ec8:	eb 05                	jmp    c0009ecf <VAS::VAS(bool)+0xe7>
c0009eca:	b8 00 00 00 00       	mov    eax,0x0
c0009ecf:	09 d0                	or     eax,edx
c0009ed1:	89 c1                	mov    ecx,eax
c0009ed3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ed7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009eda:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009ede:	c1 e2 02             	shl    edx,0x2
c0009ee1:	01 d0                	add    eax,edx
c0009ee3:	89 ca                	mov    edx,ecx
c0009ee5:	89 10                	mov    DWORD PTR [eax],edx
c0009ee7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009eeb:	2d 40 03 00 00       	sub    eax,0x340
c0009ef0:	83 f8 7f             	cmp    eax,0x7f
c0009ef3:	77 16                	ja     c0009f0b <VAS::VAS(bool)+0x123>
c0009ef5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ef9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009efc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009f00:	c1 e2 02             	shl    edx,0x2
c0009f03:	01 d0                	add    eax,edx
c0009f05:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009f0b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009f0f:	e9 7c ff ff ff       	jmp    c0009e90 <VAS::VAS(bool)+0xa8>
c0009f14:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c0009f19:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f1f:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009f25:	83 e0 10             	and    eax,0x10
c0009f28:	84 c0                	test   al,al
c0009f2a:	74 07                	je     c0009f33 <VAS::VAS(bool)+0x14b>
c0009f2c:	b8 03 41 00 00       	mov    eax,0x4103
c0009f31:	eb 05                	jmp    c0009f38 <VAS::VAS(bool)+0x150>
c0009f33:	b8 03 40 00 00       	mov    eax,0x4003
c0009f38:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009f3c:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0009f3f:	81 c2 20 0c 00 00    	add    edx,0xc20
c0009f45:	89 02                	mov    DWORD PTR [edx],eax
c0009f47:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c0009f4c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f52:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0009f58:	83 ec 08             	sub    esp,0x8
c0009f5b:	50                   	push   eax
c0009f5c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f60:	e8 b1 fc ff ff       	call   c0009c16 <VAS::setCPUSpecific(unsigned long)>
c0009f65:	83 c4 10             	add    esp,0x10
c0009f68:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f6c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009f6f:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c0009f74:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f7a:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009f80:	83 e0 10             	and    eax,0x10
c0009f83:	84 c0                	test   al,al
c0009f85:	74 07                	je     c0009f8e <VAS::VAS(bool)+0x1a6>
c0009f87:	b8 00 01 00 00       	mov    eax,0x100
c0009f8c:	eb 05                	jmp    c0009f93 <VAS::VAS(bool)+0x1ab>
c0009f8e:	b8 00 00 00 00       	mov    eax,0x0
c0009f93:	09 c2                	or     edx,eax
c0009f95:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f99:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f9c:	05 fc 0f 00 00       	add    eax,0xffc
c0009fa1:	83 ca 03             	or     edx,0x3
c0009fa4:	89 10                	mov    DWORD PTR [eax],edx
c0009fa6:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c0009fab:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fb1:	83 ec 0c             	sub    esp,0xc
c0009fb4:	50                   	push   eax
c0009fb5:	e8 12 1c 00 00       	call   c000bbcc <Device::getName()>
c0009fba:	83 c4 10             	add    esp,0x10
c0009fbd:	83 ec 08             	sub    esp,0x8
c0009fc0:	68 5f dc 01 c0       	push   0xc001dc5f
c0009fc5:	50                   	push   eax
c0009fc6:	e8 15 67 ff ff       	call   c00006e0 <strcmp>
c0009fcb:	83 c4 10             	add    esp,0x10
c0009fce:	85 c0                	test   eax,eax
c0009fd0:	0f 94 c0             	sete   al
c0009fd3:	84 c0                	test   al,al
c0009fd5:	0f 84 87 00 00 00    	je     c000a062 <VAS::VAS(bool)+0x27a>
c0009fdb:	fa                   	cli    
c0009fdc:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0009fe1:	40                   	inc    eax
c0009fe2:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0009fe7:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c0009fec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ff2:	05 7c 09 00 00       	add    eax,0x97c
c0009ff7:	83 ec 0c             	sub    esp,0xc
c0009ffa:	50                   	push   eax
c0009ffb:	e8 b6 d2 ff ff       	call   c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a000:	83 c4 10             	add    esp,0x10
c000a003:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a008:	89 c3                	mov    ebx,eax
c000a00a:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c000a00f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a015:	05 7c 09 00 00       	add    eax,0x97c
c000a01a:	83 ec 0c             	sub    esp,0xc
c000a01d:	50                   	push   eax
c000a01e:	e8 93 d2 ff ff       	call   c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a023:	83 c4 10             	add    esp,0x10
c000a026:	83 ec 08             	sub    esp,0x8
c000a029:	50                   	push   eax
c000a02a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a02e:	e8 83 f5 ff ff       	call   c00095b6 <VAS::getPageTableEntry(unsigned long)>
c000a033:	83 c4 10             	add    esp,0x10
c000a036:	8b 00                	mov    eax,DWORD PTR [eax]
c000a038:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a03d:	6a 11                	push   0x11
c000a03f:	53                   	push   ebx
c000a040:	50                   	push   eax
c000a041:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a045:	e8 f0 f8 ff ff       	call   c000993a <VAS::mapPage(unsigned long, unsigned long, int)>
c000a04a:	83 c4 10             	add    esp,0x10
c000a04d:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c000a052:	48                   	dec    eax
c000a053:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c000a058:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c000a05d:	85 c0                	test   eax,eax
c000a05f:	75 01                	jne    c000a062 <VAS::VAS(bool)+0x27a>
c000a061:	fb                   	sti    
c000a062:	90                   	nop
c000a063:	83 c4 28             	add    esp,0x28
c000a066:	5b                   	pop    ebx
c000a067:	c3                   	ret    

c000a068 <VAS::evict(unsigned long)>:
c000a068:	55                   	push   ebp
c000a069:	57                   	push   edi
c000a06a:	56                   	push   esi
c000a06b:	53                   	push   ebx
c000a06c:	83 ec 1c             	sub    esp,0x1c
c000a06f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a073:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a077:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a07b:	e8 66 f3 ff ff       	call   c00093e6 <Virt::allocateSwapfilePage()>
c000a080:	8b 0d 0c fa 01 c0    	mov    ecx,DWORD PTR ds:0xc001fa0c
c000a086:	89 c7                	mov    edi,eax
c000a088:	85 c9                	test   ecx,ecx
c000a08a:	7e 3e                	jle    c000a0ca <VAS::evict(unsigned long)+0x62>
c000a08c:	89 ee                	mov    esi,ebp
c000a08e:	31 db                	xor    ebx,ebx
c000a090:	83 ec 0c             	sub    esp,0xc
c000a093:	57                   	push   edi
c000a094:	e8 3b f3 ff ff       	call   c00093d4 <Virt::swapIDToSector(unsigned long)>
c000a099:	89 34 24             	mov    DWORD PTR [esp],esi
c000a09c:	01 d8                	add    eax,ebx
c000a09e:	6a 01                	push   0x1
c000a0a0:	31 d2                	xor    edx,edx
c000a0a2:	43                   	inc    ebx
c000a0a3:	52                   	push   edx
c000a0a4:	81 c6 00 02 00 00    	add    esi,0x200
c000a0aa:	50                   	push   eax
c000a0ab:	0f be 05 18 fa 01 c0 	movsx  eax,BYTE PTR ds:0xc001fa18
c000a0b2:	8b 14 85 bc 31 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdce44]
c000a0b9:	52                   	push   edx
c000a0ba:	e8 b5 2b 00 00       	call   c000cc74 <LogicalDisk::write(unsigned long long, int, void*)>
c000a0bf:	83 c4 20             	add    esp,0x20
c000a0c2:	39 1d 0c fa 01 c0    	cmp    DWORD PTR ds:0xc001fa0c,ebx
c000a0c8:	7f c6                	jg     c000a090 <VAS::evict(unsigned long)+0x28>
c000a0ca:	83 ec 08             	sub    esp,0x8
c000a0cd:	c1 e7 0b             	shl    edi,0xb
c000a0d0:	55                   	push   ebp
c000a0d1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0d5:	50                   	push   eax
c000a0d6:	e8 db f4 ff ff       	call   c00095b6 <VAS::getPageTableEntry(unsigned long)>
c000a0db:	8b 10                	mov    edx,DWORD PTR [eax]
c000a0dd:	89 d1                	mov    ecx,edx
c000a0df:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a0e5:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a0eb:	09 cf                	or     edi,ecx
c000a0ed:	89 38                	mov    DWORD PTR [eax],edi
c000a0ef:	89 14 24             	mov    DWORD PTR [esp],edx
c000a0f2:	ff 05 48 0e 02 c0    	inc    DWORD PTR ds:0xc0020e48
c000a0f8:	e8 56 d9 ff ff       	call   c0007a53 <Phys::freePage(unsigned long)>
c000a0fd:	0f 20 d8             	mov    eax,cr3
c000a100:	0f 22 d8             	mov    cr3,eax
c000a103:	a1 44 0e 02 c0       	mov    eax,ds:0xc0020e44
c000a108:	c7 44 24 40 6d dc 01 c0 	mov    DWORD PTR [esp+0x40],0xc001dc6d
c000a110:	8d 50 01             	lea    edx,[eax+0x1]
c000a113:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a117:	89 15 44 0e 02 c0    	mov    DWORD PTR ds:0xc0020e44,edx
c000a11d:	83 c4 2c             	add    esp,0x2c
c000a120:	5b                   	pop    ebx
c000a121:	5e                   	pop    esi
c000a122:	5f                   	pop    edi
c000a123:	5d                   	pop    ebp
c000a124:	e9 cf 03 00 00       	jmp    c000a4f8 <Dbg::kprintf(char const*, ...)>
c000a129:	90                   	nop

c000a12a <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a12a:	55                   	push   ebp
c000a12b:	57                   	push   edi
c000a12c:	56                   	push   esi
c000a12d:	53                   	push   ebx
c000a12e:	83 ec 14             	sub    esp,0x14
c000a131:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a135:	53                   	push   ebx
c000a136:	68 7e dc 01 c0       	push   0xc001dc7e
c000a13b:	e8 b8 03 00 00       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c000a140:	83 c4 10             	add    esp,0x10
c000a143:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a149:	74 21                	je     c000a16c <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a14b:	83 ec 08             	sub    esp,0x8
c000a14e:	53                   	push   ebx
c000a14f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a153:	57                   	push   edi
c000a154:	e8 5d f4 ff ff       	call   c00095b6 <VAS::getPageTableEntry(unsigned long)>
c000a159:	83 c4 10             	add    esp,0x10
c000a15c:	89 c6                	mov    esi,eax
c000a15e:	85 c0                	test   eax,eax
c000a160:	74 0a                	je     c000a16c <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a162:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a164:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a16a:	74 0a                	je     c000a176 <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a16c:	31 c0                	xor    eax,eax
c000a16e:	83 c4 0c             	add    esp,0xc
c000a171:	5b                   	pop    ebx
c000a172:	5e                   	pop    esi
c000a173:	5f                   	pop    edi
c000a174:	5d                   	pop    ebp
c000a175:	c3                   	ret    
c000a176:	e8 3a d9 ff ff       	call   c0007ab5 <Phys::allocatePage()>
c000a17b:	c1 ed 0b             	shr    ebp,0xb
c000a17e:	8b 16                	mov    edx,DWORD PTR [esi]
c000a180:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a186:	09 c2                	or     edx,eax
c000a188:	81 ca 01 08 00 00    	or     edx,0x801
c000a18e:	89 16                	mov    DWORD PTR [esi],edx
c000a190:	8b 35 0c fa 01 c0    	mov    esi,DWORD PTR ds:0xc001fa0c
c000a196:	85 f6                	test   esi,esi
c000a198:	7e 3e                	jle    c000a1d8 <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a19a:	89 df                	mov    edi,ebx
c000a19c:	31 f6                	xor    esi,esi
c000a19e:	83 ec 0c             	sub    esp,0xc
c000a1a1:	55                   	push   ebp
c000a1a2:	e8 2d f2 ff ff       	call   c00093d4 <Virt::swapIDToSector(unsigned long)>
c000a1a7:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a1aa:	01 f0                	add    eax,esi
c000a1ac:	6a 01                	push   0x1
c000a1ae:	31 d2                	xor    edx,edx
c000a1b0:	46                   	inc    esi
c000a1b1:	52                   	push   edx
c000a1b2:	81 c7 00 02 00 00    	add    edi,0x200
c000a1b8:	50                   	push   eax
c000a1b9:	0f be 05 18 fa 01 c0 	movsx  eax,BYTE PTR ds:0xc001fa18
c000a1c0:	8b 0c 85 bc 31 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdce44]
c000a1c7:	51                   	push   ecx
c000a1c8:	e8 3b 2a 00 00       	call   c000cc08 <LogicalDisk::read(unsigned long long, int, void*)>
c000a1cd:	83 c4 20             	add    esp,0x20
c000a1d0:	39 35 0c fa 01 c0    	cmp    DWORD PTR ds:0xc001fa0c,esi
c000a1d6:	7f c6                	jg     c000a19e <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a1d8:	a1 48 0e 02 c0       	mov    eax,ds:0xc0020e48
c000a1dd:	48                   	dec    eax
c000a1de:	52                   	push   edx
c000a1df:	a3 48 0e 02 c0       	mov    ds:0xc0020e48,eax
c000a1e4:	50                   	push   eax
c000a1e5:	53                   	push   ebx
c000a1e6:	68 91 dc 01 c0       	push   0xc001dc91
c000a1eb:	e8 08 03 00 00       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c000a1f0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a1f3:	e8 be f1 ff ff       	call   c00093b6 <Virt::freeSwapfilePage(unsigned long)>
c000a1f8:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c000a1fd:	83 c4 10             	add    esp,0x10
c000a200:	48                   	dec    eax
c000a201:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c000a206:	85 c0                	test   eax,eax
c000a208:	75 01                	jne    c000a20b <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a20a:	fb                   	sti    
c000a20b:	0f 20 d8             	mov    eax,cr3
c000a20e:	0f 22 d8             	mov    cr3,eax
c000a211:	b0 01                	mov    al,0x1
c000a213:	e9 56 ff ff ff       	jmp    c000a16e <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a218 <VAS::scanForEviction()>:
c000a218:	57                   	push   edi
c000a219:	31 ff                	xor    edi,edi
c000a21b:	56                   	push   esi
c000a21c:	53                   	push   ebx
c000a21d:	83 ec 10             	sub    esp,0x10
c000a220:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a224:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a227:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a22d:	75 0e                	jne    c000a23d <VAS::scanForEviction()+0x25>
c000a22f:	89 da                	mov    edx,ebx
c000a231:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a234:	c1 ea 16             	shr    edx,0x16
c000a237:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a23b:	74 4e                	je     c000a28b <VAS::scanForEviction()+0x73>
c000a23d:	53                   	push   ebx
c000a23e:	56                   	push   esi
c000a23f:	e8 72 f3 ff ff       	call   c00095b6 <VAS::getPageTableEntry(unsigned long)>
c000a244:	5a                   	pop    edx
c000a245:	8b 10                	mov    edx,DWORD PTR [eax]
c000a247:	59                   	pop    ecx
c000a248:	89 d1                	mov    ecx,edx
c000a24a:	81 e1 01 08 00 00    	and    ecx,0x801
c000a250:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a256:	74 3e                	je     c000a296 <VAS::scanForEviction()+0x7e>
c000a258:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a25e:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a264:	76 2b                	jbe    c000a291 <VAS::scanForEviction()+0x79>
c000a266:	47                   	inc    edi
c000a267:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a26e:	83 ff 03             	cmp    edi,0x3
c000a271:	74 32                	je     c000a2a5 <VAS::scanForEviction()+0x8d>
c000a273:	31 db                	xor    ebx,ebx
c000a275:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a27b:	75 c0                	jne    c000a23d <VAS::scanForEviction()+0x25>
c000a27d:	89 da                	mov    edx,ebx
c000a27f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a282:	c1 ea 16             	shr    edx,0x16
c000a285:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a289:	75 b2                	jne    c000a23d <VAS::scanForEviction()+0x25>
c000a28b:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a291:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a294:	eb 91                	jmp    c000a227 <VAS::scanForEviction()+0xf>
c000a296:	f6 c2 20             	test   dl,0x20
c000a299:	74 13                	je     c000a2ae <VAS::scanForEviction()+0x96>
c000a29b:	83 e2 df             	and    edx,0xffffffdf
c000a29e:	89 10                	mov    DWORD PTR [eax],edx
c000a2a0:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a2a3:	eb b3                	jmp    c000a258 <VAS::scanForEviction()+0x40>
c000a2a5:	83 c4 10             	add    esp,0x10
c000a2a8:	31 c0                	xor    eax,eax
c000a2aa:	5b                   	pop    ebx
c000a2ab:	5e                   	pop    esi
c000a2ac:	5f                   	pop    edi
c000a2ad:	c3                   	ret    
c000a2ae:	83 ec 08             	sub    esp,0x8
c000a2b1:	89 d0                	mov    eax,edx
c000a2b3:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a2b8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a2bc:	53                   	push   ebx
c000a2bd:	68 a6 dc 01 c0       	push   0xc001dca6
c000a2c2:	e8 31 02 00 00       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c000a2c7:	58                   	pop    eax
c000a2c8:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a2cb:	5a                   	pop    edx
c000a2cc:	51                   	push   ecx
c000a2cd:	56                   	push   esi
c000a2ce:	e8 95 fd ff ff       	call   c000a068 <VAS::evict(unsigned long)>
c000a2d3:	5b                   	pop    ebx
c000a2d4:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a2d7:	5f                   	pop    edi
c000a2d8:	50                   	push   eax
c000a2d9:	68 ba dc 01 c0       	push   0xc001dcba
c000a2de:	e8 15 02 00 00       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c000a2e3:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a2ea:	83 c4 10             	add    esp,0x10
c000a2ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a2f1:	83 c4 10             	add    esp,0x10
c000a2f4:	5b                   	pop    ebx
c000a2f5:	5e                   	pop    esi
c000a2f6:	5f                   	pop    edi
c000a2f7:	c3                   	ret    

c000a2f8 <mapVASFirstTime>:
c000a2f8:	55                   	push   ebp
c000a2f9:	57                   	push   edi
c000a2fa:	56                   	push   esi
c000a2fb:	53                   	push   ebx
c000a2fc:	83 ec 0c             	sub    esp,0xc
c000a2ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a304:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a307:	4a                   	dec    edx
c000a308:	0f 84 8c 00 00 00    	je     c000a39a <mapVASFirstTime+0xa2>
c000a30e:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a311:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a314:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a319:	c1 e5 15             	shl    ebp,0x15
c000a31c:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a321:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a327:	29 eb                	sub    ebx,ebp
c000a329:	29 ef                	sub    edi,ebp
c000a32b:	e8 85 d7 ff ff       	call   c0007ab5 <Phys::allocatePage()>
c000a330:	83 ec 0c             	sub    esp,0xc
c000a333:	68 03 04 00 00       	push   0x403
c000a338:	6a 01                	push   0x1
c000a33a:	53                   	push   ebx
c000a33b:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a341:	50                   	push   eax
c000a342:	56                   	push   esi
c000a343:	e8 ec f8 ff ff       	call   c0009c34 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a348:	83 c4 20             	add    esp,0x20
c000a34b:	39 fb                	cmp    ebx,edi
c000a34d:	75 dc                	jne    c000a32b <mapVASFirstTime+0x33>
c000a34f:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a354:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a359:	29 eb                	sub    ebx,ebp
c000a35b:	29 ef                	sub    edi,ebp
c000a35d:	e8 53 d7 ff ff       	call   c0007ab5 <Phys::allocatePage()>
c000a362:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a366:	19 d2                	sbb    edx,edx
c000a368:	83 ec 0c             	sub    esp,0xc
c000a36b:	83 e2 04             	and    edx,0x4
c000a36e:	81 c2 03 04 00 00    	add    edx,0x403
c000a374:	52                   	push   edx
c000a375:	6a 01                	push   0x1
c000a377:	53                   	push   ebx
c000a378:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a37e:	50                   	push   eax
c000a37f:	56                   	push   esi
c000a380:	e8 af f8 ff ff       	call   c0009c34 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a385:	83 c4 20             	add    esp,0x20
c000a388:	39 df                	cmp    edi,ebx
c000a38a:	75 d1                	jne    c000a35d <mapVASFirstTime+0x65>
c000a38c:	0f 20 d8             	mov    eax,cr3
c000a38f:	0f 22 d8             	mov    cr3,eax
c000a392:	83 c4 0c             	add    esp,0xc
c000a395:	5b                   	pop    ebx
c000a396:	5e                   	pop    esi
c000a397:	5f                   	pop    edi
c000a398:	5d                   	pop    ebp
c000a399:	c3                   	ret    
c000a39a:	83 ec 0c             	sub    esp,0xc
c000a39d:	68 cd dc 01 c0       	push   0xc001dccd
c000a3a2:	e8 51 01 00 00       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c000a3a7:	83 c4 10             	add    esp,0x10
c000a3aa:	83 c4 0c             	add    esp,0xc
c000a3ad:	5b                   	pop    ebx
c000a3ae:	5e                   	pop    esi
c000a3af:	5f                   	pop    edi
c000a3b0:	5d                   	pop    ebp
c000a3b1:	c3                   	ret    

c000a3b2 <__cxa_atexit>:
c000a3b2:	31 c0                	xor    eax,eax
c000a3b4:	c3                   	ret    

c000a3b5 <__cxa_finalize>:
c000a3b5:	c3                   	ret    

c000a3b6 <__stack_chk_fail>:
c000a3b6:	55                   	push   ebp
c000a3b7:	89 e5                	mov    ebp,esp
c000a3b9:	83 ec 10             	sub    esp,0x10
c000a3bc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a3bf:	68 e6 dc 01 c0       	push   0xc001dce6
c000a3c4:	e8 2f 01 00 00       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c000a3c9:	58                   	pop    eax
c000a3ca:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a3cd:	5a                   	pop    edx
c000a3ce:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a3d1:	68 e6 dc 01 c0       	push   0xc001dce6
c000a3d6:	e8 1d 01 00 00       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c000a3db:	c7 04 24 ee dc 01 c0 	mov    DWORD PTR [esp],0xc001dcee
c000a3e2:	e8 7c 5d 00 00       	call   c0010163 <KePanic(char const*)>
c000a3e7:	83 c4 10             	add    esp,0x10
c000a3ea:	c9                   	leave  
c000a3eb:	c3                   	ret    

c000a3ec <__cxa_pure_virtual>:
c000a3ec:	83 ec 18             	sub    esp,0x18
c000a3ef:	68 06 dd 01 c0       	push   0xc001dd06
c000a3f4:	e8 6a 5d 00 00       	call   c0010163 <KePanic(char const*)>
c000a3f9:	83 c4 1c             	add    esp,0x1c
c000a3fc:	c3                   	ret    

c000a3fd <operator new[](unsigned long)>:
c000a3fd:	e9 b7 d3 ff ff       	jmp    c00077b9 <malloc>

c000a402 <operator delete(void*, unsigned long)>:
c000a402:	e9 f2 d3 ff ff       	jmp    c00077f9 <rfree>

c000a407 <operator delete[](void*)>:
c000a407:	e9 ed d3 ff ff       	jmp    c00077f9 <rfree>

c000a40c <operator delete[](void*, unsigned long)>:
c000a40c:	e9 e8 d3 ff ff       	jmp    c00077f9 <rfree>

c000a411 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a411:	55                   	push   ebp
c000a412:	b9 04 00 00 00       	mov    ecx,0x4
c000a417:	57                   	push   edi
c000a418:	56                   	push   esi
c000a419:	be 0f d9 01 c0       	mov    esi,0xc001d90f
c000a41e:	53                   	push   ebx
c000a41f:	83 ec 20             	sub    esp,0x20
c000a422:	a1 0e d9 01 c0       	mov    eax,ds:0xc001d90e
c000a427:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a42b:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000a42f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a433:	a1 1b d9 01 c0       	mov    eax,ds:0xc001d91b
c000a438:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a43c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a440:	fc                   	cld    
c000a441:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a443:	89 ee                	mov    esi,ebp
c000a445:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a449:	eb 02                	jmp    c000a44d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000a44b:	89 c6                	mov    esi,eax
c000a44d:	31 d2                	xor    edx,edx
c000a44f:	41                   	inc    ecx
c000a450:	89 f0                	mov    eax,esi
c000a452:	f7 f3                	div    ebx
c000a454:	39 de                	cmp    esi,ebx
c000a456:	73 f3                	jae    c000a44b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000a458:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a45b:	eb 02                	jmp    c000a45f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000a45d:	89 c5                	mov    ebp,eax
c000a45f:	31 d2                	xor    edx,edx
c000a461:	49                   	dec    ecx
c000a462:	89 e8                	mov    eax,ebp
c000a464:	f7 f3                	div    ebx
c000a466:	39 dd                	cmp    ebp,ebx
c000a468:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a46c:	88 11                	mov    BYTE PTR [ecx],dl
c000a46e:	73 ed                	jae    c000a45d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000a470:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a474:	83 c4 20             	add    esp,0x20
c000a477:	5b                   	pop    ebx
c000a478:	5e                   	pop    esi
c000a479:	5f                   	pop    edi
c000a47a:	5d                   	pop    ebp
c000a47b:	c3                   	ret    

c000a47c <Dbg::logc(char)>:
c000a47c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a480:	f6 05 70 0d 02 c0 10 	test   BYTE PTR ds:0xc0020d70,0x10
c000a487:	75 12                	jne    c000a49b <Dbg::logc(char)+0x1f>
c000a489:	ba fd 03 00 00       	mov    edx,0x3fd
c000a48e:	ec                   	in     al,dx
c000a48f:	a8 20                	test   al,0x20
c000a491:	74 fb                	je     c000a48e <Dbg::logc(char)+0x12>
c000a493:	ba f8 03 00 00       	mov    edx,0x3f8
c000a498:	88 c8                	mov    al,cl
c000a49a:	ee                   	out    dx,al
c000a49b:	c3                   	ret    

c000a49c <Dbg::logs(char*)>:
c000a49c:	53                   	push   ebx
c000a49d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a4a1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a4a4:	84 c0                	test   al,al
c000a4a6:	74 0f                	je     c000a4b7 <Dbg::logs(char*)+0x1b>
c000a4a8:	50                   	push   eax
c000a4a9:	43                   	inc    ebx
c000a4aa:	e8 cd ff ff ff       	call   c000a47c <Dbg::logc(char)>
c000a4af:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a4b2:	5a                   	pop    edx
c000a4b3:	84 c0                	test   al,al
c000a4b5:	75 f1                	jne    c000a4a8 <Dbg::logs(char*)+0xc>
c000a4b7:	5b                   	pop    ebx
c000a4b8:	c3                   	ret    

c000a4b9 <Dbg::logWriteInt(unsigned int)>:
c000a4b9:	83 ec 10             	sub    esp,0x10
c000a4bc:	6a 0a                	push   0xa
c000a4be:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a4c2:	50                   	push   eax
c000a4c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4c7:	50                   	push   eax
c000a4c8:	e8 44 ff ff ff       	call   c000a411 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a4cd:	50                   	push   eax
c000a4ce:	e8 c9 ff ff ff       	call   c000a49c <Dbg::logs(char*)>
c000a4d3:	83 c4 20             	add    esp,0x20
c000a4d6:	c3                   	ret    

c000a4d7 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a4d7:	83 ec 10             	sub    esp,0x10
c000a4da:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a4de:	50                   	push   eax
c000a4df:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a4e3:	50                   	push   eax
c000a4e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a4e8:	52                   	push   edx
c000a4e9:	e8 23 ff ff ff       	call   c000a411 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a4ee:	50                   	push   eax
c000a4ef:	e8 a8 ff ff ff       	call   c000a49c <Dbg::logs(char*)>
c000a4f4:	83 c4 20             	add    esp,0x20
c000a4f7:	c3                   	ret    

c000a4f8 <Dbg::kprintf(char const*, ...)>:
c000a4f8:	55                   	push   ebp
c000a4f9:	57                   	push   edi
c000a4fa:	56                   	push   esi
c000a4fb:	53                   	push   ebx
c000a4fc:	83 ec 0c             	sub    esp,0xc
c000a4ff:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a503:	f6 05 70 0d 02 c0 10 	test   BYTE PTR ds:0xc0020d70,0x10
c000a50a:	74 08                	je     c000a514 <Dbg::kprintf(char const*, ...)+0x1c>
c000a50c:	83 c4 0c             	add    esp,0xc
c000a50f:	5b                   	pop    ebx
c000a510:	5e                   	pop    esi
c000a511:	5f                   	pop    edi
c000a512:	5d                   	pop    ebp
c000a513:	c3                   	ret    
c000a514:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a518:	31 ff                	xor    edi,edi
c000a51a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a51e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a521:	84 c0                	test   al,al
c000a523:	74 e7                	je     c000a50c <Dbg::kprintf(char const*, ...)+0x14>
c000a525:	8d 77 01             	lea    esi,[edi+0x1]
c000a528:	3c 25                	cmp    al,0x25
c000a52a:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a52d:	75 47                	jne    c000a576 <Dbg::kprintf(char const*, ...)+0x7e>
c000a52f:	83 c7 02             	add    edi,0x2
c000a532:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a535:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a538:	83 e8 25             	sub    eax,0x25
c000a53b:	3c 53                	cmp    al,0x53
c000a53d:	0f 87 d2 00 00 00    	ja     c000a615 <Dbg::kprintf(char const*, ...)+0x11d>
c000a543:	25 ff 00 00 00       	and    eax,0xff
c000a548:	ff 24 85 1c dd 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe22e4]
c000a54f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a553:	89 c8                	mov    eax,ecx
c000a555:	83 c1 04             	add    ecx,0x4
c000a558:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a55c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a55e:	55                   	push   ebp
c000a55f:	e8 55 ff ff ff       	call   c000a4b9 <Dbg::logWriteInt(unsigned int)>
c000a564:	58                   	pop    eax
c000a565:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a568:	84 c0                	test   al,al
c000a56a:	74 a0                	je     c000a50c <Dbg::kprintf(char const*, ...)+0x14>
c000a56c:	8d 77 01             	lea    esi,[edi+0x1]
c000a56f:	3c 25                	cmp    al,0x25
c000a571:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a574:	74 b9                	je     c000a52f <Dbg::kprintf(char const*, ...)+0x37>
c000a576:	50                   	push   eax
c000a577:	89 f7                	mov    edi,esi
c000a579:	e8 fe fe ff ff       	call   c000a47c <Dbg::logc(char)>
c000a57e:	89 ee                	mov    esi,ebp
c000a580:	58                   	pop    eax
c000a581:	eb e2                	jmp    c000a565 <Dbg::kprintf(char const*, ...)+0x6d>
c000a583:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a587:	89 c8                	mov    eax,ecx
c000a589:	83 c1 04             	add    ecx,0x4
c000a58c:	8b 00                	mov    eax,DWORD PTR [eax]
c000a58e:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a592:	50                   	push   eax
c000a593:	e8 04 ff ff ff       	call   c000a49c <Dbg::logs(char*)>
c000a598:	58                   	pop    eax
c000a599:	eb ca                	jmp    c000a565 <Dbg::kprintf(char const*, ...)+0x6d>
c000a59b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a59f:	89 d0                	mov    eax,edx
c000a5a1:	83 c2 04             	add    edx,0x4
c000a5a4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a5a8:	8b 00                	mov    eax,DWORD PTR [eax]
c000a5aa:	50                   	push   eax
c000a5ab:	e8 09 ff ff ff       	call   c000a4b9 <Dbg::logWriteInt(unsigned int)>
c000a5b0:	58                   	pop    eax
c000a5b1:	eb b2                	jmp    c000a565 <Dbg::kprintf(char const*, ...)+0x6d>
c000a5b3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a5b7:	89 d0                	mov    eax,edx
c000a5b9:	83 c2 04             	add    edx,0x4
c000a5bc:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a5bf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a5c3:	50                   	push   eax
c000a5c4:	e8 b3 fe ff ff       	call   c000a47c <Dbg::logc(char)>
c000a5c9:	58                   	pop    eax
c000a5ca:	eb 99                	jmp    c000a565 <Dbg::kprintf(char const*, ...)+0x6d>
c000a5cc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a5d0:	89 c8                	mov    eax,ecx
c000a5d2:	83 c1 04             	add    ecx,0x4
c000a5d5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a5d9:	6a 10                	push   0x10
c000a5db:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a5dd:	51                   	push   ecx
c000a5de:	e8 f4 fe ff ff       	call   c000a4d7 <Dbg::logWriteIntBase(unsigned int, int)>
c000a5e3:	5d                   	pop    ebp
c000a5e4:	58                   	pop    eax
c000a5e5:	e9 7b ff ff ff       	jmp    c000a565 <Dbg::kprintf(char const*, ...)+0x6d>
c000a5ea:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a5ee:	89 d0                	mov    eax,edx
c000a5f0:	83 c2 08             	add    edx,0x8
c000a5f3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a5f7:	6a 10                	push   0x10
c000a5f9:	8b 00                	mov    eax,DWORD PTR [eax]
c000a5fb:	50                   	push   eax
c000a5fc:	e8 d6 fe ff ff       	call   c000a4d7 <Dbg::logWriteIntBase(unsigned int, int)>
c000a601:	58                   	pop    eax
c000a602:	5a                   	pop    edx
c000a603:	e9 5d ff ff ff       	jmp    c000a565 <Dbg::kprintf(char const*, ...)+0x6d>
c000a608:	6a 25                	push   0x25
c000a60a:	e8 6d fe ff ff       	call   c000a47c <Dbg::logc(char)>
c000a60f:	5a                   	pop    edx
c000a610:	e9 50 ff ff ff       	jmp    c000a565 <Dbg::kprintf(char const*, ...)+0x6d>
c000a615:	6a 25                	push   0x25
c000a617:	e8 60 fe ff ff       	call   c000a47c <Dbg::logc(char)>
c000a61c:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000a620:	50                   	push   eax
c000a621:	e8 56 fe ff ff       	call   c000a47c <Dbg::logc(char)>
c000a626:	5a                   	pop    edx
c000a627:	59                   	pop    ecx
c000a628:	e9 38 ff ff ff       	jmp    c000a565 <Dbg::kprintf(char const*, ...)+0x6d>
c000a62d:	90                   	nop

c000a62e <File::read(unsigned long long, void*, int*)>:
c000a62e:	53                   	push   ebx
c000a62f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a633:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a637:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a63e:	3c 19                	cmp    al,0x19
c000a640:	77 35                	ja     c000a677 <File::read(unsigned long long, void*, int*)+0x49>
c000a642:	8b 04 85 c0 32 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcd40]
c000a649:	85 c0                	test   eax,eax
c000a64b:	74 2a                	je     c000a677 <File::read(unsigned long long, void*, int*)+0x49>
c000a64d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a653:	85 c0                	test   eax,eax
c000a655:	74 20                	je     c000a677 <File::read(unsigned long long, void*, int*)+0x49>
c000a657:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a65b:	74 21                	je     c000a67e <File::read(unsigned long long, void*, int*)+0x50>
c000a65d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a65f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a663:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a669:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a66d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a671:	5b                   	pop    ebx
c000a672:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000a675:	ff e0                	jmp    eax
c000a677:	b8 0b 00 00 00       	mov    eax,0xb
c000a67c:	eb 05                	jmp    c000a683 <File::read(unsigned long long, void*, int*)+0x55>
c000a67e:	b8 05 00 00 00       	mov    eax,0x5
c000a683:	5b                   	pop    ebx
c000a684:	c3                   	ret    
c000a685:	90                   	nop

c000a686 <File::write(unsigned long long, void*, int*)>:
c000a686:	53                   	push   ebx
c000a687:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a68b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a68f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a696:	3c 19                	cmp    al,0x19
c000a698:	77 35                	ja     c000a6cf <File::write(unsigned long long, void*, int*)+0x49>
c000a69a:	8b 04 85 c0 32 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcd40]
c000a6a1:	85 c0                	test   eax,eax
c000a6a3:	74 2a                	je     c000a6cf <File::write(unsigned long long, void*, int*)+0x49>
c000a6a5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a6ab:	85 c0                	test   eax,eax
c000a6ad:	74 20                	je     c000a6cf <File::write(unsigned long long, void*, int*)+0x49>
c000a6af:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a6b3:	74 21                	je     c000a6d6 <File::write(unsigned long long, void*, int*)+0x50>
c000a6b5:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a6b7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a6bb:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a6c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a6c5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a6c9:	5b                   	pop    ebx
c000a6ca:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000a6cd:	ff e0                	jmp    eax
c000a6cf:	b8 0b 00 00 00       	mov    eax,0xb
c000a6d4:	eb 05                	jmp    c000a6db <File::write(unsigned long long, void*, int*)+0x55>
c000a6d6:	b8 05 00 00 00       	mov    eax,0x5
c000a6db:	5b                   	pop    ebx
c000a6dc:	c3                   	ret    
c000a6dd:	90                   	nop

c000a6de <Directory::read(unsigned long long, void*, int*)>:
c000a6de:	53                   	push   ebx
c000a6df:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a6e3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a6e7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a6ee:	3c 19                	cmp    al,0x19
c000a6f0:	77 35                	ja     c000a727 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a6f2:	8b 04 85 c0 32 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcd40]
c000a6f9:	85 c0                	test   eax,eax
c000a6fb:	74 2a                	je     c000a727 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a6fd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a703:	85 c0                	test   eax,eax
c000a705:	74 20                	je     c000a727 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a707:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a70b:	74 21                	je     c000a72e <Directory::read(unsigned long long, void*, int*)+0x50>
c000a70d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a70f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a713:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a719:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a71d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a721:	5b                   	pop    ebx
c000a722:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000a725:	ff e0                	jmp    eax
c000a727:	b8 0b 00 00 00       	mov    eax,0xb
c000a72c:	eb 05                	jmp    c000a733 <Directory::read(unsigned long long, void*, int*)+0x55>
c000a72e:	b8 05 00 00 00       	mov    eax,0x5
c000a733:	5b                   	pop    ebx
c000a734:	c3                   	ret    
c000a735:	90                   	nop

c000a736 <Directory::write(unsigned long long, void*, int*)>:
c000a736:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a73a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000a741:	b8 0b 00 00 00       	mov    eax,0xb
c000a746:	80 fa 19             	cmp    dl,0x19
c000a749:	77 18                	ja     c000a763 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a74b:	8b 14 95 c0 32 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcd40]
c000a752:	85 d2                	test   edx,edx
c000a754:	74 0d                	je     c000a763 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a756:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000a75d:	19 c0                	sbb    eax,eax
c000a75f:	83 e0 0a             	and    eax,0xa
c000a762:	40                   	inc    eax
c000a763:	c3                   	ret    

c000a764 <File::isAtty()>:
c000a764:	31 c0                	xor    eax,eax
c000a766:	c3                   	ret    
c000a767:	90                   	nop

c000a768 <Directory::isAtty()>:
c000a768:	31 c0                	xor    eax,eax
c000a76a:	c3                   	ret    
c000a76b:	90                   	nop

c000a76c <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000a76c:	b8 0a 00 00 00       	mov    eax,0xa
c000a771:	c3                   	ret    

c000a772 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000a772:	b8 0a 00 00 00       	mov    eax,0xa
c000a777:	c3                   	ret    

c000a778 <Filesystem::allocateSwapfile(char const*, int)>:
c000a778:	31 c0                	xor    eax,eax
c000a77a:	31 d2                	xor    edx,edx
c000a77c:	c3                   	ret    
c000a77d:	90                   	nop

c000a77e <File::~File()>:
c000a77e:	83 ec 0c             	sub    esp,0xc
c000a781:	ba dc de 01 c0       	mov    edx,0xc001dedc
c000a786:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a78a:	89 10                	mov    DWORD PTR [eax],edx
c000a78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a790:	83 ec 0c             	sub    esp,0xc
c000a793:	50                   	push   eax
c000a794:	e8 ab e8 ff ff       	call   c0009044 <UnixFile::~UnixFile()>
c000a799:	83 c4 10             	add    esp,0x10
c000a79c:	90                   	nop
c000a79d:	83 c4 0c             	add    esp,0xc
c000a7a0:	c3                   	ret    
c000a7a1:	90                   	nop

c000a7a2 <File::~File()>:
c000a7a2:	83 ec 0c             	sub    esp,0xc
c000a7a5:	83 ec 0c             	sub    esp,0xc
c000a7a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7ac:	e8 cd ff ff ff       	call   c000a77e <File::~File()>
c000a7b1:	83 c4 10             	add    esp,0x10
c000a7b4:	83 ec 08             	sub    esp,0x8
c000a7b7:	68 14 01 00 00       	push   0x114
c000a7bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7c0:	e8 3d fc ff ff       	call   c000a402 <operator delete(void*, unsigned long)>
c000a7c5:	83 c4 10             	add    esp,0x10
c000a7c8:	83 c4 0c             	add    esp,0xc
c000a7cb:	c3                   	ret    

c000a7cc <Directory::~Directory()>:
c000a7cc:	83 ec 0c             	sub    esp,0xc
c000a7cf:	ba f8 de 01 c0       	mov    edx,0xc001def8
c000a7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7d8:	89 10                	mov    DWORD PTR [eax],edx
c000a7da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7de:	83 ec 0c             	sub    esp,0xc
c000a7e1:	50                   	push   eax
c000a7e2:	e8 5d e8 ff ff       	call   c0009044 <UnixFile::~UnixFile()>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	90                   	nop
c000a7eb:	83 c4 0c             	add    esp,0xc
c000a7ee:	c3                   	ret    
c000a7ef:	90                   	nop

c000a7f0 <Directory::~Directory()>:
c000a7f0:	83 ec 0c             	sub    esp,0xc
c000a7f3:	83 ec 0c             	sub    esp,0xc
c000a7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7fa:	e8 cd ff ff ff       	call   c000a7cc <Directory::~Directory()>
c000a7ff:	83 c4 10             	add    esp,0x10
c000a802:	83 ec 08             	sub    esp,0x8
c000a805:	68 14 01 00 00       	push   0x114
c000a80a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a80e:	e8 ef fb ff ff       	call   c000a402 <operator delete(void*, unsigned long)>
c000a813:	83 c4 10             	add    esp,0x10
c000a816:	83 c4 0c             	add    esp,0xc
c000a819:	c3                   	ret    

c000a81a <Filesystem::Filesystem()>:
c000a81a:	ba 74 de 01 c0       	mov    edx,0xc001de74
c000a81f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a823:	89 10                	mov    DWORD PTR [eax],edx
c000a825:	8b 15 54 0e 02 c0    	mov    edx,DWORD PTR ds:0xc0020e54
c000a82b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a82f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000a832:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a836:	a3 54 0e 02 c0       	mov    ds:0xc0020e54,eax
c000a83b:	90                   	nop
c000a83c:	c3                   	ret    
c000a83d:	90                   	nop

c000a83e <Filesystem::~Filesystem()>:
c000a83e:	ba 74 de 01 c0       	mov    edx,0xc001de74
c000a843:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a847:	89 10                	mov    DWORD PTR [eax],edx
c000a849:	90                   	nop
c000a84a:	c3                   	ret    
c000a84b:	90                   	nop

c000a84c <Filesystem::~Filesystem()>:
c000a84c:	83 ec 0c             	sub    esp,0xc
c000a84f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a853:	e8 e6 ff ff ff       	call   c000a83e <Filesystem::~Filesystem()>
c000a858:	83 c4 04             	add    esp,0x4
c000a85b:	83 ec 08             	sub    esp,0x8
c000a85e:	6a 08                	push   0x8
c000a860:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a864:	e8 99 fb ff ff       	call   c000a402 <operator delete(void*, unsigned long)>
c000a869:	83 c4 10             	add    esp,0x10
c000a86c:	83 c4 0c             	add    esp,0xc
c000a86f:	c3                   	ret    

c000a870 <Fs::getcwd(Process*, char*, int)>:
c000a870:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a874:	31 c0                	xor    eax,eax
c000a876:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000a879:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000a87d:	7d 15                	jge    c000a894 <Fs::getcwd(Process*, char*, int)+0x24>
c000a87f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a883:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000a88a:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a88d:	84 c9                	test   cl,cl
c000a88f:	74 06                	je     c000a897 <Fs::getcwd(Process*, char*, int)+0x27>
c000a891:	40                   	inc    eax
c000a892:	eb e2                	jmp    c000a876 <Fs::getcwd(Process*, char*, int)+0x6>
c000a894:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a897:	31 c0                	xor    eax,eax
c000a899:	c3                   	ret    

c000a89a <Fs::initVFS()>:
c000a89a:	83 ec 18             	sub    esp,0x18
c000a89d:	6a 08                	push   0x8
c000a89f:	e8 15 cf ff ff       	call   c00077b9 <malloc>
c000a8a4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8a7:	e8 8c c9 00 00       	call   c0017238 <FAT::FAT()>
c000a8ac:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000a8b3:	e8 01 cf ff ff       	call   c00077b9 <malloc>
c000a8b8:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8bb:	e8 d4 d6 00 00       	call   c0017f94 <ISO9660::ISO9660()>
c000a8c0:	83 c4 1c             	add    esp,0x1c
c000a8c3:	c3                   	ret    

c000a8c4 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000a8c4:	55                   	push   ebp
c000a8c5:	57                   	push   edi
c000a8c6:	56                   	push   esi
c000a8c7:	53                   	push   ebx
c000a8c8:	81 ec 10 04 00 00    	sub    esp,0x410
c000a8ce:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000a8d5:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000a8dc:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000a8e3:	68 00 04 00 00       	push   0x400
c000a8e8:	6a 00                	push   0x0
c000a8ea:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000a8ee:	56                   	push   esi
c000a8ef:	e8 dc 5b ff ff       	call   c00004d0 <memset>
c000a8f4:	83 c4 10             	add    esp,0x10
c000a8f7:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000a8fb:	75 0b                	jne    c000a908 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000a8fd:	50                   	push   eax
c000a8fe:	50                   	push   eax
c000a8ff:	57                   	push   edi
c000a900:	56                   	push   esi
c000a901:	e8 fa 5c ff ff       	call   c0000600 <strcpy>
c000a906:	eb 41                	jmp    c000a949 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000a908:	8a 07                	mov    al,BYTE PTR [edi]
c000a90a:	3c 5c                	cmp    al,0x5c
c000a90c:	74 04                	je     c000a912 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000a90e:	3c 2f                	cmp    al,0x2f
c000a910:	75 18                	jne    c000a92a <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000a912:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a915:	3c 60                	cmp    al,0x60
c000a917:	7e 03                	jle    c000a91c <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000a919:	83 e8 20             	sub    eax,0x20
c000a91c:	88 04 24             	mov    BYTE PTR [esp],al
c000a91f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000a926:	50                   	push   eax
c000a927:	50                   	push   eax
c000a928:	eb 18                	jmp    c000a942 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000a92a:	50                   	push   eax
c000a92b:	50                   	push   eax
c000a92c:	55                   	push   ebp
c000a92d:	56                   	push   esi
c000a92e:	e8 cd 5c ff ff       	call   c0000600 <strcpy>
c000a933:	5a                   	pop    edx
c000a934:	59                   	pop    ecx
c000a935:	68 aa ed 01 c0       	push   0xc001edaa
c000a93a:	56                   	push   esi
c000a93b:	e8 80 5e ff ff       	call   c00007c0 <strcat>
c000a940:	5d                   	pop    ebp
c000a941:	58                   	pop    eax
c000a942:	57                   	push   edi
c000a943:	56                   	push   esi
c000a944:	e8 77 5e ff ff       	call   c00007c0 <strcat>
c000a949:	83 c4 10             	add    esp,0x10
c000a94c:	8a 04 24             	mov    al,BYTE PTR [esp]
c000a94f:	3c 60                	cmp    al,0x60
c000a951:	7e 03                	jle    c000a956 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000a953:	83 e8 20             	sub    eax,0x20
c000a956:	88 04 24             	mov    BYTE PTR [esp],al
c000a959:	88 03                	mov    BYTE PTR [ebx],al
c000a95b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000a962:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000a968:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000a96c:	bf 03 00 00 00       	mov    edi,0x3
c000a971:	b8 03 00 00 00       	mov    eax,0x3
c000a976:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000a979:	84 d2                	test   dl,dl
c000a97b:	0f 84 91 00 00 00    	je     c000aa12 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000a981:	8d 4f 01             	lea    ecx,[edi+0x1]
c000a984:	80 fa 5c             	cmp    dl,0x5c
c000a987:	74 05                	je     c000a98e <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000a989:	80 fa 2f             	cmp    dl,0x2f
c000a98c:	75 12                	jne    c000a9a0 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000a98e:	89 c5                	mov    ebp,eax
c000a990:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000a995:	74 09                	je     c000a9a0 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000a997:	40                   	inc    eax
c000a998:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000a99c:	89 cf                	mov    edi,ecx
c000a99e:	eb d6                	jmp    c000a976 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000a9a0:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000a9a5:	75 5b                	jne    c000aa02 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000a9a7:	80 fa 2e             	cmp    dl,0x2e
c000a9aa:	75 56                	jne    c000aa02 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000a9ac:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000a9b0:	74 19                	je     c000a9cb <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000a9b2:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000a9b7:	74 53                	je     c000aa0c <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000a9b9:	89 f9                	mov    ecx,edi
c000a9bb:	41                   	inc    ecx
c000a9bc:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000a9bf:	80 fa 2f             	cmp    dl,0x2f
c000a9c2:	74 f7                	je     c000a9bb <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000a9c4:	80 fa 5c             	cmp    dl,0x5c
c000a9c7:	74 f2                	je     c000a9bb <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000a9c9:	eb d1                	jmp    c000a99c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9cb:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000a9d0:	74 3a                	je     c000aa0c <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000a9d2:	83 f8 03             	cmp    eax,0x3
c000a9d5:	74 c5                	je     c000a99c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9d7:	41                   	inc    ecx
c000a9d8:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000a9db:	80 fa 2f             	cmp    dl,0x2f
c000a9de:	74 f7                	je     c000a9d7 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000a9e0:	80 fa 5c             	cmp    dl,0x5c
c000a9e3:	74 f2                	je     c000a9d7 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000a9e5:	48                   	dec    eax
c000a9e6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000a9ea:	75 06                	jne    c000a9f2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000a9ec:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000a9f0:	eb f3                	jmp    c000a9e5 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000a9f2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000a9f6:	74 07                	je     c000a9ff <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000a9f8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000a9fc:	48                   	dec    eax
c000a9fd:	eb f3                	jmp    c000a9f2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000a9ff:	40                   	inc    eax
c000aa00:	eb 9a                	jmp    c000a99c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa02:	80 fa 2f             	cmp    dl,0x2f
c000aa05:	74 95                	je     c000a99c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa07:	80 fa 5c             	cmp    dl,0x5c
c000aa0a:	74 90                	je     c000a99c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa0c:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000aa0f:	40                   	inc    eax
c000aa10:	eb 8a                	jmp    c000a99c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa12:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aa16:	83 ec 0c             	sub    esp,0xc
c000aa19:	53                   	push   ebx
c000aa1a:	e8 21 5b ff ff       	call   c0000540 <strlen>
c000aa1f:	83 c4 10             	add    esp,0x10
c000aa22:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000aa27:	75 26                	jne    c000aa4f <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000aa29:	83 ec 0c             	sub    esp,0xc
c000aa2c:	53                   	push   ebx
c000aa2d:	e8 0e 5b ff ff       	call   c0000540 <strlen>
c000aa32:	83 c4 10             	add    esp,0x10
c000aa35:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000aa3a:	74 26                	je     c000aa62 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000aa3c:	83 ec 0c             	sub    esp,0xc
c000aa3f:	53                   	push   ebx
c000aa40:	e8 fb 5a ff ff       	call   c0000540 <strlen>
c000aa45:	83 c4 10             	add    esp,0x10
c000aa48:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000aa4d:	eb c7                	jmp    c000aa16 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000aa4f:	83 ec 0c             	sub    esp,0xc
c000aa52:	53                   	push   ebx
c000aa53:	e8 e8 5a ff ff       	call   c0000540 <strlen>
c000aa58:	83 c4 10             	add    esp,0x10
c000aa5b:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000aa60:	74 c7                	je     c000aa29 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000aa62:	81 c4 0c 04 00 00    	add    esp,0x40c
c000aa68:	5b                   	pop    ebx
c000aa69:	5e                   	pop    esi
c000aa6a:	5f                   	pop    edi
c000aa6b:	5d                   	pop    ebp
c000aa6c:	c3                   	ret    
c000aa6d:	90                   	nop

c000aa6e <File::File(char const*, Process*)>:
c000aa6e:	83 ec 0c             	sub    esp,0xc
c000aa71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa75:	83 ec 08             	sub    esp,0x8
c000aa78:	6a 00                	push   0x0
c000aa7a:	50                   	push   eax
c000aa7b:	e8 e2 e3 ff ff       	call   c0008e62 <UnixFile::UnixFile(int)>
c000aa80:	83 c4 10             	add    esp,0x10
c000aa83:	ba dc de 01 c0       	mov    edx,0xc001dedc
c000aa88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa8c:	89 10                	mov    DWORD PTR [eax],edx
c000aa8e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000aa92:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000aa98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa9c:	83 c0 0d             	add    eax,0xd
c000aa9f:	83 ec 04             	sub    esp,0x4
c000aaa2:	52                   	push   edx
c000aaa3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aaa7:	50                   	push   eax
c000aaa8:	e8 17 fe ff ff       	call   c000a8c4 <Fs::standardiseFiles(char*, char const*, char const*)>
c000aaad:	83 c4 10             	add    esp,0x10
c000aab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aab4:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000aab7:	8d 50 bf             	lea    edx,[eax-0x41]
c000aaba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aabe:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000aac4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aac8:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000aacc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aad0:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000aad6:	25 ff 00 00 00       	and    eax,0xff
c000aadb:	8b 04 85 c0 32 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcd40]
c000aae2:	85 c0                	test   eax,eax
c000aae4:	74 42                	je     c000ab28 <File::File(char const*, Process*)+0xba>
c000aae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaea:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000aaf0:	25 ff 00 00 00       	and    eax,0xff
c000aaf5:	8b 04 85 c0 32 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcd40]
c000aafc:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ab02:	85 c0                	test   eax,eax
c000ab04:	75 22                	jne    c000ab28 <File::File(char const*, Process*)+0xba>
c000ab06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab0a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ab10:	25 ff 00 00 00       	and    eax,0xff
c000ab15:	8b 04 85 c0 32 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcd40]
c000ab1c:	83 ec 0c             	sub    esp,0xc
c000ab1f:	50                   	push   eax
c000ab20:	e8 21 20 00 00       	call   c000cb46 <LogicalDisk::mount()>
c000ab25:	83 c4 10             	add    esp,0x10
c000ab28:	90                   	nop
c000ab29:	83 c4 0c             	add    esp,0xc
c000ab2c:	c3                   	ret    
c000ab2d:	90                   	nop

c000ab2e <File::open(FileOpenMode)>:
c000ab2e:	53                   	push   ebx
c000ab2f:	b8 0b 00 00 00       	mov    eax,0xb
c000ab34:	83 ec 08             	sub    esp,0x8
c000ab37:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ab3b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000ab42:	80 fa 19             	cmp    dl,0x19
c000ab45:	77 40                	ja     c000ab87 <File::open(FileOpenMode)+0x59>
c000ab47:	8b 14 95 c0 32 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcd40]
c000ab4e:	85 d2                	test   edx,edx
c000ab50:	74 35                	je     c000ab87 <File::open(FileOpenMode)+0x59>
c000ab52:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ab58:	85 d2                	test   edx,edx
c000ab5a:	74 2b                	je     c000ab87 <File::open(FileOpenMode)+0x59>
c000ab5c:	b8 06 00 00 00       	mov    eax,0x6
c000ab61:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000ab65:	75 20                	jne    c000ab87 <File::open(FileOpenMode)+0x59>
c000ab67:	8b 02                	mov    eax,DWORD PTR [edx]
c000ab69:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000ab6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab73:	51                   	push   ecx
c000ab74:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000ab77:	51                   	push   ecx
c000ab78:	52                   	push   edx
c000ab79:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ab7c:	83 c4 10             	add    esp,0x10
c000ab7f:	85 c0                	test   eax,eax
c000ab81:	75 04                	jne    c000ab87 <File::open(FileOpenMode)+0x59>
c000ab83:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000ab87:	83 c4 08             	add    esp,0x8
c000ab8a:	5b                   	pop    ebx
c000ab8b:	c3                   	ret    

c000ab8c <File::close()>:
c000ab8c:	53                   	push   ebx
c000ab8d:	b8 0b 00 00 00       	mov    eax,0xb
c000ab92:	83 ec 08             	sub    esp,0x8
c000ab95:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ab99:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000aba0:	80 fa 19             	cmp    dl,0x19
c000aba3:	77 41                	ja     c000abe6 <File::close()+0x5a>
c000aba5:	8b 1c 95 c0 32 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdcd40]
c000abac:	85 db                	test   ebx,ebx
c000abae:	74 36                	je     c000abe6 <File::close()+0x5a>
c000abb0:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000abb7:	74 2d                	je     c000abe6 <File::close()+0x5a>
c000abb9:	b8 05 00 00 00       	mov    eax,0x5
c000abbe:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000abc2:	74 22                	je     c000abe6 <File::close()+0x5a>
c000abc4:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000abc8:	8b 04 95 c0 32 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcd40]
c000abcf:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000abd5:	53                   	push   ebx
c000abd6:	53                   	push   ebx
c000abd7:	8b 10                	mov    edx,DWORD PTR [eax]
c000abd9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000abdf:	50                   	push   eax
c000abe0:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000abe3:	83 c4 10             	add    esp,0x10
c000abe6:	83 c4 08             	add    esp,0x8
c000abe9:	5b                   	pop    ebx
c000abea:	c3                   	ret    
c000abeb:	90                   	nop

c000abec <File::seek(unsigned long long)>:
c000abec:	56                   	push   esi
c000abed:	53                   	push   ebx
c000abee:	b8 0b 00 00 00       	mov    eax,0xb
c000abf3:	51                   	push   ecx
c000abf4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000abf8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000abfc:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000ac03:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ac07:	80 fa 19             	cmp    dl,0x19
c000ac0a:	77 31                	ja     c000ac3d <File::seek(unsigned long long)+0x51>
c000ac0c:	8b 14 95 c0 32 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcd40]
c000ac13:	85 d2                	test   edx,edx
c000ac15:	74 26                	je     c000ac3d <File::seek(unsigned long long)+0x51>
c000ac17:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ac1d:	85 d2                	test   edx,edx
c000ac1f:	74 1c                	je     c000ac3d <File::seek(unsigned long long)+0x51>
c000ac21:	b8 05 00 00 00       	mov    eax,0x5
c000ac26:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ac2a:	74 11                	je     c000ac3d <File::seek(unsigned long long)+0x51>
c000ac2c:	8b 02                	mov    eax,DWORD PTR [edx]
c000ac2e:	53                   	push   ebx
c000ac2f:	51                   	push   ecx
c000ac30:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ac36:	52                   	push   edx
c000ac37:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ac3a:	83 c4 10             	add    esp,0x10
c000ac3d:	5a                   	pop    edx
c000ac3e:	5b                   	pop    ebx
c000ac3f:	5e                   	pop    esi
c000ac40:	c3                   	ret    
c000ac41:	90                   	nop

c000ac42 <File::tell(unsigned long long*)>:
c000ac42:	83 ec 0c             	sub    esp,0xc
c000ac45:	b8 0b 00 00 00       	mov    eax,0xb
c000ac4a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ac4e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ac55:	80 fa 19             	cmp    dl,0x19
c000ac58:	77 34                	ja     c000ac8e <File::tell(unsigned long long*)+0x4c>
c000ac5a:	8b 14 95 c0 32 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcd40]
c000ac61:	85 d2                	test   edx,edx
c000ac63:	74 29                	je     c000ac8e <File::tell(unsigned long long*)+0x4c>
c000ac65:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ac6b:	85 d2                	test   edx,edx
c000ac6d:	74 1f                	je     c000ac8e <File::tell(unsigned long long*)+0x4c>
c000ac6f:	b8 05 00 00 00       	mov    eax,0x5
c000ac74:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ac78:	74 14                	je     c000ac8e <File::tell(unsigned long long*)+0x4c>
c000ac7a:	50                   	push   eax
c000ac7b:	8b 02                	mov    eax,DWORD PTR [edx]
c000ac7d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac81:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ac87:	52                   	push   edx
c000ac88:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ac8b:	83 c4 10             	add    esp,0x10
c000ac8e:	83 c4 0c             	add    esp,0xc
c000ac91:	c3                   	ret    

c000ac92 <File::rewind()>:
c000ac92:	83 ec 10             	sub    esp,0x10
c000ac95:	6a 00                	push   0x0
c000ac97:	6a 00                	push   0x0
c000ac99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac9d:	e8 4a ff ff ff       	call   c000abec <File::seek(unsigned long long)>
c000aca2:	83 c4 1c             	add    esp,0x1c
c000aca5:	c3                   	ret    

c000aca6 <File::unlink()>:
c000aca6:	83 ec 0c             	sub    esp,0xc
c000aca9:	b8 0b 00 00 00       	mov    eax,0xb
c000acae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000acb2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000acb9:	80 f9 19             	cmp    cl,0x19
c000acbc:	77 2f                	ja     c000aced <File::unlink()+0x47>
c000acbe:	8b 0c 8d c0 32 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcd40]
c000acc5:	85 c9                	test   ecx,ecx
c000acc7:	74 24                	je     c000aced <File::unlink()+0x47>
c000acc9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000accf:	85 c9                	test   ecx,ecx
c000acd1:	74 1a                	je     c000aced <File::unlink()+0x47>
c000acd3:	b8 06 00 00 00       	mov    eax,0x6
c000acd8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000acdc:	75 0f                	jne    c000aced <File::unlink()+0x47>
c000acde:	83 c2 0d             	add    edx,0xd
c000ace1:	50                   	push   eax
c000ace2:	50                   	push   eax
c000ace3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ace5:	52                   	push   edx
c000ace6:	51                   	push   ecx
c000ace7:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000acea:	83 c4 10             	add    esp,0x10
c000aced:	83 c4 0c             	add    esp,0xc
c000acf0:	c3                   	ret    
c000acf1:	90                   	nop

c000acf2 <File::rename(char const*)>:
c000acf2:	83 ec 0c             	sub    esp,0xc
c000acf5:	b8 0b 00 00 00       	mov    eax,0xb
c000acfa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000acfe:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ad05:	80 f9 19             	cmp    cl,0x19
c000ad08:	77 32                	ja     c000ad3c <File::rename(char const*)+0x4a>
c000ad0a:	8b 0c 8d c0 32 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcd40]
c000ad11:	85 c9                	test   ecx,ecx
c000ad13:	74 27                	je     c000ad3c <File::rename(char const*)+0x4a>
c000ad15:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ad1b:	85 c9                	test   ecx,ecx
c000ad1d:	74 1d                	je     c000ad3c <File::rename(char const*)+0x4a>
c000ad1f:	b8 06 00 00 00       	mov    eax,0x6
c000ad24:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad28:	75 12                	jne    c000ad3c <File::rename(char const*)+0x4a>
c000ad2a:	83 c2 0d             	add    edx,0xd
c000ad2d:	50                   	push   eax
c000ad2e:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ad30:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad34:	52                   	push   edx
c000ad35:	51                   	push   ecx
c000ad36:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000ad39:	83 c4 10             	add    esp,0x10
c000ad3c:	83 c4 0c             	add    esp,0xc
c000ad3f:	c3                   	ret    

c000ad40 <File::chfatattr(unsigned char, unsigned char)>:
c000ad40:	57                   	push   edi
c000ad41:	b8 0b 00 00 00       	mov    eax,0xb
c000ad46:	56                   	push   esi
c000ad47:	53                   	push   ebx
c000ad48:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad4c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ad50:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ad57:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ad5b:	80 f9 19             	cmp    cl,0x19
c000ad5e:	77 37                	ja     c000ad97 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad60:	8b 0c 8d c0 32 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcd40]
c000ad67:	85 c9                	test   ecx,ecx
c000ad69:	74 2c                	je     c000ad97 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad6b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ad71:	85 c9                	test   ecx,ecx
c000ad73:	74 22                	je     c000ad97 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad75:	b8 06 00 00 00       	mov    eax,0x6
c000ad7a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad7e:	75 17                	jne    c000ad97 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad80:	8b 39                	mov    edi,DWORD PTR [ecx]
c000ad82:	89 f0                	mov    eax,esi
c000ad84:	83 c2 0d             	add    edx,0xd
c000ad87:	0f b6 f0             	movzx  esi,al
c000ad8a:	0f b6 db             	movzx  ebx,bl
c000ad8d:	56                   	push   esi
c000ad8e:	53                   	push   ebx
c000ad8f:	52                   	push   edx
c000ad90:	51                   	push   ecx
c000ad91:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000ad94:	83 c4 10             	add    esp,0x10
c000ad97:	5b                   	pop    ebx
c000ad98:	5e                   	pop    esi
c000ad99:	5f                   	pop    edi
c000ad9a:	c3                   	ret    
c000ad9b:	90                   	nop

c000ad9c <File::exists()>:
c000ad9c:	83 ec 0c             	sub    esp,0xc
c000ad9f:	31 c0                	xor    eax,eax
c000ada1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ada5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000adac:	80 f9 19             	cmp    cl,0x19
c000adaf:	77 24                	ja     c000add5 <File::exists()+0x39>
c000adb1:	8b 0c 8d c0 32 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcd40]
c000adb8:	85 c9                	test   ecx,ecx
c000adba:	74 19                	je     c000add5 <File::exists()+0x39>
c000adbc:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000adc2:	85 c9                	test   ecx,ecx
c000adc4:	74 0f                	je     c000add5 <File::exists()+0x39>
c000adc6:	83 c2 0d             	add    edx,0xd
c000adc9:	50                   	push   eax
c000adca:	50                   	push   eax
c000adcb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000adcd:	52                   	push   edx
c000adce:	51                   	push   ecx
c000adcf:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000add2:	83 c4 10             	add    esp,0x10
c000add5:	83 c4 0c             	add    esp,0xc
c000add8:	c3                   	ret    
c000add9:	90                   	nop

c000adda <File::stat(unsigned long long*, bool*)>:
c000adda:	56                   	push   esi
c000addb:	53                   	push   ebx
c000addc:	50                   	push   eax
c000addd:	b8 0b 00 00 00       	mov    eax,0xb
c000ade2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ade6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000adea:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000adf1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000adf5:	80 f9 19             	cmp    cl,0x19
c000adf8:	77 3d                	ja     c000ae37 <File::stat(unsigned long long*, bool*)+0x5d>
c000adfa:	8b 0c 8d c0 32 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcd40]
c000ae01:	85 c9                	test   ecx,ecx
c000ae03:	74 32                	je     c000ae37 <File::stat(unsigned long long*, bool*)+0x5d>
c000ae05:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ae0b:	85 c9                	test   ecx,ecx
c000ae0d:	74 28                	je     c000ae37 <File::stat(unsigned long long*, bool*)+0x5d>
c000ae0f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ae11:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae15:	74 13                	je     c000ae2a <File::stat(unsigned long long*, bool*)+0x50>
c000ae17:	83 ec 04             	sub    esp,0x4
c000ae1a:	56                   	push   esi
c000ae1b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000ae21:	51                   	push   ecx
c000ae22:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000ae25:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000ae28:	eb 0a                	jmp    c000ae34 <File::stat(unsigned long long*, bool*)+0x5a>
c000ae2a:	53                   	push   ebx
c000ae2b:	83 c2 0d             	add    edx,0xd
c000ae2e:	56                   	push   esi
c000ae2f:	52                   	push   edx
c000ae30:	51                   	push   ecx
c000ae31:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000ae34:	83 c4 10             	add    esp,0x10
c000ae37:	5a                   	pop    edx
c000ae38:	5b                   	pop    ebx
c000ae39:	5e                   	pop    esi
c000ae3a:	c3                   	ret    

c000ae3b <Fs::setcwd(Process*, char*)>:
c000ae3b:	55                   	push   ebp
c000ae3c:	57                   	push   edi
c000ae3d:	56                   	push   esi
c000ae3e:	53                   	push   ebx
c000ae3f:	81 ec 20 02 00 00    	sub    esp,0x220
c000ae45:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000ae4c:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000ae52:	57                   	push   edi
c000ae53:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000ae5a:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000ae5e:	56                   	push   esi
c000ae5f:	e8 60 fa ff ff       	call   c000a8c4 <Fs::standardiseFiles(char*, char const*, char const*)>
c000ae64:	89 34 24             	mov    DWORD PTR [esp],esi
c000ae67:	e8 d4 56 ff ff       	call   c0000540 <strlen>
c000ae6c:	83 c4 10             	add    esp,0x10
c000ae6f:	83 f8 02             	cmp    eax,0x2
c000ae72:	77 15                	ja     c000ae89 <Fs::setcwd(Process*, char*)+0x4e>
c000ae74:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000ae79:	83 eb 41             	sub    ebx,0x41
c000ae7c:	8b 04 9d c0 32 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdcd40]
c000ae83:	85 c0                	test   eax,eax
c000ae85:	75 1c                	jne    c000aea3 <Fs::setcwd(Process*, char*)+0x68>
c000ae87:	eb 2f                	jmp    c000aeb8 <Fs::setcwd(Process*, char*)+0x7d>
c000ae89:	83 ec 0c             	sub    esp,0xc
c000ae8c:	56                   	push   esi
c000ae8d:	e8 ae 56 ff ff       	call   c0000540 <strlen>
c000ae92:	83 c4 10             	add    esp,0x10
c000ae95:	83 f8 03             	cmp    eax,0x3
c000ae98:	75 57                	jne    c000aef1 <Fs::setcwd(Process*, char*)+0xb6>
c000ae9a:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000ae9f:	75 50                	jne    c000aef1 <Fs::setcwd(Process*, char*)+0xb6>
c000aea1:	eb d1                	jmp    c000ae74 <Fs::setcwd(Process*, char*)+0x39>
c000aea3:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000aeaa:	75 0c                	jne    c000aeb8 <Fs::setcwd(Process*, char*)+0x7d>
c000aeac:	83 ec 0c             	sub    esp,0xc
c000aeaf:	50                   	push   eax
c000aeb0:	e8 91 1c 00 00       	call   c000cb46 <LogicalDisk::mount()>
c000aeb5:	83 c4 10             	add    esp,0x10
c000aeb8:	b8 03 00 00 00       	mov    eax,0x3
c000aebd:	83 fb 19             	cmp    ebx,0x19
c000aec0:	0f 87 c6 00 00 00    	ja     c000af8c <Fs::setcwd(Process*, char*)+0x151>
c000aec6:	8b 14 9d c0 32 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffdcd40]
c000aecd:	b8 05 00 00 00       	mov    eax,0x5
c000aed2:	85 d2                	test   edx,edx
c000aed4:	0f 84 b2 00 00 00    	je     c000af8c <Fs::setcwd(Process*, char*)+0x151>
c000aeda:	b8 06 00 00 00       	mov    eax,0x6
c000aedf:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000aee6:	0f 85 92 00 00 00    	jne    c000af7e <Fs::setcwd(Process*, char*)+0x143>
c000aeec:	e9 9b 00 00 00       	jmp    c000af8c <Fs::setcwd(Process*, char*)+0x151>
c000aef1:	83 ec 0c             	sub    esp,0xc
c000aef4:	68 14 01 00 00       	push   0x114
c000aef9:	e8 bb c8 ff ff       	call   c00077b9 <malloc>
c000aefe:	83 c4 0c             	add    esp,0xc
c000af01:	89 c3                	mov    ebx,eax
c000af03:	55                   	push   ebp
c000af04:	56                   	push   esi
c000af05:	50                   	push   eax
c000af06:	e8 63 fb ff ff       	call   c000aa6e <File::File(char const*, Process*)>
c000af0b:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000af10:	83 c4 0c             	add    esp,0xc
c000af13:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000af17:	50                   	push   eax
c000af18:	8d 44 24 10          	lea    eax,[esp+0x10]
c000af1c:	50                   	push   eax
c000af1d:	53                   	push   ebx
c000af1e:	e8 b7 fe ff ff       	call   c000adda <File::stat(unsigned long long*, bool*)>
c000af23:	83 c4 10             	add    esp,0x10
c000af26:	83 f8 02             	cmp    eax,0x2
c000af29:	74 04                	je     c000af2f <Fs::setcwd(Process*, char*)+0xf4>
c000af2b:	85 c0                	test   eax,eax
c000af2d:	74 1c                	je     c000af4b <Fs::setcwd(Process*, char*)+0x110>
c000af2f:	b8 01 00 00 00       	mov    eax,0x1
c000af34:	85 db                	test   ebx,ebx
c000af36:	74 54                	je     c000af8c <Fs::setcwd(Process*, char*)+0x151>
c000af38:	83 ec 0c             	sub    esp,0xc
c000af3b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af3d:	53                   	push   ebx
c000af3e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000af41:	83 c4 10             	add    esp,0x10
c000af44:	b8 01 00 00 00       	mov    eax,0x1
c000af49:	eb 41                	jmp    c000af8c <Fs::setcwd(Process*, char*)+0x151>
c000af4b:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000af50:	75 1c                	jne    c000af6e <Fs::setcwd(Process*, char*)+0x133>
c000af52:	b8 02 00 00 00       	mov    eax,0x2
c000af57:	85 db                	test   ebx,ebx
c000af59:	74 31                	je     c000af8c <Fs::setcwd(Process*, char*)+0x151>
c000af5b:	83 ec 0c             	sub    esp,0xc
c000af5e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af60:	53                   	push   ebx
c000af61:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000af64:	83 c4 10             	add    esp,0x10
c000af67:	b8 02 00 00 00       	mov    eax,0x2
c000af6c:	eb 1e                	jmp    c000af8c <Fs::setcwd(Process*, char*)+0x151>
c000af6e:	85 db                	test   ebx,ebx
c000af70:	74 0c                	je     c000af7e <Fs::setcwd(Process*, char*)+0x143>
c000af72:	83 ec 0c             	sub    esp,0xc
c000af75:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af77:	53                   	push   ebx
c000af78:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000af7b:	83 c4 10             	add    esp,0x10
c000af7e:	50                   	push   eax
c000af7f:	50                   	push   eax
c000af80:	56                   	push   esi
c000af81:	57                   	push   edi
c000af82:	e8 79 56 ff ff       	call   c0000600 <strcpy>
c000af87:	83 c4 10             	add    esp,0x10
c000af8a:	31 c0                	xor    eax,eax
c000af8c:	81 c4 1c 02 00 00    	add    esp,0x21c
c000af92:	5b                   	pop    ebx
c000af93:	5e                   	pop    esi
c000af94:	5f                   	pop    edi
c000af95:	5d                   	pop    ebp
c000af96:	c3                   	ret    
c000af97:	90                   	nop

c000af98 <Directory::Directory(char const*, Process*)>:
c000af98:	83 ec 0c             	sub    esp,0xc
c000af9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af9f:	83 ec 08             	sub    esp,0x8
c000afa2:	6a 00                	push   0x0
c000afa4:	50                   	push   eax
c000afa5:	e8 b8 de ff ff       	call   c0008e62 <UnixFile::UnixFile(int)>
c000afaa:	83 c4 10             	add    esp,0x10
c000afad:	ba f8 de 01 c0       	mov    edx,0xc001def8
c000afb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afb6:	89 10                	mov    DWORD PTR [eax],edx
c000afb8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000afbc:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000afc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afc6:	83 c0 0d             	add    eax,0xd
c000afc9:	83 ec 04             	sub    esp,0x4
c000afcc:	52                   	push   edx
c000afcd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afd1:	50                   	push   eax
c000afd2:	e8 ed f8 ff ff       	call   c000a8c4 <Fs::standardiseFiles(char*, char const*, char const*)>
c000afd7:	83 c4 10             	add    esp,0x10
c000afda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afde:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000afe1:	8d 50 bf             	lea    edx,[eax-0x41]
c000afe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afe8:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000afee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aff2:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000aff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000affa:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b000:	25 ff 00 00 00       	and    eax,0xff
c000b005:	8b 04 85 c0 32 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcd40]
c000b00c:	85 c0                	test   eax,eax
c000b00e:	74 42                	je     c000b052 <Directory::Directory(char const*, Process*)+0xba>
c000b010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b014:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b01a:	25 ff 00 00 00       	and    eax,0xff
c000b01f:	8b 04 85 c0 32 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcd40]
c000b026:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b02c:	85 c0                	test   eax,eax
c000b02e:	75 22                	jne    c000b052 <Directory::Directory(char const*, Process*)+0xba>
c000b030:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b034:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b03a:	25 ff 00 00 00       	and    eax,0xff
c000b03f:	8b 04 85 c0 32 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcd40]
c000b046:	83 ec 0c             	sub    esp,0xc
c000b049:	50                   	push   eax
c000b04a:	e8 f7 1a 00 00       	call   c000cb46 <LogicalDisk::mount()>
c000b04f:	83 c4 10             	add    esp,0x10
c000b052:	90                   	nop
c000b053:	83 c4 0c             	add    esp,0xc
c000b056:	c3                   	ret    
c000b057:	90                   	nop

c000b058 <Directory::open()>:
c000b058:	53                   	push   ebx
c000b059:	b8 0b 00 00 00       	mov    eax,0xb
c000b05e:	83 ec 08             	sub    esp,0x8
c000b061:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b065:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b06c:	80 fa 19             	cmp    dl,0x19
c000b06f:	77 3d                	ja     c000b0ae <Directory::open()+0x56>
c000b071:	8b 14 95 c0 32 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcd40]
c000b078:	85 d2                	test   edx,edx
c000b07a:	74 32                	je     c000b0ae <Directory::open()+0x56>
c000b07c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b082:	85 d2                	test   edx,edx
c000b084:	74 28                	je     c000b0ae <Directory::open()+0x56>
c000b086:	b8 06 00 00 00       	mov    eax,0x6
c000b08b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b08f:	75 1d                	jne    c000b0ae <Directory::open()+0x56>
c000b091:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b097:	50                   	push   eax
c000b098:	8b 02                	mov    eax,DWORD PTR [edx]
c000b09a:	51                   	push   ecx
c000b09b:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b09e:	51                   	push   ecx
c000b09f:	52                   	push   edx
c000b0a0:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b0a3:	83 c4 10             	add    esp,0x10
c000b0a6:	85 c0                	test   eax,eax
c000b0a8:	75 04                	jne    c000b0ae <Directory::open()+0x56>
c000b0aa:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b0ae:	83 c4 08             	add    esp,0x8
c000b0b1:	5b                   	pop    ebx
c000b0b2:	c3                   	ret    
c000b0b3:	90                   	nop

c000b0b4 <Directory::close()>:
c000b0b4:	53                   	push   ebx
c000b0b5:	b8 0b 00 00 00       	mov    eax,0xb
c000b0ba:	83 ec 08             	sub    esp,0x8
c000b0bd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b0c1:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b0c8:	80 fa 19             	cmp    dl,0x19
c000b0cb:	77 41                	ja     c000b10e <Directory::close()+0x5a>
c000b0cd:	8b 1c 95 c0 32 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdcd40]
c000b0d4:	85 db                	test   ebx,ebx
c000b0d6:	74 36                	je     c000b10e <Directory::close()+0x5a>
c000b0d8:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b0df:	74 2d                	je     c000b10e <Directory::close()+0x5a>
c000b0e1:	b8 05 00 00 00       	mov    eax,0x5
c000b0e6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b0ea:	74 22                	je     c000b10e <Directory::close()+0x5a>
c000b0ec:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b0f0:	8b 04 95 c0 32 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcd40]
c000b0f7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b0fd:	53                   	push   ebx
c000b0fe:	53                   	push   ebx
c000b0ff:	8b 10                	mov    edx,DWORD PTR [eax]
c000b101:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b107:	50                   	push   eax
c000b108:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	83 c4 08             	add    esp,0x8
c000b111:	5b                   	pop    ebx
c000b112:	c3                   	ret    
c000b113:	90                   	nop

c000b114 <Directory::unlink()>:
c000b114:	83 ec 0c             	sub    esp,0xc
c000b117:	b8 0b 00 00 00       	mov    eax,0xb
c000b11c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b120:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b127:	80 f9 19             	cmp    cl,0x19
c000b12a:	77 2f                	ja     c000b15b <Directory::unlink()+0x47>
c000b12c:	8b 0c 8d c0 32 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcd40]
c000b133:	85 c9                	test   ecx,ecx
c000b135:	74 24                	je     c000b15b <Directory::unlink()+0x47>
c000b137:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b13d:	85 c9                	test   ecx,ecx
c000b13f:	74 1a                	je     c000b15b <Directory::unlink()+0x47>
c000b141:	b8 06 00 00 00       	mov    eax,0x6
c000b146:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b14a:	75 0f                	jne    c000b15b <Directory::unlink()+0x47>
c000b14c:	83 c2 0d             	add    edx,0xd
c000b14f:	50                   	push   eax
c000b150:	50                   	push   eax
c000b151:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b153:	52                   	push   edx
c000b154:	51                   	push   ecx
c000b155:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b158:	83 c4 10             	add    esp,0x10
c000b15b:	83 c4 0c             	add    esp,0xc
c000b15e:	c3                   	ret    
c000b15f:	90                   	nop

c000b160 <Directory::rename(char const*)>:
c000b160:	83 ec 0c             	sub    esp,0xc
c000b163:	b8 0b 00 00 00       	mov    eax,0xb
c000b168:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b16c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b173:	80 f9 19             	cmp    cl,0x19
c000b176:	77 32                	ja     c000b1aa <Directory::rename(char const*)+0x4a>
c000b178:	8b 0c 8d c0 32 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcd40]
c000b17f:	85 c9                	test   ecx,ecx
c000b181:	74 27                	je     c000b1aa <Directory::rename(char const*)+0x4a>
c000b183:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b189:	85 c9                	test   ecx,ecx
c000b18b:	74 1d                	je     c000b1aa <Directory::rename(char const*)+0x4a>
c000b18d:	b8 06 00 00 00       	mov    eax,0x6
c000b192:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b196:	75 12                	jne    c000b1aa <Directory::rename(char const*)+0x4a>
c000b198:	83 c2 0d             	add    edx,0xd
c000b19b:	50                   	push   eax
c000b19c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b19e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b1a2:	52                   	push   edx
c000b1a3:	51                   	push   ecx
c000b1a4:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b1a7:	83 c4 10             	add    esp,0x10
c000b1aa:	83 c4 0c             	add    esp,0xc
c000b1ad:	c3                   	ret    

c000b1ae <Directory::exists()>:
c000b1ae:	83 ec 0c             	sub    esp,0xc
c000b1b1:	31 c0                	xor    eax,eax
c000b1b3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1b7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b1be:	80 f9 19             	cmp    cl,0x19
c000b1c1:	77 24                	ja     c000b1e7 <Directory::exists()+0x39>
c000b1c3:	8b 0c 8d c0 32 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcd40]
c000b1ca:	85 c9                	test   ecx,ecx
c000b1cc:	74 19                	je     c000b1e7 <Directory::exists()+0x39>
c000b1ce:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b1d4:	85 c9                	test   ecx,ecx
c000b1d6:	74 0f                	je     c000b1e7 <Directory::exists()+0x39>
c000b1d8:	83 c2 0d             	add    edx,0xd
c000b1db:	50                   	push   eax
c000b1dc:	50                   	push   eax
c000b1dd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b1df:	52                   	push   edx
c000b1e0:	51                   	push   ecx
c000b1e1:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b1e4:	83 c4 10             	add    esp,0x10
c000b1e7:	83 c4 0c             	add    esp,0xc
c000b1ea:	c3                   	ret    
c000b1eb:	90                   	nop

c000b1ec <Directory::read(dirent*)>:
c000b1ec:	83 ec 1c             	sub    esp,0x1c
c000b1ef:	b8 0b 00 00 00       	mov    eax,0xb
c000b1f4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1f8:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b1ff:	80 fa 19             	cmp    dl,0x19
c000b202:	77 30                	ja     c000b234 <Directory::read(dirent*)+0x48>
c000b204:	8b 14 95 c0 32 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcd40]
c000b20b:	85 d2                	test   edx,edx
c000b20d:	74 25                	je     c000b234 <Directory::read(dirent*)+0x48>
c000b20f:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b216:	74 1c                	je     c000b234 <Directory::read(dirent*)+0x48>
c000b218:	83 ec 0c             	sub    esp,0xc
c000b21b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b21d:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b221:	52                   	push   edx
c000b222:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b226:	6a 00                	push   0x0
c000b228:	68 10 01 00 00       	push   0x110
c000b22d:	51                   	push   ecx
c000b22e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b231:	83 c4 20             	add    esp,0x20
c000b234:	83 c4 1c             	add    esp,0x1c
c000b237:	c3                   	ret    

c000b238 <Directory::create()>:
c000b238:	83 ec 0c             	sub    esp,0xc
c000b23b:	b8 0b 00 00 00       	mov    eax,0xb
c000b240:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b244:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b24b:	80 f9 19             	cmp    cl,0x19
c000b24e:	77 2f                	ja     c000b27f <Directory::create()+0x47>
c000b250:	8b 0c 8d c0 32 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcd40]
c000b257:	85 c9                	test   ecx,ecx
c000b259:	74 24                	je     c000b27f <Directory::create()+0x47>
c000b25b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b261:	85 c9                	test   ecx,ecx
c000b263:	74 1a                	je     c000b27f <Directory::create()+0x47>
c000b265:	b8 06 00 00 00       	mov    eax,0x6
c000b26a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b26e:	75 0f                	jne    c000b27f <Directory::create()+0x47>
c000b270:	83 c2 0d             	add    edx,0xd
c000b273:	50                   	push   eax
c000b274:	50                   	push   eax
c000b275:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b277:	52                   	push   edx
c000b278:	51                   	push   ecx
c000b279:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b27c:	83 c4 10             	add    esp,0x10
c000b27f:	83 c4 0c             	add    esp,0xc
c000b282:	c3                   	ret    
c000b283:	90                   	nop

c000b284 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b284:	b8 0a 00 00 00       	mov    eax,0xa
c000b289:	c3                   	ret    
c000b28a:	66 90                	xchg   ax,ax

c000b28c <Bus::Bus(char const*)>:
c000b28c:	83 ec 0c             	sub    esp,0xc
c000b28f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b293:	83 ec 08             	sub    esp,0x8
c000b296:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b29a:	50                   	push   eax
c000b29b:	e8 30 08 00 00       	call   c000bad0 <Device::Device(char const*)>
c000b2a0:	83 c4 10             	add    esp,0x10
c000b2a3:	ba 14 df 01 c0       	mov    edx,0xc001df14
c000b2a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2ac:	89 10                	mov    DWORD PTR [eax],edx
c000b2ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2b2:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b2bc:	90                   	nop
c000b2bd:	83 c4 0c             	add    esp,0xc
c000b2c0:	c3                   	ret    
c000b2c1:	90                   	nop
c000b2c2:	66 90                	xchg   ax,ax

c000b2c4 <Bus::~Bus()>:
c000b2c4:	83 ec 0c             	sub    esp,0xc
c000b2c7:	ba 14 df 01 c0       	mov    edx,0xc001df14
c000b2cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2d0:	89 10                	mov    DWORD PTR [eax],edx
c000b2d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2d6:	83 ec 0c             	sub    esp,0xc
c000b2d9:	50                   	push   eax
c000b2da:	e8 5b 05 00 00       	call   c000b83a <Device::~Device()>
c000b2df:	83 c4 10             	add    esp,0x10
c000b2e2:	90                   	nop
c000b2e3:	83 c4 0c             	add    esp,0xc
c000b2e6:	c3                   	ret    
c000b2e7:	90                   	nop

c000b2e8 <Bus::~Bus()>:
c000b2e8:	83 ec 0c             	sub    esp,0xc
c000b2eb:	83 ec 0c             	sub    esp,0xc
c000b2ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2f2:	e8 cd ff ff ff       	call   c000b2c4 <Bus::~Bus()>
c000b2f7:	83 c4 10             	add    esp,0x10
c000b2fa:	83 ec 08             	sub    esp,0x8
c000b2fd:	68 58 01 00 00       	push   0x158
c000b302:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b306:	e8 f7 f0 ff ff       	call   c000a402 <operator delete(void*, unsigned long)>
c000b30b:	83 c4 10             	add    esp,0x10
c000b30e:	83 c4 0c             	add    esp,0xc
c000b311:	c3                   	ret    

c000b312 <beepThread(void*)>:
c000b312:	83 ec 0c             	sub    esp,0xc
c000b315:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c000b31a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b31e:	48                   	dec    eax
c000b31f:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c000b324:	75 01                	jne    c000b327 <beepThread(void*)+0x15>
c000b326:	fb                   	sti    
c000b327:	83 ec 0c             	sub    esp,0xc
c000b32a:	6b c2 0a             	imul   eax,edx,0xa
c000b32d:	50                   	push   eax
c000b32e:	e8 e9 88 00 00       	call   c0013c1c <milliTenthSleep(unsigned int)>
c000b333:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b33a:	e8 8f a6 00 00       	call   c00159ce <HalMakeBeep(int)>
c000b33f:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b347:	83 c4 1c             	add    esp,0x1c
c000b34a:	e9 c9 87 00 00       	jmp    c0013b18 <blockTask(TaskState)>

c000b34f <Krnl::beep(int, int, bool)>:
c000b34f:	56                   	push   esi
c000b350:	53                   	push   ebx
c000b351:	83 ec 10             	sub    esp,0x10
c000b354:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b358:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b35c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b360:	e8 69 a6 00 00       	call   c00159ce <HalMakeBeep(int)>
c000b365:	83 c4 10             	add    esp,0x10
c000b368:	89 f0                	mov    eax,esi
c000b36a:	84 c0                	test   al,al
c000b36c:	74 1e                	je     c000b38c <Krnl::beep(int, int, bool)+0x3d>
c000b36e:	83 ec 0c             	sub    esp,0xc
c000b371:	6b db 0a             	imul   ebx,ebx,0xa
c000b374:	53                   	push   ebx
c000b375:	e8 a2 88 00 00       	call   c0013c1c <milliTenthSleep(unsigned int)>
c000b37a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b382:	83 c4 14             	add    esp,0x14
c000b385:	5b                   	pop    ebx
c000b386:	5e                   	pop    esi
c000b387:	e9 42 a6 00 00       	jmp    c00159ce <HalMakeBeep(int)>
c000b38c:	68 e6 00 00 00       	push   0xe6
c000b391:	53                   	push   ebx
c000b392:	68 12 b3 00 c0       	push   0xc000b312
c000b397:	ff 35 30 40 02 c0    	push   DWORD PTR ds:0xc0024030
c000b39d:	e8 5a 83 00 00       	call   c00136fc <Process::createThread(void (*)(void*), void*, int)>
c000b3a2:	83 c4 14             	add    esp,0x14
c000b3a5:	5b                   	pop    ebx
c000b3a6:	5e                   	pop    esi
c000b3a7:	c3                   	ret    

c000b3a8 <User::loadClockSettings(int)>:
c000b3a8:	53                   	push   ebx
c000b3a9:	83 ec 14             	sub    esp,0x14
c000b3ac:	68 14 01 00 00       	push   0x114
c000b3b1:	e8 03 c4 ff ff       	call   c00077b9 <malloc>
c000b3b6:	83 c4 0c             	add    esp,0xc
c000b3b9:	89 c3                	mov    ebx,eax
c000b3bb:	ff 35 30 40 02 c0    	push   DWORD PTR ds:0xc0024030
c000b3c1:	68 38 df 01 c0       	push   0xc001df38
c000b3c6:	50                   	push   eax
c000b3c7:	e8 a2 f6 ff ff       	call   c000aa6e <File::File(char const*, Process*)>
c000b3cc:	58                   	pop    eax
c000b3cd:	5a                   	pop    edx
c000b3ce:	6a 01                	push   0x1
c000b3d0:	53                   	push   ebx
c000b3d1:	e8 58 f7 ff ff       	call   c000ab2e <File::open(FileOpenMode)>
c000b3d6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b3d9:	e8 ae f7 ff ff       	call   c000ab8c <File::close()>
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	85 db                	test   ebx,ebx
c000b3e3:	74 0f                	je     c000b3f4 <User::loadClockSettings(int)+0x4c>
c000b3e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3e7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b3eb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b3ee:	83 c4 08             	add    esp,0x8
c000b3f1:	5b                   	pop    ebx
c000b3f2:	ff e0                	jmp    eax
c000b3f4:	83 c4 08             	add    esp,0x8
c000b3f7:	5b                   	pop    ebx
c000b3f8:	c3                   	ret    
c000b3f9:	90                   	nop

c000b3fa <Clock::Clock(char const*)>:
c000b3fa:	83 ec 0c             	sub    esp,0xc
c000b3fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b401:	83 ec 08             	sub    esp,0x8
c000b404:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b408:	50                   	push   eax
c000b409:	e8 c2 06 00 00       	call   c000bad0 <Device::Device(char const*)>
c000b40e:	83 c4 10             	add    esp,0x10
c000b411:	ba 60 df 01 c0       	mov    edx,0xc001df60
c000b416:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b41a:	89 10                	mov    DWORD PTR [eax],edx
c000b41c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b420:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b42a:	90                   	nop
c000b42b:	83 c4 0c             	add    esp,0xc
c000b42e:	c3                   	ret    
c000b42f:	90                   	nop

c000b430 <Clock::~Clock()>:
c000b430:	83 ec 0c             	sub    esp,0xc
c000b433:	ba 60 df 01 c0       	mov    edx,0xc001df60
c000b438:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b43c:	89 10                	mov    DWORD PTR [eax],edx
c000b43e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b442:	83 ec 0c             	sub    esp,0xc
c000b445:	50                   	push   eax
c000b446:	e8 ef 03 00 00       	call   c000b83a <Device::~Device()>
c000b44b:	83 c4 10             	add    esp,0x10
c000b44e:	90                   	nop
c000b44f:	83 c4 0c             	add    esp,0xc
c000b452:	c3                   	ret    
c000b453:	90                   	nop

c000b454 <Clock::~Clock()>:
c000b454:	83 ec 0c             	sub    esp,0xc
c000b457:	83 ec 0c             	sub    esp,0xc
c000b45a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b45e:	e8 cd ff ff ff       	call   c000b430 <Clock::~Clock()>
c000b463:	83 c4 10             	add    esp,0x10
c000b466:	83 ec 08             	sub    esp,0x8
c000b469:	68 58 01 00 00       	push   0x158
c000b46e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b472:	e8 8b ef ff ff       	call   c000a402 <operator delete(void*, unsigned long)>
c000b477:	83 c4 10             	add    esp,0x10
c000b47a:	83 c4 0c             	add    esp,0xc
c000b47d:	c3                   	ret    

c000b47e <Clock::timeInSecondsLocal()>:
c000b47e:	53                   	push   ebx
c000b47f:	83 ec 14             	sub    esp,0x14
c000b482:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b486:	8b 10                	mov    edx,DWORD PTR [eax]
c000b488:	50                   	push   eax
c000b489:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b48c:	0f b6 0d 58 0e 02 c0 	movzx  ecx,BYTE PTR ds:0xc0020e58
c000b493:	03 0d 5c 0e 02 c0    	add    ecx,DWORD PTR ds:0xc0020e5c
c000b499:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b49f:	89 cb                	mov    ebx,ecx
c000b4a1:	c1 fb 1f             	sar    ebx,0x1f
c000b4a4:	01 c8                	add    eax,ecx
c000b4a6:	11 da                	adc    edx,ebx
c000b4a8:	83 c4 10             	add    esp,0x10
c000b4ab:	31 c9                	xor    ecx,ecx
c000b4ad:	80 3d 59 0e 02 c0 00 	cmp    BYTE PTR ds:0xc0020e59,0x0
c000b4b4:	74 05                	je     c000b4bb <Clock::timeInSecondsLocal()+0x3d>
c000b4b6:	b9 08 07 00 00       	mov    ecx,0x708
c000b4bb:	31 db                	xor    ebx,ebx
c000b4bd:	01 c8                	add    eax,ecx
c000b4bf:	11 da                	adc    edx,ebx
c000b4c1:	83 c4 08             	add    esp,0x8
c000b4c4:	5b                   	pop    ebx
c000b4c5:	c3                   	ret    

c000b4c6 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b4c6:	57                   	push   edi
c000b4c7:	56                   	push   esi
c000b4c8:	53                   	push   ebx
c000b4c9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b4cd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b4d1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b4d3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b4d7:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b4da:	0f b6 05 58 0e 02 c0 	movzx  eax,BYTE PTR ds:0xc0020e58
c000b4e1:	03 05 5c 0e 02 c0    	add    eax,DWORD PTR ds:0xc0020e5c
c000b4e7:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b4ed:	99                   	cdq    
c000b4ee:	29 c6                	sub    esi,eax
c000b4f0:	19 d7                	sbb    edi,edx
c000b4f2:	89 f0                	mov    eax,esi
c000b4f4:	89 fa                	mov    edx,edi
c000b4f6:	31 f6                	xor    esi,esi
c000b4f8:	80 3d 59 0e 02 c0 00 	cmp    BYTE PTR ds:0xc0020e59,0x0
c000b4ff:	74 05                	je     c000b506 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b501:	be 08 07 00 00       	mov    esi,0x708
c000b506:	31 ff                	xor    edi,edi
c000b508:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b50c:	29 f0                	sub    eax,esi
c000b50e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b512:	19 fa                	sbb    edx,edi
c000b514:	89 d8                	mov    eax,ebx
c000b516:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b51a:	5b                   	pop    ebx
c000b51b:	5e                   	pop    esi
c000b51c:	5f                   	pop    edi
c000b51d:	ff e0                	jmp    eax

c000b51f <datetimeToSeconds(datetime_t)>:
c000b51f:	55                   	push   ebp
c000b520:	57                   	push   edi
c000b521:	56                   	push   esi
c000b522:	53                   	push   ebx
c000b523:	83 ec 14             	sub    esp,0x14
c000b526:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b52a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b52e:	89 d3                	mov    ebx,edx
c000b530:	0f b6 c6             	movzx  eax,dh
c000b533:	c1 eb 10             	shr    ebx,0x10
c000b536:	48                   	dec    eax
c000b537:	66 81 eb 6c 07       	sub    bx,0x76c
c000b53c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000b540:	0f b6 f5             	movzx  esi,ch
c000b543:	89 cf                	mov    edi,ecx
c000b545:	6b f6 3c             	imul   esi,esi,0x3c
c000b548:	c1 ef 10             	shr    edi,0x10
c000b54b:	0f b6 c9             	movzx  ecx,cl
c000b54e:	89 f8                	mov    eax,edi
c000b550:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b556:	0f b6 f8             	movzx  edi,al
c000b559:	0f b6 d2             	movzx  edx,dl
c000b55c:	01 fe                	add    esi,edi
c000b55e:	01 f1                	add    ecx,esi
c000b560:	0f b7 f3             	movzx  esi,bx
c000b563:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000b567:	c1 f9 1f             	sar    ecx,0x1f
c000b56a:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000b56f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b573:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000b578:	8b 0c 8d a0 df 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe2060]
c000b57f:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000b583:	76 29                	jbe    c000b5ae <datetimeToSeconds(datetime_t)+0x8f>
c000b585:	f6 c3 03             	test   bl,0x3
c000b588:	75 24                	jne    c000b5ae <datetimeToSeconds(datetime_t)+0x8f>
c000b58a:	31 d2                	xor    edx,edx
c000b58c:	bf 64 00 00 00       	mov    edi,0x64
c000b591:	89 d8                	mov    eax,ebx
c000b593:	66 f7 f7             	div    di
c000b596:	66 85 d2             	test   dx,dx
c000b599:	75 12                	jne    c000b5ad <datetimeToSeconds(datetime_t)+0x8e>
c000b59b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000b5a1:	bf 90 01 00 00       	mov    edi,0x190
c000b5a6:	99                   	cdq    
c000b5a7:	f7 ff                	idiv   edi
c000b5a9:	85 d2                	test   edx,edx
c000b5ab:	75 01                	jne    c000b5ae <datetimeToSeconds(datetime_t)+0x8f>
c000b5ad:	41                   	inc    ecx
c000b5ae:	66 83 fb 46          	cmp    bx,0x46
c000b5b2:	76 45                	jbe    c000b5f9 <datetimeToSeconds(datetime_t)+0xda>
c000b5b4:	bb 46 00 00 00       	mov    ebx,0x46
c000b5b9:	bf 64 00 00 00       	mov    edi,0x64
c000b5be:	bd 90 01 00 00       	mov    ebp,0x190
c000b5c3:	b8 6d 01 00 00       	mov    eax,0x16d
c000b5c8:	f6 c3 03             	test   bl,0x3
c000b5cb:	75 23                	jne    c000b5f0 <datetimeToSeconds(datetime_t)+0xd1>
c000b5cd:	89 d8                	mov    eax,ebx
c000b5cf:	99                   	cdq    
c000b5d0:	f7 ff                	idiv   edi
c000b5d2:	b8 6e 01 00 00       	mov    eax,0x16e
c000b5d7:	85 d2                	test   edx,edx
c000b5d9:	75 15                	jne    c000b5f0 <datetimeToSeconds(datetime_t)+0xd1>
c000b5db:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000b5e1:	99                   	cdq    
c000b5e2:	f7 fd                	idiv   ebp
c000b5e4:	31 c0                	xor    eax,eax
c000b5e6:	85 d2                	test   edx,edx
c000b5e8:	0f 94 c0             	sete   al
c000b5eb:	05 6d 01 00 00       	add    eax,0x16d
c000b5f0:	01 c1                	add    ecx,eax
c000b5f2:	43                   	inc    ebx
c000b5f3:	39 f3                	cmp    ebx,esi
c000b5f5:	7c cc                	jl     c000b5c3 <datetimeToSeconds(datetime_t)+0xa4>
c000b5f7:	eb 3b                	jmp    c000b634 <datetimeToSeconds(datetime_t)+0x115>
c000b5f9:	74 39                	je     c000b634 <datetimeToSeconds(datetime_t)+0x115>
c000b5fb:	b8 45 00 00 00       	mov    eax,0x45
c000b600:	89 c2                	mov    edx,eax
c000b602:	83 e2 03             	and    edx,0x3
c000b605:	39 f0                	cmp    eax,esi
c000b607:	7e 13                	jle    c000b61c <datetimeToSeconds(datetime_t)+0xfd>
c000b609:	85 d2                	test   edx,edx
c000b60b:	0f 94 c2             	sete   dl
c000b60e:	48                   	dec    eax
c000b60f:	0f b6 d2             	movzx  edx,dl
c000b612:	81 c2 6d 01 00 00    	add    edx,0x16d
c000b618:	29 d1                	sub    ecx,edx
c000b61a:	eb e4                	jmp    c000b600 <datetimeToSeconds(datetime_t)+0xe1>
c000b61c:	b8 6d 01 00 00       	mov    eax,0x16d
c000b621:	85 d2                	test   edx,edx
c000b623:	75 0d                	jne    c000b632 <datetimeToSeconds(datetime_t)+0x113>
c000b625:	31 c0                	xor    eax,eax
c000b627:	66 85 db             	test   bx,bx
c000b62a:	0f 95 c0             	setne  al
c000b62d:	05 6d 01 00 00       	add    eax,0x16d
c000b632:	29 c1                	sub    ecx,eax
c000b634:	b8 80 51 01 00       	mov    eax,0x15180
c000b639:	f7 e9                	imul   ecx
c000b63b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b63f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000b643:	83 c4 14             	add    esp,0x14
c000b646:	5b                   	pop    ebx
c000b647:	5e                   	pop    esi
c000b648:	5f                   	pop    edi
c000b649:	5d                   	pop    ebp
c000b64a:	c3                   	ret    
c000b64b:	90                   	nop

c000b64c <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000b64c:	57                   	push   edi
c000b64d:	56                   	push   esi
c000b64e:	53                   	push   ebx
c000b64f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b653:	8b 06                	mov    eax,DWORD PTR [esi]
c000b655:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000b658:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b65c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b660:	e8 ba fe ff ff       	call   c000b51f <datetimeToSeconds(datetime_t)>
c000b665:	59                   	pop    ecx
c000b666:	0f b6 0d 58 0e 02 c0 	movzx  ecx,BYTE PTR ds:0xc0020e58
c000b66d:	5b                   	pop    ebx
c000b66e:	03 0d 5c 0e 02 c0    	add    ecx,DWORD PTR ds:0xc0020e5c
c000b674:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b67a:	89 cb                	mov    ebx,ecx
c000b67c:	c1 fb 1f             	sar    ebx,0x1f
c000b67f:	29 c8                	sub    eax,ecx
c000b681:	19 da                	sbb    edx,ebx
c000b683:	31 c9                	xor    ecx,ecx
c000b685:	80 3d 59 0e 02 c0 00 	cmp    BYTE PTR ds:0xc0020e59,0x0
c000b68c:	74 05                	je     c000b693 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000b68e:	b9 08 07 00 00       	mov    ecx,0x708
c000b693:	31 db                	xor    ebx,ebx
c000b695:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000b699:	29 c8                	sub    eax,ecx
c000b69b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b69f:	19 da                	sbb    edx,ebx
c000b6a1:	89 f8                	mov    eax,edi
c000b6a3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b6a7:	5b                   	pop    ebx
c000b6a8:	5e                   	pop    esi
c000b6a9:	5f                   	pop    edi
c000b6aa:	ff e0                	jmp    eax

c000b6ac <secondsToDatetime(unsigned long long)>:
c000b6ac:	55                   	push   ebp
c000b6ad:	57                   	push   edi
c000b6ae:	56                   	push   esi
c000b6af:	53                   	push   ebx
c000b6b0:	83 ec 1c             	sub    esp,0x1c
c000b6b3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b6b7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b6bb:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000b6bf:	6a 00                	push   0x0
c000b6c1:	68 80 51 01 00       	push   0x15180
c000b6c6:	55                   	push   ebp
c000b6c7:	57                   	push   edi
c000b6c8:	e8 53 0b 01 00       	call   c001c220 <__udivdi3>
c000b6cd:	83 c4 10             	add    esp,0x10
c000b6d0:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000b6d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6da:	6a 00                	push   0x0
c000b6dc:	68 80 51 01 00       	push   0x15180
c000b6e1:	55                   	push   ebp
c000b6e2:	57                   	push   edi
c000b6e3:	bf 10 0e 00 00       	mov    edi,0xe10
c000b6e8:	e8 33 0c 01 00       	call   c001c320 <__umoddi3>
c000b6ed:	83 c4 10             	add    esp,0x10
c000b6f0:	99                   	cdq    
c000b6f1:	f7 ff                	idiv   edi
c000b6f3:	bf 3c 00 00 00       	mov    edi,0x3c
c000b6f8:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000b6fb:	89 d0                	mov    eax,edx
c000b6fd:	99                   	cdq    
c000b6fe:	f7 ff                	idiv   edi
c000b700:	85 db                	test   ebx,ebx
c000b702:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000b705:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000b708:	79 11                	jns    c000b71b <secondsToDatetime(unsigned long long)+0x6f>
c000b70a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b70e:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000b714:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b719:	eb 07                	jmp    c000b722 <secondsToDatetime(unsigned long long)+0x76>
c000b71b:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b720:	89 d8                	mov    eax,ebx
c000b722:	bf b4 05 00 00       	mov    edi,0x5b4
c000b727:	99                   	cdq    
c000b728:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000b72d:	f7 f9                	idiv   ecx
c000b72f:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000b734:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b738:	31 d2                	xor    edx,edx
c000b73a:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000b742:	01 c3                	add    ebx,eax
c000b744:	89 d8                	mov    eax,ebx
c000b746:	f7 f1                	div    ecx
c000b748:	31 d2                	xor    edx,edx
c000b74a:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000b74d:	89 d8                	mov    eax,ebx
c000b74f:	f7 f7                	div    edi
c000b751:	31 d2                	xor    edx,edx
c000b753:	29 c1                	sub    ecx,eax
c000b755:	89 d8                	mov    eax,ebx
c000b757:	f7 f5                	div    ebp
c000b759:	bd 6d 01 00 00       	mov    ebp,0x16d
c000b75e:	29 c1                	sub    ecx,eax
c000b760:	31 d2                	xor    edx,edx
c000b762:	89 c8                	mov    eax,ecx
c000b764:	f7 f5                	div    ebp
c000b766:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000b76b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b76f:	31 d2                	xor    edx,edx
c000b771:	89 c8                	mov    eax,ecx
c000b773:	f7 f5                	div    ebp
c000b775:	31 d2                	xor    edx,edx
c000b777:	01 c3                	add    ebx,eax
c000b779:	89 c8                	mov    eax,ecx
c000b77b:	f7 f7                	div    edi
c000b77d:	bf 99 00 00 00       	mov    edi,0x99
c000b782:	29 c3                	sub    ebx,eax
c000b784:	31 d2                	xor    edx,edx
c000b786:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000b78e:	29 c3                	sub    ebx,eax
c000b790:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000b793:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000b796:	bb 05 00 00 00       	mov    ebx,0x5
c000b79b:	83 c1 02             	add    ecx,0x2
c000b79e:	89 c8                	mov    eax,ecx
c000b7a0:	f7 f7                	div    edi
c000b7a2:	31 d2                	xor    edx,edx
c000b7a4:	89 c7                	mov    edi,eax
c000b7a6:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000b7ac:	83 c0 02             	add    eax,0x2
c000b7af:	f7 f3                	div    ebx
c000b7b1:	89 eb                	mov    ebx,ebp
c000b7b3:	29 c3                	sub    ebx,eax
c000b7b5:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000b7bb:	88 1e                	mov    BYTE PTR [esi],bl
c000b7bd:	19 c0                	sbb    eax,eax
c000b7bf:	31 d2                	xor    edx,edx
c000b7c1:	83 e0 0c             	and    eax,0xc
c000b7c4:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000b7c8:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000b7d0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b7d4:	83 f9 01             	cmp    ecx,0x1
c000b7d7:	0f 96 c2             	setbe  dl
c000b7da:	41                   	inc    ecx
c000b7db:	01 d0                	add    eax,edx
c000b7dd:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000b7e0:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000b7e4:	83 c4 1c             	add    esp,0x1c
c000b7e7:	89 f0                	mov    eax,esi
c000b7e9:	5b                   	pop    ebx
c000b7ea:	5e                   	pop    esi
c000b7eb:	5f                   	pop    edi
c000b7ec:	5d                   	pop    ebp
c000b7ed:	c2 04 00             	ret    0x4

c000b7f0 <Clock::timeInDatetimeLocal()>:
c000b7f0:	53                   	push   ebx
c000b7f1:	83 ec 14             	sub    esp,0x14
c000b7f4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b7f8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b7fc:	e8 7d fc ff ff       	call   c000b47e <Clock::timeInSecondsLocal()>
c000b801:	83 c4 0c             	add    esp,0xc
c000b804:	52                   	push   edx
c000b805:	50                   	push   eax
c000b806:	53                   	push   ebx
c000b807:	e8 a0 fe ff ff       	call   c000b6ac <secondsToDatetime(unsigned long long)>
c000b80c:	89 d8                	mov    eax,ebx
c000b80e:	83 c4 14             	add    esp,0x14
c000b811:	5b                   	pop    ebx
c000b812:	c2 04 00             	ret    0x4
c000b815:	90                   	nop

c000b816 <Device::hibernate()>:
c000b816:	c3                   	ret    
c000b817:	90                   	nop

c000b818 <Device::wake()>:
c000b818:	c3                   	ret    
c000b819:	90                   	nop

c000b81a <Device::detect()>:
c000b81a:	c3                   	ret    
c000b81b:	90                   	nop

c000b81c <Device::disableLegacy()>:
c000b81c:	c3                   	ret    
c000b81d:	90                   	nop

c000b81e <Device::powerSaving(PowerSavingLevel)>:
c000b81e:	c3                   	ret    
c000b81f:	90                   	nop

c000b820 <DriverlessDevice::close(int, int, void*)>:
c000b820:	31 c0                	xor    eax,eax
c000b822:	c3                   	ret    
c000b823:	90                   	nop

c000b824 <DriverlessDevice::detect()>:
c000b824:	c3                   	ret    
c000b825:	90                   	nop

c000b826 <DriverlessDevice::open(int, int, void*)>:
c000b826:	83 ec 18             	sub    esp,0x18
c000b829:	68 d0 df 01 c0       	push   0xc001dfd0
c000b82e:	e8 30 49 00 00       	call   c0010163 <KePanic(char const*)>
c000b833:	83 c8 ff             	or     eax,0xffffffff
c000b836:	83 c4 1c             	add    esp,0x1c
c000b839:	c3                   	ret    

c000b83a <Device::~Device()>:
c000b83a:	ba 30 e0 01 c0       	mov    edx,0xc001e030
c000b83f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b843:	89 10                	mov    DWORD PTR [eax],edx
c000b845:	90                   	nop
c000b846:	c3                   	ret    
c000b847:	90                   	nop

c000b848 <Device::~Device()>:
c000b848:	83 ec 0c             	sub    esp,0xc
c000b84b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b84f:	e8 e6 ff ff ff       	call   c000b83a <Device::~Device()>
c000b854:	83 c4 04             	add    esp,0x4
c000b857:	83 ec 08             	sub    esp,0x8
c000b85a:	68 58 01 00 00       	push   0x158
c000b85f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b863:	e8 9a eb ff ff       	call   c000a402 <operator delete(void*, unsigned long)>
c000b868:	83 c4 10             	add    esp,0x10
c000b86b:	83 c4 0c             	add    esp,0xc
c000b86e:	c3                   	ret    
c000b86f:	90                   	nop

c000b870 <Device::findAndLoadDriver()>:
c000b870:	c7 44 24 04 ee df 01 c0 	mov    DWORD PTR [esp+0x4],0xc001dfee
c000b878:	e9 7b ec ff ff       	jmp    c000a4f8 <Dbg::kprintf(char const*, ...)>
c000b87d:	90                   	nop

c000b87e <Device::preOpenPCI(PCIDeviceInfo)>:
c000b87e:	57                   	push   edi
c000b87f:	b9 09 00 00 00       	mov    ecx,0x9
c000b884:	56                   	push   esi
c000b885:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b889:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b88d:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000b897:	81 c7 18 01 00 00    	add    edi,0x118
c000b89d:	fc                   	cld    
c000b89e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b8a0:	5e                   	pop    esi
c000b8a1:	5f                   	pop    edi
c000b8a2:	c3                   	ret    
c000b8a3:	90                   	nop

c000b8a4 <Device::preOpenACPI(void*, char*, char*)>:
c000b8a4:	57                   	push   edi
c000b8a5:	b9 1e 00 00 00       	mov    ecx,0x1e
c000b8aa:	56                   	push   esi
c000b8ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b8af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b8b3:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000b8bd:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000b8c3:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000b8c9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b8cd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b8cf:	b9 0e 00 00 00       	mov    ecx,0xe
c000b8d4:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000b8da:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b8de:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b8e0:	5e                   	pop    esi
c000b8e1:	5f                   	pop    edi
c000b8e2:	c3                   	ret    
c000b8e3:	90                   	nop

c000b8e4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000b8e4:	53                   	push   ebx
c000b8e5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b8e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b8ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b8f1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b8f5:	0f b6 c0             	movzx  eax,al
c000b8f8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000b8fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b900:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b904:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b908:	5b                   	pop    ebx
c000b909:	e9 a6 05 00 00       	jmp    c000beb4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000b90e <Device::getParent()>:
c000b90e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b912:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000b918:	c3                   	ret    
c000b919:	90                   	nop

c000b91a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000b91a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b91e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b922:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000b927:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b92b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b92f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b933:	e9 e8 06 00 00       	jmp    c000c020 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000b938 <Device::addChild(Device*)>:
c000b938:	53                   	push   ebx
c000b939:	83 ec 08             	sub    esp,0x8
c000b93c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b940:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b944:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000b94a:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000b950:	8b 13                	mov    edx,DWORD PTR [ebx]
c000b952:	85 d2                	test   edx,edx
c000b954:	74 04                	je     c000b95a <Device::addChild(Device*)+0x22>
c000b956:	89 d3                	mov    ebx,edx
c000b958:	eb f6                	jmp    c000b950 <Device::addChild(Device*)+0x18>
c000b95a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000b95d:	83 ec 0c             	sub    esp,0xc
c000b960:	6a 08                	push   0x8
c000b962:	e8 52 be ff ff       	call   c00077b9 <malloc>
c000b967:	89 03                	mov    DWORD PTR [ebx],eax
c000b969:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b96f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b976:	83 c4 18             	add    esp,0x18
c000b979:	5b                   	pop    ebx
c000b97a:	c3                   	ret    
c000b97b:	90                   	nop

c000b97c <Device::removeAllChildren()>:
c000b97c:	56                   	push   esi
c000b97d:	53                   	push   ebx
c000b97e:	52                   	push   edx
c000b97f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b983:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000b989:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b98c:	74 17                	je     c000b9a5 <Device::removeAllChildren()+0x29>
c000b98e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000b991:	85 c0                	test   eax,eax
c000b993:	74 0c                	je     c000b9a1 <Device::removeAllChildren()+0x25>
c000b995:	83 ec 0c             	sub    esp,0xc
c000b998:	8b 10                	mov    edx,DWORD PTR [eax]
c000b99a:	50                   	push   eax
c000b99b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000b99e:	83 c4 10             	add    esp,0x10
c000b9a1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b9a3:	eb e4                	jmp    c000b989 <Device::removeAllChildren()+0xd>
c000b9a5:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000b9ab:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b9b1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000b9b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b9be:	58                   	pop    eax
c000b9bf:	5b                   	pop    ebx
c000b9c0:	5e                   	pop    esi
c000b9c1:	c3                   	ret    

c000b9c2 <Device::hibernateAll()>:
c000b9c2:	53                   	push   ebx
c000b9c3:	83 ec 14             	sub    esp,0x14
c000b9c6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b9ca:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b9cc:	53                   	push   ebx
c000b9cd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b9d0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000b9d6:	83 c4 10             	add    esp,0x10
c000b9d9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b9dc:	74 0f                	je     c000b9ed <Device::hibernateAll()+0x2b>
c000b9de:	83 ec 0c             	sub    esp,0xc
c000b9e1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000b9e4:	e8 d9 ff ff ff       	call   c000b9c2 <Device::hibernateAll()>
c000b9e9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b9eb:	eb e9                	jmp    c000b9d6 <Device::hibernateAll()+0x14>
c000b9ed:	83 c4 08             	add    esp,0x8
c000b9f0:	5b                   	pop    ebx
c000b9f1:	c3                   	ret    

c000b9f2 <Device::wakeAll()>:
c000b9f2:	53                   	push   ebx
c000b9f3:	83 ec 14             	sub    esp,0x14
c000b9f6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b9fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b9fc:	53                   	push   ebx
c000b9fd:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000ba00:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba06:	83 c4 10             	add    esp,0x10
c000ba09:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba0c:	74 0f                	je     c000ba1d <Device::wakeAll()+0x2b>
c000ba0e:	83 ec 0c             	sub    esp,0xc
c000ba11:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba14:	e8 d9 ff ff ff       	call   c000b9f2 <Device::wakeAll()>
c000ba19:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba1b:	eb e9                	jmp    c000ba06 <Device::wakeAll()+0x14>
c000ba1d:	83 c4 08             	add    esp,0x8
c000ba20:	5b                   	pop    ebx
c000ba21:	c3                   	ret    

c000ba22 <Device::detectAll()>:
c000ba22:	53                   	push   ebx
c000ba23:	83 ec 14             	sub    esp,0x14
c000ba26:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ba2a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba2c:	53                   	push   ebx
c000ba2d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000ba30:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba36:	83 c4 10             	add    esp,0x10
c000ba39:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba3c:	74 0f                	je     c000ba4d <Device::detectAll()+0x2b>
c000ba3e:	83 ec 0c             	sub    esp,0xc
c000ba41:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba44:	e8 d9 ff ff ff       	call   c000ba22 <Device::detectAll()>
c000ba49:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba4b:	eb e9                	jmp    c000ba36 <Device::detectAll()+0x14>
c000ba4d:	83 c4 08             	add    esp,0x8
c000ba50:	5b                   	pop    ebx
c000ba51:	c3                   	ret    

c000ba52 <Device::disableLegacyAll()>:
c000ba52:	c3                   	ret    
c000ba53:	90                   	nop

c000ba54 <Device::loadDriversForAll()>:
c000ba54:	c3                   	ret    
c000ba55:	90                   	nop

c000ba56 <Device::closeAll()>:
c000ba56:	53                   	push   ebx
c000ba57:	83 ec 08             	sub    esp,0x8
c000ba5a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ba5e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba60:	6a 00                	push   0x0
c000ba62:	6a 00                	push   0x0
c000ba64:	6a 00                	push   0x0
c000ba66:	53                   	push   ebx
c000ba67:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000ba6a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba70:	83 c4 10             	add    esp,0x10
c000ba73:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba76:	74 0f                	je     c000ba87 <Device::closeAll()+0x31>
c000ba78:	83 ec 0c             	sub    esp,0xc
c000ba7b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba7e:	e8 d3 ff ff ff       	call   c000ba56 <Device::closeAll()>
c000ba83:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba85:	eb e9                	jmp    c000ba70 <Device::closeAll()+0x1a>
c000ba87:	83 c4 08             	add    esp,0x8
c000ba8a:	5b                   	pop    ebx
c000ba8b:	c3                   	ret    

c000ba8c <Device::powerSavingAll(PowerSavingLevel)>:
c000ba8c:	56                   	push   esi
c000ba8d:	53                   	push   ebx
c000ba8e:	83 ec 0c             	sub    esp,0xc
c000ba91:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ba95:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000ba99:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba9b:	56                   	push   esi
c000ba9c:	53                   	push   ebx
c000ba9d:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000baa0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000baa6:	83 c4 10             	add    esp,0x10
c000baa9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000baac:	74 0f                	je     c000babd <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000baae:	52                   	push   edx
c000baaf:	52                   	push   edx
c000bab0:	56                   	push   esi
c000bab1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bab4:	e8 d3 ff ff ff       	call   c000ba8c <Device::powerSavingAll(PowerSavingLevel)>
c000bab9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000babb:	eb e9                	jmp    c000baa6 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000babd:	58                   	pop    eax
c000babe:	5b                   	pop    ebx
c000babf:	5e                   	pop    esi
c000bac0:	c3                   	ret    
c000bac1:	90                   	nop

c000bac2 <Device::setName(char const*)>:
c000bac2:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000baca:	e9 31 4b ff ff       	jmp    c0000600 <strcpy>
c000bacf:	90                   	nop

c000bad0 <Device::Device(char const*)>:
c000bad0:	83 ec 1c             	sub    esp,0x1c
c000bad3:	ba 30 e0 01 c0       	mov    edx,0xc001e030
c000bad8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000badc:	89 10                	mov    DWORD PTR [eax],edx
c000bade:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bae2:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000baec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baf0:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bafa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bafe:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bb08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb0c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bb16:	83 ec 08             	sub    esp,0x8
c000bb19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb21:	e8 9c ff ff ff       	call   c000bac2 <Device::setName(char const*)>
c000bb26:	83 c4 10             	add    esp,0x10
c000bb29:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bb31:	83 ec 0c             	sub    esp,0xc
c000bb34:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb38:	e8 7c bc ff ff       	call   c00077b9 <malloc>
c000bb3d:	83 c4 10             	add    esp,0x10
c000bb40:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bb46:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bb4d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bb51:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bb57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb5b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bb61:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bb67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb6b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bb71:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bb78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb7c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000bb83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb87:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000bb8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb92:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bb9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bba0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bbaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbae:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bbb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbbc:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000bbc6:	90                   	nop
c000bbc7:	83 c4 1c             	add    esp,0x1c
c000bbca:	c3                   	ret    
c000bbcb:	90                   	nop

c000bbcc <Device::getName()>:
c000bbcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bbd0:	05 d0 00 00 00       	add    eax,0xd0
c000bbd5:	c3                   	ret    

c000bbd6 <DriverlessDevice::DriverlessDevice(char const*)>:
c000bbd6:	83 ec 0c             	sub    esp,0xc
c000bbd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbdd:	83 ec 08             	sub    esp,0x8
c000bbe0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbe4:	50                   	push   eax
c000bbe5:	e8 e6 fe ff ff       	call   c000bad0 <Device::Device(char const*)>
c000bbea:	83 c4 10             	add    esp,0x10
c000bbed:	ba 5c e0 01 c0       	mov    edx,0xc001e05c
c000bbf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbf6:	89 10                	mov    DWORD PTR [eax],edx
c000bbf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbfc:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000bc06:	90                   	nop
c000bc07:	83 c4 0c             	add    esp,0xc
c000bc0a:	c3                   	ret    
c000bc0b:	90                   	nop

c000bc0c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000bc0c:	57                   	push   edi
c000bc0d:	56                   	push   esi
c000bc0e:	53                   	push   ebx
c000bc0f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bc13:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bc17:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bc1b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000bc21:	75 0c                	jne    c000bc2f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000bc23:	52                   	push   edx
c000bc24:	52                   	push   edx
c000bc25:	53                   	push   ebx
c000bc26:	56                   	push   esi
c000bc27:	e8 a6 0a 01 00       	call   c001c6d2 <LinkedList<Device>::addElement(Device*)>
c000bc2c:	83 c4 10             	add    esp,0x10
c000bc2f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bc35:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bc38:	74 12                	je     c000bc4c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000bc3a:	50                   	push   eax
c000bc3b:	57                   	push   edi
c000bc3c:	56                   	push   esi
c000bc3d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bc40:	e8 c7 ff ff ff       	call   c000bc0c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bc45:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bc47:	83 c4 10             	add    esp,0x10
c000bc4a:	eb e9                	jmp    c000bc35 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000bc4c:	5b                   	pop    ebx
c000bc4d:	5e                   	pop    esi
c000bc4e:	5f                   	pop    edi
c000bc4f:	c3                   	ret    

c000bc50 <getDevicesOfType(DeviceType)>:
c000bc50:	53                   	push   ebx
c000bc51:	83 ec 14             	sub    esp,0x14
c000bc54:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bc58:	53                   	push   ebx
c000bc59:	e8 50 0b 01 00       	call   c001c7ae <LinkedList<Device>::LinkedList()>
c000bc5e:	83 c4 0c             	add    esp,0xc
c000bc61:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bc65:	53                   	push   ebx
c000bc66:	ff 35 58 0d 02 c0    	push   DWORD PTR ds:0xc0020d58
c000bc6c:	e8 9b ff ff ff       	call   c000bc0c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bc71:	89 d8                	mov    eax,ebx
c000bc73:	83 c4 18             	add    esp,0x18
c000bc76:	5b                   	pop    ebx
c000bc77:	c2 04 00             	ret    0x4
c000bc7a:	66 90                	xchg   ax,ax

c000bc7c <HardDiskController::HardDiskController(char const*)>:
c000bc7c:	83 ec 0c             	sub    esp,0xc
c000bc7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc83:	83 ec 08             	sub    esp,0x8
c000bc86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc8a:	50                   	push   eax
c000bc8b:	e8 40 fe ff ff       	call   c000bad0 <Device::Device(char const*)>
c000bc90:	83 c4 10             	add    esp,0x10
c000bc93:	ba 88 e0 01 c0       	mov    edx,0xc001e088
c000bc98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc9c:	89 10                	mov    DWORD PTR [eax],edx
c000bc9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bca2:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000bcac:	90                   	nop
c000bcad:	83 c4 0c             	add    esp,0xc
c000bcb0:	c3                   	ret    
c000bcb1:	90                   	nop
c000bcb2:	66 90                	xchg   ax,ax

c000bcb4 <HardDiskController::~HardDiskController()>:
c000bcb4:	83 ec 0c             	sub    esp,0xc
c000bcb7:	ba 88 e0 01 c0       	mov    edx,0xc001e088
c000bcbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcc0:	89 10                	mov    DWORD PTR [eax],edx
c000bcc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcc6:	83 ec 0c             	sub    esp,0xc
c000bcc9:	50                   	push   eax
c000bcca:	e8 6b fb ff ff       	call   c000b83a <Device::~Device()>
c000bccf:	83 c4 10             	add    esp,0x10
c000bcd2:	90                   	nop
c000bcd3:	83 c4 0c             	add    esp,0xc
c000bcd6:	c3                   	ret    
c000bcd7:	90                   	nop

c000bcd8 <HardDiskController::~HardDiskController()>:
c000bcd8:	83 ec 0c             	sub    esp,0xc
c000bcdb:	83 ec 0c             	sub    esp,0xc
c000bcde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bce2:	e8 cd ff ff ff       	call   c000bcb4 <HardDiskController::~HardDiskController()>
c000bce7:	83 c4 10             	add    esp,0x10
c000bcea:	83 ec 08             	sub    esp,0x8
c000bced:	68 58 01 00 00       	push   0x158
c000bcf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcf6:	e8 07 e7 ff ff       	call   c000a402 <operator delete(void*, unsigned long)>
c000bcfb:	83 c4 10             	add    esp,0x10
c000bcfe:	83 c4 0c             	add    esp,0xc
c000bd01:	c3                   	ret    

c000bd02 <PhysicalDisk::eject()>:
c000bd02:	83 c8 ff             	or     eax,0xffffffff
c000bd05:	c3                   	ret    

c000bd06 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000bd06:	83 ec 0c             	sub    esp,0xc
c000bd09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd0d:	83 ec 08             	sub    esp,0x8
c000bd10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd14:	50                   	push   eax
c000bd15:	e8 b6 fd ff ff       	call   c000bad0 <Device::Device(char const*)>
c000bd1a:	83 c4 10             	add    esp,0x10
c000bd1d:	ba b4 e0 01 c0       	mov    edx,0xc001e0b4
c000bd22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd26:	89 10                	mov    DWORD PTR [eax],edx
c000bd28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd2c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000bd33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd37:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000bd3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd42:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000bd4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd50:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bd54:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000bd5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd5e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000bd68:	90                   	nop
c000bd69:	83 c4 0c             	add    esp,0xc
c000bd6c:	c3                   	ret    
c000bd6d:	90                   	nop

c000bd6e <PhysicalDisk::startCache()>:
c000bd6e:	56                   	push   esi
c000bd6f:	53                   	push   ebx
c000bd70:	83 ec 10             	sub    esp,0x10
c000bd73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bd77:	6a 44                	push   0x44
c000bd79:	e8 3b ba ff ff       	call   c00077b9 <malloc>
c000bd7e:	89 c6                	mov    esi,eax
c000bd80:	58                   	pop    eax
c000bd81:	5a                   	pop    edx
c000bd82:	53                   	push   ebx
c000bd83:	56                   	push   esi
c000bd84:	e8 d3 15 00 00       	call   c000d35c <VCache::VCache(PhysicalDisk*)>
c000bd89:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000bd8f:	83 c4 14             	add    esp,0x14
c000bd92:	5b                   	pop    ebx
c000bd93:	5e                   	pop    esi
c000bd94:	c3                   	ret    
c000bd95:	90                   	nop

c000bd96 <PhysicalDisk::~PhysicalDisk()>:
c000bd96:	83 ec 0c             	sub    esp,0xc
c000bd99:	ba b4 e0 01 c0       	mov    edx,0xc001e0b4
c000bd9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bda2:	89 10                	mov    DWORD PTR [eax],edx
c000bda4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bda8:	83 ec 0c             	sub    esp,0xc
c000bdab:	50                   	push   eax
c000bdac:	e8 89 fa ff ff       	call   c000b83a <Device::~Device()>
c000bdb1:	83 c4 10             	add    esp,0x10
c000bdb4:	90                   	nop
c000bdb5:	83 c4 0c             	add    esp,0xc
c000bdb8:	c3                   	ret    
c000bdb9:	90                   	nop

c000bdba <PhysicalDisk::~PhysicalDisk()>:
c000bdba:	83 ec 0c             	sub    esp,0xc
c000bdbd:	83 ec 0c             	sub    esp,0xc
c000bdc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdc4:	e8 cd ff ff ff       	call   c000bd96 <PhysicalDisk::~PhysicalDisk()>
c000bdc9:	83 c4 10             	add    esp,0x10
c000bdcc:	83 ec 08             	sub    esp,0x8
c000bdcf:	68 6c 01 00 00       	push   0x16c
c000bdd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdd8:	e8 25 e6 ff ff       	call   c000a402 <operator delete(void*, unsigned long)>
c000bddd:	83 c4 10             	add    esp,0x10
c000bde0:	83 c4 0c             	add    esp,0xc
c000bde3:	c3                   	ret    

c000bde4 <int_handler>:
c000bde4:	55                   	push   ebp
c000bde5:	57                   	push   edi
c000bde6:	56                   	push   esi
c000bde7:	53                   	push   ebx
c000bde8:	83 ec 0c             	sub    esp,0xc
c000bdeb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000bdef:	80 3d d8 37 02 c0 00 	cmp    BYTE PTR ds:0xc00237d8,0x0
c000bdf6:	74 0b                	je     c000be03 <int_handler+0x1f>
c000bdf8:	fa                   	cli    
c000bdf9:	f4                   	hlt    
c000bdfa:	80 3d d8 37 02 c0 00 	cmp    BYTE PTR ds:0xc00237d8,0x0
c000be01:	75 f5                	jne    c000bdf8 <int_handler+0x14>
c000be03:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000be06:	8d 46 e0             	lea    eax,[esi-0x20]
c000be09:	83 f8 17             	cmp    eax,0x17
c000be0c:	76 3e                	jbe    c000be4c <int_handler+0x68>
c000be0e:	c1 e6 04             	shl    esi,0x4
c000be11:	31 db                	xor    ebx,ebx
c000be13:	8d ae 60 1e 02 c0    	lea    ebp,[esi-0x3ffde1a0]
c000be19:	81 c6 60 0e 02 c0    	add    esi,0xc0020e60
c000be1f:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000be23:	85 c0                	test   eax,eax
c000be25:	74 13                	je     c000be3a <int_handler+0x56>
c000be27:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000be2a:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000be2e:	74 2a                	je     c000be5a <int_handler+0x76>
c000be30:	83 ec 08             	sub    esp,0x8
c000be33:	52                   	push   edx
c000be34:	57                   	push   edi
c000be35:	ff d0                	call   eax
c000be37:	83 c4 10             	add    esp,0x10
c000be3a:	43                   	inc    ebx
c000be3b:	83 fb 04             	cmp    ebx,0x4
c000be3e:	75 df                	jne    c000be1f <int_handler+0x3b>
c000be40:	83 c4 0c             	add    esp,0xc
c000be43:	31 c0                	xor    eax,eax
c000be45:	5b                   	pop    ebx
c000be46:	31 d2                	xor    edx,edx
c000be48:	5e                   	pop    esi
c000be49:	5f                   	pop    edi
c000be4a:	5d                   	pop    ebp
c000be4b:	c3                   	ret    
c000be4c:	83 ec 0c             	sub    esp,0xc
c000be4f:	50                   	push   eax
c000be50:	e8 b6 9b 00 00       	call   c0015a0b <HalEndOfInterrupt(int)>
c000be55:	83 c4 10             	add    esp,0x10
c000be58:	eb b4                	jmp    c000be0e <int_handler+0x2a>
c000be5a:	83 ec 08             	sub    esp,0x8
c000be5d:	52                   	push   edx
c000be5e:	57                   	push   edi
c000be5f:	ff d0                	call   eax
c000be61:	83 c4 10             	add    esp,0x10
c000be64:	83 c4 0c             	add    esp,0xc
c000be67:	5b                   	pop    ebx
c000be68:	5e                   	pop    esi
c000be69:	5f                   	pop    edi
c000be6a:	5d                   	pop    ebp
c000be6b:	c3                   	ret    

c000be6c <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000be6c:	56                   	push   esi
c000be6d:	31 c0                	xor    eax,eax
c000be6f:	53                   	push   ebx
c000be70:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000be74:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000be78:	89 ca                	mov    edx,ecx
c000be7a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000be7e:	c1 e2 04             	shl    edx,0x4
c000be81:	83 bc 82 60 1e 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffde1a0],0x0
c000be89:	74 15                	je     c000bea0 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000be8b:	40                   	inc    eax
c000be8c:	83 f8 04             	cmp    eax,0x4
c000be8f:	75 f0                	jne    c000be81 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000be91:	c7 44 24 0c e4 e0 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e0e4
c000be99:	5b                   	pop    ebx
c000be9a:	5e                   	pop    esi
c000be9b:	e9 c3 42 00 00       	jmp    c0010163 <KePanic(char const*)>
c000bea0:	8d 04 88             	lea    eax,[eax+ecx*4]
c000bea3:	89 1c 85 60 1e 02 c0 	mov    DWORD PTR [eax*4-0x3ffde1a0],ebx
c000beaa:	89 34 85 60 0e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf1a0],esi
c000beb1:	5b                   	pop    ebx
c000beb2:	5e                   	pop    esi
c000beb3:	c3                   	ret    

c000beb4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000beb4:	57                   	push   edi
c000beb5:	8b 15 58 0d 02 c0    	mov    edx,DWORD PTR ds:0xc0020d58
c000bebb:	56                   	push   esi
c000bebc:	53                   	push   ebx
c000bebd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bec1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bec5:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000becc:	74 5b                	je     c000bf29 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000bece:	89 c7                	mov    edi,eax
c000bed0:	84 c0                	test   al,al
c000bed2:	74 24                	je     c000bef8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000bed4:	83 fe 0f             	cmp    esi,0xf
c000bed7:	0f 8f d9 00 00 00    	jg     c000bfb6 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000bedd:	8a 86 20 fa 01 c0    	mov    al,BYTE PTR [esi-0x3ffe05e0]
c000bee3:	25 ff 00 00 00       	and    eax,0xff
c000bee8:	66 8b bc 00 00 36 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffdca00]
c000bef0:	89 c6                	mov    esi,eax
c000bef2:	66 d1 ef             	shr    di,1
c000bef5:	83 e7 01             	and    edi,0x1
c000bef8:	83 ec 08             	sub    esp,0x8
c000befb:	a1 00 4a 02 c0       	mov    eax,ds:0xc0024a00
c000bf00:	31 db                	xor    ebx,ebx
c000bf02:	50                   	push   eax
c000bf03:	68 f1 e0 01 c0       	push   0xc001e0f1
c000bf08:	e8 eb e5 ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c000bf0d:	83 c4 10             	add    esp,0x10
c000bf10:	a1 00 4a 02 c0       	mov    eax,ds:0xc0024a00
c000bf15:	85 c0                	test   eax,eax
c000bf17:	7f 51                	jg     c000bf6a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000bf19:	83 ec 0c             	sub    esp,0xc
c000bf1c:	68 08 e1 01 c0       	push   0xc001e108
c000bf21:	e8 3d 42 00 00       	call   c0010163 <KePanic(char const*)>
c000bf26:	83 c4 10             	add    esp,0x10
c000bf29:	8d 4e 20             	lea    ecx,[esi+0x20]
c000bf2c:	31 d2                	xor    edx,edx
c000bf2e:	89 c8                	mov    eax,ecx
c000bf30:	c1 e0 04             	shl    eax,0x4
c000bf33:	8b 9c 90 60 1e 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffde1a0]
c000bf3a:	85 db                	test   ebx,ebx
c000bf3c:	0f 84 8b 00 00 00    	je     c000bfcd <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000bf42:	42                   	inc    edx
c000bf43:	83 fa 04             	cmp    edx,0x4
c000bf46:	75 eb                	jne    c000bf33 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000bf48:	83 ec 0c             	sub    esp,0xc
c000bf4b:	68 5c e1 01 c0       	push   0xc001e15c
c000bf50:	e8 0e 42 00 00       	call   c0010163 <KePanic(char const*)>
c000bf55:	83 c4 10             	add    esp,0x10
c000bf58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bf5d:	5b                   	pop    ebx
c000bf5e:	5e                   	pop    esi
c000bf5f:	5f                   	pop    edi
c000bf60:	c3                   	ret    
c000bf61:	43                   	inc    ebx
c000bf62:	39 1d 00 4a 02 c0    	cmp    DWORD PTR ds:0xc0024a00,ebx
c000bf68:	7e af                	jle    c000bf19 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000bf6a:	83 ec 08             	sub    esp,0x8
c000bf6d:	8b 04 9d 20 4a 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb5e0]
c000bf74:	56                   	push   esi
c000bf75:	50                   	push   eax
c000bf76:	e8 7d f7 00 00       	call   c001b6f8 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000bf7b:	83 c4 10             	add    esp,0x10
c000bf7e:	84 c0                	test   al,al
c000bf80:	74 df                	je     c000bf61 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000bf82:	81 e7 ff 00 00 00    	and    edi,0xff
c000bf88:	50                   	push   eax
c000bf89:	8d 46 20             	lea    eax,[esi+0x20]
c000bf8c:	57                   	push   edi
c000bf8d:	25 ff 00 00 00       	and    eax,0xff
c000bf92:	6a 00                	push   0x0
c000bf94:	50                   	push   eax
c000bf95:	89 f0                	mov    eax,esi
c000bf97:	6a 00                	push   0x0
c000bf99:	25 ff 00 00 00       	and    eax,0xff
c000bf9e:	6a 00                	push   0x0
c000bfa0:	50                   	push   eax
c000bfa1:	8b 04 9d 20 4a 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb5e0]
c000bfa8:	50                   	push   eax
c000bfa9:	e8 c4 f8 00 00       	call   c001b872 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000bfae:	83 c4 20             	add    esp,0x20
c000bfb1:	e9 73 ff ff ff       	jmp    c000bf29 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000bfb6:	83 ec 0c             	sub    esp,0xc
c000bfb9:	31 ff                	xor    edi,edi
c000bfbb:	68 24 e1 01 c0       	push   0xc001e124
c000bfc0:	e8 9e 41 00 00       	call   c0010163 <KePanic(char const*)>
c000bfc5:	83 c4 10             	add    esp,0x10
c000bfc8:	e9 2b ff ff ff       	jmp    c000bef8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000bfcd:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000bfd0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bfd4:	89 14 85 60 1e 02 c0 	mov    DWORD PTR [eax*4-0x3ffde1a0],edx
c000bfdb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bfdf:	5b                   	pop    ebx
c000bfe0:	89 14 85 60 0e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf1a0],edx
c000bfe7:	89 f0                	mov    eax,esi
c000bfe9:	5e                   	pop    esi
c000bfea:	5f                   	pop    edi
c000bfeb:	c3                   	ret    

c000bfec <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000bfec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bff0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bff4:	c1 e0 04             	shl    eax,0x4
c000bff7:	8d 50 10             	lea    edx,[eax+0x10]
c000bffa:	39 88 60 1e 02 c0    	cmp    DWORD PTR [eax-0x3ffde1a0],ecx
c000c000:	74 08                	je     c000c00a <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c002:	83 c0 04             	add    eax,0x4
c000c005:	39 d0                	cmp    eax,edx
c000c007:	75 f1                	jne    c000bffa <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c009:	c3                   	ret    
c000c00a:	c7 80 60 1e 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde1a0],0x0
c000c014:	c7 80 60 0e 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf1a0],0x0
c000c01e:	eb e2                	jmp    c000c002 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c020 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c020:	53                   	push   ebx
c000c021:	83 ec 08             	sub    esp,0x8
c000c024:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c028:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c02d:	74 0e                	je     c000c03d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c02f:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c000c034:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c03b:	75 37                	jne    c000c074 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c03d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c041:	83 c0 20             	add    eax,0x20
c000c044:	c1 e0 04             	shl    eax,0x4
c000c047:	8d 50 10             	lea    edx,[eax+0x10]
c000c04a:	39 98 60 1e 02 c0    	cmp    DWORD PTR [eax-0x3ffde1a0],ebx
c000c050:	74 0c                	je     c000c05e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c052:	83 c0 04             	add    eax,0x4
c000c055:	39 d0                	cmp    eax,edx
c000c057:	75 f1                	jne    c000c04a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c059:	83 c4 08             	add    esp,0x8
c000c05c:	5b                   	pop    ebx
c000c05d:	c3                   	ret    
c000c05e:	c7 80 60 1e 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde1a0],0x0
c000c068:	c7 80 60 0e 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf1a0],0x0
c000c072:	eb de                	jmp    c000c052 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c074:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c079:	7f 12                	jg     c000c08d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000c07b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c07f:	31 c0                	xor    eax,eax
c000c081:	8a 81 20 fa 01 c0    	mov    al,BYTE PTR [ecx-0x3ffe05e0]
c000c087:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c08b:	eb b0                	jmp    c000c03d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c08d:	83 ec 0c             	sub    esp,0xc
c000c090:	68 15 e1 01 c0       	push   0xc001e115
c000c095:	e8 c9 40 00 00       	call   c0010163 <KePanic(char const*)>
c000c09a:	83 c4 10             	add    esp,0x10
c000c09d:	eb 9e                	jmp    c000c03d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c09f <setupINTS()>:
c000c09f:	31 c0                	xor    eax,eax
c000c0a1:	c7 80 60 1e 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde1a0],0x0
c000c0ab:	c7 80 60 0e 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf1a0],0x0
c000c0b5:	c7 80 64 1e 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde19c],0x0
c000c0bf:	c7 80 64 0e 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf19c],0x0
c000c0c9:	c7 80 68 1e 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde198],0x0
c000c0d3:	c7 80 68 0e 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf198],0x0
c000c0dd:	c7 80 6c 1e 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde194],0x0
c000c0e7:	c7 80 6c 0e 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf194],0x0
c000c0f1:	83 c0 10             	add    eax,0x10
c000c0f4:	3d 00 10 00 00       	cmp    eax,0x1000
c000c0f9:	75 a6                	jne    c000c0a1 <setupINTS()+0x2>
c000c0fb:	c3                   	ret    

c000c0fc <convertLegacyIRQNumber(int)>:
c000c0fc:	83 ec 0c             	sub    esp,0xc
c000c0ff:	8b 15 58 0d 02 c0    	mov    edx,DWORD PTR ds:0xc0020d58
c000c105:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c109:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c110:	74 0f                	je     c000c121 <convertLegacyIRQNumber(int)+0x25>
c000c112:	83 f8 0f             	cmp    eax,0xf
c000c115:	7f 0e                	jg     c000c125 <convertLegacyIRQNumber(int)+0x29>
c000c117:	31 c9                	xor    ecx,ecx
c000c119:	8a 88 20 fa 01 c0    	mov    cl,BYTE PTR [eax-0x3ffe05e0]
c000c11f:	89 c8                	mov    eax,ecx
c000c121:	83 c4 0c             	add    esp,0xc
c000c124:	c3                   	ret    
c000c125:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c129:	83 ec 0c             	sub    esp,0xc
c000c12c:	68 24 e1 01 c0       	push   0xc001e124
c000c131:	e8 2d 40 00 00       	call   c0010163 <KePanic(char const*)>
c000c136:	83 c4 10             	add    esp,0x10
c000c139:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c13d:	83 c4 0c             	add    esp,0xc
c000c140:	c3                   	ret    
c000c141:	90                   	nop

c000c142 <startGUI(void*)>:
c000c142:	55                   	push   ebp
c000c143:	89 e5                	mov    ebp,esp
c000c145:	53                   	push   ebx
c000c146:	83 ec 04             	sub    esp,0x4
c000c149:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c000c14e:	48                   	dec    eax
c000c14f:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c000c154:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c000c159:	85 c0                	test   eax,eax
c000c15b:	75 01                	jne    c000c15e <startGUI(void*)+0x1c>
c000c15d:	fb                   	sti    
c000c15e:	8b 1d 58 0d 02 c0    	mov    ebx,DWORD PTR ds:0xc0020d58
c000c164:	83 ec 08             	sub    esp,0x8
c000c167:	6a 01                	push   0x1
c000c169:	68 81 e1 01 c0       	push   0xc001e181
c000c16e:	e8 36 6c 00 00       	call   c0012da9 <Thr::loadDLL(char const*, bool)>
c000c173:	83 c4 10             	add    esp,0x10
c000c176:	83 ec 08             	sub    esp,0x8
c000c179:	53                   	push   ebx
c000c17a:	50                   	push   eax
c000c17b:	e8 5a 6e 00 00       	call   c0012fda <Thr::executeDLL(unsigned long, void*)>
c000c180:	83 c4 10             	add    esp,0x10
c000c183:	8b 1d 58 0d 02 c0    	mov    ebx,DWORD PTR ds:0xc0020d58
c000c189:	83 ec 08             	sub    esp,0x8
c000c18c:	6a 01                	push   0x1
c000c18e:	68 9b e1 01 c0       	push   0xc001e19b
c000c193:	e8 11 6c 00 00       	call   c0012da9 <Thr::loadDLL(char const*, bool)>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	83 ec 08             	sub    esp,0x8
c000c19e:	53                   	push   ebx
c000c19f:	50                   	push   eax
c000c1a0:	e8 35 6e 00 00       	call   c0012fda <Thr::executeDLL(unsigned long, void*)>
c000c1a5:	83 c4 10             	add    esp,0x10
c000c1a8:	90                   	nop
c000c1a9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c1ac:	c9                   	leave  
c000c1ad:	c3                   	ret    

c000c1ae <startGUIVESA(void*)>:
c000c1ae:	55                   	push   ebp
c000c1af:	89 e5                	mov    ebp,esp
c000c1b1:	53                   	push   ebx
c000c1b2:	83 ec 04             	sub    esp,0x4
c000c1b5:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c000c1ba:	48                   	dec    eax
c000c1bb:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c000c1c0:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c000c1c5:	85 c0                	test   eax,eax
c000c1c7:	75 01                	jne    c000c1ca <startGUIVESA(void*)+0x1c>
c000c1c9:	fb                   	sti    
c000c1ca:	8b 1d 58 0d 02 c0    	mov    ebx,DWORD PTR ds:0xc0020d58
c000c1d0:	83 ec 08             	sub    esp,0x8
c000c1d3:	6a 01                	push   0x1
c000c1d5:	68 b9 e1 01 c0       	push   0xc001e1b9
c000c1da:	e8 ca 6b 00 00       	call   c0012da9 <Thr::loadDLL(char const*, bool)>
c000c1df:	83 c4 10             	add    esp,0x10
c000c1e2:	83 ec 08             	sub    esp,0x8
c000c1e5:	53                   	push   ebx
c000c1e6:	50                   	push   eax
c000c1e7:	e8 ee 6d 00 00       	call   c0012fda <Thr::executeDLL(unsigned long, void*)>
c000c1ec:	83 c4 10             	add    esp,0x10
c000c1ef:	8b 1d 58 0d 02 c0    	mov    ebx,DWORD PTR ds:0xc0020d58
c000c1f5:	83 ec 08             	sub    esp,0x8
c000c1f8:	6a 01                	push   0x1
c000c1fa:	68 9b e1 01 c0       	push   0xc001e19b
c000c1ff:	e8 a5 6b 00 00       	call   c0012da9 <Thr::loadDLL(char const*, bool)>
c000c204:	83 c4 10             	add    esp,0x10
c000c207:	83 ec 08             	sub    esp,0x8
c000c20a:	53                   	push   ebx
c000c20b:	50                   	push   eax
c000c20c:	e8 c9 6d 00 00       	call   c0012fda <Thr::executeDLL(unsigned long, void*)>
c000c211:	83 c4 10             	add    esp,0x10
c000c214:	90                   	nop
c000c215:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c218:	c9                   	leave  
c000c219:	c3                   	ret    

c000c21a <sendKeyToTerminal(unsigned char)>:
c000c21a:	55                   	push   ebp
c000c21b:	89 e5                	mov    ebp,esp
c000c21d:	83 ec 28             	sub    esp,0x28
c000c220:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c223:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c226:	8b 15 a4 0d 02 c0    	mov    edx,DWORD PTR ds:0xc0020da4
c000c22c:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c22f:	25 ff 00 00 00       	and    eax,0xff
c000c234:	83 ec 08             	sub    esp,0x8
c000c237:	50                   	push   eax
c000c238:	52                   	push   edx
c000c239:	e8 28 c8 ff ff       	call   c0008a66 <VgaText::receiveKey(unsigned char)>
c000c23e:	83 c4 10             	add    esp,0x10
c000c241:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c245:	74 0a                	je     c000c251 <sendKeyToTerminal(unsigned char)+0x37>
c000c247:	80 7d e4 03          	cmp    BYTE PTR [ebp-0x1c],0x3
c000c24b:	0f 85 8f 00 00 00    	jne    c000c2e0 <sendKeyToTerminal(unsigned char)+0xc6>
c000c251:	fa                   	cli    
c000c252:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c000c257:	40                   	inc    eax
c000c258:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c000c25d:	a1 04 40 02 c0       	mov    eax,ds:0xc0024004
c000c262:	40                   	inc    eax
c000c263:	a3 04 40 02 c0       	mov    ds:0xc0024004,eax
c000c268:	a1 60 2e 02 c0       	mov    eax,ds:0xc0022e60
c000c26d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c270:	c7 05 60 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022e60,0x0
c000c27a:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c27e:	74 1f                	je     c000c29f <sendKeyToTerminal(unsigned char)+0x85>
c000c280:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c283:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c286:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c289:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c28c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c28f:	83 ec 0c             	sub    esp,0xc
c000c292:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c295:	e8 46 7b 00 00       	call   c0013de0 <unblockTask(ThreadControlBlock*)>
c000c29a:	83 c4 10             	add    esp,0x10
c000c29d:	eb db                	jmp    c000c27a <sendKeyToTerminal(unsigned char)+0x60>
c000c29f:	a1 04 40 02 c0       	mov    eax,ds:0xc0024004
c000c2a4:	48                   	dec    eax
c000c2a5:	a3 04 40 02 c0       	mov    ds:0xc0024004,eax
c000c2aa:	a1 04 40 02 c0       	mov    eax,ds:0xc0024004
c000c2af:	85 c0                	test   eax,eax
c000c2b1:	75 18                	jne    c000c2cb <sendKeyToTerminal(unsigned char)+0xb1>
c000c2b3:	a1 00 40 02 c0       	mov    eax,ds:0xc0024000
c000c2b8:	85 c0                	test   eax,eax
c000c2ba:	74 0f                	je     c000c2cb <sendKeyToTerminal(unsigned char)+0xb1>
c000c2bc:	c7 05 00 40 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024000,0x0
c000c2c6:	e8 51 76 00 00       	call   c001391c <schedule()>
c000c2cb:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c000c2d0:	48                   	dec    eax
c000c2d1:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c000c2d6:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c000c2db:	85 c0                	test   eax,eax
c000c2dd:	75 01                	jne    c000c2e0 <sendKeyToTerminal(unsigned char)+0xc6>
c000c2df:	fb                   	sti    
c000c2e0:	90                   	nop
c000c2e1:	c9                   	leave  
c000c2e2:	c3                   	ret    

c000c2e3 <sendKeyboardToken(KeyboardToken)>:
c000c2e3:	55                   	push   ebp
c000c2e4:	89 e5                	mov    ebp,esp
c000c2e6:	83 ec 18             	sub    esp,0x18
c000c2e9:	e8 c5 3e 00 00       	call   c00101b3 <Krnl::userIOReceived()>
c000c2ee:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c2f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2f4:	25 ff ff 00 00       	and    eax,0xffff
c000c2f9:	83 f2 01             	xor    edx,0x1
c000c2fc:	88 90 80 2e 02 c0    	mov    BYTE PTR [eax-0x3ffdd180],dl
c000c302:	a1 68 2e 02 c0       	mov    eax,ds:0xc0022e68
c000c307:	85 c0                	test   eax,eax
c000c309:	74 24                	je     c000c32f <sendKeyboardToken(KeyboardToken)+0x4c>
c000c30b:	8b 0d 68 2e 02 c0    	mov    ecx,DWORD PTR ds:0xc0022e68
c000c311:	83 ec 04             	sub    esp,0x4
c000c314:	68 80 2e 02 c0       	push   0xc0022e80
c000c319:	83 ec 08             	sub    esp,0x8
c000c31c:	89 e2                	mov    edx,esp
c000c31e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c321:	89 02                	mov    DWORD PTR [edx],eax
c000c323:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c326:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c32a:	ff d1                	call   ecx
c000c32c:	83 c4 10             	add    esp,0x10
c000c32f:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c333:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c336:	a0 88 32 02 c0       	mov    al,ds:0xc0023288
c000c33b:	38 c2                	cmp    dl,al
c000c33d:	74 1e                	je     c000c35d <sendKeyboardToken(KeyboardToken)+0x7a>
c000c33f:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c342:	a2 88 32 02 c0       	mov    ds:0xc0023288,al
c000c347:	a0 88 32 02 c0       	mov    al,ds:0xc0023288
c000c34c:	25 ff 00 00 00       	and    eax,0xff
c000c351:	83 ec 0c             	sub    esp,0xc
c000c354:	50                   	push   eax
c000c355:	e8 5e be ff ff       	call   c00081b8 <setTerminalScrollLock(bool)>
c000c35a:	83 c4 10             	add    esp,0x10
c000c35d:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c360:	84 c0                	test   al,al
c000c362:	0f 84 ae 00 00 00    	je     c000c416 <sendKeyboardToken(KeyboardToken)+0x133>
c000c368:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c36b:	66 3d 10 03          	cmp    ax,0x310
c000c36f:	75 06                	jne    c000c377 <sendKeyboardToken(KeyboardToken)+0x94>
c000c371:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c377:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c37a:	66 3d 11 03          	cmp    ax,0x311
c000c37e:	75 06                	jne    c000c386 <sendKeyboardToken(KeyboardToken)+0xa3>
c000c380:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c386:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c389:	66 3d 12 03          	cmp    ax,0x312
c000c38d:	75 06                	jne    c000c395 <sendKeyboardToken(KeyboardToken)+0xb2>
c000c38f:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c395:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c398:	66 3d 13 03          	cmp    ax,0x313
c000c39c:	75 06                	jne    c000c3a4 <sendKeyboardToken(KeyboardToken)+0xc1>
c000c39e:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c3a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3a7:	66 3d 14 03          	cmp    ax,0x314
c000c3ab:	75 06                	jne    c000c3b3 <sendKeyboardToken(KeyboardToken)+0xd0>
c000c3ad:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c3b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3b6:	66 3d 15 03          	cmp    ax,0x315
c000c3ba:	75 06                	jne    c000c3c2 <sendKeyboardToken(KeyboardToken)+0xdf>
c000c3bc:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c3c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3c5:	66 3d 16 03          	cmp    ax,0x316
c000c3c9:	75 06                	jne    c000c3d1 <sendKeyboardToken(KeyboardToken)+0xee>
c000c3cb:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c3d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3d4:	66 3d 17 03          	cmp    ax,0x317
c000c3d8:	75 06                	jne    c000c3e0 <sendKeyboardToken(KeyboardToken)+0xfd>
c000c3da:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c3e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3e3:	66 3d 18 03          	cmp    ax,0x318
c000c3e7:	75 06                	jne    c000c3ef <sendKeyboardToken(KeyboardToken)+0x10c>
c000c3e9:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c3ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3f2:	66 3d 19 03          	cmp    ax,0x319
c000c3f6:	75 06                	jne    c000c3fe <sendKeyboardToken(KeyboardToken)+0x11b>
c000c3f8:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c3fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c401:	66 3d 1a 03          	cmp    ax,0x31a
c000c405:	0f 85 c9 00 00 00    	jne    c000c4d4 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c40b:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c411:	e9 be 00 00 00       	jmp    c000c4d4 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c416:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c419:	66 3d 10 03          	cmp    ax,0x310
c000c41d:	75 0a                	jne    c000c429 <sendKeyboardToken(KeyboardToken)+0x146>
c000c41f:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c425:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c429:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c42c:	66 3d 11 03          	cmp    ax,0x311
c000c430:	75 0a                	jne    c000c43c <sendKeyboardToken(KeyboardToken)+0x159>
c000c432:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c438:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c43c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c43f:	66 3d 12 03          	cmp    ax,0x312
c000c443:	75 0a                	jne    c000c44f <sendKeyboardToken(KeyboardToken)+0x16c>
c000c445:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c44b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c44f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c452:	66 3d 13 03          	cmp    ax,0x313
c000c456:	75 0a                	jne    c000c462 <sendKeyboardToken(KeyboardToken)+0x17f>
c000c458:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c45e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c462:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c465:	66 3d 14 03          	cmp    ax,0x314
c000c469:	75 0a                	jne    c000c475 <sendKeyboardToken(KeyboardToken)+0x192>
c000c46b:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c471:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c475:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c478:	66 3d 15 03          	cmp    ax,0x315
c000c47c:	75 0a                	jne    c000c488 <sendKeyboardToken(KeyboardToken)+0x1a5>
c000c47e:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c484:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c488:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c48b:	66 3d 16 03          	cmp    ax,0x316
c000c48f:	75 0a                	jne    c000c49b <sendKeyboardToken(KeyboardToken)+0x1b8>
c000c491:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c497:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c49b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c49e:	66 3d 17 03          	cmp    ax,0x317
c000c4a2:	75 0a                	jne    c000c4ae <sendKeyboardToken(KeyboardToken)+0x1cb>
c000c4a4:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c4aa:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4b1:	66 3d 18 03          	cmp    ax,0x318
c000c4b5:	75 0a                	jne    c000c4c1 <sendKeyboardToken(KeyboardToken)+0x1de>
c000c4b7:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c4bd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4c4:	66 3d 19 03          	cmp    ax,0x319
c000c4c8:	75 0a                	jne    c000c4d4 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c4ca:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c4d0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4d7:	66 3d 00 02          	cmp    ax,0x200
c000c4db:	75 2c                	jne    c000c509 <sendKeyboardToken(KeyboardToken)+0x226>
c000c4dd:	a0 80 32 02 c0       	mov    al,ds:0xc0023280
c000c4e2:	83 f0 01             	xor    eax,0x1
c000c4e5:	84 c0                	test   al,al
c000c4e7:	74 20                	je     c000c509 <sendKeyboardToken(KeyboardToken)+0x226>
c000c4e9:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c000c4ee:	6a 01                	push   0x1
c000c4f0:	6a 00                	push   0x0
c000c4f2:	68 42 c1 00 c0       	push   0xc000c142
c000c4f7:	50                   	push   eax
c000c4f8:	e8 ff 71 00 00       	call   c00136fc <Process::createThread(void (*)(void*), void*, int)>
c000c4fd:	83 c4 10             	add    esp,0x10
c000c500:	c6 05 80 32 02 c0 01 	mov    BYTE PTR ds:0xc0023280,0x1
c000c507:	eb 33                	jmp    c000c53c <sendKeyboardToken(KeyboardToken)+0x259>
c000c509:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c50c:	66 3d 01 02          	cmp    ax,0x201
c000c510:	75 2a                	jne    c000c53c <sendKeyboardToken(KeyboardToken)+0x259>
c000c512:	a0 80 32 02 c0       	mov    al,ds:0xc0023280
c000c517:	83 f0 01             	xor    eax,0x1
c000c51a:	84 c0                	test   al,al
c000c51c:	74 1e                	je     c000c53c <sendKeyboardToken(KeyboardToken)+0x259>
c000c51e:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c000c523:	6a 01                	push   0x1
c000c525:	6a 00                	push   0x0
c000c527:	68 ae c1 00 c0       	push   0xc000c1ae
c000c52c:	50                   	push   eax
c000c52d:	e8 ca 71 00 00       	call   c00136fc <Process::createThread(void (*)(void*), void*, int)>
c000c532:	83 c4 10             	add    esp,0x10
c000c535:	c6 05 80 32 02 c0 01 	mov    BYTE PTR ds:0xc0023280,0x1
c000c53c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c53f:	66 3d 1d 03          	cmp    ax,0x31d
c000c543:	75 06                	jne    c000c54b <sendKeyboardToken(KeyboardToken)+0x268>
c000c545:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000c54b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c54e:	66 3d 1c 03          	cmp    ax,0x31c
c000c552:	75 06                	jne    c000c55a <sendKeyboardToken(KeyboardToken)+0x277>
c000c554:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000c55a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c55d:	66 3d 1b 03          	cmp    ax,0x31b
c000c561:	75 06                	jne    c000c569 <sendKeyboardToken(KeyboardToken)+0x286>
c000c563:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000c569:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c56c:	66 3d 1e 03          	cmp    ax,0x31e
c000c570:	75 06                	jne    c000c578 <sendKeyboardToken(KeyboardToken)+0x295>
c000c572:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000c578:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c57b:	66 3d 1f 03          	cmp    ax,0x31f
c000c57f:	75 06                	jne    c000c587 <sendKeyboardToken(KeyboardToken)+0x2a4>
c000c581:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000c587:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c58a:	66 3d 1a 03          	cmp    ax,0x31a
c000c58e:	75 06                	jne    c000c596 <sendKeyboardToken(KeyboardToken)+0x2b3>
c000c590:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000c596:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000c59a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c59d:	83 f0 01             	xor    eax,0x1
c000c5a0:	84 c0                	test   al,al
c000c5a2:	74 7b                	je     c000c61f <sendKeyboardToken(KeyboardToken)+0x33c>
c000c5a4:	a0 81 2f 02 c0       	mov    al,ds:0xc0022f81
c000c5a9:	84 c0                	test   al,al
c000c5ab:	74 43                	je     c000c5f0 <sendKeyboardToken(KeyboardToken)+0x30d>
c000c5ad:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c5b1:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000c5b5:	74 2d                	je     c000c5e4 <sendKeyboardToken(KeyboardToken)+0x301>
c000c5b7:	8b 15 84 32 02 c0    	mov    edx,DWORD PTR ds:0xc0023284
c000c5bd:	89 d0                	mov    eax,edx
c000c5bf:	c1 e0 02             	shl    eax,0x2
c000c5c2:	01 d0                	add    eax,edx
c000c5c4:	01 c0                	add    eax,eax
c000c5c6:	a3 84 32 02 c0       	mov    ds:0xc0023284,eax
c000c5cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5ce:	25 ff ff 00 00       	and    eax,0xffff
c000c5d3:	8d 50 d0             	lea    edx,[eax-0x30]
c000c5d6:	a1 84 32 02 c0       	mov    eax,ds:0xc0023284
c000c5db:	01 d0                	add    eax,edx
c000c5dd:	a3 84 32 02 c0       	mov    ds:0xc0023284,eax
c000c5e2:	eb 71                	jmp    c000c655 <sendKeyboardToken(KeyboardToken)+0x372>
c000c5e4:	c7 05 84 32 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023284,0x0
c000c5ee:	eb 65                	jmp    c000c655 <sendKeyboardToken(KeyboardToken)+0x372>
c000c5f0:	a1 84 32 02 c0       	mov    eax,ds:0xc0023284
c000c5f5:	85 c0                	test   eax,eax
c000c5f7:	74 1a                	je     c000c613 <sendKeyboardToken(KeyboardToken)+0x330>
c000c5f9:	a1 84 32 02 c0       	mov    eax,ds:0xc0023284
c000c5fe:	25 ff 00 00 00       	and    eax,0xff
c000c603:	83 ec 0c             	sub    esp,0xc
c000c606:	50                   	push   eax
c000c607:	e8 0e fc ff ff       	call   c000c21a <sendKeyToTerminal(unsigned char)>
c000c60c:	83 c4 10             	add    esp,0x10
c000c60f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c613:	c7 05 84 32 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023284,0x0
c000c61d:	eb 36                	jmp    c000c655 <sendKeyboardToken(KeyboardToken)+0x372>
c000c61f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c622:	66 3d 01 01          	cmp    ax,0x101
c000c626:	75 2d                	jne    c000c655 <sendKeyboardToken(KeyboardToken)+0x372>
c000c628:	a1 84 32 02 c0       	mov    eax,ds:0xc0023284
c000c62d:	85 c0                	test   eax,eax
c000c62f:	74 1a                	je     c000c64b <sendKeyboardToken(KeyboardToken)+0x368>
c000c631:	a1 84 32 02 c0       	mov    eax,ds:0xc0023284
c000c636:	25 ff 00 00 00       	and    eax,0xff
c000c63b:	83 ec 0c             	sub    esp,0xc
c000c63e:	50                   	push   eax
c000c63f:	e8 d6 fb ff ff       	call   c000c21a <sendKeyToTerminal(unsigned char)>
c000c644:	83 c4 10             	add    esp,0x10
c000c647:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c64b:	c7 05 84 32 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023284,0x0
c000c655:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c658:	83 f0 01             	xor    eax,0x1
c000c65b:	84 c0                	test   al,al
c000c65d:	74 4e                	je     c000c6ad <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c65f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c662:	83 f0 01             	xor    eax,0x1
c000c665:	84 c0                	test   al,al
c000c667:	74 44                	je     c000c6ad <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c669:	a0 80 2f 02 c0       	mov    al,ds:0xc0022f80
c000c66e:	83 f0 01             	xor    eax,0x1
c000c671:	84 c0                	test   al,al
c000c673:	74 38                	je     c000c6ad <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c675:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c678:	66 83 f8 1f          	cmp    ax,0x1f
c000c67c:	76 09                	jbe    c000c687 <sendKeyboardToken(KeyboardToken)+0x3a4>
c000c67e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c681:	66 83 f8 7e          	cmp    ax,0x7e
c000c685:	76 12                	jbe    c000c699 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c687:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c68a:	66 83 f8 0a          	cmp    ax,0xa
c000c68e:	74 09                	je     c000c699 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c690:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c693:	66 83 f8 08          	cmp    ax,0x8
c000c697:	75 14                	jne    c000c6ad <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c699:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c69c:	25 ff 00 00 00       	and    eax,0xff
c000c6a1:	83 ec 0c             	sub    esp,0xc
c000c6a4:	50                   	push   eax
c000c6a5:	e8 70 fb ff ff       	call   c000c21a <sendKeyToTerminal(unsigned char)>
c000c6aa:	83 c4 10             	add    esp,0x10
c000c6ad:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c6b0:	83 f0 01             	xor    eax,0x1
c000c6b3:	84 c0                	test   al,al
c000c6b5:	74 51                	je     c000c708 <sendKeyboardToken(KeyboardToken)+0x425>
c000c6b7:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c6ba:	83 f0 01             	xor    eax,0x1
c000c6bd:	84 c0                	test   al,al
c000c6bf:	74 47                	je     c000c708 <sendKeyboardToken(KeyboardToken)+0x425>
c000c6c1:	a0 80 2f 02 c0       	mov    al,ds:0xc0022f80
c000c6c6:	84 c0                	test   al,al
c000c6c8:	74 3e                	je     c000c708 <sendKeyboardToken(KeyboardToken)+0x425>
c000c6ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6cd:	66 83 f8 3f          	cmp    ax,0x3f
c000c6d1:	76 35                	jbe    c000c708 <sendKeyboardToken(KeyboardToken)+0x425>
c000c6d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6d6:	66 83 f8 7f          	cmp    ax,0x7f
c000c6da:	77 2c                	ja     c000c708 <sendKeyboardToken(KeyboardToken)+0x425>
c000c6dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6df:	88 c2                	mov    dl,al
c000c6e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6e4:	66 83 f8 5f          	cmp    ax,0x5f
c000c6e8:	76 04                	jbe    c000c6ee <sendKeyboardToken(KeyboardToken)+0x40b>
c000c6ea:	b0 20                	mov    al,0x20
c000c6ec:	eb 02                	jmp    c000c6f0 <sendKeyboardToken(KeyboardToken)+0x40d>
c000c6ee:	b0 00                	mov    al,0x0
c000c6f0:	29 c2                	sub    edx,eax
c000c6f2:	88 d0                	mov    al,dl
c000c6f4:	83 e8 40             	sub    eax,0x40
c000c6f7:	25 ff 00 00 00       	and    eax,0xff
c000c6fc:	83 ec 0c             	sub    esp,0xc
c000c6ff:	50                   	push   eax
c000c700:	e8 15 fb ff ff       	call   c000c21a <sendKeyToTerminal(unsigned char)>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c70b:	66 3d 00 03          	cmp    ax,0x300
c000c70f:	75 0f                	jne    c000c720 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c711:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c714:	83 f0 01             	xor    eax,0x1
c000c717:	84 c0                	test   al,al
c000c719:	74 05                	je     c000c720 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c71b:	e8 99 ba ff ff       	call   c00081b9 <doTerminalCycle()>
c000c720:	90                   	nop
c000c721:	c9                   	leave  
c000c722:	c3                   	ret    

c000c723 <clearInternalKeybuffer(VgaText*)>:
c000c723:	55                   	push   ebp
c000c724:	89 e5                	mov    ebp,esp
c000c726:	83 ec 08             	sub    esp,0x8
c000c729:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c72c:	05 b2 00 00 00       	add    eax,0xb2
c000c731:	83 ec 0c             	sub    esp,0xc
c000c734:	50                   	push   eax
c000c735:	e8 06 3e ff ff       	call   c0000540 <strlen>
c000c73a:	83 c4 10             	add    esp,0x10
c000c73d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c740:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c746:	83 ec 04             	sub    esp,0x4
c000c749:	50                   	push   eax
c000c74a:	6a 00                	push   0x0
c000c74c:	52                   	push   edx
c000c74d:	e8 7e 3d ff ff       	call   c00004d0 <memset>
c000c752:	83 c4 10             	add    esp,0x10
c000c755:	90                   	nop
c000c756:	c9                   	leave  
c000c757:	c3                   	ret    

c000c758 <readKeyboard(VgaText*, char*, unsigned long)>:
c000c758:	55                   	push   ebp
c000c759:	89 e5                	mov    ebp,esp
c000c75b:	83 ec 18             	sub    esp,0x18
c000c75e:	a1 68 2e 02 c0       	mov    eax,ds:0xc0022e68
c000c763:	85 c0                	test   eax,eax
c000c765:	74 2a                	je     c000c791 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000c767:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000c76d:	8b 0d 68 2e 02 c0    	mov    ecx,DWORD PTR ds:0xc0022e68
c000c773:	83 ec 04             	sub    esp,0x4
c000c776:	68 80 2e 02 c0       	push   0xc0022e80
c000c77b:	83 ec 08             	sub    esp,0x8
c000c77e:	89 e2                	mov    edx,esp
c000c780:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000c783:	89 02                	mov    DWORD PTR [edx],eax
c000c785:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c788:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c78c:	ff d1                	call   ecx
c000c78e:	83 c4 10             	add    esp,0x10
c000c791:	fb                   	sti    
c000c792:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000c799:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000c79d:	0f 84 c4 00 00 00    	je     c000c867 <readKeyboard(VgaText*, char*, unsigned long)+0x10f>
c000c7a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7a6:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c7ac:	84 c0                	test   al,al
c000c7ae:	75 28                	jne    c000c7d8 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000c7b0:	fa                   	cli    
c000c7b1:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c000c7b6:	40                   	inc    eax
c000c7b7:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c000c7bc:	e8 5b 71 00 00       	call   c001391c <schedule()>
c000c7c1:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c000c7c6:	48                   	dec    eax
c000c7c7:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c000c7cc:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c000c7d1:	85 c0                	test   eax,eax
c000c7d3:	75 ce                	jne    c000c7a3 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c7d5:	fb                   	sti    
c000c7d6:	eb cb                	jmp    c000c7a3 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c7d8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c7db:	8d 50 01             	lea    edx,[eax+0x1]
c000c7de:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c7e1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c7e4:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000c7ea:	88 10                	mov    BYTE PTR [eax],dl
c000c7ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7ef:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c7f5:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000c7f8:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c7fc:	75 1d                	jne    c000c81b <readKeyboard(VgaText*, char*, unsigned long)+0xc3>
c000c7fe:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c803:	8b 00                	mov    eax,DWORD PTR [eax]
c000c805:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c808:	05 20 07 00 00       	add    eax,0x720
c000c80d:	83 ec 08             	sub    esp,0x8
c000c810:	6a 02                	push   0x2
c000c812:	50                   	push   eax
c000c813:	e8 2e 3d 00 00       	call   c0010546 <KeRaiseSignal(SigHandlerBlock*, int)>
c000c818:	83 c4 10             	add    esp,0x10
c000c81b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c81e:	05 b2 00 00 00       	add    eax,0xb2
c000c823:	83 ec 0c             	sub    esp,0xc
c000c826:	50                   	push   eax
c000c827:	e8 14 3d ff ff       	call   c0000540 <strlen>
c000c82c:	83 c4 10             	add    esp,0x10
c000c82f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c832:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c838:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c83b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c83e:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c844:	83 ec 04             	sub    esp,0x4
c000c847:	50                   	push   eax
c000c848:	51                   	push   ecx
c000c849:	52                   	push   edx
c000c84a:	e8 91 3b ff ff       	call   c00003e0 <memmove>
c000c84f:	83 c4 10             	add    esp,0x10
c000c852:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000c855:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000c858:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000c85c:	0f 85 37 ff ff ff    	jne    c000c799 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000c862:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c865:	eb 03                	jmp    c000c86a <readKeyboard(VgaText*, char*, unsigned long)+0x112>
c000c867:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c86a:	c9                   	leave  
c000c86b:	c3                   	ret    

c000c86c <Keyboard::Keyboard(char const*)>:
c000c86c:	83 ec 0c             	sub    esp,0xc
c000c86f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c873:	83 ec 08             	sub    esp,0x8
c000c876:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87a:	50                   	push   eax
c000c87b:	e8 50 f2 ff ff       	call   c000bad0 <Device::Device(char const*)>
c000c880:	83 c4 10             	add    esp,0x10
c000c883:	ba dc e1 01 c0       	mov    edx,0xc001e1dc
c000c888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c88c:	89 10                	mov    DWORD PTR [eax],edx
c000c88e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c892:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000c89c:	c6 05 64 2e 02 c0 01 	mov    BYTE PTR ds:0xc0022e64,0x1
c000c8a3:	90                   	nop
c000c8a4:	83 c4 0c             	add    esp,0xc
c000c8a7:	c3                   	ret    

c000c8a8 <Keyboard::~Keyboard()>:
c000c8a8:	83 ec 0c             	sub    esp,0xc
c000c8ab:	ba dc e1 01 c0       	mov    edx,0xc001e1dc
c000c8b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8b4:	89 10                	mov    DWORD PTR [eax],edx
c000c8b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8ba:	83 ec 0c             	sub    esp,0xc
c000c8bd:	50                   	push   eax
c000c8be:	e8 77 ef ff ff       	call   c000b83a <Device::~Device()>
c000c8c3:	83 c4 10             	add    esp,0x10
c000c8c6:	90                   	nop
c000c8c7:	83 c4 0c             	add    esp,0xc
c000c8ca:	c3                   	ret    
c000c8cb:	90                   	nop

c000c8cc <Keyboard::~Keyboard()>:
c000c8cc:	83 ec 0c             	sub    esp,0xc
c000c8cf:	83 ec 0c             	sub    esp,0xc
c000c8d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8d6:	e8 cd ff ff ff       	call   c000c8a8 <Keyboard::~Keyboard()>
c000c8db:	83 c4 10             	add    esp,0x10
c000c8de:	83 ec 08             	sub    esp,0x8
c000c8e1:	68 5c 01 00 00       	push   0x15c
c000c8e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ea:	e8 13 db ff ff       	call   c000a402 <operator delete(void*, unsigned long)>
c000c8ef:	83 c4 10             	add    esp,0x10
c000c8f2:	83 c4 0c             	add    esp,0xc
c000c8f5:	c3                   	ret    

c000c8f6 <LogicalDisk::close(int, int, void*)>:
c000c8f6:	83 c8 ff             	or     eax,0xffffffff
c000c8f9:	c3                   	ret    

c000c8fa <LogicalDisk::~LogicalDisk()>:
c000c8fa:	83 ec 0c             	sub    esp,0xc
c000c8fd:	ba 54 e2 01 c0       	mov    edx,0xc001e254
c000c902:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c906:	89 10                	mov    DWORD PTR [eax],edx
c000c908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c90c:	83 ec 0c             	sub    esp,0xc
c000c90f:	50                   	push   eax
c000c910:	e8 25 ef ff ff       	call   c000b83a <Device::~Device()>
c000c915:	83 c4 10             	add    esp,0x10
c000c918:	90                   	nop
c000c919:	83 c4 0c             	add    esp,0xc
c000c91c:	c3                   	ret    
c000c91d:	90                   	nop

c000c91e <LogicalDisk::~LogicalDisk()>:
c000c91e:	83 ec 0c             	sub    esp,0xc
c000c921:	83 ec 0c             	sub    esp,0xc
c000c924:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c928:	e8 cd ff ff ff       	call   c000c8fa <LogicalDisk::~LogicalDisk()>
c000c92d:	83 c4 10             	add    esp,0x10
c000c930:	83 ec 08             	sub    esp,0x8
c000c933:	68 74 01 00 00       	push   0x174
c000c938:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c93c:	e8 c1 da ff ff       	call   c000a402 <operator delete(void*, unsigned long)>
c000c941:	83 c4 10             	add    esp,0x10
c000c944:	83 c4 0c             	add    esp,0xc
c000c947:	c3                   	ret    

c000c948 <LogicalDisk::open(int, int, void*)>:
c000c948:	83 ec 18             	sub    esp,0x18
c000c94b:	68 08 e2 01 c0       	push   0xc001e208
c000c950:	e8 0e 38 00 00       	call   c0010163 <KePanic(char const*)>
c000c955:	83 c8 ff             	or     eax,0xffffffff
c000c958:	83 c4 1c             	add    esp,0x1c
c000c95b:	c3                   	ret    

c000c95c <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000c95c:	53                   	push   ebx
c000c95d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c961:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c965:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c969:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000c96f:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000c975:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000c97b:	77 10                	ja     c000c98d <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000c97d:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000c983:	89 d3                	mov    ebx,edx
c000c985:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000c98b:	72 05                	jb     c000c992 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000c98d:	83 c8 ff             	or     eax,0xffffffff
c000c990:	89 c2                	mov    edx,eax
c000c992:	5b                   	pop    ebx
c000c993:	c3                   	ret    

c000c994 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000c994:	56                   	push   esi
c000c995:	83 c8 ff             	or     eax,0xffffffff
c000c998:	53                   	push   ebx
c000c999:	89 c2                	mov    edx,eax
c000c99b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c99f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000c9a3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c9a7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000c9ad:	77 27                	ja     c000c9d6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000c9af:	89 d8                	mov    eax,ebx
c000c9b1:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000c9b7:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000c9bd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c9c2:	89 c2                	mov    edx,eax
c000c9c4:	73 10                	jae    c000c9d6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000c9c6:	89 c8                	mov    eax,ecx
c000c9c8:	89 da                	mov    edx,ebx
c000c9ca:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000c9d0:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000c9d6:	5b                   	pop    ebx
c000c9d7:	5e                   	pop    esi
c000c9d8:	c3                   	ret    
c000c9d9:	90                   	nop

c000c9da <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000c9da:	83 ec 1c             	sub    esp,0x1c
c000c9dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c9e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c9e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c9ed:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c9f1:	89 04 24             	mov    DWORD PTR [esp],eax
c000c9f4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c9f8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c9fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca00:	83 ec 08             	sub    esp,0x8
c000ca03:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca07:	50                   	push   eax
c000ca08:	e8 c3 f0 ff ff       	call   c000bad0 <Device::Device(char const*)>
c000ca0d:	83 c4 10             	add    esp,0x10
c000ca10:	ba 54 e2 01 c0       	mov    edx,0xc001e254
c000ca15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca19:	89 10                	mov    DWORD PTR [eax],edx
c000ca1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca1f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ca26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca2a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ca31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca35:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000ca3f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ca43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca47:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ca4b:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000ca51:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000ca57:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ca5b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ca5e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ca62:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000ca68:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000ca6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca72:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ca76:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000ca7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca80:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000ca8a:	90                   	nop
c000ca8b:	83 c4 1c             	add    esp,0x1c
c000ca8e:	c3                   	ret    
c000ca8f:	90                   	nop

c000ca90 <LogicalDisk::assignDriveLetter()>:
c000ca90:	55                   	push   ebp
c000ca91:	57                   	push   edi
c000ca92:	56                   	push   esi
c000ca93:	53                   	push   ebx
c000ca94:	83 ec 14             	sub    esp,0x14
c000ca97:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ca9b:	8b 3d a0 32 02 c0    	mov    edi,DWORD PTR ds:0xc00232a0
c000caa1:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000caa7:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000caab:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000cab1:	8b 3d a4 32 02 c0    	mov    edi,DWORD PTR ds:0xc00232a4
c000cab7:	3c 01                	cmp    al,0x1
c000cab9:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000cabd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000cac1:	19 c0                	sbb    eax,eax
c000cac3:	83 e0 02             	and    eax,0x2
c000cac6:	83 c0 41             	add    eax,0x41
c000cac9:	0f be e8             	movsx  ebp,al
c000cacc:	3c 43                	cmp    al,0x43
c000cace:	75 10                	jne    c000cae0 <LogicalDisk::assignDriveLetter()+0x50>
c000cad0:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000cad7:	75 5d                	jne    c000cb36 <LogicalDisk::assignDriveLetter()+0xa6>
c000cad9:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000cade:	75 56                	jne    c000cb36 <LogicalDisk::assignDriveLetter()+0xa6>
c000cae0:	8d 75 bf             	lea    esi,[ebp-0x41]
c000cae3:	ba 01 00 00 00       	mov    edx,0x1
c000cae8:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000caec:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000caf0:	d3 e2                	shl    edx,cl
c000caf2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000caf6:	89 d7                	mov    edi,edx
c000caf8:	89 d6                	mov    esi,edx
c000cafa:	c1 ff 1f             	sar    edi,0x1f
c000cafd:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000cb01:	21 f9                	and    ecx,edi
c000cb03:	09 d1                	or     ecx,edx
c000cb05:	75 2f                	jne    c000cb36 <LogicalDisk::assignDriveLetter()+0xa6>
c000cb07:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000cb0b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cb0f:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000cb15:	09 f2                	or     edx,esi
c000cb17:	89 15 a0 32 02 c0    	mov    DWORD PTR ds:0xc00232a0,edx
c000cb1d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb21:	09 fa                	or     edx,edi
c000cb23:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000cb27:	89 15 a4 32 02 c0    	mov    DWORD PTR ds:0xc00232a4,edx
c000cb2d:	89 1c bd c0 32 02 c0 	mov    DWORD PTR [edi*4-0x3ffdcd40],ebx
c000cb34:	eb 08                	jmp    c000cb3e <LogicalDisk::assignDriveLetter()+0xae>
c000cb36:	45                   	inc    ebp
c000cb37:	40                   	inc    eax
c000cb38:	3c 5b                	cmp    al,0x5b
c000cb3a:	75 90                	jne    c000cacc <LogicalDisk::assignDriveLetter()+0x3c>
c000cb3c:	31 c0                	xor    eax,eax
c000cb3e:	83 c4 14             	add    esp,0x14
c000cb41:	5b                   	pop    ebx
c000cb42:	5e                   	pop    esi
c000cb43:	5f                   	pop    edi
c000cb44:	5d                   	pop    ebp
c000cb45:	c3                   	ret    

c000cb46 <LogicalDisk::mount()>:
c000cb46:	56                   	push   esi
c000cb47:	53                   	push   ebx
c000cb48:	53                   	push   ebx
c000cb49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cb4d:	8b 1d 54 0e 02 c0    	mov    ebx,DWORD PTR ds:0xc0020e54
c000cb53:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000cb5d:	85 db                	test   ebx,ebx
c000cb5f:	74 27                	je     c000cb88 <LogicalDisk::mount()+0x42>
c000cb61:	51                   	push   ecx
c000cb62:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000cb69:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cb6b:	83 e8 41             	sub    eax,0x41
c000cb6e:	50                   	push   eax
c000cb6f:	56                   	push   esi
c000cb70:	53                   	push   ebx
c000cb71:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000cb74:	83 c4 10             	add    esp,0x10
c000cb77:	84 c0                	test   al,al
c000cb79:	74 08                	je     c000cb83 <LogicalDisk::mount()+0x3d>
c000cb7b:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000cb81:	eb 07                	jmp    c000cb8a <LogicalDisk::mount()+0x44>
c000cb83:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000cb86:	eb d5                	jmp    c000cb5d <LogicalDisk::mount()+0x17>
c000cb88:	31 c0                	xor    eax,eax
c000cb8a:	5a                   	pop    edx
c000cb8b:	5b                   	pop    ebx
c000cb8c:	5e                   	pop    esi
c000cb8d:	c3                   	ret    

c000cb8e <LogicalDisk::unmount()>:
c000cb8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cb92:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000cb9c:	c3                   	ret    
c000cb9d:	90                   	nop

c000cb9e <LogicalDisk::eject()>:
c000cb9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cba2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000cba8:	8b 10                	mov    edx,DWORD PTR [eax]
c000cbaa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cbae:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000cbb1:	90                   	nop

c000cbb2 <LogicalDisk::unassignDriveLetter()>:
c000cbb2:	57                   	push   edi
c000cbb3:	56                   	push   esi
c000cbb4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cbb8:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000cbbf:	84 c9                	test   cl,cl
c000cbc1:	75 0f                	jne    c000cbd2 <LogicalDisk::unassignDriveLetter()+0x20>
c000cbc3:	c7 44 24 0c 2c e2 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e22c
c000cbcb:	5e                   	pop    esi
c000cbcc:	5f                   	pop    edi
c000cbcd:	e9 91 35 00 00       	jmp    c0010163 <KePanic(char const*)>
c000cbd2:	83 e9 41             	sub    ecx,0x41
c000cbd5:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000cbdc:	b8 01 00 00 00       	mov    eax,0x1
c000cbe1:	c7 04 8d c0 32 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdcd40],0x0
c000cbec:	d3 e0                	shl    eax,cl
c000cbee:	89 c7                	mov    edi,eax
c000cbf0:	f7 d0                	not    eax
c000cbf2:	c1 ff 1f             	sar    edi,0x1f
c000cbf5:	21 05 a0 32 02 c0    	and    DWORD PTR ds:0xc00232a0,eax
c000cbfb:	89 fe                	mov    esi,edi
c000cbfd:	f7 d6                	not    esi
c000cbff:	21 35 a4 32 02 c0    	and    DWORD PTR ds:0xc00232a4,esi
c000cc05:	5e                   	pop    esi
c000cc06:	5f                   	pop    edi
c000cc07:	c3                   	ret    

c000cc08 <LogicalDisk::read(unsigned long long, int, void*)>:
c000cc08:	57                   	push   edi
c000cc09:	56                   	push   esi
c000cc0a:	53                   	push   ebx
c000cc0b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cc0f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cc13:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cc17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cc1b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cc21:	77 41                	ja     c000cc64 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000cc23:	99                   	cdq    
c000cc24:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cc2a:	01 c8                	add    eax,ecx
c000cc2c:	11 da                	adc    edx,ebx
c000cc2e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cc34:	19 d7                	sbb    edi,edx
c000cc36:	72 33                	jb     c000cc6b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000cc38:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cc3e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cc44:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cc48:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cc4c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cc52:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cc58:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc5c:	5b                   	pop    ebx
c000cc5d:	5e                   	pop    esi
c000cc5e:	5f                   	pop    edi
c000cc5f:	e9 4e 0a 00 00       	jmp    c000d6b2 <VCache::read(unsigned long long, int, void*)>
c000cc64:	b8 05 00 00 00       	mov    eax,0x5
c000cc69:	eb 05                	jmp    c000cc70 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000cc6b:	b8 07 00 00 00       	mov    eax,0x7
c000cc70:	5b                   	pop    ebx
c000cc71:	5e                   	pop    esi
c000cc72:	5f                   	pop    edi
c000cc73:	c3                   	ret    

c000cc74 <LogicalDisk::write(unsigned long long, int, void*)>:
c000cc74:	57                   	push   edi
c000cc75:	56                   	push   esi
c000cc76:	53                   	push   ebx
c000cc77:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cc7b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cc7f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cc83:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cc87:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cc8d:	77 41                	ja     c000ccd0 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000cc8f:	99                   	cdq    
c000cc90:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cc96:	01 c8                	add    eax,ecx
c000cc98:	11 da                	adc    edx,ebx
c000cc9a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cca0:	19 d7                	sbb    edi,edx
c000cca2:	72 33                	jb     c000ccd7 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000cca4:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000ccaa:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000ccb0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ccb4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000ccb8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ccbe:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ccc4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccc8:	5b                   	pop    ebx
c000ccc9:	5e                   	pop    esi
c000ccca:	5f                   	pop    edi
c000cccb:	e9 cc 08 00 00       	jmp    c000d59c <VCache::write(unsigned long long, int, void*)>
c000ccd0:	b8 05 00 00 00       	mov    eax,0x5
c000ccd5:	eb 05                	jmp    c000ccdc <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000ccd7:	b8 07 00 00 00       	mov    eax,0x7
c000ccdc:	5b                   	pop    ebx
c000ccdd:	5e                   	pop    esi
c000ccde:	5f                   	pop    edi
c000ccdf:	c3                   	ret    

c000cce0 <Mouse::Mouse(char const*)>:
c000cce0:	83 ec 0c             	sub    esp,0xc
c000cce3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cce7:	83 ec 08             	sub    esp,0x8
c000ccea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccee:	50                   	push   eax
c000ccef:	e8 dc ed ff ff       	call   c000bad0 <Device::Device(char const*)>
c000ccf4:	83 c4 10             	add    esp,0x10
c000ccf7:	ba 80 e2 01 c0       	mov    edx,0xc001e280
c000ccfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd00:	89 10                	mov    DWORD PTR [eax],edx
c000cd02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd06:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000cd10:	90                   	nop
c000cd11:	83 c4 0c             	add    esp,0xc
c000cd14:	c3                   	ret    
c000cd15:	90                   	nop
c000cd16:	66 90                	xchg   ax,ax

c000cd18 <Mouse::~Mouse()>:
c000cd18:	83 ec 0c             	sub    esp,0xc
c000cd1b:	ba 80 e2 01 c0       	mov    edx,0xc001e280
c000cd20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd24:	89 10                	mov    DWORD PTR [eax],edx
c000cd26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd2a:	83 ec 0c             	sub    esp,0xc
c000cd2d:	50                   	push   eax
c000cd2e:	e8 07 eb ff ff       	call   c000b83a <Device::~Device()>
c000cd33:	83 c4 10             	add    esp,0x10
c000cd36:	90                   	nop
c000cd37:	83 c4 0c             	add    esp,0xc
c000cd3a:	c3                   	ret    
c000cd3b:	90                   	nop

c000cd3c <Mouse::~Mouse()>:
c000cd3c:	83 ec 0c             	sub    esp,0xc
c000cd3f:	83 ec 0c             	sub    esp,0xc
c000cd42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd46:	e8 cd ff ff ff       	call   c000cd18 <Mouse::~Mouse()>
c000cd4b:	83 c4 10             	add    esp,0x10
c000cd4e:	83 ec 08             	sub    esp,0x8
c000cd51:	68 58 01 00 00       	push   0x158
c000cd56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd5a:	e8 a3 d6 ff ff       	call   c000a402 <operator delete(void*, unsigned long)>
c000cd5f:	83 c4 10             	add    esp,0x10
c000cd62:	83 c4 0c             	add    esp,0xc
c000cd65:	c3                   	ret    

c000cd66 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cd66:	55                   	push   ebp
c000cd67:	57                   	push   edi
c000cd68:	56                   	push   esi
c000cd69:	53                   	push   ebx
c000cd6a:	81 ec 28 01 00 00    	sub    esp,0x128
c000cd70:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000cd77:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000cd7e:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000cd85:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000cd8c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd90:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cd94:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cd9b:	e8 2c ee ff ff       	call   c000bbcc <Device::getName()>
c000cda0:	5a                   	pop    edx
c000cda1:	59                   	pop    ecx
c000cda2:	50                   	push   eax
c000cda3:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000cda7:	55                   	push   ebp
c000cda8:	e8 53 38 ff ff       	call   c0000600 <strcpy>
c000cdad:	5b                   	pop    ebx
c000cdae:	58                   	pop    eax
c000cdaf:	68 a4 e2 01 c0       	push   0xc001e2a4
c000cdb4:	55                   	push   ebp
c000cdb5:	e8 06 3a ff ff       	call   c00007c0 <strcat>
c000cdba:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000cdc1:	e8 f3 a9 ff ff       	call   c00077b9 <malloc>
c000cdc6:	83 c4 0c             	add    esp,0xc
c000cdc9:	89 c3                	mov    ebx,eax
c000cdcb:	57                   	push   edi
c000cdcc:	56                   	push   esi
c000cdcd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cdd1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cdd5:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000cddc:	55                   	push   ebp
c000cddd:	50                   	push   eax
c000cdde:	e8 f7 fb ff ff       	call   c000c9da <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000cde3:	83 c4 14             	add    esp,0x14
c000cde6:	53                   	push   ebx
c000cde7:	e8 a4 fc ff ff       	call   c000ca90 <LogicalDisk::assignDriveLetter()>
c000cdec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cdef:	e8 52 fd ff ff       	call   c000cb46 <LogicalDisk::mount()>
c000cdf4:	58                   	pop    eax
c000cdf5:	5a                   	pop    edx
c000cdf6:	53                   	push   ebx
c000cdf7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cdfe:	e8 35 eb ff ff       	call   c000b938 <Device::addChild(Device*)>
c000ce03:	81 c4 2c 01 00 00    	add    esp,0x12c
c000ce09:	5b                   	pop    ebx
c000ce0a:	5e                   	pop    esi
c000ce0b:	5f                   	pop    edi
c000ce0c:	5d                   	pop    ebp
c000ce0d:	c3                   	ret    

c000ce0e <createPartitionsForDisk(PhysicalDisk*)>:
c000ce0e:	55                   	push   ebp
c000ce0f:	57                   	push   edi
c000ce10:	56                   	push   esi
c000ce11:	53                   	push   ebx
c000ce12:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000ce18:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000ce1f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000ce25:	3d 00 02 00 00       	cmp    eax,0x200
c000ce2a:	74 27                	je     c000ce53 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000ce2c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000ce32:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000ce38:	83 ec 10             	sub    esp,0x10
c000ce3b:	0f a4 f7 0a          	shld   edi,esi,0xa
c000ce3f:	99                   	cdq    
c000ce40:	c1 e6 0a             	shl    esi,0xa
c000ce43:	52                   	push   edx
c000ce44:	89 fd                	mov    ebp,edi
c000ce46:	50                   	push   eax
c000ce47:	55                   	push   ebp
c000ce48:	56                   	push   esi
c000ce49:	e8 d2 f3 00 00       	call   c001c220 <__udivdi3>
c000ce4e:	e9 b1 00 00 00       	jmp    c000cf04 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000ce53:	83 ec 0c             	sub    esp,0xc
c000ce56:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ce58:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000ce5c:	56                   	push   esi
c000ce5d:	6a 01                	push   0x1
c000ce5f:	6a 00                	push   0x0
c000ce61:	6a 00                	push   0x0
c000ce63:	53                   	push   ebx
c000ce64:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ce67:	83 c4 20             	add    esp,0x20
c000ce6a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000ce72:	75 0a                	jne    c000ce7e <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000ce74:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000ce7c:	74 2c                	je     c000ceaa <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000ce7e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ce84:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ce8a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ce90:	83 ec 10             	sub    esp,0x10
c000ce93:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ce97:	89 f7                	mov    edi,esi
c000ce99:	c1 e0 0a             	shl    eax,0xa
c000ce9c:	c1 ff 1f             	sar    edi,0x1f
c000ce9f:	57                   	push   edi
c000cea0:	56                   	push   esi
c000cea1:	52                   	push   edx
c000cea2:	50                   	push   eax
c000cea3:	e8 78 f3 00 00       	call   c001c220 <__udivdi3>
c000cea8:	eb 5a                	jmp    c000cf04 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000ceaa:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000ceb1:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000ceb8:	83 e1 7f             	and    ecx,0x7f
c000cebb:	83 e0 7f             	and    eax,0x7f
c000cebe:	01 c1                	add    ecx,eax
c000cec0:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000cec7:	83 e0 7f             	and    eax,0x7f
c000ceca:	01 c1                	add    ecx,eax
c000cecc:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000ced3:	83 e0 7f             	and    eax,0x7f
c000ced6:	00 c1                	add    cl,al
c000ced8:	74 41                	je     c000cf1b <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000ceda:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000cee0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000cee6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ceec:	83 ec 10             	sub    esp,0x10
c000ceef:	0f a4 c2 0a          	shld   edx,eax,0xa
c000cef3:	89 f7                	mov    edi,esi
c000cef5:	c1 e0 0a             	shl    eax,0xa
c000cef8:	c1 ff 1f             	sar    edi,0x1f
c000cefb:	57                   	push   edi
c000cefc:	56                   	push   esi
c000cefd:	52                   	push   edx
c000cefe:	50                   	push   eax
c000ceff:	e8 1c f3 00 00       	call   c001c220 <__udivdi3>
c000cf04:	83 c4 14             	add    esp,0x14
c000cf07:	52                   	push   edx
c000cf08:	50                   	push   eax
c000cf09:	6a 00                	push   0x0
c000cf0b:	6a 00                	push   0x0
c000cf0d:	53                   	push   ebx
c000cf0e:	e8 53 fe ff ff       	call   c000cd66 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000cf13:	83 c4 20             	add    esp,0x20
c000cf16:	e9 79 01 00 00       	jmp    c000d094 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000cf1b:	89 f0                	mov    eax,esi
c000cf1d:	31 f6                	xor    esi,esi
c000cf1f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000cf26:	75 02                	jne    c000cf2a <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000cf28:	89 f1                	mov    ecx,esi
c000cf2a:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000cf31:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000cf38:	c1 e2 08             	shl    edx,0x8
c000cf3b:	c1 e7 10             	shl    edi,0x10
c000cf3e:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000cf46:	09 fa                	or     edx,edi
c000cf48:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000cf50:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000cf57:	83 c0 10             	add    eax,0x10
c000cf5a:	09 fa                	or     edx,edi
c000cf5c:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000cf63:	c1 e7 18             	shl    edi,0x18
c000cf66:	09 fa                	or     edx,edi
c000cf68:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000cf6f:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000cf73:	c1 e7 10             	shl    edi,0x10
c000cf76:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000cf7d:	c1 e2 08             	shl    edx,0x8
c000cf80:	09 fa                	or     edx,edi
c000cf82:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000cf89:	09 fa                	or     edx,edi
c000cf8b:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000cf92:	c1 e7 18             	shl    edi,0x18
c000cf95:	09 fa                	or     edx,edi
c000cf97:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000cf9b:	46                   	inc    esi
c000cf9c:	83 fe 04             	cmp    esi,0x4
c000cf9f:	0f 85 7a ff ff ff    	jne    c000cf1f <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000cfa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfa9:	83 f0 01             	xor    eax,0x1
c000cfac:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000cfb0:	75 57                	jne    c000d009 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000cfb2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cfb6:	83 f0 01             	xor    eax,0x1
c000cfb9:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000cfbd:	75 4a                	jne    c000d009 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000cfbf:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000cfc3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000cfcb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000cfd3:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000cfd9:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000cfdf:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000cfe5:	0f a4 c2 0a          	shld   edx,eax,0xa
c000cfe9:	89 f7                	mov    edi,esi
c000cfeb:	c1 e0 0a             	shl    eax,0xa
c000cfee:	c1 ff 1f             	sar    edi,0x1f
c000cff1:	57                   	push   edi
c000cff2:	56                   	push   esi
c000cff3:	52                   	push   edx
c000cff4:	50                   	push   eax
c000cff5:	e8 26 f2 00 00       	call   c001c220 <__udivdi3>
c000cffa:	83 c4 10             	add    esp,0x10
c000cffd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d001:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d005:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d009:	84 c9                	test   cl,cl
c000d00b:	74 53                	je     c000d060 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000d00d:	0f b6 c9             	movzx  ecx,cl
c000d010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d014:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d018:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d01c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d020:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d024:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d028:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000d02c:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000d030:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d034:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d038:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d03c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d040:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000d044:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000d048:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d04c:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d050:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d054:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d058:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d05c:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d060:	31 ed                	xor    ebp,ebp
c000d062:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d066:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d06a:	89 f8                	mov    eax,edi
c000d06c:	09 f0                	or     eax,esi
c000d06e:	74 1e                	je     c000d08e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d070:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d074:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d078:	89 d1                	mov    ecx,edx
c000d07a:	09 c1                	or     ecx,eax
c000d07c:	74 10                	je     c000d08e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d07e:	83 ec 0c             	sub    esp,0xc
c000d081:	57                   	push   edi
c000d082:	56                   	push   esi
c000d083:	52                   	push   edx
c000d084:	50                   	push   eax
c000d085:	53                   	push   ebx
c000d086:	e8 db fc ff ff       	call   c000cd66 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d08b:	83 c4 20             	add    esp,0x20
c000d08e:	45                   	inc    ebp
c000d08f:	83 fd 04             	cmp    ebp,0x4
c000d092:	75 ce                	jne    c000d062 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d094:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d09a:	5b                   	pop    ebx
c000d09b:	5e                   	pop    esi
c000d09c:	5f                   	pop    edi
c000d09d:	5d                   	pop    ebp
c000d09e:	c3                   	ret    
c000d09f:	90                   	nop

c000d0a0 <Serial::Serial(char const*)>:
c000d0a0:	83 ec 0c             	sub    esp,0xc
c000d0a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0a7:	83 ec 08             	sub    esp,0x8
c000d0aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0ae:	50                   	push   eax
c000d0af:	e8 1c ea ff ff       	call   c000bad0 <Device::Device(char const*)>
c000d0b4:	83 c4 10             	add    esp,0x10
c000d0b7:	ba b8 e2 01 c0       	mov    edx,0xc001e2b8
c000d0bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0c0:	89 10                	mov    DWORD PTR [eax],edx
c000d0c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0c6:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d0d0:	90                   	nop
c000d0d1:	83 c4 0c             	add    esp,0xc
c000d0d4:	c3                   	ret    
c000d0d5:	90                   	nop
c000d0d6:	66 90                	xchg   ax,ax

c000d0d8 <Serial::~Serial()>:
c000d0d8:	83 ec 0c             	sub    esp,0xc
c000d0db:	ba b8 e2 01 c0       	mov    edx,0xc001e2b8
c000d0e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0e4:	89 10                	mov    DWORD PTR [eax],edx
c000d0e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0ea:	83 ec 0c             	sub    esp,0xc
c000d0ed:	50                   	push   eax
c000d0ee:	e8 47 e7 ff ff       	call   c000b83a <Device::~Device()>
c000d0f3:	83 c4 10             	add    esp,0x10
c000d0f6:	90                   	nop
c000d0f7:	83 c4 0c             	add    esp,0xc
c000d0fa:	c3                   	ret    
c000d0fb:	90                   	nop

c000d0fc <Serial::~Serial()>:
c000d0fc:	83 ec 0c             	sub    esp,0xc
c000d0ff:	83 ec 0c             	sub    esp,0xc
c000d102:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d106:	e8 cd ff ff ff       	call   c000d0d8 <Serial::~Serial()>
c000d10b:	83 c4 10             	add    esp,0x10
c000d10e:	83 ec 08             	sub    esp,0x8
c000d111:	68 58 01 00 00       	push   0x158
c000d116:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d11a:	e8 e3 d2 ff ff       	call   c000a402 <operator delete(void*, unsigned long)>
c000d11f:	83 c4 10             	add    esp,0x10
c000d122:	83 c4 0c             	add    esp,0xc
c000d125:	c3                   	ret    
c000d126:	66 90                	xchg   ax,ax

c000d128 <Timer::Timer(char const*)>:
c000d128:	83 ec 0c             	sub    esp,0xc
c000d12b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d12f:	83 ec 08             	sub    esp,0x8
c000d132:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d136:	50                   	push   eax
c000d137:	e8 94 e9 ff ff       	call   c000bad0 <Device::Device(char const*)>
c000d13c:	83 c4 10             	add    esp,0x10
c000d13f:	ba fc e2 01 c0       	mov    edx,0xc001e2fc
c000d144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d148:	89 10                	mov    DWORD PTR [eax],edx
c000d14a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d14e:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000d158:	90                   	nop
c000d159:	83 c4 0c             	add    esp,0xc
c000d15c:	c3                   	ret    
c000d15d:	90                   	nop
c000d15e:	66 90                	xchg   ax,ax

c000d160 <Timer::~Timer()>:
c000d160:	83 ec 0c             	sub    esp,0xc
c000d163:	ba fc e2 01 c0       	mov    edx,0xc001e2fc
c000d168:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d16c:	89 10                	mov    DWORD PTR [eax],edx
c000d16e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d172:	83 ec 0c             	sub    esp,0xc
c000d175:	50                   	push   eax
c000d176:	e8 bf e6 ff ff       	call   c000b83a <Device::~Device()>
c000d17b:	83 c4 10             	add    esp,0x10
c000d17e:	90                   	nop
c000d17f:	83 c4 0c             	add    esp,0xc
c000d182:	c3                   	ret    
c000d183:	90                   	nop

c000d184 <Timer::~Timer()>:
c000d184:	83 ec 0c             	sub    esp,0xc
c000d187:	83 ec 0c             	sub    esp,0xc
c000d18a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d18e:	e8 cd ff ff ff       	call   c000d160 <Timer::~Timer()>
c000d193:	83 c4 10             	add    esp,0x10
c000d196:	83 ec 08             	sub    esp,0x8
c000d199:	68 5c 01 00 00       	push   0x15c
c000d19e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1a2:	e8 5b d2 ff ff       	call   c000a402 <operator delete(void*, unsigned long)>
c000d1a7:	83 c4 10             	add    esp,0x10
c000d1aa:	83 c4 0c             	add    esp,0xc
c000d1ad:	c3                   	ret    

c000d1ae <Timer::read()>:
c000d1ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d1b2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d1b8:	c3                   	ret    

c000d1b9 <setupTimer(int)>:
c000d1b9:	53                   	push   ebx
c000d1ba:	83 ec 14             	sub    esp,0x14
c000d1bd:	68 5c 01 00 00       	push   0x15c
c000d1c2:	e8 f2 a5 ff ff       	call   c00077b9 <malloc>
c000d1c7:	89 04 24             	mov    DWORD PTR [esp],eax
c000d1ca:	89 c3                	mov    ebx,eax
c000d1cc:	e8 bf e9 00 00       	call   c001bb90 <PIT::PIT()>
c000d1d1:	58                   	pop    eax
c000d1d2:	5a                   	pop    edx
c000d1d3:	53                   	push   ebx
c000d1d4:	ff 35 58 0d 02 c0    	push   DWORD PTR ds:0xc0020d58
c000d1da:	e8 59 e7 ff ff       	call   c000b938 <Device::addChild(Device*)>
c000d1df:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d1e1:	6a 00                	push   0x0
c000d1e3:	6a 00                	push   0x0
c000d1e5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d1e9:	53                   	push   ebx
c000d1ea:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d1ed:	89 d8                	mov    eax,ebx
c000d1ef:	83 c4 28             	add    esp,0x28
c000d1f2:	5b                   	pop    ebx
c000d1f3:	c3                   	ret    

c000d1f4 <timerHandler(unsigned int)>:
c000d1f4:	56                   	push   esi
c000d1f5:	53                   	push   ebx
c000d1f6:	51                   	push   ecx
c000d1f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1fb:	01 05 2c 33 02 c0    	add    DWORD PTR ds:0xc002332c,eax
c000d201:	80 3d 5d 0d 02 c0 00 	cmp    BYTE PTR ds:0xc0020d5d,0x0
c000d208:	0f 84 4a 01 00 00    	je     c000d358 <timerHandler(unsigned int)+0x164>
c000d20e:	fa                   	cli    
c000d20f:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c000d215:	83 ec 0c             	sub    esp,0xc
c000d218:	ff 05 04 40 02 c0    	inc    DWORD PTR ds:0xc0024004
c000d21e:	68 18 40 02 c0       	push   0xc0024018
c000d223:	e8 c8 f5 00 00       	call   c001c7f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d228:	83 c4 10             	add    esp,0x10
c000d22b:	84 c0                	test   al,al
c000d22d:	0f 85 a1 00 00 00    	jne    c000d2d4 <timerHandler(unsigned int)+0xe0>
c000d233:	83 ec 0c             	sub    esp,0xc
c000d236:	68 18 40 02 c0       	push   0xc0024018
c000d23b:	e8 cc f5 00 00       	call   c001c80c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	89 c6                	mov    esi,eax
c000d245:	8d 76 00             	lea    esi,[esi+0x0]
c000d248:	83 ec 0c             	sub    esp,0xc
c000d24b:	68 18 40 02 c0       	push   0xc0024018
c000d250:	e8 b7 f5 00 00       	call   c001c80c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d255:	c7 04 24 18 40 02 c0 	mov    DWORD PTR [esp],0xc0024018
c000d25c:	89 c3                	mov    ebx,eax
c000d25e:	e8 b1 f5 00 00       	call   c001c814 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d263:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d266:	83 c4 10             	add    esp,0x10
c000d269:	3b 05 2c 33 02 c0    	cmp    eax,DWORD PTR ds:0xc002332c
c000d26f:	77 23                	ja     c000d294 <timerHandler(unsigned int)+0xa0>
c000d271:	83 ec 0c             	sub    esp,0xc
c000d274:	53                   	push   ebx
c000d275:	e8 66 6b 00 00       	call   c0013de0 <unblockTask(ThreadControlBlock*)>
c000d27a:	83 c4 10             	add    esp,0x10
c000d27d:	39 de                	cmp    esi,ebx
c000d27f:	75 27                	jne    c000d2a8 <timerHandler(unsigned int)+0xb4>
c000d281:	83 ec 0c             	sub    esp,0xc
c000d284:	68 18 40 02 c0       	push   0xc0024018
c000d289:	e8 7e f5 00 00       	call   c001c80c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d28e:	89 c6                	mov    esi,eax
c000d290:	eb 12                	jmp    c000d2a4 <timerHandler(unsigned int)+0xb0>
c000d292:	66 90                	xchg   ax,ax
c000d294:	52                   	push   edx
c000d295:	52                   	push   edx
c000d296:	53                   	push   ebx
c000d297:	68 18 40 02 c0       	push   0xc0024018
c000d29c:	e8 2b f6 00 00       	call   c001c8cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d2a1:	8d 76 00             	lea    esi,[esi+0x0]
c000d2a4:	83 c4 10             	add    esp,0x10
c000d2a7:	90                   	nop
c000d2a8:	83 ec 0c             	sub    esp,0xc
c000d2ab:	68 18 40 02 c0       	push   0xc0024018
c000d2b0:	e8 3b f5 00 00       	call   c001c7f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d2b5:	83 c4 10             	add    esp,0x10
c000d2b8:	84 c0                	test   al,al
c000d2ba:	75 18                	jne    c000d2d4 <timerHandler(unsigned int)+0xe0>
c000d2bc:	83 ec 0c             	sub    esp,0xc
c000d2bf:	68 18 40 02 c0       	push   0xc0024018
c000d2c4:	e8 43 f5 00 00       	call   c001c80c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d2c9:	83 c4 10             	add    esp,0x10
c000d2cc:	39 f0                	cmp    eax,esi
c000d2ce:	0f 85 74 ff ff ff    	jne    c000d248 <timerHandler(unsigned int)+0x54>
c000d2d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d2d9:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d2dd:	74 41                	je     c000d320 <timerHandler(unsigned int)+0x12c>
c000d2df:	80 3d 5c 0d 02 c0 00 	cmp    BYTE PTR ds:0xc0020d5c,0x0
c000d2e6:	74 38                	je     c000d320 <timerHandler(unsigned int)+0x12c>
c000d2e8:	fa                   	cli    
c000d2e9:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c000d2ef:	a1 2c 33 02 c0       	mov    eax,ds:0xc002332c
c000d2f4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d2fa:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d2fd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d303:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d306:	72 08                	jb     c000d310 <timerHandler(unsigned int)+0x11c>
c000d308:	e8 0f 66 00 00       	call   c001391c <schedule()>
c000d30d:	8d 76 00             	lea    esi,[esi+0x0]
c000d310:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c000d315:	48                   	dec    eax
c000d316:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c000d31b:	75 03                	jne    c000d320 <timerHandler(unsigned int)+0x12c>
c000d31d:	fb                   	sti    
c000d31e:	66 90                	xchg   ax,ax
c000d320:	a1 04 40 02 c0       	mov    eax,ds:0xc0024004
c000d325:	48                   	dec    eax
c000d326:	a3 04 40 02 c0       	mov    ds:0xc0024004,eax
c000d32b:	75 1b                	jne    c000d348 <timerHandler(unsigned int)+0x154>
c000d32d:	83 3d 00 40 02 c0 00 	cmp    DWORD PTR ds:0xc0024000,0x0
c000d334:	74 12                	je     c000d348 <timerHandler(unsigned int)+0x154>
c000d336:	c7 05 00 40 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024000,0x0
c000d340:	e8 d7 65 00 00       	call   c001391c <schedule()>
c000d345:	8d 76 00             	lea    esi,[esi+0x0]
c000d348:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c000d34d:	48                   	dec    eax
c000d34e:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c000d353:	75 03                	jne    c000d358 <timerHandler(unsigned int)+0x164>
c000d355:	fb                   	sti    
c000d356:	66 90                	xchg   ax,ax
c000d358:	58                   	pop    eax
c000d359:	5b                   	pop    ebx
c000d35a:	5e                   	pop    esi
c000d35b:	c3                   	ret    

c000d35c <VCache::VCache(PhysicalDisk*)>:
c000d35c:	53                   	push   ebx
c000d35d:	83 ec 18             	sub    esp,0x18
c000d360:	ba 2c e3 01 c0       	mov    edx,0xc001e32c
c000d365:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d369:	89 10                	mov    DWORD PTR [eax],edx
c000d36b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d36f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d376:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d37a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d381:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d385:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d38c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d393:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d397:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d39e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d3a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3a9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d3b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3b4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d3b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3bc:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d3c3:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d3ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3ce:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d3d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3d6:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d3da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3de:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d3e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3e6:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d3ed:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000d3f5:	83 ec 0c             	sub    esp,0xc
c000d3f8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d3fc:	e8 b8 a3 ff ff       	call   c00077b9 <malloc>
c000d401:	83 c4 10             	add    esp,0x10
c000d404:	89 c3                	mov    ebx,eax
c000d406:	83 ec 0c             	sub    esp,0xc
c000d409:	53                   	push   ebx
c000d40a:	e8 d9 62 00 00       	call   c00136e8 <Mutex::Mutex()>
c000d40f:	83 c4 10             	add    esp,0x10
c000d412:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d416:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000d419:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d41d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d421:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000d424:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d428:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000d42f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d433:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d439:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d43d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d440:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d444:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000d44a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000d450:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d454:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000d457:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000d45a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d45e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d462:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d466:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d46c:	05 00 01 00 00       	add    eax,0x100
c000d471:	c1 e0 04             	shl    eax,0x4
c000d474:	83 ec 0c             	sub    esp,0xc
c000d477:	50                   	push   eax
c000d478:	e8 3c a3 ff ff       	call   c00077b9 <malloc>
c000d47d:	83 c4 10             	add    esp,0x10
c000d480:	89 c2                	mov    edx,eax
c000d482:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d486:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d489:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d48d:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d494:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d498:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d49c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d4a0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d4a6:	c1 e0 06             	shl    eax,0x6
c000d4a9:	83 ec 0c             	sub    esp,0xc
c000d4ac:	50                   	push   eax
c000d4ad:	e8 07 a3 ff ff       	call   c00077b9 <malloc>
c000d4b2:	83 c4 10             	add    esp,0x10
c000d4b5:	89 c2                	mov    edx,eax
c000d4b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4bb:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d4be:	90                   	nop
c000d4bf:	83 c4 18             	add    esp,0x18
c000d4c2:	5b                   	pop    ebx
c000d4c3:	c3                   	ret    

c000d4c4 <VCache::invalidateReadBuffer()>:
c000d4c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d4c8:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000d4ce:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d4d2:	c3                   	ret    
c000d4d3:	90                   	nop

c000d4d4 <VCache::writeWriteBuffer()>:
c000d4d4:	53                   	push   ebx
c000d4d5:	83 ec 08             	sub    esp,0x8
c000d4d8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d4dc:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d4e0:	74 1e                	je     c000d500 <VCache::writeWriteBuffer()+0x2c>
c000d4e2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d4e5:	83 ec 0c             	sub    esp,0xc
c000d4e8:	8b 10                	mov    edx,DWORD PTR [eax]
c000d4ea:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000d4ed:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000d4f0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000d4f3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d4f6:	50                   	push   eax
c000d4f7:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000d4fa:	83 c4 20             	add    esp,0x20
c000d4fd:	8d 76 00             	lea    esi,[esi+0x0]
c000d500:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d507:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000d50e:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000d512:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000d519:	83 c4 08             	add    esp,0x8
c000d51c:	5b                   	pop    ebx
c000d51d:	c3                   	ret    
c000d51e:	66 90                	xchg   ax,ax

c000d520 <VCache::~VCache()>:
c000d520:	83 ec 0c             	sub    esp,0xc
c000d523:	ba 2c e3 01 c0       	mov    edx,0xc001e32c
c000d528:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d52c:	89 10                	mov    DWORD PTR [eax],edx
c000d52e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d532:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000d535:	84 c0                	test   al,al
c000d537:	74 0f                	je     c000d548 <VCache::~VCache()+0x28>
c000d539:	83 ec 0c             	sub    esp,0xc
c000d53c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d540:	e8 8f ff ff ff       	call   c000d4d4 <VCache::writeWriteBuffer()>
c000d545:	83 c4 10             	add    esp,0x10
c000d548:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d54c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d54f:	83 ec 0c             	sub    esp,0xc
c000d552:	50                   	push   eax
c000d553:	e8 91 a2 ff ff       	call   c00077e9 <free>
c000d558:	83 c4 10             	add    esp,0x10
c000d55b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d55f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000d562:	83 ec 0c             	sub    esp,0xc
c000d565:	50                   	push   eax
c000d566:	e8 7e a2 ff ff       	call   c00077e9 <free>
c000d56b:	83 c4 10             	add    esp,0x10
c000d56e:	90                   	nop
c000d56f:	83 c4 0c             	add    esp,0xc
c000d572:	c3                   	ret    
c000d573:	90                   	nop

c000d574 <VCache::~VCache()>:
c000d574:	83 ec 0c             	sub    esp,0xc
c000d577:	83 ec 0c             	sub    esp,0xc
c000d57a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d57e:	e8 9d ff ff ff       	call   c000d520 <VCache::~VCache()>
c000d583:	83 c4 10             	add    esp,0x10
c000d586:	83 ec 08             	sub    esp,0x8
c000d589:	6a 44                	push   0x44
c000d58b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d58f:	e8 6e ce ff ff       	call   c000a402 <operator delete(void*, unsigned long)>
c000d594:	83 c4 10             	add    esp,0x10
c000d597:	83 c4 0c             	add    esp,0xc
c000d59a:	c3                   	ret    
c000d59b:	90                   	nop

c000d59c <VCache::write(unsigned long long, int, void*)>:
c000d59c:	55                   	push   ebp
c000d59d:	57                   	push   edi
c000d59e:	56                   	push   esi
c000d59f:	53                   	push   ebx
c000d5a0:	83 ec 1c             	sub    esp,0x1c
c000d5a3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d5a7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d5ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5af:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d5b3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d5b7:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d5bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d5bf:	31 c0                	xor    eax,eax
c000d5c1:	8d 76 00             	lea    esi,[esi+0x0]
c000d5c4:	39 e8                	cmp    eax,ebp
c000d5c6:	7d 18                	jge    c000d5e0 <VCache::write(unsigned long long, int, void*)+0x44>
c000d5c8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000d5cb:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000d5d1:	0f af c8             	imul   ecx,eax
c000d5d4:	89 ca                	mov    edx,ecx
c000d5d6:	01 f2                	add    edx,esi
c000d5d8:	8b 3a                	mov    edi,DWORD PTR [edx]
c000d5da:	40                   	inc    eax
c000d5db:	eb e7                	jmp    c000d5c4 <VCache::write(unsigned long long, int, void*)+0x28>
c000d5dd:	8d 76 00             	lea    esi,[esi+0x0]
c000d5e0:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000d5e4:	74 0a                	je     c000d5f0 <VCache::write(unsigned long long, int, void*)+0x54>
c000d5e6:	53                   	push   ebx
c000d5e7:	e8 d8 fe ff ff       	call   c000d4c4 <VCache::invalidateReadBuffer()>
c000d5ec:	58                   	pop    eax
c000d5ed:	8d 76 00             	lea    esi,[esi+0x0]
c000d5f0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d5f4:	74 5a                	je     c000d650 <VCache::write(unsigned long long, int, void*)+0xb4>
c000d5f6:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c000d5f9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d5fd:	89 f8                	mov    eax,edi
c000d5ff:	99                   	cdq    
c000d600:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000d603:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000d606:	31 c1                	xor    ecx,eax
c000d608:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d60c:	31 d0                	xor    eax,edx
c000d60e:	09 c1                	or     ecx,eax
c000d610:	75 32                	jne    c000d644 <VCache::write(unsigned long long, int, void*)+0xa8>
c000d612:	83 fd 01             	cmp    ebp,0x1
c000d615:	75 2d                	jne    c000d644 <VCache::write(unsigned long long, int, void*)+0xa8>
c000d617:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d61a:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d620:	0f af f9             	imul   edi,ecx
c000d623:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000d626:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d628:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d62b:	40                   	inc    eax
c000d62c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000d62f:	83 f8 40             	cmp    eax,0x40
c000d632:	75 74                	jne    c000d6a8 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d634:	83 ec 0c             	sub    esp,0xc
c000d637:	53                   	push   ebx
c000d638:	e8 97 fe ff ff       	call   c000d4d4 <VCache::writeWriteBuffer()>
c000d63d:	83 c4 10             	add    esp,0x10
c000d640:	eb 66                	jmp    c000d6a8 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d642:	66 90                	xchg   ax,ax
c000d644:	83 ec 0c             	sub    esp,0xc
c000d647:	53                   	push   ebx
c000d648:	e8 87 fe ff ff       	call   c000d4d4 <VCache::writeWriteBuffer()>
c000d64d:	83 c4 10             	add    esp,0x10
c000d650:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d653:	83 fd 3f             	cmp    ebp,0x3f
c000d656:	7f 24                	jg     c000d67c <VCache::write(unsigned long long, int, void*)+0xe0>
c000d658:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d65c:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c000d65f:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000d662:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000d666:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d66a:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d66d:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000d670:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d676:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d678:	eb 2e                	jmp    c000d6a8 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d67a:	66 90                	xchg   ax,ax
c000d67c:	8b 10                	mov    edx,DWORD PTR [eax]
c000d67e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000d682:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d686:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000d68a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d68e:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d692:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d696:	89 74 24 38          	mov    DWORD PTR [esp+0x38],esi
c000d69a:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000d69d:	83 c4 1c             	add    esp,0x1c
c000d6a0:	5b                   	pop    ebx
c000d6a1:	5e                   	pop    esi
c000d6a2:	5f                   	pop    edi
c000d6a3:	5d                   	pop    ebp
c000d6a4:	ff e0                	jmp    eax
c000d6a6:	66 90                	xchg   ax,ax
c000d6a8:	83 c4 1c             	add    esp,0x1c
c000d6ab:	31 c0                	xor    eax,eax
c000d6ad:	5b                   	pop    ebx
c000d6ae:	5e                   	pop    esi
c000d6af:	5f                   	pop    edi
c000d6b0:	5d                   	pop    ebp
c000d6b1:	c3                   	ret    

c000d6b2 <VCache::read(unsigned long long, int, void*)>:
c000d6b2:	55                   	push   ebp
c000d6b3:	57                   	push   edi
c000d6b4:	56                   	push   esi
c000d6b5:	53                   	push   ebx
c000d6b6:	83 ec 1c             	sub    esp,0x1c
c000d6b9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d6bd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d6c1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000d6c5:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000d6c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d6cd:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000d6d1:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000d6d5:	74 0d                	je     c000d6e4 <VCache::read(unsigned long long, int, void*)+0x32>
c000d6d7:	83 ec 0c             	sub    esp,0xc
c000d6da:	55                   	push   ebp
c000d6db:	e8 f4 fd ff ff       	call   c000d4d4 <VCache::writeWriteBuffer()>
c000d6e0:	83 c4 10             	add    esp,0x10
c000d6e3:	90                   	nop
c000d6e4:	83 ec 0c             	sub    esp,0xc
c000d6e7:	55                   	push   ebp
c000d6e8:	e8 d7 fd ff ff       	call   c000d4c4 <VCache::invalidateReadBuffer()>
c000d6ed:	83 c4 0c             	add    esp,0xc
c000d6f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6f3:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c000d6f9:	6a 00                	push   0x0
c000d6fb:	53                   	push   ebx
c000d6fc:	e8 cf 2d ff ff       	call   c00004d0 <memset>
c000d701:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d704:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000d708:	8b 10                	mov    edx,DWORD PTR [eax]
c000d70a:	89 5c 24 50          	mov    DWORD PTR [esp+0x50],ebx
c000d70e:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c000d712:	89 7c 24 48          	mov    DWORD PTR [esp+0x48],edi
c000d716:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
c000d71a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d71e:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000d721:	83 c4 2c             	add    esp,0x2c
c000d724:	5b                   	pop    ebx
c000d725:	5e                   	pop    esi
c000d726:	5f                   	pop    edi
c000d727:	5d                   	pop    ebp
c000d728:	ff e0                	jmp    eax

c000d72a <Video::putrect(int, int, int, int, unsigned int)>:
c000d72a:	55                   	push   ebp
c000d72b:	57                   	push   edi
c000d72c:	56                   	push   esi
c000d72d:	53                   	push   ebx
c000d72e:	83 ec 1c             	sub    esp,0x1c
c000d731:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000d735:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d739:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000d73d:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000d741:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d745:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d749:	01 df                	add    edi,ebx
c000d74b:	39 fb                	cmp    ebx,edi
c000d74d:	7d 1f                	jge    c000d76e <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000d74f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d753:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000d757:	7d 12                	jge    c000d76b <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000d759:	8b 16                	mov    edx,DWORD PTR [esi]
c000d75b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d75f:	53                   	push   ebx
c000d760:	55                   	push   ebp
c000d761:	45                   	inc    ebp
c000d762:	56                   	push   esi
c000d763:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d766:	83 c4 10             	add    esp,0x10
c000d769:	eb e8                	jmp    c000d753 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000d76b:	43                   	inc    ebx
c000d76c:	eb dd                	jmp    c000d74b <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000d76e:	83 c4 1c             	add    esp,0x1c
c000d771:	5b                   	pop    ebx
c000d772:	5e                   	pop    esi
c000d773:	5f                   	pop    edi
c000d774:	5d                   	pop    ebp
c000d775:	c3                   	ret    

c000d776 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000d776:	55                   	push   ebp
c000d777:	57                   	push   edi
c000d778:	31 ff                	xor    edi,edi
c000d77a:	56                   	push   esi
c000d77b:	53                   	push   ebx
c000d77c:	83 ec 1c             	sub    esp,0x1c
c000d77f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000d783:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d787:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000d78e:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000d793:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d797:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000d79b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d79f:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000d7a2:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d7a6:	01 f9                	add    ecx,edi
c000d7a8:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000d7ac:	7d 2f                	jge    c000d7dd <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000d7ae:	31 f6                	xor    esi,esi
c000d7b0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d7b4:	01 f2                	add    edx,esi
c000d7b6:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000d7ba:	7d 1a                	jge    c000d7d6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000d7bc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d7bf:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000d7c2:	46                   	inc    esi
c000d7c3:	51                   	push   ecx
c000d7c4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d7c8:	52                   	push   edx
c000d7c9:	55                   	push   ebp
c000d7ca:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d7cd:	83 c4 10             	add    esp,0x10
c000d7d0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d7d4:	eb da                	jmp    c000d7b0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000d7d6:	47                   	inc    edi
c000d7d7:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000d7db:	eb c5                	jmp    c000d7a2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000d7dd:	83 c4 1c             	add    esp,0x1c
c000d7e0:	5b                   	pop    ebx
c000d7e1:	5e                   	pop    esi
c000d7e2:	5f                   	pop    edi
c000d7e3:	5d                   	pop    ebp
c000d7e4:	c3                   	ret    
c000d7e5:	90                   	nop

c000d7e6 <Video::blit(unsigned int*, int, int, int, int)>:
c000d7e6:	55                   	push   ebp
c000d7e7:	57                   	push   edi
c000d7e8:	56                   	push   esi
c000d7e9:	53                   	push   ebx
c000d7ea:	83 ec 1c             	sub    esp,0x1c
c000d7ed:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d7f1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d7f5:	85 c0                	test   eax,eax
c000d7f7:	79 02                	jns    c000d7fb <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000d7f9:	31 c0                	xor    eax,eax
c000d7fb:	c1 e0 02             	shl    eax,0x2
c000d7fe:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000d802:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d806:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d80a:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000d80e:	39 d8                	cmp    eax,ebx
c000d810:	7e 49                	jle    c000d85b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d812:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d818:	7c 41                	jl     c000d85b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d81a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000d81e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d822:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d826:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000d82a:	39 f9                	cmp    ecx,edi
c000d82c:	7e 22                	jle    c000d850 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000d82e:	83 c5 04             	add    ebp,0x4
c000d831:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d837:	7c 14                	jl     c000d84d <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000d839:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d83b:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000d83e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d842:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d846:	56                   	push   esi
c000d847:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000d84a:	83 c4 10             	add    esp,0x10
c000d84d:	47                   	inc    edi
c000d84e:	eb d2                	jmp    c000d822 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000d850:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d854:	43                   	inc    ebx
c000d855:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000d859:	eb ab                	jmp    c000d806 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000d85b:	83 c4 1c             	add    esp,0x1c
c000d85e:	5b                   	pop    ebx
c000d85f:	5e                   	pop    esi
c000d860:	5f                   	pop    edi
c000d861:	5d                   	pop    ebp
c000d862:	c3                   	ret    
c000d863:	90                   	nop

c000d864 <Video::clearScreen(unsigned int)>:
c000d864:	57                   	push   edi
c000d865:	56                   	push   esi
c000d866:	53                   	push   ebx
c000d867:	31 db                	xor    ebx,ebx
c000d869:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d86d:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d873:	7e 1f                	jle    c000d894 <Video::clearScreen(unsigned int)+0x30>
c000d875:	31 ff                	xor    edi,edi
c000d877:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d87d:	7e 12                	jle    c000d891 <Video::clearScreen(unsigned int)+0x2d>
c000d87f:	8b 06                	mov    eax,DWORD PTR [esi]
c000d881:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d885:	53                   	push   ebx
c000d886:	57                   	push   edi
c000d887:	47                   	inc    edi
c000d888:	56                   	push   esi
c000d889:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d88c:	83 c4 10             	add    esp,0x10
c000d88f:	eb e6                	jmp    c000d877 <Video::clearScreen(unsigned int)+0x13>
c000d891:	43                   	inc    ebx
c000d892:	eb d9                	jmp    c000d86d <Video::clearScreen(unsigned int)+0x9>
c000d894:	5b                   	pop    ebx
c000d895:	5e                   	pop    esi
c000d896:	5f                   	pop    edi
c000d897:	c3                   	ret    

c000d898 <Video::putpixel(int, int, unsigned int)>:
c000d898:	c7 44 24 04 34 e3 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e334
c000d8a0:	e9 be 28 00 00       	jmp    c0010163 <KePanic(char const*)>
c000d8a5:	90                   	nop

c000d8a6 <Video::Video(char const*)>:
c000d8a6:	83 ec 0c             	sub    esp,0xc
c000d8a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8ad:	83 ec 08             	sub    esp,0x8
c000d8b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8b4:	50                   	push   eax
c000d8b5:	e8 16 e2 ff ff       	call   c000bad0 <Device::Device(char const*)>
c000d8ba:	83 c4 10             	add    esp,0x10
c000d8bd:	ba a4 e3 01 c0       	mov    edx,0xc001e3a4
c000d8c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8c6:	89 10                	mov    DWORD PTR [eax],edx
c000d8c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8cc:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000d8d6:	90                   	nop
c000d8d7:	83 c4 0c             	add    esp,0xc
c000d8da:	c3                   	ret    
c000d8db:	90                   	nop

c000d8dc <Video::~Video()>:
c000d8dc:	83 ec 0c             	sub    esp,0xc
c000d8df:	ba a4 e3 01 c0       	mov    edx,0xc001e3a4
c000d8e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8e8:	89 10                	mov    DWORD PTR [eax],edx
c000d8ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8ee:	83 ec 0c             	sub    esp,0xc
c000d8f1:	50                   	push   eax
c000d8f2:	e8 43 df ff ff       	call   c000b83a <Device::~Device()>
c000d8f7:	83 c4 10             	add    esp,0x10
c000d8fa:	90                   	nop
c000d8fb:	83 c4 0c             	add    esp,0xc
c000d8fe:	c3                   	ret    
c000d8ff:	90                   	nop

c000d900 <Video::~Video()>:
c000d900:	83 ec 0c             	sub    esp,0xc
c000d903:	83 ec 0c             	sub    esp,0xc
c000d906:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d90a:	e8 cd ff ff ff       	call   c000d8dc <Video::~Video()>
c000d90f:	83 c4 10             	add    esp,0x10
c000d912:	83 ec 08             	sub    esp,0x8
c000d915:	68 64 01 00 00       	push   0x164
c000d91a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d91e:	e8 df ca ff ff       	call   c000a402 <operator delete(void*, unsigned long)>
c000d923:	83 c4 10             	add    esp,0x10
c000d926:	83 c4 0c             	add    esp,0xc
c000d929:	c3                   	ret    

c000d92a <Video::isMonochrome()>:
c000d92a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d92e:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000d934:	c3                   	ret    
c000d935:	90                   	nop

c000d936 <Video::getWidth()>:
c000d936:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d93a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d940:	c3                   	ret    
c000d941:	90                   	nop

c000d942 <Video::getHeight()>:
c000d942:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d946:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d94c:	c3                   	ret    
c000d94d:	90                   	nop

c000d94e <Video::drawCursor(int, int, unsigned char*, int)>:
c000d94e:	55                   	push   ebp
c000d94f:	57                   	push   edi
c000d950:	56                   	push   esi
c000d951:	53                   	push   ebx
c000d952:	83 ec 2c             	sub    esp,0x2c
c000d955:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d959:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d95d:	83 f8 01             	cmp    eax,0x1
c000d960:	19 c9                	sbb    ecx,ecx
c000d962:	31 db                	xor    ebx,ebx
c000d964:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000d968:	89 cd                	mov    ebp,ecx
c000d96a:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000d972:	f7 d5                	not    ebp
c000d974:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000d97a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000d97e:	01 d8                	add    eax,ebx
c000d980:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d984:	56                   	push   esi
c000d985:	e8 b8 ff ff ff       	call   c000d942 <Video::getHeight()>
c000d98a:	59                   	pop    ecx
c000d98b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d98f:	7e 70                	jle    c000da01 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000d991:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000d995:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000d999:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000d99c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d9a0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000d9a4:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000d9ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9af:	89 f8                	mov    eax,edi
c000d9b1:	83 c0 20             	add    eax,0x20
c000d9b4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d9b8:	56                   	push   esi
c000d9b9:	e8 78 ff ff ff       	call   c000d936 <Video::getWidth()>
c000d9be:	5a                   	pop    edx
c000d9bf:	39 c7                	cmp    edi,eax
c000d9c1:	7d 34                	jge    c000d9f7 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000d9c3:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000d9c8:	74 05                	je     c000d9cf <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000d9ca:	8b 06                	mov    eax,DWORD PTR [esi]
c000d9cc:	55                   	push   ebp
c000d9cd:	eb 0d                	jmp    c000d9dc <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000d9cf:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000d9d4:	74 12                	je     c000d9e8 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000d9d6:	8b 06                	mov    eax,DWORD PTR [esi]
c000d9d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d9dc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d9e0:	57                   	push   edi
c000d9e1:	56                   	push   esi
c000d9e2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d9e5:	83 c4 10             	add    esp,0x10
c000d9e8:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000d9ec:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000d9f0:	47                   	inc    edi
c000d9f1:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000d9f5:	75 c1                	jne    c000d9b8 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000d9f7:	43                   	inc    ebx
c000d9f8:	83 fb 20             	cmp    ebx,0x20
c000d9fb:	0f 85 79 ff ff ff    	jne    c000d97a <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000da01:	83 c4 2c             	add    esp,0x2c
c000da04:	5b                   	pop    ebx
c000da05:	5e                   	pop    esi
c000da06:	5f                   	pop    edi
c000da07:	5d                   	pop    ebp
c000da08:	c3                   	ret    
c000da09:	90                   	nop

c000da0a <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000da0a:	55                   	push   ebp
c000da0b:	57                   	push   edi
c000da0c:	56                   	push   esi
c000da0d:	53                   	push   ebx
c000da0e:	83 ec 28             	sub    esp,0x28
c000da11:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000da15:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000da19:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000da1d:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000da21:	c1 e6 08             	shl    esi,0x8
c000da24:	01 c6                	add    esi,eax
c000da26:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000da2a:	c1 e0 08             	shl    eax,0x8
c000da2d:	01 d0                	add    eax,edx
c000da2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000da33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000da37:	0f af c6             	imul   eax,esi
c000da3a:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000da41:	50                   	push   eax
c000da42:	e8 72 9d ff ff       	call   c00077b9 <malloc>
c000da47:	83 c4 10             	add    esp,0x10
c000da4a:	89 c7                	mov    edi,eax
c000da4c:	85 c0                	test   eax,eax
c000da4e:	75 10                	jne    c000da60 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000da50:	83 ec 0c             	sub    esp,0xc
c000da53:	68 55 e3 01 c0       	push   0xc001e355
c000da58:	e8 06 27 00 00       	call   c0010163 <KePanic(char const*)>
c000da5d:	83 c4 10             	add    esp,0x10
c000da60:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000da63:	ba 12 00 00 00       	mov    edx,0x12
c000da68:	84 c0                	test   al,al
c000da6a:	74 11                	je     c000da7d <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000da6c:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000da70:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000da74:	c1 fa 03             	sar    edx,0x3
c000da77:	0f af d1             	imul   edx,ecx
c000da7a:	83 c2 12             	add    edx,0x12
c000da7d:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000da81:	74 04                	je     c000da87 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000da83:	85 f6                	test   esi,esi
c000da85:	75 12                	jne    c000da99 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000da87:	83 ec 0c             	sub    esp,0xc
c000da8a:	68 65 e3 01 c0       	push   0xc001e365
c000da8f:	e8 64 ca ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c000da94:	e9 b8 00 00 00       	jmp    c000db51 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000da99:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000da9d:	80 f9 02             	cmp    cl,0x2
c000daa0:	0f 85 96 00 00 00    	jne    c000db3c <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000daa6:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000daab:	75 0e                	jne    c000dabb <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000daad:	84 c0                	test   al,al
c000daaf:	75 0a                	jne    c000dabb <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000dab1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000dab4:	83 e8 18             	sub    eax,0x18
c000dab7:	a8 f7                	test   al,0xf7
c000dab9:	74 0a                	je     c000dac5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000dabb:	83 ec 0c             	sub    esp,0xc
c000dabe:	68 7a e3 01 c0       	push   0xc001e37a
c000dac3:	eb 7f                	jmp    c000db44 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000dac5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dacd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000dad5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000dad9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dae1:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000dae5:	75 0c                	jne    c000daf3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000dae7:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000daec:	c1 e0 18             	shl    eax,0x18
c000daef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000daf3:	45                   	inc    ebp
c000daf4:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000daf9:	c1 e1 10             	shl    ecx,0x10
c000dafc:	89 c8                	mov    eax,ecx
c000dafe:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000db03:	c1 e1 08             	shl    ecx,0x8
c000db06:	09 c1                	or     ecx,eax
c000db08:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000db0c:	09 c1                	or     ecx,eax
c000db0e:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000db12:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000db16:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000db1a:	c1 f8 03             	sar    eax,0x3
c000db1d:	01 c2                	add    edx,eax
c000db1f:	89 e8                	mov    eax,ebp
c000db21:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000db25:	39 c6                	cmp    esi,eax
c000db27:	7f b0                	jg     c000dad9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000db29:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000db2d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000db31:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000db34:	7e 22                	jle    c000db58 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000db36:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000db3a:	eb 99                	jmp    c000dad5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000db3c:	50                   	push   eax
c000db3d:	50                   	push   eax
c000db3e:	51                   	push   ecx
c000db3f:	68 88 e3 01 c0       	push   0xc001e388
c000db44:	e8 af c9 ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c000db49:	89 3c 24             	mov    DWORD PTR [esp],edi
c000db4c:	e8 98 9c ff ff       	call   c00077e9 <free>
c000db51:	83 c4 10             	add    esp,0x10
c000db54:	31 ff                	xor    edi,edi
c000db56:	eb 0f                	jmp    c000db67 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000db58:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000db5c:	89 30                	mov    DWORD PTR [eax],esi
c000db5e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000db62:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000db65:	89 30                	mov    DWORD PTR [eax],esi
c000db67:	83 c4 1c             	add    esp,0x1c
c000db6a:	89 f8                	mov    eax,edi
c000db6c:	5b                   	pop    ebx
c000db6d:	5e                   	pop    esi
c000db6e:	5f                   	pop    edi
c000db6f:	5d                   	pop    ebp
c000db70:	c3                   	ret    
c000db71:	90                   	nop

c000db72 <Video::putTGA(int, int, unsigned char*, int)>:
c000db72:	55                   	push   ebp
c000db73:	57                   	push   edi
c000db74:	56                   	push   esi
c000db75:	53                   	push   ebx
c000db76:	83 ec 28             	sub    esp,0x28
c000db79:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000db7d:	8d 44 24 18          	lea    eax,[esp+0x18]
c000db81:	50                   	push   eax
c000db82:	8d 44 24 18          	lea    eax,[esp+0x18]
c000db86:	50                   	push   eax
c000db87:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000db8b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000db8f:	56                   	push   esi
c000db90:	e8 75 fe ff ff       	call   c000da0a <Video::tgaParse(unsigned char*, int, int*, int*)>
c000db95:	83 c4 20             	add    esp,0x20
c000db98:	85 c0                	test   eax,eax
c000db9a:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000db9e:	74 35                	je     c000dbd5 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000dba0:	89 c7                	mov    edi,eax
c000dba2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dba6:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000dbaa:	39 d8                	cmp    eax,ebx
c000dbac:	7e 27                	jle    c000dbd5 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000dbae:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000dbb2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dbb6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000dbba:	39 e8                	cmp    eax,ebp
c000dbbc:	7e 14                	jle    c000dbd2 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000dbbe:	8b 06                	mov    eax,DWORD PTR [esi]
c000dbc0:	83 c7 04             	add    edi,0x4
c000dbc3:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000dbc6:	53                   	push   ebx
c000dbc7:	55                   	push   ebp
c000dbc8:	45                   	inc    ebp
c000dbc9:	56                   	push   esi
c000dbca:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dbcd:	83 c4 10             	add    esp,0x10
c000dbd0:	eb e0                	jmp    c000dbb2 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000dbd2:	43                   	inc    ebx
c000dbd3:	eb cd                	jmp    c000dba2 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000dbd5:	83 c4 1c             	add    esp,0x1c
c000dbd8:	5b                   	pop    ebx
c000dbd9:	5e                   	pop    esi
c000dbda:	5f                   	pop    edi
c000dbdb:	5d                   	pop    ebp
c000dbdc:	c3                   	ret    
c000dbdd:	66 90                	xchg   ax,ax
c000dbdf:	90                   	nop

c000dbe0 <ACPI::close(int, int, void*)>:
c000dbe0:	83 ec 1c             	sub    esp,0x1c
c000dbe3:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000dbeb:	74 0b                	je     c000dbf8 <ACPI::close(int, int, void*)+0x18>
c000dbed:	b8 00 00 00 00       	mov    eax,0x0
c000dbf2:	e9 9d 00 00 00       	jmp    c000dc94 <ACPI::close(int, int, void*)+0xb4>
c000dbf7:	90                   	nop
c000dbf8:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000dbfd:	75 29                	jne    c000dc28 <ACPI::close(int, int, void*)+0x48>
c000dbff:	a1 48 33 02 c0       	mov    eax,ds:0xc0023348
c000dc04:	85 c0                	test   eax,eax
c000dc06:	74 08                	je     c000dc10 <ACPI::close(int, int, void*)+0x30>
c000dc08:	a1 48 33 02 c0       	mov    eax,ds:0xc0023348
c000dc0d:	ff d0                	call   eax
c000dc0f:	90                   	nop
c000dc10:	83 ec 0c             	sub    esp,0xc
c000dc13:	68 e4 e3 01 c0       	push   0xc001e3e4
c000dc18:	e8 46 25 00 00       	call   c0010163 <KePanic(char const*)>
c000dc1d:	83 c4 10             	add    esp,0x10
c000dc20:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dc25:	eb 6d                	jmp    c000dc94 <ACPI::close(int, int, void*)+0xb4>
c000dc27:	90                   	nop
c000dc28:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000dc2d:	75 5d                	jne    c000dc8c <ACPI::close(int, int, void*)+0xac>
c000dc2f:	a1 44 33 02 c0       	mov    eax,ds:0xc0023344
c000dc34:	85 c0                	test   eax,eax
c000dc36:	74 08                	je     c000dc40 <ACPI::close(int, int, void*)+0x60>
c000dc38:	a1 44 33 02 c0       	mov    eax,ds:0xc0023344
c000dc3d:	ff d0                	call   eax
c000dc3f:	90                   	nop
c000dc40:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000dc45:	8d 76 00             	lea    esi,[esi+0x0]
c000dc48:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000dc4c:	25 ff 00 00 00       	and    eax,0xff
c000dc51:	83 e0 02             	and    eax,0x2
c000dc54:	74 1e                	je     c000dc74 <ACPI::close(int, int, void*)+0x94>
c000dc56:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000dc5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dc61:	89 c2                	mov    edx,eax
c000dc63:	ec                   	in     al,dx
c000dc64:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000dc68:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000dc6c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000dc70:	eb d6                	jmp    c000dc48 <ACPI::close(int, int, void*)+0x68>
c000dc72:	66 90                	xchg   ax,ax
c000dc74:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000dc7b:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000dc80:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000dc84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dc88:	ee                   	out    dx,al
c000dc89:	8d 76 00             	lea    esi,[esi+0x0]
c000dc8c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dc91:	8d 76 00             	lea    esi,[esi+0x0]
c000dc94:	83 c4 1c             	add    esp,0x1c
c000dc97:	c3                   	ret    

c000dc98 <findRSDP()>:
c000dc98:	83 ec 1c             	sub    esp,0x1c
c000dc9b:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c000dca0:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dca6:	83 e0 04             	and    eax,0x4
c000dca9:	84 c0                	test   al,al
c000dcab:	75 07                	jne    c000dcb4 <findRSDP()+0x1c>
c000dcad:	b8 00 00 00 00       	mov    eax,0x0
c000dcb2:	eb 70                	jmp    c000dd24 <findRSDP()+0x8c>
c000dcb4:	a1 88 0d 02 c0       	mov    eax,ds:0xc0020d88
c000dcb9:	3d ff 07 00 00       	cmp    eax,0x7ff
c000dcbe:	7f 1c                	jg     c000dcdc <findRSDP()+0x44>
c000dcc0:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c000dcc5:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000dccb:	83 e2 fb             	and    edx,0xfffffffb
c000dcce:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000dcd4:	b8 00 00 00 00       	mov    eax,0x0
c000dcd9:	eb 49                	jmp    c000dd24 <findRSDP()+0x8c>
c000dcdb:	90                   	nop
c000dcdc:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000dce4:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000dcec:	77 2e                	ja     c000dd1c <findRSDP()+0x84>
c000dcee:	83 ec 04             	sub    esp,0x4
c000dcf1:	6a 08                	push   0x8
c000dcf3:	68 7f e4 01 c0       	push   0xc001e47f
c000dcf8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dcfc:	e8 8f 26 ff ff       	call   c0000390 <memcmp>
c000dd01:	83 c4 10             	add    esp,0x10
c000dd04:	85 c0                	test   eax,eax
c000dd06:	0f 94 c0             	sete   al
c000dd09:	84 c0                	test   al,al
c000dd0b:	74 07                	je     c000dd14 <findRSDP()+0x7c>
c000dd0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dd11:	eb 11                	jmp    c000dd24 <findRSDP()+0x8c>
c000dd13:	90                   	nop
c000dd14:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000dd19:	eb c9                	jmp    c000dce4 <findRSDP()+0x4c>
c000dd1b:	90                   	nop
c000dd1c:	b8 00 00 00 00       	mov    eax,0x0
c000dd21:	8d 76 00             	lea    esi,[esi+0x0]
c000dd24:	83 c4 1c             	add    esp,0x1c
c000dd27:	c3                   	ret    

c000dd28 <loadACPITables(unsigned char*)>:
c000dd28:	57                   	push   edi
c000dd29:	56                   	push   esi
c000dd2a:	53                   	push   ebx
c000dd2b:	83 ec 60             	sub    esp,0x60
c000dd2e:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c000dd33:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dd39:	83 e0 04             	and    eax,0x4
c000dd3c:	84 c0                	test   al,al
c000dd3e:	0f 84 3c 02 00 00    	je     c000df80 <loadACPITables(unsigned char*)+0x258>
c000dd44:	a0 60 35 02 c0       	mov    al,ds:0xc0023560
c000dd49:	84 c0                	test   al,al
c000dd4b:	74 77                	je     c000ddc4 <loadACPITables(unsigned char*)+0x9c>
c000dd4d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dd51:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000dd55:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dd59:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dd5c:	83 e8 24             	sub    eax,0x24
c000dd5f:	c1 e8 03             	shr    eax,0x3
c000dd62:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000dd66:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000dd6e:	66 90                	xchg   ax,ax
c000dd70:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000dd74:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000dd78:	0f 8d b6 00 00 00    	jge    c000de34 <loadACPITables(unsigned char*)+0x10c>
c000dd7e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dd82:	83 c0 24             	add    eax,0x24
c000dd85:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dd89:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000dd8d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000dd91:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000dd95:	c1 e0 03             	shl    eax,0x3
c000dd98:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000dd9c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000dda0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000dda3:	8b 00                	mov    eax,DWORD PTR [eax]
c000dda5:	89 c1                	mov    ecx,eax
c000dda7:	a1 4c 33 02 c0       	mov    eax,ds:0xc002334c
c000ddac:	8d 50 01             	lea    edx,[eax+0x1]
c000ddaf:	89 15 4c 33 02 c0    	mov    DWORD PTR ds:0xc002334c,edx
c000ddb5:	89 ca                	mov    edx,ecx
c000ddb7:	89 14 c5 64 33 02 c0 	mov    DWORD PTR [eax*8-0x3ffdcc9c],edx
c000ddbe:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000ddc2:	eb ac                	jmp    c000dd70 <loadACPITables(unsigned char*)+0x48>
c000ddc4:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ddc8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ddcc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ddd0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ddd3:	83 e8 24             	sub    eax,0x24
c000ddd6:	c1 e8 02             	shr    eax,0x2
c000ddd9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000dddd:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000dde5:	8d 76 00             	lea    esi,[esi+0x0]
c000dde8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ddec:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000ddf0:	7d 42                	jge    c000de34 <loadACPITables(unsigned char*)+0x10c>
c000ddf2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ddf6:	83 c0 24             	add    eax,0x24
c000ddf9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ddfd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000de01:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000de05:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000de09:	c1 e0 02             	shl    eax,0x2
c000de0c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000de10:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000de14:	8b 08                	mov    ecx,DWORD PTR [eax]
c000de16:	a1 4c 33 02 c0       	mov    eax,ds:0xc002334c
c000de1b:	8d 50 01             	lea    edx,[eax+0x1]
c000de1e:	89 15 4c 33 02 c0    	mov    DWORD PTR ds:0xc002334c,edx
c000de24:	89 ca                	mov    edx,ecx
c000de26:	89 14 c5 64 33 02 c0 	mov    DWORD PTR [eax*8-0x3ffdcc9c],edx
c000de2d:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000de31:	eb b5                	jmp    c000dde8 <loadACPITables(unsigned char*)+0xc0>
c000de33:	90                   	nop
c000de34:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000de3c:	a1 4c 33 02 c0       	mov    eax,ds:0xc002334c
c000de41:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000de45:	0f 8d 39 01 00 00    	jge    c000df84 <loadACPITables(unsigned char*)+0x25c>
c000de4b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000de4f:	8b 04 c5 64 33 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdcc9c]
c000de56:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000de5a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de5e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000de62:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de66:	25 ff 0f 00 00       	and    eax,0xfff
c000de6b:	89 c6                	mov    esi,eax
c000de6d:	8b 1d 50 0e 02 c0    	mov    ebx,DWORD PTR ds:0xc0020e50
c000de73:	83 ec 0c             	sub    esp,0xc
c000de76:	6a 01                	push   0x1
c000de78:	e8 28 b4 ff ff       	call   c00092a5 <Virt::allocateKernelVirtualPages(int)>
c000de7d:	83 c4 10             	add    esp,0x10
c000de80:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000de84:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000de8a:	83 ec 0c             	sub    esp,0xc
c000de8d:	6a 01                	push   0x1
c000de8f:	6a 01                	push   0x1
c000de91:	50                   	push   eax
c000de92:	52                   	push   edx
c000de93:	53                   	push   ebx
c000de94:	e8 9b bd ff ff       	call   c0009c34 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000de99:	83 c4 20             	add    esp,0x20
c000de9c:	09 f0                	or     eax,esi
c000de9e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dea2:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000dea6:	c1 e0 03             	shl    eax,0x3
c000dea9:	05 60 33 02 c0       	add    eax,0xc0023360
c000deae:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000deb2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000deb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000deba:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000dec2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dec6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000deca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dece:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ded2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ded6:	89 c6                	mov    esi,eax
c000ded8:	89 d7                	mov    edi,edx
c000deda:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dedc:	89 c8                	mov    eax,ecx
c000dede:	89 fa                	mov    edx,edi
c000dee0:	89 f3                	mov    ebx,esi
c000dee2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000dee6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000deea:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000deee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000def2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000def5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000def9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000defd:	05 00 10 00 00       	add    eax,0x1000
c000df02:	c1 e8 0c             	shr    eax,0xc
c000df05:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000df09:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df0d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df11:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df15:	25 ff 0f 00 00       	and    eax,0xfff
c000df1a:	89 c6                	mov    esi,eax
c000df1c:	8b 1d 50 0e 02 c0    	mov    ebx,DWORD PTR ds:0xc0020e50
c000df22:	83 ec 0c             	sub    esp,0xc
c000df25:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000df29:	e8 77 b3 ff ff       	call   c00092a5 <Virt::allocateKernelVirtualPages(int)>
c000df2e:	83 c4 10             	add    esp,0x10
c000df31:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000df35:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000df3b:	83 ec 0c             	sub    esp,0xc
c000df3e:	6a 01                	push   0x1
c000df40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000df44:	50                   	push   eax
c000df45:	52                   	push   edx
c000df46:	53                   	push   ebx
c000df47:	e8 e8 bc ff ff       	call   c0009c34 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000df4c:	83 c4 20             	add    esp,0x20
c000df4f:	09 f0                	or     eax,esi
c000df51:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000df55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df59:	83 ec 0c             	sub    esp,0xc
c000df5c:	50                   	push   eax
c000df5d:	e8 73 b6 ff ff       	call   c00095d5 <Virt::freeKernelVirtualPages(unsigned long)>
c000df62:	83 c4 10             	add    esp,0x10
c000df65:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000df69:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000df6d:	89 14 c5 64 33 02 c0 	mov    DWORD PTR [eax*8-0x3ffdcc9c],edx
c000df74:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000df78:	e9 bf fe ff ff       	jmp    c000de3c <loadACPITables(unsigned char*)+0x114>
c000df7d:	8d 76 00             	lea    esi,[esi+0x0]
c000df80:	90                   	nop
c000df81:	8d 76 00             	lea    esi,[esi+0x0]
c000df84:	83 c4 60             	add    esp,0x60
c000df87:	5b                   	pop    ebx
c000df88:	5e                   	pop    esi
c000df89:	5f                   	pop    edi
c000df8a:	c3                   	ret    
c000df8b:	90                   	nop

c000df8c <findRSDT(unsigned char*)>:
c000df8c:	57                   	push   edi
c000df8d:	56                   	push   esi
c000df8e:	53                   	push   ebx
c000df8f:	83 ec 50             	sub    esp,0x50
c000df92:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c000df97:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000df9d:	83 e0 04             	and    eax,0x4
c000dfa0:	84 c0                	test   al,al
c000dfa2:	75 0c                	jne    c000dfb0 <findRSDT(unsigned char*)+0x24>
c000dfa4:	b8 00 00 00 00       	mov    eax,0x0
c000dfa9:	e9 26 01 00 00       	jmp    c000e0d4 <findRSDT(unsigned char*)+0x148>
c000dfae:	66 90                	xchg   ax,ax
c000dfb0:	89 e0                	mov    eax,esp
c000dfb2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000dfb6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000dfba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dfbe:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000dfc6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000dfca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dfce:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dfd2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000dfd6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000dfda:	89 c6                	mov    esi,eax
c000dfdc:	89 d7                	mov    edi,edx
c000dfde:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dfe0:	89 c8                	mov    eax,ecx
c000dfe2:	89 fa                	mov    edx,edi
c000dfe4:	89 f3                	mov    ebx,esi
c000dfe6:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000dfea:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000dfee:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000dff2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000dff6:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000dffa:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e002:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e006:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e00a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e00e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e012:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e016:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e01a:	25 ff 0f 00 00       	and    eax,0xfff
c000e01f:	89 c6                	mov    esi,eax
c000e021:	8b 1d 50 0e 02 c0    	mov    ebx,DWORD PTR ds:0xc0020e50
c000e027:	83 ec 0c             	sub    esp,0xc
c000e02a:	6a 02                	push   0x2
c000e02c:	e8 74 b2 ff ff       	call   c00092a5 <Virt::allocateKernelVirtualPages(int)>
c000e031:	83 c4 10             	add    esp,0x10
c000e034:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e038:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e03e:	83 ec 0c             	sub    esp,0xc
c000e041:	6a 01                	push   0x1
c000e043:	6a 02                	push   0x2
c000e045:	50                   	push   eax
c000e046:	52                   	push   edx
c000e047:	53                   	push   ebx
c000e048:	e8 e7 bb ff ff       	call   c0009c34 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e04d:	83 c4 20             	add    esp,0x20
c000e050:	09 f0                	or     eax,esi
c000e052:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e056:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e05a:	25 ff 0f 00 00       	and    eax,0xfff
c000e05f:	89 c6                	mov    esi,eax
c000e061:	8b 1d 50 0e 02 c0    	mov    ebx,DWORD PTR ds:0xc0020e50
c000e067:	83 ec 0c             	sub    esp,0xc
c000e06a:	6a 02                	push   0x2
c000e06c:	e8 34 b2 ff ff       	call   c00092a5 <Virt::allocateKernelVirtualPages(int)>
c000e071:	83 c4 10             	add    esp,0x10
c000e074:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e078:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e07e:	83 ec 0c             	sub    esp,0xc
c000e081:	6a 01                	push   0x1
c000e083:	6a 02                	push   0x2
c000e085:	50                   	push   eax
c000e086:	52                   	push   edx
c000e087:	53                   	push   ebx
c000e088:	e8 a7 bb ff ff       	call   c0009c34 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e08d:	83 c4 20             	add    esp,0x20
c000e090:	09 f0                	or     eax,esi
c000e092:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e096:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e09b:	75 13                	jne    c000e0b0 <findRSDT(unsigned char*)+0x124>
c000e09d:	c6 05 60 35 02 c0 00 	mov    BYTE PTR ds:0xc0023560,0x0
c000e0a4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e0a8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e0ac:	eb 22                	jmp    c000e0d0 <findRSDT(unsigned char*)+0x144>
c000e0ae:	66 90                	xchg   ax,ax
c000e0b0:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e0b5:	75 11                	jne    c000e0c8 <findRSDT(unsigned char*)+0x13c>
c000e0b7:	c6 05 60 35 02 c0 01 	mov    BYTE PTR ds:0xc0023560,0x1
c000e0be:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e0c2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e0c6:	eb 08                	jmp    c000e0d0 <findRSDT(unsigned char*)+0x144>
c000e0c8:	b8 00 00 00 00       	mov    eax,0x0
c000e0cd:	eb 05                	jmp    c000e0d4 <findRSDT(unsigned char*)+0x148>
c000e0cf:	90                   	nop
c000e0d0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e0d4:	83 c4 50             	add    esp,0x50
c000e0d7:	5b                   	pop    ebx
c000e0d8:	5e                   	pop    esi
c000e0d9:	5f                   	pop    edi
c000e0da:	c3                   	ret    
c000e0db:	90                   	nop

c000e0dc <findDataTable(unsigned char*, char*)>:
c000e0dc:	83 ec 1c             	sub    esp,0x1c
c000e0df:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c000e0e4:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e0ea:	83 e0 04             	and    eax,0x4
c000e0ed:	84 c0                	test   al,al
c000e0ef:	75 07                	jne    c000e0f8 <findDataTable(unsigned char*, char*)+0x1c>
c000e0f1:	b8 00 00 00 00       	mov    eax,0x0
c000e0f6:	eb 58                	jmp    c000e150 <findDataTable(unsigned char*, char*)+0x74>
c000e0f8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e100:	a1 4c 33 02 c0       	mov    eax,ds:0xc002334c
c000e105:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e109:	7d 3d                	jge    c000e148 <findDataTable(unsigned char*, char*)+0x6c>
c000e10b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e10f:	c1 e0 03             	shl    eax,0x3
c000e112:	05 60 33 02 c0       	add    eax,0xc0023360
c000e117:	83 ec 04             	sub    esp,0x4
c000e11a:	6a 04                	push   0x4
c000e11c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e120:	50                   	push   eax
c000e121:	e8 6a 22 ff ff       	call   c0000390 <memcmp>
c000e126:	83 c4 10             	add    esp,0x10
c000e129:	85 c0                	test   eax,eax
c000e12b:	0f 94 c0             	sete   al
c000e12e:	84 c0                	test   al,al
c000e130:	74 0e                	je     c000e140 <findDataTable(unsigned char*, char*)+0x64>
c000e132:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e136:	8b 04 c5 64 33 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdcc9c]
c000e13d:	eb 11                	jmp    c000e150 <findDataTable(unsigned char*, char*)+0x74>
c000e13f:	90                   	nop
c000e140:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e144:	eb ba                	jmp    c000e100 <findDataTable(unsigned char*, char*)+0x24>
c000e146:	66 90                	xchg   ax,ax
c000e148:	b8 00 00 00 00       	mov    eax,0x0
c000e14d:	8d 76 00             	lea    esi,[esi+0x0]
c000e150:	83 c4 1c             	add    esp,0x1c
c000e153:	c3                   	ret    

c000e154 <scanMADT()>:
c000e154:	53                   	push   ebx
c000e155:	83 ec 38             	sub    esp,0x38
c000e158:	a1 70 0d 02 c0       	mov    eax,ds:0xc0020d70
c000e15d:	25 00 04 00 00       	and    eax,0x400
c000e162:	74 14                	je     c000e178 <scanMADT()+0x24>
c000e164:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c000e169:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e16f:	83 e2 fb             	and    edx,0xfffffffb
c000e172:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e178:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c000e17d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e183:	83 e0 04             	and    eax,0x4
c000e186:	84 c0                	test   al,al
c000e188:	0f 84 8a 04 00 00    	je     c000e618 <scanMADT()+0x4c4>
c000e18e:	e8 05 fb ff ff       	call   c000dc98 <findRSDP()>
c000e193:	a3 6c 35 02 c0       	mov    ds:0xc002356c,eax
c000e198:	a1 6c 35 02 c0       	mov    eax,ds:0xc002356c
c000e19d:	85 c0                	test   eax,eax
c000e19f:	75 1b                	jne    c000e1bc <scanMADT()+0x68>
c000e1a1:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c000e1a6:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e1ac:	83 e2 fb             	and    edx,0xfffffffb
c000e1af:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e1b5:	e9 66 04 00 00       	jmp    c000e620 <scanMADT()+0x4cc>
c000e1ba:	66 90                	xchg   ax,ax
c000e1bc:	a1 6c 35 02 c0       	mov    eax,ds:0xc002356c
c000e1c1:	83 ec 0c             	sub    esp,0xc
c000e1c4:	50                   	push   eax
c000e1c5:	e8 c2 fd ff ff       	call   c000df8c <findRSDT(unsigned char*)>
c000e1ca:	83 c4 10             	add    esp,0x10
c000e1cd:	a3 68 35 02 c0       	mov    ds:0xc0023568,eax
c000e1d2:	a1 68 35 02 c0       	mov    eax,ds:0xc0023568
c000e1d7:	85 c0                	test   eax,eax
c000e1d9:	75 19                	jne    c000e1f4 <scanMADT()+0xa0>
c000e1db:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c000e1e0:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e1e6:	83 e2 fb             	and    edx,0xfffffffb
c000e1e9:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e1ef:	e9 2c 04 00 00       	jmp    c000e620 <scanMADT()+0x4cc>
c000e1f4:	a1 68 35 02 c0       	mov    eax,ds:0xc0023568
c000e1f9:	83 ec 0c             	sub    esp,0xc
c000e1fc:	50                   	push   eax
c000e1fd:	e8 26 fb ff ff       	call   c000dd28 <loadACPITables(unsigned char*)>
c000e202:	83 c4 10             	add    esp,0x10
c000e205:	a1 68 35 02 c0       	mov    eax,ds:0xc0023568
c000e20a:	83 ec 08             	sub    esp,0x8
c000e20d:	68 88 e4 01 c0       	push   0xc001e488
c000e212:	50                   	push   eax
c000e213:	e8 c4 fe ff ff       	call   c000e0dc <findDataTable(unsigned char*, char*)>
c000e218:	83 c4 10             	add    esp,0x10
c000e21b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e21f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e224:	75 1a                	jne    c000e240 <scanMADT()+0xec>
c000e226:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c000e22b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e231:	83 e2 fe             	and    edx,0xfffffffe
c000e234:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e23a:	e9 e1 03 00 00       	jmp    c000e620 <scanMADT()+0x4cc>
c000e23f:	90                   	nop
c000e240:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e248:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e24c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e24f:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e253:	0f 87 c7 03 00 00    	ja     c000e620 <scanMADT()+0x4cc>
c000e259:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e261:	0f 87 b9 03 00 00    	ja     c000e620 <scanMADT()+0x4cc>
c000e267:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e26b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e26f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e273:	8d 50 01             	lea    edx,[eax+0x1]
c000e276:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e27a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e27e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e282:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e286:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e28a:	8d 50 01             	lea    edx,[eax+0x1]
c000e28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e291:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e295:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e299:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e29d:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e2a2:	0f 86 74 03 00 00    	jbe    c000e61c <scanMADT()+0x4c8>
c000e2a8:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e2ad:	75 5d                	jne    c000e30c <scanMADT()+0x1b8>
c000e2af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e2b3:	8d 50 01             	lea    edx,[eax+0x1]
c000e2b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e2ba:	8a 15 60 37 02 c0    	mov    dl,BYTE PTR ds:0xc0023760
c000e2c0:	81 e2 ff 00 00 00    	and    edx,0xff
c000e2c6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e2ca:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e2ce:	88 82 a0 37 02 c0    	mov    BYTE PTR [edx-0x3ffdc860],al
c000e2d4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e2d8:	8d 42 01             	lea    eax,[edx+0x1]
c000e2db:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e2df:	a0 60 37 02 c0       	mov    al,ds:0xc0023760
c000e2e4:	8d 48 01             	lea    ecx,[eax+0x1]
c000e2e7:	88 0d 60 37 02 c0    	mov    BYTE PTR ds:0xc0023760,cl
c000e2ed:	25 ff 00 00 00       	and    eax,0xff
c000e2f2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e2f6:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e2fa:	88 90 80 37 02 c0    	mov    BYTE PTR [eax-0x3ffdc880],dl
c000e300:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e305:	e9 f6 02 00 00       	jmp    c000e600 <scanMADT()+0x4ac>
c000e30a:	66 90                	xchg   ax,ax
c000e30c:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000e311:	0f 85 29 01 00 00    	jne    c000e440 <scanMADT()+0x2ec>
c000e317:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e31b:	8d 50 01             	lea    edx,[eax+0x1]
c000e31e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e322:	8a 15 20 36 02 c0    	mov    dl,BYTE PTR ds:0xc0023620
c000e328:	81 e2 ff 00 00 00    	and    edx,0xff
c000e32e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e332:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e336:	88 82 40 36 02 c0    	mov    BYTE PTR [edx-0x3ffdc9c0],al
c000e33c:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000e340:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e344:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e348:	01 d0                	add    eax,edx
c000e34a:	83 c0 2c             	add    eax,0x2c
c000e34d:	8a 00                	mov    al,BYTE PTR [eax]
c000e34f:	31 d2                	xor    edx,edx
c000e351:	88 c2                	mov    dl,al
c000e353:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e357:	8d 48 01             	lea    ecx,[eax+0x1]
c000e35a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e35e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e362:	25 ff 00 00 00       	and    eax,0xff
c000e367:	c1 e0 08             	shl    eax,0x8
c000e36a:	89 d1                	mov    ecx,edx
c000e36c:	09 c1                	or     ecx,eax
c000e36e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e372:	8d 50 02             	lea    edx,[eax+0x2]
c000e375:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e379:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e37d:	25 ff 00 00 00       	and    eax,0xff
c000e382:	c1 e0 10             	shl    eax,0x10
c000e385:	09 c1                	or     ecx,eax
c000e387:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e38b:	8d 50 03             	lea    edx,[eax+0x3]
c000e38e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e392:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e396:	25 ff 00 00 00       	and    eax,0xff
c000e39b:	c1 e0 18             	shl    eax,0x18
c000e39e:	09 c1                	or     ecx,eax
c000e3a0:	89 ca                	mov    edx,ecx
c000e3a2:	a0 20 36 02 c0       	mov    al,ds:0xc0023620
c000e3a7:	25 ff 00 00 00       	and    eax,0xff
c000e3ac:	89 14 85 60 36 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc9a0],edx
c000e3b3:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e3b8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e3bc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3c0:	01 d0                	add    eax,edx
c000e3c2:	83 c0 2c             	add    eax,0x2c
c000e3c5:	8a 00                	mov    al,BYTE PTR [eax]
c000e3c7:	31 d2                	xor    edx,edx
c000e3c9:	88 c2                	mov    dl,al
c000e3cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3cf:	8d 48 01             	lea    ecx,[eax+0x1]
c000e3d2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e3d6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e3da:	25 ff 00 00 00       	and    eax,0xff
c000e3df:	c1 e0 08             	shl    eax,0x8
c000e3e2:	89 d1                	mov    ecx,edx
c000e3e4:	09 c1                	or     ecx,eax
c000e3e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3ea:	8d 50 02             	lea    edx,[eax+0x2]
c000e3ed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e3f1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e3f5:	25 ff 00 00 00       	and    eax,0xff
c000e3fa:	c1 e0 10             	shl    eax,0x10
c000e3fd:	09 c1                	or     ecx,eax
c000e3ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e403:	8d 50 03             	lea    edx,[eax+0x3]
c000e406:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e40a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e40e:	25 ff 00 00 00       	and    eax,0xff
c000e413:	c1 e0 18             	shl    eax,0x18
c000e416:	09 c1                	or     ecx,eax
c000e418:	89 ca                	mov    edx,ecx
c000e41a:	a0 20 36 02 c0       	mov    al,ds:0xc0023620
c000e41f:	25 ff 00 00 00       	and    eax,0xff
c000e424:	89 14 85 e0 36 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc920],edx
c000e42b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e430:	a0 20 36 02 c0       	mov    al,ds:0xc0023620
c000e435:	40                   	inc    eax
c000e436:	a2 20 36 02 c0       	mov    ds:0xc0023620,al
c000e43b:	e9 c0 01 00 00       	jmp    c000e600 <scanMADT()+0x4ac>
c000e440:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000e445:	0f 85 fd 00 00 00    	jne    c000e548 <scanMADT()+0x3f4>
c000e44b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e44f:	8d 50 01             	lea    edx,[eax+0x1]
c000e452:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e456:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e45a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e45e:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000e462:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e466:	8d 50 01             	lea    edx,[eax+0x1]
c000e469:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e46d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e471:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e475:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000e479:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e47d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e481:	01 d0                	add    eax,edx
c000e483:	83 c0 2c             	add    eax,0x2c
c000e486:	8a 00                	mov    al,BYTE PTR [eax]
c000e488:	31 d2                	xor    edx,edx
c000e48a:	88 c2                	mov    dl,al
c000e48c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e490:	8d 48 01             	lea    ecx,[eax+0x1]
c000e493:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e497:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e49b:	25 ff 00 00 00       	and    eax,0xff
c000e4a0:	c1 e0 08             	shl    eax,0x8
c000e4a3:	89 d1                	mov    ecx,edx
c000e4a5:	09 c1                	or     ecx,eax
c000e4a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4ab:	8d 50 02             	lea    edx,[eax+0x2]
c000e4ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4b2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e4b6:	25 ff 00 00 00       	and    eax,0xff
c000e4bb:	c1 e0 10             	shl    eax,0x10
c000e4be:	09 c1                	or     ecx,eax
c000e4c0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4c4:	8d 50 03             	lea    edx,[eax+0x3]
c000e4c7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4cb:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e4cf:	25 ff 00 00 00       	and    eax,0xff
c000e4d4:	c1 e0 18             	shl    eax,0x18
c000e4d7:	09 c8                	or     eax,ecx
c000e4d9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e4dd:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e4e2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4ea:	01 d0                	add    eax,edx
c000e4ec:	83 c0 2c             	add    eax,0x2c
c000e4ef:	8a 00                	mov    al,BYTE PTR [eax]
c000e4f1:	25 ff 00 00 00       	and    eax,0xff
c000e4f6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e4fa:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e4fd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e501:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000e505:	81 e2 ff 00 00 00    	and    edx,0xff
c000e50b:	c1 e2 08             	shl    edx,0x8
c000e50e:	09 d0                	or     eax,edx
c000e510:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000e515:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e51a:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e51e:	25 ff 00 00 00       	and    eax,0xff
c000e523:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e527:	88 90 20 fa 01 c0    	mov    BYTE PTR [eax-0x3ffe05e0],dl
c000e52d:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e531:	31 d2                	xor    edx,edx
c000e533:	88 c2                	mov    dl,al
c000e535:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000e53a:	66 89 84 12 00 36 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffdca00],ax
c000e542:	e9 b9 00 00 00       	jmp    c000e600 <scanMADT()+0x4ac>
c000e547:	90                   	nop
c000e548:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000e54d:	0f 85 a1 00 00 00    	jne    c000e5f4 <scanMADT()+0x4a0>
c000e553:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e557:	8d 50 01             	lea    edx,[eax+0x1]
c000e55a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e55e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e562:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e566:	25 ff 00 00 00       	and    eax,0xff
c000e56b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e56f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e573:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e577:	01 d0                	add    eax,edx
c000e579:	83 c0 2c             	add    eax,0x2c
c000e57c:	8a 00                	mov    al,BYTE PTR [eax]
c000e57e:	31 d2                	xor    edx,edx
c000e580:	88 c2                	mov    dl,al
c000e582:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e586:	8d 48 01             	lea    ecx,[eax+0x1]
c000e589:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e58d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e591:	25 ff 00 00 00       	and    eax,0xff
c000e596:	c1 e0 08             	shl    eax,0x8
c000e599:	09 d0                	or     eax,edx
c000e59b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e59f:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e5a4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5a8:	8d 50 01             	lea    edx,[eax+0x1]
c000e5ab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e5af:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e5b3:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e5b7:	25 ff 00 00 00       	and    eax,0xff
c000e5bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e5c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5c4:	c1 e0 08             	shl    eax,0x8
c000e5c7:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e5cb:	89 c1                	mov    ecx,eax
c000e5cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5d1:	c1 e0 18             	shl    eax,0x18
c000e5d4:	89 c3                	mov    ebx,eax
c000e5d6:	a1 70 35 02 c0       	mov    eax,ds:0xc0023570
c000e5db:	8d 50 01             	lea    edx,[eax+0x1]
c000e5de:	89 15 70 35 02 c0    	mov    DWORD PTR ds:0xc0023570,edx
c000e5e4:	09 d9                	or     ecx,ebx
c000e5e6:	89 ca                	mov    edx,ecx
c000e5e8:	89 14 85 80 35 02 c0 	mov    DWORD PTR [eax*4-0x3ffdca80],edx
c000e5ef:	eb 0f                	jmp    c000e600 <scanMADT()+0x4ac>
c000e5f1:	8d 76 00             	lea    esi,[esi+0x0]
c000e5f4:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000e5f9:	75 05                	jne    c000e600 <scanMADT()+0x4ac>
c000e5fb:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000e600:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000e604:	31 d2                	xor    edx,edx
c000e606:	88 c2                	mov    dl,al
c000e608:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e60c:	01 d0                	add    eax,edx
c000e60e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e612:	e9 31 fc ff ff       	jmp    c000e248 <scanMADT()+0xf4>
c000e617:	90                   	nop
c000e618:	90                   	nop
c000e619:	eb 05                	jmp    c000e620 <scanMADT()+0x4cc>
c000e61b:	90                   	nop
c000e61c:	90                   	nop
c000e61d:	8d 76 00             	lea    esi,[esi+0x0]
c000e620:	83 c4 38             	add    esp,0x38
c000e623:	5b                   	pop    ebx
c000e624:	c3                   	ret    
c000e625:	90                   	nop
c000e626:	66 90                	xchg   ax,ax

c000e628 <ACPI::ACPI()>:
c000e628:	83 ec 0c             	sub    esp,0xc
c000e62b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e62f:	83 ec 08             	sub    esp,0x8
c000e632:	68 8d e4 01 c0       	push   0xc001e48d
c000e637:	50                   	push   eax
c000e638:	e8 93 d4 ff ff       	call   c000bad0 <Device::Device(char const*)>
c000e63d:	83 c4 10             	add    esp,0x10
c000e640:	ba c4 e5 01 c0       	mov    edx,0xc001e5c4
c000e645:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e649:	89 10                	mov    DWORD PTR [eax],edx
c000e64b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e64f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000e656:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e65a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e664:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e668:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000e672:	e8 dd fa ff ff       	call   c000e154 <scanMADT()>
c000e677:	90                   	nop
c000e678:	83 c4 0c             	add    esp,0xc
c000e67b:	c3                   	ret    

c000e67c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000e67c:	83 ec 2c             	sub    esp,0x2c
c000e67f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e683:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e687:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e68b:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000e68f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e694:	88 d0                	mov    al,dl
c000e696:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e69a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e69f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e6a7:	90                   	nop
c000e6a8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e6ac:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e6b2:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000e6b6:	0f 8d 9c 00 00 00    	jge    c000e758 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000e6bc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e6c0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e6c4:	83 c2 2a             	add    edx,0x2a
c000e6c7:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000e6cb:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000e6d0:	75 7a                	jne    c000e74c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e6d2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e6d6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e6da:	83 c2 2a             	add    edx,0x2a
c000e6dd:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000e6e1:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000e6e5:	75 65                	jne    c000e74c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e6e7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e6ec:	74 3a                	je     c000e728 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000e6ee:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e6f2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e6f6:	83 c2 2a             	add    edx,0x2a
c000e6f9:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000e6fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e701:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e704:	39 c2                	cmp    edx,eax
c000e706:	74 10                	je     c000e718 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000e708:	83 ec 0c             	sub    esp,0xc
c000e70b:	68 08 e4 01 c0       	push   0xc001e408
c000e710:	e8 4e 1a 00 00       	call   c0010163 <KePanic(char const*)>
c000e715:	83 c4 10             	add    esp,0x10
c000e718:	83 ec 0c             	sub    esp,0xc
c000e71b:	68 92 e4 01 c0       	push   0xc001e492
c000e720:	e8 3e 1a 00 00       	call   c0010163 <KePanic(char const*)>
c000e725:	83 c4 10             	add    esp,0x10
c000e728:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000e72c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e730:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e734:	83 c2 2a             	add    edx,0x2a
c000e737:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000e73b:	8b 02                	mov    eax,DWORD PTR [edx]
c000e73d:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e740:	89 01                	mov    DWORD PTR [ecx],eax
c000e742:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000e745:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e74a:	66 90                	xchg   ax,ax
c000e74c:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e750:	e9 53 ff ff ff       	jmp    c000e6a8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000e755:	8d 76 00             	lea    esi,[esi+0x0]
c000e758:	90                   	nop
c000e759:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e75d:	83 c4 2c             	add    esp,0x2c
c000e760:	c2 04 00             	ret    0x4
c000e763:	90                   	nop

c000e764 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000e764:	83 ec 1c             	sub    esp,0x1c
c000e767:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e76b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e76f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e773:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000e778:	88 c8                	mov    al,cl
c000e77a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000e77e:	88 d0                	mov    al,dl
c000e780:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e784:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e788:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e78e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e792:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e795:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000e799:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000e79d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7a1:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e7a7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e7ab:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000e7ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7b2:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000e7b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7bb:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e7c1:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000e7c5:	8d 48 01             	lea    ecx,[eax+0x1]
c000e7c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7cc:	83 c2 2a             	add    edx,0x2a
c000e7cf:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000e7d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7d7:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e7dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7e1:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e7e4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e7e8:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000e7ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7f0:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e7f6:	8d 50 01             	lea    edx,[eax+0x1]
c000e7f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7fd:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000e803:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e807:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e80d:	3d 00 02 00 00       	cmp    eax,0x200
c000e812:	75 10                	jne    c000e824 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000e814:	83 ec 0c             	sub    esp,0xc
c000e817:	68 a1 e4 01 c0       	push   0xc001e4a1
c000e81c:	e8 42 19 00 00       	call   c0010163 <KePanic(char const*)>
c000e821:	83 c4 10             	add    esp,0x10
c000e824:	90                   	nop
c000e825:	83 c4 1c             	add    esp,0x1c
c000e828:	c3                   	ret    
c000e829:	90                   	nop
c000e82a:	66 90                	xchg   ax,ax

c000e82c <ACPI::setScreenBrightnessLevel(void*, int)>:
c000e82c:	b8 00 00 00 00       	mov    eax,0x0
c000e831:	c3                   	ret    
c000e832:	66 90                	xchg   ax,ax

c000e834 <ACPI::detectPCI()>:
c000e834:	53                   	push   ebx
c000e835:	83 ec 28             	sub    esp,0x28
c000e838:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e83d:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000e842:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c000e847:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e84d:	83 e0 04             	and    eax,0x4
c000e850:	84 c0                	test   al,al
c000e852:	74 2c                	je     c000e880 <ACPI::detectPCI()+0x4c>
c000e854:	a1 68 35 02 c0       	mov    eax,ds:0xc0023568
c000e859:	83 ec 08             	sub    esp,0x8
c000e85c:	68 be e4 01 c0       	push   0xc001e4be
c000e861:	50                   	push   eax
c000e862:	e8 75 f8 ff ff       	call   c000e0dc <findDataTable(unsigned char*, char*)>
c000e867:	83 c4 10             	add    esp,0x10
c000e86a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e86e:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000e873:	74 0b                	je     c000e880 <ACPI::detectPCI()+0x4c>
c000e875:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e87a:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e87f:	90                   	nop
c000e880:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000e888:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e88c:	8a 00                	mov    al,BYTE PTR [eax]
c000e88e:	3c 01                	cmp    al,0x1
c000e890:	75 0e                	jne    c000e8a0 <ACPI::detectPCI()+0x6c>
c000e892:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e897:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e89c:	eb 2a                	jmp    c000e8c8 <ACPI::detectPCI()+0x94>
c000e89e:	66 90                	xchg   ax,ax
c000e8a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e8a4:	8a 00                	mov    al,BYTE PTR [eax]
c000e8a6:	3c 02                	cmp    al,0x2
c000e8a8:	75 1e                	jne    c000e8c8 <ACPI::detectPCI()+0x94>
c000e8aa:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e8af:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e8b4:	74 12                	je     c000e8c8 <ACPI::detectPCI()+0x94>
c000e8b6:	83 ec 0c             	sub    esp,0xc
c000e8b9:	68 38 e4 01 c0       	push   0xc001e438
c000e8be:	e8 a0 18 00 00       	call   c0010163 <KePanic(char const*)>
c000e8c3:	83 c4 10             	add    esp,0x10
c000e8c6:	66 90                	xchg   ax,ax
c000e8c8:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000e8cc:	83 f0 01             	xor    eax,0x1
c000e8cf:	84 c0                	test   al,al
c000e8d1:	74 41                	je     c000e914 <ACPI::detectPCI()+0xe0>
c000e8d3:	e8 58 18 ff ff       	call   c0000130 <manualPCIProbe>
c000e8d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e8dc:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e8e1:	75 0d                	jne    c000e8f0 <ACPI::detectPCI()+0xbc>
c000e8e3:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e8e8:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e8ed:	eb 25                	jmp    c000e914 <ACPI::detectPCI()+0xe0>
c000e8ef:	90                   	nop
c000e8f0:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000e8f5:	75 1d                	jne    c000e914 <ACPI::detectPCI()+0xe0>
c000e8f7:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e8fc:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e901:	74 11                	je     c000e914 <ACPI::detectPCI()+0xe0>
c000e903:	83 ec 0c             	sub    esp,0xc
c000e906:	68 38 e4 01 c0       	push   0xc001e438
c000e90b:	e8 53 18 00 00       	call   c0010163 <KePanic(char const*)>
c000e910:	83 c4 10             	add    esp,0x10
c000e913:	90                   	nop
c000e914:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e919:	0f 84 85 00 00 00    	je     c000e9a4 <ACPI::detectPCI()+0x170>
c000e91f:	83 ec 0c             	sub    esp,0xc
c000e922:	68 c3 e4 01 c0       	push   0xc001e4c3
c000e927:	e8 bf 11 00 00       	call   c000faeb <KeSetBootMessage(char const*)>
c000e92c:	83 c4 10             	add    esp,0x10
c000e92f:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000e937:	83 ec 0c             	sub    esp,0xc
c000e93a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e93e:	e8 76 8e ff ff       	call   c00077b9 <malloc>
c000e943:	83 c4 10             	add    esp,0x10
c000e946:	89 c3                	mov    ebx,eax
c000e948:	83 ec 0c             	sub    esp,0xc
c000e94b:	53                   	push   ebx
c000e94c:	e8 71 9c 00 00       	call   c00185c2 <PCI::PCI()>
c000e951:	83 c4 10             	add    esp,0x10
c000e954:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e958:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e95c:	83 ec 08             	sub    esp,0x8
c000e95f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e963:	50                   	push   eax
c000e964:	e8 cf cf ff ff       	call   c000b938 <Device::addChild(Device*)>
c000e969:	83 c4 10             	add    esp,0x10
c000e96c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e970:	8b 00                	mov    eax,DWORD PTR [eax]
c000e972:	83 c0 08             	add    eax,0x8
c000e975:	8b 00                	mov    eax,DWORD PTR [eax]
c000e977:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e97c:	74 0a                	je     c000e988 <ACPI::detectPCI()+0x154>
c000e97e:	ba 01 00 00 00       	mov    edx,0x1
c000e983:	eb 0b                	jmp    c000e990 <ACPI::detectPCI()+0x15c>
c000e985:	8d 76 00             	lea    esi,[esi+0x0]
c000e988:	ba 02 00 00 00       	mov    edx,0x2
c000e98d:	8d 76 00             	lea    esi,[esi+0x0]
c000e990:	6a 00                	push   0x0
c000e992:	6a 00                	push   0x0
c000e994:	52                   	push   edx
c000e995:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e999:	ff d0                	call   eax
c000e99b:	83 c4 10             	add    esp,0x10
c000e99e:	e9 91 00 00 00       	jmp    c000ea34 <ACPI::detectPCI()+0x200>
c000e9a3:	90                   	nop
c000e9a4:	83 ec 0c             	sub    esp,0xc
c000e9a7:	68 db e4 01 c0       	push   0xc001e4db
c000e9ac:	e8 3a 11 00 00       	call   c000faeb <KeSetBootMessage(char const*)>
c000e9b1:	83 c4 10             	add    esp,0x10
c000e9b4:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000e9bb:	83 ec 0c             	sub    esp,0xc
c000e9be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e9c2:	e8 f2 8d ff ff       	call   c00077b9 <malloc>
c000e9c7:	83 c4 10             	add    esp,0x10
c000e9ca:	89 c3                	mov    ebx,eax
c000e9cc:	83 ec 0c             	sub    esp,0xc
c000e9cf:	53                   	push   ebx
c000e9d0:	e8 19 a7 00 00       	call   c00190ee <IDE::IDE()>
c000e9d5:	83 c4 10             	add    esp,0x10
c000e9d8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000e9dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e9e0:	83 ec 08             	sub    esp,0x8
c000e9e3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e9e7:	50                   	push   eax
c000e9e8:	e8 4b cf ff ff       	call   c000b938 <Device::addChild(Device*)>
c000e9ed:	83 c4 10             	add    esp,0x10
c000e9f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e9f4:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000e9fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea02:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000ea0b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea0f:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000ea18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea1c:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea1e:	83 c0 08             	add    eax,0x8
c000ea21:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea23:	6a 00                	push   0x0
c000ea25:	6a 00                	push   0x0
c000ea27:	6a 00                	push   0x0
c000ea29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ea2d:	ff d0                	call   eax
c000ea2f:	83 c4 10             	add    esp,0x10
c000ea32:	66 90                	xchg   ax,ax
c000ea34:	90                   	nop
c000ea35:	83 c4 28             	add    esp,0x28
c000ea38:	5b                   	pop    ebx
c000ea39:	c3                   	ret    
c000ea3a:	66 90                	xchg   ax,ax

c000ea3c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000ea3c:	83 ec 1c             	sub    esp,0x1c
c000ea3f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ea43:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ea46:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ea4a:	8b 15 58 0d 02 c0    	mov    edx,DWORD PTR ds:0xc0020d58
c000ea50:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ea54:	25 ff 00 00 00       	and    eax,0xff
c000ea59:	83 ec 08             	sub    esp,0x8
c000ea5c:	50                   	push   eax
c000ea5d:	52                   	push   edx
c000ea5e:	e8 43 84 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c000ea63:	83 c4 10             	add    esp,0x10
c000ea66:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000ea6a:	8b 15 58 0d 02 c0    	mov    edx,DWORD PTR ds:0xc0020d58
c000ea70:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ea74:	25 ff 00 00 00       	and    eax,0xff
c000ea79:	83 ec 04             	sub    esp,0x4
c000ea7c:	6a 01                	push   0x1
c000ea7e:	50                   	push   eax
c000ea7f:	52                   	push   edx
c000ea80:	e8 37 85 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c000ea85:	83 c4 10             	add    esp,0x10
c000ea88:	90                   	nop
c000ea89:	83 c4 1c             	add    esp,0x1c
c000ea8c:	c3                   	ret    
c000ea8d:	90                   	nop
c000ea8e:	66 90                	xchg   ax,ax

c000ea90 <ACPI::sleep()>:
c000ea90:	83 ec 0c             	sub    esp,0xc
c000ea93:	a1 40 33 02 c0       	mov    eax,ds:0xc0023340
c000ea98:	85 c0                	test   eax,eax
c000ea9a:	74 08                	je     c000eaa4 <ACPI::sleep()+0x14>
c000ea9c:	a1 40 33 02 c0       	mov    eax,ds:0xc0023340
c000eaa1:	ff d0                	call   eax
c000eaa3:	90                   	nop
c000eaa4:	90                   	nop
c000eaa5:	83 c4 0c             	add    esp,0xc
c000eaa8:	c3                   	ret    
c000eaa9:	90                   	nop
c000eaaa:	66 90                	xchg   ax,ax

c000eaac <ACPI::open(int, int, void*)>:
c000eaac:	57                   	push   edi
c000eaad:	56                   	push   esi
c000eaae:	53                   	push   ebx
c000eaaf:	81 ec 70 01 00 00    	sub    esp,0x170
c000eab5:	83 ec 0c             	sub    esp,0xc
c000eab8:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000eabf:	e8 70 fd ff ff       	call   c000e834 <ACPI::detectPCI()>
c000eac4:	83 c4 10             	add    esp,0x10
c000eac7:	83 ec 0c             	sub    esp,0xc
c000eaca:	68 60 e4 01 c0       	push   0xc001e460
c000eacf:	e8 17 10 00 00       	call   c000faeb <KeSetBootMessage(char const*)>
c000ead4:	83 c4 10             	add    esp,0x10
c000ead7:	83 ec 0c             	sub    esp,0xc
c000eada:	68 f0 e4 01 c0       	push   0xc001e4f0
c000eadf:	e8 4e 38 00 00       	call   c0012332 <Thr::loadKernelSymbolTable(char const*)>
c000eae4:	83 c4 10             	add    esp,0x10
c000eae7:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000eaef:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000eafa:	83 ec 0c             	sub    esp,0xc
c000eafd:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000eb04:	e8 b0 8c ff ff       	call   c00077b9 <malloc>
c000eb09:	83 c4 10             	add    esp,0x10
c000eb0c:	89 c3                	mov    ebx,eax
c000eb0e:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c000eb13:	83 ec 04             	sub    esp,0x4
c000eb16:	50                   	push   eax
c000eb17:	68 0e e5 01 c0       	push   0xc001e50e
c000eb1c:	53                   	push   ebx
c000eb1d:	e8 4c bf ff ff       	call   c000aa6e <File::File(char const*, Process*)>
c000eb22:	83 c4 10             	add    esp,0x10
c000eb25:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000eb2c:	83 ec 08             	sub    esp,0x8
c000eb2f:	6a 01                	push   0x1
c000eb31:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eb38:	e8 f1 bf ff ff       	call   c000ab2e <File::open(FileOpenMode)>
c000eb3d:	83 c4 10             	add    esp,0x10
c000eb40:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000eb47:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000eb4f:	75 17                	jne    c000eb68 <ACPI::open(int, int, void*)+0xbc>
c000eb51:	83 ec 0c             	sub    esp,0xc
c000eb54:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eb5b:	e8 2c c0 ff ff       	call   c000ab8c <File::close()>
c000eb60:	83 c4 10             	add    esp,0x10
c000eb63:	eb 0b                	jmp    c000eb70 <ACPI::open(int, int, void*)+0xc4>
c000eb65:	8d 76 00             	lea    esi,[esi+0x0]
c000eb68:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000eb70:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000eb78:	74 1e                	je     c000eb98 <ACPI::open(int, int, void*)+0xec>
c000eb7a:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000eb81:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb83:	83 c0 08             	add    eax,0x8
c000eb86:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb88:	83 ec 0c             	sub    esp,0xc
c000eb8b:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eb92:	ff d0                	call   eax
c000eb94:	83 c4 10             	add    esp,0x10
c000eb97:	90                   	nop
c000eb98:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000eb9f:	83 f0 01             	xor    eax,0x1
c000eba2:	84 c0                	test   al,al
c000eba4:	74 42                	je     c000ebe8 <ACPI::open(int, int, void*)+0x13c>
c000eba6:	83 ec 0c             	sub    esp,0xc
c000eba9:	68 2c e5 01 c0       	push   0xc001e52c
c000ebae:	e8 38 0f 00 00       	call   c000faeb <KeSetBootMessage(char const*)>
c000ebb3:	83 c4 10             	add    esp,0x10
c000ebb6:	83 ec 04             	sub    esp,0x4
c000ebb9:	6a 0c                	push   0xc
c000ebbb:	68 47 e5 01 c0       	push   0xc001e547
c000ebc0:	68 58 e5 01 c0       	push   0xc001e558
c000ebc5:	e8 58 2d 00 00       	call   c0011922 <Reg::readIntWithDefault(char*, char*, int)>
c000ebca:	83 c4 10             	add    esp,0x10
c000ebcd:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000ebd4:	83 ec 0c             	sub    esp,0xc
c000ebd7:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ebde:	e8 cc a8 ff ff       	call   c00094af <Virt::setupPageSwapping(int)>
c000ebe3:	83 c4 10             	add    esp,0x10
c000ebe6:	66 90                	xchg   ax,ax
c000ebe8:	83 ec 0c             	sub    esp,0xc
c000ebeb:	68 b7 d5 01 c0       	push   0xc001d5b7
c000ebf0:	e8 f6 0e 00 00       	call   c000faeb <KeSetBootMessage(char const*)>
c000ebf5:	83 c4 10             	add    esp,0x10
c000ebf8:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000ebff:	83 ec 08             	sub    esp,0x8
c000ec02:	6a 12                	push   0x12
c000ec04:	50                   	push   eax
c000ec05:	e8 46 d0 ff ff       	call   c000bc50 <getDevicesOfType(DeviceType)>
c000ec0a:	83 c4 0c             	add    esp,0xc
c000ec0d:	8d 76 00             	lea    esi,[esi+0x0]
c000ec10:	83 ec 0c             	sub    esp,0xc
c000ec13:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ec1a:	50                   	push   eax
c000ec1b:	e8 dc dd 00 00       	call   c001c9fc <LinkedList<Device>::isEmpty()>
c000ec20:	83 c4 10             	add    esp,0x10
c000ec23:	83 f0 01             	xor    eax,0x1
c000ec26:	84 c0                	test   al,al
c000ec28:	0f 84 46 01 00 00    	je     c000ed74 <ACPI::open(int, int, void*)+0x2c8>
c000ec2e:	83 ec 0c             	sub    esp,0xc
c000ec31:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ec38:	50                   	push   eax
c000ec39:	e8 da dd 00 00       	call   c001ca18 <LinkedList<Device>::getFirstElement()>
c000ec3e:	83 c4 10             	add    esp,0x10
c000ec41:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000ec48:	83 ec 0c             	sub    esp,0xc
c000ec4b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ec52:	50                   	push   eax
c000ec53:	e8 c8 dd 00 00       	call   c001ca20 <LinkedList<Device>::removeFirst()>
c000ec58:	83 c4 10             	add    esp,0x10
c000ec5b:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000ec62:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000ec69:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000ec70:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ec74:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000ec7a:	ba 09 00 00 00       	mov    edx,0x9
c000ec7f:	fc                   	cld    
c000ec80:	89 c7                	mov    edi,eax
c000ec82:	89 de                	mov    esi,ebx
c000ec84:	89 d1                	mov    ecx,edx
c000ec86:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ec88:	83 ec 08             	sub    esp,0x8
c000ec8b:	8d 44 24 38          	lea    eax,[esp+0x38]
c000ec8f:	50                   	push   eax
c000ec90:	83 ec 24             	sub    esp,0x24
c000ec93:	89 e0                	mov    eax,esp
c000ec95:	89 c3                	mov    ebx,eax
c000ec97:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000ec9b:	ba 09 00 00 00       	mov    edx,0x9
c000eca0:	89 df                	mov    edi,ebx
c000eca2:	89 c6                	mov    esi,eax
c000eca4:	89 d1                	mov    ecx,edx
c000eca6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000eca8:	e8 f7 9d 00 00       	call   c0018aa4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ecad:	83 c4 30             	add    esp,0x30
c000ecb0:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000ecb7:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000ecbf:	0f 84 4b ff ff ff    	je     c000ec10 <ACPI::open(int, int, void*)+0x164>
c000ecc5:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000ecd0:	83 ec 0c             	sub    esp,0xc
c000ecd3:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ecda:	e8 da 8a ff ff       	call   c00077b9 <malloc>
c000ecdf:	83 c4 10             	add    esp,0x10
c000ece2:	89 c3                	mov    ebx,eax
c000ece4:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c000ece9:	83 ec 04             	sub    esp,0x4
c000ecec:	50                   	push   eax
c000eced:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ecf4:	53                   	push   ebx
c000ecf5:	e8 74 bd ff ff       	call   c000aa6e <File::File(char const*, Process*)>
c000ecfa:	83 c4 10             	add    esp,0x10
c000ecfd:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000ed04:	83 ec 0c             	sub    esp,0xc
c000ed07:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ed0e:	e8 89 c0 ff ff       	call   c000ad9c <File::exists()>
c000ed13:	83 c4 10             	add    esp,0x10
c000ed16:	84 c0                	test   al,al
c000ed18:	74 2a                	je     c000ed44 <ACPI::open(int, int, void*)+0x298>
c000ed1a:	83 ec 08             	sub    esp,0x8
c000ed1d:	6a 01                	push   0x1
c000ed1f:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ed26:	e8 7e 40 00 00       	call   c0012da9 <Thr::loadDLL(char const*, bool)>
c000ed2b:	83 c4 10             	add    esp,0x10
c000ed2e:	83 ec 08             	sub    esp,0x8
c000ed31:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ed38:	50                   	push   eax
c000ed39:	e8 9c 42 00 00       	call   c0012fda <Thr::executeDLL(unsigned long, void*)>
c000ed3e:	83 c4 10             	add    esp,0x10
c000ed41:	8d 76 00             	lea    esi,[esi+0x0]
c000ed44:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000ed4c:	0f 84 be fe ff ff    	je     c000ec10 <ACPI::open(int, int, void*)+0x164>
c000ed52:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000ed59:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed5b:	83 c0 08             	add    eax,0x8
c000ed5e:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed60:	83 ec 0c             	sub    esp,0xc
c000ed63:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ed6a:	ff d0                	call   eax
c000ed6c:	83 c4 10             	add    esp,0x10
c000ed6f:	e9 9c fe ff ff       	jmp    c000ec10 <ACPI::open(int, int, void*)+0x164>
c000ed74:	83 ec 0c             	sub    esp,0xc
c000ed77:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ed7e:	50                   	push   eax
c000ed7f:	e8 74 dc 00 00       	call   c001c9f8 <LinkedList<Device>::~LinkedList()>
c000ed84:	83 c4 10             	add    esp,0x10
c000ed87:	8b 1d 58 0d 02 c0    	mov    ebx,DWORD PTR ds:0xc0020d58
c000ed8d:	83 ec 08             	sub    esp,0x8
c000ed90:	6a 01                	push   0x1
c000ed92:	68 5f e5 01 c0       	push   0xc001e55f
c000ed97:	e8 0d 40 00 00       	call   c0012da9 <Thr::loadDLL(char const*, bool)>
c000ed9c:	83 c4 10             	add    esp,0x10
c000ed9f:	83 ec 08             	sub    esp,0x8
c000eda2:	53                   	push   ebx
c000eda3:	50                   	push   eax
c000eda4:	e8 31 42 00 00       	call   c0012fda <Thr::executeDLL(unsigned long, void*)>
c000eda9:	83 c4 10             	add    esp,0x10
c000edac:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c000edb1:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000edb7:	83 e0 04             	and    eax,0x4
c000edba:	84 c0                	test   al,al
c000edbc:	0f 84 16 01 00 00    	je     c000eed8 <ACPI::open(int, int, void*)+0x42c>
c000edc2:	83 ec 0c             	sub    esp,0xc
c000edc5:	68 7c e5 01 c0       	push   0xc001e57c
c000edca:	e8 1c 0d 00 00       	call   c000faeb <KeSetBootMessage(char const*)>
c000edcf:	83 c4 10             	add    esp,0x10
c000edd2:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000eddd:	83 ec 0c             	sub    esp,0xc
c000ede0:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000ede7:	e8 cd 89 ff ff       	call   c00077b9 <malloc>
c000edec:	83 c4 10             	add    esp,0x10
c000edef:	89 c3                	mov    ebx,eax
c000edf1:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c000edf6:	83 ec 04             	sub    esp,0x4
c000edf9:	50                   	push   eax
c000edfa:	68 99 e5 01 c0       	push   0xc001e599
c000edff:	53                   	push   ebx
c000ee00:	e8 69 bc ff ff       	call   c000aa6e <File::File(char const*, Process*)>
c000ee05:	83 c4 10             	add    esp,0x10
c000ee08:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000ee0f:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ee17:	74 1b                	je     c000ee34 <ACPI::open(int, int, void*)+0x388>
c000ee19:	83 ec 0c             	sub    esp,0xc
c000ee1c:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000ee23:	e8 74 bf ff ff       	call   c000ad9c <File::exists()>
c000ee28:	83 c4 10             	add    esp,0x10
c000ee2b:	84 c0                	test   al,al
c000ee2d:	74 05                	je     c000ee34 <ACPI::open(int, int, void*)+0x388>
c000ee2f:	b0 01                	mov    al,0x1
c000ee31:	eb 05                	jmp    c000ee38 <ACPI::open(int, int, void*)+0x38c>
c000ee33:	90                   	nop
c000ee34:	b0 00                	mov    al,0x0
c000ee36:	66 90                	xchg   ax,ax
c000ee38:	84 c0                	test   al,al
c000ee3a:	74 28                	je     c000ee64 <ACPI::open(int, int, void*)+0x3b8>
c000ee3c:	83 ec 08             	sub    esp,0x8
c000ee3f:	6a 01                	push   0x1
c000ee41:	68 99 e5 01 c0       	push   0xc001e599
c000ee46:	e8 5e 3f 00 00       	call   c0012da9 <Thr::loadDLL(char const*, bool)>
c000ee4b:	83 c4 10             	add    esp,0x10
c000ee4e:	83 ec 08             	sub    esp,0x8
c000ee51:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000ee58:	50                   	push   eax
c000ee59:	e8 7c 41 00 00       	call   c0012fda <Thr::executeDLL(unsigned long, void*)>
c000ee5e:	83 c4 10             	add    esp,0x10
c000ee61:	8d 76 00             	lea    esi,[esi+0x0]
c000ee64:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ee6c:	74 2a                	je     c000ee98 <ACPI::open(int, int, void*)+0x3ec>
c000ee6e:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ee76:	74 20                	je     c000ee98 <ACPI::open(int, int, void*)+0x3ec>
c000ee78:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000ee7f:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee81:	83 c0 08             	add    eax,0x8
c000ee84:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee86:	83 ec 0c             	sub    esp,0xc
c000ee89:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000ee90:	ff d0                	call   eax
c000ee92:	83 c4 10             	add    esp,0x10
c000ee95:	8d 76 00             	lea    esi,[esi+0x0]
c000ee98:	a1 68 35 02 c0       	mov    eax,ds:0xc0023568
c000ee9d:	83 ec 08             	sub    esp,0x8
c000eea0:	68 b6 e5 01 c0       	push   0xc001e5b6
c000eea5:	50                   	push   eax
c000eea6:	e8 31 f2 ff ff       	call   c000e0dc <findDataTable(unsigned char*, char*)>
c000eeab:	83 c4 10             	add    esp,0x10
c000eeae:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000eeb5:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000eebd:	74 19                	je     c000eed8 <ACPI::open(int, int, void*)+0x42c>
c000eebf:	83 ec 08             	sub    esp,0x8
c000eec2:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000eec9:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000eed0:	e8 67 fb ff ff       	call   c000ea3c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000eed5:	83 c4 10             	add    esp,0x10
c000eed8:	b8 00 00 00 00       	mov    eax,0x0
c000eedd:	81 c4 70 01 00 00    	add    esp,0x170
c000eee3:	5b                   	pop    ebx
c000eee4:	5e                   	pop    esi
c000eee5:	5f                   	pop    edi
c000eee6:	c3                   	ret    
c000eee7:	90                   	nop

c000eee8 <CPU::close(int, int, void*)>:
c000eee8:	31 c0                	xor    eax,eax
c000eeea:	c3                   	ret    
c000eeeb:	90                   	nop

c000eeec <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000eeec:	60                   	pusha  
c000eeed:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000eef1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eef5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eef9:	9c                   	pushf  
c000eefa:	fa                   	cli    
c000eefb:	0f 09                	wbinvd 
c000eefd:	0f 30                	wrmsr  
c000eeff:	9d                   	popf   
c000ef00:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ef04:	89 02                	mov    DWORD PTR [edx],eax
c000ef06:	61                   	popa   
c000ef07:	c3                   	ret    

c000ef08 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000ef08:	60                   	pusha  
c000ef09:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ef0d:	9c                   	pushf  
c000ef0e:	fa                   	cli    
c000ef0f:	0f 09                	wbinvd 
c000ef11:	31 c0                	xor    eax,eax
c000ef13:	31 d2                	xor    edx,edx
c000ef15:	0f 32                	rdmsr  
c000ef17:	9d                   	popf   
c000ef18:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ef1c:	89 02                	mov    DWORD PTR [edx],eax
c000ef1e:	61                   	popa   
c000ef1f:	c3                   	ret    

c000ef20 <CPU::AMD_K6_writeback(int, int, int)>:
c000ef20:	56                   	push   esi
c000ef21:	53                   	push   ebx
c000ef22:	83 ec 10             	sub    esp,0x10
c000ef25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef29:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000ef2e:	75 5d                	jne    c000ef8d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ef30:	83 f8 08             	cmp    eax,0x8
c000ef33:	75 09                	jne    c000ef3e <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000ef35:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000ef3a:	7e 13                	jle    c000ef4f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000ef3c:	eb 30                	jmp    c000ef6e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000ef3e:	83 f8 06             	cmp    eax,0x6
c000ef41:	7c 4a                	jl     c000ef8d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ef43:	83 f8 07             	cmp    eax,0x7
c000ef46:	7e 07                	jle    c000ef4f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000ef48:	83 f8 09             	cmp    eax,0x9
c000ef4b:	74 21                	je     c000ef6e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000ef4d:	eb 3e                	jmp    c000ef8d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ef4f:	89 e6                	mov    esi,esp
c000ef51:	8b 1d 7c 0d 02 c0    	mov    ebx,DWORD PTR ds:0xc0020d7c
c000ef57:	56                   	push   esi
c000ef58:	c1 eb 15             	shr    ebx,0x15
c000ef5b:	68 82 00 00 c0       	push   0xc0000082
c000ef60:	83 e3 7e             	and    ebx,0x7e
c000ef63:	e8 a0 ff ff ff       	call   c000ef08 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000ef68:	56                   	push   esi
c000ef69:	6a 00                	push   0x0
c000ef6b:	53                   	push   ebx
c000ef6c:	eb 12                	jmp    c000ef80 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000ef6e:	89 e3                	mov    ebx,esp
c000ef70:	53                   	push   ebx
c000ef71:	68 82 00 00 c0       	push   0xc0000082
c000ef76:	e8 8d ff ff ff       	call   c000ef08 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000ef7b:	53                   	push   ebx
c000ef7c:	6a 00                	push   0x0
c000ef7e:	6a 00                	push   0x0
c000ef80:	68 82 00 00 c0       	push   0xc0000082
c000ef85:	e8 62 ff ff ff       	call   c000eeec <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000ef8a:	83 c4 18             	add    esp,0x18
c000ef8d:	83 c4 10             	add    esp,0x10
c000ef90:	5b                   	pop    ebx
c000ef91:	5e                   	pop    esi
c000ef92:	c3                   	ret    
c000ef93:	90                   	nop

c000ef94 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000ef94:	55                   	push   ebp
c000ef95:	57                   	push   edi
c000ef96:	56                   	push   esi
c000ef97:	53                   	push   ebx
c000ef98:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef9c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000efa0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000efa4:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000efa8:	39 05 30 fa 01 c0    	cmp    DWORD PTR ds:0xc001fa30,eax
c000efae:	75 23                	jne    c000efd3 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000efb0:	a1 cc 37 02 c0       	mov    eax,ds:0xc00237cc
c000efb5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000efb9:	89 06                	mov    DWORD PTR [esi],eax
c000efbb:	a1 c8 37 02 c0       	mov    eax,ds:0xc00237c8
c000efc0:	89 07                	mov    DWORD PTR [edi],eax
c000efc2:	a1 c4 37 02 c0       	mov    eax,ds:0xc00237c4
c000efc7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000efca:	a1 c0 37 02 c0       	mov    eax,ds:0xc00237c0
c000efcf:	89 02                	mov    DWORD PTR [edx],eax
c000efd1:	eb 3f                	jmp    c000f012 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000efd3:	31 c9                	xor    ecx,ecx
c000efd5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000efd9:	0f a2                	cpuid  
c000efdb:	89 06                	mov    DWORD PTR [esi],eax
c000efdd:	89 1f                	mov    DWORD PTR [edi],ebx
c000efdf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000efe3:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000efe6:	89 10                	mov    DWORD PTR [eax],edx
c000efe8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000efec:	a3 30 fa 01 c0       	mov    ds:0xc001fa30,eax
c000eff1:	8b 06                	mov    eax,DWORD PTR [esi]
c000eff3:	a3 cc 37 02 c0       	mov    ds:0xc00237cc,eax
c000eff8:	8b 07                	mov    eax,DWORD PTR [edi]
c000effa:	a3 c8 37 02 c0       	mov    ds:0xc00237c8,eax
c000efff:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f002:	a3 c4 37 02 c0       	mov    ds:0xc00237c4,eax
c000f007:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f00b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f00d:	a3 c0 37 02 c0       	mov    ds:0xc00237c0,eax
c000f012:	5b                   	pop    ebx
c000f013:	5e                   	pop    esi
c000f014:	5f                   	pop    edi
c000f015:	5d                   	pop    ebp
c000f016:	c3                   	ret    
c000f017:	90                   	nop

c000f018 <CPU::cpuidCheckEDX(unsigned int)>:
c000f018:	83 ec 10             	sub    esp,0x10
c000f01b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f01f:	50                   	push   eax
c000f020:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f024:	50                   	push   eax
c000f025:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f029:	50                   	push   eax
c000f02a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f02e:	50                   	push   eax
c000f02f:	6a 01                	push   0x1
c000f031:	e8 5e ff ff ff       	call   c000ef94 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f036:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f03a:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f03e:	0f 95 c0             	setne  al
c000f041:	83 c4 24             	add    esp,0x24
c000f044:	c3                   	ret    
c000f045:	90                   	nop

c000f046 <CPU::cpuidCheckECX(unsigned int)>:
c000f046:	83 ec 10             	sub    esp,0x10
c000f049:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f04d:	50                   	push   eax
c000f04e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f052:	50                   	push   eax
c000f053:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f057:	50                   	push   eax
c000f058:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f05c:	50                   	push   eax
c000f05d:	6a 01                	push   0x1
c000f05f:	e8 30 ff ff ff       	call   c000ef94 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f064:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f068:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f06c:	0f 95 c0             	setne  al
c000f06f:	83 c4 24             	add    esp,0x24
c000f072:	c3                   	ret    
c000f073:	90                   	nop

c000f074 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f074:	83 ec 10             	sub    esp,0x10
c000f077:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f07b:	50                   	push   eax
c000f07c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f080:	50                   	push   eax
c000f081:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f085:	50                   	push   eax
c000f086:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f08a:	50                   	push   eax
c000f08b:	6a 07                	push   0x7
c000f08d:	e8 02 ff ff ff       	call   c000ef94 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f092:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f096:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f09a:	0f 95 c0             	setne  al
c000f09d:	83 c4 24             	add    esp,0x24
c000f0a0:	c3                   	ret    
c000f0a1:	90                   	nop

c000f0a2 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f0a2:	83 ec 10             	sub    esp,0x10
c000f0a5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0a9:	50                   	push   eax
c000f0aa:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0ae:	50                   	push   eax
c000f0af:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0b3:	50                   	push   eax
c000f0b4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0b8:	50                   	push   eax
c000f0b9:	6a 07                	push   0x7
c000f0bb:	e8 d4 fe ff ff       	call   c000ef94 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f0c0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f0c4:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f0c8:	0f 95 c0             	setne  al
c000f0cb:	83 c4 24             	add    esp,0x24
c000f0ce:	c3                   	ret    
c000f0cf:	90                   	nop

c000f0d0 <CPU::CPU()>:
c000f0d0:	83 ec 0c             	sub    esp,0xc
c000f0d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0d7:	83 ec 08             	sub    esp,0x8
c000f0da:	68 d9 e6 01 c0       	push   0xc001e6d9
c000f0df:	50                   	push   eax
c000f0e0:	e8 eb c9 ff ff       	call   c000bad0 <Device::Device(char const*)>
c000f0e5:	83 c4 10             	add    esp,0x10
c000f0e8:	ba 60 e7 01 c0       	mov    edx,0xc001e760
c000f0ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0f1:	89 10                	mov    DWORD PTR [eax],edx
c000f0f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0f7:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f101:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f105:	05 78 01 00 00       	add    eax,0x178
c000f10a:	83 ec 0c             	sub    esp,0xc
c000f10d:	50                   	push   eax
c000f10e:	e8 67 7f ff ff       	call   c000707a <GDT::GDT()>
c000f113:	83 c4 10             	add    esp,0x10
c000f116:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f11a:	05 7c 09 00 00       	add    eax,0x97c
c000f11f:	83 ec 0c             	sub    esp,0xc
c000f122:	50                   	push   eax
c000f123:	e8 8c 81 ff ff       	call   c00072b4 <IDT::IDT()>
c000f128:	83 c4 10             	add    esp,0x10
c000f12b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f12f:	05 7c 11 00 00       	add    eax,0x117c
c000f134:	83 ec 0c             	sub    esp,0xc
c000f137:	50                   	push   eax
c000f138:	e8 ab 9a ff ff       	call   c0008be8 <TSS::TSS()>
c000f13d:	83 c4 10             	add    esp,0x10
c000f140:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f144:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f14b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f14f:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000f159:	90                   	nop
c000f15a:	83 c4 0c             	add    esp,0xc
c000f15d:	c3                   	ret    

c000f15e <CPU::displayFeatures()>:
c000f15e:	c3                   	ret    
c000f15f:	90                   	nop

c000f160 <CPU::detectFeatures()>:
c000f160:	55                   	push   ebp
c000f161:	57                   	push   edi
c000f162:	56                   	push   esi
c000f163:	53                   	push   ebx
c000f164:	83 ec 30             	sub    esp,0x30
c000f167:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f16b:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f175:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f17c:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f182:	6a 0d                	push   0xd
c000f184:	6a 00                	push   0x0
c000f186:	55                   	push   ebp
c000f187:	e8 44 13 ff ff       	call   c00004d0 <memset>
c000f18c:	83 c4 10             	add    esp,0x10
c000f18f:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c000f194:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f19b:	0f 84 d5 05 00 00    	je     c000f776 <CPU::detectFeatures()+0x616>
c000f1a1:	83 ec 0c             	sub    esp,0xc
c000f1a4:	89 ef                	mov    edi,ebp
c000f1a6:	6a 10                	push   0x10
c000f1a8:	e8 6b fe ff ff       	call   c000f018 <CPU::cpuidCheckEDX(unsigned int)>
c000f1ad:	83 e0 01             	and    eax,0x1
c000f1b0:	8d 14 00             	lea    edx,[eax+eax*1]
c000f1b3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f1b9:	83 e0 fd             	and    eax,0xfffffffd
c000f1bc:	09 d0                	or     eax,edx
c000f1be:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f1c4:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f1cb:	e8 48 fe ff ff       	call   c000f018 <CPU::cpuidCheckEDX(unsigned int)>
c000f1d0:	83 e0 01             	and    eax,0x1
c000f1d3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f1da:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f1e0:	83 e0 fb             	and    eax,0xfffffffb
c000f1e3:	09 d0                	or     eax,edx
c000f1e5:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f1eb:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f1f2:	e8 21 fe ff ff       	call   c000f018 <CPU::cpuidCheckEDX(unsigned int)>
c000f1f7:	83 e0 01             	and    eax,0x1
c000f1fa:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f201:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f207:	83 e0 f7             	and    eax,0xfffffff7
c000f20a:	09 d0                	or     eax,edx
c000f20c:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f212:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f219:	e8 fa fd ff ff       	call   c000f018 <CPU::cpuidCheckEDX(unsigned int)>
c000f21e:	83 e0 01             	and    eax,0x1
c000f221:	c1 e0 04             	shl    eax,0x4
c000f224:	88 c2                	mov    dl,al
c000f226:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f22c:	83 e0 ef             	and    eax,0xffffffef
c000f22f:	09 d0                	or     eax,edx
c000f231:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f237:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f23e:	e8 d5 fd ff ff       	call   c000f018 <CPU::cpuidCheckEDX(unsigned int)>
c000f243:	83 e0 01             	and    eax,0x1
c000f246:	c1 e0 05             	shl    eax,0x5
c000f249:	88 c2                	mov    dl,al
c000f24b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f251:	83 e0 df             	and    eax,0xffffffdf
c000f254:	09 d0                	or     eax,edx
c000f256:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f25c:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f263:	e8 b0 fd ff ff       	call   c000f018 <CPU::cpuidCheckEDX(unsigned int)>
c000f268:	83 e0 01             	and    eax,0x1
c000f26b:	8d 14 00             	lea    edx,[eax+eax*1]
c000f26e:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f274:	83 e0 fd             	and    eax,0xfffffffd
c000f277:	09 d0                	or     eax,edx
c000f279:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f27f:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f286:	e8 8d fd ff ff       	call   c000f018 <CPU::cpuidCheckEDX(unsigned int)>
c000f28b:	83 e0 01             	and    eax,0x1
c000f28e:	c1 e0 06             	shl    eax,0x6
c000f291:	88 c2                	mov    dl,al
c000f293:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f299:	83 e0 bf             	and    eax,0xffffffbf
c000f29c:	09 d0                	or     eax,edx
c000f29e:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f2a4:	58                   	pop    eax
c000f2a5:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f2a9:	50                   	push   eax
c000f2aa:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f2ae:	50                   	push   eax
c000f2af:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f2b3:	56                   	push   esi
c000f2b4:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f2b8:	50                   	push   eax
c000f2b9:	6a 00                	push   0x0
c000f2bb:	e8 d4 fc ff ff       	call   c000ef94 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f2c0:	b8 04 00 00 00       	mov    eax,0x4
c000f2c5:	89 c1                	mov    ecx,eax
c000f2c7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f2c9:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f2cf:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f2d3:	89 c1                	mov    ecx,eax
c000f2d5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f2d7:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f2dd:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f2e1:	89 c1                	mov    ecx,eax
c000f2e3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f2e5:	83 c4 18             	add    esp,0x18
c000f2e8:	68 e8 e5 01 c0       	push   0xc001e5e8
c000f2ed:	55                   	push   ebp
c000f2ee:	e8 ed 13 ff ff       	call   c00006e0 <strcmp>
c000f2f3:	83 c4 10             	add    esp,0x10
c000f2f6:	85 c0                	test   eax,eax
c000f2f8:	75 0f                	jne    c000f309 <CPU::detectFeatures()+0x1a9>
c000f2fa:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f304:	e9 22 02 00 00       	jmp    c000f52b <CPU::detectFeatures()+0x3cb>
c000f309:	50                   	push   eax
c000f30a:	50                   	push   eax
c000f30b:	68 f5 e5 01 c0       	push   0xc001e5f5
c000f310:	55                   	push   ebp
c000f311:	e8 ca 13 ff ff       	call   c00006e0 <strcmp>
c000f316:	83 c4 10             	add    esp,0x10
c000f319:	85 c0                	test   eax,eax
c000f31b:	74 dd                	je     c000f2fa <CPU::detectFeatures()+0x19a>
c000f31d:	50                   	push   eax
c000f31e:	50                   	push   eax
c000f31f:	68 02 e6 01 c0       	push   0xc001e602
c000f324:	55                   	push   ebp
c000f325:	e8 b6 13 ff ff       	call   c00006e0 <strcmp>
c000f32a:	83 c4 10             	add    esp,0x10
c000f32d:	85 c0                	test   eax,eax
c000f32f:	74 2a                	je     c000f35b <CPU::detectFeatures()+0x1fb>
c000f331:	50                   	push   eax
c000f332:	50                   	push   eax
c000f333:	68 0f e6 01 c0       	push   0xc001e60f
c000f338:	55                   	push   ebp
c000f339:	e8 a2 13 ff ff       	call   c00006e0 <strcmp>
c000f33e:	83 c4 10             	add    esp,0x10
c000f341:	85 c0                	test   eax,eax
c000f343:	74 16                	je     c000f35b <CPU::detectFeatures()+0x1fb>
c000f345:	50                   	push   eax
c000f346:	50                   	push   eax
c000f347:	68 1c e6 01 c0       	push   0xc001e61c
c000f34c:	55                   	push   ebp
c000f34d:	e8 8e 13 ff ff       	call   c00006e0 <strcmp>
c000f352:	83 c4 10             	add    esp,0x10
c000f355:	85 c0                	test   eax,eax
c000f357:	74 48                	je     c000f3a1 <CPU::detectFeatures()+0x241>
c000f359:	eb 0f                	jmp    c000f36a <CPU::detectFeatures()+0x20a>
c000f35b:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f365:	e9 c1 01 00 00       	jmp    c000f52b <CPU::detectFeatures()+0x3cb>
c000f36a:	50                   	push   eax
c000f36b:	50                   	push   eax
c000f36c:	68 29 e6 01 c0       	push   0xc001e629
c000f371:	55                   	push   ebp
c000f372:	e8 69 13 ff ff       	call   c00006e0 <strcmp>
c000f377:	83 c4 10             	add    esp,0x10
c000f37a:	85 c0                	test   eax,eax
c000f37c:	74 23                	je     c000f3a1 <CPU::detectFeatures()+0x241>
c000f37e:	57                   	push   edi
c000f37f:	57                   	push   edi
c000f380:	68 36 e6 01 c0       	push   0xc001e636
c000f385:	55                   	push   ebp
c000f386:	e8 55 13 ff ff       	call   c00006e0 <strcmp>
c000f38b:	83 c4 10             	add    esp,0x10
c000f38e:	85 c0                	test   eax,eax
c000f390:	75 1e                	jne    c000f3b0 <CPU::detectFeatures()+0x250>
c000f392:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f39c:	e9 8a 01 00 00       	jmp    c000f52b <CPU::detectFeatures()+0x3cb>
c000f3a1:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000f3ab:	e9 7b 01 00 00       	jmp    c000f52b <CPU::detectFeatures()+0x3cb>
c000f3b0:	56                   	push   esi
c000f3b1:	56                   	push   esi
c000f3b2:	68 43 e6 01 c0       	push   0xc001e643
c000f3b7:	55                   	push   ebp
c000f3b8:	e8 23 13 ff ff       	call   c00006e0 <strcmp>
c000f3bd:	83 c4 10             	add    esp,0x10
c000f3c0:	85 c0                	test   eax,eax
c000f3c2:	75 0f                	jne    c000f3d3 <CPU::detectFeatures()+0x273>
c000f3c4:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000f3ce:	e9 58 01 00 00       	jmp    c000f52b <CPU::detectFeatures()+0x3cb>
c000f3d3:	51                   	push   ecx
c000f3d4:	51                   	push   ecx
c000f3d5:	68 02 e6 01 c0       	push   0xc001e602
c000f3da:	55                   	push   ebp
c000f3db:	e8 00 13 ff ff       	call   c00006e0 <strcmp>
c000f3e0:	83 c4 10             	add    esp,0x10
c000f3e3:	85 c0                	test   eax,eax
c000f3e5:	75 0f                	jne    c000f3f6 <CPU::detectFeatures()+0x296>
c000f3e7:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000f3f1:	e9 35 01 00 00       	jmp    c000f52b <CPU::detectFeatures()+0x3cb>
c000f3f6:	52                   	push   edx
c000f3f7:	52                   	push   edx
c000f3f8:	68 50 e6 01 c0       	push   0xc001e650
c000f3fd:	55                   	push   ebp
c000f3fe:	e8 dd 12 ff ff       	call   c00006e0 <strcmp>
c000f403:	83 c4 10             	add    esp,0x10
c000f406:	85 c0                	test   eax,eax
c000f408:	75 0f                	jne    c000f419 <CPU::detectFeatures()+0x2b9>
c000f40a:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000f414:	e9 12 01 00 00       	jmp    c000f52b <CPU::detectFeatures()+0x3cb>
c000f419:	50                   	push   eax
c000f41a:	50                   	push   eax
c000f41b:	68 5d e6 01 c0       	push   0xc001e65d
c000f420:	55                   	push   ebp
c000f421:	e8 ba 12 ff ff       	call   c00006e0 <strcmp>
c000f426:	83 c4 10             	add    esp,0x10
c000f429:	85 c0                	test   eax,eax
c000f42b:	75 0f                	jne    c000f43c <CPU::detectFeatures()+0x2dc>
c000f42d:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000f437:	e9 ef 00 00 00       	jmp    c000f52b <CPU::detectFeatures()+0x3cb>
c000f43c:	50                   	push   eax
c000f43d:	50                   	push   eax
c000f43e:	68 6a e6 01 c0       	push   0xc001e66a
c000f443:	55                   	push   ebp
c000f444:	e8 97 12 ff ff       	call   c00006e0 <strcmp>
c000f449:	83 c4 10             	add    esp,0x10
c000f44c:	85 c0                	test   eax,eax
c000f44e:	75 0f                	jne    c000f45f <CPU::detectFeatures()+0x2ff>
c000f450:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000f45a:	e9 cc 00 00 00       	jmp    c000f52b <CPU::detectFeatures()+0x3cb>
c000f45f:	50                   	push   eax
c000f460:	50                   	push   eax
c000f461:	68 77 e6 01 c0       	push   0xc001e677
c000f466:	55                   	push   ebp
c000f467:	e8 74 12 ff ff       	call   c00006e0 <strcmp>
c000f46c:	83 c4 10             	add    esp,0x10
c000f46f:	85 c0                	test   eax,eax
c000f471:	75 0f                	jne    c000f482 <CPU::detectFeatures()+0x322>
c000f473:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000f47d:	e9 a9 00 00 00       	jmp    c000f52b <CPU::detectFeatures()+0x3cb>
c000f482:	50                   	push   eax
c000f483:	50                   	push   eax
c000f484:	68 84 e6 01 c0       	push   0xc001e684
c000f489:	55                   	push   ebp
c000f48a:	e8 51 12 ff ff       	call   c00006e0 <strcmp>
c000f48f:	83 c4 10             	add    esp,0x10
c000f492:	85 c0                	test   eax,eax
c000f494:	75 0f                	jne    c000f4a5 <CPU::detectFeatures()+0x345>
c000f496:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000f4a0:	e9 86 00 00 00       	jmp    c000f52b <CPU::detectFeatures()+0x3cb>
c000f4a5:	50                   	push   eax
c000f4a6:	50                   	push   eax
c000f4a7:	68 91 e6 01 c0       	push   0xc001e691
c000f4ac:	55                   	push   ebp
c000f4ad:	e8 2e 12 ff ff       	call   c00006e0 <strcmp>
c000f4b2:	83 c4 10             	add    esp,0x10
c000f4b5:	85 c0                	test   eax,eax
c000f4b7:	75 0c                	jne    c000f4c5 <CPU::detectFeatures()+0x365>
c000f4b9:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000f4c3:	eb 66                	jmp    c000f52b <CPU::detectFeatures()+0x3cb>
c000f4c5:	50                   	push   eax
c000f4c6:	50                   	push   eax
c000f4c7:	68 9e e6 01 c0       	push   0xc001e69e
c000f4cc:	55                   	push   ebp
c000f4cd:	e8 0e 12 ff ff       	call   c00006e0 <strcmp>
c000f4d2:	83 c4 10             	add    esp,0x10
c000f4d5:	85 c0                	test   eax,eax
c000f4d7:	75 0c                	jne    c000f4e5 <CPU::detectFeatures()+0x385>
c000f4d9:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000f4e3:	eb 46                	jmp    c000f52b <CPU::detectFeatures()+0x3cb>
c000f4e5:	57                   	push   edi
c000f4e6:	57                   	push   edi
c000f4e7:	68 ab e6 01 c0       	push   0xc001e6ab
c000f4ec:	55                   	push   ebp
c000f4ed:	e8 ee 11 ff ff       	call   c00006e0 <strcmp>
c000f4f2:	83 c4 10             	add    esp,0x10
c000f4f5:	85 c0                	test   eax,eax
c000f4f7:	74 e0                	je     c000f4d9 <CPU::detectFeatures()+0x379>
c000f4f9:	56                   	push   esi
c000f4fa:	56                   	push   esi
c000f4fb:	68 b8 e6 01 c0       	push   0xc001e6b8
c000f500:	55                   	push   ebp
c000f501:	e8 da 11 ff ff       	call   c00006e0 <strcmp>
c000f506:	83 c4 10             	add    esp,0x10
c000f509:	85 c0                	test   eax,eax
c000f50b:	74 cc                	je     c000f4d9 <CPU::detectFeatures()+0x379>
c000f50d:	51                   	push   ecx
c000f50e:	51                   	push   ecx
c000f50f:	68 c5 e6 01 c0       	push   0xc001e6c5
c000f514:	55                   	push   ebp
c000f515:	e8 c6 11 ff ff       	call   c00006e0 <strcmp>
c000f51a:	83 c4 10             	add    esp,0x10
c000f51d:	85 c0                	test   eax,eax
c000f51f:	74 b8                	je     c000f4d9 <CPU::detectFeatures()+0x379>
c000f521:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000f52b:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000f530:	0f 86 be 00 00 00    	jbe    c000f5f4 <CPU::detectFeatures()+0x494>
c000f536:	83 ec 0c             	sub    esp,0xc
c000f539:	68 80 00 00 00       	push   0x80
c000f53e:	e8 31 fb ff ff       	call   c000f074 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f543:	83 e0 01             	and    eax,0x1
c000f546:	c1 e0 06             	shl    eax,0x6
c000f549:	88 c2                	mov    dl,al
c000f54b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f551:	83 e0 bf             	and    eax,0xffffffbf
c000f554:	09 d0                	or     eax,edx
c000f556:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f55c:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000f563:	e8 0c fb ff ff       	call   c000f074 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f568:	83 e0 01             	and    eax,0x1
c000f56b:	c1 e0 04             	shl    eax,0x4
c000f56e:	88 c2                	mov    dl,al
c000f570:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f576:	83 e0 ef             	and    eax,0xffffffef
c000f579:	09 d0                	or     eax,edx
c000f57b:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f581:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000f588:	e8 e7 fa ff ff       	call   c000f074 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f58d:	c1 e0 07             	shl    eax,0x7
c000f590:	88 c2                	mov    dl,al
c000f592:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f598:	83 e0 7f             	and    eax,0x7f
c000f59b:	09 d0                	or     eax,edx
c000f59d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f5a3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000f5aa:	e8 f3 fa ff ff       	call   c000f0a2 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f5af:	83 e0 01             	and    eax,0x1
c000f5b2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f5b9:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f5bf:	83 e0 f7             	and    eax,0xfffffff7
c000f5c2:	09 d0                	or     eax,edx
c000f5c4:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f5ca:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000f5d1:	e8 cc fa ff ff       	call   c000f0a2 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f5d6:	83 c4 10             	add    esp,0x10
c000f5d9:	83 e0 01             	and    eax,0x1
c000f5dc:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f5e3:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f5e9:	83 e0 fb             	and    eax,0xfffffffb
c000f5ec:	09 d0                	or     eax,edx
c000f5ee:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f5f4:	83 ec 0c             	sub    esp,0xc
c000f5f7:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f5fb:	50                   	push   eax
c000f5fc:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f600:	50                   	push   eax
c000f601:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f605:	56                   	push   esi
c000f606:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f60a:	50                   	push   eax
c000f60b:	6a 01                	push   0x1
c000f60d:	e8 82 f9 ff ff       	call   c000ef94 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f612:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f616:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000f61c:	88 ca                	mov    dl,cl
c000f61e:	83 e0 f0             	and    eax,0xfffffff0
c000f621:	83 e2 0f             	and    edx,0xf
c000f624:	09 d0                	or     eax,edx
c000f626:	88 ca                	mov    dl,cl
c000f628:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000f62e:	c0 ea 04             	shr    dl,0x4
c000f631:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000f635:	0f b6 c2             	movzx  eax,dl
c000f638:	83 c4 20             	add    esp,0x20
c000f63b:	c1 e0 06             	shl    eax,0x6
c000f63e:	89 c7                	mov    edi,eax
c000f640:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000f646:	66 25 3f c0          	and    ax,0xc03f
c000f64a:	09 f8                	or     eax,edi
c000f64c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000f653:	89 c8                	mov    eax,ecx
c000f655:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000f65c:	c1 e8 08             	shr    eax,0x8
c000f65f:	83 e5 3f             	and    ebp,0x3f
c000f662:	83 e0 0f             	and    eax,0xf
c000f665:	89 c7                	mov    edi,eax
c000f667:	c1 e7 06             	shl    edi,0x6
c000f66a:	09 ef                	or     edi,ebp
c000f66c:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000f673:	89 fa                	mov    edx,edi
c000f675:	83 e5 c0             	and    ebp,0xffffffc0
c000f678:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000f67e:	88 c2                	mov    dl,al
c000f680:	c0 ea 02             	shr    dl,0x2
c000f683:	89 d7                	mov    edi,edx
c000f685:	09 ef                	or     edi,ebp
c000f687:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000f68d:	89 fa                	mov    edx,edi
c000f68f:	83 e5 cf             	and    ebp,0xffffffcf
c000f692:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000f698:	89 cf                	mov    edi,ecx
c000f69a:	c1 ef 0c             	shr    edi,0xc
c000f69d:	83 e7 03             	and    edi,0x3
c000f6a0:	c1 e7 04             	shl    edi,0x4
c000f6a3:	09 ef                	or     edi,ebp
c000f6a5:	3c 06                	cmp    al,0x6
c000f6a7:	89 fa                	mov    edx,edi
c000f6a9:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000f6af:	74 04                	je     c000f6b5 <CPU::detectFeatures()+0x555>
c000f6b1:	3c 0f                	cmp    al,0xf
c000f6b3:	75 5c                	jne    c000f711 <CPU::detectFeatures()+0x5b1>
c000f6b5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000f6b9:	89 cf                	mov    edi,ecx
c000f6bb:	c1 ef 10             	shr    edi,0x10
c000f6be:	c1 e7 04             	shl    edi,0x4
c000f6c1:	09 fa                	or     edx,edi
c000f6c3:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000f6c9:	0f b6 d2             	movzx  edx,dl
c000f6cc:	66 81 e7 3f c0       	and    di,0xc03f
c000f6d1:	c1 e2 06             	shl    edx,0x6
c000f6d4:	09 fa                	or     edx,edi
c000f6d6:	3c 0f                	cmp    al,0xf
c000f6d8:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000f6df:	75 30                	jne    c000f711 <CPU::detectFeatures()+0x5b1>
c000f6e1:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000f6e7:	c1 e9 14             	shr    ecx,0x14
c000f6ea:	83 e0 3f             	and    eax,0x3f
c000f6ed:	83 c1 0f             	add    ecx,0xf
c000f6f0:	88 ca                	mov    dl,cl
c000f6f2:	c0 e9 02             	shr    cl,0x2
c000f6f5:	c1 e2 06             	shl    edx,0x6
c000f6f8:	09 d0                	or     eax,edx
c000f6fa:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000f700:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000f706:	83 e0 c0             	and    eax,0xffffffc0
c000f709:	09 c1                	or     ecx,eax
c000f70b:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000f711:	83 ec 0c             	sub    esp,0xc
c000f714:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000f71b:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f71f:	50                   	push   eax
c000f720:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000f724:	55                   	push   ebp
c000f725:	56                   	push   esi
c000f726:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000f72a:	57                   	push   edi
c000f72b:	68 00 00 00 80       	push   0x80000000
c000f730:	e8 5f f8 ff ff       	call   c000ef94 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f735:	83 c4 20             	add    esp,0x20
c000f738:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000f740:	76 22                	jbe    c000f764 <CPU::detectFeatures()+0x604>
c000f742:	83 ec 0c             	sub    esp,0xc
c000f745:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f749:	50                   	push   eax
c000f74a:	55                   	push   ebp
c000f74b:	56                   	push   esi
c000f74c:	57                   	push   edi
c000f74d:	68 01 00 00 80       	push   0x80000001
c000f752:	e8 3d f8 ff ff       	call   c000ef94 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f757:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000f761:	83 c4 20             	add    esp,0x20
c000f764:	52                   	push   edx
c000f765:	52                   	push   edx
c000f766:	68 d1 e6 01 c0       	push   0xc001e6d1
c000f76b:	53                   	push   ebx
c000f76c:	e8 51 c3 ff ff       	call   c000bac2 <Device::setName(char const*)>
c000f771:	83 c4 10             	add    esp,0x10
c000f774:	eb 67                	jmp    c000f7dd <CPU::detectFeatures()+0x67d>
c000f776:	50                   	push   eax
c000f777:	50                   	push   eax
c000f778:	68 36 e6 01 c0       	push   0xc001e636
c000f77d:	55                   	push   ebp
c000f77e:	e8 7d 0e ff ff       	call   c0000600 <strcpy>
c000f783:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f78d:	e8 31 0a ff ff       	call   c00001c3 <is486>
c000f792:	83 c4 10             	add    esp,0x10
c000f795:	85 c0                	test   eax,eax
c000f797:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f79d:	74 1d                	je     c000f7bc <CPU::detectFeatures()+0x65c>
c000f79f:	83 c8 07             	or     eax,0x7
c000f7a2:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f7a8:	0f 20 c0             	mov    eax,cr0
c000f7ab:	83 e0 14             	and    eax,0x14
c000f7ae:	83 f8 04             	cmp    eax,0x4
c000f7b1:	75 0e                	jne    c000f7c1 <CPU::detectFeatures()+0x661>
c000f7b3:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000f7ba:	eb 21                	jmp    c000f7dd <CPU::detectFeatures()+0x67d>
c000f7bc:	83 e0 f8             	and    eax,0xfffffff8
c000f7bf:	eb e1                	jmp    c000f7a2 <CPU::detectFeatures()+0x642>
c000f7c1:	e8 d8 09 ff ff       	call   c000019e <hasLegacyFPU>
c000f7c6:	83 e0 01             	and    eax,0x1
c000f7c9:	8d 14 00             	lea    edx,[eax+eax*1]
c000f7cc:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f7d2:	83 e0 fd             	and    eax,0xfffffffd
c000f7d5:	09 d0                	or     eax,edx
c000f7d7:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f7dd:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000f7e4:	74 0e                	je     c000f7f4 <CPU::detectFeatures()+0x694>
c000f7e6:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c000f7eb:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000f7f2:	eb 20                	jmp    c000f814 <CPU::detectFeatures()+0x6b4>
c000f7f4:	e8 a5 09 ff ff       	call   c000019e <hasLegacyFPU>
c000f7f9:	83 e0 01             	and    eax,0x1
c000f7fc:	8d 14 00             	lea    edx,[eax+eax*1]
c000f7ff:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f805:	83 e0 fd             	and    eax,0xfffffffd
c000f808:	09 d0                	or     eax,edx
c000f80a:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f810:	a8 02                	test   al,0x2
c000f812:	75 d2                	jne    c000f7e6 <CPU::detectFeatures()+0x686>
c000f814:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000f81b:	83 c4 2c             	add    esp,0x2c
c000f81e:	5b                   	pop    ebx
c000f81f:	5e                   	pop    esi
c000f820:	5f                   	pop    edi
c000f821:	5d                   	pop    ebp
c000f822:	c3                   	ret    
c000f823:	90                   	nop

c000f824 <CPU::setupSMEP()>:
c000f824:	0f 20 e0             	mov    eax,cr4
c000f827:	0d 00 00 10 00       	or     eax,0x100000
c000f82c:	0f 22 e0             	mov    cr4,eax
c000f82f:	c3                   	ret    

c000f830 <CPU::setupUMIP()>:
c000f830:	0f 20 e0             	mov    eax,cr4
c000f833:	80 cc 08             	or     ah,0x8
c000f836:	0f 22 e0             	mov    cr4,eax
c000f839:	c3                   	ret    

c000f83a <CPU::setupTSC()>:
c000f83a:	0f 20 e0             	mov    eax,cr4
c000f83d:	83 c8 04             	or     eax,0x4
c000f840:	0f 22 e0             	mov    cr4,eax
c000f843:	c3                   	ret    

c000f844 <CPU::setupLargePages()>:
c000f844:	0f 20 e0             	mov    eax,cr4
c000f847:	83 c8 10             	or     eax,0x10
c000f84a:	0f 22 e0             	mov    cr4,eax
c000f84d:	c3                   	ret    

c000f84e <CPU::setupPAT()>:
c000f84e:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c000f853:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000f85a:	74 2c                	je     c000f888 <CPU::setupPAT()+0x3a>
c000f85c:	53                   	push   ebx
c000f85d:	83 ec 10             	sub    esp,0x10
c000f860:	68 77 02 00 00       	push   0x277
c000f865:	50                   	push   eax
c000f866:	e8 87 75 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c000f86b:	83 e2 f8             	and    edx,0xfffffff8
c000f86e:	83 ca 01             	or     edx,0x1
c000f871:	52                   	push   edx
c000f872:	50                   	push   eax
c000f873:	68 77 02 00 00       	push   0x277
c000f878:	ff 35 58 0d 02 c0    	push   DWORD PTR ds:0xc0020d58
c000f87e:	e8 9b 75 ff ff       	call   c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>
c000f883:	83 c4 28             	add    esp,0x28
c000f886:	5b                   	pop    ebx
c000f887:	c3                   	ret    
c000f888:	c3                   	ret    
c000f889:	90                   	nop

c000f88a <CPU::setupMTRR()>:
c000f88a:	c3                   	ret    
c000f88b:	90                   	nop

c000f88c <CPU::setupGlobalPages()>:
c000f88c:	0f 20 e0             	mov    eax,cr4
c000f88f:	0c 80                	or     al,0x80
c000f891:	0f 22 e0             	mov    cr4,eax
c000f894:	c3                   	ret    
c000f895:	90                   	nop

c000f896 <CPU::allowUsermodeDataAccess()>:
c000f896:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f89a:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f8a1:	74 03                	je     c000f8a6 <CPU::allowUsermodeDataAccess()+0x10>
c000f8a3:	0f 01 cb             	stac   
c000f8a6:	c3                   	ret    
c000f8a7:	90                   	nop

c000f8a8 <CPU::prohibitUsermodeDataAccess()>:
c000f8a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f8ac:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f8b3:	74 03                	je     c000f8b8 <CPU::prohibitUsermodeDataAccess()+0x10>
c000f8b5:	0f 01 ca             	clac   
c000f8b8:	c3                   	ret    
c000f8b9:	90                   	nop

c000f8ba <CPU::setupSMAP()>:
c000f8ba:	0f 20 e0             	mov    eax,cr4
c000f8bd:	0d 00 00 20 00       	or     eax,0x200000
c000f8c2:	0f 22 e0             	mov    cr4,eax
c000f8c5:	eb e1                	jmp    c000f8a8 <CPU::prohibitUsermodeDataAccess()>
c000f8c7:	90                   	nop

c000f8c8 <CPU::setupFeatures()>:
c000f8c8:	53                   	push   ebx
c000f8c9:	83 ec 08             	sub    esp,0x8
c000f8cc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f8d0:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000f8d7:	74 18                	je     c000f8f1 <CPU::setupFeatures()+0x29>
c000f8d9:	83 ec 0c             	sub    esp,0xc
c000f8dc:	68 dd e6 01 c0       	push   0xc001e6dd
c000f8e1:	e8 12 ac ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c000f8e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f8e9:	e8 42 ff ff ff       	call   c000f830 <CPU::setupUMIP()>
c000f8ee:	83 c4 10             	add    esp,0x10
c000f8f1:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000f8f8:	74 18                	je     c000f912 <CPU::setupFeatures()+0x4a>
c000f8fa:	83 ec 0c             	sub    esp,0xc
c000f8fd:	68 e7 e6 01 c0       	push   0xc001e6e7
c000f902:	e8 f1 ab ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c000f907:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f90a:	e8 2b ff ff ff       	call   c000f83a <CPU::setupTSC()>
c000f90f:	83 c4 10             	add    esp,0x10
c000f912:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000f919:	74 18                	je     c000f933 <CPU::setupFeatures()+0x6b>
c000f91b:	83 ec 0c             	sub    esp,0xc
c000f91e:	68 f0 e6 01 c0       	push   0xc001e6f0
c000f923:	e8 d0 ab ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c000f928:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f92b:	e8 14 ff ff ff       	call   c000f844 <CPU::setupLargePages()>
c000f930:	83 c4 10             	add    esp,0x10
c000f933:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000f93a:	74 18                	je     c000f954 <CPU::setupFeatures()+0x8c>
c000f93c:	83 ec 0c             	sub    esp,0xc
c000f93f:	68 f9 e6 01 c0       	push   0xc001e6f9
c000f944:	e8 af ab ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c000f949:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f94c:	e8 3b ff ff ff       	call   c000f88c <CPU::setupGlobalPages()>
c000f951:	83 c4 10             	add    esp,0x10
c000f954:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000f95b:	74 18                	je     c000f975 <CPU::setupFeatures()+0xad>
c000f95d:	83 ec 0c             	sub    esp,0xc
c000f960:	68 0b e7 01 c0       	push   0xc001e70b
c000f965:	e8 8e ab ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c000f96a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f96d:	e8 dc fe ff ff       	call   c000f84e <CPU::setupPAT()>
c000f972:	83 c4 10             	add    esp,0x10
c000f975:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000f97c:	74 11                	je     c000f98f <CPU::setupFeatures()+0xc7>
c000f97e:	c7 44 24 10 14 e7 01 c0 	mov    DWORD PTR [esp+0x10],0xc001e714
c000f986:	83 c4 08             	add    esp,0x8
c000f989:	5b                   	pop    ebx
c000f98a:	e9 69 ab ff ff       	jmp    c000a4f8 <Dbg::kprintf(char const*, ...)>
c000f98f:	83 c4 08             	add    esp,0x8
c000f992:	5b                   	pop    ebx
c000f993:	c3                   	ret    

c000f994 <CPU::open(int, int, void*)>:
c000f994:	57                   	push   edi
c000f995:	56                   	push   esi
c000f996:	53                   	push   ebx
c000f997:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f99b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f99f:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000f9a5:	83 ec 0c             	sub    esp,0xc
c000f9a8:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000f9ae:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000f9b4:	50                   	push   eax
c000f9b5:	e8 22 77 ff ff       	call   c00070dc <GDT::setup()>
c000f9ba:	83 c4 0c             	add    esp,0xc
c000f9bd:	6a 00                	push   0x0
c000f9bf:	68 ef be ad de       	push   0xdeadbeef
c000f9c4:	57                   	push   edi
c000f9c5:	e8 62 92 ff ff       	call   c0008c2c <TSS::setup(unsigned long, unsigned long)>
c000f9ca:	89 3c 24             	mov    DWORD PTR [esp],edi
c000f9cd:	e8 3a 92 ff ff       	call   c0008c0c <TSS::flush()>
c000f9d2:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000f9d8:	89 04 24             	mov    DWORD PTR [esp],eax
c000f9db:	e8 4a 79 ff ff       	call   c000732a <IDT::setup()>
c000f9e0:	b8 00 04 00 00       	mov    eax,0x400
c000f9e5:	0f 23 f8             	mov    db7,eax
c000f9e8:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000f9f2:	e8 be 80 ff ff       	call   c0007ab5 <Phys::allocatePage()>
c000f9f7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000f9fd:	89 30                	mov    DWORD PTR [eax],esi
c000f9ff:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000fa05:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000fa08:	58                   	pop    eax
c000fa09:	5a                   	pop    edx
c000fa0a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000fa10:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fa14:	e8 fd a1 ff ff       	call   c0009c16 <VAS::setCPUSpecific(unsigned long)>
c000fa19:	c7 04 24 1e e7 01 c0 	mov    DWORD PTR [esp],0xc001e71e
c000fa20:	e8 c6 00 00 00       	call   c000faeb <KeSetBootMessage(char const*)>
c000fa25:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa28:	e8 33 f7 ff ff       	call   c000f160 <CPU::detectFeatures()>
c000fa2d:	c7 04 24 41 e7 01 c0 	mov    DWORD PTR [esp],0xc001e741
c000fa34:	e8 b2 00 00 00       	call   c000faeb <KeSetBootMessage(char const*)>
c000fa39:	e8 ea 5d 00 00       	call   c0015828 <HalInitialise()>
c000fa3e:	a1 70 0d 02 c0       	mov    eax,ds:0xc0020d70
c000fa43:	83 e0 10             	and    eax,0x10
c000fa46:	83 f8 01             	cmp    eax,0x1
c000fa49:	19 c0                	sbb    eax,eax
c000fa4b:	83 e0 46             	and    eax,0x46
c000fa4e:	83 c0 1e             	add    eax,0x1e
c000fa51:	89 04 24             	mov    DWORD PTR [esp],eax
c000fa54:	e8 60 d7 ff ff       	call   c000d1b9 <setupTimer(int)>
c000fa59:	83 c4 10             	add    esp,0x10
c000fa5c:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000fa62:	f6 05 70 0d 02 c0 20 	test   BYTE PTR ds:0xc0020d70,0x20
c000fa69:	74 0c                	je     c000fa77 <CPU::open(int, int, void*)+0xe3>
c000fa6b:	83 ec 0c             	sub    esp,0xc
c000fa6e:	53                   	push   ebx
c000fa6f:	e8 54 fe ff ff       	call   c000f8c8 <CPU::setupFeatures()>
c000fa74:	83 c4 10             	add    esp,0x10
c000fa77:	5b                   	pop    ebx
c000fa78:	31 c0                	xor    eax,eax
c000fa7a:	5e                   	pop    esi
c000fa7b:	5f                   	pop    edi
c000fa7c:	c3                   	ret    

c000fa7d <KeDisplaySplashScreen()>:
c000fa7d:	55                   	push   ebp
c000fa7e:	bd 05 00 00 00       	mov    ebp,0x5
c000fa83:	57                   	push   edi
c000fa84:	bf 40 fa 01 c0       	mov    edi,0xc001fa40
c000fa89:	56                   	push   esi
c000fa8a:	be 0a 00 00 00       	mov    esi,0xa
c000fa8f:	53                   	push   ebx
c000fa90:	31 db                	xor    ebx,ebx
c000fa92:	83 ec 0c             	sub    esp,0xc
c000fa95:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000fa98:	84 c0                	test   al,al
c000fa9a:	74 47                	je     c000fae3 <KeDisplaySplashScreen()+0x66>
c000fa9c:	80 bb 76 fa 01 c0 db 	cmp    BYTE PTR [ebx-0x3ffe058a],0xdb
c000faa3:	75 13                	jne    c000fab8 <KeDisplaySplashScreen()+0x3b>
c000faa5:	0f b6 93 75 fa 01 c0 	movzx  edx,BYTE PTR [ebx-0x3ffe058b]
c000faac:	83 e2 fe             	and    edx,0xfffffffe
c000faaf:	81 fa ba 00 00 00    	cmp    edx,0xba
c000fab5:	75 01                	jne    c000fab8 <KeDisplaySplashScreen()+0x3b>
c000fab7:	46                   	inc    esi
c000fab8:	3c 0d                	cmp    al,0xd
c000faba:	74 24                	je     c000fae0 <KeDisplaySplashScreen()+0x63>
c000fabc:	3c 0a                	cmp    al,0xa
c000fabe:	75 0a                	jne    c000faca <KeDisplaySplashScreen()+0x4d>
c000fac0:	45                   	inc    ebp
c000fac1:	be 0a 00 00 00       	mov    esi,0xa
c000fac6:	31 db                	xor    ebx,ebx
c000fac8:	eb 16                	jmp    c000fae0 <KeDisplaySplashScreen()+0x63>
c000faca:	83 ec 0c             	sub    esp,0xc
c000facd:	8d 14 33             	lea    edx,[ebx+esi*1]
c000fad0:	55                   	push   ebp
c000fad1:	43                   	inc    ebx
c000fad2:	52                   	push   edx
c000fad3:	6a 00                	push   0x0
c000fad5:	6a 0e                	push   0xe
c000fad7:	50                   	push   eax
c000fad8:	e8 af 69 00 00       	call   c001648c <HalConsoleWriteCharacter(char, int, int, int, int)>
c000fadd:	83 c4 20             	add    esp,0x20
c000fae0:	47                   	inc    edi
c000fae1:	eb b2                	jmp    c000fa95 <KeDisplaySplashScreen()+0x18>
c000fae3:	83 c4 0c             	add    esp,0xc
c000fae6:	5b                   	pop    ebx
c000fae7:	5e                   	pop    esi
c000fae8:	5f                   	pop    edi
c000fae9:	5d                   	pop    ebp
c000faea:	c3                   	ret    

c000faeb <KeSetBootMessage(char const*)>:
c000faeb:	57                   	push   edi
c000faec:	56                   	push   esi
c000faed:	53                   	push   ebx
c000faee:	81 ec a4 00 00 00    	sub    esp,0xa4
c000faf4:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000fafb:	68 9e 00 00 00       	push   0x9e
c000fb00:	6a 00                	push   0x0
c000fb02:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000fb06:	56                   	push   esi
c000fb07:	e8 c4 09 ff ff       	call   c00004d0 <memset>
c000fb0c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb0f:	e8 2c 0a ff ff       	call   c0000540 <strlen>
c000fb14:	ba 50 00 00 00       	mov    edx,0x50
c000fb19:	83 c4 10             	add    esp,0x10
c000fb1c:	29 c2                	sub    edx,eax
c000fb1e:	31 c9                	xor    ecx,ecx
c000fb20:	83 e2 fe             	and    edx,0xfffffffe
c000fb23:	01 f2                	add    edx,esi
c000fb25:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000fb2a:	84 c0                	test   al,al
c000fb2c:	74 0a                	je     c000fb38 <KeSetBootMessage(char const*)+0x4d>
c000fb2e:	80 cc 0f             	or     ah,0xf
c000fb31:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000fb35:	41                   	inc    ecx
c000fb36:	eb ed                	jmp    c000fb25 <KeSetBootMessage(char const*)+0x3a>
c000fb38:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000fb3d:	b9 9e 00 00 00       	mov    ecx,0x9e
c000fb42:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fb44:	81 c4 a0 00 00 00    	add    esp,0xa0
c000fb4a:	5b                   	pop    ebx
c000fb4b:	5e                   	pop    esi
c000fb4c:	5f                   	pop    edi
c000fb4d:	c3                   	ret    

c000fb4e <EnvVarContainer::getEnv(char const*)>:
c000fb4e:	57                   	push   edi
c000fb4f:	56                   	push   esi
c000fb50:	53                   	push   ebx
c000fb51:	31 db                	xor    ebx,ebx
c000fb53:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fb57:	39 1e                	cmp    DWORD PTR [esi],ebx
c000fb59:	7e 2b                	jle    c000fb86 <EnvVarContainer::getEnv(char const*)+0x38>
c000fb5b:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000fb62:	50                   	push   eax
c000fb63:	50                   	push   eax
c000fb64:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fb67:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000fb6a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fb6e:	e8 6d 0b ff ff       	call   c00006e0 <strcmp>
c000fb73:	83 c4 10             	add    esp,0x10
c000fb76:	85 c0                	test   eax,eax
c000fb78:	75 09                	jne    c000fb83 <EnvVarContainer::getEnv(char const*)+0x35>
c000fb7a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fb7d:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000fb81:	eb 05                	jmp    c000fb88 <EnvVarContainer::getEnv(char const*)+0x3a>
c000fb83:	43                   	inc    ebx
c000fb84:	eb d1                	jmp    c000fb57 <EnvVarContainer::getEnv(char const*)+0x9>
c000fb86:	31 c0                	xor    eax,eax
c000fb88:	5b                   	pop    ebx
c000fb89:	5e                   	pop    esi
c000fb8a:	5f                   	pop    edi
c000fb8b:	c3                   	ret    

c000fb8c <EnvVarContainer::setEnv(char const*, char const*)>:
c000fb8c:	55                   	push   ebp
c000fb8d:	57                   	push   edi
c000fb8e:	56                   	push   esi
c000fb8f:	53                   	push   ebx
c000fb90:	83 ec 28             	sub    esp,0x28
c000fb93:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000fb97:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000fb9b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000fb9f:	56                   	push   esi
c000fba0:	e8 9b 09 ff ff       	call   c0000540 <strlen>
c000fba5:	40                   	inc    eax
c000fba6:	89 04 24             	mov    DWORD PTR [esp],eax
c000fba9:	e8 0b 7c ff ff       	call   c00077b9 <malloc>
c000fbae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbb1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fbb5:	e8 86 09 ff ff       	call   c0000540 <strlen>
c000fbba:	40                   	inc    eax
c000fbbb:	89 04 24             	mov    DWORD PTR [esp],eax
c000fbbe:	e8 f6 7b ff ff       	call   c00077b9 <malloc>
c000fbc3:	89 34 24             	mov    DWORD PTR [esp],esi
c000fbc6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fbca:	e8 71 09 ff ff       	call   c0000540 <strlen>
c000fbcf:	83 c4 0c             	add    esp,0xc
c000fbd2:	40                   	inc    eax
c000fbd3:	50                   	push   eax
c000fbd4:	6a 00                	push   0x0
c000fbd6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fbda:	e8 f1 08 ff ff       	call   c00004d0 <memset>
c000fbdf:	89 34 24             	mov    DWORD PTR [esp],esi
c000fbe2:	e8 59 09 ff ff       	call   c0000540 <strlen>
c000fbe7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fbeb:	8d 48 01             	lea    ecx,[eax+0x1]
c000fbee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fbf0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbf3:	89 de                	mov    esi,ebx
c000fbf5:	e8 46 09 ff ff       	call   c0000540 <strlen>
c000fbfa:	83 c4 0c             	add    esp,0xc
c000fbfd:	40                   	inc    eax
c000fbfe:	50                   	push   eax
c000fbff:	6a 00                	push   0x0
c000fc01:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fc05:	e8 c6 08 ff ff       	call   c00004d0 <memset>
c000fc0a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc0d:	e8 2e 09 ff ff       	call   c0000540 <strlen>
c000fc12:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fc16:	8d 48 01             	lea    ecx,[eax+0x1]
c000fc19:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc1b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fc1e:	40                   	inc    eax
c000fc1f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fc22:	c1 e0 03             	shl    eax,0x3
c000fc25:	5a                   	pop    edx
c000fc26:	59                   	pop    ecx
c000fc27:	50                   	push   eax
c000fc28:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000fc2b:	e8 75 7b ff ff       	call   c00077a5 <realloc>
c000fc30:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fc34:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fc37:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fc3a:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fc3e:	b9 08 00 00 00       	mov    ecx,0x8
c000fc43:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc45:	83 c4 2c             	add    esp,0x2c
c000fc48:	5b                   	pop    ebx
c000fc49:	5e                   	pop    esi
c000fc4a:	5f                   	pop    edi
c000fc4b:	5d                   	pop    ebp
c000fc4c:	c3                   	ret    
c000fc4d:	90                   	nop

c000fc4e <EnvVarContainer::deleteEnv(char const*)>:
c000fc4e:	c3                   	ret    
c000fc4f:	90                   	nop

c000fc50 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000fc50:	55                   	push   ebp
c000fc51:	57                   	push   edi
c000fc52:	56                   	push   esi
c000fc53:	53                   	push   ebx
c000fc54:	81 ec 38 01 00 00    	sub    esp,0x138
c000fc5a:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000fc61:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000fc68:	68 14 01 00 00       	push   0x114
c000fc6d:	e8 47 7b ff ff       	call   c00077b9 <malloc>
c000fc72:	83 c4 0c             	add    esp,0xc
c000fc75:	89 c3                	mov    ebx,eax
c000fc77:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fc7a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fc81:	50                   	push   eax
c000fc82:	e8 e7 ad ff ff       	call   c000aa6e <File::File(char const*, Process*)>
c000fc87:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc8a:	e8 0d b1 ff ff       	call   c000ad9c <File::exists()>
c000fc8f:	83 c4 10             	add    esp,0x10
c000fc92:	84 c0                	test   al,al
c000fc94:	75 31                	jne    c000fcc7 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000fc96:	50                   	push   eax
c000fc97:	50                   	push   eax
c000fc98:	6a 12                	push   0x12
c000fc9a:	53                   	push   ebx
c000fc9b:	e8 8e ae ff ff       	call   c000ab2e <File::open(FileOpenMode)>
c000fca0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fca2:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000fca5:	89 34 24             	mov    DWORD PTR [esp],esi
c000fca8:	e8 93 08 ff ff       	call   c0000540 <strlen>
c000fcad:	5a                   	pop    edx
c000fcae:	31 d2                	xor    edx,edx
c000fcb0:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fcb4:	51                   	push   ecx
c000fcb5:	56                   	push   esi
c000fcb6:	52                   	push   edx
c000fcb7:	50                   	push   eax
c000fcb8:	53                   	push   ebx
c000fcb9:	ff d7                	call   edi
c000fcbb:	83 c4 14             	add    esp,0x14
c000fcbe:	53                   	push   ebx
c000fcbf:	e8 c8 ae ff ff       	call   c000ab8c <File::close()>
c000fcc4:	83 c4 10             	add    esp,0x10
c000fcc7:	56                   	push   esi
c000fcc8:	31 f6                	xor    esi,esi
c000fcca:	68 00 01 00 00       	push   0x100
c000fccf:	6a 00                	push   0x0
c000fcd1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fcd5:	50                   	push   eax
c000fcd6:	e8 f5 07 ff ff       	call   c00004d0 <memset>
c000fcdb:	5f                   	pop    edi
c000fcdc:	58                   	pop    eax
c000fcdd:	6a 01                	push   0x1
c000fcdf:	53                   	push   ebx
c000fce0:	e8 49 ae ff ff       	call   c000ab2e <File::open(FileOpenMode)>
c000fce5:	83 c4 10             	add    esp,0x10
c000fce8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fcf0:	83 ec 0c             	sub    esp,0xc
c000fcf3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fcf5:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fcf9:	51                   	push   ecx
c000fcfa:	8d 54 24 23          	lea    edx,[esp+0x23]
c000fcfe:	52                   	push   edx
c000fcff:	6a 00                	push   0x0
c000fd01:	6a 01                	push   0x1
c000fd03:	53                   	push   ebx
c000fd04:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fd07:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000fd0b:	83 c4 20             	add    esp,0x20
c000fd0e:	3c 0d                	cmp    al,0xd
c000fd10:	0f 84 09 01 00 00    	je     c000fe1f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fd16:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fd1b:	0f 84 ef 00 00 00    	je     c000fe10 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fd21:	3c 0a                	cmp    al,0xa
c000fd23:	74 13                	je     c000fd38 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fd25:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fd2a:	74 0c                	je     c000fd38 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fd2c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000fd32:	0f 8e d8 00 00 00    	jle    c000fe10 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fd38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd3c:	83 ec 0c             	sub    esp,0xc
c000fd3f:	8d 78 01             	lea    edi,[eax+0x1]
c000fd42:	57                   	push   edi
c000fd43:	e8 71 7a ff ff       	call   c00077b9 <malloc>
c000fd48:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000fd4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fd50:	8d 56 04             	lea    edx,[esi+0x4]
c000fd53:	89 14 24             	mov    DWORD PTR [esp],edx
c000fd56:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fd5a:	e8 5a 7a ff ff       	call   c00077b9 <malloc>
c000fd5f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000fd63:	83 c4 0c             	add    esp,0xc
c000fd66:	57                   	push   edi
c000fd67:	6a 00                	push   0x0
c000fd69:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fd6d:	e8 5e 07 ff ff       	call   c00004d0 <memset>
c000fd72:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fd76:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000fd7a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000fd7e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd80:	83 c4 0c             	add    esp,0xc
c000fd83:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fd87:	52                   	push   edx
c000fd88:	6a 00                	push   0x0
c000fd8a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fd8e:	e8 3d 07 ff ff       	call   c00004d0 <memset>
c000fd93:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fd97:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000fd9b:	89 34 24             	mov    DWORD PTR [esp],esi
c000fd9e:	e8 9d 07 ff ff       	call   c0000540 <strlen>
c000fda3:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000fda7:	89 c1                	mov    ecx,eax
c000fda9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fdab:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fdae:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000fdb1:	40                   	inc    eax
c000fdb2:	83 c4 10             	add    esp,0x10
c000fdb5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fdb8:	85 d2                	test   edx,edx
c000fdba:	75 0c                	jne    c000fdc8 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c000fdbc:	83 ec 0c             	sub    esp,0xc
c000fdbf:	6a 08                	push   0x8
c000fdc1:	e8 f3 79 ff ff       	call   c00077b9 <malloc>
c000fdc6:	eb 0c                	jmp    c000fdd4 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c000fdc8:	c1 e0 03             	shl    eax,0x3
c000fdcb:	51                   	push   ecx
c000fdcc:	51                   	push   ecx
c000fdcd:	50                   	push   eax
c000fdce:	52                   	push   edx
c000fdcf:	e8 d1 79 ff ff       	call   c00077a5 <realloc>
c000fdd4:	83 c4 10             	add    esp,0x10
c000fdd7:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fdda:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fddd:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000fde0:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fde4:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fde8:	b9 08 00 00 00       	mov    ecx,0x8
c000fded:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fdef:	31 f6                	xor    esi,esi
c000fdf1:	50                   	push   eax
c000fdf2:	68 00 01 00 00       	push   0x100
c000fdf7:	6a 00                	push   0x0
c000fdf9:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fdfd:	50                   	push   eax
c000fdfe:	e8 cd 06 ff ff       	call   c00004d0 <memset>
c000fe03:	83 c4 10             	add    esp,0x10
c000fe06:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fe0e:	eb 0f                	jmp    c000fe1f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fe10:	3c 3d                	cmp    al,0x3d
c000fe12:	74 07                	je     c000fe1b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c000fe14:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c000fe18:	46                   	inc    esi
c000fe19:	eb 04                	jmp    c000fe1f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fe1b:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000fe1f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fe24:	0f 85 c6 fe ff ff    	jne    c000fcf0 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000fe2a:	81 c4 2c 01 00 00    	add    esp,0x12c
c000fe30:	5b                   	pop    ebx
c000fe31:	5e                   	pop    esi
c000fe32:	5f                   	pop    edi
c000fe33:	5d                   	pop    ebp
c000fe34:	c3                   	ret    
c000fe35:	90                   	nop

c000fe36 <EnvVarContainer::__loadSystem()>:
c000fe36:	83 ec 10             	sub    esp,0x10
c000fe39:	68 a0 fb 01 c0       	push   0xc001fba0
c000fe3e:	68 84 e7 01 c0       	push   0xc001e784
c000fe43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe47:	e8 04 fe ff ff       	call   c000fc50 <EnvVarContainer::loadFrom(char const*, char const*)>
c000fe4c:	83 c4 1c             	add    esp,0x1c
c000fe4f:	c3                   	ret    

c000fe50 <EnvVarContainer::__loadUser()>:
c000fe50:	c3                   	ret    
c000fe51:	90                   	nop

c000fe52 <EnvVarContainer::EnvVarContainer(Process*)>:
c000fe52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe56:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000fe5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe60:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe64:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000fe67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe6b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000fe72:	90                   	nop
c000fe73:	c3                   	ret    

c000fe74 <EnvVarContainer::~EnvVarContainer()>:
c000fe74:	83 ec 0c             	sub    esp,0xc
c000fe77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe7b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe7e:	85 c0                	test   eax,eax
c000fe80:	74 1d                	je     c000fe9f <EnvVarContainer::~EnvVarContainer()+0x2b>
c000fe82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe86:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe88:	85 c0                	test   eax,eax
c000fe8a:	74 13                	je     c000fe9f <EnvVarContainer::~EnvVarContainer()+0x2b>
c000fe8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe90:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe93:	83 ec 0c             	sub    esp,0xc
c000fe96:	50                   	push   eax
c000fe97:	e8 4d 79 ff ff       	call   c00077e9 <free>
c000fe9c:	83 c4 10             	add    esp,0x10
c000fe9f:	90                   	nop
c000fea0:	83 c4 0c             	add    esp,0xc
c000fea3:	c3                   	ret    

c000fea4 <Krnl::getEnv(Process*, char const*)>:
c000fea4:	53                   	push   ebx
c000fea5:	83 ec 08             	sub    esp,0x8
c000fea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000feac:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000feb0:	39 05 30 40 02 c0    	cmp    DWORD PTR ds:0xc0024030,eax
c000feb6:	74 04                	je     c000febc <Krnl::getEnv(Process*, char const*)+0x18>
c000feb8:	85 c0                	test   eax,eax
c000feba:	75 0b                	jne    c000fec7 <Krnl::getEnv(Process*, char const*)+0x23>
c000febc:	a1 d0 37 02 c0       	mov    eax,ds:0xc00237d0
c000fec1:	85 c0                	test   eax,eax
c000fec3:	75 19                	jne    c000fede <Krnl::getEnv(Process*, char const*)+0x3a>
c000fec5:	eb 27                	jmp    c000feee <Krnl::getEnv(Process*, char const*)+0x4a>
c000fec7:	52                   	push   edx
c000fec8:	52                   	push   edx
c000fec9:	53                   	push   ebx
c000feca:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000fed0:	e8 79 fc ff ff       	call   c000fb4e <EnvVarContainer::getEnv(char const*)>
c000fed5:	83 c4 10             	add    esp,0x10
c000fed8:	85 c0                	test   eax,eax
c000feda:	75 28                	jne    c000ff04 <Krnl::getEnv(Process*, char const*)+0x60>
c000fedc:	eb de                	jmp    c000febc <Krnl::getEnv(Process*, char const*)+0x18>
c000fede:	52                   	push   edx
c000fedf:	52                   	push   edx
c000fee0:	53                   	push   ebx
c000fee1:	50                   	push   eax
c000fee2:	e8 67 fc ff ff       	call   c000fb4e <EnvVarContainer::getEnv(char const*)>
c000fee7:	83 c4 10             	add    esp,0x10
c000feea:	85 c0                	test   eax,eax
c000feec:	75 16                	jne    c000ff04 <Krnl::getEnv(Process*, char const*)+0x60>
c000feee:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000fef2:	a1 d4 37 02 c0       	mov    eax,ds:0xc00237d4
c000fef7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fefb:	83 c4 08             	add    esp,0x8
c000fefe:	5b                   	pop    ebx
c000feff:	e9 4a fc ff ff       	jmp    c000fb4e <EnvVarContainer::getEnv(char const*)>
c000ff04:	83 c4 08             	add    esp,0x8
c000ff07:	5b                   	pop    ebx
c000ff08:	c3                   	ret    

c000ff09 <Krnl::setEnvSystem(char const*, char const*)>:
c000ff09:	83 ec 10             	sub    esp,0x10
c000ff0c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff10:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff14:	ff 35 d4 37 02 c0    	push   DWORD PTR ds:0xc00237d4
c000ff1a:	e8 6d fc ff ff       	call   c000fb8c <EnvVarContainer::setEnv(char const*, char const*)>
c000ff1f:	83 c4 1c             	add    esp,0x1c
c000ff22:	c3                   	ret    

c000ff23 <Krnl::setEnvUser(char const*, char const*)>:
c000ff23:	a1 d0 37 02 c0       	mov    eax,ds:0xc00237d0
c000ff28:	85 c0                	test   eax,eax
c000ff2a:	74 15                	je     c000ff41 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c000ff2c:	83 ec 10             	sub    esp,0x10
c000ff2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff33:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff37:	50                   	push   eax
c000ff38:	e8 4f fc ff ff       	call   c000fb8c <EnvVarContainer::setEnv(char const*, char const*)>
c000ff3d:	83 c4 1c             	add    esp,0x1c
c000ff40:	c3                   	ret    
c000ff41:	c3                   	ret    

c000ff42 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c000ff42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff46:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000ff4c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ff50:	e9 37 fc ff ff       	jmp    c000fb8c <EnvVarContainer::setEnv(char const*, char const*)>

c000ff55 <Krnl::deleteEnvSystem(char const*)>:
c000ff55:	c3                   	ret    

c000ff56 <Krnl::deleteEnvUser(char const*)>:
c000ff56:	c3                   	ret    

c000ff57 <Krnl::deleteEnvProcess(Process*, char const*)>:
c000ff57:	c3                   	ret    

c000ff58 <Krnl::newProcessEnv(Process*)>:
c000ff58:	83 ec 28             	sub    esp,0x28
c000ff5b:	6a 0c                	push   0xc
c000ff5d:	e8 57 78 ff ff       	call   c00077b9 <malloc>
c000ff62:	5a                   	pop    edx
c000ff63:	59                   	pop    ecx
c000ff64:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ff68:	50                   	push   eax
c000ff69:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ff6d:	e8 e0 fe ff ff       	call   c000fe52 <EnvVarContainer::EnvVarContainer(Process*)>
c000ff72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ff76:	83 c4 2c             	add    esp,0x2c
c000ff79:	c3                   	ret    

c000ff7a <Krnl::copyProcessEnv(Process*, Process*)>:
c000ff7a:	57                   	push   edi
c000ff7b:	56                   	push   esi
c000ff7c:	53                   	push   ebx
c000ff7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff81:	83 ec 0c             	sub    esp,0xc
c000ff84:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c000ff8a:	6a 0c                	push   0xc
c000ff8c:	e8 28 78 ff ff       	call   c00077b9 <malloc>
c000ff91:	89 c3                	mov    ebx,eax
c000ff93:	58                   	pop    eax
c000ff94:	5a                   	pop    edx
c000ff95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff99:	53                   	push   ebx
c000ff9a:	e8 b3 fe ff ff       	call   c000fe52 <EnvVarContainer::EnvVarContainer(Process*)>
c000ff9f:	8b 07                	mov    eax,DWORD PTR [edi]
c000ffa1:	89 03                	mov    DWORD PTR [ebx],eax
c000ffa3:	c1 e0 03             	shl    eax,0x3
c000ffa6:	89 04 24             	mov    DWORD PTR [esp],eax
c000ffa9:	e8 0b 78 ff ff       	call   c00077b9 <malloc>
c000ffae:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ffb1:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000ffb3:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000ffb6:	c1 e1 03             	shl    ecx,0x3
c000ffb9:	89 c7                	mov    edi,eax
c000ffbb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ffbd:	83 c4 10             	add    esp,0x10
c000ffc0:	89 d8                	mov    eax,ebx
c000ffc2:	5b                   	pop    ebx
c000ffc3:	5e                   	pop    esi
c000ffc4:	5f                   	pop    edi
c000ffc5:	c3                   	ret    

c000ffc6 <Krnl::loadSystemEnv()>:
c000ffc6:	53                   	push   ebx
c000ffc7:	83 ec 14             	sub    esp,0x14
c000ffca:	6a 0c                	push   0xc
c000ffcc:	e8 e8 77 ff ff       	call   c00077b9 <malloc>
c000ffd1:	89 c3                	mov    ebx,eax
c000ffd3:	58                   	pop    eax
c000ffd4:	5a                   	pop    edx
c000ffd5:	ff 35 30 40 02 c0    	push   DWORD PTR ds:0xc0024030
c000ffdb:	53                   	push   ebx
c000ffdc:	e8 71 fe ff ff       	call   c000fe52 <EnvVarContainer::EnvVarContainer(Process*)>
c000ffe1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffe4:	89 1d d4 37 02 c0    	mov    DWORD PTR ds:0xc00237d4,ebx
c000ffea:	e8 47 fe ff ff       	call   c000fe36 <EnvVarContainer::__loadSystem()>
c000ffef:	83 c4 18             	add    esp,0x18
c000fff2:	5b                   	pop    ebx
c000fff3:	c3                   	ret    

c000fff4 <Krnl::loadUserEnv()>:
c000fff4:	53                   	push   ebx
c000fff5:	83 ec 14             	sub    esp,0x14
c000fff8:	6a 0c                	push   0xc
c000fffa:	e8 ba 77 ff ff       	call   c00077b9 <malloc>
c000ffff:	89 c3                	mov    ebx,eax
c0010001:	58                   	pop    eax
c0010002:	5a                   	pop    edx
c0010003:	ff 35 30 40 02 c0    	push   DWORD PTR ds:0xc0024030
c0010009:	53                   	push   ebx
c001000a:	e8 43 fe ff ff       	call   c000fe52 <EnvVarContainer::EnvVarContainer(Process*)>
c001000f:	89 1d d0 37 02 c0    	mov    DWORD PTR ds:0xc00237d0,ebx
c0010015:	83 c4 18             	add    esp,0x18
c0010018:	5b                   	pop    ebx
c0010019:	c3                   	ret    

c001001a <Krnl::flushEnv()>:
c001001a:	c3                   	ret    

c001001b <Krnl::getProcessTotalEnvCount(Process*)>:
c001001b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001001f:	8b 15 d0 37 02 c0    	mov    edx,DWORD PTR ds:0xc00237d0
c0010025:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001002b:	a1 d4 37 02 c0       	mov    eax,ds:0xc00237d4
c0010030:	8b 00                	mov    eax,DWORD PTR [eax]
c0010032:	03 01                	add    eax,DWORD PTR [ecx]
c0010034:	85 d2                	test   edx,edx
c0010036:	74 02                	je     c001003a <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0010038:	03 02                	add    eax,DWORD PTR [edx]
c001003a:	c3                   	ret    

c001003b <Krnl::getProcessEnvPair(Process*, int)>:
c001003b:	57                   	push   edi
c001003c:	56                   	push   esi
c001003d:	8b 35 d0 37 02 c0    	mov    esi,DWORD PTR ds:0xc00237d0
c0010043:	53                   	push   ebx
c0010044:	85 f6                	test   esi,esi
c0010046:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001004a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001004e:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010054:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010058:	8b 01                	mov    eax,DWORD PTR [ecx]
c001005a:	75 16                	jne    c0010072 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c001005c:	39 c2                	cmp    edx,eax
c001005e:	7c 16                	jl     c0010076 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010060:	8b 0d d4 37 02 c0    	mov    ecx,DWORD PTR ds:0xc00237d4
c0010066:	8b 31                	mov    esi,DWORD PTR [ecx]
c0010068:	01 c6                	add    esi,eax
c001006a:	39 d6                	cmp    esi,edx
c001006c:	7e 3c                	jle    c00100aa <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001006e:	29 c2                	sub    edx,eax
c0010070:	eb 04                	jmp    c0010076 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010072:	39 c2                	cmp    edx,eax
c0010074:	7d 05                	jge    c001007b <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0010076:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0010079:	eb 20                	jmp    c001009b <Krnl::getProcessEnvPair(Process*, int)+0x60>
c001007b:	8b 3e                	mov    edi,DWORD PTR [esi]
c001007d:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0010080:	39 d1                	cmp    ecx,edx
c0010082:	7e 04                	jle    c0010088 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0010084:	29 c2                	sub    edx,eax
c0010086:	eb 10                	jmp    c0010098 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0010088:	8b 35 d4 37 02 c0    	mov    esi,DWORD PTR ds:0xc00237d4
c001008e:	03 0e                	add    ecx,DWORD PTR [esi]
c0010090:	39 d1                	cmp    ecx,edx
c0010092:	7e 16                	jle    c00100aa <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010094:	29 c2                	sub    edx,eax
c0010096:	29 fa                	sub    edx,edi
c0010098:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001009b:	8d 14 d0             	lea    edx,[eax+edx*8]
c001009e:	8b 02                	mov    eax,DWORD PTR [edx]
c00100a0:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00100a3:	89 03                	mov    DWORD PTR [ebx],eax
c00100a5:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00100a8:	eb 1d                	jmp    c00100c7 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c00100aa:	83 ec 0c             	sub    esp,0xc
c00100ad:	68 a6 e7 01 c0       	push   0xc001e7a6
c00100b2:	e8 ac 00 00 00       	call   c0010163 <KePanic(char const*)>
c00100b7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00100bd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00100c4:	83 c4 10             	add    esp,0x10
c00100c7:	89 d8                	mov    eax,ebx
c00100c9:	5b                   	pop    ebx
c00100ca:	5e                   	pop    esi
c00100cb:	5f                   	pop    edi
c00100cc:	c2 04 00             	ret    0x4

c00100cf <CPU::current()>:
c00100cf:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c00100d4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00100da:	c3                   	ret    

c00100db <operator new(unsigned long)>:
c00100db:	e9 d9 76 ff ff       	jmp    c00077b9 <malloc>

c00100e0 <operator delete(void*)>:
c00100e0:	e9 14 77 ff ff       	jmp    c00077f9 <rfree>

c00100e5 <disableIRQs()>:
c00100e5:	fa                   	cli    
c00100e6:	c3                   	ret    

c00100e7 <enableIRQs()>:
c00100e7:	fb                   	sti    
c00100e8:	c3                   	ret    

c00100e9 <lockScheduler()>:
c00100e9:	fa                   	cli    
c00100ea:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c00100f0:	c3                   	ret    

c00100f1 <unlockScheduler()>:
c00100f1:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c00100f6:	48                   	dec    eax
c00100f7:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c00100fc:	75 01                	jne    c00100ff <unlockScheduler()+0xe>
c00100fe:	fb                   	sti    
c00100ff:	c3                   	ret    

c0010100 <lockStuff()>:
c0010100:	fa                   	cli    
c0010101:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c0010107:	ff 05 04 40 02 c0    	inc    DWORD PTR ds:0xc0024004
c001010d:	c3                   	ret    

c001010e <unlockStuff()>:
c001010e:	83 ec 0c             	sub    esp,0xc
c0010111:	a1 04 40 02 c0       	mov    eax,ds:0xc0024004
c0010116:	48                   	dec    eax
c0010117:	a3 04 40 02 c0       	mov    ds:0xc0024004,eax
c001011c:	75 18                	jne    c0010136 <unlockStuff()+0x28>
c001011e:	83 3d 00 40 02 c0 00 	cmp    DWORD PTR ds:0xc0024000,0x0
c0010125:	74 0f                	je     c0010136 <unlockStuff()+0x28>
c0010127:	c7 05 00 40 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024000,0x0
c0010131:	e8 e6 37 00 00       	call   c001391c <schedule()>
c0010136:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c001013b:	48                   	dec    eax
c001013c:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0010141:	75 01                	jne    c0010144 <unlockStuff()+0x36>
c0010143:	fb                   	sti    
c0010144:	83 c4 0c             	add    esp,0xc
c0010147:	c3                   	ret    

c0010148 <Virt::getAKernelVAS()>:
c0010148:	a1 50 0e 02 c0       	mov    eax,ds:0xc0020e50
c001014d:	c3                   	ret    

c001014e <__not_memcpy>:
c001014e:	57                   	push   edi
c001014f:	56                   	push   esi
c0010150:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010154:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010158:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001015c:	89 c7                	mov    edi,eax
c001015e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010160:	5e                   	pop    esi
c0010161:	5f                   	pop    edi
c0010162:	c3                   	ret    

c0010163 <KePanic(char const*)>:
c0010163:	c6 05 d8 37 02 c0 01 	mov    BYTE PTR ds:0xc00237d8,0x1
c001016a:	e9 a5 55 00 00       	jmp    c0015714 <HalPanic(char const*)>

c001016f <Krnl::powerThread(void*)>:
c001016f:	83 ec 0c             	sub    esp,0xc
c0010172:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0010177:	48                   	dec    eax
c0010178:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c001017d:	75 01                	jne    c0010180 <Krnl::powerThread(void*)+0x11>
c001017f:	fb                   	sti    
c0010180:	83 ec 0c             	sub    esp,0xc
c0010183:	c6 05 e0 37 02 c0 00 	mov    BYTE PTR ds:0xc00237e0,0x0
c001018a:	6a 0a                	push   0xa
c001018c:	e8 9b 3a 00 00       	call   c0013c2c <sleep(unsigned int)>
c0010191:	83 05 24 38 02 c0 0a 	add    DWORD PTR ds:0xc0023824,0xa
c0010198:	83 c4 10             	add    esp,0x10
c001019b:	eb e3                	jmp    c0010180 <Krnl::powerThread(void*)+0x11>

c001019d <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c001019d:	57                   	push   edi
c001019e:	b9 09 00 00 00       	mov    ecx,0x9
c00101a3:	56                   	push   esi
c00101a4:	bf 00 38 02 c0       	mov    edi,0xc0023800
c00101a9:	fc                   	cld    
c00101aa:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00101ae:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00101b0:	5e                   	pop    esi
c00101b1:	5f                   	pop    edi
c00101b2:	c3                   	ret    

c00101b3 <Krnl::userIOReceived()>:
c00101b3:	c7 05 24 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023824,0x0
c00101bd:	c3                   	ret    

c00101be <Krnl::handlePowerButton()>:
c00101be:	83 ec 0c             	sub    esp,0xc
c00101c1:	a1 00 38 02 c0       	mov    eax,ds:0xc0023800
c00101c6:	83 f8 02             	cmp    eax,0x2
c00101c9:	75 10                	jne    c00101db <Krnl::handlePowerButton()+0x1d>
c00101cb:	83 ec 0c             	sub    esp,0xc
c00101ce:	ff 35 58 0d 02 c0    	push   DWORD PTR ds:0xc0020d58
c00101d4:	e8 7d 6c ff ff       	call   c0006e56 <Computer::shutdown()>
c00101d9:	eb 11                	jmp    c00101ec <Krnl::handlePowerButton()+0x2e>
c00101db:	48                   	dec    eax
c00101dc:	75 11                	jne    c00101ef <Krnl::handlePowerButton()+0x31>
c00101de:	83 ec 0c             	sub    esp,0xc
c00101e1:	ff 35 58 0d 02 c0    	push   DWORD PTR ds:0xc0020d58
c00101e7:	e8 9a 6c ff ff       	call   c0006e86 <Computer::sleep()>
c00101ec:	83 c4 10             	add    esp,0x10
c00101ef:	83 c4 0c             	add    esp,0xc
c00101f2:	c3                   	ret    

c00101f3 <Krnl::handleSleepButton()>:
c00101f3:	83 ec 0c             	sub    esp,0xc
c00101f6:	a1 04 38 02 c0       	mov    eax,ds:0xc0023804
c00101fb:	83 f8 02             	cmp    eax,0x2
c00101fe:	75 10                	jne    c0010210 <Krnl::handleSleepButton()+0x1d>
c0010200:	83 ec 0c             	sub    esp,0xc
c0010203:	ff 35 58 0d 02 c0    	push   DWORD PTR ds:0xc0020d58
c0010209:	e8 48 6c ff ff       	call   c0006e56 <Computer::shutdown()>
c001020e:	eb 11                	jmp    c0010221 <Krnl::handleSleepButton()+0x2e>
c0010210:	48                   	dec    eax
c0010211:	75 11                	jne    c0010224 <Krnl::handleSleepButton()+0x31>
c0010213:	83 ec 0c             	sub    esp,0xc
c0010216:	ff 35 58 0d 02 c0    	push   DWORD PTR ds:0xc0020d58
c001021c:	e8 65 6c ff ff       	call   c0006e86 <Computer::sleep()>
c0010221:	83 c4 10             	add    esp,0x10
c0010224:	83 c4 0c             	add    esp,0xc
c0010227:	c3                   	ret    

c0010228 <Krnl::setupPowerManager()>:
c0010228:	83 ec 0c             	sub    esp,0xc
c001022b:	c7 05 24 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023824,0x0
c0010235:	68 f0 00 00 00       	push   0xf0
c001023a:	c6 05 e0 37 02 c0 00 	mov    BYTE PTR ds:0xc00237e0,0x0
c0010241:	6a 00                	push   0x0
c0010243:	68 6f 01 01 c0       	push   0xc001016f
c0010248:	ff 35 30 40 02 c0    	push   DWORD PTR ds:0xc0024030
c001024e:	e8 a9 34 00 00       	call   c00136fc <Process::createThread(void (*)(void*), void*, int)>
c0010253:	c7 05 00 38 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0023800,0x2
c001025d:	c7 05 04 38 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023804,0x1
c0010267:	c7 05 08 38 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0023808,0x3
c0010271:	c7 05 0c 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002380c,0x0
c001027b:	c7 05 18 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023818,0x0
c0010285:	c7 05 10 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023810,0x0
c001028f:	c7 05 1c 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002381c,0x0
c0010299:	c7 05 14 38 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0023814,0x3c
c00102a3:	c7 05 20 38 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0023820,0x3c
c00102ad:	83 c4 1c             	add    esp,0x1c
c00102b0:	c3                   	ret    
c00102b1:	66 90                	xchg   ax,ax
c00102b3:	90                   	nop

c00102b4 <KeResolveCompatibilitySymbol(char*)>:
c00102b4:	83 ec 0c             	sub    esp,0xc
c00102b7:	83 ec 08             	sub    esp,0x8
c00102ba:	68 c0 e7 01 c0       	push   0xc001e7c0
c00102bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102c3:	e8 18 04 ff ff       	call   c00006e0 <strcmp>
c00102c8:	83 c4 10             	add    esp,0x10
c00102cb:	85 c0                	test   eax,eax
c00102cd:	0f 94 c0             	sete   al
c00102d0:	84 c0                	test   al,al
c00102d2:	74 0c                	je     c00102e0 <KeResolveCompatibilitySymbol(char*)+0x2c>
c00102d4:	b8 58 0d 02 c0       	mov    eax,0xc0020d58
c00102d9:	e9 62 01 00 00       	jmp    c0010440 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00102de:	66 90                	xchg   ax,ax
c00102e0:	83 ec 08             	sub    esp,0x8
c00102e3:	68 c9 e7 01 c0       	push   0xc001e7c9
c00102e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102ec:	e8 ef 03 ff ff       	call   c00006e0 <strcmp>
c00102f1:	83 c4 10             	add    esp,0x10
c00102f4:	85 c0                	test   eax,eax
c00102f6:	0f 94 c0             	sete   al
c00102f9:	84 c0                	test   al,al
c00102fb:	74 0b                	je     c0010308 <KeResolveCompatibilitySymbol(char*)+0x54>
c00102fd:	b8 20 c2 01 c0       	mov    eax,0xc001c220
c0010302:	e9 39 01 00 00       	jmp    c0010440 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010307:	90                   	nop
c0010308:	83 ec 08             	sub    esp,0x8
c001030b:	68 d3 e7 01 c0       	push   0xc001e7d3
c0010310:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010314:	e8 c7 03 ff ff       	call   c00006e0 <strcmp>
c0010319:	83 c4 10             	add    esp,0x10
c001031c:	85 c0                	test   eax,eax
c001031e:	0f 94 c0             	sete   al
c0010321:	84 c0                	test   al,al
c0010323:	74 0b                	je     c0010330 <KeResolveCompatibilitySymbol(char*)+0x7c>
c0010325:	b8 54 bf 01 c0       	mov    eax,0xc001bf54
c001032a:	e9 11 01 00 00       	jmp    c0010440 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001032f:	90                   	nop
c0010330:	83 ec 08             	sub    esp,0x8
c0010333:	68 dc e7 01 c0       	push   0xc001e7dc
c0010338:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001033c:	e8 9f 03 ff ff       	call   c00006e0 <strcmp>
c0010341:	83 c4 10             	add    esp,0x10
c0010344:	85 c0                	test   eax,eax
c0010346:	0f 94 c0             	sete   al
c0010349:	84 c0                	test   al,al
c001034b:	74 0b                	je     c0010358 <KeResolveCompatibilitySymbol(char*)+0xa4>
c001034d:	b8 63 01 01 c0       	mov    eax,0xc0010163
c0010352:	e9 e9 00 00 00       	jmp    c0010440 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010357:	90                   	nop
c0010358:	83 ec 08             	sub    esp,0x8
c001035b:	68 ef e7 01 c0       	push   0xc001e7ef
c0010360:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010364:	e8 77 03 ff ff       	call   c00006e0 <strcmp>
c0010369:	83 c4 10             	add    esp,0x10
c001036c:	85 c0                	test   eax,eax
c001036e:	0f 94 c0             	sete   al
c0010371:	84 c0                	test   al,al
c0010373:	74 0b                	je     c0010380 <KeResolveCompatibilitySymbol(char*)+0xcc>
c0010375:	b8 eb fa 00 c0       	mov    eax,0xc000faeb
c001037a:	e9 c1 00 00 00       	jmp    c0010440 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001037f:	90                   	nop
c0010380:	83 ec 08             	sub    esp,0x8
c0010383:	68 0c e8 01 c0       	push   0xc001e80c
c0010388:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001038c:	e8 4f 03 ff ff       	call   c00006e0 <strcmp>
c0010391:	83 c4 10             	add    esp,0x10
c0010394:	85 c0                	test   eax,eax
c0010396:	0f 94 c0             	sete   al
c0010399:	84 c0                	test   al,al
c001039b:	74 0b                	je     c00103a8 <KeResolveCompatibilitySymbol(char*)+0xf4>
c001039d:	b8 20 c3 01 c0       	mov    eax,0xc001c320
c00103a2:	e9 99 00 00 00       	jmp    c0010440 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103a7:	90                   	nop
c00103a8:	83 ec 08             	sub    esp,0x8
c00103ab:	68 16 e8 01 c0       	push   0xc001e816
c00103b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103b4:	e8 27 03 ff ff       	call   c00006e0 <strcmp>
c00103b9:	83 c4 10             	add    esp,0x10
c00103bc:	85 c0                	test   eax,eax
c00103be:	0f 94 c0             	sete   al
c00103c1:	84 c0                	test   al,al
c00103c3:	74 07                	je     c00103cc <KeResolveCompatibilitySymbol(char*)+0x118>
c00103c5:	b8 a0 c0 01 c0       	mov    eax,0xc001c0a0
c00103ca:	eb 74                	jmp    c0010440 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103cc:	83 ec 08             	sub    esp,0x8
c00103cf:	68 1f e8 01 c0       	push   0xc001e81f
c00103d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103d8:	e8 03 03 ff ff       	call   c00006e0 <strcmp>
c00103dd:	83 c4 10             	add    esp,0x10
c00103e0:	85 c0                	test   eax,eax
c00103e2:	0f 94 c0             	sete   al
c00103e5:	84 c0                	test   al,al
c00103e7:	74 07                	je     c00103f0 <KeResolveCompatibilitySymbol(char*)+0x13c>
c00103e9:	b8 5c 0d 02 c0       	mov    eax,0xc0020d5c
c00103ee:	eb 50                	jmp    c0010440 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103f0:	83 ec 08             	sub    esp,0x8
c00103f3:	68 37 e8 01 c0       	push   0xc001e837
c00103f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103fc:	e8 df 02 ff ff       	call   c00006e0 <strcmp>
c0010401:	83 c4 10             	add    esp,0x10
c0010404:	85 c0                	test   eax,eax
c0010406:	0f 94 c0             	sete   al
c0010409:	84 c0                	test   al,al
c001040b:	74 07                	je     c0010414 <KeResolveCompatibilitySymbol(char*)+0x160>
c001040d:	b8 5c 0d 02 c0       	mov    eax,0xc0020d5c
c0010412:	eb 2c                	jmp    c0010440 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010414:	83 ec 08             	sub    esp,0x8
c0010417:	68 44 e8 01 c0       	push   0xc001e844
c001041c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010420:	e8 bb 02 ff ff       	call   c00006e0 <strcmp>
c0010425:	83 c4 10             	add    esp,0x10
c0010428:	85 c0                	test   eax,eax
c001042a:	0f 94 c0             	sete   al
c001042d:	84 c0                	test   al,al
c001042f:	74 07                	je     c0010438 <KeResolveCompatibilitySymbol(char*)+0x184>
c0010431:	b8 5d 0d 02 c0       	mov    eax,0xc0020d5d
c0010436:	eb 08                	jmp    c0010440 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010438:	b8 00 00 00 00       	mov    eax,0x0
c001043d:	8d 76 00             	lea    esi,[esi+0x0]
c0010440:	83 c4 0c             	add    esp,0xc
c0010443:	c3                   	ret    

c0010444 <KiDefaultSignalHandlerAbort(int)>:
c0010444:	c7 44 24 04 51 e8 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e851
c001044c:	e9 12 fd ff ff       	jmp    c0010163 <KePanic(char const*)>

c0010451 <KiDefaultSignalHandlerTerminate(int)>:
c0010451:	c7 44 24 04 6d e8 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e86d
c0010459:	e9 05 fd ff ff       	jmp    c0010163 <KePanic(char const*)>

c001045e <KiSigKill(int)>:
c001045e:	c7 44 24 04 8d e8 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e88d
c0010466:	e9 f8 fc ff ff       	jmp    c0010163 <KePanic(char const*)>

c001046b <KiDefaultSignalHandlerIgnore(int)>:
c001046b:	c3                   	ret    

c001046c <KiDefaultSignalHandlerPause(int)>:
c001046c:	c7 44 24 04 97 e8 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e897
c0010474:	e9 ea fc ff ff       	jmp    c0010163 <KePanic(char const*)>

c0010479 <KiDefaultSignalHandlerResume(int)>:
c0010479:	c7 44 24 04 b3 e8 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e8b3
c0010481:	e9 dd fc ff ff       	jmp    c0010163 <KePanic(char const*)>

c0010486 <KeInitSignals()>:
c0010486:	53                   	push   ebx
c0010487:	83 ec 14             	sub    esp,0x14
c001048a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001048e:	68 d0 e8 01 c0       	push   0xc001e8d0
c0010493:	e8 60 a0 ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c0010498:	83 c4 0c             	add    esp,0xc
c001049b:	c7 83 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xbc],0x0
c00104a5:	c7 83 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xc0],0x0
c00104af:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00104b5:	6a 20                	push   0x20
c00104b7:	6a 00                	push   0x0
c00104b9:	50                   	push   eax
c00104ba:	e8 11 00 ff ff       	call   c00004d0 <memset>
c00104bf:	83 c4 0c             	add    esp,0xc
c00104c2:	6a 44                	push   0x44
c00104c4:	6a 00                	push   0x0
c00104c6:	53                   	push   ebx
c00104c7:	e8 04 00 ff ff       	call   c00004d0 <memset>
c00104cc:	c7 04 24 e1 e8 01 c0 	mov    DWORD PTR [esp],0xc001e8e1
c00104d3:	e8 20 a0 ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c00104d8:	89 d8                	mov    eax,ebx
c00104da:	83 c4 18             	add    esp,0x18
c00104dd:	5b                   	pop    ebx
c00104de:	c2 04 00             	ret    0x4

c00104e1 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c00104e1:	57                   	push   edi
c00104e2:	56                   	push   esi
c00104e3:	53                   	push   ebx
c00104e4:	bb 01 00 00 00       	mov    ebx,0x1
c00104e9:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00104ed:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00104f1:	83 ec 0c             	sub    esp,0xc
c00104f4:	68 f2 e8 01 c0       	push   0xc001e8f2
c00104f9:	e8 fa 9f ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c00104fe:	83 c4 10             	add    esp,0x10
c0010501:	83 fe 10             	cmp    esi,0x10
c0010504:	7f 3a                	jg     c0010540 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x5f>
c0010506:	83 ec 0c             	sub    esp,0xc
c0010509:	68 0d e9 01 c0       	push   0xc001e90d
c001050e:	e8 e5 9f ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c0010513:	8d 04 b7             	lea    eax,[edi+esi*4]
c0010516:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001051a:	89 f1                	mov    ecx,esi
c001051c:	89 10                	mov    DWORD PTR [eax],edx
c001051e:	d3 e3                	shl    ebx,cl
c0010520:	0b 5c 24 2c          	or     ebx,DWORD PTR [esp+0x2c]
c0010524:	89 58 44             	mov    DWORD PTR [eax+0x44],ebx
c0010527:	c6 84 37 88 00 00 00 00 	mov    BYTE PTR [edi+esi*1+0x88],0x0
c001052f:	31 db                	xor    ebx,ebx
c0010531:	c7 04 24 28 e9 01 c0 	mov    DWORD PTR [esp],0xc001e928
c0010538:	e8 bb 9f ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c001053d:	83 c4 10             	add    esp,0x10
c0010540:	89 d8                	mov    eax,ebx
c0010542:	5b                   	pop    ebx
c0010543:	5e                   	pop    esi
c0010544:	5f                   	pop    edi
c0010545:	c3                   	ret    

c0010546 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0010546:	55                   	push   ebp
c0010547:	57                   	push   edi
c0010548:	56                   	push   esi
c0010549:	be 08 00 00 00       	mov    esi,0x8
c001054e:	53                   	push   ebx
c001054f:	83 ec 18             	sub    esp,0x18
c0010552:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010556:	68 43 e9 01 c0       	push   0xc001e943
c001055b:	e8 98 9f ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c0010560:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010567:	8b bb bc 00 00 00    	mov    edi,DWORD PTR [ebx+0xbc]
c001056d:	83 c4 10             	add    esp,0x10
c0010570:	31 c9                	xor    ecx,ecx
c0010572:	8d 04 0f             	lea    eax,[edi+ecx*1]
c0010575:	99                   	cdq    
c0010576:	f7 fe                	idiv   esi
c0010578:	83 c2 24             	add    edx,0x24
c001057b:	8b 6c 93 0c          	mov    ebp,DWORD PTR [ebx+edx*4+0xc]
c001057f:	85 ed                	test   ebp,ebp
c0010581:	75 1a                	jne    c001059d <KeRaiseSignal(SigHandlerBlock*, int)+0x57>
c0010583:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010587:	83 ec 0c             	sub    esp,0xc
c001058a:	89 44 93 0c          	mov    DWORD PTR [ebx+edx*4+0xc],eax
c001058e:	68 54 e9 01 c0       	push   0xc001e954
c0010593:	e8 60 9f ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c0010598:	83 c4 10             	add    esp,0x10
c001059b:	eb 1b                	jmp    c00105b8 <KeRaiseSignal(SigHandlerBlock*, int)+0x72>
c001059d:	41                   	inc    ecx
c001059e:	83 f9 08             	cmp    ecx,0x8
c00105a1:	75 cf                	jne    c0010572 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c00105a3:	83 ec 0c             	sub    esp,0xc
c00105a6:	bd 01 00 00 00       	mov    ebp,0x1
c00105ab:	68 65 e9 01 c0       	push   0xc001e965
c00105b0:	e8 43 9f ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c00105b5:	83 c4 10             	add    esp,0x10
c00105b8:	83 c4 0c             	add    esp,0xc
c00105bb:	89 e8                	mov    eax,ebp
c00105bd:	5b                   	pop    ebx
c00105be:	5e                   	pop    esi
c00105bf:	5f                   	pop    edi
c00105c0:	5d                   	pop    ebp
c00105c1:	c3                   	ret    

c00105c2 <KeCheckSignal(SigHandlerBlock*)>:
c00105c2:	55                   	push   ebp
c00105c3:	57                   	push   edi
c00105c4:	56                   	push   esi
c00105c5:	31 f6                	xor    esi,esi
c00105c7:	53                   	push   ebx
c00105c8:	83 ec 18             	sub    esp,0x18
c00105cb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00105cf:	68 76 e9 01 c0       	push   0xc001e976
c00105d4:	e8 1f 9f ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c00105d9:	83 c4 10             	add    esp,0x10
c00105dc:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c00105e3:	0f 84 55 01 00 00    	je     c001073e <KeCheckSignal(SigHandlerBlock*)+0x17c>
c00105e9:	83 ec 0c             	sub    esp,0xc
c00105ec:	bd 08 00 00 00       	mov    ebp,0x8
c00105f1:	68 87 e9 01 c0       	push   0xc001e987
c00105f6:	e8 fd 9e ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c00105fb:	83 c4 10             	add    esp,0x10
c00105fe:	31 c9                	xor    ecx,ecx
c0010600:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0010606:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0010609:	99                   	cdq    
c001060a:	f7 fd                	idiv   ebp
c001060c:	8b bc 93 9c 00 00 00 	mov    edi,DWORD PTR [ebx+edx*4+0x9c]
c0010613:	85 ff                	test   edi,edi
c0010615:	0f 84 00 01 00 00    	je     c001071b <KeCheckSignal(SigHandlerBlock*)+0x159>
c001061b:	83 ec 0c             	sub    esp,0xc
c001061e:	be 01 00 00 00       	mov    esi,0x1
c0010623:	68 98 e9 01 c0       	push   0xc001e998
c0010628:	e8 cb 9e ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c001062d:	89 f9                	mov    ecx,edi
c001062f:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0010635:	d3 e6                	shl    esi,cl
c0010637:	83 c4 10             	add    esp,0x10
c001063a:	31 c9                	xor    ecx,ecx
c001063c:	ba 01 00 00 00       	mov    edx,0x1
c0010641:	89 d5                	mov    ebp,edx
c0010643:	d3 e5                	shl    ebp,cl
c0010645:	85 c5                	test   ebp,eax
c0010647:	74 13                	je     c001065c <KeCheckSignal(SigHandlerBlock*)+0x9a>
c0010649:	85 74 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],esi
c001064d:	74 0d                	je     c001065c <KeCheckSignal(SigHandlerBlock*)+0x9a>
c001064f:	83 ec 0c             	sub    esp,0xc
c0010652:	68 a9 e9 01 c0       	push   0xc001e9a9
c0010657:	e9 d8 00 00 00       	jmp    c0010734 <KeCheckSignal(SigHandlerBlock*)+0x172>
c001065c:	41                   	inc    ecx
c001065d:	83 f9 11             	cmp    ecx,0x11
c0010660:	75 df                	jne    c0010641 <KeCheckSignal(SigHandlerBlock*)+0x7f>
c0010662:	83 ec 0c             	sub    esp,0xc
c0010665:	68 ba e9 01 c0       	push   0xc001e9ba
c001066a:	e8 89 9e ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c001066f:	8b 83 bc 00 00 00    	mov    eax,DWORD PTR [ebx+0xbc]
c0010675:	83 c4 10             	add    esp,0x10
c0010678:	8d 50 01             	lea    edx,[eax+0x1]
c001067b:	89 93 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],edx
c0010681:	c7 84 83 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+eax*4+0x9c],0x0
c001068c:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010693:	09 b3 c0 00 00 00    	or     DWORD PTR [ebx+0xc0],esi
c0010699:	31 c0                	xor    eax,eax
c001069b:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c00106a3:	74 09                	je     c00106ae <KeCheckSignal(SigHandlerBlock*)+0xec>
c00106a5:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00106ac:	eb 06                	jmp    c00106b4 <KeCheckSignal(SigHandlerBlock*)+0xf2>
c00106ae:	40                   	inc    eax
c00106af:	83 f8 08             	cmp    eax,0x8
c00106b2:	75 e7                	jne    c001069b <KeCheckSignal(SigHandlerBlock*)+0xd9>
c00106b4:	83 ec 0c             	sub    esp,0xc
c00106b7:	68 cb e9 01 c0       	push   0xc001e9cb
c00106bc:	e8 37 9e ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c00106c1:	83 c4 10             	add    esp,0x10
c00106c4:	8b 34 bb             	mov    esi,DWORD PTR [ebx+edi*4]
c00106c7:	83 ff 09             	cmp    edi,0x9
c00106ca:	75 14                	jne    c00106e0 <KeCheckSignal(SigHandlerBlock*)+0x11e>
c00106cc:	83 ec 0c             	sub    esp,0xc
c00106cf:	be 5e 04 01 c0       	mov    esi,0xc001045e
c00106d4:	68 dc e9 01 c0       	push   0xc001e9dc
c00106d9:	e8 1a 9e ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c00106de:	eb 36                	jmp    c0010716 <KeCheckSignal(SigHandlerBlock*)+0x154>
c00106e0:	83 fe 01             	cmp    esi,0x1
c00106e3:	75 0a                	jne    c00106ef <KeCheckSignal(SigHandlerBlock*)+0x12d>
c00106e5:	83 ec 0c             	sub    esp,0xc
c00106e8:	68 ed e9 01 c0       	push   0xc001e9ed
c00106ed:	eb 45                	jmp    c0010734 <KeCheckSignal(SigHandlerBlock*)+0x172>
c00106ef:	85 f6                	test   esi,esi
c00106f1:	75 16                	jne    c0010709 <KeCheckSignal(SigHandlerBlock*)+0x147>
c00106f3:	83 ec 0c             	sub    esp,0xc
c00106f6:	68 fe e9 01 c0       	push   0xc001e9fe
c00106fb:	e8 f8 9d ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c0010700:	8b 34 bd 00 fc 01 c0 	mov    esi,DWORD PTR [edi*4-0x3ffe0400]
c0010707:	eb 0d                	jmp    c0010716 <KeCheckSignal(SigHandlerBlock*)+0x154>
c0010709:	83 ec 0c             	sub    esp,0xc
c001070c:	68 0f ea 01 c0       	push   0xc001ea0f
c0010711:	e8 e2 9d ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c0010716:	83 c4 10             	add    esp,0x10
c0010719:	eb 23                	jmp    c001073e <KeCheckSignal(SigHandlerBlock*)+0x17c>
c001071b:	46                   	inc    esi
c001071c:	41                   	inc    ecx
c001071d:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010723:	83 f9 08             	cmp    ecx,0x8
c0010726:	0f 85 d4 fe ff ff    	jne    c0010600 <KeCheckSignal(SigHandlerBlock*)+0x3e>
c001072c:	83 ec 0c             	sub    esp,0xc
c001072f:	68 20 ea 01 c0       	push   0xc001ea20
c0010734:	e8 bf 9d ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c0010739:	31 f6                	xor    esi,esi
c001073b:	83 c4 10             	add    esp,0x10
c001073e:	83 c4 0c             	add    esp,0xc
c0010741:	89 f0                	mov    eax,esi
c0010743:	5b                   	pop    ebx
c0010744:	5e                   	pop    esi
c0010745:	5f                   	pop    edi
c0010746:	5d                   	pop    ebp
c0010747:	c3                   	ret    

c0010748 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0010748:	56                   	push   esi
c0010749:	53                   	push   ebx
c001074a:	bb 01 00 00 00       	mov    ebx,0x1
c001074f:	52                   	push   edx
c0010750:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010754:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010758:	d3 e3                	shl    ebx,cl
c001075a:	83 f9 10             	cmp    ecx,0x10
c001075d:	7f 08                	jg     c0010767 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c001075f:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0010765:	75 10                	jne    c0010777 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0010767:	83 ec 0c             	sub    esp,0xc
c001076a:	68 31 ea 01 c0       	push   0xc001ea31
c001076f:	e8 ef f9 ff ff       	call   c0010163 <KePanic(char const*)>
c0010774:	83 c4 10             	add    esp,0x10
c0010777:	f7 d3                	not    ebx
c0010779:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c001077f:	58                   	pop    eax
c0010780:	5b                   	pop    ebx
c0010781:	5e                   	pop    esi
c0010782:	c3                   	ret    

c0010783 <SysSeekDir(regs*)>:
c0010783:	31 c0                	xor    eax,eax
c0010785:	31 d2                	xor    edx,edx
c0010787:	c3                   	ret    

c0010788 <SysTellDir(regs*)>:
c0010788:	31 c0                	xor    eax,eax
c001078a:	31 d2                	xor    edx,edx
c001078c:	c3                   	ret    

c001078d <SysVerify(regs*)>:
c001078d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010791:	31 d2                	xor    edx,edx
c0010793:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010796:	c3                   	ret    

c0010797 <SysGetArgc(regs*)>:
c0010797:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001079c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001079f:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c00107a5:	99                   	cdq    
c00107a6:	c3                   	ret    

c00107a7 <SysTTYName(regs*)>:
c00107a7:	b8 01 00 00 00       	mov    eax,0x1
c00107ac:	31 d2                	xor    edx,edx
c00107ae:	c3                   	ret    

c00107af <SysFormatDisk(regs*)>:
c00107af:	56                   	push   esi
c00107b0:	53                   	push   ebx
c00107b1:	50                   	push   eax
c00107b2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00107b6:	8b 1d 54 0e 02 c0    	mov    ebx,DWORD PTR ds:0xc0020e54
c00107bc:	eb 28                	jmp    c00107e6 <SysFormatDisk(regs*)+0x37>
c00107be:	83 ec 0c             	sub    esp,0xc
c00107c1:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00107c4:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c00107c7:	8b 13                	mov    edx,DWORD PTR [ebx]
c00107c9:	51                   	push   ecx
c00107ca:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c00107cd:	51                   	push   ecx
c00107ce:	50                   	push   eax
c00107cf:	8b 04 85 c0 32 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcd40]
c00107d6:	50                   	push   eax
c00107d7:	53                   	push   ebx
c00107d8:	ff 52 48             	call   DWORD PTR [edx+0x48]
c00107db:	83 c4 20             	add    esp,0x20
c00107de:	83 f8 08             	cmp    eax,0x8
c00107e1:	75 12                	jne    c00107f5 <SysFormatDisk(regs*)+0x46>
c00107e3:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00107e6:	85 db                	test   ebx,ebx
c00107e8:	75 d4                	jne    c00107be <SysFormatDisk(regs*)+0xf>
c00107ea:	59                   	pop    ecx
c00107eb:	b8 03 00 00 00       	mov    eax,0x3
c00107f0:	31 d2                	xor    edx,edx
c00107f2:	5b                   	pop    ebx
c00107f3:	5e                   	pop    esi
c00107f4:	c3                   	ret    
c00107f5:	85 c0                	test   eax,eax
c00107f7:	74 1b                	je     c0010814 <SysFormatDisk(regs*)+0x65>
c00107f9:	83 f8 09             	cmp    eax,0x9
c00107fc:	74 0b                	je     c0010809 <SysFormatDisk(regs*)+0x5a>
c00107fe:	59                   	pop    ecx
c00107ff:	b8 02 00 00 00       	mov    eax,0x2
c0010804:	31 d2                	xor    edx,edx
c0010806:	5b                   	pop    ebx
c0010807:	5e                   	pop    esi
c0010808:	c3                   	ret    
c0010809:	59                   	pop    ecx
c001080a:	b8 01 00 00 00       	mov    eax,0x1
c001080f:	31 d2                	xor    edx,edx
c0010811:	5b                   	pop    ebx
c0010812:	5e                   	pop    esi
c0010813:	c3                   	ret    
c0010814:	59                   	pop    ecx
c0010815:	31 c0                	xor    eax,eax
c0010817:	31 d2                	xor    edx,edx
c0010819:	5b                   	pop    ebx
c001081a:	5e                   	pop    esi
c001081b:	c3                   	ret    

c001081c <SysSetDiskVolumeLabel(regs*)>:
c001081c:	56                   	push   esi
c001081d:	53                   	push   ebx
c001081e:	53                   	push   ebx
c001081f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010823:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010826:	83 f8 19             	cmp    eax,0x19
c0010829:	77 2d                	ja     c0010858 <SysSetDiskVolumeLabel(regs*)+0x3c>
c001082b:	8b 0c 85 c0 32 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdcd40]
c0010832:	85 c9                	test   ecx,ecx
c0010834:	74 22                	je     c0010858 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010836:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0010839:	85 db                	test   ebx,ebx
c001083b:	74 1b                	je     c0010858 <SysSetDiskVolumeLabel(regs*)+0x3c>
c001083d:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c0010843:	85 d2                	test   edx,edx
c0010845:	74 11                	je     c0010858 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010847:	8b 32                	mov    esi,DWORD PTR [edx]
c0010849:	53                   	push   ebx
c001084a:	50                   	push   eax
c001084b:	51                   	push   ecx
c001084c:	52                   	push   edx
c001084d:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0010850:	83 c4 10             	add    esp,0x10
c0010853:	99                   	cdq    
c0010854:	59                   	pop    ecx
c0010855:	5b                   	pop    ebx
c0010856:	5e                   	pop    esi
c0010857:	c3                   	ret    
c0010858:	59                   	pop    ecx
c0010859:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001085e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010863:	5b                   	pop    ebx
c0010864:	5e                   	pop    esi
c0010865:	c3                   	ret    

c0010866 <SysGetDiskVolumeLabel(regs*)>:
c0010866:	57                   	push   edi
c0010867:	56                   	push   esi
c0010868:	53                   	push   ebx
c0010869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001086d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010870:	83 fa 19             	cmp    edx,0x19
c0010873:	77 38                	ja     c00108ad <SysGetDiskVolumeLabel(regs*)+0x47>
c0010875:	8b 0c 95 c0 32 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdcd40]
c001087c:	85 c9                	test   ecx,ecx
c001087e:	74 2d                	je     c00108ad <SysGetDiskVolumeLabel(regs*)+0x47>
c0010880:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010883:	85 db                	test   ebx,ebx
c0010885:	74 26                	je     c00108ad <SysGetDiskVolumeLabel(regs*)+0x47>
c0010887:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001088a:	85 f6                	test   esi,esi
c001088c:	74 1f                	je     c00108ad <SysGetDiskVolumeLabel(regs*)+0x47>
c001088e:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0010894:	85 c0                	test   eax,eax
c0010896:	74 15                	je     c00108ad <SysGetDiskVolumeLabel(regs*)+0x47>
c0010898:	83 ec 0c             	sub    esp,0xc
c001089b:	8b 38                	mov    edi,DWORD PTR [eax]
c001089d:	56                   	push   esi
c001089e:	53                   	push   ebx
c001089f:	52                   	push   edx
c00108a0:	51                   	push   ecx
c00108a1:	50                   	push   eax
c00108a2:	ff 57 54             	call   DWORD PTR [edi+0x54]
c00108a5:	83 c4 20             	add    esp,0x20
c00108a8:	99                   	cdq    
c00108a9:	5b                   	pop    ebx
c00108aa:	5e                   	pop    esi
c00108ab:	5f                   	pop    edi
c00108ac:	c3                   	ret    
c00108ad:	5b                   	pop    ebx
c00108ae:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00108b3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00108b8:	5e                   	pop    esi
c00108b9:	5f                   	pop    edi
c00108ba:	c3                   	ret    

c00108bb <SysShutdown(regs*)>:
c00108bb:	83 ec 0c             	sub    esp,0xc
c00108be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00108c5:	85 c0                	test   eax,eax
c00108c7:	74 18                	je     c00108e1 <SysShutdown(regs*)+0x26>
c00108c9:	83 f8 01             	cmp    eax,0x1
c00108cc:	74 38                	je     c0010906 <SysShutdown(regs*)+0x4b>
c00108ce:	83 f8 02             	cmp    eax,0x2
c00108d1:	74 24                	je     c00108f7 <SysShutdown(regs*)+0x3c>
c00108d3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00108d8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00108dd:	83 c4 0c             	add    esp,0xc
c00108e0:	c3                   	ret    
c00108e1:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c00108e6:	8b 10                	mov    edx,DWORD PTR [eax]
c00108e8:	6a 00                	push   0x0
c00108ea:	6a 00                	push   0x0
c00108ec:	6a 00                	push   0x0
c00108ee:	50                   	push   eax
c00108ef:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00108f2:	83 c4 10             	add    esp,0x10
c00108f5:	eb dc                	jmp    c00108d3 <SysShutdown(regs*)+0x18>
c00108f7:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c00108fc:	8b 10                	mov    edx,DWORD PTR [eax]
c00108fe:	6a 00                	push   0x0
c0010900:	6a 00                	push   0x0
c0010902:	6a 01                	push   0x1
c0010904:	eb e8                	jmp    c00108ee <SysShutdown(regs*)+0x33>
c0010906:	a1 40 33 02 c0       	mov    eax,ds:0xc0023340
c001090b:	85 c0                	test   eax,eax
c001090d:	74 02                	je     c0010911 <SysShutdown(regs*)+0x56>
c001090f:	ff d0                	call   eax
c0010911:	31 c0                	xor    eax,eax
c0010913:	31 d2                	xor    edx,edx
c0010915:	83 c4 0c             	add    esp,0xc
c0010918:	c3                   	ret    

c0010919 <SysRealpath(regs*)>:
c0010919:	83 ec 0c             	sub    esp,0xc
c001091c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010920:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010923:	85 d2                	test   edx,edx
c0010925:	74 07                	je     c001092e <SysRealpath(regs*)+0x15>
c0010927:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001092a:	85 c0                	test   eax,eax
c001092c:	75 0b                	jne    c0010939 <SysRealpath(regs*)+0x20>
c001092e:	b8 01 00 00 00       	mov    eax,0x1
c0010933:	31 d2                	xor    edx,edx
c0010935:	83 c4 0c             	add    esp,0xc
c0010938:	c3                   	ret    
c0010939:	51                   	push   ecx
c001093a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010940:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010943:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0010949:	51                   	push   ecx
c001094a:	52                   	push   edx
c001094b:	50                   	push   eax
c001094c:	e8 73 9f ff ff       	call   c000a8c4 <Fs::standardiseFiles(char*, char const*, char const*)>
c0010951:	83 c4 10             	add    esp,0x10
c0010954:	31 c0                	xor    eax,eax
c0010956:	31 d2                	xor    edx,edx
c0010958:	83 c4 0c             	add    esp,0xc
c001095b:	c3                   	ret    

c001095c <SysReadDir(regs*)>:
c001095c:	53                   	push   ebx
c001095d:	83 ec 18             	sub    esp,0x18
c0010960:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010964:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010967:	83 f8 02             	cmp    eax,0x2
c001096a:	76 61                	jbe    c00109cd <SysReadDir(regs*)+0x71>
c001096c:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0010973:	77 49                	ja     c00109be <SysReadDir(regs*)+0x62>
c0010975:	83 ec 0c             	sub    esp,0xc
c0010978:	50                   	push   eax
c0010979:	e8 d1 87 ff ff       	call   c000914f <getFromFileDescriptor(int)>
c001097e:	83 c4 10             	add    esp,0x10
c0010981:	85 c0                	test   eax,eax
c0010983:	74 39                	je     c00109be <SysReadDir(regs*)+0x62>
c0010985:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001098d:	83 ec 0c             	sub    esp,0xc
c0010990:	8b 10                	mov    edx,DWORD PTR [eax]
c0010992:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0010996:	51                   	push   ecx
c0010997:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001099a:	51                   	push   ecx
c001099b:	6a 00                	push   0x0
c001099d:	68 10 01 00 00       	push   0x110
c00109a2:	50                   	push   eax
c00109a3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00109a6:	83 c4 20             	add    esp,0x20
c00109a9:	85 c0                	test   eax,eax
c00109ab:	74 29                	je     c00109d6 <SysReadDir(regs*)+0x7a>
c00109ad:	83 f8 07             	cmp    eax,0x7
c00109b0:	74 1b                	je     c00109cd <SysReadDir(regs*)+0x71>
c00109b2:	b8 02 00 00 00       	mov    eax,0x2
c00109b7:	31 d2                	xor    edx,edx
c00109b9:	83 c4 18             	add    esp,0x18
c00109bc:	5b                   	pop    ebx
c00109bd:	c3                   	ret    
c00109be:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00109c3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00109c8:	83 c4 18             	add    esp,0x18
c00109cb:	5b                   	pop    ebx
c00109cc:	c3                   	ret    
c00109cd:	b8 01 00 00 00       	mov    eax,0x1
c00109d2:	31 d2                	xor    edx,edx
c00109d4:	eb e3                	jmp    c00109b9 <SysReadDir(regs*)+0x5d>
c00109d6:	31 c0                	xor    eax,eax
c00109d8:	31 d2                	xor    edx,edx
c00109da:	eb dd                	jmp    c00109b9 <SysReadDir(regs*)+0x5d>

c00109dc <SysIsATTY(regs*)>:
c00109dc:	83 ec 0c             	sub    esp,0xc
c00109df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109e3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00109e6:	83 f8 02             	cmp    eax,0x2
c00109e9:	76 07                	jbe    c00109f2 <SysIsATTY(regs*)+0x16>
c00109eb:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00109f0:	75 28                	jne    c0010a1a <SysIsATTY(regs*)+0x3e>
c00109f2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00109f7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00109fa:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0010a00:	85 c0                	test   eax,eax
c0010a02:	74 26                	je     c0010a2a <SysIsATTY(regs*)+0x4e>
c0010a04:	83 ec 0c             	sub    esp,0xc
c0010a07:	8b 10                	mov    edx,DWORD PTR [eax]
c0010a09:	50                   	push   eax
c0010a0a:	ff 12                	call   DWORD PTR [edx]
c0010a0c:	31 d2                	xor    edx,edx
c0010a0e:	25 ff 00 00 00       	and    eax,0xff
c0010a13:	83 c4 10             	add    esp,0x10
c0010a16:	83 c4 0c             	add    esp,0xc
c0010a19:	c3                   	ret    
c0010a1a:	83 ec 0c             	sub    esp,0xc
c0010a1d:	50                   	push   eax
c0010a1e:	e8 2c 87 ff ff       	call   c000914f <getFromFileDescriptor(int)>
c0010a23:	83 c4 10             	add    esp,0x10
c0010a26:	85 c0                	test   eax,eax
c0010a28:	75 da                	jne    c0010a04 <SysIsATTY(regs*)+0x28>
c0010a2a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a2f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a34:	83 c4 0c             	add    esp,0xc
c0010a37:	c3                   	ret    

c0010a38 <SysSeek(regs*)>:
c0010a38:	53                   	push   ebx
c0010a39:	83 ec 08             	sub    esp,0x8
c0010a3c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010a40:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010a43:	8d 50 fd             	lea    edx,[eax-0x3]
c0010a46:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010a4c:	77 34                	ja     c0010a82 <SysSeek(regs*)+0x4a>
c0010a4e:	83 ec 0c             	sub    esp,0xc
c0010a51:	50                   	push   eax
c0010a52:	e8 f8 86 ff ff       	call   c000914f <getFromFileDescriptor(int)>
c0010a57:	83 c4 0c             	add    esp,0xc
c0010a5a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010a5d:	31 db                	xor    ebx,ebx
c0010a5f:	53                   	push   ebx
c0010a60:	51                   	push   ecx
c0010a61:	50                   	push   eax
c0010a62:	e8 85 a1 ff ff       	call   c000abec <File::seek(unsigned long long)>
c0010a67:	83 c4 10             	add    esp,0x10
c0010a6a:	85 c0                	test   eax,eax
c0010a6c:	0f 95 c0             	setne  al
c0010a6f:	31 d2                	xor    edx,edx
c0010a71:	25 ff 00 00 00       	and    eax,0xff
c0010a76:	f7 d8                	neg    eax
c0010a78:	83 d2 00             	adc    edx,0x0
c0010a7b:	83 c4 08             	add    esp,0x8
c0010a7e:	f7 da                	neg    edx
c0010a80:	5b                   	pop    ebx
c0010a81:	c3                   	ret    
c0010a82:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a87:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a8c:	83 c4 08             	add    esp,0x8
c0010a8f:	5b                   	pop    ebx
c0010a90:	c3                   	ret    

c0010a91 <SysTell(regs*)>:
c0010a91:	53                   	push   ebx
c0010a92:	83 ec 08             	sub    esp,0x8
c0010a95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010a99:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010a9c:	83 f8 02             	cmp    eax,0x2
c0010a9f:	76 50                	jbe    c0010af1 <SysTell(regs*)+0x60>
c0010aa1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010aa6:	76 19                	jbe    c0010ac1 <SysTell(regs*)+0x30>
c0010aa8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010aab:	31 d2                	xor    edx,edx
c0010aad:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010ab3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010aba:	31 c0                	xor    eax,eax
c0010abc:	83 c4 08             	add    esp,0x8
c0010abf:	5b                   	pop    ebx
c0010ac0:	c3                   	ret    
c0010ac1:	83 ec 0c             	sub    esp,0xc
c0010ac4:	50                   	push   eax
c0010ac5:	e8 85 86 ff ff       	call   c000914f <getFromFileDescriptor(int)>
c0010aca:	5a                   	pop    edx
c0010acb:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010ace:	59                   	pop    ecx
c0010acf:	53                   	push   ebx
c0010ad0:	50                   	push   eax
c0010ad1:	e8 6c a1 ff ff       	call   c000ac42 <File::tell(unsigned long long*)>
c0010ad6:	83 c4 10             	add    esp,0x10
c0010ad9:	85 c0                	test   eax,eax
c0010adb:	0f 95 c0             	setne  al
c0010ade:	31 d2                	xor    edx,edx
c0010ae0:	25 ff 00 00 00       	and    eax,0xff
c0010ae5:	f7 d8                	neg    eax
c0010ae7:	83 d2 00             	adc    edx,0x0
c0010aea:	83 c4 08             	add    esp,0x8
c0010aed:	f7 da                	neg    edx
c0010aef:	5b                   	pop    ebx
c0010af0:	c3                   	ret    
c0010af1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010af6:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010afb:	83 c4 08             	add    esp,0x8
c0010afe:	5b                   	pop    ebx
c0010aff:	c3                   	ret    

c0010b00 <SysSize(regs*)>:
c0010b00:	53                   	push   ebx
c0010b01:	83 ec 18             	sub    esp,0x18
c0010b04:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010b08:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010b0b:	83 f8 02             	cmp    eax,0x2
c0010b0e:	76 56                	jbe    c0010b66 <SysSize(regs*)+0x66>
c0010b10:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010b15:	76 19                	jbe    c0010b30 <SysSize(regs*)+0x30>
c0010b17:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010b1a:	31 d2                	xor    edx,edx
c0010b1c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010b22:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010b29:	31 c0                	xor    eax,eax
c0010b2b:	83 c4 18             	add    esp,0x18
c0010b2e:	5b                   	pop    ebx
c0010b2f:	c3                   	ret    
c0010b30:	83 ec 0c             	sub    esp,0xc
c0010b33:	50                   	push   eax
c0010b34:	e8 16 86 ff ff       	call   c000914f <getFromFileDescriptor(int)>
c0010b39:	83 c4 0c             	add    esp,0xc
c0010b3c:	8d 54 24 13          	lea    edx,[esp+0x13]
c0010b40:	52                   	push   edx
c0010b41:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010b44:	52                   	push   edx
c0010b45:	50                   	push   eax
c0010b46:	e8 8f a2 ff ff       	call   c000adda <File::stat(unsigned long long*, bool*)>
c0010b4b:	83 c4 10             	add    esp,0x10
c0010b4e:	85 c0                	test   eax,eax
c0010b50:	0f 95 c0             	setne  al
c0010b53:	31 d2                	xor    edx,edx
c0010b55:	25 ff 00 00 00       	and    eax,0xff
c0010b5a:	f7 d8                	neg    eax
c0010b5c:	83 d2 00             	adc    edx,0x0
c0010b5f:	83 c4 18             	add    esp,0x18
c0010b62:	f7 da                	neg    edx
c0010b64:	5b                   	pop    ebx
c0010b65:	c3                   	ret    
c0010b66:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b6b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b70:	83 c4 18             	add    esp,0x18
c0010b73:	5b                   	pop    ebx
c0010b74:	c3                   	ret    

c0010b75 <SysSizeFromFilename(regs*)>:
c0010b75:	57                   	push   edi
c0010b76:	56                   	push   esi
c0010b77:	53                   	push   ebx
c0010b78:	83 ec 20             	sub    esp,0x20
c0010b7b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010b7f:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0010b82:	83 fb 02             	cmp    ebx,0x2
c0010b85:	0f 86 8c 00 00 00    	jbe    c0010c17 <SysSizeFromFilename(regs*)+0xa2>
c0010b8b:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0010b91:	76 1b                	jbe    c0010bae <SysSizeFromFilename(regs*)+0x39>
c0010b93:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010b96:	31 d2                	xor    edx,edx
c0010b98:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010b9e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010ba5:	83 c4 20             	add    esp,0x20
c0010ba8:	31 c0                	xor    eax,eax
c0010baa:	5b                   	pop    ebx
c0010bab:	5e                   	pop    esi
c0010bac:	5f                   	pop    edi
c0010bad:	c3                   	ret    
c0010bae:	83 ec 0c             	sub    esp,0xc
c0010bb1:	68 14 01 00 00       	push   0x114
c0010bb6:	e8 fe 6b ff ff       	call   c00077b9 <malloc>
c0010bbb:	83 c4 0c             	add    esp,0xc
c0010bbe:	89 c7                	mov    edi,eax
c0010bc0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010bc5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010bc8:	50                   	push   eax
c0010bc9:	53                   	push   ebx
c0010bca:	57                   	push   edi
c0010bcb:	e8 9e 9e ff ff       	call   c000aa6e <File::File(char const*, Process*)>
c0010bd0:	83 c4 0c             	add    esp,0xc
c0010bd3:	8d 44 24 23          	lea    eax,[esp+0x23]
c0010bd7:	50                   	push   eax
c0010bd8:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0010bdb:	52                   	push   edx
c0010bdc:	57                   	push   edi
c0010bdd:	e8 f8 a1 ff ff       	call   c000adda <File::stat(unsigned long long*, bool*)>
c0010be2:	83 c4 10             	add    esp,0x10
c0010be5:	85 ff                	test   edi,edi
c0010be7:	74 14                	je     c0010bfd <SysSizeFromFilename(regs*)+0x88>
c0010be9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010bed:	8b 17                	mov    edx,DWORD PTR [edi]
c0010bef:	83 ec 0c             	sub    esp,0xc
c0010bf2:	57                   	push   edi
c0010bf3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010bf6:	83 c4 10             	add    esp,0x10
c0010bf9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010bfd:	85 c0                	test   eax,eax
c0010bff:	0f 95 c0             	setne  al
c0010c02:	31 d2                	xor    edx,edx
c0010c04:	25 ff 00 00 00       	and    eax,0xff
c0010c09:	f7 d8                	neg    eax
c0010c0b:	83 d2 00             	adc    edx,0x0
c0010c0e:	83 c4 20             	add    esp,0x20
c0010c11:	f7 da                	neg    edx
c0010c13:	5b                   	pop    ebx
c0010c14:	5e                   	pop    esi
c0010c15:	5f                   	pop    edi
c0010c16:	c3                   	ret    
c0010c17:	83 c4 20             	add    esp,0x20
c0010c1a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c1f:	5b                   	pop    ebx
c0010c20:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010c25:	5e                   	pop    esi
c0010c26:	5f                   	pop    edi
c0010c27:	c3                   	ret    

c0010c28 <SysClose(regs*)>:
c0010c28:	53                   	push   ebx
c0010c29:	83 ec 08             	sub    esp,0x8
c0010c2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c30:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010c33:	83 f8 02             	cmp    eax,0x2
c0010c36:	76 41                	jbe    c0010c79 <SysClose(regs*)+0x51>
c0010c38:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0010c3e:	83 fa 01             	cmp    edx,0x1
c0010c41:	76 2d                	jbe    c0010c70 <SysClose(regs*)+0x48>
c0010c43:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010c48:	77 2f                	ja     c0010c79 <SysClose(regs*)+0x51>
c0010c4a:	83 ec 0c             	sub    esp,0xc
c0010c4d:	50                   	push   eax
c0010c4e:	e8 fc 84 ff ff       	call   c000914f <getFromFileDescriptor(int)>
c0010c53:	89 c3                	mov    ebx,eax
c0010c55:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c58:	e8 2f 9f ff ff       	call   c000ab8c <File::close()>
c0010c5d:	83 c4 10             	add    esp,0x10
c0010c60:	85 db                	test   ebx,ebx
c0010c62:	74 0c                	je     c0010c70 <SysClose(regs*)+0x48>
c0010c64:	83 ec 0c             	sub    esp,0xc
c0010c67:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010c69:	53                   	push   ebx
c0010c6a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010c6d:	83 c4 10             	add    esp,0x10
c0010c70:	31 c0                	xor    eax,eax
c0010c72:	31 d2                	xor    edx,edx
c0010c74:	83 c4 08             	add    esp,0x8
c0010c77:	5b                   	pop    ebx
c0010c78:	c3                   	ret    
c0010c79:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c7e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010c83:	83 c4 08             	add    esp,0x8
c0010c86:	5b                   	pop    ebx
c0010c87:	c3                   	ret    

c0010c88 <SysOpenDir(regs*)>:
c0010c88:	57                   	push   edi
c0010c89:	56                   	push   esi
c0010c8a:	53                   	push   ebx
c0010c8b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c8f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010c92:	85 c0                	test   eax,eax
c0010c94:	0f 84 e7 00 00 00    	je     c0010d81 <SysOpenDir(regs*)+0xf9>
c0010c9a:	83 ec 0c             	sub    esp,0xc
c0010c9d:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010ca0:	56                   	push   esi
c0010ca1:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0010ca4:	57                   	push   edi
c0010ca5:	50                   	push   eax
c0010ca6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010ca9:	50                   	push   eax
c0010caa:	68 44 ea 01 c0       	push   0xc001ea44
c0010caf:	e8 44 98 ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c0010cb4:	83 c4 18             	add    esp,0x18
c0010cb7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010cba:	50                   	push   eax
c0010cbb:	68 6a ea 01 c0       	push   0xc001ea6a
c0010cc0:	e8 33 98 ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c0010cc5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0010ccc:	e8 e8 6a ff ff       	call   c00077b9 <malloc>
c0010cd1:	83 c4 0c             	add    esp,0xc
c0010cd4:	89 c6                	mov    esi,eax
c0010cd6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010cdb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010cde:	50                   	push   eax
c0010cdf:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010ce2:	50                   	push   eax
c0010ce3:	56                   	push   esi
c0010ce4:	e8 af a2 ff ff       	call   c000af98 <Directory::Directory(char const*, Process*)>
c0010ce9:	c7 04 24 5e f8 01 c0 	mov    DWORD PTR [esp],0xc001f85e
c0010cf0:	e8 03 98 ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c0010cf5:	83 c4 10             	add    esp,0x10
c0010cf8:	85 f6                	test   esi,esi
c0010cfa:	0f 84 8f 00 00 00    	je     c0010d8f <SysOpenDir(regs*)+0x107>
c0010d00:	83 ec 0c             	sub    esp,0xc
c0010d03:	68 7f ea 01 c0       	push   0xc001ea7f
c0010d08:	e8 eb 97 ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c0010d0d:	58                   	pop    eax
c0010d0e:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010d11:	5a                   	pop    edx
c0010d12:	51                   	push   ecx
c0010d13:	68 83 ea 01 c0       	push   0xc001ea83
c0010d18:	e8 db 97 ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c0010d1d:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d20:	e8 33 a3 ff ff       	call   c000b058 <Directory::open()>
c0010d25:	c7 04 24 a7 d7 01 c0 	mov    DWORD PTR [esp],0xc001d7a7
c0010d2c:	89 c7                	mov    edi,eax
c0010d2e:	e8 c5 97 ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c0010d33:	83 c4 10             	add    esp,0x10
c0010d36:	85 ff                	test   edi,edi
c0010d38:	75 37                	jne    c0010d71 <SysOpenDir(regs*)+0xe9>
c0010d3a:	83 ec 0c             	sub    esp,0xc
c0010d3d:	68 94 ea 01 c0       	push   0xc001ea94
c0010d42:	e8 b1 97 ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c0010d47:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d4a:	e8 0b 81 ff ff       	call   c0008e5a <UnixFile::getFileDescriptor()>
c0010d4f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010d52:	89 02                	mov    DWORD PTR [edx],eax
c0010d54:	c1 f8 1f             	sar    eax,0x1f
c0010d57:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010d5a:	c7 04 24 98 ea 01 c0 	mov    DWORD PTR [esp],0xc001ea98
c0010d61:	e8 92 97 ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c0010d66:	83 c4 10             	add    esp,0x10
c0010d69:	31 c0                	xor    eax,eax
c0010d6b:	5b                   	pop    ebx
c0010d6c:	31 d2                	xor    edx,edx
c0010d6e:	5e                   	pop    esi
c0010d6f:	5f                   	pop    edi
c0010d70:	c3                   	ret    
c0010d71:	83 ec 0c             	sub    esp,0xc
c0010d74:	68 90 ea 01 c0       	push   0xc001ea90
c0010d79:	e8 7a 97 ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c0010d7e:	83 c4 10             	add    esp,0x10
c0010d81:	5b                   	pop    ebx
c0010d82:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d87:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010d8c:	5e                   	pop    esi
c0010d8d:	5f                   	pop    edi
c0010d8e:	c3                   	ret    
c0010d8f:	83 ec 0c             	sub    esp,0xc
c0010d92:	68 7b ea 01 c0       	push   0xc001ea7b
c0010d97:	eb e0                	jmp    c0010d79 <SysOpenDir(regs*)+0xf1>

c0010d99 <SysCloseDir(regs*)>:
c0010d99:	53                   	push   ebx
c0010d9a:	83 ec 08             	sub    esp,0x8
c0010d9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010da1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010da4:	8d 50 fd             	lea    edx,[eax-0x3]
c0010da7:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010dad:	77 2f                	ja     c0010dde <SysCloseDir(regs*)+0x45>
c0010daf:	83 ec 0c             	sub    esp,0xc
c0010db2:	50                   	push   eax
c0010db3:	e8 97 83 ff ff       	call   c000914f <getFromFileDescriptor(int)>
c0010db8:	89 c3                	mov    ebx,eax
c0010dba:	89 04 24             	mov    DWORD PTR [esp],eax
c0010dbd:	e8 f2 a2 ff ff       	call   c000b0b4 <Directory::close()>
c0010dc2:	83 c4 10             	add    esp,0x10
c0010dc5:	85 db                	test   ebx,ebx
c0010dc7:	74 0c                	je     c0010dd5 <SysCloseDir(regs*)+0x3c>
c0010dc9:	83 ec 0c             	sub    esp,0xc
c0010dcc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010dce:	53                   	push   ebx
c0010dcf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010dd2:	83 c4 10             	add    esp,0x10
c0010dd5:	31 c0                	xor    eax,eax
c0010dd7:	31 d2                	xor    edx,edx
c0010dd9:	83 c4 08             	add    esp,0x8
c0010ddc:	5b                   	pop    ebx
c0010ddd:	c3                   	ret    
c0010dde:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010de3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010de8:	83 c4 08             	add    esp,0x8
c0010deb:	5b                   	pop    ebx
c0010dec:	c3                   	ret    

c0010ded <SysMakeDir(regs*)>:
c0010ded:	56                   	push   esi
c0010dee:	53                   	push   ebx
c0010def:	83 ec 10             	sub    esp,0x10
c0010df2:	68 14 01 00 00       	push   0x114
c0010df7:	e8 bd 69 ff ff       	call   c00077b9 <malloc>
c0010dfc:	83 c4 0c             	add    esp,0xc
c0010dff:	89 c3                	mov    ebx,eax
c0010e01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e06:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c0010e09:	56                   	push   esi
c0010e0a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010e0e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010e11:	50                   	push   eax
c0010e12:	53                   	push   ebx
c0010e13:	e8 80 a1 ff ff       	call   c000af98 <Directory::Directory(char const*, Process*)>
c0010e18:	83 c4 10             	add    esp,0x10
c0010e1b:	85 db                	test   ebx,ebx
c0010e1d:	74 32                	je     c0010e51 <SysMakeDir(regs*)+0x64>
c0010e1f:	83 ec 0c             	sub    esp,0xc
c0010e22:	53                   	push   ebx
c0010e23:	e8 10 a4 ff ff       	call   c000b238 <Directory::create()>
c0010e28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e2b:	89 c6                	mov    esi,eax
c0010e2d:	e8 82 a2 ff ff       	call   c000b0b4 <Directory::close()>
c0010e32:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010e34:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e37:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010e3a:	83 c4 10             	add    esp,0x10
c0010e3d:	31 c0                	xor    eax,eax
c0010e3f:	59                   	pop    ecx
c0010e40:	85 f6                	test   esi,esi
c0010e42:	5b                   	pop    ebx
c0010e43:	0f 95 c0             	setne  al
c0010e46:	5e                   	pop    esi
c0010e47:	31 d2                	xor    edx,edx
c0010e49:	f7 d8                	neg    eax
c0010e4b:	83 d2 00             	adc    edx,0x0
c0010e4e:	f7 da                	neg    edx
c0010e50:	c3                   	ret    
c0010e51:	59                   	pop    ecx
c0010e52:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e57:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e5c:	5b                   	pop    ebx
c0010e5d:	5e                   	pop    esi
c0010e5e:	c3                   	ret    

c0010e5f <SysWait(regs*)>:
c0010e5f:	83 ec 10             	sub    esp,0x10
c0010e62:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010e66:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010e69:	52                   	push   edx
c0010e6a:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0010e6d:	51                   	push   ecx
c0010e6e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010e71:	50                   	push   eax
c0010e72:	e8 d1 2c 00 00       	call   c0013b48 <waitTask(int, int*, int)>
c0010e77:	83 c4 1c             	add    esp,0x1c
c0010e7a:	99                   	cdq    
c0010e7b:	c3                   	ret    

c0010e7c <SysNotImpl(regs*)>:
c0010e7c:	83 ec 18             	sub    esp,0x18
c0010e7f:	68 9c ea 01 c0       	push   0xc001ea9c
c0010e84:	e8 da f2 ff ff       	call   c0010163 <KePanic(char const*)>
c0010e89:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e8e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e93:	83 c4 1c             	add    esp,0x1c
c0010e96:	c3                   	ret    

c0010e97 <SysPanic(regs*)>:
c0010e97:	83 ec 18             	sub    esp,0x18
c0010e9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010e9e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010ea1:	50                   	push   eax
c0010ea2:	e8 bc f2 ff ff       	call   c0010163 <KePanic(char const*)>
c0010ea7:	b8 01 00 00 00       	mov    eax,0x1
c0010eac:	31 d2                	xor    edx,edx
c0010eae:	83 c4 1c             	add    esp,0x1c
c0010eb1:	c3                   	ret    

c0010eb2 <SysRmdir(regs*)>:
c0010eb2:	56                   	push   esi
c0010eb3:	53                   	push   ebx
c0010eb4:	83 ec 20             	sub    esp,0x20
c0010eb7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010ebb:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010ebe:	68 14 01 00 00       	push   0x114
c0010ec3:	e8 f1 68 ff ff       	call   c00077b9 <malloc>
c0010ec8:	83 c4 0c             	add    esp,0xc
c0010ecb:	89 c3                	mov    ebx,eax
c0010ecd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ed2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010ed5:	50                   	push   eax
c0010ed6:	56                   	push   esi
c0010ed7:	53                   	push   ebx
c0010ed8:	e8 91 9b ff ff       	call   c000aa6e <File::File(char const*, Process*)>
c0010edd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ee0:	e8 c1 9d ff ff       	call   c000aca6 <File::unlink()>
c0010ee5:	83 c4 10             	add    esp,0x10
c0010ee8:	85 db                	test   ebx,ebx
c0010eea:	74 14                	je     c0010f00 <SysRmdir(regs*)+0x4e>
c0010eec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010ef0:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010ef2:	83 ec 0c             	sub    esp,0xc
c0010ef5:	53                   	push   ebx
c0010ef6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010ef9:	83 c4 10             	add    esp,0x10
c0010efc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f00:	85 c0                	test   eax,eax
c0010f02:	0f 95 c0             	setne  al
c0010f05:	31 d2                	xor    edx,edx
c0010f07:	25 ff 00 00 00       	and    eax,0xff
c0010f0c:	f7 d8                	neg    eax
c0010f0e:	83 d2 00             	adc    edx,0x0
c0010f11:	83 c4 14             	add    esp,0x14
c0010f14:	f7 da                	neg    edx
c0010f16:	5b                   	pop    ebx
c0010f17:	5e                   	pop    esi
c0010f18:	c3                   	ret    

c0010f19 <SysUnlink(regs*)>:
c0010f19:	56                   	push   esi
c0010f1a:	53                   	push   ebx
c0010f1b:	83 ec 20             	sub    esp,0x20
c0010f1e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010f22:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010f25:	68 14 01 00 00       	push   0x114
c0010f2a:	e8 8a 68 ff ff       	call   c00077b9 <malloc>
c0010f2f:	83 c4 0c             	add    esp,0xc
c0010f32:	89 c3                	mov    ebx,eax
c0010f34:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f39:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f3c:	50                   	push   eax
c0010f3d:	56                   	push   esi
c0010f3e:	53                   	push   ebx
c0010f3f:	e8 2a 9b ff ff       	call   c000aa6e <File::File(char const*, Process*)>
c0010f44:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f47:	e8 5a 9d ff ff       	call   c000aca6 <File::unlink()>
c0010f4c:	83 c4 10             	add    esp,0x10
c0010f4f:	85 db                	test   ebx,ebx
c0010f51:	74 14                	je     c0010f67 <SysUnlink(regs*)+0x4e>
c0010f53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f57:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010f59:	83 ec 0c             	sub    esp,0xc
c0010f5c:	53                   	push   ebx
c0010f5d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010f60:	83 c4 10             	add    esp,0x10
c0010f63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f67:	85 c0                	test   eax,eax
c0010f69:	0f 95 c0             	setne  al
c0010f6c:	31 d2                	xor    edx,edx
c0010f6e:	25 ff 00 00 00       	and    eax,0xff
c0010f73:	f7 d8                	neg    eax
c0010f75:	83 d2 00             	adc    edx,0x0
c0010f78:	83 c4 14             	add    esp,0x14
c0010f7b:	f7 da                	neg    edx
c0010f7d:	5b                   	pop    ebx
c0010f7e:	5e                   	pop    esi
c0010f7f:	c3                   	ret    

c0010f80 <SysGetArgv(regs*)>:
c0010f80:	83 ec 0c             	sub    esp,0xc
c0010f83:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010f87:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010f8a:	85 c0                	test   eax,eax
c0010f8c:	78 2c                	js     c0010fba <SysGetArgv(regs*)+0x3a>
c0010f8e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010f94:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010f97:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0010f9d:	7d 1b                	jge    c0010fba <SysGetArgv(regs*)+0x3a>
c0010f9f:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0010fa6:	85 c0                	test   eax,eax
c0010fa8:	74 18                	je     c0010fc2 <SysGetArgv(regs*)+0x42>
c0010faa:	83 ec 08             	sub    esp,0x8
c0010fad:	50                   	push   eax
c0010fae:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0010fb1:	50                   	push   eax
c0010fb2:	e8 49 f6 fe ff       	call   c0000600 <strcpy>
c0010fb7:	83 c4 10             	add    esp,0x10
c0010fba:	31 c0                	xor    eax,eax
c0010fbc:	31 d2                	xor    edx,edx
c0010fbe:	83 c4 0c             	add    esp,0xc
c0010fc1:	c3                   	ret    
c0010fc2:	b8 01 00 00 00       	mov    eax,0x1
c0010fc7:	31 d2                	xor    edx,edx
c0010fc9:	83 c4 0c             	add    esp,0xc
c0010fcc:	c3                   	ret    

c0010fcd <SysUSleep(regs*)>:
c0010fcd:	83 ec 1c             	sub    esp,0x1c
c0010fd0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010fd4:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0010fd7:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0010fda:	6a 00                	push   0x0
c0010fdc:	6a 64                	push   0x64
c0010fde:	52                   	push   edx
c0010fdf:	50                   	push   eax
c0010fe0:	e8 3b b2 00 00       	call   c001c220 <__udivdi3>
c0010fe5:	83 c4 14             	add    esp,0x14
c0010fe8:	50                   	push   eax
c0010fe9:	e8 2e 2c 00 00       	call   c0013c1c <milliTenthSleep(unsigned int)>
c0010fee:	31 c0                	xor    eax,eax
c0010ff0:	31 d2                	xor    edx,edx
c0010ff2:	83 c4 1c             	add    esp,0x1c
c0010ff5:	c3                   	ret    

c0010ff6 <SysSpawn(regs*)>:
c0010ff6:	56                   	push   esi
c0010ff7:	53                   	push   ebx
c0010ff8:	50                   	push   eax
c0010ff9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010ffd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011000:	85 c0                	test   eax,eax
c0011002:	75 08                	jne    c001100c <SysSpawn(regs*)+0x16>
c0011004:	59                   	pop    ecx
c0011005:	31 c0                	xor    eax,eax
c0011007:	31 d2                	xor    edx,edx
c0011009:	5b                   	pop    ebx
c001100a:	5e                   	pop    esi
c001100b:	c3                   	ret    
c001100c:	83 ec 0c             	sub    esp,0xc
c001100f:	68 e8 07 00 00       	push   0x7e8
c0011014:	e8 a0 67 ff ff       	call   c00077b9 <malloc>
c0011019:	83 c4 10             	add    esp,0x10
c001101c:	89 c6                	mov    esi,eax
c001101e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011021:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011024:	85 c0                	test   eax,eax
c0011026:	75 33                	jne    c001105b <SysSpawn(regs*)+0x65>
c0011028:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001102d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011030:	52                   	push   edx
c0011031:	50                   	push   eax
c0011032:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0011035:	53                   	push   ebx
c0011036:	56                   	push   esi
c0011037:	e8 44 21 00 00       	call   c0013180 <Process::Process(char const*, Process*, char**)>
c001103c:	83 c4 10             	add    esp,0x10
c001103f:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0011046:	75 bc                	jne    c0011004 <SysSpawn(regs*)+0xe>
c0011048:	83 ec 0c             	sub    esp,0xc
c001104b:	56                   	push   esi
c001104c:	e8 a3 27 00 00       	call   c00137f4 <Process::createUserThread()>
c0011051:	8b 06                	mov    eax,DWORD PTR [esi]
c0011053:	83 c4 10             	add    esp,0x10
c0011056:	99                   	cdq    
c0011057:	59                   	pop    ecx
c0011058:	5b                   	pop    ebx
c0011059:	5e                   	pop    esi
c001105a:	c3                   	ret    
c001105b:	31 c0                	xor    eax,eax
c001105d:	eb d1                	jmp    c0011030 <SysSpawn(regs*)+0x3a>

c001105f <SysGetEnv(regs*)>:
c001105f:	57                   	push   edi
c0011060:	56                   	push   esi
c0011061:	53                   	push   ebx
c0011062:	83 ec 1c             	sub    esp,0x1c
c0011065:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011069:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001106e:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011071:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011074:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011077:	50                   	push   eax
c0011078:	e8 9e ef ff ff       	call   c001001b <Krnl::getProcessTotalEnvCount(Process*)>
c001107d:	83 c4 10             	add    esp,0x10
c0011080:	39 c7                	cmp    edi,eax
c0011082:	7c 14                	jl     c0011098 <SysGetEnv(regs*)+0x39>
c0011084:	85 f6                	test   esi,esi
c0011086:	75 0b                	jne    c0011093 <SysGetEnv(regs*)+0x34>
c0011088:	83 c4 10             	add    esp,0x10
c001108b:	31 c0                	xor    eax,eax
c001108d:	5b                   	pop    ebx
c001108e:	31 d2                	xor    edx,edx
c0011090:	5e                   	pop    esi
c0011091:	5f                   	pop    edi
c0011092:	c3                   	ret    
c0011093:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011096:	eb f0                	jmp    c0011088 <SysGetEnv(regs*)+0x29>
c0011098:	8d 44 24 08          	lea    eax,[esp+0x8]
c001109c:	52                   	push   edx
c001109d:	57                   	push   edi
c001109e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00110a4:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c00110a7:	51                   	push   ecx
c00110a8:	50                   	push   eax
c00110a9:	e8 8d ef ff ff       	call   c001003b <Krnl::getProcessEnvPair(Process*, int)>
c00110ae:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00110b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00110b5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00110b9:	83 c4 0c             	add    esp,0xc
c00110bc:	85 db                	test   ebx,ebx
c00110be:	75 23                	jne    c00110e3 <SysGetEnv(regs*)+0x84>
c00110c0:	83 ec 0c             	sub    esp,0xc
c00110c3:	50                   	push   eax
c00110c4:	e8 77 f4 fe ff       	call   c0000540 <strlen>
c00110c9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00110cc:	89 c3                	mov    ebx,eax
c00110ce:	e8 6d f4 fe ff       	call   c0000540 <strlen>
c00110d3:	31 d2                	xor    edx,edx
c00110d5:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00110d9:	83 c4 10             	add    esp,0x10
c00110dc:	83 c4 10             	add    esp,0x10
c00110df:	5b                   	pop    ebx
c00110e0:	5e                   	pop    esi
c00110e1:	5f                   	pop    edi
c00110e2:	c3                   	ret    
c00110e3:	83 ec 08             	sub    esp,0x8
c00110e6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00110e9:	50                   	push   eax
c00110ea:	56                   	push   esi
c00110eb:	e8 10 f5 fe ff       	call   c0000600 <strcpy>
c00110f0:	58                   	pop    eax
c00110f1:	5a                   	pop    edx
c00110f2:	68 b6 ea 01 c0       	push   0xc001eab6
c00110f7:	56                   	push   esi
c00110f8:	e8 c3 f6 fe ff       	call   c00007c0 <strcat>
c00110fd:	59                   	pop    ecx
c00110fe:	5b                   	pop    ebx
c00110ff:	57                   	push   edi
c0011100:	56                   	push   esi
c0011101:	e8 ba f6 fe ff       	call   c00007c0 <strcat>
c0011106:	83 c4 10             	add    esp,0x10
c0011109:	e9 7a ff ff ff       	jmp    c0011088 <SysGetEnv(regs*)+0x29>

c001110e <SysSetFatAttrib(regs*)>:
c001110e:	57                   	push   edi
c001110f:	56                   	push   esi
c0011110:	53                   	push   ebx
c0011111:	83 ec 1c             	sub    esp,0x1c
c0011114:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0011118:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001111b:	68 14 01 00 00       	push   0x114
c0011120:	e8 94 66 ff ff       	call   c00077b9 <malloc>
c0011125:	83 c4 0c             	add    esp,0xc
c0011128:	89 c3                	mov    ebx,eax
c001112a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001112f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011132:	50                   	push   eax
c0011133:	57                   	push   edi
c0011134:	53                   	push   ebx
c0011135:	e8 34 99 ff ff       	call   c000aa6e <File::File(char const*, Process*)>
c001113a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001113d:	83 c4 0c             	add    esp,0xc
c0011140:	0f b6 d4             	movzx  edx,ah
c0011143:	25 ff 00 00 00       	and    eax,0xff
c0011148:	52                   	push   edx
c0011149:	50                   	push   eax
c001114a:	53                   	push   ebx
c001114b:	e8 f0 9b ff ff       	call   c000ad40 <File::chfatattr(unsigned char, unsigned char)>
c0011150:	83 c4 10             	add    esp,0x10
c0011153:	85 db                	test   ebx,ebx
c0011155:	74 14                	je     c001116b <SysSetFatAttrib(regs*)+0x5d>
c0011157:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001115b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001115d:	83 ec 0c             	sub    esp,0xc
c0011160:	53                   	push   ebx
c0011161:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011164:	83 c4 10             	add    esp,0x10
c0011167:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001116b:	85 c0                	test   eax,eax
c001116d:	0f 95 c0             	setne  al
c0011170:	31 d2                	xor    edx,edx
c0011172:	25 ff 00 00 00       	and    eax,0xff
c0011177:	f7 d8                	neg    eax
c0011179:	83 d2 00             	adc    edx,0x0
c001117c:	83 c4 10             	add    esp,0x10
c001117f:	f7 da                	neg    edx
c0011181:	5b                   	pop    ebx
c0011182:	5e                   	pop    esi
c0011183:	5f                   	pop    edi
c0011184:	c3                   	ret    

c0011185 <SysPipe(regs*)>:
c0011185:	57                   	push   edi
c0011186:	56                   	push   esi
c0011187:	53                   	push   ebx
c0011188:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001118c:	83 ec 0c             	sub    esp,0xc
c001118f:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011192:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011195:	6a 20                	push   0x20
c0011197:	e8 1d 66 ff ff       	call   c00077b9 <malloc>
c001119c:	89 c3                	mov    ebx,eax
c001119e:	58                   	pop    eax
c001119f:	5a                   	pop    edx
c00111a0:	68 00 50 00 00       	push   0x5000
c00111a5:	53                   	push   ebx
c00111a6:	e8 33 6f ff ff       	call   c00080de <Pipe::Pipe(int)>
c00111ab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00111ae:	e8 a7 7c ff ff       	call   c0008e5a <UnixFile::getFileDescriptor()>
c00111b3:	89 07                	mov    DWORD PTR [edi],eax
c00111b5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00111b8:	e8 9d 7c ff ff       	call   c0008e5a <UnixFile::getFileDescriptor()>
c00111bd:	83 c4 10             	add    esp,0x10
c00111c0:	89 06                	mov    DWORD PTR [esi],eax
c00111c2:	31 d2                	xor    edx,edx
c00111c4:	5b                   	pop    ebx
c00111c5:	31 c0                	xor    eax,eax
c00111c7:	5e                   	pop    esi
c00111c8:	5f                   	pop    edi
c00111c9:	c3                   	ret    

c00111ca <SysGetUnixTime(regs*)>:
c00111ca:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c00111cf:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00111d5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00111d9:	e9 a0 a2 ff ff       	jmp    c000b47e <Clock::timeInSecondsLocal()>

c00111de <string_ends_with(char const*, char const*)>:
c00111de:	57                   	push   edi
c00111df:	56                   	push   esi
c00111e0:	53                   	push   ebx
c00111e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00111e5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00111e9:	83 ec 0c             	sub    esp,0xc
c00111ec:	53                   	push   ebx
c00111ed:	e8 4e f3 fe ff       	call   c0000540 <strlen>
c00111f2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00111f5:	89 c6                	mov    esi,eax
c00111f7:	e8 44 f3 fe ff       	call   c0000540 <strlen>
c00111fc:	83 c4 10             	add    esp,0x10
c00111ff:	39 c6                	cmp    esi,eax
c0011201:	7d 06                	jge    c0011209 <string_ends_with(char const*, char const*)+0x2b>
c0011203:	5b                   	pop    ebx
c0011204:	31 c0                	xor    eax,eax
c0011206:	5e                   	pop    esi
c0011207:	5f                   	pop    edi
c0011208:	c3                   	ret    
c0011209:	83 ec 08             	sub    esp,0x8
c001120c:	29 c6                	sub    esi,eax
c001120e:	57                   	push   edi
c001120f:	01 f3                	add    ebx,esi
c0011211:	53                   	push   ebx
c0011212:	e8 c9 f4 fe ff       	call   c00006e0 <strcmp>
c0011217:	83 c4 10             	add    esp,0x10
c001121a:	85 c0                	test   eax,eax
c001121c:	5b                   	pop    ebx
c001121d:	0f 94 c0             	sete   al
c0011220:	5e                   	pop    esi
c0011221:	25 ff 00 00 00       	and    eax,0xff
c0011226:	5f                   	pop    edi
c0011227:	c3                   	ret    

c0011228 <SysOpen(regs*)>:
c0011228:	56                   	push   esi
c0011229:	53                   	push   ebx
c001122a:	81 ec 04 01 00 00    	sub    esp,0x104
c0011230:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011237:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001123a:	85 d2                	test   edx,edx
c001123c:	0f 84 cc 01 00 00    	je     c001140e <SysOpen(regs*)+0x1e6>
c0011242:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011245:	85 c0                	test   eax,eax
c0011247:	0f 84 c1 01 00 00    	je     c001140e <SysOpen(regs*)+0x1e6>
c001124d:	83 ec 08             	sub    esp,0x8
c0011250:	50                   	push   eax
c0011251:	68 b8 ea 01 c0       	push   0xc001eab8
c0011256:	e8 9d 92 ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c001125b:	83 c4 0c             	add    esp,0xc
c001125e:	68 c5 ea 01 c0       	push   0xc001eac5
c0011263:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011266:	50                   	push   eax
c0011267:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001126b:	56                   	push   esi
c001126c:	e8 53 96 ff ff       	call   c000a8c4 <Fs::standardiseFiles(char*, char const*, char const*)>
c0011271:	89 34 24             	mov    DWORD PTR [esp],esi
c0011274:	e8 c7 f2 fe ff       	call   c0000540 <strlen>
c0011279:	83 c4 10             	add    esp,0x10
c001127c:	48                   	dec    eax
c001127d:	74 1d                	je     c001129c <SysOpen(regs*)+0x74>
c001127f:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0011282:	eb 0f                	jmp    c0011293 <SysOpen(regs*)+0x6b>
c0011284:	80 fa 3a             	cmp    dl,0x3a
c0011287:	74 0f                	je     c0011298 <SysOpen(regs*)+0x70>
c0011289:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001128d:	48                   	dec    eax
c001128e:	74 0c                	je     c001129c <SysOpen(regs*)+0x74>
c0011290:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0011293:	80 fa 2e             	cmp    dl,0x2e
c0011296:	75 ec                	jne    c0011284 <SysOpen(regs*)+0x5c>
c0011298:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001129c:	83 ec 08             	sub    esp,0x8
c001129f:	68 c9 ea 01 c0       	push   0xc001eac9
c00112a4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00112a7:	50                   	push   eax
c00112a8:	e8 31 ff ff ff       	call   c00111de <string_ends_with(char const*, char const*)>
c00112ad:	83 c4 10             	add    esp,0x10
c00112b0:	85 c0                	test   eax,eax
c00112b2:	74 1d                	je     c00112d1 <SysOpen(regs*)+0xa9>
c00112b4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00112b7:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00112bd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00112c4:	81 c4 04 01 00 00    	add    esp,0x104
c00112ca:	31 c0                	xor    eax,eax
c00112cc:	31 d2                	xor    edx,edx
c00112ce:	5b                   	pop    ebx
c00112cf:	5e                   	pop    esi
c00112d0:	c3                   	ret    
c00112d1:	83 ec 08             	sub    esp,0x8
c00112d4:	68 ce ea 01 c0       	push   0xc001eace
c00112d9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00112dc:	50                   	push   eax
c00112dd:	e8 fc fe ff ff       	call   c00111de <string_ends_with(char const*, char const*)>
c00112e2:	83 c4 10             	add    esp,0x10
c00112e5:	85 c0                	test   eax,eax
c00112e7:	75 cb                	jne    c00112b4 <SysOpen(regs*)+0x8c>
c00112e9:	83 ec 08             	sub    esp,0x8
c00112ec:	68 ca ea 01 c0       	push   0xc001eaca
c00112f1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00112f4:	50                   	push   eax
c00112f5:	e8 e6 f3 fe ff       	call   c00006e0 <strcmp>
c00112fa:	83 c4 10             	add    esp,0x10
c00112fd:	85 c0                	test   eax,eax
c00112ff:	74 b3                	je     c00112b4 <SysOpen(regs*)+0x8c>
c0011301:	83 ec 08             	sub    esp,0x8
c0011304:	68 c9 ea 01 c0       	push   0xc001eac9
c0011309:	56                   	push   esi
c001130a:	e8 cf fe ff ff       	call   c00111de <string_ends_with(char const*, char const*)>
c001130f:	83 c4 10             	add    esp,0x10
c0011312:	85 c0                	test   eax,eax
c0011314:	75 9e                	jne    c00112b4 <SysOpen(regs*)+0x8c>
c0011316:	83 ec 08             	sub    esp,0x8
c0011319:	68 d3 ea 01 c0       	push   0xc001ead3
c001131e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011321:	50                   	push   eax
c0011322:	e8 b7 fe ff ff       	call   c00111de <string_ends_with(char const*, char const*)>
c0011327:	83 c4 10             	add    esp,0x10
c001132a:	85 c0                	test   eax,eax
c001132c:	0f 85 ef 00 00 00    	jne    c0011421 <SysOpen(regs*)+0x1f9>
c0011332:	83 ec 08             	sub    esp,0x8
c0011335:	68 d8 ea 01 c0       	push   0xc001ead8
c001133a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001133d:	50                   	push   eax
c001133e:	e8 9b fe ff ff       	call   c00111de <string_ends_with(char const*, char const*)>
c0011343:	83 c4 10             	add    esp,0x10
c0011346:	85 c0                	test   eax,eax
c0011348:	0f 85 d3 00 00 00    	jne    c0011421 <SysOpen(regs*)+0x1f9>
c001134e:	83 ec 08             	sub    esp,0x8
c0011351:	68 d4 ea 01 c0       	push   0xc001ead4
c0011356:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011359:	51                   	push   ecx
c001135a:	e8 81 f3 fe ff       	call   c00006e0 <strcmp>
c001135f:	83 c4 10             	add    esp,0x10
c0011362:	85 c0                	test   eax,eax
c0011364:	0f 84 b7 00 00 00    	je     c0011421 <SysOpen(regs*)+0x1f9>
c001136a:	83 ec 08             	sub    esp,0x8
c001136d:	68 d3 ea 01 c0       	push   0xc001ead3
c0011372:	56                   	push   esi
c0011373:	e8 66 fe ff ff       	call   c00111de <string_ends_with(char const*, char const*)>
c0011378:	83 c4 10             	add    esp,0x10
c001137b:	85 c0                	test   eax,eax
c001137d:	0f 85 9e 00 00 00    	jne    c0011421 <SysOpen(regs*)+0x1f9>
c0011383:	83 ec 0c             	sub    esp,0xc
c0011386:	68 14 01 00 00       	push   0x114
c001138b:	e8 29 64 ff ff       	call   c00077b9 <malloc>
c0011390:	83 c4 0c             	add    esp,0xc
c0011393:	89 c6                	mov    esi,eax
c0011395:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001139a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001139d:	50                   	push   eax
c001139e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00113a1:	52                   	push   edx
c00113a2:	56                   	push   esi
c00113a3:	e8 c6 96 ff ff       	call   c000aa6e <File::File(char const*, Process*)>
c00113a8:	83 c4 10             	add    esp,0x10
c00113ab:	85 f6                	test   esi,esi
c00113ad:	74 5f                	je     c001140e <SysOpen(regs*)+0x1e6>
c00113af:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00113b2:	89 d0                	mov    eax,edx
c00113b4:	25 ff 00 00 00       	and    eax,0xff
c00113b9:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00113bc:	89 d0                	mov    eax,edx
c00113be:	83 e0 01             	and    eax,0x1
c00113c1:	f6 c2 02             	test   dl,0x2
c00113c4:	74 03                	je     c00113c9 <SysOpen(regs*)+0x1a1>
c00113c6:	83 c8 02             	or     eax,0x2
c00113c9:	f6 c2 04             	test   dl,0x4
c00113cc:	74 03                	je     c00113d1 <SysOpen(regs*)+0x1a9>
c00113ce:	83 c8 04             	or     eax,0x4
c00113d1:	f6 c2 08             	test   dl,0x8
c00113d4:	74 03                	je     c00113d9 <SysOpen(regs*)+0x1b1>
c00113d6:	83 c8 0a             	or     eax,0xa
c00113d9:	83 e2 10             	and    edx,0x10
c00113dc:	74 03                	je     c00113e1 <SysOpen(regs*)+0x1b9>
c00113de:	83 c8 12             	or     eax,0x12
c00113e1:	83 ec 08             	sub    esp,0x8
c00113e4:	50                   	push   eax
c00113e5:	56                   	push   esi
c00113e6:	e8 43 97 ff ff       	call   c000ab2e <File::open(FileOpenMode)>
c00113eb:	83 c4 10             	add    esp,0x10
c00113ee:	85 c0                	test   eax,eax
c00113f0:	75 1c                	jne    c001140e <SysOpen(regs*)+0x1e6>
c00113f2:	83 ec 0c             	sub    esp,0xc
c00113f5:	56                   	push   esi
c00113f6:	e8 5f 7a ff ff       	call   c0008e5a <UnixFile::getFileDescriptor()>
c00113fb:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00113fe:	83 c4 10             	add    esp,0x10
c0011401:	89 02                	mov    DWORD PTR [edx],eax
c0011403:	c1 f8 1f             	sar    eax,0x1f
c0011406:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011409:	e9 b6 fe ff ff       	jmp    c00112c4 <SysOpen(regs*)+0x9c>
c001140e:	81 c4 04 01 00 00    	add    esp,0x104
c0011414:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011419:	ba ff ff ff ff       	mov    edx,0xffffffff
c001141e:	5b                   	pop    ebx
c001141f:	5e                   	pop    esi
c0011420:	c3                   	ret    
c0011421:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011424:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001142a:	e9 8e fe ff ff       	jmp    c00112bd <SysOpen(regs*)+0x95>

c001142f <KeSystemCall(regs*, void*)>:
c001142f:	53                   	push   ebx
c0011430:	83 ec 10             	sub    esp,0x10
c0011433:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011437:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001143a:	68 dd ea 01 c0       	push   0xc001eadd
c001143f:	e8 b4 90 ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c0011444:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011447:	83 c4 10             	add    esp,0x10
c001144a:	83 f8 32             	cmp    eax,0x32
c001144d:	77 16                	ja     c0011465 <KeSystemCall(regs*, void*)+0x36>
c001144f:	8b 14 85 60 fc 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe03a0]
c0011456:	85 d2                	test   edx,edx
c0011458:	74 0b                	je     c0011465 <KeSystemCall(regs*, void*)+0x36>
c001145a:	83 ec 0c             	sub    esp,0xc
c001145d:	53                   	push   ebx
c001145e:	ff d2                	call   edx
c0011460:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011463:	eb 0d                	jmp    c0011472 <KeSystemCall(regs*, void*)+0x43>
c0011465:	52                   	push   edx
c0011466:	52                   	push   edx
c0011467:	50                   	push   eax
c0011468:	68 ed ea 01 c0       	push   0xc001eaed
c001146d:	e8 86 90 ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c0011472:	83 c4 10             	add    esp,0x10
c0011475:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001147a:	31 d2                	xor    edx,edx
c001147c:	83 c4 08             	add    esp,0x8
c001147f:	5b                   	pop    ebx
c0011480:	c3                   	ret    

c0011481 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0011481:	55                   	push   ebp
c0011482:	57                   	push   edi
c0011483:	56                   	push   esi
c0011484:	53                   	push   ebx
c0011485:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001148b:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0011492:	8a 1e                	mov    bl,BYTE PTR [esi]
c0011494:	8d 6e 01             	lea    ebp,[esi+0x1]
c0011497:	80 fb 40             	cmp    bl,0x40
c001149a:	75 1b                	jne    c00114b7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001149c:	8a 16                	mov    dl,BYTE PTR [esi]
c001149e:	84 d2                	test   dl,dl
c00114a0:	0f 84 f1 00 00 00    	je     c0011597 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00114a6:	8d 46 01             	lea    eax,[esi+0x1]
c00114a9:	80 fa 3a             	cmp    dl,0x3a
c00114ac:	74 04                	je     c00114b2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c00114ae:	89 c6                	mov    esi,eax
c00114b0:	eb ea                	jmp    c001149c <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c00114b2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00114b5:	89 c6                	mov    esi,eax
c00114b7:	50                   	push   eax
c00114b8:	6a 40                	push   0x40
c00114ba:	6a 00                	push   0x0
c00114bc:	8d 44 24 24          	lea    eax,[esp+0x24]
c00114c0:	50                   	push   eax
c00114c1:	e8 0a f0 fe ff       	call   c00004d0 <memset>
c00114c6:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00114cd:	31 c0                	xor    eax,eax
c00114cf:	83 c4 10             	add    esp,0x10
c00114d2:	8a 0f                	mov    cl,BYTE PTR [edi]
c00114d4:	84 c9                	test   cl,cl
c00114d6:	0f 84 bb 00 00 00    	je     c0011597 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00114dc:	3d c7 00 00 00       	cmp    eax,0xc7
c00114e1:	0f 8f b0 00 00 00    	jg     c0011597 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00114e7:	80 f9 0a             	cmp    cl,0xa
c00114ea:	0f 85 98 00 00 00    	jne    c0011588 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c00114f0:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00114f5:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c00114f9:	a8 df                	test   al,0xdf
c00114fb:	0f 94 c1             	sete   cl
c00114fe:	3c 23                	cmp    al,0x23
c0011500:	0f 94 c2             	sete   dl
c0011503:	08 d1                	or     cl,dl
c0011505:	75 4a                	jne    c0011551 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011507:	8d 50 f7             	lea    edx,[eax-0x9]
c001150a:	80 fa 01             	cmp    dl,0x1
c001150d:	76 42                	jbe    c0011551 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001150f:	3c 5b                	cmp    al,0x5b
c0011511:	75 42                	jne    c0011555 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0011513:	80 fb 40             	cmp    bl,0x40
c0011516:	75 39                	jne    c0011551 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011518:	83 ec 0c             	sub    esp,0xc
c001151b:	8d 54 24 65          	lea    edx,[esp+0x65]
c001151f:	52                   	push   edx
c0011520:	e8 1b f0 fe ff       	call   c0000540 <strlen>
c0011525:	83 c4 10             	add    esp,0x10
c0011528:	83 f8 3f             	cmp    eax,0x3f
c001152b:	77 6a                	ja     c0011597 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001152d:	50                   	push   eax
c001152e:	50                   	push   eax
c001152f:	8d 54 24 61          	lea    edx,[esp+0x61]
c0011533:	52                   	push   edx
c0011534:	8d 54 24 24          	lea    edx,[esp+0x24]
c0011538:	52                   	push   edx
c0011539:	e8 c2 f0 fe ff       	call   c0000600 <strcpy>
c001153e:	58                   	pop    eax
c001153f:	8d 54 24 24          	lea    edx,[esp+0x24]
c0011543:	52                   	push   edx
c0011544:	e8 f7 ef fe ff       	call   c0000540 <strlen>
c0011549:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001154e:	83 c4 10             	add    esp,0x10
c0011551:	31 d2                	xor    edx,edx
c0011553:	eb 3a                	jmp    c001158f <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0011555:	80 fb 40             	cmp    bl,0x40
c0011558:	74 06                	je     c0011560 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001155a:	8d 44 24 58          	lea    eax,[esp+0x58]
c001155e:	eb 20                	jmp    c0011580 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0011560:	50                   	push   eax
c0011561:	50                   	push   eax
c0011562:	55                   	push   ebp
c0011563:	8d 44 24 24          	lea    eax,[esp+0x24]
c0011567:	50                   	push   eax
c0011568:	e8 73 f1 fe ff       	call   c00006e0 <strcmp>
c001156d:	83 c4 10             	add    esp,0x10
c0011570:	85 c0                	test   eax,eax
c0011572:	75 dd                	jne    c0011551 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011574:	eb e4                	jmp    c001155a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0011576:	8d 50 01             	lea    edx,[eax+0x1]
c0011579:	80 f9 3d             	cmp    cl,0x3d
c001157c:	74 1d                	je     c001159b <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001157e:	89 d0                	mov    eax,edx
c0011580:	8a 08                	mov    cl,BYTE PTR [eax]
c0011582:	84 c9                	test   cl,cl
c0011584:	75 f0                	jne    c0011576 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0011586:	eb 0f                	jmp    c0011597 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011588:	8d 50 01             	lea    edx,[eax+0x1]
c001158b:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001158f:	47                   	inc    edi
c0011590:	89 d0                	mov    eax,edx
c0011592:	e9 3b ff ff ff       	jmp    c00114d2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0011597:	31 c0                	xor    eax,eax
c0011599:	eb 33                	jmp    c00115ce <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001159b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001159f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00115a2:	50                   	push   eax
c00115a3:	50                   	push   eax
c00115a4:	8d 44 24 60          	lea    eax,[esp+0x60]
c00115a8:	50                   	push   eax
c00115a9:	56                   	push   esi
c00115aa:	e8 31 f1 fe ff       	call   c00006e0 <strcmp>
c00115af:	83 c4 10             	add    esp,0x10
c00115b2:	85 c0                	test   eax,eax
c00115b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00115b8:	75 97                	jne    c0011551 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00115ba:	51                   	push   ecx
c00115bb:	51                   	push   ecx
c00115bc:	52                   	push   edx
c00115bd:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00115c4:	e8 37 f0 fe ff       	call   c0000600 <strcpy>
c00115c9:	83 c4 10             	add    esp,0x10
c00115cc:	b0 01                	mov    al,0x1
c00115ce:	81 c4 2c 01 00 00    	add    esp,0x12c
c00115d4:	5b                   	pop    ebx
c00115d5:	5e                   	pop    esi
c00115d6:	5f                   	pop    edi
c00115d7:	5d                   	pop    ebp
c00115d8:	c3                   	ret    

c00115d9 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c00115d9:	57                   	push   edi
c00115da:	56                   	push   esi
c00115db:	53                   	push   ebx
c00115dc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00115e2:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c00115e9:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00115f0:	53                   	push   ebx
c00115f1:	e8 4a ef fe ff       	call   c0000540 <strlen>
c00115f6:	89 34 24             	mov    DWORD PTR [esp],esi
c00115f9:	89 c7                	mov    edi,eax
c00115fb:	e8 40 ef fe ff       	call   c0000540 <strlen>
c0011600:	83 c4 10             	add    esp,0x10
c0011603:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0011607:	3d ff 00 00 00       	cmp    eax,0xff
c001160c:	0f 87 d3 00 00 00    	ja     c00116e5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0011612:	57                   	push   edi
c0011613:	57                   	push   edi
c0011614:	56                   	push   esi
c0011615:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0011619:	56                   	push   esi
c001161a:	e8 e1 ef fe ff       	call   c0000600 <strcpy>
c001161f:	58                   	pop    eax
c0011620:	5a                   	pop    edx
c0011621:	68 aa ed 01 c0       	push   0xc001edaa
c0011626:	56                   	push   esi
c0011627:	e8 94 f1 fe ff       	call   c00007c0 <strcat>
c001162c:	59                   	pop    ecx
c001162d:	5f                   	pop    edi
c001162e:	53                   	push   ebx
c001162f:	56                   	push   esi
c0011630:	e8 8b f1 fe ff       	call   c00007c0 <strcat>
c0011635:	58                   	pop    eax
c0011636:	5a                   	pop    edx
c0011637:	68 01 eb 01 c0       	push   0xc001eb01
c001163c:	56                   	push   esi
c001163d:	e8 7e f1 fe ff       	call   c00007c0 <strcat>
c0011642:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011649:	e8 6b 61 ff ff       	call   c00077b9 <malloc>
c001164e:	83 c4 0c             	add    esp,0xc
c0011651:	89 c3                	mov    ebx,eax
c0011653:	ff 35 30 40 02 c0    	push   DWORD PTR ds:0xc0024030
c0011659:	56                   	push   esi
c001165a:	50                   	push   eax
c001165b:	e8 0e 94 ff ff       	call   c000aa6e <File::File(char const*, Process*)>
c0011660:	83 c4 10             	add    esp,0x10
c0011663:	85 db                	test   ebx,ebx
c0011665:	74 7e                	je     c00116e5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0011667:	51                   	push   ecx
c0011668:	51                   	push   ecx
c0011669:	6a 01                	push   0x1
c001166b:	53                   	push   ebx
c001166c:	e8 bd 94 ff ff       	call   c000ab2e <File::open(FileOpenMode)>
c0011671:	83 c4 10             	add    esp,0x10
c0011674:	85 c0                	test   eax,eax
c0011676:	74 08                	je     c0011680 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0011678:	83 ec 0c             	sub    esp,0xc
c001167b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001167d:	53                   	push   ebx
c001167e:	eb 5f                	jmp    c00116df <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0011680:	52                   	push   edx
c0011681:	8d 44 24 17          	lea    eax,[esp+0x17]
c0011685:	50                   	push   eax
c0011686:	8d 44 24 20          	lea    eax,[esp+0x20]
c001168a:	50                   	push   eax
c001168b:	53                   	push   ebx
c001168c:	e8 49 97 ff ff       	call   c000adda <File::stat(unsigned long long*, bool*)>
c0011691:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011695:	83 c4 10             	add    esp,0x10
c0011698:	89 c1                	mov    ecx,eax
c001169a:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001169e:	74 31                	je     c00116d1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00116a0:	83 ec 0c             	sub    esp,0xc
c00116a3:	50                   	push   eax
c00116a4:	e8 10 61 ff ff       	call   c00077b9 <malloc>
c00116a9:	89 c6                	mov    esi,eax
c00116ab:	58                   	pop    eax
c00116ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116ae:	8d 54 24 20          	lea    edx,[esp+0x20]
c00116b2:	52                   	push   edx
c00116b3:	56                   	push   esi
c00116b4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00116b8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00116bc:	53                   	push   ebx
c00116bd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00116c0:	83 c4 20             	add    esp,0x20
c00116c3:	85 c0                	test   eax,eax
c00116c5:	75 0a                	jne    c00116d1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00116c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00116cb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00116cf:	74 18                	je     c00116e9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c00116d1:	83 ec 0c             	sub    esp,0xc
c00116d4:	53                   	push   ebx
c00116d5:	e8 b2 94 ff ff       	call   c000ab8c <File::close()>
c00116da:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00116df:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00116e2:	83 c4 10             	add    esp,0x10
c00116e5:	31 c0                	xor    eax,eax
c00116e7:	eb 3b                	jmp    c0011724 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00116e9:	83 ec 0c             	sub    esp,0xc
c00116ec:	53                   	push   ebx
c00116ed:	e8 9a 94 ff ff       	call   c000ab8c <File::close()>
c00116f2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00116f7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00116fa:	83 c4 0c             	add    esp,0xc
c00116fd:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0011704:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001170b:	56                   	push   esi
c001170c:	e8 70 fd ff ff       	call   c0011481 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0011711:	89 34 24             	mov    DWORD PTR [esp],esi
c0011714:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011718:	e8 cc 60 ff ff       	call   c00077e9 <free>
c001171d:	83 c4 10             	add    esp,0x10
c0011720:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011724:	81 c4 20 01 00 00    	add    esp,0x120
c001172a:	5b                   	pop    ebx
c001172b:	5e                   	pop    esi
c001172c:	5f                   	pop    edi
c001172d:	c3                   	ret    

c001172e <Reg::getLine(char*, char*, char*)>:
c001172e:	57                   	push   edi
c001172f:	56                   	push   esi
c0011730:	53                   	push   ebx
c0011731:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011735:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0011739:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001173d:	57                   	push   edi
c001173e:	56                   	push   esi
c001173f:	53                   	push   ebx
c0011740:	68 06 eb 01 c0       	push   0xc001eb06
c0011745:	e8 8f fe ff ff       	call   c00115d9 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001174a:	83 c4 10             	add    esp,0x10
c001174d:	84 c0                	test   al,al
c001174f:	75 10                	jne    c0011761 <Reg::getLine(char*, char*, char*)+0x33>
c0011751:	57                   	push   edi
c0011752:	56                   	push   esi
c0011753:	53                   	push   ebx
c0011754:	68 2b eb 01 c0       	push   0xc001eb2b
c0011759:	e8 7b fe ff ff       	call   c00115d9 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001175e:	83 c4 10             	add    esp,0x10
c0011761:	5b                   	pop    ebx
c0011762:	5e                   	pop    esi
c0011763:	5f                   	pop    edi
c0011764:	c3                   	ret    

c0011765 <Reg::readInt(char*, char*, int*)>:
c0011765:	55                   	push   ebp
c0011766:	57                   	push   edi
c0011767:	56                   	push   esi
c0011768:	53                   	push   ebx
c0011769:	81 ec f0 00 00 00    	sub    esp,0xf0
c001176f:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0011773:	57                   	push   edi
c0011774:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001177b:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0011782:	e8 a7 ff ff ff       	call   c001172e <Reg::getLine(char*, char*, char*)>
c0011787:	83 c4 10             	add    esp,0x10
c001178a:	84 c0                	test   al,al
c001178c:	0f 84 b3 00 00 00    	je     c0011845 <Reg::readInt(char*, char*, int*)+0xe0>
c0011792:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0011796:	80 fa 2b             	cmp    dl,0x2b
c0011799:	74 0c                	je     c00117a7 <Reg::readInt(char*, char*, int*)+0x42>
c001179b:	80 fa 2d             	cmp    dl,0x2d
c001179e:	75 0e                	jne    c00117ae <Reg::readInt(char*, char*, int*)+0x49>
c00117a0:	ba 01 00 00 00       	mov    edx,0x1
c00117a5:	eb 0b                	jmp    c00117b2 <Reg::readInt(char*, char*, int*)+0x4d>
c00117a7:	ba 01 00 00 00       	mov    edx,0x1
c00117ac:	eb 02                	jmp    c00117b0 <Reg::readInt(char*, char*, int*)+0x4b>
c00117ae:	31 d2                	xor    edx,edx
c00117b0:	31 c0                	xor    eax,eax
c00117b2:	be 0a 00 00 00       	mov    esi,0xa
c00117b7:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00117bc:	75 20                	jne    c00117de <Reg::readInt(char*, char*, int*)+0x79>
c00117be:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c00117c2:	80 f9 78             	cmp    cl,0x78
c00117c5:	75 0a                	jne    c00117d1 <Reg::readInt(char*, char*, int*)+0x6c>
c00117c7:	83 c2 02             	add    edx,0x2
c00117ca:	be 10 00 00 00       	mov    esi,0x10
c00117cf:	eb 0d                	jmp    c00117de <Reg::readInt(char*, char*, int*)+0x79>
c00117d1:	80 f9 62             	cmp    cl,0x62
c00117d4:	75 08                	jne    c00117de <Reg::readInt(char*, char*, int*)+0x79>
c00117d6:	83 c2 02             	add    edx,0x2
c00117d9:	be 02 00 00 00       	mov    esi,0x2
c00117de:	01 d7                	add    edi,edx
c00117e0:	31 d2                	xor    edx,edx
c00117e2:	8a 1f                	mov    bl,BYTE PTR [edi]
c00117e4:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c00117e8:	80 fb 0d             	cmp    bl,0xd
c00117eb:	0f 94 c3             	sete   bl
c00117ee:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00117f3:	0f 94 c1             	sete   cl
c00117f6:	08 cb                	or     bl,cl
c00117f8:	75 3a                	jne    c0011834 <Reg::readInt(char*, char*, int*)+0xcf>
c00117fa:	0f af d6             	imul   edx,esi
c00117fd:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0011802:	83 fe 10             	cmp    esi,0x10
c0011805:	75 26                	jne    c001182d <Reg::readInt(char*, char*, int*)+0xc8>
c0011807:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001180b:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001180e:	89 e9                	mov    ecx,ebp
c0011810:	80 f9 05             	cmp    cl,0x5
c0011813:	77 06                	ja     c001181b <Reg::readInt(char*, char*, int*)+0xb6>
c0011815:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0011819:	eb 16                	jmp    c0011831 <Reg::readInt(char*, char*, int*)+0xcc>
c001181b:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001181f:	83 e9 61             	sub    ecx,0x61
c0011822:	80 f9 05             	cmp    cl,0x5
c0011825:	77 06                	ja     c001182d <Reg::readInt(char*, char*, int*)+0xc8>
c0011827:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001182b:	eb 04                	jmp    c0011831 <Reg::readInt(char*, char*, int*)+0xcc>
c001182d:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0011831:	47                   	inc    edi
c0011832:	eb ae                	jmp    c00117e2 <Reg::readInt(char*, char*, int*)+0x7d>
c0011834:	84 c0                	test   al,al
c0011836:	74 02                	je     c001183a <Reg::readInt(char*, char*, int*)+0xd5>
c0011838:	f7 da                	neg    edx
c001183a:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0011841:	89 10                	mov    DWORD PTR [eax],edx
c0011843:	88 d8                	mov    al,bl
c0011845:	81 c4 ec 00 00 00    	add    esp,0xec
c001184b:	5b                   	pop    ebx
c001184c:	5e                   	pop    esi
c001184d:	5f                   	pop    edi
c001184e:	5d                   	pop    ebp
c001184f:	c3                   	ret    

c0011850 <Reg::readString(char*, char*, char*, int)>:
c0011850:	57                   	push   edi
c0011851:	56                   	push   esi
c0011852:	53                   	push   ebx
c0011853:	81 ec d4 00 00 00    	sub    esp,0xd4
c0011859:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0011860:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0011864:	57                   	push   edi
c0011865:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001186c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0011873:	e8 b6 fe ff ff       	call   c001172e <Reg::getLine(char*, char*, char*)>
c0011878:	83 c4 10             	add    esp,0x10
c001187b:	89 c6                	mov    esi,eax
c001187d:	84 c0                	test   al,al
c001187f:	74 44                	je     c00118c5 <Reg::readString(char*, char*, char*, int)+0x75>
c0011881:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0011888:	31 c0                	xor    eax,eax
c001188a:	4a                   	dec    edx
c001188b:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001188e:	84 c9                	test   cl,cl
c0011890:	74 0f                	je     c00118a1 <Reg::readString(char*, char*, char*, int)+0x51>
c0011892:	39 c2                	cmp    edx,eax
c0011894:	7e 0b                	jle    c00118a1 <Reg::readString(char*, char*, char*, int)+0x51>
c0011896:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0011899:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001189e:	40                   	inc    eax
c001189f:	eb ea                	jmp    c001188b <Reg::readString(char*, char*, char*, int)+0x3b>
c00118a1:	83 ec 0c             	sub    esp,0xc
c00118a4:	53                   	push   ebx
c00118a5:	e8 96 ec fe ff       	call   c0000540 <strlen>
c00118aa:	83 c4 10             	add    esp,0x10
c00118ad:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00118b2:	75 11                	jne    c00118c5 <Reg::readString(char*, char*, char*, int)+0x75>
c00118b4:	83 ec 0c             	sub    esp,0xc
c00118b7:	53                   	push   ebx
c00118b8:	e8 83 ec fe ff       	call   c0000540 <strlen>
c00118bd:	83 c4 10             	add    esp,0x10
c00118c0:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00118c5:	81 c4 d0 00 00 00    	add    esp,0xd0
c00118cb:	89 f0                	mov    eax,esi
c00118cd:	5b                   	pop    ebx
c00118ce:	5e                   	pop    esi
c00118cf:	5f                   	pop    edi
c00118d0:	c3                   	ret    

c00118d1 <Reg::readBool(char*, char*, bool*)>:
c00118d1:	83 ec 20             	sub    esp,0x20
c00118d4:	8d 44 24 10          	lea    eax,[esp+0x10]
c00118d8:	50                   	push   eax
c00118d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118e1:	e8 7f fe ff ff       	call   c0011765 <Reg::readInt(char*, char*, int*)>
c00118e6:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00118eb:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00118ef:	0f 95 02             	setne  BYTE PTR [edx]
c00118f2:	83 c4 2c             	add    esp,0x2c
c00118f5:	c3                   	ret    

c00118f6 <Reg::readBoolWithDefault(char*, char*, bool)>:
c00118f6:	53                   	push   ebx
c00118f7:	83 ec 1c             	sub    esp,0x1c
c00118fa:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00118fe:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011902:	50                   	push   eax
c0011903:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011907:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001190b:	e8 c1 ff ff ff       	call   c00118d1 <Reg::readBool(char*, char*, bool*)>
c0011910:	83 c4 10             	add    esp,0x10
c0011913:	84 c0                	test   al,al
c0011915:	74 04                	je     c001191b <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0011917:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001191b:	88 d8                	mov    al,bl
c001191d:	83 c4 18             	add    esp,0x18
c0011920:	5b                   	pop    ebx
c0011921:	c3                   	ret    

c0011922 <Reg::readIntWithDefault(char*, char*, int)>:
c0011922:	53                   	push   ebx
c0011923:	83 ec 1c             	sub    esp,0x1c
c0011926:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001192a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001192e:	50                   	push   eax
c001192f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011933:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011937:	e8 29 fe ff ff       	call   c0011765 <Reg::readInt(char*, char*, int*)>
c001193c:	83 c4 10             	add    esp,0x10
c001193f:	84 c0                	test   al,al
c0011941:	74 04                	je     c0011947 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0011943:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011947:	89 d8                	mov    eax,ebx
c0011949:	83 c4 18             	add    esp,0x18
c001194c:	5b                   	pop    ebx
c001194d:	c3                   	ret    

c001194e <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001194e:	57                   	push   edi
c001194f:	56                   	push   esi
c0011950:	56                   	push   esi
c0011951:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011955:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0011959:	56                   	push   esi
c001195a:	57                   	push   edi
c001195b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001195f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011963:	e8 e8 fe ff ff       	call   c0011850 <Reg::readString(char*, char*, char*, int)>
c0011968:	83 c4 10             	add    esp,0x10
c001196b:	84 c0                	test   al,al
c001196d:	75 1a                	jne    c0011989 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001196f:	51                   	push   ecx
c0011970:	56                   	push   esi
c0011971:	6a 00                	push   0x0
c0011973:	57                   	push   edi
c0011974:	e8 57 eb fe ff       	call   c00004d0 <memset>
c0011979:	8d 4e ff             	lea    ecx,[esi-0x1]
c001197c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011980:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011982:	83 c4 10             	add    esp,0x10
c0011985:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011989:	89 f8                	mov    eax,edi
c001198b:	5a                   	pop    edx
c001198c:	5e                   	pop    esi
c001198d:	5f                   	pop    edi
c001198e:	c3                   	ret    

c001198f <SysEject(regs*)>:
c001198f:	83 ec 0c             	sub    esp,0xc
c0011992:	83 ca ff             	or     edx,0xffffffff
c0011995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011999:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001199c:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00119a1:	83 e9 41             	sub    ecx,0x41
c00119a4:	83 f9 19             	cmp    ecx,0x19
c00119a7:	77 18                	ja     c00119c1 <SysEject(regs*)+0x32>
c00119a9:	8b 0c 8d c0 32 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcd40]
c00119b0:	85 c9                	test   ecx,ecx
c00119b2:	74 0d                	je     c00119c1 <SysEject(regs*)+0x32>
c00119b4:	83 ec 0c             	sub    esp,0xc
c00119b7:	51                   	push   ecx
c00119b8:	e8 e1 b1 ff ff       	call   c000cb9e <LogicalDisk::eject()>
c00119bd:	83 c4 10             	add    esp,0x10
c00119c0:	99                   	cdq    
c00119c1:	83 c4 0c             	add    esp,0xc
c00119c4:	c3                   	ret    

c00119c5 <SysExit(regs*)>:
c00119c5:	83 ec 18             	sub    esp,0x18
c00119c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00119cc:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00119cf:	e8 6c 28 00 00       	call   c0014240 <terminateTask(int)>
c00119d4:	83 c8 ff             	or     eax,0xffffffff
c00119d7:	83 c4 1c             	add    esp,0x1c
c00119da:	89 c2                	mov    edx,eax
c00119dc:	c3                   	ret    

c00119dd <SysGetCwd(regs*)>:
c00119dd:	83 ec 10             	sub    esp,0x10
c00119e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00119e4:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00119e7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00119ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119ef:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00119f2:	e8 79 8e ff ff       	call   c000a870 <Fs::getcwd(Process*, char*, int)>
c00119f7:	83 c4 1c             	add    esp,0x1c
c00119fa:	99                   	cdq    
c00119fb:	c3                   	ret    

c00119fc <SysGetPID(regs*)>:
c00119fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a01:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a04:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a06:	99                   	cdq    
c0011a07:	c3                   	ret    

c0011a08 <SysGetRAMData(regs*)>:
c0011a08:	8b 0d 88 0d 02 c0    	mov    ecx,DWORD PTR ds:0xc0020d88
c0011a0e:	69 05 84 0d 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0020d84,0xc8
c0011a18:	99                   	cdq    
c0011a19:	f7 f9                	idiv   ecx
c0011a1b:	c1 e0 18             	shl    eax,0x18
c0011a1e:	09 c8                	or     eax,ecx
c0011a20:	99                   	cdq    
c0011a21:	c3                   	ret    

c0011a22 <SysGetVGAPtr(regs*)>:
c0011a22:	55                   	push   ebp
c0011a23:	57                   	push   edi
c0011a24:	56                   	push   esi
c0011a25:	53                   	push   ebx
c0011a26:	83 ec 18             	sub    esp,0x18
c0011a29:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011a2d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0011a30:	e8 0b 23 00 00       	call   c0013d40 <Thr::processFromPID(int)>
c0011a35:	83 c4 10             	add    esp,0x10
c0011a38:	89 c1                	mov    ecx,eax
c0011a3a:	b8 01 00 00 00       	mov    eax,0x1
c0011a3f:	85 c9                	test   ecx,ecx
c0011a41:	74 57                	je     c0011a9a <SysGetVGAPtr(regs*)+0x78>
c0011a43:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0011a49:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0011a4d:	74 0c                	je     c0011a5b <SysGetVGAPtr(regs*)+0x39>
c0011a4f:	83 ec 0c             	sub    esp,0xc
c0011a52:	55                   	push   ebp
c0011a53:	e8 bf 69 ff ff       	call   c0008417 <setActiveTerminal(VgaText*)>
c0011a58:	83 c4 10             	add    esp,0x10
c0011a5b:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0011a5e:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011a61:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0011a66:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011a68:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0011a6b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a6e:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0011a74:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a77:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0011a7a:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0011a80:	50                   	push   eax
c0011a81:	50                   	push   eax
c0011a82:	68 46 eb 01 c0       	push   0xc001eb46
c0011a87:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a8a:	05 a8 0f 00 00       	add    eax,0xfa8
c0011a8f:	50                   	push   eax
c0011a90:	e8 6b eb fe ff       	call   c0000600 <strcpy>
c0011a95:	83 c4 10             	add    esp,0x10
c0011a98:	31 c0                	xor    eax,eax
c0011a9a:	83 c4 0c             	add    esp,0xc
c0011a9d:	31 d2                	xor    edx,edx
c0011a9f:	5b                   	pop    ebx
c0011aa0:	5e                   	pop    esi
c0011aa1:	5f                   	pop    edi
c0011aa2:	5d                   	pop    ebp
c0011aa3:	c3                   	ret    

c0011aa4 <SysLoadDLL(regs*)>:
c0011aa4:	56                   	push   esi
c0011aa5:	53                   	push   ebx
c0011aa6:	31 d2                	xor    edx,edx
c0011aa8:	51                   	push   ecx
c0011aa9:	b8 01 00 00 00       	mov    eax,0x1
c0011aae:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011ab2:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0011ab6:	0f 84 8c 00 00 00    	je     c0011b48 <SysLoadDLL(regs*)+0xa4>
c0011abc:	83 ec 0c             	sub    esp,0xc
c0011abf:	68 14 01 00 00       	push   0x114
c0011ac4:	e8 f0 5c ff ff       	call   c00077b9 <malloc>
c0011ac9:	83 c4 0c             	add    esp,0xc
c0011acc:	89 c3                	mov    ebx,eax
c0011ace:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ad3:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011ad6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011ad9:	53                   	push   ebx
c0011ada:	e8 8f 8f ff ff       	call   c000aa6e <File::File(char const*, Process*)>
c0011adf:	83 c4 10             	add    esp,0x10
c0011ae2:	31 d2                	xor    edx,edx
c0011ae4:	b8 02 00 00 00       	mov    eax,0x2
c0011ae9:	85 db                	test   ebx,ebx
c0011aeb:	74 5b                	je     c0011b48 <SysLoadDLL(regs*)+0xa4>
c0011aed:	83 ec 0c             	sub    esp,0xc
c0011af0:	53                   	push   ebx
c0011af1:	e8 a6 92 ff ff       	call   c000ad9c <File::exists()>
c0011af6:	83 c4 10             	add    esp,0x10
c0011af9:	84 c0                	test   al,al
c0011afb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011afd:	75 11                	jne    c0011b10 <SysLoadDLL(regs*)+0x6c>
c0011aff:	83 ec 0c             	sub    esp,0xc
c0011b02:	53                   	push   ebx
c0011b03:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011b06:	83 c4 10             	add    esp,0x10
c0011b09:	b8 03 00 00 00       	mov    eax,0x3
c0011b0e:	eb 36                	jmp    c0011b46 <SysLoadDLL(regs*)+0xa2>
c0011b10:	83 ec 0c             	sub    esp,0xc
c0011b13:	53                   	push   ebx
c0011b14:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011b17:	58                   	pop    eax
c0011b18:	5a                   	pop    edx
c0011b19:	6a 00                	push   0x0
c0011b1b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011b1e:	e8 86 12 00 00       	call   c0012da9 <Thr::loadDLL(char const*, bool)>
c0011b23:	83 c4 10             	add    esp,0x10
c0011b26:	89 c1                	mov    ecx,eax
c0011b28:	31 d2                	xor    edx,edx
c0011b2a:	b8 04 00 00 00       	mov    eax,0x4
c0011b2f:	85 c9                	test   ecx,ecx
c0011b31:	74 15                	je     c0011b48 <SysLoadDLL(regs*)+0xa4>
c0011b33:	53                   	push   ebx
c0011b34:	53                   	push   ebx
c0011b35:	ff 35 58 0d 02 c0    	push   DWORD PTR ds:0xc0020d58
c0011b3b:	51                   	push   ecx
c0011b3c:	e8 99 14 00 00       	call   c0012fda <Thr::executeDLL(unsigned long, void*)>
c0011b41:	83 c4 10             	add    esp,0x10
c0011b44:	31 c0                	xor    eax,eax
c0011b46:	31 d2                	xor    edx,edx
c0011b48:	59                   	pop    ecx
c0011b49:	5b                   	pop    ebx
c0011b4a:	5e                   	pop    esi
c0011b4b:	c3                   	ret    

c0011b4c <SysRead(regs*)>:
c0011b4c:	57                   	push   edi
c0011b4d:	56                   	push   esi
c0011b4e:	53                   	push   ebx
c0011b4f:	83 ec 10             	sub    esp,0x10
c0011b52:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011b56:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011b59:	83 f8 02             	cmp    eax,0x2
c0011b5c:	77 10                	ja     c0011b6e <SysRead(regs*)+0x22>
c0011b5e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b63:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b66:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011b6c:	eb 0e                	jmp    c0011b7c <SysRead(regs*)+0x30>
c0011b6e:	83 ec 0c             	sub    esp,0xc
c0011b71:	50                   	push   eax
c0011b72:	e8 d8 75 ff ff       	call   c000914f <getFromFileDescriptor(int)>
c0011b77:	83 c4 10             	add    esp,0x10
c0011b7a:	89 c1                	mov    ecx,eax
c0011b7c:	83 c8 ff             	or     eax,0xffffffff
c0011b7f:	85 c9                	test   ecx,ecx
c0011b81:	89 c2                	mov    edx,eax
c0011b83:	74 28                	je     c0011bad <SysRead(regs*)+0x61>
c0011b85:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011b8d:	31 ff                	xor    edi,edi
c0011b8f:	83 ec 0c             	sub    esp,0xc
c0011b92:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011b94:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011b98:	52                   	push   edx
c0011b99:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011b9c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011b9f:	57                   	push   edi
c0011ba0:	56                   	push   esi
c0011ba1:	51                   	push   ecx
c0011ba2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011ba5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ba9:	83 c4 20             	add    esp,0x20
c0011bac:	99                   	cdq    
c0011bad:	83 c4 10             	add    esp,0x10
c0011bb0:	5b                   	pop    ebx
c0011bb1:	5e                   	pop    esi
c0011bb2:	5f                   	pop    edi
c0011bb3:	c3                   	ret    

c0011bb4 <SysRegisterSignal(regs*)>:
c0011bb4:	83 ec 18             	sub    esp,0x18
c0011bb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011bbb:	6a 00                	push   0x0
c0011bbd:	6a 00                	push   0x0
c0011bbf:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011bc2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011bc5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bca:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011bcd:	05 20 07 00 00       	add    eax,0x720
c0011bd2:	50                   	push   eax
c0011bd3:	e8 09 e9 ff ff       	call   c00104e1 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0011bd8:	83 c4 2c             	add    esp,0x2c
c0011bdb:	99                   	cdq    
c0011bdc:	c3                   	ret    

c0011bdd <SysSbrk(regs*)>:
c0011bdd:	56                   	push   esi
c0011bde:	53                   	push   ebx
c0011bdf:	83 ec 0c             	sub    esp,0xc
c0011be2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011be6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011be9:	68 50 eb 01 c0       	push   0xc001eb50
c0011bee:	e8 05 89 ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c0011bf3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bf8:	8b 5b 20             	mov    ebx,DWORD PTR [ebx+0x20]
c0011bfb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011bfe:	83 c4 10             	add    esp,0x10
c0011c01:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0011c07:	85 db                	test   ebx,ebx
c0011c09:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0011c0c:	74 02                	je     c0011c10 <SysSbrk(regs*)+0x33>
c0011c0e:	79 06                	jns    c0011c16 <SysSbrk(regs*)+0x39>
c0011c10:	89 f0                	mov    eax,esi
c0011c12:	31 d2                	xor    edx,edx
c0011c14:	eb 2a                	jmp    c0011c40 <SysSbrk(regs*)+0x63>
c0011c16:	83 c8 ff             	or     eax,0xffffffff
c0011c19:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0011c1f:	89 c2                	mov    edx,eax
c0011c21:	77 1d                	ja     c0011c40 <SysSbrk(regs*)+0x63>
c0011c23:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0011c29:	50                   	push   eax
c0011c2a:	c1 ea 0c             	shr    edx,0xc
c0011c2d:	68 07 0c 00 00       	push   0xc07
c0011c32:	52                   	push   edx
c0011c33:	51                   	push   ecx
c0011c34:	e8 05 7e ff ff       	call   c0009a3e <VAS::allocatePages(int, int)>
c0011c39:	89 f0                	mov    eax,esi
c0011c3b:	31 d2                	xor    edx,edx
c0011c3d:	83 c4 10             	add    esp,0x10
c0011c40:	59                   	pop    ecx
c0011c41:	5b                   	pop    ebx
c0011c42:	5e                   	pop    esi
c0011c43:	c3                   	ret    

c0011c44 <SysSetCwd(regs*)>:
c0011c44:	83 ec 14             	sub    esp,0x14
c0011c47:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011c4b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011c4e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c53:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011c56:	e8 e0 91 ff ff       	call   c000ae3b <Fs::setcwd(Process*, char*)>
c0011c5b:	83 c4 1c             	add    esp,0x1c
c0011c5e:	99                   	cdq    
c0011c5f:	c3                   	ret    

c0011c60 <SysSetTime(regs*)>:
c0011c60:	55                   	push   ebp
c0011c61:	31 c9                	xor    ecx,ecx
c0011c63:	57                   	push   edi
c0011c64:	bd 0c 00 00 00       	mov    ebp,0xc
c0011c69:	56                   	push   esi
c0011c6a:	53                   	push   ebx
c0011c6b:	31 db                	xor    ebx,ebx
c0011c6d:	83 ec 10             	sub    esp,0x10
c0011c70:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011c74:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0011c77:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0011c7a:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0011c7d:	89 c2                	mov    edx,eax
c0011c7f:	66 81 ef 6c 07       	sub    di,0x76c
c0011c84:	83 e2 1f             	and    edx,0x1f
c0011c87:	c1 e7 10             	shl    edi,0x10
c0011c8a:	42                   	inc    edx
c0011c8b:	c1 e8 05             	shr    eax,0x5
c0011c8e:	88 d1                	mov    cl,dl
c0011c90:	31 d2                	xor    edx,edx
c0011c92:	f7 f5                	div    ebp
c0011c94:	89 dd                	mov    ebp,ebx
c0011c96:	88 d5                	mov    ch,dl
c0011c98:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0011c9e:	0f b7 c1             	movzx  eax,cx
c0011ca1:	31 d2                	xor    edx,edx
c0011ca3:	09 f8                	or     eax,edi
c0011ca5:	bf 3c 00 00 00       	mov    edi,0x3c
c0011caa:	89 c1                	mov    ecx,eax
c0011cac:	89 f0                	mov    eax,esi
c0011cae:	f7 f7                	div    edi
c0011cb0:	c1 e2 10             	shl    edx,0x10
c0011cb3:	09 d5                	or     ebp,edx
c0011cb5:	31 d2                	xor    edx,edx
c0011cb7:	89 eb                	mov    ebx,ebp
c0011cb9:	f7 f7                	div    edi
c0011cbb:	bf 10 0e 00 00       	mov    edi,0xe10
c0011cc0:	88 d7                	mov    bh,dl
c0011cc2:	89 f0                	mov    eax,esi
c0011cc4:	31 d2                	xor    edx,edx
c0011cc6:	f7 f7                	div    edi
c0011cc8:	bf 18 00 00 00       	mov    edi,0x18
c0011ccd:	31 d2                	xor    edx,edx
c0011ccf:	f7 f7                	div    edi
c0011cd1:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c0011cd6:	88 d3                	mov    bl,dl
c0011cd8:	53                   	push   ebx
c0011cd9:	51                   	push   ecx
c0011cda:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0011ce0:	e8 67 99 ff ff       	call   c000b64c <Clock::setTimeInDatetimeLocal(datetime_t)>
c0011ce5:	83 c4 1c             	add    esp,0x1c
c0011ce8:	83 f0 01             	xor    eax,0x1
c0011ceb:	5b                   	pop    ebx
c0011cec:	0f b6 c0             	movzx  eax,al
c0011cef:	5e                   	pop    esi
c0011cf0:	31 d2                	xor    edx,edx
c0011cf2:	5f                   	pop    edi
c0011cf3:	5d                   	pop    ebp
c0011cf4:	c3                   	ret    

c0011cf5 <SysTimezone(regs*)>:
c0011cf5:	53                   	push   ebx
c0011cf6:	83 ec 08             	sub    esp,0x8
c0011cf9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011cfd:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0011d01:	75 17                	jne    c0011d1a <SysTimezone(regs*)+0x25>
c0011d03:	83 ec 0c             	sub    esp,0xc
c0011d06:	68 5c eb 01 c0       	push   0xc001eb5c
c0011d0b:	e8 e8 87 ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c0011d10:	83 c8 ff             	or     eax,0xffffffff
c0011d13:	83 c4 10             	add    esp,0x10
c0011d16:	89 c2                	mov    edx,eax
c0011d18:	eb 20                	jmp    c0011d3a <SysTimezone(regs*)+0x45>
c0011d1a:	83 ec 0c             	sub    esp,0xc
c0011d1d:	68 71 eb 01 c0       	push   0xc001eb71
c0011d22:	e8 d1 87 ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c0011d27:	58                   	pop    eax
c0011d28:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011d2b:	e8 78 96 ff ff       	call   c000b3a8 <User::loadClockSettings(int)>
c0011d30:	83 c4 10             	add    esp,0x10
c0011d33:	b8 01 00 00 00       	mov    eax,0x1
c0011d38:	31 d2                	xor    edx,edx
c0011d3a:	83 c4 08             	add    esp,0x8
c0011d3d:	5b                   	pop    ebx
c0011d3e:	c3                   	ret    

c0011d3f <SysWrite(regs*)>:
c0011d3f:	57                   	push   edi
c0011d40:	56                   	push   esi
c0011d41:	53                   	push   ebx
c0011d42:	83 ec 10             	sub    esp,0x10
c0011d45:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011d49:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d4c:	83 f8 02             	cmp    eax,0x2
c0011d4f:	77 10                	ja     c0011d61 <SysWrite(regs*)+0x22>
c0011d51:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d56:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d59:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011d5f:	eb 0e                	jmp    c0011d6f <SysWrite(regs*)+0x30>
c0011d61:	83 ec 0c             	sub    esp,0xc
c0011d64:	50                   	push   eax
c0011d65:	e8 e5 73 ff ff       	call   c000914f <getFromFileDescriptor(int)>
c0011d6a:	83 c4 10             	add    esp,0x10
c0011d6d:	89 c1                	mov    ecx,eax
c0011d6f:	83 c8 ff             	or     eax,0xffffffff
c0011d72:	85 c9                	test   ecx,ecx
c0011d74:	89 c2                	mov    edx,eax
c0011d76:	74 28                	je     c0011da0 <SysWrite(regs*)+0x61>
c0011d78:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011d80:	31 ff                	xor    edi,edi
c0011d82:	83 ec 0c             	sub    esp,0xc
c0011d85:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011d87:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011d8b:	52                   	push   edx
c0011d8c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011d8f:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011d92:	57                   	push   edi
c0011d93:	56                   	push   esi
c0011d94:	51                   	push   ecx
c0011d95:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011d98:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d9c:	83 c4 20             	add    esp,0x20
c0011d9f:	99                   	cdq    
c0011da0:	83 c4 10             	add    esp,0x10
c0011da3:	5b                   	pop    ebx
c0011da4:	5e                   	pop    esi
c0011da5:	5f                   	pop    edi
c0011da6:	c3                   	ret    

c0011da7 <SysWsbe(regs*)>:
c0011da7:	57                   	push   edi
c0011da8:	b9 0b 00 00 00       	mov    ecx,0xb
c0011dad:	56                   	push   esi
c0011dae:	be b0 eb 01 c0       	mov    esi,0xc001ebb0
c0011db3:	53                   	push   ebx
c0011db4:	83 ec 30             	sub    esp,0x30
c0011db7:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011dbb:	fc                   	cld    
c0011dbc:	83 ec 0c             	sub    esp,0xc
c0011dbf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011dc1:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0011dc5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011dca:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011dcd:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0011dd3:	8b 06                	mov    eax,DWORD PTR [esi]
c0011dd5:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0011dd8:	57                   	push   edi
c0011dd9:	e8 62 e7 fe ff       	call   c0000540 <strlen>
c0011dde:	5a                   	pop    edx
c0011ddf:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0011de3:	52                   	push   edx
c0011de4:	31 d2                	xor    edx,edx
c0011de6:	57                   	push   edi
c0011de7:	52                   	push   edx
c0011de8:	50                   	push   eax
c0011de9:	56                   	push   esi
c0011dea:	ff d3                	call   ebx
c0011dec:	83 c4 14             	add    esp,0x14
c0011def:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011df3:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011df6:	e8 45 24 00 00       	call   c0014240 <terminateTask(int)>
c0011dfb:	83 c4 40             	add    esp,0x40
c0011dfe:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011e03:	5b                   	pop    ebx
c0011e04:	31 d2                	xor    edx,edx
c0011e06:	5e                   	pop    esi
c0011e07:	5f                   	pop    edi
c0011e08:	c3                   	ret    

c0011e09 <SysYield(regs*)>:
c0011e09:	83 ec 0c             	sub    esp,0xc
c0011e0c:	fa                   	cli    
c0011e0d:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c0011e13:	e8 04 1b 00 00       	call   c001391c <schedule()>
c0011e18:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0011e1d:	48                   	dec    eax
c0011e1e:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0011e23:	75 01                	jne    c0011e26 <SysYield(regs*)+0x1d>
c0011e25:	fb                   	sti    
c0011e26:	31 c0                	xor    eax,eax
c0011e28:	31 d2                	xor    edx,edx
c0011e2a:	83 c4 0c             	add    esp,0xc
c0011e2d:	c3                   	ret    

c0011e2e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0011e2e:	55                   	push   ebp
c0011e2f:	57                   	push   edi
c0011e30:	56                   	push   esi
c0011e31:	53                   	push   ebx
c0011e32:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0011e38:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0011e40:	0f 95 c2             	setne  dl
c0011e43:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0011e4b:	0f 94 c0             	sete   al
c0011e4e:	84 c2                	test   dl,al
c0011e50:	74 34                	je     c0011e86 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011e52:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0011e5d:	74 27                	je     c0011e86 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011e5f:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0011e66:	05 00 10 00 00       	add    eax,0x1000
c0011e6b:	89 c1                	mov    ecx,eax
c0011e6d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011e72:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0011e78:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0011e7f:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0011e86:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0011e8d:	83 ec 0c             	sub    esp,0xc
c0011e90:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011e96:	6a 01                	push   0x1
c0011e98:	e8 08 74 ff ff       	call   c00092a5 <Virt::allocateKernelVirtualPages(int)>
c0011e9d:	83 c4 10             	add    esp,0x10
c0011ea0:	89 c3                	mov    ebx,eax
c0011ea2:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011ea8:	0f 86 25 01 00 00    	jbe    c0011fd3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c0011eae:	c1 ee 0c             	shr    esi,0xc
c0011eb1:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011eb8:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0011ebc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011ec4:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0011ecb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011ecf:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0011ed6:	29 ef                	sub    edi,ebp
c0011ed8:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0011edc:	0f 83 f8 00 00 00    	jae    c0011fda <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c0011ee2:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0011ee8:	76 05                	jbe    c0011eef <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c0011eea:	bf 00 10 00 00       	mov    edi,0x1000
c0011eef:	83 ec 0c             	sub    esp,0xc
c0011ef2:	31 d2                	xor    edx,edx
c0011ef4:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011efb:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011efd:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011f01:	50                   	push   eax
c0011f02:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011f06:	56                   	push   esi
c0011f07:	52                   	push   edx
c0011f08:	57                   	push   edi
c0011f09:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0011f10:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011f13:	83 c4 20             	add    esp,0x20
c0011f16:	85 c0                	test   eax,eax
c0011f18:	75 06                	jne    c0011f20 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c0011f1a:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0011f1e:	74 13                	je     c0011f33 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c0011f20:	83 ec 0c             	sub    esp,0xc
c0011f23:	53                   	push   ebx
c0011f24:	e8 ac 76 ff ff       	call   c00095d5 <Virt::freeKernelVirtualPages(unsigned long)>
c0011f29:	83 c4 10             	add    esp,0x10
c0011f2c:	31 c0                	xor    eax,eax
c0011f2e:	e9 7c 01 00 00       	jmp    c00120af <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c0011f33:	fa                   	cli    
c0011f34:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c0011f3a:	e8 76 5b ff ff       	call   c0007ab5 <Phys::allocatePage()>
c0011f3f:	6a 07                	push   0x7
c0011f41:	89 c7                	mov    edi,eax
c0011f43:	53                   	push   ebx
c0011f44:	50                   	push   eax
c0011f45:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f4a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f4d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f53:	e8 e2 79 ff ff       	call   c000993a <VAS::mapPage(unsigned long, unsigned long, int)>
c0011f58:	83 c4 0c             	add    esp,0xc
c0011f5b:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011f62:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f68:	6a 00                	push   0x0
c0011f6a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f6f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f72:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f78:	e8 2f 78 ff ff       	call   c00097ac <VAS::mapOtherVASIn(bool, VAS*)>
c0011f7d:	58                   	pop    eax
c0011f7e:	5a                   	pop    edx
c0011f7f:	68 07 0c 00 00       	push   0xc07
c0011f84:	55                   	push   ebp
c0011f85:	57                   	push   edi
c0011f86:	89 df                	mov    edi,ebx
c0011f88:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0011f8f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f95:	6a 00                	push   0x0
c0011f97:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f9c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f9f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011fa5:	e8 50 7d ff ff       	call   c0009cfa <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0011faa:	b9 00 10 00 00       	mov    ecx,0x1000
c0011faf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011fb1:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0011fb6:	83 c4 20             	add    esp,0x20
c0011fb9:	48                   	dec    eax
c0011fba:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0011fbf:	85 c0                	test   eax,eax
c0011fc1:	75 01                	jne    c0011fc4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c0011fc3:	fb                   	sti    
c0011fc4:	81 c5 00 10 00 00    	add    ebp,0x1000
c0011fca:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0011fce:	e9 f1 fe ff ff       	jmp    c0011ec4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c0011fd3:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011fda:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011fe1:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011fe7:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011fed:	0f 86 ae 00 00 00    	jbe    c00120a1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0011ff3:	fa                   	cli    
c0011ff4:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c0011ffa:	c1 ee 0c             	shr    esi,0xc
c0011ffd:	51                   	push   ecx
c0011ffe:	31 ff                	xor    edi,edi
c0012000:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0012007:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001200d:	6a 00                	push   0x0
c001200f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012014:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012017:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001201d:	e8 8a 77 ff ff       	call   c00097ac <VAS::mapOtherVASIn(bool, VAS*)>
c0012022:	83 c4 10             	add    esp,0x10
c0012025:	e8 8b 5a ff ff       	call   c0007ab5 <Phys::allocatePage()>
c001202a:	47                   	inc    edi
c001202b:	6a 07                	push   0x7
c001202d:	53                   	push   ebx
c001202e:	50                   	push   eax
c001202f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012033:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012039:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001203c:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0012042:	e8 f3 78 ff ff       	call   c000993a <VAS::mapPage(unsigned long, unsigned long, int)>
c0012047:	58                   	pop    eax
c0012048:	5a                   	pop    edx
c0012049:	68 07 0c 00 00       	push   0xc07
c001204e:	55                   	push   ebp
c001204f:	81 c5 00 10 00 00    	add    ebp,0x1000
c0012055:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012059:	50                   	push   eax
c001205a:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0012061:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012067:	6a 00                	push   0x0
c0012069:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001206e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012071:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012077:	e8 7e 7c ff ff       	call   c0009cfa <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001207c:	83 c4 1c             	add    esp,0x1c
c001207f:	68 00 10 00 00       	push   0x1000
c0012084:	6a 00                	push   0x0
c0012086:	53                   	push   ebx
c0012087:	e8 44 e4 fe ff       	call   c00004d0 <memset>
c001208c:	83 c4 10             	add    esp,0x10
c001208f:	39 fe                	cmp    esi,edi
c0012091:	77 92                	ja     c0012025 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c0012093:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0012098:	48                   	dec    eax
c0012099:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c001209e:	75 01                	jne    c00120a1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c00120a0:	fb                   	sti    
c00120a1:	83 ec 0c             	sub    esp,0xc
c00120a4:	53                   	push   ebx
c00120a5:	e8 2b 75 ff ff       	call   c00095d5 <Virt::freeKernelVirtualPages(unsigned long)>
c00120aa:	83 c4 10             	add    esp,0x10
c00120ad:	b0 01                	mov    al,0x1
c00120af:	81 c4 2c 10 00 00    	add    esp,0x102c
c00120b5:	5b                   	pop    ebx
c00120b6:	5e                   	pop    esi
c00120b7:	5f                   	pop    edi
c00120b8:	5d                   	pop    ebp
c00120b9:	c3                   	ret    

c00120ba <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00120ba:	55                   	push   ebp
c00120bb:	57                   	push   edi
c00120bc:	56                   	push   esi
c00120bd:	53                   	push   ebx
c00120be:	83 ec 48             	sub    esp,0x48
c00120c1:	68 14 01 00 00       	push   0x114
c00120c6:	e8 ee 56 ff ff       	call   c00077b9 <malloc>
c00120cb:	83 c4 0c             	add    esp,0xc
c00120ce:	89 c6                	mov    esi,eax
c00120d0:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00120d4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00120d8:	50                   	push   eax
c00120d9:	e8 90 89 ff ff       	call   c000aa6e <File::File(char const*, Process*)>
c00120de:	58                   	pop    eax
c00120df:	5a                   	pop    edx
c00120e0:	6a 01                	push   0x1
c00120e2:	56                   	push   esi
c00120e3:	e8 46 8a ff ff       	call   c000ab2e <File::open(FileOpenMode)>
c00120e8:	83 c4 10             	add    esp,0x10
c00120eb:	85 c0                	test   eax,eax
c00120ed:	0f 85 47 01 00 00    	jne    c001223a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00120f3:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00120fb:	83 ec 0c             	sub    esp,0xc
c00120fe:	6a 34                	push   0x34
c0012100:	e8 b4 56 ff ff       	call   c00077b9 <malloc>
c0012105:	89 c3                	mov    ebx,eax
c0012107:	58                   	pop    eax
c0012108:	8b 06                	mov    eax,DWORD PTR [esi]
c001210a:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001210e:	57                   	push   edi
c001210f:	53                   	push   ebx
c0012110:	6a 00                	push   0x0
c0012112:	6a 34                	push   0x34
c0012114:	56                   	push   esi
c0012115:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012118:	83 c4 20             	add    esp,0x20
c001211b:	85 c0                	test   eax,eax
c001211d:	0f 85 17 01 00 00    	jne    c001223a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012123:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0012129:	0f 85 0b 01 00 00    	jne    c001223a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001212f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012132:	85 c0                	test   eax,eax
c0012134:	0f 84 00 01 00 00    	je     c001223a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001213a:	31 d2                	xor    edx,edx
c001213c:	55                   	push   ebp
c001213d:	52                   	push   edx
c001213e:	50                   	push   eax
c001213f:	56                   	push   esi
c0012140:	e8 a7 8a ff ff       	call   c000abec <File::seek(unsigned long long)>
c0012145:	83 c4 10             	add    esp,0x10
c0012148:	85 c0                	test   eax,eax
c001214a:	0f 85 ea 00 00 00    	jne    c001223a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012150:	83 ec 0c             	sub    esp,0xc
c0012153:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012156:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001215a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001215e:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0012162:	0f af c2             	imul   eax,edx
c0012165:	50                   	push   eax
c0012166:	e8 4e 56 ff ff       	call   c00077b9 <malloc>
c001216b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001216d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012171:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012174:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012178:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001217c:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0012180:	0f af c2             	imul   eax,edx
c0012183:	99                   	cdq    
c0012184:	52                   	push   edx
c0012185:	50                   	push   eax
c0012186:	56                   	push   esi
c0012187:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001218a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001218d:	83 c4 20             	add    esp,0x20
c0012190:	85 c0                	test   eax,eax
c0012192:	0f 84 a2 00 00 00    	je     c001223a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012198:	31 d2                	xor    edx,edx
c001219a:	51                   	push   ecx
c001219b:	52                   	push   edx
c001219c:	50                   	push   eax
c001219d:	56                   	push   esi
c001219e:	e8 49 8a ff ff       	call   c000abec <File::seek(unsigned long long)>
c00121a3:	83 c4 10             	add    esp,0x10
c00121a6:	85 c0                	test   eax,eax
c00121a8:	0f 85 8c 00 00 00    	jne    c001223a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00121ae:	83 ec 0c             	sub    esp,0xc
c00121b1:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00121b5:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00121b9:	31 ed                	xor    ebp,ebp
c00121bb:	0f af c2             	imul   eax,edx
c00121be:	50                   	push   eax
c00121bf:	e8 f5 55 ff ff       	call   c00077b9 <malloc>
c00121c4:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00121c6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00121ca:	89 3c 24             	mov    DWORD PTR [esp],edi
c00121cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00121d1:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00121d5:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00121d9:	0f af c2             	imul   eax,edx
c00121dc:	99                   	cdq    
c00121dd:	52                   	push   edx
c00121de:	50                   	push   eax
c00121df:	56                   	push   esi
c00121e0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00121e3:	83 c4 20             	add    esp,0x20
c00121e6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00121ee:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c00121f2:	0f 86 80 00 00 00    	jbe    c0012278 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00121f8:	0f b7 fd             	movzx  edi,bp
c00121fb:	c1 e7 05             	shl    edi,0x5
c00121fe:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0012202:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0012205:	75 6b                	jne    c0012272 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0012207:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001220a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001220e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0012211:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012215:	52                   	push   edx
c0012216:	31 d2                	xor    edx,edx
c0012218:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001221b:	52                   	push   edx
c001221c:	50                   	push   eax
c001221d:	56                   	push   esi
c001221e:	e8 c9 89 ff ff       	call   c000abec <File::seek(unsigned long long)>
c0012223:	83 c4 10             	add    esp,0x10
c0012226:	85 c0                	test   eax,eax
c0012228:	74 17                	je     c0012241 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001222a:	83 ec 0c             	sub    esp,0xc
c001222d:	68 dc eb 01 c0       	push   0xc001ebdc
c0012232:	e8 c1 82 ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c0012237:	83 c4 10             	add    esp,0x10
c001223a:	31 c0                	xor    eax,eax
c001223c:	e9 87 00 00 00       	jmp    c00122c8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0012241:	83 ec 0c             	sub    esp,0xc
c0012244:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0012247:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001224a:	50                   	push   eax
c001224b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001224f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012253:	56                   	push   esi
c0012254:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0012258:	e8 d1 fb ff ff       	call   c0011e2e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001225d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012261:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0012265:	83 c4 20             	add    esp,0x20
c0012268:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001226c:	73 04                	jae    c0012272 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001226e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012272:	45                   	inc    ebp
c0012273:	e9 76 ff ff ff       	jmp    c00121ee <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0012278:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001227c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012280:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012284:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c001228a:	83 ec 0c             	sub    esp,0xc
c001228d:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0012293:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012298:	05 00 10 00 00       	add    eax,0x1000
c001229d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00122a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00122a4:	e8 40 55 ff ff       	call   c00077e9 <free>
c00122a9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00122ac:	e8 38 55 ff ff       	call   c00077e9 <free>
c00122b1:	58                   	pop    eax
c00122b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00122b6:	e8 2e 55 ff ff       	call   c00077e9 <free>
c00122bb:	89 34 24             	mov    DWORD PTR [esp],esi
c00122be:	e8 c9 88 ff ff       	call   c000ab8c <File::close()>
c00122c3:	83 c4 10             	add    esp,0x10
c00122c6:	b0 01                	mov    al,0x1
c00122c8:	83 c4 3c             	add    esp,0x3c
c00122cb:	5b                   	pop    ebx
c00122cc:	5e                   	pop    esi
c00122cd:	5f                   	pop    edi
c00122ce:	5d                   	pop    ebp
c00122cf:	c3                   	ret    

c00122d0 <Thr::runtimeReferenceHelper()>:
c00122d0:	83 ec 18             	sub    esp,0x18
c00122d3:	68 e4 eb 01 c0       	push   0xc001ebe4
c00122d8:	e8 1b 82 ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c00122dd:	fa                   	cli    
c00122de:	83 c4 10             	add    esp,0x10
c00122e1:	eb fe                	jmp    c00122e1 <Thr::runtimeReferenceHelper()+0x11>

c00122e3 <Thr::getAddressOfKernelSymbol(char const*)>:
c00122e3:	57                   	push   edi
c00122e4:	56                   	push   esi
c00122e5:	53                   	push   ebx
c00122e6:	31 db                	xor    ebx,ebx
c00122e8:	39 1d e0 3f 02 c0    	cmp    DWORD PTR ds:0xc0023fe0,ebx
c00122ee:	7e 3c                	jle    c001232c <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00122f0:	8b 34 9d 60 3f 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdc0a0]
c00122f7:	31 ff                	xor    edi,edi
c00122f9:	39 3c 9d 60 3e 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdc1a0],edi
c0012300:	7e 27                	jle    c0012329 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0012302:	50                   	push   eax
c0012303:	50                   	push   eax
c0012304:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012308:	8b 06                	mov    eax,DWORD PTR [esi]
c001230a:	03 04 9d e0 3e 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdc120]
c0012311:	50                   	push   eax
c0012312:	e8 c9 e3 fe ff       	call   c00006e0 <strcmp>
c0012317:	83 c4 10             	add    esp,0x10
c001231a:	85 c0                	test   eax,eax
c001231c:	75 05                	jne    c0012323 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001231e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0012321:	eb 0b                	jmp    c001232e <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0012323:	83 c6 10             	add    esi,0x10
c0012326:	47                   	inc    edi
c0012327:	eb d0                	jmp    c00122f9 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0012329:	43                   	inc    ebx
c001232a:	eb bc                	jmp    c00122e8 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001232c:	31 c0                	xor    eax,eax
c001232e:	5b                   	pop    ebx
c001232f:	5e                   	pop    esi
c0012330:	5f                   	pop    edi
c0012331:	c3                   	ret    

c0012332 <Thr::loadKernelSymbolTable(char const*)>:
c0012332:	55                   	push   ebp
c0012333:	57                   	push   edi
c0012334:	56                   	push   esi
c0012335:	53                   	push   ebx
c0012336:	83 ec 68             	sub    esp,0x68
c0012339:	8b 35 30 40 02 c0    	mov    esi,DWORD PTR ds:0xc0024030
c001233f:	68 14 01 00 00       	push   0x114
c0012344:	e8 70 54 ff ff       	call   c00077b9 <malloc>
c0012349:	83 c4 0c             	add    esp,0xc
c001234c:	89 c3                	mov    ebx,eax
c001234e:	56                   	push   esi
c001234f:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0012353:	50                   	push   eax
c0012354:	e8 15 87 ff ff       	call   c000aa6e <File::File(char const*, Process*)>
c0012359:	5e                   	pop    esi
c001235a:	5f                   	pop    edi
c001235b:	6a 01                	push   0x1
c001235d:	53                   	push   ebx
c001235e:	e8 cb 87 ff ff       	call   c000ab2e <File::open(FileOpenMode)>
c0012363:	83 c4 10             	add    esp,0x10
c0012366:	85 c0                	test   eax,eax
c0012368:	74 0a                	je     c0012374 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001236a:	83 ec 0c             	sub    esp,0xc
c001236d:	68 06 ec 01 c0       	push   0xc001ec06
c0012372:	eb 34                	jmp    c00123a8 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0012374:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001237c:	83 ec 0c             	sub    esp,0xc
c001237f:	6a 34                	push   0x34
c0012381:	e8 33 54 ff ff       	call   c00077b9 <malloc>
c0012386:	59                   	pop    ecx
c0012387:	89 c7                	mov    edi,eax
c0012389:	8d 74 24 34          	lea    esi,[esp+0x34]
c001238d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001238f:	56                   	push   esi
c0012390:	57                   	push   edi
c0012391:	6a 00                	push   0x0
c0012393:	6a 34                	push   0x34
c0012395:	53                   	push   ebx
c0012396:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012399:	83 c4 20             	add    esp,0x20
c001239c:	85 c0                	test   eax,eax
c001239e:	74 17                	je     c00123b7 <Thr::loadKernelSymbolTable(char const*)+0x85>
c00123a0:	83 ec 0c             	sub    esp,0xc
c00123a3:	68 1d ec 01 c0       	push   0xc001ec1d
c00123a8:	e8 b6 dd ff ff       	call   c0010163 <KePanic(char const*)>
c00123ad:	83 c4 10             	add    esp,0x10
c00123b0:	31 c0                	xor    eax,eax
c00123b2:	e9 31 02 00 00       	jmp    c00125e8 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c00123b7:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00123bd:	75 e1                	jne    c00123a0 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00123bf:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00123c2:	85 c0                	test   eax,eax
c00123c4:	74 da                	je     c00123a0 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00123c6:	52                   	push   edx
c00123c7:	31 d2                	xor    edx,edx
c00123c9:	52                   	push   edx
c00123ca:	50                   	push   eax
c00123cb:	53                   	push   ebx
c00123cc:	e8 1b 88 ff ff       	call   c000abec <File::seek(unsigned long long)>
c00123d1:	83 c4 10             	add    esp,0x10
c00123d4:	85 c0                	test   eax,eax
c00123d6:	75 c8                	jne    c00123a0 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00123d8:	83 ec 0c             	sub    esp,0xc
c00123db:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00123df:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00123e3:	31 ed                	xor    ebp,ebp
c00123e5:	0f af c2             	imul   eax,edx
c00123e8:	50                   	push   eax
c00123e9:	e8 cb 53 ff ff       	call   c00077b9 <malloc>
c00123ee:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00123f0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00123f4:	89 34 24             	mov    DWORD PTR [esp],esi
c00123f7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00123fb:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00123ff:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012403:	0f af c2             	imul   eax,edx
c0012406:	99                   	cdq    
c0012407:	52                   	push   edx
c0012408:	50                   	push   eax
c0012409:	53                   	push   ebx
c001240a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001240d:	83 c4 20             	add    esp,0x20
c0012410:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012418:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012420:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0012428:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012430:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0012434:	0f 86 aa 00 00 00    	jbe    c00124e4 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001243a:	0f b7 f5             	movzx  esi,bp
c001243d:	6b f6 28             	imul   esi,esi,0x28
c0012440:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0012444:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0012447:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001244b:	50                   	push   eax
c001244c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012450:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0012454:	8b 16                	mov    edx,DWORD PTR [esi]
c0012456:	6b c0 28             	imul   eax,eax,0x28
c0012459:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001245d:	89 d0                	mov    eax,edx
c001245f:	31 d2                	xor    edx,edx
c0012461:	52                   	push   edx
c0012462:	50                   	push   eax
c0012463:	53                   	push   ebx
c0012464:	e8 83 87 ff ff       	call   c000abec <File::seek(unsigned long long)>
c0012469:	83 c4 0c             	add    esp,0xc
c001246c:	6a 20                	push   0x20
c001246e:	6a 00                	push   0x0
c0012470:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0012474:	52                   	push   edx
c0012475:	e8 56 e0 fe ff       	call   c00004d0 <memset>
c001247a:	58                   	pop    eax
c001247b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001247d:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0012481:	51                   	push   ecx
c0012482:	8d 54 24 40          	lea    edx,[esp+0x40]
c0012486:	52                   	push   edx
c0012487:	6a 00                	push   0x0
c0012489:	6a 1f                	push   0x1f
c001248b:	53                   	push   ebx
c001248c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001248f:	83 c4 18             	add    esp,0x18
c0012492:	68 34 ec 01 c0       	push   0xc001ec34
c0012497:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001249b:	52                   	push   edx
c001249c:	e8 3f e2 fe ff       	call   c00006e0 <strcmp>
c00124a1:	83 c4 10             	add    esp,0x10
c00124a4:	85 c0                	test   eax,eax
c00124a6:	75 0f                	jne    c00124b7 <Thr::loadKernelSymbolTable(char const*)+0x185>
c00124a8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00124ab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00124af:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00124b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00124b7:	50                   	push   eax
c00124b8:	50                   	push   eax
c00124b9:	68 3c ec 01 c0       	push   0xc001ec3c
c00124be:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00124c2:	50                   	push   eax
c00124c3:	e8 18 e2 fe ff       	call   c00006e0 <strcmp>
c00124c8:	83 c4 10             	add    esp,0x10
c00124cb:	85 c0                	test   eax,eax
c00124cd:	75 0f                	jne    c00124de <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00124cf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00124d2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00124d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00124da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00124de:	45                   	inc    ebp
c00124df:	e9 4c ff ff ff       	jmp    c0012430 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00124e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00124e9:	75 10                	jne    c00124fb <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00124eb:	83 ec 0c             	sub    esp,0xc
c00124ee:	68 44 ec 01 c0       	push   0xc001ec44
c00124f3:	e8 6b dc ff ff       	call   c0010163 <KePanic(char const*)>
c00124f8:	83 c4 10             	add    esp,0x10
c00124fb:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0012500:	75 10                	jne    c0012512 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0012502:	83 ec 0c             	sub    esp,0xc
c0012505:	68 44 ec 01 c0       	push   0xc001ec44
c001250a:	e8 54 dc ff ff       	call   c0010163 <KePanic(char const*)>
c001250f:	83 c4 10             	add    esp,0x10
c0012512:	31 d2                	xor    edx,edx
c0012514:	50                   	push   eax
c0012515:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012519:	52                   	push   edx
c001251a:	50                   	push   eax
c001251b:	53                   	push   ebx
c001251c:	e8 cb 86 ff ff       	call   c000abec <File::seek(unsigned long long)>
c0012521:	5a                   	pop    edx
c0012522:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012526:	e8 8e 52 ff ff       	call   c00077b9 <malloc>
c001252b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001252f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012533:	31 c9                	xor    ecx,ecx
c0012535:	5e                   	pop    esi
c0012536:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012538:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001253c:	55                   	push   ebp
c001253d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012541:	51                   	push   ecx
c0012542:	52                   	push   edx
c0012543:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012547:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001254b:	53                   	push   ebx
c001254c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001254f:	83 c4 14             	add    esp,0x14
c0012552:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012556:	e8 5e 52 ff ff       	call   c00077b9 <malloc>
c001255b:	89 c6                	mov    esi,eax
c001255d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001255f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012562:	56                   	push   esi
c0012563:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0012567:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001256b:	51                   	push   ecx
c001256c:	52                   	push   edx
c001256d:	53                   	push   ebx
c001256e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012571:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012575:	8b 15 e0 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023fe0
c001257b:	83 c4 1c             	add    esp,0x1c
c001257e:	c1 e8 04             	shr    eax,0x4
c0012581:	89 04 95 60 3e 02 c0 	mov    DWORD PTR [edx*4-0x3ffdc1a0],eax
c0012588:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001258c:	31 d2                	xor    edx,edx
c001258e:	52                   	push   edx
c001258f:	50                   	push   eax
c0012590:	53                   	push   ebx
c0012591:	e8 56 86 ff ff       	call   c000abec <File::seek(unsigned long long)>
c0012596:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012598:	31 d2                	xor    edx,edx
c001259a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001259d:	56                   	push   esi
c001259e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00125a2:	52                   	push   edx
c00125a3:	50                   	push   eax
c00125a4:	53                   	push   ebx
c00125a5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00125a8:	83 c4 14             	add    esp,0x14
c00125ab:	53                   	push   ebx
c00125ac:	e8 db 85 ff ff       	call   c000ab8c <File::close()>
c00125b1:	5d                   	pop    ebp
c00125b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00125b6:	e8 2e 52 ff ff       	call   c00077e9 <free>
c00125bb:	89 3c 24             	mov    DWORD PTR [esp],edi
c00125be:	e8 26 52 ff ff       	call   c00077e9 <free>
c00125c3:	a1 e0 3f 02 c0       	mov    eax,ds:0xc0023fe0
c00125c8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00125cc:	8d 50 01             	lea    edx,[eax+0x1]
c00125cf:	89 0c 85 60 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0a0],ecx
c00125d6:	89 34 85 e0 3e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc120],esi
c00125dd:	89 15 e0 3f 02 c0    	mov    DWORD PTR ds:0xc0023fe0,edx
c00125e3:	83 c4 10             	add    esp,0x10
c00125e6:	b0 01                	mov    al,0x1
c00125e8:	83 c4 5c             	add    esp,0x5c
c00125eb:	5b                   	pop    ebx
c00125ec:	5e                   	pop    esi
c00125ed:	5f                   	pop    edi
c00125ee:	5d                   	pop    ebp
c00125ef:	c3                   	ret    

c00125f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00125f0:	55                   	push   ebp
c00125f1:	57                   	push   edi
c00125f2:	56                   	push   esi
c00125f3:	53                   	push   ebx
c00125f4:	81 ec 68 03 00 00    	sub    esp,0x368
c00125fa:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0012601:	8b 1d 30 40 02 c0    	mov    ebx,DWORD PTR ds:0xc0024030
c0012607:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001260b:	68 14 01 00 00       	push   0x114
c0012610:	e8 a4 51 ff ff       	call   c00077b9 <malloc>
c0012615:	83 c4 0c             	add    esp,0xc
c0012618:	89 c5                	mov    ebp,eax
c001261a:	53                   	push   ebx
c001261b:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0012622:	50                   	push   eax
c0012623:	e8 46 84 ff ff       	call   c000aa6e <File::File(char const*, Process*)>
c0012628:	5e                   	pop    esi
c0012629:	5f                   	pop    edi
c001262a:	6a 01                	push   0x1
c001262c:	55                   	push   ebp
c001262d:	e8 fc 84 ff ff       	call   c000ab2e <File::open(FileOpenMode)>
c0012632:	83 c4 10             	add    esp,0x10
c0012635:	85 c0                	test   eax,eax
c0012637:	0f 85 a7 06 00 00    	jne    c0012ce4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001263d:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0012645:	83 ec 0c             	sub    esp,0xc
c0012648:	6a 34                	push   0x34
c001264a:	e8 6a 51 ff ff       	call   c00077b9 <malloc>
c001264f:	5b                   	pop    ebx
c0012650:	89 c7                	mov    edi,eax
c0012652:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0012656:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012659:	53                   	push   ebx
c001265a:	57                   	push   edi
c001265b:	6a 00                	push   0x0
c001265d:	6a 34                	push   0x34
c001265f:	55                   	push   ebp
c0012660:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012663:	83 c4 20             	add    esp,0x20
c0012666:	85 c0                	test   eax,eax
c0012668:	0f 85 76 06 00 00    	jne    c0012ce4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001266e:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0012674:	0f 85 6a 06 00 00    	jne    c0012ce4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001267a:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001267d:	85 c0                	test   eax,eax
c001267f:	0f 84 5f 06 00 00    	je     c0012ce4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012685:	31 d2                	xor    edx,edx
c0012687:	51                   	push   ecx
c0012688:	52                   	push   edx
c0012689:	50                   	push   eax
c001268a:	55                   	push   ebp
c001268b:	e8 5c 85 ff ff       	call   c000abec <File::seek(unsigned long long)>
c0012690:	83 c4 10             	add    esp,0x10
c0012693:	85 c0                	test   eax,eax
c0012695:	0f 85 49 06 00 00    	jne    c0012ce4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001269b:	83 ec 0c             	sub    esp,0xc
c001269e:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c00126a1:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00126a5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00126a9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00126ad:	0f af c2             	imul   eax,edx
c00126b0:	50                   	push   eax
c00126b1:	e8 03 51 ff ff       	call   c00077b9 <malloc>
c00126b6:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00126b9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00126bd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00126c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00126c4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00126c8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00126cc:	0f af c2             	imul   eax,edx
c00126cf:	99                   	cdq    
c00126d0:	52                   	push   edx
c00126d1:	50                   	push   eax
c00126d2:	55                   	push   ebp
c00126d3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00126d6:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c00126d9:	83 c4 20             	add    esp,0x20
c00126dc:	85 c0                	test   eax,eax
c00126de:	0f 84 00 06 00 00    	je     c0012ce4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00126e4:	52                   	push   edx
c00126e5:	31 d2                	xor    edx,edx
c00126e7:	52                   	push   edx
c00126e8:	50                   	push   eax
c00126e9:	55                   	push   ebp
c00126ea:	e8 fd 84 ff ff       	call   c000abec <File::seek(unsigned long long)>
c00126ef:	83 c4 10             	add    esp,0x10
c00126f2:	85 c0                	test   eax,eax
c00126f4:	0f 85 ea 05 00 00    	jne    c0012ce4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00126fa:	83 ec 0c             	sub    esp,0xc
c00126fd:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0012701:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0012705:	31 f6                	xor    esi,esi
c0012707:	0f af c2             	imul   eax,edx
c001270a:	50                   	push   eax
c001270b:	e8 a9 50 ff ff       	call   c00077b9 <malloc>
c0012710:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012713:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012717:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001271a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001271e:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0012722:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0012726:	0f af c2             	imul   eax,edx
c0012729:	99                   	cdq    
c001272a:	52                   	push   edx
c001272b:	50                   	push   eax
c001272c:	55                   	push   ebp
c001272d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012730:	83 c4 20             	add    esp,0x20
c0012733:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0012737:	0f 86 8a 00 00 00    	jbe    c00127c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001273d:	0f b7 de             	movzx  ebx,si
c0012740:	c1 e3 05             	shl    ebx,0x5
c0012743:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0012747:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001274a:	75 75                	jne    c00127c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001274c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001274f:	31 d2                	xor    edx,edx
c0012751:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012755:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0012758:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001275c:	50                   	push   eax
c001275d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0012760:	52                   	push   edx
c0012761:	50                   	push   eax
c0012762:	55                   	push   ebp
c0012763:	e8 84 84 ff ff       	call   c000abec <File::seek(unsigned long long)>
c0012768:	83 c4 10             	add    esp,0x10
c001276b:	85 c0                	test   eax,eax
c001276d:	0f 85 71 05 00 00    	jne    c0012ce4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012773:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001277a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001277d:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0012781:	31 d2                	xor    edx,edx
c0012783:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0012787:	83 ec 0c             	sub    esp,0xc
c001278a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001278e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012795:	50                   	push   eax
c0012796:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001279a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001279e:	52                   	push   edx
c001279f:	50                   	push   eax
c00127a0:	55                   	push   ebp
c00127a1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00127a4:	83 c4 1c             	add    esp,0x1c
c00127a7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00127aa:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c00127ad:	50                   	push   eax
c00127ae:	6a 00                	push   0x0
c00127b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127b4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00127b8:	50                   	push   eax
c00127b9:	e8 12 dd fe ff       	call   c00004d0 <memset>
c00127be:	83 c4 10             	add    esp,0x10
c00127c1:	46                   	inc    esi
c00127c2:	e9 6c ff ff ff       	jmp    c0012733 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c00127c7:	53                   	push   ebx
c00127c8:	31 db                	xor    ebx,ebx
c00127ca:	68 00 01 00 00       	push   0x100
c00127cf:	6a 00                	push   0x0
c00127d1:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00127d5:	50                   	push   eax
c00127d6:	e8 f5 dc fe ff       	call   c00004d0 <memset>
c00127db:	83 c4 0c             	add    esp,0xc
c00127de:	68 00 01 00 00       	push   0x100
c00127e3:	6a 00                	push   0x0
c00127e5:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00127ec:	50                   	push   eax
c00127ed:	e8 de dc fe ff       	call   c00004d0 <memset>
c00127f2:	83 c4 10             	add    esp,0x10
c00127f5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00127fd:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012805:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001280d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012815:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001281d:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0012821:	0f 86 30 01 00 00    	jbe    c0012957 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0012827:	0f b7 f3             	movzx  esi,bx
c001282a:	6b f6 28             	imul   esi,esi,0x28
c001282d:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0012831:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0012834:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012838:	52                   	push   edx
c0012839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001283d:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0012841:	8b 06                	mov    eax,DWORD PTR [esi]
c0012843:	6b d2 28             	imul   edx,edx,0x28
c0012846:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001284a:	31 d2                	xor    edx,edx
c001284c:	52                   	push   edx
c001284d:	50                   	push   eax
c001284e:	55                   	push   ebp
c001284f:	e8 98 83 ff ff       	call   c000abec <File::seek(unsigned long long)>
c0012854:	83 c4 0c             	add    esp,0xc
c0012857:	6a 20                	push   0x20
c0012859:	6a 00                	push   0x0
c001285b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012862:	51                   	push   ecx
c0012863:	e8 68 dc fe ff       	call   c00004d0 <memset>
c0012868:	59                   	pop    ecx
c0012869:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001286c:	8d 54 24 58          	lea    edx,[esp+0x58]
c0012870:	52                   	push   edx
c0012871:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0012878:	51                   	push   ecx
c0012879:	6a 00                	push   0x0
c001287b:	6a 1f                	push   0x1f
c001287d:	55                   	push   ebp
c001287e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012881:	83 c4 1c             	add    esp,0x1c
c0012884:	6a 09                	push   0x9
c0012886:	68 5e ec 01 c0       	push   0xc001ec5e
c001288b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012892:	51                   	push   ecx
c0012893:	e8 f8 da fe ff       	call   c0000390 <memcmp>
c0012898:	83 c4 10             	add    esp,0x10
c001289b:	85 c0                	test   eax,eax
c001289d:	75 21                	jne    c00128c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001289f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128a3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00128a7:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00128ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00128af:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00128b2:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00128b9:	89 d0                	mov    eax,edx
c00128bb:	40                   	inc    eax
c00128bc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00128c0:	50                   	push   eax
c00128c1:	6a 09                	push   0x9
c00128c3:	68 68 ec 01 c0       	push   0xc001ec68
c00128c8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00128cf:	50                   	push   eax
c00128d0:	e8 bb da fe ff       	call   c0000390 <memcmp>
c00128d5:	83 c4 10             	add    esp,0x10
c00128d8:	85 c0                	test   eax,eax
c00128da:	75 21                	jne    c00128fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c00128dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00128e4:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00128e8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00128ec:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00128ef:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00128f6:	89 d0                	mov    eax,edx
c00128f8:	40                   	inc    eax
c00128f9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00128fd:	50                   	push   eax
c00128fe:	50                   	push   eax
c00128ff:	68 34 ec 01 c0       	push   0xc001ec34
c0012904:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001290b:	50                   	push   eax
c001290c:	e8 cf dd fe ff       	call   c00006e0 <strcmp>
c0012911:	83 c4 10             	add    esp,0x10
c0012914:	85 c0                	test   eax,eax
c0012916:	75 0f                	jne    c0012927 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0012918:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001291b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001291f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012923:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012927:	50                   	push   eax
c0012928:	50                   	push   eax
c0012929:	68 3c ec 01 c0       	push   0xc001ec3c
c001292e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012935:	50                   	push   eax
c0012936:	e8 a5 dd fe ff       	call   c00006e0 <strcmp>
c001293b:	83 c4 10             	add    esp,0x10
c001293e:	85 c0                	test   eax,eax
c0012940:	75 0f                	jne    c0012951 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0012942:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012945:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012949:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001294d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012951:	43                   	inc    ebx
c0012952:	e9 c6 fe ff ff       	jmp    c001281d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0012957:	31 d2                	xor    edx,edx
c0012959:	50                   	push   eax
c001295a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001295e:	52                   	push   edx
c001295f:	50                   	push   eax
c0012960:	55                   	push   ebp
c0012961:	e8 86 82 ff ff       	call   c000abec <File::seek(unsigned long long)>
c0012966:	58                   	pop    eax
c0012967:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001296b:	e8 49 4e ff ff       	call   c00077b9 <malloc>
c0012970:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012973:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012977:	31 d2                	xor    edx,edx
c0012979:	58                   	pop    eax
c001297a:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001297e:	53                   	push   ebx
c001297f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012983:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012987:	52                   	push   edx
c0012988:	50                   	push   eax
c0012989:	55                   	push   ebp
c001298a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001298d:	83 c4 14             	add    esp,0x14
c0012990:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012994:	e8 20 4e ff ff       	call   c00077b9 <malloc>
c0012999:	31 d2                	xor    edx,edx
c001299b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001299f:	83 c4 0c             	add    esp,0xc
c00129a2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00129a6:	52                   	push   edx
c00129a7:	50                   	push   eax
c00129a8:	55                   	push   ebp
c00129a9:	e8 3e 82 ff ff       	call   c000abec <File::seek(unsigned long long)>
c00129ae:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00129b1:	31 d2                	xor    edx,edx
c00129b3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00129b6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00129ba:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00129be:	52                   	push   edx
c00129bf:	50                   	push   eax
c00129c0:	55                   	push   ebp
c00129c1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00129c4:	83 c4 20             	add    esp,0x20
c00129c7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00129cf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00129d3:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c00129d7:	0f 84 0b 03 00 00    	je     c0012ce8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c00129dd:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c00129e4:	31 d2                	xor    edx,edx
c00129e6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00129ea:	c1 e8 03             	shr    eax,0x3
c00129ed:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00129f1:	51                   	push   ecx
c00129f2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00129f6:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00129fa:	52                   	push   edx
c00129fb:	50                   	push   eax
c00129fc:	55                   	push   ebp
c00129fd:	e8 ea 81 ff ff       	call   c000abec <File::seek(unsigned long long)>
c0012a02:	5b                   	pop    ebx
c0012a03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a07:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0012a0e:	e8 a6 4d ff ff       	call   c00077b9 <malloc>
c0012a13:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012a16:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012a1a:	31 d2                	xor    edx,edx
c0012a1c:	5e                   	pop    esi
c0012a1d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012a21:	50                   	push   eax
c0012a22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a26:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012a2a:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0012a31:	52                   	push   edx
c0012a32:	50                   	push   eax
c0012a33:	55                   	push   ebp
c0012a34:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012a37:	83 c4 20             	add    esp,0x20
c0012a3a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012a42:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012a46:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0012a4a:	0f 8d 7c 02 00 00    	jge    c0012ccc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0012a50:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012a54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012a58:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0012a5d:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0012a60:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012a64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012a68:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0012a6c:	89 d8                	mov    eax,ebx
c0012a6e:	c1 e8 08             	shr    eax,0x8
c0012a71:	89 c6                	mov    esi,eax
c0012a73:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012a77:	c1 e6 04             	shl    esi,0x4
c0012a7a:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0012a7e:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0012a81:	85 d2                	test   edx,edx
c0012a83:	0f 85 bf 00 00 00    	jne    c0012b48 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012a89:	83 ec 0c             	sub    esp,0xc
c0012a8c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012a90:	03 06                	add    eax,DWORD PTR [esi]
c0012a92:	50                   	push   eax
c0012a93:	e8 4b f8 ff ff       	call   c00122e3 <Thr::getAddressOfKernelSymbol(char const*)>
c0012a98:	83 c4 10             	add    esp,0x10
c0012a9b:	89 c2                	mov    edx,eax
c0012a9d:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0012aa2:	85 c0                	test   eax,eax
c0012aa4:	0f 85 9e 00 00 00    	jne    c0012b48 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012aaa:	83 ec 0c             	sub    esp,0xc
c0012aad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012ab1:	03 06                	add    eax,DWORD PTR [esi]
c0012ab3:	50                   	push   eax
c0012ab4:	e8 fb d7 ff ff       	call   c00102b4 <KeResolveCompatibilitySymbol(char*)>
c0012ab9:	83 c4 10             	add    esp,0x10
c0012abc:	89 c2                	mov    edx,eax
c0012abe:	85 c0                	test   eax,eax
c0012ac0:	0f 85 82 00 00 00    	jne    c0012b48 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012ac6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0012aca:	50                   	push   eax
c0012acb:	50                   	push   eax
c0012acc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ad0:	03 06                	add    eax,DWORD PTR [esi]
c0012ad2:	50                   	push   eax
c0012ad3:	68 72 ec 01 c0       	push   0xc001ec72
c0012ad8:	e8 1b 7a ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c0012add:	58                   	pop    eax
c0012ade:	5a                   	pop    edx
c0012adf:	68 8c ec 01 c0       	push   0xc001ec8c
c0012ae4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012aeb:	50                   	push   eax
c0012aec:	e8 0f db fe ff       	call   c0000600 <strcpy>
c0012af1:	59                   	pop    ecx
c0012af2:	58                   	pop    eax
c0012af3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012af7:	03 06                	add    eax,DWORD PTR [esi]
c0012af9:	50                   	push   eax
c0012afa:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012b01:	50                   	push   eax
c0012b02:	e8 b9 dc fe ff       	call   c00007c0 <strcat>
c0012b07:	58                   	pop    eax
c0012b08:	5a                   	pop    edx
c0012b09:	68 22 ed 01 c0       	push   0xc001ed22
c0012b0e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012b15:	50                   	push   eax
c0012b16:	e8 a5 dc fe ff       	call   c00007c0 <strcat>
c0012b1b:	83 c4 10             	add    esp,0x10
c0012b1e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012b23:	0f 84 5d 01 00 00    	je     c0012c86 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012b29:	83 ec 0c             	sub    esp,0xc
c0012b2c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012b33:	50                   	push   eax
c0012b34:	e8 2a d6 ff ff       	call   c0010163 <KePanic(char const*)>
c0012b39:	83 c4 10             	add    esp,0x10
c0012b3c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012b40:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012b44:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0012b48:	80 fb 01             	cmp    bl,0x1
c0012b4b:	0f 85 88 00 00 00    	jne    c0012bd9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0012b51:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0012b58:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0012b5c:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0012b60:	01 ce                	add    esi,ecx
c0012b62:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012b68:	0f 94 c0             	sete   al
c0012b6b:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012b71:	0f 94 c3             	sete   bl
c0012b74:	09 c3                	or     ebx,eax
c0012b76:	8b 06                	mov    eax,DWORD PTR [esi]
c0012b78:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012b7d:	74 41                	je     c0012bc0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0012b7f:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012b82:	84 db                	test   bl,bl
c0012b84:	75 15                	jne    c0012b9b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0012b86:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012b8a:	66 83 f8 0c          	cmp    ax,0xc
c0012b8e:	76 05                	jbe    c0012b95 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0012b90:	b8 0c 00 00 00       	mov    eax,0xc
c0012b95:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012b99:	76 37                	jbe    c0012bd2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012b9b:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0012b9f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012ba4:	0f 84 dc 00 00 00    	je     c0012c86 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012baa:	83 ec 0c             	sub    esp,0xc
c0012bad:	68 a3 ec 01 c0       	push   0xc001eca3
c0012bb2:	e8 ac d5 ff ff       	call   c0010163 <KePanic(char const*)>
c0012bb7:	83 c4 10             	add    esp,0x10
c0012bba:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012bbe:	eb 12                	jmp    c0012bd2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012bc0:	01 c1                	add    ecx,eax
c0012bc2:	84 db                	test   bl,bl
c0012bc4:	75 0c                	jne    c0012bd2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012bc6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012bca:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012bce:	77 02                	ja     c0012bd2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012bd0:	01 d1                	add    ecx,edx
c0012bd2:	89 0e                	mov    DWORD PTR [esi],ecx
c0012bd4:	e9 ea 00 00 00       	jmp    c0012cc3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012bd9:	80 fb 02             	cmp    bl,0x2
c0012bdc:	75 7c                	jne    c0012c5a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0012bde:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0012be5:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0012be9:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0012bed:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012bf3:	74 20                	je     c0012c15 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012bf5:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012bfb:	74 18                	je     c0012c15 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012bfd:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012c01:	b9 0a 00 00 00       	mov    ecx,0xa
c0012c06:	66 83 f8 0e          	cmp    ax,0xe
c0012c0a:	77 03                	ja     c0012c0f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0012c0c:	8d 48 fc             	lea    ecx,[eax-0x4]
c0012c0f:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0012c13:	76 1f                	jbe    c0012c34 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0012c15:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0012c19:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012c1e:	74 66                	je     c0012c86 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012c20:	83 ec 0c             	sub    esp,0xc
c0012c23:	68 bf ec 01 c0       	push   0xc001ecbf
c0012c28:	e8 36 d5 ff ff       	call   c0010163 <KePanic(char const*)>
c0012c2d:	83 c4 10             	add    esp,0x10
c0012c30:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012c34:	8b 06                	mov    eax,DWORD PTR [esi]
c0012c36:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012c3b:	74 13                	je     c0012c50 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0012c3d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012c41:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0012c48:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0012c4c:	01 c8                	add    eax,ecx
c0012c4e:	eb 04                	jmp    c0012c54 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0012c50:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0012c54:	01 c2                	add    edx,eax
c0012c56:	89 16                	mov    DWORD PTR [esi],edx
c0012c58:	eb 69                	jmp    c0012cc3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012c5a:	0f b6 db             	movzx  ebx,bl
c0012c5d:	50                   	push   eax
c0012c5e:	50                   	push   eax
c0012c5f:	53                   	push   ebx
c0012c60:	68 db ec 01 c0       	push   0xc001ecdb
c0012c65:	e8 8e 78 ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c0012c6a:	83 c4 10             	add    esp,0x10
c0012c6d:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012c72:	74 12                	je     c0012c86 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012c74:	83 ec 0c             	sub    esp,0xc
c0012c77:	68 e6 ec 01 c0       	push   0xc001ece6
c0012c7c:	e8 e2 d4 ff ff       	call   c0010163 <KePanic(char const*)>
c0012c81:	83 c4 10             	add    esp,0x10
c0012c84:	eb 3d                	jmp    c0012cc3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012c86:	83 ec 0c             	sub    esp,0xc
c0012c89:	55                   	push   ebp
c0012c8a:	e8 fd 7e ff ff       	call   c000ab8c <File::close()>
c0012c8f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012c92:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012c95:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012c98:	59                   	pop    ecx
c0012c99:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012c9d:	e8 47 4b ff ff       	call   c00077e9 <free>
c0012ca2:	5b                   	pop    ebx
c0012ca3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012ca7:	e8 3d 4b ff ff       	call   c00077e9 <free>
c0012cac:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012caf:	e8 35 4b ff ff       	call   c00077e9 <free>
c0012cb4:	5e                   	pop    esi
c0012cb5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cb9:	e8 2b 4b ff ff       	call   c00077e9 <free>
c0012cbe:	83 c4 10             	add    esp,0x10
c0012cc1:	eb 21                	jmp    c0012ce4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012cc3:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0012cc7:	e9 76 fd ff ff       	jmp    c0012a42 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0012ccc:	83 ec 0c             	sub    esp,0xc
c0012ccf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012cd3:	e8 11 4b ff ff       	call   c00077e9 <free>
c0012cd8:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0012cdc:	83 c4 10             	add    esp,0x10
c0012cdf:	e9 eb fc ff ff       	jmp    c00129cf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0012ce4:	31 c0                	xor    eax,eax
c0012ce6:	eb 33                	jmp    c0012d1b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0012ce8:	83 ec 0c             	sub    esp,0xc
c0012ceb:	55                   	push   ebp
c0012cec:	e8 9b 7e ff ff       	call   c000ab8c <File::close()>
c0012cf1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012cf4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012cf7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012cfa:	58                   	pop    eax
c0012cfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012cff:	e8 e5 4a ff ff       	call   c00077e9 <free>
c0012d04:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012d07:	e8 dd 4a ff ff       	call   c00077e9 <free>
c0012d0c:	5a                   	pop    edx
c0012d0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d11:	e8 d3 4a ff ff       	call   c00077e9 <free>
c0012d16:	83 c4 10             	add    esp,0x10
c0012d19:	b0 01                	mov    al,0x1
c0012d1b:	81 c4 5c 03 00 00    	add    esp,0x35c
c0012d21:	5b                   	pop    ebx
c0012d22:	5e                   	pop    esi
c0012d23:	5f                   	pop    edi
c0012d24:	5d                   	pop    ebp
c0012d25:	c3                   	ret    

c0012d26 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0012d26:	56                   	push   esi
c0012d27:	31 d2                	xor    edx,edx
c0012d29:	53                   	push   ebx
c0012d2a:	8b 1d 40 38 02 c0    	mov    ebx,DWORD PTR ds:0xc0023840
c0012d30:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012d34:	39 d3                	cmp    ebx,edx
c0012d36:	7e 1b                	jle    c0012d53 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0012d38:	8b 04 95 60 3a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc5a0]
c0012d3f:	39 c8                	cmp    eax,ecx
c0012d41:	77 0d                	ja     c0012d50 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0012d43:	8b 34 95 60 38 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdc7a0]
c0012d4a:	01 c6                	add    esi,eax
c0012d4c:	39 ce                	cmp    esi,ecx
c0012d4e:	77 05                	ja     c0012d55 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0012d50:	42                   	inc    edx
c0012d51:	eb e1                	jmp    c0012d34 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0012d53:	31 c0                	xor    eax,eax
c0012d55:	5b                   	pop    ebx
c0012d56:	5e                   	pop    esi
c0012d57:	c3                   	ret    

c0012d58 <Thr::getDriverNameFromAddress(unsigned long)>:
c0012d58:	53                   	push   ebx
c0012d59:	31 c0                	xor    eax,eax
c0012d5b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012d5f:	8b 1d 40 38 02 c0    	mov    ebx,DWORD PTR ds:0xc0023840
c0012d65:	39 c3                	cmp    ebx,eax
c0012d67:	7e 22                	jle    c0012d8b <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0012d69:	8b 14 85 60 3a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc5a0]
c0012d70:	39 ca                	cmp    edx,ecx
c0012d72:	77 14                	ja     c0012d88 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012d74:	03 14 85 60 38 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdc7a0]
c0012d7b:	39 ca                	cmp    edx,ecx
c0012d7d:	76 09                	jbe    c0012d88 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012d7f:	8b 04 85 60 3c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc3a0]
c0012d86:	eb 05                	jmp    c0012d8d <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0012d88:	40                   	inc    eax
c0012d89:	eb da                	jmp    c0012d65 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0012d8b:	31 c0                	xor    eax,eax
c0012d8d:	5b                   	pop    ebx
c0012d8e:	c3                   	ret    

c0012d8f <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0012d8f:	53                   	push   ebx
c0012d90:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012d94:	53                   	push   ebx
c0012d95:	e8 8c ff ff ff       	call   c0012d26 <Thr::getDriverBaseFromAddress(unsigned long)>
c0012d9a:	5a                   	pop    edx
c0012d9b:	31 d2                	xor    edx,edx
c0012d9d:	85 c0                	test   eax,eax
c0012d9f:	74 04                	je     c0012da5 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0012da1:	89 da                	mov    edx,ebx
c0012da3:	29 c2                	sub    edx,eax
c0012da5:	89 d0                	mov    eax,edx
c0012da7:	5b                   	pop    ebx
c0012da8:	c3                   	ret    

c0012da9 <Thr::loadDLL(char const*, bool)>:
c0012da9:	55                   	push   ebp
c0012daa:	57                   	push   edi
c0012dab:	56                   	push   esi
c0012dac:	53                   	push   ebx
c0012dad:	81 ec 34 01 00 00    	sub    esp,0x134
c0012db3:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0012dba:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0012dc1:	56                   	push   esi
c0012dc2:	68 fe ec 01 c0       	push   0xc001ecfe
c0012dc7:	e8 2c 77 ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c0012dcc:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012dd3:	e8 e1 49 ff ff       	call   c00077b9 <malloc>
c0012dd8:	83 c4 0c             	add    esp,0xc
c0012ddb:	89 c3                	mov    ebx,eax
c0012ddd:	ff 35 30 40 02 c0    	push   DWORD PTR ds:0xc0024030
c0012de3:	56                   	push   esi
c0012de4:	50                   	push   eax
c0012de5:	e8 84 7c ff ff       	call   c000aa6e <File::File(char const*, Process*)>
c0012dea:	83 c4 10             	add    esp,0x10
c0012ded:	85 db                	test   ebx,ebx
c0012def:	75 3c                	jne    c0012e2d <Thr::loadDLL(char const*, bool)+0x84>
c0012df1:	89 f8                	mov    eax,edi
c0012df3:	84 c0                	test   al,al
c0012df5:	0f 84 d2 01 00 00    	je     c0012fcd <Thr::loadDLL(char const*, bool)+0x224>
c0012dfb:	55                   	push   ebp
c0012dfc:	55                   	push   ebp
c0012dfd:	68 0f ed 01 c0       	push   0xc001ed0f
c0012e02:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0012e06:	55                   	push   ebp
c0012e07:	e8 f4 d7 fe ff       	call   c0000600 <strcpy>
c0012e0c:	58                   	pop    eax
c0012e0d:	5a                   	pop    edx
c0012e0e:	56                   	push   esi
c0012e0f:	55                   	push   ebp
c0012e10:	e8 ab d9 fe ff       	call   c00007c0 <strcat>
c0012e15:	59                   	pop    ecx
c0012e16:	58                   	pop    eax
c0012e17:	68 22 ed 01 c0       	push   0xc001ed22
c0012e1c:	55                   	push   ebp
c0012e1d:	e8 9e d9 fe ff       	call   c00007c0 <strcat>
c0012e22:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012e25:	e8 39 d3 ff ff       	call   c0010163 <KePanic(char const*)>
c0012e2a:	83 c4 10             	add    esp,0x10
c0012e2d:	51                   	push   ecx
c0012e2e:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0012e32:	50                   	push   eax
c0012e33:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012e37:	50                   	push   eax
c0012e38:	53                   	push   ebx
c0012e39:	e8 9c 7f ff ff       	call   c000adda <File::stat(unsigned long long*, bool*)>
c0012e3e:	83 c4 10             	add    esp,0x10
c0012e41:	85 db                	test   ebx,ebx
c0012e43:	74 0c                	je     c0012e51 <Thr::loadDLL(char const*, bool)+0xa8>
c0012e45:	83 ec 0c             	sub    esp,0xc
c0012e48:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012e4a:	53                   	push   ebx
c0012e4b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012e4e:	83 c4 10             	add    esp,0x10
c0012e51:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0012e56:	75 0a                	jne    c0012e62 <Thr::loadDLL(char const*, bool)+0xb9>
c0012e58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012e5c:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0012e60:	75 3c                	jne    c0012e9e <Thr::loadDLL(char const*, bool)+0xf5>
c0012e62:	89 f8                	mov    eax,edi
c0012e64:	84 c0                	test   al,al
c0012e66:	0f 84 49 01 00 00    	je     c0012fb5 <Thr::loadDLL(char const*, bool)+0x20c>
c0012e6c:	51                   	push   ecx
c0012e6d:	51                   	push   ecx
c0012e6e:	68 0f ed 01 c0       	push   0xc001ed0f
c0012e73:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0012e77:	53                   	push   ebx
c0012e78:	e8 83 d7 fe ff       	call   c0000600 <strcpy>
c0012e7d:	5d                   	pop    ebp
c0012e7e:	58                   	pop    eax
c0012e7f:	56                   	push   esi
c0012e80:	53                   	push   ebx
c0012e81:	e8 3a d9 fe ff       	call   c00007c0 <strcat>
c0012e86:	58                   	pop    eax
c0012e87:	5a                   	pop    edx
c0012e88:	68 22 ed 01 c0       	push   0xc001ed22
c0012e8d:	53                   	push   ebx
c0012e8e:	e8 2d d9 fe ff       	call   c00007c0 <strcat>
c0012e93:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012e96:	e8 c8 d2 ff ff       	call   c0010163 <KePanic(char const*)>
c0012e9b:	83 c4 10             	add    esp,0x10
c0012e9e:	52                   	push   edx
c0012e9f:	6a 03                	push   0x3
c0012ea1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ea5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012ea9:	05 ff 0f 00 00       	add    eax,0xfff
c0012eae:	83 d2 00             	adc    edx,0x0
c0012eb1:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012eb5:	50                   	push   eax
c0012eb6:	ff 35 50 0e 02 c0    	push   DWORD PTR ds:0xc0020e50
c0012ebc:	e8 7d 6b ff ff       	call   c0009a3e <VAS::allocatePages(int, int)>
c0012ec1:	59                   	pop    ecx
c0012ec2:	89 c3                	mov    ebx,eax
c0012ec4:	5d                   	pop    ebp
c0012ec5:	50                   	push   eax
c0012ec6:	68 72 d8 01 c0       	push   0xc001d872
c0012ecb:	e8 28 76 ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c0012ed0:	89 34 24             	mov    DWORD PTR [esp],esi
c0012ed3:	e8 68 d6 fe ff       	call   c0000540 <strlen>
c0012ed8:	8b 2d 40 38 02 c0    	mov    ebp,DWORD PTR ds:0xc0023840
c0012ede:	40                   	inc    eax
c0012edf:	89 04 24             	mov    DWORD PTR [esp],eax
c0012ee2:	e8 d2 48 ff ff       	call   c00077b9 <malloc>
c0012ee7:	89 04 ad 60 3c 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdc3a0],eax
c0012eee:	58                   	pop    eax
c0012eef:	a1 40 38 02 c0       	mov    eax,ds:0xc0023840
c0012ef4:	5a                   	pop    edx
c0012ef5:	56                   	push   esi
c0012ef6:	ff 34 85 60 3c 02 c0 	push   DWORD PTR [eax*4-0x3ffdc3a0]
c0012efd:	e8 fe d6 fe ff       	call   c0000600 <strcpy>
c0012f02:	a1 40 38 02 c0       	mov    eax,ds:0xc0023840
c0012f07:	8d 50 01             	lea    edx,[eax+0x1]
c0012f0a:	89 1c 85 60 3a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc5a0],ebx
c0012f11:	89 15 40 38 02 c0    	mov    DWORD PTR ds:0xc0023840,edx
c0012f17:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012f1b:	83 c4 0c             	add    esp,0xc
c0012f1e:	89 14 85 60 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc7a0],edx
c0012f25:	6a 01                	push   0x1
c0012f27:	53                   	push   ebx
c0012f28:	56                   	push   esi
c0012f29:	e8 c2 f6 ff ff       	call   c00125f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0012f2e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012f32:	83 c4 10             	add    esp,0x10
c0012f35:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012f3a:	0f 85 89 00 00 00    	jne    c0012fc9 <Thr::loadDLL(char const*, bool)+0x220>
c0012f40:	89 f8                	mov    eax,edi
c0012f42:	84 c0                	test   al,al
c0012f44:	74 73                	je     c0012fb9 <Thr::loadDLL(char const*, bool)+0x210>
c0012f46:	83 ec 0c             	sub    esp,0xc
c0012f49:	68 24 ed 01 c0       	push   0xc001ed24
c0012f4e:	e8 10 d2 ff ff       	call   c0010163 <KePanic(char const*)>
c0012f53:	83 c4 10             	add    esp,0x10
c0012f56:	eb 61                	jmp    c0012fb9 <Thr::loadDLL(char const*, bool)+0x210>
c0012f58:	50                   	push   eax
c0012f59:	50                   	push   eax
c0012f5a:	89 e8                	mov    eax,ebp
c0012f5c:	c1 e0 0c             	shl    eax,0xc
c0012f5f:	01 d8                	add    eax,ebx
c0012f61:	50                   	push   eax
c0012f62:	ff 35 50 0e 02 c0    	push   DWORD PTR ds:0xc0020e50
c0012f68:	e8 49 66 ff ff       	call   c00095b6 <VAS::getPageTableEntry(unsigned long)>
c0012f6d:	83 c4 10             	add    esp,0x10
c0012f70:	8b 00                	mov    eax,DWORD PTR [eax]
c0012f72:	a8 60                	test   al,0x60
c0012f74:	75 11                	jne    c0012f87 <Thr::loadDLL(char const*, bool)+0x1de>
c0012f76:	83 ec 0c             	sub    esp,0xc
c0012f79:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012f7e:	50                   	push   eax
c0012f7f:	e8 cf 4a ff ff       	call   c0007a53 <Phys::freePage(unsigned long)>
c0012f84:	83 c4 10             	add    esp,0x10
c0012f87:	45                   	inc    ebp
c0012f88:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012f8c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012f90:	05 ff 0f 00 00       	add    eax,0xfff
c0012f95:	bf 00 00 00 00       	mov    edi,0x0
c0012f9a:	83 d2 00             	adc    edx,0x0
c0012f9d:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012fa1:	c1 ea 0c             	shr    edx,0xc
c0012fa4:	39 c5                	cmp    ebp,eax
c0012fa6:	89 d1                	mov    ecx,edx
c0012fa8:	89 f8                	mov    eax,edi
c0012faa:	19 c8                	sbb    eax,ecx
c0012fac:	72 aa                	jb     c0012f58 <Thr::loadDLL(char const*, bool)+0x1af>
c0012fae:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012fb3:	75 18                	jne    c0012fcd <Thr::loadDLL(char const*, bool)+0x224>
c0012fb5:	31 db                	xor    ebx,ebx
c0012fb7:	eb 14                	jmp    c0012fcd <Thr::loadDLL(char const*, bool)+0x224>
c0012fb9:	83 ec 0c             	sub    esp,0xc
c0012fbc:	68 43 ed 01 c0       	push   0xc001ed43
c0012fc1:	e8 9d d1 ff ff       	call   c0010163 <KePanic(char const*)>
c0012fc6:	83 c4 10             	add    esp,0x10
c0012fc9:	31 ed                	xor    ebp,ebp
c0012fcb:	eb bb                	jmp    c0012f88 <Thr::loadDLL(char const*, bool)+0x1df>
c0012fcd:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012fd3:	89 d8                	mov    eax,ebx
c0012fd5:	5b                   	pop    ebx
c0012fd6:	5e                   	pop    esi
c0012fd7:	5f                   	pop    edi
c0012fd8:	5d                   	pop    ebp
c0012fd9:	c3                   	ret    

c0012fda <Thr::executeDLL(unsigned long, void*)>:
c0012fda:	56                   	push   esi
c0012fdb:	53                   	push   ebx
c0012fdc:	52                   	push   edx
c0012fdd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012fe1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012fe5:	85 db                	test   ebx,ebx
c0012fe7:	75 10                	jne    c0012ff9 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0012fe9:	83 ec 0c             	sub    esp,0xc
c0012fec:	68 5f ed 01 c0       	push   0xc001ed5f
c0012ff1:	e8 6d d1 ff ff       	call   c0010163 <KePanic(char const*)>
c0012ff6:	83 c4 10             	add    esp,0x10
c0012ff9:	50                   	push   eax
c0012ffa:	50                   	push   eax
c0012ffb:	53                   	push   ebx
c0012ffc:	68 89 ed 01 c0       	push   0xc001ed89
c0013001:	e8 f2 74 ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c0013006:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001300a:	89 d8                	mov    eax,ebx
c001300c:	83 c4 14             	add    esp,0x14
c001300f:	5b                   	pop    ebx
c0013010:	5e                   	pop    esi
c0013011:	ff e0                	jmp    eax
c0013013:	90                   	nop

c0013014 <userModeEntryPoint(void*)>:
c0013014:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0013019:	48                   	dec    eax
c001301a:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c001301f:	75 03                	jne    c0013024 <userModeEntryPoint(void*)+0x10>
c0013021:	fb                   	sti    
c0013022:	66 90                	xchg   ax,ax
c0013024:	fb                   	sti    
c0013025:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001302a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001302d:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0013033:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013037:	e9 03 d2 fe ff       	jmp    c000023f <goToUsermode>

c001303c <changeTSS>:
c001303c:	83 ec 14             	sub    esp,0x14
c001303f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013044:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0013047:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001304c:	c1 e2 15             	shl    edx,0x15
c001304f:	29 d0                	sub    eax,edx
c0013051:	50                   	push   eax
c0013052:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c0013057:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001305d:	05 7c 11 00 00       	add    eax,0x117c
c0013062:	50                   	push   eax
c0013063:	e8 90 5b ff ff       	call   c0008bf8 <TSS::setESP(unsigned long)>
c0013068:	83 c4 1c             	add    esp,0x1c
c001306b:	c3                   	ret    

c001306c <switchToThread(ThreadControlBlock*)>:
c001306c:	57                   	push   edi
c001306d:	a1 04 40 02 c0       	mov    eax,ds:0xc0024004
c0013072:	56                   	push   esi
c0013073:	85 c0                	test   eax,eax
c0013075:	53                   	push   ebx
c0013076:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001307a:	0f 85 90 00 00 00    	jne    c0013110 <switchToThread(ThreadControlBlock*)+0xa4>
c0013080:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c0013083:	80 fa ff             	cmp    dl,0xff
c0013086:	0f 84 80 00 00 00    	je     c001310c <switchToThread(ThreadControlBlock*)+0xa0>
c001308c:	81 e2 ff 00 00 00    	and    edx,0xff
c0013092:	b8 00 04 00 00       	mov    eax,0x400
c0013097:	29 d0                	sub    eax,edx
c0013099:	d1 f8                	sar    eax,1
c001309b:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c001309e:	66 90                	xchg   ax,ax
c00130a0:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00130a3:	e8 65 27 00 00       	call   c001580d <HalQueryPerformanceCounter()>
c00130a8:	a3 48 40 02 c0       	mov    ds:0xc0024048,eax
c00130ad:	89 15 4c 40 02 c0    	mov    DWORD PTR ds:0xc002404c,edx
c00130b3:	89 c6                	mov    esi,eax
c00130b5:	89 d7                	mov    edi,edx
c00130b7:	2b 35 38 40 02 c0    	sub    esi,DWORD PTR ds:0xc0024038
c00130bd:	a3 38 40 02 c0       	mov    ds:0xc0024038,eax
c00130c2:	1b 3d 3c 40 02 c0    	sbb    edi,DWORD PTR ds:0xc002403c
c00130c8:	89 35 40 40 02 c0    	mov    DWORD PTR ds:0xc0024040,esi
c00130ce:	89 3d 44 40 02 c0    	mov    DWORD PTR ds:0xc0024044,edi
c00130d4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00130da:	89 15 3c 40 02 c0    	mov    DWORD PTR ds:0xc002403c,edx
c00130e0:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00130e3:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00130e6:	01 c6                	add    esi,eax
c00130e8:	11 d7                	adc    edi,edx
c00130ea:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00130ed:	83 ec 0c             	sub    esp,0xc
c00130f0:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00130f3:	53                   	push   ebx
c00130f4:	e8 7e d1 fe ff       	call   c0000277 <switchToThreadASM>
c00130f9:	0f 20 c0             	mov    eax,cr0
c00130fc:	83 c8 08             	or     eax,0x8
c00130ff:	0f 22 c0             	mov    cr0,eax
c0013102:	83 c4 10             	add    esp,0x10
c0013105:	5b                   	pop    ebx
c0013106:	5e                   	pop    esi
c0013107:	5f                   	pop    edi
c0013108:	c3                   	ret    
c0013109:	8d 76 00             	lea    esi,[esi+0x0]
c001310c:	31 c0                	xor    eax,eax
c001310e:	eb 90                	jmp    c00130a0 <switchToThread(ThreadControlBlock*)+0x34>
c0013110:	5b                   	pop    ebx
c0013111:	c7 05 00 40 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0024000,0x1
c001311b:	5e                   	pop    esi
c001311c:	5f                   	pop    edi
c001311d:	c3                   	ret    
c001311e:	66 90                	xchg   ax,ax

c0013120 <Process::addArgs(char**)>:
c0013120:	57                   	push   edi
c0013121:	56                   	push   esi
c0013122:	53                   	push   ebx
c0013123:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013127:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001312b:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0013135:	85 ff                	test   edi,edi
c0013137:	74 43                	je     c001317c <Process::addArgs(char**)+0x5c>
c0013139:	8b 07                	mov    eax,DWORD PTR [edi]
c001313b:	85 c0                	test   eax,eax
c001313d:	74 3d                	je     c001317c <Process::addArgs(char**)+0x5c>
c001313f:	31 db                	xor    ebx,ebx
c0013141:	8d 76 00             	lea    esi,[esi+0x0]
c0013144:	83 ec 0c             	sub    esp,0xc
c0013147:	50                   	push   eax
c0013148:	e8 f3 d3 fe ff       	call   c0000540 <strlen>
c001314d:	40                   	inc    eax
c001314e:	89 04 24             	mov    DWORD PTR [esp],eax
c0013151:	e8 63 46 ff ff       	call   c00077b9 <malloc>
c0013156:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c001315d:	5a                   	pop    edx
c001315e:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0013161:	59                   	pop    ecx
c0013162:	43                   	inc    ebx
c0013163:	52                   	push   edx
c0013164:	50                   	push   eax
c0013165:	e8 96 d4 fe ff       	call   c0000600 <strcpy>
c001316a:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0013170:	83 c4 10             	add    esp,0x10
c0013173:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0013176:	85 c0                	test   eax,eax
c0013178:	75 ca                	jne    c0013144 <Process::addArgs(char**)+0x24>
c001317a:	66 90                	xchg   ax,ax
c001317c:	5b                   	pop    ebx
c001317d:	5e                   	pop    esi
c001317e:	5f                   	pop    edi
c001317f:	c3                   	ret    

c0013180 <Process::Process(char const*, Process*, char**)>:
c0013180:	57                   	push   edi
c0013181:	56                   	push   esi
c0013182:	53                   	push   ebx
c0013183:	81 ec e0 00 00 00    	sub    esp,0xe0
c0013189:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c0013190:	05 0c 02 00 00       	add    eax,0x20c
c0013195:	bb 07 00 00 00       	mov    ebx,0x7
c001319a:	89 c6                	mov    esi,eax
c001319c:	85 db                	test   ebx,ebx
c001319e:	78 14                	js     c00131b4 <Process::Process(char const*, Process*, char**)+0x34>
c00131a0:	83 ec 0c             	sub    esp,0xc
c00131a3:	56                   	push   esi
c00131a4:	e8 83 99 00 00       	call   c001cb2c <ThreadControlBlock::ThreadControlBlock()>
c00131a9:	83 c4 10             	add    esp,0x10
c00131ac:	83 c6 5f             	add    esi,0x5f
c00131af:	4b                   	dec    ebx
c00131b0:	eb ea                	jmp    c001319c <Process::Process(char const*, Process*, char**)+0x1c>
c00131b2:	66 90                	xchg   ax,ax
c00131b4:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c00131bb:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00131c2:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c00131c9:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00131d0:	83 ec 0c             	sub    esp,0xc
c00131d3:	ff b4 24 fc 00 00 00 	push   DWORD PTR [esp+0xfc]
c00131da:	e8 79 cd ff ff       	call   c000ff58 <Krnl::newProcessEnv(Process*)>
c00131df:	83 c4 10             	add    esp,0x10
c00131e2:	89 c2                	mov    edx,eax
c00131e4:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c00131eb:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00131f1:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c00131f8:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0013201:	a1 2c fd 01 c0       	mov    eax,ds:0xc001fd2c
c0013206:	8d 50 01             	lea    edx,[eax+0x1]
c0013209:	89 15 2c fd 01 c0    	mov    DWORD PTR ds:0xc001fd2c,edx
c001320f:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0013216:	89 02                	mov    DWORD PTR [edx],eax
c0013218:	c7 84 24 d8 00 00 00 14 00 00 00 	mov    DWORD PTR [esp+0xd8],0x14
c0013223:	83 ec 0c             	sub    esp,0xc
c0013226:	ff b4 24 e4 00 00 00 	push   DWORD PTR [esp+0xe4]
c001322d:	e8 87 45 ff ff       	call   c00077b9 <malloc>
c0013232:	83 c4 10             	add    esp,0x10
c0013235:	89 c3                	mov    ebx,eax
c0013237:	83 ec 08             	sub    esp,0x8
c001323a:	6a 00                	push   0x0
c001323c:	53                   	push   ebx
c001323d:	e8 a6 6b ff ff       	call   c0009de8 <VAS::VAS(bool)>
c0013242:	83 c4 10             	add    esp,0x10
c0013245:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c001324c:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0013252:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c0013259:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013263:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c001326a:	8b 94 24 f8 00 00 00 	mov    edx,DWORD PTR [esp+0xf8]
c0013271:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0013277:	8b 9c 24 f0 00 00 00 	mov    ebx,DWORD PTR [esp+0xf0]
c001327e:	89 e0                	mov    eax,esp
c0013280:	83 ec 0c             	sub    esp,0xc
c0013283:	50                   	push   eax
c0013284:	e8 fd d1 ff ff       	call   c0010486 <KeInitSignals()>
c0013289:	83 c4 0c             	add    esp,0xc
c001328c:	8d 93 20 07 00 00    	lea    edx,[ebx+0x720]
c0013292:	89 e0                	mov    eax,esp
c0013294:	b9 c8 00 00 00       	mov    ecx,0xc8
c0013299:	8b 18                	mov    ebx,DWORD PTR [eax]
c001329b:	89 1a                	mov    DWORD PTR [edx],ebx
c001329d:	8b 5c 08 fc          	mov    ebx,DWORD PTR [eax+ecx*1-0x4]
c00132a1:	89 5c 0a fc          	mov    DWORD PTR [edx+ecx*1-0x4],ebx
c00132a5:	8d 5a 04             	lea    ebx,[edx+0x4]
c00132a8:	83 e3 fc             	and    ebx,0xfffffffc
c00132ab:	29 da                	sub    edx,ebx
c00132ad:	29 d0                	sub    eax,edx
c00132af:	01 d1                	add    ecx,edx
c00132b1:	83 e1 fc             	and    ecx,0xfffffffc
c00132b4:	c1 e9 02             	shr    ecx,0x2
c00132b7:	89 ca                	mov    edx,ecx
c00132b9:	fc                   	cld    
c00132ba:	89 df                	mov    edi,ebx
c00132bc:	89 c6                	mov    esi,eax
c00132be:	89 d1                	mov    ecx,edx
c00132c0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00132c2:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c00132c9:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00132cf:	85 c0                	test   eax,eax
c00132d1:	74 51                	je     c0013324 <Process::Process(char const*, Process*, char**)+0x1a4>
c00132d3:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c00132da:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00132e0:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00132e6:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c00132ed:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00132f3:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c00132fa:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013300:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013306:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c001330d:	05 0c 01 00 00       	add    eax,0x10c
c0013312:	83 ec 08             	sub    esp,0x8
c0013315:	52                   	push   edx
c0013316:	50                   	push   eax
c0013317:	e8 e4 d2 fe ff       	call   c0000600 <strcpy>
c001331c:	83 c4 10             	add    esp,0x10
c001331f:	eb 7b                	jmp    c001339c <Process::Process(char const*, Process*, char**)+0x21c>
c0013321:	8d 76 00             	lea    esi,[esi+0x0]
c0013324:	c7 84 24 d4 00 00 00 34 01 00 00 	mov    DWORD PTR [esp+0xd4],0x134
c001332f:	83 ec 0c             	sub    esp,0xc
c0013332:	ff b4 24 e0 00 00 00 	push   DWORD PTR [esp+0xe0]
c0013339:	e8 7b 44 ff ff       	call   c00077b9 <malloc>
c001333e:	83 c4 10             	add    esp,0x10
c0013341:	89 c3                	mov    ebx,eax
c0013343:	83 ec 08             	sub    esp,0x8
c0013346:	ff b4 24 fc 00 00 00 	push   DWORD PTR [esp+0xfc]
c001334d:	53                   	push   ebx
c001334e:	e8 c7 55 ff ff       	call   c000891a <VgaText::VgaText(char const*)>
c0013353:	83 c4 10             	add    esp,0x10
c0013356:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c001335d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0013363:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c001336a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013370:	83 ec 0c             	sub    esp,0xc
c0013373:	50                   	push   eax
c0013374:	e8 41 4e ff ff       	call   c00081ba <addToTerminalCycle(VgaText*)>
c0013379:	83 c4 10             	add    esp,0x10
c001337c:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c0013383:	05 0c 01 00 00       	add    eax,0x10c
c0013388:	83 ec 08             	sub    esp,0x8
c001338b:	68 a8 ed 01 c0       	push   0xc001eda8
c0013390:	50                   	push   eax
c0013391:	e8 6a d2 fe ff       	call   c0000600 <strcpy>
c0013396:	83 c4 10             	add    esp,0x10
c0013399:	8d 76 00             	lea    esi,[esi+0x0]
c001339c:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c00133a3:	83 c0 0c             	add    eax,0xc
c00133a6:	83 ec 08             	sub    esp,0x8
c00133a9:	ff b4 24 fc 00 00 00 	push   DWORD PTR [esp+0xfc]
c00133b0:	50                   	push   eax
c00133b1:	e8 4a d2 fe ff       	call   c0000600 <strcpy>
c00133b6:	83 c4 10             	add    esp,0x10
c00133b9:	83 ec 08             	sub    esp,0x8
c00133bc:	ff b4 24 04 01 00 00 	push   DWORD PTR [esp+0x104]
c00133c3:	ff b4 24 fc 00 00 00 	push   DWORD PTR [esp+0xfc]
c00133ca:	e8 51 fd ff ff       	call   c0013120 <Process::addArgs(char**)>
c00133cf:	83 c4 10             	add    esp,0x10
c00133d2:	83 ec 08             	sub    esp,0x8
c00133d5:	ff b4 24 fc 00 00 00 	push   DWORD PTR [esp+0xfc]
c00133dc:	ff b4 24 fc 00 00 00 	push   DWORD PTR [esp+0xfc]
c00133e3:	e8 d2 ec ff ff       	call   c00120ba <Thr::loadProgramIntoMemory(Process*, char const*)>
c00133e8:	83 c4 10             	add    esp,0x10
c00133eb:	88 84 24 df 00 00 00 	mov    BYTE PTR [esp+0xdf],al
c00133f2:	8a 84 24 df 00 00 00 	mov    al,BYTE PTR [esp+0xdf]
c00133f9:	83 f0 01             	xor    eax,0x1
c00133fc:	88 c2                	mov    dl,al
c00133fe:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c0013405:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c001340b:	8a 84 24 df 00 00 00 	mov    al,BYTE PTR [esp+0xdf]
c0013412:	25 ff 00 00 00       	and    eax,0xff
c0013417:	83 ec 08             	sub    esp,0x8
c001341a:	50                   	push   eax
c001341b:	68 00 ee 01 c0       	push   0xc001ee00
c0013420:	e8 d3 70 ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c0013425:	83 c4 10             	add    esp,0x10
c0013428:	90                   	nop
c0013429:	81 c4 e0 00 00 00    	add    esp,0xe0
c001342f:	5b                   	pop    ebx
c0013430:	5e                   	pop    esi
c0013431:	5f                   	pop    edi
c0013432:	c3                   	ret    
c0013433:	90                   	nop

c0013434 <Process::Process(bool, char const*, Process*, char**)>:
c0013434:	57                   	push   edi
c0013435:	56                   	push   esi
c0013436:	53                   	push   ebx
c0013437:	81 ec f0 00 00 00    	sub    esp,0xf0
c001343d:	8b 84 24 04 01 00 00 	mov    eax,DWORD PTR [esp+0x104]
c0013444:	88 84 24 dc 00 00 00 	mov    BYTE PTR [esp+0xdc],al
c001344b:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c0013452:	05 0c 02 00 00       	add    eax,0x20c
c0013457:	bb 07 00 00 00       	mov    ebx,0x7
c001345c:	89 c6                	mov    esi,eax
c001345e:	66 90                	xchg   ax,ax
c0013460:	85 db                	test   ebx,ebx
c0013462:	78 14                	js     c0013478 <Process::Process(bool, char const*, Process*, char**)+0x44>
c0013464:	83 ec 0c             	sub    esp,0xc
c0013467:	56                   	push   esi
c0013468:	e8 bf 96 00 00       	call   c001cb2c <ThreadControlBlock::ThreadControlBlock()>
c001346d:	83 c4 10             	add    esp,0x10
c0013470:	83 c6 5f             	add    esi,0x5f
c0013473:	4b                   	dec    ebx
c0013474:	eb ea                	jmp    c0013460 <Process::Process(bool, char const*, Process*, char**)+0x2c>
c0013476:	66 90                	xchg   ax,ax
c0013478:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c001347f:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0013486:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c001348d:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0013494:	83 ec 0c             	sub    esp,0xc
c0013497:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001349e:	e8 b5 ca ff ff       	call   c000ff58 <Krnl::newProcessEnv(Process*)>
c00134a3:	83 c4 10             	add    esp,0x10
c00134a6:	89 c2                	mov    edx,eax
c00134a8:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c00134af:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00134b5:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c00134bc:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00134c5:	a1 2c fd 01 c0       	mov    eax,ds:0xc001fd2c
c00134ca:	8d 50 01             	lea    edx,[eax+0x1]
c00134cd:	89 15 2c fd 01 c0    	mov    DWORD PTR ds:0xc001fd2c,edx
c00134d3:	8b 94 24 00 01 00 00 	mov    edx,DWORD PTR [esp+0x100]
c00134da:	89 02                	mov    DWORD PTR [edx],eax
c00134dc:	c7 84 24 ec 00 00 00 14 00 00 00 	mov    DWORD PTR [esp+0xec],0x14
c00134e7:	83 ec 0c             	sub    esp,0xc
c00134ea:	ff b4 24 f8 00 00 00 	push   DWORD PTR [esp+0xf8]
c00134f1:	e8 c3 42 ff ff       	call   c00077b9 <malloc>
c00134f6:	83 c4 10             	add    esp,0x10
c00134f9:	89 c3                	mov    ebx,eax
c00134fb:	8a 84 24 dc 00 00 00 	mov    al,BYTE PTR [esp+0xdc]
c0013502:	25 ff 00 00 00       	and    eax,0xff
c0013507:	83 ec 08             	sub    esp,0x8
c001350a:	50                   	push   eax
c001350b:	53                   	push   ebx
c001350c:	e8 d7 68 ff ff       	call   c0009de8 <VAS::VAS(bool)>
c0013511:	83 c4 10             	add    esp,0x10
c0013514:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c001351b:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0013521:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c0013528:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013532:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c0013539:	8b 94 24 0c 01 00 00 	mov    edx,DWORD PTR [esp+0x10c]
c0013540:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0013546:	8b 9c 24 00 01 00 00 	mov    ebx,DWORD PTR [esp+0x100]
c001354d:	89 e0                	mov    eax,esp
c001354f:	83 ec 0c             	sub    esp,0xc
c0013552:	50                   	push   eax
c0013553:	e8 2e cf ff ff       	call   c0010486 <KeInitSignals()>
c0013558:	83 c4 0c             	add    esp,0xc
c001355b:	8d 93 20 07 00 00    	lea    edx,[ebx+0x720]
c0013561:	89 e0                	mov    eax,esp
c0013563:	b9 c8 00 00 00       	mov    ecx,0xc8
c0013568:	8b 18                	mov    ebx,DWORD PTR [eax]
c001356a:	89 1a                	mov    DWORD PTR [edx],ebx
c001356c:	8b 5c 08 fc          	mov    ebx,DWORD PTR [eax+ecx*1-0x4]
c0013570:	89 5c 0a fc          	mov    DWORD PTR [edx+ecx*1-0x4],ebx
c0013574:	8d 5a 04             	lea    ebx,[edx+0x4]
c0013577:	83 e3 fc             	and    ebx,0xfffffffc
c001357a:	29 da                	sub    edx,ebx
c001357c:	29 d0                	sub    eax,edx
c001357e:	01 d1                	add    ecx,edx
c0013580:	83 e1 fc             	and    ecx,0xfffffffc
c0013583:	c1 e9 02             	shr    ecx,0x2
c0013586:	89 ca                	mov    edx,ecx
c0013588:	fc                   	cld    
c0013589:	89 df                	mov    edi,ebx
c001358b:	89 c6                	mov    esi,eax
c001358d:	89 d1                	mov    ecx,edx
c001358f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013591:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c0013598:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001359e:	85 c0                	test   eax,eax
c00135a0:	74 4e                	je     c00135f0 <Process::Process(bool, char const*, Process*, char**)+0x1bc>
c00135a2:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c00135a9:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00135af:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00135b5:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c00135bc:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00135c2:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c00135c9:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00135cf:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00135d5:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c00135dc:	05 0c 01 00 00       	add    eax,0x10c
c00135e1:	83 ec 08             	sub    esp,0x8
c00135e4:	52                   	push   edx
c00135e5:	50                   	push   eax
c00135e6:	e8 15 d0 fe ff       	call   c0000600 <strcpy>
c00135eb:	83 c4 10             	add    esp,0x10
c00135ee:	eb 78                	jmp    c0013668 <Process::Process(bool, char const*, Process*, char**)+0x234>
c00135f0:	c7 84 24 e8 00 00 00 34 01 00 00 	mov    DWORD PTR [esp+0xe8],0x134
c00135fb:	83 ec 0c             	sub    esp,0xc
c00135fe:	ff b4 24 f4 00 00 00 	push   DWORD PTR [esp+0xf4]
c0013605:	e8 af 41 ff ff       	call   c00077b9 <malloc>
c001360a:	83 c4 10             	add    esp,0x10
c001360d:	89 c3                	mov    ebx,eax
c001360f:	83 ec 08             	sub    esp,0x8
c0013612:	ff b4 24 10 01 00 00 	push   DWORD PTR [esp+0x110]
c0013619:	53                   	push   ebx
c001361a:	e8 fb 52 ff ff       	call   c000891a <VgaText::VgaText(char const*)>
c001361f:	83 c4 10             	add    esp,0x10
c0013622:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c0013629:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001362f:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c0013636:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001363c:	83 ec 0c             	sub    esp,0xc
c001363f:	50                   	push   eax
c0013640:	e8 75 4b ff ff       	call   c00081ba <addToTerminalCycle(VgaText*)>
c0013645:	83 c4 10             	add    esp,0x10
c0013648:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c001364f:	05 0c 01 00 00       	add    eax,0x10c
c0013654:	83 ec 08             	sub    esp,0x8
c0013657:	68 a8 ed 01 c0       	push   0xc001eda8
c001365c:	50                   	push   eax
c001365d:	e8 9e cf fe ff       	call   c0000600 <strcpy>
c0013662:	83 c4 10             	add    esp,0x10
c0013665:	8d 76 00             	lea    esi,[esi+0x0]
c0013668:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c001366f:	83 c0 0c             	add    eax,0xc
c0013672:	83 ec 08             	sub    esp,0x8
c0013675:	ff b4 24 10 01 00 00 	push   DWORD PTR [esp+0x110]
c001367c:	50                   	push   eax
c001367d:	e8 7e cf fe ff       	call   c0000600 <strcpy>
c0013682:	83 c4 10             	add    esp,0x10
c0013685:	83 ec 08             	sub    esp,0x8
c0013688:	ff b4 24 18 01 00 00 	push   DWORD PTR [esp+0x118]
c001368f:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013696:	e8 85 fa ff ff       	call   c0013120 <Process::addArgs(char**)>
c001369b:	83 c4 10             	add    esp,0x10
c001369e:	90                   	nop
c001369f:	81 c4 f0 00 00 00    	add    esp,0xf0
c00136a5:	5b                   	pop    ebx
c00136a6:	5e                   	pop    esi
c00136a7:	5f                   	pop    edi
c00136a8:	c3                   	ret    
c00136a9:	8d 76 00             	lea    esi,[esi+0x0]

c00136ac <taskStartupFunction>:
c00136ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00136b1:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00136b4:	c3                   	ret    
c00136b5:	90                   	nop
c00136b6:	66 90                	xchg   ax,ax

c00136b8 <Semaphore::Semaphore(int)>:
c00136b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00136bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00136c0:	89 10                	mov    DWORD PTR [eax],edx
c00136c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00136c6:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00136cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00136d1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00136d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00136dc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00136e3:	90                   	nop
c00136e4:	c3                   	ret    
c00136e5:	90                   	nop
c00136e6:	66 90                	xchg   ax,ax

c00136e8 <Mutex::Mutex()>:
c00136e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00136ec:	6a 01                	push   0x1
c00136ee:	50                   	push   eax
c00136ef:	e8 c4 ff ff ff       	call   c00136b8 <Semaphore::Semaphore(int)>
c00136f4:	83 c4 08             	add    esp,0x8
c00136f7:	90                   	nop
c00136f8:	c3                   	ret    
c00136f9:	90                   	nop
c00136fa:	66 90                	xchg   ax,ax

c00136fc <Process::createThread(void (*)(void*), void*, int)>:
c00136fc:	57                   	push   edi
c00136fd:	31 c9                	xor    ecx,ecx
c00136ff:	56                   	push   esi
c0013700:	53                   	push   ebx
c0013701:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013705:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c001370c:	89 f2                	mov    edx,esi
c001370e:	66 90                	xchg   ax,ax
c0013710:	31 c0                	xor    eax,eax
c0013712:	66 89 d0             	mov    ax,dx
c0013715:	83 e2 01             	and    edx,0x1
c0013718:	74 12                	je     c001372c <Process::createThread(void (*)(void*), void*, int)+0x30>
c001371a:	d1 f8                	sar    eax,1
c001371c:	41                   	inc    ecx
c001371d:	89 c2                	mov    edx,eax
c001371f:	83 f9 10             	cmp    ecx,0x10
c0013722:	75 ec                	jne    c0013710 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0013724:	31 db                	xor    ebx,ebx
c0013726:	89 d8                	mov    eax,ebx
c0013728:	5b                   	pop    ebx
c0013729:	5e                   	pop    esi
c001372a:	5f                   	pop    edi
c001372b:	c3                   	ret    
c001372c:	b8 01 00 00 00       	mov    eax,0x1
c0013731:	d3 e0                	shl    eax,cl
c0013733:	09 c6                	or     esi,eax
c0013735:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0013738:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c001373f:	01 c0                	add    eax,eax
c0013741:	01 c8                	add    eax,ecx
c0013743:	8d 04 80             	lea    eax,[eax+eax*4]
c0013746:	01 d8                	add    eax,ebx
c0013748:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c001374f:	75 0b                	jne    c001375c <Process::createThread(void (*)(void*), void*, int)+0x60>
c0013751:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c001375b:	90                   	nop
c001375c:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0013762:	83 ec 08             	sub    esp,0x8
c0013765:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013768:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c001376b:	01 c0                	add    eax,eax
c001376d:	01 c8                	add    eax,ecx
c001376f:	8d 3c 80             	lea    edi,[eax+eax*4]
c0013772:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0013775:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001377b:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0013781:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013785:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c001378b:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0013791:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0013798:	89 ca                	mov    edx,ecx
c001379a:	f7 da                	neg    edx
c001379c:	c1 e2 15             	shl    edx,0x15
c001379f:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00137a5:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00137ab:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00137af:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00137b9:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00137bf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00137c3:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00137c9:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00137d3:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00137dd:	53                   	push   ebx
c00137de:	68 24 40 02 c0       	push   0xc0024024
c00137e3:	e8 e4 90 00 00       	call   c001c8cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00137e8:	83 c4 10             	add    esp,0x10
c00137eb:	89 d8                	mov    eax,ebx
c00137ed:	5b                   	pop    ebx
c00137ee:	5e                   	pop    esi
c00137ef:	5f                   	pop    edi
c00137f0:	c3                   	ret    
c00137f1:	90                   	nop
c00137f2:	66 90                	xchg   ax,ax

c00137f4 <Process::createUserThread()>:
c00137f4:	83 ec 0c             	sub    esp,0xc
c00137f7:	68 80 00 00 00       	push   0x80
c00137fc:	6a 00                	push   0x0
c00137fe:	68 14 30 01 c0       	push   0xc0013014
c0013803:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013807:	50                   	push   eax
c0013808:	e8 ef fe ff ff       	call   c00136fc <Process::createThread(void (*)(void*), void*, int)>
c001380d:	83 c4 1c             	add    esp,0x1c
c0013810:	c3                   	ret    
c0013811:	8d 76 00             	lea    esi,[esi+0x0]

c0013814 <setupMultitasking(void (*)())>:
c0013814:	56                   	push   esi
c0013815:	53                   	push   ebx
c0013816:	53                   	push   ebx
c0013817:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001381b:	eb 13                	jmp    c0013830 <setupMultitasking(void (*)())+0x1c>
c001381d:	8d 76 00             	lea    esi,[esi+0x0]
c0013820:	83 ec 0c             	sub    esp,0xc
c0013823:	68 24 40 02 c0       	push   0xc0024024
c0013828:	e8 e7 8f 00 00       	call   c001c814 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001382d:	83 c4 10             	add    esp,0x10
c0013830:	83 ec 0c             	sub    esp,0xc
c0013833:	68 24 40 02 c0       	push   0xc0024024
c0013838:	e8 b3 8f 00 00       	call   c001c7f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001383d:	83 c4 10             	add    esp,0x10
c0013840:	84 c0                	test   al,al
c0013842:	74 dc                	je     c0013820 <setupMultitasking(void (*)())+0xc>
c0013844:	83 ec 0c             	sub    esp,0xc
c0013847:	68 e8 07 00 00       	push   0x7e8
c001384c:	e8 68 3f ff ff       	call   c00077b9 <malloc>
c0013851:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0013858:	89 c3                	mov    ebx,eax
c001385a:	6a 00                	push   0x0
c001385c:	68 ac ed 01 c0       	push   0xc001edac
c0013861:	6a 01                	push   0x1
c0013863:	50                   	push   eax
c0013864:	e8 cb fb ff ff       	call   c0013434 <Process::Process(bool, char const*, Process*, char**)>
c0013869:	83 c4 14             	add    esp,0x14
c001386c:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0013872:	89 1d 30 40 02 c0    	mov    DWORD PTR ds:0xc0024030,ebx
c0013878:	50                   	push   eax
c0013879:	e8 99 4b ff ff       	call   c0008417 <setActiveTerminal(VgaText*)>
c001387e:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0013886:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0013890:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0013896:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013899:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00138a3:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00138a9:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00138af:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00138b9:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00138c3:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00138cd:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00138d3:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00138d9:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00138e3:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00138e9:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00138f3:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00138f9:	5a                   	pop    edx
c00138fa:	59                   	pop    ecx
c00138fb:	68 a8 ed 01 c0       	push   0xc001eda8
c0013900:	50                   	push   eax
c0013901:	e8 fa cc fe ff       	call   c0000600 <strcpy>
c0013906:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c001390d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0013911:	83 c4 14             	add    esp,0x14
c0013914:	5b                   	pop    ebx
c0013915:	5e                   	pop    esi
c0013916:	e9 4e c9 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c001391b:	90                   	nop

c001391c <schedule()>:
c001391c:	8b 15 04 40 02 c0    	mov    edx,DWORD PTR ds:0xc0024004
c0013922:	85 d2                	test   edx,edx
c0013924:	74 0e                	je     c0013934 <schedule()+0x18>
c0013926:	c7 05 00 40 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0024000,0x1
c0013930:	c3                   	ret    
c0013931:	8d 76 00             	lea    esi,[esi+0x0]
c0013934:	53                   	push   ebx
c0013935:	83 ec 14             	sub    esp,0x14
c0013938:	68 24 40 02 c0       	push   0xc0024024
c001393d:	e8 ae 8e 00 00       	call   c001c7f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013942:	83 c4 10             	add    esp,0x10
c0013945:	84 c0                	test   al,al
c0013947:	75 3b                	jne    c0013984 <schedule()+0x68>
c0013949:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001394e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0013951:	4a                   	dec    edx
c0013952:	74 38                	je     c001398c <schedule()+0x70>
c0013954:	83 ec 0c             	sub    esp,0xc
c0013957:	68 24 40 02 c0       	push   0xc0024024
c001395c:	e8 ab 8e 00 00       	call   c001c80c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013961:	c7 04 24 24 40 02 c0 	mov    DWORD PTR [esp],0xc0024024
c0013968:	89 c3                	mov    ebx,eax
c001396a:	e8 a5 8e 00 00       	call   c001c814 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001396f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0013976:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013979:	e8 ee f6 ff ff       	call   c001306c <switchToThread(ThreadControlBlock*)>
c001397e:	83 c4 10             	add    esp,0x10
c0013981:	8d 76 00             	lea    esi,[esi+0x0]
c0013984:	83 c4 08             	add    esp,0x8
c0013987:	5b                   	pop    ebx
c0013988:	c3                   	ret    
c0013989:	8d 76 00             	lea    esi,[esi+0x0]
c001398c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0013993:	83 ec 08             	sub    esp,0x8
c0013996:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001399b:	50                   	push   eax
c001399c:	68 24 40 02 c0       	push   0xc0024024
c00139a1:	e8 26 8f 00 00       	call   c001c8cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00139a6:	83 c4 10             	add    esp,0x10
c00139a9:	eb a9                	jmp    c0013954 <schedule()+0x38>
c00139ab:	90                   	nop

c00139ac <Semaphore::tryAcquire()>:
c00139ac:	53                   	push   ebx
c00139ad:	83 ec 08             	sub    esp,0x8
c00139b0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00139b4:	fa                   	cli    
c00139b5:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c00139ba:	8d 50 01             	lea    edx,[eax+0x1]
c00139bd:	89 15 08 40 02 c0    	mov    DWORD PTR ds:0xc0024008,edx
c00139c3:	8b 15 04 40 02 c0    	mov    edx,DWORD PTR ds:0xc0024004
c00139c9:	8d 5a 01             	lea    ebx,[edx+0x1]
c00139cc:	89 1d 04 40 02 c0    	mov    DWORD PTR ds:0xc0024004,ebx
c00139d2:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c00139d5:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c00139d7:	7c 33                	jl     c0013a0c <Semaphore::tryAcquire()+0x60>
c00139d9:	89 15 04 40 02 c0    	mov    DWORD PTR ds:0xc0024004,edx
c00139df:	85 d2                	test   edx,edx
c00139e1:	75 0d                	jne    c00139f0 <Semaphore::tryAcquire()+0x44>
c00139e3:	8b 15 00 40 02 c0    	mov    edx,DWORD PTR ds:0xc0024000
c00139e9:	85 d2                	test   edx,edx
c00139eb:	75 6b                	jne    c0013a58 <Semaphore::tryAcquire()+0xac>
c00139ed:	8d 76 00             	lea    esi,[esi+0x0]
c00139f0:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c00139f5:	85 c0                	test   eax,eax
c00139f7:	74 0b                	je     c0013a04 <Semaphore::tryAcquire()+0x58>
c00139f9:	8d 76 00             	lea    esi,[esi+0x0]
c00139fc:	31 c0                	xor    eax,eax
c00139fe:	83 c4 08             	add    esp,0x8
c0013a01:	5b                   	pop    ebx
c0013a02:	c3                   	ret    
c0013a03:	90                   	nop
c0013a04:	fb                   	sti    
c0013a05:	83 c4 08             	add    esp,0x8
c0013a08:	5b                   	pop    ebx
c0013a09:	c3                   	ret    
c0013a0a:	66 90                	xchg   ax,ax
c0013a0c:	43                   	inc    ebx
c0013a0d:	89 15 04 40 02 c0    	mov    DWORD PTR ds:0xc0024004,edx
c0013a13:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0013a16:	85 d2                	test   edx,edx
c0013a18:	75 22                	jne    c0013a3c <Semaphore::tryAcquire()+0x90>
c0013a1a:	8b 0d 00 40 02 c0    	mov    ecx,DWORD PTR ds:0xc0024000
c0013a20:	85 c9                	test   ecx,ecx
c0013a22:	74 18                	je     c0013a3c <Semaphore::tryAcquire()+0x90>
c0013a24:	c7 05 00 40 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024000,0x0
c0013a2e:	e8 e9 fe ff ff       	call   c001391c <schedule()>
c0013a33:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0013a38:	48                   	dec    eax
c0013a39:	8d 76 00             	lea    esi,[esi+0x0]
c0013a3c:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0013a41:	85 c0                	test   eax,eax
c0013a43:	75 0b                	jne    c0013a50 <Semaphore::tryAcquire()+0xa4>
c0013a45:	fb                   	sti    
c0013a46:	b0 01                	mov    al,0x1
c0013a48:	83 c4 08             	add    esp,0x8
c0013a4b:	5b                   	pop    ebx
c0013a4c:	c3                   	ret    
c0013a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0013a50:	b0 01                	mov    al,0x1
c0013a52:	83 c4 08             	add    esp,0x8
c0013a55:	5b                   	pop    ebx
c0013a56:	c3                   	ret    
c0013a57:	90                   	nop
c0013a58:	c7 05 00 40 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024000,0x0
c0013a62:	e8 b5 fe ff ff       	call   c001391c <schedule()>
c0013a67:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0013a6c:	48                   	dec    eax
c0013a6d:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0013a72:	85 c0                	test   eax,eax
c0013a74:	75 86                	jne    c00139fc <Semaphore::tryAcquire()+0x50>
c0013a76:	eb 8c                	jmp    c0013a04 <Semaphore::tryAcquire()+0x58>

c0013a78 <Semaphore::assertLocked(char const*)>:
c0013a78:	83 ec 0c             	sub    esp,0xc
c0013a7b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a7f:	fa                   	cli    
c0013a80:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c0013a86:	a1 04 40 02 c0       	mov    eax,ds:0xc0024004
c0013a8b:	8d 48 01             	lea    ecx,[eax+0x1]
c0013a8e:	89 0d 04 40 02 c0    	mov    DWORD PTR ds:0xc0024004,ecx
c0013a94:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013a96:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0013a99:	7c 29                	jl     c0013ac4 <Semaphore::assertLocked(char const*)+0x4c>
c0013a9b:	90                   	nop
c0013a9c:	a3 04 40 02 c0       	mov    ds:0xc0024004,eax
c0013aa1:	85 c0                	test   eax,eax
c0013aa3:	75 0b                	jne    c0013ab0 <Semaphore::assertLocked(char const*)+0x38>
c0013aa5:	a1 00 40 02 c0       	mov    eax,ds:0xc0024000
c0013aaa:	85 c0                	test   eax,eax
c0013aac:	75 2e                	jne    c0013adc <Semaphore::assertLocked(char const*)+0x64>
c0013aae:	66 90                	xchg   ax,ax
c0013ab0:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0013ab5:	48                   	dec    eax
c0013ab6:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0013abb:	75 03                	jne    c0013ac0 <Semaphore::assertLocked(char const*)+0x48>
c0013abd:	fb                   	sti    
c0013abe:	66 90                	xchg   ax,ax
c0013ac0:	83 c4 0c             	add    esp,0xc
c0013ac3:	c3                   	ret    
c0013ac4:	83 ec 0c             	sub    esp,0xc
c0013ac7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013acb:	52                   	push   edx
c0013acc:	e8 92 c6 ff ff       	call   c0010163 <KePanic(char const*)>
c0013ad1:	a1 04 40 02 c0       	mov    eax,ds:0xc0024004
c0013ad6:	83 c4 10             	add    esp,0x10
c0013ad9:	48                   	dec    eax
c0013ada:	eb c0                	jmp    c0013a9c <Semaphore::assertLocked(char const*)+0x24>
c0013adc:	c7 05 00 40 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024000,0x0
c0013ae6:	e8 31 fe ff ff       	call   c001391c <schedule()>
c0013aeb:	eb c3                	jmp    c0013ab0 <Semaphore::assertLocked(char const*)+0x38>
c0013aed:	8d 76 00             	lea    esi,[esi+0x0]

c0013af0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0013af0:	83 ec 0c             	sub    esp,0xc
c0013af3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013af8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013afc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013aff:	e8 18 fe ff ff       	call   c001391c <schedule()>
c0013b04:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0013b09:	48                   	dec    eax
c0013b0a:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0013b0f:	75 03                	jne    c0013b14 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0013b11:	fb                   	sti    
c0013b12:	66 90                	xchg   ax,ax
c0013b14:	83 c4 0c             	add    esp,0xc
c0013b17:	c3                   	ret    

c0013b18 <blockTask(TaskState)>:
c0013b18:	83 ec 0c             	sub    esp,0xc
c0013b1b:	fa                   	cli    
c0013b1c:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c0013b22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b26:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b2b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013b2e:	e8 e9 fd ff ff       	call   c001391c <schedule()>
c0013b33:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0013b38:	48                   	dec    eax
c0013b39:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0013b3e:	75 04                	jne    c0013b44 <blockTask(TaskState)+0x2c>
c0013b40:	fb                   	sti    
c0013b41:	8d 76 00             	lea    esi,[esi+0x0]
c0013b44:	83 c4 0c             	add    esp,0xc
c0013b47:	c3                   	ret    

c0013b48 <waitTask(int, int*, int)>:
c0013b48:	83 ec 18             	sub    esp,0x18
c0013b4b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b50:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013b54:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0013b57:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013b5b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b60:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0013b63:	6a 07                	push   0x7
c0013b65:	e8 ae ff ff ff       	call   c0013b18 <blockTask(TaskState)>
c0013b6a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b6f:	83 c4 10             	add    esp,0x10
c0013b72:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0013b75:	85 d2                	test   edx,edx
c0013b77:	74 0b                	je     c0013b84 <waitTask(int, int*, int)+0x3c>
c0013b79:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0013b7c:	89 02                	mov    DWORD PTR [edx],eax
c0013b7e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b83:	90                   	nop
c0013b84:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0013b87:	83 c4 0c             	add    esp,0xc
c0013b8a:	c3                   	ret    
c0013b8b:	90                   	nop

c0013b8c <milliTenthSleepUntil(unsigned int)>:
c0013b8c:	83 ec 0c             	sub    esp,0xc
c0013b8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b93:	39 05 2c 33 02 c0    	cmp    DWORD PTR ds:0xc002332c,eax
c0013b99:	76 05                	jbe    c0013ba0 <milliTenthSleepUntil(unsigned int)+0x14>
c0013b9b:	90                   	nop
c0013b9c:	83 c4 0c             	add    esp,0xc
c0013b9f:	c3                   	ret    
c0013ba0:	fa                   	cli    
c0013ba1:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c0013ba7:	83 ec 08             	sub    esp,0x8
c0013baa:	ff 05 04 40 02 c0    	inc    DWORD PTR ds:0xc0024004
c0013bb0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013bb6:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0013bb9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013bbf:	52                   	push   edx
c0013bc0:	68 18 40 02 c0       	push   0xc0024018
c0013bc5:	e8 02 8d 00 00       	call   c001c8cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013bca:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013bd1:	e8 42 ff ff ff       	call   c0013b18 <blockTask(TaskState)>
c0013bd6:	a1 04 40 02 c0       	mov    eax,ds:0xc0024004
c0013bdb:	83 c4 10             	add    esp,0x10
c0013bde:	48                   	dec    eax
c0013bdf:	a3 04 40 02 c0       	mov    ds:0xc0024004,eax
c0013be4:	85 c0                	test   eax,eax
c0013be6:	75 0c                	jne    c0013bf4 <milliTenthSleepUntil(unsigned int)+0x68>
c0013be8:	a1 00 40 02 c0       	mov    eax,ds:0xc0024000
c0013bed:	85 c0                	test   eax,eax
c0013bef:	75 17                	jne    c0013c08 <milliTenthSleepUntil(unsigned int)+0x7c>
c0013bf1:	8d 76 00             	lea    esi,[esi+0x0]
c0013bf4:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0013bf9:	48                   	dec    eax
c0013bfa:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0013bff:	75 9b                	jne    c0013b9c <milliTenthSleepUntil(unsigned int)+0x10>
c0013c01:	fb                   	sti    
c0013c02:	83 c4 0c             	add    esp,0xc
c0013c05:	c3                   	ret    
c0013c06:	66 90                	xchg   ax,ax
c0013c08:	c7 05 00 40 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024000,0x0
c0013c12:	e8 05 fd ff ff       	call   c001391c <schedule()>
c0013c17:	eb db                	jmp    c0013bf4 <milliTenthSleepUntil(unsigned int)+0x68>
c0013c19:	8d 76 00             	lea    esi,[esi+0x0]

c0013c1c <milliTenthSleep(unsigned int)>:
c0013c1c:	a1 2c 33 02 c0       	mov    eax,ds:0xc002332c
c0013c21:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0013c25:	e9 62 ff ff ff       	jmp    c0013b8c <milliTenthSleepUntil(unsigned int)>
c0013c2a:	66 90                	xchg   ax,ax

c0013c2c <sleep(unsigned int)>:
c0013c2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c30:	8d 04 80             	lea    eax,[eax+eax*4]
c0013c33:	8d 04 80             	lea    eax,[eax+eax*4]
c0013c36:	8d 04 80             	lea    eax,[eax+eax*4]
c0013c39:	8d 04 80             	lea    eax,[eax+eax*4]
c0013c3c:	c1 e0 04             	shl    eax,0x4
c0013c3f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013c43:	eb d7                	jmp    c0013c1c <milliTenthSleep(unsigned int)>
c0013c45:	90                   	nop
c0013c46:	66 90                	xchg   ax,ax

c0013c48 <Semaphore::acquire()>:
c0013c48:	83 ec 0c             	sub    esp,0xc
c0013c4b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013c4f:	fa                   	cli    
c0013c50:	a1 04 40 02 c0       	mov    eax,ds:0xc0024004
c0013c55:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c0013c5b:	8d 48 01             	lea    ecx,[eax+0x1]
c0013c5e:	89 0d 04 40 02 c0    	mov    DWORD PTR ds:0xc0024004,ecx
c0013c64:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0013c67:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0013c69:	7d 2d                	jge    c0013c98 <Semaphore::acquire()+0x50>
c0013c6b:	41                   	inc    ecx
c0013c6c:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0013c6f:	90                   	nop
c0013c70:	a3 04 40 02 c0       	mov    ds:0xc0024004,eax
c0013c75:	85 c0                	test   eax,eax
c0013c77:	75 0b                	jne    c0013c84 <Semaphore::acquire()+0x3c>
c0013c79:	a1 00 40 02 c0       	mov    eax,ds:0xc0024000
c0013c7e:	85 c0                	test   eax,eax
c0013c80:	75 62                	jne    c0013ce4 <Semaphore::acquire()+0x9c>
c0013c82:	66 90                	xchg   ax,ax
c0013c84:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0013c89:	48                   	dec    eax
c0013c8a:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0013c8f:	75 03                	jne    c0013c94 <Semaphore::acquire()+0x4c>
c0013c91:	fb                   	sti    
c0013c92:	66 90                	xchg   ax,ax
c0013c94:	83 c4 0c             	add    esp,0xc
c0013c97:	c3                   	ret    
c0013c98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c9d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0013ca4:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013ca7:	85 c9                	test   ecx,ecx
c0013ca9:	74 4d                	je     c0013cf8 <Semaphore::acquire()+0xb0>
c0013cab:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0013cae:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013cb4:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0013cb7:	90                   	nop
c0013cb8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013cbd:	83 ec 0c             	sub    esp,0xc
c0013cc0:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0013cc3:	68 28 ee 01 c0       	push   0xc001ee28
c0013cc8:	e8 2b 68 ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c0013ccd:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0013cd4:	e8 3f fe ff ff       	call   c0013b18 <blockTask(TaskState)>
c0013cd9:	a1 04 40 02 c0       	mov    eax,ds:0xc0024004
c0013cde:	83 c4 10             	add    esp,0x10
c0013ce1:	48                   	dec    eax
c0013ce2:	eb 8c                	jmp    c0013c70 <Semaphore::acquire()+0x28>
c0013ce4:	c7 05 00 40 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024000,0x0
c0013cee:	e8 29 fc ff ff       	call   c001391c <schedule()>
c0013cf3:	eb 8f                	jmp    c0013c84 <Semaphore::acquire()+0x3c>
c0013cf5:	8d 76 00             	lea    esi,[esi+0x0]
c0013cf8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013cfd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013d00:	eb b6                	jmp    c0013cb8 <Semaphore::acquire()+0x70>
c0013d02:	66 90                	xchg   ax,ax

c0013d04 <taskReturned>:
c0013d04:	83 ec 18             	sub    esp,0x18
c0013d07:	68 48 ee 01 c0       	push   0xc001ee48
c0013d0c:	e8 52 c4 ff ff       	call   c0010163 <KePanic(char const*)>
c0013d11:	83 c4 10             	add    esp,0x10
c0013d14:	83 ec 0c             	sub    esp,0xc
c0013d17:	6a 02                	push   0x2
c0013d19:	e8 fa fd ff ff       	call   c0013b18 <blockTask(TaskState)>
c0013d1e:	fa                   	cli    
c0013d1f:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c0013d25:	e8 f2 fb ff ff       	call   c001391c <schedule()>
c0013d2a:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0013d2f:	83 c4 10             	add    esp,0x10
c0013d32:	48                   	dec    eax
c0013d33:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0013d38:	85 c0                	test   eax,eax
c0013d3a:	75 d8                	jne    c0013d14 <taskReturned+0x10>
c0013d3c:	fb                   	sti    
c0013d3d:	eb d5                	jmp    c0013d14 <taskReturned+0x10>
c0013d3f:	90                   	nop

c0013d40 <Thr::processFromPID(int)>:
c0013d40:	57                   	push   edi
c0013d41:	56                   	push   esi
c0013d42:	53                   	push   ebx
c0013d43:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d47:	fa                   	cli    
c0013d48:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c0013d4e:	83 ec 0c             	sub    esp,0xc
c0013d51:	68 24 40 02 c0       	push   0xc0024024
c0013d56:	e8 b1 8a 00 00       	call   c001c80c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013d5b:	83 c4 10             	add    esp,0x10
c0013d5e:	89 c7                	mov    edi,eax
c0013d60:	eb 16                	jmp    c0013d78 <Thr::processFromPID(int)+0x38>
c0013d62:	66 90                	xchg   ax,ax
c0013d64:	83 ec 0c             	sub    esp,0xc
c0013d67:	68 24 40 02 c0       	push   0xc0024024
c0013d6c:	e8 9b 8a 00 00       	call   c001c80c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013d71:	83 c4 10             	add    esp,0x10
c0013d74:	39 f8                	cmp    eax,edi
c0013d76:	74 4c                	je     c0013dc4 <Thr::processFromPID(int)+0x84>
c0013d78:	83 ec 0c             	sub    esp,0xc
c0013d7b:	68 24 40 02 c0       	push   0xc0024024
c0013d80:	e8 87 8a 00 00       	call   c001c80c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013d85:	c7 04 24 24 40 02 c0 	mov    DWORD PTR [esp],0xc0024024
c0013d8c:	89 c3                	mov    ebx,eax
c0013d8e:	e8 81 8a 00 00       	call   c001c814 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013d93:	58                   	pop    eax
c0013d94:	5a                   	pop    edx
c0013d95:	53                   	push   ebx
c0013d96:	68 24 40 02 c0       	push   0xc0024024
c0013d9b:	e8 2c 8b 00 00       	call   c001c8cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013da0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013da3:	83 c4 10             	add    esp,0x10
c0013da6:	39 30                	cmp    DWORD PTR [eax],esi
c0013da8:	75 ba                	jne    c0013d64 <Thr::processFromPID(int)+0x24>
c0013daa:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0013daf:	48                   	dec    eax
c0013db0:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0013db5:	74 09                	je     c0013dc0 <Thr::processFromPID(int)+0x80>
c0013db7:	90                   	nop
c0013db8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013dbb:	5b                   	pop    ebx
c0013dbc:	5e                   	pop    esi
c0013dbd:	5f                   	pop    edi
c0013dbe:	c3                   	ret    
c0013dbf:	90                   	nop
c0013dc0:	fb                   	sti    
c0013dc1:	eb f5                	jmp    c0013db8 <Thr::processFromPID(int)+0x78>
c0013dc3:	90                   	nop
c0013dc4:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0013dc9:	48                   	dec    eax
c0013dca:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0013dcf:	75 07                	jne    c0013dd8 <Thr::processFromPID(int)+0x98>
c0013dd1:	fb                   	sti    
c0013dd2:	5b                   	pop    ebx
c0013dd3:	5e                   	pop    esi
c0013dd4:	5f                   	pop    edi
c0013dd5:	c3                   	ret    
c0013dd6:	66 90                	xchg   ax,ax
c0013dd8:	5b                   	pop    ebx
c0013dd9:	31 c0                	xor    eax,eax
c0013ddb:	5e                   	pop    esi
c0013ddc:	5f                   	pop    edi
c0013ddd:	c3                   	ret    
c0013dde:	66 90                	xchg   ax,ax

c0013de0 <unblockTask(ThreadControlBlock*)>:
c0013de0:	53                   	push   ebx
c0013de1:	83 ec 08             	sub    esp,0x8
c0013de4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013de8:	fa                   	cli    
c0013de9:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c0013def:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013df2:	85 c0                	test   eax,eax
c0013df4:	74 66                	je     c0013e5c <unblockTask(ThreadControlBlock*)+0x7c>
c0013df6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013df9:	48                   	dec    eax
c0013dfa:	74 38                	je     c0013e34 <unblockTask(ThreadControlBlock*)+0x54>
c0013dfc:	83 ec 0c             	sub    esp,0xc
c0013dff:	68 24 40 02 c0       	push   0xc0024024
c0013e04:	e8 03 8a 00 00       	call   c001c80c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013e09:	83 c4 10             	add    esp,0x10
c0013e0c:	85 c0                	test   eax,eax
c0013e0e:	75 1c                	jne    c0013e2c <unblockTask(ThreadControlBlock*)+0x4c>
c0013e10:	eb 5e                	jmp    c0013e70 <unblockTask(ThreadControlBlock*)+0x90>
c0013e12:	66 90                	xchg   ax,ax
c0013e14:	83 ec 08             	sub    esp,0x8
c0013e17:	50                   	push   eax
c0013e18:	68 24 40 02 c0       	push   0xc0024024
c0013e1d:	e8 9a 8d 00 00       	call   c001cbbc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013e22:	83 c4 10             	add    esp,0x10
c0013e25:	85 c0                	test   eax,eax
c0013e27:	74 47                	je     c0013e70 <unblockTask(ThreadControlBlock*)+0x90>
c0013e29:	8d 76 00             	lea    esi,[esi+0x0]
c0013e2c:	39 c3                	cmp    ebx,eax
c0013e2e:	75 e4                	jne    c0013e14 <unblockTask(ThreadControlBlock*)+0x34>
c0013e30:	eb 12                	jmp    c0013e44 <unblockTask(ThreadControlBlock*)+0x64>
c0013e32:	66 90                	xchg   ax,ax
c0013e34:	83 ec 0c             	sub    esp,0xc
c0013e37:	68 ca ed 01 c0       	push   0xc001edca
c0013e3c:	e8 b7 66 ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c0013e41:	83 c4 10             	add    esp,0x10
c0013e44:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0013e49:	48                   	dec    eax
c0013e4a:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0013e4f:	75 03                	jne    c0013e54 <unblockTask(ThreadControlBlock*)+0x74>
c0013e51:	fb                   	sti    
c0013e52:	66 90                	xchg   ax,ax
c0013e54:	83 c4 08             	add    esp,0x8
c0013e57:	5b                   	pop    ebx
c0013e58:	c3                   	ret    
c0013e59:	8d 76 00             	lea    esi,[esi+0x0]
c0013e5c:	83 ec 0c             	sub    esp,0xc
c0013e5f:	68 b3 ed 01 c0       	push   0xc001edb3
c0013e64:	e8 8f 66 ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c0013e69:	83 c4 10             	add    esp,0x10
c0013e6c:	eb d6                	jmp    c0013e44 <unblockTask(ThreadControlBlock*)+0x64>
c0013e6e:	66 90                	xchg   ax,ax
c0013e70:	83 ec 08             	sub    esp,0x8
c0013e73:	53                   	push   ebx
c0013e74:	68 24 40 02 c0       	push   0xc0024024
c0013e79:	e8 4e 8a 00 00       	call   c001c8cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013e7e:	83 c4 10             	add    esp,0x10
c0013e81:	eb c1                	jmp    c0013e44 <unblockTask(ThreadControlBlock*)+0x64>
c0013e83:	90                   	nop

c0013e84 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0013e84:	55                   	push   ebp
c0013e85:	57                   	push   edi
c0013e86:	56                   	push   esi
c0013e87:	53                   	push   ebx
c0013e88:	83 ec 1c             	sub    esp,0x1c
c0013e8b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0013e8f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013e92:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0013e98:	85 ed                	test   ebp,ebp
c0013e9a:	7e 24                	jle    c0013ec0 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0013e9c:	31 f6                	xor    esi,esi
c0013e9e:	66 90                	xchg   ax,ax
c0013ea0:	83 ec 0c             	sub    esp,0xc
c0013ea3:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0013eaa:	46                   	inc    esi
c0013eab:	57                   	push   edi
c0013eac:	e8 38 39 ff ff       	call   c00077e9 <free>
c0013eb1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013eb4:	83 c4 10             	add    esp,0x10
c0013eb7:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0013ebd:	7f e1                	jg     c0013ea0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0013ebf:	90                   	nop
c0013ec0:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013eca:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013ecf:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0013ed2:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0013ed5:	d3 c0                	rol    eax,cl
c0013ed7:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0013ede:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013ee1:	89 f7                	mov    edi,esi
c0013ee3:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0013eeb:	0f 85 77 01 00 00    	jne    c0014068 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013ef1:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0013ef7:	85 ed                	test   ebp,ebp
c0013ef9:	74 1d                	je     c0013f18 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0013efb:	83 ec 0c             	sub    esp,0xc
c0013efe:	55                   	push   ebp
c0013eff:	e8 70 bf ff ff       	call   c000fe74 <EnvVarContainer::~EnvVarContainer()>
c0013f04:	59                   	pop    ecx
c0013f05:	5e                   	pop    esi
c0013f06:	6a 0c                	push   0xc
c0013f08:	55                   	push   ebp
c0013f09:	e8 f4 64 ff ff       	call   c000a402 <operator delete(void*, unsigned long)>
c0013f0e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013f11:	83 c4 10             	add    esp,0x10
c0013f14:	89 f7                	mov    edi,esi
c0013f16:	66 90                	xchg   ax,ax
c0013f18:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013f1e:	85 c0                	test   eax,eax
c0013f20:	0f 84 b6 00 00 00    	je     c0013fdc <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013f26:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0013f29:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013f2d:	31 c9                	xor    ecx,ecx
c0013f2f:	eb 17                	jmp    c0013f48 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0013f31:	8d 76 00             	lea    esi,[esi+0x0]
c0013f34:	41                   	inc    ecx
c0013f35:	83 f9 10             	cmp    ecx,0x10
c0013f38:	0f 84 9e 00 00 00    	je     c0013fdc <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013f3e:	66 90                	xchg   ax,ax
c0013f40:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013f46:	66 90                	xchg   ax,ax
c0013f48:	31 d2                	xor    edx,edx
c0013f4a:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c0013f51:	d3 fa                	sar    edx,cl
c0013f53:	83 e2 01             	and    edx,0x1
c0013f56:	74 dc                	je     c0013f34 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013f58:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0013f5b:	01 d2                	add    edx,edx
c0013f5d:	01 ca                	add    edx,ecx
c0013f5f:	8d 14 92             	lea    edx,[edx+edx*4]
c0013f62:	01 d0                	add    eax,edx
c0013f64:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0013f6a:	83 fd 07             	cmp    ebp,0x7
c0013f6d:	75 c5                	jne    c0013f34 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013f6f:	05 40 02 00 00       	add    eax,0x240
c0013f74:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0013f77:	83 fd ff             	cmp    ebp,0xffffffff
c0013f7a:	0f 8c f0 00 00 00    	jl     c0014070 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0013f80:	0f 84 ae 01 00 00    	je     c0014134 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c0013f86:	85 ed                	test   ebp,ebp
c0013f88:	0f 84 92 01 00 00    	je     c0014120 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c0013f8e:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0013f90:	75 a2                	jne    c0013f34 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013f92:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013f98:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013f9c:	01 d0                	add    eax,edx
c0013f9e:	66 90                	xchg   ax,ax
c0013fa0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0013fa4:	83 ec 0c             	sub    esp,0xc
c0013fa7:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0013fad:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013fb0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013fb6:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0013fbd:	50                   	push   eax
c0013fbe:	e8 1d fe ff ff       	call   c0013de0 <unblockTask(ThreadControlBlock*)>
c0013fc3:	83 c4 10             	add    esp,0x10
c0013fc6:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013fc9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013fcd:	89 f7                	mov    edi,esi
c0013fcf:	41                   	inc    ecx
c0013fd0:	83 f9 10             	cmp    ecx,0x10
c0013fd3:	0f 85 67 ff ff ff    	jne    c0013f40 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0013fd9:	8d 76 00             	lea    esi,[esi+0x0]
c0013fdc:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0013fe2:	85 c0                	test   eax,eax
c0013fe4:	74 62                	je     c0014048 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013fe6:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0013fec:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0013ff2:	74 54                	je     c0014048 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013ff4:	83 ec 0c             	sub    esp,0xc
c0013ff7:	68 24 40 02 c0       	push   0xc0024024
c0013ffc:	e8 0b 88 00 00       	call   c001c80c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014001:	c7 04 24 24 40 02 c0 	mov    DWORD PTR [esp],0xc0024024
c0014008:	89 c7                	mov    edi,eax
c001400a:	e8 e1 87 00 00       	call   c001c7f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001400f:	83 c4 10             	add    esp,0x10
c0014012:	84 c0                	test   al,al
c0014014:	0f 84 ce 00 00 00    	je     c00140e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c001401a:	66 90                	xchg   ax,ax
c001401c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001401f:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014025:	85 d2                	test   edx,edx
c0014027:	74 0f                	je     c0014038 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0014029:	83 ec 0c             	sub    esp,0xc
c001402c:	8b 02                	mov    eax,DWORD PTR [edx]
c001402e:	52                   	push   edx
c001402f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014032:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014035:	83 c4 10             	add    esp,0x10
c0014038:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0014042:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0014045:	8d 76 00             	lea    esi,[esi+0x0]
c0014048:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c001404e:	85 db                	test   ebx,ebx
c0014050:	74 16                	je     c0014068 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0014052:	83 ec 0c             	sub    esp,0xc
c0014055:	53                   	push   ebx
c0014056:	e8 7b 57 ff ff       	call   c00097d6 <VAS::~VAS()>
c001405b:	58                   	pop    eax
c001405c:	5a                   	pop    edx
c001405d:	6a 14                	push   0x14
c001405f:	53                   	push   ebx
c0014060:	e8 9d 63 ff ff       	call   c000a402 <operator delete(void*, unsigned long)>
c0014065:	83 c4 10             	add    esp,0x10
c0014068:	83 c4 1c             	add    esp,0x1c
c001406b:	5b                   	pop    ebx
c001406c:	5e                   	pop    esi
c001406d:	5f                   	pop    edi
c001406e:	5d                   	pop    ebp
c001406f:	c3                   	ret    
c0014070:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014074:	83 ec 0c             	sub    esp,0xc
c0014077:	68 7c ee 01 c0       	push   0xc001ee7c
c001407c:	e8 e2 c0 ff ff       	call   c0010163 <KePanic(char const*)>
c0014081:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0014084:	83 c4 10             	add    esp,0x10
c0014087:	89 f7                	mov    edi,esi
c0014089:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001408d:	e9 a2 fe ff ff       	jmp    c0013f34 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0014092:	66 90                	xchg   ax,ax
c0014094:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001409a:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00140a0:	75 1e                	jne    c00140c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c00140a2:	83 ec 0c             	sub    esp,0xc
c00140a5:	68 e4 ee 01 c0       	push   0xc001eee4
c00140aa:	e8 49 64 ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c00140af:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00140b6:	e8 5d fa ff ff       	call   c0013b18 <blockTask(TaskState)>
c00140bb:	83 c4 10             	add    esp,0x10
c00140be:	66 90                	xchg   ax,ax
c00140c0:	83 ec 08             	sub    esp,0x8
c00140c3:	56                   	push   esi
c00140c4:	68 24 40 02 c0       	push   0xc0024024
c00140c9:	e8 fe 87 00 00       	call   c001c8cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00140ce:	c7 04 24 24 40 02 c0 	mov    DWORD PTR [esp],0xc0024024
c00140d5:	e8 32 87 00 00       	call   c001c80c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00140da:	83 c4 10             	add    esp,0x10
c00140dd:	39 f8                	cmp    eax,edi
c00140df:	0f 84 37 ff ff ff    	je     c001401c <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c00140e5:	8d 76 00             	lea    esi,[esi+0x0]
c00140e8:	83 ec 0c             	sub    esp,0xc
c00140eb:	68 24 40 02 c0       	push   0xc0024024
c00140f0:	e8 17 87 00 00       	call   c001c80c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00140f5:	c7 04 24 24 40 02 c0 	mov    DWORD PTR [esp],0xc0024024
c00140fc:	89 c6                	mov    esi,eax
c00140fe:	e8 11 87 00 00       	call   c001c814 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014103:	83 c4 10             	add    esp,0x10
c0014106:	39 f3                	cmp    ebx,esi
c0014108:	74 b6                	je     c00140c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c001410a:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c001410d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014110:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0014116:	75 a8                	jne    c00140c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0014118:	e9 77 ff ff ff       	jmp    c0014094 <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c001411d:	8d 76 00             	lea    esi,[esi+0x0]
c0014120:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014124:	83 ec 0c             	sub    esp,0xc
c0014127:	68 b0 ee 01 c0       	push   0xc001eeb0
c001412c:	e9 4b ff ff ff       	jmp    c001407c <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0014131:	8d 76 00             	lea    esi,[esi+0x0]
c0014134:	8b 36                	mov    esi,DWORD PTR [esi]
c0014136:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001413a:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c001413d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014140:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0014146:	01 d7                	add    edi,edx
c0014148:	89 f8                	mov    eax,edi
c001414a:	e9 51 fe ff ff       	jmp    c0013fa0 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c001414f:	90                   	nop

c0014150 <cleanerTaskFunction(void*)>:
c0014150:	53                   	push   ebx
c0014151:	83 ec 08             	sub    esp,0x8
c0014154:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0014159:	48                   	dec    eax
c001415a:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c001415f:	75 03                	jne    c0014164 <cleanerTaskFunction(void*)+0x14>
c0014161:	fb                   	sti    
c0014162:	66 90                	xchg   ax,ax
c0014164:	fa                   	cli    
c0014165:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c001416a:	80 3d ec 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023fec,0x0
c0014171:	8d 50 01             	lea    edx,[eax+0x1]
c0014174:	89 15 08 40 02 c0    	mov    DWORD PTR ds:0xc0024008,edx
c001417a:	0f 84 ac 00 00 00    	je     c001422c <cleanerTaskFunction(void*)+0xdc>
c0014180:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0014185:	85 c0                	test   eax,eax
c0014187:	75 03                	jne    c001418c <cleanerTaskFunction(void*)+0x3c>
c0014189:	fb                   	sti    
c001418a:	66 90                	xchg   ax,ax
c001418c:	c6 05 ec 3f 02 c0 00 	mov    BYTE PTR ds:0xc0023fec,0x0
c0014193:	fa                   	cli    
c0014194:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c001419a:	ff 05 04 40 02 c0    	inc    DWORD PTR ds:0xc0024004
c00141a0:	fa                   	cli    
c00141a1:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c00141a7:	eb 2b                	jmp    c00141d4 <cleanerTaskFunction(void*)+0x84>
c00141a9:	8d 76 00             	lea    esi,[esi+0x0]
c00141ac:	83 ec 0c             	sub    esp,0xc
c00141af:	68 0c 40 02 c0       	push   0xc002400c
c00141b4:	e8 53 86 00 00       	call   c001c80c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00141b9:	c7 04 24 0c 40 02 c0 	mov    DWORD PTR [esp],0xc002400c
c00141c0:	89 c3                	mov    ebx,eax
c00141c2:	e8 4d 86 00 00       	call   c001c814 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00141c7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00141ca:	e8 b5 fc ff ff       	call   c0013e84 <cleanupTerminatedTask(ThreadControlBlock*)>
c00141cf:	83 c4 10             	add    esp,0x10
c00141d2:	66 90                	xchg   ax,ax
c00141d4:	83 ec 0c             	sub    esp,0xc
c00141d7:	68 0c 40 02 c0       	push   0xc002400c
c00141dc:	e8 0f 86 00 00       	call   c001c7f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00141e1:	83 c4 10             	add    esp,0x10
c00141e4:	84 c0                	test   al,al
c00141e6:	74 c4                	je     c00141ac <cleanerTaskFunction(void*)+0x5c>
c00141e8:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c00141ed:	48                   	dec    eax
c00141ee:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c00141f3:	75 03                	jne    c00141f8 <cleanerTaskFunction(void*)+0xa8>
c00141f5:	fb                   	sti    
c00141f6:	66 90                	xchg   ax,ax
c00141f8:	a1 04 40 02 c0       	mov    eax,ds:0xc0024004
c00141fd:	48                   	dec    eax
c00141fe:	a3 04 40 02 c0       	mov    ds:0xc0024004,eax
c0014203:	0f 85 4b ff ff ff    	jne    c0014154 <cleanerTaskFunction(void*)+0x4>
c0014209:	a1 00 40 02 c0       	mov    eax,ds:0xc0024000
c001420e:	85 c0                	test   eax,eax
c0014210:	0f 84 3e ff ff ff    	je     c0014154 <cleanerTaskFunction(void*)+0x4>
c0014216:	c7 05 00 40 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024000,0x0
c0014220:	e8 f7 f6 ff ff       	call   c001391c <schedule()>
c0014225:	e9 2a ff ff ff       	jmp    c0014154 <cleanerTaskFunction(void*)+0x4>
c001422a:	66 90                	xchg   ax,ax
c001422c:	83 ec 0c             	sub    esp,0xc
c001422f:	6a 02                	push   0x2
c0014231:	e8 ba f8 ff ff       	call   c0013af0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0014236:	83 c4 10             	add    esp,0x10
c0014239:	e9 4e ff ff ff       	jmp    c001418c <cleanerTaskFunction(void*)+0x3c>
c001423e:	66 90                	xchg   ax,ax

c0014240 <terminateTask(int)>:
c0014240:	83 ec 14             	sub    esp,0x14
c0014243:	fa                   	cli    
c0014244:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c001424a:	ff 05 04 40 02 c0    	inc    DWORD PTR ds:0xc0024004
c0014250:	fa                   	cli    
c0014251:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c0014257:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001425b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014260:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0014263:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014268:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001426b:	50                   	push   eax
c001426c:	68 0c 40 02 c0       	push   0xc002400c
c0014271:	e8 56 86 00 00       	call   c001c8cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014276:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001427b:	83 c4 10             	add    esp,0x10
c001427e:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0014285:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c001428a:	85 c0                	test   eax,eax
c001428c:	74 5e                	je     c00142ec <terminateTask(int)+0xac>
c001428e:	83 ec 0c             	sub    esp,0xc
c0014291:	c6 05 ec 3f 02 c0 01 	mov    BYTE PTR ds:0xc0023fec,0x1
c0014298:	50                   	push   eax
c0014299:	e8 42 fb ff ff       	call   c0013de0 <unblockTask(ThreadControlBlock*)>
c001429e:	83 c4 10             	add    esp,0x10
c00142a1:	8d 76 00             	lea    esi,[esi+0x0]
c00142a4:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c00142a9:	48                   	dec    eax
c00142aa:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c00142af:	75 03                	jne    c00142b4 <terminateTask(int)+0x74>
c00142b1:	fb                   	sti    
c00142b2:	66 90                	xchg   ax,ax
c00142b4:	a1 04 40 02 c0       	mov    eax,ds:0xc0024004
c00142b9:	48                   	dec    eax
c00142ba:	a3 04 40 02 c0       	mov    ds:0xc0024004,eax
c00142bf:	75 0b                	jne    c00142cc <terminateTask(int)+0x8c>
c00142c1:	83 3d 00 40 02 c0 00 	cmp    DWORD PTR ds:0xc0024000,0x0
c00142c8:	75 36                	jne    c0014300 <terminateTask(int)+0xc0>
c00142ca:	66 90                	xchg   ax,ax
c00142cc:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c00142d1:	48                   	dec    eax
c00142d2:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c00142d7:	75 03                	jne    c00142dc <terminateTask(int)+0x9c>
c00142d9:	fb                   	sti    
c00142da:	66 90                	xchg   ax,ax
c00142dc:	fa                   	cli    
c00142dd:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c00142e3:	90                   	nop
c00142e4:	e8 33 f6 ff ff       	call   c001391c <schedule()>
c00142e9:	eb e1                	jmp    c00142cc <terminateTask(int)+0x8c>
c00142eb:	90                   	nop
c00142ec:	83 ec 0c             	sub    esp,0xc
c00142ef:	68 e1 ed 01 c0       	push   0xc001ede1
c00142f4:	e8 ff 61 ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c00142f9:	83 c4 10             	add    esp,0x10
c00142fc:	eb a6                	jmp    c00142a4 <terminateTask(int)+0x64>
c00142fe:	66 90                	xchg   ax,ax
c0014300:	c7 05 00 40 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024000,0x0
c001430a:	eb d8                	jmp    c00142e4 <terminateTask(int)+0xa4>

c001430c <Thr::terminateFromIRQ(int)>:
c001430c:	83 ec 18             	sub    esp,0x18
c001430f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014313:	50                   	push   eax
c0014314:	e8 27 ff ff ff       	call   c0014240 <terminateTask(int)>
c0014319:	90                   	nop
c001431a:	66 90                	xchg   ax,ax

c001431c <Semaphore::release()>:
c001431c:	83 ec 0c             	sub    esp,0xc
c001431f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014323:	fa                   	cli    
c0014324:	a1 04 40 02 c0       	mov    eax,ds:0xc0024004
c0014329:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c001432f:	8d 48 01             	lea    ecx,[eax+0x1]
c0014332:	89 0d 04 40 02 c0    	mov    DWORD PTR ds:0xc0024004,ecx
c0014338:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001433b:	85 c9                	test   ecx,ecx
c001433d:	74 41                	je     c0014380 <Semaphore::release()+0x64>
c001433f:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0014342:	83 ec 0c             	sub    esp,0xc
c0014345:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014348:	51                   	push   ecx
c0014349:	e8 92 fa ff ff       	call   c0013de0 <unblockTask(ThreadControlBlock*)>
c001434e:	a1 04 40 02 c0       	mov    eax,ds:0xc0024004
c0014353:	83 c4 10             	add    esp,0x10
c0014356:	48                   	dec    eax
c0014357:	90                   	nop
c0014358:	a3 04 40 02 c0       	mov    ds:0xc0024004,eax
c001435d:	85 c0                	test   eax,eax
c001435f:	75 0b                	jne    c001436c <Semaphore::release()+0x50>
c0014361:	a1 00 40 02 c0       	mov    eax,ds:0xc0024000
c0014366:	85 c0                	test   eax,eax
c0014368:	75 1e                	jne    c0014388 <Semaphore::release()+0x6c>
c001436a:	66 90                	xchg   ax,ax
c001436c:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0014371:	48                   	dec    eax
c0014372:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0014377:	75 03                	jne    c001437c <Semaphore::release()+0x60>
c0014379:	fb                   	sti    
c001437a:	66 90                	xchg   ax,ax
c001437c:	83 c4 0c             	add    esp,0xc
c001437f:	c3                   	ret    
c0014380:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0014383:	eb d3                	jmp    c0014358 <Semaphore::release()+0x3c>
c0014385:	8d 76 00             	lea    esi,[esi+0x0]
c0014388:	c7 05 00 40 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024000,0x0
c0014392:	e8 85 f5 ff ff       	call   c001391c <schedule()>
c0014397:	eb d3                	jmp    c001436c <Semaphore::release()+0x50>
c0014399:	8d 76 00             	lea    esi,[esi+0x0]

c001439c <__static_initialization_and_destruction_0(int, int)>:
c001439c:	83 ec 0c             	sub    esp,0xc
c001439f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00143a4:	0f 85 8e 00 00 00    	jne    c0014438 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00143aa:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00143b2:	0f 85 80 00 00 00    	jne    c0014438 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00143b8:	83 ec 0c             	sub    esp,0xc
c00143bb:	68 24 40 02 c0       	push   0xc0024024
c00143c0:	e8 b3 87 00 00       	call   c001cb78 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00143c5:	83 c4 10             	add    esp,0x10
c00143c8:	83 ec 04             	sub    esp,0x4
c00143cb:	68 94 f9 01 c0       	push   0xc001f994
c00143d0:	68 24 40 02 c0       	push   0xc0024024
c00143d5:	68 28 cb 01 c0       	push   0xc001cb28
c00143da:	e8 d3 5f ff ff       	call   c000a3b2 <__cxa_atexit>
c00143df:	83 c4 10             	add    esp,0x10
c00143e2:	83 ec 0c             	sub    esp,0xc
c00143e5:	68 18 40 02 c0       	push   0xc0024018
c00143ea:	e8 89 87 00 00       	call   c001cb78 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00143ef:	83 c4 10             	add    esp,0x10
c00143f2:	83 ec 04             	sub    esp,0x4
c00143f5:	68 94 f9 01 c0       	push   0xc001f994
c00143fa:	68 18 40 02 c0       	push   0xc0024018
c00143ff:	68 28 cb 01 c0       	push   0xc001cb28
c0014404:	e8 a9 5f ff ff       	call   c000a3b2 <__cxa_atexit>
c0014409:	83 c4 10             	add    esp,0x10
c001440c:	83 ec 0c             	sub    esp,0xc
c001440f:	68 0c 40 02 c0       	push   0xc002400c
c0014414:	e8 5f 87 00 00       	call   c001cb78 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0014419:	83 c4 10             	add    esp,0x10
c001441c:	83 ec 04             	sub    esp,0x4
c001441f:	68 94 f9 01 c0       	push   0xc001f994
c0014424:	68 0c 40 02 c0       	push   0xc002400c
c0014429:	68 28 cb 01 c0       	push   0xc001cb28
c001442e:	e8 7f 5f ff ff       	call   c000a3b2 <__cxa_atexit>
c0014433:	83 c4 10             	add    esp,0x10
c0014436:	66 90                	xchg   ax,ax
c0014438:	90                   	nop
c0014439:	83 c4 0c             	add    esp,0xc
c001443c:	c3                   	ret    
c001443d:	8d 76 00             	lea    esi,[esi+0x0]

c0014440 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0014440:	83 ec 0c             	sub    esp,0xc
c0014443:	83 ec 08             	sub    esp,0x8
c0014446:	68 ff ff 00 00       	push   0xffff
c001444b:	6a 01                	push   0x1
c001444d:	e8 4a ff ff ff       	call   c001439c <__static_initialization_and_destruction_0(int, int)>
c0014452:	83 c4 10             	add    esp,0x10
c0014455:	83 c4 0c             	add    esp,0xc
c0014458:	c3                   	ret    

c0014459 <Vm::inbv(unsigned short)>:
c0014459:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001445d:	66 81 fa fe fe       	cmp    dx,0xfefe
c0014462:	75 06                	jne    c001446a <Vm::inbv(unsigned short)+0x11>
c0014464:	a0 6c 40 02 c0       	mov    al,ds:0xc002406c
c0014469:	c3                   	ret    
c001446a:	ec                   	in     al,dx
c001446b:	c3                   	ret    

c001446c <Vm::outbv(unsigned short, unsigned char)>:
c001446c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014470:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014474:	66 81 fa fe fe       	cmp    dx,0xfefe
c0014479:	75 25                	jne    c00144a0 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001447b:	8b 0d 6c 40 02 c0    	mov    ecx,DWORD PTR ds:0xc002406c
c0014481:	8d 51 01             	lea    edx,[ecx+0x1]
c0014484:	88 81 80 40 02 c0    	mov    BYTE PTR [ecx-0x3ffdbf80],al
c001448a:	89 15 6c 40 02 c0    	mov    DWORD PTR ds:0xc002406c,edx
c0014490:	83 fa 20             	cmp    edx,0x20
c0014493:	75 0c                	jne    c00144a1 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0014495:	c7 05 6c 40 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002406c,0x1f
c001449f:	c3                   	ret    
c00144a0:	ee                   	out    dx,al
c00144a1:	c3                   	ret    

c00144a2 <Vm::realToLinear(unsigned short, unsigned short)>:
c00144a2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00144a7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00144ac:	c1 e0 04             	shl    eax,0x4
c00144af:	01 d0                	add    eax,edx
c00144b1:	c3                   	ret    

c00144b2 <Vm::getSegment(unsigned int)>:
c00144b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00144b6:	c1 e8 10             	shr    eax,0x10
c00144b9:	c3                   	ret    

c00144ba <Vm::getOffset(unsigned int)>:
c00144ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00144be:	c3                   	ret    

c00144bf <Vm::mainloop2()>:
c00144bf:	83 ec 18             	sub    esp,0x18
c00144c2:	fa                   	cli    
c00144c3:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c00144c9:	6a 02                	push   0x2
c00144cb:	c6 05 65 40 02 c0 01 	mov    BYTE PTR ds:0xc0024065,0x1
c00144d2:	e8 19 f6 ff ff       	call   c0013af0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00144d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00144dc:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00144e0:	52                   	push   edx
c00144e1:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c00144e5:	52                   	push   edx
c00144e6:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c00144ea:	52                   	push   edx
c00144eb:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c00144ef:	50                   	push   eax
c00144f0:	e8 1a bd fe ff       	call   c000020f <goToVM86>
c00144f5:	83 c4 2c             	add    esp,0x2c
c00144f8:	c3                   	ret    

c00144f9 <Vm::mainVm8086Loop(void*)>:
c00144f9:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c00144fe:	48                   	dec    eax
c00144ff:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0014504:	75 01                	jne    c0014507 <Vm::mainVm8086Loop(void*)+0xe>
c0014506:	fb                   	sti    
c0014507:	eb b6                	jmp    c00144bf <Vm::mainloop2()>

c0014509 <Vm::mainloop3(unsigned long)>:
c0014509:	83 ec 18             	sub    esp,0x18
c001450c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014510:	fa                   	cli    
c0014511:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c0014517:	6a 02                	push   0x2
c0014519:	c6 05 64 40 02 c0 01 	mov    BYTE PTR ds:0xc0024064,0x1
c0014520:	a3 60 40 02 c0       	mov    ds:0xc0024060,eax
c0014525:	e8 c6 f5 ff ff       	call   c0013af0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001452a:	83 c4 1c             	add    esp,0x1c
c001452d:	eb 90                	jmp    c00144bf <Vm::mainloop2()>

c001452f <Vm::initialise8086()>:
c001452f:	83 ec 0c             	sub    esp,0xc
c0014532:	68 80 00 00 00       	push   0x80
c0014537:	6a 00                	push   0x0
c0014539:	68 f9 44 01 c0       	push   0xc00144f9
c001453e:	ff 35 30 40 02 c0    	push   DWORD PTR ds:0xc0024030
c0014544:	e8 b3 f1 ff ff       	call   c00136fc <Process::createThread(void (*)(void*), void*, int)>
c0014549:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0014550:	a3 68 40 02 c0       	mov    ds:0xc0024068,eax
c0014555:	68 00 01 00 00       	push   0x100
c001455a:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c001455f:	6a 00                	push   0x0
c0014561:	6a 00                	push   0x0
c0014563:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014569:	e8 c6 56 ff ff       	call   c0009c34 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001456e:	83 c4 2c             	add    esp,0x2c
c0014571:	c3                   	ret    

c0014572 <Vm::finish8086()>:
c0014572:	53                   	push   ebx
c0014573:	83 ec 08             	sub    esp,0x8
c0014576:	fa                   	cli    
c0014577:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c001457d:	80 3d 64 40 02 c0 00 	cmp    BYTE PTR ds:0xc0024064,0x0
c0014584:	75 15                	jne    c001459b <Vm::finish8086()+0x29>
c0014586:	e8 91 f3 ff ff       	call   c001391c <schedule()>
c001458b:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0014590:	48                   	dec    eax
c0014591:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0014596:	75 de                	jne    c0014576 <Vm::finish8086()+0x4>
c0014598:	fb                   	sti    
c0014599:	eb db                	jmp    c0014576 <Vm::finish8086()+0x4>
c001459b:	83 ec 0c             	sub    esp,0xc
c001459e:	8b 1d 60 40 02 c0    	mov    ebx,DWORD PTR ds:0xc0024060
c00145a4:	ff 35 68 40 02 c0    	push   DWORD PTR ds:0xc0024068
c00145aa:	c6 05 64 40 02 c0 00 	mov    BYTE PTR ds:0xc0024064,0x0
c00145b1:	e8 2a f8 ff ff       	call   c0013de0 <unblockTask(ThreadControlBlock*)>
c00145b6:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c00145bb:	83 c4 10             	add    esp,0x10
c00145be:	8d 50 ff             	lea    edx,[eax-0x1]
c00145c1:	89 15 08 40 02 c0    	mov    DWORD PTR ds:0xc0024008,edx
c00145c7:	85 d2                	test   edx,edx
c00145c9:	75 01                	jne    c00145cc <Vm::finish8086()+0x5a>
c00145cb:	fb                   	sti    
c00145cc:	89 d8                	mov    eax,ebx
c00145ce:	83 c4 08             	add    esp,0x8
c00145d1:	5b                   	pop    ebx
c00145d2:	c3                   	ret    

c00145d3 <Vm::getOutput8086(unsigned char*)>:
c00145d3:	57                   	push   edi
c00145d4:	8b 0d 6c 40 02 c0    	mov    ecx,DWORD PTR ds:0xc002406c
c00145da:	56                   	push   esi
c00145db:	be 80 40 02 c0       	mov    esi,0xc0024080
c00145e0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00145e4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00145e6:	a1 6c 40 02 c0       	mov    eax,ds:0xc002406c
c00145eb:	5e                   	pop    esi
c00145ec:	c7 05 6c 40 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002406c,0x0
c00145f6:	5f                   	pop    edi
c00145f7:	c3                   	ret    

c00145f8 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00145f8:	55                   	push   ebp
c00145f9:	57                   	push   edi
c00145fa:	56                   	push   esi
c00145fb:	53                   	push   ebx
c00145fc:	83 ec 0c             	sub    esp,0xc
c00145ff:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014603:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0014607:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001460b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001460f:	fa                   	cli    
c0014610:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c0014616:	80 3d 65 40 02 c0 00 	cmp    BYTE PTR ds:0xc0024065,0x0
c001461d:	75 15                	jne    c0014634 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c001461f:	e8 f8 f2 ff ff       	call   c001391c <schedule()>
c0014624:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0014629:	48                   	dec    eax
c001462a:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c001462f:	75 de                	jne    c001460f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014631:	fb                   	sti    
c0014632:	eb db                	jmp    c001460f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014634:	a1 68 40 02 c0       	mov    eax,ds:0xc0024068
c0014639:	c7 05 6c 40 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002406c,0x0
c0014643:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0014647:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001464b:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001464f:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0014653:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0014657:	0f b7 ff             	movzx  edi,di
c001465a:	0f b7 f6             	movzx  esi,si
c001465d:	50                   	push   eax
c001465e:	6a 20                	push   0x20
c0014660:	6a 00                	push   0x0
c0014662:	68 80 40 02 c0       	push   0xc0024080
c0014667:	e8 64 be fe ff       	call   c00004d0 <memset>
c001466c:	5a                   	pop    edx
c001466d:	59                   	pop    ecx
c001466e:	57                   	push   edi
c001466f:	56                   	push   esi
c0014670:	e8 2d fe ff ff       	call   c00144a2 <Vm::realToLinear(unsigned short, unsigned short)>
c0014675:	83 c4 10             	add    esp,0x10
c0014678:	89 c7                	mov    edi,eax
c001467a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001467e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0014682:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014684:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0014689:	c6 05 65 40 02 c0 00 	mov    BYTE PTR ds:0xc0024065,0x0
c0014690:	48                   	dec    eax
c0014691:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0014696:	75 01                	jne    c0014699 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0014698:	fb                   	sti    
c0014699:	83 ec 0c             	sub    esp,0xc
c001469c:	ff 35 68 40 02 c0    	push   DWORD PTR ds:0xc0024068
c00146a2:	e8 39 f7 ff ff       	call   c0013de0 <unblockTask(ThreadControlBlock*)>
c00146a7:	83 c4 1c             	add    esp,0x1c
c00146aa:	b0 01                	mov    al,0x1
c00146ac:	5b                   	pop    ebx
c00146ad:	5e                   	pop    esi
c00146ae:	5f                   	pop    edi
c00146af:	5d                   	pop    ebp
c00146b0:	c3                   	ret    

c00146b1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00146b1:	55                   	push   ebp
c00146b2:	57                   	push   edi
c00146b3:	56                   	push   esi
c00146b4:	53                   	push   ebx
c00146b5:	83 ec 2c             	sub    esp,0x2c
c00146b8:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00146bc:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00146c0:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00146c4:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00146c8:	fa                   	cli    
c00146c9:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c00146cf:	0f b6 35 65 40 02 c0 	movzx  esi,BYTE PTR ds:0xc0024065
c00146d6:	89 f0                	mov    eax,esi
c00146d8:	84 c0                	test   al,al
c00146da:	75 1d                	jne    c00146f9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c00146dc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00146e0:	e8 37 f2 ff ff       	call   c001391c <schedule()>
c00146e5:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c00146ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00146ee:	48                   	dec    eax
c00146ef:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c00146f4:	75 d2                	jne    c00146c8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00146f6:	fb                   	sti    
c00146f7:	eb cf                	jmp    c00146c8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00146f9:	a1 68 40 02 c0       	mov    eax,ds:0xc0024068
c00146fe:	c7 05 6c 40 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002406c,0x0
c0014708:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c001470c:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0014710:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0014714:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0014718:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001471c:	50                   	push   eax
c001471d:	6a 20                	push   0x20
c001471f:	6a 00                	push   0x0
c0014721:	68 80 40 02 c0       	push   0xc0024080
c0014726:	e8 a5 bd fe ff       	call   c00004d0 <memset>
c001472b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014732:	e8 82 30 ff ff       	call   c00077b9 <malloc>
c0014737:	83 c4 0c             	add    esp,0xc
c001473a:	89 c3                	mov    ebx,eax
c001473c:	ff 35 30 40 02 c0    	push   DWORD PTR ds:0xc0024030
c0014742:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0014746:	50                   	push   eax
c0014747:	e8 22 63 ff ff       	call   c000aa6e <File::File(char const*, Process*)>
c001474c:	83 c4 10             	add    esp,0x10
c001474f:	85 db                	test   ebx,ebx
c0014751:	75 0a                	jne    c001475d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0014753:	83 ec 0c             	sub    esp,0xc
c0014756:	68 0c ef 01 c0       	push   0xc001ef0c
c001475b:	eb 3e                	jmp    c001479b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001475d:	50                   	push   eax
c001475e:	8d 44 24 17          	lea    eax,[esp+0x17]
c0014762:	50                   	push   eax
c0014763:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014767:	50                   	push   eax
c0014768:	53                   	push   ebx
c0014769:	e8 6c 66 ff ff       	call   c000adda <File::stat(unsigned long long*, bool*)>
c001476e:	83 c4 10             	add    esp,0x10
c0014771:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0014776:	74 0a                	je     c0014782 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0014778:	83 ec 0c             	sub    esp,0xc
c001477b:	68 20 ef 01 c0       	push   0xc001ef20
c0014780:	eb 19                	jmp    c001479b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0014782:	51                   	push   ecx
c0014783:	51                   	push   ecx
c0014784:	6a 01                	push   0x1
c0014786:	53                   	push   ebx
c0014787:	e8 a2 63 ff ff       	call   c000ab2e <File::open(FileOpenMode)>
c001478c:	83 c4 10             	add    esp,0x10
c001478f:	85 c0                	test   eax,eax
c0014791:	74 24                	je     c00147b7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0014793:	83 ec 0c             	sub    esp,0xc
c0014796:	68 39 ef 01 c0       	push   0xc001ef39
c001479b:	e8 c3 b9 ff ff       	call   c0010163 <KePanic(char const*)>
c00147a0:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c00147a5:	83 c4 10             	add    esp,0x10
c00147a8:	48                   	dec    eax
c00147a9:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c00147ae:	85 c0                	test   eax,eax
c00147b0:	75 01                	jne    c00147b3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c00147b2:	fb                   	sti    
c00147b3:	31 f6                	xor    esi,esi
c00147b5:	eb 58                	jmp    c001480f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c00147b7:	0f b7 ed             	movzx  ebp,bp
c00147ba:	50                   	push   eax
c00147bb:	0f b7 ff             	movzx  edi,di
c00147be:	50                   	push   eax
c00147bf:	55                   	push   ebp
c00147c0:	57                   	push   edi
c00147c1:	e8 dc fc ff ff       	call   c00144a2 <Vm::realToLinear(unsigned short, unsigned short)>
c00147c6:	5a                   	pop    edx
c00147c7:	8b 13                	mov    edx,DWORD PTR [ebx]
c00147c9:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00147cd:	51                   	push   ecx
c00147ce:	50                   	push   eax
c00147cf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00147d3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00147d7:	53                   	push   ebx
c00147d8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00147db:	83 c4 14             	add    esp,0x14
c00147de:	53                   	push   ebx
c00147df:	e8 a8 63 ff ff       	call   c000ab8c <File::close()>
c00147e4:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c00147e9:	83 c4 10             	add    esp,0x10
c00147ec:	48                   	dec    eax
c00147ed:	c6 05 65 40 02 c0 00 	mov    BYTE PTR ds:0xc0024065,0x0
c00147f4:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c00147f9:	85 c0                	test   eax,eax
c00147fb:	75 01                	jne    c00147fe <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c00147fd:	fb                   	sti    
c00147fe:	83 ec 0c             	sub    esp,0xc
c0014801:	ff 35 68 40 02 c0    	push   DWORD PTR ds:0xc0024068
c0014807:	e8 d4 f5 ff ff       	call   c0013de0 <unblockTask(ThreadControlBlock*)>
c001480c:	83 c4 10             	add    esp,0x10
c001480f:	83 c4 2c             	add    esp,0x2c
c0014812:	89 f0                	mov    eax,esi
c0014814:	5b                   	pop    ebx
c0014815:	5e                   	pop    esi
c0014816:	5f                   	pop    edi
c0014817:	5d                   	pop    ebp
c0014818:	c3                   	ret    

c0014819 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0014819:	57                   	push   edi
c001481a:	56                   	push   esi
c001481b:	53                   	push   ebx
c001481c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014820:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014824:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014828:	83 e8 06             	sub    eax,0x6
c001482b:	0f b7 c0             	movzx  eax,ax
c001482e:	50                   	push   eax
c001482f:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0014834:	50                   	push   eax
c0014835:	e8 68 fc ff ff       	call   c00144a2 <Vm::realToLinear(unsigned short, unsigned short)>
c001483a:	5a                   	pop    edx
c001483b:	5e                   	pop    esi
c001483c:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001483f:	8d 56 fa             	lea    edx,[esi-0x6]
c0014842:	81 e2 ff ff 00 00    	and    edx,0xffff
c0014848:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001484b:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001484e:	83 c2 02             	add    edx,0x2
c0014851:	66 89 10             	mov    WORD PTR [eax],dx
c0014854:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0014857:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001485b:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001485e:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0014862:	89 d6                	mov    esi,edx
c0014864:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001486a:	66 81 e6 ff fd       	and    si,0xfdff
c001486f:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0014873:	74 07                	je     c001487c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0014875:	89 d6                	mov    esi,edx
c0014877:	66 81 ce 00 02       	or     si,0x200
c001487c:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0014880:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014885:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014889:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0014891:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0014894:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001489c:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001489f:	5b                   	pop    ebx
c00148a0:	5e                   	pop    esi
c00148a1:	5f                   	pop    edi
c00148a2:	c3                   	ret    

c00148a3 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00148a3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00148a8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00148ad:	c1 e0 04             	shl    eax,0x4
c00148b0:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00148b3:	c3                   	ret    

c00148b4 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00148b4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00148b9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00148be:	c1 e0 04             	shl    eax,0x4
c00148c1:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00148c5:	c3                   	ret    

c00148c6 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00148c6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00148cb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00148d0:	c1 e0 04             	shl    eax,0x4
c00148d3:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00148d6:	c3                   	ret    

c00148d7 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00148d7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00148dc:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00148e1:	c1 e0 04             	shl    eax,0x4
c00148e4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00148e8:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00148eb:	c3                   	ret    

c00148ec <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00148ec:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00148f1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00148f6:	c1 e0 04             	shl    eax,0x4
c00148f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00148fd:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0014901:	c3                   	ret    

c0014902 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0014902:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014907:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001490c:	c1 e0 04             	shl    eax,0x4
c001490f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014913:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0014916:	c3                   	ret    

c0014917 <Vm::faultHandler(regs*)>:
c0014917:	55                   	push   ebp
c0014918:	57                   	push   edi
c0014919:	56                   	push   esi
c001491a:	53                   	push   ebx
c001491b:	83 ec 1c             	sub    esp,0x1c
c001491e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0014922:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014925:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0014929:	0f b7 f8             	movzx  edi,ax
c001492c:	52                   	push   edx
c001492d:	0f b7 c0             	movzx  eax,ax
c0014930:	50                   	push   eax
c0014931:	e8 6c fb ff ff       	call   c00144a2 <Vm::realToLinear(unsigned short, unsigned short)>
c0014936:	5a                   	pop    edx
c0014937:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001493a:	59                   	pop    ecx
c001493b:	89 c1                	mov    ecx,eax
c001493d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014940:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014944:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014949:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001494d:	0f b7 c5             	movzx  eax,bp
c0014950:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014954:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0014958:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001495c:	e8 41 fb ff ff       	call   c00144a2 <Vm::realToLinear(unsigned short, unsigned short)>
c0014961:	5e                   	pop    esi
c0014962:	be 06 00 00 00       	mov    esi,0x6
c0014967:	5a                   	pop    edx
c0014968:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001496d:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0014972:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0014975:	80 fa 9d             	cmp    dl,0x9d
c0014978:	0f 84 2c 02 00 00    	je     c0014baa <Vm::faultHandler(regs*)+0x293>
c001497e:	0f 87 91 00 00 00    	ja     c0014a15 <Vm::faultHandler(regs*)+0xfe>
c0014984:	80 fa 66             	cmp    dl,0x66
c0014987:	0f 84 98 01 00 00    	je     c0014b25 <Vm::faultHandler(regs*)+0x20e>
c001498d:	77 47                	ja     c00149d6 <Vm::faultHandler(regs*)+0xbf>
c001498f:	80 fa 36             	cmp    dl,0x36
c0014992:	0f 84 80 01 00 00    	je     c0014b18 <Vm::faultHandler(regs*)+0x201>
c0014998:	77 1a                	ja     c00149b4 <Vm::faultHandler(regs*)+0x9d>
c001499a:	80 fa 26             	cmp    dl,0x26
c001499d:	0f 84 4e 01 00 00    	je     c0014af1 <Vm::faultHandler(regs*)+0x1da>
c00149a3:	80 fa 2e             	cmp    dl,0x2e
c00149a6:	0f 85 e2 05 00 00    	jne    c0014f8e <Vm::faultHandler(regs*)+0x677>
c00149ac:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149af:	31 f6                	xor    esi,esi
c00149b1:	41                   	inc    ecx
c00149b2:	eb be                	jmp    c0014972 <Vm::faultHandler(regs*)+0x5b>
c00149b4:	80 fa 64             	cmp    dl,0x64
c00149b7:	0f 84 41 01 00 00    	je     c0014afe <Vm::faultHandler(regs*)+0x1e7>
c00149bd:	0f 87 48 01 00 00    	ja     c0014b0b <Vm::faultHandler(regs*)+0x1f4>
c00149c3:	80 fa 3e             	cmp    dl,0x3e
c00149c6:	0f 85 c2 05 00 00    	jne    c0014f8e <Vm::faultHandler(regs*)+0x677>
c00149cc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149cf:	be 01 00 00 00       	mov    esi,0x1
c00149d4:	eb db                	jmp    c00149b1 <Vm::faultHandler(regs*)+0x9a>
c00149d6:	80 fa 6d             	cmp    dl,0x6d
c00149d9:	0f 84 ec 02 00 00    	je     c0014ccb <Vm::faultHandler(regs*)+0x3b4>
c00149df:	77 17                	ja     c00149f8 <Vm::faultHandler(regs*)+0xe1>
c00149e1:	80 fa 67             	cmp    dl,0x67
c00149e4:	0f 84 48 01 00 00    	je     c0014b32 <Vm::faultHandler(regs*)+0x21b>
c00149ea:	80 fa 6c             	cmp    dl,0x6c
c00149ed:	0f 84 69 02 00 00    	je     c0014c5c <Vm::faultHandler(regs*)+0x345>
c00149f3:	e9 96 05 00 00       	jmp    c0014f8e <Vm::faultHandler(regs*)+0x677>
c00149f8:	80 fa 6f             	cmp    dl,0x6f
c00149fb:	0f 84 f4 03 00 00    	je     c0014df5 <Vm::faultHandler(regs*)+0x4de>
c0014a01:	0f 82 59 03 00 00    	jb     c0014d60 <Vm::faultHandler(regs*)+0x449>
c0014a07:	80 fa 9c             	cmp    dl,0x9c
c0014a0a:	0f 84 2f 01 00 00    	je     c0014b3f <Vm::faultHandler(regs*)+0x228>
c0014a10:	e9 79 05 00 00       	jmp    c0014f8e <Vm::faultHandler(regs*)+0x677>
c0014a15:	80 fa ec             	cmp    dl,0xec
c0014a18:	0f 84 14 05 00 00    	je     c0014f32 <Vm::faultHandler(regs*)+0x61b>
c0014a1e:	77 7b                	ja     c0014a9b <Vm::faultHandler(regs*)+0x184>
c0014a20:	80 fa e4             	cmp    dl,0xe4
c0014a23:	0f 84 93 04 00 00    	je     c0014ebc <Vm::faultHandler(regs*)+0x5a5>
c0014a29:	77 53                	ja     c0014a7e <Vm::faultHandler(regs*)+0x167>
c0014a2b:	80 fa cd             	cmp    dl,0xcd
c0014a2e:	0f 84 d9 01 00 00    	je     c0014c0d <Vm::faultHandler(regs*)+0x2f6>
c0014a34:	80 fa cf             	cmp    dl,0xcf
c0014a37:	0f 85 51 05 00 00    	jne    c0014f8e <Vm::faultHandler(regs*)+0x677>
c0014a3d:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014a40:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0014a43:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0014a47:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0014a4a:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0014a4e:	81 ca 00 02 02 00    	or     edx,0x20200
c0014a54:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014a57:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014a5b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014a61:	66 c1 e8 09          	shr    ax,0x9
c0014a65:	83 e0 01             	and    eax,0x1
c0014a68:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014a6b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014a6e:	83 c0 06             	add    eax,0x6
c0014a71:	25 ff ff 00 00       	and    eax,0xffff
c0014a76:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014a79:	e9 0c 05 00 00       	jmp    c0014f8a <Vm::faultHandler(regs*)+0x673>
c0014a7e:	80 fa e6             	cmp    dl,0xe6
c0014a81:	0f 84 7f 04 00 00    	je     c0014f06 <Vm::faultHandler(regs*)+0x5ef>
c0014a87:	0f 82 4b 04 00 00    	jb     c0014ed8 <Vm::faultHandler(regs*)+0x5c1>
c0014a8d:	80 fa e7             	cmp    dl,0xe7
c0014a90:	0f 84 87 04 00 00    	je     c0014f1d <Vm::faultHandler(regs*)+0x606>
c0014a96:	e9 f3 04 00 00       	jmp    c0014f8e <Vm::faultHandler(regs*)+0x677>
c0014a9b:	80 fa ef             	cmp    dl,0xef
c0014a9e:	0f 84 d1 04 00 00    	je     c0014f75 <Vm::faultHandler(regs*)+0x65e>
c0014aa4:	77 28                	ja     c0014ace <Vm::faultHandler(regs*)+0x1b7>
c0014aa6:	80 fa ed             	cmp    dl,0xed
c0014aa9:	0f 84 9f 04 00 00    	je     c0014f4e <Vm::faultHandler(regs*)+0x637>
c0014aaf:	80 fa ee             	cmp    dl,0xee
c0014ab2:	0f 85 d6 04 00 00    	jne    c0014f8e <Vm::faultHandler(regs*)+0x677>
c0014ab8:	50                   	push   eax
c0014ab9:	50                   	push   eax
c0014aba:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014abe:	50                   	push   eax
c0014abf:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014ac3:	50                   	push   eax
c0014ac4:	e8 a3 f9 ff ff       	call   c001446c <Vm::outbv(unsigned short, unsigned char)>
c0014ac9:	e9 9f 04 00 00       	jmp    c0014f6d <Vm::faultHandler(regs*)+0x656>
c0014ace:	80 fa fa             	cmp    dl,0xfa
c0014ad1:	0f 84 69 01 00 00    	je     c0014c40 <Vm::faultHandler(regs*)+0x329>
c0014ad7:	80 fa fb             	cmp    dl,0xfb
c0014ada:	0f 84 6e 01 00 00    	je     c0014c4e <Vm::faultHandler(regs*)+0x337>
c0014ae0:	80 fa f3             	cmp    dl,0xf3
c0014ae3:	0f 85 a5 04 00 00    	jne    c0014f8e <Vm::faultHandler(regs*)+0x677>
c0014ae9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014aec:	e9 c0 fe ff ff       	jmp    c00149b1 <Vm::faultHandler(regs*)+0x9a>
c0014af1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014af4:	be 02 00 00 00       	mov    esi,0x2
c0014af9:	e9 b3 fe ff ff       	jmp    c00149b1 <Vm::faultHandler(regs*)+0x9a>
c0014afe:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014b01:	be 03 00 00 00       	mov    esi,0x3
c0014b06:	e9 a6 fe ff ff       	jmp    c00149b1 <Vm::faultHandler(regs*)+0x9a>
c0014b0b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014b0e:	be 04 00 00 00       	mov    esi,0x4
c0014b13:	e9 99 fe ff ff       	jmp    c00149b1 <Vm::faultHandler(regs*)+0x9a>
c0014b18:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014b1b:	be 05 00 00 00       	mov    esi,0x5
c0014b20:	e9 8c fe ff ff       	jmp    c00149b1 <Vm::faultHandler(regs*)+0x9a>
c0014b25:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014b28:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0014b2d:	e9 7f fe ff ff       	jmp    c00149b1 <Vm::faultHandler(regs*)+0x9a>
c0014b32:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014b35:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0014b3a:	e9 72 fe ff ff       	jmp    c00149b1 <Vm::faultHandler(regs*)+0x9a>
c0014b3f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0014b42:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0014b46:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014b4b:	74 30                	je     c0014b7d <Vm::faultHandler(regs*)+0x266>
c0014b4d:	83 e9 04             	sub    ecx,0x4
c0014b50:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014b56:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014b5c:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014b5f:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014b62:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014b68:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014b6c:	0f 84 15 04 00 00    	je     c0014f87 <Vm::faultHandler(regs*)+0x670>
c0014b72:	80 ce 02             	or     dh,0x2
c0014b75:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014b78:	e9 0a 04 00 00       	jmp    c0014f87 <Vm::faultHandler(regs*)+0x670>
c0014b7d:	83 e9 02             	sub    ecx,0x2
c0014b80:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014b86:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014b89:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014b8d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014b93:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014b97:	74 05                	je     c0014b9e <Vm::faultHandler(regs*)+0x287>
c0014b99:	80 ce 02             	or     dh,0x2
c0014b9c:	eb 03                	jmp    c0014ba1 <Vm::faultHandler(regs*)+0x28a>
c0014b9e:	80 e6 fd             	and    dh,0xfd
c0014ba1:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014ba5:	e9 dd 03 00 00       	jmp    c0014f87 <Vm::faultHandler(regs*)+0x670>
c0014baa:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014baf:	74 2a                	je     c0014bdb <Vm::faultHandler(regs*)+0x2c4>
c0014bb1:	8b 10                	mov    edx,DWORD PTR [eax]
c0014bb3:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014bb9:	81 ca 00 02 02 00    	or     edx,0x20200
c0014bbf:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014bc2:	8b 00                	mov    eax,DWORD PTR [eax]
c0014bc4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014bca:	c1 e8 09             	shr    eax,0x9
c0014bcd:	83 e0 01             	and    eax,0x1
c0014bd0:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014bd3:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014bd6:	83 c0 04             	add    eax,0x4
c0014bd9:	eb 25                	jmp    c0014c00 <Vm::faultHandler(regs*)+0x2e9>
c0014bdb:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014bde:	81 ca 00 02 02 00    	or     edx,0x20200
c0014be4:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014be7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014bea:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014bf0:	66 c1 e8 09          	shr    ax,0x9
c0014bf4:	83 e0 01             	and    eax,0x1
c0014bf7:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014bfa:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014bfd:	83 c0 02             	add    eax,0x2
c0014c00:	25 ff ff 00 00       	and    eax,0xffff
c0014c05:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014c08:	e9 7a 03 00 00       	jmp    c0014f87 <Vm::faultHandler(regs*)+0x670>
c0014c0d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014c11:	3c ee                	cmp    al,0xee
c0014c13:	75 10                	jne    c0014c25 <Vm::faultHandler(regs*)+0x30e>
c0014c15:	83 ec 0c             	sub    esp,0xc
c0014c18:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014c1b:	e8 e9 f8 ff ff       	call   c0014509 <Vm::mainloop3(unsigned long)>
c0014c20:	e9 4b 03 00 00       	jmp    c0014f70 <Vm::faultHandler(regs*)+0x659>
c0014c25:	83 ec 0c             	sub    esp,0xc
c0014c28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014c2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c30:	51                   	push   ecx
c0014c31:	50                   	push   eax
c0014c32:	53                   	push   ebx
c0014c33:	e8 e1 fb ff ff       	call   c0014819 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0014c38:	83 c4 20             	add    esp,0x20
c0014c3b:	e9 4a 03 00 00       	jmp    c0014f8a <Vm::faultHandler(regs*)+0x673>
c0014c40:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c45:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014c49:	e9 39 03 00 00       	jmp    c0014f87 <Vm::faultHandler(regs*)+0x670>
c0014c4e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c53:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0014c57:	e9 2b 03 00 00       	jmp    c0014f87 <Vm::faultHandler(regs*)+0x670>
c0014c5c:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014c5f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014c64:	74 2b                	je     c0014c91 <Vm::faultHandler(regs*)+0x37a>
c0014c66:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0014c6d:	76 22                	jbe    c0014c91 <Vm::faultHandler(regs*)+0x37a>
c0014c6f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014c73:	50                   	push   eax
c0014c74:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014c78:	50                   	push   eax
c0014c79:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014c7d:	50                   	push   eax
c0014c7e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014c82:	50                   	push   eax
c0014c83:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014c87:	50                   	push   eax
c0014c88:	6a 6c                	push   0x6c
c0014c8a:	6a 6c                	push   0x6c
c0014c8c:	e9 b9 01 00 00       	jmp    c0014e4a <Vm::faultHandler(regs*)+0x533>
c0014c91:	83 ec 0c             	sub    esp,0xc
c0014c94:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014c98:	0f b7 f6             	movzx  esi,si
c0014c9b:	50                   	push   eax
c0014c9c:	e8 b8 f7 ff ff       	call   c0014459 <Vm::inbv(unsigned short)>
c0014ca1:	83 c4 0c             	add    esp,0xc
c0014ca4:	0f b6 c0             	movzx  eax,al
c0014ca7:	50                   	push   eax
c0014ca8:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0014cac:	50                   	push   eax
c0014cad:	56                   	push   esi
c0014cae:	e8 24 fc ff ff       	call   c00148d7 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0014cb3:	83 c4 10             	add    esp,0x10
c0014cb6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014cb9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014cbd:	74 03                	je     c0014cc2 <Vm::faultHandler(regs*)+0x3ab>
c0014cbf:	48                   	dec    eax
c0014cc0:	eb 01                	jmp    c0014cc3 <Vm::faultHandler(regs*)+0x3ac>
c0014cc2:	40                   	inc    eax
c0014cc3:	0f b7 c0             	movzx  eax,ax
c0014cc6:	e9 8d 00 00 00       	jmp    c0014d58 <Vm::faultHandler(regs*)+0x441>
c0014ccb:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014cce:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014cd1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014cd6:	74 29                	je     c0014d01 <Vm::faultHandler(regs*)+0x3ea>
c0014cd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0014cdd:	76 22                	jbe    c0014d01 <Vm::faultHandler(regs*)+0x3ea>
c0014cdf:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014ce3:	50                   	push   eax
c0014ce4:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014ce8:	50                   	push   eax
c0014ce9:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014ced:	50                   	push   eax
c0014cee:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014cf2:	50                   	push   eax
c0014cf3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014cf7:	50                   	push   eax
c0014cf8:	6a 6d                	push   0x6d
c0014cfa:	6a 6d                	push   0x6d
c0014cfc:	e9 49 01 00 00       	jmp    c0014e4a <Vm::faultHandler(regs*)+0x533>
c0014d01:	0f b7 c8             	movzx  ecx,ax
c0014d04:	0f b7 f6             	movzx  esi,si
c0014d07:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014d0a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014d0f:	74 20                	je     c0014d31 <Vm::faultHandler(regs*)+0x41a>
c0014d11:	ed                   	in     eax,dx
c0014d12:	55                   	push   ebp
c0014d13:	50                   	push   eax
c0014d14:	51                   	push   ecx
c0014d15:	56                   	push   esi
c0014d16:	e8 e7 fb ff ff       	call   c0014902 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0014d1b:	83 c4 10             	add    esp,0x10
c0014d1e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014d21:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014d25:	74 05                	je     c0014d2c <Vm::faultHandler(regs*)+0x415>
c0014d27:	83 e8 04             	sub    eax,0x4
c0014d2a:	eb 27                	jmp    c0014d53 <Vm::faultHandler(regs*)+0x43c>
c0014d2c:	83 c0 04             	add    eax,0x4
c0014d2f:	eb 22                	jmp    c0014d53 <Vm::faultHandler(regs*)+0x43c>
c0014d31:	66 ed                	in     ax,dx
c0014d33:	0f b7 c0             	movzx  eax,ax
c0014d36:	57                   	push   edi
c0014d37:	50                   	push   eax
c0014d38:	51                   	push   ecx
c0014d39:	56                   	push   esi
c0014d3a:	e8 ad fb ff ff       	call   c00148ec <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0014d3f:	83 c4 10             	add    esp,0x10
c0014d42:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014d45:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014d49:	74 05                	je     c0014d50 <Vm::faultHandler(regs*)+0x439>
c0014d4b:	83 e8 02             	sub    eax,0x2
c0014d4e:	eb 03                	jmp    c0014d53 <Vm::faultHandler(regs*)+0x43c>
c0014d50:	83 c0 02             	add    eax,0x2
c0014d53:	25 ff ff 00 00       	and    eax,0xffff
c0014d58:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0014d5b:	e9 27 02 00 00       	jmp    c0014f87 <Vm::faultHandler(regs*)+0x670>
c0014d60:	8d 46 ff             	lea    eax,[esi-0x1]
c0014d63:	3c 05                	cmp    al,0x5
c0014d65:	77 24                	ja     c0014d8b <Vm::faultHandler(regs*)+0x474>
c0014d67:	0f b6 c0             	movzx  eax,al
c0014d6a:	ff 24 85 ac ef 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1054]
c0014d71:	0f b7 fd             	movzx  edi,bp
c0014d74:	eb 15                	jmp    c0014d8b <Vm::faultHandler(regs*)+0x474>
c0014d76:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0014d7a:	eb 0f                	jmp    c0014d8b <Vm::faultHandler(regs*)+0x474>
c0014d7c:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0014d80:	eb 09                	jmp    c0014d8b <Vm::faultHandler(regs*)+0x474>
c0014d82:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0014d86:	eb 03                	jmp    c0014d8b <Vm::faultHandler(regs*)+0x474>
c0014d88:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0014d8b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014d8e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014d93:	74 29                	je     c0014dbe <Vm::faultHandler(regs*)+0x4a7>
c0014d95:	3d ff ff 00 00       	cmp    eax,0xffff
c0014d9a:	76 22                	jbe    c0014dbe <Vm::faultHandler(regs*)+0x4a7>
c0014d9c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014da0:	50                   	push   eax
c0014da1:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014da5:	50                   	push   eax
c0014da6:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014daa:	50                   	push   eax
c0014dab:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014daf:	50                   	push   eax
c0014db0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014db4:	50                   	push   eax
c0014db5:	6a 6e                	push   0x6e
c0014db7:	6a 6e                	push   0x6e
c0014db9:	e9 8c 00 00 00       	jmp    c0014e4a <Vm::faultHandler(regs*)+0x533>
c0014dbe:	0f b7 c0             	movzx  eax,ax
c0014dc1:	52                   	push   edx
c0014dc2:	52                   	push   edx
c0014dc3:	50                   	push   eax
c0014dc4:	57                   	push   edi
c0014dc5:	e8 d9 fa ff ff       	call   c00148a3 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0014dca:	59                   	pop    ecx
c0014dcb:	0f b6 c0             	movzx  eax,al
c0014dce:	5e                   	pop    esi
c0014dcf:	50                   	push   eax
c0014dd0:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014dd4:	50                   	push   eax
c0014dd5:	e8 92 f6 ff ff       	call   c001446c <Vm::outbv(unsigned short, unsigned char)>
c0014dda:	83 c4 10             	add    esp,0x10
c0014ddd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014de0:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014de4:	74 03                	je     c0014de9 <Vm::faultHandler(regs*)+0x4d2>
c0014de6:	48                   	dec    eax
c0014de7:	eb 01                	jmp    c0014dea <Vm::faultHandler(regs*)+0x4d3>
c0014de9:	40                   	inc    eax
c0014dea:	0f b7 c0             	movzx  eax,ax
c0014ded:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0014df0:	e9 92 01 00 00       	jmp    c0014f87 <Vm::faultHandler(regs*)+0x670>
c0014df5:	8d 46 ff             	lea    eax,[esi-0x1]
c0014df8:	3c 05                	cmp    al,0x5
c0014dfa:	77 1f                	ja     c0014e1b <Vm::faultHandler(regs*)+0x504>
c0014dfc:	0f b6 c0             	movzx  eax,al
c0014dff:	ff 24 85 c4 ef 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe103c]
c0014e06:	89 ef                	mov    edi,ebp
c0014e08:	eb 11                	jmp    c0014e1b <Vm::faultHandler(regs*)+0x504>
c0014e0a:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0014e0d:	eb 0c                	jmp    c0014e1b <Vm::faultHandler(regs*)+0x504>
c0014e0f:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0014e12:	eb 07                	jmp    c0014e1b <Vm::faultHandler(regs*)+0x504>
c0014e14:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0014e17:	eb 02                	jmp    c0014e1b <Vm::faultHandler(regs*)+0x504>
c0014e19:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0014e1b:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0014e1e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014e23:	74 37                	je     c0014e5c <Vm::faultHandler(regs*)+0x545>
c0014e25:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0014e2b:	76 2f                	jbe    c0014e5c <Vm::faultHandler(regs*)+0x545>
c0014e2d:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014e31:	50                   	push   eax
c0014e32:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014e36:	50                   	push   eax
c0014e37:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014e3b:	50                   	push   eax
c0014e3c:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014e40:	50                   	push   eax
c0014e41:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014e45:	50                   	push   eax
c0014e46:	6a 6f                	push   0x6f
c0014e48:	6a 6f                	push   0x6f
c0014e4a:	68 52 ef 01 c0       	push   0xc001ef52
c0014e4f:	e8 a4 56 ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c0014e54:	83 c4 20             	add    esp,0x20
c0014e57:	e9 86 01 00 00       	jmp    c0014fe2 <Vm::faultHandler(regs*)+0x6cb>
c0014e5c:	0f b7 d7             	movzx  edx,di
c0014e5f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0014e62:	0f b7 c6             	movzx  eax,si
c0014e65:	81 e1 00 04 00 00    	and    ecx,0x400
c0014e6b:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0014e6e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014e73:	74 1d                	je     c0014e92 <Vm::faultHandler(regs*)+0x57b>
c0014e75:	55                   	push   ebp
c0014e76:	55                   	push   ebp
c0014e77:	50                   	push   eax
c0014e78:	52                   	push   edx
c0014e79:	e8 48 fa ff ff       	call   c00148c6 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0014e7e:	83 c4 10             	add    esp,0x10
c0014e81:	89 fa                	mov    edx,edi
c0014e83:	ef                   	out    dx,eax
c0014e84:	85 c9                	test   ecx,ecx
c0014e86:	74 05                	je     c0014e8d <Vm::faultHandler(regs*)+0x576>
c0014e88:	83 ee 04             	sub    esi,0x4
c0014e8b:	eb 21                	jmp    c0014eae <Vm::faultHandler(regs*)+0x597>
c0014e8d:	83 c6 04             	add    esi,0x4
c0014e90:	eb 1c                	jmp    c0014eae <Vm::faultHandler(regs*)+0x597>
c0014e92:	55                   	push   ebp
c0014e93:	55                   	push   ebp
c0014e94:	50                   	push   eax
c0014e95:	52                   	push   edx
c0014e96:	e8 19 fa ff ff       	call   c00148b4 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0014e9b:	83 c4 10             	add    esp,0x10
c0014e9e:	89 fa                	mov    edx,edi
c0014ea0:	66 ef                	out    dx,ax
c0014ea2:	85 c9                	test   ecx,ecx
c0014ea4:	74 05                	je     c0014eab <Vm::faultHandler(regs*)+0x594>
c0014ea6:	83 ee 02             	sub    esi,0x2
c0014ea9:	eb 03                	jmp    c0014eae <Vm::faultHandler(regs*)+0x597>
c0014eab:	83 c6 02             	add    esi,0x2
c0014eae:	81 e6 ff ff 00 00    	and    esi,0xffff
c0014eb4:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0014eb7:	e9 cb 00 00 00       	jmp    c0014f87 <Vm::faultHandler(regs*)+0x670>
c0014ebc:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014ec3:	83 ec 0c             	sub    esp,0xc
c0014ec6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014eca:	50                   	push   eax
c0014ecb:	e8 89 f5 ff ff       	call   c0014459 <Vm::inbv(unsigned short)>
c0014ed0:	0f b6 c0             	movzx  eax,al
c0014ed3:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014ed6:	eb 3f                	jmp    c0014f17 <Vm::faultHandler(regs*)+0x600>
c0014ed8:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014edd:	74 07                	je     c0014ee6 <Vm::faultHandler(regs*)+0x5cf>
c0014edf:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014ee3:	ed                   	in     eax,dx
c0014ee4:	eb 14                	jmp    c0014efa <Vm::faultHandler(regs*)+0x5e3>
c0014ee6:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0014ee9:	66 31 f6             	xor    si,si
c0014eec:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0014eef:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014ef3:	66 ed                	in     ax,dx
c0014ef5:	0f b7 c0             	movzx  eax,ax
c0014ef8:	09 f0                	or     eax,esi
c0014efa:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014efd:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014f01:	e9 84 00 00 00       	jmp    c0014f8a <Vm::faultHandler(regs*)+0x673>
c0014f06:	52                   	push   edx
c0014f07:	52                   	push   edx
c0014f08:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014f0c:	50                   	push   eax
c0014f0d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014f11:	50                   	push   eax
c0014f12:	e8 55 f5 ff ff       	call   c001446c <Vm::outbv(unsigned short, unsigned char)>
c0014f17:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014f1b:	eb 53                	jmp    c0014f70 <Vm::faultHandler(regs*)+0x659>
c0014f1d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014f20:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014f24:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014f29:	74 03                	je     c0014f2e <Vm::faultHandler(regs*)+0x617>
c0014f2b:	ef                   	out    dx,eax
c0014f2c:	eb cf                	jmp    c0014efd <Vm::faultHandler(regs*)+0x5e6>
c0014f2e:	66 ef                	out    dx,ax
c0014f30:	eb cb                	jmp    c0014efd <Vm::faultHandler(regs*)+0x5e6>
c0014f32:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014f39:	83 ec 0c             	sub    esp,0xc
c0014f3c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014f40:	50                   	push   eax
c0014f41:	e8 13 f5 ff ff       	call   c0014459 <Vm::inbv(unsigned short)>
c0014f46:	0f b6 c0             	movzx  eax,al
c0014f49:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014f4c:	eb 1f                	jmp    c0014f6d <Vm::faultHandler(regs*)+0x656>
c0014f4e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014f51:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014f56:	74 03                	je     c0014f5b <Vm::faultHandler(regs*)+0x644>
c0014f58:	ed                   	in     eax,dx
c0014f59:	eb 0d                	jmp    c0014f68 <Vm::faultHandler(regs*)+0x651>
c0014f5b:	66 ed                	in     ax,dx
c0014f5d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0014f60:	0f b7 c0             	movzx  eax,ax
c0014f63:	66 31 d2             	xor    dx,dx
c0014f66:	09 d0                	or     eax,edx
c0014f68:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014f6b:	eb 1a                	jmp    c0014f87 <Vm::faultHandler(regs*)+0x670>
c0014f6d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014f70:	83 c4 10             	add    esp,0x10
c0014f73:	eb 15                	jmp    c0014f8a <Vm::faultHandler(regs*)+0x673>
c0014f75:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014f78:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014f7b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014f80:	74 03                	je     c0014f85 <Vm::faultHandler(regs*)+0x66e>
c0014f82:	ef                   	out    dx,eax
c0014f83:	eb 02                	jmp    c0014f87 <Vm::faultHandler(regs*)+0x670>
c0014f85:	66 ef                	out    dx,ax
c0014f87:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014f8a:	b0 01                	mov    al,0x1
c0014f8c:	eb 56                	jmp    c0014fe4 <Vm::faultHandler(regs*)+0x6cd>
c0014f8e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014f92:	50                   	push   eax
c0014f93:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014f97:	50                   	push   eax
c0014f98:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014f9c:	50                   	push   eax
c0014f9d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014fa1:	50                   	push   eax
c0014fa2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014fa6:	50                   	push   eax
c0014fa7:	52                   	push   edx
c0014fa8:	52                   	push   edx
c0014fa9:	68 7f ef 01 c0       	push   0xc001ef7f
c0014fae:	e8 45 55 ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c0014fb3:	83 c4 20             	add    esp,0x20
c0014fb6:	83 ec 0c             	sub    esp,0xc
c0014fb9:	6a 60                	push   0x60
c0014fbb:	e8 99 f4 ff ff       	call   c0014459 <Vm::inbv(unsigned short)>
c0014fc0:	83 c4 10             	add    esp,0x10
c0014fc3:	3c 1c                	cmp    al,0x1c
c0014fc5:	74 04                	je     c0014fcb <Vm::faultHandler(regs*)+0x6b4>
c0014fc7:	3c 5a                	cmp    al,0x5a
c0014fc9:	75 eb                	jne    c0014fb6 <Vm::faultHandler(regs*)+0x69f>
c0014fcb:	3c 5a                	cmp    al,0x5a
c0014fcd:	74 04                	je     c0014fd3 <Vm::faultHandler(regs*)+0x6bc>
c0014fcf:	3c 1c                	cmp    al,0x1c
c0014fd1:	75 0f                	jne    c0014fe2 <Vm::faultHandler(regs*)+0x6cb>
c0014fd3:	83 ec 0c             	sub    esp,0xc
c0014fd6:	6a 60                	push   0x60
c0014fd8:	e8 7c f4 ff ff       	call   c0014459 <Vm::inbv(unsigned short)>
c0014fdd:	83 c4 10             	add    esp,0x10
c0014fe0:	eb e9                	jmp    c0014fcb <Vm::faultHandler(regs*)+0x6b4>
c0014fe2:	31 c0                	xor    eax,eax
c0014fe4:	83 c4 1c             	add    esp,0x1c
c0014fe7:	5b                   	pop    ebx
c0014fe8:	5e                   	pop    esi
c0014fe9:	5f                   	pop    edi
c0014fea:	5d                   	pop    ebp
c0014feb:	c3                   	ret    

c0014fec <noCopro(unsigned long)>:
c0014fec:	c3                   	ret    

c0014fed <nmiHandler(regs*, void*)>:
c0014fed:	83 ec 0c             	sub    esp,0xc
c0014ff0:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c0014ff5:	83 ec 0c             	sub    esp,0xc
c0014ff8:	50                   	push   eax
c0014ff9:	e8 dc 1f ff ff       	call   c0006fda <Computer::handleNMI()>
c0014ffe:	83 c4 10             	add    esp,0x10
c0015001:	90                   	nop
c0015002:	83 c4 0c             	add    esp,0xc
c0015005:	c3                   	ret    

c0015006 <doubleFault(regs*, void*)>:
c0015006:	55                   	push   ebp
c0015007:	89 e5                	mov    ebp,esp
c0015009:	83 ec 08             	sub    esp,0x8
c001500c:	83 ec 0c             	sub    esp,0xc
c001500f:	68 dc ef 01 c0       	push   0xc001efdc
c0015014:	e8 4a b1 ff ff       	call   c0010163 <KePanic(char const*)>
c0015019:	83 c4 10             	add    esp,0x10
c001501c:	90                   	nop
c001501d:	c9                   	leave  
c001501e:	c3                   	ret    

c001501f <displayDebugInfo(regs*)>:
c001501f:	83 ec 1c             	sub    esp,0x1c
c0015022:	0f 20 c0             	mov    eax,cr0
c0015025:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015029:	0f 20 d0             	mov    eax,cr2
c001502c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015030:	0f 20 d8             	mov    eax,cr3
c0015033:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015037:	0f 20 e0             	mov    eax,cr4
c001503a:	89 04 24             	mov    DWORD PTR [esp],eax
c001503d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015041:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0015044:	83 ec 08             	sub    esp,0x8
c0015047:	50                   	push   eax
c0015048:	68 f8 ef 01 c0       	push   0xc001eff8
c001504d:	e8 a6 54 ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c0015052:	83 c4 10             	add    esp,0x10
c0015055:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015059:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001505c:	83 ec 08             	sub    esp,0x8
c001505f:	50                   	push   eax
c0015060:	68 e9 ef 01 c0       	push   0xc001efe9
c0015065:	e8 8e 54 ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c001506a:	83 c4 10             	add    esp,0x10
c001506d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015071:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0015074:	83 ec 08             	sub    esp,0x8
c0015077:	50                   	push   eax
c0015078:	68 f4 ef 01 c0       	push   0xc001eff4
c001507d:	e8 76 54 ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c0015082:	83 c4 10             	add    esp,0x10
c0015085:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015089:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001508c:	83 ec 08             	sub    esp,0x8
c001508f:	50                   	push   eax
c0015090:	68 03 f0 01 c0       	push   0xc001f003
c0015095:	e8 5e 54 ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c001509a:	83 c4 10             	add    esp,0x10
c001509d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00150a1:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00150a4:	83 ec 08             	sub    esp,0x8
c00150a7:	50                   	push   eax
c00150a8:	68 0e f0 01 c0       	push   0xc001f00e
c00150ad:	e8 46 54 ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c00150b2:	83 c4 10             	add    esp,0x10
c00150b5:	83 ec 08             	sub    esp,0x8
c00150b8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00150bc:	68 19 f0 01 c0       	push   0xc001f019
c00150c1:	e8 32 54 ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c00150c6:	83 c4 10             	add    esp,0x10
c00150c9:	83 ec 08             	sub    esp,0x8
c00150cc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00150d0:	68 24 f0 01 c0       	push   0xc001f024
c00150d5:	e8 1e 54 ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c00150da:	83 c4 10             	add    esp,0x10
c00150dd:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c00150e2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150e8:	83 ec 0c             	sub    esp,0xc
c00150eb:	50                   	push   eax
c00150ec:	e8 26 33 ff ff       	call   c0008417 <setActiveTerminal(VgaText*)>
c00150f1:	83 c4 10             	add    esp,0x10
c00150f4:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c00150f9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150ff:	83 ec 08             	sub    esp,0x8
c0015102:	68 2f f0 01 c0       	push   0xc001f02f
c0015107:	50                   	push   eax
c0015108:	e8 49 36 ff ff       	call   c0008756 <VgaText::puts(char const*)>
c001510d:	83 c4 10             	add    esp,0x10
c0015110:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c0015115:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001511b:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0015120:	8b 12                	mov    edx,DWORD PTR [edx]
c0015122:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0015125:	83 c2 0c             	add    edx,0xc
c0015128:	83 ec 08             	sub    esp,0x8
c001512b:	52                   	push   edx
c001512c:	50                   	push   eax
c001512d:	e8 24 36 ff ff       	call   c0008756 <VgaText::puts(char const*)>
c0015132:	83 c4 10             	add    esp,0x10
c0015135:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c001513a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015140:	83 ec 08             	sub    esp,0x8
c0015143:	68 38 f0 01 c0       	push   0xc001f038
c0015148:	50                   	push   eax
c0015149:	e8 08 36 ff ff       	call   c0008756 <VgaText::puts(char const*)>
c001514e:	83 c4 10             	add    esp,0x10
c0015151:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c0015156:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001515c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015160:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0015163:	83 ec 08             	sub    esp,0x8
c0015166:	52                   	push   edx
c0015167:	50                   	push   eax
c0015168:	e8 a3 35 ff ff       	call   c0008710 <VgaText::putx(unsigned int)>
c001516d:	83 c4 10             	add    esp,0x10
c0015170:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c0015175:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001517b:	83 ec 08             	sub    esp,0x8
c001517e:	68 40 f0 01 c0       	push   0xc001f040
c0015183:	50                   	push   eax
c0015184:	e8 cd 35 ff ff       	call   c0008756 <VgaText::puts(char const*)>
c0015189:	83 c4 10             	add    esp,0x10
c001518c:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c0015191:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015197:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001519b:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001519e:	83 ec 08             	sub    esp,0x8
c00151a1:	52                   	push   edx
c00151a2:	50                   	push   eax
c00151a3:	e8 68 35 ff ff       	call   c0008710 <VgaText::putx(unsigned int)>
c00151a8:	83 c4 10             	add    esp,0x10
c00151ab:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c00151b0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151b6:	83 ec 08             	sub    esp,0x8
c00151b9:	68 48 f0 01 c0       	push   0xc001f048
c00151be:	50                   	push   eax
c00151bf:	e8 92 35 ff ff       	call   c0008756 <VgaText::puts(char const*)>
c00151c4:	83 c4 10             	add    esp,0x10
c00151c7:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c00151cc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151d2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00151d6:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c00151d9:	83 ec 08             	sub    esp,0x8
c00151dc:	52                   	push   edx
c00151dd:	50                   	push   eax
c00151de:	e8 2d 35 ff ff       	call   c0008710 <VgaText::putx(unsigned int)>
c00151e3:	83 c4 10             	add    esp,0x10
c00151e6:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c00151eb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151f1:	83 ec 08             	sub    esp,0x8
c00151f4:	68 50 f0 01 c0       	push   0xc001f050
c00151f9:	50                   	push   eax
c00151fa:	e8 57 35 ff ff       	call   c0008756 <VgaText::puts(char const*)>
c00151ff:	83 c4 10             	add    esp,0x10
c0015202:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c0015207:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001520d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015211:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0015214:	83 ec 08             	sub    esp,0x8
c0015217:	52                   	push   edx
c0015218:	50                   	push   eax
c0015219:	e8 f2 34 ff ff       	call   c0008710 <VgaText::putx(unsigned int)>
c001521e:	83 c4 10             	add    esp,0x10
c0015221:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c0015226:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001522c:	83 ec 08             	sub    esp,0x8
c001522f:	68 58 f0 01 c0       	push   0xc001f058
c0015234:	50                   	push   eax
c0015235:	e8 1c 35 ff ff       	call   c0008756 <VgaText::puts(char const*)>
c001523a:	83 c4 10             	add    esp,0x10
c001523d:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c0015242:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015248:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001524c:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001524f:	83 ec 08             	sub    esp,0x8
c0015252:	52                   	push   edx
c0015253:	50                   	push   eax
c0015254:	e8 b7 34 ff ff       	call   c0008710 <VgaText::putx(unsigned int)>
c0015259:	83 c4 10             	add    esp,0x10
c001525c:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c0015261:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015267:	83 ec 08             	sub    esp,0x8
c001526a:	68 60 f0 01 c0       	push   0xc001f060
c001526f:	50                   	push   eax
c0015270:	e8 e1 34 ff ff       	call   c0008756 <VgaText::puts(char const*)>
c0015275:	83 c4 10             	add    esp,0x10
c0015278:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c001527d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015283:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015287:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001528a:	83 ec 08             	sub    esp,0x8
c001528d:	52                   	push   edx
c001528e:	50                   	push   eax
c001528f:	e8 7c 34 ff ff       	call   c0008710 <VgaText::putx(unsigned int)>
c0015294:	83 c4 10             	add    esp,0x10
c0015297:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c001529c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152a2:	83 ec 08             	sub    esp,0x8
c00152a5:	68 68 f0 01 c0       	push   0xc001f068
c00152aa:	50                   	push   eax
c00152ab:	e8 a6 34 ff ff       	call   c0008756 <VgaText::puts(char const*)>
c00152b0:	83 c4 10             	add    esp,0x10
c00152b3:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c00152b8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152be:	83 ec 08             	sub    esp,0x8
c00152c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00152c5:	50                   	push   eax
c00152c6:	e8 45 34 ff ff       	call   c0008710 <VgaText::putx(unsigned int)>
c00152cb:	83 c4 10             	add    esp,0x10
c00152ce:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c00152d3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152d9:	83 ec 08             	sub    esp,0x8
c00152dc:	68 71 f0 01 c0       	push   0xc001f071
c00152e1:	50                   	push   eax
c00152e2:	e8 6f 34 ff ff       	call   c0008756 <VgaText::puts(char const*)>
c00152e7:	83 c4 10             	add    esp,0x10
c00152ea:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c00152ef:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152f5:	83 ec 08             	sub    esp,0x8
c00152f8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00152fc:	50                   	push   eax
c00152fd:	e8 0e 34 ff ff       	call   c0008710 <VgaText::putx(unsigned int)>
c0015302:	83 c4 10             	add    esp,0x10
c0015305:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c001530a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015310:	83 ec 08             	sub    esp,0x8
c0015313:	68 79 f0 01 c0       	push   0xc001f079
c0015318:	50                   	push   eax
c0015319:	e8 38 34 ff ff       	call   c0008756 <VgaText::puts(char const*)>
c001531e:	83 c4 10             	add    esp,0x10
c0015321:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c0015326:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001532c:	83 ec 08             	sub    esp,0x8
c001532f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0015333:	50                   	push   eax
c0015334:	e8 d7 33 ff ff       	call   c0008710 <VgaText::putx(unsigned int)>
c0015339:	83 c4 10             	add    esp,0x10
c001533c:	fa                   	cli    
c001533d:	f4                   	hlt    
c001533e:	eb fe                	jmp    c001533e <displayDebugInfo(regs*)+0x31f>

c0015340 <HalSystemIdle()>:
c0015340:	56                   	push   esi
c0015341:	53                   	push   ebx
c0015342:	83 ec 14             	sub    esp,0x14
c0015345:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c001534a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015350:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0015356:	83 e0 04             	and    eax,0x4
c0015359:	84 c0                	test   al,al
c001535b:	0f 95 c0             	setne  al
c001535e:	84 c0                	test   al,al
c0015360:	74 4c                	je     c00153ae <HalSystemIdle()+0x6e>
c0015362:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c0015367:	83 ec 08             	sub    esp,0x8
c001536a:	68 e1 00 00 00       	push   0xe1
c001536f:	50                   	push   eax
c0015370:	e8 7d 1a ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c0015375:	83 c4 10             	add    esp,0x10
c0015378:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001537c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015380:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c0015385:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015389:	83 e2 02             	and    edx,0x2
c001538c:	89 d3                	mov    ebx,edx
c001538e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015392:	83 e2 00             	and    edx,0x0
c0015395:	89 d6                	mov    esi,edx
c0015397:	56                   	push   esi
c0015398:	53                   	push   ebx
c0015399:	68 e1 00 00 00       	push   0xe1
c001539e:	50                   	push   eax
c001539f:	e8 7a 1a ff ff       	call   c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>
c00153a4:	83 c4 10             	add    esp,0x10
c00153a7:	e8 e8 ad fe ff       	call   c0000194 <doTPAUSE>
c00153ac:	eb 01                	jmp    c00153af <HalSystemIdle()+0x6f>
c00153ae:	f4                   	hlt    
c00153af:	90                   	nop
c00153b0:	83 c4 14             	add    esp,0x14
c00153b3:	5b                   	pop    ebx
c00153b4:	5e                   	pop    esi
c00153b5:	c3                   	ret    

c00153b6 <displayProgramFault(char const*)>:
c00153b6:	83 ec 0c             	sub    esp,0xc
c00153b9:	83 ec 0c             	sub    esp,0xc
c00153bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00153c0:	e8 33 51 ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c00153c5:	83 c4 10             	add    esp,0x10
c00153c8:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00153cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00153cf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00153d2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00153d8:	85 c0                	test   eax,eax
c00153da:	74 21                	je     c00153fd <displayProgramFault(char const*)+0x47>
c00153dc:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00153e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00153e3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00153e6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00153ec:	6a 04                	push   0x4
c00153ee:	6a 0f                	push   0xf
c00153f0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00153f4:	50                   	push   eax
c00153f5:	e8 ce 33 ff ff       	call   c00087c8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00153fa:	83 c4 10             	add    esp,0x10
c00153fd:	90                   	nop
c00153fe:	83 c4 0c             	add    esp,0xc
c0015401:	c3                   	ret    

c0015402 <gpFault(regs*, void*)>:
c0015402:	83 ec 1c             	sub    esp,0x1c
c0015405:	c7 05 b0 40 02 c0 17 49 01 c0 	mov    DWORD PTR ds:0xc00240b0,0xc0014917
c001540f:	a1 b0 40 02 c0       	mov    eax,ds:0xc00240b0
c0015414:	85 c0                	test   eax,eax
c0015416:	74 1c                	je     c0015434 <gpFault(regs*, void*)+0x32>
c0015418:	a1 b0 40 02 c0       	mov    eax,ds:0xc00240b0
c001541d:	83 ec 0c             	sub    esp,0xc
c0015420:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015424:	ff d0                	call   eax
c0015426:	83 c4 10             	add    esp,0x10
c0015429:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001542d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0015432:	75 2e                	jne    c0015462 <gpFault(regs*, void*)+0x60>
c0015434:	83 ec 0c             	sub    esp,0xc
c0015437:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001543b:	e8 df fb ff ff       	call   c001501f <displayDebugInfo(regs*)>
c0015440:	83 c4 10             	add    esp,0x10
c0015443:	83 ec 0c             	sub    esp,0xc
c0015446:	68 81 f0 01 c0       	push   0xc001f081
c001544b:	e8 66 ff ff ff       	call   c00153b6 <displayProgramFault(char const*)>
c0015450:	83 c4 10             	add    esp,0x10
c0015453:	83 ec 0c             	sub    esp,0xc
c0015456:	6a 00                	push   0x0
c0015458:	e8 af ee ff ff       	call   c001430c <Thr::terminateFromIRQ(int)>
c001545d:	83 c4 10             	add    esp,0x10
c0015460:	eb 01                	jmp    c0015463 <gpFault(regs*, void*)+0x61>
c0015462:	90                   	nop
c0015463:	83 c4 1c             	add    esp,0x1c
c0015466:	c3                   	ret    

c0015467 <pgFault(regs*, void*)>:
c0015467:	83 ec 1c             	sub    esp,0x1c
c001546a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001546e:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015471:	0f 20 d0             	mov    eax,cr2
c0015474:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015478:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001547c:	83 ec 04             	sub    esp,0x4
c001547f:	52                   	push   edx
c0015480:	50                   	push   eax
c0015481:	68 60 f1 01 c0       	push   0xc001f160
c0015486:	e8 6d 50 ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c001548b:	83 c4 10             	add    esp,0x10
c001548e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0015493:	8b 00                	mov    eax,DWORD PTR [eax]
c0015495:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015498:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c001549e:	0f 20 d2             	mov    edx,cr2
c00154a1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00154a5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00154a9:	83 ec 08             	sub    esp,0x8
c00154ac:	52                   	push   edx
c00154ad:	50                   	push   eax
c00154ae:	e8 77 4c ff ff       	call   c000a12a <VAS::tryLoadBackOffDisk(unsigned long)>
c00154b3:	83 c4 10             	add    esp,0x10
c00154b6:	84 c0                	test   al,al
c00154b8:	75 2e                	jne    c00154e8 <pgFault(regs*, void*)+0x81>
c00154ba:	83 ec 0c             	sub    esp,0xc
c00154bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00154c1:	e8 59 fb ff ff       	call   c001501f <displayDebugInfo(regs*)>
c00154c6:	83 c4 10             	add    esp,0x10
c00154c9:	83 ec 0c             	sub    esp,0xc
c00154cc:	68 9a f0 01 c0       	push   0xc001f09a
c00154d1:	e8 e0 fe ff ff       	call   c00153b6 <displayProgramFault(char const*)>
c00154d6:	83 c4 10             	add    esp,0x10
c00154d9:	83 ec 0c             	sub    esp,0xc
c00154dc:	6a 00                	push   0x0
c00154de:	e8 29 ee ff ff       	call   c001430c <Thr::terminateFromIRQ(int)>
c00154e3:	83 c4 10             	add    esp,0x10
c00154e6:	eb 01                	jmp    c00154e9 <pgFault(regs*, void*)+0x82>
c00154e8:	90                   	nop
c00154e9:	83 c4 1c             	add    esp,0x1c
c00154ec:	c3                   	ret    

c00154ed <otherISRHandler(regs*, void*)>:
c00154ed:	83 ec 0c             	sub    esp,0xc
c00154f0:	83 ec 0c             	sub    esp,0xc
c00154f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00154f7:	e8 23 fb ff ff       	call   c001501f <displayDebugInfo(regs*)>
c00154fc:	83 c4 10             	add    esp,0x10
c00154ff:	83 ec 0c             	sub    esp,0xc
c0015502:	68 88 f1 01 c0       	push   0xc001f188
c0015507:	e8 aa fe ff ff       	call   c00153b6 <displayProgramFault(char const*)>
c001550c:	83 c4 10             	add    esp,0x10
c001550f:	83 ec 0c             	sub    esp,0xc
c0015512:	6a 00                	push   0x0
c0015514:	e8 f3 ed ff ff       	call   c001430c <Thr::terminateFromIRQ(int)>
c0015519:	83 c4 10             	add    esp,0x10
c001551c:	90                   	nop
c001551d:	83 c4 0c             	add    esp,0xc
c0015520:	c3                   	ret    

c0015521 <opcodeFault(regs*, void*)>:
c0015521:	55                   	push   ebp
c0015522:	89 e5                	mov    ebp,esp
c0015524:	83 ec 08             	sub    esp,0x8
c0015527:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001552a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001552d:	83 ec 08             	sub    esp,0x8
c0015530:	50                   	push   eax
c0015531:	68 a5 f0 01 c0       	push   0xc001f0a5
c0015536:	e8 bd 4f ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c001553b:	83 c4 10             	add    esp,0x10
c001553e:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c0015543:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015549:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001554f:	84 c0                	test   al,al
c0015551:	74 21                	je     c0015574 <opcodeFault(regs*, void*)+0x53>
c0015553:	83 ec 0c             	sub    esp,0xc
c0015556:	68 b0 f1 01 c0       	push   0xc001f1b0
c001555b:	e8 98 4f ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c0015560:	83 c4 10             	add    esp,0x10
c0015563:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015566:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015569:	8d 50 19             	lea    edx,[eax+0x19]
c001556c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001556f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015572:	eb 2b                	jmp    c001559f <opcodeFault(regs*, void*)+0x7e>
c0015574:	83 ec 0c             	sub    esp,0xc
c0015577:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001557a:	e8 a0 fa ff ff       	call   c001501f <displayDebugInfo(regs*)>
c001557f:	83 c4 10             	add    esp,0x10
c0015582:	83 ec 0c             	sub    esp,0xc
c0015585:	68 b3 f0 01 c0       	push   0xc001f0b3
c001558a:	e8 27 fe ff ff       	call   c00153b6 <displayProgramFault(char const*)>
c001558f:	83 c4 10             	add    esp,0x10
c0015592:	83 ec 0c             	sub    esp,0xc
c0015595:	6a 00                	push   0x0
c0015597:	e8 70 ed ff ff       	call   c001430c <Thr::terminateFromIRQ(int)>
c001559c:	83 c4 10             	add    esp,0x10
c001559f:	c9                   	leave  
c00155a0:	c3                   	ret    

c00155a1 <i386SaveCoprocessor(void*)>:
c00155a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00155a5:	83 c0 3f             	add    eax,0x3f
c00155a8:	83 e0 c0             	and    eax,0xffffffc0
c00155ab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00155af:	ff 25 ac 40 02 c0    	jmp    DWORD PTR ds:0xc00240ac

c00155b5 <i386LoadCoprocessor(void*)>:
c00155b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00155b9:	83 c0 3f             	add    eax,0x3f
c00155bc:	83 e0 c0             	and    eax,0xffffffc0
c00155bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00155c3:	ff 25 a8 40 02 c0    	jmp    DWORD PTR ds:0xc00240a8

c00155c9 <x87EmulHandler(regs*, void*)>:
c00155c9:	53                   	push   ebx
c00155ca:	83 ec 08             	sub    esp,0x8
c00155cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155d2:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00155d6:	74 10                	je     c00155e8 <x87EmulHandler(regs*, void*)+0x1f>
c00155d8:	83 ec 0c             	sub    esp,0xc
c00155db:	68 c0 f0 01 c0       	push   0xc001f0c0
c00155e0:	e8 7e ab ff ff       	call   c0010163 <KePanic(char const*)>
c00155e5:	83 c4 10             	add    esp,0x10
c00155e8:	0f 20 c0             	mov    eax,cr0
c00155eb:	a8 08                	test   al,0x8
c00155ed:	74 59                	je     c0015648 <x87EmulHandler(regs*, void*)+0x7f>
c00155ef:	0f 06                	clts   
c00155f1:	a1 a4 40 02 c0       	mov    eax,ds:0xc00240a4
c00155f6:	85 c0                	test   eax,eax
c00155f8:	74 0e                	je     c0015608 <x87EmulHandler(regs*, void*)+0x3f>
c00155fa:	83 ec 0c             	sub    esp,0xc
c00155fd:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0015600:	e8 9c ff ff ff       	call   c00155a1 <i386SaveCoprocessor(void*)>
c0015605:	83 c4 10             	add    esp,0x10
c0015608:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001560e:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0015612:	75 12                	jne    c0015626 <x87EmulHandler(regs*, void*)+0x5d>
c0015614:	83 ec 0c             	sub    esp,0xc
c0015617:	68 40 02 00 00       	push   0x240
c001561c:	e8 98 21 ff ff       	call   c00077b9 <malloc>
c0015621:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0015624:	eb 10                	jmp    c0015636 <x87EmulHandler(regs*, void*)+0x6d>
c0015626:	83 ec 0c             	sub    esp,0xc
c0015629:	a1 a4 40 02 c0       	mov    eax,ds:0xc00240a4
c001562e:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0015631:	e8 7f ff ff ff       	call   c00155b5 <i386LoadCoprocessor(void*)>
c0015636:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001563b:	83 c4 10             	add    esp,0x10
c001563e:	a3 a4 40 02 c0       	mov    ds:0xc00240a4,eax
c0015643:	83 c4 08             	add    esp,0x8
c0015646:	5b                   	pop    ebx
c0015647:	c3                   	ret    
c0015648:	83 ec 0c             	sub    esp,0xc
c001564b:	68 d4 f0 01 c0       	push   0xc001f0d4
c0015650:	e8 a3 4e ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c0015655:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001565d:	83 c4 18             	add    esp,0x18
c0015660:	5b                   	pop    ebx
c0015661:	e9 a6 ec ff ff       	jmp    c001430c <Thr::terminateFromIRQ(int)>

c0015666 <HalInitialiseCoprocessor()>:
c0015666:	83 ec 10             	sub    esp,0x10
c0015669:	c7 05 a4 40 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00240a4,0x0
c0015673:	6a 00                	push   0x0
c0015675:	68 c9 55 01 c0       	push   0xc00155c9
c001567a:	6a 07                	push   0x7
c001567c:	e8 eb 67 ff ff       	call   c000be6c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015681:	e8 9a 65 00 00       	call   c001bc20 <avxDetect>
c0015686:	83 c4 10             	add    esp,0x10
c0015689:	85 c0                	test   eax,eax
c001568b:	74 1c                	je     c00156a9 <HalInitialiseCoprocessor()+0x43>
c001568d:	c7 05 ac 40 02 c0 4a bc 01 c0 	mov    DWORD PTR ds:0xc00240ac,0xc001bc4a
c0015697:	c7 05 a8 40 02 c0 5b bc 01 c0 	mov    DWORD PTR ds:0xc00240a8,0xc001bc5b
c00156a1:	83 c4 0c             	add    esp,0xc
c00156a4:	e9 c3 65 00 00       	jmp    c001bc6c <avxInit>
c00156a9:	e8 f2 67 00 00       	call   c001bea0 <absolutelyNoChanceInHell>
c00156ae:	85 c0                	test   eax,eax
c00156b0:	74 1c                	je     c00156ce <HalInitialiseCoprocessor()+0x68>
c00156b2:	c7 05 ac 40 02 c0 b8 be 01 c0 	mov    DWORD PTR ds:0xc00240ac,0xc001beb8
c00156bc:	c7 05 a8 40 02 c0 c0 be 01 c0 	mov    DWORD PTR ds:0xc00240a8,0xc001bec0
c00156c6:	83 c4 0c             	add    esp,0xc
c00156c9:	e9 fa 67 00 00       	jmp    c001bec8 <sseInit>
c00156ce:	e8 13 68 00 00       	call   c001bee6 <x87Detect>
c00156d3:	85 c0                	test   eax,eax
c00156d5:	74 1c                	je     c00156f3 <HalInitialiseCoprocessor()+0x8d>
c00156d7:	c7 05 ac 40 02 c0 01 bf 01 c0 	mov    DWORD PTR ds:0xc00240ac,0xc001bf01
c00156e1:	c7 05 a8 40 02 c0 08 bf 01 c0 	mov    DWORD PTR ds:0xc00240a8,0xc001bf08
c00156eb:	83 c4 0c             	add    esp,0xc
c00156ee:	e9 1c 68 00 00       	jmp    c001bf0f <x87Init>
c00156f3:	c7 05 ac 40 02 c0 ec 4f 01 c0 	mov    DWORD PTR ds:0xc00240ac,0xc0014fec
c00156fd:	c7 05 a8 40 02 c0 ec 4f 01 c0 	mov    DWORD PTR ds:0xc00240a8,0xc0014fec
c0015707:	0f 20 c0             	mov    eax,cr0
c001570a:	83 c8 04             	or     eax,0x4
c001570d:	0f 22 c0             	mov    cr0,eax
c0015710:	83 c4 0c             	add    esp,0xc
c0015713:	c3                   	ret    

c0015714 <HalPanic(char const*)>:
c0015714:	53                   	push   ebx
c0015715:	83 ec 10             	sub    esp,0x10
c0015718:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001571c:	fa                   	cli    
c001571d:	53                   	push   ebx
c001571e:	68 ea f0 01 c0       	push   0xc001f0ea
c0015723:	e8 d0 4d ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c0015728:	83 c4 0c             	add    esp,0xc
c001572b:	6a 01                	push   0x1
c001572d:	6a 0f                	push   0xf
c001572f:	ff 35 a4 0d 02 c0    	push   DWORD PTR ds:0xc0020da4
c0015735:	e8 30 2b ff ff       	call   c000826a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001573a:	58                   	pop    eax
c001573b:	ff 35 a4 0d 02 c0    	push   DWORD PTR ds:0xc0020da4
c0015741:	e8 1c 2d ff ff       	call   c0008462 <VgaText::clearScreen()>
c0015746:	5a                   	pop    edx
c0015747:	59                   	pop    ecx
c0015748:	68 24 d9 01 c0       	push   0xc001d924
c001574d:	ff 35 a4 0d 02 c0    	push   DWORD PTR ds:0xc0020da4
c0015753:	e8 4a 2b ff ff       	call   c00082a2 <VgaText::setTitle(char*)>
c0015758:	83 c4 0c             	add    esp,0xc
c001575b:	6a 01                	push   0x1
c001575d:	6a 0f                	push   0xf
c001575f:	ff 35 a4 0d 02 c0    	push   DWORD PTR ds:0xc0020da4
c0015765:	e8 00 2b ff ff       	call   c000826a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001576a:	58                   	pop    eax
c001576b:	5a                   	pop    edx
c001576c:	68 03 f1 01 c0       	push   0xc001f103
c0015771:	ff 35 a4 0d 02 c0    	push   DWORD PTR ds:0xc0020da4
c0015777:	e8 da 2f ff ff       	call   c0008756 <VgaText::puts(char const*)>
c001577c:	83 c4 0c             	add    esp,0xc
c001577f:	6a 0f                	push   0xf
c0015781:	6a 01                	push   0x1
c0015783:	ff 35 a4 0d 02 c0    	push   DWORD PTR ds:0xc0020da4
c0015789:	e8 dc 2a ff ff       	call   c000826a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001578e:	59                   	pop    ecx
c001578f:	58                   	pop    eax
c0015790:	68 0c f1 01 c0       	push   0xc001f10c
c0015795:	ff 35 a4 0d 02 c0    	push   DWORD PTR ds:0xc0020da4
c001579b:	e8 b6 2f ff ff       	call   c0008756 <VgaText::puts(char const*)>
c00157a0:	83 c4 0c             	add    esp,0xc
c00157a3:	6a 01                	push   0x1
c00157a5:	6a 0f                	push   0xf
c00157a7:	ff 35 a4 0d 02 c0    	push   DWORD PTR ds:0xc0020da4
c00157ad:	e8 b8 2a ff ff       	call   c000826a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00157b2:	58                   	pop    eax
c00157b3:	5a                   	pop    edx
c00157b4:	68 50 f1 01 c0       	push   0xc001f150
c00157b9:	ff 35 a4 0d 02 c0    	push   DWORD PTR ds:0xc0020da4
c00157bf:	e8 92 2f ff ff       	call   c0008756 <VgaText::puts(char const*)>
c00157c4:	59                   	pop    ecx
c00157c5:	58                   	pop    eax
c00157c6:	68 19 f1 01 c0       	push   0xc001f119
c00157cb:	ff 35 a4 0d 02 c0    	push   DWORD PTR ds:0xc0020da4
c00157d1:	e8 80 2f ff ff       	call   c0008756 <VgaText::puts(char const*)>
c00157d6:	58                   	pop    eax
c00157d7:	5a                   	pop    edx
c00157d8:	68 53 f1 01 c0       	push   0xc001f153
c00157dd:	ff 35 a4 0d 02 c0    	push   DWORD PTR ds:0xc0020da4
c00157e3:	e8 6e 2f ff ff       	call   c0008756 <VgaText::puts(char const*)>
c00157e8:	59                   	pop    ecx
c00157e9:	58                   	pop    eax
c00157ea:	53                   	push   ebx
c00157eb:	ff 35 a4 0d 02 c0    	push   DWORD PTR ds:0xc0020da4
c00157f1:	e8 60 2f ff ff       	call   c0008756 <VgaText::puts(char const*)>
c00157f6:	58                   	pop    eax
c00157f7:	5a                   	pop    edx
c00157f8:	68 50 f1 01 c0       	push   0xc001f150
c00157fd:	ff 35 a4 0d 02 c0    	push   DWORD PTR ds:0xc0020da4
c0015803:	e8 4e 2f ff ff       	call   c0008756 <VgaText::puts(char const*)>
c0015808:	83 c4 10             	add    esp,0x10
c001580b:	eb fe                	jmp    c001580b <HalPanic(char const*)+0xf7>

c001580d <HalQueryPerformanceCounter()>:
c001580d:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c0015812:	31 d2                	xor    edx,edx
c0015814:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001581a:	31 c0                	xor    eax,eax
c001581c:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0015823:	74 02                	je     c0015827 <HalQueryPerformanceCounter()+0x1a>
c0015825:	0f 31                	rdtsc  
c0015827:	c3                   	ret    

c0015828 <HalInitialise()>:
c0015828:	53                   	push   ebx
c0015829:	83 ec 08             	sub    esp,0x8
c001582c:	e8 6e 68 ff ff       	call   c000c09f <setupINTS()>
c0015831:	80 3d 20 36 02 c0 00 	cmp    BYTE PTR ds:0xc0023620,0x0
c0015838:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c001583d:	75 07                	jne    c0015846 <HalInitialise()+0x1e>
c001583f:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c0015846:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001584c:	83 e0 01             	and    eax,0x1
c001584f:	a2 a0 40 02 c0       	mov    ds:0xc00240a0,al
c0015854:	e8 a7 02 00 00       	call   c0015b00 <picOpen()>
c0015859:	80 3d a0 40 02 c0 00 	cmp    BYTE PTR ds:0xc00240a0,0x0
c0015860:	74 0a                	je     c001586c <HalInitialise()+0x44>
c0015862:	e8 e1 01 00 00       	call   c0015a48 <picDisable()>
c0015867:	e8 26 5d 00 00       	call   c001b592 <apicOpen()>
c001586c:	bb 0f 00 00 00       	mov    ebx,0xf
c0015871:	50                   	push   eax
c0015872:	6a 00                	push   0x0
c0015874:	68 ed 54 01 c0       	push   0xc00154ed
c0015879:	6a 00                	push   0x0
c001587b:	e8 ec 65 ff ff       	call   c000be6c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015880:	83 c4 0c             	add    esp,0xc
c0015883:	6a 00                	push   0x0
c0015885:	68 ed 54 01 c0       	push   0xc00154ed
c001588a:	6a 01                	push   0x1
c001588c:	e8 db 65 ff ff       	call   c000be6c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015891:	83 c4 0c             	add    esp,0xc
c0015894:	6a 00                	push   0x0
c0015896:	68 ed 4f 01 c0       	push   0xc0014fed
c001589b:	6a 02                	push   0x2
c001589d:	e8 ca 65 ff ff       	call   c000be6c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158a2:	83 c4 0c             	add    esp,0xc
c00158a5:	6a 00                	push   0x0
c00158a7:	68 ed 54 01 c0       	push   0xc00154ed
c00158ac:	6a 03                	push   0x3
c00158ae:	e8 b9 65 ff ff       	call   c000be6c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158b3:	83 c4 0c             	add    esp,0xc
c00158b6:	6a 00                	push   0x0
c00158b8:	68 ed 54 01 c0       	push   0xc00154ed
c00158bd:	6a 04                	push   0x4
c00158bf:	e8 a8 65 ff ff       	call   c000be6c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158c4:	83 c4 0c             	add    esp,0xc
c00158c7:	6a 00                	push   0x0
c00158c9:	68 ed 54 01 c0       	push   0xc00154ed
c00158ce:	6a 05                	push   0x5
c00158d0:	e8 97 65 ff ff       	call   c000be6c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158d5:	83 c4 0c             	add    esp,0xc
c00158d8:	6a 00                	push   0x0
c00158da:	68 21 55 01 c0       	push   0xc0015521
c00158df:	6a 06                	push   0x6
c00158e1:	e8 86 65 ff ff       	call   c000be6c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158e6:	83 c4 0c             	add    esp,0xc
c00158e9:	6a 00                	push   0x0
c00158eb:	68 06 50 01 c0       	push   0xc0015006
c00158f0:	6a 08                	push   0x8
c00158f2:	e8 75 65 ff ff       	call   c000be6c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158f7:	83 c4 0c             	add    esp,0xc
c00158fa:	6a 00                	push   0x0
c00158fc:	68 ed 54 01 c0       	push   0xc00154ed
c0015901:	6a 09                	push   0x9
c0015903:	e8 64 65 ff ff       	call   c000be6c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015908:	83 c4 0c             	add    esp,0xc
c001590b:	6a 00                	push   0x0
c001590d:	68 ed 54 01 c0       	push   0xc00154ed
c0015912:	6a 0a                	push   0xa
c0015914:	e8 53 65 ff ff       	call   c000be6c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015919:	83 c4 0c             	add    esp,0xc
c001591c:	6a 00                	push   0x0
c001591e:	68 ed 54 01 c0       	push   0xc00154ed
c0015923:	6a 0b                	push   0xb
c0015925:	e8 42 65 ff ff       	call   c000be6c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001592a:	83 c4 0c             	add    esp,0xc
c001592d:	6a 00                	push   0x0
c001592f:	68 02 54 01 c0       	push   0xc0015402
c0015934:	6a 0d                	push   0xd
c0015936:	e8 31 65 ff ff       	call   c000be6c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001593b:	83 c4 0c             	add    esp,0xc
c001593e:	6a 00                	push   0x0
c0015940:	68 67 54 01 c0       	push   0xc0015467
c0015945:	6a 0e                	push   0xe
c0015947:	e8 20 65 ff ff       	call   c000be6c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001594c:	83 c4 10             	add    esp,0x10
c001594f:	50                   	push   eax
c0015950:	6a 00                	push   0x0
c0015952:	68 ed 54 01 c0       	push   0xc00154ed
c0015957:	53                   	push   ebx
c0015958:	43                   	inc    ebx
c0015959:	e8 0e 65 ff ff       	call   c000be6c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001595e:	83 c4 10             	add    esp,0x10
c0015961:	83 fb 1e             	cmp    ebx,0x1e
c0015964:	75 e9                	jne    c001594f <HalInitialise()+0x127>
c0015966:	50                   	push   eax
c0015967:	6a 00                	push   0x0
c0015969:	68 2f 14 01 c0       	push   0xc001142f
c001596e:	6a 60                	push   0x60
c0015970:	e8 f7 64 ff ff       	call   c000be6c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015975:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c001597a:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0015984:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001598b:	e8 29 1e ff ff       	call   c00077b9 <malloc>
c0015990:	89 04 24             	mov    DWORD PTR [esp],eax
c0015993:	89 c3                	mov    ebx,eax
c0015995:	e8 2e 09 00 00       	call   c00162c8 <RTC::RTC()>
c001599a:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c00159a4:	5a                   	pop    edx
c00159a5:	59                   	pop    ecx
c00159a6:	53                   	push   ebx
c00159a7:	ff 35 58 0d 02 c0    	push   DWORD PTR ds:0xc0020d58
c00159ad:	e8 86 5f ff ff       	call   c000b938 <Device::addChild(Device*)>
c00159b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00159b4:	6a 00                	push   0x0
c00159b6:	6a 00                	push   0x0
c00159b8:	6a 00                	push   0x0
c00159ba:	53                   	push   ebx
c00159bb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00159be:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c00159c3:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00159c9:	83 c4 28             	add    esp,0x28
c00159cc:	5b                   	pop    ebx
c00159cd:	c3                   	ret    

c00159ce <HalMakeBeep(int)>:
c00159ce:	53                   	push   ebx
c00159cf:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00159d3:	85 db                	test   ebx,ebx
c00159d5:	75 07                	jne    c00159de <HalMakeBeep(int)+0x10>
c00159d7:	e4 61                	in     al,0x61
c00159d9:	83 e0 fc             	and    eax,0xfffffffc
c00159dc:	eb 26                	jmp    c0015a04 <HalMakeBeep(int)+0x36>
c00159de:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00159e3:	99                   	cdq    
c00159e4:	f7 fb                	idiv   ebx
c00159e6:	89 c1                	mov    ecx,eax
c00159e8:	b0 b6                	mov    al,0xb6
c00159ea:	e6 43                	out    0x43,al
c00159ec:	88 c8                	mov    al,cl
c00159ee:	e6 42                	out    0x42,al
c00159f0:	89 c8                	mov    eax,ecx
c00159f2:	c1 e8 08             	shr    eax,0x8
c00159f5:	e6 42                	out    0x42,al
c00159f7:	e4 61                	in     al,0x61
c00159f9:	88 c2                	mov    dl,al
c00159fb:	83 ca 03             	or     edx,0x3
c00159fe:	38 c2                	cmp    dl,al
c0015a00:	74 04                	je     c0015a06 <HalMakeBeep(int)+0x38>
c0015a02:	88 d0                	mov    al,dl
c0015a04:	e6 61                	out    0x61,al
c0015a06:	5b                   	pop    ebx
c0015a07:	c3                   	ret    

c0015a08 <HalGetRand()>:
c0015a08:	31 c0                	xor    eax,eax
c0015a0a:	c3                   	ret    

c0015a0b <HalEndOfInterrupt(int)>:
c0015a0b:	80 3d a0 40 02 c0 00 	cmp    BYTE PTR ds:0xc00240a0,0x0
c0015a12:	74 23                	je     c0015a37 <HalEndOfInterrupt(int)+0x2c>
c0015a14:	83 ec 14             	sub    esp,0x14
c0015a17:	6a 1b                	push   0x1b
c0015a19:	ff 35 58 0d 02 c0    	push   DWORD PTR ds:0xc0020d58
c0015a1f:	e8 ce 13 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c0015a24:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015a29:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0015a33:	83 c4 1c             	add    esp,0x1c
c0015a36:	c3                   	ret    
c0015a37:	e9 54 02 00 00       	jmp    c0015c90 <picEOI(int)>

c0015a3c <HalRestart()>:
c0015a3c:	c3                   	ret    

c0015a3d <HalShutdown()>:
c0015a3d:	c3                   	ret    

c0015a3e <HalSleep()>:
c0015a3e:	c3                   	ret    
c0015a3f:	90                   	nop

c0015a40 <picIoWait()>:
c0015a40:	eb 00                	jmp    c0015a42 <picIoWait()+0x2>
c0015a42:	eb 00                	jmp    c0015a44 <picIoWait()+0x4>
c0015a44:	90                   	nop
c0015a45:	c3                   	ret    
c0015a46:	66 90                	xchg   ax,ax

c0015a48 <picDisable()>:
c0015a48:	83 ec 10             	sub    esp,0x10
c0015a4b:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0015a52:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0015a57:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015a5b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015a60:	ee                   	out    dx,al
c0015a61:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0015a68:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0015a6d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015a71:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0015a76:	ee                   	out    dx,al
c0015a77:	90                   	nop
c0015a78:	83 c4 10             	add    esp,0x10
c0015a7b:	c3                   	ret    

c0015a7c <picGetIRQReg(int)>:
c0015a7c:	83 ec 10             	sub    esp,0x10
c0015a7f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015a83:	25 ff 00 00 00       	and    eax,0xff
c0015a88:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015a8f:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0015a93:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015a97:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015a9c:	ee                   	out    dx,al
c0015a9d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015aa1:	25 ff 00 00 00       	and    eax,0xff
c0015aa6:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015aad:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0015ab1:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015ab5:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015aba:	ee                   	out    dx,al
c0015abb:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0015ac2:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0015ac7:	89 c2                	mov    edx,eax
c0015ac9:	ec                   	in     al,dx
c0015aca:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0015ace:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015ad2:	25 ff 00 00 00       	and    eax,0xff
c0015ad7:	c1 e0 08             	shl    eax,0x8
c0015ada:	89 c1                	mov    ecx,eax
c0015adc:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0015ae3:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015ae8:	89 c2                	mov    edx,eax
c0015aea:	ec                   	in     al,dx
c0015aeb:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0015aef:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015af3:	25 ff 00 00 00       	and    eax,0xff
c0015af8:	09 c8                	or     eax,ecx
c0015afa:	83 c4 10             	add    esp,0x10
c0015afd:	c3                   	ret    
c0015afe:	66 90                	xchg   ax,ax

c0015b00 <picOpen()>:
c0015b00:	83 ec 50             	sub    esp,0x50
c0015b03:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0015b0a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0015b0f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015b13:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015b17:	ee                   	out    dx,al
c0015b18:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0015b1f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0015b24:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0015b28:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015b2c:	ee                   	out    dx,al
c0015b2d:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0015b35:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0015b3d:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0015b44:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015b48:	89 c2                	mov    edx,eax
c0015b4a:	ec                   	in     al,dx
c0015b4b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0015b4f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0015b53:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0015b57:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0015b5e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015b62:	89 c2                	mov    edx,eax
c0015b64:	ec                   	in     al,dx
c0015b65:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015b69:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0015b6d:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0015b71:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0015b78:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0015b7d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0015b81:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015b85:	ee                   	out    dx,al
c0015b86:	e8 b5 fe ff ff       	call   c0015a40 <picIoWait()>
c0015b8b:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0015b92:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0015b97:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015b9b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015b9f:	ee                   	out    dx,al
c0015ba0:	e8 9b fe ff ff       	call   c0015a40 <picIoWait()>
c0015ba5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015ba9:	25 ff 00 00 00       	and    eax,0xff
c0015bae:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0015bb5:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0015bb9:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0015bbd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015bc1:	ee                   	out    dx,al
c0015bc2:	e8 79 fe ff ff       	call   c0015a40 <picIoWait()>
c0015bc7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015bcb:	25 ff 00 00 00       	and    eax,0xff
c0015bd0:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0015bd7:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015bdb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0015bdf:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015be3:	ee                   	out    dx,al
c0015be4:	e8 57 fe ff ff       	call   c0015a40 <picIoWait()>
c0015be9:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0015bf0:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0015bf5:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0015bf9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015bfd:	ee                   	out    dx,al
c0015bfe:	e8 3d fe ff ff       	call   c0015a40 <picIoWait()>
c0015c03:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0015c0a:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0015c0f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0015c13:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015c17:	ee                   	out    dx,al
c0015c18:	e8 23 fe ff ff       	call   c0015a40 <picIoWait()>
c0015c1d:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0015c24:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0015c29:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015c2d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015c31:	ee                   	out    dx,al
c0015c32:	e8 09 fe ff ff       	call   c0015a40 <picIoWait()>
c0015c37:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0015c3e:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0015c43:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0015c47:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015c4b:	ee                   	out    dx,al
c0015c4c:	e8 ef fd ff ff       	call   c0015a40 <picIoWait()>
c0015c51:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0015c55:	25 ff 00 00 00       	and    eax,0xff
c0015c5a:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0015c61:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0015c65:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0015c69:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015c6d:	ee                   	out    dx,al
c0015c6e:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c0015c72:	25 ff 00 00 00       	and    eax,0xff
c0015c77:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0015c7e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0015c82:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0015c86:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0015c8a:	ee                   	out    dx,al
c0015c8b:	90                   	nop
c0015c8c:	83 c4 50             	add    esp,0x50
c0015c8f:	c3                   	ret    

c0015c90 <picEOI(int)>:
c0015c90:	83 ec 10             	sub    esp,0x10
c0015c93:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015c98:	75 22                	jne    c0015cbc <picEOI(int)+0x2c>
c0015c9a:	6a 0b                	push   0xb
c0015c9c:	e8 db fd ff ff       	call   c0015a7c <picGetIRQReg(int)>
c0015ca1:	83 c4 04             	add    esp,0x4
c0015ca4:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0015ca9:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015cae:	25 ff ff 00 00       	and    eax,0xffff
c0015cb3:	25 80 00 00 00       	and    eax,0x80
c0015cb8:	74 72                	je     c0015d2c <picEOI(int)+0x9c>
c0015cba:	66 90                	xchg   ax,ax
c0015cbc:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0015cc1:	75 31                	jne    c0015cf4 <picEOI(int)+0x64>
c0015cc3:	6a 0b                	push   0xb
c0015cc5:	e8 b2 fd ff ff       	call   c0015a7c <picGetIRQReg(int)>
c0015cca:	83 c4 04             	add    esp,0x4
c0015ccd:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0015cd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015cd6:	66 85 c0             	test   ax,ax
c0015cd9:	78 19                	js     c0015cf4 <picEOI(int)+0x64>
c0015cdb:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0015ce2:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0015ce7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015ceb:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015cf0:	ee                   	out    dx,al
c0015cf1:	eb 3d                	jmp    c0015d30 <picEOI(int)+0xa0>
c0015cf3:	90                   	nop
c0015cf4:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015cf9:	7e 19                	jle    c0015d14 <picEOI(int)+0x84>
c0015cfb:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015d02:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0015d07:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015d0b:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015d10:	ee                   	out    dx,al
c0015d11:	8d 76 00             	lea    esi,[esi+0x0]
c0015d14:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015d1b:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0015d20:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015d24:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015d29:	ee                   	out    dx,al
c0015d2a:	eb 04                	jmp    c0015d30 <picEOI(int)+0xa0>
c0015d2c:	90                   	nop
c0015d2d:	8d 76 00             	lea    esi,[esi+0x0]
c0015d30:	83 c4 10             	add    esp,0x10
c0015d33:	c3                   	ret    

c0015d34 <RTC::open(int, int, void*)>:
c0015d34:	31 c0                	xor    eax,eax
c0015d36:	c3                   	ret    
c0015d37:	90                   	nop

c0015d38 <RTC::close(int, int, void*)>:
c0015d38:	31 c0                	xor    eax,eax
c0015d3a:	c3                   	ret    
c0015d3b:	90                   	nop

c0015d3c <RTC::timeInSecondsUTC()>:
c0015d3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d40:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0015d46:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015d4c:	c3                   	ret    
c0015d4d:	90                   	nop

c0015d4e <RTC::timeInDatetimeUTC()>:
c0015d4e:	53                   	push   ebx
c0015d4f:	83 ec 14             	sub    esp,0x14
c0015d52:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015d56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d5a:	8b 10                	mov    edx,DWORD PTR [eax]
c0015d5c:	50                   	push   eax
c0015d5d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015d60:	83 c4 0c             	add    esp,0xc
c0015d63:	52                   	push   edx
c0015d64:	50                   	push   eax
c0015d65:	53                   	push   ebx
c0015d66:	e8 41 59 ff ff       	call   c000b6ac <secondsToDatetime(unsigned long long)>
c0015d6b:	89 d8                	mov    eax,ebx
c0015d6d:	83 c4 14             	add    esp,0x14
c0015d70:	5b                   	pop    ebx
c0015d71:	c2 04 00             	ret    0x4

c0015d74 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0015d74:	56                   	push   esi
c0015d75:	53                   	push   ebx
c0015d76:	83 ec 14             	sub    esp,0x14
c0015d79:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015d7d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015d7f:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0015d82:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015d86:	52                   	push   edx
c0015d87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d8b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d8f:	50                   	push   eax
c0015d90:	e8 17 59 ff ff       	call   c000b6ac <secondsToDatetime(unsigned long long)>
c0015d95:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015d99:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015d9d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015da1:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0015da5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015da9:	89 f0                	mov    eax,esi
c0015dab:	83 c4 20             	add    esp,0x20
c0015dae:	5b                   	pop    ebx
c0015daf:	5e                   	pop    esi
c0015db0:	ff e0                	jmp    eax

c0015db2 <RTC::~RTC()>:
c0015db2:	83 ec 0c             	sub    esp,0xc
c0015db5:	ba f0 f1 01 c0       	mov    edx,0xc001f1f0
c0015dba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015dbe:	89 10                	mov    DWORD PTR [eax],edx
c0015dc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015dc4:	83 ec 0c             	sub    esp,0xc
c0015dc7:	50                   	push   eax
c0015dc8:	e8 63 56 ff ff       	call   c000b430 <Clock::~Clock()>
c0015dcd:	83 c4 10             	add    esp,0x10
c0015dd0:	90                   	nop
c0015dd1:	83 c4 0c             	add    esp,0xc
c0015dd4:	c3                   	ret    
c0015dd5:	90                   	nop

c0015dd6 <RTC::~RTC()>:
c0015dd6:	83 ec 0c             	sub    esp,0xc
c0015dd9:	83 ec 0c             	sub    esp,0xc
c0015ddc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015de0:	e8 cd ff ff ff       	call   c0015db2 <RTC::~RTC()>
c0015de5:	83 c4 10             	add    esp,0x10
c0015de8:	83 ec 08             	sub    esp,0x8
c0015deb:	68 60 01 00 00       	push   0x160
c0015df0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015df4:	e8 09 46 ff ff       	call   c000a402 <operator delete(void*, unsigned long)>
c0015df9:	83 c4 10             	add    esp,0x10
c0015dfc:	83 c4 0c             	add    esp,0xc
c0015dff:	c3                   	ret    

c0015e00 <RTC::get_update_in_progress_flag()>:
c0015e00:	83 ec 14             	sub    esp,0x14
c0015e03:	6a 0a                	push   0xa
c0015e05:	ff 35 58 0d 02 c0    	push   DWORD PTR ds:0xc0020d58
c0015e0b:	e8 96 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e10:	83 c4 1c             	add    esp,0x1c
c0015e13:	c0 e8 07             	shr    al,0x7
c0015e16:	c3                   	ret    
c0015e17:	90                   	nop

c0015e18 <RTC::completeRTCRefresh()>:
c0015e18:	55                   	push   ebp
c0015e19:	57                   	push   edi
c0015e1a:	56                   	push   esi
c0015e1b:	53                   	push   ebx
c0015e1c:	83 ec 2c             	sub    esp,0x2c
c0015e1f:	8b 1d 2c 33 02 c0    	mov    ebx,DWORD PTR ds:0xc002332c
c0015e25:	83 ec 0c             	sub    esp,0xc
c0015e28:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015e2c:	e8 cf ff ff ff       	call   c0015e00 <RTC::get_update_in_progress_flag()>
c0015e31:	83 c4 10             	add    esp,0x10
c0015e34:	84 c0                	test   al,al
c0015e36:	74 0e                	je     c0015e46 <RTC::completeRTCRefresh()+0x2e>
c0015e38:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015e3e:	3b 05 2c 33 02 c0    	cmp    eax,DWORD PTR ds:0xc002332c
c0015e44:	73 df                	jae    c0015e25 <RTC::completeRTCRefresh()+0xd>
c0015e46:	55                   	push   ebp
c0015e47:	55                   	push   ebp
c0015e48:	6a 00                	push   0x0
c0015e4a:	ff 35 58 0d 02 c0    	push   DWORD PTR ds:0xc0020d58
c0015e50:	e8 51 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e55:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015e59:	58                   	pop    eax
c0015e5a:	5a                   	pop    edx
c0015e5b:	6a 02                	push   0x2
c0015e5d:	ff 35 58 0d 02 c0    	push   DWORD PTR ds:0xc0020d58
c0015e63:	e8 3e 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e68:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0015e6c:	59                   	pop    ecx
c0015e6d:	5b                   	pop    ebx
c0015e6e:	6a 04                	push   0x4
c0015e70:	ff 35 58 0d 02 c0    	push   DWORD PTR ds:0xc0020d58
c0015e76:	e8 2b 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e7b:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0015e7f:	5e                   	pop    esi
c0015e80:	5f                   	pop    edi
c0015e81:	6a 07                	push   0x7
c0015e83:	ff 35 58 0d 02 c0    	push   DWORD PTR ds:0xc0020d58
c0015e89:	e8 18 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e8e:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015e92:	5d                   	pop    ebp
c0015e93:	58                   	pop    eax
c0015e94:	6a 08                	push   0x8
c0015e96:	ff 35 58 0d 02 c0    	push   DWORD PTR ds:0xc0020d58
c0015e9c:	e8 05 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015ea1:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0015ea5:	58                   	pop    eax
c0015ea6:	5a                   	pop    edx
c0015ea7:	6a 09                	push   0x9
c0015ea9:	ff 35 58 0d 02 c0    	push   DWORD PTR ds:0xc0020d58
c0015eaf:	e8 f2 0f ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015eb4:	83 c4 10             	add    esp,0x10
c0015eb7:	0f b6 e8             	movzx  ebp,al
c0015eba:	8b 1d 2c 33 02 c0    	mov    ebx,DWORD PTR ds:0xc002332c
c0015ec0:	83 ec 0c             	sub    esp,0xc
c0015ec3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015ec7:	e8 34 ff ff ff       	call   c0015e00 <RTC::get_update_in_progress_flag()>
c0015ecc:	83 c4 10             	add    esp,0x10
c0015ecf:	84 c0                	test   al,al
c0015ed1:	74 0e                	je     c0015ee1 <RTC::completeRTCRefresh()+0xc9>
c0015ed3:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015ed9:	3b 05 2c 33 02 c0    	cmp    eax,DWORD PTR ds:0xc002332c
c0015edf:	73 df                	jae    c0015ec0 <RTC::completeRTCRefresh()+0xa8>
c0015ee1:	50                   	push   eax
c0015ee2:	50                   	push   eax
c0015ee3:	6a 00                	push   0x0
c0015ee5:	ff 35 58 0d 02 c0    	push   DWORD PTR ds:0xc0020d58
c0015eeb:	e8 b6 0f ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015ef0:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0015ef4:	58                   	pop    eax
c0015ef5:	5a                   	pop    edx
c0015ef6:	6a 02                	push   0x2
c0015ef8:	ff 35 58 0d 02 c0    	push   DWORD PTR ds:0xc0020d58
c0015efe:	e8 a3 0f ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015f03:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015f07:	59                   	pop    ecx
c0015f08:	5b                   	pop    ebx
c0015f09:	6a 04                	push   0x4
c0015f0b:	ff 35 58 0d 02 c0    	push   DWORD PTR ds:0xc0020d58
c0015f11:	e8 90 0f ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015f16:	5e                   	pop    esi
c0015f17:	88 c3                	mov    bl,al
c0015f19:	5f                   	pop    edi
c0015f1a:	6a 07                	push   0x7
c0015f1c:	ff 35 58 0d 02 c0    	push   DWORD PTR ds:0xc0020d58
c0015f22:	e8 7f 0f ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015f27:	89 c6                	mov    esi,eax
c0015f29:	58                   	pop    eax
c0015f2a:	5a                   	pop    edx
c0015f2b:	6a 08                	push   0x8
c0015f2d:	ff 35 58 0d 02 c0    	push   DWORD PTR ds:0xc0020d58
c0015f33:	e8 6e 0f ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015f38:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0015f3c:	59                   	pop    ecx
c0015f3d:	5f                   	pop    edi
c0015f3e:	6a 09                	push   0x9
c0015f40:	ff 35 58 0d 02 c0    	push   DWORD PTR ds:0xc0020d58
c0015f46:	e8 5b 0f ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015f4b:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0015f4f:	0f b6 f8             	movzx  edi,al
c0015f52:	83 c4 10             	add    esp,0x10
c0015f55:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0015f59:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015f5d:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0015f61:	89 f1                	mov    ecx,esi
c0015f63:	0f 94 c0             	sete   al
c0015f66:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0015f6a:	0f 94 c2             	sete   dl
c0015f6d:	21 d0                	and    eax,edx
c0015f6f:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0015f73:	0f 94 c2             	sete   dl
c0015f76:	21 c2                	and    edx,eax
c0015f78:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0015f7c:	0f 94 c0             	sete   al
c0015f7f:	21 d0                	and    eax,edx
c0015f81:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015f85:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0015f89:	0f 94 c1             	sete   cl
c0015f8c:	84 c8                	test   al,cl
c0015f8e:	75 29                	jne    c0015fb9 <RTC::completeRTCRefresh()+0x1a1>
c0015f90:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015f94:	89 fd                	mov    ebp,edi
c0015f96:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015f9a:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0015f9e:	89 f0                	mov    eax,esi
c0015fa0:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0015fa4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015fa8:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015fac:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015fb0:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015fb4:	e9 01 ff ff ff       	jmp    c0015eba <RTC::completeRTCRefresh()+0xa2>
c0015fb9:	39 fd                	cmp    ebp,edi
c0015fbb:	75 d3                	jne    c0015f90 <RTC::completeRTCRefresh()+0x178>
c0015fbd:	55                   	push   ebp
c0015fbe:	55                   	push   ebp
c0015fbf:	6a 0b                	push   0xb
c0015fc1:	ff 35 58 0d 02 c0    	push   DWORD PTR ds:0xc0020d58
c0015fc7:	e8 da 0e ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015fcc:	83 c4 10             	add    esp,0x10
c0015fcf:	89 c5                	mov    ebp,eax
c0015fd1:	a8 04                	test   al,0x4
c0015fd3:	75 78                	jne    c001604d <RTC::completeRTCRefresh()+0x235>
c0015fd5:	b1 0a                	mov    cl,0xa
c0015fd7:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0015fdb:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015fdf:	83 e2 0f             	and    edx,0xf
c0015fe2:	c0 e8 04             	shr    al,0x4
c0015fe5:	c1 ef 04             	shr    edi,0x4
c0015fe8:	f6 e1                	mul    cl
c0015fea:	6b ff 0a             	imul   edi,edi,0xa
c0015fed:	01 d0                	add    eax,edx
c0015fef:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015ff3:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0015ff7:	83 e2 0f             	and    edx,0xf
c0015ffa:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015ffe:	c0 e8 04             	shr    al,0x4
c0016001:	f6 e1                	mul    cl
c0016003:	01 d0                	add    eax,edx
c0016005:	88 da                	mov    dl,bl
c0016007:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001600b:	83 e2 0f             	and    edx,0xf
c001600e:	88 d8                	mov    al,bl
c0016010:	83 e3 80             	and    ebx,0xffffff80
c0016013:	c0 e8 04             	shr    al,0x4
c0016016:	83 e0 07             	and    eax,0x7
c0016019:	f6 e1                	mul    cl
c001601b:	01 d0                	add    eax,edx
c001601d:	89 f2                	mov    edx,esi
c001601f:	09 c3                	or     ebx,eax
c0016021:	83 e2 0f             	and    edx,0xf
c0016024:	89 f0                	mov    eax,esi
c0016026:	c0 e8 04             	shr    al,0x4
c0016029:	f6 e1                	mul    cl
c001602b:	8d 34 02             	lea    esi,[edx+eax*1]
c001602e:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0016032:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0016036:	83 e2 0f             	and    edx,0xf
c0016039:	c0 e8 04             	shr    al,0x4
c001603c:	f6 e1                	mul    cl
c001603e:	01 d0                	add    eax,edx
c0016040:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0016044:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016048:	83 e0 0f             	and    eax,0xf
c001604b:	01 c7                	add    edi,eax
c001604d:	83 e5 02             	and    ebp,0x2
c0016050:	75 14                	jne    c0016066 <RTC::completeRTCRefresh()+0x24e>
c0016052:	84 db                	test   bl,bl
c0016054:	79 10                	jns    c0016066 <RTC::completeRTCRefresh()+0x24e>
c0016056:	83 e3 7f             	and    ebx,0x7f
c0016059:	b9 18 00 00 00       	mov    ecx,0x18
c001605e:	8d 43 0c             	lea    eax,[ebx+0xc]
c0016061:	99                   	cdq    
c0016062:	f7 f9                	idiv   ecx
c0016064:	88 d3                	mov    bl,dl
c0016066:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c001606c:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0016072:	77 06                	ja     c001607a <RTC::completeRTCRefresh()+0x262>
c0016074:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c001607a:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c001607f:	31 d2                	xor    edx,edx
c0016081:	c1 e1 10             	shl    ecx,0x10
c0016084:	89 d7                	mov    edi,edx
c0016086:	c1 e5 10             	shl    ebp,0x10
c0016089:	31 c0                	xor    eax,eax
c001608b:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0016091:	09 cf                	or     edi,ecx
c0016093:	89 fa                	mov    edx,edi
c0016095:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0016099:	88 da                	mov    dl,bl
c001609b:	89 f3                	mov    ebx,esi
c001609d:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c00160a1:	88 d8                	mov    al,bl
c00160a3:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c00160a7:	0f b7 c8             	movzx  ecx,ax
c00160aa:	09 e9                	or     ecx,ebp
c00160ac:	89 c8                	mov    eax,ecx
c00160ae:	51                   	push   ecx
c00160af:	51                   	push   ecx
c00160b0:	52                   	push   edx
c00160b1:	50                   	push   eax
c00160b2:	e8 68 54 ff ff       	call   c000b51f <datetimeToSeconds(datetime_t)>
c00160b7:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00160bb:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c00160c1:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c00160c7:	83 c4 3c             	add    esp,0x3c
c00160ca:	5b                   	pop    ebx
c00160cb:	5e                   	pop    esi
c00160cc:	5f                   	pop    edi
c00160cd:	5d                   	pop    ebp
c00160ce:	c3                   	ret    
c00160cf:	90                   	nop

c00160d0 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c00160d0:	55                   	push   ebp
c00160d1:	57                   	push   edi
c00160d2:	56                   	push   esi
c00160d3:	53                   	push   ebx
c00160d4:	83 ec 30             	sub    esp,0x30
c00160d7:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00160db:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00160df:	6a 00                	push   0x0
c00160e1:	6a 00                	push   0x0
c00160e3:	ff 35 58 0d 02 c0    	push   DWORD PTR ds:0xc0020d58
c00160e9:	e8 ce 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00160ee:	83 c4 0c             	add    esp,0xc
c00160f1:	6a 00                	push   0x0
c00160f3:	6a 02                	push   0x2
c00160f5:	ff 35 58 0d 02 c0    	push   DWORD PTR ds:0xc0020d58
c00160fb:	e8 bc 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0016100:	31 d2                	xor    edx,edx
c0016102:	89 f9                	mov    ecx,edi
c0016104:	89 f8                	mov    eax,edi
c0016106:	c1 e9 10             	shr    ecx,0x10
c0016109:	0f b6 c4             	movzx  eax,ah
c001610c:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0016110:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0016114:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016118:	b9 64 00 00 00       	mov    ecx,0x64
c001611d:	89 f0                	mov    eax,esi
c001611f:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0016123:	89 f0                	mov    eax,esi
c0016125:	0f b6 c4             	movzx  eax,ah
c0016128:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001612c:	89 f0                	mov    eax,esi
c001612e:	c1 e8 10             	shr    eax,0x10
c0016131:	66 f7 f1             	div    cx
c0016134:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0016139:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c001613e:	59                   	pop    ecx
c001613f:	5b                   	pop    ebx
c0016140:	89 fb                	mov    ebx,edi
c0016142:	6a 0b                	push   0xb
c0016144:	ff 35 58 0d 02 c0    	push   DWORD PTR ds:0xc0020d58
c001614a:	e8 57 0d ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c001614f:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c0016153:	83 c4 10             	add    esp,0x10
c0016156:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c001615b:	75 74                	jne    c00161d1 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c001615d:	b2 0a                	mov    dl,0xa
c001615f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0016163:	0f b6 c1             	movzx  eax,cl
c0016166:	f6 f2                	div    dl
c0016168:	88 c3                	mov    bl,al
c001616a:	88 e0                	mov    al,ah
c001616c:	c1 e3 04             	shl    ebx,0x4
c001616f:	09 c3                	or     ebx,eax
c0016171:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0016176:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c001617a:	f6 f2                	div    dl
c001617c:	88 c1                	mov    cl,al
c001617e:	88 e0                	mov    al,ah
c0016180:	c1 e1 04             	shl    ecx,0x4
c0016183:	09 c1                	or     ecx,eax
c0016185:	89 f8                	mov    eax,edi
c0016187:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001618b:	0f b6 c0             	movzx  eax,al
c001618e:	f6 f2                	div    dl
c0016190:	88 c3                	mov    bl,al
c0016192:	88 e0                	mov    al,ah
c0016194:	c1 e3 04             	shl    ebx,0x4
c0016197:	09 c3                	or     ebx,eax
c0016199:	89 f0                	mov    eax,esi
c001619b:	0f b6 c0             	movzx  eax,al
c001619e:	f6 f2                	div    dl
c00161a0:	88 c1                	mov    cl,al
c00161a2:	88 e0                	mov    al,ah
c00161a4:	c1 e1 04             	shl    ecx,0x4
c00161a7:	09 c1                	or     ecx,eax
c00161a9:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00161ae:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c00161b2:	f6 f2                	div    dl
c00161b4:	88 c1                	mov    cl,al
c00161b6:	88 e0                	mov    al,ah
c00161b8:	c1 e1 04             	shl    ecx,0x4
c00161bb:	09 c1                	or     ecx,eax
c00161bd:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c00161c2:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00161c6:	f6 f2                	div    dl
c00161c8:	89 c5                	mov    ebp,eax
c00161ca:	88 e0                	mov    al,ah
c00161cc:	c1 e5 04             	shl    ebp,0x4
c00161cf:	09 c5                	or     ebp,eax
c00161d1:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c00161d6:	75 17                	jne    c00161ef <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00161d8:	80 fb 0b             	cmp    bl,0xb
c00161db:	76 0c                	jbe    c00161e9 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c00161dd:	80 eb 0c             	sub    bl,0xc
c00161e0:	75 02                	jne    c00161e4 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c00161e2:	b3 0c                	mov    bl,0xc
c00161e4:	83 cb 80             	or     ebx,0xffffff80
c00161e7:	eb 06                	jmp    c00161ef <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00161e9:	84 db                	test   bl,bl
c00161eb:	75 02                	jne    c00161ef <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00161ed:	b3 0c                	mov    bl,0xc
c00161ef:	0f b6 db             	movzx  ebx,bl
c00161f2:	50                   	push   eax
c00161f3:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00161f8:	50                   	push   eax
c00161f9:	6a 00                	push   0x0
c00161fb:	ff 35 58 0d 02 c0    	push   DWORD PTR ds:0xc0020d58
c0016201:	e8 b6 0d ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0016206:	83 c4 0c             	add    esp,0xc
c0016209:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001620e:	50                   	push   eax
c001620f:	6a 02                	push   0x2
c0016211:	ff 35 58 0d 02 c0    	push   DWORD PTR ds:0xc0020d58
c0016217:	e8 a0 0d ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c001621c:	83 c4 0c             	add    esp,0xc
c001621f:	53                   	push   ebx
c0016220:	6a 04                	push   0x4
c0016222:	ff 35 58 0d 02 c0    	push   DWORD PTR ds:0xc0020d58
c0016228:	e8 8f 0d ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c001622d:	83 c4 0c             	add    esp,0xc
c0016230:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0016235:	50                   	push   eax
c0016236:	6a 07                	push   0x7
c0016238:	ff 35 58 0d 02 c0    	push   DWORD PTR ds:0xc0020d58
c001623e:	e8 79 0d ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0016243:	83 c4 0c             	add    esp,0xc
c0016246:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001624b:	50                   	push   eax
c001624c:	6a 08                	push   0x8
c001624e:	ff 35 58 0d 02 c0    	push   DWORD PTR ds:0xc0020d58
c0016254:	e8 63 0d ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0016259:	83 c4 0c             	add    esp,0xc
c001625c:	89 e8                	mov    eax,ebp
c001625e:	0f b6 e8             	movzx  ebp,al
c0016261:	55                   	push   ebp
c0016262:	6a 09                	push   0x9
c0016264:	ff 35 58 0d 02 c0    	push   DWORD PTR ds:0xc0020d58
c001626a:	e8 4d 0d ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c001626f:	5a                   	pop    edx
c0016270:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016274:	e8 9f fb ff ff       	call   c0015e18 <RTC::completeRTCRefresh()>
c0016279:	83 c4 3c             	add    esp,0x3c
c001627c:	b0 01                	mov    al,0x1
c001627e:	5b                   	pop    ebx
c001627f:	5e                   	pop    esi
c0016280:	5f                   	pop    edi
c0016281:	5d                   	pop    ebp
c0016282:	c3                   	ret    

c0016283 <rtcIRQHandler(regs*, void*)>:
c0016283:	53                   	push   ebx
c0016284:	83 ec 10             	sub    esp,0x10
c0016287:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001628b:	6a 0c                	push   0xc
c001628d:	ff 35 58 0d 02 c0    	push   DWORD PTR ds:0xc0020d58
c0016293:	e8 0e 0c ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0016298:	83 c4 10             	add    esp,0x10
c001629b:	84 c0                	test   al,al
c001629d:	79 24                	jns    c00162c3 <rtcIRQHandler(regs*, void*)+0x40>
c001629f:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c00162a6:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c00162ad:	66 ff 05 b4 40 02 c0 	inc    WORD PTR ds:0xc00240b4
c00162b4:	75 0d                	jne    c00162c3 <rtcIRQHandler(regs*, void*)+0x40>
c00162b6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00162ba:	83 c4 08             	add    esp,0x8
c00162bd:	5b                   	pop    ebx
c00162be:	e9 55 fb ff ff       	jmp    c0015e18 <RTC::completeRTCRefresh()>
c00162c3:	83 c4 08             	add    esp,0x8
c00162c6:	5b                   	pop    ebx
c00162c7:	c3                   	ret    

c00162c8 <RTC::RTC()>:
c00162c8:	83 ec 1c             	sub    esp,0x1c
c00162cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162cf:	83 ec 08             	sub    esp,0x8
c00162d2:	68 d3 f1 01 c0       	push   0xc001f1d3
c00162d7:	50                   	push   eax
c00162d8:	e8 1d 51 ff ff       	call   c000b3fa <Clock::Clock(char const*)>
c00162dd:	83 c4 10             	add    esp,0x10
c00162e0:	ba f0 f1 01 c0       	mov    edx,0xc001f1f0
c00162e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162e9:	89 10                	mov    DWORD PTR [eax],edx
c00162eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162ef:	83 ec 0c             	sub    esp,0xc
c00162f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00162f6:	6a 01                	push   0x1
c00162f8:	68 83 62 01 c0       	push   0xc0016283
c00162fd:	6a 08                	push   0x8
c00162ff:	50                   	push   eax
c0016300:	e8 df 55 ff ff       	call   c000b8e4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0016305:	83 c4 20             	add    esp,0x20
c0016308:	89 c2                	mov    edx,eax
c001630a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001630e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0016314:	fa                   	cli    
c0016315:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c001631a:	40                   	inc    eax
c001631b:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0016320:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c0016325:	83 ec 08             	sub    esp,0x8
c0016328:	6a 0b                	push   0xb
c001632a:	50                   	push   eax
c001632b:	e8 76 0b ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0016330:	83 c4 10             	add    esp,0x10
c0016333:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016337:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c001633c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0016340:	83 ca 10             	or     edx,0x10
c0016343:	81 e2 ff 00 00 00    	and    edx,0xff
c0016349:	83 ec 04             	sub    esp,0x4
c001634c:	52                   	push   edx
c001634d:	6a 0b                	push   0xb
c001634f:	50                   	push   eax
c0016350:	e8 67 0c ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0016355:	83 c4 10             	add    esp,0x10
c0016358:	83 ec 0c             	sub    esp,0xc
c001635b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001635f:	e8 b4 fa ff ff       	call   c0015e18 <RTC::completeRTCRefresh()>
c0016364:	83 c4 10             	add    esp,0x10
c0016367:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c001636c:	48                   	dec    eax
c001636d:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c0016372:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c0016377:	85 c0                	test   eax,eax
c0016379:	75 01                	jne    c001637c <RTC::RTC()+0xb4>
c001637b:	fb                   	sti    
c001637c:	90                   	nop
c001637d:	83 c4 1c             	add    esp,0x1c
c0016380:	c3                   	ret    
c0016381:	66 90                	xchg   ax,ax
c0016383:	90                   	nop

c0016384 <HalConsoleScroll(int, int)>:
c0016384:	83 ec 10             	sub    esp,0x10
c0016387:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001638f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0016397:	90                   	nop
c0016398:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001639d:	0f 8f e1 00 00 00    	jg     c0016484 <HalConsoleScroll(int, int)+0x100>
c00163a3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00163ab:	90                   	nop
c00163ac:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c00163b4:	0f 8f be 00 00 00    	jg     c0016478 <HalConsoleScroll(int, int)+0xf4>
c00163ba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00163be:	89 d0                	mov    eax,edx
c00163c0:	c1 e0 02             	shl    eax,0x2
c00163c3:	01 d0                	add    eax,edx
c00163c5:	c1 e0 05             	shl    eax,0x5
c00163c8:	89 c2                	mov    edx,eax
c00163ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00163ce:	01 d0                	add    eax,edx
c00163d0:	89 c2                	mov    edx,eax
c00163d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163d6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00163d9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00163dd:	89 d0                	mov    eax,edx
c00163df:	c1 e0 02             	shl    eax,0x2
c00163e2:	01 d0                	add    eax,edx
c00163e4:	c1 e0 05             	shl    eax,0x5
c00163e7:	89 c2                	mov    edx,eax
c00163e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00163ed:	01 d0                	add    eax,edx
c00163ef:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c00163f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163f9:	01 c2                	add    edx,eax
c00163fb:	8a 01                	mov    al,BYTE PTR [ecx]
c00163fd:	88 02                	mov    BYTE PTR [edx],al
c00163ff:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0016404:	75 66                	jne    c001646c <HalConsoleScroll(int, int)+0xe8>
c0016406:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001640a:	83 e0 01             	and    eax,0x1
c001640d:	74 39                	je     c0016448 <HalConsoleScroll(int, int)+0xc4>
c001640f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016413:	83 e0 0f             	and    eax,0xf
c0016416:	88 c2                	mov    dl,al
c0016418:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001641c:	c1 e0 04             	shl    eax,0x4
c001641f:	88 d1                	mov    cl,dl
c0016421:	09 c1                	or     ecx,eax
c0016423:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016427:	89 d0                	mov    eax,edx
c0016429:	c1 e0 02             	shl    eax,0x2
c001642c:	01 d0                	add    eax,edx
c001642e:	c1 e0 05             	shl    eax,0x5
c0016431:	89 c2                	mov    edx,eax
c0016433:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016437:	01 d0                	add    eax,edx
c0016439:	89 c2                	mov    edx,eax
c001643b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001643f:	01 d0                	add    eax,edx
c0016441:	88 ca                	mov    dl,cl
c0016443:	88 10                	mov    BYTE PTR [eax],dl
c0016445:	eb 25                	jmp    c001646c <HalConsoleScroll(int, int)+0xe8>
c0016447:	90                   	nop
c0016448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001644c:	89 d0                	mov    eax,edx
c001644e:	c1 e0 02             	shl    eax,0x2
c0016451:	01 d0                	add    eax,edx
c0016453:	c1 e0 05             	shl    eax,0x5
c0016456:	89 c2                	mov    edx,eax
c0016458:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001645c:	01 d0                	add    eax,edx
c001645e:	89 c2                	mov    edx,eax
c0016460:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016464:	01 d0                	add    eax,edx
c0016466:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0016469:	8d 76 00             	lea    esi,[esi+0x0]
c001646c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0016470:	e9 37 ff ff ff       	jmp    c00163ac <HalConsoleScroll(int, int)+0x28>
c0016475:	8d 76 00             	lea    esi,[esi+0x0]
c0016478:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001647c:	e9 17 ff ff ff       	jmp    c0016398 <HalConsoleScroll(int, int)+0x14>
c0016481:	8d 76 00             	lea    esi,[esi+0x0]
c0016484:	90                   	nop
c0016485:	83 c4 10             	add    esp,0x10
c0016488:	c3                   	ret    
c0016489:	8d 76 00             	lea    esi,[esi+0x0]

c001648c <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001648c:	83 ec 14             	sub    esp,0x14
c001648f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016493:	88 04 24             	mov    BYTE PTR [esp],al
c0016496:	8a 04 24             	mov    al,BYTE PTR [esp]
c0016499:	25 ff 00 00 00       	and    eax,0xff
c001649e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00164a2:	89 d1                	mov    ecx,edx
c00164a4:	83 e1 0f             	and    ecx,0xf
c00164a7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00164ab:	c1 e2 04             	shl    edx,0x4
c00164ae:	81 e2 ff 00 00 00    	and    edx,0xff
c00164b4:	09 ca                	or     edx,ecx
c00164b6:	c1 e2 08             	shl    edx,0x8
c00164b9:	09 d0                	or     eax,edx
c00164bb:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00164c0:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c00164c8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00164cc:	89 d0                	mov    eax,edx
c00164ce:	c1 e0 02             	shl    eax,0x2
c00164d1:	01 d0                	add    eax,edx
c00164d3:	c1 e0 04             	shl    eax,0x4
c00164d6:	89 c2                	mov    edx,eax
c00164d8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00164dc:	01 d0                	add    eax,edx
c00164de:	01 c0                	add    eax,eax
c00164e0:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00164e4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00164e8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00164ed:	66 89 02             	mov    WORD PTR [edx],ax
c00164f0:	90                   	nop
c00164f1:	83 c4 14             	add    esp,0x14
c00164f4:	c3                   	ret    
c00164f5:	8d 76 00             	lea    esi,[esi+0x0]

c00164f8 <HalConsoleCursorUpdate(int, int)>:
c00164f8:	83 ec 20             	sub    esp,0x20
c00164fb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00164ff:	89 c2                	mov    edx,eax
c0016501:	89 d0                	mov    eax,edx
c0016503:	c1 e0 02             	shl    eax,0x2
c0016506:	01 d0                	add    eax,edx
c0016508:	c1 e0 04             	shl    eax,0x4
c001650b:	89 c2                	mov    edx,eax
c001650d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016511:	01 d0                	add    eax,edx
c0016513:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0016518:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001651f:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0016524:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016528:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001652c:	ee                   	out    dx,al
c001652d:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0016532:	25 ff 00 00 00       	and    eax,0xff
c0016537:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001653e:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0016542:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0016546:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001654a:	ee                   	out    dx,al
c001654b:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0016552:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0016557:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001655b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001655f:	ee                   	out    dx,al
c0016560:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0016565:	66 c1 e8 08          	shr    ax,0x8
c0016569:	25 ff 00 00 00       	and    eax,0xff
c001656e:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0016575:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0016579:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001657d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016581:	ee                   	out    dx,al
c0016582:	90                   	nop
c0016583:	83 c4 20             	add    esp,0x20
c0016586:	c3                   	ret    
c0016587:	90                   	nop

c0016588 <FAT::getName()>:
c0016588:	b8 24 f2 01 c0       	mov    eax,0xc001f224
c001658d:	c3                   	ret    
c001658e:	66 90                	xchg   ax,ax

c0016590 <FAT::tell(void*, unsigned long long*)>:
c0016590:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016595:	75 09                	jne    c00165a0 <FAT::tell(void*, unsigned long long*)+0x10>
c0016597:	b8 04 00 00 00       	mov    eax,0x4
c001659c:	c3                   	ret    
c001659d:	8d 76 00             	lea    esi,[esi+0x0]
c00165a0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00165a5:	75 09                	jne    c00165b0 <FAT::tell(void*, unsigned long long*)+0x20>
c00165a7:	b8 04 00 00 00       	mov    eax,0x4
c00165ac:	c3                   	ret    
c00165ad:	8d 76 00             	lea    esi,[esi+0x0]
c00165b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165b4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00165b7:	ba 00 00 00 00       	mov    edx,0x0
c00165bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00165c0:	89 01                	mov    DWORD PTR [ecx],eax
c00165c2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00165c5:	b8 00 00 00 00       	mov    eax,0x0
c00165ca:	c3                   	ret    
c00165cb:	90                   	nop

c00165cc <FAT::stat(void*, unsigned long long*)>:
c00165cc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00165d1:	75 09                	jne    c00165dc <FAT::stat(void*, unsigned long long*)+0x10>
c00165d3:	b8 04 00 00 00       	mov    eax,0x4
c00165d8:	c3                   	ret    
c00165d9:	8d 76 00             	lea    esi,[esi+0x0]
c00165dc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00165e1:	75 09                	jne    c00165ec <FAT::stat(void*, unsigned long long*)+0x20>
c00165e3:	b8 04 00 00 00       	mov    eax,0x4
c00165e8:	c3                   	ret    
c00165e9:	8d 76 00             	lea    esi,[esi+0x0]
c00165ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165f0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00165f3:	ba 00 00 00 00       	mov    edx,0x0
c00165f8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00165fc:	89 01                	mov    DWORD PTR [ecx],eax
c00165fe:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016601:	b8 00 00 00 00       	mov    eax,0x0
c0016606:	c3                   	ret    
c0016607:	90                   	nop

c0016608 <FAT::~FAT()>:
c0016608:	83 ec 0c             	sub    esp,0xc
c001660b:	ba 70 f2 01 c0       	mov    edx,0xc001f270
c0016610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016614:	89 10                	mov    DWORD PTR [eax],edx
c0016616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001661a:	83 ec 0c             	sub    esp,0xc
c001661d:	50                   	push   eax
c001661e:	e8 1b 42 ff ff       	call   c000a83e <Filesystem::~Filesystem()>
c0016623:	83 c4 10             	add    esp,0x10
c0016626:	90                   	nop
c0016627:	83 c4 0c             	add    esp,0xc
c001662a:	c3                   	ret    
c001662b:	90                   	nop

c001662c <FAT::~FAT()>:
c001662c:	83 ec 0c             	sub    esp,0xc
c001662f:	83 ec 0c             	sub    esp,0xc
c0016632:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016636:	e8 cd ff ff ff       	call   c0016608 <FAT::~FAT()>
c001663b:	83 c4 10             	add    esp,0x10
c001663e:	83 ec 08             	sub    esp,0x8
c0016641:	6a 08                	push   0x8
c0016643:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016647:	e8 b6 3d ff ff       	call   c000a402 <operator delete(void*, unsigned long)>
c001664c:	83 c4 10             	add    esp,0x10
c001664f:	83 c4 0c             	add    esp,0xc
c0016652:	c3                   	ret    
c0016653:	90                   	nop

c0016654 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0016654:	83 ec 1c             	sub    esp,0x1c
c0016657:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001665e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0016663:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016667:	8b 04 85 e0 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf20]
c001666e:	83 f8 ff             	cmp    eax,0xffffffff
c0016671:	75 35                	jne    c00166a8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0016673:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016677:	88 c2                	mov    dl,al
c0016679:	a1 c0 40 02 c0       	mov    eax,ds:0xc00240c0
c001667e:	01 d0                	add    eax,edx
c0016680:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0016684:	8b 15 c0 40 02 c0    	mov    edx,DWORD PTR ds:0xc00240c0
c001668a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001668e:	89 14 85 e0 40 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbf20],edx
c0016695:	a1 c0 40 02 c0       	mov    eax,ds:0xc00240c0
c001669a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001669e:	89 14 85 60 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbea0],edx
c00166a5:	eb 19                	jmp    c00166c0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c00166a7:	90                   	nop
c00166a8:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00166ac:	88 c2                	mov    dl,al
c00166ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00166b2:	8b 04 85 e0 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf20]
c00166b9:	01 d0                	add    eax,edx
c00166bb:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00166bf:	90                   	nop
c00166c0:	83 ec 04             	sub    esp,0x4
c00166c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00166c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00166cb:	8d 44 24 15          	lea    eax,[esp+0x15]
c00166cf:	50                   	push   eax
c00166d0:	e8 7f e7 fe ff       	call   c0004e54 <f_getlabel>
c00166d5:	83 c4 10             	add    esp,0x10
c00166d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00166dc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00166e1:	75 09                	jne    c00166ec <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c00166e3:	b8 00 00 00 00       	mov    eax,0x0
c00166e8:	eb 0a                	jmp    c00166f4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c00166ea:	66 90                	xchg   ax,ax
c00166ec:	b8 01 00 00 00       	mov    eax,0x1
c00166f1:	8d 76 00             	lea    esi,[esi+0x0]
c00166f4:	83 c4 1c             	add    esp,0x1c
c00166f7:	c3                   	ret    

c00166f8 <FAT::setlabel(LogicalDisk*, int, char*)>:
c00166f8:	57                   	push   edi
c00166f9:	83 ec 58             	sub    esp,0x58
c00166fc:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0016704:	8d 54 24 10          	lea    edx,[esp+0x10]
c0016708:	b8 00 00 00 00       	mov    eax,0x0
c001670d:	b9 0f 00 00 00       	mov    ecx,0xf
c0016712:	fc                   	cld    
c0016713:	89 d7                	mov    edi,edx
c0016715:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0016717:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001671b:	8b 04 85 e0 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf20]
c0016722:	83 f8 ff             	cmp    eax,0xffffffff
c0016725:	75 35                	jne    c001675c <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0016727:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001672b:	88 c2                	mov    dl,al
c001672d:	a1 c0 40 02 c0       	mov    eax,ds:0xc00240c0
c0016732:	01 d0                	add    eax,edx
c0016734:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016738:	8b 15 c0 40 02 c0    	mov    edx,DWORD PTR ds:0xc00240c0
c001673e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0016742:	89 14 85 e0 40 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbf20],edx
c0016749:	a1 c0 40 02 c0       	mov    eax,ds:0xc00240c0
c001674e:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0016752:	89 14 85 60 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbea0],edx
c0016759:	eb 19                	jmp    c0016774 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001675b:	90                   	nop
c001675c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016760:	88 c2                	mov    dl,al
c0016762:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0016766:	8b 04 85 e0 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf20]
c001676d:	01 d0                	add    eax,edx
c001676f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016773:	90                   	nop
c0016774:	83 ec 08             	sub    esp,0x8
c0016777:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001677b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001677f:	50                   	push   eax
c0016780:	e8 3b a0 fe ff       	call   c00007c0 <strcat>
c0016785:	83 c4 10             	add    esp,0x10
c0016788:	83 ec 0c             	sub    esp,0xc
c001678b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001678f:	50                   	push   eax
c0016790:	e8 10 e8 fe ff       	call   c0004fa5 <f_setlabel>
c0016795:	83 c4 10             	add    esp,0x10
c0016798:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001679c:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00167a1:	75 09                	jne    c00167ac <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c00167a3:	b8 00 00 00 00       	mov    eax,0x0
c00167a8:	eb 0a                	jmp    c00167b4 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c00167aa:	66 90                	xchg   ax,ax
c00167ac:	b8 01 00 00 00       	mov    eax,0x1
c00167b1:	8d 76 00             	lea    esi,[esi+0x0]
c00167b4:	83 c4 58             	add    esp,0x58
c00167b7:	5f                   	pop    edi
c00167b8:	c3                   	ret    
c00167b9:	90                   	nop
c00167ba:	66 90                	xchg   ax,ax

c00167bc <FAT::format(LogicalDisk*, int, char const*, int)>:
c00167bc:	83 ec 2c             	sub    esp,0x2c
c00167bf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00167c7:	83 ec 08             	sub    esp,0x8
c00167ca:	68 48 f2 01 c0       	push   0xc001f248
c00167cf:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00167d3:	e8 08 9f fe ff       	call   c00006e0 <strcmp>
c00167d8:	83 c4 10             	add    esp,0x10
c00167db:	85 c0                	test   eax,eax
c00167dd:	0f 94 c0             	sete   al
c00167e0:	84 c0                	test   al,al
c00167e2:	74 10                	je     c00167f4 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c00167e4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00167ec:	e9 b3 00 00 00       	jmp    c00168a4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00167f1:	8d 76 00             	lea    esi,[esi+0x0]
c00167f4:	83 ec 08             	sub    esp,0x8
c00167f7:	68 3a f2 01 c0       	push   0xc001f23a
c00167fc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016800:	e8 db 9e fe ff       	call   c00006e0 <strcmp>
c0016805:	83 c4 10             	add    esp,0x10
c0016808:	85 c0                	test   eax,eax
c001680a:	0f 94 c0             	sete   al
c001680d:	84 c0                	test   al,al
c001680f:	74 0f                	je     c0016820 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c0016811:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016819:	e9 86 00 00 00       	jmp    c00168a4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001681e:	66 90                	xchg   ax,ax
c0016820:	83 ec 08             	sub    esp,0x8
c0016823:	68 40 f2 01 c0       	push   0xc001f240
c0016828:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001682c:	e8 af 9e fe ff       	call   c00006e0 <strcmp>
c0016831:	83 c4 10             	add    esp,0x10
c0016834:	85 c0                	test   eax,eax
c0016836:	0f 94 c0             	sete   al
c0016839:	84 c0                	test   al,al
c001683b:	74 0b                	je     c0016848 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001683d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016845:	eb 5d                	jmp    c00168a4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016847:	90                   	nop
c0016848:	83 ec 08             	sub    esp,0x8
c001684b:	68 1c d0 01 c0       	push   0xc001d01c
c0016850:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016854:	e8 87 9e fe ff       	call   c00006e0 <strcmp>
c0016859:	83 c4 10             	add    esp,0x10
c001685c:	85 c0                	test   eax,eax
c001685e:	0f 94 c0             	sete   al
c0016861:	84 c0                	test   al,al
c0016863:	74 0b                	je     c0016870 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c0016865:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001686d:	eb 35                	jmp    c00168a4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001686f:	90                   	nop
c0016870:	83 ec 08             	sub    esp,0x8
c0016873:	68 46 f2 01 c0       	push   0xc001f246
c0016878:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001687c:	e8 5f 9e fe ff       	call   c00006e0 <strcmp>
c0016881:	83 c4 10             	add    esp,0x10
c0016884:	85 c0                	test   eax,eax
c0016886:	0f 94 c0             	sete   al
c0016889:	84 c0                	test   al,al
c001688b:	74 0b                	je     c0016898 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001688d:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0016895:	eb 0d                	jmp    c00168a4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016897:	90                   	nop
c0016898:	b8 08 00 00 00       	mov    eax,0x8
c001689d:	e9 ea 00 00 00       	jmp    c001698c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00168a2:	66 90                	xchg   ax,ax
c00168a4:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00168ab:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00168b0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00168b4:	8b 04 85 e0 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf20]
c00168bb:	83 f8 ff             	cmp    eax,0xffffffff
c00168be:	75 34                	jne    c00168f4 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c00168c0:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00168c4:	88 c2                	mov    dl,al
c00168c6:	a1 c0 40 02 c0       	mov    eax,ds:0xc00240c0
c00168cb:	01 d0                	add    eax,edx
c00168cd:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00168d1:	8b 15 c0 40 02 c0    	mov    edx,DWORD PTR ds:0xc00240c0
c00168d7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00168db:	89 14 85 e0 40 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbf20],edx
c00168e2:	a1 c0 40 02 c0       	mov    eax,ds:0xc00240c0
c00168e7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00168eb:	89 14 85 60 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbea0],edx
c00168f2:	eb 18                	jmp    c001690c <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c00168f4:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00168f8:	88 c2                	mov    dl,al
c00168fa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00168fe:	8b 04 85 e0 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf20]
c0016905:	01 d0                	add    eax,edx
c0016907:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001690b:	90                   	nop
c001690c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016910:	88 04 24             	mov    BYTE PTR [esp],al
c0016913:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016917:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001691b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016923:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0016928:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016930:	83 ec 0c             	sub    esp,0xc
c0016933:	68 00 20 00 00       	push   0x2000
c0016938:	e8 7c 0e ff ff       	call   c00077b9 <malloc>
c001693d:	83 c4 10             	add    esp,0x10
c0016940:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016944:	68 00 20 00 00       	push   0x2000
c0016949:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001694d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016951:	50                   	push   eax
c0016952:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0016956:	50                   	push   eax
c0016957:	e8 39 e9 fe ff       	call   c0005295 <f_mkfs>
c001695c:	83 c4 10             	add    esp,0x10
c001695f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016963:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0016968:	75 0a                	jne    c0016974 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001696a:	b8 00 00 00 00       	mov    eax,0x0
c001696f:	eb 1b                	jmp    c001698c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016971:	8d 76 00             	lea    esi,[esi+0x0]
c0016974:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0016979:	75 09                	jne    c0016984 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001697b:	b8 09 00 00 00       	mov    eax,0x9
c0016980:	eb 0a                	jmp    c001698c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016982:	66 90                	xchg   ax,ax
c0016984:	b8 01 00 00 00       	mov    eax,0x1
c0016989:	8d 76 00             	lea    esi,[esi+0x0]
c001698c:	83 c4 2c             	add    esp,0x2c
c001698f:	c3                   	ret    

c0016990 <FAT::tryMount(LogicalDisk*, int)>:
c0016990:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0016996:	a1 c0 40 02 c0       	mov    eax,ds:0xc00240c0
c001699b:	83 f8 14             	cmp    eax,0x14
c001699e:	75 18                	jne    c00169b8 <FAT::tryMount(LogicalDisk*, int)+0x28>
c00169a0:	83 ec 0c             	sub    esp,0xc
c00169a3:	68 4c f2 01 c0       	push   0xc001f24c
c00169a8:	e8 b6 97 ff ff       	call   c0010163 <KePanic(char const*)>
c00169ad:	83 c4 10             	add    esp,0x10
c00169b0:	b0 00                	mov    al,0x0
c00169b2:	e9 e9 01 00 00       	jmp    c0016ba0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00169b7:	90                   	nop
c00169b8:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00169bf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00169c5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00169cb:	3d 00 02 00 00       	cmp    eax,0x200
c00169d0:	74 0a                	je     c00169dc <FAT::tryMount(LogicalDisk*, int)+0x4c>
c00169d2:	b0 00                	mov    al,0x0
c00169d4:	e9 c7 01 00 00       	jmp    c0016ba0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00169d9:	8d 76 00             	lea    esi,[esi+0x0]
c00169dc:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00169e4:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00169eb:	8b 04 85 e0 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf20]
c00169f2:	83 f8 ff             	cmp    eax,0xffffffff
c00169f5:	74 09                	je     c0016a00 <FAT::tryMount(LogicalDisk*, int)+0x70>
c00169f7:	b0 01                	mov    al,0x1
c00169f9:	e9 a2 01 00 00       	jmp    c0016ba0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00169fe:	66 90                	xchg   ax,ax
c0016a00:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0016a0a:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0016a12:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0016a19:	88 c2                	mov    dl,al
c0016a1b:	a1 c0 40 02 c0       	mov    eax,ds:0xc00240c0
c0016a20:	01 d0                	add    eax,edx
c0016a22:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0016a29:	8b 15 c0 40 02 c0    	mov    edx,DWORD PTR ds:0xc00240c0
c0016a2f:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0016a36:	89 14 85 e0 40 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbf20],edx
c0016a3d:	a1 c0 40 02 c0       	mov    eax,ds:0xc00240c0
c0016a42:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0016a49:	89 14 85 60 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbea0],edx
c0016a50:	83 ec 0c             	sub    esp,0xc
c0016a53:	68 34 02 00 00       	push   0x234
c0016a58:	e8 5c 0d ff ff       	call   c00077b9 <malloc>
c0016a5d:	83 c4 10             	add    esp,0x10
c0016a60:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0016a67:	83 ec 04             	sub    esp,0x4
c0016a6a:	6a 00                	push   0x0
c0016a6c:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016a73:	50                   	push   eax
c0016a74:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016a7b:	e8 3b d0 fe ff       	call   c0003abb <f_mount>
c0016a80:	83 c4 10             	add    esp,0x10
c0016a83:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016a8a:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0016a92:	74 1c                	je     c0016ab0 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0016a94:	83 ec 0c             	sub    esp,0xc
c0016a97:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016a9e:	e8 56 0d ff ff       	call   c00077f9 <rfree>
c0016aa3:	83 c4 10             	add    esp,0x10
c0016aa6:	b0 00                	mov    al,0x0
c0016aa8:	e9 f3 00 00 00       	jmp    c0016ba0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016aad:	8d 76 00             	lea    esi,[esi+0x0]
c0016ab0:	83 ec 04             	sub    esp,0x4
c0016ab3:	68 00 01 00 00       	push   0x100
c0016ab8:	6a 00                	push   0x0
c0016aba:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016ac1:	50                   	push   eax
c0016ac2:	e8 09 9a fe ff       	call   c00004d0 <memset>
c0016ac7:	83 c4 10             	add    esp,0x10
c0016aca:	83 ec 08             	sub    esp,0x8
c0016acd:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016ad4:	50                   	push   eax
c0016ad5:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016adc:	50                   	push   eax
c0016add:	e8 de 9c fe ff       	call   c00007c0 <strcat>
c0016ae2:	83 c4 10             	add    esp,0x10
c0016ae5:	83 ec 08             	sub    esp,0x8
c0016ae8:	68 5a f2 01 c0       	push   0xc001f25a
c0016aed:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016af4:	50                   	push   eax
c0016af5:	e8 c6 9c fe ff       	call   c00007c0 <strcat>
c0016afa:	83 c4 10             	add    esp,0x10
c0016afd:	83 ec 04             	sub    esp,0x4
c0016b00:	6a 01                	push   0x1
c0016b02:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0016b09:	50                   	push   eax
c0016b0a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016b0e:	50                   	push   eax
c0016b0f:	e8 09 d0 fe ff       	call   c0003b1d <f_open>
c0016b14:	83 c4 10             	add    esp,0x10
c0016b17:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016b1e:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0016b25:	85 c0                	test   eax,eax
c0016b27:	74 0b                	je     c0016b34 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0016b29:	78 31                	js     c0016b5c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016b2b:	83 e8 04             	sub    eax,0x4
c0016b2e:	83 f8 01             	cmp    eax,0x1
c0016b31:	77 29                	ja     c0016b5c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016b33:	90                   	nop
c0016b34:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0016b3c:	83 ec 0c             	sub    esp,0xc
c0016b3f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016b43:	50                   	push   eax
c0016b44:	e8 87 d7 fe ff       	call   c00042d0 <f_close>
c0016b49:	83 c4 10             	add    esp,0x10
c0016b4c:	90                   	nop
c0016b4d:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c0016b55:	74 41                	je     c0016b98 <FAT::tryMount(LogicalDisk*, int)+0x208>
c0016b57:	eb 33                	jmp    c0016b8c <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0016b59:	8d 76 00             	lea    esi,[esi+0x0]
c0016b5c:	83 ec 0c             	sub    esp,0xc
c0016b5f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016b66:	e8 8e 0c ff ff       	call   c00077f9 <rfree>
c0016b6b:	83 c4 10             	add    esp,0x10
c0016b6e:	83 ec 04             	sub    esp,0x4
c0016b71:	6a 00                	push   0x0
c0016b73:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016b7a:	50                   	push   eax
c0016b7b:	6a 00                	push   0x0
c0016b7d:	e8 39 cf fe ff       	call   c0003abb <f_mount>
c0016b82:	83 c4 10             	add    esp,0x10
c0016b85:	b0 00                	mov    al,0x0
c0016b87:	eb 17                	jmp    c0016ba0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016b89:	8d 76 00             	lea    esi,[esi+0x0]
c0016b8c:	a1 c0 40 02 c0       	mov    eax,ds:0xc00240c0
c0016b91:	40                   	inc    eax
c0016b92:	a3 c0 40 02 c0       	mov    ds:0xc00240c0,eax
c0016b97:	90                   	nop
c0016b98:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0016b9f:	90                   	nop
c0016ba0:	81 c4 4c 03 00 00    	add    esp,0x34c
c0016ba6:	c3                   	ret    
c0016ba7:	90                   	nop

c0016ba8 <FAT::allocateSwapfile(char const*, int)>:
c0016ba8:	55                   	push   ebp
c0016ba9:	57                   	push   edi
c0016baa:	56                   	push   esi
c0016bab:	53                   	push   ebx
c0016bac:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0016bb2:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0016bbd:	83 ec 0c             	sub    esp,0xc
c0016bc0:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0016bc7:	e8 ed 0b ff ff       	call   c00077b9 <malloc>
c0016bcc:	83 c4 10             	add    esp,0x10
c0016bcf:	89 c7                	mov    edi,eax
c0016bd1:	a1 30 40 02 c0       	mov    eax,ds:0xc0024030
c0016bd6:	83 ec 04             	sub    esp,0x4
c0016bd9:	50                   	push   eax
c0016bda:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0016be1:	57                   	push   edi
c0016be2:	e8 87 3e ff ff       	call   c000aa6e <File::File(char const*, Process*)>
c0016be7:	83 c4 10             	add    esp,0x10
c0016bea:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0016bf1:	83 ec 04             	sub    esp,0x4
c0016bf4:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016bf8:	50                   	push   eax
c0016bf9:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016bfd:	50                   	push   eax
c0016bfe:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c05:	e8 d0 41 ff ff       	call   c000adda <File::stat(unsigned long long*, bool*)>
c0016c0a:	83 c4 10             	add    esp,0x10
c0016c0d:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016c14:	c1 e0 14             	shl    eax,0x14
c0016c17:	89 c7                	mov    edi,eax
c0016c19:	89 c5                	mov    ebp,eax
c0016c1b:	c1 fd 1f             	sar    ebp,0x1f
c0016c1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c22:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016c26:	89 f9                	mov    ecx,edi
c0016c28:	31 c1                	xor    ecx,eax
c0016c2a:	89 cb                	mov    ebx,ecx
c0016c2c:	89 e9                	mov    ecx,ebp
c0016c2e:	31 d1                	xor    ecx,edx
c0016c30:	89 ce                	mov    esi,ecx
c0016c32:	89 f0                	mov    eax,esi
c0016c34:	09 d8                	or     eax,ebx
c0016c36:	0f 84 9c 00 00 00    	je     c0016cd8 <FAT::allocateSwapfile(char const*, int)+0x130>
c0016c3c:	83 ec 0c             	sub    esp,0xc
c0016c3f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c46:	e8 5b 40 ff ff       	call   c000aca6 <File::unlink()>
c0016c4b:	83 c4 10             	add    esp,0x10
c0016c4e:	83 ec 08             	sub    esp,0x8
c0016c51:	6a 12                	push   0x12
c0016c53:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c5a:	e8 cf 3e ff ff       	call   c000ab2e <File::open(FileOpenMode)>
c0016c5f:	83 c4 10             	add    esp,0x10
c0016c62:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016c69:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016c6f:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016c76:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016c7d:	c1 e0 14             	shl    eax,0x14
c0016c80:	83 ec 04             	sub    esp,0x4
c0016c83:	6a 01                	push   0x1
c0016c85:	50                   	push   eax
c0016c86:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0016c8d:	e8 a3 e4 fe ff       	call   c0005135 <f_expand>
c0016c92:	83 c4 10             	add    esp,0x10
c0016c95:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016c9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c9e:	83 c0 10             	add    eax,0x10
c0016ca1:	8b 00                	mov    eax,DWORD PTR [eax]
c0016ca3:	83 ec 0c             	sub    esp,0xc
c0016ca6:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016caa:	52                   	push   edx
c0016cab:	8d 54 24 30          	lea    edx,[esp+0x30]
c0016caf:	52                   	push   edx
c0016cb0:	6a 00                	push   0x0
c0016cb2:	68 00 04 00 00       	push   0x400
c0016cb7:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016cbe:	ff d0                	call   eax
c0016cc0:	83 c4 20             	add    esp,0x20
c0016cc3:	83 ec 0c             	sub    esp,0xc
c0016cc6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016ccd:	e8 ba 3e ff ff       	call   c000ab8c <File::close()>
c0016cd2:	83 c4 10             	add    esp,0x10
c0016cd5:	8d 76 00             	lea    esi,[esi+0x0]
c0016cd8:	83 ec 08             	sub    esp,0x8
c0016cdb:	6a 01                	push   0x1
c0016cdd:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016ce4:	e8 45 3e ff ff       	call   c000ab2e <File::open(FileOpenMode)>
c0016ce9:	83 c4 10             	add    esp,0x10
c0016cec:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016cf3:	8b 00                	mov    eax,DWORD PTR [eax]
c0016cf5:	83 c0 0c             	add    eax,0xc
c0016cf8:	8b 00                	mov    eax,DWORD PTR [eax]
c0016cfa:	83 ec 0c             	sub    esp,0xc
c0016cfd:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016d01:	52                   	push   edx
c0016d02:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0016d06:	52                   	push   edx
c0016d07:	6a 00                	push   0x0
c0016d09:	6a 04                	push   0x4
c0016d0b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016d12:	ff d0                	call   eax
c0016d14:	83 c4 20             	add    esp,0x20
c0016d17:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016d1e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016d24:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016d2b:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0016d32:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016d35:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0016d3c:	83 ec 0c             	sub    esp,0xc
c0016d3f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016d46:	e8 41 3e ff ff       	call   c000ab8c <File::close()>
c0016d4b:	83 c4 10             	add    esp,0x10
c0016d4e:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0016d55:	ba 00 00 00 00       	mov    edx,0x0
c0016d5a:	81 c4 3c 04 00 00    	add    esp,0x43c
c0016d60:	5b                   	pop    ebx
c0016d61:	5e                   	pop    esi
c0016d62:	5f                   	pop    edi
c0016d63:	5d                   	pop    ebp
c0016d64:	c3                   	ret    
c0016d65:	90                   	nop
c0016d66:	66 90                	xchg   ax,ax

c0016d68 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0016d68:	57                   	push   edi
c0016d69:	56                   	push   esi
c0016d6a:	53                   	push   ebx
c0016d6b:	81 ec 50 02 00 00    	sub    esp,0x250
c0016d71:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0016d79:	74 0d                	je     c0016d88 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0016d7b:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0016d83:	75 0f                	jne    c0016d94 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0016d85:	8d 76 00             	lea    esi,[esi+0x0]
c0016d88:	b8 04 00 00 00       	mov    eax,0x4
c0016d8d:	e9 36 01 00 00       	jmp    c0016ec8 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016d92:	66 90                	xchg   ax,ax
c0016d94:	83 ec 08             	sub    esp,0x8
c0016d97:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016d9e:	50                   	push   eax
c0016d9f:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0016da6:	e8 e8 d7 fe ff       	call   c0004593 <f_readdir>
c0016dab:	83 c4 10             	add    esp,0x10
c0016dae:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0016db5:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0016dbc:	83 ec 0c             	sub    esp,0xc
c0016dbf:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0016dc6:	83 c0 16             	add    eax,0x16
c0016dc9:	50                   	push   eax
c0016dca:	e8 71 97 fe ff       	call   c0000540 <strlen>
c0016dcf:	83 c4 10             	add    esp,0x10
c0016dd2:	ba 00 00 00 00       	mov    edx,0x0
c0016dd7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ddb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016ddf:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0016de6:	25 ff 00 00 00       	and    eax,0xff
c0016deb:	83 e0 10             	and    eax,0x10
c0016dee:	74 08                	je     c0016df8 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0016df0:	b8 02 00 00 00       	mov    eax,0x2
c0016df5:	eb 09                	jmp    c0016e00 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0016df7:	90                   	nop
c0016df8:	b8 01 00 00 00       	mov    eax,0x1
c0016dfd:	8d 76 00             	lea    esi,[esi+0x0]
c0016e00:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016e04:	83 ec 08             	sub    esp,0x8
c0016e07:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016e0e:	83 c0 16             	add    eax,0x16
c0016e11:	50                   	push   eax
c0016e12:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016e16:	83 c0 10             	add    eax,0x10
c0016e19:	50                   	push   eax
c0016e1a:	e8 e1 97 fe ff       	call   c0000600 <strcpy>
c0016e1f:	83 c4 10             	add    esp,0x10
c0016e22:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0016e29:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0016e30:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016e34:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0016e3b:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0016e42:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0016e49:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0016e50:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0016e57:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0016e5e:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0016e65:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0016e6c:	89 c6                	mov    esi,eax
c0016e6e:	89 d7                	mov    edi,edx
c0016e70:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e72:	89 c8                	mov    eax,ecx
c0016e74:	89 fa                	mov    edx,edi
c0016e76:	89 f3                	mov    ebx,esi
c0016e78:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0016e7f:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0016e86:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0016e8d:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0016e94:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0016e9a:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0016ea1:	84 c0                	test   al,al
c0016ea3:	75 07                	jne    c0016eac <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0016ea5:	b8 07 00 00 00       	mov    eax,0x7
c0016eaa:	eb 1c                	jmp    c0016ec8 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016eac:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0016eb3:	85 c0                	test   eax,eax
c0016eb5:	75 09                	jne    c0016ec0 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0016eb7:	b8 00 00 00 00       	mov    eax,0x0
c0016ebc:	eb 0a                	jmp    c0016ec8 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016ebe:	66 90                	xchg   ax,ax
c0016ec0:	b8 01 00 00 00       	mov    eax,0x1
c0016ec5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ec8:	81 c4 50 02 00 00    	add    esp,0x250
c0016ece:	5b                   	pop    ebx
c0016ecf:	5e                   	pop    esi
c0016ed0:	5f                   	pop    edi
c0016ed1:	c3                   	ret    
c0016ed2:	66 90                	xchg   ax,ax

c0016ed4 <FAT::read(void*, unsigned long, void*, int*)>:
c0016ed4:	83 ec 1c             	sub    esp,0x1c
c0016ed7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016edc:	74 0a                	je     c0016ee8 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0016ede:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016ee3:	75 0b                	jne    c0016ef0 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0016ee5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ee8:	b8 04 00 00 00       	mov    eax,0x4
c0016eed:	eb 41                	jmp    c0016f30 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016eef:	90                   	nop
c0016ef0:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016ef4:	50                   	push   eax
c0016ef5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016ef9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016efd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f01:	e8 e2 ce fe ff       	call   c0003de8 <f_read>
c0016f06:	83 c4 10             	add    esp,0x10
c0016f09:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f11:	89 c2                	mov    edx,eax
c0016f13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f17:	89 10                	mov    DWORD PTR [eax],edx
c0016f19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f1d:	85 c0                	test   eax,eax
c0016f1f:	75 07                	jne    c0016f28 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0016f21:	b8 00 00 00 00       	mov    eax,0x0
c0016f26:	eb 08                	jmp    c0016f30 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016f28:	b8 01 00 00 00       	mov    eax,0x1
c0016f2d:	8d 76 00             	lea    esi,[esi+0x0]
c0016f30:	83 c4 1c             	add    esp,0x1c
c0016f33:	c3                   	ret    

c0016f34 <FAT::write(void*, unsigned long, void*, int*)>:
c0016f34:	83 ec 1c             	sub    esp,0x1c
c0016f37:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016f3c:	74 0a                	je     c0016f48 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0016f3e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016f43:	75 0b                	jne    c0016f50 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0016f45:	8d 76 00             	lea    esi,[esi+0x0]
c0016f48:	b8 04 00 00 00       	mov    eax,0x4
c0016f4d:	eb 41                	jmp    c0016f90 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016f4f:	90                   	nop
c0016f50:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016f54:	50                   	push   eax
c0016f55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016f59:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016f5d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f61:	e8 81 d0 fe ff       	call   c0003fe7 <f_write>
c0016f66:	83 c4 10             	add    esp,0x10
c0016f69:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f71:	89 c2                	mov    edx,eax
c0016f73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f77:	89 10                	mov    DWORD PTR [eax],edx
c0016f79:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f7d:	85 c0                	test   eax,eax
c0016f7f:	75 07                	jne    c0016f88 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0016f81:	b8 00 00 00 00       	mov    eax,0x0
c0016f86:	eb 08                	jmp    c0016f90 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016f88:	b8 01 00 00 00       	mov    eax,0x1
c0016f8d:	8d 76 00             	lea    esi,[esi+0x0]
c0016f90:	83 c4 1c             	add    esp,0x1c
c0016f93:	c3                   	ret    

c0016f94 <FAT::close(void*)>:
c0016f94:	83 ec 1c             	sub    esp,0x1c
c0016f97:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016f9c:	75 0a                	jne    c0016fa8 <FAT::close(void*)+0x14>
c0016f9e:	b8 04 00 00 00       	mov    eax,0x4
c0016fa3:	eb 3f                	jmp    c0016fe4 <FAT::close(void*)+0x50>
c0016fa5:	8d 76 00             	lea    esi,[esi+0x0]
c0016fa8:	83 ec 0c             	sub    esp,0xc
c0016fab:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016faf:	e8 1c d3 fe ff       	call   c00042d0 <f_close>
c0016fb4:	83 c4 10             	add    esp,0x10
c0016fb7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016fbb:	83 ec 0c             	sub    esp,0xc
c0016fbe:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016fc2:	e8 22 08 ff ff       	call   c00077e9 <free>
c0016fc7:	83 c4 10             	add    esp,0x10
c0016fca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016fce:	85 c0                	test   eax,eax
c0016fd0:	75 0a                	jne    c0016fdc <FAT::close(void*)+0x48>
c0016fd2:	b8 00 00 00 00       	mov    eax,0x0
c0016fd7:	eb 0b                	jmp    c0016fe4 <FAT::close(void*)+0x50>
c0016fd9:	8d 76 00             	lea    esi,[esi+0x0]
c0016fdc:	b8 01 00 00 00       	mov    eax,0x1
c0016fe1:	8d 76 00             	lea    esi,[esi+0x0]
c0016fe4:	83 c4 1c             	add    esp,0x1c
c0016fe7:	c3                   	ret    

c0016fe8 <FAT::closeDir(void*)>:
c0016fe8:	83 ec 1c             	sub    esp,0x1c
c0016feb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016ff0:	75 0a                	jne    c0016ffc <FAT::closeDir(void*)+0x14>
c0016ff2:	b8 04 00 00 00       	mov    eax,0x4
c0016ff7:	eb 3f                	jmp    c0017038 <FAT::closeDir(void*)+0x50>
c0016ff9:	8d 76 00             	lea    esi,[esi+0x0]
c0016ffc:	83 ec 0c             	sub    esp,0xc
c0016fff:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017003:	e8 69 d5 fe ff       	call   c0004571 <f_closedir>
c0017008:	83 c4 10             	add    esp,0x10
c001700b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001700f:	83 ec 0c             	sub    esp,0xc
c0017012:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017016:	e8 ce 07 ff ff       	call   c00077e9 <free>
c001701b:	83 c4 10             	add    esp,0x10
c001701e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017022:	85 c0                	test   eax,eax
c0017024:	75 0a                	jne    c0017030 <FAT::closeDir(void*)+0x48>
c0017026:	b8 00 00 00 00       	mov    eax,0x0
c001702b:	eb 0b                	jmp    c0017038 <FAT::closeDir(void*)+0x50>
c001702d:	8d 76 00             	lea    esi,[esi+0x0]
c0017030:	b8 01 00 00 00       	mov    eax,0x1
c0017035:	8d 76 00             	lea    esi,[esi+0x0]
c0017038:	83 c4 1c             	add    esp,0x1c
c001703b:	c3                   	ret    

c001703c <FAT::seek(void*, unsigned long long)>:
c001703c:	83 ec 2c             	sub    esp,0x2c
c001703f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017043:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017047:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001704b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001704f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0017054:	75 0a                	jne    c0017060 <FAT::seek(void*, unsigned long long)+0x24>
c0017056:	b8 04 00 00 00       	mov    eax,0x4
c001705b:	eb 33                	jmp    c0017090 <FAT::seek(void*, unsigned long long)+0x54>
c001705d:	8d 76 00             	lea    esi,[esi+0x0]
c0017060:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017064:	83 ec 08             	sub    esp,0x8
c0017067:	50                   	push   eax
c0017068:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001706c:	e8 8e d2 fe ff       	call   c00042ff <f_lseek>
c0017071:	83 c4 10             	add    esp,0x10
c0017074:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017078:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001707c:	85 c0                	test   eax,eax
c001707e:	75 08                	jne    c0017088 <FAT::seek(void*, unsigned long long)+0x4c>
c0017080:	b8 00 00 00 00       	mov    eax,0x0
c0017085:	eb 09                	jmp    c0017090 <FAT::seek(void*, unsigned long long)+0x54>
c0017087:	90                   	nop
c0017088:	b8 01 00 00 00       	mov    eax,0x1
c001708d:	8d 76 00             	lea    esi,[esi+0x0]
c0017090:	83 c4 2c             	add    esp,0x2c
c0017093:	c3                   	ret    

c0017094 <fatWrapperReadDisk>:
c0017094:	53                   	push   ebx
c0017095:	83 ec 18             	sub    esp,0x18
c0017098:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001709c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00170a0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00170a4:	25 ff 00 00 00       	and    eax,0xff
c00170a9:	8b 0c 85 c0 32 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdcd40]
c00170b0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00170b4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00170b8:	ba 00 00 00 00       	mov    edx,0x0
c00170bd:	83 ec 0c             	sub    esp,0xc
c00170c0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00170c4:	53                   	push   ebx
c00170c5:	52                   	push   edx
c00170c6:	50                   	push   eax
c00170c7:	51                   	push   ecx
c00170c8:	e8 3b 5b ff ff       	call   c000cc08 <LogicalDisk::read(unsigned long long, int, void*)>
c00170cd:	83 c4 20             	add    esp,0x20
c00170d0:	83 c4 18             	add    esp,0x18
c00170d3:	5b                   	pop    ebx
c00170d4:	c3                   	ret    
c00170d5:	8d 76 00             	lea    esi,[esi+0x0]

c00170d8 <fatWrapperWriteDisk>:
c00170d8:	53                   	push   ebx
c00170d9:	83 ec 18             	sub    esp,0x18
c00170dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170e0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00170e4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00170e8:	25 ff 00 00 00       	and    eax,0xff
c00170ed:	8b 0c 85 c0 32 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdcd40]
c00170f4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00170f8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00170fc:	ba 00 00 00 00       	mov    edx,0x0
c0017101:	83 ec 0c             	sub    esp,0xc
c0017104:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017108:	53                   	push   ebx
c0017109:	52                   	push   edx
c001710a:	50                   	push   eax
c001710b:	51                   	push   ecx
c001710c:	e8 63 5b ff ff       	call   c000cc74 <LogicalDisk::write(unsigned long long, int, void*)>
c0017111:	83 c4 20             	add    esp,0x20
c0017114:	83 c4 18             	add    esp,0x18
c0017117:	5b                   	pop    ebx
c0017118:	c3                   	ret    
c0017119:	8d 76 00             	lea    esi,[esi+0x0]

c001711c <fatWrapperIoctl>:
c001711c:	53                   	push   ebx
c001711d:	83 ec 28             	sub    esp,0x28
c0017120:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017124:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017128:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001712c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017130:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0017135:	75 35                	jne    c001716c <fatWrapperIoctl+0x50>
c0017137:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001713b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001713f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017143:	25 ff 00 00 00       	and    eax,0xff
c0017148:	8b 04 85 c0 32 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcd40]
c001714f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0017155:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001715b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001715f:	66 89 02             	mov    WORD PTR [edx],ax
c0017162:	b8 00 00 00 00       	mov    eax,0x0
c0017167:	e9 c4 00 00 00       	jmp    c0017230 <fatWrapperIoctl+0x114>
c001716c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0017171:	75 75                	jne    c00171e8 <fatWrapperIoctl+0xcc>
c0017173:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017177:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001717b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001717f:	25 ff 00 00 00       	and    eax,0xff
c0017184:	8b 04 85 c0 32 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcd40]
c001718b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0017191:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017197:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001719d:	89 c8                	mov    eax,ecx
c001719f:	89 da                	mov    edx,ebx
c00171a1:	0f a4 c2 0a          	shld   edx,eax,0xa
c00171a5:	c1 e0 0a             	shl    eax,0xa
c00171a8:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00171ac:	81 e1 ff 00 00 00    	and    ecx,0xff
c00171b2:	8b 0c 8d c0 32 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcd40]
c00171b9:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00171bf:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00171c5:	89 cb                	mov    ebx,ecx
c00171c7:	c1 fb 1f             	sar    ebx,0x1f
c00171ca:	53                   	push   ebx
c00171cb:	51                   	push   ecx
c00171cc:	52                   	push   edx
c00171cd:	50                   	push   eax
c00171ce:	e8 4d 50 00 00       	call   c001c220 <__udivdi3>
c00171d3:	83 c4 10             	add    esp,0x10
c00171d6:	89 c2                	mov    edx,eax
c00171d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00171dc:	89 10                	mov    DWORD PTR [eax],edx
c00171de:	b8 00 00 00 00       	mov    eax,0x0
c00171e3:	eb 4b                	jmp    c0017230 <fatWrapperIoctl+0x114>
c00171e5:	8d 76 00             	lea    esi,[esi+0x0]
c00171e8:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00171ed:	75 09                	jne    c00171f8 <fatWrapperIoctl+0xdc>
c00171ef:	b8 00 00 00 00       	mov    eax,0x0
c00171f4:	eb 3a                	jmp    c0017230 <fatWrapperIoctl+0x114>
c00171f6:	66 90                	xchg   ax,ax
c00171f8:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00171fd:	75 19                	jne    c0017218 <fatWrapperIoctl+0xfc>
c00171ff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017203:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017207:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001720b:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0017211:	b8 00 00 00 00       	mov    eax,0x0
c0017216:	eb 18                	jmp    c0017230 <fatWrapperIoctl+0x114>
c0017218:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001721d:	75 09                	jne    c0017228 <fatWrapperIoctl+0x10c>
c001721f:	b8 00 00 00 00       	mov    eax,0x0
c0017224:	eb 0a                	jmp    c0017230 <fatWrapperIoctl+0x114>
c0017226:	66 90                	xchg   ax,ax
c0017228:	b8 04 00 00 00       	mov    eax,0x4
c001722d:	8d 76 00             	lea    esi,[esi+0x0]
c0017230:	83 c4 28             	add    esp,0x28
c0017233:	5b                   	pop    ebx
c0017234:	c3                   	ret    
c0017235:	90                   	nop
c0017236:	66 90                	xchg   ax,ax

c0017238 <FAT::FAT()>:
c0017238:	83 ec 1c             	sub    esp,0x1c
c001723b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001723f:	83 ec 0c             	sub    esp,0xc
c0017242:	50                   	push   eax
c0017243:	e8 d2 35 ff ff       	call   c000a81a <Filesystem::Filesystem()>
c0017248:	83 c4 10             	add    esp,0x10
c001724b:	ba 70 f2 01 c0       	mov    edx,0xc001f270
c0017250:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017254:	89 10                	mov    DWORD PTR [eax],edx
c0017256:	c7 05 c0 40 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00240c0,0x0
c0017260:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017268:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001726d:	7f 15                	jg     c0017284 <FAT::FAT()+0x4c>
c001726f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017273:	c7 04 85 e0 40 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdbf20],0xffffffff
c001727e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017282:	eb e4                	jmp    c0017268 <FAT::FAT()+0x30>
c0017284:	90                   	nop
c0017285:	83 c4 1c             	add    esp,0x1c
c0017288:	c3                   	ret    
c0017289:	90                   	nop
c001728a:	66 90                	xchg   ax,ax

c001728c <FAT::fixFilepath(char*)>:
c001728c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017290:	8a 00                	mov    al,BYTE PTR [eax]
c0017292:	3c 40                	cmp    al,0x40
c0017294:	7e 2e                	jle    c00172c4 <FAT::fixFilepath(char*)+0x38>
c0017296:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001729a:	8a 00                	mov    al,BYTE PTR [eax]
c001729c:	83 e8 41             	sub    eax,0x41
c001729f:	88 c2                	mov    dl,al
c00172a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172a5:	88 10                	mov    BYTE PTR [eax],dl
c00172a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172ab:	8a 00                	mov    al,BYTE PTR [eax]
c00172ad:	0f be c0             	movsx  eax,al
c00172b0:	8b 04 85 e0 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf20]
c00172b7:	83 c0 30             	add    eax,0x30
c00172ba:	88 c2                	mov    dl,al
c00172bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172c0:	88 10                	mov    BYTE PTR [eax],dl
c00172c2:	66 90                	xchg   ax,ax
c00172c4:	90                   	nop
c00172c5:	c3                   	ret    
c00172c6:	66 90                	xchg   ax,ax

c00172c8 <FAT::open(char const*, void**, FileOpenMode)>:
c00172c8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00172ce:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00172d6:	74 0c                	je     c00172e4 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c00172d8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00172e0:	75 0e                	jne    c00172f0 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c00172e2:	66 90                	xchg   ax,ax
c00172e4:	b8 04 00 00 00       	mov    eax,0x4
c00172e9:	e9 0a 01 00 00       	jmp    c00173f8 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c00172ee:	66 90                	xchg   ax,ax
c00172f0:	83 ec 08             	sub    esp,0x8
c00172f3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00172fa:	8d 44 24 14          	lea    eax,[esp+0x14]
c00172fe:	50                   	push   eax
c00172ff:	e8 fc 92 fe ff       	call   c0000600 <strcpy>
c0017304:	83 c4 10             	add    esp,0x10
c0017307:	83 ec 08             	sub    esp,0x8
c001730a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001730e:	50                   	push   eax
c001730f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017316:	e8 71 ff ff ff       	call   c001728c <FAT::fixFilepath(char*)>
c001731b:	83 c4 10             	add    esp,0x10
c001731e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0017326:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001732d:	83 e0 01             	and    eax,0x1
c0017330:	74 0a                	je     c001733c <FAT::open(char const*, void**, FileOpenMode)+0x74>
c0017332:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001733a:	66 90                	xchg   ax,ax
c001733c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017343:	83 e0 04             	and    eax,0x4
c0017346:	74 10                	je     c0017358 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c0017348:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0017350:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0017358:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001735f:	83 e0 02             	and    eax,0x2
c0017362:	74 08                	je     c001736c <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c0017364:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001736c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017373:	83 e0 08             	and    eax,0x8
c0017376:	74 08                	je     c0017380 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c0017378:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0017380:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017387:	83 e0 10             	and    eax,0x10
c001738a:	74 08                	je     c0017394 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001738c:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0017394:	83 ec 0c             	sub    esp,0xc
c0017397:	68 28 02 00 00       	push   0x228
c001739c:	e8 18 04 ff ff       	call   c00077b9 <malloc>
c00173a1:	83 c4 10             	add    esp,0x10
c00173a4:	89 c2                	mov    edx,eax
c00173a6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00173ad:	89 10                	mov    DWORD PTR [eax],edx
c00173af:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00173b6:	31 d2                	xor    edx,edx
c00173b8:	88 c2                	mov    dl,al
c00173ba:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00173c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00173c3:	83 ec 04             	sub    esp,0x4
c00173c6:	52                   	push   edx
c00173c7:	8d 54 24 10          	lea    edx,[esp+0x10]
c00173cb:	52                   	push   edx
c00173cc:	50                   	push   eax
c00173cd:	e8 4b c7 fe ff       	call   c0003b1d <f_open>
c00173d2:	83 c4 10             	add    esp,0x10
c00173d5:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00173dc:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00173e4:	74 0a                	je     c00173f0 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c00173e6:	b8 01 00 00 00       	mov    eax,0x1
c00173eb:	eb 0b                	jmp    c00173f8 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c00173ed:	8d 76 00             	lea    esi,[esi+0x0]
c00173f0:	b8 00 00 00 00       	mov    eax,0x0
c00173f5:	8d 76 00             	lea    esi,[esi+0x0]
c00173f8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00173fe:	c3                   	ret    
c00173ff:	90                   	nop

c0017400 <FAT::openDir(char const*, void**)>:
c0017400:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017406:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001740e:	74 0c                	je     c001741c <FAT::openDir(char const*, void**)+0x1c>
c0017410:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0017418:	75 0e                	jne    c0017428 <FAT::openDir(char const*, void**)+0x28>
c001741a:	66 90                	xchg   ax,ax
c001741c:	b8 04 00 00 00       	mov    eax,0x4
c0017421:	e9 82 00 00 00       	jmp    c00174a8 <FAT::openDir(char const*, void**)+0xa8>
c0017426:	66 90                	xchg   ax,ax
c0017428:	83 ec 08             	sub    esp,0x8
c001742b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017432:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017436:	50                   	push   eax
c0017437:	e8 c4 91 fe ff       	call   c0000600 <strcpy>
c001743c:	83 c4 10             	add    esp,0x10
c001743f:	83 ec 08             	sub    esp,0x8
c0017442:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017446:	50                   	push   eax
c0017447:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001744e:	e8 39 fe ff ff       	call   c001728c <FAT::fixFilepath(char*)>
c0017453:	83 c4 10             	add    esp,0x10
c0017456:	83 ec 0c             	sub    esp,0xc
c0017459:	6a 30                	push   0x30
c001745b:	e8 59 03 ff ff       	call   c00077b9 <malloc>
c0017460:	83 c4 10             	add    esp,0x10
c0017463:	89 c2                	mov    edx,eax
c0017465:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001746c:	89 10                	mov    DWORD PTR [eax],edx
c001746e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017475:	8b 00                	mov    eax,DWORD PTR [eax]
c0017477:	83 ec 08             	sub    esp,0x8
c001747a:	8d 54 24 14          	lea    edx,[esp+0x14]
c001747e:	52                   	push   edx
c001747f:	50                   	push   eax
c0017480:	e8 21 d0 fe ff       	call   c00044a6 <f_opendir>
c0017485:	83 c4 10             	add    esp,0x10
c0017488:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001748f:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0017497:	74 07                	je     c00174a0 <FAT::openDir(char const*, void**)+0xa0>
c0017499:	b8 01 00 00 00       	mov    eax,0x1
c001749e:	eb 08                	jmp    c00174a8 <FAT::openDir(char const*, void**)+0xa8>
c00174a0:	b8 00 00 00 00       	mov    eax,0x0
c00174a5:	8d 76 00             	lea    esi,[esi+0x0]
c00174a8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00174ae:	c3                   	ret    
c00174af:	90                   	nop

c00174b0 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00174b0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00174b6:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00174be:	75 0c                	jne    c00174cc <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c00174c0:	b8 04 00 00 00       	mov    eax,0x4
c00174c5:	e9 d6 00 00 00       	jmp    c00175a0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00174ca:	66 90                	xchg   ax,ax
c00174cc:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00174d4:	75 0a                	jne    c00174e0 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c00174d6:	b8 04 00 00 00       	mov    eax,0x4
c00174db:	e9 c0 00 00 00       	jmp    c00175a0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00174e0:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00174e8:	75 0a                	jne    c00174f4 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c00174ea:	b8 04 00 00 00       	mov    eax,0x4
c00174ef:	e9 ac 00 00 00       	jmp    c00175a0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00174f4:	83 ec 08             	sub    esp,0x8
c00174f7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00174fe:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0017505:	50                   	push   eax
c0017506:	e8 f5 90 fe ff       	call   c0000600 <strcpy>
c001750b:	83 c4 10             	add    esp,0x10
c001750e:	83 ec 08             	sub    esp,0x8
c0017511:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0017518:	50                   	push   eax
c0017519:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017520:	e8 67 fd ff ff       	call   c001728c <FAT::fixFilepath(char*)>
c0017525:	83 c4 10             	add    esp,0x10
c0017528:	83 ec 08             	sub    esp,0x8
c001752b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001752f:	50                   	push   eax
c0017530:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0017537:	50                   	push   eax
c0017538:	e8 e8 d0 fe ff       	call   c0004625 <f_stat>
c001753d:	83 c4 10             	add    esp,0x10
c0017540:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0017547:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001754e:	85 c0                	test   eax,eax
c0017550:	74 0a                	je     c001755c <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0017552:	83 f8 04             	cmp    eax,0x4
c0017555:	74 39                	je     c0017590 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0017557:	eb 3f                	jmp    c0017598 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0017559:	8d 76 00             	lea    esi,[esi+0x0]
c001755c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017560:	25 ff 00 00 00       	and    eax,0xff
c0017565:	83 e0 10             	and    eax,0x10
c0017568:	0f 95 c2             	setne  dl
c001756b:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0017572:	88 10                	mov    BYTE PTR [eax],dl
c0017574:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017578:	ba 00 00 00 00       	mov    edx,0x0
c001757d:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0017584:	89 01                	mov    DWORD PTR [ecx],eax
c0017586:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017589:	b8 00 00 00 00       	mov    eax,0x0
c001758e:	eb 10                	jmp    c00175a0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017590:	b8 02 00 00 00       	mov    eax,0x2
c0017595:	eb 09                	jmp    c00175a0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017597:	90                   	nop
c0017598:	b8 01 00 00 00       	mov    eax,0x1
c001759d:	8d 76 00             	lea    esi,[esi+0x0]
c00175a0:	81 c4 2c 02 00 00    	add    esp,0x22c
c00175a6:	c3                   	ret    
c00175a7:	90                   	nop

c00175a8 <FAT::unlink(char const*)>:
c00175a8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00175ae:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00175b6:	75 08                	jne    c00175c0 <FAT::unlink(char const*)+0x18>
c00175b8:	b8 04 00 00 00       	mov    eax,0x4
c00175bd:	eb 61                	jmp    c0017620 <FAT::unlink(char const*)+0x78>
c00175bf:	90                   	nop
c00175c0:	83 ec 08             	sub    esp,0x8
c00175c3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00175ca:	8d 44 24 18          	lea    eax,[esp+0x18]
c00175ce:	50                   	push   eax
c00175cf:	e8 2c 90 fe ff       	call   c0000600 <strcpy>
c00175d4:	83 c4 10             	add    esp,0x10
c00175d7:	83 ec 08             	sub    esp,0x8
c00175da:	8d 44 24 14          	lea    eax,[esp+0x14]
c00175de:	50                   	push   eax
c00175df:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00175e6:	e8 a1 fc ff ff       	call   c001728c <FAT::fixFilepath(char*)>
c00175eb:	83 c4 10             	add    esp,0x10
c00175ee:	83 ec 0c             	sub    esp,0xc
c00175f1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00175f5:	50                   	push   eax
c00175f6:	e8 8f d2 fe ff       	call   c000488a <f_unlink>
c00175fb:	83 c4 10             	add    esp,0x10
c00175fe:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017605:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001760c:	85 c0                	test   eax,eax
c001760e:	75 08                	jne    c0017618 <FAT::unlink(char const*)+0x70>
c0017610:	b8 00 00 00 00       	mov    eax,0x0
c0017615:	eb 09                	jmp    c0017620 <FAT::unlink(char const*)+0x78>
c0017617:	90                   	nop
c0017618:	b8 01 00 00 00       	mov    eax,0x1
c001761d:	8d 76 00             	lea    esi,[esi+0x0]
c0017620:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017626:	c3                   	ret    
c0017627:	90                   	nop

c0017628 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0017628:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001762e:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0017635:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001763c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0017640:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017644:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001764c:	75 0a                	jne    c0017658 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001764e:	b8 04 00 00 00       	mov    eax,0x4
c0017653:	e9 54 01 00 00       	jmp    c00177ac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0017658:	83 ec 08             	sub    esp,0x8
c001765b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0017662:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017666:	50                   	push   eax
c0017667:	e8 94 8f fe ff       	call   c0000600 <strcpy>
c001766c:	83 c4 10             	add    esp,0x10
c001766f:	83 ec 08             	sub    esp,0x8
c0017672:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017676:	50                   	push   eax
c0017677:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001767e:	e8 09 fc ff ff       	call   c001728c <FAT::fixFilepath(char*)>
c0017683:	83 c4 10             	add    esp,0x10
c0017686:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001768e:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0017696:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001769a:	25 ff 00 00 00       	and    eax,0xff
c001769f:	83 e0 01             	and    eax,0x1
c00176a2:	74 08                	je     c00176ac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c00176a4:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00176ac:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00176b0:	25 ff 00 00 00       	and    eax,0xff
c00176b5:	83 e0 02             	and    eax,0x2
c00176b8:	74 0a                	je     c00176c4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c00176ba:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00176c2:	66 90                	xchg   ax,ax
c00176c4:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00176c8:	25 ff 00 00 00       	and    eax,0xff
c00176cd:	83 e0 04             	and    eax,0x4
c00176d0:	74 0a                	je     c00176dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c00176d2:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00176da:	66 90                	xchg   ax,ax
c00176dc:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00176e0:	25 ff 00 00 00       	and    eax,0xff
c00176e5:	83 e0 08             	and    eax,0x8
c00176e8:	74 0a                	je     c00176f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c00176ea:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00176f2:	66 90                	xchg   ax,ax
c00176f4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00176f8:	25 ff 00 00 00       	and    eax,0xff
c00176fd:	83 e0 01             	and    eax,0x1
c0017700:	74 0a                	je     c001770c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c0017702:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001770a:	66 90                	xchg   ax,ax
c001770c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017710:	25 ff 00 00 00       	and    eax,0xff
c0017715:	83 e0 02             	and    eax,0x2
c0017718:	74 0a                	je     c0017724 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001771a:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0017722:	66 90                	xchg   ax,ax
c0017724:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017728:	25 ff 00 00 00       	and    eax,0xff
c001772d:	83 e0 04             	and    eax,0x4
c0017730:	74 0a                	je     c001773c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c0017732:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001773a:	66 90                	xchg   ax,ax
c001773c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017740:	25 ff 00 00 00       	and    eax,0xff
c0017745:	83 e0 08             	and    eax,0x8
c0017748:	74 0a                	je     c0017754 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c001774a:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0017752:	66 90                	xchg   ax,ax
c0017754:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001775b:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0017762:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0017769:	31 d2                	xor    edx,edx
c001776b:	88 c2                	mov    dl,al
c001776d:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0017774:	25 ff 00 00 00       	and    eax,0xff
c0017779:	83 ec 04             	sub    esp,0x4
c001777c:	52                   	push   edx
c001777d:	50                   	push   eax
c001777e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017782:	50                   	push   eax
c0017783:	e8 75 d5 fe ff       	call   c0004cfd <f_chmod>
c0017788:	83 c4 10             	add    esp,0x10
c001778b:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0017792:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0017799:	85 c0                	test   eax,eax
c001779b:	75 07                	jne    c00177a4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c001779d:	b8 00 00 00 00       	mov    eax,0x0
c00177a2:	eb 08                	jmp    c00177ac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c00177a4:	b8 01 00 00 00       	mov    eax,0x1
c00177a9:	8d 76 00             	lea    esi,[esi+0x0]
c00177ac:	81 c4 2c 01 00 00    	add    esp,0x12c
c00177b2:	c3                   	ret    
c00177b3:	90                   	nop

c00177b4 <FAT::rename(char const*, char const*)>:
c00177b4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00177ba:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00177c2:	74 0c                	je     c00177d0 <FAT::rename(char const*, char const*)+0x1c>
c00177c4:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00177cc:	75 0e                	jne    c00177dc <FAT::rename(char const*, char const*)+0x28>
c00177ce:	66 90                	xchg   ax,ax
c00177d0:	b8 04 00 00 00       	mov    eax,0x4
c00177d5:	e9 9e 00 00 00       	jmp    c0017878 <FAT::rename(char const*, char const*)+0xc4>
c00177da:	66 90                	xchg   ax,ax
c00177dc:	83 ec 08             	sub    esp,0x8
c00177df:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00177e6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00177ed:	50                   	push   eax
c00177ee:	e8 0d 8e fe ff       	call   c0000600 <strcpy>
c00177f3:	83 c4 10             	add    esp,0x10
c00177f6:	83 ec 08             	sub    esp,0x8
c00177f9:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0017800:	50                   	push   eax
c0017801:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017808:	e8 7f fa ff ff       	call   c001728c <FAT::fixFilepath(char*)>
c001780d:	83 c4 10             	add    esp,0x10
c0017810:	83 ec 08             	sub    esp,0x8
c0017813:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001781a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001781e:	50                   	push   eax
c001781f:	e8 dc 8d fe ff       	call   c0000600 <strcpy>
c0017824:	83 c4 10             	add    esp,0x10
c0017827:	83 ec 08             	sub    esp,0x8
c001782a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001782e:	50                   	push   eax
c001782f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017836:	e8 51 fa ff ff       	call   c001728c <FAT::fixFilepath(char*)>
c001783b:	83 c4 10             	add    esp,0x10
c001783e:	83 ec 08             	sub    esp,0x8
c0017841:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017845:	50                   	push   eax
c0017846:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001784d:	50                   	push   eax
c001784e:	e8 f4 d2 fe ff       	call   c0004b47 <f_rename>
c0017853:	83 c4 10             	add    esp,0x10
c0017856:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001785d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0017864:	85 c0                	test   eax,eax
c0017866:	75 08                	jne    c0017870 <FAT::rename(char const*, char const*)+0xbc>
c0017868:	b8 00 00 00 00       	mov    eax,0x0
c001786d:	eb 09                	jmp    c0017878 <FAT::rename(char const*, char const*)+0xc4>
c001786f:	90                   	nop
c0017870:	b8 01 00 00 00       	mov    eax,0x1
c0017875:	8d 76 00             	lea    esi,[esi+0x0]
c0017878:	81 c4 1c 02 00 00    	add    esp,0x21c
c001787e:	c3                   	ret    
c001787f:	90                   	nop

c0017880 <FAT::mkdir(char const*)>:
c0017880:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017886:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001788e:	75 08                	jne    c0017898 <FAT::mkdir(char const*)+0x18>
c0017890:	b8 04 00 00 00       	mov    eax,0x4
c0017895:	eb 61                	jmp    c00178f8 <FAT::mkdir(char const*)+0x78>
c0017897:	90                   	nop
c0017898:	83 ec 08             	sub    esp,0x8
c001789b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00178a2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00178a6:	50                   	push   eax
c00178a7:	e8 54 8d fe ff       	call   c0000600 <strcpy>
c00178ac:	83 c4 10             	add    esp,0x10
c00178af:	83 ec 08             	sub    esp,0x8
c00178b2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00178b6:	50                   	push   eax
c00178b7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00178be:	e8 c9 f9 ff ff       	call   c001728c <FAT::fixFilepath(char*)>
c00178c3:	83 c4 10             	add    esp,0x10
c00178c6:	83 ec 0c             	sub    esp,0xc
c00178c9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00178cd:	50                   	push   eax
c00178ce:	e8 d9 d0 fe ff       	call   c00049ac <f_mkdir>
c00178d3:	83 c4 10             	add    esp,0x10
c00178d6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00178dd:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00178e4:	85 c0                	test   eax,eax
c00178e6:	75 08                	jne    c00178f0 <FAT::mkdir(char const*)+0x70>
c00178e8:	b8 00 00 00 00       	mov    eax,0x0
c00178ed:	eb 09                	jmp    c00178f8 <FAT::mkdir(char const*)+0x78>
c00178ef:	90                   	nop
c00178f0:	b8 01 00 00 00       	mov    eax,0x1
c00178f5:	8d 76 00             	lea    esi,[esi+0x0]
c00178f8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00178fe:	c3                   	ret    
c00178ff:	90                   	nop

c0017900 <FAT::exists(char const*)>:
c0017900:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0017906:	83 ec 08             	sub    esp,0x8
c0017909:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017910:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017914:	50                   	push   eax
c0017915:	e8 e6 8c fe ff       	call   c0000600 <strcpy>
c001791a:	83 c4 10             	add    esp,0x10
c001791d:	83 ec 08             	sub    esp,0x8
c0017920:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017924:	50                   	push   eax
c0017925:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001792c:	e8 5b f9 ff ff       	call   c001728c <FAT::fixFilepath(char*)>
c0017931:	83 c4 10             	add    esp,0x10
c0017934:	83 ec 08             	sub    esp,0x8
c0017937:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001793e:	50                   	push   eax
c001793f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017943:	50                   	push   eax
c0017944:	e8 dc cc fe ff       	call   c0004625 <f_stat>
c0017949:	83 c4 10             	add    esp,0x10
c001794c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0017953:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001795a:	85 c0                	test   eax,eax
c001795c:	75 06                	jne    c0017964 <FAT::exists(char const*)+0x64>
c001795e:	b0 01                	mov    al,0x1
c0017960:	eb 06                	jmp    c0017968 <FAT::exists(char const*)+0x68>
c0017962:	66 90                	xchg   ax,ax
c0017964:	b0 00                	mov    al,0x0
c0017966:	66 90                	xchg   ax,ax
c0017968:	81 c4 2c 02 00 00    	add    esp,0x22c
c001796e:	c3                   	ret    
c001796f:	90                   	nop

c0017970 <isoReadDiscSectorHelper>:
c0017970:	83 ec 2c             	sub    esp,0x2c
c0017973:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017977:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001797b:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0017980:	83 e8 41             	sub    eax,0x41
c0017983:	8b 0c 85 c0 32 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdcd40]
c001798a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001798e:	ba 00 00 00 00       	mov    edx,0x0
c0017993:	83 ec 0c             	sub    esp,0xc
c0017996:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001799a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001799e:	52                   	push   edx
c001799f:	50                   	push   eax
c00179a0:	51                   	push   ecx
c00179a1:	e8 62 52 ff ff       	call   c000cc08 <LogicalDisk::read(unsigned long long, int, void*)>
c00179a6:	83 c4 20             	add    esp,0x20
c00179a9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00179ad:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00179b2:	74 0c                	je     c00179c0 <isoReadDiscSectorHelper+0x50>
c00179b4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00179b8:	c1 e0 0b             	shl    eax,0xb
c00179bb:	eb 0b                	jmp    c00179c8 <isoReadDiscSectorHelper+0x58>
c00179bd:	8d 76 00             	lea    esi,[esi+0x0]
c00179c0:	b8 00 00 00 00       	mov    eax,0x0
c00179c5:	8d 76 00             	lea    esi,[esi+0x0]
c00179c8:	83 c4 2c             	add    esp,0x2c
c00179cb:	c3                   	ret    

c00179cc <iso_kprintf>:
c00179cc:	83 ec 0c             	sub    esp,0xc
c00179cf:	a1 a4 0d 02 c0       	mov    eax,ds:0xc0020da4
c00179d4:	83 ec 08             	sub    esp,0x8
c00179d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00179db:	50                   	push   eax
c00179dc:	e8 75 0d ff ff       	call   c0008756 <VgaText::puts(char const*)>
c00179e1:	83 c4 10             	add    esp,0x10
c00179e4:	90                   	nop
c00179e5:	83 c4 0c             	add    esp,0xc
c00179e8:	c3                   	ret    
c00179e9:	8d 76 00             	lea    esi,[esi+0x0]

c00179ec <iso_kprintfd>:
c00179ec:	83 ec 0c             	sub    esp,0xc
c00179ef:	a1 a4 0d 02 c0       	mov    eax,ds:0xc0020da4
c00179f4:	83 ec 08             	sub    esp,0x8
c00179f7:	68 d0 f2 01 c0       	push   0xc001f2d0
c00179fc:	50                   	push   eax
c00179fd:	e8 54 0d ff ff       	call   c0008756 <VgaText::puts(char const*)>
c0017a02:	83 c4 10             	add    esp,0x10
c0017a05:	a1 a4 0d 02 c0       	mov    eax,ds:0xc0020da4
c0017a0a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017a0e:	83 ec 08             	sub    esp,0x8
c0017a11:	52                   	push   edx
c0017a12:	50                   	push   eax
c0017a13:	e8 f8 0c ff ff       	call   c0008710 <VgaText::putx(unsigned int)>
c0017a18:	83 c4 10             	add    esp,0x10
c0017a1b:	a1 a4 0d 02 c0       	mov    eax,ds:0xc0020da4
c0017a20:	83 ec 08             	sub    esp,0x8
c0017a23:	68 51 f1 01 c0       	push   0xc001f151
c0017a28:	50                   	push   eax
c0017a29:	e8 28 0d ff ff       	call   c0008756 <VgaText::puts(char const*)>
c0017a2e:	83 c4 10             	add    esp,0x10
c0017a31:	90                   	nop
c0017a32:	83 c4 0c             	add    esp,0xc
c0017a35:	c3                   	ret    

c0017a36 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0017a36:	b8 08 00 00 00       	mov    eax,0x8
c0017a3b:	c3                   	ret    

c0017a3c <ISO9660::getName()>:
c0017a3c:	b8 d3 f2 01 c0       	mov    eax,0xc001f2d3
c0017a41:	c3                   	ret    

c0017a42 <ISO9660::closeDir(void*)>:
c0017a42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a46:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a48:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0017a4b:	90                   	nop

c0017a4c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0017a4c:	b8 01 00 00 00       	mov    eax,0x1
c0017a51:	c3                   	ret    

c0017a52 <ISO9660::unlink(char const*)>:
c0017a52:	b8 01 00 00 00       	mov    eax,0x1
c0017a57:	c3                   	ret    

c0017a58 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0017a58:	b8 03 00 00 00       	mov    eax,0x3
c0017a5d:	c3                   	ret    

c0017a5e <ISO9660::rename(char const*, char const*)>:
c0017a5e:	b8 01 00 00 00       	mov    eax,0x1
c0017a63:	c3                   	ret    

c0017a64 <ISO9660::mkdir(char const*)>:
c0017a64:	b8 01 00 00 00       	mov    eax,0x1
c0017a69:	c3                   	ret    

c0017a6a <ISO9660::~ISO9660()>:
c0017a6a:	83 ec 0c             	sub    esp,0xc
c0017a6d:	ba 24 f3 01 c0       	mov    edx,0xc001f324
c0017a72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a76:	89 10                	mov    DWORD PTR [eax],edx
c0017a78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a7c:	83 ec 0c             	sub    esp,0xc
c0017a7f:	50                   	push   eax
c0017a80:	e8 b9 2d ff ff       	call   c000a83e <Filesystem::~Filesystem()>
c0017a85:	83 c4 10             	add    esp,0x10
c0017a88:	90                   	nop
c0017a89:	83 c4 0c             	add    esp,0xc
c0017a8c:	c3                   	ret    
c0017a8d:	90                   	nop

c0017a8e <ISO9660::~ISO9660()>:
c0017a8e:	83 ec 0c             	sub    esp,0xc
c0017a91:	83 ec 0c             	sub    esp,0xc
c0017a94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a98:	e8 cd ff ff ff       	call   c0017a6a <ISO9660::~ISO9660()>
c0017a9d:	83 c4 10             	add    esp,0x10
c0017aa0:	83 ec 08             	sub    esp,0x8
c0017aa3:	6a 08                	push   0x8
c0017aa5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017aa9:	e8 54 29 ff ff       	call   c000a402 <operator delete(void*, unsigned long)>
c0017aae:	83 c4 10             	add    esp,0x10
c0017ab1:	83 c4 0c             	add    esp,0xc
c0017ab4:	c3                   	ret    
c0017ab5:	90                   	nop

c0017ab6 <ISO9660::exists(char const*)>:
c0017ab6:	83 ec 18             	sub    esp,0x18
c0017ab9:	68 ee f2 01 c0       	push   0xc001f2ee
c0017abe:	e8 a0 86 ff ff       	call   c0010163 <KePanic(char const*)>
c0017ac3:	31 c0                	xor    eax,eax
c0017ac5:	83 c4 1c             	add    esp,0x1c
c0017ac8:	c3                   	ret    
c0017ac9:	90                   	nop

c0017aca <ISO9660::open(char const*, void**, FileOpenMode)>:
c0017aca:	56                   	push   esi
c0017acb:	53                   	push   ebx
c0017acc:	50                   	push   eax
c0017acd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017ad1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017ad5:	85 db                	test   ebx,ebx
c0017ad7:	0f 84 82 00 00 00    	je     c0017b5f <ISO9660::open(char const*, void**, FileOpenMode)+0x95>
c0017add:	85 f6                	test   esi,esi
c0017adf:	74 7e                	je     c0017b5f <ISO9660::open(char const*, void**, FileOpenMode)+0x95>
c0017ae1:	ba 03 00 00 00       	mov    edx,0x3
c0017ae6:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0017aeb:	75 77                	jne    c0017b64 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017aed:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017af0:	3a 05 c0 41 02 c0    	cmp    al,BYTE PTR ds:0xc00241c0
c0017af6:	74 34                	je     c0017b2c <ISO9660::open(char const*, void**, FileOpenMode)+0x62>
c0017af8:	83 ec 0c             	sub    esp,0xc
c0017afb:	50                   	push   eax
c0017afc:	e8 be ec fe ff       	call   c00067bf <init_percd>
c0017b01:	83 c4 10             	add    esp,0x10
c0017b04:	ba 0b 00 00 00       	mov    edx,0xb
c0017b09:	40                   	inc    eax
c0017b0a:	74 58                	je     c0017b64 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017b0c:	80 3d c0 41 02 c0 00 	cmp    BYTE PTR ds:0xc00241c0,0x0
c0017b13:	74 10                	je     c0017b25 <ISO9660::open(char const*, void**, FileOpenMode)+0x5b>
c0017b15:	83 ec 0c             	sub    esp,0xc
c0017b18:	68 0c f3 01 c0       	push   0xc001f30c
c0017b1d:	e8 41 86 ff ff       	call   c0010163 <KePanic(char const*)>
c0017b22:	83 c4 10             	add    esp,0x10
c0017b25:	8a 03                	mov    al,BYTE PTR [ebx]
c0017b27:	a2 c0 41 02 c0       	mov    ds:0xc00241c0,al
c0017b2c:	83 ec 0c             	sub    esp,0xc
c0017b2f:	0f be 05 c0 41 02 c0 	movsx  eax,BYTE PTR ds:0xc00241c0
c0017b36:	83 c3 03             	add    ebx,0x3
c0017b39:	50                   	push   eax
c0017b3a:	e8 80 ec fe ff       	call   c00067bf <init_percd>
c0017b3f:	59                   	pop    ecx
c0017b40:	58                   	pop    eax
c0017b41:	6a 00                	push   0x0
c0017b43:	53                   	push   ebx
c0017b44:	e8 b4 e7 fe ff       	call   c00062fd <iso_open>
c0017b49:	83 c4 10             	add    esp,0x10
c0017b4c:	ba 01 00 00 00       	mov    edx,0x1
c0017b51:	83 f8 ff             	cmp    eax,0xffffffff
c0017b54:	74 0e                	je     c0017b64 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017b56:	83 c0 64             	add    eax,0x64
c0017b59:	31 d2                	xor    edx,edx
c0017b5b:	89 06                	mov    DWORD PTR [esi],eax
c0017b5d:	eb 05                	jmp    c0017b64 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017b5f:	ba 04 00 00 00       	mov    edx,0x4
c0017b64:	89 d0                	mov    eax,edx
c0017b66:	5a                   	pop    edx
c0017b67:	5b                   	pop    ebx
c0017b68:	5e                   	pop    esi
c0017b69:	c3                   	ret    

c0017b6a <ISO9660::openDir(char const*, void**)>:
c0017b6a:	56                   	push   esi
c0017b6b:	53                   	push   ebx
c0017b6c:	50                   	push   eax
c0017b6d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017b71:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017b75:	85 db                	test   ebx,ebx
c0017b77:	74 76                	je     c0017bef <ISO9660::openDir(char const*, void**)+0x85>
c0017b79:	85 f6                	test   esi,esi
c0017b7b:	74 72                	je     c0017bef <ISO9660::openDir(char const*, void**)+0x85>
c0017b7d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017b80:	3a 05 c0 41 02 c0    	cmp    al,BYTE PTR ds:0xc00241c0
c0017b86:	74 34                	je     c0017bbc <ISO9660::openDir(char const*, void**)+0x52>
c0017b88:	83 ec 0c             	sub    esp,0xc
c0017b8b:	50                   	push   eax
c0017b8c:	e8 2e ec fe ff       	call   c00067bf <init_percd>
c0017b91:	83 c4 10             	add    esp,0x10
c0017b94:	ba 0b 00 00 00       	mov    edx,0xb
c0017b99:	40                   	inc    eax
c0017b9a:	74 58                	je     c0017bf4 <ISO9660::openDir(char const*, void**)+0x8a>
c0017b9c:	80 3d c0 41 02 c0 00 	cmp    BYTE PTR ds:0xc00241c0,0x0
c0017ba3:	74 10                	je     c0017bb5 <ISO9660::openDir(char const*, void**)+0x4b>
c0017ba5:	83 ec 0c             	sub    esp,0xc
c0017ba8:	68 0c f3 01 c0       	push   0xc001f30c
c0017bad:	e8 b1 85 ff ff       	call   c0010163 <KePanic(char const*)>
c0017bb2:	83 c4 10             	add    esp,0x10
c0017bb5:	8a 03                	mov    al,BYTE PTR [ebx]
c0017bb7:	a2 c0 41 02 c0       	mov    ds:0xc00241c0,al
c0017bbc:	83 ec 0c             	sub    esp,0xc
c0017bbf:	0f be 05 c0 41 02 c0 	movsx  eax,BYTE PTR ds:0xc00241c0
c0017bc6:	83 c3 03             	add    ebx,0x3
c0017bc9:	50                   	push   eax
c0017bca:	e8 f0 eb fe ff       	call   c00067bf <init_percd>
c0017bcf:	59                   	pop    ecx
c0017bd0:	58                   	pop    eax
c0017bd1:	6a 01                	push   0x1
c0017bd3:	53                   	push   ebx
c0017bd4:	e8 24 e7 fe ff       	call   c00062fd <iso_open>
c0017bd9:	83 c4 10             	add    esp,0x10
c0017bdc:	ba 01 00 00 00       	mov    edx,0x1
c0017be1:	83 f8 ff             	cmp    eax,0xffffffff
c0017be4:	74 0e                	je     c0017bf4 <ISO9660::openDir(char const*, void**)+0x8a>
c0017be6:	83 c0 64             	add    eax,0x64
c0017be9:	31 d2                	xor    edx,edx
c0017beb:	89 06                	mov    DWORD PTR [esi],eax
c0017bed:	eb 05                	jmp    c0017bf4 <ISO9660::openDir(char const*, void**)+0x8a>
c0017bef:	ba 04 00 00 00       	mov    edx,0x4
c0017bf4:	89 d0                	mov    eax,edx
c0017bf6:	5a                   	pop    edx
c0017bf7:	5b                   	pop    ebx
c0017bf8:	5e                   	pop    esi
c0017bf9:	c3                   	ret    

c0017bfa <ISO9660::read(void*, unsigned long, void*, int*)>:
c0017bfa:	53                   	push   ebx
c0017bfb:	83 ec 08             	sub    esp,0x8
c0017bfe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c02:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017c06:	85 c0                	test   eax,eax
c0017c08:	74 25                	je     c0017c2f <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017c0a:	85 db                	test   ebx,ebx
c0017c0c:	74 21                	je     c0017c2f <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017c0e:	83 e8 64             	sub    eax,0x64
c0017c11:	52                   	push   edx
c0017c12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017c16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017c1a:	50                   	push   eax
c0017c1b:	e8 85 e7 fe ff       	call   c00063a5 <iso_read>
c0017c20:	83 c4 10             	add    esp,0x10
c0017c23:	89 03                	mov    DWORD PTR [ebx],eax
c0017c25:	09 d0                	or     eax,edx
c0017c27:	0f 94 c0             	sete   al
c0017c2a:	0f b6 c0             	movzx  eax,al
c0017c2d:	eb 05                	jmp    c0017c34 <ISO9660::read(void*, unsigned long, void*, int*)+0x3a>
c0017c2f:	b8 04 00 00 00       	mov    eax,0x4
c0017c34:	83 c4 08             	add    esp,0x8
c0017c37:	5b                   	pop    ebx
c0017c38:	c3                   	ret    
c0017c39:	90                   	nop

c0017c3a <ISO9660::seek(void*, unsigned long long)>:
c0017c3a:	57                   	push   edi
c0017c3b:	56                   	push   esi
c0017c3c:	b8 04 00 00 00       	mov    eax,0x4
c0017c41:	51                   	push   ecx
c0017c42:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017c46:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017c4a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017c4e:	85 d2                	test   edx,edx
c0017c50:	74 1c                	je     c0017c6e <ISO9660::seek(void*, unsigned long long)+0x34>
c0017c52:	6a 00                	push   0x0
c0017c54:	83 ea 64             	sub    edx,0x64
c0017c57:	57                   	push   edi
c0017c58:	56                   	push   esi
c0017c59:	52                   	push   edx
c0017c5a:	e8 5c e8 fe ff       	call   c00064bb <iso_seek>
c0017c5f:	83 c4 10             	add    esp,0x10
c0017c62:	31 f0                	xor    eax,esi
c0017c64:	31 fa                	xor    edx,edi
c0017c66:	09 d0                	or     eax,edx
c0017c68:	0f 95 c0             	setne  al
c0017c6b:	0f b6 c0             	movzx  eax,al
c0017c6e:	5a                   	pop    edx
c0017c6f:	5e                   	pop    esi
c0017c70:	5f                   	pop    edi
c0017c71:	c3                   	ret    

c0017c72 <ISO9660::tell(void*, unsigned long long*)>:
c0017c72:	53                   	push   ebx
c0017c73:	83 ec 08             	sub    esp,0x8
c0017c76:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c7a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017c7e:	85 c0                	test   eax,eax
c0017c80:	74 1c                	je     c0017c9e <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017c82:	85 db                	test   ebx,ebx
c0017c84:	74 18                	je     c0017c9e <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017c86:	83 ec 0c             	sub    esp,0xc
c0017c89:	83 e8 64             	sub    eax,0x64
c0017c8c:	50                   	push   eax
c0017c8d:	e8 ad e8 fe ff       	call   c000653f <iso_tell>
c0017c92:	83 c4 10             	add    esp,0x10
c0017c95:	89 03                	mov    DWORD PTR [ebx],eax
c0017c97:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0017c9a:	31 c0                	xor    eax,eax
c0017c9c:	eb 05                	jmp    c0017ca3 <ISO9660::tell(void*, unsigned long long*)+0x31>
c0017c9e:	b8 04 00 00 00       	mov    eax,0x4
c0017ca3:	83 c4 08             	add    esp,0x8
c0017ca6:	5b                   	pop    ebx
c0017ca7:	c3                   	ret    

c0017ca8 <ISO9660::stat(void*, unsigned long long*)>:
c0017ca8:	53                   	push   ebx
c0017ca9:	83 ec 08             	sub    esp,0x8
c0017cac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017cb0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017cb4:	85 c0                	test   eax,eax
c0017cb6:	74 20                	je     c0017cd8 <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017cb8:	85 db                	test   ebx,ebx
c0017cba:	74 1c                	je     c0017cd8 <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017cbc:	83 ec 0c             	sub    esp,0xc
c0017cbf:	83 e8 64             	sub    eax,0x64
c0017cc2:	50                   	push   eax
c0017cc3:	e8 a8 e8 fe ff       	call   c0006570 <iso_total>
c0017cc8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0017ccf:	89 03                	mov    DWORD PTR [ebx],eax
c0017cd1:	83 c4 10             	add    esp,0x10
c0017cd4:	31 c0                	xor    eax,eax
c0017cd6:	eb 05                	jmp    c0017cdd <ISO9660::stat(void*, unsigned long long*)+0x35>
c0017cd8:	b8 04 00 00 00       	mov    eax,0x4
c0017cdd:	83 c4 08             	add    esp,0x8
c0017ce0:	5b                   	pop    ebx
c0017ce1:	c3                   	ret    

c0017ce2 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0017ce2:	55                   	push   ebp
c0017ce3:	57                   	push   edi
c0017ce4:	56                   	push   esi
c0017ce5:	53                   	push   ebx
c0017ce6:	83 ec 0c             	sub    esp,0xc
c0017ce9:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017ced:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0017cf1:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017cf5:	85 ff                	test   edi,edi
c0017cf7:	0f 94 c2             	sete   dl
c0017cfa:	85 f6                	test   esi,esi
c0017cfc:	0f 94 c0             	sete   al
c0017cff:	08 c2                	or     dl,al
c0017d01:	0f 85 9e 00 00 00    	jne    c0017da5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0017d07:	85 db                	test   ebx,ebx
c0017d09:	0f 84 96 00 00 00    	je     c0017da5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0017d0f:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0017d12:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0017d18:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017d1f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017d22:	3a 05 c0 41 02 c0    	cmp    al,BYTE PTR ds:0xc00241c0
c0017d28:	74 34                	je     c0017d5e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x7c>
c0017d2a:	83 ec 0c             	sub    esp,0xc
c0017d2d:	50                   	push   eax
c0017d2e:	e8 8c ea fe ff       	call   c00067bf <init_percd>
c0017d33:	83 c4 10             	add    esp,0x10
c0017d36:	ba 0b 00 00 00       	mov    edx,0xb
c0017d3b:	40                   	inc    eax
c0017d3c:	74 6c                	je     c0017daa <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc8>
c0017d3e:	80 3d c0 41 02 c0 00 	cmp    BYTE PTR ds:0xc00241c0,0x0
c0017d45:	74 10                	je     c0017d57 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x75>
c0017d47:	83 ec 0c             	sub    esp,0xc
c0017d4a:	68 0c f3 01 c0       	push   0xc001f30c
c0017d4f:	e8 0f 84 ff ff       	call   c0010163 <KePanic(char const*)>
c0017d54:	83 c4 10             	add    esp,0x10
c0017d57:	8a 03                	mov    al,BYTE PTR [ebx]
c0017d59:	a2 c0 41 02 c0       	mov    ds:0xc00241c0,al
c0017d5e:	83 c3 03             	add    ebx,0x3
c0017d61:	52                   	push   edx
c0017d62:	52                   	push   edx
c0017d63:	6a 00                	push   0x0
c0017d65:	53                   	push   ebx
c0017d66:	e8 92 e5 fe ff       	call   c00062fd <iso_open>
c0017d6b:	83 c4 10             	add    esp,0x10
c0017d6e:	89 c5                	mov    ebp,eax
c0017d70:	83 f8 ff             	cmp    eax,0xffffffff
c0017d73:	75 0f                	jne    c0017d84 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xa2>
c0017d75:	50                   	push   eax
c0017d76:	50                   	push   eax
c0017d77:	6a 01                	push   0x1
c0017d79:	53                   	push   ebx
c0017d7a:	e8 7e e5 fe ff       	call   c00062fd <iso_open>
c0017d7f:	c6 07 01             	mov    BYTE PTR [edi],0x1
c0017d82:	eb 1a                	jmp    c0017d9e <ISO9660::stat(char const*, unsigned long long*, bool*)+0xbc>
c0017d84:	83 ec 0c             	sub    esp,0xc
c0017d87:	50                   	push   eax
c0017d88:	e8 e3 e7 fe ff       	call   c0006570 <iso_total>
c0017d8d:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017d94:	89 06                	mov    DWORD PTR [esi],eax
c0017d96:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017d99:	e8 e9 e5 fe ff       	call   c0006387 <iso_close>
c0017d9e:	83 c4 10             	add    esp,0x10
c0017da1:	31 d2                	xor    edx,edx
c0017da3:	eb 05                	jmp    c0017daa <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc8>
c0017da5:	ba 04 00 00 00       	mov    edx,0x4
c0017daa:	83 c4 0c             	add    esp,0xc
c0017dad:	89 d0                	mov    eax,edx
c0017daf:	5b                   	pop    ebx
c0017db0:	5e                   	pop    esi
c0017db1:	5f                   	pop    edi
c0017db2:	5d                   	pop    ebp
c0017db3:	c3                   	ret    

c0017db4 <ISO9660::close(void*)>:
c0017db4:	83 ec 0c             	sub    esp,0xc
c0017db7:	b8 04 00 00 00       	mov    eax,0x4
c0017dbc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017dc0:	85 d2                	test   edx,edx
c0017dc2:	74 11                	je     c0017dd5 <ISO9660::close(void*)+0x21>
c0017dc4:	83 ec 0c             	sub    esp,0xc
c0017dc7:	83 ea 64             	sub    edx,0x64
c0017dca:	52                   	push   edx
c0017dcb:	e8 b7 e5 fe ff       	call   c0006387 <iso_close>
c0017dd0:	83 c4 10             	add    esp,0x10
c0017dd3:	31 c0                	xor    eax,eax
c0017dd5:	83 c4 0c             	add    esp,0xc
c0017dd8:	c3                   	ret    
c0017dd9:	90                   	nop

c0017dda <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0017dda:	55                   	push   ebp
c0017ddb:	57                   	push   edi
c0017ddc:	56                   	push   esi
c0017ddd:	53                   	push   ebx
c0017dde:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017de4:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c0017deb:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0017df2:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0017df9:	85 c0                	test   eax,eax
c0017dfb:	0f 84 96 00 00 00    	je     c0017e97 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017e01:	85 db                	test   ebx,ebx
c0017e03:	0f 84 8e 00 00 00    	je     c0017e97 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017e09:	83 ec 0c             	sub    esp,0xc
c0017e0c:	83 e8 64             	sub    eax,0x64
c0017e0f:	50                   	push   eax
c0017e10:	e8 ac e7 fe ff       	call   c00065c1 <iso_readdir>
c0017e15:	83 c4 10             	add    esp,0x10
c0017e18:	89 c6                	mov    esi,eax
c0017e1a:	85 c0                	test   eax,eax
c0017e1c:	75 18                	jne    c0017e36 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x5c>
c0017e1e:	52                   	push   edx
c0017e1f:	68 10 01 00 00       	push   0x110
c0017e24:	6a 00                	push   0x0
c0017e26:	57                   	push   edi
c0017e27:	e8 a4 86 fe ff       	call   c00004d0 <memset>
c0017e2c:	83 c4 10             	add    esp,0x10
c0017e2f:	b8 01 00 00 00       	mov    eax,0x1
c0017e34:	eb 66                	jmp    c0017e9c <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017e36:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0017e3c:	8d 68 08             	lea    ebp,[eax+0x8]
c0017e3f:	83 ec 0c             	sub    esp,0xc
c0017e42:	55                   	push   ebp
c0017e43:	e8 f8 86 fe ff       	call   c0000540 <strlen>
c0017e48:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017e50:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017e54:	83 c4 10             	add    esp,0x10
c0017e57:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0017e5b:	75 0a                	jne    c0017e67 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x8d>
c0017e5d:	b8 02 00 00 00       	mov    eax,0x2
c0017e62:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0017e65:	74 05                	je     c0017e6c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c0017e67:	b8 01 00 00 00       	mov    eax,0x1
c0017e6c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017e70:	50                   	push   eax
c0017e71:	50                   	push   eax
c0017e72:	55                   	push   ebp
c0017e73:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017e77:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0017e7b:	50                   	push   eax
c0017e7c:	e8 7f 87 fe ff       	call   c0000600 <strcpy>
c0017e81:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0017e88:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017e8a:	31 c0                	xor    eax,eax
c0017e8c:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0017e92:	83 c4 10             	add    esp,0x10
c0017e95:	eb 05                	jmp    c0017e9c <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017e97:	b8 04 00 00 00       	mov    eax,0x4
c0017e9c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017ea2:	5b                   	pop    ebx
c0017ea3:	5e                   	pop    esi
c0017ea4:	5f                   	pop    edi
c0017ea5:	5d                   	pop    ebp
c0017ea6:	c3                   	ret    

c0017ea7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0017ea7:	57                   	push   edi
c0017ea8:	56                   	push   esi
c0017ea9:	53                   	push   ebx
c0017eaa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017eae:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017eb2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017eb6:	39 35 c4 41 02 c0    	cmp    DWORD PTR ds:0xc00241c4,esi
c0017ebc:	75 08                	jne    c0017ec6 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0017ebe:	38 1d 30 fd 01 c0    	cmp    BYTE PTR ds:0xc001fd30,bl
c0017ec4:	74 4a                	je     c0017f10 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017ec6:	83 ec 0c             	sub    esp,0xc
c0017ec9:	31 d2                	xor    edx,edx
c0017ecb:	68 e0 41 02 c0       	push   0xc00241e0
c0017ed0:	0f be c3             	movsx  eax,bl
c0017ed3:	6a 01                	push   0x1
c0017ed5:	52                   	push   edx
c0017ed6:	56                   	push   esi
c0017ed7:	ff 34 85 bc 31 02 c0 	push   DWORD PTR [eax*4-0x3ffdce44]
c0017ede:	e8 25 4d ff ff       	call   c000cc08 <LogicalDisk::read(unsigned long long, int, void*)>
c0017ee3:	83 c4 20             	add    esp,0x20
c0017ee6:	85 c0                	test   eax,eax
c0017ee8:	75 0e                	jne    c0017ef8 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0017eea:	89 35 c4 41 02 c0    	mov    DWORD PTR ds:0xc00241c4,esi
c0017ef0:	88 1d 30 fd 01 c0    	mov    BYTE PTR ds:0xc001fd30,bl
c0017ef6:	eb 18                	jmp    c0017f10 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017ef8:	50                   	push   eax
c0017ef9:	68 00 08 00 00       	push   0x800
c0017efe:	6a 00                	push   0x0
c0017f00:	57                   	push   edi
c0017f01:	e8 ca 85 fe ff       	call   c00004d0 <memset>
c0017f06:	83 c4 10             	add    esp,0x10
c0017f09:	b8 01 00 00 00       	mov    eax,0x1
c0017f0e:	eb 0e                	jmp    c0017f1e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c0017f10:	be e0 41 02 c0       	mov    esi,0xc00241e0
c0017f15:	b9 00 08 00 00       	mov    ecx,0x800
c0017f1a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017f1c:	31 c0                	xor    eax,eax
c0017f1e:	5b                   	pop    ebx
c0017f1f:	5e                   	pop    esi
c0017f20:	5f                   	pop    edi
c0017f21:	c3                   	ret    

c0017f22 <ISO9660::tryMount(LogicalDisk*, int)>:
c0017f22:	53                   	push   ebx
c0017f23:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0017f29:	c7 05 c4 41 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc00241c4,0xdeadbeef
c0017f33:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0017f3a:	8d 58 41             	lea    ebx,[eax+0x41]
c0017f3d:	0f be db             	movsx  ebx,bl
c0017f40:	53                   	push   ebx
c0017f41:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017f45:	50                   	push   eax
c0017f46:	6a 10                	push   0x10
c0017f48:	e8 5a ff ff ff       	call   c0017ea7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017f4d:	83 c4 10             	add    esp,0x10
c0017f50:	31 d2                	xor    edx,edx
c0017f52:	85 c0                	test   eax,eax
c0017f54:	75 33                	jne    c0017f89 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f56:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0017f5b:	75 2c                	jne    c0017f89 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f5d:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0017f62:	75 25                	jne    c0017f89 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f64:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0017f69:	75 1e                	jne    c0017f89 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f6b:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0017f70:	75 17                	jne    c0017f89 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f72:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0017f77:	75 10                	jne    c0017f89 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f79:	83 ec 0c             	sub    esp,0xc
c0017f7c:	53                   	push   ebx
c0017f7d:	e8 3d e8 fe ff       	call   c00067bf <init_percd>
c0017f82:	83 c4 10             	add    esp,0x10
c0017f85:	40                   	inc    eax
c0017f86:	0f 95 c2             	setne  dl
c0017f89:	88 d0                	mov    al,dl
c0017f8b:	81 c4 08 08 00 00    	add    esp,0x808
c0017f91:	5b                   	pop    ebx
c0017f92:	c3                   	ret    
c0017f93:	90                   	nop

c0017f94 <ISO9660::ISO9660()>:
c0017f94:	83 ec 0c             	sub    esp,0xc
c0017f97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f9b:	83 ec 0c             	sub    esp,0xc
c0017f9e:	50                   	push   eax
c0017f9f:	e8 76 28 ff ff       	call   c000a81a <Filesystem::Filesystem()>
c0017fa4:	83 c4 10             	add    esp,0x10
c0017fa7:	ba 24 f3 01 c0       	mov    edx,0xc001f324
c0017fac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fb0:	89 10                	mov    DWORD PTR [eax],edx
c0017fb2:	e8 0a e9 fe ff       	call   c00068c1 <fs_iso9660_init>
c0017fb7:	90                   	nop
c0017fb8:	83 c4 0c             	add    esp,0xc
c0017fbb:	c3                   	ret    

c0017fbc <SoundCard::beginPlayback()>:
c0017fbc:	c7 44 24 04 84 f3 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f384
c0017fc4:	e9 9a 81 ff ff       	jmp    c0010163 <KePanic(char const*)>
c0017fc9:	90                   	nop

c0017fca <SoundCard::stopPlayback()>:
c0017fca:	c7 44 24 04 84 f3 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f384
c0017fd2:	e9 8c 81 ff ff       	jmp    c0010163 <KePanic(char const*)>
c0017fd7:	90                   	nop

c0017fd8 <SoundCard::SoundCard(char const*)>:
c0017fd8:	83 ec 1c             	sub    esp,0x1c
c0017fdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fdf:	83 ec 08             	sub    esp,0x8
c0017fe2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017fe6:	50                   	push   eax
c0017fe7:	e8 e4 3a ff ff       	call   c000bad0 <Device::Device(char const*)>
c0017fec:	83 c4 10             	add    esp,0x10
c0017fef:	ba d0 f3 01 c0       	mov    edx,0xc001f3d0
c0017ff4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ff8:	89 10                	mov    DWORD PTR [eax],edx
c0017ffa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ffe:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0018005:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018009:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0018013:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018017:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0018021:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018025:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001802f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018033:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001803d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0018045:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001804a:	7f 19                	jg     c0018065 <SoundCard::SoundCard(char const*)+0x8d>
c001804c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018050:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018054:	83 c2 54             	add    edx,0x54
c0018057:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001805f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0018063:	eb e0                	jmp    c0018045 <SoundCard::SoundCard(char const*)+0x6d>
c0018065:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018069:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0018070:	90                   	nop
c0018071:	83 c4 1c             	add    esp,0x1c
c0018074:	c3                   	ret    
c0018075:	90                   	nop

c0018076 <SoundCard::~SoundCard()>:
c0018076:	83 ec 0c             	sub    esp,0xc
c0018079:	ba d0 f3 01 c0       	mov    edx,0xc001f3d0
c001807e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018082:	89 10                	mov    DWORD PTR [eax],edx
c0018084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018088:	83 ec 0c             	sub    esp,0xc
c001808b:	50                   	push   eax
c001808c:	e8 a9 37 ff ff       	call   c000b83a <Device::~Device()>
c0018091:	83 c4 10             	add    esp,0x10
c0018094:	90                   	nop
c0018095:	83 c4 0c             	add    esp,0xc
c0018098:	c3                   	ret    
c0018099:	90                   	nop

c001809a <SoundCard::~SoundCard()>:
c001809a:	83 ec 0c             	sub    esp,0xc
c001809d:	83 ec 0c             	sub    esp,0xc
c00180a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00180a4:	e8 cd ff ff ff       	call   c0018076 <SoundCard::~SoundCard()>
c00180a9:	83 c4 10             	add    esp,0x10
c00180ac:	83 ec 08             	sub    esp,0x8
c00180af:	68 e8 01 00 00       	push   0x1e8
c00180b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00180b8:	e8 45 23 ff ff       	call   c000a402 <operator delete(void*, unsigned long)>
c00180bd:	83 c4 10             	add    esp,0x10
c00180c0:	83 c4 0c             	add    esp,0xc
c00180c3:	c3                   	ret    

c00180c4 <SoundCard::configureRates(int, int, int)>:
c00180c4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00180c8:	31 c0                	xor    eax,eax
c00180ca:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c00180d1:	75 20                	jne    c00180f3 <SoundCard::configureRates(int, int, int)+0x2f>
c00180d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00180d7:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c00180dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180e1:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c00180e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180eb:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c00180f1:	b0 01                	mov    al,0x1
c00180f3:	c3                   	ret    

c00180f4 <SoundCard::getSamples16(int, short*)>:
c00180f4:	55                   	push   ebp
c00180f5:	57                   	push   edi
c00180f6:	31 ff                	xor    edi,edi
c00180f8:	56                   	push   esi
c00180f9:	53                   	push   ebx
c00180fa:	31 db                	xor    ebx,ebx
c00180fc:	83 ec 10             	sub    esp,0x10
c00180ff:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0018103:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0018107:	8d 04 36             	lea    eax,[esi+esi*1]
c001810a:	50                   	push   eax
c001810b:	6a 00                	push   0x0
c001810d:	55                   	push   ebp
c001810e:	e8 bd 83 fe ff       	call   c00004d0 <memset>
c0018113:	83 c4 10             	add    esp,0x10
c0018116:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001811a:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0018121:	85 c0                	test   eax,eax
c0018123:	74 1b                	je     c0018140 <SoundCard::getSamples16(int, short*)+0x4c>
c0018125:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0018129:	75 15                	jne    c0018140 <SoundCard::getSamples16(int, short*)+0x4c>
c001812b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001812f:	55                   	push   ebp
c0018130:	56                   	push   esi
c0018131:	50                   	push   eax
c0018132:	e8 ed 02 00 00       	call   c0018424 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0018137:	83 c4 10             	add    esp,0x10
c001813a:	39 c7                	cmp    edi,eax
c001813c:	7d 02                	jge    c0018140 <SoundCard::getSamples16(int, short*)+0x4c>
c001813e:	89 c7                	mov    edi,eax
c0018140:	43                   	inc    ebx
c0018141:	83 fb 20             	cmp    ebx,0x20
c0018144:	75 d0                	jne    c0018116 <SoundCard::getSamples16(int, short*)+0x22>
c0018146:	83 c4 0c             	add    esp,0xc
c0018149:	89 f8                	mov    eax,edi
c001814b:	5b                   	pop    ebx
c001814c:	5e                   	pop    esi
c001814d:	5f                   	pop    edi
c001814e:	5d                   	pop    ebp
c001814f:	c3                   	ret    

c0018150 <SoundCard::getSamples32(int, int*)>:
c0018150:	55                   	push   ebp
c0018151:	57                   	push   edi
c0018152:	31 ff                	xor    edi,edi
c0018154:	56                   	push   esi
c0018155:	31 f6                	xor    esi,esi
c0018157:	53                   	push   ebx
c0018158:	83 ec 10             	sub    esp,0x10
c001815b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001815f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0018163:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0018167:	c1 e0 02             	shl    eax,0x2
c001816a:	50                   	push   eax
c001816b:	6a 00                	push   0x0
c001816d:	55                   	push   ebp
c001816e:	e8 5d 83 fe ff       	call   c00004d0 <memset>
c0018173:	83 c4 10             	add    esp,0x10
c0018176:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001817d:	85 c0                	test   eax,eax
c001817f:	74 1b                	je     c001819c <SoundCard::getSamples32(int, int*)+0x4c>
c0018181:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0018185:	75 15                	jne    c001819c <SoundCard::getSamples32(int, int*)+0x4c>
c0018187:	53                   	push   ebx
c0018188:	55                   	push   ebp
c0018189:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001818d:	50                   	push   eax
c001818e:	e8 55 03 00 00       	call   c00184e8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0018193:	83 c4 10             	add    esp,0x10
c0018196:	39 c6                	cmp    esi,eax
c0018198:	7d 02                	jge    c001819c <SoundCard::getSamples32(int, int*)+0x4c>
c001819a:	89 c6                	mov    esi,eax
c001819c:	47                   	inc    edi
c001819d:	83 ff 20             	cmp    edi,0x20
c00181a0:	75 d4                	jne    c0018176 <SoundCard::getSamples32(int, int*)+0x26>
c00181a2:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c00181a8:	85 f6                	test   esi,esi
c00181aa:	75 0f                	jne    c00181bb <SoundCard::getSamples32(int, int*)+0x6b>
c00181ac:	84 c0                	test   al,al
c00181ae:	74 1b                	je     c00181cb <SoundCard::getSamples32(int, int*)+0x7b>
c00181b0:	83 ec 0c             	sub    esp,0xc
c00181b3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00181b5:	53                   	push   ebx
c00181b6:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00181b9:	eb 0d                	jmp    c00181c8 <SoundCard::getSamples32(int, int*)+0x78>
c00181bb:	84 c0                	test   al,al
c00181bd:	75 0c                	jne    c00181cb <SoundCard::getSamples32(int, int*)+0x7b>
c00181bf:	83 ec 0c             	sub    esp,0xc
c00181c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00181c4:	53                   	push   ebx
c00181c5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00181c8:	83 c4 10             	add    esp,0x10
c00181cb:	83 c4 0c             	add    esp,0xc
c00181ce:	89 f0                	mov    eax,esi
c00181d0:	5b                   	pop    ebx
c00181d1:	5e                   	pop    esi
c00181d2:	5f                   	pop    edi
c00181d3:	5d                   	pop    ebp
c00181d4:	c3                   	ret    
c00181d5:	90                   	nop

c00181d6 <SoundCard::addChannel(SoundPort*)>:
c00181d6:	83 ec 0c             	sub    esp,0xc
c00181d9:	31 c0                	xor    eax,eax
c00181db:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00181df:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00181e7:	74 1b                	je     c0018204 <SoundCard::addChannel(SoundPort*)+0x2e>
c00181e9:	40                   	inc    eax
c00181ea:	83 f8 20             	cmp    eax,0x20
c00181ed:	75 f0                	jne    c00181df <SoundCard::addChannel(SoundPort*)+0x9>
c00181ef:	83 ec 0c             	sub    esp,0xc
c00181f2:	68 a9 f3 01 c0       	push   0xc001f3a9
c00181f7:	e8 67 7f ff ff       	call   c0010163 <KePanic(char const*)>
c00181fc:	83 c4 10             	add    esp,0x10
c00181ff:	83 c8 ff             	or     eax,0xffffffff
c0018202:	eb 0b                	jmp    c001820f <SoundCard::addChannel(SoundPort*)+0x39>
c0018204:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018208:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001820f:	83 c4 0c             	add    esp,0xc
c0018212:	c3                   	ret    
c0018213:	90                   	nop

c0018214 <SoundCard::removeChannel(int)>:
c0018214:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018218:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001821c:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0018227:	c3                   	ret    

c0018228 <SoundPort::SoundPort(int, int, int, int)>:
c0018228:	83 ec 0c             	sub    esp,0xc
c001822b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001822f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001823a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001823e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018242:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018246:	89 10                	mov    DWORD PTR [eax],edx
c0018248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001824c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018250:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0018253:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018257:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001825b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001825e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c0018263:	75 13                	jne    c0018278 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0018265:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018269:	8b 00                	mov    eax,DWORD PTR [eax]
c001826b:	05 a0 0f 00 00       	add    eax,0xfa0
c0018270:	01 c0                	add    eax,eax
c0018272:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018276:	66 90                	xchg   ax,ax
c0018278:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001827c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018280:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018283:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018287:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001828e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018292:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018295:	c1 e0 02             	shl    eax,0x2
c0018298:	83 ec 0c             	sub    esp,0xc
c001829b:	50                   	push   eax
c001829c:	e8 18 f5 fe ff       	call   c00077b9 <malloc>
c00182a1:	83 c4 10             	add    esp,0x10
c00182a4:	89 c2                	mov    edx,eax
c00182a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182aa:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00182ad:	90                   	nop
c00182ae:	83 c4 0c             	add    esp,0xc
c00182b1:	c3                   	ret    
c00182b2:	66 90                	xchg   ax,ax

c00182b4 <SoundPort::~SoundPort()>:
c00182b4:	83 ec 0c             	sub    esp,0xc
c00182b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182bb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00182be:	85 c0                	test   eax,eax
c00182c0:	74 1e                	je     c00182e0 <SoundPort::~SoundPort()+0x2c>
c00182c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182c6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00182c9:	83 ec 0c             	sub    esp,0xc
c00182cc:	50                   	push   eax
c00182cd:	e8 17 f5 fe ff       	call   c00077e9 <free>
c00182d2:	83 c4 10             	add    esp,0x10
c00182d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182d9:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00182e0:	90                   	nop
c00182e1:	83 c4 0c             	add    esp,0xc
c00182e4:	c3                   	ret    
c00182e5:	90                   	nop
c00182e6:	66 90                	xchg   ax,ax

c00182e8 <SoundPort::unpause()>:
c00182e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00182ec:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c00182f0:	c3                   	ret    
c00182f1:	90                   	nop
c00182f2:	66 90                	xchg   ax,ax

c00182f4 <SoundPort::pause()>:
c00182f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00182f8:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c00182fc:	c3                   	ret    
c00182fd:	90                   	nop
c00182fe:	66 90                	xchg   ax,ax

c0018300 <SoundPort::getBufferUsed()>:
c0018300:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018304:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018307:	c3                   	ret    

c0018308 <SoundPort::getBufferSize()>:
c0018308:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001830c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001830f:	c3                   	ret    

c0018310 <SoundPort::buffer16(short*, int)>:
c0018310:	55                   	push   ebp
c0018311:	57                   	push   edi
c0018312:	56                   	push   esi
c0018313:	53                   	push   ebx
c0018314:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018318:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001831c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001831f:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0018322:	74 68                	je     c001838c <SoundPort::buffer16(short*, int)+0x7c>
c0018324:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018328:	85 c9                	test   ecx,ecx
c001832a:	7e 60                	jle    c001838c <SoundPort::buffer16(short*, int)+0x7c>
c001832c:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0018330:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0018333:	c1 e1 0f             	shl    ecx,0xf
c0018336:	8d 70 01             	lea    esi,[eax+0x1]
c0018339:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001833c:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001833f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018342:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018345:	74 4d                	je     c0018394 <SoundPort::buffer16(short*, int)+0x84>
c0018347:	31 f6                	xor    esi,esi
c0018349:	eb 21                	jmp    c001836c <SoundPort::buffer16(short*, int)+0x5c>
c001834b:	90                   	nop
c001834c:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0018351:	8d 79 01             	lea    edi,[ecx+0x1]
c0018354:	c1 e3 0f             	shl    ebx,0xf
c0018357:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001835a:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001835d:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0018360:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018363:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018366:	74 1c                	je     c0018384 <SoundPort::buffer16(short*, int)+0x74>
c0018368:	89 c6                	mov    esi,eax
c001836a:	66 90                	xchg   ax,ax
c001836c:	8d 46 01             	lea    eax,[esi+0x1]
c001836f:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0018373:	75 d7                	jne    c001834c <SoundPort::buffer16(short*, int)+0x3c>
c0018375:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018379:	8d 76 00             	lea    esi,[esi+0x0]
c001837c:	5b                   	pop    ebx
c001837d:	5e                   	pop    esi
c001837e:	5f                   	pop    edi
c001837f:	5d                   	pop    ebp
c0018380:	c3                   	ret    
c0018381:	8d 76 00             	lea    esi,[esi+0x0]
c0018384:	5b                   	pop    ebx
c0018385:	8d 46 02             	lea    eax,[esi+0x2]
c0018388:	5e                   	pop    esi
c0018389:	5f                   	pop    edi
c001838a:	5d                   	pop    ebp
c001838b:	c3                   	ret    
c001838c:	5b                   	pop    ebx
c001838d:	31 c0                	xor    eax,eax
c001838f:	5e                   	pop    esi
c0018390:	5f                   	pop    edi
c0018391:	5d                   	pop    ebp
c0018392:	c3                   	ret    
c0018393:	90                   	nop
c0018394:	b8 01 00 00 00       	mov    eax,0x1
c0018399:	eb e1                	jmp    c001837c <SoundPort::buffer16(short*, int)+0x6c>
c001839b:	90                   	nop

c001839c <SoundPort::buffer32(int*, int)>:
c001839c:	55                   	push   ebp
c001839d:	57                   	push   edi
c001839e:	56                   	push   esi
c001839f:	53                   	push   ebx
c00183a0:	51                   	push   ecx
c00183a1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183a9:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00183ac:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00183b0:	89 04 24             	mov    DWORD PTR [esp],eax
c00183b3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00183b6:	74 5c                	je     c0018414 <SoundPort::buffer32(int*, int)+0x78>
c00183b8:	85 c0                	test   eax,eax
c00183ba:	7e 58                	jle    c0018414 <SoundPort::buffer32(int*, int)+0x78>
c00183bc:	8d 71 01             	lea    esi,[ecx+0x1]
c00183bf:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c00183c2:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c00183c5:	8b 37                	mov    esi,DWORD PTR [edi]
c00183c7:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c00183ca:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00183cd:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00183d0:	74 4a                	je     c001841c <SoundPort::buffer32(int*, int)+0x80>
c00183d2:	31 f6                	xor    esi,esi
c00183d4:	eb 1e                	jmp    c00183f4 <SoundPort::buffer32(int*, int)+0x58>
c00183d6:	66 90                	xchg   ax,ax
c00183d8:	8d 69 01             	lea    ebp,[ecx+0x1]
c00183db:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c00183de:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00183e1:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00183e4:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c00183e8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00183eb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00183ee:	74 18                	je     c0018408 <SoundPort::buffer32(int*, int)+0x6c>
c00183f0:	89 de                	mov    esi,ebx
c00183f2:	66 90                	xchg   ax,ax
c00183f4:	8d 5e 01             	lea    ebx,[esi+0x1]
c00183f7:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c00183fa:	75 dc                	jne    c00183d8 <SoundPort::buffer32(int*, int)+0x3c>
c00183fc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00183ff:	90                   	nop
c0018400:	5a                   	pop    edx
c0018401:	5b                   	pop    ebx
c0018402:	5e                   	pop    esi
c0018403:	5f                   	pop    edi
c0018404:	5d                   	pop    ebp
c0018405:	c3                   	ret    
c0018406:	66 90                	xchg   ax,ax
c0018408:	5a                   	pop    edx
c0018409:	8d 46 02             	lea    eax,[esi+0x2]
c001840c:	5b                   	pop    ebx
c001840d:	5e                   	pop    esi
c001840e:	5f                   	pop    edi
c001840f:	5d                   	pop    ebp
c0018410:	c3                   	ret    
c0018411:	8d 76 00             	lea    esi,[esi+0x0]
c0018414:	5a                   	pop    edx
c0018415:	31 c0                	xor    eax,eax
c0018417:	5b                   	pop    ebx
c0018418:	5e                   	pop    esi
c0018419:	5f                   	pop    edi
c001841a:	5d                   	pop    ebp
c001841b:	c3                   	ret    
c001841c:	b8 01 00 00 00       	mov    eax,0x1
c0018421:	eb dd                	jmp    c0018400 <SoundPort::buffer32(int*, int)+0x64>
c0018423:	90                   	nop

c0018424 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0018424:	57                   	push   edi
c0018425:	56                   	push   esi
c0018426:	53                   	push   ebx
c0018427:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001842b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001842f:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0018435:	39 03                	cmp    DWORD PTR [ebx],eax
c0018437:	74 13                	je     c001844c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0018439:	83 ec 0c             	sub    esp,0xc
c001843c:	68 fc f3 01 c0       	push   0xc001f3fc
c0018441:	e8 1d 7d ff ff       	call   c0010163 <KePanic(char const*)>
c0018446:	83 c4 10             	add    esp,0x10
c0018449:	8d 76 00             	lea    esi,[esi+0x0]
c001844c:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c0018452:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0018455:	74 11                	je     c0018468 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c0018457:	83 ec 0c             	sub    esp,0xc
c001845a:	68 3b f4 01 c0       	push   0xc001f43b
c001845f:	e8 ff 7c ff ff       	call   c0010163 <KePanic(char const*)>
c0018464:	83 c4 10             	add    esp,0x10
c0018467:	90                   	nop
c0018468:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001846e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0018471:	74 11                	je     c0018484 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c0018473:	83 ec 0c             	sub    esp,0xc
c0018476:	68 3b f4 01 c0       	push   0xc001f43b
c001847b:	e8 e3 7c ff ff       	call   c0010163 <KePanic(char const*)>
c0018480:	83 c4 10             	add    esp,0x10
c0018483:	90                   	nop
c0018484:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0018487:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001848b:	7e 07                	jle    c0018494 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001848d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018491:	8d 76 00             	lea    esi,[esi+0x0]
c0018494:	85 f6                	test   esi,esi
c0018496:	7e 2c                	jle    c00184c4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c0018498:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001849c:	8d 3c 36             	lea    edi,[esi+esi*1]
c001849f:	31 c9                	xor    ecx,ecx
c00184a1:	01 d7                	add    edi,edx
c00184a3:	90                   	nop
c00184a4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00184a7:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c00184aa:	85 c0                	test   eax,eax
c00184ac:	79 06                	jns    c00184b4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c00184ae:	05 ff 7f 00 00       	add    eax,0x7fff
c00184b3:	90                   	nop
c00184b4:	c1 f8 0f             	sar    eax,0xf
c00184b7:	83 c1 04             	add    ecx,0x4
c00184ba:	66 01 02             	add    WORD PTR [edx],ax
c00184bd:	83 c2 02             	add    edx,0x2
c00184c0:	39 d7                	cmp    edi,edx
c00184c2:	75 e0                	jne    c00184a4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c00184c4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00184c7:	50                   	push   eax
c00184c8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00184cb:	29 f0                	sub    eax,esi
c00184cd:	c1 e0 02             	shl    eax,0x2
c00184d0:	50                   	push   eax
c00184d1:	8d 04 b2             	lea    eax,[edx+esi*4]
c00184d4:	50                   	push   eax
c00184d5:	52                   	push   edx
c00184d6:	e8 05 7f fe ff       	call   c00003e0 <memmove>
c00184db:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c00184de:	83 c4 10             	add    esp,0x10
c00184e1:	89 f0                	mov    eax,esi
c00184e3:	5b                   	pop    ebx
c00184e4:	5e                   	pop    esi
c00184e5:	5f                   	pop    edi
c00184e6:	c3                   	ret    
c00184e7:	90                   	nop

c00184e8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c00184e8:	57                   	push   edi
c00184e9:	56                   	push   esi
c00184ea:	53                   	push   ebx
c00184eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00184ef:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00184f3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00184f7:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c00184fd:	39 06                	cmp    DWORD PTR [esi],eax
c00184ff:	74 13                	je     c0018514 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c0018501:	83 ec 0c             	sub    esp,0xc
c0018504:	68 1c f4 01 c0       	push   0xc001f41c
c0018509:	e8 55 7c ff ff       	call   c0010163 <KePanic(char const*)>
c001850e:	83 c4 10             	add    esp,0x10
c0018511:	8d 76 00             	lea    esi,[esi+0x0]
c0018514:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001851a:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001851d:	74 11                	je     c0018530 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001851f:	83 ec 0c             	sub    esp,0xc
c0018522:	68 57 f4 01 c0       	push   0xc001f457
c0018527:	e8 37 7c ff ff       	call   c0010163 <KePanic(char const*)>
c001852c:	83 c4 10             	add    esp,0x10
c001852f:	90                   	nop
c0018530:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c0018536:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c0018539:	74 11                	je     c001854c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001853b:	83 ec 0c             	sub    esp,0xc
c001853e:	68 57 f4 01 c0       	push   0xc001f457
c0018543:	e8 1b 7c ff ff       	call   c0010163 <KePanic(char const*)>
c0018548:	83 c4 10             	add    esp,0x10
c001854b:	90                   	nop
c001854c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001854f:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c0018553:	7e 07                	jle    c001855c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c0018555:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0018559:	8d 76 00             	lea    esi,[esi+0x0]
c001855c:	85 ff                	test   edi,edi
c001855e:	7e 1c                	jle    c001857c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c0018560:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0018567:	31 c0                	xor    eax,eax
c0018569:	8d 76 00             	lea    esi,[esi+0x0]
c001856c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001856f:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c0018572:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c0018575:	83 c0 04             	add    eax,0x4
c0018578:	39 c1                	cmp    ecx,eax
c001857a:	75 f0                	jne    c001856c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001857c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001857f:	50                   	push   eax
c0018580:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0018583:	29 f8                	sub    eax,edi
c0018585:	c1 e0 02             	shl    eax,0x2
c0018588:	50                   	push   eax
c0018589:	8d 04 ba             	lea    eax,[edx+edi*4]
c001858c:	50                   	push   eax
c001858d:	52                   	push   edx
c001858e:	e8 4d 7e fe ff       	call   c00003e0 <memmove>
c0018593:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c0018596:	83 c4 10             	add    esp,0x10
c0018599:	89 f8                	mov    eax,edi
c001859b:	5b                   	pop    ebx
c001859c:	5e                   	pop    esi
c001859d:	5f                   	pop    edi
c001859e:	c3                   	ret    
c001859f:	90                   	nop

c00185a0 <PCI::open(int, int, void*)>:
c00185a0:	83 ec 18             	sub    esp,0x18
c00185a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00185a7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00185ab:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00185b1:	8b 10                	mov    edx,DWORD PTR [eax]
c00185b3:	50                   	push   eax
c00185b4:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00185b7:	31 c0                	xor    eax,eax
c00185b9:	83 c4 1c             	add    esp,0x1c
c00185bc:	c3                   	ret    
c00185bd:	90                   	nop

c00185be <PCI::close(int, int, void*)>:
c00185be:	31 c0                	xor    eax,eax
c00185c0:	c3                   	ret    
c00185c1:	90                   	nop

c00185c2 <PCI::PCI()>:
c00185c2:	83 ec 0c             	sub    esp,0xc
c00185c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185c9:	83 ec 08             	sub    esp,0x8
c00185cc:	68 73 f4 01 c0       	push   0xc001f473
c00185d1:	50                   	push   eax
c00185d2:	e8 b5 2c ff ff       	call   c000b28c <Bus::Bus(char const*)>
c00185d7:	83 c4 10             	add    esp,0x10
c00185da:	ba 1c f5 01 c0       	mov    edx,0xc001f51c
c00185df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185e3:	89 10                	mov    DWORD PTR [eax],edx
c00185e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185e9:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c00185f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185f7:	a3 e0 49 02 c0       	mov    ds:0xc00249e0,eax
c00185fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018600:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0018606:	31 d2                	xor    edx,edx
c0018608:	88 c2                	mov    dl,al
c001860a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001860e:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0018615:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018619:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001861f:	31 d2                	xor    edx,edx
c0018621:	88 c2                	mov    dl,al
c0018623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018627:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001862c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018630:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0018636:	8d 50 01             	lea    edx,[eax+0x1]
c0018639:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001863d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0018643:	31 d2                	xor    edx,edx
c0018645:	88 c2                	mov    dl,al
c0018647:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001864b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001864f:	83 c9 c0             	or     ecx,0xffffffc0
c0018652:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0018656:	90                   	nop
c0018657:	83 c4 0c             	add    esp,0xc
c001865a:	c3                   	ret    
c001865b:	90                   	nop

c001865c <PCI::readBAR8(unsigned int, int)>:
c001865c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018660:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018664:	f6 c2 01             	test   dl,0x1
c0018667:	74 07                	je     c0018670 <PCI::readBAR8(unsigned int, int)+0x14>
c0018669:	83 e2 fc             	and    edx,0xfffffffc
c001866c:	01 c2                	add    edx,eax
c001866e:	ec                   	in     al,dx
c001866f:	c3                   	ret    
c0018670:	83 e2 f0             	and    edx,0xfffffff0
c0018673:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0018676:	c3                   	ret    
c0018677:	90                   	nop

c0018678 <PCI::readBAR16(unsigned int, int)>:
c0018678:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001867c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018680:	f6 c2 01             	test   dl,0x1
c0018683:	74 08                	je     c001868d <PCI::readBAR16(unsigned int, int)+0x15>
c0018685:	83 e2 fc             	and    edx,0xfffffffc
c0018688:	01 c2                	add    edx,eax
c001868a:	66 ed                	in     ax,dx
c001868c:	c3                   	ret    
c001868d:	83 e2 f0             	and    edx,0xfffffff0
c0018690:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0018694:	c3                   	ret    
c0018695:	90                   	nop

c0018696 <PCI::readBAR32(unsigned int, int)>:
c0018696:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001869a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001869e:	f6 c2 01             	test   dl,0x1
c00186a1:	74 07                	je     c00186aa <PCI::readBAR32(unsigned int, int)+0x14>
c00186a3:	83 e2 fc             	and    edx,0xfffffffc
c00186a6:	01 c2                	add    edx,eax
c00186a8:	ed                   	in     eax,dx
c00186a9:	c3                   	ret    
c00186aa:	83 e2 f0             	and    edx,0xfffffff0
c00186ad:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c00186b0:	c3                   	ret    
c00186b1:	90                   	nop

c00186b2 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c00186b2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00186b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00186ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00186be:	f6 c2 01             	test   dl,0x1
c00186c1:	74 07                	je     c00186ca <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c00186c3:	83 e2 fc             	and    edx,0xfffffffc
c00186c6:	01 ca                	add    edx,ecx
c00186c8:	ee                   	out    dx,al
c00186c9:	c3                   	ret    
c00186ca:	83 e2 f0             	and    edx,0xfffffff0
c00186cd:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c00186d0:	c3                   	ret    
c00186d1:	90                   	nop

c00186d2 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c00186d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00186d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00186da:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00186de:	f6 c2 01             	test   dl,0x1
c00186e1:	74 08                	je     c00186eb <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c00186e3:	83 e2 fc             	and    edx,0xfffffffc
c00186e6:	01 ca                	add    edx,ecx
c00186e8:	66 ef                	out    dx,ax
c00186ea:	c3                   	ret    
c00186eb:	83 e2 f0             	and    edx,0xfffffff0
c00186ee:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c00186f2:	c3                   	ret    
c00186f3:	90                   	nop

c00186f4 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c00186f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00186f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00186fc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018700:	f6 c2 01             	test   dl,0x1
c0018703:	74 07                	je     c001870c <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0018705:	83 e2 fc             	and    edx,0xfffffffc
c0018708:	01 ca                	add    edx,ecx
c001870a:	ef                   	out    dx,eax
c001870b:	c3                   	ret    
c001870c:	83 e2 f0             	and    edx,0xfffffff0
c001870f:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0018712:	c3                   	ret    
c0018713:	90                   	nop

c0018714 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018714:	55                   	push   ebp
c0018715:	57                   	push   edi
c0018716:	56                   	push   esi
c0018717:	53                   	push   ebx
c0018718:	83 ec 0c             	sub    esp,0xc
c001871b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001871f:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0018723:	89 f0                	mov    eax,esi
c0018725:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0018729:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001872d:	3c 07                	cmp    al,0x7
c001872f:	76 10                	jbe    c0018741 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0018731:	83 ec 0c             	sub    esp,0xc
c0018734:	68 7b f4 01 c0       	push   0xc001f47b
c0018739:	e8 25 7a ff ff       	call   c0010163 <KePanic(char const*)>
c001873e:	83 c4 10             	add    esp,0x10
c0018741:	80 fb 0f             	cmp    bl,0xf
c0018744:	76 10                	jbe    c0018756 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0018746:	83 ec 0c             	sub    esp,0xc
c0018749:	68 ab f4 01 c0       	push   0xc001f4ab
c001874e:	e8 10 7a ff ff       	call   c0010163 <KePanic(char const*)>
c0018753:	83 c4 10             	add    esp,0x10
c0018756:	8d 04 36             	lea    eax,[esi+esi*1]
c0018759:	ba f8 0c 00 00       	mov    edx,0xcf8
c001875e:	83 c8 f0             	or     eax,0xfffffff0
c0018761:	ee                   	out    dx,al
c0018762:	ba fa 0c 00 00       	mov    edx,0xcfa
c0018767:	89 e8                	mov    eax,ebp
c0018769:	ee                   	out    dx,al
c001876a:	83 c4 0c             	add    esp,0xc
c001876d:	89 d8                	mov    eax,ebx
c001876f:	66 81 e7 fc 00       	and    di,0xfc
c0018774:	5b                   	pop    ebx
c0018775:	c1 e0 08             	shl    eax,0x8
c0018778:	5e                   	pop    esi
c0018779:	09 f8                	or     eax,edi
c001877b:	5f                   	pop    edi
c001877c:	66 0d 00 c0          	or     ax,0xc000
c0018780:	5d                   	pop    ebp
c0018781:	c3                   	ret    

c0018782 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018782:	57                   	push   edi
c0018783:	56                   	push   esi
c0018784:	53                   	push   ebx
c0018785:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018789:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001878d:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0018793:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018797:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001879b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001879f:	83 ff 01             	cmp    edi,0x1
c00187a2:	75 3e                	jne    c00187e2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c00187a4:	89 de                	mov    esi,ebx
c00187a6:	0f b6 c0             	movzx  eax,al
c00187a9:	81 e6 fc 00 00 00    	and    esi,0xfc
c00187af:	c1 e0 10             	shl    eax,0x10
c00187b2:	0f b6 c9             	movzx  ecx,cl
c00187b5:	09 f0                	or     eax,esi
c00187b7:	c1 e1 08             	shl    ecx,0x8
c00187ba:	0f b6 d2             	movzx  edx,dl
c00187bd:	09 c8                	or     eax,ecx
c00187bf:	c1 e2 0b             	shl    edx,0xb
c00187c2:	09 d0                	or     eax,edx
c00187c4:	ba f8 0c 00 00       	mov    edx,0xcf8
c00187c9:	0d 00 00 00 80       	or     eax,0x80000000
c00187ce:	ef                   	out    dx,eax
c00187cf:	ba fc 0c 00 00       	mov    edx,0xcfc
c00187d4:	ed                   	in     eax,dx
c00187d5:	83 e3 02             	and    ebx,0x2
c00187d8:	0f b6 cb             	movzx  ecx,bl
c00187db:	c1 e1 03             	shl    ecx,0x3
c00187de:	d3 e8                	shr    eax,cl
c00187e0:	eb 43                	jmp    c0018825 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00187e2:	83 ff 02             	cmp    edi,0x2
c00187e5:	75 2c                	jne    c0018813 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c00187e7:	83 ec 0c             	sub    esp,0xc
c00187ea:	0f b6 c9             	movzx  ecx,cl
c00187ed:	0f b6 d2             	movzx  edx,dl
c00187f0:	0f b6 fb             	movzx  edi,bl
c00187f3:	0f b6 c0             	movzx  eax,al
c00187f6:	57                   	push   edi
c00187f7:	51                   	push   ecx
c00187f8:	52                   	push   edx
c00187f9:	50                   	push   eax
c00187fa:	56                   	push   esi
c00187fb:	e8 14 ff ff ff       	call   c0018714 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018800:	89 c2                	mov    edx,eax
c0018802:	ed                   	in     eax,dx
c0018803:	83 e3 02             	and    ebx,0x2
c0018806:	83 c4 20             	add    esp,0x20
c0018809:	0f b6 cb             	movzx  ecx,bl
c001880c:	c1 e1 03             	shl    ecx,0x3
c001880f:	d3 e8                	shr    eax,cl
c0018811:	eb 12                	jmp    c0018825 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0018813:	83 ec 0c             	sub    esp,0xc
c0018816:	68 db f4 01 c0       	push   0xc001f4db
c001881b:	e8 43 79 ff ff       	call   c0010163 <KePanic(char const*)>
c0018820:	83 c4 10             	add    esp,0x10
c0018823:	31 c0                	xor    eax,eax
c0018825:	5b                   	pop    ebx
c0018826:	5e                   	pop    esi
c0018827:	5f                   	pop    edi
c0018828:	c3                   	ret    
c0018829:	90                   	nop

c001882a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001882a:	83 ec 18             	sub    esp,0x18
c001882d:	6a 00                	push   0x0
c001882f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018834:	50                   	push   eax
c0018835:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001883a:	50                   	push   eax
c001883b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018840:	50                   	push   eax
c0018841:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018845:	e8 38 ff ff ff       	call   c0018782 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001884a:	83 c4 2c             	add    esp,0x2c
c001884d:	c3                   	ret    

c001884e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001884e:	83 ec 18             	sub    esp,0x18
c0018851:	6a 0e                	push   0xe
c0018853:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018858:	50                   	push   eax
c0018859:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001885e:	50                   	push   eax
c001885f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018864:	50                   	push   eax
c0018865:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018869:	e8 14 ff ff ff       	call   c0018782 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001886e:	83 c4 2c             	add    esp,0x2c
c0018871:	0f b6 c0             	movzx  eax,al
c0018874:	c3                   	ret    
c0018875:	90                   	nop

c0018876 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0018876:	55                   	push   ebp
c0018877:	57                   	push   edi
c0018878:	56                   	push   esi
c0018879:	53                   	push   ebx
c001887a:	83 ec 18             	sub    esp,0x18
c001887d:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0018882:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0018887:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001888c:	6a 0a                	push   0xa
c001888e:	56                   	push   esi
c001888f:	55                   	push   ebp
c0018890:	57                   	push   edi
c0018891:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018895:	e8 e8 fe ff ff       	call   c0018782 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001889a:	83 c4 14             	add    esp,0x14
c001889d:	89 c3                	mov    ebx,eax
c001889f:	6a 0a                	push   0xa
c00188a1:	0f b6 db             	movzx  ebx,bl
c00188a4:	56                   	push   esi
c00188a5:	55                   	push   ebp
c00188a6:	57                   	push   edi
c00188a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00188ab:	e8 d2 fe ff ff       	call   c0018782 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188b0:	83 c4 2c             	add    esp,0x2c
c00188b3:	25 00 ff 00 00       	and    eax,0xff00
c00188b8:	09 d8                	or     eax,ebx
c00188ba:	5b                   	pop    ebx
c00188bb:	5e                   	pop    esi
c00188bc:	5f                   	pop    edi
c00188bd:	5d                   	pop    ebp
c00188be:	c3                   	ret    
c00188bf:	90                   	nop

c00188c0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00188c0:	83 ec 18             	sub    esp,0x18
c00188c3:	6a 08                	push   0x8
c00188c5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188ca:	50                   	push   eax
c00188cb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188d0:	50                   	push   eax
c00188d1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188d6:	50                   	push   eax
c00188d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00188db:	e8 a2 fe ff ff       	call   c0018782 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188e0:	83 c4 2c             	add    esp,0x2c
c00188e3:	0f b6 c4             	movzx  eax,ah
c00188e6:	c3                   	ret    
c00188e7:	90                   	nop

c00188e8 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c00188e8:	83 ec 18             	sub    esp,0x18
c00188eb:	6a 08                	push   0x8
c00188ed:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188f2:	50                   	push   eax
c00188f3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188f8:	50                   	push   eax
c00188f9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188fe:	50                   	push   eax
c00188ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018903:	e8 7a fe ff ff       	call   c0018782 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018908:	83 c4 2c             	add    esp,0x2c
c001890b:	c3                   	ret    

c001890c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001890c:	83 ec 18             	sub    esp,0x18
c001890f:	6a 3c                	push   0x3c
c0018911:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018916:	50                   	push   eax
c0018917:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001891c:	50                   	push   eax
c001891d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018922:	50                   	push   eax
c0018923:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018927:	e8 56 fe ff ff       	call   c0018782 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001892c:	83 c4 2c             	add    esp,0x2c
c001892f:	c3                   	ret    

c0018930 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0018930:	83 ec 18             	sub    esp,0x18
c0018933:	6a 18                	push   0x18
c0018935:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001893a:	50                   	push   eax
c001893b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018940:	50                   	push   eax
c0018941:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018946:	50                   	push   eax
c0018947:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001894b:	e8 32 fe ff ff       	call   c0018782 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018950:	83 c4 2c             	add    esp,0x2c
c0018953:	0f b6 c4             	movzx  eax,ah
c0018956:	c3                   	ret    
c0018957:	90                   	nop

c0018958 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018958:	55                   	push   ebp
c0018959:	57                   	push   edi
c001895a:	56                   	push   esi
c001895b:	53                   	push   ebx
c001895c:	83 ec 28             	sub    esp,0x28
c001895f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0018963:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0018968:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001896d:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0018972:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0018979:	8d 43 12             	lea    eax,[ebx+0x12]
c001897c:	83 c3 10             	add    ebx,0x10
c001897f:	0f b6 c0             	movzx  eax,al
c0018982:	0f b6 db             	movzx  ebx,bl
c0018985:	50                   	push   eax
c0018986:	51                   	push   ecx
c0018987:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001898b:	57                   	push   edi
c001898c:	55                   	push   ebp
c001898d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018991:	e8 ec fd ff ff       	call   c0018782 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018996:	83 c4 14             	add    esp,0x14
c0018999:	89 c6                	mov    esi,eax
c001899b:	53                   	push   ebx
c001899c:	c1 e6 10             	shl    esi,0x10
c001899f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00189a3:	51                   	push   ecx
c00189a4:	57                   	push   edi
c00189a5:	55                   	push   ebp
c00189a6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00189aa:	e8 d3 fd ff ff       	call   c0018782 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00189af:	83 c4 3c             	add    esp,0x3c
c00189b2:	0f b7 c0             	movzx  eax,ax
c00189b5:	5b                   	pop    ebx
c00189b6:	09 f0                	or     eax,esi
c00189b8:	5e                   	pop    esi
c00189b9:	5f                   	pop    edi
c00189ba:	5d                   	pop    ebp
c00189bb:	c3                   	ret    

c00189bc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00189bc:	55                   	push   ebp
c00189bd:	57                   	push   edi
c00189be:	56                   	push   esi
c00189bf:	53                   	push   ebx
c00189c0:	83 ec 0c             	sub    esp,0xc
c00189c3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00189c7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00189cb:	89 f5                	mov    ebp,esi
c00189cd:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c00189d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00189d7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00189db:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00189df:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00189e3:	83 f9 01             	cmp    ecx,0x1
c00189e6:	75 5d                	jne    c0018a45 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c00189e8:	0f b6 c8             	movzx  ecx,al
c00189eb:	0f b6 d2             	movzx  edx,dl
c00189ee:	c1 e1 10             	shl    ecx,0x10
c00189f1:	c1 e2 0b             	shl    edx,0xb
c00189f4:	89 f0                	mov    eax,esi
c00189f6:	25 fc 00 00 00       	and    eax,0xfc
c00189fb:	09 c1                	or     ecx,eax
c00189fd:	89 e8                	mov    eax,ebp
c00189ff:	0f b6 c0             	movzx  eax,al
c0018a02:	c1 e0 08             	shl    eax,0x8
c0018a05:	09 c1                	or     ecx,eax
c0018a07:	09 d1                	or     ecx,edx
c0018a09:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018a0e:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0018a14:	89 c8                	mov    eax,ecx
c0018a16:	ef                   	out    dx,eax
c0018a17:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018a1c:	ed                   	in     eax,dx
c0018a1d:	0f b7 db             	movzx  ebx,bx
c0018a20:	83 e6 02             	and    esi,0x2
c0018a23:	74 0a                	je     c0018a2f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0018a25:	0f b7 d0             	movzx  edx,ax
c0018a28:	c1 e3 10             	shl    ebx,0x10
c0018a2b:	09 d3                	or     ebx,edx
c0018a2d:	eb 05                	jmp    c0018a34 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0018a2f:	66 31 c0             	xor    ax,ax
c0018a32:	09 c3                	or     ebx,eax
c0018a34:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018a39:	89 c8                	mov    eax,ecx
c0018a3b:	ef                   	out    dx,eax
c0018a3c:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018a41:	89 d8                	mov    eax,ebx
c0018a43:	eb 41                	jmp    c0018a86 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0018a45:	83 f9 02             	cmp    ecx,0x2
c0018a48:	75 45                	jne    c0018a8f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0018a4a:	83 ec 0c             	sub    esp,0xc
c0018a4d:	0f b6 d2             	movzx  edx,dl
c0018a50:	89 f1                	mov    ecx,esi
c0018a52:	0f b6 c0             	movzx  eax,al
c0018a55:	0f b6 f1             	movzx  esi,cl
c0018a58:	89 e9                	mov    ecx,ebp
c0018a5a:	56                   	push   esi
c0018a5b:	0f b6 c9             	movzx  ecx,cl
c0018a5e:	51                   	push   ecx
c0018a5f:	52                   	push   edx
c0018a60:	50                   	push   eax
c0018a61:	57                   	push   edi
c0018a62:	e8 ad fc ff ff       	call   c0018714 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018a67:	89 c2                	mov    edx,eax
c0018a69:	ed                   	in     eax,dx
c0018a6a:	83 c4 20             	add    esp,0x20
c0018a6d:	0f b7 db             	movzx  ebx,bx
c0018a70:	f6 c2 02             	test   dl,0x2
c0018a73:	74 0c                	je     c0018a81 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0018a75:	0f b7 c8             	movzx  ecx,ax
c0018a78:	89 d8                	mov    eax,ebx
c0018a7a:	c1 e0 10             	shl    eax,0x10
c0018a7d:	09 c8                	or     eax,ecx
c0018a7f:	eb 05                	jmp    c0018a86 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0018a81:	66 31 c0             	xor    ax,ax
c0018a84:	09 d8                	or     eax,ebx
c0018a86:	ef                   	out    dx,eax
c0018a87:	83 c4 0c             	add    esp,0xc
c0018a8a:	5b                   	pop    ebx
c0018a8b:	5e                   	pop    esi
c0018a8c:	5f                   	pop    edi
c0018a8d:	5d                   	pop    ebp
c0018a8e:	c3                   	ret    
c0018a8f:	c7 44 24 20 db f4 01 c0 	mov    DWORD PTR [esp+0x20],0xc001f4db
c0018a97:	83 c4 0c             	add    esp,0xc
c0018a9a:	5b                   	pop    ebx
c0018a9b:	5e                   	pop    esi
c0018a9c:	5f                   	pop    edi
c0018a9d:	5d                   	pop    ebp
c0018a9e:	e9 c0 76 ff ff       	jmp    c0010163 <KePanic(char const*)>
c0018aa3:	90                   	nop

c0018aa4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0018aa4:	55                   	push   ebp
c0018aa5:	57                   	push   edi
c0018aa6:	56                   	push   esi
c0018aa7:	53                   	push   ebx
c0018aa8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018aae:	80 3d ec 49 02 c0 00 	cmp    BYTE PTR ds:0xc00249ec,0x0
c0018ab5:	0f 85 84 00 00 00    	jne    c0018b3f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0018abb:	83 ec 0c             	sub    esp,0xc
c0018abe:	68 14 01 00 00       	push   0x114
c0018ac3:	e8 f1 ec fe ff       	call   c00077b9 <malloc>
c0018ac8:	83 c4 0c             	add    esp,0xc
c0018acb:	89 c3                	mov    ebx,eax
c0018acd:	ff 35 30 40 02 c0    	push   DWORD PTR ds:0xc0024030
c0018ad3:	68 e1 f4 01 c0       	push   0xc001f4e1
c0018ad8:	50                   	push   eax
c0018ad9:	e8 90 1f ff ff       	call   c000aa6e <File::File(char const*, Process*)>
c0018ade:	5a                   	pop    edx
c0018adf:	59                   	pop    ecx
c0018ae0:	6a 01                	push   0x1
c0018ae2:	53                   	push   ebx
c0018ae3:	e8 46 20 ff ff       	call   c000ab2e <File::open(FileOpenMode)>
c0018ae8:	83 c4 0c             	add    esp,0xc
c0018aeb:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0018aef:	50                   	push   eax
c0018af0:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018af4:	50                   	push   eax
c0018af5:	53                   	push   ebx
c0018af6:	e8 df 22 ff ff       	call   c000adda <File::stat(unsigned long long*, bool*)>
c0018afb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018aff:	40                   	inc    eax
c0018b00:	89 04 24             	mov    DWORD PTR [esp],eax
c0018b03:	e8 b1 ec fe ff       	call   c00077b9 <malloc>
c0018b08:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018b0c:	a3 e8 49 02 c0       	mov    ds:0xc00249e8,eax
c0018b11:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0018b15:	5e                   	pop    esi
c0018b16:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018b18:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0018b1c:	51                   	push   ecx
c0018b1d:	50                   	push   eax
c0018b1e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018b22:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018b26:	53                   	push   ebx
c0018b27:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018b2a:	83 c4 14             	add    esp,0x14
c0018b2d:	53                   	push   ebx
c0018b2e:	e8 59 20 ff ff       	call   c000ab8c <File::close()>
c0018b33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b37:	83 c4 10             	add    esp,0x10
c0018b3a:	a3 e4 49 02 c0       	mov    ds:0xc00249e4,eax
c0018b3f:	a1 e4 49 02 c0       	mov    eax,ds:0xc00249e4
c0018b44:	8b 15 e8 49 02 c0    	mov    edx,DWORD PTR ds:0xc00249e8
c0018b4a:	89 04 24             	mov    DWORD PTR [esp],eax
c0018b4d:	31 ff                	xor    edi,edi
c0018b4f:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0018b57:	31 f6                	xor    esi,esi
c0018b59:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018b5e:	31 db                	xor    ebx,ebx
c0018b60:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0018b68:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018b6d:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0018b74:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0018b78:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0018b7f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0018b83:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018b86:	0f 8e 6b 01 00 00    	jle    c0018cf7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0018b8c:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018b8f:	d4 40                	aam    0x40
c0018b91:	d5 39                	aad    0x39
c0018b93:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018b97:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0018b9b:	d4 40                	aam    0x40
c0018b9d:	d5 39                	aad    0x39
c0018b9f:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018ba3:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0018ba7:	d4 40                	aam    0x40
c0018ba9:	d5 39                	aad    0x39
c0018bab:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018baf:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0018bb3:	d4 40                	aam    0x40
c0018bb5:	d5 39                	aad    0x39
c0018bb7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018bbb:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0018bbf:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018bc3:	3c 56                	cmp    al,0x56
c0018bc5:	74 45                	je     c0018c0c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0018bc7:	d4 40                	aam    0x40
c0018bc9:	d5 39                	aad    0x39
c0018bcb:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018bce:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0018bd2:	0f b6 c9             	movzx  ecx,cl
c0018bd5:	c1 e1 04             	shl    ecx,0x4
c0018bd8:	d4 40                	aam    0x40
c0018bda:	d5 39                	aad    0x39
c0018bdc:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018bdf:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0018be3:	0f b6 db             	movzx  ebx,bl
c0018be6:	09 cb                	or     ebx,ecx
c0018be8:	c1 e3 04             	shl    ebx,0x4
c0018beb:	d4 40                	aam    0x40
c0018bed:	d5 39                	aad    0x39
c0018bef:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018bf2:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0018bf6:	0f b6 c9             	movzx  ecx,cl
c0018bf9:	09 cb                	or     ebx,ecx
c0018bfb:	c1 e3 04             	shl    ebx,0x4
c0018bfe:	89 d9                	mov    ecx,ebx
c0018c00:	d4 40                	aam    0x40
c0018c02:	d5 39                	aad    0x39
c0018c04:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018c07:	0f b6 db             	movzx  ebx,bl
c0018c0a:	09 cb                	or     ebx,ecx
c0018c0c:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0018c10:	80 f9 44             	cmp    cl,0x44
c0018c13:	74 47                	je     c0018c5c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0018c15:	88 c8                	mov    al,cl
c0018c17:	d4 40                	aam    0x40
c0018c19:	d5 39                	aad    0x39
c0018c1b:	83 e8 30             	sub    eax,0x30
c0018c1e:	0f b6 e8             	movzx  ebp,al
c0018c21:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0018c25:	c1 e5 04             	shl    ebp,0x4
c0018c28:	d4 40                	aam    0x40
c0018c2a:	d5 39                	aad    0x39
c0018c2c:	83 e8 30             	sub    eax,0x30
c0018c2f:	0f b6 f0             	movzx  esi,al
c0018c32:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0018c36:	09 ee                	or     esi,ebp
c0018c38:	c1 e6 04             	shl    esi,0x4
c0018c3b:	d4 40                	aam    0x40
c0018c3d:	d5 39                	aad    0x39
c0018c3f:	83 e8 30             	sub    eax,0x30
c0018c42:	0f b6 e8             	movzx  ebp,al
c0018c45:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0018c49:	09 ee                	or     esi,ebp
c0018c4b:	c1 e6 04             	shl    esi,0x4
c0018c4e:	89 f5                	mov    ebp,esi
c0018c50:	d4 40                	aam    0x40
c0018c52:	d5 39                	aad    0x39
c0018c54:	83 e8 30             	sub    eax,0x30
c0018c57:	0f b6 f0             	movzx  esi,al
c0018c5a:	09 ee                	or     esi,ebp
c0018c5c:	83 c7 10             	add    edi,0x10
c0018c5f:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0018c63:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018c66:	3c 0a                	cmp    al,0xa
c0018c68:	74 09                	je     c0018c73 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0018c6a:	45                   	inc    ebp
c0018c6b:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018c6e:	75 16                	jne    c0018c86 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0018c70:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0018c73:	3c 0a                	cmp    al,0xa
c0018c75:	0f 94 c0             	sete   al
c0018c78:	0f b6 c0             	movzx  eax,al
c0018c7b:	01 c7                	add    edi,eax
c0018c7d:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0018c82:	75 0c                	jne    c0018c90 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0018c84:	eb 15                	jmp    c0018c9b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0018c86:	47                   	inc    edi
c0018c87:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0018c8a:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0018c8e:	eb d3                	jmp    c0018c63 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0018c90:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0018c95:	0f 85 e8 fe ff ff    	jne    c0018b83 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c9b:	80 f9 44             	cmp    cl,0x44
c0018c9e:	74 0b                	je     c0018cab <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0018ca0:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0018ca5:	0f 85 d8 fe ff ff    	jne    c0018b83 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018cab:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018caf:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018cb3:	c1 e1 04             	shl    ecx,0x4
c0018cb6:	83 e8 30             	sub    eax,0x30
c0018cb9:	09 c8                	or     eax,ecx
c0018cbb:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0018cbf:	0f 85 be fe ff ff    	jne    c0018b83 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018cc5:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0018cc9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018ccd:	c1 e1 04             	shl    ecx,0x4
c0018cd0:	83 e8 30             	sub    eax,0x30
c0018cd3:	09 c8                	or     eax,ecx
c0018cd5:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0018cd9:	0f 85 a4 fe ff ff    	jne    c0018b83 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018cdf:	50                   	push   eax
c0018ce0:	50                   	push   eax
c0018ce1:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018ce5:	50                   	push   eax
c0018ce6:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0018ced:	e8 0e 79 fe ff       	call   c0000600 <strcpy>
c0018cf2:	83 c4 10             	add    esp,0x10
c0018cf5:	eb 15                	jmp    c0018d0c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0018cf7:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018cfe:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0018d09:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018d0c:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018d13:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018d19:	5b                   	pop    ebx
c0018d1a:	5e                   	pop    esi
c0018d1b:	5f                   	pop    edi
c0018d1c:	5d                   	pop    ebp
c0018d1d:	c3                   	ret    

c0018d1e <PCI::checkBus(unsigned char)>:
c0018d1e:	56                   	push   esi
c0018d1f:	53                   	push   ebx
c0018d20:	31 f6                	xor    esi,esi
c0018d22:	51                   	push   ecx
c0018d23:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c0018d27:	0f b6 c3             	movzx  eax,bl
c0018d2a:	52                   	push   edx
c0018d2b:	56                   	push   esi
c0018d2c:	46                   	inc    esi
c0018d2d:	50                   	push   eax
c0018d2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018d32:	e8 f3 02 00 00       	call   c001902a <PCI::checkDevice(unsigned char, unsigned char)>
c0018d37:	83 c4 10             	add    esp,0x10
c0018d3a:	83 fe 20             	cmp    esi,0x20
c0018d3d:	75 e8                	jne    c0018d27 <PCI::checkBus(unsigned char)+0x9>
c0018d3f:	58                   	pop    eax
c0018d40:	5b                   	pop    ebx
c0018d41:	5e                   	pop    esi
c0018d42:	c3                   	ret    
c0018d43:	90                   	nop

c0018d44 <PCI::foundDevice(PCIDeviceInfo)>:
c0018d44:	55                   	push   ebp
c0018d45:	57                   	push   edi
c0018d46:	56                   	push   esi
c0018d47:	53                   	push   ebx
c0018d48:	83 ec 1c             	sub    esp,0x1c
c0018d4b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018d4f:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0018d55:	0f 84 52 01 00 00    	je     c0018ead <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018d5b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0018d5f:	66 81 f9 06 04       	cmp    cx,0x406
c0018d64:	75 2c                	jne    c0018d92 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0018d66:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0018d6b:	50                   	push   eax
c0018d6c:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0018d71:	50                   	push   eax
c0018d72:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0018d77:	50                   	push   eax
c0018d78:	56                   	push   esi
c0018d79:	e8 b2 fb ff ff       	call   c0018930 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0018d7e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0018d82:	0f b6 c0             	movzx  eax,al
c0018d85:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018d89:	83 c4 2c             	add    esp,0x2c
c0018d8c:	5b                   	pop    ebx
c0018d8d:	5e                   	pop    esi
c0018d8e:	5f                   	pop    edi
c0018d8f:	5d                   	pop    ebp
c0018d90:	eb 8c                	jmp    c0018d1e <PCI::checkBus(unsigned char)>
c0018d92:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018d96:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0018d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018da0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018da4:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0018da8:	88 d3                	mov    bl,dl
c0018daa:	85 c0                	test   eax,eax
c0018dac:	74 33                	je     c0018de1 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0018dae:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018db1:	85 d2                	test   edx,edx
c0018db3:	74 28                	je     c0018ddd <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018db5:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0018dbb:	31 ef                	xor    edi,ebp
c0018dbd:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0018dc3:	75 18                	jne    c0018ddd <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018dc5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018dc9:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0018dcf:	75 0c                	jne    c0018ddd <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018dd1:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0018dd7:	0f 84 d0 00 00 00    	je     c0018ead <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018ddd:	8b 00                	mov    eax,DWORD PTR [eax]
c0018ddf:	eb c9                	jmp    c0018daa <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0018de1:	66 81 f9 01 06       	cmp    cx,0x601
c0018de6:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0018dea:	75 19                	jne    c0018e05 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0018dec:	83 ec 0c             	sub    esp,0xc
c0018def:	68 64 01 00 00       	push   0x164
c0018df4:	e8 c0 e9 fe ff       	call   c00077b9 <malloc>
c0018df9:	89 c5                	mov    ebp,eax
c0018dfb:	89 04 24             	mov    DWORD PTR [esp],eax
c0018dfe:	e8 47 0e 00 00       	call   c0019c4a <SATABus::SATABus()>
c0018e03:	eb 1e                	jmp    c0018e23 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0018e05:	66 81 f9 01 01       	cmp    cx,0x101
c0018e0a:	75 60                	jne    c0018e6c <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0018e0c:	83 ec 0c             	sub    esp,0xc
c0018e0f:	68 70 02 00 00       	push   0x270
c0018e14:	e8 a0 e9 fe ff       	call   c00077b9 <malloc>
c0018e19:	89 c5                	mov    ebp,eax
c0018e1b:	89 04 24             	mov    DWORD PTR [esp],eax
c0018e1e:	e8 cb 02 00 00       	call   c00190ee <IDE::IDE()>
c0018e23:	58                   	pop    eax
c0018e24:	5a                   	pop    edx
c0018e25:	55                   	push   ebp
c0018e26:	56                   	push   esi
c0018e27:	e8 0c 2b ff ff       	call   c000b938 <Device::addChild(Device*)>
c0018e2c:	83 ec 1c             	sub    esp,0x1c
c0018e2f:	b9 09 00 00 00       	mov    ecx,0x9
c0018e34:	fc                   	cld    
c0018e35:	89 e7                	mov    edi,esp
c0018e37:	89 de                	mov    esi,ebx
c0018e39:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018e3b:	55                   	push   ebp
c0018e3c:	e8 3d 2a ff ff       	call   c000b87e <Device::preOpenPCI(PCIDeviceInfo)>
c0018e41:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018e44:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0018e48:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0018e50:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0018e58:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0018e60:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018e63:	83 c4 4c             	add    esp,0x4c
c0018e66:	5b                   	pop    ebx
c0018e67:	5e                   	pop    esi
c0018e68:	5f                   	pop    edi
c0018e69:	5d                   	pop    ebp
c0018e6a:	ff e0                	jmp    eax
c0018e6c:	83 ec 0c             	sub    esp,0xc
c0018e6f:	68 58 01 00 00       	push   0x158
c0018e74:	e8 40 e9 fe ff       	call   c00077b9 <malloc>
c0018e79:	89 c5                	mov    ebp,eax
c0018e7b:	58                   	pop    eax
c0018e7c:	5a                   	pop    edx
c0018e7d:	68 fa f4 01 c0       	push   0xc001f4fa
c0018e82:	55                   	push   ebp
c0018e83:	e8 4e 2d ff ff       	call   c000bbd6 <DriverlessDevice::DriverlessDevice(char const*)>
c0018e88:	59                   	pop    ecx
c0018e89:	5f                   	pop    edi
c0018e8a:	55                   	push   ebp
c0018e8b:	56                   	push   esi
c0018e8c:	e8 a7 2a ff ff       	call   c000b938 <Device::addChild(Device*)>
c0018e91:	b9 09 00 00 00       	mov    ecx,0x9
c0018e96:	fc                   	cld    
c0018e97:	89 df                	mov    edi,ebx
c0018e99:	89 de                	mov    esi,ebx
c0018e9b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018e9d:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0018ea1:	83 c4 2c             	add    esp,0x2c
c0018ea4:	5b                   	pop    ebx
c0018ea5:	5e                   	pop    esi
c0018ea6:	5f                   	pop    edi
c0018ea7:	5d                   	pop    ebp
c0018ea8:	e9 d1 29 ff ff       	jmp    c000b87e <Device::preOpenPCI(PCIDeviceInfo)>
c0018ead:	83 c4 1c             	add    esp,0x1c
c0018eb0:	5b                   	pop    ebx
c0018eb1:	5e                   	pop    esi
c0018eb2:	5f                   	pop    edi
c0018eb3:	5d                   	pop    ebp
c0018eb4:	c3                   	ret    
c0018eb5:	90                   	nop

c0018eb6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0018eb6:	55                   	push   ebp
c0018eb7:	57                   	push   edi
c0018eb8:	56                   	push   esi
c0018eb9:	53                   	push   ebx
c0018eba:	83 ec 68             	sub    esp,0x68
c0018ebd:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0018ec1:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018ec8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018ecc:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0018ed3:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c0018ed8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018edc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0018ee3:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c0018ee8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018eec:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018ef1:	6a 0c                	push   0xc
c0018ef3:	57                   	push   edi
c0018ef4:	53                   	push   ebx
c0018ef5:	56                   	push   esi
c0018ef6:	55                   	push   ebp
c0018ef7:	e8 86 f8 ff ff       	call   c0018782 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018efc:	83 c4 20             	add    esp,0x20
c0018eff:	57                   	push   edi
c0018f00:	53                   	push   ebx
c0018f01:	56                   	push   esi
c0018f02:	55                   	push   ebp
c0018f03:	e8 6e f9 ff ff       	call   c0018876 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0018f08:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0018f0d:	57                   	push   edi
c0018f0e:	53                   	push   ebx
c0018f0f:	56                   	push   esi
c0018f10:	55                   	push   ebp
c0018f11:	e8 f6 f9 ff ff       	call   c001890c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0018f16:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0018f1a:	83 c4 14             	add    esp,0x14
c0018f1d:	6a 3c                	push   0x3c
c0018f1f:	57                   	push   edi
c0018f20:	53                   	push   ebx
c0018f21:	56                   	push   esi
c0018f22:	55                   	push   ebp
c0018f23:	e8 5a f8 ff ff       	call   c0018782 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018f28:	0f b6 c4             	movzx  eax,ah
c0018f2b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018f2f:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0018f33:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0018f37:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c0018f3c:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c0018f42:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c0018f48:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018f4c:	83 c4 20             	add    esp,0x20
c0018f4f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018f54:	74 30                	je     c0018f86 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018f56:	31 c0                	xor    eax,eax
c0018f58:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018f5c:	7e 28                	jle    c0018f86 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018f5e:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c0018f66:	39 cb                	cmp    ebx,ecx
c0018f68:	75 19                	jne    c0018f83 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018f6a:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c0018f72:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0018f76:	75 0b                	jne    c0018f83 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018f78:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c0018f7f:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c0018f83:	40                   	inc    eax
c0018f84:	eb d2                	jmp    c0018f58 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c0018f86:	31 d2                	xor    edx,edx
c0018f88:	83 ec 0c             	sub    esp,0xc
c0018f8b:	57                   	push   edi
c0018f8c:	53                   	push   ebx
c0018f8d:	56                   	push   esi
c0018f8e:	52                   	push   edx
c0018f8f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0018f93:	55                   	push   ebp
c0018f94:	e8 bf f9 ff ff       	call   c0018958 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018f99:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018f9d:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0018fa1:	42                   	inc    edx
c0018fa2:	83 c4 20             	add    esp,0x20
c0018fa5:	83 fa 06             	cmp    edx,0x6
c0018fa8:	75 de                	jne    c0018f88 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c0018faa:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018faf:	83 ec 0c             	sub    esp,0xc
c0018fb2:	86 e0                	xchg   al,ah
c0018fb4:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0018fb9:	6a 02                	push   0x2
c0018fbb:	57                   	push   edi
c0018fbc:	53                   	push   ebx
c0018fbd:	56                   	push   esi
c0018fbe:	55                   	push   ebp
c0018fbf:	e8 be f7 ff ff       	call   c0018782 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018fc4:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0018fc9:	83 c4 20             	add    esp,0x20
c0018fcc:	57                   	push   edi
c0018fcd:	53                   	push   ebx
c0018fce:	56                   	push   esi
c0018fcf:	55                   	push   ebp
c0018fd0:	e8 eb f8 ff ff       	call   c00188c0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0018fd5:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018fd9:	57                   	push   edi
c0018fda:	53                   	push   ebx
c0018fdb:	56                   	push   esi
c0018fdc:	55                   	push   ebp
c0018fdd:	e8 48 f8 ff ff       	call   c001882a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018fe2:	b9 09 00 00 00       	mov    ecx,0x9
c0018fe7:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0018fec:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c0018ff0:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0018ff4:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0018ff8:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0018ffc:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0019000:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0019004:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c0019008:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001900c:	83 ec 0c             	sub    esp,0xc
c001900f:	fc                   	cld    
c0019010:	89 e7                	mov    edi,esp
c0019012:	8d 74 24 58          	lea    esi,[esp+0x58]
c0019016:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0019018:	55                   	push   ebp
c0019019:	e8 26 fd ff ff       	call   c0018d44 <PCI::foundDevice(PCIDeviceInfo)>
c001901e:	81 c4 8c 00 00 00    	add    esp,0x8c
c0019024:	5b                   	pop    ebx
c0019025:	5e                   	pop    esi
c0019026:	5f                   	pop    edi
c0019027:	5d                   	pop    ebp
c0019028:	c3                   	ret    
c0019029:	90                   	nop

c001902a <PCI::checkDevice(unsigned char, unsigned char)>:
c001902a:	55                   	push   ebp
c001902b:	57                   	push   edi
c001902c:	56                   	push   esi
c001902d:	53                   	push   ebx
c001902e:	83 ec 0c             	sub    esp,0xc
c0019031:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0019035:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001903a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001903f:	6a 00                	push   0x0
c0019041:	56                   	push   esi
c0019042:	57                   	push   edi
c0019043:	55                   	push   ebp
c0019044:	e8 e1 f7 ff ff       	call   c001882a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0019049:	6a 00                	push   0x0
c001904b:	56                   	push   esi
c001904c:	57                   	push   edi
c001904d:	55                   	push   ebp
c001904e:	e8 63 fe ff ff       	call   c0018eb6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0019053:	83 c4 20             	add    esp,0x20
c0019056:	6a 00                	push   0x0
c0019058:	56                   	push   esi
c0019059:	57                   	push   edi
c001905a:	55                   	push   ebp
c001905b:	e8 ee f7 ff ff       	call   c001884e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0019060:	83 c4 10             	add    esp,0x10
c0019063:	84 c0                	test   al,al
c0019065:	79 27                	jns    c001908e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0019067:	bb 01 00 00 00       	mov    ebx,0x1
c001906c:	53                   	push   ebx
c001906d:	56                   	push   esi
c001906e:	57                   	push   edi
c001906f:	55                   	push   ebp
c0019070:	e8 b5 f7 ff ff       	call   c001882a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0019075:	83 c4 10             	add    esp,0x10
c0019078:	66 40                	inc    ax
c001907a:	74 0c                	je     c0019088 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001907c:	53                   	push   ebx
c001907d:	56                   	push   esi
c001907e:	57                   	push   edi
c001907f:	55                   	push   ebp
c0019080:	e8 31 fe ff ff       	call   c0018eb6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0019085:	83 c4 10             	add    esp,0x10
c0019088:	43                   	inc    ebx
c0019089:	83 fb 08             	cmp    ebx,0x8
c001908c:	75 de                	jne    c001906c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001908e:	83 c4 0c             	add    esp,0xc
c0019091:	5b                   	pop    ebx
c0019092:	5e                   	pop    esi
c0019093:	5f                   	pop    edi
c0019094:	5d                   	pop    ebp
c0019095:	c3                   	ret    

c0019096 <PCI::detect()>:
c0019096:	56                   	push   esi
c0019097:	53                   	push   ebx
c0019098:	53                   	push   ebx
c0019099:	31 db                	xor    ebx,ebx
c001909b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001909f:	6a 00                	push   0x0
c00190a1:	6a 00                	push   0x0
c00190a3:	6a 00                	push   0x0
c00190a5:	56                   	push   esi
c00190a6:	e8 a3 f7 ff ff       	call   c001884e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00190ab:	83 c4 10             	add    esp,0x10
c00190ae:	a8 80                	test   al,0x80
c00190b0:	75 21                	jne    c00190d3 <PCI::detect()+0x3d>
c00190b2:	51                   	push   ecx
c00190b3:	51                   	push   ecx
c00190b4:	6a 00                	push   0x0
c00190b6:	56                   	push   esi
c00190b7:	e8 62 fc ff ff       	call   c0018d1e <PCI::checkBus(unsigned char)>
c00190bc:	83 c4 10             	add    esp,0x10
c00190bf:	eb 24                	jmp    c00190e5 <PCI::detect()+0x4f>
c00190c1:	52                   	push   edx
c00190c2:	52                   	push   edx
c00190c3:	53                   	push   ebx
c00190c4:	43                   	inc    ebx
c00190c5:	56                   	push   esi
c00190c6:	e8 53 fc ff ff       	call   c0018d1e <PCI::checkBus(unsigned char)>
c00190cb:	83 c4 10             	add    esp,0x10
c00190ce:	83 fb 08             	cmp    ebx,0x8
c00190d1:	74 12                	je     c00190e5 <PCI::detect()+0x4f>
c00190d3:	53                   	push   ebx
c00190d4:	6a 00                	push   0x0
c00190d6:	6a 00                	push   0x0
c00190d8:	56                   	push   esi
c00190d9:	e8 4c f7 ff ff       	call   c001882a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00190de:	83 c4 10             	add    esp,0x10
c00190e1:	66 40                	inc    ax
c00190e3:	74 dc                	je     c00190c1 <PCI::detect()+0x2b>
c00190e5:	58                   	pop    eax
c00190e6:	5b                   	pop    ebx
c00190e7:	5e                   	pop    esi
c00190e8:	c3                   	ret    
c00190e9:	90                   	nop

c00190ea <IDE::close(int, int, void*)>:
c00190ea:	83 c8 ff             	or     eax,0xffffffff
c00190ed:	c3                   	ret    

c00190ee <IDE::IDE()>:
c00190ee:	83 ec 0c             	sub    esp,0xc
c00190f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190f5:	83 ec 08             	sub    esp,0x8
c00190f8:	68 40 f5 01 c0       	push   0xc001f540
c00190fd:	50                   	push   eax
c00190fe:	e8 79 2b ff ff       	call   c000bc7c <HardDiskController::HardDiskController(char const*)>
c0019103:	83 c4 10             	add    esp,0x10
c0019106:	ba d0 f5 01 c0       	mov    edx,0xc001f5d0
c001910b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001910f:	89 10                	mov    DWORD PTR [eax],edx
c0019111:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019115:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001911c:	90                   	nop
c001911d:	83 c4 0c             	add    esp,0xc
c0019120:	c3                   	ret    
c0019121:	90                   	nop

c0019122 <IDE::prepareInterrupt(unsigned char)>:
c0019122:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019127:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001912b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0019133:	c3                   	ret    

c0019134 <selectDrive(unsigned char, unsigned char)>:
c0019134:	c3                   	ret    
c0019135:	90                   	nop

c0019136 <IDE::getBase(unsigned char)>:
c0019136:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001913b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001913f:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0019147:	c3                   	ret    

c0019148 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0019148:	55                   	push   ebp
c0019149:	57                   	push   edi
c001914a:	56                   	push   esi
c001914b:	53                   	push   ebx
c001914c:	83 ec 1c             	sub    esp,0x1c
c001914f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0019153:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019157:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001915a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001915e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019162:	80 f9 03             	cmp    cl,0x3
c0019165:	77 51                	ja     c00191b8 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0019167:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001916b:	0f b6 f2             	movzx  esi,dl
c001916e:	0f b6 db             	movzx  ebx,bl
c0019171:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0019174:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0019178:	83 ca 80             	or     edx,0xffffff80
c001917b:	0f b6 d2             	movzx  edx,dl
c001917e:	52                   	push   edx
c001917f:	6a 0c                	push   0xc
c0019181:	56                   	push   esi
c0019182:	57                   	push   edi
c0019183:	e8 c0 ff ff ff       	call   c0019148 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019188:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001918d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019191:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0019195:	ee                   	out    dx,al
c0019196:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001919b:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001919f:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00191a3:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00191a7:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00191af:	83 c4 2c             	add    esp,0x2c
c00191b2:	5b                   	pop    ebx
c00191b3:	5e                   	pop    esi
c00191b4:	5f                   	pop    edi
c00191b5:	5d                   	pop    ebp
c00191b6:	eb 90                	jmp    c0019148 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00191b8:	80 fb 07             	cmp    bl,0x7
c00191bb:	77 12                	ja     c00191cf <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c00191bd:	0f b6 d2             	movzx  edx,dl
c00191c0:	0f b6 db             	movzx  ebx,bl
c00191c3:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c00191cb:	89 da                	mov    edx,ebx
c00191cd:	eb 2f                	jmp    c00191fe <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00191cf:	80 fb 0d             	cmp    bl,0xd
c00191d2:	77 13                	ja     c00191e7 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c00191d4:	0f b6 d2             	movzx  edx,dl
c00191d7:	0f b6 db             	movzx  ebx,bl
c00191da:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c00191e1:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c00191e5:	eb 17                	jmp    c00191fe <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00191e7:	80 fb 15             	cmp    bl,0x15
c00191ea:	77 13                	ja     c00191ff <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c00191ec:	0f b6 d2             	movzx  edx,dl
c00191ef:	0f b6 db             	movzx  ebx,bl
c00191f2:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c00191fa:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00191fe:	ee                   	out    dx,al
c00191ff:	83 c4 1c             	add    esp,0x1c
c0019202:	5b                   	pop    ebx
c0019203:	5e                   	pop    esi
c0019204:	5f                   	pop    edi
c0019205:	5d                   	pop    ebp
c0019206:	c3                   	ret    
c0019207:	90                   	nop

c0019208 <IDE::read(unsigned char, unsigned char)>:
c0019208:	55                   	push   ebp
c0019209:	57                   	push   edi
c001920a:	56                   	push   esi
c001920b:	53                   	push   ebx
c001920c:	83 ec 1c             	sub    esp,0x1c
c001920f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0019213:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019217:	8d 43 f8             	lea    eax,[ebx-0x8]
c001921a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001921e:	3c 03                	cmp    al,0x3
c0019220:	77 43                	ja     c0019265 <IDE::read(unsigned char, unsigned char)+0x5d>
c0019222:	0f b6 f2             	movzx  esi,dl
c0019225:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0019228:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001922c:	83 c8 80             	or     eax,0xffffff80
c001922f:	0f b6 c0             	movzx  eax,al
c0019232:	50                   	push   eax
c0019233:	6a 0c                	push   0xc
c0019235:	56                   	push   esi
c0019236:	57                   	push   edi
c0019237:	e8 0c ff ff ff       	call   c0019148 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001923c:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0019241:	0f b6 c3             	movzx  eax,bl
c0019244:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0019248:	ec                   	in     al,dx
c0019249:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001924d:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0019252:	52                   	push   edx
c0019253:	6a 0c                	push   0xc
c0019255:	56                   	push   esi
c0019256:	57                   	push   edi
c0019257:	e8 ec fe ff ff       	call   c0019148 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001925c:	83 c4 20             	add    esp,0x20
c001925f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0019263:	eb 49                	jmp    c00192ae <IDE::read(unsigned char, unsigned char)+0xa6>
c0019265:	80 fb 07             	cmp    bl,0x7
c0019268:	77 12                	ja     c001927c <IDE::read(unsigned char, unsigned char)+0x74>
c001926a:	0f b6 d2             	movzx  edx,dl
c001926d:	0f b6 c3             	movzx  eax,bl
c0019270:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0019278:	89 c2                	mov    edx,eax
c001927a:	eb 31                	jmp    c00192ad <IDE::read(unsigned char, unsigned char)+0xa5>
c001927c:	80 fb 0d             	cmp    bl,0xd
c001927f:	77 13                	ja     c0019294 <IDE::read(unsigned char, unsigned char)+0x8c>
c0019281:	0f b6 d2             	movzx  edx,dl
c0019284:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001928b:	0f b6 d3             	movzx  edx,bl
c001928e:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0019292:	eb 19                	jmp    c00192ad <IDE::read(unsigned char, unsigned char)+0xa5>
c0019294:	31 c0                	xor    eax,eax
c0019296:	80 fb 15             	cmp    bl,0x15
c0019299:	77 13                	ja     c00192ae <IDE::read(unsigned char, unsigned char)+0xa6>
c001929b:	0f b6 d2             	movzx  edx,dl
c001929e:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00192a6:	0f b6 d3             	movzx  edx,bl
c00192a9:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00192ad:	ec                   	in     al,dx
c00192ae:	83 c4 1c             	add    esp,0x1c
c00192b1:	5b                   	pop    ebx
c00192b2:	5e                   	pop    esi
c00192b3:	5f                   	pop    edi
c00192b4:	5d                   	pop    ebp
c00192b5:	c3                   	ret    

c00192b6 <IDE::waitInterrupt(unsigned char)>:
c00192b6:	57                   	push   edi
c00192b7:	56                   	push   esi
c00192b8:	31 f6                	xor    esi,esi
c00192ba:	53                   	push   ebx
c00192bb:	83 ec 10             	sub    esp,0x10
c00192be:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c00192c2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00192c6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00192ca:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00192cf:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c00192d6:	84 db                	test   bl,bl
c00192d8:	75 33                	jne    c001930d <IDE::waitInterrupt(unsigned char)+0x57>
c00192da:	52                   	push   edx
c00192db:	6a 0c                	push   0xc
c00192dd:	50                   	push   eax
c00192de:	57                   	push   edi
c00192df:	e8 24 ff ff ff       	call   c0019208 <IDE::read(unsigned char, unsigned char)>
c00192e4:	83 c4 10             	add    esp,0x10
c00192e7:	a8 01                	test   al,0x1
c00192e9:	75 2a                	jne    c0019315 <IDE::waitInterrupt(unsigned char)+0x5f>
c00192eb:	f7 c6 04 00 00 00    	test   esi,0x4
c00192f1:	75 12                	jne    c0019305 <IDE::waitInterrupt(unsigned char)+0x4f>
c00192f3:	83 fe 32             	cmp    esi,0x32
c00192f6:	7e 0d                	jle    c0019305 <IDE::waitInterrupt(unsigned char)+0x4f>
c00192f8:	83 ec 0c             	sub    esp,0xc
c00192fb:	6a 64                	push   0x64
c00192fd:	e8 1a a9 ff ff       	call   c0013c1c <milliTenthSleep(unsigned int)>
c0019302:	83 c4 10             	add    esp,0x10
c0019305:	83 fe 3c             	cmp    esi,0x3c
c0019308:	74 0b                	je     c0019315 <IDE::waitInterrupt(unsigned char)+0x5f>
c001930a:	46                   	inc    esi
c001930b:	eb bd                	jmp    c00192ca <IDE::waitInterrupt(unsigned char)+0x14>
c001930d:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c0019315:	83 c4 10             	add    esp,0x10
c0019318:	88 d8                	mov    al,bl
c001931a:	5b                   	pop    ebx
c001931b:	5e                   	pop    esi
c001931c:	5f                   	pop    edi
c001931d:	c3                   	ret    

c001931e <ideChannel0IRQHandler(regs*, void*)>:
c001931e:	83 ec 10             	sub    esp,0x10
c0019321:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019325:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001932c:	6a 07                	push   0x7
c001932e:	6a 00                	push   0x0
c0019330:	50                   	push   eax
c0019331:	e8 d2 fe ff ff       	call   c0019208 <IDE::read(unsigned char, unsigned char)>
c0019336:	83 c4 1c             	add    esp,0x1c
c0019339:	c3                   	ret    

c001933a <ideChannel1IRQHandler(regs*, void*)>:
c001933a:	83 ec 10             	sub    esp,0x10
c001933d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019341:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0019348:	6a 07                	push   0x7
c001934a:	6a 01                	push   0x1
c001934c:	50                   	push   eax
c001934d:	e8 b6 fe ff ff       	call   c0019208 <IDE::read(unsigned char, unsigned char)>
c0019352:	83 c4 1c             	add    esp,0x1c
c0019355:	c3                   	ret    

c0019356 <IDE::enableIRQs(unsigned char, bool)>:
c0019356:	57                   	push   edi
c0019357:	56                   	push   esi
c0019358:	be 04 00 00 00       	mov    esi,0x4
c001935d:	53                   	push   ebx
c001935e:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0019363:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019367:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001936c:	0f 94 c0             	sete   al
c001936f:	01 c0                	add    eax,eax
c0019371:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0019378:	0f b6 c0             	movzx  eax,al
c001937b:	50                   	push   eax
c001937c:	6a 0c                	push   0xc
c001937e:	57                   	push   edi
c001937f:	53                   	push   ebx
c0019380:	e8 c3 fd ff ff       	call   c0019148 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019385:	83 c4 10             	add    esp,0x10
c0019388:	50                   	push   eax
c0019389:	6a 0c                	push   0xc
c001938b:	57                   	push   edi
c001938c:	53                   	push   ebx
c001938d:	e8 76 fe ff ff       	call   c0019208 <IDE::read(unsigned char, unsigned char)>
c0019392:	83 c4 10             	add    esp,0x10
c0019395:	4e                   	dec    esi
c0019396:	75 f0                	jne    c0019388 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0019398:	5b                   	pop    ebx
c0019399:	5e                   	pop    esi
c001939a:	5f                   	pop    edi
c001939b:	c3                   	ret    

c001939c <IDE::open(int, int, void*)>:
c001939c:	55                   	push   ebp
c001939d:	57                   	push   edi
c001939e:	56                   	push   esi
c001939f:	53                   	push   ebx
c00193a0:	83 ec 1c             	sub    esp,0x1c
c00193a3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00193a7:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00193b0:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c00193b9:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00193c0:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00193c7:	0f 85 b0 02 00 00    	jne    c001967d <IDE::open(int, int, void*)+0x2e1>
c00193cd:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00193d3:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00193d7:	83 e0 7f             	and    eax,0x7f
c00193da:	3c 05                	cmp    al,0x5
c00193dc:	74 04                	je     c00193e2 <IDE::open(int, int, void*)+0x46>
c00193de:	3c 0f                	cmp    al,0xf
c00193e0:	75 32                	jne    c0019414 <IDE::open(int, int, void*)+0x78>
c00193e2:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00193e8:	83 e0 fc             	and    eax,0xfffffffc
c00193eb:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00193f2:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00193f8:	83 e0 fc             	and    eax,0xfffffffc
c00193fb:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0019402:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0019408:	83 e0 fc             	and    eax,0xfffffffc
c001940b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019412:	eb 14                	jmp    c0019428 <IDE::open(int, int, void*)+0x8c>
c0019414:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001941e:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0019428:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001942f:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0019436:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001943a:	89 c6                	mov    esi,eax
c001943c:	bf f8 0c 00 00       	mov    edi,0xcf8
c0019441:	c1 e6 10             	shl    esi,0x10
c0019444:	89 e8                	mov    eax,ebp
c0019446:	89 fa                	mov    edx,edi
c0019448:	c1 e0 0b             	shl    eax,0xb
c001944b:	09 f0                	or     eax,esi
c001944d:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0019454:	c1 e6 08             	shl    esi,0x8
c0019457:	09 c6                	or     esi,eax
c0019459:	89 f0                	mov    eax,esi
c001945b:	0d 08 00 00 80       	or     eax,0x80000008
c0019460:	ef                   	out    dx,eax
c0019461:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0019466:	89 ca                	mov    edx,ecx
c0019468:	ed                   	in     eax,dx
c0019469:	c1 e8 10             	shr    eax,0x10
c001946c:	3d ff ff 00 00       	cmp    eax,0xffff
c0019471:	0f 84 f5 00 00 00    	je     c001956c <IDE::open(int, int, void*)+0x1d0>
c0019477:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001947d:	89 fa                	mov    edx,edi
c001947f:	89 f0                	mov    eax,esi
c0019481:	ef                   	out    dx,eax
c0019482:	b0 fe                	mov    al,0xfe
c0019484:	89 ca                	mov    edx,ecx
c0019486:	ee                   	out    dx,al
c0019487:	89 f0                	mov    eax,esi
c0019489:	89 fa                	mov    edx,edi
c001948b:	ef                   	out    dx,eax
c001948c:	89 ca                	mov    edx,ecx
c001948e:	ed                   	in     eax,dx
c001948f:	3c fe                	cmp    al,0xfe
c0019491:	0f 85 a9 00 00 00    	jne    c0019540 <IDE::open(int, int, void*)+0x1a4>
c0019497:	8b 15 58 0d 02 c0    	mov    edx,DWORD PTR ds:0xc0020d58
c001949d:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c00194a4:	74 33                	je     c00194d9 <IDE::open(int, int, void*)+0x13d>
c00194a6:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00194ac:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00194b0:	40                   	inc    eax
c00194b1:	83 ec 0c             	sub    esp,0xc
c00194b4:	0f b6 c0             	movzx  eax,al
c00194b7:	50                   	push   eax
c00194b8:	55                   	push   ebp
c00194b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00194bd:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c00194c3:	51                   	push   ecx
c00194c4:	e8 b3 51 ff ff       	call   c000e67c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00194c9:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00194ce:	83 c4 1c             	add    esp,0x1c
c00194d1:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00194d7:	eb 0a                	jmp    c00194e3 <IDE::open(int, int, void*)+0x147>
c00194d9:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00194e3:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00194ea:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00194f1:	c1 e1 10             	shl    ecx,0x10
c00194f4:	c1 e0 08             	shl    eax,0x8
c00194f7:	bf f8 0c 00 00       	mov    edi,0xcf8
c00194fc:	09 c1                	or     ecx,eax
c00194fe:	89 fa                	mov    edx,edi
c0019500:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0019507:	c1 e0 0b             	shl    eax,0xb
c001950a:	09 c1                	or     ecx,eax
c001950c:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0019512:	89 c8                	mov    eax,ecx
c0019514:	ef                   	out    dx,eax
c0019515:	be fc 0c 00 00       	mov    esi,0xcfc
c001951a:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0019520:	89 f2                	mov    edx,esi
c0019522:	ee                   	out    dx,al
c0019523:	89 c8                	mov    eax,ecx
c0019525:	89 fa                	mov    edx,edi
c0019527:	ef                   	out    dx,eax
c0019528:	89 f2                	mov    edx,esi
c001952a:	ed                   	in     eax,dx
c001952b:	0f b6 c0             	movzx  eax,al
c001952e:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0019534:	74 46                	je     c001957c <IDE::open(int, int, void*)+0x1e0>
c0019536:	83 ec 0c             	sub    esp,0xc
c0019539:	68 58 f5 01 c0       	push   0xc001f558
c001953e:	eb 34                	jmp    c0019574 <IDE::open(int, int, void*)+0x1d8>
c0019540:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0019549:	75 17                	jne    c0019562 <IDE::open(int, int, void*)+0x1c6>
c001954b:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0019550:	74 07                	je     c0019559 <IDE::open(int, int, void*)+0x1bd>
c0019552:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0019557:	75 09                	jne    c0019562 <IDE::open(int, int, void*)+0x1c6>
c0019559:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0019560:	eb 1a                	jmp    c001957c <IDE::open(int, int, void*)+0x1e0>
c0019562:	83 ec 0c             	sub    esp,0xc
c0019565:	68 60 f5 01 c0       	push   0xc001f560
c001956a:	eb 08                	jmp    c0019574 <IDE::open(int, int, void*)+0x1d8>
c001956c:	83 ec 0c             	sub    esp,0xc
c001956f:	68 91 f5 01 c0       	push   0xc001f591
c0019574:	e8 ea 6b ff ff       	call   c0010163 <KePanic(char const*)>
c0019579:	83 c4 10             	add    esp,0x10
c001957c:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0019583:	79 1a                	jns    c001959f <IDE::open(int, int, void*)+0x203>
c0019585:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001958b:	83 e0 fc             	and    eax,0xfffffffc
c001958e:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0019595:	83 c0 08             	add    eax,0x8
c0019598:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001959f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00195a5:	89 c2                	mov    edx,eax
c00195a7:	83 e2 0f             	and    edx,0xf
c00195aa:	66 83 fa 08          	cmp    dx,0x8
c00195ae:	75 0a                	jne    c00195ba <IDE::open(int, int, void*)+0x21e>
c00195b0:	83 e8 02             	sub    eax,0x2
c00195b3:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00195ba:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00195c0:	89 c2                	mov    edx,eax
c00195c2:	83 e2 0f             	and    edx,0xf
c00195c5:	66 83 fa 08          	cmp    dx,0x8
c00195c9:	75 0a                	jne    c00195d5 <IDE::open(int, int, void*)+0x239>
c00195cb:	83 e8 02             	sub    eax,0x2
c00195ce:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00195d5:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00195dc:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00195e3:	89 d0                	mov    eax,edx
c00195e5:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00195e8:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00195ec:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00195f0:	8d 4a 01             	lea    ecx,[edx+0x1]
c00195f3:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00195f8:	0f b6 c9             	movzx  ecx,cl
c00195fb:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0019602:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0019605:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0019609:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001960d:	8d 50 02             	lea    edx,[eax+0x2]
c0019610:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0019615:	0f b6 d2             	movzx  edx,dl
c0019618:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001961e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019621:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019625:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0019629:	8d 48 03             	lea    ecx,[eax+0x3]
c001962c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019631:	0f b6 c9             	movzx  ecx,cl
c0019634:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001963a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001963d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0019641:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0019645:	8d 50 04             	lea    edx,[eax+0x4]
c0019648:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001964e:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0019653:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001965a:	66 85 f6             	test   si,si
c001965d:	74 5b                	je     c00196ba <IDE::open(int, int, void*)+0x31e>
c001965f:	0f b6 d2             	movzx  edx,dl
c0019662:	83 c0 05             	add    eax,0x5
c0019665:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019668:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001966c:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0019670:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019676:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001967b:	eb 3d                	jmp    c00196ba <IDE::open(int, int, void*)+0x31e>
c001967d:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c0019683:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001968a:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0019691:	66 05 06 02          	add    ax,0x206
c0019695:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001969c:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c00196a3:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00196aa:	66 05 06 02          	add    ax,0x206
c00196ae:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00196b5:	e9 e5 fe ff ff       	jmp    c001959f <IDE::open(int, int, void*)+0x203>
c00196ba:	50                   	push   eax
c00196bb:	50                   	push   eax
c00196bc:	6a 00                	push   0x0
c00196be:	53                   	push   ebx
c00196bf:	e8 5e fa ff ff       	call   c0019122 <IDE::prepareInterrupt(unsigned char)>
c00196c4:	5a                   	pop    edx
c00196c5:	59                   	pop    ecx
c00196c6:	6a 01                	push   0x1
c00196c8:	53                   	push   ebx
c00196c9:	e8 54 fa ff ff       	call   c0019122 <IDE::prepareInterrupt(unsigned char)>
c00196ce:	83 c4 0c             	add    esp,0xc
c00196d1:	6a 00                	push   0x0
c00196d3:	6a 00                	push   0x0
c00196d5:	53                   	push   ebx
c00196d6:	e8 7b fc ff ff       	call   c0019356 <IDE::enableIRQs(unsigned char, bool)>
c00196db:	83 c4 0c             	add    esp,0xc
c00196de:	6a 00                	push   0x0
c00196e0:	6a 01                	push   0x1
c00196e2:	53                   	push   ebx
c00196e3:	e8 6e fc ff ff       	call   c0019356 <IDE::enableIRQs(unsigned char, bool)>
c00196e8:	83 c4 10             	add    esp,0x10
c00196eb:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00196f2:	74 34                	je     c0019728 <IDE::open(int, int, void*)+0x38c>
c00196f4:	83 ec 0c             	sub    esp,0xc
c00196f7:	53                   	push   ebx
c00196f8:	6a 01                	push   0x1
c00196fa:	68 1e 93 01 c0       	push   0xc001931e
c00196ff:	6a 0e                	push   0xe
c0019701:	53                   	push   ebx
c0019702:	e8 dd 21 ff ff       	call   c000b8e4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019707:	83 c4 14             	add    esp,0x14
c001970a:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0019710:	53                   	push   ebx
c0019711:	6a 01                	push   0x1
c0019713:	68 3a 93 01 c0       	push   0xc001933a
c0019718:	6a 0f                	push   0xf
c001971a:	53                   	push   ebx
c001971b:	e8 c4 21 ff ff       	call   c000b8e4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019720:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0019726:	eb 38                	jmp    c0019760 <IDE::open(int, int, void*)+0x3c4>
c0019728:	83 ec 0c             	sub    esp,0xc
c001972b:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0019735:	53                   	push   ebx
c0019736:	6a 00                	push   0x0
c0019738:	68 1e 93 01 c0       	push   0xc001931e
c001973d:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0019743:	53                   	push   ebx
c0019744:	e8 9b 21 ff ff       	call   c000b8e4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019749:	83 c4 14             	add    esp,0x14
c001974c:	53                   	push   ebx
c001974d:	6a 00                	push   0x0
c001974f:	68 3a 93 01 c0       	push   0xc001933a
c0019754:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001975a:	53                   	push   ebx
c001975b:	e8 84 21 ff ff       	call   c000b8e4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019760:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019762:	83 c4 20             	add    esp,0x20
c0019765:	83 ec 0c             	sub    esp,0xc
c0019768:	53                   	push   ebx
c0019769:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001976c:	83 c4 0c             	add    esp,0xc
c001976f:	6a 07                	push   0x7
c0019771:	6a 00                	push   0x0
c0019773:	53                   	push   ebx
c0019774:	e8 8f fa ff ff       	call   c0019208 <IDE::read(unsigned char, unsigned char)>
c0019779:	83 c4 0c             	add    esp,0xc
c001977c:	6a 07                	push   0x7
c001977e:	6a 01                	push   0x1
c0019780:	53                   	push   ebx
c0019781:	e8 82 fa ff ff       	call   c0019208 <IDE::read(unsigned char, unsigned char)>
c0019786:	83 c4 0c             	add    esp,0xc
c0019789:	6a 01                	push   0x1
c001978b:	6a 00                	push   0x0
c001978d:	53                   	push   ebx
c001978e:	e8 c3 fb ff ff       	call   c0019356 <IDE::enableIRQs(unsigned char, bool)>
c0019793:	83 c4 0c             	add    esp,0xc
c0019796:	6a 01                	push   0x1
c0019798:	6a 01                	push   0x1
c001979a:	53                   	push   ebx
c001979b:	e8 b6 fb ff ff       	call   c0019356 <IDE::enableIRQs(unsigned char, bool)>
c00197a0:	83 c4 2c             	add    esp,0x2c
c00197a3:	31 c0                	xor    eax,eax
c00197a5:	5b                   	pop    ebx
c00197a6:	5e                   	pop    esi
c00197a7:	5f                   	pop    edi
c00197a8:	5d                   	pop    ebp
c00197a9:	c3                   	ret    

c00197aa <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00197aa:	55                   	push   ebp
c00197ab:	57                   	push   edi
c00197ac:	56                   	push   esi
c00197ad:	53                   	push   ebx
c00197ae:	83 ec 1c             	sub    esp,0x1c
c00197b1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00197b5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00197b9:	8d 50 f8             	lea    edx,[eax-0x8]
c00197bc:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00197c0:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00197c4:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00197c8:	80 fa 03             	cmp    dl,0x3
c00197cb:	77 5d                	ja     c001982a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00197cd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00197d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00197d5:	0f b6 db             	movzx  ebx,bl
c00197d8:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00197db:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00197df:	83 ca 80             	or     edx,0xffffff80
c00197e2:	0f b6 d2             	movzx  edx,dl
c00197e5:	52                   	push   edx
c00197e6:	6a 0c                	push   0xc
c00197e8:	53                   	push   ebx
c00197e9:	56                   	push   esi
c00197ea:	e8 59 f9 ff ff       	call   c0019148 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00197ef:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00197f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00197f8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00197fc:	0f b6 c0             	movzx  eax,al
c00197ff:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0019803:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0019805:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001980a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001980e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0019812:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019816:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001981e:	83 c4 2c             	add    esp,0x2c
c0019821:	5b                   	pop    ebx
c0019822:	5e                   	pop    esi
c0019823:	5f                   	pop    edi
c0019824:	5d                   	pop    ebp
c0019825:	e9 1e f9 ff ff       	jmp    c0019148 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001982a:	3c 07                	cmp    al,0x7
c001982c:	77 10                	ja     c001983e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001982e:	0f b6 db             	movzx  ebx,bl
c0019831:	0f b6 d0             	movzx  edx,al
c0019834:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001983c:	eb 2d                	jmp    c001986b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001983e:	3c 0d                	cmp    al,0xd
c0019840:	77 13                	ja     c0019855 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0019842:	0f b6 db             	movzx  ebx,bl
c0019845:	0f b6 c0             	movzx  eax,al
c0019848:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001984f:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0019853:	eb 16                	jmp    c001986b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0019855:	3c 15                	cmp    al,0x15
c0019857:	77 14                	ja     c001986d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0019859:	0f b6 db             	movzx  ebx,bl
c001985c:	0f b6 c0             	movzx  eax,al
c001985f:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0019867:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001986b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001986d:	83 c4 1c             	add    esp,0x1c
c0019870:	5b                   	pop    ebx
c0019871:	5e                   	pop    esi
c0019872:	5f                   	pop    edi
c0019873:	5d                   	pop    ebp
c0019874:	c3                   	ret    
c0019875:	90                   	nop

c0019876 <IDE::detect()>:
c0019876:	55                   	push   ebp
c0019877:	57                   	push   edi
c0019878:	56                   	push   esi
c0019879:	53                   	push   ebx
c001987a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019880:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0019887:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001988e:	0f 85 97 02 00 00    	jne    c0019b2b <IDE::detect()+0x2b5>
c0019894:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001989b:	31 f6                	xor    esi,esi
c001989d:	31 ed                	xor    ebp,ebp
c001989f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00198a7:	89 e8                	mov    eax,ebp
c00198a9:	c1 e0 06             	shl    eax,0x6
c00198ac:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00198b4:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00198b8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00198bc:	c1 e0 04             	shl    eax,0x4
c00198bf:	83 c8 a0             	or     eax,0xffffffa0
c00198c2:	0f b6 c0             	movzx  eax,al
c00198c5:	50                   	push   eax
c00198c6:	6a 06                	push   0x6
c00198c8:	56                   	push   esi
c00198c9:	53                   	push   ebx
c00198ca:	e8 79 f8 ff ff       	call   c0019148 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00198cf:	83 c4 0c             	add    esp,0xc
c00198d2:	6a 0c                	push   0xc
c00198d4:	56                   	push   esi
c00198d5:	53                   	push   ebx
c00198d6:	e8 2d f9 ff ff       	call   c0019208 <IDE::read(unsigned char, unsigned char)>
c00198db:	83 c4 0c             	add    esp,0xc
c00198de:	6a 0c                	push   0xc
c00198e0:	56                   	push   esi
c00198e1:	53                   	push   ebx
c00198e2:	e8 21 f9 ff ff       	call   c0019208 <IDE::read(unsigned char, unsigned char)>
c00198e7:	83 c4 0c             	add    esp,0xc
c00198ea:	6a 0c                	push   0xc
c00198ec:	56                   	push   esi
c00198ed:	53                   	push   ebx
c00198ee:	e8 15 f9 ff ff       	call   c0019208 <IDE::read(unsigned char, unsigned char)>
c00198f3:	83 c4 0c             	add    esp,0xc
c00198f6:	6a 0c                	push   0xc
c00198f8:	56                   	push   esi
c00198f9:	53                   	push   ebx
c00198fa:	e8 09 f9 ff ff       	call   c0019208 <IDE::read(unsigned char, unsigned char)>
c00198ff:	68 ec 00 00 00       	push   0xec
c0019904:	6a 07                	push   0x7
c0019906:	56                   	push   esi
c0019907:	53                   	push   ebx
c0019908:	e8 3b f8 ff ff       	call   c0019148 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001990d:	83 c4 1c             	add    esp,0x1c
c0019910:	6a 0c                	push   0xc
c0019912:	56                   	push   esi
c0019913:	53                   	push   ebx
c0019914:	e8 ef f8 ff ff       	call   c0019208 <IDE::read(unsigned char, unsigned char)>
c0019919:	83 c4 0c             	add    esp,0xc
c001991c:	6a 0c                	push   0xc
c001991e:	56                   	push   esi
c001991f:	53                   	push   ebx
c0019920:	e8 e3 f8 ff ff       	call   c0019208 <IDE::read(unsigned char, unsigned char)>
c0019925:	83 c4 0c             	add    esp,0xc
c0019928:	6a 0c                	push   0xc
c001992a:	56                   	push   esi
c001992b:	53                   	push   ebx
c001992c:	e8 d7 f8 ff ff       	call   c0019208 <IDE::read(unsigned char, unsigned char)>
c0019931:	83 c4 0c             	add    esp,0xc
c0019934:	6a 0c                	push   0xc
c0019936:	56                   	push   esi
c0019937:	53                   	push   ebx
c0019938:	e8 cb f8 ff ff       	call   c0019208 <IDE::read(unsigned char, unsigned char)>
c001993d:	83 c4 0c             	add    esp,0xc
c0019940:	6a 0c                	push   0xc
c0019942:	56                   	push   esi
c0019943:	53                   	push   ebx
c0019944:	e8 bf f8 ff ff       	call   c0019208 <IDE::read(unsigned char, unsigned char)>
c0019949:	83 c4 10             	add    esp,0x10
c001994c:	84 c0                	test   al,al
c001994e:	0f 84 5f 01 00 00    	je     c0019ab3 <IDE::detect()+0x23d>
c0019954:	31 ff                	xor    edi,edi
c0019956:	50                   	push   eax
c0019957:	6a 0c                	push   0xc
c0019959:	56                   	push   esi
c001995a:	53                   	push   ebx
c001995b:	e8 a8 f8 ff ff       	call   c0019208 <IDE::read(unsigned char, unsigned char)>
c0019960:	83 c4 10             	add    esp,0x10
c0019963:	a8 01                	test   al,0x1
c0019965:	0f 85 69 01 00 00    	jne    c0019ad4 <IDE::detect()+0x25e>
c001996b:	84 c0                	test   al,al
c001996d:	78 04                	js     c0019973 <IDE::detect()+0xfd>
c001996f:	a8 08                	test   al,0x8
c0019971:	75 23                	jne    c0019996 <IDE::detect()+0x120>
c0019973:	47                   	inc    edi
c0019974:	81 ff 17 01 00 00    	cmp    edi,0x117
c001997a:	7e da                	jle    c0019956 <IDE::detect()+0xe0>
c001997c:	83 ec 0c             	sub    esp,0xc
c001997f:	6a 32                	push   0x32
c0019981:	e8 96 a2 ff ff       	call   c0013c1c <milliTenthSleep(unsigned int)>
c0019986:	83 c4 10             	add    esp,0x10
c0019989:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001998f:	75 c5                	jne    c0019956 <IDE::detect()+0xe0>
c0019991:	e9 3e 01 00 00       	jmp    c0019ad4 <IDE::detect()+0x25e>
c0019996:	31 c9                	xor    ecx,ecx
c0019998:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001999c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00199a0:	83 ec 0c             	sub    esp,0xc
c00199a3:	68 80 00 00 00       	push   0x80
c00199a8:	57                   	push   edi
c00199a9:	6a 00                	push   0x0
c00199ab:	56                   	push   esi
c00199ac:	53                   	push   ebx
c00199ad:	e8 f8 fd ff ff       	call   c00197aa <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00199b2:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00199b7:	89 e8                	mov    eax,ebp
c00199b9:	89 d1                	mov    ecx,edx
c00199bb:	c1 e0 06             	shl    eax,0x6
c00199be:	01 d8                	add    eax,ebx
c00199c0:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00199c7:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00199ce:	89 f2                	mov    edx,esi
c00199d0:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00199d6:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00199da:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00199e0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00199e4:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00199eb:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00199f3:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00199fa:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0019a02:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0019a08:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0019a0f:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0019a15:	8d 54 24 58          	lea    edx,[esp+0x58]
c0019a19:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0019a1d:	83 c4 20             	add    esp,0x20
c0019a20:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0019a23:	83 c0 02             	add    eax,0x2
c0019a26:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0019a2c:	83 c7 02             	add    edi,0x2
c0019a2f:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0019a32:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0019a38:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0019a3c:	75 e2                	jne    c0019a20 <IDE::detect()+0x1aa>
c0019a3e:	89 e8                	mov    eax,ebp
c0019a40:	c1 e0 06             	shl    eax,0x6
c0019a43:	01 d8                	add    eax,ebx
c0019a45:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0019a4b:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0019a52:	66 c1 ea 09          	shr    dx,0x9
c0019a56:	83 e2 01             	and    edx,0x1
c0019a59:	84 c9                	test   cl,cl
c0019a5b:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0019a61:	75 22                	jne    c0019a85 <IDE::detect()+0x20f>
c0019a63:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c0019a6a:	74 46                	je     c0019ab2 <IDE::detect()+0x23c>
c0019a6c:	83 ec 0c             	sub    esp,0xc
c0019a6f:	68 7c 01 00 00       	push   0x17c
c0019a74:	e8 40 dd fe ff       	call   c00077b9 <malloc>
c0019a79:	89 c7                	mov    edi,eax
c0019a7b:	89 04 24             	mov    DWORD PTR [esp],eax
c0019a7e:	e8 11 05 00 00       	call   c0019f94 <ATA::ATA()>
c0019a83:	eb 17                	jmp    c0019a9c <IDE::detect()+0x226>
c0019a85:	83 ec 0c             	sub    esp,0xc
c0019a88:	68 84 01 00 00       	push   0x184
c0019a8d:	e8 27 dd fe ff       	call   c00077b9 <malloc>
c0019a92:	89 c7                	mov    edi,eax
c0019a94:	89 04 24             	mov    DWORD PTR [esp],eax
c0019a97:	e8 f0 0a 00 00       	call   c001a58c <ATAPI::ATAPI()>
c0019a9c:	5a                   	pop    edx
c0019a9d:	59                   	pop    ecx
c0019a9e:	57                   	push   edi
c0019a9f:	53                   	push   ebx
c0019aa0:	e8 93 1e ff ff       	call   c000b938 <Device::addChild(Device*)>
c0019aa5:	8b 07                	mov    eax,DWORD PTR [edi]
c0019aa7:	53                   	push   ebx
c0019aa8:	55                   	push   ebp
c0019aa9:	6a 00                	push   0x0
c0019aab:	57                   	push   edi
c0019aac:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019aaf:	83 c4 20             	add    esp,0x20
c0019ab2:	45                   	inc    ebp
c0019ab3:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0019ab8:	74 0d                	je     c0019ac7 <IDE::detect()+0x251>
c0019aba:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0019ac2:	e9 e0 fd ff ff       	jmp    c00198a7 <IDE::detect()+0x31>
c0019ac7:	4e                   	dec    esi
c0019ac8:	74 61                	je     c0019b2b <IDE::detect()+0x2b5>
c0019aca:	be 01 00 00 00       	mov    esi,0x1
c0019acf:	e9 cb fd ff ff       	jmp    c001989f <IDE::detect()+0x29>
c0019ad4:	50                   	push   eax
c0019ad5:	6a 04                	push   0x4
c0019ad7:	56                   	push   esi
c0019ad8:	53                   	push   ebx
c0019ad9:	e8 2a f7 ff ff       	call   c0019208 <IDE::read(unsigned char, unsigned char)>
c0019ade:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0019ae2:	83 c4 0c             	add    esp,0xc
c0019ae5:	6a 05                	push   0x5
c0019ae7:	56                   	push   esi
c0019ae8:	53                   	push   ebx
c0019ae9:	e8 1a f7 ff ff       	call   c0019208 <IDE::read(unsigned char, unsigned char)>
c0019aee:	83 c4 10             	add    esp,0x10
c0019af1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019af5:	80 fa 14             	cmp    dl,0x14
c0019af8:	75 04                	jne    c0019afe <IDE::detect()+0x288>
c0019afa:	3c eb                	cmp    al,0xeb
c0019afc:	eb 07                	jmp    c0019b05 <IDE::detect()+0x28f>
c0019afe:	3c 96                	cmp    al,0x96
c0019b00:	75 b1                	jne    c0019ab3 <IDE::detect()+0x23d>
c0019b02:	80 fa 69             	cmp    dl,0x69
c0019b05:	75 ac                	jne    c0019ab3 <IDE::detect()+0x23d>
c0019b07:	68 a1 00 00 00       	push   0xa1
c0019b0c:	6a 07                	push   0x7
c0019b0e:	56                   	push   esi
c0019b0f:	53                   	push   ebx
c0019b10:	e8 33 f6 ff ff       	call   c0019148 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019b15:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0019b1c:	e8 fb a0 ff ff       	call   c0013c1c <milliTenthSleep(unsigned int)>
c0019b21:	83 c4 10             	add    esp,0x10
c0019b24:	b1 01                	mov    cl,0x1
c0019b26:	e9 6d fe ff ff       	jmp    c0019998 <IDE::detect()+0x122>
c0019b2b:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019b31:	5b                   	pop    ebx
c0019b32:	5e                   	pop    esi
c0019b33:	5f                   	pop    edi
c0019b34:	5d                   	pop    ebp
c0019b35:	c3                   	ret    

c0019b36 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0019b36:	55                   	push   ebp
c0019b37:	57                   	push   edi
c0019b38:	56                   	push   esi
c0019b39:	53                   	push   ebx
c0019b3a:	83 ec 1c             	sub    esp,0x1c
c0019b3d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019b41:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019b45:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019b49:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0019b4d:	88 c3                	mov    bl,al
c0019b4f:	84 c0                	test   al,al
c0019b51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019b55:	0f 84 81 00 00 00    	je     c0019bdc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b5b:	83 ec 0c             	sub    esp,0xc
c0019b5e:	68 bb f5 01 c0       	push   0xc001f5bb
c0019b63:	e8 90 09 ff ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c0019b68:	83 c4 10             	add    esp,0x10
c0019b6b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019b6f:	3c 01                	cmp    al,0x1
c0019b71:	74 63                	je     c0019bd6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0019b73:	3c 02                	cmp    al,0x2
c0019b75:	75 53                	jne    c0019bca <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0019b77:	01 f6                	add    esi,esi
c0019b79:	09 ee                	or     esi,ebp
c0019b7b:	50                   	push   eax
c0019b7c:	89 f0                	mov    eax,esi
c0019b7e:	6a 01                	push   0x1
c0019b80:	0f b6 f0             	movzx  esi,al
c0019b83:	c1 e6 06             	shl    esi,0x6
c0019b86:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0019b8e:	50                   	push   eax
c0019b8f:	57                   	push   edi
c0019b90:	e8 73 f6 ff ff       	call   c0019208 <IDE::read(unsigned char, unsigned char)>
c0019b95:	83 c4 10             	add    esp,0x10
c0019b98:	a8 01                	test   al,0x1
c0019b9a:	74 02                	je     c0019b9e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0019b9c:	b3 07                	mov    bl,0x7
c0019b9e:	a8 02                	test   al,0x2
c0019ba0:	74 02                	je     c0019ba4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0019ba2:	b3 03                	mov    bl,0x3
c0019ba4:	a8 04                	test   al,0x4
c0019ba6:	74 02                	je     c0019baa <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0019ba8:	b3 14                	mov    bl,0x14
c0019baa:	a8 08                	test   al,0x8
c0019bac:	74 02                	je     c0019bb0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0019bae:	b3 03                	mov    bl,0x3
c0019bb0:	a8 10                	test   al,0x10
c0019bb2:	74 02                	je     c0019bb6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0019bb4:	b3 15                	mov    bl,0x15
c0019bb6:	a8 20                	test   al,0x20
c0019bb8:	74 02                	je     c0019bbc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0019bba:	b3 03                	mov    bl,0x3
c0019bbc:	a8 40                	test   al,0x40
c0019bbe:	74 02                	je     c0019bc2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0019bc0:	b3 16                	mov    bl,0x16
c0019bc2:	84 c0                	test   al,al
c0019bc4:	79 16                	jns    c0019bdc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019bc6:	b3 0d                	mov    bl,0xd
c0019bc8:	eb 12                	jmp    c0019bdc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019bca:	3c 03                	cmp    al,0x3
c0019bcc:	74 0c                	je     c0019bda <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0019bce:	3c 04                	cmp    al,0x4
c0019bd0:	75 0a                	jne    c0019bdc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019bd2:	b3 08                	mov    bl,0x8
c0019bd4:	eb 06                	jmp    c0019bdc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019bd6:	b3 13                	mov    bl,0x13
c0019bd8:	eb 02                	jmp    c0019bdc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019bda:	b3 17                	mov    bl,0x17
c0019bdc:	83 c4 1c             	add    esp,0x1c
c0019bdf:	88 d8                	mov    al,bl
c0019be1:	5b                   	pop    ebx
c0019be2:	5e                   	pop    esi
c0019be3:	5f                   	pop    edi
c0019be4:	5d                   	pop    ebp
c0019be5:	c3                   	ret    

c0019be6 <IDE::polling(unsigned char, unsigned int)>:
c0019be6:	55                   	push   ebp
c0019be7:	bd 04 00 00 00       	mov    ebp,0x4
c0019bec:	57                   	push   edi
c0019bed:	56                   	push   esi
c0019bee:	53                   	push   ebx
c0019bef:	83 ec 0c             	sub    esp,0xc
c0019bf2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019bf6:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c0019bfa:	0f b6 f3             	movzx  esi,bl
c0019bfd:	52                   	push   edx
c0019bfe:	6a 0c                	push   0xc
c0019c00:	56                   	push   esi
c0019c01:	57                   	push   edi
c0019c02:	e8 01 f6 ff ff       	call   c0019208 <IDE::read(unsigned char, unsigned char)>
c0019c07:	83 c4 10             	add    esp,0x10
c0019c0a:	4d                   	dec    ebp
c0019c0b:	75 ed                	jne    c0019bfa <IDE::polling(unsigned char, unsigned int)+0x14>
c0019c0d:	bb a0 86 01 00       	mov    ebx,0x186a0
c0019c12:	50                   	push   eax
c0019c13:	6a 0c                	push   0xc
c0019c15:	56                   	push   esi
c0019c16:	57                   	push   edi
c0019c17:	e8 ec f5 ff ff       	call   c0019208 <IDE::read(unsigned char, unsigned char)>
c0019c1c:	83 c4 10             	add    esp,0x10
c0019c1f:	a8 01                	test   al,0x1
c0019c21:	75 17                	jne    c0019c3a <IDE::polling(unsigned char, unsigned int)+0x54>
c0019c23:	a8 20                	test   al,0x20
c0019c25:	75 0f                	jne    c0019c36 <IDE::polling(unsigned char, unsigned int)+0x50>
c0019c27:	4b                   	dec    ebx
c0019c28:	74 10                	je     c0019c3a <IDE::polling(unsigned char, unsigned int)+0x54>
c0019c2a:	84 c0                	test   al,al
c0019c2c:	78 e4                	js     c0019c12 <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019c2e:	a8 08                	test   al,0x8
c0019c30:	74 e0                	je     c0019c12 <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019c32:	31 c0                	xor    eax,eax
c0019c34:	eb 06                	jmp    c0019c3c <IDE::polling(unsigned char, unsigned int)+0x56>
c0019c36:	b0 01                	mov    al,0x1
c0019c38:	eb 02                	jmp    c0019c3c <IDE::polling(unsigned char, unsigned int)+0x56>
c0019c3a:	b0 02                	mov    al,0x2
c0019c3c:	83 c4 0c             	add    esp,0xc
c0019c3f:	5b                   	pop    ebx
c0019c40:	5e                   	pop    esi
c0019c41:	5f                   	pop    edi
c0019c42:	5d                   	pop    ebp
c0019c43:	c3                   	ret    

c0019c44 <SATABus::close(int, int, void*)>:
c0019c44:	31 c0                	xor    eax,eax
c0019c46:	c3                   	ret    
c0019c47:	90                   	nop

c0019c48 <SATABus::detect()>:
c0019c48:	c3                   	ret    
c0019c49:	90                   	nop

c0019c4a <SATABus::SATABus()>:
c0019c4a:	83 ec 0c             	sub    esp,0xc
c0019c4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c51:	83 ec 08             	sub    esp,0x8
c0019c54:	68 f4 f5 01 c0       	push   0xc001f5f4
c0019c59:	50                   	push   eax
c0019c5a:	e8 1d 20 ff ff       	call   c000bc7c <HardDiskController::HardDiskController(char const*)>
c0019c5f:	83 c4 10             	add    esp,0x10
c0019c62:	ba 20 f6 01 c0       	mov    edx,0xc001f620
c0019c67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c6b:	89 10                	mov    DWORD PTR [eax],edx
c0019c6d:	83 ec 0c             	sub    esp,0xc
c0019c70:	6a 50                	push   0x50
c0019c72:	e8 fc de fe ff       	call   c0007b73 <Phys::allocateContiguousPages(int)>
c0019c77:	83 c4 10             	add    esp,0x10
c0019c7a:	89 c2                	mov    edx,eax
c0019c7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c80:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0019c86:	83 ec 0c             	sub    esp,0xc
c0019c89:	6a 50                	push   0x50
c0019c8b:	e8 15 f6 fe ff       	call   c00092a5 <Virt::allocateKernelVirtualPages(int)>
c0019c90:	83 c4 10             	add    esp,0x10
c0019c93:	89 c2                	mov    edx,eax
c0019c95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c99:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019c9f:	a1 50 0e 02 c0       	mov    eax,ds:0xc0020e50
c0019ca4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019ca8:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0019cae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019cb2:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0019cb8:	83 ec 0c             	sub    esp,0xc
c0019cbb:	6a 03                	push   0x3
c0019cbd:	6a 50                	push   0x50
c0019cbf:	51                   	push   ecx
c0019cc0:	52                   	push   edx
c0019cc1:	50                   	push   eax
c0019cc2:	e8 6d ff fe ff       	call   c0009c34 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019cc7:	83 c4 20             	add    esp,0x20
c0019cca:	90                   	nop
c0019ccb:	83 c4 0c             	add    esp,0xc
c0019cce:	c3                   	ret    
c0019ccf:	90                   	nop

c0019cd0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0019cd0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019cd4:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0019cd7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019cda:	09 c2                	or     edx,eax
c0019cdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ce0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0019ce6:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019ce8:	31 c0                	xor    eax,eax
c0019cea:	c1 e9 08             	shr    ecx,0x8
c0019ced:	83 e1 0f             	and    ecx,0xf
c0019cf0:	39 c8                	cmp    eax,ecx
c0019cf2:	74 0a                	je     c0019cfe <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c0019cf4:	f6 c2 01             	test   dl,0x1
c0019cf7:	74 08                	je     c0019d01 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0019cf9:	d1 ea                	shr    edx,1
c0019cfb:	40                   	inc    eax
c0019cfc:	eb f2                	jmp    c0019cf0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c0019cfe:	83 c8 ff             	or     eax,0xffffffff
c0019d01:	c3                   	ret    

c0019d02 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0019d02:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019d06:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0019d09:	89 c2                	mov    edx,eax
c0019d0b:	c1 ea 08             	shr    edx,0x8
c0019d0e:	83 e2 0f             	and    edx,0xf
c0019d11:	fe ca                	dec    dl
c0019d13:	75 31                	jne    c0019d46 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019d15:	83 e0 0f             	and    eax,0xf
c0019d18:	3c 03                	cmp    al,0x3
c0019d1a:	75 2a                	jne    c0019d46 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019d1c:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0019d1f:	b8 02 00 00 00       	mov    eax,0x2
c0019d24:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0019d2a:	74 1c                	je     c0019d48 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019d2c:	b8 04 00 00 00       	mov    eax,0x4
c0019d31:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0019d37:	74 0f                	je     c0019d48 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019d39:	31 c0                	xor    eax,eax
c0019d3b:	83 fa 03             	cmp    edx,0x3
c0019d3e:	0f 94 c0             	sete   al
c0019d41:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0019d45:	c3                   	ret    
c0019d46:	31 c0                	xor    eax,eax
c0019d48:	c3                   	ret    
c0019d49:	90                   	nop

c0019d4a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0019d4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d4e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d51:	0f ba e2 0f          	bt     edx,0xf
c0019d55:	72 f7                	jb     c0019d4e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0019d57:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d5a:	83 ca 10             	or     edx,0x10
c0019d5d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019d60:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d63:	83 ca 01             	or     edx,0x1
c0019d66:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019d69:	c3                   	ret    

c0019d6a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0019d6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d6e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d71:	83 e2 fe             	and    edx,0xfffffffe
c0019d74:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019d77:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d7a:	83 e2 ef             	and    edx,0xffffffef
c0019d7d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019d80:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d83:	0f ba e2 0e          	bt     edx,0xe
c0019d87:	72 f7                	jb     c0019d80 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019d89:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d8c:	0f ba e2 0f          	bt     edx,0xf
c0019d90:	72 ee                	jb     c0019d80 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019d92:	c3                   	ret    
c0019d93:	90                   	nop

c0019d94 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0019d94:	55                   	push   ebp
c0019d95:	57                   	push   edi
c0019d96:	56                   	push   esi
c0019d97:	53                   	push   ebx
c0019d98:	83 ec 1c             	sub    esp,0x1c
c0019d9b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019d9f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019da3:	53                   	push   ebx
c0019da4:	56                   	push   esi
c0019da5:	e8 c0 ff ff ff       	call   c0019d6a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0019daa:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0019dae:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019db4:	83 ec 0c             	sub    esp,0xc
c0019db7:	c1 e5 0a             	shl    ebp,0xa
c0019dba:	01 e8                	add    eax,ebp
c0019dbc:	89 03                	mov    DWORD PTR [ebx],eax
c0019dbe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019dc0:	68 00 04 00 00       	push   0x400
c0019dc5:	6a 00                	push   0x0
c0019dc7:	50                   	push   eax
c0019dc8:	e8 03 67 fe ff       	call   c00004d0 <memset>
c0019dcd:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0019dd3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0019dd7:	01 e8                	add    eax,ebp
c0019dd9:	83 c4 1c             	add    esp,0x1c
c0019ddc:	89 03                	mov    DWORD PTR [ebx],eax
c0019dde:	c1 e2 08             	shl    edx,0x8
c0019de1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019de8:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c0019dee:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019df4:	01 f8                	add    eax,edi
c0019df6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0019df9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0019dfc:	68 00 01 00 00       	push   0x100
c0019e01:	6a 00                	push   0x0
c0019e03:	50                   	push   eax
c0019e04:	e8 c7 66 fe ff       	call   c00004d0 <memset>
c0019e09:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c0019e0f:	01 fa                	add    edx,edi
c0019e11:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019e15:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0019e18:	c1 e7 0d             	shl    edi,0xd
c0019e1b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0019e22:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0019e28:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0019e2e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019e32:	31 ff                	xor    edi,edi
c0019e34:	83 c4 10             	add    esp,0x10
c0019e37:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0019e3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019e41:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0019e47:	83 c5 20             	add    ebp,0x20
c0019e4a:	01 f8                	add    eax,edi
c0019e4c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019e4f:	52                   	push   edx
c0019e50:	68 00 01 00 00       	push   0x100
c0019e55:	6a 00                	push   0x0
c0019e57:	50                   	push   eax
c0019e58:	e8 73 66 fe ff       	call   c00004d0 <memset>
c0019e5d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019e61:	83 c4 10             	add    esp,0x10
c0019e64:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0019e6a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0019e71:	01 f8                	add    eax,edi
c0019e73:	81 c7 00 01 00 00    	add    edi,0x100
c0019e79:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019e7c:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0019e82:	75 b3                	jne    c0019e37 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c0019e84:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019e8b:	50                   	push   eax
c0019e8c:	50                   	push   eax
c0019e8d:	53                   	push   ebx
c0019e8e:	56                   	push   esi
c0019e8f:	e8 b6 fe ff ff       	call   c0019d4a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0019e94:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019e9b:	83 c4 2c             	add    esp,0x2c
c0019e9e:	5b                   	pop    ebx
c0019e9f:	5e                   	pop    esi
c0019ea0:	5f                   	pop    edi
c0019ea1:	5d                   	pop    ebp
c0019ea2:	c3                   	ret    
c0019ea3:	90                   	nop

c0019ea4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0019ea4:	55                   	push   ebp
c0019ea5:	57                   	push   edi
c0019ea6:	56                   	push   esi
c0019ea7:	53                   	push   ebx
c0019ea8:	31 db                	xor    ebx,ebx
c0019eaa:	83 ec 0c             	sub    esp,0xc
c0019ead:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019eb1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019eb5:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0019eb8:	f7 c7 01 00 00 00    	test   edi,0x1
c0019ebe:	74 7a                	je     c0019f3a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019ec0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019ec4:	89 d8                	mov    eax,ebx
c0019ec6:	c1 e0 07             	shl    eax,0x7
c0019ec9:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0019ed0:	55                   	push   ebp
c0019ed1:	56                   	push   esi
c0019ed2:	e8 2b fe ff ff       	call   c0019d02 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0019ed7:	5a                   	pop    edx
c0019ed8:	83 f8 01             	cmp    eax,0x1
c0019edb:	59                   	pop    ecx
c0019edc:	75 21                	jne    c0019eff <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0019ede:	50                   	push   eax
c0019edf:	53                   	push   ebx
c0019ee0:	55                   	push   ebp
c0019ee1:	56                   	push   esi
c0019ee2:	e8 ad fe ff ff       	call   c0019d94 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019ee7:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0019eee:	e8 c6 d8 fe ff       	call   c00077b9 <malloc>
c0019ef3:	89 c5                	mov    ebp,eax
c0019ef5:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ef8:	e8 43 0d 00 00       	call   c001ac40 <SATA::SATA()>
c0019efd:	eb 24                	jmp    c0019f23 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0019eff:	83 f8 04             	cmp    eax,0x4
c0019f02:	75 36                	jne    c0019f3a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019f04:	51                   	push   ecx
c0019f05:	53                   	push   ebx
c0019f06:	55                   	push   ebp
c0019f07:	56                   	push   esi
c0019f08:	e8 87 fe ff ff       	call   c0019d94 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019f0d:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c0019f14:	e8 a0 d8 fe ff       	call   c00077b9 <malloc>
c0019f19:	89 c5                	mov    ebp,eax
c0019f1b:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f1e:	e8 79 10 00 00       	call   c001af9c <SATAPI::SATAPI()>
c0019f23:	58                   	pop    eax
c0019f24:	5a                   	pop    edx
c0019f25:	55                   	push   ebp
c0019f26:	56                   	push   esi
c0019f27:	e8 0c 1a ff ff       	call   c000b938 <Device::addChild(Device*)>
c0019f2c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019f2f:	56                   	push   esi
c0019f30:	6a 00                	push   0x0
c0019f32:	53                   	push   ebx
c0019f33:	55                   	push   ebp
c0019f34:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0019f37:	83 c4 20             	add    esp,0x20
c0019f3a:	d1 ef                	shr    edi,1
c0019f3c:	43                   	inc    ebx
c0019f3d:	83 fb 20             	cmp    ebx,0x20
c0019f40:	0f 85 72 ff ff ff    	jne    c0019eb8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0019f46:	83 c4 0c             	add    esp,0xc
c0019f49:	5b                   	pop    ebx
c0019f4a:	5e                   	pop    esi
c0019f4b:	5f                   	pop    edi
c0019f4c:	5d                   	pop    ebp
c0019f4d:	c3                   	ret    

c0019f4e <SATABus::open(int, int, void*)>:
c0019f4e:	83 ec 14             	sub    esp,0x14
c0019f51:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019f55:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0019f5b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0019f61:	52                   	push   edx
c0019f62:	50                   	push   eax
c0019f63:	e8 3c ff ff ff       	call   c0019ea4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0019f68:	31 c0                	xor    eax,eax
c0019f6a:	83 c4 1c             	add    esp,0x1c
c0019f6d:	c3                   	ret    

c0019f6e <ATA::close(int, int, void*)>:
c0019f6e:	83 ec 0c             	sub    esp,0xc
c0019f71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f75:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019f7b:	85 c0                	test   eax,eax
c0019f7d:	74 0c                	je     c0019f8b <ATA::close(int, int, void*)+0x1d>
c0019f7f:	83 ec 0c             	sub    esp,0xc
c0019f82:	8b 10                	mov    edx,DWORD PTR [eax]
c0019f84:	50                   	push   eax
c0019f85:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019f88:	83 c4 10             	add    esp,0x10
c0019f8b:	31 c0                	xor    eax,eax
c0019f8d:	83 c4 0c             	add    esp,0xc
c0019f90:	c3                   	ret    
c0019f91:	90                   	nop

c0019f92 <ATA::powerSaving(PowerSavingLevel)>:
c0019f92:	c3                   	ret    
c0019f93:	90                   	nop

c0019f94 <ATA::ATA()>:
c0019f94:	83 ec 0c             	sub    esp,0xc
c0019f97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f9b:	83 ec 04             	sub    esp,0x4
c0019f9e:	68 00 02 00 00       	push   0x200
c0019fa3:	68 ed f6 01 c0       	push   0xc001f6ed
c0019fa8:	50                   	push   eax
c0019fa9:	e8 58 1d ff ff       	call   c000bd06 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019fae:	83 c4 10             	add    esp,0x10
c0019fb1:	ba 60 f6 01 c0       	mov    edx,0xc001f660
c0019fb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fba:	89 10                	mov    DWORD PTR [eax],edx
c0019fbc:	90                   	nop
c0019fbd:	83 c4 0c             	add    esp,0xc
c0019fc0:	c3                   	ret    
c0019fc1:	90                   	nop

c0019fc2 <ATA::flush(bool)>:
c0019fc2:	53                   	push   ebx
c0019fc3:	83 ec 08             	sub    esp,0x8
c0019fc6:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0019fcb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019fcf:	19 c0                	sbb    eax,eax
c0019fd1:	83 e0 fd             	and    eax,0xfffffffd
c0019fd4:	05 ea 00 00 00       	add    eax,0xea
c0019fd9:	50                   	push   eax
c0019fda:	6a 07                	push   0x7
c0019fdc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019fe3:	50                   	push   eax
c0019fe4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019fea:	e8 59 f1 ff ff       	call   c0019148 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019fef:	83 c4 0c             	add    esp,0xc
c0019ff2:	6a 00                	push   0x0
c0019ff4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019ffb:	50                   	push   eax
c0019ffc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a002:	e8 df fb ff ff       	call   c0019be6 <IDE::polling(unsigned char, unsigned int)>
c001a007:	83 c4 18             	add    esp,0x18
c001a00a:	5b                   	pop    ebx
c001a00b:	c3                   	ret    

c001a00c <ATA::readyForCommand()>:
c001a00c:	56                   	push   esi
c001a00d:	53                   	push   ebx
c001a00e:	53                   	push   ebx
c001a00f:	31 db                	xor    ebx,ebx
c001a011:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a015:	51                   	push   ecx
c001a016:	6a 0c                	push   0xc
c001a018:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001a01f:	50                   	push   eax
c001a020:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001a026:	e8 dd f1 ff ff       	call   c0019208 <IDE::read(unsigned char, unsigned char)>
c001a02b:	83 c4 10             	add    esp,0x10
c001a02e:	a8 88                	test   al,0x88
c001a030:	74 1f                	je     c001a051 <ATA::readyForCommand()+0x45>
c001a032:	43                   	inc    ebx
c001a033:	83 fb 63             	cmp    ebx,0x63
c001a036:	7e dd                	jle    c001a015 <ATA::readyForCommand()+0x9>
c001a038:	83 ec 0c             	sub    esp,0xc
c001a03b:	6a 0a                	push   0xa
c001a03d:	e8 da 9b ff ff       	call   c0013c1c <milliTenthSleep(unsigned int)>
c001a042:	83 c4 10             	add    esp,0x10
c001a045:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001a04b:	75 c8                	jne    c001a015 <ATA::readyForCommand()+0x9>
c001a04d:	31 c0                	xor    eax,eax
c001a04f:	eb 02                	jmp    c001a053 <ATA::readyForCommand()+0x47>
c001a051:	b0 01                	mov    al,0x1
c001a053:	5a                   	pop    edx
c001a054:	5b                   	pop    ebx
c001a055:	5e                   	pop    esi
c001a056:	c3                   	ret    
c001a057:	90                   	nop

c001a058 <ATA::access(unsigned long long, int, void*, bool)>:
c001a058:	55                   	push   ebp
c001a059:	57                   	push   edi
c001a05a:	56                   	push   esi
c001a05b:	53                   	push   ebx
c001a05c:	83 ec 2c             	sub    esp,0x2c
c001a05f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001a063:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a067:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a06b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a06f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001a073:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001a077:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a07b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001a081:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a085:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a08b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a08f:	c1 e0 06             	shl    eax,0x6
c001a092:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001a09a:	74 5d                	je     c001a0f9 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001a09c:	89 fa                	mov    edx,edi
c001a09e:	89 f0                	mov    eax,esi
c001a0a0:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001a0a4:	c1 ea 1c             	shr    edx,0x1c
c001a0a7:	89 d1                	mov    ecx,edx
c001a0a9:	09 c1                	or     ecx,eax
c001a0ab:	74 25                	je     c001a0d2 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001a0ad:	31 ed                	xor    ebp,ebp
c001a0af:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001a0b6:	89 fa                	mov    edx,edi
c001a0b8:	89 f0                	mov    eax,esi
c001a0ba:	0f ad d0             	shrd   eax,edx,cl
c001a0bd:	d3 ea                	shr    edx,cl
c001a0bf:	f6 c1 20             	test   cl,0x20
c001a0c2:	74 02                	je     c001a0c6 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001a0c4:	89 d0                	mov    eax,edx
c001a0c6:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001a0ca:	45                   	inc    ebp
c001a0cb:	83 fd 06             	cmp    ebp,0x6
c001a0ce:	75 df                	jne    c001a0af <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001a0d0:	eb 76                	jmp    c001a148 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001a0d2:	89 f0                	mov    eax,esi
c001a0d4:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001a0d9:	89 fa                	mov    edx,edi
c001a0db:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a0e2:	0f ac d0 10          	shrd   eax,edx,0x10
c001a0e6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a0eb:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a0ef:	c1 ee 18             	shr    esi,0x18
c001a0f2:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001a0f7:	eb 56                	jmp    c001a14f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a0f9:	6a 00                	push   0x0
c001a0fb:	6a 3f                	push   0x3f
c001a0fd:	57                   	push   edi
c001a0fe:	56                   	push   esi
c001a0ff:	e8 1c 22 00 00       	call   c001c320 <__umoddi3>
c001a104:	83 c4 10             	add    esp,0x10
c001a107:	40                   	inc    eax
c001a108:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001a10c:	6a 00                	push   0x0
c001a10e:	68 f0 03 00 00       	push   0x3f0
c001a113:	57                   	push   edi
c001a114:	56                   	push   esi
c001a115:	e8 06 21 00 00       	call   c001c220 <__udivdi3>
c001a11a:	83 c4 10             	add    esp,0x10
c001a11d:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001a122:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a129:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a12e:	6a 00                	push   0x0
c001a130:	6a 3f                	push   0x3f
c001a132:	57                   	push   edi
c001a133:	56                   	push   esi
c001a134:	e8 e7 20 00 00       	call   c001c220 <__udivdi3>
c001a139:	83 c4 10             	add    esp,0x10
c001a13c:	89 c6                	mov    esi,eax
c001a13e:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001a143:	83 e6 0f             	and    esi,0xf
c001a146:	eb 07                	jmp    c001a14f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a148:	31 f6                	xor    esi,esi
c001a14a:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001a14f:	bf 01 00 00 00       	mov    edi,0x1
c001a154:	50                   	push   eax
c001a155:	6a 00                	push   0x0
c001a157:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a15e:	50                   	push   eax
c001a15f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a163:	e8 ee f1 ff ff       	call   c0019356 <IDE::enableIRQs(unsigned char, bool)>
c001a168:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a16b:	e8 9c fe ff ff       	call   c001a00c <ATA::readyForCommand()>
c001a170:	83 c4 10             	add    esp,0x10
c001a173:	84 c0                	test   al,al
c001a175:	0f 84 4e 02 00 00    	je     c001a3c9 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a17b:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001a181:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a187:	c1 e0 04             	shl    eax,0x4
c001a18a:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001a191:	09 c6                	or     esi,eax
c001a193:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001a198:	75 05                	jne    c001a19f <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001a19a:	83 ce a0             	or     esi,0xffffffa0
c001a19d:	eb 03                	jmp    c001a1a2 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001a19f:	83 ce e0             	or     esi,0xffffffe0
c001a1a2:	89 f0                	mov    eax,esi
c001a1a4:	0f b6 f0             	movzx  esi,al
c001a1a7:	56                   	push   esi
c001a1a8:	6a 06                	push   0x6
c001a1aa:	51                   	push   ecx
c001a1ab:	52                   	push   edx
c001a1ac:	e8 97 ef ff ff       	call   c0019148 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1b1:	83 c4 10             	add    esp,0x10
c001a1b4:	6a 00                	push   0x0
c001a1b6:	6a 01                	push   0x1
c001a1b8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1bf:	50                   	push   eax
c001a1c0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1c6:	e8 7d ef ff ff       	call   c0019148 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1cb:	83 c4 10             	add    esp,0x10
c001a1ce:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a1d3:	75 6e                	jne    c001a243 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001a1d5:	6a 00                	push   0x0
c001a1d7:	6a 08                	push   0x8
c001a1d9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1e0:	50                   	push   eax
c001a1e1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1e7:	e8 5c ef ff ff       	call   c0019148 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1ec:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001a1f1:	50                   	push   eax
c001a1f2:	6a 09                	push   0x9
c001a1f4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1fb:	50                   	push   eax
c001a1fc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a202:	e8 41 ef ff ff       	call   c0019148 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a207:	83 c4 20             	add    esp,0x20
c001a20a:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001a20f:	50                   	push   eax
c001a210:	6a 0a                	push   0xa
c001a212:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a219:	50                   	push   eax
c001a21a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a220:	e8 23 ef ff ff       	call   c0019148 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a225:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001a22a:	50                   	push   eax
c001a22b:	6a 0b                	push   0xb
c001a22d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a234:	50                   	push   eax
c001a235:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a23b:	e8 08 ef ff ff       	call   c0019148 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a240:	83 c4 20             	add    esp,0x20
c001a243:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001a248:	50                   	push   eax
c001a249:	6a 02                	push   0x2
c001a24b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a252:	50                   	push   eax
c001a253:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a259:	e8 ea ee ff ff       	call   c0019148 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a25e:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001a263:	50                   	push   eax
c001a264:	6a 03                	push   0x3
c001a266:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a26d:	50                   	push   eax
c001a26e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a274:	e8 cf ee ff ff       	call   c0019148 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a279:	83 c4 20             	add    esp,0x20
c001a27c:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001a281:	50                   	push   eax
c001a282:	6a 04                	push   0x4
c001a284:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a28b:	50                   	push   eax
c001a28c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a292:	e8 b1 ee ff ff       	call   c0019148 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a297:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a29c:	50                   	push   eax
c001a29d:	6a 05                	push   0x5
c001a29f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a2a6:	50                   	push   eax
c001a2a7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a2ad:	e8 96 ee ff ff       	call   c0019148 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a2b2:	83 c4 20             	add    esp,0x20
c001a2b5:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a2ba:	0f 94 c0             	sete   al
c001a2bd:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a2c2:	74 09                	je     c001a2cd <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001a2c4:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001a2cb:	eb 07                	jmp    c001a2d4 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001a2cd:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001a2d4:	0f b6 c0             	movzx  eax,al
c001a2d7:	50                   	push   eax
c001a2d8:	6a 07                	push   0x7
c001a2da:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a2e1:	50                   	push   eax
c001a2e2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a2e8:	e8 5b ee ff ff       	call   c0019148 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a2ed:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001a2f1:	83 c4 10             	add    esp,0x10
c001a2f4:	85 f6                	test   esi,esi
c001a2f6:	0f 84 ae 00 00 00    	je     c001a3aa <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001a2fc:	50                   	push   eax
c001a2fd:	6a 01                	push   0x1
c001a2ff:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a306:	50                   	push   eax
c001a307:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a30d:	e8 d4 f8 ff ff       	call   c0019be6 <IDE::polling(unsigned char, unsigned int)>
c001a312:	83 c4 10             	add    esp,0x10
c001a315:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001a31b:	84 c0                	test   al,al
c001a31d:	74 20                	je     c001a33f <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c001a31f:	0f b6 f8             	movzx  edi,al
c001a322:	0f b6 d2             	movzx  edx,dl
c001a325:	57                   	push   edi
c001a326:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001a32d:	50                   	push   eax
c001a32e:	52                   	push   edx
c001a32f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a335:	e8 fc f7 ff ff       	call   c0019b36 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a33a:	e9 87 00 00 00       	jmp    c001a3c6 <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c001a33f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a344:	74 33                	je     c001a379 <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001a346:	31 ed                	xor    ebp,ebp
c001a348:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a34c:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001a350:	50                   	push   eax
c001a351:	50                   	push   eax
c001a352:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a359:	50                   	push   eax
c001a35a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a360:	e8 d1 ed ff ff       	call   c0019136 <IDE::getBase(unsigned char)>
c001a365:	89 c2                	mov    edx,eax
c001a367:	89 f8                	mov    eax,edi
c001a369:	66 ef                	out    dx,ax
c001a36b:	45                   	inc    ebp
c001a36c:	83 c4 10             	add    esp,0x10
c001a36f:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001a375:	75 d1                	jne    c001a348 <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c001a377:	eb 23                	jmp    c001a39c <ATA::access(unsigned long long, int, void*, bool)+0x344>
c001a379:	0f b6 d2             	movzx  edx,dl
c001a37c:	51                   	push   ecx
c001a37d:	51                   	push   ecx
c001a37e:	52                   	push   edx
c001a37f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a385:	e8 ac ed ff ff       	call   c0019136 <IDE::getBase(unsigned char)>
c001a38a:	b9 00 01 00 00       	mov    ecx,0x100
c001a38f:	89 c2                	mov    edx,eax
c001a391:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001a395:	fc                   	cld    
c001a396:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001a399:	83 c4 10             	add    esp,0x10
c001a39c:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001a3a4:	4e                   	dec    esi
c001a3a5:	e9 4a ff ff ff       	jmp    c001a2f4 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c001a3aa:	31 ff                	xor    edi,edi
c001a3ac:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a3b1:	74 16                	je     c001a3c9 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a3b3:	50                   	push   eax
c001a3b4:	50                   	push   eax
c001a3b5:	31 c0                	xor    eax,eax
c001a3b7:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001a3bc:	0f 94 c0             	sete   al
c001a3bf:	50                   	push   eax
c001a3c0:	53                   	push   ebx
c001a3c1:	e8 fc fb ff ff       	call   c0019fc2 <ATA::flush(bool)>
c001a3c6:	83 c4 10             	add    esp,0x10
c001a3c9:	83 c4 2c             	add    esp,0x2c
c001a3cc:	89 f8                	mov    eax,edi
c001a3ce:	5b                   	pop    ebx
c001a3cf:	5e                   	pop    esi
c001a3d0:	5f                   	pop    edi
c001a3d1:	5d                   	pop    ebp
c001a3d2:	c3                   	ret    
c001a3d3:	90                   	nop

c001a3d4 <ATA::read(unsigned long long, int, void*)>:
c001a3d4:	57                   	push   edi
c001a3d5:	b8 04 00 00 00       	mov    eax,0x4
c001a3da:	56                   	push   esi
c001a3db:	53                   	push   ebx
c001a3dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a3e0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a3e4:	8d 7a ff             	lea    edi,[edx-0x1]
c001a3e7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a3eb:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a3ef:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a3f5:	77 25                	ja     c001a41c <ATA::read(unsigned long long, int, void*)+0x48>
c001a3f7:	b8 06 00 00 00       	mov    eax,0x6
c001a3fc:	85 f6                	test   esi,esi
c001a3fe:	74 1c                	je     c001a41c <ATA::read(unsigned long long, int, void*)+0x48>
c001a400:	50                   	push   eax
c001a401:	50                   	push   eax
c001a402:	6a 00                	push   0x0
c001a404:	56                   	push   esi
c001a405:	52                   	push   edx
c001a406:	53                   	push   ebx
c001a407:	51                   	push   ecx
c001a408:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a40c:	e8 47 fc ff ff       	call   c001a058 <ATA::access(unsigned long long, int, void*, bool)>
c001a411:	83 c4 20             	add    esp,0x20
c001a414:	85 c0                	test   eax,eax
c001a416:	0f 95 c0             	setne  al
c001a419:	0f b6 c0             	movzx  eax,al
c001a41c:	5b                   	pop    ebx
c001a41d:	5e                   	pop    esi
c001a41e:	5f                   	pop    edi
c001a41f:	c3                   	ret    

c001a420 <ATA::write(unsigned long long, int, void*)>:
c001a420:	57                   	push   edi
c001a421:	b8 04 00 00 00       	mov    eax,0x4
c001a426:	56                   	push   esi
c001a427:	53                   	push   ebx
c001a428:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a42c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a430:	8d 7a ff             	lea    edi,[edx-0x1]
c001a433:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a437:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a43b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a441:	77 25                	ja     c001a468 <ATA::write(unsigned long long, int, void*)+0x48>
c001a443:	b8 06 00 00 00       	mov    eax,0x6
c001a448:	85 f6                	test   esi,esi
c001a44a:	74 1c                	je     c001a468 <ATA::write(unsigned long long, int, void*)+0x48>
c001a44c:	50                   	push   eax
c001a44d:	50                   	push   eax
c001a44e:	6a 01                	push   0x1
c001a450:	56                   	push   esi
c001a451:	52                   	push   edx
c001a452:	53                   	push   ebx
c001a453:	51                   	push   ecx
c001a454:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a458:	e8 fb fb ff ff       	call   c001a058 <ATA::access(unsigned long long, int, void*, bool)>
c001a45d:	83 c4 20             	add    esp,0x20
c001a460:	85 c0                	test   eax,eax
c001a462:	0f 95 c0             	setne  al
c001a465:	0f b6 c0             	movzx  eax,al
c001a468:	5b                   	pop    ebx
c001a469:	5e                   	pop    esi
c001a46a:	5f                   	pop    edi
c001a46b:	c3                   	ret    

c001a46c <ATA::detectCHS()>:
c001a46c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a470:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001a476:	c1 e0 06             	shl    eax,0x6
c001a479:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001a47f:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001a489:	c7 44 24 04 44 f6 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f644
c001a491:	e9 cd 5c ff ff       	jmp    c0010163 <KePanic(char const*)>

c001a496 <ATA::open(int, int, void*)>:
c001a496:	53                   	push   ebx
c001a497:	83 ec 08             	sub    esp,0x8
c001a49a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a49e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a4a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a4a6:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a4ac:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a4b2:	c1 e0 06             	shl    eax,0x6
c001a4b5:	01 d0                	add    eax,edx
c001a4b7:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001a4be:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001a4c4:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001a4cb:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a4d5:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001a4db:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a4e2:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001a4e9:	75 0c                	jne    c001a4f7 <ATA::open(int, int, void*)+0x61>
c001a4eb:	83 ec 0c             	sub    esp,0xc
c001a4ee:	53                   	push   ebx
c001a4ef:	e8 78 ff ff ff       	call   c001a46c <ATA::detectCHS()>
c001a4f4:	83 c4 10             	add    esp,0x10
c001a4f7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a4fd:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a503:	c1 e0 06             	shl    eax,0x6
c001a506:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001a50d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a517:	d1 e8                	shr    eax,1
c001a519:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001a51f:	6a 04                	push   0x4
c001a521:	6a 0c                	push   0xc
c001a523:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a52a:	50                   	push   eax
c001a52b:	52                   	push   edx
c001a52c:	e8 17 ec ff ff       	call   c0019148 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a531:	90                   	nop
c001a532:	90                   	nop
c001a533:	6a 00                	push   0x0
c001a535:	6a 0c                	push   0xc
c001a537:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a53e:	50                   	push   eax
c001a53f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a545:	e8 fe eb ff ff       	call   c0019148 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a54a:	83 c4 14             	add    esp,0x14
c001a54d:	53                   	push   ebx
c001a54e:	e8 1b 18 ff ff       	call   c000bd6e <PhysicalDisk::startCache()>
c001a553:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a556:	e8 b3 28 ff ff       	call   c000ce0e <createPartitionsForDisk(PhysicalDisk*)>
c001a55b:	31 c0                	xor    eax,eax
c001a55d:	83 c4 18             	add    esp,0x18
c001a560:	5b                   	pop    ebx
c001a561:	c3                   	ret    

c001a562 <ATAPI::write(unsigned long long, int, void*)>:
c001a562:	b8 03 00 00 00       	mov    eax,0x3
c001a567:	c3                   	ret    

c001a568 <ATAPI::close(int, int, void*)>:
c001a568:	83 ec 0c             	sub    esp,0xc
c001a56b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a56f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a575:	85 c0                	test   eax,eax
c001a577:	74 0c                	je     c001a585 <ATAPI::close(int, int, void*)+0x1d>
c001a579:	83 ec 0c             	sub    esp,0xc
c001a57c:	8b 10                	mov    edx,DWORD PTR [eax]
c001a57e:	50                   	push   eax
c001a57f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a582:	83 c4 10             	add    esp,0x10
c001a585:	31 c0                	xor    eax,eax
c001a587:	83 c4 0c             	add    esp,0xc
c001a58a:	c3                   	ret    
c001a58b:	90                   	nop

c001a58c <ATAPI::ATAPI()>:
c001a58c:	83 ec 0c             	sub    esp,0xc
c001a58f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a593:	83 ec 04             	sub    esp,0x4
c001a596:	68 00 08 00 00       	push   0x800
c001a59b:	68 8d f7 01 c0       	push   0xc001f78d
c001a5a0:	50                   	push   eax
c001a5a1:	e8 60 17 ff ff       	call   c000bd06 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a5a6:	83 c4 10             	add    esp,0x10
c001a5a9:	ba a8 f6 01 c0       	mov    edx,0xc001f6a8
c001a5ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5b2:	89 10                	mov    DWORD PTR [eax],edx
c001a5b4:	90                   	nop
c001a5b5:	83 c4 0c             	add    esp,0xc
c001a5b8:	c3                   	ret    
c001a5b9:	90                   	nop

c001a5ba <ATAPI::readyForCommand()>:
c001a5ba:	56                   	push   esi
c001a5bb:	53                   	push   ebx
c001a5bc:	53                   	push   ebx
c001a5bd:	31 db                	xor    ebx,ebx
c001a5bf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a5c3:	51                   	push   ecx
c001a5c4:	6a 0c                	push   0xc
c001a5c6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001a5cd:	50                   	push   eax
c001a5ce:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001a5d4:	e8 2f ec ff ff       	call   c0019208 <IDE::read(unsigned char, unsigned char)>
c001a5d9:	83 c4 10             	add    esp,0x10
c001a5dc:	a8 88                	test   al,0x88
c001a5de:	74 25                	je     c001a605 <ATAPI::readyForCommand()+0x4b>
c001a5e0:	43                   	inc    ebx
c001a5e1:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001a5e7:	7e da                	jle    c001a5c3 <ATAPI::readyForCommand()+0x9>
c001a5e9:	83 ec 0c             	sub    esp,0xc
c001a5ec:	68 5e 01 00 00       	push   0x15e
c001a5f1:	e8 26 96 ff ff       	call   c0013c1c <milliTenthSleep(unsigned int)>
c001a5f6:	83 c4 10             	add    esp,0x10
c001a5f9:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001a5ff:	75 c2                	jne    c001a5c3 <ATAPI::readyForCommand()+0x9>
c001a601:	31 c0                	xor    eax,eax
c001a603:	eb 02                	jmp    c001a607 <ATAPI::readyForCommand()+0x4d>
c001a605:	b0 01                	mov    al,0x1
c001a607:	5a                   	pop    edx
c001a608:	5b                   	pop    ebx
c001a609:	5e                   	pop    esi
c001a60a:	c3                   	ret    
c001a60b:	90                   	nop

c001a60c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001a60c:	55                   	push   ebp
c001a60d:	57                   	push   edi
c001a60e:	56                   	push   esi
c001a60f:	53                   	push   ebx
c001a610:	83 ec 20             	sub    esp,0x20
c001a613:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a617:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001a61b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a61f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a623:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a627:	6a 01                	push   0x1
c001a629:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a630:	50                   	push   eax
c001a631:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a637:	e8 1a ed ff ff       	call   c0019356 <IDE::enableIRQs(unsigned char, bool)>
c001a63c:	5e                   	pop    esi
c001a63d:	58                   	pop    eax
c001a63e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a645:	50                   	push   eax
c001a646:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a64c:	e8 d1 ea ff ff       	call   c0019122 <IDE::prepareInterrupt(unsigned char)>
c001a651:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a654:	e8 61 ff ff ff       	call   c001a5ba <ATAPI::readyForCommand()>
c001a659:	83 c4 10             	add    esp,0x10
c001a65c:	84 c0                	test   al,al
c001a65e:	75 0a                	jne    c001a66a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001a660:	bb 01 00 00 00       	mov    ebx,0x1
c001a665:	e9 57 02 00 00       	jmp    c001a8c1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a66a:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001a670:	c1 e0 04             	shl    eax,0x4
c001a673:	0f b6 c0             	movzx  eax,al
c001a676:	50                   	push   eax
c001a677:	6a 06                	push   0x6
c001a679:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a680:	50                   	push   eax
c001a681:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a687:	e8 bc ea ff ff       	call   c0019148 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a68c:	6a 00                	push   0x0
c001a68e:	6a 01                	push   0x1
c001a690:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a697:	50                   	push   eax
c001a698:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a69e:	e8 a5 ea ff ff       	call   c0019148 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a6a3:	83 c4 20             	add    esp,0x20
c001a6a6:	0f b6 c3             	movzx  eax,bl
c001a6a9:	0f b6 df             	movzx  ebx,bh
c001a6ac:	50                   	push   eax
c001a6ad:	6a 04                	push   0x4
c001a6af:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a6b6:	50                   	push   eax
c001a6b7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6bd:	e8 86 ea ff ff       	call   c0019148 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a6c2:	53                   	push   ebx
c001a6c3:	6a 05                	push   0x5
c001a6c5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a6cc:	50                   	push   eax
c001a6cd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6d3:	e8 70 ea ff ff       	call   c0019148 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a6d8:	83 c4 20             	add    esp,0x20
c001a6db:	68 a0 00 00 00       	push   0xa0
c001a6e0:	6a 07                	push   0x7
c001a6e2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a6e9:	50                   	push   eax
c001a6ea:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6f0:	e8 53 ea ff ff       	call   c0019148 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a6f5:	83 c4 0c             	add    esp,0xc
c001a6f8:	6a 01                	push   0x1
c001a6fa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a701:	50                   	push   eax
c001a702:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a708:	e8 d9 f4 ff ff       	call   c0019be6 <IDE::polling(unsigned char, unsigned int)>
c001a70d:	83 c4 10             	add    esp,0x10
c001a710:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001a716:	84 c0                	test   al,al
c001a718:	74 23                	je     c001a73d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001a71a:	0f b6 d8             	movzx  ebx,al
c001a71d:	0f b6 d2             	movzx  edx,dl
c001a720:	53                   	push   ebx
c001a721:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001a728:	50                   	push   eax
c001a729:	52                   	push   edx
c001a72a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a730:	e8 01 f4 ff ff       	call   c0019b36 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a735:	83 c4 10             	add    esp,0x10
c001a738:	e9 84 01 00 00       	jmp    c001a8c1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a73d:	0f b6 d2             	movzx  edx,dl
c001a740:	53                   	push   ebx
c001a741:	53                   	push   ebx
c001a742:	52                   	push   edx
c001a743:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a749:	e8 e8 e9 ff ff       	call   c0019136 <IDE::getBase(unsigned char)>
c001a74e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a752:	b9 06 00 00 00       	mov    ecx,0x6
c001a757:	89 c2                	mov    edx,eax
c001a759:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001a75c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001a760:	83 c4 10             	add    esp,0x10
c001a763:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a769:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a770:	85 db                	test   ebx,ebx
c001a772:	0f 84 ec 00 00 00    	je     c001a864 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001a778:	51                   	push   ecx
c001a779:	51                   	push   ecx
c001a77a:	52                   	push   edx
c001a77b:	50                   	push   eax
c001a77c:	e8 35 eb ff ff       	call   c00192b6 <IDE::waitInterrupt(unsigned char)>
c001a781:	83 c4 10             	add    esp,0x10
c001a784:	84 c0                	test   al,al
c001a786:	0f 84 d4 fe ff ff    	je     c001a660 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a78c:	56                   	push   esi
c001a78d:	56                   	push   esi
c001a78e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a795:	50                   	push   eax
c001a796:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a79c:	e8 81 e9 ff ff       	call   c0019122 <IDE::prepareInterrupt(unsigned char)>
c001a7a1:	83 c4 0c             	add    esp,0xc
c001a7a4:	6a 04                	push   0x4
c001a7a6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a7ad:	50                   	push   eax
c001a7ae:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a7b4:	e8 4f ea ff ff       	call   c0019208 <IDE::read(unsigned char, unsigned char)>
c001a7b9:	83 c4 0c             	add    esp,0xc
c001a7bc:	89 c6                	mov    esi,eax
c001a7be:	6a 05                	push   0x5
c001a7c0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a7c7:	50                   	push   eax
c001a7c8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a7ce:	e8 35 ea ff ff       	call   c0019208 <IDE::read(unsigned char, unsigned char)>
c001a7d3:	89 f1                	mov    ecx,esi
c001a7d5:	0f b6 c0             	movzx  eax,al
c001a7d8:	0f b6 f1             	movzx  esi,cl
c001a7db:	c1 e0 08             	shl    eax,0x8
c001a7de:	09 c6                	or     esi,eax
c001a7e0:	d1 fe                	sar    esi,1
c001a7e2:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001a7e6:	83 c4 10             	add    esp,0x10
c001a7e9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001a7ee:	74 41                	je     c001a831 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001a7f0:	31 c9                	xor    ecx,ecx
c001a7f2:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a7f8:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a7ff:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001a803:	75 0a                	jne    c001a80f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001a805:	01 c9                	add    ecx,ecx
c001a807:	01 cd                	add    ebp,ecx
c001a809:	4b                   	dec    ebx
c001a80a:	e9 54 ff ff ff       	jmp    c001a763 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001a80f:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001a814:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a818:	51                   	push   ecx
c001a819:	51                   	push   ecx
c001a81a:	52                   	push   edx
c001a81b:	50                   	push   eax
c001a81c:	e8 15 e9 ff ff       	call   c0019136 <IDE::getBase(unsigned char)>
c001a821:	89 c2                	mov    edx,eax
c001a823:	89 f0                	mov    eax,esi
c001a825:	66 ef                	out    dx,ax
c001a827:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a82b:	83 c4 10             	add    esp,0x10
c001a82e:	41                   	inc    ecx
c001a82f:	eb c1                	jmp    c001a7f2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001a831:	31 f6                	xor    esi,esi
c001a833:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a839:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a840:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001a844:	75 06                	jne    c001a84c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001a846:	01 f6                	add    esi,esi
c001a848:	01 f5                	add    ebp,esi
c001a84a:	eb bd                	jmp    c001a809 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001a84c:	51                   	push   ecx
c001a84d:	51                   	push   ecx
c001a84e:	52                   	push   edx
c001a84f:	50                   	push   eax
c001a850:	e8 e1 e8 ff ff       	call   c0019136 <IDE::getBase(unsigned char)>
c001a855:	89 c2                	mov    edx,eax
c001a857:	66 ed                	in     ax,dx
c001a859:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001a85e:	83 c4 10             	add    esp,0x10
c001a861:	46                   	inc    esi
c001a862:	eb cf                	jmp    c001a833 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001a864:	51                   	push   ecx
c001a865:	51                   	push   ecx
c001a866:	52                   	push   edx
c001a867:	50                   	push   eax
c001a868:	e8 49 ea ff ff       	call   c00192b6 <IDE::waitInterrupt(unsigned char)>
c001a86d:	83 c4 10             	add    esp,0x10
c001a870:	84 c0                	test   al,al
c001a872:	0f 84 e8 fd ff ff    	je     c001a660 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a878:	bb a0 86 01 00       	mov    ebx,0x186a0
c001a87d:	52                   	push   edx
c001a87e:	52                   	push   edx
c001a87f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a886:	50                   	push   eax
c001a887:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a88d:	e8 90 e8 ff ff       	call   c0019122 <IDE::prepareInterrupt(unsigned char)>
c001a892:	83 c4 10             	add    esp,0x10
c001a895:	50                   	push   eax
c001a896:	50                   	push   eax
c001a897:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a89e:	50                   	push   eax
c001a89f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a8a5:	e8 8c e8 ff ff       	call   c0019136 <IDE::getBase(unsigned char)>
c001a8aa:	8d 50 07             	lea    edx,[eax+0x7]
c001a8ad:	ec                   	in     al,dx
c001a8ae:	83 c4 10             	add    esp,0x10
c001a8b1:	a8 88                	test   al,0x88
c001a8b3:	74 0a                	je     c001a8bf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001a8b5:	4b                   	dec    ebx
c001a8b6:	75 dd                	jne    c001a895 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001a8b8:	bb 02 00 00 00       	mov    ebx,0x2
c001a8bd:	eb 02                	jmp    c001a8c1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a8bf:	31 db                	xor    ebx,ebx
c001a8c1:	83 c4 1c             	add    esp,0x1c
c001a8c4:	89 d8                	mov    eax,ebx
c001a8c6:	5b                   	pop    ebx
c001a8c7:	5e                   	pop    esi
c001a8c8:	5f                   	pop    edi
c001a8c9:	5d                   	pop    ebp
c001a8ca:	c3                   	ret    
c001a8cb:	90                   	nop

c001a8cc <ATAPI::diskRemoved()>:
c001a8cc:	53                   	push   ebx
c001a8cd:	83 ec 14             	sub    esp,0x14
c001a8d0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a8d4:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a8db:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001a8e1:	e8 a8 22 ff ff       	call   c000cb8e <LogicalDisk::unmount()>
c001a8e6:	58                   	pop    eax
c001a8e7:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001a8ed:	e8 e2 2b ff ff       	call   c000d4d4 <VCache::writeWriteBuffer()>
c001a8f2:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001a8f8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a8fc:	83 c4 18             	add    esp,0x18
c001a8ff:	5b                   	pop    ebx
c001a900:	e9 bf 2b ff ff       	jmp    c000d4c4 <VCache::invalidateReadBuffer()>
c001a905:	90                   	nop

c001a906 <ATAPI::eject()>:
c001a906:	57                   	push   edi
c001a907:	b9 03 00 00 00       	mov    ecx,0x3
c001a90c:	53                   	push   ebx
c001a90d:	83 ec 14             	sub    esp,0x14
c001a910:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a914:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a918:	fc                   	cld    
c001a919:	31 c0                	xor    eax,eax
c001a91b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a91d:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001a922:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001a927:	50                   	push   eax
c001a928:	50                   	push   eax
c001a929:	6a 00                	push   0x0
c001a92b:	6a 00                	push   0x0
c001a92d:	6a 00                	push   0x0
c001a92f:	6a 02                	push   0x2
c001a931:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a935:	50                   	push   eax
c001a936:	53                   	push   ebx
c001a937:	e8 d0 fc ff ff       	call   c001a60c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a93c:	83 c4 14             	add    esp,0x14
c001a93f:	53                   	push   ebx
c001a940:	e8 87 ff ff ff       	call   c001a8cc <ATAPI::diskRemoved()>
c001a945:	83 c4 24             	add    esp,0x24
c001a948:	31 c0                	xor    eax,eax
c001a94a:	5b                   	pop    ebx
c001a94b:	5f                   	pop    edi
c001a94c:	c3                   	ret    
c001a94d:	90                   	nop

c001a94e <ATAPI::diskInserted()>:
c001a94e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a952:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001a959:	c3                   	ret    

c001a95a <ATAPI::detectMedia()>:
c001a95a:	56                   	push   esi
c001a95b:	53                   	push   ebx
c001a95c:	83 ec 28             	sub    esp,0x28
c001a95f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a963:	6a 0c                	push   0xc
c001a965:	6a 00                	push   0x0
c001a967:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001a96b:	56                   	push   esi
c001a96c:	e8 5f 5b fe ff       	call   c00004d0 <memset>
c001a971:	58                   	pop    eax
c001a972:	5a                   	pop    edx
c001a973:	6a 00                	push   0x0
c001a975:	6a 00                	push   0x0
c001a977:	6a 00                	push   0x0
c001a979:	6a 00                	push   0x0
c001a97b:	56                   	push   esi
c001a97c:	53                   	push   ebx
c001a97d:	e8 8a fc ff ff       	call   c001a60c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a982:	83 c4 1c             	add    esp,0x1c
c001a985:	6a 0c                	push   0xc
c001a987:	6a 00                	push   0x0
c001a989:	56                   	push   esi
c001a98a:	e8 41 5b fe ff       	call   c00004d0 <memset>
c001a98f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001a994:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001a999:	59                   	pop    ecx
c001a99a:	58                   	pop    eax
c001a99b:	6a 01                	push   0x1
c001a99d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a9a1:	50                   	push   eax
c001a9a2:	6a 00                	push   0x0
c001a9a4:	6a 12                	push   0x12
c001a9a6:	56                   	push   esi
c001a9a7:	53                   	push   ebx
c001a9a8:	e8 5f fc ff ff       	call   c001a60c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a9ad:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001a9b1:	83 c4 20             	add    esp,0x20
c001a9b4:	83 e0 7f             	and    eax,0x7f
c001a9b7:	3c 70                	cmp    al,0x70
c001a9b9:	74 15                	je     c001a9d0 <ATAPI::detectMedia()+0x76>
c001a9bb:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a9c2:	75 0c                	jne    c001a9d0 <ATAPI::detectMedia()+0x76>
c001a9c4:	83 ec 0c             	sub    esp,0xc
c001a9c7:	53                   	push   ebx
c001a9c8:	e8 81 ff ff ff       	call   c001a94e <ATAPI::diskInserted()>
c001a9cd:	83 c4 10             	add    esp,0x10
c001a9d0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a9d4:	83 e0 0f             	and    eax,0xf
c001a9d7:	3c 02                	cmp    al,0x2
c001a9d9:	75 1b                	jne    c001a9f6 <ATAPI::detectMedia()+0x9c>
c001a9db:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001a9e0:	75 2d                	jne    c001aa0f <ATAPI::detectMedia()+0xb5>
c001a9e2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a9e9:	74 24                	je     c001aa0f <ATAPI::detectMedia()+0xb5>
c001a9eb:	83 ec 0c             	sub    esp,0xc
c001a9ee:	53                   	push   ebx
c001a9ef:	e8 d8 fe ff ff       	call   c001a8cc <ATAPI::diskRemoved()>
c001a9f4:	eb 16                	jmp    c001aa0c <ATAPI::detectMedia()+0xb2>
c001a9f6:	84 c0                	test   al,al
c001a9f8:	75 15                	jne    c001aa0f <ATAPI::detectMedia()+0xb5>
c001a9fa:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001aa01:	75 0c                	jne    c001aa0f <ATAPI::detectMedia()+0xb5>
c001aa03:	83 ec 0c             	sub    esp,0xc
c001aa06:	53                   	push   ebx
c001aa07:	e8 42 ff ff ff       	call   c001a94e <ATAPI::diskInserted()>
c001aa0c:	83 c4 10             	add    esp,0x10
c001aa0f:	83 c4 24             	add    esp,0x24
c001aa12:	5b                   	pop    ebx
c001aa13:	5e                   	pop    esi
c001aa14:	c3                   	ret    
c001aa15:	90                   	nop

c001aa16 <ATAPI::open(int, int, void*)>:
c001aa16:	56                   	push   esi
c001aa17:	53                   	push   ebx
c001aa18:	50                   	push   eax
c001aa19:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aa1d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aa21:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001aa25:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001aa2b:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001aa31:	c1 e0 06             	shl    eax,0x6
c001aa34:	01 d0                	add    eax,edx
c001aa36:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001aa3d:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001aa43:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001aa4a:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001aa54:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001aa5a:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001aa61:	6a 04                	push   0x4
c001aa63:	6a 0c                	push   0xc
c001aa65:	51                   	push   ecx
c001aa66:	52                   	push   edx
c001aa67:	e8 dc e6 ff ff       	call   c0019148 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001aa6c:	90                   	nop
c001aa6d:	90                   	nop
c001aa6e:	6a 00                	push   0x0
c001aa70:	6a 0c                	push   0xc
c001aa72:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001aa79:	50                   	push   eax
c001aa7a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001aa80:	e8 c3 e6 ff ff       	call   c0019148 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001aa85:	83 c4 14             	add    esp,0x14
c001aa88:	68 74 01 00 00       	push   0x174
c001aa8d:	e8 27 cd fe ff       	call   c00077b9 <malloc>
c001aa92:	83 c4 0c             	add    esp,0xc
c001aa95:	89 c6                	mov    esi,eax
c001aa97:	6a 00                	push   0x0
c001aa99:	68 ff ff ff 7f       	push   0x7fffffff
c001aa9e:	6a 00                	push   0x0
c001aaa0:	6a 00                	push   0x0
c001aaa2:	53                   	push   ebx
c001aaa3:	68 44 f8 01 c0       	push   0xc001f844
c001aaa8:	50                   	push   eax
c001aaa9:	e8 2c 1f ff ff       	call   c000c9da <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001aaae:	83 c4 14             	add    esp,0x14
c001aab1:	56                   	push   esi
c001aab2:	e8 d9 1f ff ff       	call   c000ca90 <LogicalDisk::assignDriveLetter()>
c001aab7:	5a                   	pop    edx
c001aab8:	0f be c0             	movsx  eax,al
c001aabb:	59                   	pop    ecx
c001aabc:	50                   	push   eax
c001aabd:	68 90 f6 01 c0       	push   0xc001f690
c001aac2:	e8 31 fa fe ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c001aac7:	58                   	pop    eax
c001aac8:	5a                   	pop    edx
c001aac9:	56                   	push   esi
c001aaca:	53                   	push   ebx
c001aacb:	e8 68 0e ff ff       	call   c000b938 <Device::addChild(Device*)>
c001aad0:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001aad6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aad9:	e8 90 12 ff ff       	call   c000bd6e <PhysicalDisk::startCache()>
c001aade:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001aae5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aae8:	e8 6d fe ff ff       	call   c001a95a <ATAPI::detectMedia()>
c001aaed:	83 c4 14             	add    esp,0x14
c001aaf0:	31 c0                	xor    eax,eax
c001aaf2:	5b                   	pop    ebx
c001aaf3:	5e                   	pop    esi
c001aaf4:	c3                   	ret    
c001aaf5:	90                   	nop

c001aaf6 <ATAPI::read(unsigned long long, int, void*)>:
c001aaf6:	55                   	push   ebp
c001aaf7:	57                   	push   edi
c001aaf8:	56                   	push   esi
c001aaf9:	53                   	push   ebx
c001aafa:	83 ec 1c             	sub    esp,0x1c
c001aafd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ab01:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001ab05:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001ab09:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ab10:	74 3c                	je     c001ab4e <ATAPI::read(unsigned long long, int, void*)+0x58>
c001ab12:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ab16:	b9 03 00 00 00       	mov    ecx,0x3
c001ab1b:	fc                   	cld    
c001ab1c:	31 c0                	xor    eax,eax
c001ab1e:	0f ce                	bswap  esi
c001ab20:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ab22:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001ab27:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001ab2b:	89 e8                	mov    eax,ebp
c001ab2d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001ab31:	50                   	push   eax
c001ab32:	50                   	push   eax
c001ab33:	55                   	push   ebp
c001ab34:	c1 e5 0b             	shl    ebp,0xb
c001ab37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ab3b:	6a 00                	push   0x0
c001ab3d:	55                   	push   ebp
c001ab3e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ab42:	50                   	push   eax
c001ab43:	53                   	push   ebx
c001ab44:	e8 c3 fa ff ff       	call   c001a60c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ab49:	83 c4 20             	add    esp,0x20
c001ab4c:	eb 1a                	jmp    c001ab68 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001ab4e:	83 ec 0c             	sub    esp,0xc
c001ab51:	53                   	push   ebx
c001ab52:	e8 03 fe ff ff       	call   c001a95a <ATAPI::detectMedia()>
c001ab57:	83 c4 10             	add    esp,0x10
c001ab5a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ab61:	75 af                	jne    c001ab12 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001ab63:	b8 02 00 00 00       	mov    eax,0x2
c001ab68:	83 c4 1c             	add    esp,0x1c
c001ab6b:	5b                   	pop    ebx
c001ab6c:	5e                   	pop    esi
c001ab6d:	5f                   	pop    edi
c001ab6e:	5d                   	pop    ebp
c001ab6f:	c3                   	ret    

c001ab70 <SATA::close(int, int, void*)>:
c001ab70:	83 ec 0c             	sub    esp,0xc
c001ab73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab77:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ab7d:	85 c0                	test   eax,eax
c001ab7f:	74 0c                	je     c001ab8d <SATA::close(int, int, void*)+0x1d>
c001ab81:	83 ec 0c             	sub    esp,0xc
c001ab84:	8b 10                	mov    edx,DWORD PTR [eax]
c001ab86:	50                   	push   eax
c001ab87:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ab8a:	83 c4 10             	add    esp,0x10
c001ab8d:	31 c0                	xor    eax,eax
c001ab8f:	83 c4 0c             	add    esp,0xc
c001ab92:	c3                   	ret    
c001ab93:	90                   	nop

c001ab94 <SATA::powerSaving(PowerSavingLevel)>:
c001ab94:	c3                   	ret    
c001ab95:	90                   	nop

c001ab96 <SATA::open(int, int, void*)>:
c001ab96:	56                   	push   esi
c001ab97:	53                   	push   ebx
c001ab98:	50                   	push   eax
c001ab99:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ab9d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aba1:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001abab:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001abb1:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001abbb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001abbf:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001abc9:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001abcf:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001abd6:	e8 da ce fe ff       	call   c0007ab5 <Phys::allocatePage()>
c001abdb:	89 c6                	mov    esi,eax
c001abdd:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001abe3:	81 c6 00 10 00 00    	add    esi,0x1000
c001abe9:	e8 c7 ce fe ff       	call   c0007ab5 <Phys::allocatePage()>
c001abee:	39 c6                	cmp    esi,eax
c001abf0:	74 10                	je     c001ac02 <SATA::open(int, int, void*)+0x6c>
c001abf2:	83 ec 0c             	sub    esp,0xc
c001abf5:	68 d8 f6 01 c0       	push   0xc001f6d8
c001abfa:	e8 64 55 ff ff       	call   c0010163 <KePanic(char const*)>
c001abff:	83 c4 10             	add    esp,0x10
c001ac02:	83 ec 0c             	sub    esp,0xc
c001ac05:	6a 02                	push   0x2
c001ac07:	e8 99 e6 fe ff       	call   c00092a5 <Virt::allocateKernelVirtualPages(int)>
c001ac0c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ac12:	6a 03                	push   0x3
c001ac14:	50                   	push   eax
c001ac15:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001ac1b:	ff 35 50 0e 02 c0    	push   DWORD PTR ds:0xc0020e50
c001ac21:	e8 14 ed fe ff       	call   c000993a <VAS::mapPage(unsigned long, unsigned long, int)>
c001ac26:	83 c4 14             	add    esp,0x14
c001ac29:	53                   	push   ebx
c001ac2a:	e8 3f 11 ff ff       	call   c000bd6e <PhysicalDisk::startCache()>
c001ac2f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ac32:	e8 d7 21 ff ff       	call   c000ce0e <createPartitionsForDisk(PhysicalDisk*)>
c001ac37:	83 c4 14             	add    esp,0x14
c001ac3a:	31 c0                	xor    eax,eax
c001ac3c:	5b                   	pop    ebx
c001ac3d:	5e                   	pop    esi
c001ac3e:	c3                   	ret    
c001ac3f:	90                   	nop

c001ac40 <SATA::SATA()>:
c001ac40:	83 ec 0c             	sub    esp,0xc
c001ac43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac47:	83 ec 04             	sub    esp,0x4
c001ac4a:	68 00 02 00 00       	push   0x200
c001ac4f:	68 ec f6 01 c0       	push   0xc001f6ec
c001ac54:	50                   	push   eax
c001ac55:	e8 ac 10 ff ff       	call   c000bd06 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ac5a:	83 c4 10             	add    esp,0x10
c001ac5d:	ba 5c f7 01 c0       	mov    edx,0xc001f75c
c001ac62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac66:	89 10                	mov    DWORD PTR [eax],edx
c001ac68:	90                   	nop
c001ac69:	83 c4 0c             	add    esp,0xc
c001ac6c:	c3                   	ret    
c001ac6d:	90                   	nop

c001ac6e <SATA::access(unsigned long long, int, void*, bool)>:
c001ac6e:	55                   	push   ebp
c001ac6f:	57                   	push   edi
c001ac70:	56                   	push   esi
c001ac71:	53                   	push   ebx
c001ac72:	83 ec 2c             	sub    esp,0x2c
c001ac75:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001ac79:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001ac7d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ac81:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ac85:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ac89:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001ac8e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ac92:	7e 10                	jle    c001aca4 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001ac94:	83 ec 0c             	sub    esp,0xc
c001ac97:	68 fc f6 01 c0       	push   0xc001f6fc
c001ac9c:	e8 c2 54 ff ff       	call   c0010163 <KePanic(char const*)>
c001aca1:	83 c4 10             	add    esp,0x10
c001aca4:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001acaa:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001acb0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001acb6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001acba:	89 d0                	mov    eax,edx
c001acbc:	c1 e0 07             	shl    eax,0x7
c001acbf:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001acc3:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001accd:	51                   	push   ecx
c001acce:	8d 42 02             	lea    eax,[edx+0x2]
c001acd1:	51                   	push   ecx
c001acd2:	c1 e0 07             	shl    eax,0x7
c001acd5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001acd9:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001acdd:	50                   	push   eax
c001acde:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001ace4:	e8 e7 ef ff ff       	call   c0019cd0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001ace9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aced:	83 c4 10             	add    esp,0x10
c001acf0:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001acf5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001acf9:	0f 84 4f 01 00 00    	je     c001ae4e <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001acff:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ad03:	c1 e0 09             	shl    eax,0x9
c001ad06:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ad0b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ad0f:	74 0e                	je     c001ad1f <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001ad11:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001ad17:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001ad1b:	89 c1                	mov    ecx,eax
c001ad1d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ad1f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ad23:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ad29:	8d 42 02             	lea    eax,[edx+0x2]
c001ad2c:	c1 e0 07             	shl    eax,0x7
c001ad2f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ad33:	8b 00                	mov    eax,DWORD PTR [eax]
c001ad35:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001ad3b:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001ad41:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ad45:	c1 e1 05             	shl    ecx,0x5
c001ad48:	01 c8                	add    eax,ecx
c001ad4a:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001ad4e:	83 e1 01             	and    ecx,0x1
c001ad51:	89 ce                	mov    esi,ecx
c001ad53:	8a 08                	mov    cl,BYTE PTR [eax]
c001ad55:	c1 e6 06             	shl    esi,0x6
c001ad58:	83 e1 bf             	and    ecx,0xffffffbf
c001ad5b:	09 f1                	or     ecx,esi
c001ad5d:	88 08                	mov    BYTE PTR [eax],cl
c001ad5f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ad61:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001ad67:	81 c9 05 00 01 00    	or     ecx,0x10005
c001ad6d:	89 08                	mov    DWORD PTR [eax],ecx
c001ad6f:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ad75:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001ad7b:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001ad81:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001ad84:	50                   	push   eax
c001ad85:	68 90 00 00 00       	push   0x90
c001ad8a:	6a 00                	push   0x0
c001ad8c:	56                   	push   esi
c001ad8d:	e8 3e 57 fe ff       	call   c00004d0 <memset>
c001ad92:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ad98:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001ad9c:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001ada2:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001ada6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001adaa:	83 c4 10             	add    esp,0x10
c001adad:	48                   	dec    eax
c001adae:	25 ff ff 3f 00       	and    eax,0x3fffff
c001adb3:	89 c1                	mov    ecx,eax
c001adb5:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001adbb:	25 00 00 c0 ff       	and    eax,0xffc00000
c001adc0:	09 c8                	or     eax,ecx
c001adc2:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001adc8:	66 8b 06             	mov    ax,WORD PTR [esi]
c001adcb:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001add2:	66 25 00 7f          	and    ax,0x7f00
c001add6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001adda:	66 0d 27 80          	or     ax,0x8027
c001adde:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001ade3:	66 89 06             	mov    WORD PTR [esi],ax
c001ade6:	19 c0                	sbb    eax,eax
c001ade8:	83 e0 f0             	and    eax,0xfffffff0
c001adeb:	83 c0 35             	add    eax,0x35
c001adee:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001adf1:	89 e8                	mov    eax,ebp
c001adf3:	c1 e8 10             	shr    eax,0x10
c001adf6:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001adf9:	89 e8                	mov    eax,ebp
c001adfb:	c1 e8 18             	shr    eax,0x18
c001adfe:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001ae01:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001ae05:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001ae08:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ae0c:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001ae0f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ae13:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001ae17:	89 d6                	mov    esi,edx
c001ae19:	31 c0                	xor    eax,eax
c001ae1b:	c1 e6 07             	shl    esi,0x7
c001ae1e:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ae22:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001ae28:	80 e1 88             	and    cl,0x88
c001ae2b:	74 0a                	je     c001ae37 <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001ae2d:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ae32:	74 0a                	je     c001ae3e <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001ae34:	40                   	inc    eax
c001ae35:	eb eb                	jmp    c001ae22 <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001ae37:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ae3c:	75 17                	jne    c001ae55 <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001ae3e:	83 ec 0c             	sub    esp,0xc
c001ae41:	68 35 f7 01 c0       	push   0xc001f735
c001ae46:	e8 ad f6 fe ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c001ae4b:	83 c4 10             	add    esp,0x10
c001ae4e:	b8 01 00 00 00       	mov    eax,0x1
c001ae53:	eb 5d                	jmp    c001aeb2 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001ae55:	b8 01 00 00 00       	mov    eax,0x1
c001ae5a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001ae5e:	c1 e2 07             	shl    edx,0x7
c001ae61:	d3 e0                	shl    eax,cl
c001ae63:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001ae67:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001ae6d:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001ae73:	85 c8                	test   eax,ecx
c001ae75:	74 16                	je     c001ae8d <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001ae77:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001ae7d:	0f ba e1 1e          	bt     ecx,0x1e
c001ae81:	73 ea                	jae    c001ae6d <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001ae83:	83 ec 0c             	sub    esp,0xc
c001ae86:	68 43 f7 01 c0       	push   0xc001f743
c001ae8b:	eb b9                	jmp    c001ae46 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001ae8d:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001ae93:	0f ba e0 1e          	bt     eax,0x1e
c001ae97:	72 b5                	jb     c001ae4e <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001ae99:	31 c0                	xor    eax,eax
c001ae9b:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001aea0:	75 10                	jne    c001aeb2 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001aea2:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001aea8:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001aeac:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001aeb0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aeb2:	83 c4 2c             	add    esp,0x2c
c001aeb5:	5b                   	pop    ebx
c001aeb6:	5e                   	pop    esi
c001aeb7:	5f                   	pop    edi
c001aeb8:	5d                   	pop    ebp
c001aeb9:	c3                   	ret    

c001aeba <SATA::read(unsigned long long, int, void*)>:
c001aeba:	57                   	push   edi
c001aebb:	b8 04 00 00 00       	mov    eax,0x4
c001aec0:	56                   	push   esi
c001aec1:	53                   	push   ebx
c001aec2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001aec6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001aeca:	8d 7a ff             	lea    edi,[edx-0x1]
c001aecd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001aed1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001aed5:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001aedb:	77 25                	ja     c001af02 <SATA::read(unsigned long long, int, void*)+0x48>
c001aedd:	b8 06 00 00 00       	mov    eax,0x6
c001aee2:	85 f6                	test   esi,esi
c001aee4:	74 1c                	je     c001af02 <SATA::read(unsigned long long, int, void*)+0x48>
c001aee6:	50                   	push   eax
c001aee7:	50                   	push   eax
c001aee8:	6a 00                	push   0x0
c001aeea:	56                   	push   esi
c001aeeb:	52                   	push   edx
c001aeec:	53                   	push   ebx
c001aeed:	51                   	push   ecx
c001aeee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aef2:	e8 77 fd ff ff       	call   c001ac6e <SATA::access(unsigned long long, int, void*, bool)>
c001aef7:	83 c4 20             	add    esp,0x20
c001aefa:	85 c0                	test   eax,eax
c001aefc:	0f 95 c0             	setne  al
c001aeff:	0f b6 c0             	movzx  eax,al
c001af02:	5b                   	pop    ebx
c001af03:	5e                   	pop    esi
c001af04:	5f                   	pop    edi
c001af05:	c3                   	ret    

c001af06 <SATA::write(unsigned long long, int, void*)>:
c001af06:	55                   	push   ebp
c001af07:	b8 04 00 00 00       	mov    eax,0x4
c001af0c:	57                   	push   edi
c001af0d:	56                   	push   esi
c001af0e:	53                   	push   ebx
c001af0f:	83 ec 0c             	sub    esp,0xc
c001af12:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001af16:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001af1a:	8d 73 ff             	lea    esi,[ebx-0x1]
c001af1d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001af21:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001af25:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001af2b:	77 3d                	ja     c001af6a <SATA::write(unsigned long long, int, void*)+0x64>
c001af2d:	b8 06 00 00 00       	mov    eax,0x6
c001af32:	85 ed                	test   ebp,ebp
c001af34:	74 34                	je     c001af6a <SATA::write(unsigned long long, int, void*)+0x64>
c001af36:	c1 e3 09             	shl    ebx,0x9
c001af39:	01 eb                	add    ebx,ebp
c001af3b:	89 d6                	mov    esi,edx
c001af3d:	89 cf                	mov    edi,ecx
c001af3f:	83 c6 01             	add    esi,0x1
c001af42:	83 d7 00             	adc    edi,0x0
c001af45:	50                   	push   eax
c001af46:	50                   	push   eax
c001af47:	6a 01                	push   0x1
c001af49:	55                   	push   ebp
c001af4a:	81 c5 00 02 00 00    	add    ebp,0x200
c001af50:	6a 01                	push   0x1
c001af52:	51                   	push   ecx
c001af53:	52                   	push   edx
c001af54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001af58:	e8 11 fd ff ff       	call   c001ac6e <SATA::access(unsigned long long, int, void*, bool)>
c001af5d:	83 c4 20             	add    esp,0x20
c001af60:	89 f2                	mov    edx,esi
c001af62:	89 f9                	mov    ecx,edi
c001af64:	39 dd                	cmp    ebp,ebx
c001af66:	75 d3                	jne    c001af3b <SATA::write(unsigned long long, int, void*)+0x35>
c001af68:	31 c0                	xor    eax,eax
c001af6a:	83 c4 0c             	add    esp,0xc
c001af6d:	5b                   	pop    ebx
c001af6e:	5e                   	pop    esi
c001af6f:	5f                   	pop    edi
c001af70:	5d                   	pop    ebp
c001af71:	c3                   	ret    

c001af72 <SATAPI::write(unsigned long long, int, void*)>:
c001af72:	b8 03 00 00 00       	mov    eax,0x3
c001af77:	c3                   	ret    

c001af78 <SATAPI::close(int, int, void*)>:
c001af78:	83 ec 0c             	sub    esp,0xc
c001af7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af7f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001af85:	85 c0                	test   eax,eax
c001af87:	74 0c                	je     c001af95 <SATAPI::close(int, int, void*)+0x1d>
c001af89:	83 ec 0c             	sub    esp,0xc
c001af8c:	8b 10                	mov    edx,DWORD PTR [eax]
c001af8e:	50                   	push   eax
c001af8f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001af92:	83 c4 10             	add    esp,0x10
c001af95:	31 c0                	xor    eax,eax
c001af97:	83 c4 0c             	add    esp,0xc
c001af9a:	c3                   	ret    
c001af9b:	90                   	nop

c001af9c <SATAPI::SATAPI()>:
c001af9c:	83 ec 0c             	sub    esp,0xc
c001af9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afa3:	83 ec 04             	sub    esp,0x4
c001afa6:	68 00 08 00 00       	push   0x800
c001afab:	68 8c f7 01 c0       	push   0xc001f78c
c001afb0:	50                   	push   eax
c001afb1:	e8 50 0d ff ff       	call   c000bd06 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001afb6:	83 c4 10             	add    esp,0x10
c001afb9:	ba 94 f8 01 c0       	mov    edx,0xc001f894
c001afbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afc2:	89 10                	mov    DWORD PTR [eax],edx
c001afc4:	90                   	nop
c001afc5:	83 c4 0c             	add    esp,0xc
c001afc8:	c3                   	ret    
c001afc9:	90                   	nop

c001afca <SATAPI::diskRemoved()>:
c001afca:	c3                   	ret    
c001afcb:	90                   	nop

c001afcc <SATAPI::diskInserted()>:
c001afcc:	83 ec 18             	sub    esp,0x18
c001afcf:	68 98 f7 01 c0       	push   0xc001f798
c001afd4:	e8 1f f5 fe ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c001afd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001afdd:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001afe4:	83 c4 1c             	add    esp,0x1c
c001afe7:	c3                   	ret    

c001afe8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001afe8:	55                   	push   ebp
c001afe9:	57                   	push   edi
c001afea:	56                   	push   esi
c001afeb:	53                   	push   ebx
c001afec:	83 ec 38             	sub    esp,0x38
c001afef:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001aff3:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001aff7:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001affb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001afff:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b003:	68 b0 f7 01 c0       	push   0xc001f7b0
c001b008:	e8 eb f4 fe ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c001b00d:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001b013:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b019:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b01d:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001b023:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b027:	83 c0 02             	add    eax,0x2
c001b02a:	c1 e0 07             	shl    eax,0x7
c001b02d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001b031:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b035:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b039:	c1 e0 07             	shl    eax,0x7
c001b03c:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001b040:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b044:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001b04e:	58                   	pop    eax
c001b04f:	5a                   	pop    edx
c001b050:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b054:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b05a:	e8 71 ec ff ff       	call   c0019cd0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001b05f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b063:	83 c4 10             	add    esp,0x10
c001b066:	b8 01 00 00 00       	mov    eax,0x1
c001b06b:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001b070:	0f 84 49 02 00 00    	je     c001b2bf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c001b076:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001b07c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b080:	8b 00                	mov    eax,DWORD PTR [eax]
c001b082:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001b088:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001b08e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b092:	c1 e1 05             	shl    ecx,0x5
c001b095:	01 c8                	add    eax,ecx
c001b097:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b099:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001b09f:	81 c9 25 00 01 00    	or     ecx,0x10025
c001b0a5:	89 08                	mov    DWORD PTR [eax],ecx
c001b0a7:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001b0ad:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001b0b3:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001b0b9:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001b0bc:	8d 7b 40             	lea    edi,[ebx+0x40]
c001b0bf:	50                   	push   eax
c001b0c0:	68 90 00 00 00       	push   0x90
c001b0c5:	6a 00                	push   0x0
c001b0c7:	53                   	push   ebx
c001b0c8:	e8 03 54 fe ff       	call   c00004d0 <memset>
c001b0cd:	b9 0c 00 00 00       	mov    ecx,0xc
c001b0d2:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001b0d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b0d8:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001b0de:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001b0e2:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001b0e8:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001b0ec:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001b0f0:	48                   	dec    eax
c001b0f1:	25 ff ff 3f 00       	and    eax,0x3fffff
c001b0f6:	89 c1                	mov    ecx,eax
c001b0f8:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001b0fe:	25 00 00 c0 ff       	and    eax,0xffc00000
c001b103:	09 c8                	or     eax,ecx
c001b105:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001b10b:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001b10e:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001b115:	66 25 00 7f          	and    ax,0x7f00
c001b119:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b11d:	66 0d 27 80          	or     ax,0x8027
c001b121:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001b125:	66 89 03             	mov    WORD PTR [ebx],ax
c001b128:	89 d0                	mov    eax,edx
c001b12a:	c1 ea 18             	shr    edx,0x18
c001b12d:	c1 e8 10             	shr    eax,0x10
c001b130:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001b133:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001b136:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001b13a:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001b13d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b141:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001b144:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b148:	83 c4 10             	add    esp,0x10
c001b14b:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001b14f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b153:	31 c0                	xor    eax,eax
c001b155:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001b15b:	80 e1 88             	and    cl,0x88
c001b15e:	74 0a                	je     c001b16a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x182>
c001b160:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b165:	74 0a                	je     c001b171 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x189>
c001b167:	40                   	inc    eax
c001b168:	eb eb                	jmp    c001b155 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16d>
c001b16a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b16f:	75 43                	jne    c001b1b4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cc>
c001b171:	83 ec 0c             	sub    esp,0xc
c001b174:	68 ca f7 01 c0       	push   0xc001f7ca
c001b179:	e8 7a f3 fe ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c001b17e:	58                   	pop    eax
c001b17f:	5a                   	pop    edx
c001b180:	68 df f7 01 c0       	push   0xc001f7df
c001b185:	ff 35 a4 0d 02 c0    	push   DWORD PTR ds:0xc0020da4
c001b18b:	e8 c6 d5 fe ff       	call   c0008756 <VgaText::puts(char const*)>
c001b190:	59                   	pop    ecx
c001b191:	5b                   	pop    ebx
c001b192:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b196:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b19c:	e8 c9 eb ff ff       	call   c0019d6a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001b1a1:	5e                   	pop    esi
c001b1a2:	5f                   	pop    edi
c001b1a3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b1a7:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b1ad:	e8 98 eb ff ff       	call   c0019d4a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001b1b2:	eb 48                	jmp    c001b1fc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x214>
c001b1b4:	be 01 00 00 00       	mov    esi,0x1
c001b1b9:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b1bd:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b1c1:	d3 e6                	shl    esi,cl
c001b1c3:	c1 e7 07             	shl    edi,0x7
c001b1c6:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001b1cc:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001b1d1:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001b1d5:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001b1db:	85 c6                	test   esi,eax
c001b1dd:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001b1e3:	0f 84 a3 00 00 00    	je     c001b28c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a4>
c001b1e9:	0f ba e0 1e          	bt     eax,0x1e
c001b1ed:	73 1a                	jae    c001b209 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x221>
c001b1ef:	83 ec 0c             	sub    esp,0xc
c001b1f2:	68 f1 f7 01 c0       	push   0xc001f7f1
c001b1f7:	e8 fc f2 fe ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c001b1fc:	83 c4 10             	add    esp,0x10
c001b1ff:	b8 01 00 00 00       	mov    eax,0x1
c001b204:	e9 b6 00 00 00       	jmp    c001b2bf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c001b209:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001b20f:	83 f8 0d             	cmp    eax,0xd
c001b212:	77 0a                	ja     c001b21e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x236>
c001b214:	83 ec 0c             	sub    esp,0xc
c001b217:	68 c8 00 00 00       	push   0xc8
c001b21c:	eb 28                	jmp    c001b246 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25e>
c001b21e:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001b224:	83 f8 0d             	cmp    eax,0xd
c001b227:	77 0a                	ja     c001b233 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24b>
c001b229:	83 ec 0c             	sub    esp,0xc
c001b22c:	68 58 02 00 00       	push   0x258
c001b231:	eb 13                	jmp    c001b246 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25e>
c001b233:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001b239:	83 f8 06             	cmp    eax,0x6
c001b23c:	77 10                	ja     c001b24e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x266>
c001b23e:	83 ec 0c             	sub    esp,0xc
c001b241:	68 dc 05 00 00       	push   0x5dc
c001b246:	e8 d1 89 ff ff       	call   c0013c1c <milliTenthSleep(unsigned int)>
c001b24b:	83 c4 10             	add    esp,0x10
c001b24e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001b252:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001b255:	75 06                	jne    c001b25d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x275>
c001b257:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001b25b:	74 15                	je     c001b272 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28a>
c001b25d:	83 fb 06             	cmp    ebx,0x6
c001b260:	77 10                	ja     c001b272 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28a>
c001b262:	83 ec 0c             	sub    esp,0xc
c001b265:	68 c4 09 00 00       	push   0x9c4
c001b26a:	e8 ad 89 ff ff       	call   c0013c1c <milliTenthSleep(unsigned int)>
c001b26f:	83 c4 10             	add    esp,0x10
c001b272:	43                   	inc    ebx
c001b273:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001b279:	0f 85 56 ff ff ff    	jne    c001b1d5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ed>
c001b27f:	83 ec 0c             	sub    esp,0xc
c001b282:	68 04 f8 01 c0       	push   0xc001f804
c001b287:	e9 6b ff ff ff       	jmp    c001b1f7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20f>
c001b28c:	0f ba e0 1e          	bt     eax,0x1e
c001b290:	73 0d                	jae    c001b29f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b7>
c001b292:	83 ec 0c             	sub    esp,0xc
c001b295:	68 18 f8 01 c0       	push   0xc001f818
c001b29a:	e9 58 ff ff ff       	jmp    c001b1f7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20f>
c001b29f:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001b2a4:	74 17                	je     c001b2bd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001b2a6:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001b2ab:	74 10                	je     c001b2bd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001b2ad:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001b2b3:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001b2b7:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001b2bb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b2bd:	31 c0                	xor    eax,eax
c001b2bf:	83 c4 2c             	add    esp,0x2c
c001b2c2:	5b                   	pop    ebx
c001b2c3:	5e                   	pop    esi
c001b2c4:	5f                   	pop    edi
c001b2c5:	5d                   	pop    ebp
c001b2c6:	c3                   	ret    
c001b2c7:	90                   	nop

c001b2c8 <SATAPI::eject()>:
c001b2c8:	57                   	push   edi
c001b2c9:	b9 03 00 00 00       	mov    ecx,0x3
c001b2ce:	83 ec 18             	sub    esp,0x18
c001b2d1:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b2d5:	fc                   	cld    
c001b2d6:	31 c0                	xor    eax,eax
c001b2d8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b2da:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001b2df:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001b2e4:	50                   	push   eax
c001b2e5:	6a 00                	push   0x0
c001b2e7:	6a 00                	push   0x0
c001b2e9:	6a 00                	push   0x0
c001b2eb:	6a 00                	push   0x0
c001b2ed:	6a 02                	push   0x2
c001b2ef:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b2f3:	50                   	push   eax
c001b2f4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b2f8:	e8 eb fc ff ff       	call   c001afe8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b2fd:	31 c0                	xor    eax,eax
c001b2ff:	83 c4 38             	add    esp,0x38
c001b302:	5f                   	pop    edi
c001b303:	c3                   	ret    

c001b304 <SATAPI::detectMedia()>:
c001b304:	53                   	push   ebx
c001b305:	83 ec 14             	sub    esp,0x14
c001b308:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b30c:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001b312:	e8 bd 21 ff ff       	call   c000d4d4 <VCache::writeWriteBuffer()>
c001b317:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001b31d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b321:	83 c4 18             	add    esp,0x18
c001b324:	5b                   	pop    ebx
c001b325:	e9 9a 21 ff ff       	jmp    c000d4c4 <VCache::invalidateReadBuffer()>

c001b32a <SATAPI::open(int, int, void*)>:
c001b32a:	56                   	push   esi
c001b32b:	53                   	push   ebx
c001b32c:	51                   	push   ecx
c001b32d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b331:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b335:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001b33f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001b345:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001b34f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b353:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001b35d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001b363:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001b36a:	e8 46 c7 fe ff       	call   c0007ab5 <Phys::allocatePage()>
c001b36f:	89 c6                	mov    esi,eax
c001b371:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001b377:	81 c6 00 10 00 00    	add    esi,0x1000
c001b37d:	e8 33 c7 fe ff       	call   c0007ab5 <Phys::allocatePage()>
c001b382:	39 c6                	cmp    esi,eax
c001b384:	74 10                	je     c001b396 <SATAPI::open(int, int, void*)+0x6c>
c001b386:	83 ec 0c             	sub    esp,0xc
c001b389:	68 2d f8 01 c0       	push   0xc001f82d
c001b38e:	e8 d0 4d ff ff       	call   c0010163 <KePanic(char const*)>
c001b393:	83 c4 10             	add    esp,0x10
c001b396:	83 ec 0c             	sub    esp,0xc
c001b399:	6a 02                	push   0x2
c001b39b:	e8 05 df fe ff       	call   c00092a5 <Virt::allocateKernelVirtualPages(int)>
c001b3a0:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001b3a6:	6a 03                	push   0x3
c001b3a8:	50                   	push   eax
c001b3a9:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001b3af:	ff 35 50 0e 02 c0    	push   DWORD PTR ds:0xc0020e50
c001b3b5:	e8 80 e5 fe ff       	call   c000993a <VAS::mapPage(unsigned long, unsigned long, int)>
c001b3ba:	83 c4 14             	add    esp,0x14
c001b3bd:	68 74 01 00 00       	push   0x174
c001b3c2:	e8 f2 c3 fe ff       	call   c00077b9 <malloc>
c001b3c7:	83 c4 0c             	add    esp,0xc
c001b3ca:	89 c6                	mov    esi,eax
c001b3cc:	6a 00                	push   0x0
c001b3ce:	68 ff ff ff 7f       	push   0x7fffffff
c001b3d3:	6a 00                	push   0x0
c001b3d5:	6a 00                	push   0x0
c001b3d7:	53                   	push   ebx
c001b3d8:	68 43 f8 01 c0       	push   0xc001f843
c001b3dd:	50                   	push   eax
c001b3de:	e8 f7 15 ff ff       	call   c000c9da <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001b3e3:	83 c4 14             	add    esp,0x14
c001b3e6:	56                   	push   esi
c001b3e7:	e8 a4 16 ff ff       	call   c000ca90 <LogicalDisk::assignDriveLetter()>
c001b3ec:	5a                   	pop    edx
c001b3ed:	0f be c0             	movsx  eax,al
c001b3f0:	59                   	pop    ecx
c001b3f1:	50                   	push   eax
c001b3f2:	68 90 f6 01 c0       	push   0xc001f690
c001b3f7:	e8 fc f0 fe ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c001b3fc:	58                   	pop    eax
c001b3fd:	5a                   	pop    edx
c001b3fe:	56                   	push   esi
c001b3ff:	53                   	push   ebx
c001b400:	e8 33 05 ff ff       	call   c000b938 <Device::addChild(Device*)>
c001b405:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001b40b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b40e:	e8 5b 09 ff ff       	call   c000bd6e <PhysicalDisk::startCache()>
c001b413:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001b41a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b41d:	e8 e2 fe ff ff       	call   c001b304 <SATAPI::detectMedia()>
c001b422:	83 c4 14             	add    esp,0x14
c001b425:	31 c0                	xor    eax,eax
c001b427:	5b                   	pop    ebx
c001b428:	5e                   	pop    esi
c001b429:	c3                   	ret    

c001b42a <SATAPI::read(unsigned long long, int, void*)>:
c001b42a:	57                   	push   edi
c001b42b:	56                   	push   esi
c001b42c:	53                   	push   ebx
c001b42d:	83 ec 3c             	sub    esp,0x3c
c001b430:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b434:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001b438:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001b43c:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001b440:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b444:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b448:	68 51 f8 01 c0       	push   0xc001f851
c001b44d:	e8 a6 f0 fe ff       	call   c000a4f8 <Dbg::kprintf(char const*, ...)>
c001b452:	83 c4 10             	add    esp,0x10
c001b455:	83 fe 04             	cmp    esi,0x4
c001b458:	7e 10                	jle    c001b46a <SATAPI::read(unsigned long long, int, void*)+0x40>
c001b45a:	83 ec 0c             	sub    esp,0xc
c001b45d:	68 62 f8 01 c0       	push   0xc001f862
c001b462:	e8 fc 4c ff ff       	call   c0010163 <KePanic(char const*)>
c001b467:	83 c4 10             	add    esp,0x10
c001b46a:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001b470:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001b476:	51                   	push   ecx
c001b477:	50                   	push   eax
c001b478:	83 c0 02             	add    eax,0x2
c001b47b:	c1 e0 07             	shl    eax,0x7
c001b47e:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001b484:	50                   	push   eax
c001b485:	52                   	push   edx
c001b486:	e8 09 e9 ff ff       	call   c0019d94 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b48b:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001b48f:	b9 03 00 00 00       	mov    ecx,0x3
c001b494:	fc                   	cld    
c001b495:	31 c0                	xor    eax,eax
c001b497:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b499:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001b49e:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001b4a3:	83 c4 0c             	add    esp,0xc
c001b4a6:	6a 00                	push   0x0
c001b4a8:	6a 00                	push   0x0
c001b4aa:	6a 00                	push   0x0
c001b4ac:	6a 00                	push   0x0
c001b4ae:	6a 02                	push   0x2
c001b4b0:	8d 44 24 30          	lea    eax,[esp+0x30]
c001b4b4:	50                   	push   eax
c001b4b5:	53                   	push   ebx
c001b4b6:	e8 2d fb ff ff       	call   c001afe8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b4bb:	83 c4 20             	add    esp,0x20
c001b4be:	85 c0                	test   eax,eax
c001b4c0:	75 44                	jne    c001b506 <SATAPI::read(unsigned long long, int, void*)+0xdc>
c001b4c2:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001b4c6:	b9 03 00 00 00       	mov    ecx,0x3
c001b4cb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b4cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b4d1:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001b4d6:	0f c8                	bswap  eax
c001b4d8:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001b4dc:	89 f0                	mov    eax,esi
c001b4de:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b4e2:	50                   	push   eax
c001b4e3:	56                   	push   esi
c001b4e4:	c1 e6 0b             	shl    esi,0xb
c001b4e7:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b4eb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b4ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b4f3:	56                   	push   esi
c001b4f4:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001b4f8:	50                   	push   eax
c001b4f9:	53                   	push   ebx
c001b4fa:	e8 e9 fa ff ff       	call   c001afe8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b4ff:	83 c4 20             	add    esp,0x20
c001b502:	85 c0                	test   eax,eax
c001b504:	74 14                	je     c001b51a <SATAPI::read(unsigned long long, int, void*)+0xf0>
c001b506:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b50a:	83 ec 0c             	sub    esp,0xc
c001b50d:	53                   	push   ebx
c001b50e:	e8 f1 fd ff ff       	call   c001b304 <SATAPI::detectMedia()>
c001b513:	83 c4 10             	add    esp,0x10
c001b516:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b51a:	83 c4 30             	add    esp,0x30
c001b51d:	5b                   	pop    ebx
c001b51e:	5e                   	pop    esi
c001b51f:	5f                   	pop    edi
c001b520:	c3                   	ret    
c001b521:	90                   	nop

c001b522 <IOAPIC::close(int, int, void*)>:
c001b522:	b8 00 00 00 00       	mov    eax,0x0
c001b527:	c3                   	ret    

c001b528 <apicGetBase()>:
c001b528:	55                   	push   ebp
c001b529:	89 e5                	mov    ebp,esp
c001b52b:	83 ec 18             	sub    esp,0x18
c001b52e:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c001b533:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001b539:	83 e0 08             	and    eax,0x8
c001b53c:	84 c0                	test   al,al
c001b53e:	75 07                	jne    c001b547 <apicGetBase()+0x1f>
c001b540:	b8 00 00 00 00       	mov    eax,0x0
c001b545:	eb 21                	jmp    c001b568 <apicGetBase()+0x40>
c001b547:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c001b54c:	83 ec 08             	sub    esp,0x8
c001b54f:	6a 1b                	push   0x1b
c001b551:	50                   	push   eax
c001b552:	e8 9b b8 fe ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c001b557:	83 c4 10             	add    esp,0x10
c001b55a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b55d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001b560:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b563:	25 00 00 ff ff       	and    eax,0xffff0000
c001b568:	c9                   	leave  
c001b569:	c3                   	ret    

c001b56a <IOAPIC::IOAPIC()>:
c001b56a:	83 ec 0c             	sub    esp,0xc
c001b56d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b571:	83 ec 08             	sub    esp,0x8
c001b574:	68 c4 f8 01 c0       	push   0xc001f8c4
c001b579:	50                   	push   eax
c001b57a:	e8 51 05 ff ff       	call   c000bad0 <Device::Device(char const*)>
c001b57f:	83 c4 10             	add    esp,0x10
c001b582:	ba d4 f8 01 c0       	mov    edx,0xc001f8d4
c001b587:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b58b:	89 10                	mov    DWORD PTR [eax],edx
c001b58d:	90                   	nop
c001b58e:	83 c4 0c             	add    esp,0xc
c001b591:	c3                   	ret    

c001b592 <apicOpen()>:
c001b592:	55                   	push   ebp
c001b593:	89 e5                	mov    ebp,esp
c001b595:	53                   	push   ebx
c001b596:	83 ec 34             	sub    esp,0x34
c001b599:	a0 40 4a 02 c0       	mov    al,ds:0xc0024a40
c001b59e:	83 f0 01             	xor    eax,0x1
c001b5a1:	84 c0                	test   al,al
c001b5a3:	0f 84 9d 00 00 00    	je     c001b646 <apicOpen()+0xb4>
c001b5a9:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001b5ad:	a0 20 36 02 c0       	mov    al,ds:0xc0023620
c001b5b2:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001b5b5:	0f 83 84 00 00 00    	jae    c001b63f <apicOpen()+0xad>
c001b5bb:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001b5c2:	83 ec 0c             	sub    esp,0xc
c001b5c5:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001b5c8:	e8 ec c1 fe ff       	call   c00077b9 <malloc>
c001b5cd:	83 c4 10             	add    esp,0x10
c001b5d0:	89 c3                	mov    ebx,eax
c001b5d2:	83 ec 0c             	sub    esp,0xc
c001b5d5:	53                   	push   ebx
c001b5d6:	e8 8f ff ff ff       	call   c001b56a <IOAPIC::IOAPIC()>
c001b5db:	83 c4 10             	add    esp,0x10
c001b5de:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001b5e1:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b5e4:	25 ff 00 00 00       	and    eax,0xff
c001b5e9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001b5ec:	89 14 85 20 4a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb5e0],edx
c001b5f3:	a1 00 4a 02 c0       	mov    eax,ds:0xc0024a00
c001b5f8:	40                   	inc    eax
c001b5f9:	a3 00 4a 02 c0       	mov    ds:0xc0024a00,eax
c001b5fe:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c001b603:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001b609:	83 ec 08             	sub    esp,0x8
c001b60c:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b60f:	50                   	push   eax
c001b610:	e8 23 03 ff ff       	call   c000b938 <Device::addChild(Device*)>
c001b615:	83 c4 10             	add    esp,0x10
c001b618:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b61b:	8b 00                	mov    eax,DWORD PTR [eax]
c001b61d:	83 c0 08             	add    eax,0x8
c001b620:	8b 10                	mov    edx,DWORD PTR [eax]
c001b622:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b625:	25 ff 00 00 00       	and    eax,0xff
c001b62a:	6a 00                	push   0x0
c001b62c:	6a 00                	push   0x0
c001b62e:	50                   	push   eax
c001b62f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b632:	ff d2                	call   edx
c001b634:	83 c4 10             	add    esp,0x10
c001b637:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001b63a:	e9 6e ff ff ff       	jmp    c001b5ad <apicOpen()+0x1b>
c001b63f:	c6 05 40 4a 02 c0 01 	mov    BYTE PTR ds:0xc0024a40,0x1
c001b646:	e8 dd fe ff ff       	call   c001b528 <apicGetBase()>
c001b64b:	05 f0 00 00 00       	add    eax,0xf0
c001b650:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b653:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b656:	8b 00                	mov    eax,DWORD PTR [eax]
c001b658:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001b65b:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001b662:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001b669:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b66c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001b66f:	89 10                	mov    DWORD PTR [eax],edx
c001b671:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001b678:	a1 70 35 02 c0       	mov    eax,ds:0xc0023570
c001b67d:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001b680:	7d 70                	jge    c001b6f2 <apicOpen()+0x160>
c001b682:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b685:	8b 04 85 80 35 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdca80]
c001b68c:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001b68f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b692:	8b 04 85 80 35 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdca80]
c001b699:	c1 e8 08             	shr    eax,0x8
c001b69c:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001b6a0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b6a3:	8b 04 85 80 35 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdca80]
c001b6aa:	c1 e8 18             	shr    eax,0x18
c001b6ad:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001b6b0:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001b6b4:	75 37                	jne    c001b6ed <apicOpen()+0x15b>
c001b6b6:	e8 6d fe ff ff       	call   c001b528 <apicGetBase()>
c001b6bb:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001b6bf:	75 07                	jne    c001b6c8 <apicOpen()+0x136>
c001b6c1:	ba 60 03 00 00       	mov    edx,0x360
c001b6c6:	eb 05                	jmp    c001b6cd <apicOpen()+0x13b>
c001b6c8:	ba 50 03 00 00       	mov    edx,0x350
c001b6cd:	01 d0                	add    eax,edx
c001b6cf:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b6d2:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b6d5:	8b 00                	mov    eax,DWORD PTR [eax]
c001b6d7:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001b6da:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001b6e1:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001b6e5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b6e8:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001b6eb:	89 10                	mov    DWORD PTR [eax],edx
c001b6ed:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001b6f0:	eb 86                	jmp    c001b678 <apicOpen()+0xe6>
c001b6f2:	90                   	nop
c001b6f3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b6f6:	c9                   	leave  
c001b6f7:	c3                   	ret    

c001b6f8 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001b6f8:	55                   	push   ebp
c001b6f9:	89 e5                	mov    ebp,esp
c001b6fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6fe:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b704:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b707:	72 1d                	jb     c001b726 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b709:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b70c:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001b712:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b715:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001b71b:	01 d0                	add    eax,edx
c001b71d:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b720:	73 04                	jae    c001b726 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b722:	b0 01                	mov    al,0x1
c001b724:	eb 02                	jmp    c001b728 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001b726:	b0 00                	mov    al,0x0
c001b728:	5d                   	pop    ebp
c001b729:	c3                   	ret    

c001b72a <IOAPIC::read(int)>:
c001b72a:	55                   	push   ebp
c001b72b:	89 e5                	mov    ebp,esp
c001b72d:	83 ec 10             	sub    esp,0x10
c001b730:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b733:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b739:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b73c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b73f:	31 d2                	xor    edx,edx
c001b741:	88 c2                	mov    dl,al
c001b743:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b746:	89 10                	mov    DWORD PTR [eax],edx
c001b748:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b74b:	83 c0 10             	add    eax,0x10
c001b74e:	8b 00                	mov    eax,DWORD PTR [eax]
c001b750:	c9                   	leave  
c001b751:	c3                   	ret    

c001b752 <IOAPIC::open(int, int, void*)>:
c001b752:	55                   	push   ebp
c001b753:	89 e5                	mov    ebp,esp
c001b755:	57                   	push   edi
c001b756:	56                   	push   esi
c001b757:	53                   	push   ebx
c001b758:	83 ec 04             	sub    esp,0x4
c001b75b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b75e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001b761:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b767:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b76a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b770:	8b 14 85 60 36 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc9a0]
c001b777:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b77a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b780:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b783:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b789:	8b 14 85 e0 36 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc920]
c001b790:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b793:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b799:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b79c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b7a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b7a5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b7ab:	89 c6                	mov    esi,eax
c001b7ad:	81 e6 ff 00 00 00    	and    esi,0xff
c001b7b3:	89 d0                	mov    eax,edx
c001b7b5:	ba 00 00 00 00       	mov    edx,0x0
c001b7ba:	89 c7                	mov    edi,eax
c001b7bc:	83 e7 ff             	and    edi,0xffffffff
c001b7bf:	89 f9                	mov    ecx,edi
c001b7c1:	89 d0                	mov    eax,edx
c001b7c3:	25 ff 00 00 00       	and    eax,0xff
c001b7c8:	89 c3                	mov    ebx,eax
c001b7ca:	89 c8                	mov    eax,ecx
c001b7cc:	89 da                	mov    edx,ebx
c001b7ce:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b7d1:	8d 5e 08             	lea    ebx,[esi+0x8]
c001b7d4:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001b7d8:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001b7dc:	83 e0 00             	and    eax,0x0
c001b7df:	09 d0                	or     eax,edx
c001b7e1:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001b7e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b7e8:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b7ee:	8d 50 01             	lea    edx,[eax+0x1]
c001b7f1:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b7f4:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001b7fa:	31 d2                	xor    edx,edx
c001b7fc:	88 c2                	mov    dl,al
c001b7fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b801:	83 c2 08             	add    edx,0x8
c001b804:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001b808:	81 e1 ff 00 00 00    	and    ecx,0xff
c001b80e:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001b814:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001b818:	6a 01                	push   0x1
c001b81a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b81d:	e8 08 ff ff ff       	call   c001b72a <IOAPIC::read(int)>
c001b822:	83 c4 08             	add    esp,0x8
c001b825:	c1 f8 10             	sar    eax,0x10
c001b828:	25 ff 00 00 00       	and    eax,0xff
c001b82d:	8d 50 01             	lea    edx,[eax+0x1]
c001b830:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b833:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001b839:	b8 00 00 00 00       	mov    eax,0x0
c001b83e:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b841:	5b                   	pop    ebx
c001b842:	5e                   	pop    esi
c001b843:	5f                   	pop    edi
c001b844:	5d                   	pop    ebp
c001b845:	c3                   	ret    

c001b846 <IOAPIC::write(int, int)>:
c001b846:	55                   	push   ebp
c001b847:	89 e5                	mov    ebp,esp
c001b849:	83 ec 10             	sub    esp,0x10
c001b84c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b84f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b855:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b858:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b85b:	31 d2                	xor    edx,edx
c001b85d:	88 c2                	mov    dl,al
c001b85f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b862:	89 10                	mov    DWORD PTR [eax],edx
c001b864:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b867:	8d 50 10             	lea    edx,[eax+0x10]
c001b86a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b86d:	89 02                	mov    DWORD PTR [edx],eax
c001b86f:	90                   	nop
c001b870:	c9                   	leave  
c001b871:	c3                   	ret    

c001b872 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001b872:	55                   	push   ebp
c001b873:	89 e5                	mov    ebp,esp
c001b875:	53                   	push   ebx
c001b876:	83 ec 2c             	sub    esp,0x2c
c001b879:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b87c:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001b87f:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001b882:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001b885:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001b888:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b88b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b88e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001b891:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001b894:	88 d8                	mov    al,bl
c001b896:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001b899:	88 c8                	mov    al,cl
c001b89b:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001b89e:	88 d0                	mov    al,dl
c001b8a0:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001b8a3:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b8a6:	25 ff 00 00 00       	and    eax,0xff
c001b8ab:	83 c0 08             	add    eax,0x8
c001b8ae:	01 c0                	add    eax,eax
c001b8b0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b8b3:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b8b6:	25 ff 00 00 00       	and    eax,0xff
c001b8bb:	83 c0 08             	add    eax,0x8
c001b8be:	01 c0                	add    eax,eax
c001b8c0:	40                   	inc    eax
c001b8c1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001b8c4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b8c7:	50                   	push   eax
c001b8c8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b8cb:	e8 5a fe ff ff       	call   c001b72a <IOAPIC::read(int)>
c001b8d0:	83 c4 08             	add    esp,0x8
c001b8d3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b8d6:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001b8dd:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b8e0:	c1 e0 18             	shl    eax,0x18
c001b8e3:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001b8e6:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001b8e9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b8ec:	52                   	push   edx
c001b8ed:	50                   	push   eax
c001b8ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b8f1:	e8 50 ff ff ff       	call   c001b846 <IOAPIC::write(int, int)>
c001b8f6:	83 c4 0c             	add    esp,0xc
c001b8f9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b8fc:	50                   	push   eax
c001b8fd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b900:	e8 25 fe ff ff       	call   c001b72a <IOAPIC::read(int)>
c001b905:	83 c4 08             	add    esp,0x8
c001b908:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001b90b:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001b912:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001b919:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001b920:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001b924:	74 09                	je     c001b92f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001b926:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001b92d:	eb 07                	jmp    c001b936 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001b92f:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001b936:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001b93a:	74 09                	je     c001b945 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001b93c:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001b943:	eb 07                	jmp    c001b94c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001b945:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001b94c:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001b953:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001b956:	25 ff 00 00 00       	and    eax,0xff
c001b95b:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001b95e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001b961:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b964:	52                   	push   edx
c001b965:	50                   	push   eax
c001b966:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b969:	e8 d8 fe ff ff       	call   c001b846 <IOAPIC::write(int, int)>
c001b96e:	83 c4 0c             	add    esp,0xc
c001b971:	90                   	nop
c001b972:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b975:	c9                   	leave  
c001b976:	c3                   	ret    
c001b977:	90                   	nop

c001b978 <APICTimer::close(int, int, void*)>:
c001b978:	b8 00 00 00 00       	mov    eax,0x0
c001b97d:	c3                   	ret    
c001b97e:	66 90                	xchg   ax,ax

c001b980 <apicTimerHandler(regs*, void*)>:
c001b980:	83 ec 0c             	sub    esp,0xc
c001b983:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b987:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b989:	b8 10 27 00 00       	mov    eax,0x2710
c001b98e:	ba 00 00 00 00       	mov    edx,0x0
c001b993:	f7 f1                	div    ecx
c001b995:	83 ec 0c             	sub    esp,0xc
c001b998:	50                   	push   eax
c001b999:	e8 56 18 ff ff       	call   c000d1f4 <timerHandler(unsigned int)>
c001b99e:	83 c4 10             	add    esp,0x10
c001b9a1:	90                   	nop
c001b9a2:	83 c4 0c             	add    esp,0xc
c001b9a5:	c3                   	ret    
c001b9a6:	66 90                	xchg   ax,ax

c001b9a8 <APICTimer::open(int, int, void*)>:
c001b9a8:	83 ec 0c             	sub    esp,0xc
c001b9ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9af:	8b 00                	mov    eax,DWORD PTR [eax]
c001b9b1:	83 c0 24             	add    eax,0x24
c001b9b4:	8b 00                	mov    eax,DWORD PTR [eax]
c001b9b6:	83 ec 08             	sub    esp,0x8
c001b9b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9c1:	ff d0                	call   eax
c001b9c3:	83 c4 10             	add    esp,0x10
c001b9c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9ca:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b9ce:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b9d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9d8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b9dc:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001b9e2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b9e6:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b9ec:	83 ec 0c             	sub    esp,0xc
c001b9ef:	51                   	push   ecx
c001b9f0:	6a 01                	push   0x1
c001b9f2:	68 80 b9 01 c0       	push   0xc001b980
c001b9f7:	52                   	push   edx
c001b9f8:	50                   	push   eax
c001b9f9:	e8 e6 fe fe ff       	call   c000b8e4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b9fe:	83 c4 20             	add    esp,0x20
c001ba01:	89 c2                	mov    edx,eax
c001ba03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba07:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ba0d:	b8 00 00 00 00       	mov    eax,0x0
c001ba12:	83 c4 0c             	add    esp,0xc
c001ba15:	c3                   	ret    
c001ba16:	66 90                	xchg   ax,ax

c001ba18 <APICTimer::write(int)>:
c001ba18:	83 ec 0c             	sub    esp,0xc
c001ba1b:	83 ec 0c             	sub    esp,0xc
c001ba1e:	68 f8 f8 01 c0       	push   0xc001f8f8
c001ba23:	e8 3b 47 ff ff       	call   c0010163 <KePanic(char const*)>
c001ba28:	83 c4 10             	add    esp,0x10
c001ba2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba2f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ba33:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ba39:	90                   	nop
c001ba3a:	83 c4 0c             	add    esp,0xc
c001ba3d:	c3                   	ret    
c001ba3e:	66 90                	xchg   ax,ax

c001ba40 <APICTimer::APICTimer()>:
c001ba40:	83 ec 0c             	sub    esp,0xc
c001ba43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba47:	83 ec 08             	sub    esp,0x8
c001ba4a:	68 08 f9 01 c0       	push   0xc001f908
c001ba4f:	50                   	push   eax
c001ba50:	e8 d3 16 ff ff       	call   c000d128 <Timer::Timer(char const*)>
c001ba55:	83 c4 10             	add    esp,0x10
c001ba58:	ba 1c f9 01 c0       	mov    edx,0xc001f91c
c001ba5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba61:	89 10                	mov    DWORD PTR [eax],edx
c001ba63:	90                   	nop
c001ba64:	83 c4 0c             	add    esp,0xc
c001ba67:	c3                   	ret    

c001ba68 <PIT::write(int)>:
c001ba68:	83 ec 10             	sub    esp,0x10
c001ba6b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ba6f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ba73:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ba79:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ba7d:	a3 44 4a 02 c0       	mov    ds:0xc0024a44,eax
c001ba82:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ba87:	99                   	cdq    
c001ba88:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001ba8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ba90:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001ba97:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001ba9c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001baa0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001baa5:	ee                   	out    dx,al
c001baa6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001baaa:	25 ff 00 00 00       	and    eax,0xff
c001baaf:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001bab6:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001baba:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001babe:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001bac3:	ee                   	out    dx,al
c001bac4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bac8:	c1 f8 08             	sar    eax,0x8
c001bacb:	25 ff 00 00 00       	and    eax,0xff
c001bad0:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001bad7:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001badb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001badf:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001bae4:	ee                   	out    dx,al
c001bae5:	90                   	nop
c001bae6:	83 c4 10             	add    esp,0x10
c001bae9:	c3                   	ret    
c001baea:	66 90                	xchg   ax,ax

c001baec <pitHandler(regs*, void*)>:
c001baec:	83 ec 0c             	sub    esp,0xc
c001baef:	8b 0d 44 4a 02 c0    	mov    ecx,DWORD PTR ds:0xc0024a44
c001baf5:	b8 10 27 00 00       	mov    eax,0x2710
c001bafa:	99                   	cdq    
c001bafb:	f7 f9                	idiv   ecx
c001bafd:	83 ec 0c             	sub    esp,0xc
c001bb00:	50                   	push   eax
c001bb01:	e8 ee 16 ff ff       	call   c000d1f4 <timerHandler(unsigned int)>
c001bb06:	83 c4 10             	add    esp,0x10
c001bb09:	90                   	nop
c001bb0a:	83 c4 0c             	add    esp,0xc
c001bb0d:	c3                   	ret    
c001bb0e:	66 90                	xchg   ax,ax

c001bb10 <PIT::open(int, int, void*)>:
c001bb10:	83 ec 0c             	sub    esp,0xc
c001bb13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb17:	8b 00                	mov    eax,DWORD PTR [eax]
c001bb19:	83 c0 24             	add    eax,0x24
c001bb1c:	8b 00                	mov    eax,DWORD PTR [eax]
c001bb1e:	83 ec 08             	sub    esp,0x8
c001bb21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bb25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bb29:	ff d0                	call   eax
c001bb2b:	83 c4 10             	add    esp,0x10
c001bb2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb32:	83 ec 0c             	sub    esp,0xc
c001bb35:	6a 00                	push   0x0
c001bb37:	6a 01                	push   0x1
c001bb39:	68 ec ba 01 c0       	push   0xc001baec
c001bb3e:	6a 00                	push   0x0
c001bb40:	50                   	push   eax
c001bb41:	e8 9e fd fe ff       	call   c000b8e4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bb46:	83 c4 20             	add    esp,0x20
c001bb49:	89 c2                	mov    edx,eax
c001bb4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb4f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001bb55:	b8 00 00 00 00       	mov    eax,0x0
c001bb5a:	83 c4 0c             	add    esp,0xc
c001bb5d:	c3                   	ret    
c001bb5e:	66 90                	xchg   ax,ax

c001bb60 <PIT::close(int, int, void*)>:
c001bb60:	83 ec 0c             	sub    esp,0xc
c001bb63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb67:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001bb71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb75:	6a 01                	push   0x1
c001bb77:	68 ec ba 01 c0       	push   0xc001baec
c001bb7c:	6a 00                	push   0x0
c001bb7e:	50                   	push   eax
c001bb7f:	e8 96 fd fe ff       	call   c000b91a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001bb84:	83 c4 10             	add    esp,0x10
c001bb87:	b8 00 00 00 00       	mov    eax,0x0
c001bb8c:	83 c4 0c             	add    esp,0xc
c001bb8f:	c3                   	ret    

c001bb90 <PIT::PIT()>:
c001bb90:	83 ec 0c             	sub    esp,0xc
c001bb93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb97:	83 ec 08             	sub    esp,0x8
c001bb9a:	68 44 f9 01 c0       	push   0xc001f944
c001bb9f:	50                   	push   eax
c001bba0:	e8 83 15 ff ff       	call   c000d128 <Timer::Timer(char const*)>
c001bba5:	83 c4 10             	add    esp,0x10
c001bba8:	ba 6c f9 01 c0       	mov    edx,0xc001f96c
c001bbad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbb1:	89 10                	mov    DWORD PTR [eax],edx
c001bbb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbb7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bbbd:	31 d2                	xor    edx,edx
c001bbbf:	88 c2                	mov    dl,al
c001bbc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbc5:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001bbcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbd0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bbd6:	31 d2                	xor    edx,edx
c001bbd8:	88 c2                	mov    dl,al
c001bbda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbde:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001bbe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbe7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bbed:	8d 50 01             	lea    edx,[eax+0x1]
c001bbf0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bbf4:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001bbfa:	31 d2                	xor    edx,edx
c001bbfc:	88 c2                	mov    dl,al
c001bbfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc02:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001bc06:	83 e1 3f             	and    ecx,0x3f
c001bc09:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001bc0d:	90                   	nop
c001bc0e:	83 c4 0c             	add    esp,0xc
c001bc11:	c3                   	ret    
c001bc12:	66 90                	xchg   ax,ax
c001bc14:	66 90                	xchg   ax,ax
c001bc16:	66 90                	xchg   ax,ax
c001bc18:	66 90                	xchg   ax,ax
c001bc1a:	66 90                	xchg   ax,ax
c001bc1c:	66 90                	xchg   ax,ax
c001bc1e:	66 90                	xchg   ax,ax

c001bc20 <avxDetect>:
c001bc20:	b8 01 00 00 00       	mov    eax,0x1
c001bc25:	0f a2                	cpuid  
c001bc27:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001bc2d:	74 15                	je     c001bc44 <avxDetect.noAVX>
c001bc2f:	b8 01 00 00 00       	mov    eax,0x1
c001bc34:	0f a2                	cpuid  
c001bc36:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001bc3c:	74 06                	je     c001bc44 <avxDetect.noAVX>
c001bc3e:	b8 01 00 00 00       	mov    eax,0x1
c001bc43:	c3                   	ret    

c001bc44 <avxDetect.noAVX>:
c001bc44:	b8 00 00 00 00       	mov    eax,0x0
c001bc49:	c3                   	ret    

c001bc4a <avxSave>:
c001bc4a:	53                   	push   ebx
c001bc4b:	52                   	push   edx
c001bc4c:	31 c0                	xor    eax,eax
c001bc4e:	48                   	dec    eax
c001bc4f:	89 c2                	mov    edx,eax
c001bc51:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bc55:	0f ae 23             	xsave  [ebx]
c001bc58:	5a                   	pop    edx
c001bc59:	5b                   	pop    ebx
c001bc5a:	c3                   	ret    

c001bc5b <avxLoad>:
c001bc5b:	53                   	push   ebx
c001bc5c:	52                   	push   edx
c001bc5d:	31 c0                	xor    eax,eax
c001bc5f:	48                   	dec    eax
c001bc60:	89 c2                	mov    edx,eax
c001bc62:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bc66:	0f ae 2b             	xrstor [ebx]
c001bc69:	5a                   	pop    edx
c001bc6a:	5b                   	pop    ebx
c001bc6b:	c3                   	ret    

c001bc6c <avxInit>:
c001bc6c:	e8 57 02 00 00       	call   c001bec8 <sseInit>
c001bc71:	50                   	push   eax
c001bc72:	51                   	push   ecx
c001bc73:	0f 20 e0             	mov    eax,cr4
c001bc76:	0d 00 00 04 00       	or     eax,0x40000
c001bc7b:	0f 22 e0             	mov    cr4,eax
c001bc7e:	31 c9                	xor    ecx,ecx
c001bc80:	0f 01 d0             	xgetbv 
c001bc83:	0d 07 00 00 00       	or     eax,0x7
c001bc88:	0f 01 d1             	xsetbv 
c001bc8b:	59                   	pop    ecx
c001bc8c:	58                   	pop    eax
c001bc8d:	c3                   	ret    

c001bc8e <avxClose>:
c001bc8e:	c3                   	ret    

c001bc8f <wouldSheSayYes>:
c001bc8f:	c3                   	ret    
c001bc90:	49                   	dec    ecx
c001bc91:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001bc95:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001bc99:	75 20                	jne    c001bcbb <isr0+0xb>
c001bc9b:	4e                   	dec    esi
c001bc9c:	79 61                	jns    c001bcff <isr7+0x3>
c001bc9e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001bca3:	66 90                	xchg   ax,ax
c001bca5:	66 90                	xchg   ax,ax
c001bca7:	66 90                	xchg   ax,ax
c001bca9:	66 90                	xchg   ax,ax
c001bcab:	66 90                	xchg   ax,ax
c001bcad:	66 90                	xchg   ax,ax
c001bcaf:	90                   	nop

c001bcb0 <isr0>:
c001bcb0:	fa                   	cli    
c001bcb1:	68 00 00 00 00       	push   0x0
c001bcb6:	68 00 00 00 00       	push   0x0
c001bcbb:	e9 44 01 00 00       	jmp    c001be04 <int_common_stub>

c001bcc0 <isr1>:
c001bcc0:	fa                   	cli    
c001bcc1:	6a 00                	push   0x0
c001bcc3:	6a 01                	push   0x1
c001bcc5:	e9 3a 01 00 00       	jmp    c001be04 <int_common_stub>

c001bcca <isr2>:
c001bcca:	fa                   	cli    
c001bccb:	6a 00                	push   0x0
c001bccd:	6a 02                	push   0x2
c001bccf:	e9 30 01 00 00       	jmp    c001be04 <int_common_stub>

c001bcd4 <isr3>:
c001bcd4:	fa                   	cli    
c001bcd5:	6a 00                	push   0x0
c001bcd7:	6a 03                	push   0x3
c001bcd9:	e9 26 01 00 00       	jmp    c001be04 <int_common_stub>

c001bcde <isr4>:
c001bcde:	fa                   	cli    
c001bcdf:	6a 00                	push   0x0
c001bce1:	6a 04                	push   0x4
c001bce3:	e9 1c 01 00 00       	jmp    c001be04 <int_common_stub>

c001bce8 <isr5>:
c001bce8:	fa                   	cli    
c001bce9:	6a 00                	push   0x0
c001bceb:	6a 05                	push   0x5
c001bced:	e9 12 01 00 00       	jmp    c001be04 <int_common_stub>

c001bcf2 <isr6>:
c001bcf2:	fa                   	cli    
c001bcf3:	6a 00                	push   0x0
c001bcf5:	6a 06                	push   0x6
c001bcf7:	e9 08 01 00 00       	jmp    c001be04 <int_common_stub>

c001bcfc <isr7>:
c001bcfc:	fa                   	cli    
c001bcfd:	6a 00                	push   0x0
c001bcff:	6a 07                	push   0x7
c001bd01:	e9 fe 00 00 00       	jmp    c001be04 <int_common_stub>

c001bd06 <isr8>:
c001bd06:	fa                   	cli    
c001bd07:	6a 08                	push   0x8
c001bd09:	e9 f6 00 00 00       	jmp    c001be04 <int_common_stub>

c001bd0e <isr9>:
c001bd0e:	fa                   	cli    
c001bd0f:	6a 00                	push   0x0
c001bd11:	6a 09                	push   0x9
c001bd13:	e9 ec 00 00 00       	jmp    c001be04 <int_common_stub>

c001bd18 <isr10>:
c001bd18:	fa                   	cli    
c001bd19:	6a 0a                	push   0xa
c001bd1b:	e9 e4 00 00 00       	jmp    c001be04 <int_common_stub>

c001bd20 <isr11>:
c001bd20:	fa                   	cli    
c001bd21:	6a 0b                	push   0xb
c001bd23:	e9 dc 00 00 00       	jmp    c001be04 <int_common_stub>

c001bd28 <isr12>:
c001bd28:	fa                   	cli    
c001bd29:	6a 0c                	push   0xc
c001bd2b:	e9 d4 00 00 00       	jmp    c001be04 <int_common_stub>

c001bd30 <isr13>:
c001bd30:	fa                   	cli    
c001bd31:	6a 0d                	push   0xd
c001bd33:	e9 cc 00 00 00       	jmp    c001be04 <int_common_stub>

c001bd38 <isr14>:
c001bd38:	fa                   	cli    
c001bd39:	6a 0e                	push   0xe
c001bd3b:	e9 c4 00 00 00       	jmp    c001be04 <int_common_stub>

c001bd40 <isr15>:
c001bd40:	fa                   	cli    
c001bd41:	6a 00                	push   0x0
c001bd43:	6a 0f                	push   0xf
c001bd45:	e9 ba 00 00 00       	jmp    c001be04 <int_common_stub>

c001bd4a <isr16>:
c001bd4a:	fa                   	cli    
c001bd4b:	6a 00                	push   0x0
c001bd4d:	6a 10                	push   0x10
c001bd4f:	e9 b0 00 00 00       	jmp    c001be04 <int_common_stub>

c001bd54 <isr17>:
c001bd54:	fa                   	cli    
c001bd55:	6a 00                	push   0x0
c001bd57:	6a 11                	push   0x11
c001bd59:	e9 a6 00 00 00       	jmp    c001be04 <int_common_stub>

c001bd5e <isr18>:
c001bd5e:	fa                   	cli    
c001bd5f:	6a 00                	push   0x0
c001bd61:	6a 12                	push   0x12
c001bd63:	e9 9c 00 00 00       	jmp    c001be04 <int_common_stub>

c001bd68 <irq3>:
c001bd68:	fa                   	cli    
c001bd69:	6a 00                	push   0x0
c001bd6b:	6a 23                	push   0x23
c001bd6d:	e9 92 00 00 00       	jmp    c001be04 <int_common_stub>

c001bd72 <irq4>:
c001bd72:	fa                   	cli    
c001bd73:	6a 00                	push   0x0
c001bd75:	6a 24                	push   0x24
c001bd77:	e9 88 00 00 00       	jmp    c001be04 <int_common_stub>

c001bd7c <irq5>:
c001bd7c:	fa                   	cli    
c001bd7d:	6a 00                	push   0x0
c001bd7f:	6a 25                	push   0x25
c001bd81:	e9 7e 00 00 00       	jmp    c001be04 <int_common_stub>

c001bd86 <irq6>:
c001bd86:	fa                   	cli    
c001bd87:	6a 00                	push   0x0
c001bd89:	6a 26                	push   0x26
c001bd8b:	e9 74 00 00 00       	jmp    c001be04 <int_common_stub>

c001bd90 <irq7>:
c001bd90:	fa                   	cli    
c001bd91:	6a 00                	push   0x0
c001bd93:	6a 27                	push   0x27
c001bd95:	e9 6a 00 00 00       	jmp    c001be04 <int_common_stub>

c001bd9a <irq8>:
c001bd9a:	fa                   	cli    
c001bd9b:	6a 00                	push   0x0
c001bd9d:	6a 28                	push   0x28
c001bd9f:	e9 60 00 00 00       	jmp    c001be04 <int_common_stub>

c001bda4 <irq9>:
c001bda4:	fa                   	cli    
c001bda5:	6a 00                	push   0x0
c001bda7:	6a 29                	push   0x29
c001bda9:	e9 56 00 00 00       	jmp    c001be04 <int_common_stub>

c001bdae <irq10>:
c001bdae:	fa                   	cli    
c001bdaf:	6a 00                	push   0x0
c001bdb1:	6a 2a                	push   0x2a
c001bdb3:	e9 4c 00 00 00       	jmp    c001be04 <int_common_stub>

c001bdb8 <irq11>:
c001bdb8:	fa                   	cli    
c001bdb9:	6a 00                	push   0x0
c001bdbb:	6a 2b                	push   0x2b
c001bdbd:	e9 42 00 00 00       	jmp    c001be04 <int_common_stub>

c001bdc2 <irq12>:
c001bdc2:	fa                   	cli    
c001bdc3:	6a 00                	push   0x0
c001bdc5:	6a 2c                	push   0x2c
c001bdc7:	e9 38 00 00 00       	jmp    c001be04 <int_common_stub>

c001bdcc <irq13>:
c001bdcc:	fa                   	cli    
c001bdcd:	6a 00                	push   0x0
c001bdcf:	6a 2d                	push   0x2d
c001bdd1:	e9 2e 00 00 00       	jmp    c001be04 <int_common_stub>

c001bdd6 <irq14>:
c001bdd6:	fa                   	cli    
c001bdd7:	6a 00                	push   0x0
c001bdd9:	6a 2e                	push   0x2e
c001bddb:	e9 24 00 00 00       	jmp    c001be04 <int_common_stub>

c001bde0 <irq15>:
c001bde0:	fa                   	cli    
c001bde1:	6a 00                	push   0x0
c001bde3:	6a 2f                	push   0x2f
c001bde5:	e9 1a 00 00 00       	jmp    c001be04 <int_common_stub>

c001bdea <irq1>:
c001bdea:	fa                   	cli    
c001bdeb:	6a 00                	push   0x0
c001bded:	6a 21                	push   0x21
c001bdef:	eb 13                	jmp    c001be04 <int_common_stub>

c001bdf1 <irq2>:
c001bdf1:	fa                   	cli    
c001bdf2:	6a 00                	push   0x0
c001bdf4:	6a 22                	push   0x22
c001bdf6:	eb 0c                	jmp    c001be04 <int_common_stub>

c001bdf8 <isr96>:
c001bdf8:	6a 00                	push   0x0
c001bdfa:	6a 60                	push   0x60
c001bdfc:	fb                   	sti    
c001bdfd:	eb 05                	jmp    c001be04 <int_common_stub>

c001bdff <irq0>:
c001bdff:	fa                   	cli    
c001be00:	6a 00                	push   0x0
c001be02:	6a 20                	push   0x20

c001be04 <int_common_stub>:
c001be04:	60                   	pusha  
c001be05:	1e                   	push   ds
c001be06:	06                   	push   es
c001be07:	0f a0                	push   fs
c001be09:	0f a8                	push   gs
c001be0b:	66 b8 10 00          	mov    ax,0x10
c001be0f:	66 8e d8             	mov    ds,ax
c001be12:	66 8e c0             	mov    es,ax
c001be15:	66 8e e0             	mov    fs,ax
c001be18:	66 8e e8             	mov    gs,ax
c001be1b:	54                   	push   esp
c001be1c:	fc                   	cld    
c001be1d:	e8 c2 ff fe ff       	call   c000bde4 <int_handler>
c001be22:	81 c4 04 00 00 00    	add    esp,0x4
c001be28:	0f a9                	pop    gs
c001be2a:	0f a1                	pop    fs
c001be2c:	07                   	pop    es
c001be2d:	1f                   	pop    ds
c001be2e:	61                   	popa   
c001be2f:	81 c4 08 00 00 00    	add    esp,0x8
c001be35:	cf                   	iret   

c001be36 <irq16>:
c001be36:	fa                   	cli    
c001be37:	6a 00                	push   0x0
c001be39:	6a 30                	push   0x30
c001be3b:	e9 c4 ff ff ff       	jmp    c001be04 <int_common_stub>

c001be40 <irq17>:
c001be40:	fa                   	cli    
c001be41:	6a 00                	push   0x0
c001be43:	6a 31                	push   0x31
c001be45:	e9 ba ff ff ff       	jmp    c001be04 <int_common_stub>

c001be4a <irq18>:
c001be4a:	fa                   	cli    
c001be4b:	6a 00                	push   0x0
c001be4d:	6a 32                	push   0x32
c001be4f:	e9 b0 ff ff ff       	jmp    c001be04 <int_common_stub>

c001be54 <irq19>:
c001be54:	fa                   	cli    
c001be55:	6a 00                	push   0x0
c001be57:	6a 33                	push   0x33
c001be59:	e9 a6 ff ff ff       	jmp    c001be04 <int_common_stub>

c001be5e <irq20>:
c001be5e:	fa                   	cli    
c001be5f:	6a 00                	push   0x0
c001be61:	6a 34                	push   0x34
c001be63:	e9 9c ff ff ff       	jmp    c001be04 <int_common_stub>

c001be68 <irq21>:
c001be68:	fa                   	cli    
c001be69:	6a 00                	push   0x0
c001be6b:	6a 35                	push   0x35
c001be6d:	e9 92 ff ff ff       	jmp    c001be04 <int_common_stub>

c001be72 <irq22>:
c001be72:	fa                   	cli    
c001be73:	6a 00                	push   0x0
c001be75:	6a 36                	push   0x36
c001be77:	e9 88 ff ff ff       	jmp    c001be04 <int_common_stub>

c001be7c <irq23>:
c001be7c:	fa                   	cli    
c001be7d:	6a 00                	push   0x0
c001be7f:	6a 37                	push   0x37
c001be81:	e9 7e ff ff ff       	jmp    c001be04 <int_common_stub>
c001be86:	66 90                	xchg   ax,ax
c001be88:	66 90                	xchg   ax,ax
c001be8a:	66 90                	xchg   ax,ax
c001be8c:	66 90                	xchg   ax,ax
c001be8e:	66 90                	xchg   ax,ax

c001be90 <i386GetRDRAND>:
c001be90:	b9 64 00 00 00       	mov    ecx,0x64

c001be95 <retry>:
c001be95:	0f c7 f0             	rdrand eax
c001be98:	72 05                	jb     c001be9f <retry.done>
c001be9a:	e2 f9                	loop   c001be95 <retry>

c001be9c <retry.fail>:
c001be9c:	31 c0                	xor    eax,eax
c001be9e:	c3                   	ret    

c001be9f <retry.done>:
c001be9f:	c3                   	ret    

c001bea0 <absolutelyNoChanceInHell>:
c001bea0:	b8 01 00 00 00       	mov    eax,0x1
c001bea5:	0f a2                	cpuid  
c001bea7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001bead:	74 06                	je     c001beb5 <sseDetect.noSSE>
c001beaf:	b8 01 00 00 00       	mov    eax,0x1
c001beb4:	c3                   	ret    

c001beb5 <sseDetect.noSSE>:
c001beb5:	31 c0                	xor    eax,eax
c001beb7:	c3                   	ret    

c001beb8 <sseSave>:
c001beb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bebc:	0f ae 00             	fxsave [eax]
c001bebf:	c3                   	ret    

c001bec0 <sseLoad>:
c001bec0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bec4:	0f ae 08             	fxrstor [eax]
c001bec7:	c3                   	ret    

c001bec8 <sseInit>:
c001bec8:	e8 42 00 00 00       	call   c001bf0f <x87Init>
c001becd:	0f 20 e0             	mov    eax,cr4
c001bed0:	66 0d 00 06          	or     ax,0x600
c001bed4:	0f 22 e0             	mov    cr4,eax
c001bed7:	c3                   	ret    

c001bed8 <sseClose>:
c001bed8:	c3                   	ret    
c001bed9:	66 90                	xchg   ax,ax
c001bedb:	66 90                	xchg   ax,ax
c001bedd:	66 90                	xchg   ax,ax
c001bedf:	90                   	nop

c001bee0 <value_37F>:
c001bee0:	7f 03                	jg     c001bee5 <value_37A+0x1>

c001bee2 <value_37E>:
c001bee2:	7e 03                	jle    c001bee7 <x87Detect+0x1>

c001bee4 <value_37A>:
c001bee4:	7a 03                	jp     c001bee9 <x87Detect+0x3>

c001bee6 <x87Detect>:
c001bee6:	b8 01 00 00 00       	mov    eax,0x1
c001beeb:	0f a2                	cpuid  
c001beed:	f7 c2 01 00 00 00    	test   edx,0x1
c001bef3:	74 06                	je     c001befb <x87Detect.nox87>
c001bef5:	b8 01 00 00 00       	mov    eax,0x1
c001befa:	c3                   	ret    

c001befb <x87Detect.nox87>:
c001befb:	b8 00 00 00 00       	mov    eax,0x0
c001bf00:	c3                   	ret    

c001bf01 <x87Save>:
c001bf01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf05:	dd 30                	fnsave [eax]
c001bf07:	c3                   	ret    

c001bf08 <x87Load>:
c001bf08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf0c:	dd 20                	frstor [eax]
c001bf0e:	c3                   	ret    

c001bf0f <x87Init>:
c001bf0f:	0f 20 c0             	mov    eax,cr0
c001bf12:	66 25 fb ff          	and    ax,0xfffb
c001bf16:	66 0d 22 00          	or     ax,0x22
c001bf1a:	0f 22 c0             	mov    cr0,eax
c001bf1d:	db e3                	fninit 
c001bf1f:	0f 06                	clts   
c001bf21:	d9 2d e4 be 01 c0    	fldcw  WORD PTR ds:0xc001bee4
c001bf27:	c3                   	ret    

c001bf28 <x87Close>:
c001bf28:	c3                   	ret    
c001bf29:	66 90                	xchg   ax,ax
c001bf2b:	90                   	nop

c001bf2c <__do_global_ctors_aux>:
c001bf2c:	a1 dc ce 01 c0       	mov    eax,ds:0xc001cedc
c001bf31:	83 f8 ff             	cmp    eax,0xffffffff
c001bf34:	74 1a                	je     c001bf50 <__do_global_ctors_aux+0x24>
c001bf36:	55                   	push   ebp
c001bf37:	89 e5                	mov    ebp,esp
c001bf39:	53                   	push   ebx
c001bf3a:	52                   	push   edx
c001bf3b:	bb dc ce 01 c0       	mov    ebx,0xc001cedc
c001bf40:	ff d0                	call   eax
c001bf42:	83 eb 04             	sub    ebx,0x4
c001bf45:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bf47:	83 f8 ff             	cmp    eax,0xffffffff
c001bf4a:	75 f4                	jne    c001bf40 <__do_global_ctors_aux+0x14>
c001bf4c:	58                   	pop    eax
c001bf4d:	5b                   	pop    ebx
c001bf4e:	5d                   	pop    ebp
c001bf4f:	c3                   	ret    
c001bf50:	c3                   	ret    
c001bf51:	66 90                	xchg   ax,ax
c001bf53:	90                   	nop

c001bf54 <__divdi3>:
c001bf54:	55                   	push   ebp
c001bf55:	57                   	push   edi
c001bf56:	56                   	push   esi
c001bf57:	53                   	push   ebx
c001bf58:	83 ec 1c             	sub    esp,0x1c
c001bf5b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001bf5f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bf63:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001bf66:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001bf6a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bf6e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bf72:	85 db                	test   ebx,ebx
c001bf74:	0f 88 8e 00 00 00    	js     c001c008 <__divdi3+0xb4>
c001bf7a:	89 dd                	mov    ebp,ebx
c001bf7c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001bf84:	89 d3                	mov    ebx,edx
c001bf86:	85 d2                	test   edx,edx
c001bf88:	79 0d                	jns    c001bf97 <__divdi3+0x43>
c001bf8a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001bf8e:	f7 d8                	neg    eax
c001bf90:	83 d2 00             	adc    edx,0x0
c001bf93:	f7 da                	neg    edx
c001bf95:	89 d3                	mov    ebx,edx
c001bf97:	89 c7                	mov    edi,eax
c001bf99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bf9c:	85 db                	test   ebx,ebx
c001bf9e:	75 48                	jne    c001bfe8 <__divdi3+0x94>
c001bfa0:	39 ef                	cmp    edi,ebp
c001bfa2:	76 24                	jbe    c001bfc8 <__divdi3+0x74>
c001bfa4:	89 ea                	mov    edx,ebp
c001bfa6:	f7 f7                	div    edi
c001bfa8:	89 c1                	mov    ecx,eax
c001bfaa:	31 f6                	xor    esi,esi
c001bfac:	89 c8                	mov    eax,ecx
c001bfae:	89 f2                	mov    edx,esi
c001bfb0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bfb4:	85 c9                	test   ecx,ecx
c001bfb6:	74 07                	je     c001bfbf <__divdi3+0x6b>
c001bfb8:	f7 d8                	neg    eax
c001bfba:	83 d2 00             	adc    edx,0x0
c001bfbd:	f7 da                	neg    edx
c001bfbf:	83 c4 1c             	add    esp,0x1c
c001bfc2:	5b                   	pop    ebx
c001bfc3:	5e                   	pop    esi
c001bfc4:	5f                   	pop    edi
c001bfc5:	5d                   	pop    ebp
c001bfc6:	c3                   	ret    
c001bfc7:	90                   	nop
c001bfc8:	85 ff                	test   edi,edi
c001bfca:	75 0b                	jne    c001bfd7 <__divdi3+0x83>
c001bfcc:	b8 01 00 00 00       	mov    eax,0x1
c001bfd1:	31 d2                	xor    edx,edx
c001bfd3:	f7 f3                	div    ebx
c001bfd5:	89 c7                	mov    edi,eax
c001bfd7:	31 d2                	xor    edx,edx
c001bfd9:	89 e8                	mov    eax,ebp
c001bfdb:	f7 f7                	div    edi
c001bfdd:	89 c6                	mov    esi,eax
c001bfdf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bfe2:	f7 f7                	div    edi
c001bfe4:	89 c1                	mov    ecx,eax
c001bfe6:	eb c4                	jmp    c001bfac <__divdi3+0x58>
c001bfe8:	39 eb                	cmp    ebx,ebp
c001bfea:	77 3c                	ja     c001c028 <__divdi3+0xd4>
c001bfec:	0f bd f3             	bsr    esi,ebx
c001bfef:	83 f6 1f             	xor    esi,0x1f
c001bff2:	75 40                	jne    c001c034 <__divdi3+0xe0>
c001bff4:	39 eb                	cmp    ebx,ebp
c001bff6:	72 09                	jb     c001c001 <__divdi3+0xad>
c001bff8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001bffb:	0f 87 97 00 00 00    	ja     c001c098 <__divdi3+0x144>
c001c001:	b9 01 00 00 00       	mov    ecx,0x1
c001c006:	eb a4                	jmp    c001bfac <__divdi3+0x58>
c001c008:	f7 d9                	neg    ecx
c001c00a:	83 d3 00             	adc    ebx,0x0
c001c00d:	f7 db                	neg    ebx
c001c00f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001c012:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001c016:	89 dd                	mov    ebp,ebx
c001c018:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001c020:	e9 5f ff ff ff       	jmp    c001bf84 <__divdi3+0x30>
c001c025:	8d 76 00             	lea    esi,[esi+0x0]
c001c028:	31 f6                	xor    esi,esi
c001c02a:	31 c9                	xor    ecx,ecx
c001c02c:	e9 7b ff ff ff       	jmp    c001bfac <__divdi3+0x58>
c001c031:	8d 76 00             	lea    esi,[esi+0x0]
c001c034:	b8 20 00 00 00       	mov    eax,0x20
c001c039:	29 f0                	sub    eax,esi
c001c03b:	89 f1                	mov    ecx,esi
c001c03d:	d3 e3                	shl    ebx,cl
c001c03f:	89 fa                	mov    edx,edi
c001c041:	88 c1                	mov    cl,al
c001c043:	d3 ea                	shr    edx,cl
c001c045:	09 da                	or     edx,ebx
c001c047:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c04b:	89 f1                	mov    ecx,esi
c001c04d:	d3 e7                	shl    edi,cl
c001c04f:	89 eb                	mov    ebx,ebp
c001c051:	88 c1                	mov    cl,al
c001c053:	d3 eb                	shr    ebx,cl
c001c055:	89 f1                	mov    ecx,esi
c001c057:	d3 e5                	shl    ebp,cl
c001c059:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001c05c:	88 c1                	mov    cl,al
c001c05e:	d3 ea                	shr    edx,cl
c001c060:	09 d5                	or     ebp,edx
c001c062:	89 e8                	mov    eax,ebp
c001c064:	89 da                	mov    edx,ebx
c001c066:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001c06a:	89 d3                	mov    ebx,edx
c001c06c:	89 c5                	mov    ebp,eax
c001c06e:	f7 e7                	mul    edi
c001c070:	39 d3                	cmp    ebx,edx
c001c072:	72 18                	jb     c001c08c <__divdi3+0x138>
c001c074:	74 0a                	je     c001c080 <__divdi3+0x12c>
c001c076:	89 e9                	mov    ecx,ebp
c001c078:	31 f6                	xor    esi,esi
c001c07a:	e9 2d ff ff ff       	jmp    c001bfac <__divdi3+0x58>
c001c07f:	90                   	nop
c001c080:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001c083:	89 f1                	mov    ecx,esi
c001c085:	d3 e7                	shl    edi,cl
c001c087:	39 c7                	cmp    edi,eax
c001c089:	73 eb                	jae    c001c076 <__divdi3+0x122>
c001c08b:	90                   	nop
c001c08c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001c08f:	31 f6                	xor    esi,esi
c001c091:	e9 16 ff ff ff       	jmp    c001bfac <__divdi3+0x58>
c001c096:	66 90                	xchg   ax,ax
c001c098:	31 c9                	xor    ecx,ecx
c001c09a:	e9 0d ff ff ff       	jmp    c001bfac <__divdi3+0x58>
c001c09f:	90                   	nop

c001c0a0 <__moddi3>:
c001c0a0:	55                   	push   ebp
c001c0a1:	57                   	push   edi
c001c0a2:	56                   	push   esi
c001c0a3:	53                   	push   ebx
c001c0a4:	83 ec 2c             	sub    esp,0x2c
c001c0a7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c0ab:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001c0af:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001c0b3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001c0b7:	85 db                	test   ebx,ebx
c001c0b9:	0f 88 85 00 00 00    	js     c001c144 <__moddi3+0xa4>
c001c0bf:	89 de                	mov    esi,ebx
c001c0c1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c0c9:	89 d7                	mov    edi,edx
c001c0cb:	85 d2                	test   edx,edx
c001c0cd:	79 09                	jns    c001c0d8 <__moddi3+0x38>
c001c0cf:	f7 d8                	neg    eax
c001c0d1:	83 d2 00             	adc    edx,0x0
c001c0d4:	f7 da                	neg    edx
c001c0d6:	89 d7                	mov    edi,edx
c001c0d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c0dc:	89 cd                	mov    ebp,ecx
c001c0de:	85 ff                	test   edi,edi
c001c0e0:	75 52                	jne    c001c134 <__moddi3+0x94>
c001c0e2:	89 c3                	mov    ebx,eax
c001c0e4:	39 f0                	cmp    eax,esi
c001c0e6:	76 24                	jbe    c001c10c <__moddi3+0x6c>
c001c0e8:	89 c8                	mov    eax,ecx
c001c0ea:	89 f2                	mov    edx,esi
c001c0ec:	f7 f3                	div    ebx
c001c0ee:	89 d6                	mov    esi,edx
c001c0f0:	89 f0                	mov    eax,esi
c001c0f2:	31 d2                	xor    edx,edx
c001c0f4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c0f8:	85 c9                	test   ecx,ecx
c001c0fa:	74 07                	je     c001c103 <__moddi3+0x63>
c001c0fc:	f7 d8                	neg    eax
c001c0fe:	83 d2 00             	adc    edx,0x0
c001c101:	f7 da                	neg    edx
c001c103:	83 c4 2c             	add    esp,0x2c
c001c106:	5b                   	pop    ebx
c001c107:	5e                   	pop    esi
c001c108:	5f                   	pop    edi
c001c109:	5d                   	pop    ebp
c001c10a:	c3                   	ret    
c001c10b:	90                   	nop
c001c10c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001c110:	85 db                	test   ebx,ebx
c001c112:	75 0d                	jne    c001c121 <__moddi3+0x81>
c001c114:	b8 01 00 00 00       	mov    eax,0x1
c001c119:	31 d2                	xor    edx,edx
c001c11b:	f7 f7                	div    edi
c001c11d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c121:	89 f0                	mov    eax,esi
c001c123:	31 d2                	xor    edx,edx
c001c125:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c129:	f7 f7                	div    edi
c001c12b:	89 e8                	mov    eax,ebp
c001c12d:	f7 f7                	div    edi
c001c12f:	89 d6                	mov    esi,edx
c001c131:	eb bd                	jmp    c001c0f0 <__moddi3+0x50>
c001c133:	90                   	nop
c001c134:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c138:	39 f7                	cmp    edi,esi
c001c13a:	76 20                	jbe    c001c15c <__moddi3+0xbc>
c001c13c:	89 c8                	mov    eax,ecx
c001c13e:	89 f2                	mov    edx,esi
c001c140:	eb b2                	jmp    c001c0f4 <__moddi3+0x54>
c001c142:	66 90                	xchg   ax,ax
c001c144:	f7 d9                	neg    ecx
c001c146:	83 d3 00             	adc    ebx,0x0
c001c149:	f7 db                	neg    ebx
c001c14b:	89 de                	mov    esi,ebx
c001c14d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001c155:	e9 6f ff ff ff       	jmp    c001c0c9 <__moddi3+0x29>
c001c15a:	66 90                	xchg   ax,ax
c001c15c:	0f bd c7             	bsr    eax,edi
c001c15f:	83 f0 1f             	xor    eax,0x1f
c001c162:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c166:	75 24                	jne    c001c18c <__moddi3+0xec>
c001c168:	39 f7                	cmp    edi,esi
c001c16a:	72 06                	jb     c001c172 <__moddi3+0xd2>
c001c16c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001c170:	77 0c                	ja     c001c17e <__moddi3+0xde>
c001c172:	89 e9                	mov    ecx,ebp
c001c174:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001c178:	19 fe                	sbb    esi,edi
c001c17a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c17e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c182:	89 f2                	mov    edx,esi
c001c184:	e9 6b ff ff ff       	jmp    c001c0f4 <__moddi3+0x54>
c001c189:	8d 76 00             	lea    esi,[esi+0x0]
c001c18c:	b8 20 00 00 00       	mov    eax,0x20
c001c191:	89 c2                	mov    edx,eax
c001c193:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c197:	29 da                	sub    edx,ebx
c001c199:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c19d:	88 d9                	mov    cl,bl
c001c19f:	d3 e7                	shl    edi,cl
c001c1a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c1a5:	88 d1                	mov    cl,dl
c001c1a7:	d3 e8                	shr    eax,cl
c001c1a9:	09 c7                	or     edi,eax
c001c1ab:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001c1af:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c1b3:	89 d8                	mov    eax,ebx
c001c1b5:	88 d9                	mov    cl,bl
c001c1b7:	d3 e7                	shl    edi,cl
c001c1b9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c1bd:	89 f3                	mov    ebx,esi
c001c1bf:	88 d1                	mov    cl,dl
c001c1c1:	d3 eb                	shr    ebx,cl
c001c1c3:	89 c7                	mov    edi,eax
c001c1c5:	88 c1                	mov    cl,al
c001c1c7:	d3 e6                	shl    esi,cl
c001c1c9:	89 e8                	mov    eax,ebp
c001c1cb:	88 d1                	mov    cl,dl
c001c1cd:	d3 e8                	shr    eax,cl
c001c1cf:	09 f0                	or     eax,esi
c001c1d1:	89 f9                	mov    ecx,edi
c001c1d3:	d3 e5                	shl    ebp,cl
c001c1d5:	89 da                	mov    edx,ebx
c001c1d7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001c1db:	89 d3                	mov    ebx,edx
c001c1dd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c1e1:	89 c6                	mov    esi,eax
c001c1e3:	89 d1                	mov    ecx,edx
c001c1e5:	39 d3                	cmp    ebx,edx
c001c1e7:	72 27                	jb     c001c210 <__moddi3+0x170>
c001c1e9:	74 21                	je     c001c20c <__moddi3+0x16c>
c001c1eb:	29 f5                	sub    ebp,esi
c001c1ed:	19 cb                	sbb    ebx,ecx
c001c1ef:	89 de                	mov    esi,ebx
c001c1f1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001c1f5:	d3 e6                	shl    esi,cl
c001c1f7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c1fb:	89 f9                	mov    ecx,edi
c001c1fd:	d3 ed                	shr    ebp,cl
c001c1ff:	09 ee                	or     esi,ebp
c001c201:	89 f0                	mov    eax,esi
c001c203:	d3 eb                	shr    ebx,cl
c001c205:	89 da                	mov    edx,ebx
c001c207:	e9 e8 fe ff ff       	jmp    c001c0f4 <__moddi3+0x54>
c001c20c:	39 c5                	cmp    ebp,eax
c001c20e:	73 db                	jae    c001c1eb <__moddi3+0x14b>
c001c210:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c214:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001c218:	89 d1                	mov    ecx,edx
c001c21a:	89 c6                	mov    esi,eax
c001c21c:	eb cd                	jmp    c001c1eb <__moddi3+0x14b>
c001c21e:	66 90                	xchg   ax,ax

c001c220 <__udivdi3>:
c001c220:	55                   	push   ebp
c001c221:	57                   	push   edi
c001c222:	56                   	push   esi
c001c223:	53                   	push   ebx
c001c224:	83 ec 1c             	sub    esp,0x1c
c001c227:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c22b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c22f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c233:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c237:	85 d2                	test   edx,edx
c001c239:	75 41                	jne    c001c27c <__udivdi3+0x5c>
c001c23b:	39 f7                	cmp    edi,esi
c001c23d:	76 15                	jbe    c001c254 <__udivdi3+0x34>
c001c23f:	89 e8                	mov    eax,ebp
c001c241:	89 f2                	mov    edx,esi
c001c243:	f7 f7                	div    edi
c001c245:	31 db                	xor    ebx,ebx
c001c247:	89 da                	mov    edx,ebx
c001c249:	83 c4 1c             	add    esp,0x1c
c001c24c:	5b                   	pop    ebx
c001c24d:	5e                   	pop    esi
c001c24e:	5f                   	pop    edi
c001c24f:	5d                   	pop    ebp
c001c250:	c3                   	ret    
c001c251:	8d 76 00             	lea    esi,[esi+0x0]
c001c254:	89 f9                	mov    ecx,edi
c001c256:	85 ff                	test   edi,edi
c001c258:	75 0b                	jne    c001c265 <__udivdi3+0x45>
c001c25a:	b8 01 00 00 00       	mov    eax,0x1
c001c25f:	31 d2                	xor    edx,edx
c001c261:	f7 f7                	div    edi
c001c263:	89 c1                	mov    ecx,eax
c001c265:	31 d2                	xor    edx,edx
c001c267:	89 f0                	mov    eax,esi
c001c269:	f7 f1                	div    ecx
c001c26b:	89 c3                	mov    ebx,eax
c001c26d:	89 e8                	mov    eax,ebp
c001c26f:	f7 f1                	div    ecx
c001c271:	89 da                	mov    edx,ebx
c001c273:	83 c4 1c             	add    esp,0x1c
c001c276:	5b                   	pop    ebx
c001c277:	5e                   	pop    esi
c001c278:	5f                   	pop    edi
c001c279:	5d                   	pop    ebp
c001c27a:	c3                   	ret    
c001c27b:	90                   	nop
c001c27c:	39 f2                	cmp    edx,esi
c001c27e:	77 1c                	ja     c001c29c <__udivdi3+0x7c>
c001c280:	0f bd da             	bsr    ebx,edx
c001c283:	83 f3 1f             	xor    ebx,0x1f
c001c286:	75 24                	jne    c001c2ac <__udivdi3+0x8c>
c001c288:	39 f2                	cmp    edx,esi
c001c28a:	72 08                	jb     c001c294 <__udivdi3+0x74>
c001c28c:	39 ef                	cmp    edi,ebp
c001c28e:	0f 87 84 00 00 00    	ja     c001c318 <__udivdi3+0xf8>
c001c294:	b8 01 00 00 00       	mov    eax,0x1
c001c299:	eb ac                	jmp    c001c247 <__udivdi3+0x27>
c001c29b:	90                   	nop
c001c29c:	31 db                	xor    ebx,ebx
c001c29e:	31 c0                	xor    eax,eax
c001c2a0:	89 da                	mov    edx,ebx
c001c2a2:	83 c4 1c             	add    esp,0x1c
c001c2a5:	5b                   	pop    ebx
c001c2a6:	5e                   	pop    esi
c001c2a7:	5f                   	pop    edi
c001c2a8:	5d                   	pop    ebp
c001c2a9:	c3                   	ret    
c001c2aa:	66 90                	xchg   ax,ax
c001c2ac:	b8 20 00 00 00       	mov    eax,0x20
c001c2b1:	29 d8                	sub    eax,ebx
c001c2b3:	88 d9                	mov    cl,bl
c001c2b5:	d3 e2                	shl    edx,cl
c001c2b7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c2bb:	89 fa                	mov    edx,edi
c001c2bd:	88 c1                	mov    cl,al
c001c2bf:	d3 ea                	shr    edx,cl
c001c2c1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c2c5:	09 d1                	or     ecx,edx
c001c2c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c2cb:	88 d9                	mov    cl,bl
c001c2cd:	d3 e7                	shl    edi,cl
c001c2cf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c2d3:	89 f7                	mov    edi,esi
c001c2d5:	88 c1                	mov    cl,al
c001c2d7:	d3 ef                	shr    edi,cl
c001c2d9:	88 d9                	mov    cl,bl
c001c2db:	d3 e6                	shl    esi,cl
c001c2dd:	89 ea                	mov    edx,ebp
c001c2df:	88 c1                	mov    cl,al
c001c2e1:	d3 ea                	shr    edx,cl
c001c2e3:	09 d6                	or     esi,edx
c001c2e5:	89 f0                	mov    eax,esi
c001c2e7:	89 fa                	mov    edx,edi
c001c2e9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c2ed:	89 d7                	mov    edi,edx
c001c2ef:	89 c6                	mov    esi,eax
c001c2f1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c2f5:	39 d7                	cmp    edi,edx
c001c2f7:	72 13                	jb     c001c30c <__udivdi3+0xec>
c001c2f9:	74 09                	je     c001c304 <__udivdi3+0xe4>
c001c2fb:	89 f0                	mov    eax,esi
c001c2fd:	31 db                	xor    ebx,ebx
c001c2ff:	e9 43 ff ff ff       	jmp    c001c247 <__udivdi3+0x27>
c001c304:	88 d9                	mov    cl,bl
c001c306:	d3 e5                	shl    ebp,cl
c001c308:	39 c5                	cmp    ebp,eax
c001c30a:	73 ef                	jae    c001c2fb <__udivdi3+0xdb>
c001c30c:	8d 46 ff             	lea    eax,[esi-0x1]
c001c30f:	31 db                	xor    ebx,ebx
c001c311:	e9 31 ff ff ff       	jmp    c001c247 <__udivdi3+0x27>
c001c316:	66 90                	xchg   ax,ax
c001c318:	31 c0                	xor    eax,eax
c001c31a:	e9 28 ff ff ff       	jmp    c001c247 <__udivdi3+0x27>
c001c31f:	90                   	nop

c001c320 <__umoddi3>:
c001c320:	55                   	push   ebp
c001c321:	57                   	push   edi
c001c322:	56                   	push   esi
c001c323:	53                   	push   ebx
c001c324:	83 ec 1c             	sub    esp,0x1c
c001c327:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c32b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c32f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c333:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c337:	89 da                	mov    edx,ebx
c001c339:	85 c0                	test   eax,eax
c001c33b:	75 37                	jne    c001c374 <__umoddi3+0x54>
c001c33d:	39 df                	cmp    edi,ebx
c001c33f:	76 13                	jbe    c001c354 <__umoddi3+0x34>
c001c341:	89 f0                	mov    eax,esi
c001c343:	f7 f7                	div    edi
c001c345:	89 d0                	mov    eax,edx
c001c347:	31 d2                	xor    edx,edx
c001c349:	83 c4 1c             	add    esp,0x1c
c001c34c:	5b                   	pop    ebx
c001c34d:	5e                   	pop    esi
c001c34e:	5f                   	pop    edi
c001c34f:	5d                   	pop    ebp
c001c350:	c3                   	ret    
c001c351:	8d 76 00             	lea    esi,[esi+0x0]
c001c354:	89 fd                	mov    ebp,edi
c001c356:	85 ff                	test   edi,edi
c001c358:	75 0b                	jne    c001c365 <__umoddi3+0x45>
c001c35a:	b8 01 00 00 00       	mov    eax,0x1
c001c35f:	31 d2                	xor    edx,edx
c001c361:	f7 f7                	div    edi
c001c363:	89 c5                	mov    ebp,eax
c001c365:	89 d8                	mov    eax,ebx
c001c367:	31 d2                	xor    edx,edx
c001c369:	f7 f5                	div    ebp
c001c36b:	89 f0                	mov    eax,esi
c001c36d:	f7 f5                	div    ebp
c001c36f:	89 d0                	mov    eax,edx
c001c371:	eb d4                	jmp    c001c347 <__umoddi3+0x27>
c001c373:	90                   	nop
c001c374:	89 f1                	mov    ecx,esi
c001c376:	39 d8                	cmp    eax,ebx
c001c378:	76 0a                	jbe    c001c384 <__umoddi3+0x64>
c001c37a:	89 f0                	mov    eax,esi
c001c37c:	83 c4 1c             	add    esp,0x1c
c001c37f:	5b                   	pop    ebx
c001c380:	5e                   	pop    esi
c001c381:	5f                   	pop    edi
c001c382:	5d                   	pop    ebp
c001c383:	c3                   	ret    
c001c384:	0f bd e8             	bsr    ebp,eax
c001c387:	83 f5 1f             	xor    ebp,0x1f
c001c38a:	75 1c                	jne    c001c3a8 <__umoddi3+0x88>
c001c38c:	39 d8                	cmp    eax,ebx
c001c38e:	72 04                	jb     c001c394 <__umoddi3+0x74>
c001c390:	39 f7                	cmp    edi,esi
c001c392:	77 08                	ja     c001c39c <__umoddi3+0x7c>
c001c394:	89 da                	mov    edx,ebx
c001c396:	29 fe                	sub    esi,edi
c001c398:	19 c2                	sbb    edx,eax
c001c39a:	89 f1                	mov    ecx,esi
c001c39c:	89 c8                	mov    eax,ecx
c001c39e:	83 c4 1c             	add    esp,0x1c
c001c3a1:	5b                   	pop    ebx
c001c3a2:	5e                   	pop    esi
c001c3a3:	5f                   	pop    edi
c001c3a4:	5d                   	pop    ebp
c001c3a5:	c3                   	ret    
c001c3a6:	66 90                	xchg   ax,ax
c001c3a8:	ba 20 00 00 00       	mov    edx,0x20
c001c3ad:	29 ea                	sub    edx,ebp
c001c3af:	89 e9                	mov    ecx,ebp
c001c3b1:	d3 e0                	shl    eax,cl
c001c3b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c3b7:	89 f8                	mov    eax,edi
c001c3b9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c3bd:	88 d1                	mov    cl,dl
c001c3bf:	d3 e8                	shr    eax,cl
c001c3c1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c3c5:	09 c1                	or     ecx,eax
c001c3c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c3cb:	89 e9                	mov    ecx,ebp
c001c3cd:	d3 e7                	shl    edi,cl
c001c3cf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c3d3:	89 d8                	mov    eax,ebx
c001c3d5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c3d9:	88 d1                	mov    cl,dl
c001c3db:	d3 e8                	shr    eax,cl
c001c3dd:	89 c7                	mov    edi,eax
c001c3df:	89 e9                	mov    ecx,ebp
c001c3e1:	d3 e3                	shl    ebx,cl
c001c3e3:	89 f0                	mov    eax,esi
c001c3e5:	88 d1                	mov    cl,dl
c001c3e7:	d3 e8                	shr    eax,cl
c001c3e9:	09 d8                	or     eax,ebx
c001c3eb:	89 e9                	mov    ecx,ebp
c001c3ed:	d3 e6                	shl    esi,cl
c001c3ef:	89 f3                	mov    ebx,esi
c001c3f1:	89 fa                	mov    edx,edi
c001c3f3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c3f7:	89 d1                	mov    ecx,edx
c001c3f9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c3fd:	89 c6                	mov    esi,eax
c001c3ff:	89 d7                	mov    edi,edx
c001c401:	39 d1                	cmp    ecx,edx
c001c403:	72 27                	jb     c001c42c <__umoddi3+0x10c>
c001c405:	74 21                	je     c001c428 <__umoddi3+0x108>
c001c407:	89 ca                	mov    edx,ecx
c001c409:	29 f3                	sub    ebx,esi
c001c40b:	19 fa                	sbb    edx,edi
c001c40d:	89 d0                	mov    eax,edx
c001c40f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001c413:	d3 e0                	shl    eax,cl
c001c415:	89 e9                	mov    ecx,ebp
c001c417:	d3 eb                	shr    ebx,cl
c001c419:	09 d8                	or     eax,ebx
c001c41b:	d3 ea                	shr    edx,cl
c001c41d:	83 c4 1c             	add    esp,0x1c
c001c420:	5b                   	pop    ebx
c001c421:	5e                   	pop    esi
c001c422:	5f                   	pop    edi
c001c423:	5d                   	pop    ebp
c001c424:	c3                   	ret    
c001c425:	8d 76 00             	lea    esi,[esi+0x0]
c001c428:	39 c3                	cmp    ebx,eax
c001c42a:	73 db                	jae    c001c407 <__umoddi3+0xe7>
c001c42c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c430:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001c434:	89 d7                	mov    edi,edx
c001c436:	89 c6                	mov    esi,eax
c001c438:	eb cd                	jmp    c001c407 <__umoddi3+0xe7>

Disassembly of section .init:

c001c43a <_init>:
c001c43a:	55                   	push   ebp
c001c43b:	89 e5                	mov    ebp,esp
c001c43d:	e8 b2 3c fe ff       	call   c00000f4 <frame_dummy>
c001c442:	e8 e5 fa ff ff       	call   c001bf2c <__do_global_ctors_aux>
c001c447:	5d                   	pop    ebp
c001c448:	c3                   	ret    

Disassembly of section .fini:

c001c449 <_fini>:
c001c449:	55                   	push   ebp
c001c44a:	89 e5                	mov    ebp,esp
c001c44c:	e8 33 3c fe ff       	call   c0000084 <__do_global_dtors_aux>
c001c451:	5d                   	pop    ebp
c001c452:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001c454 <Computer::~Computer()>:
c001c454:	83 ec 0c             	sub    esp,0xc
c001c457:	ba 18 d7 01 c0       	mov    edx,0xc001d718
c001c45c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c460:	89 10                	mov    DWORD PTR [eax],edx
c001c462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c466:	83 ec 0c             	sub    esp,0xc
c001c469:	50                   	push   eax
c001c46a:	e8 cb f3 fe ff       	call   c000b83a <Device::~Device()>
c001c46f:	83 c4 10             	add    esp,0x10
c001c472:	90                   	nop
c001c473:	83 c4 0c             	add    esp,0xc
c001c476:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001c478 <Computer::~Computer()>:
c001c478:	83 ec 0c             	sub    esp,0xc
c001c47b:	83 ec 0c             	sub    esp,0xc
c001c47e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c482:	e8 cd ff ff ff       	call   c001c454 <Computer::~Computer()>
c001c487:	83 c4 10             	add    esp,0x10
c001c48a:	83 ec 08             	sub    esp,0x8
c001c48d:	68 70 01 00 00       	push   0x170
c001c492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c496:	e8 67 df fe ff       	call   c000a402 <operator delete(void*, unsigned long)>
c001c49b:	83 c4 10             	add    esp,0x10
c001c49e:	83 c4 0c             	add    esp,0xc
c001c4a1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001c4a2 <idleCommon()>:
c001c4a2:	83 ec 0c             	sub    esp,0xc
c001c4a5:	fa                   	cli    
c001c4a6:	ff 05 08 40 02 c0    	inc    DWORD PTR ds:0xc0024008
c001c4ac:	e8 6b 74 ff ff       	call   c001391c <schedule()>
c001c4b1:	a1 08 40 02 c0       	mov    eax,ds:0xc0024008
c001c4b6:	48                   	dec    eax
c001c4b7:	a3 08 40 02 c0       	mov    ds:0xc0024008,eax
c001c4bc:	75 01                	jne    c001c4bf <idleCommon()+0x1d>
c001c4be:	fb                   	sti    
c001c4bf:	83 c4 0c             	add    esp,0xc
c001c4c2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001c4c4 <LinkedList<UnixFile>::~LinkedList()>:
c001c4c4:	90                   	nop
c001c4c5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001c4c6 <LinkedList<UnixFile>::LinkedList()>:
c001c4c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4ca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c4d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4d4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c4db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4df:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c4e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4ea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c4f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4f4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c4fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4ff:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c506:	90                   	nop
c001c507:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001c508 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001c508:	83 ec 0c             	sub    esp,0xc
c001c50b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c510:	75 10                	jne    c001c522 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001c512:	83 ec 0c             	sub    esp,0xc
c001c515:	68 94 d9 01 c0       	push   0xc001d994
c001c51a:	e8 44 3c ff ff       	call   c0010163 <KePanic(char const*)>
c001c51f:	83 c4 10             	add    esp,0x10
c001c522:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c526:	8b 00                	mov    eax,DWORD PTR [eax]
c001c528:	85 c0                	test   eax,eax
c001c52a:	74 34                	je     c001c560 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c52c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c530:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c533:	85 c0                	test   eax,eax
c001c535:	74 29                	je     c001c560 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c537:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c53b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c53e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c542:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c545:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c549:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c54d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c554:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c557:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c55e:	eb 65                	jmp    c001c5c5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c564:	8b 00                	mov    eax,DWORD PTR [eax]
c001c566:	85 c0                	test   eax,eax
c001c568:	75 4b                	jne    c001c5b5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c56a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c56e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c571:	85 c0                	test   eax,eax
c001c573:	75 40                	jne    c001c5b5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c575:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c579:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c57d:	89 10                	mov    DWORD PTR [eax],edx
c001c57f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c583:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c587:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c58a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c58e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c591:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c598:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c59c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c59f:	85 c0                	test   eax,eax
c001c5a1:	74 22                	je     c001c5c5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c5a3:	83 ec 0c             	sub    esp,0xc
c001c5a6:	68 b6 d9 01 c0       	push   0xc001d9b6
c001c5ab:	e8 b3 3b ff ff       	call   c0010163 <KePanic(char const*)>
c001c5b0:	83 c4 10             	add    esp,0x10
c001c5b3:	eb 10                	jmp    c001c5c5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c5b5:	83 ec 0c             	sub    esp,0xc
c001c5b8:	68 c0 d9 01 c0       	push   0xc001d9c0
c001c5bd:	e8 a1 3b ff ff       	call   c0010163 <KePanic(char const*)>
c001c5c2:	83 c4 10             	add    esp,0x10
c001c5c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5c9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c5cc:	8d 50 01             	lea    edx,[eax+0x1]
c001c5cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5d3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c5d6:	90                   	nop
c001c5d7:	83 c4 0c             	add    esp,0xc
c001c5da:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001c5dc <LinkedList<UnixFile>::getFirstElement()>:
c001c5dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5e0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c5e2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001c5e4 <LinkedList<UnixFile>::removeFirst()>:
c001c5e4:	83 ec 0c             	sub    esp,0xc
c001c5e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5eb:	8b 00                	mov    eax,DWORD PTR [eax]
c001c5ed:	85 c0                	test   eax,eax
c001c5ef:	75 12                	jne    c001c603 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001c5f1:	83 ec 0c             	sub    esp,0xc
c001c5f4:	68 cc d9 01 c0       	push   0xc001d9cc
c001c5f9:	e8 65 3b ff ff       	call   c0010163 <KePanic(char const*)>
c001c5fe:	83 c4 10             	add    esp,0x10
c001c601:	eb 7e                	jmp    c001c681 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001c603:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c607:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c60a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c60d:	85 c0                	test   eax,eax
c001c60f:	74 10                	je     c001c621 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001c611:	83 ec 0c             	sub    esp,0xc
c001c614:	68 17 da 01 c0       	push   0xc001da17
c001c619:	e8 45 3b ff ff       	call   c0010163 <KePanic(char const*)>
c001c61e:	83 c4 10             	add    esp,0x10
c001c621:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c625:	8b 00                	mov    eax,DWORD PTR [eax]
c001c627:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c62a:	85 c0                	test   eax,eax
c001c62c:	75 33                	jne    c001c661 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001c62e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c632:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c638:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c63c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c643:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c647:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c64a:	83 f8 01             	cmp    eax,0x1
c001c64d:	74 21                	je     c001c670 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c64f:	83 ec 0c             	sub    esp,0xc
c001c652:	68 f0 d9 01 c0       	push   0xc001d9f0
c001c657:	e8 07 3b ff ff       	call   c0010163 <KePanic(char const*)>
c001c65c:	83 c4 10             	add    esp,0x10
c001c65f:	eb 0f                	jmp    c001c670 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c661:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c665:	8b 00                	mov    eax,DWORD PTR [eax]
c001c667:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001c66a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c66e:	89 10                	mov    DWORD PTR [eax],edx
c001c670:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c674:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c677:	8d 50 ff             	lea    edx,[eax-0x1]
c001c67a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c67e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c681:	83 c4 0c             	add    esp,0xc
c001c684:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001c686 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001c686:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c68a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c68d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001c68e <DriverlessDevice::~DriverlessDevice()>:
c001c68e:	ba 5c e0 01 c0       	mov    edx,0xc001e05c
c001c693:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c697:	89 10                	mov    DWORD PTR [eax],edx
c001c699:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c69d:	50                   	push   eax
c001c69e:	e8 97 f1 fe ff       	call   c000b83a <Device::~Device()>
c001c6a3:	83 c4 04             	add    esp,0x4
c001c6a6:	90                   	nop
c001c6a7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001c6a8 <DriverlessDevice::~DriverlessDevice()>:
c001c6a8:	83 ec 0c             	sub    esp,0xc
c001c6ab:	83 ec 0c             	sub    esp,0xc
c001c6ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6b2:	e8 d7 ff ff ff       	call   c001c68e <DriverlessDevice::~DriverlessDevice()>
c001c6b7:	83 c4 10             	add    esp,0x10
c001c6ba:	83 ec 08             	sub    esp,0x8
c001c6bd:	68 58 01 00 00       	push   0x158
c001c6c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6c6:	e8 37 dd fe ff       	call   c000a402 <operator delete(void*, unsigned long)>
c001c6cb:	83 c4 10             	add    esp,0x10
c001c6ce:	83 c4 0c             	add    esp,0xc
c001c6d1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001c6d2 <LinkedList<Device>::addElement(Device*)>:
c001c6d2:	83 ec 0c             	sub    esp,0xc
c001c6d5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c6da:	75 10                	jne    c001c6ec <LinkedList<Device>::addElement(Device*)+0x1a>
c001c6dc:	83 ec 0c             	sub    esp,0xc
c001c6df:	68 94 d9 01 c0       	push   0xc001d994
c001c6e4:	e8 7a 3a ff ff       	call   c0010163 <KePanic(char const*)>
c001c6e9:	83 c4 10             	add    esp,0x10
c001c6ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6f0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c6f2:	85 c0                	test   eax,eax
c001c6f4:	74 3a                	je     c001c730 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c6f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c6fd:	85 c0                	test   eax,eax
c001c6ff:	74 2f                	je     c001c730 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c701:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c705:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c708:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c70c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001c712:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c716:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c71a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c71d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c721:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c724:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c72e:	eb 68                	jmp    c001c798 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c734:	8b 00                	mov    eax,DWORD PTR [eax]
c001c736:	85 c0                	test   eax,eax
c001c738:	75 4e                	jne    c001c788 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c73a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c73e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c741:	85 c0                	test   eax,eax
c001c743:	75 43                	jne    c001c788 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c745:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c749:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c74d:	89 10                	mov    DWORD PTR [eax],edx
c001c74f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c753:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c757:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c75a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c75e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c761:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c76f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c772:	85 c0                	test   eax,eax
c001c774:	74 22                	je     c001c798 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c776:	83 ec 0c             	sub    esp,0xc
c001c779:	68 b6 d9 01 c0       	push   0xc001d9b6
c001c77e:	e8 e0 39 ff ff       	call   c0010163 <KePanic(char const*)>
c001c783:	83 c4 10             	add    esp,0x10
c001c786:	eb 10                	jmp    c001c798 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c788:	83 ec 0c             	sub    esp,0xc
c001c78b:	68 c0 d9 01 c0       	push   0xc001d9c0
c001c790:	e8 ce 39 ff ff       	call   c0010163 <KePanic(char const*)>
c001c795:	83 c4 10             	add    esp,0x10
c001c798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c79c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c79f:	8d 50 01             	lea    edx,[eax+0x1]
c001c7a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7a6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c7a9:	90                   	nop
c001c7aa:	83 c4 0c             	add    esp,0xc
c001c7ad:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001c7ae <LinkedList<Device>::LinkedList()>:
c001c7ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7b2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c7b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7bc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c7c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7c7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c7ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c7d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7dc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c7e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7e7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c7ee:	90                   	nop
c001c7ef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001c7f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001c7f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7f4:	8b 00                	mov    eax,DWORD PTR [eax]
c001c7f6:	85 c0                	test   eax,eax
c001c7f8:	75 0e                	jne    c001c808 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c7fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c801:	85 c0                	test   eax,eax
c001c803:	75 03                	jne    c001c808 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c805:	b0 01                	mov    al,0x1
c001c807:	c3                   	ret    
c001c808:	b0 00                	mov    al,0x0
c001c80a:	90                   	nop
c001c80b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001c80c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001c80c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c810:	8b 00                	mov    eax,DWORD PTR [eax]
c001c812:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001c814 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001c814:	83 ec 0c             	sub    esp,0xc
c001c817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c81b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c81d:	85 c0                	test   eax,eax
c001c81f:	75 17                	jne    c001c838 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001c821:	83 ec 0c             	sub    esp,0xc
c001c824:	68 cc d9 01 c0       	push   0xc001d9cc
c001c829:	e8 35 39 ff ff       	call   c0010163 <KePanic(char const*)>
c001c82e:	83 c4 10             	add    esp,0x10
c001c831:	e9 92 00 00 00       	jmp    c001c8c8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001c836:	66 90                	xchg   ax,ax
c001c838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c83c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c83f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c842:	85 c0                	test   eax,eax
c001c844:	0f 95 c0             	setne  al
c001c847:	84 c0                	test   al,al
c001c849:	74 11                	je     c001c85c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001c84b:	83 ec 0c             	sub    esp,0xc
c001c84e:	68 17 da 01 c0       	push   0xc001da17
c001c853:	e8 0b 39 ff ff       	call   c0010163 <KePanic(char const*)>
c001c858:	83 c4 10             	add    esp,0x10
c001c85b:	90                   	nop
c001c85c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c860:	8b 00                	mov    eax,DWORD PTR [eax]
c001c862:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c865:	85 c0                	test   eax,eax
c001c867:	0f 94 c0             	sete   al
c001c86a:	84 c0                	test   al,al
c001c86c:	74 36                	je     c001c8a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001c86e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c872:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c87c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c883:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c887:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c88a:	83 f8 01             	cmp    eax,0x1
c001c88d:	74 25                	je     c001c8b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c88f:	83 ec 0c             	sub    esp,0xc
c001c892:	68 f0 d9 01 c0       	push   0xc001d9f0
c001c897:	e8 c7 38 ff ff       	call   c0010163 <KePanic(char const*)>
c001c89c:	83 c4 10             	add    esp,0x10
c001c89f:	eb 13                	jmp    c001c8b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c8a1:	8d 76 00             	lea    esi,[esi+0x0]
c001c8a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8a8:	8b 00                	mov    eax,DWORD PTR [eax]
c001c8aa:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c8ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8b1:	89 10                	mov    DWORD PTR [eax],edx
c001c8b3:	90                   	nop
c001c8b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8b8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c8bb:	8d 50 ff             	lea    edx,[eax-0x1]
c001c8be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8c2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c8c5:	8d 76 00             	lea    esi,[esi+0x0]
c001c8c8:	83 c4 0c             	add    esp,0xc
c001c8cb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001c8cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001c8cc:	83 ec 0c             	sub    esp,0xc
c001c8cf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c8d4:	75 12                	jne    c001c8e8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001c8d6:	83 ec 0c             	sub    esp,0xc
c001c8d9:	68 94 d9 01 c0       	push   0xc001d994
c001c8de:	e8 80 38 ff ff       	call   c0010163 <KePanic(char const*)>
c001c8e3:	83 c4 10             	add    esp,0x10
c001c8e6:	66 90                	xchg   ax,ax
c001c8e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8ec:	8b 00                	mov    eax,DWORD PTR [eax]
c001c8ee:	85 c0                	test   eax,eax
c001c8f0:	74 36                	je     c001c928 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c8f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c8f9:	85 c0                	test   eax,eax
c001c8fb:	74 2b                	je     c001c928 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c8fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c901:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c904:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c908:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001c90b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c90f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c913:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c91a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c91d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c924:	eb 6a                	jmp    c001c990 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c926:	66 90                	xchg   ax,ax
c001c928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c92c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c92e:	85 c0                	test   eax,eax
c001c930:	75 4e                	jne    c001c980 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c936:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c939:	85 c0                	test   eax,eax
c001c93b:	75 43                	jne    c001c980 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c93d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c941:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c945:	89 10                	mov    DWORD PTR [eax],edx
c001c947:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c94b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c94f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c956:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c959:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c964:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c967:	85 c0                	test   eax,eax
c001c969:	74 25                	je     c001c990 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c96b:	83 ec 0c             	sub    esp,0xc
c001c96e:	68 b6 d9 01 c0       	push   0xc001d9b6
c001c973:	e8 eb 37 ff ff       	call   c0010163 <KePanic(char const*)>
c001c978:	83 c4 10             	add    esp,0x10
c001c97b:	eb 13                	jmp    c001c990 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c97d:	8d 76 00             	lea    esi,[esi+0x0]
c001c980:	83 ec 0c             	sub    esp,0xc
c001c983:	68 c0 d9 01 c0       	push   0xc001d9c0
c001c988:	e8 d6 37 ff ff       	call   c0010163 <KePanic(char const*)>
c001c98d:	83 c4 10             	add    esp,0x10
c001c990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c994:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c997:	8d 50 01             	lea    edx,[eax+0x1]
c001c99a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c99e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c9a1:	90                   	nop
c001c9a2:	83 c4 0c             	add    esp,0xc
c001c9a5:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001c9a8 <ACPI::~ACPI()>:
c001c9a8:	83 ec 0c             	sub    esp,0xc
c001c9ab:	ba c4 e5 01 c0       	mov    edx,0xc001e5c4
c001c9b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9b4:	89 10                	mov    DWORD PTR [eax],edx
c001c9b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9ba:	83 ec 0c             	sub    esp,0xc
c001c9bd:	50                   	push   eax
c001c9be:	e8 77 ee fe ff       	call   c000b83a <Device::~Device()>
c001c9c3:	83 c4 10             	add    esp,0x10
c001c9c6:	90                   	nop
c001c9c7:	83 c4 0c             	add    esp,0xc
c001c9ca:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001c9cc <ACPI::~ACPI()>:
c001c9cc:	83 ec 0c             	sub    esp,0xc
c001c9cf:	83 ec 0c             	sub    esp,0xc
c001c9d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c9d6:	e8 cd ff ff ff       	call   c001c9a8 <ACPI::~ACPI()>
c001c9db:	83 c4 10             	add    esp,0x10
c001c9de:	83 ec 08             	sub    esp,0x8
c001c9e1:	68 64 12 00 00       	push   0x1264
c001c9e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c9ea:	e8 13 da fe ff       	call   c000a402 <operator delete(void*, unsigned long)>
c001c9ef:	83 c4 10             	add    esp,0x10
c001c9f2:	83 c4 0c             	add    esp,0xc
c001c9f5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001c9f8 <LinkedList<Device>::~LinkedList()>:
c001c9f8:	90                   	nop
c001c9f9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001c9fc <LinkedList<Device>::isEmpty()>:
c001c9fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca00:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca02:	85 c0                	test   eax,eax
c001ca04:	75 0e                	jne    c001ca14 <LinkedList<Device>::isEmpty()+0x18>
c001ca06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ca0d:	85 c0                	test   eax,eax
c001ca0f:	75 03                	jne    c001ca14 <LinkedList<Device>::isEmpty()+0x18>
c001ca11:	b0 01                	mov    al,0x1
c001ca13:	c3                   	ret    
c001ca14:	b0 00                	mov    al,0x0
c001ca16:	90                   	nop
c001ca17:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001ca18 <LinkedList<Device>::getFirstElement()>:
c001ca18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca1c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca1e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001ca20 <LinkedList<Device>::removeFirst()>:
c001ca20:	83 ec 0c             	sub    esp,0xc
c001ca23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca27:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca29:	85 c0                	test   eax,eax
c001ca2b:	75 17                	jne    c001ca44 <LinkedList<Device>::removeFirst()+0x24>
c001ca2d:	83 ec 0c             	sub    esp,0xc
c001ca30:	68 cc d9 01 c0       	push   0xc001d9cc
c001ca35:	e8 29 37 ff ff       	call   c0010163 <KePanic(char const*)>
c001ca3a:	83 c4 10             	add    esp,0x10
c001ca3d:	e9 92 00 00 00       	jmp    c001cad4 <LinkedList<Device>::removeFirst()+0xb4>
c001ca42:	66 90                	xchg   ax,ax
c001ca44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca48:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ca4b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ca51:	85 c0                	test   eax,eax
c001ca53:	74 13                	je     c001ca68 <LinkedList<Device>::removeFirst()+0x48>
c001ca55:	83 ec 0c             	sub    esp,0xc
c001ca58:	68 17 da 01 c0       	push   0xc001da17
c001ca5d:	e8 01 37 ff ff       	call   c0010163 <KePanic(char const*)>
c001ca62:	83 c4 10             	add    esp,0x10
c001ca65:	8d 76 00             	lea    esi,[esi+0x0]
c001ca68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca6c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca6e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ca74:	85 c0                	test   eax,eax
c001ca76:	75 34                	jne    c001caac <LinkedList<Device>::removeFirst()+0x8c>
c001ca78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca7c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ca82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca86:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ca8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca91:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ca94:	83 f8 01             	cmp    eax,0x1
c001ca97:	74 27                	je     c001cac0 <LinkedList<Device>::removeFirst()+0xa0>
c001ca99:	83 ec 0c             	sub    esp,0xc
c001ca9c:	68 f0 d9 01 c0       	push   0xc001d9f0
c001caa1:	e8 bd 36 ff ff       	call   c0010163 <KePanic(char const*)>
c001caa6:	83 c4 10             	add    esp,0x10
c001caa9:	eb 15                	jmp    c001cac0 <LinkedList<Device>::removeFirst()+0xa0>
c001caab:	90                   	nop
c001caac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cab0:	8b 00                	mov    eax,DWORD PTR [eax]
c001cab2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001cab8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cabc:	89 10                	mov    DWORD PTR [eax],edx
c001cabe:	66 90                	xchg   ax,ax
c001cac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cac4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cac7:	8d 50 ff             	lea    edx,[eax-0x1]
c001caca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cace:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cad1:	8d 76 00             	lea    esi,[esi+0x0]
c001cad4:	83 c4 0c             	add    esp,0xc
c001cad7:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001cad8 <CPU::~CPU()>:
c001cad8:	83 ec 0c             	sub    esp,0xc
c001cadb:	ba 60 e7 01 c0       	mov    edx,0xc001e760
c001cae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cae4:	89 10                	mov    DWORD PTR [eax],edx
c001cae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caea:	83 ec 0c             	sub    esp,0xc
c001caed:	50                   	push   eax
c001caee:	e8 47 ed fe ff       	call   c000b83a <Device::~Device()>
c001caf3:	83 c4 10             	add    esp,0x10
c001caf6:	90                   	nop
c001caf7:	83 c4 0c             	add    esp,0xc
c001cafa:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001cafc <CPU::~CPU()>:
c001cafc:	83 ec 0c             	sub    esp,0xc
c001caff:	83 ec 0c             	sub    esp,0xc
c001cb02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb06:	e8 cd ff ff ff       	call   c001cad8 <CPU::~CPU()>
c001cb0b:	83 c4 10             	add    esp,0x10
c001cb0e:	83 ec 08             	sub    esp,0x8
c001cb11:	68 94 11 00 00       	push   0x1194
c001cb16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb1a:	e8 e3 d8 fe ff       	call   c000a402 <operator delete(void*, unsigned long)>
c001cb1f:	83 c4 10             	add    esp,0x10
c001cb22:	83 c4 0c             	add    esp,0xc
c001cb25:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001cb28 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001cb28:	90                   	nop
c001cb29:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001cb2c <ThreadControlBlock::ThreadControlBlock()>:
c001cb2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb30:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001cb37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb3b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001cb42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb46:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001cb4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb51:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001cb58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb5c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001cb63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb67:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001cb6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb6f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001cb73:	90                   	nop
c001cb74:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001cb78 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001cb78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb7c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cb82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb86:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cb8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb91:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cb98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb9c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cba2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cba6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cbad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbb1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cbb8:	90                   	nop
c001cbb9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001cbbc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001cbbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cbc0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001cbc3:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001cbc4 <PCI::~PCI()>:
c001cbc4:	83 ec 0c             	sub    esp,0xc
c001cbc7:	ba 1c f5 01 c0       	mov    edx,0xc001f51c
c001cbcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbd0:	89 10                	mov    DWORD PTR [eax],edx
c001cbd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbd6:	83 ec 0c             	sub    esp,0xc
c001cbd9:	50                   	push   eax
c001cbda:	e8 e5 e6 fe ff       	call   c000b2c4 <Bus::~Bus()>
c001cbdf:	83 c4 10             	add    esp,0x10
c001cbe2:	90                   	nop
c001cbe3:	83 c4 0c             	add    esp,0xc
c001cbe6:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001cbe8 <PCI::~PCI()>:
c001cbe8:	83 ec 0c             	sub    esp,0xc
c001cbeb:	83 ec 0c             	sub    esp,0xc
c001cbee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbf2:	e8 cd ff ff ff       	call   c001cbc4 <PCI::~PCI()>
c001cbf7:	83 c4 10             	add    esp,0x10
c001cbfa:	83 ec 08             	sub    esp,0x8
c001cbfd:	68 5c 01 00 00       	push   0x15c
c001cc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc06:	e8 f7 d7 fe ff       	call   c000a402 <operator delete(void*, unsigned long)>
c001cc0b:	83 c4 10             	add    esp,0x10
c001cc0e:	83 c4 0c             	add    esp,0xc
c001cc11:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001cc12 <IDE::~IDE()>:
c001cc12:	83 ec 0c             	sub    esp,0xc
c001cc15:	ba d0 f5 01 c0       	mov    edx,0xc001f5d0
c001cc1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc1e:	89 10                	mov    DWORD PTR [eax],edx
c001cc20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc24:	83 ec 0c             	sub    esp,0xc
c001cc27:	50                   	push   eax
c001cc28:	e8 87 f0 fe ff       	call   c000bcb4 <HardDiskController::~HardDiskController()>
c001cc2d:	83 c4 10             	add    esp,0x10
c001cc30:	90                   	nop
c001cc31:	83 c4 0c             	add    esp,0xc
c001cc34:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001cc36 <IDE::~IDE()>:
c001cc36:	83 ec 0c             	sub    esp,0xc
c001cc39:	83 ec 0c             	sub    esp,0xc
c001cc3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc40:	e8 cd ff ff ff       	call   c001cc12 <IDE::~IDE()>
c001cc45:	83 c4 10             	add    esp,0x10
c001cc48:	83 ec 08             	sub    esp,0x8
c001cc4b:	68 70 02 00 00       	push   0x270
c001cc50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc54:	e8 a9 d7 fe ff       	call   c000a402 <operator delete(void*, unsigned long)>
c001cc59:	83 c4 10             	add    esp,0x10
c001cc5c:	83 c4 0c             	add    esp,0xc
c001cc5f:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001cc60 <SATABus::~SATABus()>:
c001cc60:	83 ec 0c             	sub    esp,0xc
c001cc63:	ba 20 f6 01 c0       	mov    edx,0xc001f620
c001cc68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc6c:	89 10                	mov    DWORD PTR [eax],edx
c001cc6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc72:	83 ec 0c             	sub    esp,0xc
c001cc75:	50                   	push   eax
c001cc76:	e8 39 f0 fe ff       	call   c000bcb4 <HardDiskController::~HardDiskController()>
c001cc7b:	83 c4 10             	add    esp,0x10
c001cc7e:	90                   	nop
c001cc7f:	83 c4 0c             	add    esp,0xc
c001cc82:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001cc84 <SATABus::~SATABus()>:
c001cc84:	83 ec 0c             	sub    esp,0xc
c001cc87:	83 ec 0c             	sub    esp,0xc
c001cc8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc8e:	e8 cd ff ff ff       	call   c001cc60 <SATABus::~SATABus()>
c001cc93:	83 c4 10             	add    esp,0x10
c001cc96:	83 ec 08             	sub    esp,0x8
c001cc99:	68 64 01 00 00       	push   0x164
c001cc9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cca2:	e8 5b d7 fe ff       	call   c000a402 <operator delete(void*, unsigned long)>
c001cca7:	83 c4 10             	add    esp,0x10
c001ccaa:	83 c4 0c             	add    esp,0xc
c001ccad:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001ccae <ATA::~ATA()>:
c001ccae:	83 ec 0c             	sub    esp,0xc
c001ccb1:	ba 60 f6 01 c0       	mov    edx,0xc001f660
c001ccb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccba:	89 10                	mov    DWORD PTR [eax],edx
c001ccbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccc0:	83 ec 0c             	sub    esp,0xc
c001ccc3:	50                   	push   eax
c001ccc4:	e8 cd f0 fe ff       	call   c000bd96 <PhysicalDisk::~PhysicalDisk()>
c001ccc9:	83 c4 10             	add    esp,0x10
c001cccc:	90                   	nop
c001cccd:	83 c4 0c             	add    esp,0xc
c001ccd0:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001ccd2 <ATA::~ATA()>:
c001ccd2:	83 ec 0c             	sub    esp,0xc
c001ccd5:	83 ec 0c             	sub    esp,0xc
c001ccd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccdc:	e8 cd ff ff ff       	call   c001ccae <ATA::~ATA()>
c001cce1:	83 c4 10             	add    esp,0x10
c001cce4:	83 ec 08             	sub    esp,0x8
c001cce7:	68 7c 01 00 00       	push   0x17c
c001ccec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccf0:	e8 0d d7 fe ff       	call   c000a402 <operator delete(void*, unsigned long)>
c001ccf5:	83 c4 10             	add    esp,0x10
c001ccf8:	83 c4 0c             	add    esp,0xc
c001ccfb:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001ccfc <ATAPI::~ATAPI()>:
c001ccfc:	83 ec 0c             	sub    esp,0xc
c001ccff:	ba a8 f6 01 c0       	mov    edx,0xc001f6a8
c001cd04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd08:	89 10                	mov    DWORD PTR [eax],edx
c001cd0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd0e:	83 ec 0c             	sub    esp,0xc
c001cd11:	50                   	push   eax
c001cd12:	e8 7f f0 fe ff       	call   c000bd96 <PhysicalDisk::~PhysicalDisk()>
c001cd17:	83 c4 10             	add    esp,0x10
c001cd1a:	90                   	nop
c001cd1b:	83 c4 0c             	add    esp,0xc
c001cd1e:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001cd20 <ATAPI::~ATAPI()>:
c001cd20:	83 ec 0c             	sub    esp,0xc
c001cd23:	83 ec 0c             	sub    esp,0xc
c001cd26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd2a:	e8 cd ff ff ff       	call   c001ccfc <ATAPI::~ATAPI()>
c001cd2f:	83 c4 10             	add    esp,0x10
c001cd32:	83 ec 08             	sub    esp,0x8
c001cd35:	68 84 01 00 00       	push   0x184
c001cd3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd3e:	e8 bf d6 fe ff       	call   c000a402 <operator delete(void*, unsigned long)>
c001cd43:	83 c4 10             	add    esp,0x10
c001cd46:	83 c4 0c             	add    esp,0xc
c001cd49:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001cd4a <SATA::~SATA()>:
c001cd4a:	83 ec 0c             	sub    esp,0xc
c001cd4d:	ba 5c f7 01 c0       	mov    edx,0xc001f75c
c001cd52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd56:	89 10                	mov    DWORD PTR [eax],edx
c001cd58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd5c:	83 ec 0c             	sub    esp,0xc
c001cd5f:	50                   	push   eax
c001cd60:	e8 31 f0 fe ff       	call   c000bd96 <PhysicalDisk::~PhysicalDisk()>
c001cd65:	83 c4 10             	add    esp,0x10
c001cd68:	90                   	nop
c001cd69:	83 c4 0c             	add    esp,0xc
c001cd6c:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001cd6e <SATA::~SATA()>:
c001cd6e:	83 ec 0c             	sub    esp,0xc
c001cd71:	83 ec 0c             	sub    esp,0xc
c001cd74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd78:	e8 cd ff ff ff       	call   c001cd4a <SATA::~SATA()>
c001cd7d:	83 c4 10             	add    esp,0x10
c001cd80:	83 ec 08             	sub    esp,0x8
c001cd83:	68 7c 01 00 00       	push   0x17c
c001cd88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd8c:	e8 71 d6 fe ff       	call   c000a402 <operator delete(void*, unsigned long)>
c001cd91:	83 c4 10             	add    esp,0x10
c001cd94:	83 c4 0c             	add    esp,0xc
c001cd97:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001cd98 <SATAPI::~SATAPI()>:
c001cd98:	83 ec 0c             	sub    esp,0xc
c001cd9b:	ba 94 f8 01 c0       	mov    edx,0xc001f894
c001cda0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cda4:	89 10                	mov    DWORD PTR [eax],edx
c001cda6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdaa:	83 ec 0c             	sub    esp,0xc
c001cdad:	50                   	push   eax
c001cdae:	e8 e3 ef fe ff       	call   c000bd96 <PhysicalDisk::~PhysicalDisk()>
c001cdb3:	83 c4 10             	add    esp,0x10
c001cdb6:	90                   	nop
c001cdb7:	83 c4 0c             	add    esp,0xc
c001cdba:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001cdbc <SATAPI::~SATAPI()>:
c001cdbc:	83 ec 0c             	sub    esp,0xc
c001cdbf:	83 ec 0c             	sub    esp,0xc
c001cdc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdc6:	e8 cd ff ff ff       	call   c001cd98 <SATAPI::~SATAPI()>
c001cdcb:	83 c4 10             	add    esp,0x10
c001cdce:	83 ec 08             	sub    esp,0x8
c001cdd1:	68 84 01 00 00       	push   0x184
c001cdd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdda:	e8 23 d6 fe ff       	call   c000a402 <operator delete(void*, unsigned long)>
c001cddf:	83 c4 10             	add    esp,0x10
c001cde2:	83 c4 0c             	add    esp,0xc
c001cde5:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001cde6 <IOAPIC::~IOAPIC()>:
c001cde6:	83 ec 0c             	sub    esp,0xc
c001cde9:	ba d4 f8 01 c0       	mov    edx,0xc001f8d4
c001cdee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdf2:	89 10                	mov    DWORD PTR [eax],edx
c001cdf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdf8:	83 ec 0c             	sub    esp,0xc
c001cdfb:	50                   	push   eax
c001cdfc:	e8 39 ea fe ff       	call   c000b83a <Device::~Device()>
c001ce01:	83 c4 10             	add    esp,0x10
c001ce04:	90                   	nop
c001ce05:	83 c4 0c             	add    esp,0xc
c001ce08:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001ce0a <IOAPIC::~IOAPIC()>:
c001ce0a:	83 ec 0c             	sub    esp,0xc
c001ce0d:	83 ec 0c             	sub    esp,0xc
c001ce10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce14:	e8 cd ff ff ff       	call   c001cde6 <IOAPIC::~IOAPIC()>
c001ce19:	83 c4 10             	add    esp,0x10
c001ce1c:	83 ec 08             	sub    esp,0x8
c001ce1f:	68 68 01 00 00       	push   0x168
c001ce24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce28:	e8 d5 d5 fe ff       	call   c000a402 <operator delete(void*, unsigned long)>
c001ce2d:	83 c4 10             	add    esp,0x10
c001ce30:	83 c4 0c             	add    esp,0xc
c001ce33:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001ce34 <APICTimer::~APICTimer()>:
c001ce34:	83 ec 0c             	sub    esp,0xc
c001ce37:	ba 1c f9 01 c0       	mov    edx,0xc001f91c
c001ce3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce40:	89 10                	mov    DWORD PTR [eax],edx
c001ce42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce46:	83 ec 0c             	sub    esp,0xc
c001ce49:	50                   	push   eax
c001ce4a:	e8 11 03 ff ff       	call   c000d160 <Timer::~Timer()>
c001ce4f:	83 c4 10             	add    esp,0x10
c001ce52:	90                   	nop
c001ce53:	83 c4 0c             	add    esp,0xc
c001ce56:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001ce58 <APICTimer::~APICTimer()>:
c001ce58:	83 ec 0c             	sub    esp,0xc
c001ce5b:	83 ec 0c             	sub    esp,0xc
c001ce5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce62:	e8 cd ff ff ff       	call   c001ce34 <APICTimer::~APICTimer()>
c001ce67:	83 c4 10             	add    esp,0x10
c001ce6a:	83 ec 08             	sub    esp,0x8
c001ce6d:	68 60 01 00 00       	push   0x160
c001ce72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce76:	e8 87 d5 fe ff       	call   c000a402 <operator delete(void*, unsigned long)>
c001ce7b:	83 c4 10             	add    esp,0x10
c001ce7e:	83 c4 0c             	add    esp,0xc
c001ce81:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001ce84 <PIT::~PIT()>:
c001ce84:	83 ec 0c             	sub    esp,0xc
c001ce87:	ba 6c f9 01 c0       	mov    edx,0xc001f96c
c001ce8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce90:	89 10                	mov    DWORD PTR [eax],edx
c001ce92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce96:	83 ec 0c             	sub    esp,0xc
c001ce99:	50                   	push   eax
c001ce9a:	e8 c1 02 ff ff       	call   c000d160 <Timer::~Timer()>
c001ce9f:	83 c4 10             	add    esp,0x10
c001cea2:	90                   	nop
c001cea3:	83 c4 0c             	add    esp,0xc
c001cea6:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001cea8 <PIT::~PIT()>:
c001cea8:	83 ec 0c             	sub    esp,0xc
c001ceab:	83 ec 0c             	sub    esp,0xc
c001ceae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ceb2:	e8 cd ff ff ff       	call   c001ce84 <PIT::~PIT()>
c001ceb7:	83 c4 10             	add    esp,0x10
c001ceba:	83 ec 08             	sub    esp,0x8
c001cebd:	68 5c 01 00 00       	push   0x15c
c001cec2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cec6:	e8 37 d5 fe ff       	call   c000a402 <operator delete(void*, unsigned long)>
c001cecb:	83 c4 10             	add    esp,0x10
c001cece:	83 c4 0c             	add    esp,0xc
c001ced1:	c3                   	ret    
